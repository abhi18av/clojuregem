s(:begin,
  s(:send, nil, :require,
    s(:str, "cgi/util")),
  s(:class,
    s(:const, nil, :ERB), nil,
    s(:begin,
      s(:casgn, nil, :Revision,
        s(:str, "$Date::                           $")),
      s(:defs,
        s(:self), :version,
        s(:args),
        s(:dstr,
          s(:str, "erb.rb [2.1.0 "),
          s(:begin,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :ERB), :Revision), :split), :[],
              s(:int, 1))),
          s(:str, "]"))))),
  s(:class,
    s(:const, nil, :ERB), nil,
    s(:class,
      s(:const, nil, :Compiler), nil,
      s(:begin,
        s(:class,
          s(:const, nil, :PercentLine), nil,
          s(:begin,
            s(:def, :initialize,
              s(:args,
                s(:arg, :str)),
              s(:ivasgn, :@value,
                s(:lvar, :str))),
            s(:send, nil, :attr_reader,
              s(:sym, :value)),
            s(:alias,
              s(:sym, :to_s),
              s(:sym, :value)),
            s(:def, :empty?,
              s(:args),
              s(:send,
                s(:ivar, :@value), :empty?)))),
        s(:class,
          s(:const, nil, :Scanner), nil,
          s(:begin,
            s(:ivasgn, :@scanner_map,
              s(:hash)),
            s(:defs,
              s(:self), :regist_scanner,
              s(:args,
                s(:arg, :klass),
                s(:arg, :trim_mode),
                s(:arg, :percent)),
              s(:send,
                s(:ivar, :@scanner_map), :[]=,
                s(:array,
                  s(:lvar, :trim_mode),
                  s(:lvar, :percent)),
                s(:lvar, :klass))),
            s(:defs,
              s(:self), :default_scanner=,
              s(:args,
                s(:arg, :klass)),
              s(:ivasgn, :@default_scanner,
                s(:lvar, :klass))),
            s(:defs,
              s(:self), :make_scanner,
              s(:args,
                s(:arg, :src),
                s(:arg, :trim_mode),
                s(:arg, :percent)),
              s(:begin,
                s(:lvasgn, :klass,
                  s(:send,
                    s(:ivar, :@scanner_map), :fetch,
                    s(:array,
                      s(:lvar, :trim_mode),
                      s(:lvar, :percent)),
                    s(:ivar, :@default_scanner))),
                s(:send,
                  s(:lvar, :klass), :new,
                  s(:lvar, :src),
                  s(:lvar, :trim_mode),
                  s(:lvar, :percent)))),
            s(:def, :initialize,
              s(:args,
                s(:arg, :src),
                s(:arg, :trim_mode),
                s(:arg, :percent)),
              s(:begin,
                s(:ivasgn, :@src,
                  s(:lvar, :src)),
                s(:ivasgn, :@stag,
                  s(:nil)))),
            s(:send, nil, :attr_accessor,
              s(:sym, :stag)),
            s(:def, :scan,
              s(:args), nil))),
        s(:class,
          s(:const, nil, :TrimScanner),
          s(:const, nil, :Scanner),
          s(:begin,
            s(:def, :initialize,
              s(:args,
                s(:arg, :src),
                s(:arg, :trim_mode),
                s(:arg, :percent)),
              s(:begin,
                s(:zsuper),
                s(:ivasgn, :@trim_mode,
                  s(:lvar, :trim_mode)),
                s(:ivasgn, :@percent,
                  s(:lvar, :percent)),
                s(:if,
                  s(:send,
                    s(:ivar, :@trim_mode), :==,
                    s(:str, ">")),
                  s(:ivasgn, :@scan_line,
                    s(:send,
                      s(:self), :method,
                      s(:sym, :trim_line1))),
                  s(:if,
                    s(:send,
                      s(:ivar, :@trim_mode), :==,
                      s(:str, "<>")),
                    s(:ivasgn, :@scan_line,
                      s(:send,
                        s(:self), :method,
                        s(:sym, :trim_line2))),
                    s(:if,
                      s(:send,
                        s(:ivar, :@trim_mode), :==,
                        s(:str, "-")),
                      s(:ivasgn, :@scan_line,
                        s(:send,
                          s(:self), :method,
                          s(:sym, :explicit_trim_line))),
                      s(:ivasgn, :@scan_line,
                        s(:send,
                          s(:self), :method,
                          s(:sym, :scan_line)))))))),
            s(:send, nil, :attr_accessor,
              s(:sym, :stag)),
            s(:def, :scan,
              s(:args,
                s(:blockarg, :block)),
              s(:begin,
                s(:ivasgn, :@stag,
                  s(:nil)),
                s(:if,
                  s(:ivar, :@percent),
                  s(:block,
                    s(:send,
                      s(:ivar, :@src), :each_line),
                    s(:args,
                      s(:arg, :line)),
                    s(:send, nil, :percent_line,
                      s(:lvar, :line),
                      s(:block_pass,
                        s(:lvar, :block)))),
                  s(:send,
                    s(:ivar, :@scan_line), :call,
                    s(:ivar, :@src),
                    s(:block_pass,
                      s(:lvar, :block)))),
                s(:nil))),
            s(:def, :percent_line,
              s(:args,
                s(:arg, :line),
                s(:blockarg, :block)),
              s(:begin,
                s(:if,
                  s(:or,
                    s(:ivar, :@stag),
                    s(:send,
                      s(:send,
                        s(:lvar, :line), :[],
                        s(:int, 0)), :!=,
                      s(:str, "%"))),
                  s(:return,
                    s(:send,
                      s(:ivar, :@scan_line), :call,
                      s(:lvar, :line),
                      s(:block_pass,
                        s(:lvar, :block)))), nil),
                s(:send,
                  s(:lvar, :line), :[]=,
                  s(:int, 0),
                  s(:str, "")),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :line), :[],
                      s(:int, 0)), :==,
                    s(:str, "%")),
                  s(:send,
                    s(:ivar, :@scan_line), :call,
                    s(:lvar, :line),
                    s(:block_pass,
                      s(:lvar, :block))),
                  s(:yield,
                    s(:send,
                      s(:const, nil, :PercentLine), :new,
                      s(:send,
                        s(:lvar, :line), :chomp)))))),
            s(:def, :scan_line,
              s(:args,
                s(:arg, :line)),
              s(:block,
                s(:send,
                  s(:lvar, :line), :scan,
                  s(:regexp,
                    s(:str, "(.*?)(<%%|%%>|<%=|<%#|<%|%>|\\n|\\z)"),
                    s(:regopt, :m))),
                s(:args,
                  s(:arg, :tokens)),
                s(:block,
                  s(:send,
                    s(:lvar, :tokens), :each),
                  s(:args,
                    s(:arg, :token)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :token), :empty?),
                      s(:next), nil),
                    s(:yield,
                      s(:lvar, :token)))))),
            s(:def, :trim_line1,
              s(:args,
                s(:arg, :line)),
              s(:block,
                s(:send,
                  s(:lvar, :line), :scan,
                  s(:regexp,
                    s(:str, "(.*?)(<%%|%%>|<%=|<%#|<%|%>\\n|%>|\\n|\\z)"),
                    s(:regopt, :m))),
                s(:args,
                  s(:arg, :tokens)),
                s(:block,
                  s(:send,
                    s(:lvar, :tokens), :each),
                  s(:args,
                    s(:arg, :token)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :token), :empty?),
                      s(:next), nil),
                    s(:if,
                      s(:send,
                        s(:lvar, :token), :==,
                        s(:str, "%>\n")),
                      s(:begin,
                        s(:yield,
                          s(:str, "%>")),
                        s(:yield,
                          s(:sym, :cr))),
                      s(:yield,
                        s(:lvar, :token))))))),
            s(:def, :trim_line2,
              s(:args,
                s(:arg, :line)),
              s(:begin,
                s(:lvasgn, :head,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :line), :scan,
                    s(:regexp,
                      s(:str, "(.*?)(<%%|%%>|<%=|<%#|<%|%>\\n|%>|\\n|\\z)"),
                      s(:regopt, :m))),
                  s(:args,
                    s(:arg, :tokens)),
                  s(:block,
                    s(:send,
                      s(:lvar, :tokens), :each),
                    s(:args,
                      s(:arg, :token)),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :token), :empty?),
                        s(:next), nil),
                      s(:if,
                        s(:lvar, :head), nil,
                        s(:lvasgn, :head,
                          s(:lvar, :token))),
                      s(:if,
                        s(:send,
                          s(:lvar, :token), :==,
                          s(:str, "%>\n")),
                        s(:begin,
                          s(:yield,
                            s(:str, "%>")),
                          s(:if,
                            s(:send, nil, :is_erb_stag?,
                              s(:lvar, :head)),
                            s(:yield,
                              s(:sym, :cr)),
                            s(:yield,
                              s(:str, "\n"))),
                          s(:lvasgn, :head,
                            s(:nil))),
                        s(:begin,
                          s(:yield,
                            s(:lvar, :token)),
                          s(:if,
                            s(:send,
                              s(:lvar, :token), :==,
                              s(:str, "\n")),
                            s(:lvasgn, :head,
                              s(:nil)), nil)))))))),
            s(:def, :explicit_trim_line,
              s(:args,
                s(:arg, :line)),
              s(:block,
                s(:send,
                  s(:lvar, :line), :scan,
                  s(:regexp,
                    s(:str, "(.*?)(^[ \\t]*<%\\-|<%\\-|<%%|%%>|<%=|<%#|<%|-%>\\n|-%>|%>|\\z)"),
                    s(:regopt, :m))),
                s(:args,
                  s(:arg, :tokens)),
                s(:block,
                  s(:send,
                    s(:lvar, :tokens), :each),
                  s(:args,
                    s(:arg, :token)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :token), :empty?),
                      s(:next), nil),
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:ivar, :@stag), :nil?),
                        s(:match_with_lvasgn,
                          s(:regexp,
                            s(:str, "[ \\t]*<%-"),
                            s(:regopt)),
                          s(:lvar, :token))),
                      s(:yield,
                        s(:str, "<%")),
                      s(:if,
                        s(:and,
                          s(:ivar, :@stag),
                          s(:send,
                            s(:lvar, :token), :==,
                            s(:str, "-%>\n"))),
                        s(:begin,
                          s(:yield,
                            s(:str, "%>")),
                          s(:yield,
                            s(:sym, :cr))),
                        s(:if,
                          s(:and,
                            s(:ivar, :@stag),
                            s(:send,
                              s(:lvar, :token), :==,
                              s(:str, "-%>"))),
                          s(:yield,
                            s(:str, "%>")),
                          s(:yield,
                            s(:lvar, :token))))))))),
            s(:casgn, nil, :ERB_STAG,
              s(:array,
                s(:str, "<%="),
                s(:str, "<%#"),
                s(:str, "<%"))),
            s(:def, :is_erb_stag?,
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:const, nil, :ERB_STAG), :member?,
                s(:lvar, :s))))),
        s(:send,
          s(:const, nil, :Scanner), :default_scanner=,
          s(:const, nil, :TrimScanner)),
        s(:class,
          s(:const, nil, :SimpleScanner),
          s(:const, nil, :Scanner),
          s(:def, :scan,
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@src), :scan,
                s(:regexp,
                  s(:str, "(.*?)(<%%|%%>|<%=|<%#|<%|%>|\\n|\\z)"),
                  s(:regopt, :m))),
              s(:args,
                s(:arg, :tokens)),
              s(:block,
                s(:send,
                  s(:lvar, :tokens), :each),
                s(:args,
                  s(:arg, :token)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :token), :empty?),
                    s(:next), nil),
                  s(:yield,
                    s(:lvar, :token))))))),
        s(:send,
          s(:const, nil, :Scanner), :regist_scanner,
          s(:const, nil, :SimpleScanner),
          s(:nil),
          s(:false)),
        s(:kwbegin,
          s(:rescue,
            s(:begin,
              s(:send, nil, :require,
                s(:str, "strscan")),
              s(:class,
                s(:const, nil, :SimpleScanner2),
                s(:const, nil, :Scanner),
                s(:def, :scan,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :stag_reg,
                      s(:regexp,
                        s(:str, "(.*?)(<%[%=#]?|\\z)"),
                        s(:regopt, :m))),
                    s(:lvasgn, :etag_reg,
                      s(:regexp,
                        s(:str, "(.*?)(%%?>|\\z)"),
                        s(:regopt, :m))),
                    s(:lvasgn, :scanner,
                      s(:send,
                        s(:const, nil, :StringScanner), :new,
                        s(:ivar, :@src))),
                    s(:while,
                      s(:send,
                        s(:send,
                          s(:lvar, :scanner), :eos?), :!),
                      s(:begin,
                        s(:send,
                          s(:lvar, :scanner), :scan,
                          s(:if,
                            s(:ivar, :@stag),
                            s(:lvar, :etag_reg),
                            s(:lvar, :stag_reg))),
                        s(:yield,
                          s(:send,
                            s(:lvar, :scanner), :[],
                            s(:int, 1))),
                        s(:yield,
                          s(:send,
                            s(:lvar, :scanner), :[],
                            s(:int, 2)))))))),
              s(:send,
                s(:const, nil, :Scanner), :regist_scanner,
                s(:const, nil, :SimpleScanner2),
                s(:nil),
                s(:false)),
              s(:class,
                s(:const, nil, :ExplicitScanner),
                s(:const, nil, :Scanner),
                s(:def, :scan,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :stag_reg,
                      s(:regexp,
                        s(:str, "(.*?)(^[ \\t]*<%-|<%%|<%=|<%#|<%-|<%|\\z)"),
                        s(:regopt, :m))),
                    s(:lvasgn, :etag_reg,
                      s(:regexp,
                        s(:str, "(.*?)(%%>|-%>|%>|\\z)"),
                        s(:regopt, :m))),
                    s(:lvasgn, :scanner,
                      s(:send,
                        s(:const, nil, :StringScanner), :new,
                        s(:ivar, :@src))),
                    s(:while,
                      s(:send,
                        s(:send,
                          s(:lvar, :scanner), :eos?), :!),
                      s(:begin,
                        s(:send,
                          s(:lvar, :scanner), :scan,
                          s(:if,
                            s(:ivar, :@stag),
                            s(:lvar, :etag_reg),
                            s(:lvar, :stag_reg))),
                        s(:yield,
                          s(:send,
                            s(:lvar, :scanner), :[],
                            s(:int, 1))),
                        s(:lvasgn, :elem,
                          s(:send,
                            s(:lvar, :scanner), :[],
                            s(:int, 2))),
                        s(:if,
                          s(:match_with_lvasgn,
                            s(:regexp,
                              s(:str, "[ \\t]*<%-"),
                              s(:regopt)),
                            s(:lvar, :elem)),
                          s(:yield,
                            s(:str, "<%")),
                          s(:if,
                            s(:send,
                              s(:lvar, :elem), :==,
                              s(:str, "-%>")),
                            s(:begin,
                              s(:yield,
                                s(:str, "%>")),
                              s(:if,
                                s(:send,
                                  s(:lvar, :scanner), :scan,
                                  s(:regexp,
                                    s(:str, "(\\n|\\z)"),
                                    s(:regopt))),
                                s(:yield,
                                  s(:sym, :cr)), nil)),
                            s(:yield,
                              s(:lvar, :elem))))))))),
              s(:send,
                s(:const, nil, :Scanner), :regist_scanner,
                s(:const, nil, :ExplicitScanner),
                s(:str, "-"),
                s(:false))),
            s(:resbody,
              s(:array,
                s(:const, nil, :LoadError)), nil, nil), nil)),
        s(:class,
          s(:const, nil, :Buffer), nil,
          s(:begin,
            s(:def, :initialize,
              s(:args,
                s(:arg, :compiler),
                s(:optarg, :enc,
                  s(:nil))),
              s(:begin,
                s(:ivasgn, :@compiler,
                  s(:lvar, :compiler)),
                s(:ivasgn, :@line,
                  s(:array)),
                s(:ivasgn, :@script,
                  s(:if,
                    s(:lvar, :enc),
                    s(:dstr,
                      s(:str, "#coding:"),
                      s(:begin,
                        s(:lvar, :enc)),
                      s(:str, "\n")),
                    s(:str, ""))),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:ivar, :@compiler), :pre_cmd), :each),
                  s(:args,
                    s(:arg, :x)),
                  s(:send, nil, :push,
                    s(:lvar, :x))))),
            s(:send, nil, :attr_reader,
              s(:sym, :script)),
            s(:def, :push,
              s(:args,
                s(:arg, :cmd)),
              s(:send,
                s(:ivar, :@line), :<<,
                s(:lvar, :cmd))),
            s(:def, :cr,
              s(:args),
              s(:begin,
                s(:send,
                  s(:ivar, :@script), :<<,
                  s(:begin,
                    s(:send,
                      s(:ivar, :@line), :join,
                      s(:str, "; ")))),
                s(:ivasgn, :@line,
                  s(:array)),
                s(:send,
                  s(:ivar, :@script), :<<,
                  s(:str, "\n")))),
            s(:def, :close,
              s(:args),
              s(:begin,
                s(:if,
                  s(:ivar, :@line), nil,
                  s(:return)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:ivar, :@compiler), :post_cmd), :each),
                  s(:args,
                    s(:arg, :x)),
                  s(:send, nil, :push,
                    s(:lvar, :x))),
                s(:send,
                  s(:ivar, :@script), :<<,
                  s(:begin,
                    s(:send,
                      s(:ivar, :@line), :join,
                      s(:str, "; ")))),
                s(:ivasgn, :@line,
                  s(:nil)))))),
        s(:def, :content_dump,
          s(:args,
            s(:arg, :s)),
          s(:begin,
            s(:lvasgn, :n,
              s(:send,
                s(:lvar, :s), :count,
                s(:str, "\n"))),
            s(:if,
              s(:send,
                s(:lvar, :n), :>,
                s(:int, 0)),
              s(:send,
                s(:send,
                  s(:lvar, :s), :dump), :+,
                s(:send,
                  s(:str, "\n"), :*,
                  s(:lvar, :n))),
              s(:send,
                s(:lvar, :s), :dump)))),
        s(:def, :add_put_cmd,
          s(:args,
            s(:arg, :out),
            s(:arg, :content)),
          s(:send,
            s(:lvar, :out), :push,
            s(:dstr,
              s(:begin,
                s(:ivar, :@put_cmd)),
              s(:str, " "),
              s(:begin,
                s(:send, nil, :content_dump,
                  s(:lvar, :content)))))),
        s(:def, :add_insert_cmd,
          s(:args,
            s(:arg, :out),
            s(:arg, :content)),
          s(:send,
            s(:lvar, :out), :push,
            s(:dstr,
              s(:begin,
                s(:ivar, :@insert_cmd)),
              s(:str, "(("),
              s(:begin,
                s(:lvar, :content)),
              s(:str, ").to_s)")))),
        s(:def, :compile,
          s(:args,
            s(:arg, :s)),
          s(:begin,
            s(:lvasgn, :enc,
              s(:send,
                s(:lvar, :s), :encoding)),
            s(:if,
              s(:send,
                s(:lvar, :enc), :dummy?),
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :enc)),
                  s(:str, " is not ASCII compatible"))), nil),
            s(:lvasgn, :s,
              s(:send,
                s(:lvar, :s), :b)),
            s(:lvasgn, :enc,
              s(:or,
                s(:send, nil, :detect_magic_comment,
                  s(:lvar, :s)),
                s(:lvar, :enc))),
            s(:lvasgn, :out,
              s(:send,
                s(:const, nil, :Buffer), :new,
                s(:self),
                s(:lvar, :enc))),
            s(:lvasgn, :content,
              s(:str, "")),
            s(:lvasgn, :scanner,
              s(:send, nil, :make_scanner,
                s(:lvar, :s))),
            s(:block,
              s(:send,
                s(:lvar, :scanner), :scan),
              s(:args,
                s(:arg, :token)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :token), :nil?),
                  s(:next), nil),
                s(:if,
                  s(:send,
                    s(:lvar, :token), :==,
                    s(:str, "")),
                  s(:next), nil),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :scanner), :stag), :nil?),
                  s(:case,
                    s(:lvar, :token),
                    s(:when,
                      s(:const, nil, :PercentLine),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :content), :size), :>,
                            s(:int, 0)),
                          s(:send, nil, :add_put_cmd,
                            s(:lvar, :out),
                            s(:lvar, :content)), nil),
                        s(:lvasgn, :content,
                          s(:str, "")),
                        s(:send,
                          s(:lvar, :out), :push,
                          s(:send,
                            s(:lvar, :token), :to_s)),
                        s(:send,
                          s(:lvar, :out), :cr))),
                    s(:when,
                      s(:sym, :cr),
                      s(:send,
                        s(:lvar, :out), :cr)),
                    s(:when,
                      s(:str, "<%"),
                      s(:str, "<%="),
                      s(:str, "<%#"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :scanner), :stag=,
                          s(:lvar, :token)),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :content), :size), :>,
                            s(:int, 0)),
                          s(:send, nil, :add_put_cmd,
                            s(:lvar, :out),
                            s(:lvar, :content)), nil),
                        s(:lvasgn, :content,
                          s(:str, "")))),
                    s(:when,
                      s(:str, "\n"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :content), :<<,
                          s(:str, "\n")),
                        s(:send, nil, :add_put_cmd,
                          s(:lvar, :out),
                          s(:lvar, :content)),
                        s(:lvasgn, :content,
                          s(:str, "")))),
                    s(:when,
                      s(:str, "<%%"),
                      s(:send,
                        s(:lvar, :content), :<<,
                        s(:str, "<%"))),
                    s(:send,
                      s(:lvar, :content), :<<,
                      s(:lvar, :token))),
                  s(:case,
                    s(:lvar, :token),
                    s(:when,
                      s(:str, "%>"),
                      s(:begin,
                        s(:case,
                          s(:send,
                            s(:lvar, :scanner), :stag),
                          s(:when,
                            s(:str, "<%"),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:lvar, :content), :[],
                                  s(:int, -1)), :==,
                                s(:str, "\n")),
                              s(:begin,
                                s(:send,
                                  s(:lvar, :content), :chop!),
                                s(:send,
                                  s(:lvar, :out), :push,
                                  s(:lvar, :content)),
                                s(:send,
                                  s(:lvar, :out), :cr)),
                              s(:send,
                                s(:lvar, :out), :push,
                                s(:lvar, :content)))),
                          s(:when,
                            s(:str, "<%="),
                            s(:send, nil, :add_insert_cmd,
                              s(:lvar, :out),
                              s(:lvar, :content))),
                          s(:when,
                            s(:str, "<%#"), nil), nil),
                        s(:send,
                          s(:lvar, :scanner), :stag=,
                          s(:nil)),
                        s(:lvasgn, :content,
                          s(:str, "")))),
                    s(:when,
                      s(:str, "%%>"),
                      s(:send,
                        s(:lvar, :content), :<<,
                        s(:str, "%>"))),
                    s(:send,
                      s(:lvar, :content), :<<,
                      s(:lvar, :token)))))),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :content), :size), :>,
                s(:int, 0)),
              s(:send, nil, :add_put_cmd,
                s(:lvar, :out),
                s(:lvar, :content)), nil),
            s(:send,
              s(:lvar, :out), :close),
            s(:return,
              s(:send,
                s(:lvar, :out), :script),
              s(:lvar, :enc)))),
        s(:def, :prepare_trim_mode,
          s(:args,
            s(:arg, :mode)),
          s(:case,
            s(:lvar, :mode),
            s(:when,
              s(:int, 1),
              s(:return,
                s(:array,
                  s(:false),
                  s(:str, ">")))),
            s(:when,
              s(:int, 2),
              s(:return,
                s(:array,
                  s(:false),
                  s(:str, "<>")))),
            s(:when,
              s(:int, 0),
              s(:return,
                s(:array,
                  s(:false),
                  s(:nil)))),
            s(:when,
              s(:const, nil, :String),
              s(:begin,
                s(:lvasgn, :perc,
                  s(:send,
                    s(:lvar, :mode), :include?,
                    s(:str, "%"))),
                s(:if,
                  s(:send,
                    s(:lvar, :mode), :include?,
                    s(:str, "-")),
                  s(:return,
                    s(:array,
                      s(:lvar, :perc),
                      s(:str, "-"))),
                  s(:if,
                    s(:send,
                      s(:lvar, :mode), :include?,
                      s(:str, "<>")),
                    s(:return,
                      s(:array,
                        s(:lvar, :perc),
                        s(:str, "<>"))),
                    s(:if,
                      s(:send,
                        s(:lvar, :mode), :include?,
                        s(:str, ">")),
                      s(:return,
                        s(:array,
                          s(:lvar, :perc),
                          s(:str, ">"))),
                      s(:array,
                        s(:lvar, :perc),
                        s(:nil))))))),
            s(:return,
              s(:array,
                s(:false),
                s(:nil))))),
        s(:def, :make_scanner,
          s(:args,
            s(:arg, :src)),
          s(:send,
            s(:const, nil, :Scanner), :make_scanner,
            s(:lvar, :src),
            s(:ivar, :@trim_mode),
            s(:ivar, :@percent))),
        s(:def, :initialize,
          s(:args,
            s(:arg, :trim_mode)),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:ivasgn, :@percent),
                s(:ivasgn, :@trim_mode)),
              s(:send, nil, :prepare_trim_mode,
                s(:lvar, :trim_mode))),
            s(:ivasgn, :@put_cmd,
              s(:str, "print")),
            s(:ivasgn, :@insert_cmd,
              s(:ivar, :@put_cmd)),
            s(:ivasgn, :@pre_cmd,
              s(:array)),
            s(:ivasgn, :@post_cmd,
              s(:array)))),
        s(:send, nil, :attr_reader,
          s(:sym, :percent),
          s(:sym, :trim_mode)),
        s(:send, nil, :attr_accessor,
          s(:sym, :put_cmd)),
        s(:send, nil, :attr_accessor,
          s(:sym, :insert_cmd)),
        s(:send, nil, :attr_accessor,
          s(:sym, :pre_cmd)),
        s(:send, nil, :attr_accessor,
          s(:sym, :post_cmd)),
        s(:send, nil, :private),
        s(:def, :detect_magic_comment,
          s(:args,
            s(:arg, :s)),
          s(:if,
            s(:or,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A<%#(.*)%>"),
                  s(:regopt)),
                s(:lvar, :s)),
              s(:begin,
                s(:and,
                  s(:ivar, :@percent),
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "\\A%#(.*)"),
                      s(:regopt)),
                    s(:lvar, :s))))),
            s(:begin,
              s(:lvasgn, :comment,
                s(:nth_ref, 1)),
              s(:if,
                s(:send,
                  s(:lvar, :comment), :[],
                  s(:regexp,
                    s(:str, "-\\*-\\s*(.*?)\\s*-*-$"),
                    s(:regopt))),
                s(:lvasgn, :comment,
                  s(:nth_ref, 1)), nil),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "coding\\s*[=:]\\s*([[:alnum:]\\-_]+)"),
                    s(:regopt)),
                  s(:lvar, :comment)),
                s(:begin,
                  s(:lvasgn, :enc,
                    s(:send,
                      s(:nth_ref, 1), :sub,
                      s(:regexp,
                        s(:str, "-(?:mac|dos|unix)"),
                        s(:regopt, :i)),
                      s(:str, ""))),
                  s(:send,
                    s(:const, nil, :Encoding), :find,
                    s(:lvar, :enc))), nil)), nil))))),
  s(:class,
    s(:const, nil, :ERB), nil,
    s(:begin,
      s(:def, :initialize,
        s(:args,
          s(:arg, :str),
          s(:optarg, :safe_level,
            s(:nil)),
          s(:optarg, :trim_mode,
            s(:nil)),
          s(:optarg, :eoutvar,
            s(:str, "_erbout"))),
        s(:begin,
          s(:ivasgn, :@safe_level,
            s(:lvar, :safe_level)),
          s(:lvasgn, :compiler,
            s(:send, nil, :make_compiler,
              s(:lvar, :trim_mode))),
          s(:send, nil, :set_eoutvar,
            s(:lvar, :compiler),
            s(:lvar, :eoutvar)),
          s(:masgn,
            s(:mlhs,
              s(:ivasgn, :@src),
              s(:ivasgn, :@encoding)),
            s(:array,
              s(:splat,
                s(:send,
                  s(:lvar, :compiler), :compile,
                  s(:lvar, :str))))),
          s(:ivasgn, :@filename,
            s(:nil)),
          s(:ivasgn, :@lineno,
            s(:int, 0)))),
      s(:def, :make_compiler,
        s(:args,
          s(:arg, :trim_mode)),
        s(:send,
          s(:const,
            s(:const, nil, :ERB), :Compiler), :new,
          s(:lvar, :trim_mode))),
      s(:send, nil, :attr_reader,
        s(:sym, :src)),
      s(:send, nil, :attr_reader,
        s(:sym, :encoding)),
      s(:send, nil, :attr_accessor,
        s(:sym, :filename)),
      s(:send, nil, :attr_accessor,
        s(:sym, :lineno)),
      s(:def, :location=,
        s(:args,
          s(:mlhs,
            s(:arg, :filename),
            s(:arg, :lineno))),
        s(:begin,
          s(:ivasgn, :@filename,
            s(:lvar, :filename)),
          s(:if,
            s(:lvar, :lineno),
            s(:ivasgn, :@lineno,
              s(:lvar, :lineno)), nil))),
      s(:def, :set_eoutvar,
        s(:args,
          s(:arg, :compiler),
          s(:optarg, :eoutvar,
            s(:str, "_erbout"))),
        s(:begin,
          s(:send,
            s(:lvar, :compiler), :put_cmd=,
            s(:dstr,
              s(:begin,
                s(:lvar, :eoutvar)),
              s(:str, ".concat"))),
          s(:send,
            s(:lvar, :compiler), :insert_cmd=,
            s(:dstr,
              s(:begin,
                s(:lvar, :eoutvar)),
              s(:str, ".concat"))),
          s(:send,
            s(:lvar, :compiler), :pre_cmd=,
            s(:array,
              s(:dstr,
                s(:begin,
                  s(:lvar, :eoutvar)),
                s(:str, " = ''")))),
          s(:send,
            s(:lvar, :compiler), :post_cmd=,
            s(:array,
              s(:dstr,
                s(:begin,
                  s(:lvar, :eoutvar)),
                s(:str, ".force_encoding(__ENCODING__)")))))),
      s(:def, :run,
        s(:args,
          s(:optarg, :b,
            s(:send, nil, :new_toplevel))),
        s(:send, nil, :print,
          s(:send,
            s(:self), :result,
            s(:lvar, :b)))),
      s(:def, :result,
        s(:args,
          s(:optarg, :b,
            s(:send, nil, :new_toplevel))),
        s(:if,
          s(:ivar, :@safe_level),
          s(:send,
            s(:block,
              s(:send, nil, :proc),
              s(:args),
              s(:begin,
                s(:gvasgn, :$SAFE,
                  s(:ivar, :@safe_level)),
                s(:send, nil, :eval,
                  s(:ivar, :@src),
                  s(:lvar, :b),
                  s(:begin,
                    s(:or,
                      s(:ivar, :@filename),
                      s(:str, "(erb)"))),
                  s(:ivar, :@lineno)))), :call),
          s(:send, nil, :eval,
            s(:ivar, :@src),
            s(:lvar, :b),
            s(:begin,
              s(:or,
                s(:ivar, :@filename),
                s(:str, "(erb)"))),
            s(:ivar, :@lineno)))),
      s(:def, :new_toplevel,
        s(:args),
        s(:send,
          s(:const, nil, :TOPLEVEL_BINDING), :dup)),
      s(:send, nil, :private,
        s(:sym, :new_toplevel)),
      s(:def, :def_method,
        s(:args,
          s(:arg, :mod),
          s(:arg, :methodname),
          s(:optarg, :fname,
            s(:str, "(ERB)"))),
        s(:begin,
          s(:lvasgn, :src,
            s(:send,
              s(:self), :src)),
          s(:lvasgn, :magic_comment,
            s(:dstr,
              s(:str, "#coding:"),
              s(:begin,
                s(:ivar, :@encoding)),
              s(:str, "\n"))),
          s(:block,
            s(:send,
              s(:lvar, :mod), :module_eval),
            s(:args),
            s(:send, nil, :eval,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :magic_comment), :+,
                    s(:dstr,
                      s(:str, "def "),
                      s(:begin,
                        s(:lvar, :methodname)),
                      s(:str, "\n"))), :+,
                  s(:lvar, :src)), :+,
                s(:str, "\nend\n")),
              s(:send, nil, :binding),
              s(:lvar, :fname),
              s(:int, -2))))),
      s(:def, :def_module,
        s(:args,
          s(:optarg, :methodname,
            s(:str, "erb"))),
        s(:begin,
          s(:lvasgn, :mod,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:send, nil, :def_method,
            s(:lvar, :mod),
            s(:lvar, :methodname),
            s(:or,
              s(:ivar, :@filename),
              s(:str, "(ERB)"))),
          s(:lvar, :mod))),
      s(:def, :def_class,
        s(:args,
          s(:optarg, :superklass,
            s(:const, nil, :Object)),
          s(:optarg, :methodname,
            s(:str, "result"))),
        s(:begin,
          s(:lvasgn, :cls,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :superklass))),
          s(:send, nil, :def_method,
            s(:lvar, :cls),
            s(:lvar, :methodname),
            s(:or,
              s(:ivar, :@filename),
              s(:str, "(ERB)"))),
          s(:lvar, :cls))))),
  s(:class,
    s(:const, nil, :ERB), nil,
    s(:module,
      s(:const, nil, :Util),
      s(:begin,
        s(:send, nil, :public),
        s(:def, :html_escape,
          s(:args,
            s(:arg, :s)),
          s(:send,
            s(:const, nil, :CGI), :escapeHTML,
            s(:send,
              s(:lvar, :s), :to_s))),
        s(:alias,
          s(:sym, :h),
          s(:sym, :html_escape)),
        s(:send, nil, :module_function,
          s(:sym, :h)),
        s(:send, nil, :module_function,
          s(:sym, :html_escape)),
        s(:def, :url_encode,
          s(:args,
            s(:arg, :s)),
          s(:block,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :s), :to_s), :b), :gsub,
              s(:regexp,
                s(:str, "[^a-zA-Z0-9_\\-.]"),
                s(:regopt, :n))),
            s(:args,
              s(:arg, :m)),
            s(:send, nil, :sprintf,
              s(:str, "%%%02X"),
              s(:send,
                s(:send,
                  s(:lvar, :m), :unpack,
                  s(:str, "C")), :[],
                s(:int, 0))))),
        s(:alias,
          s(:sym, :u),
          s(:sym, :url_encode)),
        s(:send, nil, :module_function,
          s(:sym, :u)),
        s(:send, nil, :module_function,
          s(:sym, :url_encode))))),
  s(:class,
    s(:const, nil, :ERB), nil,
    s(:module,
      s(:const, nil, :DefMethod),
      s(:begin,
        s(:send, nil, :public),
        s(:def, :def_erb_method,
          s(:args,
            s(:arg, :methodname),
            s(:arg, :erb_or_fname)),
          s(:if,
            s(:send,
              s(:lvar, :erb_or_fname), :kind_of?,
              s(:const, nil, :String)),
            s(:begin,
              s(:lvasgn, :fname,
                s(:lvar, :erb_or_fname)),
              s(:lvasgn, :erb,
                s(:send,
                  s(:const, nil, :ERB), :new,
                  s(:send,
                    s(:const, nil, :File), :read,
                    s(:lvar, :fname)))),
              s(:send,
                s(:lvar, :erb), :def_method,
                s(:self),
                s(:lvar, :methodname),
                s(:lvar, :fname))),
            s(:begin,
              s(:lvasgn, :erb,
                s(:lvar, :erb_or_fname)),
              s(:send,
                s(:lvar, :erb), :def_method,
                s(:self),
                s(:lvar, :methodname),
                s(:or,
                  s(:send,
                    s(:lvar, :erb), :filename),
                  s(:str, "(ERB)")))))),
        s(:send, nil, :module_function,
          s(:sym, :def_erb_method))))))
