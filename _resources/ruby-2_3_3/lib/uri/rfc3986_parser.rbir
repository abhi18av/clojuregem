s(:module,
  s(:const, nil, :URI),
  s(:class,
    s(:const, nil, :RFC3986_Parser), nil,
    s(:begin,
      s(:casgn, nil, :RFC3986_URI,
        s(:regexp,
          s(:str, "\\A(?<URI>(?<scheme>[A-Za-z][+\\-.0-9A-Za-z]*):(?<hier-part>//(?<authority>(?:(?<userinfo>(?:%\\h\\h|[!$&-.0-;=A-Z_a-z~])*)@)?(?<host>(?<IP-literal>\\[(?:(?<IPv6address>(?:\\h{1,4}:){6}(?<ls32>\\h{1,4}:\\h{1,4}|(?<IPv4address>(?<dec-octet>[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5]|\\d)\\.\\g<dec-octet>\\.\\g<dec-octet>\\.\\g<dec-octet>))|::(?:\\h{1,4}:){5}\\g<ls32>|\\h{1,4}?::(?:\\h{1,4}:){4}\\g<ls32>|(?:(?:\\h{1,4}:)?\\h{1,4})?::(?:\\h{1,4}:){3}\\g<ls32>|(?:(?:\\h{1,4}:){,2}\\h{1,4})?::(?:\\h{1,4}:){2}\\g<ls32>|(?:(?:\\h{1,4}:){,3}\\h{1,4})?::\\h{1,4}:\\g<ls32>|(?:(?:\\h{1,4}:){,4}\\h{1,4})?::\\g<ls32>|(?:(?:\\h{1,4}:){,5}\\h{1,4})?::\\h{1,4}|(?:(?:\\h{1,4}:){,6}\\h{1,4})?::)|(?<IPvFuture>v\\h+\\.[!$&-.0-;=A-Z_a-z~]+))\\])|\\g<IPv4address>|(?<reg-name>(?:%\\h\\h|[!$&-.0-9;=A-Z_a-z~])+))?(?::(?<port>\\d*))?)(?<path-abempty>(?:/(?<segment>(?:%\\h\\h|[!$&-.0-;=@-Z_a-z~])*))*)|(?<path-absolute>/(?:(?<segment-nz>(?:%\\h\\h|[!$&-.0-;=@-Z_a-z~])+)(?:/\\g<segment>)*)?)|(?<path-rootless>\\g<segment-nz>(?:/\\g<segment>)*)|(?<path-empty>))(?:\\?(?<query>[^#]*))?(?:\\#(?<fragment>(?:%\\h\\h|[!$&-.0-;=@-Z_a-z~/?])*))?)\\z"),
          s(:regopt))),
      s(:casgn, nil, :RFC3986_relative_ref,
        s(:regexp,
          s(:str, "\\A(?<relative-ref>(?<relative-part>//(?<authority>(?:(?<userinfo>(?:%\\h\\h|[!$&-.0-;=A-Z_a-z~])*)@)?(?<host>(?<IP-literal>\\[(?<IPv6address>(?:\\h{1,4}:){6}(?<ls32>\\h{1,4}:\\h{1,4}|(?<IPv4address>(?<dec-octet>[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5]|\\d)\\.\\g<dec-octet>\\.\\g<dec-octet>\\.\\g<dec-octet>))|::(?:\\h{1,4}:){5}\\g<ls32>|\\h{1,4}?::(?:\\h{1,4}:){4}\\g<ls32>|(?:(?:\\h{1,4}:){,1}\\h{1,4})?::(?:\\h{1,4}:){3}\\g<ls32>|(?:(?:\\h{1,4}:){,2}\\h{1,4})?::(?:\\h{1,4}:){2}\\g<ls32>|(?:(?:\\h{1,4}:){,3}\\h{1,4})?::\\h{1,4}:\\g<ls32>|(?:(?:\\h{1,4}:){,4}\\h{1,4})?::\\g<ls32>|(?:(?:\\h{1,4}:){,5}\\h{1,4})?::\\h{1,4}|(?:(?:\\h{1,4}:){,6}\\h{1,4})?::)|(?<IPvFuture>v\\h+\\.[!$&-.0-;=A-Z_a-z~]+)\\])|\\g<IPv4address>|(?<reg-name>(?:%\\h\\h|[!$&-.0-9;=A-Z_a-z~])+))?(?::(?<port>\\d*))?)(?<path-abempty>(?:/(?<segment>(?:%\\h\\h|[!$&-.0-;=@-Z_a-z~])*))*)|(?<path-absolute>/(?:(?<segment-nz>(?:%\\h\\h|[!$&-.0-;=@-Z_a-z~])+)(?:/\\g<segment>)*)?)|(?<path-noscheme>(?<segment-nz-nc>(?:%\\h\\h|[!$&-.0-9;=@-Z_a-z~])+)(?:/\\g<segment>)*)|(?<path-empty>))(?:\\?(?<query>[^#]*))?(?:\\#(?<fragment>(?:%\\h\\h|[!$&-.0-;=@-Z_a-z~/?])*))?)\\z"),
          s(:regopt))),
      s(:send, nil, :attr_reader,
        s(:sym, :regexp)),
      s(:def, :initialize,
        s(:args),
        s(:ivasgn, :@regexp,
          s(:send,
            s(:send,
              s(:send, nil, :default_regexp), :each_value,
              s(:block_pass,
                s(:sym, :freeze))), :freeze))),
      s(:def, :split,
        s(:args,
          s(:arg, :uri)),
        s(:begin,
          s(:kwbegin,
            s(:rescue,
              s(:lvasgn, :uri,
                s(:send,
                  s(:lvar, :uri), :to_str)),
              s(:resbody,
                s(:array,
                  s(:const, nil, :NoMethodError)), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :InvalidURIError),
                  s(:dstr,
                    s(:str, "bad URI(is not URI?): "),
                    s(:begin,
                      s(:lvar, :uri))))), nil)),
          s(:or,
            s(:send,
              s(:lvar, :uri), :ascii_only?),
            s(:send, nil, :raise,
              s(:const, nil, :InvalidURIError),
              s(:dstr,
                s(:str, "URI must be ascii only "),
                s(:begin,
                  s(:send,
                    s(:lvar, :uri), :dump))))),
          s(:if,
            s(:lvasgn, :m,
              s(:send,
                s(:const, nil, :RFC3986_URI), :match,
                s(:lvar, :uri))),
            s(:begin,
              s(:lvasgn, :query,
                s(:send,
                  s(:lvar, :m), :[],
                  s(:send,
                    s(:str, "query"), :freeze))),
              s(:lvasgn, :scheme,
                s(:send,
                  s(:lvar, :m), :[],
                  s(:send,
                    s(:str, "scheme"), :freeze))),
              s(:lvasgn, :opaque,
                s(:send,
                  s(:lvar, :m), :[],
                  s(:send,
                    s(:str, "path-rootless"), :freeze))),
              s(:if,
                s(:lvar, :opaque),
                s(:begin,
                  s(:if,
                    s(:lvar, :query),
                    s(:send,
                      s(:lvar, :opaque), :<<,
                      s(:dstr,
                        s(:str, "?"),
                        s(:begin,
                          s(:lvar, :query)))), nil),
                  s(:array,
                    s(:lvar, :scheme),
                    s(:nil),
                    s(:nil),
                    s(:nil),
                    s(:nil),
                    s(:nil),
                    s(:lvar, :opaque),
                    s(:nil),
                    s(:send,
                      s(:lvar, :m), :[],
                      s(:send,
                        s(:str, "fragment"), :freeze)))),
                s(:array,
                  s(:lvar, :scheme),
                  s(:send,
                    s(:lvar, :m), :[],
                    s(:send,
                      s(:str, "userinfo"), :freeze)),
                  s(:send,
                    s(:lvar, :m), :[],
                    s(:send,
                      s(:str, "host"), :freeze)),
                  s(:send,
                    s(:lvar, :m), :[],
                    s(:send,
                      s(:str, "port"), :freeze)),
                  s(:nil),
                  s(:begin,
                    s(:or,
                      s(:or,
                        s(:send,
                          s(:lvar, :m), :[],
                          s(:send,
                            s(:str, "path-abempty"), :freeze)),
                        s(:send,
                          s(:lvar, :m), :[],
                          s(:send,
                            s(:str, "path-absolute"), :freeze))),
                      s(:send,
                        s(:lvar, :m), :[],
                        s(:send,
                          s(:str, "path-empty"), :freeze)))),
                  s(:nil),
                  s(:lvar, :query),
                  s(:send,
                    s(:lvar, :m), :[],
                    s(:send,
                      s(:str, "fragment"), :freeze))))),
            s(:if,
              s(:lvasgn, :m,
                s(:send,
                  s(:const, nil, :RFC3986_relative_ref), :match,
                  s(:lvar, :uri))),
              s(:array,
                s(:nil),
                s(:send,
                  s(:lvar, :m), :[],
                  s(:send,
                    s(:str, "userinfo"), :freeze)),
                s(:send,
                  s(:lvar, :m), :[],
                  s(:send,
                    s(:str, "host"), :freeze)),
                s(:send,
                  s(:lvar, :m), :[],
                  s(:send,
                    s(:str, "port"), :freeze)),
                s(:nil),
                s(:begin,
                  s(:or,
                    s(:or,
                      s(:or,
                        s(:send,
                          s(:lvar, :m), :[],
                          s(:send,
                            s(:str, "path-abempty"), :freeze)),
                        s(:send,
                          s(:lvar, :m), :[],
                          s(:send,
                            s(:str, "path-absolute"), :freeze))),
                      s(:send,
                        s(:lvar, :m), :[],
                        s(:send,
                          s(:str, "path-noscheme"), :freeze))),
                    s(:send,
                      s(:lvar, :m), :[],
                      s(:send,
                        s(:str, "path-empty"), :freeze)))),
                s(:nil),
                s(:send,
                  s(:lvar, :m), :[],
                  s(:send,
                    s(:str, "query"), :freeze)),
                s(:send,
                  s(:lvar, :m), :[],
                  s(:send,
                    s(:str, "fragment"), :freeze))),
              s(:send, nil, :raise,
                s(:const, nil, :InvalidURIError),
                s(:dstr,
                  s(:str, "bad URI(is not URI?): "),
                  s(:begin,
                    s(:lvar, :uri)))))))),
      s(:def, :parse,
        s(:args,
          s(:arg, :uri)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :scheme),
              s(:lvasgn, :userinfo),
              s(:lvasgn, :host),
              s(:lvasgn, :port),
              s(:lvasgn, :registry),
              s(:lvasgn, :path),
              s(:lvasgn, :opaque),
              s(:lvasgn, :query),
              s(:lvasgn, :fragment)),
            s(:send,
              s(:self), :split,
              s(:lvar, :uri))),
          s(:lvasgn, :scheme_list,
            s(:send,
              s(:const, nil, :URI), :scheme_list)),
          s(:if,
            s(:and,
              s(:lvar, :scheme),
              s(:send,
                s(:lvar, :scheme_list), :include?,
                s(:lvasgn, :uc,
                  s(:send,
                    s(:lvar, :scheme), :upcase)))),
            s(:send,
              s(:send,
                s(:lvar, :scheme_list), :[],
                s(:lvar, :uc)), :new,
              s(:lvar, :scheme),
              s(:lvar, :userinfo),
              s(:lvar, :host),
              s(:lvar, :port),
              s(:lvar, :registry),
              s(:lvar, :path),
              s(:lvar, :opaque),
              s(:lvar, :query),
              s(:lvar, :fragment),
              s(:self)),
            s(:send,
              s(:const, nil, :Generic), :new,
              s(:lvar, :scheme),
              s(:lvar, :userinfo),
              s(:lvar, :host),
              s(:lvar, :port),
              s(:lvar, :registry),
              s(:lvar, :path),
              s(:lvar, :opaque),
              s(:lvar, :query),
              s(:lvar, :fragment),
              s(:self))))),
      s(:def, :join,
        s(:args,
          s(:restarg, :uris)),
        s(:begin,
          s(:send,
            s(:lvar, :uris), :[]=,
            s(:int, 0),
            s(:send, nil, :convert_to_uri,
              s(:send,
                s(:lvar, :uris), :[],
                s(:int, 0)))),
          s(:send,
            s(:lvar, :uris), :inject,
            s(:sym, :merge)))),
      s(:cvasgn, :@@to_s,
        s(:send,
          s(:const, nil, :Kernel), :instance_method,
          s(:sym, :to_s))),
      s(:def, :inspect,
        s(:args),
        s(:send,
          s(:send,
            s(:cvar, :@@to_s), :bind,
            s(:self)), :call)),
      s(:send, nil, :private),
      s(:def, :default_regexp,
        s(:args),
        s(:hash,
          s(:pair,
            s(:sym, :SCHEME),
            s(:regexp,
              s(:str, "\\A[A-Za-z][A-Za-z0-9+\\-.]*\\z"),
              s(:regopt))),
          s(:pair,
            s(:sym, :USERINFO),
            s(:regexp,
              s(:str, "\\A(?:%\\h\\h|[!$&-.0-;=A-Z_a-z~])*\\z"),
              s(:regopt))),
          s(:pair,
            s(:sym, :HOST),
            s(:regexp,
              s(:str, "\\A(?:(?<IP-literal>\\[(?:(?<IPv6address>(?:\\h{1,4}:){6}(?<ls32>\\h{1,4}:\\h{1,4}|(?<IPv4address>(?<dec-octet>[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5]|\\d)\\.\\g<dec-octet>\\.\\g<dec-octet>\\.\\g<dec-octet>))|::(?:\\h{1,4}:){5}\\g<ls32>|\\h{,4}::(?:\\h{1,4}:){4}\\g<ls32>|(?:(?:\\h{1,4}:)?\\h{1,4})?::(?:\\h{1,4}:){3}\\g<ls32>|(?:(?:\\h{1,4}:){,2}\\h{1,4})?::(?:\\h{1,4}:){2}\\g<ls32>|(?:(?:\\h{1,4}:){,3}\\h{1,4})?::\\h{1,4}:\\g<ls32>|(?:(?:\\h{1,4}:){,4}\\h{1,4})?::\\g<ls32>|(?:(?:\\h{1,4}:){,5}\\h{1,4})?::\\h{1,4}|(?:(?:\\h{1,4}:){,6}\\h{1,4})?::)|(?<IPvFuture>v\\h+\\.[!$&-.0-;=A-Z_a-z~]+))\\])|\\g<IPv4address>|(?<reg-name>(?:%\\h\\h|[!$&-.0-9;=A-Z_a-z~])*))\\z"),
              s(:regopt))),
          s(:pair,
            s(:sym, :ABS_PATH),
            s(:regexp,
              s(:str, "\\A/(?:%\\h\\h|[!$&-.0-;=@-Z_a-z~])*(?:/(?:%\\h\\h|[!$&-.0-;=@-Z_a-z~])*)*\\z"),
              s(:regopt))),
          s(:pair,
            s(:sym, :REL_PATH),
            s(:regexp,
              s(:str, "\\A(?:%\\h\\h|[!$&-.0-;=@-Z_a-z~])+(?:/(?:%\\h\\h|[!$&-.0-;=@-Z_a-z~])*)*\\z"),
              s(:regopt))),
          s(:pair,
            s(:sym, :QUERY),
            s(:regexp,
              s(:str, "\\A(?:%\\h\\h|[!$&-.0-;=@-Z_a-z~/?])*\\z"),
              s(:regopt))),
          s(:pair,
            s(:sym, :FRAGMENT),
            s(:regexp,
              s(:str, "\\A(?:%\\h\\h|[!$&-.0-;=@-Z_a-z~/?])*\\z"),
              s(:regopt))),
          s(:pair,
            s(:sym, :OPAQUE),
            s(:regexp,
              s(:str, "\\A(?:[^/].*)?\\z"),
              s(:regopt))),
          s(:pair,
            s(:sym, :PORT),
            s(:regexp,
              s(:str, "\\A[\\x09\\x0a\\x0c\\x0d ]*\\d*[\\x09\\x0a\\x0c\\x0d ]*\\z"),
              s(:regopt))))),
      s(:def, :convert_to_uri,
        s(:args,
          s(:arg, :uri)),
        s(:if,
          s(:send,
            s(:lvar, :uri), :is_a?,
            s(:const,
              s(:const, nil, :URI), :Generic)),
          s(:lvar, :uri),
          s(:if,
            s(:lvasgn, :uri,
              s(:send,
                s(:const, nil, :String), :try_convert,
                s(:lvar, :uri))),
            s(:send, nil, :parse,
              s(:lvar, :uri)),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "bad argument (expected URI object or URI string)"))))))))
