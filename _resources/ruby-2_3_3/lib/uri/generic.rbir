s(:begin,
  s(:send, nil, :require,
    s(:str, "uri/common")),
  s(:module,
    s(:const, nil, :URI),
    s(:class,
      s(:const, nil, :Generic), nil,
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :URI)),
        s(:casgn, nil, :DEFAULT_PORT,
          s(:nil)),
        s(:defs,
          s(:self), :default_port,
          s(:args),
          s(:const,
            s(:self), :DEFAULT_PORT)),
        s(:def, :default_port,
          s(:args),
          s(:send,
            s(:send,
              s(:self), :class), :default_port)),
        s(:casgn, nil, :COMPONENT,
          s(:send,
            s(:array,
              s(:sym, :scheme),
              s(:sym, :userinfo),
              s(:sym, :host),
              s(:sym, :port),
              s(:sym, :registry),
              s(:sym, :path),
              s(:sym, :opaque),
              s(:sym, :query),
              s(:sym, :fragment)), :freeze)),
        s(:defs,
          s(:self), :component,
          s(:args),
          s(:const,
            s(:self), :COMPONENT)),
        s(:casgn, nil, :USE_REGISTRY,
          s(:false)),
        s(:defs,
          s(:self), :use_registry,
          s(:args),
          s(:const,
            s(:self), :USE_REGISTRY)),
        s(:defs,
          s(:self), :build2,
          s(:args,
            s(:arg, :args)),
          s(:kwbegin,
            s(:rescue,
              s(:return,
                s(:send,
                  s(:self), :build,
                  s(:lvar, :args))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :InvalidComponentError)), nil,
                s(:if,
                  s(:send,
                    s(:lvar, :args), :kind_of?,
                    s(:const, nil, :Array)),
                  s(:return,
                    s(:send,
                      s(:self), :build,
                      s(:block,
                        s(:send,
                          s(:lvar, :args), :collect),
                        s(:args,
                          s(:arg, :x)),
                        s(:if,
                          s(:send,
                            s(:lvar, :x), :is_a?,
                            s(:const, nil, :String)),
                          s(:send,
                            s(:const, nil, :DEFAULT_PARSER), :escape,
                            s(:lvar, :x)),
                          s(:lvar, :x))))),
                  s(:if,
                    s(:send,
                      s(:lvar, :args), :kind_of?,
                      s(:const, nil, :Hash)),
                    s(:begin,
                      s(:lvasgn, :tmp,
                        s(:hash)),
                      s(:block,
                        s(:send,
                          s(:lvar, :args), :each),
                        s(:args,
                          s(:arg, :key),
                          s(:arg, :value)),
                        s(:send,
                          s(:lvar, :tmp), :[]=,
                          s(:lvar, :key),
                          s(:if,
                            s(:lvar, :value),
                            s(:send,
                              s(:const, nil, :DEFAULT_PARSER), :escape,
                              s(:lvar, :value)),
                            s(:lvar, :value)))),
                      s(:return,
                        s(:send,
                          s(:self), :build,
                          s(:lvar, :tmp)))), nil))), nil))),
        s(:defs,
          s(:self), :build,
          s(:args,
            s(:arg, :args)),
          s(:begin,
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :args), :kind_of?,
                  s(:const, nil, :Array)),
                s(:send,
                  s(:send,
                    s(:lvar, :args), :size), :==,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:cbase), :URI), :Generic), :COMPONENT), :size))),
              s(:lvasgn, :tmp,
                s(:send,
                  s(:lvar, :args), :dup)),
              s(:if,
                s(:send,
                  s(:lvar, :args), :kind_of?,
                  s(:const, nil, :Hash)),
                s(:lvasgn, :tmp,
                  s(:block,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const,
                            s(:cbase), :URI), :Generic), :COMPONENT), :collect),
                    s(:args,
                      s(:arg, :c)),
                    s(:if,
                      s(:send,
                        s(:lvar, :args), :include?,
                        s(:lvar, :c)),
                      s(:send,
                        s(:lvar, :args), :[],
                        s(:lvar, :c)),
                      s(:nil)))),
                s(:begin,
                  s(:lvasgn, :component,
                    s(:rescue,
                      s(:send,
                        s(:send,
                          s(:self), :class), :component),
                      s(:resbody, nil, nil,
                        s(:const,
                          s(:const,
                            s(:const,
                              s(:cbase), :URI), :Generic), :COMPONENT)), nil)),
                  s(:send, nil, :raise,
                    s(:const, nil, :ArgumentError),
                    s(:dstr,
                      s(:str, "expected Array of or Hash of components of "),
                      s(:begin,
                        s(:send,
                          s(:self), :class)),
                      s(:str, " ("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :component), :join,
                          s(:str, ", "))),
                      s(:str, ")")))))),
            s(:send,
              s(:lvar, :tmp), :<<,
              s(:nil)),
            s(:send,
              s(:lvar, :tmp), :<<,
              s(:true)),
            s(:return,
              s(:send,
                s(:self), :new,
                s(:splat,
                  s(:lvar, :tmp)))))),
        s(:def, :initialize,
          s(:args,
            s(:arg, :scheme),
            s(:arg, :userinfo),
            s(:arg, :host),
            s(:arg, :port),
            s(:arg, :registry),
            s(:arg, :path),
            s(:arg, :opaque),
            s(:arg, :query),
            s(:arg, :fragment),
            s(:optarg, :parser,
              s(:const, nil, :DEFAULT_PARSER)),
            s(:optarg, :arg_check,
              s(:false))),
          s(:begin,
            s(:ivasgn, :@scheme,
              s(:nil)),
            s(:ivasgn, :@user,
              s(:nil)),
            s(:ivasgn, :@password,
              s(:nil)),
            s(:ivasgn, :@host,
              s(:nil)),
            s(:ivasgn, :@port,
              s(:nil)),
            s(:ivasgn, :@path,
              s(:nil)),
            s(:ivasgn, :@query,
              s(:nil)),
            s(:ivasgn, :@opaque,
              s(:nil)),
            s(:ivasgn, :@fragment,
              s(:nil)),
            s(:ivasgn, :@parser,
              s(:if,
                s(:send,
                  s(:lvar, :parser), :==,
                  s(:const, nil, :DEFAULT_PARSER)),
                s(:nil),
                s(:lvar, :parser))),
            s(:if,
              s(:lvar, :arg_check),
              s(:begin,
                s(:send,
                  s(:self), :scheme=,
                  s(:lvar, :scheme)),
                s(:send,
                  s(:self), :userinfo=,
                  s(:lvar, :userinfo)),
                s(:send,
                  s(:self), :hostname=,
                  s(:lvar, :host)),
                s(:send,
                  s(:self), :port=,
                  s(:lvar, :port)),
                s(:send,
                  s(:self), :path=,
                  s(:lvar, :path)),
                s(:send,
                  s(:self), :query=,
                  s(:lvar, :query)),
                s(:send,
                  s(:self), :opaque=,
                  s(:lvar, :opaque)),
                s(:send,
                  s(:self), :fragment=,
                  s(:lvar, :fragment))),
              s(:begin,
                s(:send,
                  s(:self), :set_scheme,
                  s(:lvar, :scheme)),
                s(:send,
                  s(:self), :set_userinfo,
                  s(:lvar, :userinfo)),
                s(:send,
                  s(:self), :set_host,
                  s(:lvar, :host)),
                s(:send,
                  s(:self), :set_port,
                  s(:lvar, :port)),
                s(:send,
                  s(:self), :set_path,
                  s(:lvar, :path)),
                s(:send,
                  s(:self), :query=,
                  s(:lvar, :query)),
                s(:send,
                  s(:self), :set_opaque,
                  s(:lvar, :opaque)),
                s(:send,
                  s(:self), :fragment=,
                  s(:begin,
                    s(:lvar, :fragment))))),
            s(:if,
              s(:lvar, :registry),
              s(:send, nil, :raise,
                s(:const, nil, :InvalidURIError),
                s(:dstr,
                  s(:str, "the scheme "),
                  s(:begin,
                    s(:ivar, :@scheme)),
                  s(:str, " does not accept registry part: "),
                  s(:begin,
                    s(:lvar, :registry)),
                  s(:str, " (or bad hostname?)"))), nil),
            s(:if,
              s(:ivar, :@scheme),
              s(:send,
                s(:ivar, :@scheme), :freeze), nil),
            s(:if,
              s(:and,
                s(:send,
                  s(:ivar, :@path), :!),
                s(:send,
                  s(:ivar, :@opaque), :!)),
              s(:send,
                s(:self), :set_path,
                s(:str, "")), nil),
            s(:if,
              s(:and,
                s(:send,
                  s(:self), :default_port),
                s(:send,
                  s(:ivar, :@port), :!)),
              s(:send,
                s(:self), :set_port,
                s(:send,
                  s(:self), :default_port)), nil))),
        s(:send, nil, :attr_reader,
          s(:sym, :scheme)),
        s(:send, nil, :attr_reader,
          s(:sym, :host)),
        s(:send, nil, :attr_reader,
          s(:sym, :port)),
        s(:def, :registry,
          s(:args),
          s(:nil)),
        s(:send, nil, :attr_reader,
          s(:sym, :path)),
        s(:send, nil, :attr_reader,
          s(:sym, :query)),
        s(:send, nil, :attr_reader,
          s(:sym, :opaque)),
        s(:send, nil, :attr_reader,
          s(:sym, :fragment)),
        s(:def, :parser,
          s(:args),
          s(:if,
            s(:or,
              s(:send,
                s(:defined?,
                  s(:ivar, :@parser)), :!),
              s(:send,
                s(:ivar, :@parser), :!)),
            s(:const, nil, :DEFAULT_PARSER),
            s(:or,
              s(:ivar, :@parser),
              s(:const, nil, :DEFAULT_PARSER)))),
        s(:def, :replace!,
          s(:args,
            s(:arg, :oth)),
          s(:begin,
            s(:if,
              s(:send,
                s(:send,
                  s(:self), :class), :!=,
                s(:send,
                  s(:lvar, :oth), :class)),
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:dstr,
                  s(:str, "expected "),
                  s(:begin,
                    s(:send,
                      s(:self), :class)),
                  s(:str, " object"))), nil),
            s(:block,
              s(:send,
                s(:send, nil, :component), :each),
              s(:args,
                s(:arg, :c)),
              s(:send,
                s(:self), :__send__,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :c)),
                  s(:str, "=")),
                s(:send,
                  s(:lvar, :oth), :__send__,
                  s(:lvar, :c)))))),
        s(:send, nil, :private,
          s(:sym, :replace!)),
        s(:def, :component,
          s(:args),
          s(:send,
            s(:send,
              s(:self), :class), :component)),
        s(:def, :check_scheme,
          s(:args,
            s(:arg, :v)),
          s(:begin,
            s(:if,
              s(:and,
                s(:lvar, :v),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send, nil, :parser), :regexp), :[],
                    s(:sym, :SCHEME)), :!~,
                  s(:lvar, :v))),
              s(:send, nil, :raise,
                s(:const, nil, :InvalidComponentError),
                s(:dstr,
                  s(:str, "bad component(expected scheme component): "),
                  s(:begin,
                    s(:lvar, :v)))), nil),
            s(:return,
              s(:true)))),
        s(:send, nil, :private,
          s(:sym, :check_scheme)),
        s(:def, :set_scheme,
          s(:args,
            s(:arg, :v)),
          s(:ivasgn, :@scheme,
            s(:if,
              s(:lvar, :v),
              s(:send,
                s(:lvar, :v), :downcase),
              s(:lvar, :v)))),
        s(:send, nil, :protected,
          s(:sym, :set_scheme)),
        s(:def, :scheme=,
          s(:args,
            s(:arg, :v)),
          s(:begin,
            s(:send, nil, :check_scheme,
              s(:lvar, :v)),
            s(:send, nil, :set_scheme,
              s(:lvar, :v)),
            s(:lvar, :v))),
        s(:def, :check_userinfo,
          s(:args,
            s(:arg, :user),
            s(:optarg, :password,
              s(:nil))),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :password), :!),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :user),
                  s(:lvasgn, :password)),
                s(:send, nil, :split_userinfo,
                  s(:lvar, :user))), nil),
            s(:send, nil, :check_user,
              s(:lvar, :user)),
            s(:send, nil, :check_password,
              s(:lvar, :password),
              s(:lvar, :user)),
            s(:return,
              s(:true)))),
        s(:send, nil, :private,
          s(:sym, :check_userinfo)),
        s(:def, :check_user,
          s(:args,
            s(:arg, :v)),
          s(:begin,
            s(:if,
              s(:ivar, :@opaque),
              s(:send, nil, :raise,
                s(:const, nil, :InvalidURIError),
                s(:str, "can not set user with opaque")), nil),
            s(:if,
              s(:lvar, :v), nil,
              s(:return,
                s(:lvar, :v))),
            s(:if,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send, nil, :parser), :regexp), :[],
                  s(:sym, :USERINFO)), :!~,
                s(:lvar, :v)),
              s(:send, nil, :raise,
                s(:const, nil, :InvalidComponentError),
                s(:dstr,
                  s(:str, "bad component(expected userinfo component or user component): "),
                  s(:begin,
                    s(:lvar, :v)))), nil),
            s(:return,
              s(:true)))),
        s(:send, nil, :private,
          s(:sym, :check_user)),
        s(:def, :check_password,
          s(:args,
            s(:arg, :v),
            s(:optarg, :user,
              s(:ivar, :@user))),
          s(:begin,
            s(:if,
              s(:ivar, :@opaque),
              s(:send, nil, :raise,
                s(:const, nil, :InvalidURIError),
                s(:str, "can not set password with opaque")), nil),
            s(:if,
              s(:lvar, :v), nil,
              s(:return,
                s(:lvar, :v))),
            s(:if,
              s(:send,
                s(:lvar, :user), :!),
              s(:send, nil, :raise,
                s(:const, nil, :InvalidURIError),
                s(:str, "password component depends user component")), nil),
            s(:if,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send, nil, :parser), :regexp), :[],
                  s(:sym, :USERINFO)), :!~,
                s(:lvar, :v)),
              s(:send, nil, :raise,
                s(:const, nil, :InvalidComponentError),
                s(:str, "bad password component")), nil),
            s(:return,
              s(:true)))),
        s(:send, nil, :private,
          s(:sym, :check_password)),
        s(:def, :userinfo=,
          s(:args,
            s(:arg, :userinfo)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :userinfo), :nil?),
              s(:return,
                s(:nil)), nil),
            s(:send, nil, :check_userinfo,
              s(:splat,
                s(:lvar, :userinfo))),
            s(:send, nil, :set_userinfo,
              s(:splat,
                s(:lvar, :userinfo))))),
        s(:def, :user=,
          s(:args,
            s(:arg, :user)),
          s(:begin,
            s(:send, nil, :check_user,
              s(:lvar, :user)),
            s(:send, nil, :set_user,
              s(:lvar, :user)))),
        s(:def, :password=,
          s(:args,
            s(:arg, :password)),
          s(:begin,
            s(:send, nil, :check_password,
              s(:lvar, :password)),
            s(:send, nil, :set_password,
              s(:lvar, :password)))),
        s(:def, :set_userinfo,
          s(:args,
            s(:arg, :user),
            s(:optarg, :password,
              s(:nil))),
          s(:begin,
            s(:if,
              s(:lvar, :password), nil,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :user),
                  s(:lvasgn, :password)),
                s(:send, nil, :split_userinfo,
                  s(:lvar, :user)))),
            s(:ivasgn, :@user,
              s(:lvar, :user)),
            s(:if,
              s(:lvar, :password),
              s(:ivasgn, :@password,
                s(:lvar, :password)), nil),
            s(:array,
              s(:ivar, :@user),
              s(:ivar, :@password)))),
        s(:send, nil, :protected,
          s(:sym, :set_userinfo)),
        s(:def, :set_user,
          s(:args,
            s(:arg, :v)),
          s(:begin,
            s(:send, nil, :set_userinfo,
              s(:lvar, :v),
              s(:ivar, :@password)),
            s(:lvar, :v))),
        s(:send, nil, :protected,
          s(:sym, :set_user)),
        s(:def, :set_password,
          s(:args,
            s(:arg, :v)),
          s(:ivasgn, :@password,
            s(:lvar, :v))),
        s(:send, nil, :protected,
          s(:sym, :set_password)),
        s(:def, :split_userinfo,
          s(:args,
            s(:arg, :ui)),
          s(:begin,
            s(:if,
              s(:lvar, :ui), nil,
              s(:return,
                s(:nil),
                s(:nil))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :user),
                s(:lvasgn, :password)),
              s(:send,
                s(:lvar, :ui), :split,
                s(:str, ":"),
                s(:int, 2))),
            s(:return,
              s(:lvar, :user),
              s(:lvar, :password)))),
        s(:send, nil, :private,
          s(:sym, :split_userinfo)),
        s(:def, :escape_userpass,
          s(:args,
            s(:arg, :v)),
          s(:send,
            s(:send, nil, :parser), :escape,
            s(:lvar, :v),
            s(:regexp,
              s(:str, "[@:/]"),
              s(:regopt, :o)))),
        s(:send, nil, :private,
          s(:sym, :escape_userpass)),
        s(:def, :userinfo,
          s(:args),
          s(:if,
            s(:send,
              s(:ivar, :@user), :nil?),
            s(:nil),
            s(:if,
              s(:send,
                s(:ivar, :@password), :nil?),
              s(:ivar, :@user),
              s(:send,
                s(:send,
                  s(:ivar, :@user), :+,
                  s(:str, ":")), :+,
                s(:ivar, :@password))))),
        s(:def, :user,
          s(:args),
          s(:ivar, :@user)),
        s(:def, :password,
          s(:args),
          s(:ivar, :@password)),
        s(:def, :check_host,
          s(:args,
            s(:arg, :v)),
          s(:begin,
            s(:if,
              s(:lvar, :v), nil,
              s(:return,
                s(:lvar, :v))),
            s(:if,
              s(:ivar, :@opaque),
              s(:send, nil, :raise,
                s(:const, nil, :InvalidURIError),
                s(:str, "can not set host with registry or opaque")),
              s(:if,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send, nil, :parser), :regexp), :[],
                    s(:sym, :HOST)), :!~,
                  s(:lvar, :v)),
                s(:send, nil, :raise,
                  s(:const, nil, :InvalidComponentError),
                  s(:dstr,
                    s(:str, "bad component(expected host component): "),
                    s(:begin,
                      s(:lvar, :v)))), nil)),
            s(:return,
              s(:true)))),
        s(:send, nil, :private,
          s(:sym, :check_host)),
        s(:def, :set_host,
          s(:args,
            s(:arg, :v)),
          s(:ivasgn, :@host,
            s(:lvar, :v))),
        s(:send, nil, :protected,
          s(:sym, :set_host)),
        s(:def, :host=,
          s(:args,
            s(:arg, :v)),
          s(:begin,
            s(:send, nil, :check_host,
              s(:lvar, :v)),
            s(:send, nil, :set_host,
              s(:lvar, :v)),
            s(:lvar, :v))),
        s(:def, :hostname,
          s(:args),
          s(:begin,
            s(:lvasgn, :v,
              s(:send,
                s(:self), :host)),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A\\[(.*)\\]\\z"),
                  s(:regopt)),
                s(:lvar, :v)),
              s(:nth_ref, 1),
              s(:lvar, :v)))),
        s(:def, :hostname=,
          s(:args,
            s(:arg, :v)),
          s(:begin,
            s(:if,
              s(:and,
                s(:send,
                  s(:regexp,
                    s(:str, "\\A\\[.*\\]\\z"),
                    s(:regopt)), :!~,
                  s(:lvar, :v)),
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, ":"),
                    s(:regopt)),
                  s(:lvar, :v))),
              s(:lvasgn, :v,
                s(:dstr,
                  s(:str, "["),
                  s(:begin,
                    s(:lvar, :v)),
                  s(:str, "]"))), nil),
            s(:send,
              s(:self), :host=,
              s(:lvar, :v)))),
        s(:def, :check_port,
          s(:args,
            s(:arg, :v)),
          s(:begin,
            s(:if,
              s(:lvar, :v), nil,
              s(:return,
                s(:lvar, :v))),
            s(:if,
              s(:ivar, :@opaque),
              s(:send, nil, :raise,
                s(:const, nil, :InvalidURIError),
                s(:str, "can not set port with registry or opaque")),
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :v), :kind_of?,
                      s(:const, nil, :Fixnum)), :!),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send, nil, :parser), :regexp), :[],
                      s(:sym, :PORT)), :!~,
                    s(:lvar, :v))),
                s(:send, nil, :raise,
                  s(:const, nil, :InvalidComponentError),
                  s(:dstr,
                    s(:str, "bad component(expected port component): "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :v), :inspect)))), nil)),
            s(:return,
              s(:true)))),
        s(:send, nil, :private,
          s(:sym, :check_port)),
        s(:def, :set_port,
          s(:args,
            s(:arg, :v)),
          s(:begin,
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :v), :!),
                s(:send,
                  s(:lvar, :v), :kind_of?,
                  s(:const, nil, :Fixnum))), nil,
              s(:lvasgn, :v,
                s(:if,
                  s(:send,
                    s(:lvar, :v), :empty?),
                  s(:nil),
                  s(:send,
                    s(:lvar, :v), :to_i)))),
            s(:ivasgn, :@port,
              s(:lvar, :v)))),
        s(:send, nil, :protected,
          s(:sym, :set_port)),
        s(:def, :port=,
          s(:args,
            s(:arg, :v)),
          s(:begin,
            s(:send, nil, :check_port,
              s(:lvar, :v)),
            s(:send, nil, :set_port,
              s(:lvar, :v)),
            s(:send, nil, :port))),
        s(:def, :check_registry,
          s(:args,
            s(:arg, :v)),
          s(:send, nil, :raise,
            s(:const, nil, :InvalidURIError),
            s(:str, "can not set registry"))),
        s(:send, nil, :private,
          s(:sym, :check_registry)),
        s(:def, :set_registry,
          s(:args,
            s(:arg, :v)),
          s(:send, nil, :raise,
            s(:const, nil, :InvalidURIError),
            s(:str, "can not set registry"))),
        s(:send, nil, :protected,
          s(:sym, :set_registry)),
        s(:def, :registry=,
          s(:args,
            s(:arg, :v)),
          s(:send, nil, :raise,
            s(:const, nil, :InvalidURIError),
            s(:str, "can not set registry"))),
        s(:def, :check_path,
          s(:args,
            s(:arg, :v)),
          s(:begin,
            s(:if,
              s(:and,
                s(:lvar, :v),
                s(:ivar, :@opaque)),
              s(:send, nil, :raise,
                s(:const, nil, :InvalidURIError),
                s(:str, "path conflicts with opaque")), nil),
            s(:if,
              s(:and,
                s(:ivar, :@scheme),
                s(:send,
                  s(:ivar, :@scheme), :!=,
                  s(:str, "ftp"))),
              s(:if,
                s(:and,
                  s(:and,
                    s(:lvar, :v),
                    s(:send,
                      s(:lvar, :v), :!=,
                      s(:str, ""))),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send, nil, :parser), :regexp), :[],
                      s(:sym, :ABS_PATH)), :!~,
                    s(:lvar, :v))),
                s(:send, nil, :raise,
                  s(:const, nil, :InvalidComponentError),
                  s(:dstr,
                    s(:str, "bad component(expected absolute path component): "),
                    s(:begin,
                      s(:lvar, :v)))), nil),
              s(:if,
                s(:and,
                  s(:and,
                    s(:and,
                      s(:lvar, :v),
                      s(:send,
                        s(:lvar, :v), :!=,
                        s(:str, ""))),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send, nil, :parser), :regexp), :[],
                        s(:sym, :ABS_PATH)), :!~,
                      s(:lvar, :v))),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send, nil, :parser), :regexp), :[],
                      s(:sym, :REL_PATH)), :!~,
                    s(:lvar, :v))),
                s(:send, nil, :raise,
                  s(:const, nil, :InvalidComponentError),
                  s(:dstr,
                    s(:str, "bad component(expected relative path component): "),
                    s(:begin,
                      s(:lvar, :v)))), nil)),
            s(:return,
              s(:true)))),
        s(:send, nil, :private,
          s(:sym, :check_path)),
        s(:def, :set_path,
          s(:args,
            s(:arg, :v)),
          s(:ivasgn, :@path,
            s(:lvar, :v))),
        s(:send, nil, :protected,
          s(:sym, :set_path)),
        s(:def, :path=,
          s(:args,
            s(:arg, :v)),
          s(:begin,
            s(:send, nil, :check_path,
              s(:lvar, :v)),
            s(:send, nil, :set_path,
              s(:lvar, :v)),
            s(:lvar, :v))),
        s(:def, :query=,
          s(:args,
            s(:arg, :v)),
          s(:begin,
            s(:if,
              s(:lvar, :v), nil,
              s(:return,
                s(:ivasgn, :@query,
                  s(:nil)))),
            s(:if,
              s(:ivar, :@opaque),
              s(:send, nil, :raise,
                s(:const, nil, :InvalidURIError),
                s(:str, "query conflicts with opaque")), nil),
            s(:lvasgn, :x,
              s(:send,
                s(:lvar, :v), :to_str)),
            s(:if,
              s(:send,
                s(:lvar, :x), :equal?,
                s(:lvar, :v)),
              s(:lvasgn, :v,
                s(:send,
                  s(:lvar, :x), :dup)), nil),
            s(:rescue,
              s(:send,
                s(:lvar, :v), :encode!,
                s(:const,
                  s(:const, nil, :Encoding), :UTF_8)),
              s(:resbody, nil, nil,
                s(:nil)), nil),
            s(:send,
              s(:lvar, :v), :delete!,
              s(:str, "\t\r\n")),
            s(:send,
              s(:lvar, :v), :force_encoding,
              s(:const,
                s(:const, nil, :Encoding), :ASCII_8BIT)),
            s(:block,
              s(:send,
                s(:lvar, :v), :gsub!,
                s(:send,
                  s(:regexp,
                    s(:str, "(?!%\\h\\h|[!$-&(-;=?-_a-~])."),
                    s(:regopt, :n)), :freeze)),
              s(:args),
              s(:send,
                s(:str, "%%%02X"), :%,
                s(:send,
                  s(:back_ref, :$&), :ord))),
            s(:send,
              s(:lvar, :v), :force_encoding,
              s(:const,
                s(:const, nil, :Encoding), :US_ASCII)),
            s(:ivasgn, :@query,
              s(:lvar, :v)))),
        s(:def, :check_opaque,
          s(:args,
            s(:arg, :v)),
          s(:begin,
            s(:if,
              s(:lvar, :v), nil,
              s(:return,
                s(:lvar, :v))),
            s(:if,
              s(:or,
                s(:or,
                  s(:or,
                    s(:ivar, :@host),
                    s(:ivar, :@port)),
                  s(:ivar, :@user)),
                s(:ivar, :@path)),
              s(:send, nil, :raise,
                s(:const, nil, :InvalidURIError),
                s(:str, "can not set opaque with host, port, userinfo or path")),
              s(:if,
                s(:and,
                  s(:lvar, :v),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send, nil, :parser), :regexp), :[],
                      s(:sym, :OPAQUE)), :!~,
                    s(:lvar, :v))),
                s(:send, nil, :raise,
                  s(:const, nil, :InvalidComponentError),
                  s(:dstr,
                    s(:str, "bad component(expected opaque component): "),
                    s(:begin,
                      s(:lvar, :v)))), nil)),
            s(:return,
              s(:true)))),
        s(:send, nil, :private,
          s(:sym, :check_opaque)),
        s(:def, :set_opaque,
          s(:args,
            s(:arg, :v)),
          s(:ivasgn, :@opaque,
            s(:lvar, :v))),
        s(:send, nil, :protected,
          s(:sym, :set_opaque)),
        s(:def, :opaque=,
          s(:args,
            s(:arg, :v)),
          s(:begin,
            s(:send, nil, :check_opaque,
              s(:lvar, :v)),
            s(:send, nil, :set_opaque,
              s(:lvar, :v)),
            s(:lvar, :v))),
        s(:def, :fragment=,
          s(:args,
            s(:arg, :v)),
          s(:begin,
            s(:if,
              s(:lvar, :v), nil,
              s(:return,
                s(:ivasgn, :@fragment,
                  s(:nil)))),
            s(:lvasgn, :x,
              s(:send,
                s(:lvar, :v), :to_str)),
            s(:if,
              s(:send,
                s(:lvar, :x), :equal?,
                s(:lvar, :v)),
              s(:lvasgn, :v,
                s(:send,
                  s(:lvar, :x), :dup)), nil),
            s(:rescue,
              s(:send,
                s(:lvar, :v), :encode!,
                s(:const,
                  s(:const, nil, :Encoding), :UTF_8)),
              s(:resbody, nil, nil,
                s(:nil)), nil),
            s(:send,
              s(:lvar, :v), :delete!,
              s(:str, "\t\r\n")),
            s(:send,
              s(:lvar, :v), :force_encoding,
              s(:const,
                s(:const, nil, :Encoding), :ASCII_8BIT)),
            s(:block,
              s(:send,
                s(:lvar, :v), :gsub!,
                s(:regexp,
                  s(:str, "(?!%\\h\\h|[!-~])."),
                  s(:regopt, :n))),
              s(:args),
              s(:send,
                s(:str, "%%%02X"), :%,
                s(:send,
                  s(:back_ref, :$&), :ord))),
            s(:send,
              s(:lvar, :v), :force_encoding,
              s(:const,
                s(:const, nil, :Encoding), :US_ASCII)),
            s(:ivasgn, :@fragment,
              s(:lvar, :v)))),
        s(:def, :hierarchical?,
          s(:args),
          s(:if,
            s(:ivar, :@path),
            s(:true),
            s(:false))),
        s(:def, :absolute?,
          s(:args),
          s(:if,
            s(:ivar, :@scheme),
            s(:true),
            s(:false))),
        s(:alias,
          s(:sym, :absolute),
          s(:sym, :absolute?)),
        s(:def, :relative?,
          s(:args),
          s(:send,
            s(:send, nil, :absolute?), :!)),
        s(:def, :split_path,
          s(:args,
            s(:arg, :path)),
          s(:send,
            s(:lvar, :path), :split,
            s(:regexp,
              s(:str, "/+"),
              s(:regopt)),
            s(:int, -1))),
        s(:send, nil, :private,
          s(:sym, :split_path)),
        s(:def, :merge_path,
          s(:args,
            s(:arg, :base),
            s(:arg, :rel)),
          s(:begin,
            s(:lvasgn, :base_path,
              s(:send, nil, :split_path,
                s(:lvar, :base))),
            s(:lvasgn, :rel_path,
              s(:send, nil, :split_path,
                s(:lvar, :rel))),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :base_path), :last), :==,
                s(:str, "..")),
              s(:send,
                s(:lvar, :base_path), :<<,
                s(:str, "")), nil),
            s(:while,
              s(:lvasgn, :i,
                s(:send,
                  s(:lvar, :base_path), :index,
                  s(:str, ".."))),
              s(:send,
                s(:lvar, :base_path), :slice!,
                s(:send,
                  s(:lvar, :i), :-,
                  s(:int, 1)),
                s(:int, 2))),
            s(:if,
              s(:and,
                s(:begin,
                  s(:lvasgn, :first,
                    s(:send,
                      s(:lvar, :rel_path), :first))),
                s(:send,
                  s(:lvar, :first), :empty?)),
              s(:begin,
                s(:send,
                  s(:lvar, :base_path), :clear),
                s(:send,
                  s(:lvar, :rel_path), :shift)), nil),
            s(:if,
              s(:or,
                s(:send,
                  s(:send,
                    s(:lvar, :rel_path), :last), :==,
                  s(:str, ".")),
                s(:send,
                  s(:send,
                    s(:lvar, :rel_path), :last), :==,
                  s(:str, ".."))),
              s(:send,
                s(:lvar, :rel_path), :push,
                s(:str, "")), nil),
            s(:send,
              s(:lvar, :rel_path), :delete,
              s(:str, ".")),
            s(:lvasgn, :tmp,
              s(:array)),
            s(:block,
              s(:send,
                s(:lvar, :rel_path), :each),
              s(:args,
                s(:arg, :x)),
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :x), :==,
                    s(:str, "..")),
                  s(:send,
                    s(:begin,
                      s(:or,
                        s(:send,
                          s(:lvar, :tmp), :empty?),
                        s(:send,
                          s(:send,
                            s(:lvar, :tmp), :last), :==,
                          s(:str, "..")))), :!)),
                s(:send,
                  s(:lvar, :tmp), :pop),
                s(:send,
                  s(:lvar, :tmp), :<<,
                  s(:lvar, :x)))),
            s(:lvasgn, :add_trailer_slash,
              s(:send,
                s(:send,
                  s(:lvar, :tmp), :empty?), :!)),
            s(:if,
              s(:send,
                s(:lvar, :base_path), :empty?),
              s(:lvasgn, :base_path,
                s(:array,
                  s(:str, ""))),
              s(:if,
                s(:lvar, :add_trailer_slash),
                s(:send,
                  s(:lvar, :base_path), :pop), nil)),
            s(:while,
              s(:lvasgn, :x,
                s(:send,
                  s(:lvar, :tmp), :shift)),
              s(:if,
                s(:send,
                  s(:lvar, :x), :==,
                  s(:str, "..")),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :base_path), :size), :>,
                    s(:int, 1)),
                  s(:send,
                    s(:lvar, :base_path), :pop), nil),
                s(:begin,
                  s(:send,
                    s(:lvar, :base_path), :<<,
                    s(:lvar, :x)),
                  s(:block,
                    s(:send,
                      s(:lvar, :tmp), :each),
                    s(:args,
                      s(:arg, :t)),
                    s(:send,
                      s(:lvar, :base_path), :<<,
                      s(:lvar, :t))),
                  s(:lvasgn, :add_trailer_slash,
                    s(:false)),
                  s(:break)))),
            s(:if,
              s(:lvar, :add_trailer_slash),
              s(:send,
                s(:lvar, :base_path), :push,
                s(:str, "")), nil),
            s(:return,
              s(:send,
                s(:lvar, :base_path), :join,
                s(:str, "/"))))),
        s(:send, nil, :private,
          s(:sym, :merge_path)),
        s(:def, :merge!,
          s(:args,
            s(:arg, :oth)),
          s(:begin,
            s(:lvasgn, :t,
              s(:send, nil, :merge,
                s(:lvar, :oth))),
            s(:if,
              s(:send,
                s(:self), :==,
                s(:lvar, :t)),
              s(:nil),
              s(:begin,
                s(:send, nil, :replace!,
                  s(:lvar, :t)),
                s(:self))))),
        s(:def, :merge,
          s(:args,
            s(:arg, :oth)),
          s(:begin,
            s(:kwbegin,
              s(:rescue,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :base),
                    s(:lvasgn, :rel)),
                  s(:send, nil, :merge0,
                    s(:lvar, :oth))),
                s(:resbody, nil, nil,
                  s(:send, nil, :raise,
                    s(:send,
                      s(:gvar, :$!), :class),
                    s(:send,
                      s(:gvar, :$!), :message))), nil)),
            s(:if,
              s(:send,
                s(:lvar, :base), :==,
                s(:lvar, :rel)),
              s(:return,
                s(:lvar, :base)), nil),
            s(:lvasgn, :authority,
              s(:or,
                s(:or,
                  s(:send,
                    s(:lvar, :rel), :userinfo),
                  s(:send,
                    s(:lvar, :rel), :host)),
                s(:send,
                  s(:lvar, :rel), :port))),
            s(:if,
              s(:and,
                s(:and,
                  s(:begin,
                    s(:or,
                      s(:send,
                        s(:send,
                          s(:lvar, :rel), :path), :nil?),
                      s(:send,
                        s(:send,
                          s(:lvar, :rel), :path), :empty?))),
                  s(:send,
                    s(:lvar, :authority), :!)),
                s(:send,
                  s(:send,
                    s(:lvar, :rel), :query), :!)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :rel), :fragment),
                  s(:send,
                    s(:lvar, :base), :fragment=,
                    s(:begin,
                      s(:send,
                        s(:lvar, :rel), :fragment))), nil),
                s(:return,
                  s(:lvar, :base))), nil),
            s(:send,
              s(:lvar, :base), :query=,
              s(:nil)),
            s(:send,
              s(:lvar, :base), :fragment=,
              s(:begin,
                s(:nil))),
            s(:if,
              s(:send,
                s(:lvar, :authority), :!),
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :base), :path),
                  s(:send,
                    s(:lvar, :rel), :path)),
                s(:send,
                  s(:lvar, :base), :set_path,
                  s(:send, nil, :merge_path,
                    s(:send,
                      s(:lvar, :base), :path),
                    s(:send,
                      s(:lvar, :rel), :path))), nil),
              s(:if,
                s(:send,
                  s(:lvar, :rel), :path),
                s(:send,
                  s(:lvar, :base), :set_path,
                  s(:send,
                    s(:lvar, :rel), :path)), nil)),
            s(:if,
              s(:send,
                s(:lvar, :rel), :userinfo),
              s(:send,
                s(:lvar, :base), :set_userinfo,
                s(:send,
                  s(:lvar, :rel), :userinfo)), nil),
            s(:if,
              s(:send,
                s(:lvar, :rel), :host),
              s(:send,
                s(:lvar, :base), :set_host,
                s(:send,
                  s(:lvar, :rel), :host)), nil),
            s(:if,
              s(:send,
                s(:lvar, :rel), :port),
              s(:send,
                s(:lvar, :base), :set_port,
                s(:send,
                  s(:lvar, :rel), :port)), nil),
            s(:if,
              s(:send,
                s(:lvar, :rel), :query),
              s(:send,
                s(:lvar, :base), :query=,
                s(:send,
                  s(:lvar, :rel), :query)), nil),
            s(:if,
              s(:send,
                s(:lvar, :rel), :fragment),
              s(:send,
                s(:lvar, :base), :fragment=,
                s(:begin,
                  s(:send,
                    s(:lvar, :rel), :fragment))), nil),
            s(:return,
              s(:lvar, :base)))),
        s(:alias,
          s(:sym, :+),
          s(:sym, :merge)),
        s(:def, :merge0,
          s(:args,
            s(:arg, :oth)),
          s(:begin,
            s(:lvasgn, :oth,
              s(:send,
                s(:send, nil, :parser), :send,
                s(:sym, :convert_to_uri),
                s(:lvar, :oth))),
            s(:if,
              s(:and,
                s(:send,
                  s(:self), :relative?),
                s(:send,
                  s(:lvar, :oth), :relative?)),
              s(:send, nil, :raise,
                s(:const, nil, :BadURIError),
                s(:str, "both URI are relative")), nil),
            s(:if,
              s(:and,
                s(:send,
                  s(:self), :absolute?),
                s(:send,
                  s(:lvar, :oth), :absolute?)),
              s(:return,
                s(:lvar, :oth),
                s(:lvar, :oth)), nil),
            s(:if,
              s(:send,
                s(:self), :absolute?),
              s(:return,
                s(:send,
                  s(:self), :dup),
                s(:lvar, :oth)),
              s(:return,
                s(:lvar, :oth),
                s(:lvar, :oth))))),
        s(:send, nil, :private,
          s(:sym, :merge0)),
        s(:def, :route_from_path,
          s(:args,
            s(:arg, :src),
            s(:arg, :dst)),
          s(:begin,
            s(:case,
              s(:lvar, :dst),
              s(:when,
                s(:lvar, :src),
                s(:return,
                  s(:str, ""))),
              s(:when,
                s(:regexp,
                  s(:str, "(?:\\A|/)\\.\\.?(?:/|\\z)"),
                  s(:regopt)),
                s(:return,
                  s(:send,
                    s(:lvar, :dst), :dup))), nil),
            s(:lvasgn, :src_path,
              s(:send,
                s(:lvar, :src), :scan,
                s(:regexp,
                  s(:str, "(?:\\A|[^/]+)/"),
                  s(:regopt)))),
            s(:lvasgn, :dst_path,
              s(:send,
                s(:lvar, :dst), :scan,
                s(:regexp,
                  s(:str, "(?:\\A|[^/]+)/?"),
                  s(:regopt)))),
            s(:while,
              s(:and,
                s(:send,
                  s(:send,
                    s(:lvar, :dst_path), :empty?), :!),
                s(:send,
                  s(:send,
                    s(:lvar, :dst_path), :first), :==,
                  s(:send,
                    s(:lvar, :src_path), :first))),
              s(:begin,
                s(:send,
                  s(:lvar, :src_path), :shift),
                s(:send,
                  s(:lvar, :dst_path), :shift))),
            s(:lvasgn, :tmp,
              s(:send,
                s(:lvar, :dst_path), :join)),
            s(:if,
              s(:send,
                s(:lvar, :src_path), :empty?),
              s(:if,
                s(:send,
                  s(:lvar, :tmp), :empty?),
                s(:return,
                  s(:str, "./")),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :dst_path), :first), :include?,
                    s(:str, ":")),
                  s(:return,
                    s(:send,
                      s(:str, "./"), :+,
                      s(:lvar, :tmp))),
                  s(:return,
                    s(:lvar, :tmp)))), nil),
            s(:return,
              s(:send,
                s(:send,
                  s(:str, "../"), :*,
                  s(:send,
                    s(:lvar, :src_path), :size)), :+,
                s(:lvar, :tmp))))),
        s(:send, nil, :private,
          s(:sym, :route_from_path)),
        s(:def, :route_from0,
          s(:args,
            s(:arg, :oth)),
          s(:begin,
            s(:lvasgn, :oth,
              s(:send,
                s(:send, nil, :parser), :send,
                s(:sym, :convert_to_uri),
                s(:lvar, :oth))),
            s(:if,
              s(:send,
                s(:self), :relative?),
              s(:send, nil, :raise,
                s(:const, nil, :BadURIError),
                s(:dstr,
                  s(:str, "relative URI: "),
                  s(:begin,
                    s(:self)))), nil),
            s(:if,
              s(:send,
                s(:lvar, :oth), :relative?),
              s(:send, nil, :raise,
                s(:const, nil, :BadURIError),
                s(:dstr,
                  s(:str, "relative URI: "),
                  s(:begin,
                    s(:lvar, :oth)))), nil),
            s(:if,
              s(:send,
                s(:send,
                  s(:self), :scheme), :!=,
                s(:send,
                  s(:lvar, :oth), :scheme)),
              s(:return,
                s(:self),
                s(:send,
                  s(:self), :dup)), nil),
            s(:lvasgn, :rel,
              s(:send,
                s(:const,
                  s(:const, nil, :URI), :Generic), :new,
                s(:nil),
                s(:send,
                  s(:self), :userinfo),
                s(:send,
                  s(:self), :host),
                s(:send,
                  s(:self), :port),
                s(:nil),
                s(:send,
                  s(:self), :path),
                s(:send,
                  s(:self), :opaque),
                s(:send,
                  s(:self), :query),
                s(:send,
                  s(:self), :fragment),
                s(:send, nil, :parser))),
            s(:if,
              s(:or,
                s(:or,
                  s(:send,
                    s(:send,
                      s(:lvar, :rel), :userinfo), :!=,
                    s(:send,
                      s(:lvar, :oth), :userinfo)),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :rel), :host), :to_s), :downcase), :!=,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :oth), :host), :to_s), :downcase))),
                s(:send,
                  s(:send,
                    s(:lvar, :rel), :port), :!=,
                  s(:send,
                    s(:lvar, :oth), :port))),
              s(:begin,
                s(:if,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:self), :userinfo), :nil?),
                    s(:send,
                      s(:send,
                        s(:self), :host), :nil?)),
                  s(:return,
                    s(:self),
                    s(:send,
                      s(:self), :dup)), nil),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :rel), :port), :==,
                    s(:send,
                      s(:lvar, :oth), :default_port)),
                  s(:send,
                    s(:lvar, :rel), :set_port,
                    s(:nil)), nil),
                s(:return,
                  s(:lvar, :rel),
                  s(:lvar, :rel))), nil),
            s(:send,
              s(:lvar, :rel), :set_userinfo,
              s(:nil)),
            s(:send,
              s(:lvar, :rel), :set_host,
              s(:nil)),
            s(:send,
              s(:lvar, :rel), :set_port,
              s(:nil)),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :rel), :path),
                s(:send,
                  s(:send,
                    s(:lvar, :rel), :path), :==,
                  s(:send,
                    s(:lvar, :oth), :path))),
              s(:begin,
                s(:send,
                  s(:lvar, :rel), :set_path,
                  s(:str, "")),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :rel), :query), :==,
                    s(:send,
                      s(:lvar, :oth), :query)),
                  s(:send,
                    s(:lvar, :rel), :query=,
                    s(:nil)), nil),
                s(:return,
                  s(:lvar, :rel),
                  s(:lvar, :rel))),
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :rel), :opaque),
                  s(:send,
                    s(:send,
                      s(:lvar, :rel), :opaque), :==,
                    s(:send,
                      s(:lvar, :oth), :opaque))),
                s(:begin,
                  s(:send,
                    s(:lvar, :rel), :set_opaque,
                    s(:str, "")),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :rel), :query), :==,
                      s(:send,
                        s(:lvar, :oth), :query)),
                    s(:send,
                      s(:lvar, :rel), :query=,
                      s(:nil)), nil),
                  s(:return,
                    s(:lvar, :rel),
                    s(:lvar, :rel))), nil)),
            s(:return,
              s(:lvar, :oth),
              s(:lvar, :rel)))),
        s(:send, nil, :private,
          s(:sym, :route_from0)),
        s(:def, :route_from,
          s(:args,
            s(:arg, :oth)),
          s(:begin,
            s(:kwbegin,
              s(:rescue,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :oth),
                    s(:lvasgn, :rel)),
                  s(:send, nil, :route_from0,
                    s(:lvar, :oth))),
                s(:resbody, nil, nil,
                  s(:send, nil, :raise,
                    s(:send,
                      s(:gvar, :$!), :class),
                    s(:send,
                      s(:gvar, :$!), :message))), nil)),
            s(:if,
              s(:send,
                s(:lvar, :oth), :==,
                s(:lvar, :rel)),
              s(:return,
                s(:lvar, :rel)), nil),
            s(:send,
              s(:lvar, :rel), :set_path,
              s(:send, nil, :route_from_path,
                s(:send,
                  s(:lvar, :oth), :path),
                s(:send,
                  s(:self), :path))),
            s(:if,
              s(:and,
                s(:send,
                  s(:send,
                    s(:lvar, :rel), :path), :==,
                  s(:str, "./")),
                s(:send,
                  s(:self), :query)),
              s(:send,
                s(:lvar, :rel), :set_path,
                s(:str, "")), nil),
            s(:return,
              s(:lvar, :rel)))),
        s(:alias,
          s(:sym, :-),
          s(:sym, :route_from)),
        s(:def, :route_to,
          s(:args,
            s(:arg, :oth)),
          s(:send,
            s(:send,
              s(:send, nil, :parser), :send,
              s(:sym, :convert_to_uri),
              s(:lvar, :oth)), :route_from,
            s(:self))),
        s(:def, :normalize,
          s(:args),
          s(:begin,
            s(:lvasgn, :uri,
              s(:send, nil, :dup)),
            s(:send,
              s(:lvar, :uri), :normalize!),
            s(:lvar, :uri))),
        s(:def, :normalize!,
          s(:args),
          s(:begin,
            s(:if,
              s(:csend,
                s(:send, nil, :path), :empty?),
              s(:send, nil, :set_path,
                s(:str, "/")), nil),
            s(:if,
              s(:and,
                s(:send, nil, :scheme),
                s(:send,
                  s(:send, nil, :scheme), :!=,
                  s(:send,
                    s(:send, nil, :scheme), :downcase))),
              s(:send, nil, :set_scheme,
                s(:send,
                  s(:send,
                    s(:self), :scheme), :downcase)), nil),
            s(:if,
              s(:and,
                s(:send, nil, :host),
                s(:send,
                  s(:send, nil, :host), :!=,
                  s(:send,
                    s(:send, nil, :host), :downcase))),
              s(:send, nil, :set_host,
                s(:send,
                  s(:send,
                    s(:self), :host), :downcase)), nil))),
        s(:def, :to_s,
          s(:args),
          s(:begin,
            s(:lvasgn, :str,
              s(:send,
                s(:str, ""), :dup)),
            s(:if,
              s(:ivar, :@scheme),
              s(:begin,
                s(:send,
                  s(:lvar, :str), :<<,
                  s(:ivar, :@scheme)),
                s(:send,
                  s(:lvar, :str), :<<,
                  s(:str, ":"))), nil),
            s(:if,
              s(:ivar, :@opaque),
              s(:send,
                s(:lvar, :str), :<<,
                s(:ivar, :@opaque)),
              s(:begin,
                s(:if,
                  s(:ivar, :@host),
                  s(:send,
                    s(:lvar, :str), :<<,
                    s(:str, "//")), nil),
                s(:if,
                  s(:send,
                    s(:self), :userinfo),
                  s(:begin,
                    s(:send,
                      s(:lvar, :str), :<<,
                      s(:send,
                        s(:self), :userinfo)),
                    s(:send,
                      s(:lvar, :str), :<<,
                      s(:str, "@"))), nil),
                s(:if,
                  s(:ivar, :@host),
                  s(:send,
                    s(:lvar, :str), :<<,
                    s(:ivar, :@host)), nil),
                s(:if,
                  s(:and,
                    s(:ivar, :@port),
                    s(:send,
                      s(:ivar, :@port), :!=,
                      s(:send,
                        s(:self), :default_port))),
                  s(:begin,
                    s(:send,
                      s(:lvar, :str), :<<,
                      s(:str, ":")),
                    s(:send,
                      s(:lvar, :str), :<<,
                      s(:send,
                        s(:ivar, :@port), :to_s))), nil),
                s(:send,
                  s(:lvar, :str), :<<,
                  s(:ivar, :@path)),
                s(:if,
                  s(:ivar, :@query),
                  s(:begin,
                    s(:send,
                      s(:lvar, :str), :<<,
                      s(:str, "?")),
                    s(:send,
                      s(:lvar, :str), :<<,
                      s(:ivar, :@query))), nil))),
            s(:if,
              s(:ivar, :@fragment),
              s(:begin,
                s(:send,
                  s(:lvar, :str), :<<,
                  s(:str, "#")),
                s(:send,
                  s(:lvar, :str), :<<,
                  s(:ivar, :@fragment))), nil),
            s(:lvar, :str))),
        s(:def, :==,
          s(:args,
            s(:arg, :oth)),
          s(:if,
            s(:send,
              s(:send,
                s(:self), :class), :==,
              s(:send,
                s(:lvar, :oth), :class)),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :normalize), :component_ary), :==,
              s(:send,
                s(:send,
                  s(:lvar, :oth), :normalize), :component_ary)),
            s(:false))),
        s(:def, :hash,
          s(:args),
          s(:send,
            s(:send,
              s(:self), :component_ary), :hash)),
        s(:def, :eql?,
          s(:args,
            s(:arg, :oth)),
          s(:and,
            s(:and,
              s(:send,
                s(:send,
                  s(:self), :class), :==,
                s(:send,
                  s(:lvar, :oth), :class)),
              s(:send,
                s(:send, nil, :parser), :==,
                s(:send,
                  s(:lvar, :oth), :parser))),
            s(:send,
              s(:send,
                s(:self), :component_ary), :eql?,
              s(:send,
                s(:lvar, :oth), :component_ary)))),
        s(:def, :component_ary,
          s(:args),
          s(:block,
            s(:send,
              s(:send, nil, :component), :collect),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:self), :send,
              s(:lvar, :x)))),
        s(:send, nil, :protected,
          s(:sym, :component_ary)),
        s(:def, :select,
          s(:args,
            s(:restarg, :components)),
          s(:block,
            s(:send,
              s(:lvar, :components), :collect),
            s(:args,
              s(:arg, :c)),
            s(:if,
              s(:send,
                s(:send, nil, :component), :include?,
                s(:lvar, :c)),
              s(:send,
                s(:self), :send,
                s(:lvar, :c)),
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:dstr,
                  s(:str, "expected of components of "),
                  s(:begin,
                    s(:send,
                      s(:self), :class)),
                  s(:str, " ("),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:self), :class), :component), :join,
                      s(:str, ", "))),
                  s(:str, ")")))))),
        s(:def, :inspect,
          s(:args),
          s(:dstr,
            s(:str, "#<"),
            s(:begin,
              s(:send,
                s(:self), :class)),
            s(:str, " "),
            s(:begin,
              s(:self)),
            s(:str, ">"))),
        s(:def, :coerce,
          s(:args,
            s(:arg, :oth)),
          s(:begin,
            s(:case,
              s(:lvar, :oth),
              s(:when,
                s(:const, nil, :String),
                s(:lvasgn, :oth,
                  s(:send,
                    s(:send, nil, :parser), :parse,
                    s(:lvar, :oth)))),
              s(:zsuper)),
            s(:return,
              s(:lvar, :oth),
              s(:self)))),
        s(:def, :find_proxy,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:self), :relative?),
              s(:send, nil, :raise,
                s(:const, nil, :BadURIError),
                s(:dstr,
                  s(:str, "relative URI: "),
                  s(:begin,
                    s(:self)))), nil),
            s(:lvasgn, :name,
              s(:send,
                s(:send,
                  s(:send,
                    s(:self), :scheme), :downcase), :+,
                s(:str, "_proxy"))),
            s(:lvasgn, :proxy_uri,
              s(:nil)),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :name), :==,
                  s(:str, "http_proxy")),
                s(:send,
                  s(:const, nil, :ENV), :include?,
                  s(:str, "REQUEST_METHOD"))),
              s(:begin,
                s(:lvasgn, :pairs,
                  s(:block,
                    s(:send,
                      s(:const, nil, :ENV), :reject),
                    s(:args,
                      s(:arg, :k),
                      s(:arg, :v)),
                    s(:send,
                      s(:regexp,
                        s(:str, "\\Ahttp_proxy\\z"),
                        s(:regopt, :i)), :!~,
                      s(:lvar, :k)))),
                s(:case,
                  s(:send,
                    s(:lvar, :pairs), :length),
                  s(:when,
                    s(:int, 0),
                    s(:lvasgn, :proxy_uri,
                      s(:nil))),
                  s(:when,
                    s(:int, 1),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :k),
                          s(:lvasgn, :_)),
                        s(:send,
                          s(:lvar, :pairs), :shift)),
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:lvar, :k), :==,
                            s(:str, "http_proxy")),
                          s(:send,
                            s(:send,
                              s(:const, nil, :ENV), :[],
                              s(:send,
                                s(:lvar, :k), :upcase)), :==,
                            s(:nil))),
                        s(:lvasgn, :proxy_uri,
                          s(:send,
                            s(:const, nil, :ENV), :[],
                            s(:lvar, :name))),
                        s(:lvasgn, :proxy_uri,
                          s(:nil))))),
                  s(:lvasgn, :proxy_uri,
                    s(:send,
                      s(:send,
                        s(:const, nil, :ENV), :to_hash), :[],
                      s(:lvar, :name)))),
                s(:if,
                  s(:send,
                    s(:lvar, :proxy_uri), :!),
                  s(:lvasgn, :proxy_uri,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:dstr,
                        s(:str, "CGI_"),
                        s(:begin,
                          s(:send,
                            s(:lvar, :name), :upcase))))), nil)),
              s(:if,
                s(:send,
                  s(:lvar, :name), :==,
                  s(:str, "http_proxy")),
                s(:if,
                  s(:lvasgn, :proxy_uri,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:lvar, :name))), nil,
                  s(:if,
                    s(:lvasgn, :proxy_uri,
                      s(:send,
                        s(:const, nil, :ENV), :[],
                        s(:send,
                          s(:lvar, :name), :upcase))),
                    s(:send, nil, :warn,
                      s(:str, "The environment variable HTTP_PROXY is discouraged.  Use http_proxy.")), nil)),
                s(:lvasgn, :proxy_uri,
                  s(:or,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:lvar, :name)),
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:send,
                        s(:lvar, :name), :upcase)))))),
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :proxy_uri), :nil?),
                s(:send,
                  s(:lvar, :proxy_uri), :empty?)),
              s(:return,
                s(:nil)), nil),
            s(:if,
              s(:send,
                s(:self), :hostname),
              s(:begin,
                s(:send, nil, :require,
                  s(:str, "socket")),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:lvasgn, :addr,
                        s(:send,
                          s(:const, nil, :IPSocket), :getaddress,
                          s(:send,
                            s(:self), :hostname))),
                      s(:if,
                        s(:match_with_lvasgn,
                          s(:regexp,
                            s(:str, "\\A127\\.|\\A::1\\z"),
                            s(:regopt)),
                          s(:lvar, :addr)),
                        s(:return,
                          s(:nil)), nil)),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :SocketError)), nil, nil), nil))), nil),
            s(:lvasgn, :name,
              s(:str, "no_proxy")),
            s(:if,
              s(:lvasgn, :no_proxy,
                s(:or,
                  s(:send,
                    s(:const, nil, :ENV), :[],
                    s(:lvar, :name)),
                  s(:send,
                    s(:const, nil, :ENV), :[],
                    s(:send,
                      s(:lvar, :name), :upcase)))),
              s(:block,
                s(:send,
                  s(:lvar, :no_proxy), :scan,
                  s(:regexp,
                    s(:str, "([^:,]*)(?::(\\d+))?"),
                    s(:regopt))),
                s(:args,
                  s(:arg, :host),
                  s(:arg, :port)),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:regexp,
                        s(:str, "(\\A|\\.)"),
                        s(:begin,
                          s(:send,
                            s(:const, nil, :Regexp), :quote,
                            s(:lvar, :host))),
                        s(:str, "\\z"),
                        s(:regopt, :i)), :=~,
                      s(:send,
                        s(:self), :host)),
                    s(:begin,
                      s(:or,
                        s(:send,
                          s(:lvar, :port), :!),
                        s(:send,
                          s(:send,
                            s(:self), :port), :==,
                          s(:send,
                            s(:lvar, :port), :to_i))))),
                  s(:return,
                    s(:nil)), nil)), nil),
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:lvar, :proxy_uri))))))))
