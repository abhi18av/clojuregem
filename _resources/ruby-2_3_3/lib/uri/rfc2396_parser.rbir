s(:module,
  s(:const, nil, :URI),
  s(:begin,
    s(:module,
      s(:const, nil, :RFC2396_REGEXP),
      s(:module,
        s(:const, nil, :PATTERN),
        s(:begin,
          s(:casgn, nil, :ALPHA,
            s(:str, "a-zA-Z")),
          s(:casgn, nil, :ALNUM,
            s(:dstr,
              s(:begin,
                s(:const, nil, :ALPHA)),
              s(:str, "\\d"))),
          s(:casgn, nil, :HEX,
            s(:str, "a-fA-F\\d")),
          s(:casgn, nil, :ESCAPED,
            s(:dstr,
              s(:str, "%["),
              s(:begin,
                s(:const, nil, :HEX)),
              s(:str, "]{2}"))),
          s(:casgn, nil, :UNRESERVED,
            s(:dstr,
              s(:str, "\\-_.!~*'()"),
              s(:begin,
                s(:const, nil, :ALNUM)))),
          s(:casgn, nil, :RESERVED,
            s(:str, ";/?:@&=+$,\\[\\]")),
          s(:casgn, nil, :DOMLABEL,
            s(:dstr,
              s(:str, "(?:["),
              s(:begin,
                s(:const, nil, :ALNUM)),
              s(:str, "](?:[-"),
              s(:begin,
                s(:const, nil, :ALNUM)),
              s(:str, "]*["),
              s(:begin,
                s(:const, nil, :ALNUM)),
              s(:str, "])?)"))),
          s(:casgn, nil, :TOPLABEL,
            s(:dstr,
              s(:str, "(?:["),
              s(:begin,
                s(:const, nil, :ALPHA)),
              s(:str, "](?:[-"),
              s(:begin,
                s(:const, nil, :ALNUM)),
              s(:str, "]*["),
              s(:begin,
                s(:const, nil, :ALNUM)),
              s(:str, "])?)"))),
          s(:casgn, nil, :HOSTNAME,
            s(:dstr,
              s(:str, "(?:"),
              s(:begin,
                s(:const, nil, :DOMLABEL)),
              s(:str, "\\.)*"),
              s(:begin,
                s(:const, nil, :TOPLABEL)),
              s(:str, "\\.?")))))),
    s(:class,
      s(:const, nil, :RFC2396_Parser), nil,
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :RFC2396_REGEXP)),
        s(:def, :initialize,
          s(:args,
            s(:optarg, :opts,
              s(:hash))),
          s(:begin,
            s(:ivasgn, :@pattern,
              s(:send, nil, :initialize_pattern,
                s(:lvar, :opts))),
            s(:send,
              s(:ivar, :@pattern), :each_value,
              s(:block_pass,
                s(:sym, :freeze))),
            s(:send,
              s(:ivar, :@pattern), :freeze),
            s(:ivasgn, :@regexp,
              s(:send, nil, :initialize_regexp,
                s(:ivar, :@pattern))),
            s(:send,
              s(:ivar, :@regexp), :each_value,
              s(:block_pass,
                s(:sym, :freeze))),
            s(:send,
              s(:ivar, :@regexp), :freeze))),
        s(:send, nil, :attr_reader,
          s(:sym, :pattern)),
        s(:send, nil, :attr_reader,
          s(:sym, :regexp)),
        s(:def, :split,
          s(:args,
            s(:arg, :uri)),
          s(:begin,
            s(:case,
              s(:lvar, :uri),
              s(:when,
                s(:str, ""), nil),
              s(:when,
                s(:send,
                  s(:ivar, :@regexp), :[],
                  s(:sym, :ABS_URI)),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :scheme),
                      s(:lvasgn, :opaque),
                      s(:lvasgn, :userinfo),
                      s(:lvasgn, :host),
                      s(:lvasgn, :port),
                      s(:lvasgn, :registry),
                      s(:lvasgn, :path),
                      s(:lvasgn, :query),
                      s(:lvasgn, :fragment)),
                    s(:send,
                      s(:gvar, :$~), :[],
                      s(:irange,
                        s(:int, 1),
                        s(:int, -1)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :scheme), :!),
                    s(:send, nil, :raise,
                      s(:const, nil, :InvalidURIError),
                      s(:dstr,
                        s(:str, "bad URI(absolute but no scheme): "),
                        s(:begin,
                          s(:lvar, :uri)))), nil),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :opaque), :!),
                      s(:begin,
                        s(:and,
                          s(:send,
                            s(:lvar, :path), :!),
                          s(:begin,
                            s(:and,
                              s(:send,
                                s(:lvar, :host), :!),
                              s(:send,
                                s(:lvar, :registry), :!)))))),
                    s(:send, nil, :raise,
                      s(:const, nil, :InvalidURIError),
                      s(:dstr,
                        s(:str, "bad URI(absolute but no path): "),
                        s(:begin,
                          s(:lvar, :uri)))), nil))),
              s(:when,
                s(:send,
                  s(:ivar, :@regexp), :[],
                  s(:sym, :REL_URI)),
                s(:begin,
                  s(:lvasgn, :scheme,
                    s(:nil)),
                  s(:lvasgn, :opaque,
                    s(:nil)),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :userinfo),
                      s(:lvasgn, :host),
                      s(:lvasgn, :port),
                      s(:lvasgn, :registry),
                      s(:lvasgn, :rel_segment),
                      s(:lvasgn, :abs_path),
                      s(:lvasgn, :query),
                      s(:lvasgn, :fragment)),
                    s(:send,
                      s(:gvar, :$~), :[],
                      s(:irange,
                        s(:int, 1),
                        s(:int, -1)))),
                  s(:if,
                    s(:and,
                      s(:lvar, :rel_segment),
                      s(:lvar, :abs_path)),
                    s(:lvasgn, :path,
                      s(:send,
                        s(:lvar, :rel_segment), :+,
                        s(:lvar, :abs_path))),
                    s(:if,
                      s(:lvar, :rel_segment),
                      s(:lvasgn, :path,
                        s(:lvar, :rel_segment)),
                      s(:if,
                        s(:lvar, :abs_path),
                        s(:lvasgn, :path,
                          s(:lvar, :abs_path)), nil))))),
              s(:send, nil, :raise,
                s(:const, nil, :InvalidURIError),
                s(:dstr,
                  s(:str, "bad URI(is not URI?): "),
                  s(:begin,
                    s(:lvar, :uri))))),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :path), :!),
                s(:send,
                  s(:lvar, :opaque), :!)),
              s(:lvasgn, :path,
                s(:str, "")), nil),
            s(:lvasgn, :ret,
              s(:array,
                s(:lvar, :scheme),
                s(:lvar, :userinfo),
                s(:lvar, :host),
                s(:lvar, :port),
                s(:lvar, :registry),
                s(:lvar, :path),
                s(:lvar, :opaque),
                s(:lvar, :query),
                s(:lvar, :fragment))),
            s(:return,
              s(:lvar, :ret)))),
        s(:def, :parse,
          s(:args,
            s(:arg, :uri)),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :scheme),
                s(:lvasgn, :userinfo),
                s(:lvasgn, :host),
                s(:lvasgn, :port),
                s(:lvasgn, :registry),
                s(:lvasgn, :path),
                s(:lvasgn, :opaque),
                s(:lvasgn, :query),
                s(:lvasgn, :fragment)),
              s(:send,
                s(:self), :split,
                s(:lvar, :uri))),
            s(:if,
              s(:and,
                s(:lvar, :scheme),
                s(:send,
                  s(:send,
                    s(:const, nil, :URI), :scheme_list), :include?,
                  s(:send,
                    s(:lvar, :scheme), :upcase))),
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :URI), :scheme_list), :[],
                  s(:send,
                    s(:lvar, :scheme), :upcase)), :new,
                s(:lvar, :scheme),
                s(:lvar, :userinfo),
                s(:lvar, :host),
                s(:lvar, :port),
                s(:lvar, :registry),
                s(:lvar, :path),
                s(:lvar, :opaque),
                s(:lvar, :query),
                s(:lvar, :fragment),
                s(:self)),
              s(:send,
                s(:const, nil, :Generic), :new,
                s(:lvar, :scheme),
                s(:lvar, :userinfo),
                s(:lvar, :host),
                s(:lvar, :port),
                s(:lvar, :registry),
                s(:lvar, :path),
                s(:lvar, :opaque),
                s(:lvar, :query),
                s(:lvar, :fragment),
                s(:self))))),
        s(:def, :join,
          s(:args,
            s(:restarg, :uris)),
          s(:begin,
            s(:send,
              s(:lvar, :uris), :[]=,
              s(:int, 0),
              s(:send, nil, :convert_to_uri,
                s(:send,
                  s(:lvar, :uris), :[],
                  s(:int, 0)))),
            s(:send,
              s(:lvar, :uris), :inject,
              s(:sym, :merge)))),
        s(:def, :extract,
          s(:args,
            s(:arg, :str),
            s(:optarg, :schemes,
              s(:nil))),
          s(:if,
            s(:send, nil, :block_given?),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :str), :scan,
                  s(:send, nil, :make_regexp,
                    s(:lvar, :schemes))),
                s(:args),
                s(:yield,
                  s(:back_ref, :$&))),
              s(:nil)),
            s(:begin,
              s(:lvasgn, :result,
                s(:array)),
              s(:block,
                s(:send,
                  s(:lvar, :str), :scan,
                  s(:send, nil, :make_regexp,
                    s(:lvar, :schemes))),
                s(:args),
                s(:send,
                  s(:lvar, :result), :push,
                  s(:back_ref, :$&))),
              s(:lvar, :result)))),
        s(:def, :make_regexp,
          s(:args,
            s(:optarg, :schemes,
              s(:nil))),
          s(:if,
            s(:lvar, :schemes),
            s(:regexp,
              s(:str, "(?="),
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :union,
                  s(:splat,
                    s(:lvar, :schemes)))),
              s(:str, ":)"),
              s(:begin,
                s(:send,
                  s(:ivar, :@pattern), :[],
                  s(:sym, :X_ABS_URI))),
              s(:regopt, :x)),
            s(:send,
              s(:ivar, :@regexp), :[],
              s(:sym, :ABS_URI_REF)))),
        s(:def, :escape,
          s(:args,
            s(:arg, :str),
            s(:optarg, :unsafe,
              s(:send,
                s(:ivar, :@regexp), :[],
                s(:sym, :UNSAFE)))),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :unsafe), :kind_of?,
                s(:const, nil, :Regexp)), nil,
              s(:lvasgn, :unsafe,
                s(:send,
                  s(:const, nil, :Regexp), :new,
                  s(:dstr,
                    s(:str, "["),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Regexp), :quote,
                        s(:lvar, :unsafe))),
                    s(:str, "]")),
                  s(:false)))),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :str), :gsub,
                  s(:lvar, :unsafe)),
                s(:args),
                s(:begin,
                  s(:lvasgn, :us,
                    s(:back_ref, :$&)),
                  s(:lvasgn, :tmp,
                    s(:str, "")),
                  s(:block,
                    s(:send,
                      s(:lvar, :us), :each_byte),
                    s(:args,
                      s(:arg, :uc)),
                    s(:send,
                      s(:lvar, :tmp), :<<,
                      s(:send, nil, :sprintf,
                        s(:str, "%%%02X"),
                        s(:lvar, :uc)))),
                  s(:lvar, :tmp))), :force_encoding,
              s(:const,
                s(:const, nil, :Encoding), :US_ASCII)))),
        s(:def, :unescape,
          s(:args,
            s(:arg, :str),
            s(:optarg, :escaped,
              s(:send,
                s(:ivar, :@regexp), :[],
                s(:sym, :ESCAPED)))),
          s(:send,
            s(:block,
              s(:send,
                s(:lvar, :str), :gsub,
                s(:lvar, :escaped)),
              s(:args),
              s(:send,
                s(:array,
                  s(:send,
                    s(:send,
                      s(:back_ref, :$&), :[],
                      s(:int, 1),
                      s(:int, 2)), :hex)), :pack,
                s(:str, "C"))), :force_encoding,
            s(:send,
              s(:lvar, :str), :encoding))),
        s(:cvasgn, :@@to_s,
          s(:send,
            s(:const, nil, :Kernel), :instance_method,
            s(:sym, :to_s))),
        s(:def, :inspect,
          s(:args),
          s(:send,
            s(:send,
              s(:cvar, :@@to_s), :bind,
              s(:self)), :call)),
        s(:send, nil, :private),
        s(:def, :initialize_pattern,
          s(:args,
            s(:optarg, :opts,
              s(:hash))),
          s(:begin,
            s(:lvasgn, :ret,
              s(:hash)),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :ESCAPED),
              s(:lvasgn, :escaped,
                s(:begin,
                  s(:or,
                    s(:send,
                      s(:lvar, :opts), :delete,
                      s(:sym, :ESCAPED)),
                    s(:const,
                      s(:const, nil, :PATTERN), :ESCAPED))))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :UNRESERVED),
              s(:lvasgn, :unreserved,
                s(:or,
                  s(:send,
                    s(:lvar, :opts), :delete,
                    s(:sym, :UNRESERVED)),
                  s(:const,
                    s(:const, nil, :PATTERN), :UNRESERVED)))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :RESERVED),
              s(:lvasgn, :reserved,
                s(:or,
                  s(:send,
                    s(:lvar, :opts), :delete,
                    s(:sym, :RESERVED)),
                  s(:const,
                    s(:const, nil, :PATTERN), :RESERVED)))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :DOMLABEL),
              s(:or,
                s(:send,
                  s(:lvar, :opts), :delete,
                  s(:sym, :DOMLABEL)),
                s(:const,
                  s(:const, nil, :PATTERN), :DOMLABEL))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :TOPLABEL),
              s(:or,
                s(:send,
                  s(:lvar, :opts), :delete,
                  s(:sym, :TOPLABEL)),
                s(:const,
                  s(:const, nil, :PATTERN), :TOPLABEL))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :HOSTNAME),
              s(:lvasgn, :hostname,
                s(:send,
                  s(:lvar, :opts), :delete,
                  s(:sym, :HOSTNAME)))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :URIC),
              s(:lvasgn, :uric,
                s(:dstr,
                  s(:str, "(?:["),
                  s(:begin,
                    s(:lvar, :unreserved)),
                  s(:begin,
                    s(:lvar, :reserved)),
                  s(:str, "]|"),
                  s(:begin,
                    s(:lvar, :escaped)),
                  s(:str, ")")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :URIC_NO_SLASH),
              s(:lvasgn, :uric_no_slash,
                s(:dstr,
                  s(:str, "(?:["),
                  s(:begin,
                    s(:lvar, :unreserved)),
                  s(:str, ";?:@&=+$,]|"),
                  s(:begin,
                    s(:lvar, :escaped)),
                  s(:str, ")")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :QUERY),
              s(:lvasgn, :query,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :uric)),
                  s(:str, "*")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :FRAGMENT),
              s(:lvasgn, :fragment,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :uric)),
                  s(:str, "*")))),
            s(:if,
              s(:lvar, :hostname), nil,
              s(:send,
                s(:lvar, :ret), :[]=,
                s(:sym, :HOSTNAME),
                s(:lvasgn, :hostname,
                  s(:str, "(?:[a-zA-Z0-9\\-.]|%\\h\\h)+")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :IPV4ADDR),
              s(:lvasgn, :ipv4addr,
                s(:str, "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}"))),
            s(:lvasgn, :hex4,
              s(:dstr,
                s(:str, "["),
                s(:begin,
                  s(:const,
                    s(:const, nil, :PATTERN), :HEX)),
                s(:str, "]{1,4}"))),
            s(:lvasgn, :lastpart,
              s(:dstr,
                s(:str, "(?:"),
                s(:begin,
                  s(:lvar, :hex4)),
                s(:str, "|"),
                s(:begin,
                  s(:lvar, :ipv4addr)),
                s(:str, ")"))),
            s(:lvasgn, :hexseq1,
              s(:dstr,
                s(:str, "(?:"),
                s(:begin,
                  s(:lvar, :hex4)),
                s(:str, ":)*"),
                s(:begin,
                  s(:lvar, :hex4)))),
            s(:lvasgn, :hexseq2,
              s(:dstr,
                s(:str, "(?:"),
                s(:begin,
                  s(:lvar, :hex4)),
                s(:str, ":)*"),
                s(:begin,
                  s(:lvar, :lastpart)))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :IPV6ADDR),
              s(:lvasgn, :ipv6addr,
                s(:dstr,
                  s(:str, "(?:"),
                  s(:begin,
                    s(:lvar, :hexseq2)),
                  s(:str, "|(?:"),
                  s(:begin,
                    s(:lvar, :hexseq1)),
                  s(:str, ")?::(?:"),
                  s(:begin,
                    s(:lvar, :hexseq2)),
                  s(:str, ")?)")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :IPV6REF),
              s(:lvasgn, :ipv6ref,
                s(:dstr,
                  s(:str, "\\["),
                  s(:begin,
                    s(:lvar, :ipv6addr)),
                  s(:str, "\\]")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :HOST),
              s(:lvasgn, :host,
                s(:dstr,
                  s(:str, "(?:"),
                  s(:begin,
                    s(:lvar, :hostname)),
                  s(:str, "|"),
                  s(:begin,
                    s(:lvar, :ipv4addr)),
                  s(:str, "|"),
                  s(:begin,
                    s(:lvar, :ipv6ref)),
                  s(:str, ")")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :PORT),
              s(:lvasgn, :port,
                s(:str, "\\d*"))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :HOSTPORT),
              s(:lvasgn, :hostport,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :host)),
                  s(:str, "(?::"),
                  s(:begin,
                    s(:lvar, :port)),
                  s(:str, ")?")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :USERINFO),
              s(:lvasgn, :userinfo,
                s(:dstr,
                  s(:str, "(?:["),
                  s(:begin,
                    s(:lvar, :unreserved)),
                  s(:str, ";:&=+$,]|"),
                  s(:begin,
                    s(:lvar, :escaped)),
                  s(:str, ")*")))),
            s(:lvasgn, :pchar,
              s(:dstr,
                s(:str, "(?:["),
                s(:begin,
                  s(:lvar, :unreserved)),
                s(:str, ":@&=+$,]|"),
                s(:begin,
                  s(:lvar, :escaped)),
                s(:str, ")"))),
            s(:lvasgn, :param,
              s(:dstr,
                s(:begin,
                  s(:lvar, :pchar)),
                s(:str, "*"))),
            s(:lvasgn, :segment,
              s(:dstr,
                s(:begin,
                  s(:lvar, :pchar)),
                s(:str, "*(?:;"),
                s(:begin,
                  s(:lvar, :param)),
                s(:str, ")*"))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :PATH_SEGMENTS),
              s(:lvasgn, :path_segments,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :segment)),
                  s(:str, "(?:/"),
                  s(:begin,
                    s(:lvar, :segment)),
                  s(:str, ")*")))),
            s(:lvasgn, :server,
              s(:dstr,
                s(:str, "(?:"),
                s(:begin,
                  s(:lvar, :userinfo)),
                s(:str, "@)?"),
                s(:begin,
                  s(:lvar, :hostport)))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :REG_NAME),
              s(:lvasgn, :reg_name,
                s(:dstr,
                  s(:str, "(?:["),
                  s(:begin,
                    s(:lvar, :unreserved)),
                  s(:str, "$,;:@&=+]|"),
                  s(:begin,
                    s(:lvar, :escaped)),
                  s(:str, ")+")))),
            s(:lvasgn, :authority,
              s(:dstr,
                s(:str, "(?:"),
                s(:begin,
                  s(:lvar, :server)),
                s(:str, "|"),
                s(:begin,
                  s(:lvar, :reg_name)),
                s(:str, ")"))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :REL_SEGMENT),
              s(:lvasgn, :rel_segment,
                s(:dstr,
                  s(:str, "(?:["),
                  s(:begin,
                    s(:lvar, :unreserved)),
                  s(:str, ";@&=+$,]|"),
                  s(:begin,
                    s(:lvar, :escaped)),
                  s(:str, ")+")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :SCHEME),
              s(:lvasgn, :scheme,
                s(:dstr,
                  s(:str, "["),
                  s(:begin,
                    s(:const,
                      s(:const, nil, :PATTERN), :ALPHA)),
                  s(:str, "][\\-+."),
                  s(:begin,
                    s(:const,
                      s(:const, nil, :PATTERN), :ALPHA)),
                  s(:str, "\\d]*")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :ABS_PATH),
              s(:lvasgn, :abs_path,
                s(:dstr,
                  s(:str, "/"),
                  s(:begin,
                    s(:lvar, :path_segments))))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :REL_PATH),
              s(:lvasgn, :rel_path,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :rel_segment)),
                  s(:str, "(?:"),
                  s(:begin,
                    s(:lvar, :abs_path)),
                  s(:str, ")?")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :NET_PATH),
              s(:lvasgn, :net_path,
                s(:dstr,
                  s(:str, "//"),
                  s(:begin,
                    s(:lvar, :authority)),
                  s(:str, "(?:"),
                  s(:begin,
                    s(:lvar, :abs_path)),
                  s(:str, ")?")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :HIER_PART),
              s(:lvasgn, :hier_part,
                s(:dstr,
                  s(:str, "(?:"),
                  s(:begin,
                    s(:lvar, :net_path)),
                  s(:str, "|"),
                  s(:begin,
                    s(:lvar, :abs_path)),
                  s(:str, ")(?:\\?(?:"),
                  s(:begin,
                    s(:lvar, :query)),
                  s(:str, "))?")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :OPAQUE_PART),
              s(:lvasgn, :opaque_part,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :uric_no_slash)),
                  s(:begin,
                    s(:lvar, :uric)),
                  s(:str, "*")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :ABS_URI),
              s(:lvasgn, :abs_uri,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :scheme)),
                  s(:str, ":(?:"),
                  s(:begin,
                    s(:lvar, :hier_part)),
                  s(:str, "|"),
                  s(:begin,
                    s(:lvar, :opaque_part)),
                  s(:str, ")")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :REL_URI),
              s(:lvasgn, :rel_uri,
                s(:dstr,
                  s(:str, "(?:"),
                  s(:begin,
                    s(:lvar, :net_path)),
                  s(:str, "|"),
                  s(:begin,
                    s(:lvar, :abs_path)),
                  s(:str, "|"),
                  s(:begin,
                    s(:lvar, :rel_path)),
                  s(:str, ")(?:\\?"),
                  s(:begin,
                    s(:lvar, :query)),
                  s(:str, ")?")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :URI_REF),
              s(:dstr,
                s(:str, "(?:"),
                s(:begin,
                  s(:lvar, :abs_uri)),
                s(:str, "|"),
                s(:begin,
                  s(:lvar, :rel_uri)),
                s(:str, ")?(?:#"),
                s(:begin,
                  s(:lvar, :fragment)),
                s(:str, ")?"))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :X_ABS_URI),
              s(:dstr,
                s(:str, "\n"),
                s(:str, "        ("),
                s(:begin,
                  s(:lvar, :scheme)),
                s(:str, "):                           (?# 1: scheme)\n"),
                s(:str, "        (?:\n"),
                s(:str, "           ("),
                s(:begin,
                  s(:lvar, :opaque_part)),
                s(:str, ")                    (?# 2: opaque)\n"),
                s(:str, "        |\n"),
                s(:str, "           (?:(?:\n"),
                s(:str, "             //(?:\n"),
                s(:str, "                 (?:(?:("),
                s(:begin,
                  s(:lvar, :userinfo)),
                s(:str, ")@)?        (?# 3: userinfo)\n"),
                s(:str, "                   (?:("),
                s(:begin,
                  s(:lvar, :host)),
                s(:str, ")(?::(\\d*))?))? (?# 4: host, 5: port)\n"),
                s(:str, "               |\n"),
                s(:str, "                 ("),
                s(:begin,
                  s(:lvar, :reg_name)),
                s(:str, ")                 (?# 6: registry)\n"),
                s(:str, "               )\n"),
                s(:str, "             |\n"),
                s(:str, "             (?!//))                           (?# XXX: '//' is the mark for hostport)\n"),
                s(:str, "             ("),
                s(:begin,
                  s(:lvar, :abs_path)),
                s(:str, ")?                    (?# 7: path)\n"),
                s(:str, "           )(?:\\?("),
                s(:begin,
                  s(:lvar, :query)),
                s(:str, "))?                 (?# 8: query)\n"),
                s(:str, "        )\n"),
                s(:str, "        (?:\\#("),
                s(:begin,
                  s(:lvar, :fragment)),
                s(:str, "))?                  (?# 9: fragment)\n"),
                s(:str, "      "))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :X_REL_URI),
              s(:dstr,
                s(:str, "\n"),
                s(:str, "        (?:\n"),
                s(:str, "          (?:\n"),
                s(:str, "            //\n"),
                s(:str, "            (?:\n"),
                s(:str, "              (?:("),
                s(:begin,
                  s(:lvar, :userinfo)),
                s(:str, ")@)?       (?# 1: userinfo)\n"),
                s(:str, "                ("),
                s(:begin,
                  s(:lvar, :host)),
                s(:str, ")?(?::(\\d*))?  (?# 2: host, 3: port)\n"),
                s(:str, "            |\n"),
                s(:str, "              ("),
                s(:begin,
                  s(:lvar, :reg_name)),
                s(:str, ")             (?# 4: registry)\n"),
                s(:str, "            )\n"),
                s(:str, "          )\n"),
                s(:str, "        |\n"),
                s(:str, "          ("),
                s(:begin,
                  s(:lvar, :rel_segment)),
                s(:str, ")              (?# 5: rel_segment)\n"),
                s(:str, "        )?\n"),
                s(:str, "        ("),
                s(:begin,
                  s(:lvar, :abs_path)),
                s(:str, ")?                  (?# 6: abs_path)\n"),
                s(:str, "        (?:\\?("),
                s(:begin,
                  s(:lvar, :query)),
                s(:str, "))?              (?# 7: query)\n"),
                s(:str, "        (?:\\#("),
                s(:begin,
                  s(:lvar, :fragment)),
                s(:str, "))?           (?# 8: fragment)\n"),
                s(:str, "      "))),
            s(:lvar, :ret))),
        s(:def, :initialize_regexp,
          s(:args,
            s(:arg, :pattern)),
          s(:begin,
            s(:lvasgn, :ret,
              s(:hash)),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :ABS_URI),
              s(:send,
                s(:const, nil, :Regexp), :new,
                s(:send,
                  s(:send,
                    s(:str, "\\A\\s*"), :+,
                    s(:send,
                      s(:lvar, :pattern), :[],
                      s(:sym, :X_ABS_URI))), :+,
                  s(:str, "\\s*\\z")),
                s(:const,
                  s(:const, nil, :Regexp), :EXTENDED))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :REL_URI),
              s(:send,
                s(:const, nil, :Regexp), :new,
                s(:send,
                  s(:send,
                    s(:str, "\\A\\s*"), :+,
                    s(:send,
                      s(:lvar, :pattern), :[],
                      s(:sym, :X_REL_URI))), :+,
                  s(:str, "\\s*\\z")),
                s(:const,
                  s(:const, nil, :Regexp), :EXTENDED))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :URI_REF),
              s(:send,
                s(:const, nil, :Regexp), :new,
                s(:send,
                  s(:lvar, :pattern), :[],
                  s(:sym, :URI_REF)))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :ABS_URI_REF),
              s(:send,
                s(:const, nil, :Regexp), :new,
                s(:send,
                  s(:lvar, :pattern), :[],
                  s(:sym, :X_ABS_URI)),
                s(:const,
                  s(:const, nil, :Regexp), :EXTENDED))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :REL_URI_REF),
              s(:send,
                s(:const, nil, :Regexp), :new,
                s(:send,
                  s(:lvar, :pattern), :[],
                  s(:sym, :X_REL_URI)),
                s(:const,
                  s(:const, nil, :Regexp), :EXTENDED))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :ESCAPED),
              s(:send,
                s(:const, nil, :Regexp), :new,
                s(:send,
                  s(:lvar, :pattern), :[],
                  s(:sym, :ESCAPED)))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :UNSAFE),
              s(:send,
                s(:const, nil, :Regexp), :new,
                s(:dstr,
                  s(:str, "[^"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :pattern), :[],
                      s(:sym, :UNRESERVED))),
                  s(:begin,
                    s(:send,
                      s(:lvar, :pattern), :[],
                      s(:sym, :RESERVED))),
                  s(:str, "]")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :SCHEME),
              s(:send,
                s(:const, nil, :Regexp), :new,
                s(:dstr,
                  s(:str, "\\A"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :pattern), :[],
                      s(:sym, :SCHEME))),
                  s(:str, "\\z")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :USERINFO),
              s(:send,
                s(:const, nil, :Regexp), :new,
                s(:dstr,
                  s(:str, "\\A"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :pattern), :[],
                      s(:sym, :USERINFO))),
                  s(:str, "\\z")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :HOST),
              s(:send,
                s(:const, nil, :Regexp), :new,
                s(:dstr,
                  s(:str, "\\A"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :pattern), :[],
                      s(:sym, :HOST))),
                  s(:str, "\\z")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :PORT),
              s(:send,
                s(:const, nil, :Regexp), :new,
                s(:dstr,
                  s(:str, "\\A"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :pattern), :[],
                      s(:sym, :PORT))),
                  s(:str, "\\z")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :OPAQUE),
              s(:send,
                s(:const, nil, :Regexp), :new,
                s(:dstr,
                  s(:str, "\\A"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :pattern), :[],
                      s(:sym, :OPAQUE_PART))),
                  s(:str, "\\z")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :REGISTRY),
              s(:send,
                s(:const, nil, :Regexp), :new,
                s(:dstr,
                  s(:str, "\\A"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :pattern), :[],
                      s(:sym, :REG_NAME))),
                  s(:str, "\\z")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :ABS_PATH),
              s(:send,
                s(:const, nil, :Regexp), :new,
                s(:dstr,
                  s(:str, "\\A"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :pattern), :[],
                      s(:sym, :ABS_PATH))),
                  s(:str, "\\z")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :REL_PATH),
              s(:send,
                s(:const, nil, :Regexp), :new,
                s(:dstr,
                  s(:str, "\\A"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :pattern), :[],
                      s(:sym, :REL_PATH))),
                  s(:str, "\\z")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :QUERY),
              s(:send,
                s(:const, nil, :Regexp), :new,
                s(:dstr,
                  s(:str, "\\A"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :pattern), :[],
                      s(:sym, :QUERY))),
                  s(:str, "\\z")))),
            s(:send,
              s(:lvar, :ret), :[]=,
              s(:sym, :FRAGMENT),
              s(:send,
                s(:const, nil, :Regexp), :new,
                s(:dstr,
                  s(:str, "\\A"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :pattern), :[],
                      s(:sym, :FRAGMENT))),
                  s(:str, "\\z")))),
            s(:lvar, :ret))),
        s(:def, :convert_to_uri,
          s(:args,
            s(:arg, :uri)),
          s(:if,
            s(:send,
              s(:lvar, :uri), :is_a?,
              s(:const,
                s(:const, nil, :URI), :Generic)),
            s(:lvar, :uri),
            s(:if,
              s(:lvasgn, :uri,
                s(:send,
                  s(:const, nil, :String), :try_convert,
                  s(:lvar, :uri))),
              s(:send, nil, :parse,
                s(:lvar, :uri)),
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:str, "bad argument (expected URI object or URI string)")))))))))
