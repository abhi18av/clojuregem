s(:begin,
  s(:send, nil, :require,
    s(:str, "uri/generic")),
  s(:module,
    s(:const, nil, :URI),
    s(:begin,
      s(:class,
        s(:const, nil, :MailTo),
        s(:const, nil, :Generic),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :REGEXP)),
          s(:casgn, nil, :DEFAULT_PORT,
            s(:nil)),
          s(:casgn, nil, :COMPONENT,
            s(:send,
              s(:array,
                s(:sym, :scheme),
                s(:sym, :to),
                s(:sym, :headers)), :freeze)),
          s(:casgn, nil, :HEADER_REGEXP,
            s(:regexp,
              s(:str, "\\A(?<hfield>(?:%\\h\\h|[!$'-.0-;@-Z_a-z~])*=(?:%\\h\\h|[!$'-.0-;@-Z_a-z~])*)(?:&\\g<hfield>)*\\z"),
              s(:regopt))),
          s(:casgn, nil, :EMAIL_REGEXP,
            s(:regexp,
              s(:str, "\\A[a-zA-Z0-9.!\\\#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*\\z"),
              s(:regopt))),
          s(:defs,
            s(:self), :build,
            s(:args,
              s(:arg, :args)),
            s(:begin,
              s(:lvasgn, :tmp,
                s(:send,
                  s(:const, nil, :Util), :make_components_hash,
                  s(:self),
                  s(:lvar, :args))),
              s(:case,
                s(:send,
                  s(:lvar, :tmp), :[],
                  s(:sym, :to)),
                s(:when,
                  s(:const, nil, :Array),
                  s(:send,
                    s(:lvar, :tmp), :[]=,
                    s(:sym, :opaque),
                    s(:send,
                      s(:send,
                        s(:lvar, :tmp), :[],
                        s(:sym, :to)), :join,
                      s(:str, ",")))),
                s(:when,
                  s(:const, nil, :String),
                  s(:send,
                    s(:lvar, :tmp), :[]=,
                    s(:sym, :opaque),
                    s(:send,
                      s(:send,
                        s(:lvar, :tmp), :[],
                        s(:sym, :to)), :dup))),
                s(:send,
                  s(:lvar, :tmp), :[]=,
                  s(:sym, :opaque),
                  s(:str, ""))),
              s(:if,
                s(:send,
                  s(:lvar, :tmp), :[],
                  s(:sym, :headers)),
                s(:begin,
                  s(:lvasgn, :query,
                    s(:case,
                      s(:send,
                        s(:lvar, :tmp), :[],
                        s(:sym, :headers)),
                      s(:when,
                        s(:const, nil, :Array),
                        s(:send,
                          s(:block,
                            s(:send,
                              s(:send,
                                s(:lvar, :tmp), :[],
                                s(:sym, :headers)), :collect),
                            s(:args,
                              s(:arg, :x)),
                            s(:if,
                              s(:send,
                                s(:lvar, :x), :kind_of?,
                                s(:const, nil, :Array)),
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :x), :[],
                                    s(:int, 0)), :+,
                                  s(:str, "=")), :+,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :x), :[],
                                    s(:irange,
                                      s(:int, 1),
                                      s(:int, -1))), :join)),
                              s(:send,
                                s(:lvar, :x), :to_s))), :join,
                          s(:str, "&"))),
                      s(:when,
                        s(:const, nil, :Hash),
                        s(:send,
                          s(:block,
                            s(:send,
                              s(:send,
                                s(:lvar, :tmp), :[],
                                s(:sym, :headers)), :collect),
                            s(:args,
                              s(:arg, :h),
                              s(:arg, :v)),
                            s(:send,
                              s(:send,
                                s(:lvar, :h), :+,
                                s(:str, "=")), :+,
                              s(:lvar, :v))), :join,
                          s(:str, "&"))),
                      s(:send,
                        s(:send,
                          s(:lvar, :tmp), :[],
                          s(:sym, :headers)), :to_s))),
                  s(:if,
                    s(:send,
                      s(:lvar, :query), :empty?), nil,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :tmp), :[],
                          s(:sym, :opaque)), :<<,
                        s(:str, "?")), :<<,
                      s(:lvar, :query)))), nil),
              s(:return,
                s(:super,
                  s(:lvar, :tmp))))),
          s(:def, :initialize,
            s(:args,
              s(:restarg, :arg)),
            s(:begin,
              s(:super,
                s(:splat,
                  s(:lvar, :arg))),
              s(:ivasgn, :@to,
                s(:nil)),
              s(:ivasgn, :@headers,
                s(:array)),
              s(:if,
                s(:and,
                  s(:ivar, :@query),
                  s(:send,
                    s(:ivar, :@opaque), :!)),
                s(:ivasgn, :@opaque,
                  s(:dstr,
                    s(:str, "?"),
                    s(:begin,
                      s(:ivar, :@query)))), nil),
              s(:if,
                s(:ivar, :@opaque), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :InvalidComponentError),
                  s(:str, "missing opaque part for mailto URL"))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :to),
                  s(:lvasgn, :header)),
                s(:send,
                  s(:ivar, :@opaque), :split,
                  s(:str, "?"),
                  s(:int, 2))),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "\\A(?:[^@,;]+@[^@,;]+(?:\\z|[,;]))*\\z"),
                    s(:regopt)),
                  s(:lvar, :to)), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :InvalidComponentError),
                  s(:dstr,
                    s(:str, "unrecognised opaque part for mailtoURL: "),
                    s(:begin,
                      s(:ivar, :@opaque))))),
              s(:if,
                s(:send,
                  s(:lvar, :arg), :[],
                  s(:int, 10)),
                s(:begin,
                  s(:send,
                    s(:self), :to=,
                    s(:lvar, :to)),
                  s(:send,
                    s(:self), :headers=,
                    s(:lvar, :header))),
                s(:begin,
                  s(:send, nil, :set_to,
                    s(:lvar, :to)),
                  s(:send, nil, :set_headers,
                    s(:lvar, :header)))))),
          s(:send, nil, :attr_reader,
            s(:sym, :to)),
          s(:send, nil, :attr_reader,
            s(:sym, :headers)),
          s(:def, :check_to,
            s(:args,
              s(:arg, :v)),
            s(:begin,
              s(:if,
                s(:lvar, :v), nil,
                s(:return,
                  s(:true))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :v), :size), :==,
                  s(:int, 0)),
                s(:return,
                  s(:true)), nil),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :v), :split,
                    s(:regexp,
                      s(:str, "[,;]"),
                      s(:regopt))), :each),
                s(:args,
                  s(:arg, :addr)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:regexp,
                        s(:str, "\\A(?:%\\h\\h|[!$&-.0-;=@-Z_a-z~])*\\z"),
                        s(:regopt)), :!~,
                      s(:lvar, :addr)),
                    s(:send, nil, :raise,
                      s(:const, nil, :InvalidComponentError),
                      s(:dstr,
                        s(:str, "an address in 'to' is invalid as URI "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :addr), :dump)))), nil),
                  s(:send,
                    s(:lvar, :addr), :gsub!,
                    s(:regexp,
                      s(:str, "%\\h\\h"),
                      s(:regopt)),
                    s(:const,
                      s(:const, nil, :URI), :TBLDECWWWCOMP_)),
                  s(:if,
                    s(:send,
                      s(:const, nil, :EMAIL_REGEXP), :!~,
                      s(:lvar, :addr)),
                    s(:send, nil, :raise,
                      s(:const, nil, :InvalidComponentError),
                      s(:dstr,
                        s(:str, "an address in 'to' is invalid as uri-escaped addr-spec "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :addr), :dump)))), nil))),
              s(:return,
                s(:true)))),
          s(:send, nil, :private,
            s(:sym, :check_to)),
          s(:def, :set_to,
            s(:args,
              s(:arg, :v)),
            s(:ivasgn, :@to,
              s(:lvar, :v))),
          s(:send, nil, :protected,
            s(:sym, :set_to)),
          s(:def, :to=,
            s(:args,
              s(:arg, :v)),
            s(:begin,
              s(:send, nil, :check_to,
                s(:lvar, :v)),
              s(:send, nil, :set_to,
                s(:lvar, :v)),
              s(:lvar, :v))),
          s(:def, :check_headers,
            s(:args,
              s(:arg, :v)),
            s(:begin,
              s(:if,
                s(:lvar, :v), nil,
                s(:return,
                  s(:true))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :v), :size), :==,
                  s(:int, 0)),
                s(:return,
                  s(:true)), nil),
              s(:if,
                s(:send,
                  s(:const, nil, :HEADER_REGEXP), :!~,
                  s(:lvar, :v)),
                s(:send, nil, :raise,
                  s(:const, nil, :InvalidComponentError),
                  s(:dstr,
                    s(:str, "bad component(expected opaque component): "),
                    s(:begin,
                      s(:lvar, :v)))), nil),
              s(:return,
                s(:true)))),
          s(:send, nil, :private,
            s(:sym, :check_headers)),
          s(:def, :set_headers,
            s(:args,
              s(:arg, :v)),
            s(:begin,
              s(:ivasgn, :@headers,
                s(:array)),
              s(:if,
                s(:lvar, :v),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :v), :split,
                      s(:str, "&")), :each),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:ivar, :@headers), :<<,
                    s(:send,
                      s(:lvar, :x), :split,
                      s(:regexp,
                        s(:str, "="),
                        s(:regopt)),
                      s(:int, 2)))), nil))),
          s(:send, nil, :protected,
            s(:sym, :set_headers)),
          s(:def, :headers=,
            s(:args,
              s(:arg, :v)),
            s(:begin,
              s(:send, nil, :check_headers,
                s(:lvar, :v)),
              s(:send, nil, :set_headers,
                s(:lvar, :v)),
              s(:lvar, :v))),
          s(:def, :to_s,
            s(:args),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@scheme), :+,
                    s(:str, ":")), :+,
                  s(:if,
                    s(:ivar, :@to),
                    s(:ivar, :@to),
                    s(:str, ""))), :+,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:ivar, :@headers), :size), :>,
                    s(:int, 0)),
                  s(:send,
                    s(:str, "?"), :+,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:ivar, :@headers), :collect),
                        s(:args,
                          s(:arg, :x)),
                        s(:send,
                          s(:lvar, :x), :join,
                          s(:str, "="))), :join,
                      s(:str, "&"))),
                  s(:str, ""))), :+,
              s(:if,
                s(:ivar, :@fragment),
                s(:send,
                  s(:str, "#"), :+,
                  s(:ivar, :@fragment)),
                s(:str, "")))),
          s(:def, :to_mailtext,
            s(:args),
            s(:begin,
              s(:lvasgn, :to,
                s(:send,
                  s(:send, nil, :parser), :unescape,
                  s(:ivar, :@to))),
              s(:lvasgn, :head,
                s(:str, "")),
              s(:lvasgn, :body,
                s(:str, "")),
              s(:block,
                s(:send,
                  s(:ivar, :@headers), :each),
                s(:args,
                  s(:arg, :x)),
                s(:case,
                  s(:send,
                    s(:lvar, :x), :[],
                    s(:int, 0)),
                  s(:when,
                    s(:str, "body"),
                    s(:lvasgn, :body,
                      s(:send,
                        s(:send, nil, :parser), :unescape,
                        s(:send,
                          s(:lvar, :x), :[],
                          s(:int, 1))))),
                  s(:when,
                    s(:str, "to"),
                    s(:send,
                      s(:lvar, :to), :<<,
                      s(:send,
                        s(:str, ", "), :+,
                        s(:send,
                          s(:send, nil, :parser), :unescape,
                          s(:send,
                            s(:lvar, :x), :[],
                            s(:int, 1)))))),
                  s(:send,
                    s(:lvar, :head), :<<,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:send, nil, :parser), :unescape,
                              s(:send,
                                s(:lvar, :x), :[],
                                s(:int, 0))), :capitalize), :+,
                          s(:str, ": ")), :+,
                        s(:send,
                          s(:send, nil, :parser), :unescape,
                          s(:send,
                            s(:lvar, :x), :[],
                            s(:int, 1)))), :+,
                      s(:str, "\n"))))),
              s(:return,
                s(:dstr,
                  s(:str, "To: "),
                  s(:begin,
                    s(:lvar, :to)),
                  s(:str, "\n"),
                  s(:begin,
                    s(:lvar, :head)),
                  s(:str, "\n"),
                  s(:begin,
                    s(:lvar, :body)),
                  s(:str, "\n"))))),
          s(:alias,
            s(:sym, :to_rfc822text),
            s(:sym, :to_mailtext)))),
      s(:send,
        s(:cvar, :@@schemes), :[]=,
        s(:str, "MAILTO"),
        s(:const, nil, :MailTo)))))
