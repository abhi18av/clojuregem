s(:module,
  s(:const, nil, :Find),
  s(:begin,
    s(:def, :find,
      s(:args,
        s(:restarg, :paths),
        s(:kwoptarg, :ignore_error,
          s(:true))),
      s(:begin,
        s(:or,
          s(:send, nil, :block_given?),
          s(:return,
            s(:send, nil, :enum_for,
              s(:send, nil, :__method__),
              s(:splat,
                s(:lvar, :paths)),
              s(:hash,
                s(:pair,
                  s(:sym, :ignore_error),
                  s(:lvar, :ignore_error)))))),
        s(:lvasgn, :fs_encoding,
          s(:send,
            s(:const, nil, :Encoding), :find,
            s(:str, "filesystem"))),
        s(:block,
          s(:send,
            s(:block,
              s(:send,
                s(:lvar, :paths), :collect!),
              s(:args,
                s(:arg, :d)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:lvar, :d)), nil,
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :Errno), :ENOENT))),
                s(:send,
                  s(:lvar, :d), :dup))), :each),
          s(:args,
            s(:arg, :path)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :path), :respond_to?,
                s(:sym, :to_path)),
              s(:lvasgn, :path,
                s(:send,
                  s(:lvar, :path), :to_path)), nil),
            s(:lvasgn, :enc,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :path), :encoding), :==,
                  s(:const,
                    s(:const, nil, :Encoding), :US_ASCII)),
                s(:lvar, :fs_encoding),
                s(:send,
                  s(:lvar, :path), :encoding))),
            s(:lvasgn, :ps,
              s(:array,
                s(:lvar, :path))),
            s(:while,
              s(:lvasgn, :file,
                s(:send,
                  s(:lvar, :ps), :shift)),
              s(:block,
                s(:send, nil, :catch,
                  s(:sym, :prune)),
                s(:args),
                s(:begin,
                  s(:yield,
                    s(:send,
                      s(:send,
                        s(:lvar, :file), :dup), :taint)),
                  s(:kwbegin,
                    s(:rescue,
                      s(:lvasgn, :s,
                        s(:send,
                          s(:const, nil, :File), :lstat,
                          s(:lvar, :file))),
                      s(:resbody,
                        s(:array,
                          s(:const,
                            s(:const, nil, :Errno), :ENOENT),
                          s(:const,
                            s(:const, nil, :Errno), :EACCES),
                          s(:const,
                            s(:const, nil, :Errno), :ENOTDIR),
                          s(:const,
                            s(:const, nil, :Errno), :ELOOP),
                          s(:const,
                            s(:const, nil, :Errno), :ENAMETOOLONG)), nil,
                        s(:begin,
                          s(:if,
                            s(:lvar, :ignore_error), nil,
                            s(:send, nil, :raise)),
                          s(:next))), nil)),
                  s(:if,
                    s(:send,
                      s(:lvar, :s), :directory?),
                    s(:begin,
                      s(:kwbegin,
                        s(:rescue,
                          s(:lvasgn, :fs,
                            s(:send,
                              s(:const, nil, :Dir), :entries,
                              s(:lvar, :file),
                              s(:hash,
                                s(:pair,
                                  s(:sym, :encoding),
                                  s(:lvar, :enc))))),
                          s(:resbody,
                            s(:array,
                              s(:const,
                                s(:const, nil, :Errno), :ENOENT),
                              s(:const,
                                s(:const, nil, :Errno), :EACCES),
                              s(:const,
                                s(:const, nil, :Errno), :ENOTDIR),
                              s(:const,
                                s(:const, nil, :Errno), :ELOOP),
                              s(:const,
                                s(:const, nil, :Errno), :ENAMETOOLONG)), nil,
                            s(:begin,
                              s(:if,
                                s(:lvar, :ignore_error), nil,
                                s(:send, nil, :raise)),
                              s(:next))), nil)),
                      s(:send,
                        s(:lvar, :fs), :sort!),
                      s(:block,
                        s(:send,
                          s(:lvar, :fs), :reverse_each),
                        s(:args,
                          s(:arg, :f)),
                        s(:begin,
                          s(:if,
                            s(:or,
                              s(:send,
                                s(:lvar, :f), :==,
                                s(:str, ".")),
                              s(:send,
                                s(:lvar, :f), :==,
                                s(:str, ".."))),
                            s(:next), nil),
                          s(:lvasgn, :f,
                            s(:send,
                              s(:const, nil, :File), :join,
                              s(:lvar, :file),
                              s(:lvar, :f))),
                          s(:send,
                            s(:lvar, :ps), :unshift,
                            s(:send,
                              s(:lvar, :f), :untaint))))), nil)))))),
        s(:nil))),
    s(:def, :prune,
      s(:args),
      s(:send, nil, :throw,
        s(:sym, :prune))),
    s(:send, nil, :module_function,
      s(:sym, :find),
      s(:sym, :prune))))
