s(:begin,
  s(:if,
    s(:defined?,
      s(:const, nil, :Thread)), nil,
    s(:send,
      s(:const, nil, :IRB), :fail,
      s(:const, nil, :CantShiftToMultiIrbMode))),
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:module,
    s(:const, nil, :IRB),
    s(:begin,
      s(:class,
        s(:const, nil, :JobManager), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args),
            s(:begin,
              s(:ivasgn, :@jobs,
                s(:array)),
              s(:ivasgn, :@current_job,
                s(:nil)))),
          s(:send, nil, :attr_accessor,
            s(:sym, :current_job)),
          s(:def, :n_jobs,
            s(:args),
            s(:send,
              s(:ivar, :@jobs), :size)),
          s(:def, :thread,
            s(:args,
              s(:arg, :key)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :th)),
                s(:send, nil, :search,
                  s(:lvar, :key))),
              s(:lvar, :th))),
          s(:def, :irb,
            s(:args,
              s(:arg, :key)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :_),
                  s(:lvasgn, :irb)),
                s(:send, nil, :search,
                  s(:lvar, :key))),
              s(:lvar, :irb))),
          s(:def, :main_thread,
            s(:args),
            s(:send,
              s(:send,
                s(:ivar, :@jobs), :[],
                s(:int, 0)), :[],
              s(:int, 0))),
          s(:def, :main_irb,
            s(:args),
            s(:send,
              s(:send,
                s(:ivar, :@jobs), :[],
                s(:int, 0)), :[],
              s(:int, 1))),
          s(:def, :insert,
            s(:args,
              s(:arg, :irb)),
            s(:send,
              s(:ivar, :@jobs), :push,
              s(:array,
                s(:send,
                  s(:const, nil, :Thread), :current),
                s(:lvar, :irb)))),
          s(:def, :switch,
            s(:args,
              s(:arg, :key)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :th),
                  s(:lvasgn, :irb)),
                s(:send, nil, :search,
                  s(:lvar, :key))),
              s(:if,
                s(:send,
                  s(:lvar, :th), :alive?), nil,
                s(:send,
                  s(:const, nil, :IRB), :fail,
                  s(:const, nil, :IrbAlreadyDead))),
              s(:if,
                s(:send,
                  s(:lvar, :th), :==,
                  s(:send,
                    s(:const, nil, :Thread), :current)),
                s(:send,
                  s(:const, nil, :IRB), :fail,
                  s(:const, nil, :IrbSwitchedToCurrentThread)), nil),
              s(:ivasgn, :@current_job,
                s(:lvar, :irb)),
              s(:send,
                s(:lvar, :th), :run),
              s(:send,
                s(:const, nil, :Thread), :stop),
              s(:ivasgn, :@current_job,
                s(:send, nil, :irb,
                  s(:send,
                    s(:const, nil, :Thread), :current))))),
          s(:def, :kill,
            s(:args,
              s(:restarg, :keys)),
            s(:for,
              s(:lvasgn, :key),
              s(:lvar, :keys),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :th),
                    s(:lvasgn, :_)),
                  s(:send, nil, :search,
                    s(:lvar, :key))),
                s(:if,
                  s(:send,
                    s(:lvar, :th), :alive?), nil,
                  s(:send,
                    s(:const, nil, :IRB), :fail,
                    s(:const, nil, :IrbAlreadyDead))),
                s(:send,
                  s(:lvar, :th), :exit)))),
          s(:def, :search,
            s(:args,
              s(:arg, :key)),
            s(:begin,
              s(:lvasgn, :job,
                s(:case,
                  s(:lvar, :key),
                  s(:when,
                    s(:const, nil, :Integer),
                    s(:send,
                      s(:ivar, :@jobs), :[],
                      s(:lvar, :key))),
                  s(:when,
                    s(:const, nil, :Irb),
                    s(:block,
                      s(:send,
                        s(:ivar, :@jobs), :find),
                      s(:args,
                        s(:arg, :k),
                        s(:arg, :v)),
                      s(:send,
                        s(:lvar, :v), :equal?,
                        s(:lvar, :key)))),
                  s(:when,
                    s(:const, nil, :Thread),
                    s(:send,
                      s(:ivar, :@jobs), :assoc,
                      s(:lvar, :key))),
                  s(:block,
                    s(:send,
                      s(:ivar, :@jobs), :find),
                    s(:args,
                      s(:arg, :k),
                      s(:arg, :v)),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :v), :context), :main), :equal?,
                      s(:lvar, :key))))),
              s(:if,
                s(:send,
                  s(:lvar, :job), :nil?),
                s(:send,
                  s(:const, nil, :IRB), :fail,
                  s(:const, nil, :NoSuchJob),
                  s(:lvar, :key)), nil),
              s(:lvar, :job))),
          s(:def, :delete,
            s(:args,
              s(:arg, :key)),
            s(:begin,
              s(:case,
                s(:lvar, :key),
                s(:when,
                  s(:const, nil, :Integer),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:ivar, :@jobs), :[],
                        s(:lvar, :key)), nil,
                      s(:send,
                        s(:const, nil, :IRB), :fail,
                        s(:const, nil, :NoSuchJob),
                        s(:lvar, :key))),
                    s(:send,
                      s(:ivar, :@jobs), :[]=,
                      s(:lvar, :key),
                      s(:nil)))),
                s(:block,
                  s(:send, nil, :catch,
                    s(:sym, :EXISTS)),
                  s(:args),
                  s(:begin,
                    s(:block,
                      s(:send,
                        s(:ivar, :@jobs), :each_index),
                      s(:args,
                        s(:arg, :i)),
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:ivar, :@jobs), :[],
                            s(:lvar, :i)),
                          s(:begin,
                            s(:or,
                              s(:or,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:ivar, :@jobs), :[],
                                      s(:lvar, :i)), :[],
                                    s(:int, 0)), :==,
                                  s(:lvar, :key)),
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:ivar, :@jobs), :[],
                                      s(:lvar, :i)), :[],
                                    s(:int, 1)), :==,
                                  s(:lvar, :key))),
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:ivar, :@jobs), :[],
                                        s(:lvar, :i)), :[],
                                      s(:int, 1)), :context), :main), :equal?,
                                s(:lvar, :key))))),
                        s(:begin,
                          s(:send,
                            s(:ivar, :@jobs), :[]=,
                            s(:lvar, :i),
                            s(:nil)),
                          s(:send, nil, :throw,
                            s(:sym, :EXISTS))), nil)),
                    s(:send,
                      s(:const, nil, :IRB), :fail,
                      s(:const, nil, :NoSuchJob),
                      s(:lvar, :key))))),
              s(:if,
                s(:send,
                  s(:ivar, :@jobs), :empty?), nil,
                s(:until,
                  s(:lvasgn, :assoc,
                    s(:send,
                      s(:ivar, :@jobs), :pop)), nil)),
              s(:send,
                s(:ivar, :@jobs), :push,
                s(:lvar, :assoc)))),
          s(:def, :inspect,
            s(:args),
            s(:begin,
              s(:lvasgn, :ary,
                s(:array)),
              s(:block,
                s(:send,
                  s(:ivar, :@jobs), :each_index),
                s(:args,
                  s(:arg, :i)),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :th),
                      s(:lvasgn, :irb)),
                    s(:send,
                      s(:ivar, :@jobs), :[],
                      s(:lvar, :i))),
                  s(:if,
                    s(:send,
                      s(:lvar, :th), :nil?),
                    s(:next), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :th), :alive?),
                    s(:if,
                      s(:send,
                        s(:lvar, :th), :stop?),
                      s(:lvasgn, :t_status,
                        s(:str, "stop")),
                      s(:lvasgn, :t_status,
                        s(:str, "running"))),
                    s(:lvasgn, :t_status,
                      s(:str, "exited"))),
                  s(:send,
                    s(:lvar, :ary), :push,
                    s(:send, nil, :format,
                      s(:str, "#%d->%s on %s (%s: %s)"),
                      s(:lvar, :i),
                      s(:send,
                        s(:send,
                          s(:lvar, :irb), :context), :irb_name),
                      s(:send,
                        s(:send,
                          s(:lvar, :irb), :context), :main),
                      s(:lvar, :th),
                      s(:lvar, :t_status))))),
              s(:send,
                s(:lvar, :ary), :join,
                s(:str, "\n")))))),
      s(:ivasgn, :@JobManager,
        s(:send,
          s(:const, nil, :JobManager), :new)),
      s(:defs,
        s(:const, nil, :IRB), :JobManager,
        s(:args),
        s(:ivar, :@JobManager)),
      s(:defs,
        s(:const, nil, :IRB), :CurrentContext,
        s(:args),
        s(:send,
          s(:send,
            s(:send,
              s(:const, nil, :IRB), :JobManager), :irb,
            s(:send,
              s(:const, nil, :Thread), :current)), :context)),
      s(:defs,
        s(:const, nil, :IRB), :irb,
        s(:args,
          s(:optarg, :file,
            s(:nil)),
          s(:restarg, :main)),
        s(:begin,
          s(:lvasgn, :workspace,
            s(:send,
              s(:const, nil, :WorkSpace), :new,
              s(:splat,
                s(:lvar, :main)))),
          s(:lvasgn, :parent_thread,
            s(:send,
              s(:const, nil, :Thread), :current)),
          s(:block,
            s(:send,
              s(:const, nil, :Thread), :start),
            s(:args),
            s(:begin,
              s(:kwbegin,
                s(:rescue,
                  s(:lvasgn, :irb,
                    s(:send,
                      s(:const, nil, :Irb), :new,
                      s(:lvar, :workspace),
                      s(:lvar, :file))),
                  s(:resbody, nil, nil,
                    s(:begin,
                      s(:send, nil, :print,
                        s(:str, "Subirb can't start with context(self): "),
                        s(:send,
                          s(:send,
                            s(:lvar, :workspace), :main), :inspect),
                        s(:str, "\n")),
                      s(:send, nil, :print,
                        s(:str, "return to main irb\n")),
                      s(:send,
                        s(:const, nil, :Thread), :pass),
                      s(:send,
                        s(:send,
                          s(:const, nil, :Thread), :main), :wakeup),
                      s(:send,
                        s(:const, nil, :Thread), :exit))), nil)),
              s(:if,
                s(:send,
                  s(:ivar, :@CONF), :[],
                  s(:sym, :IRB_RC)),
                s(:send,
                  s(:send,
                    s(:ivar, :@CONF), :[],
                    s(:sym, :IRB_RC)), :call,
                  s(:send,
                    s(:lvar, :irb), :context)), nil),
              s(:send,
                s(:ivar, :@JobManager), :insert,
                s(:lvar, :irb)),
              s(:send,
                s(:ivar, :@JobManager), :current_job=,
                s(:lvar, :irb)),
              s(:kwbegin,
                s(:ensure,
                  s(:rescue,
                    s(:begin,
                      s(:lvasgn, :system_exit,
                        s(:false)),
                      s(:block,
                        s(:send, nil, :catch,
                          s(:sym, :IRB_EXIT)),
                        s(:args),
                        s(:send,
                          s(:lvar, :irb), :eval_input))),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :SystemExit)), nil,
                      s(:begin,
                        s(:lvasgn, :system_exit,
                          s(:true)),
                        s(:send, nil, :raise))), nil),
                  s(:if,
                    s(:lvar, :system_exit), nil,
                    s(:begin,
                      s(:send,
                        s(:ivar, :@JobManager), :delete,
                        s(:lvar, :irb)),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:ivar, :@JobManager), :current_job), :==,
                          s(:lvar, :irb)),
                        s(:if,
                          s(:send,
                            s(:lvar, :parent_thread), :alive?),
                          s(:begin,
                            s(:send,
                              s(:ivar, :@JobManager), :current_job=,
                              s(:send,
                                s(:ivar, :@JobManager), :irb,
                                s(:lvar, :parent_thread))),
                            s(:send,
                              s(:lvar, :parent_thread), :run)),
                          s(:begin,
                            s(:send,
                              s(:ivar, :@JobManager), :current_job=,
                              s(:send,
                                s(:ivar, :@JobManager), :main_irb)),
                            s(:send,
                              s(:send,
                                s(:ivar, :@JobManager), :main_thread), :run))), nil))))))),
          s(:send,
            s(:const, nil, :Thread), :stop),
          s(:send,
            s(:ivar, :@JobManager), :current_job=,
            s(:send,
              s(:ivar, :@JobManager), :irb,
              s(:send,
                s(:const, nil, :Thread), :current))))),
      s(:send,
        s(:ivar, :@CONF), :[]=,
        s(:sym, :SINGLE_IRB_MODE),
        s(:false)),
      s(:send,
        s(:ivar, :@JobManager), :insert,
        s(:send,
          s(:send,
            s(:ivar, :@CONF), :[],
            s(:sym, :MAIN_CONTEXT)), :irb)),
      s(:send,
        s(:ivar, :@JobManager), :current_job=,
        s(:send,
          s(:send,
            s(:ivar, :@CONF), :[],
            s(:sym, :MAIN_CONTEXT)), :irb)),
      s(:class,
        s(:const, nil, :Irb), nil,
        s(:def, :signal_handle,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:ivar, :@context), :ignore_sigint?), nil,
              s(:begin,
                s(:if,
                  s(:send,
                    s(:ivar, :@context), :verbose?),
                  s(:send, nil, :print,
                    s(:str, "\nabort!!\n")), nil),
                s(:send, nil, :exit))),
            s(:case,
              s(:ivar, :@signal_status),
              s(:when,
                s(:sym, :IN_INPUT),
                s(:begin,
                  s(:send, nil, :print,
                    s(:str, "^C\n")),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :IRB), :JobManager), :thread,
                      s(:self)), :raise,
                    s(:const,
                      s(:const, nil, :RubyLex), :TerminateLineInput)))),
              s(:when,
                s(:sym, :IN_EVAL),
                s(:send,
                  s(:const, nil, :IRB), :irb_abort,
                  s(:self))),
              s(:when,
                s(:sym, :IN_LOAD),
                s(:send,
                  s(:const, nil, :IRB), :irb_abort,
                  s(:self),
                  s(:const, nil, :LoadAbort))),
              s(:when,
                s(:sym, :IN_IRB), nil), nil)))),
      s(:block,
        s(:send, nil, :trap,
          s(:str, "SIGINT")),
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@JobManager), :current_job), :signal_handle),
          s(:send,
            s(:const, nil, :Thread), :stop))))))
