s(:begin,
  s(:send, nil, :require,
    s(:str, "irb/workspace")),
  s(:send, nil, :require,
    s(:str, "irb/inspector")),
  s(:module,
    s(:const, nil, :IRB),
    s(:class,
      s(:const, nil, :Context), nil,
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:arg, :irb),
            s(:optarg, :workspace,
              s(:nil)),
            s(:optarg, :input_method,
              s(:nil)),
            s(:optarg, :output_method,
              s(:nil))),
          s(:begin,
            s(:ivasgn, :@irb,
              s(:lvar, :irb)),
            s(:if,
              s(:lvar, :workspace),
              s(:ivasgn, :@workspace,
                s(:lvar, :workspace)),
              s(:ivasgn, :@workspace,
                s(:send,
                  s(:const, nil, :WorkSpace), :new))),
            s(:if,
              s(:defined?,
                s(:const, nil, :Thread)),
              s(:ivasgn, :@thread,
                s(:send,
                  s(:const, nil, :Thread), :current)), nil),
            s(:ivasgn, :@ap_name,
              s(:send,
                s(:send,
                  s(:const, nil, :IRB), :conf), :[],
                s(:sym, :AP_NAME))),
            s(:ivasgn, :@rc,
              s(:send,
                s(:send,
                  s(:const, nil, :IRB), :conf), :[],
                s(:sym, :RC))),
            s(:ivasgn, :@load_modules,
              s(:send,
                s(:send,
                  s(:const, nil, :IRB), :conf), :[],
                s(:sym, :LOAD_MODULES))),
            s(:ivasgn, :@use_readline,
              s(:send,
                s(:send,
                  s(:const, nil, :IRB), :conf), :[],
                s(:sym, :USE_READLINE))),
            s(:ivasgn, :@verbose,
              s(:send,
                s(:send,
                  s(:const, nil, :IRB), :conf), :[],
                s(:sym, :VERBOSE))),
            s(:ivasgn, :@io,
              s(:nil)),
            s(:send,
              s(:self), :inspect_mode=,
              s(:send,
                s(:send,
                  s(:const, nil, :IRB), :conf), :[],
                s(:sym, :INSPECT_MODE))),
            s(:if,
              s(:send,
                s(:send,
                  s(:const, nil, :IRB), :conf), :[],
                s(:sym, :MATH_MODE)),
              s(:send,
                s(:self), :math_mode=,
                s(:send,
                  s(:send,
                    s(:const, nil, :IRB), :conf), :[],
                  s(:sym, :MATH_MODE))), nil),
            s(:if,
              s(:send,
                s(:send,
                  s(:const, nil, :IRB), :conf), :[],
                s(:sym, :USE_TRACER)),
              s(:send,
                s(:self), :use_tracer=,
                s(:send,
                  s(:send,
                    s(:const, nil, :IRB), :conf), :[],
                  s(:sym, :USE_TRACER))), nil),
            s(:if,
              s(:send,
                s(:send,
                  s(:const, nil, :IRB), :conf), :[],
                s(:sym, :USE_LOADER)),
              s(:send,
                s(:self), :use_loader=,
                s(:send,
                  s(:send,
                    s(:const, nil, :IRB), :conf), :[],
                  s(:sym, :USE_LOADER))), nil),
            s(:if,
              s(:send,
                s(:send,
                  s(:const, nil, :IRB), :conf), :[],
                s(:sym, :EVAL_HISTORY)),
              s(:send,
                s(:self), :eval_history=,
                s(:send,
                  s(:send,
                    s(:const, nil, :IRB), :conf), :[],
                  s(:sym, :EVAL_HISTORY))), nil),
            s(:ivasgn, :@ignore_sigint,
              s(:send,
                s(:send,
                  s(:const, nil, :IRB), :conf), :[],
                s(:sym, :IGNORE_SIGINT))),
            s(:ivasgn, :@ignore_eof,
              s(:send,
                s(:send,
                  s(:const, nil, :IRB), :conf), :[],
                s(:sym, :IGNORE_EOF))),
            s(:ivasgn, :@back_trace_limit,
              s(:send,
                s(:send,
                  s(:const, nil, :IRB), :conf), :[],
                s(:sym, :BACK_TRACE_LIMIT))),
            s(:send,
              s(:self), :prompt_mode=,
              s(:send,
                s(:send,
                  s(:const, nil, :IRB), :conf), :[],
                s(:sym, :PROMPT_MODE))),
            s(:if,
              s(:or,
                s(:send,
                  s(:send,
                    s(:const, nil, :IRB), :conf), :[],
                  s(:sym, :SINGLE_IRB)),
                s(:send,
                  s(:defined?,
                    s(:const,
                      s(:const, nil, :IRB), :JobManager)), :!)),
              s(:ivasgn, :@irb_name,
                s(:send,
                  s(:send,
                    s(:const, nil, :IRB), :conf), :[],
                  s(:sym, :IRB_NAME))),
              s(:ivasgn, :@irb_name,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :IRB), :conf), :[],
                      s(:sym, :IRB_NAME)), :+,
                    s(:str, "#")), :+,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :IRB), :JobManager), :n_jobs), :to_s)))),
            s(:ivasgn, :@irb_path,
              s(:send,
                s(:send,
                  s(:str, "("), :+,
                  s(:ivar, :@irb_name)), :+,
                s(:str, ")"))),
            s(:case,
              s(:lvar, :input_method),
              s(:when,
                s(:nil),
                s(:case,
                  s(:send, nil, :use_readline?),
                  s(:when,
                    s(:nil),
                    s(:if,
                      s(:begin,
                        s(:and,
                          s(:and,
                            s(:defined?,
                              s(:const, nil, :ReadlineInputMethod)),
                            s(:send,
                              s(:const, nil, :STDIN), :tty?)),
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:const, nil, :IRB), :conf), :[],
                              s(:sym, :PROMPT_MODE)), :!=,
                            s(:sym, :INF_RUBY)))),
                      s(:ivasgn, :@io,
                        s(:send,
                          s(:const, nil, :ReadlineInputMethod), :new)),
                      s(:ivasgn, :@io,
                        s(:send,
                          s(:const, nil, :StdioInputMethod), :new)))),
                  s(:when,
                    s(:false),
                    s(:ivasgn, :@io,
                      s(:send,
                        s(:const, nil, :StdioInputMethod), :new))),
                  s(:when,
                    s(:true),
                    s(:if,
                      s(:defined?,
                        s(:const, nil, :ReadlineInputMethod)),
                      s(:ivasgn, :@io,
                        s(:send,
                          s(:const, nil, :ReadlineInputMethod), :new)),
                      s(:ivasgn, :@io,
                        s(:send,
                          s(:const, nil, :StdioInputMethod), :new)))), nil)),
              s(:when,
                s(:const, nil, :String),
                s(:begin,
                  s(:ivasgn, :@io,
                    s(:send,
                      s(:const, nil, :FileInputMethod), :new,
                      s(:lvar, :input_method))),
                  s(:ivasgn, :@irb_name,
                    s(:send,
                      s(:const, nil, :File), :basename,
                      s(:lvar, :input_method))),
                  s(:ivasgn, :@irb_path,
                    s(:lvar, :input_method)))),
              s(:ivasgn, :@io,
                s(:lvar, :input_method))),
            s(:if,
              s(:send,
                s(:send,
                  s(:const, nil, :IRB), :conf), :[],
                s(:sym, :SAVE_HISTORY)),
              s(:send,
                s(:self), :save_history=,
                s(:send,
                  s(:send,
                    s(:const, nil, :IRB), :conf), :[],
                  s(:sym, :SAVE_HISTORY))), nil),
            s(:if,
              s(:lvar, :output_method),
              s(:ivasgn, :@output_method,
                s(:lvar, :output_method)),
              s(:ivasgn, :@output_method,
                s(:send,
                  s(:const, nil, :StdioOutputMethod), :new))),
            s(:ivasgn, :@echo,
              s(:send,
                s(:send,
                  s(:const, nil, :IRB), :conf), :[],
                s(:sym, :ECHO))),
            s(:if,
              s(:send,
                s(:ivar, :@echo), :nil?),
              s(:ivasgn, :@echo,
                s(:true)), nil),
            s(:send,
              s(:self), :debug_level=,
              s(:send,
                s(:send,
                  s(:const, nil, :IRB), :conf), :[],
                s(:sym, :DEBUG_LEVEL))))),
        s(:def, :main,
          s(:args),
          s(:send,
            s(:ivar, :@workspace), :main)),
        s(:send, nil, :attr_reader,
          s(:sym, :workspace_home)),
        s(:send, nil, :attr_accessor,
          s(:sym, :workspace)),
        s(:send, nil, :attr_reader,
          s(:sym, :thread)),
        s(:send, nil, :attr_accessor,
          s(:sym, :io)),
        s(:send, nil, :attr_accessor,
          s(:sym, :irb)),
        s(:send, nil, :attr_accessor,
          s(:sym, :ap_name)),
        s(:send, nil, :attr_accessor,
          s(:sym, :rc)),
        s(:send, nil, :attr_accessor,
          s(:sym, :load_modules)),
        s(:send, nil, :attr_accessor,
          s(:sym, :irb_name)),
        s(:send, nil, :attr_accessor,
          s(:sym, :irb_path)),
        s(:send, nil, :attr_reader,
          s(:sym, :use_readline)),
        s(:send, nil, :attr_reader,
          s(:sym, :inspect_mode)),
        s(:send, nil, :attr_reader,
          s(:sym, :prompt_mode)),
        s(:send, nil, :attr_accessor,
          s(:sym, :prompt_i)),
        s(:send, nil, :attr_accessor,
          s(:sym, :prompt_s)),
        s(:send, nil, :attr_accessor,
          s(:sym, :prompt_c)),
        s(:send, nil, :attr_accessor,
          s(:sym, :prompt_n)),
        s(:send, nil, :attr_accessor,
          s(:sym, :auto_indent_mode)),
        s(:send, nil, :attr_accessor,
          s(:sym, :return_format)),
        s(:send, nil, :attr_accessor,
          s(:sym, :ignore_sigint)),
        s(:send, nil, :attr_accessor,
          s(:sym, :ignore_eof)),
        s(:send, nil, :attr_accessor,
          s(:sym, :echo)),
        s(:send, nil, :attr_accessor,
          s(:sym, :verbose)),
        s(:send, nil, :attr_reader,
          s(:sym, :debug_level)),
        s(:send, nil, :attr_accessor,
          s(:sym, :back_trace_limit)),
        s(:alias,
          s(:sym, :use_readline?),
          s(:sym, :use_readline)),
        s(:alias,
          s(:sym, :rc?),
          s(:sym, :rc)),
        s(:alias,
          s(:sym, :ignore_sigint?),
          s(:sym, :ignore_sigint)),
        s(:alias,
          s(:sym, :ignore_eof?),
          s(:sym, :ignore_eof)),
        s(:alias,
          s(:sym, :echo?),
          s(:sym, :echo)),
        s(:def, :verbose?,
          s(:args),
          s(:if,
            s(:send,
              s(:ivar, :@verbose), :nil?),
            s(:if,
              s(:and,
                s(:defined?,
                  s(:const, nil, :ReadlineInputMethod)),
                s(:send,
                  s(:ivar, :@io), :kind_of?,
                  s(:const, nil, :ReadlineInputMethod))),
              s(:false),
              s(:if,
                s(:or,
                  s(:send,
                    s(:send,
                      s(:const, nil, :STDIN), :tty?), :!),
                  s(:send,
                    s(:ivar, :@io), :kind_of?,
                    s(:const, nil, :FileInputMethod))),
                s(:true),
                s(:false))),
            s(:ivar, :@verbose))),
        s(:def, :prompting?,
          s(:args),
          s(:or,
            s(:send, nil, :verbose?),
            s(:begin,
              s(:or,
                s(:and,
                  s(:send,
                    s(:const, nil, :STDIN), :tty?),
                  s(:send,
                    s(:ivar, :@io), :kind_of?,
                    s(:const, nil, :StdioInputMethod))),
                s(:begin,
                  s(:and,
                    s(:defined?,
                      s(:const, nil, :ReadlineInputMethod)),
                    s(:send,
                      s(:ivar, :@io), :kind_of?,
                      s(:const, nil, :ReadlineInputMethod)))))))),
        s(:send, nil, :attr_reader,
          s(:sym, :last_value)),
        s(:def, :set_last_value,
          s(:args,
            s(:arg, :value)),
          s(:begin,
            s(:ivasgn, :@last_value,
              s(:lvar, :value)),
            s(:send,
              s(:ivar, :@workspace), :evaluate,
              s(:self),
              s(:str, "_ = IRB.CurrentContext.last_value")))),
        s(:def, :prompt_mode=,
          s(:args,
            s(:arg, :mode)),
          s(:begin,
            s(:ivasgn, :@prompt_mode,
              s(:lvar, :mode)),
            s(:lvasgn, :pconf,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :IRB), :conf), :[],
                  s(:sym, :PROMPT)), :[],
                s(:lvar, :mode))),
            s(:ivasgn, :@prompt_i,
              s(:send,
                s(:lvar, :pconf), :[],
                s(:sym, :PROMPT_I))),
            s(:ivasgn, :@prompt_s,
              s(:send,
                s(:lvar, :pconf), :[],
                s(:sym, :PROMPT_S))),
            s(:ivasgn, :@prompt_c,
              s(:send,
                s(:lvar, :pconf), :[],
                s(:sym, :PROMPT_C))),
            s(:ivasgn, :@prompt_n,
              s(:send,
                s(:lvar, :pconf), :[],
                s(:sym, :PROMPT_N))),
            s(:ivasgn, :@return_format,
              s(:send,
                s(:lvar, :pconf), :[],
                s(:sym, :RETURN))),
            s(:if,
              s(:lvasgn, :ai,
                s(:send,
                  s(:lvar, :pconf), :include?,
                  s(:sym, :AUTO_INDENT))),
              s(:ivasgn, :@auto_indent_mode,
                s(:lvar, :ai)),
              s(:ivasgn, :@auto_indent_mode,
                s(:send,
                  s(:send,
                    s(:const, nil, :IRB), :conf), :[],
                  s(:sym, :AUTO_INDENT)))))),
        s(:def, :inspect?,
          s(:args),
          s(:or,
            s(:send,
              s(:ivar, :@inspect_mode), :nil?),
            s(:ivar, :@inspect_mode))),
        s(:def, :file_input?,
          s(:args),
          s(:send,
            s(:send,
              s(:ivar, :@io), :class), :==,
            s(:const, nil, :FileInputMethod))),
        s(:def, :inspect_mode=,
          s(:args,
            s(:arg, :opt)),
          s(:begin,
            s(:if,
              s(:lvasgn, :i,
                s(:send,
                  s(:const,
                    s(:const, nil, :Inspector), :INSPECTORS), :[],
                  s(:lvar, :opt))),
              s(:begin,
                s(:ivasgn, :@inspect_mode,
                  s(:lvar, :opt)),
                s(:ivasgn, :@inspect_method,
                  s(:lvar, :i)),
                s(:send,
                  s(:lvar, :i), :init)),
              s(:case,
                s(:lvar, :opt),
                s(:when,
                  s(:nil),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Inspector), :keys_with_inspector,
                        s(:send,
                          s(:const,
                            s(:const, nil, :Inspector), :INSPECTORS), :[],
                          s(:true))), :include?,
                      s(:ivar, :@inspect_mode)),
                    s(:send,
                      s(:self), :inspect_mode=,
                      s(:false)),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Inspector), :keys_with_inspector,
                          s(:send,
                            s(:const,
                              s(:const, nil, :Inspector), :INSPECTORS), :[],
                            s(:false))), :include?,
                        s(:ivar, :@inspect_mode)),
                      s(:send,
                        s(:self), :inspect_mode=,
                        s(:true)),
                      s(:begin,
                        s(:send, nil, :puts,
                          s(:str, "Can't switch inspect mode.")),
                        s(:return))))),
                s(:when,
                  s(:regexp,
                    s(:str, "^\\s*\\{.*\\}\\s*$"),
                    s(:regopt)),
                  s(:begin,
                    s(:kwbegin,
                      s(:rescue,
                        s(:lvasgn, :inspector,
                          s(:send, nil, :eval,
                            s(:dstr,
                              s(:str, "proc"),
                              s(:begin,
                                s(:lvar, :opt))))),
                        s(:resbody,
                          s(:array,
                            s(:const, nil, :Exception)), nil,
                          s(:begin,
                            s(:send, nil, :puts,
                              s(:dstr,
                                s(:str, "Can't switch inspect mode("),
                                s(:begin,
                                  s(:lvar, :opt)),
                                s(:str, ")."))),
                            s(:return))), nil)),
                    s(:send,
                      s(:self), :inspect_mode=,
                      s(:lvar, :inspector)))),
                s(:when,
                  s(:const, nil, :Proc),
                  s(:send,
                    s(:self), :inspect_mode=,
                    s(:send,
                      s(:const, nil, :IRB), :Inspector,
                      s(:lvar, :opt)))),
                s(:when,
                  s(:const, nil, :Inspector),
                  s(:begin,
                    s(:lvasgn, :prefix,
                      s(:str, "usr%d")),
                    s(:lvasgn, :i,
                      s(:int, 1)),
                    s(:while,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Inspector), :INSPECTORS), :[],
                        s(:send, nil, :format,
                          s(:lvar, :prefix),
                          s(:lvar, :i))),
                      s(:op_asgn,
                        s(:lvasgn, :i), :+,
                        s(:int, 1))),
                    s(:ivasgn, :@inspect_mode,
                      s(:send, nil, :format,
                        s(:lvar, :prefix),
                        s(:lvar, :i))),
                    s(:ivasgn, :@inspect_method,
                      s(:lvar, :opt)),
                    s(:send,
                      s(:const, nil, :Inspector), :def_inspector,
                      s(:send, nil, :format,
                        s(:lvar, :prefix),
                        s(:lvar, :i)),
                      s(:ivar, :@inspect_method)))),
                s(:begin,
                  s(:send, nil, :puts,
                    s(:dstr,
                      s(:str, "Can't switch inspect mode("),
                      s(:begin,
                        s(:lvar, :opt)),
                      s(:str, ")."))),
                  s(:return)))),
            s(:if,
              s(:send, nil, :verbose?),
              s(:send, nil, :print,
                s(:dstr,
                  s(:str, "Switch to"),
                  s(:begin,
                    s(:if,
                      s(:ivar, :@inspect_mode), nil,
                      s(:str, " non"))),
                  s(:str, " inspect mode.\n"))), nil),
            s(:ivar, :@inspect_mode))),
        s(:def, :use_readline=,
          s(:args,
            s(:arg, :opt)),
          s(:begin,
            s(:send, nil, :print,
              s(:str, "This method is obsolete.")),
            s(:send, nil, :print,
              s(:str, "Do nothing.")))),
        s(:def, :debug_level=,
          s(:args,
            s(:arg, :value)),
          s(:begin,
            s(:ivasgn, :@debug_level,
              s(:lvar, :value)),
            s(:send,
              s(:const, nil, :RubyLex), :debug_level=,
              s(:lvar, :value)))),
        s(:def, :debug?,
          s(:args),
          s(:send,
            s(:ivar, :@debug_level), :>,
            s(:int, 0))),
        s(:def, :evaluate,
          s(:args,
            s(:arg, :line),
            s(:arg, :line_no)),
          s(:begin,
            s(:ivasgn, :@line_no,
              s(:lvar, :line_no)),
            s(:send, nil, :set_last_value,
              s(:send,
                s(:ivar, :@workspace), :evaluate,
                s(:self),
                s(:lvar, :line),
                s(:send, nil, :irb_path),
                s(:lvar, :line_no))))),
        s(:def, :inspect_last_value,
          s(:args),
          s(:send,
            s(:ivar, :@inspect_method), :inspect_value,
            s(:ivar, :@last_value))),
        s(:alias,
          s(:sym, :__exit__),
          s(:sym, :exit)),
        s(:def, :exit,
          s(:args,
            s(:optarg, :ret,
              s(:int, 0))),
          s(:send,
            s(:const, nil, :IRB), :irb_exit,
            s(:ivar, :@irb),
            s(:lvar, :ret))),
        s(:casgn, nil, :NOPRINTING_IVARS,
          s(:array,
            s(:str, "@last_value"))),
        s(:casgn, nil, :NO_INSPECTING_IVARS,
          s(:array,
            s(:str, "@irb"),
            s(:str, "@io"))),
        s(:casgn, nil, :IDNAME_IVARS,
          s(:array,
            s(:str, "@prompt_mode"))),
        s(:alias,
          s(:sym, :__inspect__),
          s(:sym, :inspect)),
        s(:def, :inspect,
          s(:args),
          s(:begin,
            s(:lvasgn, :array,
              s(:array)),
            s(:for,
              s(:lvasgn, :ivar),
              s(:block,
                s(:send,
                  s(:send, nil, :instance_variables), :sort),
                s(:args,
                  s(:arg, :e1),
                  s(:arg, :e2)),
                s(:send,
                  s(:lvar, :e1), :<=>,
                  s(:lvar, :e2))),
              s(:begin,
                s(:lvasgn, :ivar,
                  s(:send,
                    s(:lvar, :ivar), :to_s)),
                s(:lvasgn, :name,
                  s(:send,
                    s(:lvar, :ivar), :sub,
                    s(:regexp,
                      s(:str, "^@(.*)$"),
                      s(:regopt)),
                    s(:str, "\\1"))),
                s(:lvasgn, :val,
                  s(:send, nil, :instance_eval,
                    s(:lvar, :ivar))),
                s(:case,
                  s(:lvar, :ivar),
                  s(:when,
                    s(:splat,
                      s(:const, nil, :NOPRINTING_IVARS)),
                    s(:send,
                      s(:lvar, :array), :push,
                      s(:send, nil, :format,
                        s(:str, "conf.%s=%s"),
                        s(:lvar, :name),
                        s(:str, "...")))),
                  s(:when,
                    s(:splat,
                      s(:const, nil, :NO_INSPECTING_IVARS)),
                    s(:send,
                      s(:lvar, :array), :push,
                      s(:send, nil, :format,
                        s(:str, "conf.%s=%s"),
                        s(:lvar, :name),
                        s(:send,
                          s(:lvar, :val), :to_s)))),
                  s(:when,
                    s(:splat,
                      s(:const, nil, :IDNAME_IVARS)),
                    s(:send,
                      s(:lvar, :array), :push,
                      s(:send, nil, :format,
                        s(:str, "conf.%s=:%s"),
                        s(:lvar, :name),
                        s(:send,
                          s(:lvar, :val), :id2name)))),
                  s(:send,
                    s(:lvar, :array), :push,
                    s(:send, nil, :format,
                      s(:str, "conf.%s=%s"),
                      s(:lvar, :name),
                      s(:send,
                        s(:lvar, :val), :inspect)))))),
            s(:send,
              s(:lvar, :array), :join,
              s(:str, "\n")))),
        s(:alias,
          s(:sym, :__to_s__),
          s(:sym, :to_s)),
        s(:alias,
          s(:sym, :to_s),
          s(:sym, :inspect))))))
