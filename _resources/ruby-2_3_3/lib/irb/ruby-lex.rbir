s(:begin,
  s(:send, nil, :require,
    s(:str, "e2mmap")),
  s(:send, nil, :require,
    s(:str, "irb/slex")),
  s(:send, nil, :require,
    s(:str, "irb/ruby-token")),
  s(:class,
    s(:const, nil, :RubyLex), nil,
    s(:begin,
      s(:send, nil, :extend,
        s(:const, nil, :Exception2MessageMapper)),
      s(:send, nil, :def_exception,
        s(:sym, :AlreadyDefinedToken),
        s(:str, "Already defined token(%s)")),
      s(:send, nil, :def_exception,
        s(:sym, :TkReading2TokenNoKey),
        s(:str, "key nothing(key='%s')")),
      s(:send, nil, :def_exception,
        s(:sym, :TkSymbol2TokenNoKey),
        s(:str, "key nothing(key='%s')")),
      s(:send, nil, :def_exception,
        s(:sym, :TkReading2TokenDuplicateError),
        s(:str, "key duplicate(token_n='%s', key='%s')")),
      s(:send, nil, :def_exception,
        s(:sym, :SyntaxError),
        s(:str, "%s")),
      s(:send, nil, :def_exception,
        s(:sym, :TerminateLineInput),
        s(:str, "Terminate Line Input")),
      s(:send, nil, :include,
        s(:const, nil, :RubyToken)),
      s(:sclass,
        s(:self),
        s(:begin,
          s(:send, nil, :attr_accessor,
            s(:sym, :debug_level)),
          s(:def, :debug?,
            s(:args),
            s(:send,
              s(:ivar, :@debug_level), :>,
              s(:int, 0))))),
      s(:ivasgn, :@debug_level,
        s(:int, 0)),
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:send, nil, :lex_init),
          s(:send, nil, :set_input,
            s(:const, nil, :STDIN)),
          s(:ivasgn, :@seek,
            s(:int, 0)),
          s(:ivasgn, :@exp_line_no,
            s(:ivasgn, :@line_no,
              s(:int, 1))),
          s(:ivasgn, :@base_char_no,
            s(:int, 0)),
          s(:ivasgn, :@char_no,
            s(:int, 0)),
          s(:ivasgn, :@rests,
            s(:array)),
          s(:ivasgn, :@readed,
            s(:array)),
          s(:ivasgn, :@here_readed,
            s(:array)),
          s(:ivasgn, :@indent,
            s(:int, 0)),
          s(:ivasgn, :@indent_stack,
            s(:array)),
          s(:ivasgn, :@lex_state,
            s(:const, nil, :EXPR_BEG)),
          s(:ivasgn, :@space_seen,
            s(:false)),
          s(:ivasgn, :@here_header,
            s(:false)),
          s(:ivasgn, :@post_symbeg,
            s(:false)),
          s(:ivasgn, :@continue,
            s(:false)),
          s(:ivasgn, :@line,
            s(:str, "")),
          s(:ivasgn, :@skip_space,
            s(:false)),
          s(:ivasgn, :@readed_auto_clean_up,
            s(:false)),
          s(:ivasgn, :@exception_on_syntax_error,
            s(:true)),
          s(:ivasgn, :@prompt,
            s(:nil)))),
      s(:send, nil, :attr_accessor,
        s(:sym, :skip_space)),
      s(:send, nil, :attr_accessor,
        s(:sym, :readed_auto_clean_up)),
      s(:send, nil, :attr_accessor,
        s(:sym, :exception_on_syntax_error)),
      s(:send, nil, :attr_reader,
        s(:sym, :seek)),
      s(:send, nil, :attr_reader,
        s(:sym, :char_no)),
      s(:send, nil, :attr_reader,
        s(:sym, :line_no)),
      s(:send, nil, :attr_reader,
        s(:sym, :indent)),
      s(:def, :set_input,
        s(:args,
          s(:arg, :io),
          s(:optarg, :p,
            s(:nil)),
          s(:blockarg, :block)),
        s(:begin,
          s(:ivasgn, :@io,
            s(:lvar, :io)),
          s(:if,
            s(:send,
              s(:lvar, :p), :respond_to?,
              s(:sym, :call)),
            s(:ivasgn, :@input,
              s(:lvar, :p)),
            s(:if,
              s(:send, nil, :block_given?),
              s(:ivasgn, :@input,
                s(:lvar, :block)),
              s(:ivasgn, :@input,
                s(:block,
                  s(:send,
                    s(:const, nil, :Proc), :new),
                  s(:args),
                  s(:send,
                    s(:ivar, :@io), :gets))))))),
      s(:def, :get_readed,
        s(:args),
        s(:begin,
          s(:if,
            s(:lvasgn, :idx,
              s(:send,
                s(:ivar, :@readed), :rindex,
                s(:str, "\n"))),
            s(:ivasgn, :@base_char_no,
              s(:send,
                s(:send,
                  s(:ivar, :@readed), :size), :-,
                s(:begin,
                  s(:send,
                    s(:lvar, :idx), :+,
                    s(:int, 1))))),
            s(:op_asgn,
              s(:ivasgn, :@base_char_no), :+,
              s(:send,
                s(:ivar, :@readed), :size))),
          s(:lvasgn, :readed,
            s(:send,
              s(:ivar, :@readed), :join,
              s(:str, ""))),
          s(:ivasgn, :@readed,
            s(:array)),
          s(:lvar, :readed))),
      s(:def, :getc,
        s(:args),
        s(:begin,
          s(:while,
            s(:send,
              s(:ivar, :@rests), :empty?),
            s(:if,
              s(:send, nil, :buf_input), nil,
              s(:send,
                s(:ivar, :@rests), :push,
                s(:nil)))),
          s(:lvasgn, :c,
            s(:send,
              s(:ivar, :@rests), :shift)),
          s(:if,
            s(:ivar, :@here_header),
            s(:send,
              s(:ivar, :@here_readed), :push,
              s(:lvar, :c)),
            s(:send,
              s(:ivar, :@readed), :push,
              s(:lvar, :c))),
          s(:op_asgn,
            s(:ivasgn, :@seek), :+,
            s(:int, 1)),
          s(:if,
            s(:send,
              s(:lvar, :c), :==,
              s(:str, "\n")),
            s(:begin,
              s(:op_asgn,
                s(:ivasgn, :@line_no), :+,
                s(:int, 1)),
              s(:ivasgn, :@char_no,
                s(:int, 0))),
            s(:op_asgn,
              s(:ivasgn, :@char_no), :+,
              s(:int, 1))),
          s(:lvar, :c))),
      s(:def, :gets,
        s(:args),
        s(:begin,
          s(:lvasgn, :l,
            s(:str, "")),
          s(:while,
            s(:lvasgn, :c,
              s(:send, nil, :getc)),
            s(:begin,
              s(:send,
                s(:lvar, :l), :concat,
                s(:lvar, :c)),
              s(:if,
                s(:send,
                  s(:lvar, :c), :==,
                  s(:str, "\n")),
                s(:break), nil))),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :l), :==,
                s(:str, "")),
              s(:send,
                s(:lvar, :c), :nil?)),
            s(:return,
              s(:nil)), nil),
          s(:lvar, :l))),
      s(:def, :eof?,
        s(:args),
        s(:send,
          s(:ivar, :@io), :eof?)),
      s(:def, :getc_of_rests,
        s(:args),
        s(:if,
          s(:send,
            s(:ivar, :@rests), :empty?),
          s(:nil),
          s(:send, nil, :getc))),
      s(:def, :ungetc,
        s(:args,
          s(:optarg, :c,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@here_readed), :empty?),
            s(:lvasgn, :c2,
              s(:send,
                s(:ivar, :@readed), :pop)),
            s(:lvasgn, :c2,
              s(:send,
                s(:ivar, :@here_readed), :pop))),
          s(:if,
            s(:lvar, :c), nil,
            s(:lvasgn, :c,
              s(:lvar, :c2))),
          s(:send,
            s(:ivar, :@rests), :unshift,
            s(:lvar, :c)),
          s(:op_asgn,
            s(:ivasgn, :@seek), :-,
            s(:int, 1)),
          s(:if,
            s(:send,
              s(:lvar, :c), :==,
              s(:str, "\n")),
            s(:begin,
              s(:op_asgn,
                s(:ivasgn, :@line_no), :-,
                s(:int, 1)),
              s(:if,
                s(:lvasgn, :idx,
                  s(:send,
                    s(:ivar, :@readed), :rindex,
                    s(:str, "\n"))),
                s(:ivasgn, :@char_no,
                  s(:send,
                    s(:lvar, :idx), :+,
                    s(:int, 1))),
                s(:ivasgn, :@char_no,
                  s(:send,
                    s(:ivar, :@base_char_no), :+,
                    s(:send,
                      s(:ivar, :@readed), :size))))),
            s(:op_asgn,
              s(:ivasgn, :@char_no), :-,
              s(:int, 1))))),
      s(:def, :peek_equal?,
        s(:args,
          s(:arg, :str)),
        s(:begin,
          s(:lvasgn, :chrs,
            s(:send,
              s(:lvar, :str), :split,
              s(:regexp,
                s(:regopt)))),
          s(:until,
            s(:send,
              s(:send,
                s(:ivar, :@rests), :size), :>=,
              s(:send,
                s(:lvar, :chrs), :size)),
            s(:if,
              s(:send, nil, :buf_input), nil,
              s(:return,
                s(:false)))),
          s(:send,
            s(:send,
              s(:ivar, :@rests), :[],
              s(:int, 0),
              s(:send,
                s(:lvar, :chrs), :size)), :==,
            s(:lvar, :chrs)))),
      s(:def, :peek_match?,
        s(:args,
          s(:arg, :regexp)),
        s(:begin,
          s(:while,
            s(:send,
              s(:ivar, :@rests), :empty?),
            s(:if,
              s(:send, nil, :buf_input), nil,
              s(:return,
                s(:false)))),
          s(:send,
            s(:lvar, :regexp), :=~,
            s(:send,
              s(:ivar, :@rests), :join,
              s(:str, ""))))),
      s(:def, :peek,
        s(:args,
          s(:optarg, :i,
            s(:int, 0))),
        s(:begin,
          s(:while,
            s(:send,
              s(:send,
                s(:ivar, :@rests), :size), :<=,
              s(:lvar, :i)),
            s(:if,
              s(:send, nil, :buf_input), nil,
              s(:return,
                s(:nil)))),
          s(:send,
            s(:ivar, :@rests), :[],
            s(:lvar, :i)))),
      s(:def, :buf_input,
        s(:args),
        s(:begin,
          s(:send, nil, :prompt),
          s(:lvasgn, :line,
            s(:send,
              s(:ivar, :@input), :call)),
          s(:if,
            s(:lvar, :line), nil,
            s(:return,
              s(:nil))),
          s(:send,
            s(:ivar, :@rests), :concat,
            s(:send,
              s(:send,
                s(:lvar, :line), :chars), :to_a)),
          s(:true))),
      s(:send, nil, :private,
        s(:sym, :buf_input)),
      s(:def, :set_prompt,
        s(:args,
          s(:optarg, :p,
            s(:nil)),
          s(:blockarg, :block)),
        s(:begin,
          s(:if,
            s(:send, nil, :block_given?),
            s(:lvasgn, :p,
              s(:lvar, :block)), nil),
          s(:if,
            s(:send,
              s(:lvar, :p), :respond_to?,
              s(:sym, :call)),
            s(:ivasgn, :@prompt,
              s(:lvar, :p)),
            s(:ivasgn, :@prompt,
              s(:block,
                s(:send,
                  s(:const, nil, :Proc), :new),
                s(:args),
                s(:send, nil, :print,
                  s(:lvar, :p))))))),
      s(:def, :prompt,
        s(:args),
        s(:if,
          s(:ivar, :@prompt),
          s(:send,
            s(:ivar, :@prompt), :call,
            s(:ivar, :@ltype),
            s(:ivar, :@indent),
            s(:ivar, :@continue),
            s(:ivar, :@line_no)), nil)),
      s(:def, :initialize_input,
        s(:args),
        s(:begin,
          s(:ivasgn, :@ltype,
            s(:nil)),
          s(:ivasgn, :@quoted,
            s(:nil)),
          s(:ivasgn, :@indent,
            s(:int, 0)),
          s(:ivasgn, :@indent_stack,
            s(:array)),
          s(:ivasgn, :@lex_state,
            s(:const, nil, :EXPR_BEG)),
          s(:ivasgn, :@space_seen,
            s(:false)),
          s(:ivasgn, :@here_header,
            s(:false)),
          s(:ivasgn, :@continue,
            s(:false)),
          s(:ivasgn, :@post_symbeg,
            s(:false)),
          s(:send, nil, :prompt),
          s(:ivasgn, :@line,
            s(:str, "")),
          s(:ivasgn, :@exp_line_no,
            s(:ivar, :@line_no)))),
      s(:def, :each_top_level_statement,
        s(:args),
        s(:begin,
          s(:send, nil, :initialize_input),
          s(:block,
            s(:send, nil, :catch,
              s(:sym, :TERM_INPUT)),
            s(:args),
            s(:block,
              s(:send, nil, :loop),
              s(:args),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:ivasgn, :@continue,
                      s(:false)),
                    s(:send, nil, :prompt),
                    s(:if,
                      s(:lvasgn, :l,
                        s(:send, nil, :lex)),
                      s(:begin,
                        s(:send,
                          s(:ivar, :@line), :concat,
                          s(:lvar, :l)),
                        s(:if,
                          s(:or,
                            s(:or,
                              s(:ivar, :@ltype),
                              s(:ivar, :@continue)),
                            s(:send,
                              s(:ivar, :@indent), :>,
                              s(:int, 0))),
                          s(:next), nil)),
                      s(:if,
                        s(:send,
                          s(:ivar, :@line), :==,
                          s(:str, "")),
                        s(:send, nil, :throw,
                          s(:sym, :TERM_INPUT)), nil)),
                    s(:if,
                      s(:send,
                        s(:ivar, :@line), :!=,
                        s(:str, "\n")),
                      s(:begin,
                        s(:send,
                          s(:ivar, :@line), :force_encoding,
                          s(:send,
                            s(:ivar, :@io), :encoding)),
                        s(:yield,
                          s(:ivar, :@line),
                          s(:ivar, :@exp_line_no))), nil),
                    s(:if,
                      s(:lvar, :l), nil,
                      s(:break)),
                    s(:ivasgn, :@line,
                      s(:str, "")),
                    s(:ivasgn, :@exp_line_no,
                      s(:ivar, :@line_no)),
                    s(:ivasgn, :@indent,
                      s(:int, 0)),
                    s(:ivasgn, :@indent_stack,
                      s(:array)),
                    s(:send, nil, :prompt)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :TerminateLineInput)), nil,
                    s(:begin,
                      s(:send, nil, :initialize_input),
                      s(:send, nil, :prompt),
                      s(:send, nil, :get_readed))), nil)))))),
      s(:def, :lex,
        s(:args),
        s(:begin,
          s(:until,
            s(:begin,
              s(:or,
                s(:and,
                  s(:begin,
                    s(:or,
                      s(:send,
                        s(:begin,
                          s(:lvasgn, :tk,
                            s(:send, nil, :token))), :kind_of?,
                        s(:const, nil, :TkNL)),
                      s(:send,
                        s(:lvar, :tk), :kind_of?,
                        s(:const, nil, :TkEND_OF_SCRIPT)))),
                  s(:send,
                    s(:ivar, :@continue), :!)),
                s(:send,
                  s(:lvar, :tk), :nil?))), nil),
          s(:lvasgn, :line,
            s(:send, nil, :get_readed)),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :line), :==,
                s(:str, "")),
              s(:or,
                s(:send,
                  s(:lvar, :tk), :kind_of?,
                  s(:const, nil, :TkEND_OF_SCRIPT)),
                s(:send,
                  s(:lvar, :tk), :nil?))),
            s(:nil),
            s(:lvar, :line)))),
      s(:def, :token,
        s(:args),
        s(:begin,
          s(:ivasgn, :@prev_seek,
            s(:ivar, :@seek)),
          s(:ivasgn, :@prev_line_no,
            s(:ivar, :@line_no)),
          s(:ivasgn, :@prev_char_no,
            s(:ivar, :@char_no)),
          s(:while_post,
            s(:and,
              s(:ivar, :@skip_space),
              s(:send,
                s(:lvar, :tk), :kind_of?,
                s(:const, nil, :TkSPACE))),
            s(:kwbegin,
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:lvasgn, :tk,
                      s(:send,
                        s(:ivar, :@OP), :match,
                        s(:self))),
                    s(:ivasgn, :@space_seen,
                      s(:send,
                        s(:lvar, :tk), :kind_of?,
                        s(:const, nil, :TkSPACE))),
                    s(:if,
                      s(:and,
                        s(:ivar, :@post_symbeg),
                        s(:send,
                          s(:lvar, :tk), :kind_of?,
                          s(:const, nil, :TkOp))),
                      s(:ivasgn, :@lex_state,
                        s(:const, nil, :EXPR_END)), nil),
                    s(:ivasgn, :@post_symbeg,
                      s(:send,
                        s(:lvar, :tk), :kind_of?,
                        s(:const, nil, :TkSYMBEG)))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :SyntaxError)), nil,
                    s(:begin,
                      s(:if,
                        s(:ivar, :@exception_on_syntax_error),
                        s(:send, nil, :raise), nil),
                      s(:lvasgn, :tk,
                        s(:send,
                          s(:const, nil, :TkError), :new,
                          s(:ivar, :@seek),
                          s(:ivar, :@line_no),
                          s(:ivar, :@char_no))))), nil)))),
          s(:if,
            s(:ivar, :@readed_auto_clean_up),
            s(:send, nil, :get_readed), nil),
          s(:lvar, :tk))),
      s(:casgn, nil, :ENINDENT_CLAUSE,
        s(:array,
          s(:str, "case"),
          s(:str, "class"),
          s(:str, "def"),
          s(:str, "do"),
          s(:str, "for"),
          s(:str, "if"),
          s(:str, "module"),
          s(:str, "unless"),
          s(:str, "until"),
          s(:str, "while"),
          s(:str, "begin"))),
      s(:casgn, nil, :DEINDENT_CLAUSE,
        s(:array,
          s(:str, "end"))),
      s(:casgn, nil, :PERCENT_LTYPE,
        s(:hash,
          s(:pair,
            s(:str, "q"),
            s(:str, "'")),
          s(:pair,
            s(:str, "Q"),
            s(:str, "\"")),
          s(:pair,
            s(:str, "x"),
            s(:str, "`")),
          s(:pair,
            s(:str, "r"),
            s(:str, "/")),
          s(:pair,
            s(:str, "w"),
            s(:str, "]")),
          s(:pair,
            s(:str, "W"),
            s(:str, "]")),
          s(:pair,
            s(:str, "i"),
            s(:str, "]")),
          s(:pair,
            s(:str, "I"),
            s(:str, "]")),
          s(:pair,
            s(:str, "s"),
            s(:str, ":")))),
      s(:casgn, nil, :PERCENT_PAREN,
        s(:hash,
          s(:pair,
            s(:str, "{"),
            s(:str, "}")),
          s(:pair,
            s(:str, "["),
            s(:str, "]")),
          s(:pair,
            s(:str, "<"),
            s(:str, ">")),
          s(:pair,
            s(:str, "("),
            s(:str, ")")))),
      s(:casgn, nil, :Ltype2Token,
        s(:hash,
          s(:pair,
            s(:str, "'"),
            s(:const, nil, :TkSTRING)),
          s(:pair,
            s(:str, "\""),
            s(:const, nil, :TkSTRING)),
          s(:pair,
            s(:str, "`"),
            s(:const, nil, :TkXSTRING)),
          s(:pair,
            s(:str, "/"),
            s(:const, nil, :TkREGEXP)),
          s(:pair,
            s(:str, "]"),
            s(:const, nil, :TkDSTRING)),
          s(:pair,
            s(:str, ":"),
            s(:const, nil, :TkSYMBOL)))),
      s(:casgn, nil, :DLtype2Token,
        s(:hash,
          s(:pair,
            s(:str, "\""),
            s(:const, nil, :TkDSTRING)),
          s(:pair,
            s(:str, "`"),
            s(:const, nil, :TkDXSTRING)),
          s(:pair,
            s(:str, "/"),
            s(:const, nil, :TkDREGEXP)))),
      s(:def, :lex_init,
        s(:args),
        s(:begin,
          s(:ivasgn, :@OP,
            s(:send,
              s(:const,
                s(:const, nil, :IRB), :SLex), :new)),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rules,
              s(:str, "\u0000"),
              s(:str, "\u0004"),
              s(:str, "\u001A")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:send, nil, :Token,
              s(:const, nil, :TkEND_OF_SCRIPT))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rules,
              s(:str, " "),
              s(:str, "\t"),
              s(:str, "\f"),
              s(:str, "\r"),
              s(:str, "\v")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:ivasgn, :@space_seen,
                s(:true)),
              s(:while,
                s(:send,
                  s(:send, nil, :getc), :=~,
                  s(:regexp,
                    s(:str, "[ \\t\\f\\r\\13]"),
                    s(:regopt))), nil),
              s(:send, nil, :ungetc),
              s(:send, nil, :Token,
                s(:const, nil, :TkSPACE)))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, "#")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:send, nil, :identify_comment)),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, "=begin"),
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :op),
                  s(:arg, :io)),
                s(:and,
                  s(:send,
                    s(:ivar, :@prev_char_no), :==,
                    s(:int, 0)),
                  s(:send,
                    s(:send, nil, :peek,
                      s(:int, 0)), :=~,
                    s(:regexp,
                      s(:str, "\\s"),
                      s(:regopt)))))),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:ivasgn, :@ltype,
                s(:str, "=")),
              s(:until,
                s(:send,
                  s(:send, nil, :getc), :==,
                  s(:str, "\n")), nil),
              s(:until,
                s(:and,
                  s(:send, nil, :peek_equal?,
                    s(:str, "=end")),
                  s(:send,
                    s(:send, nil, :peek,
                      s(:int, 4)), :=~,
                    s(:regexp,
                      s(:str, "\\s"),
                      s(:regopt)))),
                s(:until,
                  s(:send,
                    s(:send, nil, :getc), :==,
                    s(:str, "\n")), nil)),
              s(:send, nil, :gets),
              s(:ivasgn, :@ltype,
                s(:nil)),
              s(:send, nil, :Token,
                s(:const, nil, :TkRD_COMMENT)))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, "\n")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :RubyLex), :debug?),
                s(:send, nil, :print,
                  s(:str, "\\n\n")), nil),
              s(:case,
                s(:ivar, :@lex_state),
                s(:when,
                  s(:const, nil, :EXPR_BEG),
                  s(:const, nil, :EXPR_FNAME),
                  s(:const, nil, :EXPR_DOT),
                  s(:ivasgn, :@continue,
                    s(:true))),
                s(:begin,
                  s(:ivasgn, :@continue,
                    s(:false)),
                  s(:ivasgn, :@lex_state,
                    s(:const, nil, :EXPR_BEG)),
                  s(:until,
                    s(:begin,
                      s(:or,
                        s(:send,
                          s(:ivar, :@indent_stack), :empty?),
                        s(:send,
                          s(:array,
                            s(:const, nil, :TkLPAREN),
                            s(:const, nil, :TkLBRACK),
                            s(:const, nil, :TkLBRACE),
                            s(:const, nil, :TkfLPAREN),
                            s(:const, nil, :TkfLBRACK),
                            s(:const, nil, :TkfLBRACE)), :include?,
                          s(:send,
                            s(:ivar, :@indent_stack), :last)))),
                    s(:send,
                      s(:ivar, :@indent_stack), :pop)))),
              s(:ivasgn, :@here_header,
                s(:false)),
              s(:ivasgn, :@here_readed,
                s(:array)),
              s(:send, nil, :Token,
                s(:const, nil, :TkNL)))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rules,
              s(:str, "*"),
              s(:str, "**"),
              s(:str, "="),
              s(:str, "=="),
              s(:str, "==="),
              s(:str, "=~"),
              s(:str, "<=>"),
              s(:str, "<"),
              s(:str, "<="),
              s(:str, ">"),
              s(:str, ">="),
              s(:str, ">>"),
              s(:str, "!"),
              s(:str, "!="),
              s(:str, "!~")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:case,
                s(:ivar, :@lex_state),
                s(:when,
                  s(:const, nil, :EXPR_FNAME),
                  s(:const, nil, :EXPR_DOT),
                  s(:ivasgn, :@lex_state,
                    s(:const, nil, :EXPR_ARG))),
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_BEG))),
              s(:send, nil, :Token,
                s(:lvar, :op)))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rules,
              s(:str, "<<")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:lvasgn, :tk,
                s(:nil)),
              s(:if,
                s(:and,
                  s(:and,
                    s(:send,
                      s(:ivar, :@lex_state), :!=,
                      s(:const, nil, :EXPR_END)),
                    s(:send,
                      s(:ivar, :@lex_state), :!=,
                      s(:const, nil, :EXPR_CLASS))),
                  s(:begin,
                    s(:or,
                      s(:send,
                        s(:ivar, :@lex_state), :!=,
                        s(:const, nil, :EXPR_ARG)),
                      s(:ivar, :@space_seen)))),
                s(:begin,
                  s(:lvasgn, :c,
                    s(:send, nil, :peek,
                      s(:int, 0))),
                  s(:if,
                    s(:and,
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "\\S"),
                          s(:regopt)),
                        s(:lvar, :c)),
                      s(:begin,
                        s(:or,
                          s(:or,
                            s(:or,
                              s(:match_with_lvasgn,
                                s(:regexp,
                                  s(:str, "[\"'`]"),
                                  s(:regopt)),
                                s(:lvar, :c)),
                              s(:match_with_lvasgn,
                                s(:regexp,
                                  s(:str, "\\w"),
                                  s(:regopt)),
                                s(:lvar, :c))),
                            s(:send,
                              s(:lvar, :c), :==,
                              s(:str, "-"))),
                          s(:send,
                            s(:lvar, :c), :==,
                            s(:str, "~"))))),
                    s(:lvasgn, :tk,
                      s(:send, nil, :identify_here_document)), nil)), nil),
              s(:if,
                s(:lvar, :tk), nil,
                s(:begin,
                  s(:lvasgn, :tk,
                    s(:send, nil, :Token,
                      s(:lvar, :op))),
                  s(:case,
                    s(:ivar, :@lex_state),
                    s(:when,
                      s(:const, nil, :EXPR_FNAME),
                      s(:const, nil, :EXPR_DOT),
                      s(:ivasgn, :@lex_state,
                        s(:const, nil, :EXPR_ARG))),
                    s(:ivasgn, :@lex_state,
                      s(:const, nil, :EXPR_BEG))))),
              s(:lvar, :tk))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rules,
              s(:str, "'"),
              s(:str, "\"")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:send, nil, :identify_string,
              s(:lvar, :op))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rules,
              s(:str, "`")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:if,
              s(:send,
                s(:ivar, :@lex_state), :==,
                s(:const, nil, :EXPR_FNAME)),
              s(:begin,
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_END)),
                s(:send, nil, :Token,
                  s(:lvar, :op))),
              s(:send, nil, :identify_string,
                s(:lvar, :op)))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rules,
              s(:str, "?")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:if,
              s(:send,
                s(:ivar, :@lex_state), :==,
                s(:const, nil, :EXPR_END)),
              s(:begin,
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_BEG)),
                s(:send, nil, :Token,
                  s(:const, nil, :TkQUESTION))),
              s(:begin,
                s(:lvasgn, :ch,
                  s(:send, nil, :getc)),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:ivar, :@lex_state), :==,
                      s(:const, nil, :EXPR_ARG)),
                    s(:send,
                      s(:lvar, :ch), :=~,
                      s(:regexp,
                        s(:str, "\\s"),
                        s(:regopt)))),
                  s(:begin,
                    s(:send, nil, :ungetc),
                    s(:ivasgn, :@lex_state,
                      s(:const, nil, :EXPR_BEG)),
                    s(:send, nil, :Token,
                      s(:const, nil, :TkQUESTION))),
                  s(:begin,
                    s(:if,
                      s(:begin,
                        s(:send,
                          s(:lvar, :ch), :==,
                          s(:str, "\\"))),
                      s(:send, nil, :read_escape), nil),
                    s(:ivasgn, :@lex_state,
                      s(:const, nil, :EXPR_END)),
                    s(:send, nil, :Token,
                      s(:const, nil, :TkINTEGER))))))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rules,
              s(:str, "&"),
              s(:str, "&&"),
              s(:str, "|"),
              s(:str, "||")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:ivasgn, :@lex_state,
                s(:const, nil, :EXPR_BEG)),
              s(:send, nil, :Token,
                s(:lvar, :op)))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rules,
              s(:str, "+="),
              s(:str, "-="),
              s(:str, "*="),
              s(:str, "**="),
              s(:str, "&="),
              s(:str, "|="),
              s(:str, "^="),
              s(:str, "<<="),
              s(:str, ">>="),
              s(:str, "||="),
              s(:str, "&&=")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:ivasgn, :@lex_state,
                s(:const, nil, :EXPR_BEG)),
              s(:send,
                s(:lvar, :op), :=~,
                s(:regexp,
                  s(:str, "^(.*)=$"),
                  s(:regopt))),
              s(:send, nil, :Token,
                s(:const, nil, :TkOPASGN),
                s(:nth_ref, 1)))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, "+@"),
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :op),
                  s(:arg, :io)),
                s(:send,
                  s(:ivar, :@lex_state), :==,
                  s(:const, nil, :EXPR_FNAME)))),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:ivasgn, :@lex_state,
                s(:const, nil, :EXPR_ARG)),
              s(:send, nil, :Token,
                s(:lvar, :op)))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, "-@"),
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :op),
                  s(:arg, :io)),
                s(:send,
                  s(:ivar, :@lex_state), :==,
                  s(:const, nil, :EXPR_FNAME)))),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:ivasgn, :@lex_state,
                s(:const, nil, :EXPR_ARG)),
              s(:send, nil, :Token,
                s(:lvar, :op)))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rules,
              s(:str, "+"),
              s(:str, "-")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:block,
              s(:send, nil, :catch,
                s(:sym, :RET)),
              s(:args),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:ivar, :@lex_state), :==,
                    s(:const, nil, :EXPR_ARG)),
                  s(:if,
                    s(:and,
                      s(:ivar, :@space_seen),
                      s(:send,
                        s(:send, nil, :peek,
                          s(:int, 0)), :=~,
                        s(:regexp,
                          s(:str, "[0-9]"),
                          s(:regopt)))),
                    s(:send, nil, :throw,
                      s(:sym, :RET),
                      s(:send, nil, :identify_number)),
                    s(:ivasgn, :@lex_state,
                      s(:const, nil, :EXPR_BEG))),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:ivar, :@lex_state), :!=,
                        s(:const, nil, :EXPR_END)),
                      s(:send,
                        s(:send, nil, :peek,
                          s(:int, 0)), :=~,
                        s(:regexp,
                          s(:str, "[0-9]"),
                          s(:regopt)))),
                    s(:send, nil, :throw,
                      s(:sym, :RET),
                      s(:send, nil, :identify_number)),
                    s(:ivasgn, :@lex_state,
                      s(:const, nil, :EXPR_BEG)))),
                s(:send, nil, :Token,
                  s(:lvar, :op))))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, ".")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:ivasgn, :@lex_state,
                s(:const, nil, :EXPR_BEG)),
              s(:if,
                s(:send,
                  s(:send, nil, :peek,
                    s(:int, 0)), :=~,
                  s(:regexp,
                    s(:str, "[0-9]"),
                    s(:regopt))),
                s(:begin,
                  s(:send, nil, :ungetc),
                  s(:send, nil, :identify_number)),
                s(:begin,
                  s(:ivasgn, :@lex_state,
                    s(:const, nil, :EXPR_DOT)),
                  s(:send, nil, :Token,
                    s(:const, nil, :TkDOT)))))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rules,
              s(:str, ".."),
              s(:str, "...")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:ivasgn, :@lex_state,
                s(:const, nil, :EXPR_BEG)),
              s(:send, nil, :Token,
                s(:lvar, :op)))),
          s(:send, nil, :lex_int2))),
      s(:def, :lex_int2,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rules,
              s(:str, "]"),
              s(:str, "}"),
              s(:str, ")")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:ivasgn, :@lex_state,
                s(:const, nil, :EXPR_END)),
              s(:op_asgn,
                s(:ivasgn, :@indent), :-,
                s(:int, 1)),
              s(:send,
                s(:ivar, :@indent_stack), :pop),
              s(:send, nil, :Token,
                s(:lvar, :op)))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, ":")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:if,
              s(:or,
                s(:send,
                  s(:ivar, :@lex_state), :==,
                  s(:const, nil, :EXPR_END)),
                s(:send,
                  s(:send, nil, :peek,
                    s(:int, 0)), :=~,
                  s(:regexp,
                    s(:str, "\\s"),
                    s(:regopt)))),
              s(:begin,
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_BEG)),
                s(:send, nil, :Token,
                  s(:const, nil, :TkCOLON))),
              s(:begin,
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_FNAME)),
                s(:send, nil, :Token,
                  s(:const, nil, :TkSYMBEG))))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, "::")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:if,
              s(:or,
                s(:send,
                  s(:ivar, :@lex_state), :==,
                  s(:const, nil, :EXPR_BEG)),
                s(:and,
                  s(:send,
                    s(:ivar, :@lex_state), :==,
                    s(:const, nil, :EXPR_ARG)),
                  s(:ivar, :@space_seen))),
              s(:begin,
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_BEG)),
                s(:send, nil, :Token,
                  s(:const, nil, :TkCOLON3))),
              s(:begin,
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_DOT)),
                s(:send, nil, :Token,
                  s(:const, nil, :TkCOLON2))))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, "/")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:if,
              s(:or,
                s(:send,
                  s(:ivar, :@lex_state), :==,
                  s(:const, nil, :EXPR_BEG)),
                s(:send,
                  s(:ivar, :@lex_state), :==,
                  s(:const, nil, :EXPR_MID))),
              s(:send, nil, :identify_string,
                s(:lvar, :op)),
              s(:if,
                s(:send,
                  s(:send, nil, :peek,
                    s(:int, 0)), :==,
                  s(:str, "=")),
                s(:begin,
                  s(:send, nil, :getc),
                  s(:ivasgn, :@lex_state,
                    s(:const, nil, :EXPR_BEG)),
                  s(:send, nil, :Token,
                    s(:const, nil, :TkOPASGN),
                    s(:str, "/"))),
                s(:if,
                  s(:and,
                    s(:and,
                      s(:send,
                        s(:ivar, :@lex_state), :==,
                        s(:const, nil, :EXPR_ARG)),
                      s(:ivar, :@space_seen)),
                    s(:send,
                      s(:send, nil, :peek,
                        s(:int, 0)), :!~,
                      s(:regexp,
                        s(:str, "\\s"),
                        s(:regopt)))),
                  s(:send, nil, :identify_string,
                    s(:lvar, :op)),
                  s(:begin,
                    s(:ivasgn, :@lex_state,
                      s(:const, nil, :EXPR_BEG)),
                    s(:send, nil, :Token,
                      s(:str, "/"))))))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rules,
              s(:str, "^")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:ivasgn, :@lex_state,
                s(:const, nil, :EXPR_BEG)),
              s(:send, nil, :Token,
                s(:str, "^")))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rules,
              s(:str, ",")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:ivasgn, :@lex_state,
                s(:const, nil, :EXPR_BEG)),
              s(:send, nil, :Token,
                s(:lvar, :op)))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rules,
              s(:str, ";")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:ivasgn, :@lex_state,
                s(:const, nil, :EXPR_BEG)),
              s(:until,
                s(:begin,
                  s(:or,
                    s(:send,
                      s(:ivar, :@indent_stack), :empty?),
                    s(:send,
                      s(:array,
                        s(:const, nil, :TkLPAREN),
                        s(:const, nil, :TkLBRACK),
                        s(:const, nil, :TkLBRACE),
                        s(:const, nil, :TkfLPAREN),
                        s(:const, nil, :TkfLBRACK),
                        s(:const, nil, :TkfLBRACE)), :include?,
                      s(:send,
                        s(:ivar, :@indent_stack), :last)))),
                s(:send,
                  s(:ivar, :@indent_stack), :pop)),
              s(:send, nil, :Token,
                s(:lvar, :op)))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, "~")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:ivasgn, :@lex_state,
                s(:const, nil, :EXPR_BEG)),
              s(:send, nil, :Token,
                s(:str, "~")))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, "~@"),
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :op),
                  s(:arg, :io)),
                s(:send,
                  s(:ivar, :@lex_state), :==,
                  s(:const, nil, :EXPR_FNAME)))),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:ivasgn, :@lex_state,
                s(:const, nil, :EXPR_BEG)),
              s(:send, nil, :Token,
                s(:str, "~")))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, "(")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:op_asgn,
                s(:ivasgn, :@indent), :+,
                s(:int, 1)),
              s(:if,
                s(:or,
                  s(:send,
                    s(:ivar, :@lex_state), :==,
                    s(:const, nil, :EXPR_BEG)),
                  s(:send,
                    s(:ivar, :@lex_state), :==,
                    s(:const, nil, :EXPR_MID))),
                s(:begin,
                  s(:ivasgn, :@lex_state,
                    s(:const, nil, :EXPR_BEG)),
                  s(:lvasgn, :tk_c,
                    s(:const, nil, :TkfLPAREN))),
                s(:begin,
                  s(:ivasgn, :@lex_state,
                    s(:const, nil, :EXPR_BEG)),
                  s(:lvasgn, :tk_c,
                    s(:const, nil, :TkLPAREN)))),
              s(:send,
                s(:ivar, :@indent_stack), :push,
                s(:lvar, :tk_c)),
              s(:send, nil, :Token,
                s(:lvar, :tk_c)))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, "[]"),
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :op),
                  s(:arg, :io)),
                s(:send,
                  s(:ivar, :@lex_state), :==,
                  s(:const, nil, :EXPR_FNAME)))),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:ivasgn, :@lex_state,
                s(:const, nil, :EXPR_ARG)),
              s(:send, nil, :Token,
                s(:str, "[]")))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, "[]="),
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :op),
                  s(:arg, :io)),
                s(:send,
                  s(:ivar, :@lex_state), :==,
                  s(:const, nil, :EXPR_FNAME)))),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:ivasgn, :@lex_state,
                s(:const, nil, :EXPR_ARG)),
              s(:send, nil, :Token,
                s(:str, "[]=")))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, "[")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:op_asgn,
                s(:ivasgn, :@indent), :+,
                s(:int, 1)),
              s(:if,
                s(:send,
                  s(:ivar, :@lex_state), :==,
                  s(:const, nil, :EXPR_FNAME)),
                s(:lvasgn, :tk_c,
                  s(:const, nil, :TkfLBRACK)),
                s(:begin,
                  s(:if,
                    s(:or,
                      s(:send,
                        s(:ivar, :@lex_state), :==,
                        s(:const, nil, :EXPR_BEG)),
                      s(:send,
                        s(:ivar, :@lex_state), :==,
                        s(:const, nil, :EXPR_MID))),
                    s(:lvasgn, :tk_c,
                      s(:const, nil, :TkLBRACK)),
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:ivar, :@lex_state), :==,
                          s(:const, nil, :EXPR_ARG)),
                        s(:ivar, :@space_seen)),
                      s(:lvasgn, :tk_c,
                        s(:const, nil, :TkLBRACK)),
                      s(:lvasgn, :tk_c,
                        s(:const, nil, :TkfLBRACK)))),
                  s(:ivasgn, :@lex_state,
                    s(:const, nil, :EXPR_BEG)))),
              s(:send,
                s(:ivar, :@indent_stack), :push,
                s(:lvar, :tk_c)),
              s(:send, nil, :Token,
                s(:lvar, :tk_c)))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, "{")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:op_asgn,
                s(:ivasgn, :@indent), :+,
                s(:int, 1)),
              s(:if,
                s(:and,
                  s(:send,
                    s(:ivar, :@lex_state), :!=,
                    s(:const, nil, :EXPR_END)),
                  s(:send,
                    s(:ivar, :@lex_state), :!=,
                    s(:const, nil, :EXPR_ARG))),
                s(:lvasgn, :tk_c,
                  s(:const, nil, :TkLBRACE)),
                s(:lvasgn, :tk_c,
                  s(:const, nil, :TkfLBRACE))),
              s(:ivasgn, :@lex_state,
                s(:const, nil, :EXPR_BEG)),
              s(:send,
                s(:ivar, :@indent_stack), :push,
                s(:lvar, :tk_c)),
              s(:send, nil, :Token,
                s(:lvar, :tk_c)))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, "\\")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:if,
              s(:send,
                s(:send, nil, :getc), :==,
                s(:str, "\n")),
              s(:begin,
                s(:ivasgn, :@space_seen,
                  s(:true)),
                s(:ivasgn, :@continue,
                  s(:true)),
                s(:send, nil, :Token,
                  s(:const, nil, :TkSPACE))),
              s(:begin,
                s(:send, nil, :read_escape),
                s(:send, nil, :Token,
                  s(:str, "\\"))))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, "%")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:if,
              s(:or,
                s(:send,
                  s(:ivar, :@lex_state), :==,
                  s(:const, nil, :EXPR_BEG)),
                s(:send,
                  s(:ivar, :@lex_state), :==,
                  s(:const, nil, :EXPR_MID))),
              s(:send, nil, :identify_quotation),
              s(:if,
                s(:send,
                  s(:send, nil, :peek,
                    s(:int, 0)), :==,
                  s(:str, "=")),
                s(:begin,
                  s(:send, nil, :getc),
                  s(:send, nil, :Token,
                    s(:const, nil, :TkOPASGN),
                    s(:sym, :%))),
                s(:if,
                  s(:and,
                    s(:and,
                      s(:send,
                        s(:ivar, :@lex_state), :==,
                        s(:const, nil, :EXPR_ARG)),
                      s(:ivar, :@space_seen)),
                    s(:send,
                      s(:send, nil, :peek,
                        s(:int, 0)), :!~,
                      s(:regexp,
                        s(:str, "\\s"),
                        s(:regopt)))),
                  s(:send, nil, :identify_quotation),
                  s(:begin,
                    s(:ivasgn, :@lex_state,
                      s(:const, nil, :EXPR_BEG)),
                    s(:send, nil, :Token,
                      s(:str, "%"))))))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, "$")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:send, nil, :identify_gvar)),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, "@")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:if,
              s(:send,
                s(:send, nil, :peek,
                  s(:int, 0)), :=~,
                s(:regexp,
                  s(:str, "[\\w@]"),
                  s(:regopt))),
              s(:begin,
                s(:send, nil, :ungetc),
                s(:send, nil, :identify_identifier)),
              s(:send, nil, :Token,
                s(:str, "@")))),
          s(:block,
            s(:send,
              s(:ivar, :@OP), :def_rule,
              s(:str, "")),
            s(:args,
              s(:arg, :op),
              s(:arg, :io)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :RubyLex), :debug?),
                s(:send, nil, :printf,
                  s(:str, "MATCH: start %s: %s\n"),
                  s(:lvar, :op),
                  s(:send,
                    s(:lvar, :io), :inspect)), nil),
              s(:if,
                s(:send,
                  s(:send, nil, :peek,
                    s(:int, 0)), :=~,
                  s(:regexp,
                    s(:str, "[0-9]"),
                    s(:regopt))),
                s(:lvasgn, :t,
                  s(:send, nil, :identify_number)),
                s(:if,
                  s(:send,
                    s(:send, nil, :peek,
                      s(:int, 0)), :=~,
                    s(:regexp,
                      s(:str, "[^\\x00-/:-@\\[-^`{-\\x7F]"),
                      s(:regopt))),
                  s(:lvasgn, :t,
                    s(:send, nil, :identify_identifier)), nil)),
              s(:if,
                s(:send,
                  s(:const, nil, :RubyLex), :debug?),
                s(:send, nil, :printf,
                  s(:str, "MATCH: end %s: %s\n"),
                  s(:lvar, :op),
                  s(:send,
                    s(:lvar, :io), :inspect)), nil),
              s(:lvar, :t))),
          s(:if,
            s(:send,
              s(:const, nil, :RubyLex), :debug?),
            s(:send, nil, :p,
              s(:ivar, :@OP)), nil))),
      s(:def, :identify_gvar,
        s(:args),
        s(:begin,
          s(:ivasgn, :@lex_state,
            s(:const, nil, :EXPR_END)),
          s(:case,
            s(:lvasgn, :ch,
              s(:send, nil, :getc)),
            s(:when,
              s(:regexp,
                s(:str, "[~_*$?!@/\\\\;,=:<>\".]"),
                s(:regopt)),
              s(:send, nil, :Token,
                s(:const, nil, :TkGVAR),
                s(:send,
                  s(:str, "$"), :+,
                  s(:lvar, :ch)))),
            s(:when,
              s(:str, "-"),
              s(:send, nil, :Token,
                s(:const, nil, :TkGVAR),
                s(:send,
                  s(:str, "$-"), :+,
                  s(:send, nil, :getc)))),
            s(:when,
              s(:str, "&"),
              s(:str, "`"),
              s(:str, "'"),
              s(:str, "+"),
              s(:send, nil, :Token,
                s(:const, nil, :TkBACK_REF),
                s(:send,
                  s(:str, "$"), :+,
                  s(:lvar, :ch)))),
            s(:when,
              s(:regexp,
                s(:str, "[1-9]"),
                s(:regopt)),
              s(:begin,
                s(:while,
                  s(:send,
                    s(:send, nil, :getc), :=~,
                    s(:regexp,
                      s(:str, "[0-9]"),
                      s(:regopt))), nil),
                s(:send, nil, :ungetc),
                s(:send, nil, :Token,
                  s(:const, nil, :TkNTH_REF)))),
            s(:when,
              s(:regexp,
                s(:str, "\\w"),
                s(:regopt)),
              s(:begin,
                s(:send, nil, :ungetc),
                s(:send, nil, :ungetc),
                s(:send, nil, :identify_identifier))),
            s(:begin,
              s(:send, nil, :ungetc),
              s(:send, nil, :Token,
                s(:str, "$")))))),
      s(:def, :identify_identifier,
        s(:args),
        s(:begin,
          s(:lvasgn, :token,
            s(:str, "")),
          s(:if,
            s(:send,
              s(:send, nil, :peek,
                s(:int, 0)), :=~,
              s(:regexp,
                s(:str, "[$@]"),
                s(:regopt))),
            s(:begin,
              s(:send,
                s(:lvar, :token), :concat,
                s(:lvasgn, :c,
                  s(:send, nil, :getc))),
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :c), :==,
                    s(:str, "@")),
                  s(:send,
                    s(:send, nil, :peek,
                      s(:int, 0)), :==,
                    s(:str, "@"))),
                s(:send,
                  s(:lvar, :token), :concat,
                  s(:send, nil, :getc)), nil)), nil),
          s(:while,
            s(:send,
              s(:begin,
                s(:lvasgn, :ch,
                  s(:send, nil, :getc))), :=~,
              s(:regexp,
                s(:str, "[^\\x00-/:-@\\[-^`{-\\x7F]"),
                s(:regopt))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :RubyLex), :debug?),
                s(:send, nil, :print,
                  s(:str, ":"),
                  s(:lvar, :ch),
                  s(:str, ":")), nil),
              s(:send,
                s(:lvar, :token), :concat,
                s(:lvar, :ch)))),
          s(:send, nil, :ungetc),
          s(:if,
            s(:and,
              s(:and,
                s(:begin,
                  s(:or,
                    s(:send,
                      s(:lvar, :ch), :==,
                      s(:str, "!")),
                    s(:send,
                      s(:lvar, :ch), :==,
                      s(:str, "?")))),
                s(:send,
                  s(:send,
                    s(:lvar, :token), :[],
                    s(:int, 0),
                    s(:int, 1)), :=~,
                  s(:regexp,
                    s(:str, "\\w"),
                    s(:regopt)))),
              s(:send,
                s(:send, nil, :peek,
                  s(:int, 0)), :!=,
                s(:str, "="))),
            s(:send,
              s(:lvar, :token), :concat,
              s(:send, nil, :getc)), nil),
          s(:case,
            s(:lvar, :token),
            s(:when,
              s(:regexp,
                s(:str, "^\\$"),
                s(:regopt)),
              s(:return,
                s(:send, nil, :Token,
                  s(:const, nil, :TkGVAR),
                  s(:lvar, :token)))),
            s(:when,
              s(:regexp,
                s(:str, "^\\@\\@"),
                s(:regopt)),
              s(:begin,
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_END)),
                s(:return,
                  s(:send, nil, :Token,
                    s(:const, nil, :TkCVAR),
                    s(:lvar, :token))))),
            s(:when,
              s(:regexp,
                s(:str, "^\\@"),
                s(:regopt)),
              s(:begin,
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_END)),
                s(:return,
                  s(:send, nil, :Token,
                    s(:const, nil, :TkIVAR),
                    s(:lvar, :token))))), nil),
          s(:if,
            s(:send,
              s(:ivar, :@lex_state), :!=,
              s(:const, nil, :EXPR_DOT)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :RubyLex), :debug?),
                s(:send, nil, :print,
                  s(:lvar, :token),
                  s(:str, "\n")), nil),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :token_c),
                  s(:splat,
                    s(:lvasgn, :trans))),
                s(:send,
                  s(:const, nil, :TkReading2Token), :[],
                  s(:lvar, :token))),
              s(:if,
                s(:lvar, :token_c),
                s(:begin,
                  s(:if,
                    s(:begin,
                      s(:and,
                        s(:and,
                          s(:send,
                            s(:ivar, :@lex_state), :!=,
                            s(:const, nil, :EXPR_BEG)),
                          s(:send,
                            s(:ivar, :@lex_state), :!=,
                            s(:const, nil, :EXPR_FNAME))),
                        s(:send,
                          s(:lvar, :trans), :[],
                          s(:int, 1)))),
                    s(:begin,
                      s(:lvasgn, :token_c,
                        s(:send,
                          s(:const, nil, :TkSymbol2Token), :[],
                          s(:send,
                            s(:lvar, :trans), :[],
                            s(:int, 1)))),
                      s(:ivasgn, :@lex_state,
                        s(:send,
                          s(:lvar, :trans), :[],
                          s(:int, 0)))),
                    s(:if,
                      s(:send,
                        s(:ivar, :@lex_state), :!=,
                        s(:const, nil, :EXPR_FNAME)),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:const, nil, :ENINDENT_CLAUSE), :include?,
                            s(:lvar, :token)),
                          s(:begin,
                            s(:lvasgn, :valid,
                              s(:true)),
                            s(:case,
                              s(:lvar, :token),
                              s(:when,
                                s(:str, "class"),
                                s(:if,
                                  s(:send, nil, :peek_match?,
                                    s(:regexp,
                                      s(:str, "^\\s*(<<|\\w|::)"),
                                      s(:regopt))), nil,
                                  s(:lvasgn, :valid,
                                    s(:false)))),
                              s(:when,
                                s(:str, "def"),
                                s(:if,
                                  s(:send, nil, :peek_match?,
                                    s(:regexp,
                                      s(:str, "^\\s*(([+\\-/*&\\|^]|<<|>>|\\|\\||\\&\\&)=|\\&\\&|\\|\\|)"),
                                      s(:regopt))),
                                  s(:lvasgn, :valid,
                                    s(:false)), nil)),
                              s(:when,
                                s(:str, "do"),
                                s(:if,
                                  s(:send, nil, :peek_match?,
                                    s(:regexp,
                                      s(:str, "^\\s*([+\\-/*]?=|\\*|<|>|\\&)"),
                                      s(:regopt))),
                                  s(:lvasgn, :valid,
                                    s(:false)), nil)),
                              s(:when,
                                s(:splat,
                                  s(:const, nil, :ENINDENT_CLAUSE)),
                                s(:if,
                                  s(:send, nil, :peek_match?,
                                    s(:regexp,
                                      s(:str, "^\\s*([+\\-/*]?=|\\*|<|>|\\&|\\|)"),
                                      s(:regopt))),
                                  s(:lvasgn, :valid,
                                    s(:false)), nil)), nil),
                            s(:if,
                              s(:lvar, :valid),
                              s(:if,
                                s(:send,
                                  s(:lvar, :token), :==,
                                  s(:str, "do")),
                                s(:if,
                                  s(:send,
                                    s(:send,
                                      s(:array,
                                        s(:const, nil, :TkFOR),
                                        s(:const, nil, :TkWHILE),
                                        s(:const, nil, :TkUNTIL)), :include?,
                                      s(:send,
                                        s(:ivar, :@indent_stack), :last)), :!),
                                  s(:begin,
                                    s(:op_asgn,
                                      s(:ivasgn, :@indent), :+,
                                      s(:int, 1)),
                                    s(:send,
                                      s(:ivar, :@indent_stack), :push,
                                      s(:lvar, :token_c))), nil),
                                s(:begin,
                                  s(:op_asgn,
                                    s(:ivasgn, :@indent), :+,
                                    s(:int, 1)),
                                  s(:send,
                                    s(:ivar, :@indent_stack), :push,
                                    s(:lvar, :token_c)))), nil)),
                          s(:if,
                            s(:send,
                              s(:const, nil, :DEINDENT_CLAUSE), :include?,
                              s(:lvar, :token)),
                            s(:begin,
                              s(:op_asgn,
                                s(:ivasgn, :@indent), :-,
                                s(:int, 1)),
                              s(:send,
                                s(:ivar, :@indent_stack), :pop)), nil)),
                        s(:ivasgn, :@lex_state,
                          s(:send,
                            s(:lvar, :trans), :[],
                            s(:int, 0)))),
                      s(:ivasgn, :@lex_state,
                        s(:const, nil, :EXPR_END)))),
                  s(:return,
                    s(:send, nil, :Token,
                      s(:lvar, :token_c),
                      s(:lvar, :token)))), nil)), nil),
          s(:if,
            s(:send,
              s(:ivar, :@lex_state), :==,
              s(:const, nil, :EXPR_FNAME)),
            s(:begin,
              s(:ivasgn, :@lex_state,
                s(:const, nil, :EXPR_END)),
              s(:if,
                s(:send,
                  s(:send, nil, :peek,
                    s(:int, 0)), :==,
                  s(:str, "=")),
                s(:send,
                  s(:lvar, :token), :concat,
                  s(:send, nil, :getc)), nil)),
            s(:if,
              s(:or,
                s(:send,
                  s(:ivar, :@lex_state), :==,
                  s(:const, nil, :EXPR_BEG)),
                s(:send,
                  s(:ivar, :@lex_state), :==,
                  s(:const, nil, :EXPR_DOT))),
              s(:ivasgn, :@lex_state,
                s(:const, nil, :EXPR_ARG)),
              s(:ivasgn, :@lex_state,
                s(:const, nil, :EXPR_END)))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :token), :[],
                s(:int, 0),
                s(:int, 1)), :=~,
              s(:regexp,
                s(:str, "[A-Z]"),
                s(:regopt))),
            s(:return,
              s(:send, nil, :Token,
                s(:const, nil, :TkCONSTANT),
                s(:lvar, :token))),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :token), :[],
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :size), :-,
                    s(:int, 1)),
                  s(:int, 1)), :=~,
                s(:regexp,
                  s(:str, "[!?]"),
                  s(:regopt))),
              s(:return,
                s(:send, nil, :Token,
                  s(:const, nil, :TkFID),
                  s(:lvar, :token))),
              s(:return,
                s(:send, nil, :Token,
                  s(:const, nil, :TkIDENTIFIER),
                  s(:lvar, :token))))))),
      s(:def, :identify_here_document,
        s(:args),
        s(:begin,
          s(:lvasgn, :ch,
            s(:send, nil, :getc)),
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :ch), :==,
                s(:str, "-")),
              s(:send,
                s(:lvar, :ch), :==,
                s(:str, "~"))),
            s(:begin,
              s(:lvasgn, :ch,
                s(:send, nil, :getc)),
              s(:lvasgn, :indent,
                s(:true))), nil),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "['\"`]"),
                s(:regopt)),
              s(:lvar, :ch)),
            s(:begin,
              s(:lvasgn, :lt,
                s(:lvar, :ch)),
              s(:lvasgn, :quoted,
                s(:str, "")),
              s(:while,
                s(:and,
                  s(:begin,
                    s(:lvasgn, :c,
                      s(:send, nil, :getc))),
                  s(:send,
                    s(:lvar, :c), :!=,
                    s(:lvar, :lt))),
                s(:send,
                  s(:lvar, :quoted), :concat,
                  s(:lvar, :c)))),
            s(:begin,
              s(:lvasgn, :lt,
                s(:str, "\"")),
              s(:lvasgn, :quoted,
                s(:send,
                  s(:lvar, :ch), :dup)),
              s(:while,
                s(:and,
                  s(:begin,
                    s(:lvasgn, :c,
                      s(:send, nil, :getc))),
                  s(:send,
                    s(:lvar, :c), :=~,
                    s(:regexp,
                      s(:str, "\\w"),
                      s(:regopt)))),
                s(:send,
                  s(:lvar, :quoted), :concat,
                  s(:lvar, :c))),
              s(:send, nil, :ungetc))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :ltback),
              s(:ivasgn, :@ltype)),
            s(:array,
              s(:ivar, :@ltype),
              s(:lvar, :lt))),
          s(:lvasgn, :reserve,
            s(:array)),
          s(:while,
            s(:lvasgn, :ch,
              s(:send, nil, :getc)),
            s(:begin,
              s(:send,
                s(:lvar, :reserve), :push,
                s(:lvar, :ch)),
              s(:if,
                s(:send,
                  s(:lvar, :ch), :==,
                  s(:str, "\\")),
                s(:send,
                  s(:lvar, :reserve), :push,
                  s(:lvasgn, :ch,
                    s(:send, nil, :getc))),
                s(:if,
                  s(:send,
                    s(:lvar, :ch), :==,
                    s(:str, "\n")),
                  s(:break), nil)))),
          s(:ivasgn, :@here_header,
            s(:false)),
          s(:lvasgn, :line,
            s(:str, "")),
          s(:while,
            s(:lvasgn, :ch,
              s(:send, nil, :getc)),
            s(:if,
              s(:send,
                s(:lvar, :ch), :==,
                s(:str, "\n")),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :line), :==,
                    s(:lvar, :quoted)),
                  s(:break), nil),
                s(:lvasgn, :line,
                  s(:str, ""))),
              s(:begin,
                s(:if,
                  s(:and,
                    s(:and,
                      s(:lvar, :indent),
                      s(:send,
                        s(:lvar, :line), :==,
                        s(:str, ""))),
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "\\s"),
                        s(:regopt)),
                      s(:lvar, :ch))), nil,
                  s(:send,
                    s(:lvar, :line), :concat,
                    s(:lvar, :ch))),
                s(:if,
                  s(:and,
                    s(:and,
                      s(:send,
                        s(:ivar, :@ltype), :!=,
                        s(:str, "'")),
                      s(:send,
                        s(:lvar, :ch), :==,
                        s(:str, "#"))),
                    s(:send,
                      s(:send, nil, :peek,
                        s(:int, 0)), :==,
                      s(:str, "{"))),
                  s(:send, nil, :identify_string_dvar), nil)))),
          s(:ivasgn, :@here_header,
            s(:true)),
          s(:send,
            s(:ivar, :@here_readed), :concat,
            s(:lvar, :reserve)),
          s(:while,
            s(:lvasgn, :ch,
              s(:send,
                s(:lvar, :reserve), :pop)),
            s(:send, nil, :ungetc,
              s(:lvar, :ch))),
          s(:ivasgn, :@ltype,
            s(:lvar, :ltback)),
          s(:ivasgn, :@lex_state,
            s(:const, nil, :EXPR_END)),
          s(:send, nil, :Token,
            s(:send,
              s(:const, nil, :Ltype2Token), :[],
              s(:lvar, :lt))))),
      s(:def, :identify_quotation,
        s(:args),
        s(:begin,
          s(:lvasgn, :ch,
            s(:send, nil, :getc)),
          s(:if,
            s(:lvasgn, :lt,
              s(:send,
                s(:const, nil, :PERCENT_LTYPE), :[],
                s(:lvar, :ch))),
            s(:lvasgn, :ch,
              s(:send, nil, :getc)),
            s(:if,
              s(:send,
                s(:lvar, :ch), :=~,
                s(:regexp,
                  s(:str, "\\W"),
                  s(:regopt))),
              s(:lvasgn, :lt,
                s(:str, "\"")),
              s(:send,
                s(:const, nil, :RubyLex), :fail,
                s(:const, nil, :SyntaxError),
                s(:str, "unknown type of %string")))),
          s(:if,
            s(:ivasgn, :@quoted,
              s(:send,
                s(:const, nil, :PERCENT_PAREN), :[],
                s(:lvar, :ch))), nil,
            s(:ivasgn, :@quoted,
              s(:lvar, :ch))),
          s(:send, nil, :identify_string,
            s(:lvar, :lt),
            s(:ivar, :@quoted)))),
      s(:def, :identify_number,
        s(:args),
        s(:begin,
          s(:ivasgn, :@lex_state,
            s(:const, nil, :EXPR_END)),
          s(:if,
            s(:and,
              s(:send,
                s(:send, nil, :peek,
                  s(:int, 0)), :==,
                s(:str, "0")),
              s(:send,
                s(:send, nil, :peek,
                  s(:int, 1)), :!~,
                s(:regexp,
                  s(:str, "[.eE]"),
                  s(:regopt)))),
            s(:begin,
              s(:send, nil, :getc),
              s(:case,
                s(:send, nil, :peek,
                  s(:int, 0)),
                s(:when,
                  s(:regexp,
                    s(:str, "[xX]"),
                    s(:regopt)),
                  s(:begin,
                    s(:lvasgn, :ch,
                      s(:send, nil, :getc)),
                    s(:lvasgn, :match,
                      s(:regexp,
                        s(:str, "[0-9a-fA-F_]"),
                        s(:regopt))))),
                s(:when,
                  s(:regexp,
                    s(:str, "[bB]"),
                    s(:regopt)),
                  s(:begin,
                    s(:lvasgn, :ch,
                      s(:send, nil, :getc)),
                    s(:lvasgn, :match,
                      s(:regexp,
                        s(:str, "[01_]"),
                        s(:regopt))))),
                s(:when,
                  s(:regexp,
                    s(:str, "[oO]"),
                    s(:regopt)),
                  s(:begin,
                    s(:lvasgn, :ch,
                      s(:send, nil, :getc)),
                    s(:lvasgn, :match,
                      s(:regexp,
                        s(:str, "[0-7_]"),
                        s(:regopt))))),
                s(:when,
                  s(:regexp,
                    s(:str, "[dD]"),
                    s(:regopt)),
                  s(:begin,
                    s(:lvasgn, :ch,
                      s(:send, nil, :getc)),
                    s(:lvasgn, :match,
                      s(:regexp,
                        s(:str, "[0-9_]"),
                        s(:regopt))))),
                s(:when,
                  s(:regexp,
                    s(:str, "[0-7]"),
                    s(:regopt)),
                  s(:lvasgn, :match,
                    s(:regexp,
                      s(:str, "[0-7_]"),
                      s(:regopt)))),
                s(:when,
                  s(:regexp,
                    s(:str, "[89]"),
                    s(:regopt)),
                  s(:send,
                    s(:const, nil, :RubyLex), :fail,
                    s(:const, nil, :SyntaxError),
                    s(:str, "Invalid octal digit"))),
                s(:return,
                  s(:send, nil, :Token,
                    s(:const, nil, :TkINTEGER)))),
              s(:lvasgn, :len0,
                s(:true)),
              s(:lvasgn, :non_digit,
                s(:false)),
              s(:while,
                s(:lvasgn, :ch,
                  s(:send, nil, :getc)),
                s(:if,
                  s(:send,
                    s(:lvar, :match), :=~,
                    s(:lvar, :ch)),
                  s(:if,
                    s(:send,
                      s(:lvar, :ch), :==,
                      s(:str, "_")),
                    s(:if,
                      s(:lvar, :non_digit),
                      s(:send,
                        s(:const, nil, :RubyLex), :fail,
                        s(:const, nil, :SyntaxError),
                        s(:dstr,
                          s(:str, "trailing `"),
                          s(:begin,
                            s(:lvar, :ch)),
                          s(:str, "' in number"))),
                      s(:lvasgn, :non_digit,
                        s(:lvar, :ch))),
                    s(:begin,
                      s(:lvasgn, :non_digit,
                        s(:false)),
                      s(:lvasgn, :len0,
                        s(:false)))),
                  s(:begin,
                    s(:send, nil, :ungetc),
                    s(:if,
                      s(:lvar, :len0),
                      s(:send,
                        s(:const, nil, :RubyLex), :fail,
                        s(:const, nil, :SyntaxError),
                        s(:str, "numeric literal without digits")), nil),
                    s(:if,
                      s(:lvar, :non_digit),
                      s(:send,
                        s(:const, nil, :RubyLex), :fail,
                        s(:const, nil, :SyntaxError),
                        s(:dstr,
                          s(:str, "trailing `"),
                          s(:begin,
                            s(:lvar, :non_digit)),
                          s(:str, "' in number"))), nil),
                    s(:break)))),
              s(:return,
                s(:send, nil, :Token,
                  s(:const, nil, :TkINTEGER)))), nil),
          s(:lvasgn, :type,
            s(:const, nil, :TkINTEGER)),
          s(:lvasgn, :allow_point,
            s(:true)),
          s(:lvasgn, :allow_e,
            s(:true)),
          s(:lvasgn, :non_digit,
            s(:false)),
          s(:while,
            s(:lvasgn, :ch,
              s(:send, nil, :getc)),
            s(:case,
              s(:lvar, :ch),
              s(:when,
                s(:regexp,
                  s(:str, "[0-9]"),
                  s(:regopt)),
                s(:lvasgn, :non_digit,
                  s(:false))),
              s(:when,
                s(:str, "_"),
                s(:lvasgn, :non_digit,
                  s(:lvar, :ch))),
              s(:when,
                s(:and,
                  s(:lvar, :allow_point),
                  s(:str, ".")),
                s(:begin,
                  s(:if,
                    s(:lvar, :non_digit),
                    s(:send,
                      s(:const, nil, :RubyLex), :fail,
                      s(:const, nil, :SyntaxError),
                      s(:dstr,
                        s(:str, "trailing `"),
                        s(:begin,
                          s(:lvar, :non_digit)),
                        s(:str, "' in number"))), nil),
                  s(:lvasgn, :type,
                    s(:const, nil, :TkFLOAT)),
                  s(:if,
                    s(:send,
                      s(:send, nil, :peek,
                        s(:int, 0)), :!~,
                      s(:regexp,
                        s(:str, "[0-9]"),
                        s(:regopt))),
                    s(:begin,
                      s(:lvasgn, :type,
                        s(:const, nil, :TkINTEGER)),
                      s(:send, nil, :ungetc),
                      s(:break)), nil),
                  s(:lvasgn, :allow_point,
                    s(:false)))),
              s(:when,
                s(:and,
                  s(:lvar, :allow_e),
                  s(:str, "e")),
                s(:and,
                  s(:lvar, :allow_e),
                  s(:str, "E")),
                s(:begin,
                  s(:if,
                    s(:lvar, :non_digit),
                    s(:send,
                      s(:const, nil, :RubyLex), :fail,
                      s(:const, nil, :SyntaxError),
                      s(:dstr,
                        s(:str, "trailing `"),
                        s(:begin,
                          s(:lvar, :non_digit)),
                        s(:str, "' in number"))), nil),
                  s(:lvasgn, :type,
                    s(:const, nil, :TkFLOAT)),
                  s(:if,
                    s(:send,
                      s(:send, nil, :peek,
                        s(:int, 0)), :=~,
                      s(:regexp,
                        s(:str, "[+-]"),
                        s(:regopt))),
                    s(:send, nil, :getc), nil),
                  s(:lvasgn, :allow_e,
                    s(:false)),
                  s(:lvasgn, :allow_point,
                    s(:false)),
                  s(:lvasgn, :non_digit,
                    s(:lvar, :ch)))),
              s(:begin,
                s(:if,
                  s(:lvar, :non_digit),
                  s(:send,
                    s(:const, nil, :RubyLex), :fail,
                    s(:const, nil, :SyntaxError),
                    s(:dstr,
                      s(:str, "trailing `"),
                      s(:begin,
                        s(:lvar, :non_digit)),
                      s(:str, "' in number"))), nil),
                s(:send, nil, :ungetc),
                s(:break)))),
          s(:send, nil, :Token,
            s(:lvar, :type)))),
      s(:def, :identify_string,
        s(:args,
          s(:arg, :ltype),
          s(:optarg, :quoted,
            s(:lvar, :ltype))),
        s(:begin,
          s(:ivasgn, :@ltype,
            s(:lvar, :ltype)),
          s(:ivasgn, :@quoted,
            s(:lvar, :quoted)),
          s(:lvasgn, :subtype,
            s(:nil)),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :nest,
                  s(:int, 0)),
                s(:while,
                  s(:lvasgn, :ch,
                    s(:send, nil, :getc)),
                  s(:begin,
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:ivar, :@quoted), :==,
                          s(:lvar, :ch)),
                        s(:send,
                          s(:lvar, :nest), :==,
                          s(:int, 0))),
                      s(:break),
                      s(:if,
                        s(:and,
                          s(:and,
                            s(:send,
                              s(:ivar, :@ltype), :!=,
                              s(:str, "'")),
                            s(:send,
                              s(:lvar, :ch), :==,
                              s(:str, "#"))),
                          s(:send,
                            s(:send, nil, :peek,
                              s(:int, 0)), :==,
                            s(:str, "{"))),
                        s(:send, nil, :identify_string_dvar),
                        s(:if,
                          s(:and,
                            s(:and,
                              s(:and,
                                s(:send,
                                  s(:ivar, :@ltype), :!=,
                                  s(:str, "'")),
                                s(:send,
                                  s(:ivar, :@ltype), :!=,
                                  s(:str, "]"))),
                              s(:send,
                                s(:ivar, :@ltype), :!=,
                                s(:str, ":"))),
                            s(:send,
                              s(:lvar, :ch), :==,
                              s(:str, "#"))),
                          s(:lvasgn, :subtype,
                            s(:true)),
                          s(:if,
                            s(:and,
                              s(:send,
                                s(:lvar, :ch), :==,
                                s(:str, "\\")),
                              s(:send,
                                s(:ivar, :@ltype), :==,
                                s(:str, "'"))),
                            s(:case,
                              s(:lvasgn, :ch,
                                s(:send, nil, :getc)),
                              s(:when,
                                s(:str, "\\"),
                                s(:str, "\n"),
                                s(:str, "'"), nil),
                              s(:send, nil, :ungetc)),
                            s(:if,
                              s(:send,
                                s(:lvar, :ch), :==,
                                s(:str, "\\")),
                              s(:send, nil, :read_escape), nil))))),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:const, nil, :PERCENT_PAREN), :values), :include?,
                        s(:ivar, :@quoted)),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:const, nil, :PERCENT_PAREN), :[],
                            s(:lvar, :ch)), :==,
                          s(:ivar, :@quoted)),
                        s(:op_asgn,
                          s(:lvasgn, :nest), :+,
                          s(:int, 1)),
                        s(:if,
                          s(:send,
                            s(:lvar, :ch), :==,
                            s(:ivar, :@quoted)),
                          s(:op_asgn,
                            s(:lvasgn, :nest), :-,
                            s(:int, 1)), nil)), nil))),
                s(:if,
                  s(:send,
                    s(:ivar, :@ltype), :==,
                    s(:str, "/")),
                  s(:while,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "[imxoesun]"),
                        s(:regopt)),
                      s(:send, nil, :peek,
                        s(:int, 0))),
                    s(:send, nil, :getc)), nil),
                s(:if,
                  s(:lvar, :subtype),
                  s(:send, nil, :Token,
                    s(:send,
                      s(:const, nil, :DLtype2Token), :[],
                      s(:lvar, :ltype))),
                  s(:send, nil, :Token,
                    s(:send,
                      s(:const, nil, :Ltype2Token), :[],
                      s(:lvar, :ltype))))),
              s(:begin,
                s(:ivasgn, :@ltype,
                  s(:nil)),
                s(:ivasgn, :@quoted,
                  s(:nil)),
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_END))))))),
      s(:def, :identify_string_dvar,
        s(:args),
        s(:kwbegin,
          s(:ensure,
            s(:begin,
              s(:send, nil, :getc),
              s(:lvasgn, :reserve_continue,
                s(:ivar, :@continue)),
              s(:lvasgn, :reserve_ltype,
                s(:ivar, :@ltype)),
              s(:lvasgn, :reserve_indent,
                s(:ivar, :@indent)),
              s(:lvasgn, :reserve_indent_stack,
                s(:ivar, :@indent_stack)),
              s(:lvasgn, :reserve_state,
                s(:ivar, :@lex_state)),
              s(:lvasgn, :reserve_quoted,
                s(:ivar, :@quoted)),
              s(:ivasgn, :@ltype,
                s(:nil)),
              s(:ivasgn, :@quoted,
                s(:nil)),
              s(:ivasgn, :@indent,
                s(:int, 0)),
              s(:ivasgn, :@indent_stack,
                s(:array)),
              s(:ivasgn, :@lex_state,
                s(:const, nil, :EXPR_BEG)),
              s(:block,
                s(:send, nil, :loop),
                s(:args),
                s(:begin,
                  s(:ivasgn, :@continue,
                    s(:false)),
                  s(:send, nil, :prompt),
                  s(:lvasgn, :tk,
                    s(:send, nil, :token)),
                  s(:if,
                    s(:or,
                      s(:or,
                        s(:ivar, :@ltype),
                        s(:ivar, :@continue)),
                      s(:send,
                        s(:ivar, :@indent), :>=,
                        s(:int, 0))),
                    s(:next), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :tk), :kind_of?,
                      s(:const, nil, :TkRBRACE)),
                    s(:break), nil)))),
            s(:begin,
              s(:ivasgn, :@continue,
                s(:lvar, :reserve_continue)),
              s(:ivasgn, :@ltype,
                s(:lvar, :reserve_ltype)),
              s(:ivasgn, :@indent,
                s(:lvar, :reserve_indent)),
              s(:ivasgn, :@indent_stack,
                s(:lvar, :reserve_indent_stack)),
              s(:ivasgn, :@lex_state,
                s(:lvar, :reserve_state)),
              s(:ivasgn, :@quoted,
                s(:lvar, :reserve_quoted)))))),
      s(:def, :identify_comment,
        s(:args),
        s(:begin,
          s(:ivasgn, :@ltype,
            s(:str, "#")),
          s(:while,
            s(:lvasgn, :ch,
              s(:send, nil, :getc)),
            s(:if,
              s(:send,
                s(:lvar, :ch), :==,
                s(:str, "\n")),
              s(:begin,
                s(:ivasgn, :@ltype,
                  s(:nil)),
                s(:send, nil, :ungetc),
                s(:break)), nil)),
          s(:return,
            s(:send, nil, :Token,
              s(:const, nil, :TkCOMMENT))))),
      s(:def, :read_escape,
        s(:args),
        s(:case,
          s(:lvasgn, :ch,
            s(:send, nil, :getc)),
          s(:when,
            s(:str, "\n"),
            s(:str, "\r"),
            s(:str, "\f"), nil),
          s(:when,
            s(:str, "\\"),
            s(:str, "n"),
            s(:str, "t"),
            s(:str, "r"),
            s(:str, "f"),
            s(:str, "v"),
            s(:str, "a"),
            s(:str, "e"),
            s(:str, "b"),
            s(:str, "s"), nil),
          s(:when,
            s(:regexp,
              s(:str, "[0-7]"),
              s(:regopt)),
            s(:begin,
              s(:send, nil, :ungetc,
                s(:lvar, :ch)),
              s(:block,
                s(:send,
                  s(:int, 3), :times),
                s(:args),
                s(:case,
                  s(:lvasgn, :ch,
                    s(:send, nil, :getc)),
                  s(:when,
                    s(:regexp,
                      s(:str, "[0-7]"),
                      s(:regopt)), nil),
                  s(:when,
                    s(:nil),
                    s(:break)),
                  s(:begin,
                    s(:send, nil, :ungetc),
                    s(:break)))))),
          s(:when,
            s(:str, "x"),
            s(:block,
              s(:send,
                s(:int, 2), :times),
              s(:args),
              s(:case,
                s(:lvasgn, :ch,
                  s(:send, nil, :getc)),
                s(:when,
                  s(:regexp,
                    s(:str, "[0-9a-fA-F]"),
                    s(:regopt)), nil),
                s(:when,
                  s(:nil),
                  s(:break)),
                s(:begin,
                  s(:send, nil, :ungetc),
                  s(:break))))),
          s(:when,
            s(:str, "M"),
            s(:if,
              s(:send,
                s(:begin,
                  s(:lvasgn, :ch,
                    s(:send, nil, :getc))), :!=,
                s(:str, "-")),
              s(:send, nil, :ungetc),
              s(:if,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :ch,
                      s(:send, nil, :getc))), :==,
                  s(:str, "\\")),
                s(:send, nil, :read_escape), nil))),
          s(:when,
            s(:str, "C"),
            s(:str, "c"),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :ch), :==,
                  s(:str, "C")),
                s(:send,
                  s(:begin,
                    s(:lvasgn, :ch,
                      s(:send, nil, :getc))), :!=,
                  s(:str, "-"))),
              s(:send, nil, :ungetc),
              s(:if,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :ch,
                      s(:send, nil, :getc))), :==,
                  s(:str, "\\")),
                s(:send, nil, :read_escape), nil))), nil)))))
