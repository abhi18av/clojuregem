s(:module,
  s(:const, nil, :IRB),
  s(:begin,
    s(:defs,
      s(:const, nil, :IRB), :Inspector,
      s(:args,
        s(:arg, :inspect),
        s(:optarg, :init,
          s(:nil))),
      s(:send,
        s(:const, nil, :Inspector), :new,
        s(:lvar, :inspect),
        s(:lvar, :init))),
    s(:class,
      s(:const, nil, :Inspector), nil,
      s(:begin,
        s(:casgn, nil, :INSPECTORS,
          s(:hash)),
        s(:defs,
          s(:self), :keys_with_inspector,
          s(:args,
            s(:arg, :inspector)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :INSPECTORS), :select),
                s(:args,
                  s(:arg, :k),
                  s(:arg, :v)),
                s(:send,
                  s(:lvar, :v), :==,
                  s(:lvar, :inspector))), :collect),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:lvar, :k))),
        s(:defs,
          s(:self), :def_inspector,
          s(:args,
            s(:arg, :key),
            s(:optarg, :arg,
              s(:nil)),
            s(:blockarg, :block)),
          s(:begin,
            s(:if,
              s(:send, nil, :block_given?),
              s(:lvasgn, :inspector,
                s(:send,
                  s(:const, nil, :IRB), :Inspector,
                  s(:lvar, :block),
                  s(:lvar, :arg))),
              s(:lvasgn, :inspector,
                s(:lvar, :arg))),
            s(:case,
              s(:lvar, :key),
              s(:when,
                s(:const, nil, :Array),
                s(:for,
                  s(:lvasgn, :k),
                  s(:lvar, :key),
                  s(:send, nil, :def_inspector,
                    s(:lvar, :k),
                    s(:lvar, :inspector)))),
              s(:when,
                s(:const, nil, :Symbol),
                s(:begin,
                  s(:send,
                    s(:const, nil, :INSPECTORS), :[]=,
                    s(:lvar, :key),
                    s(:lvar, :inspector)),
                  s(:send,
                    s(:const, nil, :INSPECTORS), :[]=,
                    s(:send,
                      s(:lvar, :key), :to_s),
                    s(:lvar, :inspector)))),
              s(:when,
                s(:const, nil, :String),
                s(:begin,
                  s(:send,
                    s(:const, nil, :INSPECTORS), :[]=,
                    s(:lvar, :key),
                    s(:lvar, :inspector)),
                  s(:send,
                    s(:const, nil, :INSPECTORS), :[]=,
                    s(:send,
                      s(:lvar, :key), :intern),
                    s(:lvar, :inspector)))),
              s(:send,
                s(:const, nil, :INSPECTORS), :[]=,
                s(:lvar, :key),
                s(:lvar, :inspector))))),
        s(:def, :initialize,
          s(:args,
            s(:arg, :inspect_proc),
            s(:optarg, :init_proc,
              s(:nil))),
          s(:begin,
            s(:ivasgn, :@init,
              s(:lvar, :init_proc)),
            s(:ivasgn, :@inspect,
              s(:lvar, :inspect_proc)))),
        s(:def, :init,
          s(:args),
          s(:if,
            s(:ivar, :@init),
            s(:send,
              s(:ivar, :@init), :call), nil)),
        s(:def, :inspect_value,
          s(:args,
            s(:arg, :v)),
          s(:send,
            s(:ivar, :@inspect), :call,
            s(:lvar, :v))))),
    s(:block,
      s(:send,
        s(:const, nil, :Inspector), :def_inspector,
        s(:array,
          s(:false),
          s(:sym, :to_s),
          s(:sym, :raw))),
      s(:args,
        s(:arg, :v)),
      s(:send,
        s(:lvar, :v), :to_s)),
    s(:block,
      s(:send,
        s(:const, nil, :Inspector), :def_inspector,
        s(:array,
          s(:true),
          s(:sym, :p),
          s(:sym, :inspect))),
      s(:args,
        s(:arg, :v)),
      s(:kwbegin,
        s(:rescue,
          s(:send,
            s(:lvar, :v), :inspect),
          s(:resbody,
            s(:array,
              s(:const, nil, :NoMethodError)), nil,
            s(:send, nil, :puts,
              s(:str, "(Object doesn't support #inspect)"))), nil))),
    s(:block,
      s(:send,
        s(:const, nil, :Inspector), :def_inspector,
        s(:array,
          s(:sym, :pp),
          s(:sym, :pretty_inspect)),
        s(:block,
          s(:send, nil, :proc),
          s(:args),
          s(:send, nil, :require,
            s(:str, "pp")))),
      s(:args,
        s(:arg, :v)),
      s(:send,
        s(:send,
          s(:lvar, :v), :pretty_inspect), :chomp)),
    s(:block,
      s(:send,
        s(:const, nil, :Inspector), :def_inspector,
        s(:array,
          s(:sym, :yaml),
          s(:sym, :YAML)),
        s(:block,
          s(:send, nil, :proc),
          s(:args),
          s(:send, nil, :require,
            s(:str, "yaml")))),
      s(:args,
        s(:arg, :v)),
      s(:kwbegin,
        s(:rescue,
          s(:send,
            s(:const, nil, :YAML), :dump,
            s(:lvar, :v)),
          s(:resbody, nil, nil,
            s(:begin,
              s(:send, nil, :puts,
                s(:str, "(can't dump yaml. use inspect)")),
              s(:send,
                s(:lvar, :v), :inspect))), nil))),
    s(:block,
      s(:send,
        s(:const, nil, :Inspector), :def_inspector,
        s(:array,
          s(:sym, :marshal),
          s(:sym, :Marshal),
          s(:sym, :MARSHAL),
          s(:const, nil, :Marshal))),
      s(:args,
        s(:arg, :v)),
      s(:send,
        s(:const, nil, :Marshal), :dump,
        s(:lvar, :v)))))
