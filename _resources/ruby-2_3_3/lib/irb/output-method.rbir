s(:begin,
  s(:send, nil, :require,
    s(:str, "e2mmap")),
  s(:module,
    s(:const, nil, :IRB),
    s(:begin,
      s(:class,
        s(:const, nil, :OutputMethod), nil,
        s(:begin,
          s(:send, nil, :extend,
            s(:const, nil, :Exception2MessageMapper)),
          s(:send, nil, :def_exception,
            s(:sym, :NotImplementedError),
            s(:str, "Need to define `%s'")),
          s(:def, :print,
            s(:args,
              s(:restarg, :opts)),
            s(:send,
              s(:const, nil, :OutputMethod), :Raise,
              s(:const, nil, :NotImplementedError),
              s(:str, "print"))),
          s(:def, :printn,
            s(:args,
              s(:restarg, :opts)),
            s(:send, nil, :print,
              s(:send,
                s(:lvar, :opts), :join,
                s(:str, " ")),
              s(:str, "\n"))),
          s(:def, :printf,
            s(:args,
              s(:arg, :format),
              s(:restarg, :opts)),
            s(:begin,
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "(%*)%I"),
                    s(:regopt)),
                  s(:lvar, :format)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :format),
                    s(:lvasgn, :opts)),
                  s(:send, nil, :parse_printf_format,
                    s(:lvar, :format),
                    s(:lvar, :opts))), nil),
              s(:send, nil, :print,
                s(:send, nil, :sprintf,
                  s(:lvar, :format),
                  s(:splat,
                    s(:lvar, :opts)))))),
          s(:def, :parse_printf_format,
            s(:args,
              s(:arg, :format),
              s(:arg, :opts)),
            s(:if,
              s(:send,
                s(:send,
                  s(:send,
                    s(:nth_ref, 1), :size), :%,
                  s(:int, 2)), :==,
                s(:int, 1)),
              s(:return,
                s(:lvar, :format),
                s(:lvar, :opts)), nil)),
          s(:def, :puts,
            s(:args,
              s(:restarg, :objs)),
            s(:for,
              s(:lvasgn, :obj),
              s(:lvar, :objs),
              s(:begin,
                s(:send, nil, :print,
                  s(:splat,
                    s(:lvar, :obj))),
                s(:send, nil, :print,
                  s(:str, "\n"))))),
          s(:def, :pp,
            s(:args,
              s(:restarg, :objs)),
            s(:send, nil, :puts,
              s(:splat,
                s(:block,
                  s(:send,
                    s(:lvar, :objs), :collect),
                  s(:args,
                    s(:arg, :obj)),
                  s(:send,
                    s(:lvar, :obj), :inspect))))),
          s(:def, :ppx,
            s(:args,
              s(:arg, :prefix),
              s(:restarg, :objs)),
            s(:send, nil, :puts,
              s(:splat,
                s(:block,
                  s(:send,
                    s(:lvar, :objs), :collect),
                  s(:args,
                    s(:arg, :obj)),
                  s(:send,
                    s(:lvar, :prefix), :+,
                    s(:send,
                      s(:lvar, :obj), :inspect)))))))),
      s(:class,
        s(:const, nil, :StdioOutputMethod),
        s(:const, nil, :OutputMethod),
        s(:def, :print,
          s(:args,
            s(:restarg, :opts)),
          s(:send,
            s(:const, nil, :STDOUT), :print,
            s(:splat,
              s(:lvar, :opts))))))))
