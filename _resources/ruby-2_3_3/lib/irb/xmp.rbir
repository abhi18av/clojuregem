s(:begin,
  s(:send, nil, :require,
    s(:str, "irb")),
  s(:send, nil, :require,
    s(:str, "irb/frame")),
  s(:class,
    s(:const, nil, :XMP), nil,
    s(:begin,
      s(:def, :initialize,
        s(:args,
          s(:optarg, :bind,
            s(:nil))),
        s(:begin,
          s(:send,
            s(:const, nil, :IRB), :init_config,
            s(:nil)),
          s(:send,
            s(:send,
              s(:const, nil, :IRB), :conf), :[]=,
            s(:sym, :PROMPT_MODE),
            s(:sym, :XMP)),
          s(:if,
            s(:lvar, :bind), nil,
            s(:lvasgn, :bind,
              s(:send,
                s(:const,
                  s(:const, nil, :IRB), :Frame), :top,
                s(:int, 1)))),
          s(:lvasgn, :ws,
            s(:send,
              s(:const,
                s(:const, nil, :IRB), :WorkSpace), :new,
              s(:lvar, :bind))),
          s(:ivasgn, :@io,
            s(:send,
              s(:const, nil, :StringInputMethod), :new)),
          s(:ivasgn, :@irb,
            s(:send,
              s(:const,
                s(:const, nil, :IRB), :Irb), :new,
              s(:lvar, :ws),
              s(:ivar, :@io))),
          s(:send,
            s(:send,
              s(:ivar, :@irb), :context), :ignore_sigint=,
            s(:false)),
          s(:send,
            s(:send,
              s(:const, nil, :IRB), :conf), :[]=,
            s(:sym, :MAIN_CONTEXT),
            s(:send,
              s(:ivar, :@irb), :context)))),
      s(:def, :puts,
        s(:args,
          s(:arg, :exps)),
        s(:begin,
          s(:send,
            s(:ivar, :@io), :puts,
            s(:lvar, :exps)),
          s(:if,
            s(:send,
              s(:send,
                s(:ivar, :@irb), :context), :ignore_sigint),
            s(:kwbegin,
              s(:ensure,
                s(:begin,
                  s(:lvasgn, :trap_proc_b,
                    s(:block,
                      s(:send, nil, :trap,
                        s(:str, "SIGINT")),
                      s(:args),
                      s(:send,
                        s(:ivar, :@irb), :signal_handle))),
                  s(:block,
                    s(:send, nil, :catch,
                      s(:sym, :IRB_EXIT)),
                    s(:args),
                    s(:send,
                      s(:ivar, :@irb), :eval_input))),
                s(:send, nil, :trap,
                  s(:str, "SIGINT"),
                  s(:lvar, :trap_proc_b)))),
            s(:block,
              s(:send, nil, :catch,
                s(:sym, :IRB_EXIT)),
              s(:args),
              s(:send,
                s(:ivar, :@irb), :eval_input))))),
      s(:class,
        s(:const, nil, :StringInputMethod),
        s(:const,
          s(:const, nil, :IRB), :InputMethod),
        s(:begin,
          s(:def, :initialize,
            s(:args),
            s(:begin,
              s(:zsuper),
              s(:ivasgn, :@exps,
                s(:array)))),
          s(:def, :eof?,
            s(:args),
            s(:send,
              s(:ivar, :@exps), :empty?)),
          s(:def, :gets,
            s(:args),
            s(:begin,
              s(:while,
                s(:lvasgn, :l,
                  s(:send,
                    s(:ivar, :@exps), :shift)),
                s(:begin,
                  s(:if,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "^\\s+$"),
                        s(:regopt)),
                      s(:lvar, :l)),
                    s(:next), nil),
                  s(:send,
                    s(:lvar, :l), :concat,
                    s(:str, "\n")),
                  s(:send, nil, :print,
                    s(:ivar, :@prompt),
                    s(:lvar, :l)),
                  s(:break))),
              s(:lvar, :l))),
          s(:def, :puts,
            s(:args,
              s(:arg, :exps)),
            s(:begin,
              s(:if,
                s(:and,
                  s(:ivar, :@encoding),
                  s(:send,
                    s(:send,
                      s(:lvar, :exps), :encoding), :!=,
                    s(:ivar, :@encoding))),
                s(:begin,
                  s(:lvasgn, :enc,
                    s(:send,
                      s(:const, nil, :Encoding), :compatible?,
                      s(:send,
                        s(:ivar, :@exps), :join,
                        s(:str, "\n")),
                      s(:lvar, :exps))),
                  s(:if,
                    s(:send,
                      s(:lvar, :enc), :nil?),
                    s(:send, nil, :raise,
                      s(:const,
                        s(:const, nil, :Encoding), :CompatibilityError),
                      s(:str, "Encoding in which the passed expression is encoded is not compatible to the preceding's one")),
                    s(:ivasgn, :@encoding,
                      s(:lvar, :enc)))),
                s(:ivasgn, :@encoding,
                  s(:send,
                    s(:lvar, :exps), :encoding))),
              s(:send,
                s(:ivar, :@exps), :concat,
                s(:send,
                  s(:lvar, :exps), :split,
                  s(:regexp,
                    s(:str, "\\n"),
                    s(:regopt)))))),
          s(:send, nil, :attr_reader,
            s(:sym, :encoding)))))),
  s(:def, :xmp,
    s(:args,
      s(:arg, :exps),
      s(:optarg, :bind,
        s(:nil))),
    s(:begin,
      s(:if,
        s(:lvar, :bind), nil,
        s(:lvasgn, :bind,
          s(:send,
            s(:const,
              s(:const, nil, :IRB), :Frame), :top,
            s(:int, 1)))),
      s(:lvasgn, :xmp,
        s(:send,
          s(:const, nil, :XMP), :new,
          s(:lvar, :bind))),
      s(:send,
        s(:lvar, :xmp), :puts,
        s(:lvar, :exps)),
      s(:lvar, :xmp))))
