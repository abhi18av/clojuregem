s(:module,
  s(:const, nil, :RubyToken),
  s(:begin,
    s(:casgn, nil, :EXPR_BEG,
      s(:sym, :EXPR_BEG)),
    s(:casgn, nil, :EXPR_MID,
      s(:sym, :EXPR_MID)),
    s(:casgn, nil, :EXPR_END,
      s(:sym, :EXPR_END)),
    s(:casgn, nil, :EXPR_ARG,
      s(:sym, :EXPR_ARG)),
    s(:casgn, nil, :EXPR_FNAME,
      s(:sym, :EXPR_FNAME)),
    s(:casgn, nil, :EXPR_DOT,
      s(:sym, :EXPR_DOT)),
    s(:casgn, nil, :EXPR_CLASS,
      s(:sym, :EXPR_CLASS)),
    s(:class,
      s(:const, nil, :Token), nil,
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:arg, :seek),
            s(:arg, :line_no),
            s(:arg, :char_no)),
          s(:begin,
            s(:ivasgn, :@seek,
              s(:lvar, :seek)),
            s(:ivasgn, :@line_no,
              s(:lvar, :line_no)),
            s(:ivasgn, :@char_no,
              s(:lvar, :char_no)))),
        s(:send, nil, :attr_reader,
          s(:sym, :seek),
          s(:sym, :line_no),
          s(:sym, :char_no)))),
    s(:class,
      s(:const, nil, :TkNode),
      s(:const, nil, :Token),
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:arg, :seek),
            s(:arg, :line_no),
            s(:arg, :char_no)),
          s(:zsuper)),
        s(:send, nil, :attr_reader,
          s(:sym, :node)))),
    s(:class,
      s(:const, nil, :TkId),
      s(:const, nil, :Token),
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:arg, :seek),
            s(:arg, :line_no),
            s(:arg, :char_no),
            s(:arg, :name)),
          s(:begin,
            s(:super,
              s(:lvar, :seek),
              s(:lvar, :line_no),
              s(:lvar, :char_no)),
            s(:ivasgn, :@name,
              s(:lvar, :name)))),
        s(:send, nil, :attr_reader,
          s(:sym, :name)))),
    s(:class,
      s(:const, nil, :TkVal),
      s(:const, nil, :Token),
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:arg, :seek),
            s(:arg, :line_no),
            s(:arg, :char_no),
            s(:optarg, :value,
              s(:nil))),
          s(:begin,
            s(:super,
              s(:lvar, :seek),
              s(:lvar, :line_no),
              s(:lvar, :char_no)),
            s(:ivasgn, :@value,
              s(:lvar, :value)))),
        s(:send, nil, :attr_reader,
          s(:sym, :value)))),
    s(:class,
      s(:const, nil, :TkOp),
      s(:const, nil, :Token),
      s(:send, nil, :attr_accessor,
        s(:sym, :name))),
    s(:class,
      s(:const, nil, :TkOPASGN),
      s(:const, nil, :TkOp),
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:arg, :seek),
            s(:arg, :line_no),
            s(:arg, :char_no),
            s(:arg, :op)),
          s(:begin,
            s(:super,
              s(:lvar, :seek),
              s(:lvar, :line_no),
              s(:lvar, :char_no)),
            s(:if,
              s(:send,
                s(:lvar, :op), :kind_of?,
                s(:const, nil, :Symbol)), nil,
              s(:lvasgn, :op,
                s(:send,
                  s(:send,
                    s(:const, nil, :TkReading2Token), :[],
                    s(:lvar, :op)), :[],
                  s(:int, 0)))),
            s(:ivasgn, :@op,
              s(:lvar, :op)))),
        s(:send, nil, :attr_reader,
          s(:sym, :op)))),
    s(:class,
      s(:const, nil, :TkUnknownChar),
      s(:const, nil, :Token),
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:arg, :seek),
            s(:arg, :line_no),
            s(:arg, :char_no),
            s(:arg, :id)),
          s(:begin,
            s(:super,
              s(:lvar, :seek),
              s(:lvar, :line_no),
              s(:lvar, :char_no)),
            s(:ivasgn, :@name,
              s(:send, nil, :name)))),
        s(:send, nil, :attr_reader,
          s(:sym, :name)))),
    s(:class,
      s(:const, nil, :TkError),
      s(:const, nil, :Token), nil),
    s(:def, :Token,
      s(:args,
        s(:arg, :token),
        s(:optarg, :value,
          s(:nil))),
      s(:case,
        s(:lvar, :token),
        s(:when,
          s(:const, nil, :String),
          s(:begin,
            s(:if,
              s(:send,
                s(:begin,
                  s(:lvasgn, :tk,
                    s(:send,
                      s(:const, nil, :TkReading2Token), :[],
                      s(:lvar, :token)))), :nil?),
              s(:send,
                s(:const, nil, :IRB), :fail,
                s(:const, nil, :TkReading2TokenNoKey),
                s(:lvar, :token)), nil),
            s(:lvasgn, :tk,
              s(:send, nil, :Token,
                s(:send,
                  s(:lvar, :tk), :[],
                  s(:int, 0)),
                s(:lvar, :value))),
            s(:if,
              s(:send,
                s(:lvar, :tk), :kind_of?,
                s(:const, nil, :TkOp)),
              s(:send,
                s(:lvar, :tk), :name=,
                s(:lvar, :token)), nil),
            s(:return,
              s(:lvar, :tk)))),
        s(:when,
          s(:const, nil, :Symbol),
          s(:begin,
            s(:if,
              s(:send,
                s(:begin,
                  s(:lvasgn, :tk,
                    s(:send,
                      s(:const, nil, :TkSymbol2Token), :[],
                      s(:lvar, :token)))), :nil?),
              s(:send,
                s(:const, nil, :IRB), :fail,
                s(:const, nil, :TkSymbol2TokenNoKey),
                s(:lvar, :token)), nil),
            s(:return,
              s(:send, nil, :Token,
                s(:send,
                  s(:lvar, :tk), :[],
                  s(:int, 0)),
                s(:lvar, :value))))),
        s(:if,
          s(:send,
            s(:begin,
              s(:send,
                s(:send,
                  s(:lvar, :token), :ancestors), :&,
                s(:array,
                  s(:const, nil, :TkId),
                  s(:const, nil, :TkVal),
                  s(:const, nil, :TkOPASGN),
                  s(:const, nil, :TkUnknownChar)))), :empty?),
          s(:send,
            s(:lvar, :token), :new,
            s(:ivar, :@prev_seek),
            s(:ivar, :@prev_line_no),
            s(:ivar, :@prev_char_no)),
          s(:send,
            s(:lvar, :token), :new,
            s(:ivar, :@prev_seek),
            s(:ivar, :@prev_line_no),
            s(:ivar, :@prev_char_no),
            s(:lvar, :value))))),
    s(:casgn, nil, :TokenDefinitions,
      s(:array,
        s(:array,
          s(:sym, :TkCLASS),
          s(:const, nil, :TkId),
          s(:str, "class"),
          s(:const, nil, :EXPR_CLASS)),
        s(:array,
          s(:sym, :TkMODULE),
          s(:const, nil, :TkId),
          s(:str, "module"),
          s(:const, nil, :EXPR_BEG)),
        s(:array,
          s(:sym, :TkDEF),
          s(:const, nil, :TkId),
          s(:str, "def"),
          s(:const, nil, :EXPR_FNAME)),
        s(:array,
          s(:sym, :TkUNDEF),
          s(:const, nil, :TkId),
          s(:str, "undef"),
          s(:const, nil, :EXPR_FNAME)),
        s(:array,
          s(:sym, :TkBEGIN),
          s(:const, nil, :TkId),
          s(:str, "begin"),
          s(:const, nil, :EXPR_BEG)),
        s(:array,
          s(:sym, :TkRESCUE),
          s(:const, nil, :TkId),
          s(:str, "rescue"),
          s(:const, nil, :EXPR_MID)),
        s(:array,
          s(:sym, :TkENSURE),
          s(:const, nil, :TkId),
          s(:str, "ensure"),
          s(:const, nil, :EXPR_BEG)),
        s(:array,
          s(:sym, :TkEND),
          s(:const, nil, :TkId),
          s(:str, "end"),
          s(:const, nil, :EXPR_END)),
        s(:array,
          s(:sym, :TkIF),
          s(:const, nil, :TkId),
          s(:str, "if"),
          s(:const, nil, :EXPR_BEG),
          s(:sym, :TkIF_MOD)),
        s(:array,
          s(:sym, :TkUNLESS),
          s(:const, nil, :TkId),
          s(:str, "unless"),
          s(:const, nil, :EXPR_BEG),
          s(:sym, :TkUNLESS_MOD)),
        s(:array,
          s(:sym, :TkTHEN),
          s(:const, nil, :TkId),
          s(:str, "then"),
          s(:const, nil, :EXPR_BEG)),
        s(:array,
          s(:sym, :TkELSIF),
          s(:const, nil, :TkId),
          s(:str, "elsif"),
          s(:const, nil, :EXPR_BEG)),
        s(:array,
          s(:sym, :TkELSE),
          s(:const, nil, :TkId),
          s(:str, "else"),
          s(:const, nil, :EXPR_BEG)),
        s(:array,
          s(:sym, :TkCASE),
          s(:const, nil, :TkId),
          s(:str, "case"),
          s(:const, nil, :EXPR_BEG)),
        s(:array,
          s(:sym, :TkWHEN),
          s(:const, nil, :TkId),
          s(:str, "when"),
          s(:const, nil, :EXPR_BEG)),
        s(:array,
          s(:sym, :TkWHILE),
          s(:const, nil, :TkId),
          s(:str, "while"),
          s(:const, nil, :EXPR_BEG),
          s(:sym, :TkWHILE_MOD)),
        s(:array,
          s(:sym, :TkUNTIL),
          s(:const, nil, :TkId),
          s(:str, "until"),
          s(:const, nil, :EXPR_BEG),
          s(:sym, :TkUNTIL_MOD)),
        s(:array,
          s(:sym, :TkFOR),
          s(:const, nil, :TkId),
          s(:str, "for"),
          s(:const, nil, :EXPR_BEG)),
        s(:array,
          s(:sym, :TkBREAK),
          s(:const, nil, :TkId),
          s(:str, "break"),
          s(:const, nil, :EXPR_END)),
        s(:array,
          s(:sym, :TkNEXT),
          s(:const, nil, :TkId),
          s(:str, "next"),
          s(:const, nil, :EXPR_END)),
        s(:array,
          s(:sym, :TkREDO),
          s(:const, nil, :TkId),
          s(:str, "redo"),
          s(:const, nil, :EXPR_END)),
        s(:array,
          s(:sym, :TkRETRY),
          s(:const, nil, :TkId),
          s(:str, "retry"),
          s(:const, nil, :EXPR_END)),
        s(:array,
          s(:sym, :TkIN),
          s(:const, nil, :TkId),
          s(:str, "in"),
          s(:const, nil, :EXPR_BEG)),
        s(:array,
          s(:sym, :TkDO),
          s(:const, nil, :TkId),
          s(:str, "do"),
          s(:const, nil, :EXPR_BEG)),
        s(:array,
          s(:sym, :TkRETURN),
          s(:const, nil, :TkId),
          s(:str, "return"),
          s(:const, nil, :EXPR_MID)),
        s(:array,
          s(:sym, :TkYIELD),
          s(:const, nil, :TkId),
          s(:str, "yield"),
          s(:const, nil, :EXPR_END)),
        s(:array,
          s(:sym, :TkSUPER),
          s(:const, nil, :TkId),
          s(:str, "super"),
          s(:const, nil, :EXPR_END)),
        s(:array,
          s(:sym, :TkSELF),
          s(:const, nil, :TkId),
          s(:str, "self"),
          s(:const, nil, :EXPR_END)),
        s(:array,
          s(:sym, :TkNIL),
          s(:const, nil, :TkId),
          s(:str, "nil"),
          s(:const, nil, :EXPR_END)),
        s(:array,
          s(:sym, :TkTRUE),
          s(:const, nil, :TkId),
          s(:str, "true"),
          s(:const, nil, :EXPR_END)),
        s(:array,
          s(:sym, :TkFALSE),
          s(:const, nil, :TkId),
          s(:str, "false"),
          s(:const, nil, :EXPR_END)),
        s(:array,
          s(:sym, :TkAND),
          s(:const, nil, :TkId),
          s(:str, "and"),
          s(:const, nil, :EXPR_BEG)),
        s(:array,
          s(:sym, :TkOR),
          s(:const, nil, :TkId),
          s(:str, "or"),
          s(:const, nil, :EXPR_BEG)),
        s(:array,
          s(:sym, :TkNOT),
          s(:const, nil, :TkId),
          s(:str, "not"),
          s(:const, nil, :EXPR_BEG)),
        s(:array,
          s(:sym, :TkIF_MOD),
          s(:const, nil, :TkId)),
        s(:array,
          s(:sym, :TkUNLESS_MOD),
          s(:const, nil, :TkId)),
        s(:array,
          s(:sym, :TkWHILE_MOD),
          s(:const, nil, :TkId)),
        s(:array,
          s(:sym, :TkUNTIL_MOD),
          s(:const, nil, :TkId)),
        s(:array,
          s(:sym, :TkALIAS),
          s(:const, nil, :TkId),
          s(:str, "alias"),
          s(:const, nil, :EXPR_FNAME)),
        s(:array,
          s(:sym, :TkDEFINED),
          s(:const, nil, :TkId),
          s(:str, "defined?"),
          s(:const, nil, :EXPR_END)),
        s(:array,
          s(:sym, :TklBEGIN),
          s(:const, nil, :TkId),
          s(:str, "BEGIN"),
          s(:const, nil, :EXPR_END)),
        s(:array,
          s(:sym, :TklEND),
          s(:const, nil, :TkId),
          s(:str, "END"),
          s(:const, nil, :EXPR_END)),
        s(:array,
          s(:sym, :Tk__LINE__),
          s(:const, nil, :TkId),
          s(:str, "__LINE__"),
          s(:const, nil, :EXPR_END)),
        s(:array,
          s(:sym, :Tk__FILE__),
          s(:const, nil, :TkId),
          s(:str, "__FILE__"),
          s(:const, nil, :EXPR_END)),
        s(:array,
          s(:sym, :TkIDENTIFIER),
          s(:const, nil, :TkId)),
        s(:array,
          s(:sym, :TkFID),
          s(:const, nil, :TkId)),
        s(:array,
          s(:sym, :TkGVAR),
          s(:const, nil, :TkId)),
        s(:array,
          s(:sym, :TkCVAR),
          s(:const, nil, :TkId)),
        s(:array,
          s(:sym, :TkIVAR),
          s(:const, nil, :TkId)),
        s(:array,
          s(:sym, :TkCONSTANT),
          s(:const, nil, :TkId)),
        s(:array,
          s(:sym, :TkINTEGER),
          s(:const, nil, :TkVal)),
        s(:array,
          s(:sym, :TkFLOAT),
          s(:const, nil, :TkVal)),
        s(:array,
          s(:sym, :TkSTRING),
          s(:const, nil, :TkVal)),
        s(:array,
          s(:sym, :TkXSTRING),
          s(:const, nil, :TkVal)),
        s(:array,
          s(:sym, :TkREGEXP),
          s(:const, nil, :TkVal)),
        s(:array,
          s(:sym, :TkSYMBOL),
          s(:const, nil, :TkVal)),
        s(:array,
          s(:sym, :TkDSTRING),
          s(:const, nil, :TkNode)),
        s(:array,
          s(:sym, :TkDXSTRING),
          s(:const, nil, :TkNode)),
        s(:array,
          s(:sym, :TkDREGEXP),
          s(:const, nil, :TkNode)),
        s(:array,
          s(:sym, :TkNTH_REF),
          s(:const, nil, :TkNode)),
        s(:array,
          s(:sym, :TkBACK_REF),
          s(:const, nil, :TkNode)),
        s(:array,
          s(:sym, :TkUPLUS),
          s(:const, nil, :TkOp),
          s(:str, "+@")),
        s(:array,
          s(:sym, :TkUMINUS),
          s(:const, nil, :TkOp),
          s(:str, "-@")),
        s(:array,
          s(:sym, :TkPOW),
          s(:const, nil, :TkOp),
          s(:str, "**")),
        s(:array,
          s(:sym, :TkCMP),
          s(:const, nil, :TkOp),
          s(:str, "<=>")),
        s(:array,
          s(:sym, :TkEQ),
          s(:const, nil, :TkOp),
          s(:str, "==")),
        s(:array,
          s(:sym, :TkEQQ),
          s(:const, nil, :TkOp),
          s(:str, "===")),
        s(:array,
          s(:sym, :TkNEQ),
          s(:const, nil, :TkOp),
          s(:str, "!=")),
        s(:array,
          s(:sym, :TkGEQ),
          s(:const, nil, :TkOp),
          s(:str, ">=")),
        s(:array,
          s(:sym, :TkLEQ),
          s(:const, nil, :TkOp),
          s(:str, "<=")),
        s(:array,
          s(:sym, :TkANDOP),
          s(:const, nil, :TkOp),
          s(:str, "&&")),
        s(:array,
          s(:sym, :TkOROP),
          s(:const, nil, :TkOp),
          s(:str, "||")),
        s(:array,
          s(:sym, :TkMATCH),
          s(:const, nil, :TkOp),
          s(:str, "=~")),
        s(:array,
          s(:sym, :TkNMATCH),
          s(:const, nil, :TkOp),
          s(:str, "!~")),
        s(:array,
          s(:sym, :TkDOT2),
          s(:const, nil, :TkOp),
          s(:str, "..")),
        s(:array,
          s(:sym, :TkDOT3),
          s(:const, nil, :TkOp),
          s(:str, "...")),
        s(:array,
          s(:sym, :TkAREF),
          s(:const, nil, :TkOp),
          s(:str, "[]")),
        s(:array,
          s(:sym, :TkASET),
          s(:const, nil, :TkOp),
          s(:str, "[]=")),
        s(:array,
          s(:sym, :TkLSHFT),
          s(:const, nil, :TkOp),
          s(:str, "<<")),
        s(:array,
          s(:sym, :TkRSHFT),
          s(:const, nil, :TkOp),
          s(:str, ">>")),
        s(:array,
          s(:sym, :TkCOLON2),
          s(:const, nil, :TkOp)),
        s(:array,
          s(:sym, :TkCOLON3),
          s(:const, nil, :TkOp)),
        s(:array,
          s(:sym, :TkASSOC),
          s(:const, nil, :TkOp),
          s(:str, "=>")),
        s(:array,
          s(:sym, :TkQUESTION),
          s(:const, nil, :TkOp),
          s(:str, "?")),
        s(:array,
          s(:sym, :TkCOLON),
          s(:const, nil, :TkOp),
          s(:str, ":")),
        s(:array,
          s(:sym, :TkfLPAREN)),
        s(:array,
          s(:sym, :TkfLBRACK)),
        s(:array,
          s(:sym, :TkfLBRACE)),
        s(:array,
          s(:sym, :TkSTAR)),
        s(:array,
          s(:sym, :TkAMPER)),
        s(:array,
          s(:sym, :TkSYMBEG)),
        s(:array,
          s(:sym, :TkGT),
          s(:const, nil, :TkOp),
          s(:str, ">")),
        s(:array,
          s(:sym, :TkLT),
          s(:const, nil, :TkOp),
          s(:str, "<")),
        s(:array,
          s(:sym, :TkPLUS),
          s(:const, nil, :TkOp),
          s(:str, "+")),
        s(:array,
          s(:sym, :TkMINUS),
          s(:const, nil, :TkOp),
          s(:str, "-")),
        s(:array,
          s(:sym, :TkMULT),
          s(:const, nil, :TkOp),
          s(:str, "*")),
        s(:array,
          s(:sym, :TkDIV),
          s(:const, nil, :TkOp),
          s(:str, "/")),
        s(:array,
          s(:sym, :TkMOD),
          s(:const, nil, :TkOp),
          s(:str, "%")),
        s(:array,
          s(:sym, :TkBITOR),
          s(:const, nil, :TkOp),
          s(:str, "|")),
        s(:array,
          s(:sym, :TkBITXOR),
          s(:const, nil, :TkOp),
          s(:str, "^")),
        s(:array,
          s(:sym, :TkBITAND),
          s(:const, nil, :TkOp),
          s(:str, "&")),
        s(:array,
          s(:sym, :TkBITNOT),
          s(:const, nil, :TkOp),
          s(:str, "~")),
        s(:array,
          s(:sym, :TkNOTOP),
          s(:const, nil, :TkOp),
          s(:str, "!")),
        s(:array,
          s(:sym, :TkBACKQUOTE),
          s(:const, nil, :TkOp),
          s(:str, "`")),
        s(:array,
          s(:sym, :TkASSIGN),
          s(:const, nil, :Token),
          s(:str, "=")),
        s(:array,
          s(:sym, :TkDOT),
          s(:const, nil, :Token),
          s(:str, ".")),
        s(:array,
          s(:sym, :TkLPAREN),
          s(:const, nil, :Token),
          s(:str, "(")),
        s(:array,
          s(:sym, :TkLBRACK),
          s(:const, nil, :Token),
          s(:str, "[")),
        s(:array,
          s(:sym, :TkLBRACE),
          s(:const, nil, :Token),
          s(:str, "{")),
        s(:array,
          s(:sym, :TkRPAREN),
          s(:const, nil, :Token),
          s(:str, ")")),
        s(:array,
          s(:sym, :TkRBRACK),
          s(:const, nil, :Token),
          s(:str, "]")),
        s(:array,
          s(:sym, :TkRBRACE),
          s(:const, nil, :Token),
          s(:str, "}")),
        s(:array,
          s(:sym, :TkCOMMA),
          s(:const, nil, :Token),
          s(:str, ",")),
        s(:array,
          s(:sym, :TkSEMICOLON),
          s(:const, nil, :Token),
          s(:str, ";")),
        s(:array,
          s(:sym, :TkCOMMENT)),
        s(:array,
          s(:sym, :TkRD_COMMENT)),
        s(:array,
          s(:sym, :TkSPACE)),
        s(:array,
          s(:sym, :TkNL)),
        s(:array,
          s(:sym, :TkEND_OF_SCRIPT)),
        s(:array,
          s(:sym, :TkBACKSLASH),
          s(:const, nil, :TkUnknownChar),
          s(:str, "\\")),
        s(:array,
          s(:sym, :TkAT),
          s(:const, nil, :TkUnknownChar),
          s(:str, "@")),
        s(:array,
          s(:sym, :TkDOLLAR),
          s(:const, nil, :TkUnknownChar),
          s(:str, "$")))),
    s(:casgn, nil, :TkReading2Token,
      s(:hash)),
    s(:casgn, nil, :TkSymbol2Token,
      s(:hash)),
    s(:defs,
      s(:const, nil, :RubyToken), :def_token,
      s(:args,
        s(:arg, :token_n),
        s(:optarg, :super_token,
          s(:const, nil, :Token)),
        s(:optarg, :reading,
          s(:nil)),
        s(:restarg, :opts)),
      s(:begin,
        s(:if,
          s(:send,
            s(:lvar, :token_n), :kind_of?,
            s(:const, nil, :Symbol)),
          s(:lvasgn, :token_n,
            s(:send,
              s(:lvar, :token_n), :id2name)), nil),
        s(:if,
          s(:send,
            s(:const, nil, :RubyToken), :const_defined?,
            s(:lvar, :token_n)),
          s(:send,
            s(:const, nil, :IRB), :fail,
            s(:const, nil, :AlreadyDefinedToken),
            s(:lvar, :token_n)), nil),
        s(:lvasgn, :token_c,
          s(:send, nil, :eval,
            s(:dstr,
              s(:str, "class "),
              s(:begin,
                s(:lvar, :token_n)),
              s(:str, " < "),
              s(:begin,
                s(:lvar, :super_token)),
              s(:str, "; end; "),
              s(:begin,
                s(:lvar, :token_n))))),
        s(:if,
          s(:lvar, :reading),
          s(:begin,
            s(:if,
              s(:send,
                s(:const, nil, :TkReading2Token), :[],
                s(:lvar, :reading)),
              s(:send,
                s(:const, nil, :IRB), :fail,
                s(:const, nil, :TkReading2TokenDuplicateError),
                s(:lvar, :token_n),
                s(:lvar, :reading)), nil),
            s(:if,
              s(:send,
                s(:lvar, :opts), :empty?),
              s(:send,
                s(:const, nil, :TkReading2Token), :[]=,
                s(:lvar, :reading),
                s(:array,
                  s(:lvar, :token_c))),
              s(:send,
                s(:const, nil, :TkReading2Token), :[]=,
                s(:lvar, :reading),
                s(:send,
                  s(:array,
                    s(:lvar, :token_c)), :concat,
                  s(:lvar, :opts))))), nil),
        s(:send,
          s(:const, nil, :TkSymbol2Token), :[]=,
          s(:send,
            s(:lvar, :token_n), :intern),
          s(:lvar, :token_c)))),
    s(:for,
      s(:lvasgn, :defs),
      s(:const, nil, :TokenDefinitions),
      s(:send, nil, :def_token,
        s(:splat,
          s(:lvar, :defs))))))
