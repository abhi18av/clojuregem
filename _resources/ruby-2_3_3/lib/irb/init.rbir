s(:module,
  s(:const, nil, :IRB),
  s(:begin,
    s(:defs,
      s(:const, nil, :IRB), :setup,
      s(:args,
        s(:arg, :ap_path)),
      s(:begin,
        s(:send,
          s(:const, nil, :IRB), :init_config,
          s(:lvar, :ap_path)),
        s(:send,
          s(:const, nil, :IRB), :init_error),
        s(:send,
          s(:const, nil, :IRB), :parse_opts),
        s(:send,
          s(:const, nil, :IRB), :run_config),
        s(:send,
          s(:const, nil, :IRB), :load_modules),
        s(:if,
          s(:send,
            s(:send,
              s(:ivar, :@CONF), :[],
              s(:sym, :PROMPT)), :[],
            s(:send,
              s(:ivar, :@CONF), :[],
              s(:sym, :PROMPT_MODE))), nil,
          s(:send,
            s(:const, nil, :IRB), :fail,
            s(:const, nil, :UndefinedPromptMode),
            s(:send,
              s(:ivar, :@CONF), :[],
              s(:sym, :PROMPT_MODE)))))),
    s(:defs,
      s(:const, nil, :IRB), :init_config,
      s(:args,
        s(:arg, :ap_path)),
      s(:begin,
        s(:ivasgn, :@TRACER_INITIALIZED,
          s(:false)),
        s(:if,
          s(:and,
            s(:lvar, :ap_path),
            s(:send,
              s(:ivar, :@CONF), :[],
              s(:sym, :AP_NAME))), nil,
          s(:lvasgn, :ap_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:send,
                  s(:const, nil, :File), :dirname,
                  s(:str, "(string)"))),
              s(:str, "irb.rb")))),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :AP_NAME),
          s(:send,
            s(:const, nil, :File), :basename,
            s(:lvar, :ap_path),
            s(:str, ".rb"))),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :IRB_NAME),
          s(:str, "irb")),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :IRB_LIB_PATH),
          s(:send,
            s(:const, nil, :File), :dirname,
            s(:str, "(string)"))),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :RC),
          s(:true)),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :LOAD_MODULES),
          s(:array)),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :IRB_RC),
          s(:nil)),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :MATH_MODE),
          s(:false)),
        s(:if,
          s(:defined?,
            s(:const, nil, :ReadlineInputMethod)), nil,
          s(:send,
            s(:ivar, :@CONF), :[]=,
            s(:sym, :USE_READLINE),
            s(:false))),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :INSPECT_MODE),
          s(:true)),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :USE_TRACER),
          s(:false)),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :USE_LOADER),
          s(:false)),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :IGNORE_SIGINT),
          s(:true)),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :IGNORE_EOF),
          s(:false)),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :ECHO),
          s(:nil)),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :VERBOSE),
          s(:nil)),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :EVAL_HISTORY),
          s(:nil)),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :SAVE_HISTORY),
          s(:nil)),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :BACK_TRACE_LIMIT),
          s(:int, 16)),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :PROMPT),
          s(:hash,
            s(:pair,
              s(:sym, :NULL),
              s(:hash,
                s(:pair,
                  s(:sym, :PROMPT_I),
                  s(:nil)),
                s(:pair,
                  s(:sym, :PROMPT_N),
                  s(:nil)),
                s(:pair,
                  s(:sym, :PROMPT_S),
                  s(:nil)),
                s(:pair,
                  s(:sym, :PROMPT_C),
                  s(:nil)),
                s(:pair,
                  s(:sym, :RETURN),
                  s(:str, "%s\n")))),
            s(:pair,
              s(:sym, :DEFAULT),
              s(:hash,
                s(:pair,
                  s(:sym, :PROMPT_I),
                  s(:str, "%N(%m):%03n:%i> ")),
                s(:pair,
                  s(:sym, :PROMPT_N),
                  s(:str, "%N(%m):%03n:%i> ")),
                s(:pair,
                  s(:sym, :PROMPT_S),
                  s(:str, "%N(%m):%03n:%i%l ")),
                s(:pair,
                  s(:sym, :PROMPT_C),
                  s(:str, "%N(%m):%03n:%i* ")),
                s(:pair,
                  s(:sym, :RETURN),
                  s(:str, "=> %s\n")))),
            s(:pair,
              s(:sym, :CLASSIC),
              s(:hash,
                s(:pair,
                  s(:sym, :PROMPT_I),
                  s(:str, "%N(%m):%03n:%i> ")),
                s(:pair,
                  s(:sym, :PROMPT_N),
                  s(:str, "%N(%m):%03n:%i> ")),
                s(:pair,
                  s(:sym, :PROMPT_S),
                  s(:str, "%N(%m):%03n:%i%l ")),
                s(:pair,
                  s(:sym, :PROMPT_C),
                  s(:str, "%N(%m):%03n:%i* ")),
                s(:pair,
                  s(:sym, :RETURN),
                  s(:str, "%s\n")))),
            s(:pair,
              s(:sym, :SIMPLE),
              s(:hash,
                s(:pair,
                  s(:sym, :PROMPT_I),
                  s(:str, ">> ")),
                s(:pair,
                  s(:sym, :PROMPT_N),
                  s(:str, ">> ")),
                s(:pair,
                  s(:sym, :PROMPT_S),
                  s(:nil)),
                s(:pair,
                  s(:sym, :PROMPT_C),
                  s(:str, "?> ")),
                s(:pair,
                  s(:sym, :RETURN),
                  s(:str, "=> %s\n")))),
            s(:pair,
              s(:sym, :INF_RUBY),
              s(:hash,
                s(:pair,
                  s(:sym, :PROMPT_I),
                  s(:str, "%N(%m):%03n:%i> ")),
                s(:pair,
                  s(:sym, :PROMPT_N),
                  s(:nil)),
                s(:pair,
                  s(:sym, :PROMPT_S),
                  s(:nil)),
                s(:pair,
                  s(:sym, :PROMPT_C),
                  s(:nil)),
                s(:pair,
                  s(:sym, :RETURN),
                  s(:str, "%s\n")),
                s(:pair,
                  s(:sym, :AUTO_INDENT),
                  s(:true)))),
            s(:pair,
              s(:sym, :XMP),
              s(:hash,
                s(:pair,
                  s(:sym, :PROMPT_I),
                  s(:nil)),
                s(:pair,
                  s(:sym, :PROMPT_N),
                  s(:nil)),
                s(:pair,
                  s(:sym, :PROMPT_S),
                  s(:nil)),
                s(:pair,
                  s(:sym, :PROMPT_C),
                  s(:nil)),
                s(:pair,
                  s(:sym, :RETURN),
                  s(:str, "    ==>%s\n")))))),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :PROMPT_MODE),
          s(:begin,
            s(:if,
              s(:send,
                s(:const, nil, :STDIN), :tty?),
              s(:sym, :DEFAULT),
              s(:sym, :NULL)))),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :AUTO_INDENT),
          s(:false)),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :CONTEXT_MODE),
          s(:int, 3)),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :SINGLE_IRB),
          s(:false)),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :LC_MESSAGES),
          s(:send,
            s(:const, nil, :Locale), :new)),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :AT_EXIT),
          s(:array)),
        s(:send,
          s(:ivar, :@CONF), :[]=,
          s(:sym, :DEBUG_LEVEL),
          s(:int, 0)))),
    s(:defs,
      s(:const, nil, :IRB), :init_error,
      s(:args),
      s(:send,
        s(:send,
          s(:ivar, :@CONF), :[],
          s(:sym, :LC_MESSAGES)), :load,
        s(:str, "irb/error.rb"))),
    s(:defs,
      s(:const, nil, :IRB), :parse_opts,
      s(:args),
      s(:begin,
        s(:lvasgn, :load_path,
          s(:array)),
        s(:while,
          s(:lvasgn, :opt,
            s(:send,
              s(:const, nil, :ARGV), :shift)),
          s(:case,
            s(:lvar, :opt),
            s(:when,
              s(:str, "-f"),
              s(:send,
                s(:ivar, :@CONF), :[]=,
                s(:sym, :RC),
                s(:false))),
            s(:when,
              s(:str, "-m"),
              s(:send,
                s(:ivar, :@CONF), :[]=,
                s(:sym, :MATH_MODE),
                s(:true))),
            s(:when,
              s(:str, "-d"),
              s(:begin,
                s(:gvasgn, :$DEBUG,
                  s(:true)),
                s(:gvasgn, :$VERBOSE,
                  s(:true)))),
            s(:when,
              s(:str, "-w"),
              s(:gvasgn, :$VERBOSE,
                s(:true))),
            s(:when,
              s(:regexp,
                s(:str, "^-W(.+)?"),
                s(:regopt)),
              s(:begin,
                s(:lvasgn, :opt,
                  s(:or,
                    s(:nth_ref, 1),
                    s(:send,
                      s(:const, nil, :ARGV), :shift))),
                s(:case,
                  s(:lvar, :opt),
                  s(:when,
                    s(:str, "0"),
                    s(:gvasgn, :$VERBOSE,
                      s(:nil))),
                  s(:when,
                    s(:str, "1"),
                    s(:gvasgn, :$VERBOSE,
                      s(:false))),
                  s(:gvasgn, :$VERBOSE,
                    s(:true))))),
            s(:when,
              s(:regexp,
                s(:str, "^-r(.+)?"),
                s(:regopt)),
              s(:begin,
                s(:lvasgn, :opt,
                  s(:or,
                    s(:nth_ref, 1),
                    s(:send,
                      s(:const, nil, :ARGV), :shift))),
                s(:if,
                  s(:lvar, :opt),
                  s(:send,
                    s(:send,
                      s(:ivar, :@CONF), :[],
                      s(:sym, :LOAD_MODULES)), :push,
                    s(:lvar, :opt)), nil))),
            s(:when,
              s(:regexp,
                s(:str, "^-I(.+)?"),
                s(:regopt)),
              s(:begin,
                s(:lvasgn, :opt,
                  s(:or,
                    s(:nth_ref, 1),
                    s(:send,
                      s(:const, nil, :ARGV), :shift))),
                s(:if,
                  s(:lvar, :opt),
                  s(:send,
                    s(:lvar, :load_path), :concat,
                    s(:send,
                      s(:lvar, :opt), :split,
                      s(:const,
                        s(:const, nil, :File), :PATH_SEPARATOR))), nil))),
            s(:when,
              s(:str, "-U"),
              s(:send, nil, :set_encoding,
                s(:str, "UTF-8"),
                s(:str, "UTF-8"))),
            s(:when,
              s(:regexp,
                s(:str, "^-E(.+)?"),
                s(:regopt)),
              s(:regexp,
                s(:str, "^--encoding(?:=(.+))?"),
                s(:regopt)),
              s(:begin,
                s(:lvasgn, :opt,
                  s(:or,
                    s(:nth_ref, 1),
                    s(:send,
                      s(:const, nil, :ARGV), :shift))),
                s(:send, nil, :set_encoding,
                  s(:splat,
                    s(:send,
                      s(:lvar, :opt), :split,
                      s(:str, ":"),
                      s(:int, 2)))))),
            s(:when,
              s(:str, "--inspect"),
              s(:if,
                s(:send,
                  s(:regexp,
                    s(:str, "^-"),
                    s(:regopt)), :!~,
                  s(:send,
                    s(:const, nil, :ARGV), :first)),
                s(:send,
                  s(:ivar, :@CONF), :[]=,
                  s(:sym, :INSPECT_MODE),
                  s(:send,
                    s(:const, nil, :ARGV), :shift)),
                s(:send,
                  s(:ivar, :@CONF), :[]=,
                  s(:sym, :INSPECT_MODE),
                  s(:true)))),
            s(:when,
              s(:str, "--noinspect"),
              s(:send,
                s(:ivar, :@CONF), :[]=,
                s(:sym, :INSPECT_MODE),
                s(:false))),
            s(:when,
              s(:str, "--readline"),
              s(:send,
                s(:ivar, :@CONF), :[]=,
                s(:sym, :USE_READLINE),
                s(:true))),
            s(:when,
              s(:str, "--noreadline"),
              s(:send,
                s(:ivar, :@CONF), :[]=,
                s(:sym, :USE_READLINE),
                s(:false))),
            s(:when,
              s(:str, "--echo"),
              s(:send,
                s(:ivar, :@CONF), :[]=,
                s(:sym, :ECHO),
                s(:true))),
            s(:when,
              s(:str, "--noecho"),
              s(:send,
                s(:ivar, :@CONF), :[]=,
                s(:sym, :ECHO),
                s(:false))),
            s(:when,
              s(:str, "--verbose"),
              s(:send,
                s(:ivar, :@CONF), :[]=,
                s(:sym, :VERBOSE),
                s(:true))),
            s(:when,
              s(:str, "--noverbose"),
              s(:send,
                s(:ivar, :@CONF), :[]=,
                s(:sym, :VERBOSE),
                s(:false))),
            s(:when,
              s(:regexp,
                s(:str, "^--prompt-mode(?:=(.+))?"),
                s(:regopt)),
              s(:regexp,
                s(:str, "^--prompt(?:=(.+))?"),
                s(:regopt)),
              s(:begin,
                s(:lvasgn, :opt,
                  s(:or,
                    s(:nth_ref, 1),
                    s(:send,
                      s(:const, nil, :ARGV), :shift))),
                s(:lvasgn, :prompt_mode,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :opt), :upcase), :tr,
                      s(:str, "-"),
                      s(:str, "_")), :intern)),
                s(:send,
                  s(:ivar, :@CONF), :[]=,
                  s(:sym, :PROMPT_MODE),
                  s(:lvar, :prompt_mode)))),
            s(:when,
              s(:str, "--noprompt"),
              s(:send,
                s(:ivar, :@CONF), :[]=,
                s(:sym, :PROMPT_MODE),
                s(:sym, :NULL))),
            s(:when,
              s(:str, "--inf-ruby-mode"),
              s(:send,
                s(:ivar, :@CONF), :[]=,
                s(:sym, :PROMPT_MODE),
                s(:sym, :INF_RUBY))),
            s(:when,
              s(:str, "--sample-book-mode"),
              s(:str, "--simple-prompt"),
              s(:send,
                s(:ivar, :@CONF), :[]=,
                s(:sym, :PROMPT_MODE),
                s(:sym, :SIMPLE))),
            s(:when,
              s(:str, "--tracer"),
              s(:send,
                s(:ivar, :@CONF), :[]=,
                s(:sym, :USE_TRACER),
                s(:true))),
            s(:when,
              s(:regexp,
                s(:str, "^--back-trace-limit(?:=(.+))?"),
                s(:regopt)),
              s(:send,
                s(:ivar, :@CONF), :[]=,
                s(:sym, :BACK_TRACE_LIMIT),
                s(:send,
                  s(:begin,
                    s(:or,
                      s(:nth_ref, 1),
                      s(:send,
                        s(:const, nil, :ARGV), :shift))), :to_i))),
            s(:when,
              s(:regexp,
                s(:str, "^--context-mode(?:=(.+))?"),
                s(:regopt)),
              s(:send,
                s(:ivar, :@CONF), :[]=,
                s(:sym, :CONTEXT_MODE),
                s(:send,
                  s(:begin,
                    s(:or,
                      s(:nth_ref, 1),
                      s(:send,
                        s(:const, nil, :ARGV), :shift))), :to_i))),
            s(:when,
              s(:str, "--single-irb"),
              s(:send,
                s(:ivar, :@CONF), :[]=,
                s(:sym, :SINGLE_IRB),
                s(:true))),
            s(:when,
              s(:regexp,
                s(:str, "^--irb_debug(?:=(.+))?"),
                s(:regopt)),
              s(:send,
                s(:ivar, :@CONF), :[]=,
                s(:sym, :DEBUG_LEVEL),
                s(:send,
                  s(:begin,
                    s(:or,
                      s(:nth_ref, 1),
                      s(:send,
                        s(:const, nil, :ARGV), :shift))), :to_i))),
            s(:when,
              s(:str, "-v"),
              s(:str, "--version"),
              s(:begin,
                s(:send, nil, :print,
                  s(:send,
                    s(:const, nil, :IRB), :version),
                  s(:str, "\n")),
                s(:send, nil, :exit,
                  s(:int, 0)))),
            s(:when,
              s(:str, "-h"),
              s(:str, "--help"),
              s(:begin,
                s(:send, nil, :require,
                  s(:str, "irb/help")),
                s(:send,
                  s(:const, nil, :IRB), :print_usage),
                s(:send, nil, :exit,
                  s(:int, 0)))),
            s(:when,
              s(:str, "--"),
              s(:begin,
                s(:if,
                  s(:lvasgn, :opt,
                    s(:send,
                      s(:const, nil, :ARGV), :shift)),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@CONF), :[]=,
                      s(:sym, :SCRIPT),
                      s(:lvar, :opt)),
                    s(:gvasgn, :$0,
                      s(:lvar, :opt))), nil),
                s(:break))),
            s(:when,
              s(:regexp,
                s(:str, "^-"),
                s(:regopt)),
              s(:send,
                s(:const, nil, :IRB), :fail,
                s(:const, nil, :UnrecognizedSwitch),
                s(:lvar, :opt))),
            s(:begin,
              s(:send,
                s(:ivar, :@CONF), :[]=,
                s(:sym, :SCRIPT),
                s(:lvar, :opt)),
              s(:gvasgn, :$0,
                s(:lvar, :opt)),
              s(:break)))),
        s(:block,
          s(:send,
            s(:lvar, :load_path), :collect!),
          s(:args,
            s(:arg, :path)),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "\\A\\./"),
                s(:regopt)),
              s(:lvar, :path)),
            s(:lvar, :path),
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:lvar, :path)))),
        s(:send,
          s(:gvar, :$LOAD_PATH), :unshift,
          s(:splat,
            s(:lvar, :load_path))))),
    s(:defs,
      s(:const, nil, :IRB), :run_config,
      s(:args),
      s(:if,
        s(:send,
          s(:ivar, :@CONF), :[],
          s(:sym, :RC)),
        s(:kwbegin,
          s(:rescue,
            s(:send, nil, :load,
              s(:send, nil, :rc_file)),
            s(:resbody,
              s(:array,
                s(:const, nil, :LoadError),
                s(:const,
                  s(:const, nil, :Errno), :ENOENT)), nil, nil),
            s(:resbody, nil, nil,
              s(:begin,
                s(:send, nil, :print,
                  s(:dstr,
                    s(:str, "load error: "),
                    s(:begin,
                      s(:send, nil, :rc_file)),
                    s(:str, "\n"))),
                s(:send, nil, :print,
                  s(:send,
                    s(:gvar, :$!), :class),
                  s(:str, ": "),
                  s(:gvar, :$!),
                  s(:str, "\n")),
                s(:for,
                  s(:lvasgn, :err),
                  s(:send,
                    s(:gvar, :$@), :[],
                    s(:int, 0),
                    s(:send,
                      s(:send,
                        s(:gvar, :$@), :size), :-,
                      s(:int, 2))),
                  s(:send, nil, :print,
                    s(:str, "\t"),
                    s(:lvar, :err),
                    s(:str, "\n"))))), nil)), nil)),
    s(:casgn, nil, :IRBRC_EXT,
      s(:str, "rc")),
    s(:defs,
      s(:const, nil, :IRB), :rc_file,
      s(:args,
        s(:optarg, :ext,
          s(:const, nil, :IRBRC_EXT))),
      s(:begin,
        s(:if,
          s(:send,
            s(:send,
              s(:ivar, :@CONF), :[],
              s(:sym, :RC_NAME_GENERATOR)), :!),
          s(:block,
            s(:send, nil, :rc_file_generators),
            s(:args,
              s(:arg, :rcgen)),
            s(:begin,
              s(:or_asgn,
                s(:send,
                  s(:ivar, :@CONF), :[],
                  s(:sym, :RC_NAME_GENERATOR)),
                s(:lvar, :rcgen)),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :exist?,
                  s(:send,
                    s(:lvar, :rcgen), :call,
                    s(:const, nil, :IRBRC_EXT))),
                s(:begin,
                  s(:send,
                    s(:ivar, :@CONF), :[]=,
                    s(:sym, :RC_NAME_GENERATOR),
                    s(:lvar, :rcgen)),
                  s(:break)), nil))), nil),
        s(:case,
          s(:lvasgn, :rc_file,
            s(:send,
              s(:send,
                s(:ivar, :@CONF), :[],
                s(:sym, :RC_NAME_GENERATOR)), :call,
              s(:lvar, :ext))),
          s(:when,
            s(:const, nil, :String),
            s(:return,
              s(:lvar, :rc_file))),
          s(:send,
            s(:const, nil, :IRB), :fail,
            s(:const, nil, :IllegalRCNameGenerator))))),
    s(:defs,
      s(:const, nil, :IRB), :rc_file_generators,
      s(:args),
      s(:begin,
        s(:if,
          s(:lvasgn, :irbrc,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "IRBRC"))),
          s(:yield,
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :rc)),
              s(:if,
                s(:send,
                  s(:lvar, :rc), :==,
                  s(:str, "rc")),
                s(:lvar, :irbrc),
                s(:send,
                  s(:lvar, :irbrc), :+,
                  s(:lvar, :rc))))), nil),
        s(:if,
          s(:lvasgn, :home,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "HOME"))),
          s(:yield,
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :rc)),
              s(:send,
                s(:lvar, :home), :+,
                s(:dstr,
                  s(:str, "/.irb"),
                  s(:begin,
                    s(:lvar, :rc)))))), nil),
        s(:lvasgn, :home,
          s(:send,
            s(:const, nil, :Dir), :pwd)),
        s(:yield,
          s(:block,
            s(:send, nil, :proc),
            s(:args,
              s(:arg, :rc)),
            s(:send,
              s(:lvar, :home), :+,
              s(:dstr,
                s(:str, "/.irb"),
                s(:begin,
                  s(:lvar, :rc)))))),
        s(:yield,
          s(:block,
            s(:send, nil, :proc),
            s(:args,
              s(:arg, :rc)),
            s(:send,
              s(:lvar, :home), :+,
              s(:dstr,
                s(:str, "/irb"),
                s(:begin,
                  s(:send,
                    s(:lvar, :rc), :sub,
                    s(:regexp,
                      s(:str, "\\A_?"),
                      s(:regopt)),
                    s(:str, "."))))))),
        s(:yield,
          s(:block,
            s(:send, nil, :proc),
            s(:args,
              s(:arg, :rc)),
            s(:send,
              s(:lvar, :home), :+,
              s(:dstr,
                s(:str, "/_irb"),
                s(:begin,
                  s(:lvar, :rc)))))),
        s(:yield,
          s(:block,
            s(:send, nil, :proc),
            s(:args,
              s(:arg, :rc)),
            s(:send,
              s(:lvar, :home), :+,
              s(:dstr,
                s(:str, "/$irb"),
                s(:begin,
                  s(:lvar, :rc)))))))),
    s(:defs,
      s(:const, nil, :IRB), :load_modules,
      s(:args),
      s(:for,
        s(:lvasgn, :m),
        s(:send,
          s(:ivar, :@CONF), :[],
          s(:sym, :LOAD_MODULES)),
        s(:kwbegin,
          s(:rescue,
            s(:send, nil, :require,
              s(:lvar, :m)),
            s(:resbody,
              s(:array,
                s(:const, nil, :LoadError)),
              s(:lvasgn, :err),
              s(:send, nil, :warn,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :err), :backtrace), :[],
                    s(:int, 0)), :<<,
                  s(:dstr,
                    s(:str, ":"),
                    s(:begin,
                      s(:send,
                        s(:lvar, :err), :class)),
                    s(:str, ": "),
                    s(:begin,
                      s(:lvar, :err)))))), nil)))),
    s(:casgn, nil, :DefaultEncodings,
      s(:send,
        s(:const, nil, :Struct), :new,
        s(:sym, :external),
        s(:sym, :internal))),
    s(:sclass,
      s(:const, nil, :IRB),
      s(:begin,
        s(:send, nil, :private),
        s(:def, :set_encoding,
          s(:args,
            s(:arg, :extern),
            s(:optarg, :intern,
              s(:nil))),
          s(:ensure,
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :verbose),
                  s(:gvasgn, :$VERBOSE)),
                s(:array,
                  s(:gvar, :$VERBOSE),
                  s(:nil))),
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :extern), :nil?),
                  s(:send,
                    s(:lvar, :extern), :empty?)), nil,
                s(:send,
                  s(:const, nil, :Encoding), :default_external=,
                  s(:lvar, :extern))),
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :intern), :nil?),
                  s(:send,
                    s(:lvar, :intern), :empty?)), nil,
                s(:send,
                  s(:const, nil, :Encoding), :default_internal=,
                  s(:lvar, :intern))),
              s(:send,
                s(:ivar, :@CONF), :[]=,
                s(:sym, :ENCODINGS),
                s(:send,
                  s(:const,
                    s(:const, nil, :IRB), :DefaultEncodings), :new,
                  s(:lvar, :extern),
                  s(:lvar, :intern))),
              s(:block,
                s(:send,
                  s(:array,
                    s(:gvar, :$stdin),
                    s(:gvar, :$stdout),
                    s(:gvar, :$stderr)), :each),
                s(:args,
                  s(:arg, :io)),
                s(:send,
                  s(:lvar, :io), :set_encoding,
                  s(:lvar, :extern),
                  s(:lvar, :intern))),
              s(:send,
                s(:send,
                  s(:ivar, :@CONF), :[],
                  s(:sym, :LC_MESSAGES)), :instance_variable_set,
                s(:sym, :@encoding),
                s(:lvar, :extern))),
            s(:gvasgn, :$VERBOSE,
              s(:lvar, :verbose))))))))
