s(:module,
  s(:const, nil, :IRB),
  s(:begin,
    s(:module,
      s(:const, nil, :ExtendCommandBundle),
      s(:begin,
        s(:casgn, nil, :EXCB,
          s(:const, nil, :ExtendCommandBundle)),
        s(:casgn, nil, :NO_OVERRIDE,
          s(:int, 0)),
        s(:casgn, nil, :OVERRIDE_PRIVATE_ONLY,
          s(:int, 1)),
        s(:casgn, nil, :OVERRIDE_ALL,
          s(:int, 2)),
        s(:def, :irb_exit,
          s(:args,
            s(:optarg, :ret,
              s(:int, 0))),
          s(:send,
            s(:send, nil, :irb_context), :exit,
            s(:lvar, :ret))),
        s(:def, :irb_context,
          s(:args),
          s(:send,
            s(:const, nil, :IRB), :CurrentContext)),
        s(:ivasgn, :@ALIASES,
          s(:array,
            s(:array,
              s(:sym, :context),
              s(:sym, :irb_context),
              s(:const, nil, :NO_OVERRIDE)),
            s(:array,
              s(:sym, :conf),
              s(:sym, :irb_context),
              s(:const, nil, :NO_OVERRIDE)),
            s(:array,
              s(:sym, :irb_quit),
              s(:sym, :irb_exit),
              s(:const, nil, :OVERRIDE_PRIVATE_ONLY)),
            s(:array,
              s(:sym, :exit),
              s(:sym, :irb_exit),
              s(:const, nil, :OVERRIDE_PRIVATE_ONLY)),
            s(:array,
              s(:sym, :quit),
              s(:sym, :irb_exit),
              s(:const, nil, :OVERRIDE_PRIVATE_ONLY)))),
        s(:ivasgn, :@EXTEND_COMMANDS,
          s(:array,
            s(:array,
              s(:sym, :irb_current_working_workspace),
              s(:sym, :CurrentWorkingWorkspace),
              s(:str, "irb/cmd/chws"),
              s(:array,
                s(:sym, :irb_print_working_workspace),
                s(:const, nil, :OVERRIDE_ALL)),
              s(:array,
                s(:sym, :irb_cwws),
                s(:const, nil, :OVERRIDE_ALL)),
              s(:array,
                s(:sym, :irb_pwws),
                s(:const, nil, :OVERRIDE_ALL)),
              s(:array,
                s(:sym, :cwws),
                s(:const, nil, :NO_OVERRIDE)),
              s(:array,
                s(:sym, :pwws),
                s(:const, nil, :NO_OVERRIDE)),
              s(:array,
                s(:sym, :irb_current_working_binding),
                s(:const, nil, :OVERRIDE_ALL)),
              s(:array,
                s(:sym, :irb_print_working_binding),
                s(:const, nil, :OVERRIDE_ALL)),
              s(:array,
                s(:sym, :irb_cwb),
                s(:const, nil, :OVERRIDE_ALL)),
              s(:array,
                s(:sym, :irb_pwb),
                s(:const, nil, :OVERRIDE_ALL))),
            s(:array,
              s(:sym, :irb_change_workspace),
              s(:sym, :ChangeWorkspace),
              s(:str, "irb/cmd/chws"),
              s(:array,
                s(:sym, :irb_chws),
                s(:const, nil, :OVERRIDE_ALL)),
              s(:array,
                s(:sym, :irb_cws),
                s(:const, nil, :OVERRIDE_ALL)),
              s(:array,
                s(:sym, :chws),
                s(:const, nil, :NO_OVERRIDE)),
              s(:array,
                s(:sym, :cws),
                s(:const, nil, :NO_OVERRIDE)),
              s(:array,
                s(:sym, :irb_change_binding),
                s(:const, nil, :OVERRIDE_ALL)),
              s(:array,
                s(:sym, :irb_cb),
                s(:const, nil, :OVERRIDE_ALL)),
              s(:array,
                s(:sym, :cb),
                s(:const, nil, :NO_OVERRIDE))),
            s(:array,
              s(:sym, :irb_workspaces),
              s(:sym, :Workspaces),
              s(:str, "irb/cmd/pushws"),
              s(:array,
                s(:sym, :workspaces),
                s(:const, nil, :NO_OVERRIDE)),
              s(:array,
                s(:sym, :irb_bindings),
                s(:const, nil, :OVERRIDE_ALL)),
              s(:array,
                s(:sym, :bindings),
                s(:const, nil, :NO_OVERRIDE))),
            s(:array,
              s(:sym, :irb_push_workspace),
              s(:sym, :PushWorkspace),
              s(:str, "irb/cmd/pushws"),
              s(:array,
                s(:sym, :irb_pushws),
                s(:const, nil, :OVERRIDE_ALL)),
              s(:array,
                s(:sym, :pushws),
                s(:const, nil, :NO_OVERRIDE)),
              s(:array,
                s(:sym, :irb_push_binding),
                s(:const, nil, :OVERRIDE_ALL)),
              s(:array,
                s(:sym, :irb_pushb),
                s(:const, nil, :OVERRIDE_ALL)),
              s(:array,
                s(:sym, :pushb),
                s(:const, nil, :NO_OVERRIDE))),
            s(:array,
              s(:sym, :irb_pop_workspace),
              s(:sym, :PopWorkspace),
              s(:str, "irb/cmd/pushws"),
              s(:array,
                s(:sym, :irb_popws),
                s(:const, nil, :OVERRIDE_ALL)),
              s(:array,
                s(:sym, :popws),
                s(:const, nil, :NO_OVERRIDE)),
              s(:array,
                s(:sym, :irb_pop_binding),
                s(:const, nil, :OVERRIDE_ALL)),
              s(:array,
                s(:sym, :irb_popb),
                s(:const, nil, :OVERRIDE_ALL)),
              s(:array,
                s(:sym, :popb),
                s(:const, nil, :NO_OVERRIDE))),
            s(:array,
              s(:sym, :irb_load),
              s(:sym, :Load),
              s(:str, "irb/cmd/load")),
            s(:array,
              s(:sym, :irb_require),
              s(:sym, :Require),
              s(:str, "irb/cmd/load")),
            s(:array,
              s(:sym, :irb_source),
              s(:sym, :Source),
              s(:str, "irb/cmd/load"),
              s(:array,
                s(:sym, :source),
                s(:const, nil, :NO_OVERRIDE))),
            s(:array,
              s(:sym, :irb),
              s(:sym, :IrbCommand),
              s(:str, "irb/cmd/subirb")),
            s(:array,
              s(:sym, :irb_jobs),
              s(:sym, :Jobs),
              s(:str, "irb/cmd/subirb"),
              s(:array,
                s(:sym, :jobs),
                s(:const, nil, :NO_OVERRIDE))),
            s(:array,
              s(:sym, :irb_fg),
              s(:sym, :Foreground),
              s(:str, "irb/cmd/subirb"),
              s(:array,
                s(:sym, :fg),
                s(:const, nil, :NO_OVERRIDE))),
            s(:array,
              s(:sym, :irb_kill),
              s(:sym, :Kill),
              s(:str, "irb/cmd/subirb"),
              s(:array,
                s(:sym, :kill),
                s(:const, nil, :OVERRIDE_PRIVATE_ONLY))),
            s(:array,
              s(:sym, :irb_help),
              s(:sym, :Help),
              s(:str, "irb/cmd/help"),
              s(:array,
                s(:sym, :help),
                s(:const, nil, :NO_OVERRIDE))))),
        s(:defs,
          s(:self), :install_extend_commands,
          s(:args),
          s(:for,
            s(:lvasgn, :args),
            s(:ivar, :@EXTEND_COMMANDS),
            s(:send, nil, :def_extend_command,
              s(:splat,
                s(:lvar, :args))))),
        s(:defs,
          s(:self), :def_extend_command,
          s(:args,
            s(:arg, :cmd_name),
            s(:arg, :cmd_class),
            s(:optarg, :load_file,
              s(:nil)),
            s(:restarg, :aliases)),
          s(:begin,
            s(:case,
              s(:lvar, :cmd_class),
              s(:when,
                s(:const, nil, :Symbol),
                s(:lvasgn, :cmd_class,
                  s(:send,
                    s(:lvar, :cmd_class), :id2name))),
              s(:when,
                s(:const, nil, :String), nil),
              s(:when,
                s(:const, nil, :Class),
                s(:lvasgn, :cmd_class,
                  s(:send,
                    s(:lvar, :cmd_class), :name))), nil),
            s(:if,
              s(:lvar, :load_file),
              s(:begin,
                s(:lvasgn, :line,
                  s(:int, 141)),
                s(:send, nil, :eval,
                  s(:dstr,
                    s(:str, "\n"),
                    s(:str, "          def "),
                    s(:begin,
                      s(:lvar, :cmd_name)),
                    s(:str, "(*opts, &b)\n"),
                    s(:str, "            require \""),
                    s(:begin,
                      s(:lvar, :load_file)),
                    s(:str, "\"\n"),
                    s(:str, "            arity = ExtendCommand::"),
                    s(:begin,
                      s(:lvar, :cmd_class)),
                    s(:str, ".instance_method(:execute).arity\n"),
                    s(:str, "            args = (1..(arity < 0 ? ~arity : arity)).map {|i| \"arg\" + i.to_s }\n"),
                    s(:str, "            args << \"*opts\" if arity < 0\n"),
                    s(:str, "            args << \"&block\"\n"),
                    s(:str, "            args = args.join(\", \")\n"),
                    s(:str, "            line = __LINE__; eval %[\n"),
                    s(:str, "              def "),
                    s(:begin,
                      s(:lvar, :cmd_name)),
                    s(:str, "(\#{args})\n"),
                    s(:str, "            ExtendCommand::"),
                    s(:begin,
                      s(:lvar, :cmd_class)),
                    s(:str, ".execute(irb_context, \#{args})\n"),
                    s(:str, "              end\n"),
                    s(:str, "            ], nil, __FILE__, line\n"),
                    s(:str, "            send :"),
                    s(:begin,
                      s(:lvar, :cmd_name)),
                    s(:str, ", *opts, &b\n"),
                    s(:str, "          end\n"),
                    s(:str, "        ")),
                  s(:nil),
                  s(:str, "(string)"),
                  s(:lvar, :line))),
              s(:begin,
                s(:lvasgn, :line,
                  s(:int, 158)),
                s(:send, nil, :eval,
                  s(:dstr,
                    s(:str, "\n"),
                    s(:str, "          def "),
                    s(:begin,
                      s(:lvar, :cmd_name)),
                    s(:str, "(*opts, &b)\n"),
                    s(:str, "            ExtendCommand::"),
                    s(:begin,
                      s(:lvar, :cmd_class)),
                    s(:str, ".execute(irb_context, *opts, &b)\n"),
                    s(:str, "          end\n"),
                    s(:str, "        ")),
                  s(:nil),
                  s(:str, "(string)"),
                  s(:lvar, :line)))),
            s(:for,
              s(:mlhs,
                s(:lvasgn, :ali),
                s(:lvasgn, :flag)),
              s(:lvar, :aliases),
              s(:send,
                s(:ivar, :@ALIASES), :push,
                s(:array,
                  s(:lvar, :ali),
                  s(:lvar, :cmd_name),
                  s(:lvar, :flag)))))),
        s(:def, :install_alias_method,
          s(:args,
            s(:arg, :to),
            s(:arg, :from),
            s(:optarg, :override,
              s(:const, nil, :NO_OVERRIDE))),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :to), :kind_of?,
                s(:const, nil, :String)), nil,
              s(:lvasgn, :to,
                s(:send,
                  s(:lvar, :to), :id2name))),
            s(:if,
              s(:send,
                s(:lvar, :from), :kind_of?,
                s(:const, nil, :String)), nil,
              s(:lvasgn, :from,
                s(:send,
                  s(:lvar, :from), :id2name))),
            s(:if,
              s(:or,
                s(:or,
                  s(:send,
                    s(:lvar, :override), :==,
                    s(:const, nil, :OVERRIDE_ALL)),
                  s(:and,
                    s(:begin,
                      s(:send,
                        s(:lvar, :override), :==,
                        s(:const, nil, :OVERRIDE_PRIVATE_ONLY))),
                    s(:send,
                      s(:send, nil, :respond_to?,
                        s(:lvar, :to)), :!))),
                s(:and,
                  s(:begin,
                    s(:send,
                      s(:lvar, :override), :==,
                      s(:const, nil, :NO_OVERRIDE))),
                  s(:send,
                    s(:send, nil, :respond_to?,
                      s(:lvar, :to),
                      s(:true)), :!))),
              s(:begin,
                s(:lvasgn, :target,
                  s(:self)),
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:sclass,
                        s(:self),
                        s(:self))), :instance_eval),
                  s(:args),
                  s(:begin,
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:lvar, :target), :respond_to?,
                          s(:lvar, :to),
                          s(:true)),
                        s(:send,
                          s(:send,
                            s(:lvar, :target), :respond_to?,
                            s(:send,
                              s(:const, nil, :EXCB), :irb_original_method_name,
                              s(:lvar, :to)),
                            s(:true)), :!)),
                      s(:send, nil, :alias_method,
                        s(:send,
                          s(:const, nil, :EXCB), :irb_original_method_name,
                          s(:lvar, :to)),
                        s(:lvar, :to)), nil),
                    s(:send, nil, :alias_method,
                      s(:lvar, :to),
                      s(:lvar, :from))))),
              s(:send, nil, :print,
                s(:dstr,
                  s(:str, "irb: warn: can't alias "),
                  s(:begin,
                    s(:lvar, :to)),
                  s(:str, " from "),
                  s(:begin,
                    s(:lvar, :from)),
                  s(:str, ".\n")))))),
        s(:defs,
          s(:self), :irb_original_method_name,
          s(:args,
            s(:arg, :method_name)),
          s(:send,
            s(:send,
              s(:str, "irb_"), :+,
              s(:lvar, :method_name)), :+,
            s(:str, "_org"))),
        s(:defs,
          s(:self), :extend_object,
          s(:args,
            s(:arg, :obj)),
          s(:if,
            s(:send,
              s(:begin,
                s(:sclass,
                  s(:lvar, :obj),
                  s(:send, nil, :ancestors))), :include?,
              s(:const, nil, :EXCB)), nil,
            s(:begin,
              s(:zsuper),
              s(:for,
                s(:mlhs,
                  s(:lvasgn, :ali),
                  s(:lvasgn, :com),
                  s(:lvasgn, :flg)),
                s(:ivar, :@ALIASES),
                s(:send,
                  s(:lvar, :obj), :install_alias_method,
                  s(:lvar, :ali),
                  s(:lvar, :com),
                  s(:lvar, :flg)))))),
        s(:send, nil, :install_extend_commands))),
    s(:module,
      s(:const, nil, :ContextExtender),
      s(:begin,
        s(:casgn, nil, :CE,
          s(:const, nil, :ContextExtender)),
        s(:ivasgn, :@EXTEND_COMMANDS,
          s(:array,
            s(:array,
              s(:sym, :eval_history=),
              s(:str, "irb/ext/history.rb")),
            s(:array,
              s(:sym, :use_tracer=),
              s(:str, "irb/ext/tracer.rb")),
            s(:array,
              s(:sym, :math_mode=),
              s(:str, "irb/ext/math-mode.rb")),
            s(:array,
              s(:sym, :use_loader=),
              s(:str, "irb/ext/use-loader.rb")),
            s(:array,
              s(:sym, :save_history=),
              s(:str, "irb/ext/save-history.rb")))),
        s(:defs,
          s(:self), :install_extend_commands,
          s(:args),
          s(:for,
            s(:lvasgn, :args),
            s(:ivar, :@EXTEND_COMMANDS),
            s(:send, nil, :def_extend_command,
              s(:splat,
                s(:lvar, :args))))),
        s(:defs,
          s(:self), :def_extend_command,
          s(:args,
            s(:arg, :cmd_name),
            s(:arg, :load_file),
            s(:restarg, :aliases)),
          s(:begin,
            s(:lvasgn, :line,
              s(:int, 240)),
            s(:send,
              s(:const, nil, :Context), :module_eval,
              s(:dstr,
                s(:str, "\n"),
                s(:str, "        def "),
                s(:begin,
                  s(:lvar, :cmd_name)),
                s(:str, "(*opts, &b)\n"),
                s(:str, "          Context.module_eval {remove_method(:"),
                s(:begin,
                  s(:lvar, :cmd_name)),
                s(:str, ")}\n"),
                s(:str, "          require \""),
                s(:begin,
                  s(:lvar, :load_file)),
                s(:str, "\"\n"),
                s(:str, "          send :"),
                s(:begin,
                  s(:lvar, :cmd_name)),
                s(:str, ", *opts, &b\n"),
                s(:str, "        end\n"),
                s(:str, "        for ali in aliases\n"),
                s(:str, "          alias_method ali, cmd_name\n"),
                s(:str, "        end\n"),
                s(:str, "      ")),
              s(:str, "(string)"),
              s(:lvar, :line)))),
        s(:send,
          s(:const, nil, :CE), :install_extend_commands))),
    s(:module,
      s(:const, nil, :MethodExtender),
      s(:begin,
        s(:def, :def_pre_proc,
          s(:args,
            s(:arg, :base_method),
            s(:arg, :extend_method)),
          s(:begin,
            s(:lvasgn, :base_method,
              s(:send,
                s(:lvar, :base_method), :to_s)),
            s(:lvasgn, :extend_method,
              s(:send,
                s(:lvar, :extend_method), :to_s)),
            s(:lvasgn, :alias_name,
              s(:send, nil, :new_alias_name,
                s(:lvar, :base_method))),
            s(:send, nil, :module_eval,
              s(:dstr,
                s(:str, "\n"),
                s(:str, "        alias_method alias_name, base_method\n"),
                s(:str, "        def "),
                s(:begin,
                  s(:lvar, :base_method)),
                s(:str, "(*opts)\n"),
                s(:str, "          send :"),
                s(:begin,
                  s(:lvar, :extend_method)),
                s(:str, ", *opts\n"),
                s(:str, "          send :"),
                s(:begin,
                  s(:lvar, :alias_name)),
                s(:str, ", *opts\n"),
                s(:str, "        end\n"),
                s(:str, "      "))))),
        s(:def, :def_post_proc,
          s(:args,
            s(:arg, :base_method),
            s(:arg, :extend_method)),
          s(:begin,
            s(:lvasgn, :base_method,
              s(:send,
                s(:lvar, :base_method), :to_s)),
            s(:lvasgn, :extend_method,
              s(:send,
                s(:lvar, :extend_method), :to_s)),
            s(:lvasgn, :alias_name,
              s(:send, nil, :new_alias_name,
                s(:lvar, :base_method))),
            s(:send, nil, :module_eval,
              s(:dstr,
                s(:str, "\n"),
                s(:str, "        alias_method alias_name, base_method\n"),
                s(:str, "        def "),
                s(:begin,
                  s(:lvar, :base_method)),
                s(:str, "(*opts)\n"),
                s(:str, "          send :"),
                s(:begin,
                  s(:lvar, :alias_name)),
                s(:str, ", *opts\n"),
                s(:str, "          send :"),
                s(:begin,
                  s(:lvar, :extend_method)),
                s(:str, ", *opts\n"),
                s(:str, "        end\n"),
                s(:str, "      "))))),
        s(:def, :new_alias_name,
          s(:args,
            s(:arg, :name),
            s(:optarg, :prefix,
              s(:str, "__alias_of__")),
            s(:optarg, :postfix,
              s(:str, "__"))),
          s(:begin,
            s(:lvasgn, :base_name,
              s(:dstr,
                s(:begin,
                  s(:lvar, :prefix)),
                s(:begin,
                  s(:lvar, :name)),
                s(:begin,
                  s(:lvar, :postfix)))),
            s(:lvasgn, :all_methods,
              s(:send,
                s(:send, nil, :instance_methods,
                  s(:true)), :+,
                s(:send, nil, :private_instance_methods,
                  s(:true)))),
            s(:lvasgn, :same_methods,
              s(:send,
                s(:lvar, :all_methods), :grep,
                s(:regexp,
                  s(:str, "^"),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Regexp), :quote,
                      s(:lvar, :base_name))),
                  s(:str, "[0-9]*$"),
                  s(:regopt)))),
            s(:if,
              s(:send,
                s(:lvar, :same_methods), :empty?),
              s(:return,
                s(:lvar, :base_name)), nil),
            s(:lvasgn, :no,
              s(:send,
                s(:lvar, :same_methods), :size)),
            s(:while,
              s(:send,
                s(:send,
                  s(:lvar, :same_methods), :include?,
                  s(:lvasgn, :alias_name,
                    s(:send,
                      s(:lvar, :base_name), :+,
                      s(:lvar, :no)))), :!),
              s(:op_asgn,
                s(:lvasgn, :no), :+,
                s(:int, 1))),
            s(:lvar, :alias_name)))))))
