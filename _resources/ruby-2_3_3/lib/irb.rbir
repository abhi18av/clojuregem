s(:begin,
  s(:send, nil, :require,
    s(:str, "e2mmap")),
  s(:send, nil, :require,
    s(:str, "irb/init")),
  s(:send, nil, :require,
    s(:str, "irb/context")),
  s(:send, nil, :require,
    s(:str, "irb/extend-command")),
  s(:send, nil, :require,
    s(:str, "irb/ruby-lex")),
  s(:send, nil, :require,
    s(:str, "irb/input-method")),
  s(:send, nil, :require,
    s(:str, "irb/locale")),
  s(:module,
    s(:const, nil, :IRB),
    s(:begin,
      s(:class,
        s(:const, nil, :Abort),
        s(:const, nil, :Exception), nil),
      s(:ivasgn, :@CONF,
        s(:hash)),
      s(:defs,
        s(:const, nil, :IRB), :conf,
        s(:args),
        s(:ivar, :@CONF)),
      s(:defs,
        s(:const, nil, :IRB), :version,
        s(:args),
        s(:begin,
          s(:if,
            s(:lvasgn, :v,
              s(:send,
                s(:ivar, :@CONF), :[],
                s(:sym, :VERSION))),
            s(:return,
              s(:lvar, :v)), nil),
          s(:send, nil, :require,
            s(:str, "irb/version")),
          s(:lvasgn, :rv,
            s(:send,
              s(:ivar, :@RELEASE_VERSION), :sub,
              s(:regexp,
                s(:str, "\\.0"),
                s(:regopt)),
              s(:str, ""))),
          s(:send,
            s(:ivar, :@CONF), :[]=,
            s(:sym, :VERSION),
            s(:send, nil, :format,
              s(:str, "irb %s(%s)"),
              s(:lvar, :rv),
              s(:ivar, :@LAST_UPDATE_DATE))))),
      s(:defs,
        s(:const, nil, :IRB), :CurrentContext,
        s(:args),
        s(:send,
          s(:send,
            s(:const, nil, :IRB), :conf), :[],
          s(:sym, :MAIN_CONTEXT))),
      s(:defs,
        s(:const, nil, :IRB), :start,
        s(:args,
          s(:optarg, :ap_path,
            s(:nil))),
        s(:begin,
          s(:send,
            s(:const, nil, :STDOUT), :sync=,
            s(:true)),
          s(:if,
            s(:lvar, :ap_path),
            s(:gvasgn, :$0,
              s(:send,
                s(:const, nil, :File), :basename,
                s(:lvar, :ap_path),
                s(:str, ".rb"))), nil),
          s(:send,
            s(:const, nil, :IRB), :setup,
            s(:lvar, :ap_path)),
          s(:if,
            s(:send,
              s(:ivar, :@CONF), :[],
              s(:sym, :SCRIPT)),
            s(:lvasgn, :irb,
              s(:send,
                s(:const, nil, :Irb), :new,
                s(:nil),
                s(:send,
                  s(:ivar, :@CONF), :[],
                  s(:sym, :SCRIPT)))),
            s(:lvasgn, :irb,
              s(:send,
                s(:const, nil, :Irb), :new))),
          s(:if,
            s(:send,
              s(:ivar, :@CONF), :[],
              s(:sym, :IRB_RC)),
            s(:send,
              s(:send,
                s(:ivar, :@CONF), :[],
                s(:sym, :IRB_RC)), :call,
              s(:send,
                s(:lvar, :irb), :context)), nil),
          s(:send,
            s(:ivar, :@CONF), :[]=,
            s(:sym, :MAIN_CONTEXT),
            s(:send,
              s(:lvar, :irb), :context)),
          s(:block,
            s(:send, nil, :trap,
              s(:str, "SIGINT")),
            s(:args),
            s(:send,
              s(:lvar, :irb), :signal_handle)),
          s(:kwbegin,
            s(:ensure,
              s(:block,
                s(:send, nil, :catch,
                  s(:sym, :IRB_EXIT)),
                s(:args),
                s(:send,
                  s(:lvar, :irb), :eval_input)),
              s(:send, nil, :irb_at_exit))))),
      s(:defs,
        s(:const, nil, :IRB), :irb_at_exit,
        s(:args),
        s(:block,
          s(:send,
            s(:send,
              s(:ivar, :@CONF), :[],
              s(:sym, :AT_EXIT)), :each),
          s(:args,
            s(:arg, :hook)),
          s(:send,
            s(:lvar, :hook), :call))),
      s(:defs,
        s(:const, nil, :IRB), :irb_exit,
        s(:args,
          s(:arg, :irb),
          s(:arg, :ret)),
        s(:send, nil, :throw,
          s(:sym, :IRB_EXIT),
          s(:lvar, :ret))),
      s(:defs,
        s(:const, nil, :IRB), :irb_abort,
        s(:args,
          s(:arg, :irb),
          s(:optarg, :exception,
            s(:const, nil, :Abort))),
        s(:if,
          s(:defined?,
            s(:const, nil, :Thread)),
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :irb), :context), :thread), :raise,
            s(:lvar, :exception),
            s(:str, "abort then interrupt!")),
          s(:send, nil, :raise,
            s(:lvar, :exception),
            s(:str, "abort then interrupt!")))),
      s(:class,
        s(:const, nil, :Irb), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:optarg, :workspace,
                s(:nil)),
              s(:optarg, :input_method,
                s(:nil)),
              s(:optarg, :output_method,
                s(:nil))),
            s(:begin,
              s(:ivasgn, :@context,
                s(:send,
                  s(:const, nil, :Context), :new,
                  s(:self),
                  s(:lvar, :workspace),
                  s(:lvar, :input_method),
                  s(:lvar, :output_method))),
              s(:send,
                s(:send,
                  s(:ivar, :@context), :main), :extend,
                s(:const, nil, :ExtendCommandBundle)),
              s(:ivasgn, :@signal_status,
                s(:sym, :IN_IRB)),
              s(:ivasgn, :@scanner,
                s(:send,
                  s(:const, nil, :RubyLex), :new)),
              s(:send,
                s(:ivar, :@scanner), :exception_on_syntax_error=,
                s(:false)))),
          s(:send, nil, :attr_reader,
            s(:sym, :context)),
          s(:send, nil, :attr_accessor,
            s(:sym, :scanner)),
          s(:def, :eval_input,
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:ivar, :@scanner), :set_prompt),
                s(:args,
                  s(:arg, :ltype),
                  s(:arg, :indent),
                  s(:arg, :continue),
                  s(:arg, :line_no)),
                s(:begin,
                  s(:if,
                    s(:lvar, :ltype),
                    s(:lvasgn, :f,
                      s(:send,
                        s(:ivar, :@context), :prompt_s)),
                    s(:if,
                      s(:lvar, :continue),
                      s(:lvasgn, :f,
                        s(:send,
                          s(:ivar, :@context), :prompt_c)),
                      s(:if,
                        s(:send,
                          s(:lvar, :indent), :>,
                          s(:int, 0)),
                        s(:lvasgn, :f,
                          s(:send,
                            s(:ivar, :@context), :prompt_n)),
                        s(:lvasgn, :f,
                          s(:send,
                            s(:ivar, :@context), :prompt_i))))),
                  s(:if,
                    s(:lvar, :f), nil,
                    s(:lvasgn, :f,
                      s(:str, ""))),
                  s(:if,
                    s(:send,
                      s(:ivar, :@context), :prompting?),
                    s(:send,
                      s(:send,
                        s(:ivar, :@context), :io), :prompt=,
                      s(:lvasgn, :p,
                        s(:send, nil, :prompt,
                          s(:lvar, :f),
                          s(:lvar, :ltype),
                          s(:lvar, :indent),
                          s(:lvar, :line_no)))),
                    s(:send,
                      s(:send,
                        s(:ivar, :@context), :io), :prompt=,
                      s(:lvasgn, :p,
                        s(:str, "")))),
                  s(:if,
                    s(:send,
                      s(:ivar, :@context), :auto_indent_mode),
                    s(:if,
                      s(:lvar, :ltype), nil,
                      s(:begin,
                        s(:lvasgn, :ind,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:send, nil, :prompt,
                                    s(:send,
                                      s(:ivar, :@context), :prompt_i),
                                    s(:lvar, :ltype),
                                    s(:lvar, :indent),
                                    s(:lvar, :line_no)), :[],
                                  s(:regexp,
                                    s(:str, ".*\\z"),
                                    s(:regopt))), :size), :+,
                              s(:send,
                                s(:lvar, :indent), :*,
                                s(:int, 2))), :-,
                            s(:send,
                              s(:lvar, :p), :size))),
                        s(:if,
                          s(:lvar, :continue),
                          s(:op_asgn,
                            s(:lvasgn, :ind), :+,
                            s(:int, 2)), nil),
                        s(:if,
                          s(:send,
                            s(:lvar, :ind), :>,
                            s(:int, 0)),
                          s(:send,
                            s(:send,
                              s(:ivar, :@context), :io), :prompt=,
                            s(:send,
                              s(:lvar, :p), :+,
                              s(:send,
                                s(:str, " "), :*,
                                s(:lvar, :ind)))), nil))), nil))),
              s(:block,
                s(:send,
                  s(:ivar, :@scanner), :set_input,
                  s(:send,
                    s(:ivar, :@context), :io)),
                s(:args),
                s(:block,
                  s(:send, nil, :signal_status,
                    s(:sym, :IN_INPUT)),
                  s(:args),
                  s(:begin,
                    s(:if,
                      s(:lvasgn, :l,
                        s(:send,
                          s(:send,
                            s(:ivar, :@context), :io), :gets)),
                      s(:if,
                        s(:send,
                          s(:ivar, :@context), :verbose?),
                        s(:send, nil, :print,
                          s(:lvar, :l)), nil),
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:ivar, :@context), :ignore_eof?),
                          s(:send,
                            s(:send,
                              s(:ivar, :@context), :io), :readable_after_eof?)),
                        s(:begin,
                          s(:lvasgn, :l,
                            s(:str, "\n")),
                          s(:if,
                            s(:send,
                              s(:ivar, :@context), :verbose?),
                            s(:send, nil, :printf,
                              s(:str, "Use \"exit\" to leave %s\n"),
                              s(:send,
                                s(:ivar, :@context), :ap_name)), nil)),
                        s(:send, nil, :print,
                          s(:str, "\n")))),
                    s(:lvar, :l)))),
              s(:block,
                s(:send,
                  s(:ivar, :@scanner), :each_top_level_statement),
                s(:args,
                  s(:arg, :line),
                  s(:arg, :line_no)),
                s(:block,
                  s(:send, nil, :signal_status,
                    s(:sym, :IN_EVAL)),
                  s(:args),
                  s(:begin,
                    s(:kwbegin,
                      s(:rescue,
                        s(:begin,
                          s(:send,
                            s(:lvar, :line), :untaint),
                          s(:send,
                            s(:ivar, :@context), :evaluate,
                            s(:lvar, :line),
                            s(:lvar, :line_no)),
                          s(:if,
                            s(:send,
                              s(:ivar, :@context), :echo?),
                            s(:send, nil, :output_value), nil),
                          s(:lvasgn, :exc,
                            s(:nil))),
                        s(:resbody,
                          s(:array,
                            s(:const, nil, :Interrupt)),
                          s(:lvasgn, :exc), nil),
                        s(:resbody,
                          s(:array,
                            s(:const, nil, :SystemExit),
                            s(:const, nil, :SignalException)), nil,
                          s(:send, nil, :raise)),
                        s(:resbody,
                          s(:array,
                            s(:const, nil, :Exception)),
                          s(:lvasgn, :exc), nil), nil)),
                    s(:if,
                      s(:lvar, :exc),
                      s(:begin,
                        s(:send, nil, :print,
                          s(:send,
                            s(:lvar, :exc), :class),
                          s(:str, ": "),
                          s(:lvar, :exc),
                          s(:str, "\n")),
                        s(:if,
                          s(:and,
                            s(:and,
                              s(:and,
                                s(:send,
                                  s(:lvar, :exc), :backtrace),
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :exc), :backtrace), :[],
                                    s(:int, 0)), :=~,
                                  s(:regexp,
                                    s(:str, "irb(2)?(/.*|-.*|\\.rb)?:"),
                                    s(:regopt)))),
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :exc), :class), :to_s), :!~,
                                s(:regexp,
                                  s(:str, "^IRB"),
                                  s(:regopt)))),
                            s(:send,
                              s(:begin,
                                s(:send,
                                  s(:const, nil, :SyntaxError), :===,
                                  s(:lvar, :exc))), :!)),
                          s(:lvasgn, :irb_bug,
                            s(:true)),
                          s(:lvasgn, :irb_bug,
                            s(:false))),
                        s(:lvasgn, :messages,
                          s(:array)),
                        s(:lvasgn, :lasts,
                          s(:array)),
                        s(:lvasgn, :levels,
                          s(:int, 0)),
                        s(:if,
                          s(:send,
                            s(:lvar, :exc), :backtrace),
                          s(:for,
                            s(:lvasgn, :m),
                            s(:send,
                              s(:lvar, :exc), :backtrace),
                            s(:begin,
                              s(:if,
                                s(:lvar, :irb_bug), nil,
                                s(:lvasgn, :m,
                                  s(:send,
                                    s(:send,
                                      s(:ivar, :@context), :workspace), :filter_backtrace,
                                    s(:lvar, :m)))),
                              s(:if,
                                s(:lvar, :m),
                                s(:if,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :messages), :size), :<,
                                    s(:send,
                                      s(:ivar, :@context), :back_trace_limit)),
                                  s(:send,
                                    s(:lvar, :messages), :push,
                                    s(:send,
                                      s(:str, "\tfrom "), :+,
                                      s(:lvar, :m))),
                                  s(:begin,
                                    s(:send,
                                      s(:lvar, :lasts), :push,
                                      s(:send,
                                        s(:str, "\tfrom "), :+,
                                        s(:lvar, :m))),
                                    s(:if,
                                      s(:send,
                                        s(:send,
                                          s(:lvar, :lasts), :size), :>,
                                        s(:send,
                                          s(:ivar, :@context), :back_trace_limit)),
                                      s(:begin,
                                        s(:send,
                                          s(:lvar, :lasts), :shift),
                                        s(:op_asgn,
                                          s(:lvasgn, :levels), :+,
                                          s(:int, 1))), nil))), nil))), nil),
                        s(:send, nil, :print,
                          s(:send,
                            s(:lvar, :messages), :join,
                            s(:str, "\n")),
                          s(:str, "\n")),
                        s(:if,
                          s(:send,
                            s(:lvar, :lasts), :empty?), nil,
                          s(:begin,
                            s(:if,
                              s(:send,
                                s(:lvar, :levels), :>,
                                s(:int, 0)),
                              s(:send, nil, :printf,
                                s(:str, "... %d levels...\n"),
                                s(:lvar, :levels)), nil),
                            s(:send, nil, :print,
                              s(:send,
                                s(:lvar, :lasts), :join,
                                s(:str, "\n")),
                              s(:str, "\n")))),
                        s(:if,
                          s(:lvar, :irb_bug),
                          s(:send, nil, :print,
                            s(:str, "Maybe IRB bug!\n")), nil)), nil),
                    s(:if,
                      s(:send,
                        s(:gvar, :$SAFE), :>,
                        s(:int, 2)),
                      s(:send, nil, :abort,
                        s(:str, "Error: irb does not work for $SAFE level higher than 2")), nil)))))),
          s(:def, :suspend_name,
            s(:args,
              s(:optarg, :path,
                s(:nil)),
              s(:optarg, :name,
                s(:nil))),
            s(:begin,
              s(:if,
                s(:lvar, :path),
                s(:masgn,
                  s(:mlhs,
                    s(:send,
                      s(:ivar, :@context), :irb_path=),
                    s(:lvasgn, :back_path)),
                  s(:array,
                    s(:lvar, :path),
                    s(:send,
                      s(:ivar, :@context), :irb_path))), nil),
              s(:if,
                s(:lvar, :name),
                s(:masgn,
                  s(:mlhs,
                    s(:send,
                      s(:ivar, :@context), :irb_name=),
                    s(:lvasgn, :back_name)),
                  s(:array,
                    s(:lvar, :name),
                    s(:send,
                      s(:ivar, :@context), :irb_name))), nil),
              s(:kwbegin,
                s(:ensure,
                  s(:yield,
                    s(:lvar, :back_path),
                    s(:lvar, :back_name)),
                  s(:begin,
                    s(:if,
                      s(:lvar, :path),
                      s(:send,
                        s(:ivar, :@context), :irb_path=,
                        s(:lvar, :back_path)), nil),
                    s(:if,
                      s(:lvar, :name),
                      s(:send,
                        s(:ivar, :@context), :irb_name=,
                        s(:lvar, :back_name)), nil)))))),
          s(:def, :suspend_workspace,
            s(:args,
              s(:arg, :workspace)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:send,
                    s(:ivar, :@context), :workspace=),
                  s(:lvasgn, :back_workspace)),
                s(:array,
                  s(:lvar, :workspace),
                  s(:send,
                    s(:ivar, :@context), :workspace))),
              s(:kwbegin,
                s(:ensure,
                  s(:yield,
                    s(:lvar, :back_workspace)),
                  s(:send,
                    s(:ivar, :@context), :workspace=,
                    s(:lvar, :back_workspace)))))),
          s(:def, :suspend_input_method,
            s(:args,
              s(:arg, :input_method)),
            s(:begin,
              s(:lvasgn, :back_io,
                s(:send,
                  s(:ivar, :@context), :io)),
              s(:block,
                s(:send,
                  s(:ivar, :@context), :instance_eval),
                s(:args),
                s(:ivasgn, :@io,
                  s(:lvar, :input_method))),
              s(:kwbegin,
                s(:ensure,
                  s(:yield,
                    s(:lvar, :back_io)),
                  s(:block,
                    s(:send,
                      s(:ivar, :@context), :instance_eval),
                    s(:args),
                    s(:ivasgn, :@io,
                      s(:lvar, :back_io))))))),
          s(:def, :suspend_context,
            s(:args,
              s(:arg, :context)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@context),
                  s(:lvasgn, :back_context)),
                s(:array,
                  s(:lvar, :context),
                  s(:ivar, :@context))),
              s(:kwbegin,
                s(:ensure,
                  s(:yield,
                    s(:lvar, :back_context)),
                  s(:ivasgn, :@context,
                    s(:lvar, :back_context)))))),
          s(:def, :signal_handle,
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@context), :ignore_sigint?), nil,
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:ivar, :@context), :verbose?),
                    s(:send, nil, :print,
                      s(:str, "\nabort!\n")), nil),
                  s(:send, nil, :exit))),
              s(:case,
                s(:ivar, :@signal_status),
                s(:when,
                  s(:sym, :IN_INPUT),
                  s(:begin,
                    s(:send, nil, :print,
                      s(:str, "^C\n")),
                    s(:send, nil, :raise,
                      s(:const,
                        s(:const, nil, :RubyLex), :TerminateLineInput)))),
                s(:when,
                  s(:sym, :IN_EVAL),
                  s(:send,
                    s(:const, nil, :IRB), :irb_abort,
                    s(:self))),
                s(:when,
                  s(:sym, :IN_LOAD),
                  s(:send,
                    s(:const, nil, :IRB), :irb_abort,
                    s(:self),
                    s(:const, nil, :LoadAbort))),
                s(:when,
                  s(:sym, :IN_IRB), nil), nil))),
          s(:def, :signal_status,
            s(:args,
              s(:arg, :status)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@signal_status), :==,
                  s(:sym, :IN_LOAD)),
                s(:return,
                  s(:yield)), nil),
              s(:lvasgn, :signal_status_back,
                s(:ivar, :@signal_status)),
              s(:ivasgn, :@signal_status,
                s(:lvar, :status)),
              s(:kwbegin,
                s(:ensure,
                  s(:yield),
                  s(:ivasgn, :@signal_status,
                    s(:lvar, :signal_status_back)))))),
          s(:def, :prompt,
            s(:args,
              s(:arg, :prompt),
              s(:arg, :ltype),
              s(:arg, :indent),
              s(:arg, :line_no)),
            s(:begin,
              s(:lvasgn, :p,
                s(:send,
                  s(:lvar, :prompt), :dup)),
              s(:block,
                s(:send,
                  s(:lvar, :p), :gsub!,
                  s(:regexp,
                    s(:str, "%([0-9]+)?([a-zA-Z])"),
                    s(:regopt))),
                s(:args),
                s(:case,
                  s(:nth_ref, 2),
                  s(:when,
                    s(:str, "N"),
                    s(:send,
                      s(:ivar, :@context), :irb_name)),
                  s(:when,
                    s(:str, "m"),
                    s(:send,
                      s(:send,
                        s(:ivar, :@context), :main), :to_s)),
                  s(:when,
                    s(:str, "M"),
                    s(:send,
                      s(:send,
                        s(:ivar, :@context), :main), :inspect)),
                  s(:when,
                    s(:str, "l"),
                    s(:lvar, :ltype)),
                  s(:when,
                    s(:str, "i"),
                    s(:if,
                      s(:nth_ref, 1),
                      s(:send, nil, :format,
                        s(:send,
                          s(:send,
                            s(:str, "%"), :+,
                            s(:nth_ref, 1)), :+,
                          s(:str, "d")),
                        s(:lvar, :indent)),
                      s(:send,
                        s(:lvar, :indent), :to_s))),
                  s(:when,
                    s(:str, "n"),
                    s(:if,
                      s(:nth_ref, 1),
                      s(:send, nil, :format,
                        s(:send,
                          s(:send,
                            s(:str, "%"), :+,
                            s(:nth_ref, 1)), :+,
                          s(:str, "d")),
                        s(:lvar, :line_no)),
                      s(:send,
                        s(:lvar, :line_no), :to_s))),
                  s(:when,
                    s(:str, "%"),
                    s(:str, "%")), nil)),
              s(:lvar, :p))),
          s(:def, :output_value,
            s(:args),
            s(:send, nil, :printf,
              s(:send,
                s(:ivar, :@context), :return_format),
              s(:send,
                s(:ivar, :@context), :inspect_last_value))),
          s(:def, :inspect,
            s(:args),
            s(:begin,
              s(:lvasgn, :ary,
                s(:array)),
              s(:for,
                s(:lvasgn, :iv),
                s(:send, nil, :instance_variables),
                s(:case,
                  s(:begin,
                    s(:lvasgn, :iv,
                      s(:send,
                        s(:lvar, :iv), :to_s))),
                  s(:when,
                    s(:str, "@signal_status"),
                    s(:send,
                      s(:lvar, :ary), :push,
                      s(:send, nil, :format,
                        s(:str, "%s=:%s"),
                        s(:lvar, :iv),
                        s(:send,
                          s(:ivar, :@signal_status), :id2name)))),
                  s(:when,
                    s(:str, "@context"),
                    s(:send,
                      s(:lvar, :ary), :push,
                      s(:send, nil, :format,
                        s(:str, "%s=%s"),
                        s(:lvar, :iv),
                        s(:send,
                          s(:send, nil, :eval,
                            s(:lvar, :iv)), :__to_s__)))),
                  s(:send,
                    s(:lvar, :ary), :push,
                    s(:send, nil, :format,
                      s(:str, "%s=%s"),
                      s(:lvar, :iv),
                      s(:send, nil, :eval,
                        s(:lvar, :iv)))))),
              s(:send, nil, :format,
                s(:str, "#<%s: %s>"),
                s(:send,
                  s(:self), :class),
                s(:send,
                  s(:lvar, :ary), :join,
                  s(:str, ", "))))))),
      s(:defs,
        s(:ivar, :@CONF), :inspect,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:self), :[],
              s(:sym, :VERSION)), nil,
            s(:send,
              s(:const, nil, :IRB), :version)),
          s(:lvasgn, :array,
            s(:array)),
          s(:for,
            s(:mlhs,
              s(:lvasgn, :k),
              s(:lvasgn, :v)),
            s(:block,
              s(:send, nil, :sort),
              s(:args,
                s(:arg, :a1),
                s(:arg, :a2)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :a1), :[],
                    s(:int, 0)), :id2name), :<=>,
                s(:send,
                  s(:send,
                    s(:lvar, :a2), :[],
                    s(:int, 0)), :id2name))),
            s(:case,
              s(:lvar, :k),
              s(:when,
                s(:sym, :MAIN_CONTEXT),
                s(:sym, :__TMP__EHV__),
                s(:send,
                  s(:lvar, :array), :push,
                  s(:send, nil, :format,
                    s(:str, "CONF[:%s]=...myself..."),
                    s(:send,
                      s(:lvar, :k), :id2name)))),
              s(:when,
                s(:sym, :PROMPT),
                s(:begin,
                  s(:lvasgn, :s,
                    s(:block,
                      s(:send,
                        s(:lvar, :v), :collect),
                      s(:args,
                        s(:arg, :kk),
                        s(:arg, :vv)),
                      s(:begin,
                        s(:lvasgn, :ss,
                          s(:block,
                            s(:send,
                              s(:lvar, :vv), :collect),
                            s(:args,
                              s(:arg, :kkk),
                              s(:arg, :vvv)),
                            s(:dstr,
                              s(:str, ":"),
                              s(:begin,
                                s(:send,
                                  s(:lvar, :kkk), :id2name)),
                              s(:str, "=>"),
                              s(:begin,
                                s(:send,
                                  s(:lvar, :vvv), :inspect))))),
                        s(:send, nil, :format,
                          s(:str, ":%s=>{%s}"),
                          s(:send,
                            s(:lvar, :kk), :id2name),
                          s(:send,
                            s(:lvar, :ss), :join,
                            s(:str, ", ")))))),
                  s(:send,
                    s(:lvar, :array), :push,
                    s(:send, nil, :format,
                      s(:str, "CONF[:%s]={%s}"),
                      s(:send,
                        s(:lvar, :k), :id2name),
                      s(:send,
                        s(:lvar, :s), :join,
                        s(:str, ", ")))))),
              s(:send,
                s(:lvar, :array), :push,
                s(:send, nil, :format,
                  s(:str, "CONF[:%s]=%s"),
                  s(:send,
                    s(:lvar, :k), :id2name),
                  s(:send,
                    s(:lvar, :v), :inspect))))),
          s(:send,
            s(:lvar, :array), :join,
            s(:str, "\n")))))))
