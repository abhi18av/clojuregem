s(:class,
  s(:const, nil, :OpenStruct), nil,
  s(:begin,
    s(:sclass,
      s(:self),
      s(:alias,
        s(:sym, :allocate),
        s(:sym, :new))),
    s(:def, :initialize,
      s(:args,
        s(:optarg, :hash,
          s(:nil))),
      s(:begin,
        s(:ivasgn, :@table,
          s(:hash)),
        s(:if,
          s(:lvar, :hash),
          s(:block,
            s(:send,
              s(:lvar, :hash), :each_pair),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:begin,
              s(:lvasgn, :k,
                s(:send,
                  s(:lvar, :k), :to_sym)),
              s(:send,
                s(:ivar, :@table), :[]=,
                s(:lvar, :k),
                s(:lvar, :v)))), nil))),
    s(:def, :initialize_copy,
      s(:args,
        s(:arg, :orig)),
      s(:begin,
        s(:zsuper),
        s(:ivasgn, :@table,
          s(:send,
            s(:ivar, :@table), :dup)))),
    s(:def, :to_h,
      s(:args),
      s(:send,
        s(:ivar, :@table), :dup)),
    s(:def, :each_pair,
      s(:args),
      s(:begin,
        s(:if,
          s(:send, nil, :block_given?), nil,
          s(:return,
            s(:block,
              s(:send, nil, :to_enum,
                s(:send, nil, :__method__)),
              s(:args),
              s(:send,
                s(:ivar, :@table), :size)))),
        s(:block,
          s(:send,
            s(:ivar, :@table), :each_pair),
          s(:args,
            s(:arg, :p)),
          s(:yield,
            s(:lvar, :p))))),
    s(:def, :marshal_dump,
      s(:args),
      s(:ivar, :@table)),
    s(:def, :marshal_load,
      s(:args,
        s(:arg, :x)),
      s(:ivasgn, :@table,
        s(:lvar, :x))),
    s(:def, :modifiable,
      s(:args),
      s(:begin,
        s(:kwbegin,
          s(:rescue,
            s(:ivasgn, :@modifiable,
              s(:true)),
            s(:resbody, nil, nil,
              s(:send, nil, :raise,
                s(:const, nil, :RuntimeError),
                s(:dstr,
                  s(:str, "can't modify frozen "),
                  s(:begin,
                    s(:send,
                      s(:self), :class))),
                s(:send, nil, :caller,
                  s(:int, 3)))), nil)),
        s(:ivar, :@table))),
    s(:send, nil, :protected,
      s(:sym, :modifiable)),
    s(:def, :new_ostruct_member,
      s(:args,
        s(:arg, :name)),
      s(:begin,
        s(:lvasgn, :name,
          s(:send,
            s(:lvar, :name), :to_sym)),
        s(:if,
          s(:send,
            s(:send, nil, :singleton_class), :method_defined?,
            s(:lvar, :name)), nil,
          s(:begin,
            s(:block,
              s(:send, nil, :define_singleton_method,
                s(:lvar, :name)),
              s(:args),
              s(:send,
                s(:ivar, :@table), :[],
                s(:lvar, :name))),
            s(:block,
              s(:send, nil, :define_singleton_method,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :name)),
                  s(:str, "="))),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:send, nil, :modifiable), :[]=,
                s(:lvar, :name),
                s(:lvar, :x))))),
        s(:lvar, :name))),
    s(:send, nil, :protected,
      s(:sym, :new_ostruct_member)),
    s(:def, :freeze,
      s(:args),
      s(:begin,
        s(:block,
          s(:send,
            s(:ivar, :@table), :each_key),
          s(:args,
            s(:arg, :key)),
          s(:send, nil, :new_ostruct_member,
            s(:lvar, :key))),
        s(:zsuper))),
    s(:def, :respond_to_missing?,
      s(:args,
        s(:arg, :mid),
        s(:optarg, :include_private,
          s(:false))),
      s(:begin,
        s(:lvasgn, :mname,
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :mid), :to_s), :chomp,
              s(:str, "=")), :to_sym)),
        s(:or,
          s(:send,
            s(:ivar, :@table), :key?,
            s(:lvar, :mname)),
          s(:zsuper)))),
    s(:def, :method_missing,
      s(:args,
        s(:arg, :mid),
        s(:restarg, :args)),
      s(:begin,
        s(:lvasgn, :len,
          s(:send,
            s(:lvar, :args), :length)),
        s(:if,
          s(:lvasgn, :mname,
            s(:send,
              s(:lvar, :mid), :[],
              s(:regexp,
                s(:str, ".*(?==\\z)"),
                s(:regopt, :m)))),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :len), :!=,
                s(:int, 1)),
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:dstr,
                  s(:str, "wrong number of arguments ("),
                  s(:begin,
                    s(:lvar, :len)),
                  s(:str, " for 1)")),
                s(:send, nil, :caller,
                  s(:int, 1))), nil),
            s(:send,
              s(:send, nil, :modifiable), :[]=,
              s(:send, nil, :new_ostruct_member,
                s(:lvar, :mname)),
              s(:send,
                s(:lvar, :args), :[],
                s(:int, 0)))),
          s(:if,
            s(:send,
              s(:lvar, :len), :==,
              s(:int, 0)),
            s(:if,
              s(:send,
                s(:ivar, :@table), :key?,
                s(:lvar, :mid)),
              s(:begin,
                s(:send, nil, :new_ostruct_member,
                  s(:lvar, :mid)),
                s(:send,
                  s(:ivar, :@table), :[],
                  s(:lvar, :mid))), nil),
            s(:begin,
              s(:lvasgn, :err,
                s(:send,
                  s(:const, nil, :NoMethodError), :new,
                  s(:dstr,
                    s(:str, "undefined method `"),
                    s(:begin,
                      s(:lvar, :mid)),
                    s(:str, "' for "),
                    s(:begin,
                      s(:self))),
                  s(:lvar, :mid),
                  s(:lvar, :args))),
              s(:send,
                s(:lvar, :err), :set_backtrace,
                s(:send, nil, :caller,
                  s(:int, 1))),
              s(:send, nil, :raise,
                s(:lvar, :err))))))),
    s(:def, :[],
      s(:args,
        s(:arg, :name)),
      s(:send,
        s(:ivar, :@table), :[],
        s(:send,
          s(:lvar, :name), :to_sym))),
    s(:def, :[]=,
      s(:args,
        s(:arg, :name),
        s(:arg, :value)),
      s(:send,
        s(:send, nil, :modifiable), :[]=,
        s(:send, nil, :new_ostruct_member,
          s(:lvar, :name)),
        s(:lvar, :value))),
    s(:def, :dig,
      s(:args,
        s(:arg, :name),
        s(:restarg, :names)),
      s(:begin,
        s(:kwbegin,
          s(:rescue,
            s(:lvasgn, :name,
              s(:send,
                s(:lvar, :name), :to_sym)),
            s(:resbody,
              s(:array,
                s(:const, nil, :NoMethodError)), nil,
              s(:send, nil, :raise,
                s(:const, nil, :TypeError),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :name)),
                  s(:str, " is not a symbol nor a string")))), nil)),
        s(:send,
          s(:ivar, :@table), :dig,
          s(:lvar, :name),
          s(:splat,
            s(:lvar, :names))))),
    s(:def, :delete_field,
      s(:args,
        s(:arg, :name)),
      s(:begin,
        s(:lvasgn, :sym,
          s(:send,
            s(:lvar, :name), :to_sym)),
        s(:kwbegin,
          s(:rescue,
            s(:send,
              s(:send, nil, :singleton_class), :__send__,
              s(:sym, :remove_method),
              s(:lvar, :sym),
              s(:dstr,
                s(:begin,
                  s(:lvar, :sym)),
                s(:str, "="))),
            s(:resbody,
              s(:array,
                s(:const, nil, :NameError)), nil, nil), nil)),
        s(:block,
          s(:send,
            s(:ivar, :@table), :delete,
            s(:lvar, :sym)),
          s(:args),
          s(:send, nil, :raise,
            s(:send,
              s(:const, nil, :NameError), :new,
              s(:dstr,
                s(:str, "no field `"),
                s(:begin,
                  s(:lvar, :sym)),
                s(:str, "' in "),
                s(:begin,
                  s(:self))),
              s(:lvar, :sym)))))),
    s(:casgn, nil, :InspectKey,
      s(:sym, :__inspect_key__)),
    s(:def, :inspect,
      s(:args),
      s(:begin,
        s(:lvasgn, :str,
          s(:dstr,
            s(:str, "#<"),
            s(:begin,
              s(:send,
                s(:self), :class)))),
        s(:lvasgn, :ids,
          s(:begin,
            s(:or_asgn,
              s(:send,
                s(:send,
                  s(:const, nil, :Thread), :current), :[],
                s(:const, nil, :InspectKey)),
              s(:array)))),
        s(:if,
          s(:send,
            s(:lvar, :ids), :include?,
            s(:send, nil, :object_id)),
          s(:return,
            s(:send,
              s(:lvar, :str), :<<,
              s(:str, " ...>"))), nil),
        s(:send,
          s(:lvar, :ids), :<<,
          s(:send, nil, :object_id)),
        s(:kwbegin,
          s(:ensure,
            s(:begin,
              s(:lvasgn, :first,
                s(:true)),
              s(:for,
                s(:mlhs,
                  s(:lvasgn, :k),
                  s(:lvasgn, :v)),
                s(:ivar, :@table),
                s(:begin,
                  s(:if,
                    s(:lvar, :first), nil,
                    s(:send,
                      s(:lvar, :str), :<<,
                      s(:str, ","))),
                  s(:lvasgn, :first,
                    s(:false)),
                  s(:send,
                    s(:lvar, :str), :<<,
                    s(:dstr,
                      s(:str, " "),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, "="),
                      s(:begin,
                        s(:send,
                          s(:lvar, :v), :inspect)))))),
              s(:return,
                s(:send,
                  s(:lvar, :str), :<<,
                  s(:str, ">")))),
            s(:send,
              s(:lvar, :ids), :pop))))),
    s(:alias,
      s(:sym, :to_s),
      s(:sym, :inspect)),
    s(:send, nil, :attr_reader,
      s(:sym, :table)),
    s(:send, nil, :protected,
      s(:sym, :table)),
    s(:def, :==,
      s(:args,
        s(:arg, :other)),
      s(:begin,
        s(:if,
          s(:send,
            s(:lvar, :other), :kind_of?,
            s(:const, nil, :OpenStruct)), nil,
          s(:return,
            s(:false))),
        s(:send,
          s(:ivar, :@table), :==,
          s(:send,
            s(:lvar, :other), :table)))),
    s(:def, :eql?,
      s(:args,
        s(:arg, :other)),
      s(:begin,
        s(:if,
          s(:send,
            s(:lvar, :other), :kind_of?,
            s(:const, nil, :OpenStruct)), nil,
          s(:return,
            s(:false))),
        s(:send,
          s(:ivar, :@table), :eql?,
          s(:send,
            s(:lvar, :other), :table)))),
    s(:def, :hash,
      s(:args),
      s(:send,
        s(:ivar, :@table), :hash))))
