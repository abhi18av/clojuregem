s(:begin,
  s(:send, nil, :require,
    s(:str, "webrick/httprequest")),
  s(:send, nil, :require,
    s(:str, "webrick/httpresponse")),
  s(:send, nil, :require,
    s(:str, "webrick/config")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:module,
    s(:const, nil, :WEBrick),
    s(:class,
      s(:const, nil, :CGI), nil,
      s(:begin,
        s(:casgn, nil, :CGIError,
          s(:send,
            s(:const, nil, :Class), :new,
            s(:const, nil, :StandardError))),
        s(:send, nil, :attr_reader,
          s(:sym, :config)),
        s(:send, nil, :attr_reader,
          s(:sym, :logger)),
        s(:def, :initialize,
          s(:args,
            s(:restarg, :args)),
          s(:begin,
            s(:if,
              s(:defined?,
                s(:const, nil, :MOD_RUBY)),
              s(:if,
                s(:send,
                  s(:const, nil, :ENV), :has_key?,
                  s(:str, "GATEWAY_INTERFACE")), nil,
                s(:send,
                  s(:send,
                    s(:const, nil, :Apache), :request), :setup_cgi_env)), nil),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "HTTP/(\\d+\\.\\d+)"),
                  s(:regopt)),
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:str, "SERVER_PROTOCOL"))),
              s(:lvasgn, :httpv,
                s(:nth_ref, 1)), nil),
            s(:ivasgn, :@config,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :WEBrick), :Config), :HTTP), :dup), :update,
                s(:hash,
                  s(:pair,
                    s(:sym, :ServerSoftware),
                    s(:or,
                      s(:send,
                        s(:const, nil, :ENV), :[],
                        s(:str, "SERVER_SOFTWARE")),
                      s(:str, "null"))),
                  s(:pair,
                    s(:sym, :HTTPVersion),
                    s(:send,
                      s(:const, nil, :HTTPVersion), :new,
                      s(:or,
                        s(:lvar, :httpv),
                        s(:str, "1.0")))),
                  s(:pair,
                    s(:sym, :RunOnCGI),
                    s(:true)),
                  s(:pair,
                    s(:sym, :NPH),
                    s(:false))))),
            s(:if,
              s(:lvasgn, :config,
                s(:send,
                  s(:lvar, :args), :shift)),
              s(:send,
                s(:ivar, :@config), :update,
                s(:lvar, :config)), nil),
            s(:or_asgn,
              s(:send,
                s(:ivar, :@config), :[],
                s(:sym, :Logger)),
              s(:send,
                s(:const,
                  s(:const, nil, :WEBrick), :BasicLog), :new,
                s(:gvar, :$stderr))),
            s(:ivasgn, :@logger,
              s(:send,
                s(:ivar, :@config), :[],
                s(:sym, :Logger))),
            s(:ivasgn, :@options,
              s(:lvar, :args)))),
        s(:def, :[],
          s(:args,
            s(:arg, :key)),
          s(:send,
            s(:ivar, :@config), :[],
            s(:lvar, :key))),
        s(:def, :start,
          s(:args,
            s(:optarg, :env,
              s(:const, nil, :ENV)),
            s(:optarg, :stdin,
              s(:gvar, :$stdin)),
            s(:optarg, :stdout,
              s(:gvar, :$stdout))),
          s(:begin,
            s(:lvasgn, :sock,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :WEBrick), :CGI), :Socket), :new,
                s(:ivar, :@config),
                s(:lvar, :env),
                s(:lvar, :stdin),
                s(:lvar, :stdout))),
            s(:lvasgn, :req,
              s(:send,
                s(:const, nil, :HTTPRequest), :new,
                s(:ivar, :@config))),
            s(:lvasgn, :res,
              s(:send,
                s(:const, nil, :HTTPResponse), :new,
                s(:ivar, :@config))),
            s(:if,
              s(:or,
                s(:send,
                  s(:ivar, :@config), :[],
                  s(:sym, :NPH)),
                s(:defined?,
                  s(:const, nil, :MOD_RUBY))), nil,
              s(:begin,
                s(:defs,
                  s(:lvar, :res), :setup_header,
                  s(:args),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:ivar, :@header), :[],
                        s(:str, "status")), nil,
                      s(:begin,
                        s(:lvasgn, :phrase,
                          s(:send,
                            s(:const, nil, :HTTPStatus), :reason_phrase,
                            s(:ivar, :@status))),
                        s(:send,
                          s(:ivar, :@header), :[]=,
                          s(:str, "status"),
                          s(:dstr,
                            s(:begin,
                              s(:ivar, :@status)),
                            s(:str, " "),
                            s(:begin,
                              s(:lvar, :phrase)))))),
                    s(:zsuper))),
                s(:defs,
                  s(:lvar, :res), :status_line,
                  s(:args),
                  s(:str, "")))),
            s(:kwbegin,
              s(:ensure,
                s(:rescue,
                  s(:begin,
                    s(:send,
                      s(:lvar, :req), :parse,
                      s(:lvar, :sock)),
                    s(:send,
                      s(:lvar, :req), :script_name=,
                      s(:send,
                        s(:begin,
                          s(:or,
                            s(:send,
                              s(:lvar, :env), :[],
                              s(:str, "SCRIPT_NAME")),
                            s(:send,
                              s(:const, nil, :File), :expand_path,
                              s(:gvar, :$0)))), :dup)),
                    s(:send,
                      s(:lvar, :req), :path_info=,
                      s(:send,
                        s(:begin,
                          s(:or,
                            s(:send,
                              s(:lvar, :env), :[],
                              s(:str, "PATH_INFO")),
                            s(:str, ""))), :dup)),
                    s(:send,
                      s(:lvar, :req), :query_string=,
                      s(:send,
                        s(:lvar, :env), :[],
                        s(:str, "QUERY_STRING"))),
                    s(:send,
                      s(:lvar, :req), :user=,
                      s(:send,
                        s(:lvar, :env), :[],
                        s(:str, "REMOTE_USER"))),
                    s(:send,
                      s(:lvar, :res), :request_method=,
                      s(:send,
                        s(:lvar, :req), :request_method)),
                    s(:send,
                      s(:lvar, :res), :request_uri=,
                      s(:send,
                        s(:lvar, :req), :request_uri)),
                    s(:send,
                      s(:lvar, :res), :request_http_version=,
                      s(:send,
                        s(:lvar, :req), :http_version)),
                    s(:send,
                      s(:lvar, :res), :keep_alive=,
                      s(:send,
                        s(:lvar, :req), :keep_alive?)),
                    s(:send,
                      s(:self), :service,
                      s(:lvar, :req),
                      s(:lvar, :res))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :HTTPStatus), :Error)),
                    s(:lvasgn, :ex),
                    s(:send,
                      s(:lvar, :res), :set_error,
                      s(:lvar, :ex))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :HTTPStatus), :Status)),
                    s(:lvasgn, :ex),
                    s(:send,
                      s(:lvar, :res), :status=,
                      s(:send,
                        s(:lvar, :ex), :code))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :Exception)),
                    s(:lvasgn, :ex),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@logger), :error,
                        s(:lvar, :ex)),
                      s(:send,
                        s(:lvar, :res), :set_error,
                        s(:lvar, :ex),
                        s(:true)))), nil),
                s(:begin,
                  s(:send,
                    s(:lvar, :req), :fixup),
                  s(:if,
                    s(:defined?,
                      s(:const, nil, :MOD_RUBY)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :res), :setup_header),
                      s(:send,
                        s(:send,
                          s(:const, nil, :Apache), :request), :status_line=,
                        s(:dstr,
                          s(:begin,
                            s(:send,
                              s(:lvar, :res), :status)),
                          s(:str, " "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :res), :reason_phrase)))),
                      s(:send,
                        s(:send,
                          s(:const, nil, :Apache), :request), :status=,
                        s(:send,
                          s(:lvar, :res), :status)),
                      s(:lvasgn, :table,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Apache), :request), :headers_out)),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :res), :header), :each),
                        s(:args,
                          s(:arg, :key),
                          s(:arg, :val)),
                        s(:case,
                          s(:lvar, :key),
                          s(:when,
                            s(:regexp,
                              s(:str, "^content-encoding$"),
                              s(:regopt, :i)),
                            s(:send,
                              s(:send,
                                s(:const, nil, :Apache), :request), :content_encoding=,
                              s(:lvar, :val))),
                          s(:when,
                            s(:regexp,
                              s(:str, "^content-type$"),
                              s(:regopt, :i)),
                            s(:send,
                              s(:send,
                                s(:const, nil, :Apache), :request), :content_type=,
                              s(:lvar, :val))),
                          s(:send,
                            s(:lvar, :table), :[]=,
                            s(:lvar, :key),
                            s(:send,
                              s(:lvar, :val), :to_s)))),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :res), :cookies), :each),
                        s(:args,
                          s(:arg, :cookie)),
                        s(:send,
                          s(:lvar, :table), :add,
                          s(:str, "Set-Cookie"),
                          s(:send,
                            s(:lvar, :cookie), :to_s))),
                      s(:send,
                        s(:send,
                          s(:const, nil, :Apache), :request), :send_http_header),
                      s(:send,
                        s(:lvar, :res), :send_body,
                        s(:lvar, :sock))),
                    s(:send,
                      s(:lvar, :res), :send_response,
                      s(:lvar, :sock)))))))),
        s(:def, :service,
          s(:args,
            s(:arg, :req),
            s(:arg, :res)),
          s(:begin,
            s(:lvasgn, :method_name,
              s(:send,
                s(:str, "do_"), :+,
                s(:send,
                  s(:send,
                    s(:lvar, :req), :request_method), :gsub,
                  s(:regexp,
                    s(:str, "-"),
                    s(:regopt)),
                  s(:str, "_")))),
            s(:if,
              s(:send, nil, :respond_to?,
                s(:lvar, :method_name)),
              s(:send, nil, :__send__,
                s(:lvar, :method_name),
                s(:lvar, :req),
                s(:lvar, :res)),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :HTTPStatus), :MethodNotAllowed),
                s(:dstr,
                  s(:str, "unsupported method `"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :req), :request_method)),
                  s(:str, "'.")))))),
        s(:class,
          s(:const, nil, :Socket), nil,
          s(:begin,
            s(:send, nil, :include,
              s(:const, nil, :Enumerable)),
            s(:send, nil, :private),
            s(:def, :initialize,
              s(:args,
                s(:arg, :config),
                s(:arg, :env),
                s(:arg, :stdin),
                s(:arg, :stdout)),
              s(:begin,
                s(:ivasgn, :@config,
                  s(:lvar, :config)),
                s(:ivasgn, :@env,
                  s(:lvar, :env)),
                s(:ivasgn, :@header_part,
                  s(:send,
                    s(:const, nil, :StringIO), :new)),
                s(:ivasgn, :@body_part,
                  s(:lvar, :stdin)),
                s(:ivasgn, :@out_port,
                  s(:lvar, :stdout)),
                s(:send,
                  s(:ivar, :@out_port), :binmode),
                s(:ivasgn, :@server_addr,
                  s(:or,
                    s(:send,
                      s(:ivar, :@env), :[],
                      s(:str, "SERVER_ADDR")),
                    s(:str, "0.0.0.0"))),
                s(:ivasgn, :@server_name,
                  s(:send,
                    s(:ivar, :@env), :[],
                    s(:str, "SERVER_NAME"))),
                s(:ivasgn, :@server_port,
                  s(:send,
                    s(:ivar, :@env), :[],
                    s(:str, "SERVER_PORT"))),
                s(:ivasgn, :@remote_addr,
                  s(:send,
                    s(:ivar, :@env), :[],
                    s(:str, "REMOTE_ADDR"))),
                s(:ivasgn, :@remote_host,
                  s(:or,
                    s(:send,
                      s(:ivar, :@env), :[],
                      s(:str, "REMOTE_HOST")),
                    s(:ivar, :@remote_addr))),
                s(:ivasgn, :@remote_port,
                  s(:or,
                    s(:send,
                      s(:ivar, :@env), :[],
                      s(:str, "REMOTE_PORT")),
                    s(:int, 0))),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:ivar, :@header_part), :<<,
                          s(:send, nil, :request_line)), :<<,
                        s(:const, nil, :CRLF)),
                      s(:send, nil, :setup_header),
                      s(:send,
                        s(:ivar, :@header_part), :<<,
                        s(:const, nil, :CRLF)),
                      s(:send,
                        s(:ivar, :@header_part), :rewind)),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :Exception)), nil,
                      s(:send, nil, :raise,
                        s(:const, nil, :CGIError),
                        s(:str, "invalid CGI environment"))), nil)))),
            s(:def, :request_line,
              s(:args),
              s(:begin,
                s(:lvasgn, :meth,
                  s(:or,
                    s(:send,
                      s(:ivar, :@env), :[],
                      s(:str, "REQUEST_METHOD")),
                    s(:str, "GET"))),
                s(:if,
                  s(:lvasgn, :url,
                    s(:send,
                      s(:ivar, :@env), :[],
                      s(:str, "REQUEST_URI"))), nil,
                  s(:begin,
                    s(:lvasgn, :url,
                      s(:send,
                        s(:begin,
                          s(:or,
                            s(:send,
                              s(:ivar, :@env), :[],
                              s(:str, "SCRIPT_NAME")),
                            s(:send,
                              s(:const, nil, :File), :expand_path,
                              s(:gvar, :$0)))), :dup)),
                    s(:send,
                      s(:lvar, :url), :<<,
                      s(:send,
                        s(:send,
                          s(:ivar, :@env), :[],
                          s(:str, "PATH_INFO")), :to_s)),
                    s(:lvasgn, :url,
                      s(:send,
                        s(:const,
                          s(:const, nil, :WEBrick), :HTTPUtils), :escape_path,
                        s(:lvar, :url))),
                    s(:if,
                      s(:lvasgn, :query_string,
                        s(:send,
                          s(:ivar, :@env), :[],
                          s(:str, "QUERY_STRING"))),
                      s(:if,
                        s(:send,
                          s(:lvar, :query_string), :empty?), nil,
                        s(:send,
                          s(:send,
                            s(:lvar, :url), :<<,
                            s(:str, "?")), :<<,
                          s(:lvar, :query_string))), nil))),
                s(:lvasgn, :httpv,
                  s(:send,
                    s(:ivar, :@config), :[],
                    s(:sym, :HTTPVersion))),
                s(:return,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :meth)),
                    s(:str, " "),
                    s(:begin,
                      s(:lvar, :url)),
                    s(:str, " HTTP/"),
                    s(:begin,
                      s(:lvar, :httpv)))))),
            s(:def, :setup_header,
              s(:args),
              s(:block,
                s(:send,
                  s(:ivar, :@env), :each),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :value)),
                s(:case,
                  s(:lvar, :key),
                  s(:when,
                    s(:str, "CONTENT_TYPE"),
                    s(:str, "CONTENT_LENGTH"),
                    s(:send, nil, :add_header,
                      s(:send,
                        s(:lvar, :key), :gsub,
                        s(:regexp,
                          s(:str, "_"),
                          s(:regopt)),
                        s(:str, "-")),
                      s(:lvar, :value))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^HTTP_(.*)"),
                      s(:regopt)),
                    s(:send, nil, :add_header,
                      s(:send,
                        s(:nth_ref, 1), :gsub,
                        s(:regexp,
                          s(:str, "_"),
                          s(:regopt)),
                        s(:str, "-")),
                      s(:lvar, :value))), nil))),
            s(:def, :add_header,
              s(:args,
                s(:arg, :hdrname),
                s(:arg, :value)),
              s(:if,
                s(:send,
                  s(:lvar, :value), :empty?), nil,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:ivar, :@header_part), :<<,
                        s(:lvar, :hdrname)), :<<,
                      s(:str, ": ")), :<<,
                    s(:lvar, :value)), :<<,
                  s(:const, nil, :CRLF)))),
            s(:def, :input,
              s(:args),
              s(:if,
                s(:send,
                  s(:ivar, :@header_part), :eof?),
                s(:ivar, :@body_part),
                s(:ivar, :@header_part))),
            s(:send, nil, :public),
            s(:def, :peeraddr,
              s(:args),
              s(:array,
                s(:nil),
                s(:ivar, :@remote_port),
                s(:ivar, :@remote_host),
                s(:ivar, :@remote_addr))),
            s(:def, :addr,
              s(:args),
              s(:array,
                s(:nil),
                s(:ivar, :@server_port),
                s(:ivar, :@server_name),
                s(:ivar, :@server_addr))),
            s(:def, :gets,
              s(:args,
                s(:optarg, :eol,
                  s(:const, nil, :LF)),
                s(:optarg, :size,
                  s(:nil))),
              s(:send,
                s(:send, nil, :input), :gets,
                s(:lvar, :eol),
                s(:lvar, :size))),
            s(:def, :read,
              s(:args,
                s(:optarg, :size,
                  s(:nil))),
              s(:send,
                s(:send, nil, :input), :read,
                s(:lvar, :size))),
            s(:def, :each,
              s(:args),
              s(:block,
                s(:send,
                  s(:send, nil, :input), :each),
                s(:args,
                  s(:arg, :line)),
                s(:yield,
                  s(:lvar, :line)))),
            s(:def, :eof?,
              s(:args),
              s(:send,
                s(:send, nil, :input), :eof?)),
            s(:def, :<<,
              s(:args,
                s(:arg, :data)),
              s(:send,
                s(:ivar, :@out_port), :<<,
                s(:lvar, :data))),
            s(:def, :cert,
              s(:args),
              s(:begin,
                s(:if,
                  s(:defined?,
                    s(:const, nil, :OpenSSL)), nil,
                  s(:return,
                    s(:nil))),
                s(:if,
                  s(:lvasgn, :pem,
                    s(:send,
                      s(:ivar, :@env), :[],
                      s(:str, "SSL_SERVER_CERT"))),
                  s(:if,
                    s(:send,
                      s(:lvar, :pem), :empty?), nil,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
                      s(:lvar, :pem))), nil))),
            s(:def, :peer_cert,
              s(:args),
              s(:begin,
                s(:if,
                  s(:defined?,
                    s(:const, nil, :OpenSSL)), nil,
                  s(:return,
                    s(:nil))),
                s(:if,
                  s(:lvasgn, :pem,
                    s(:send,
                      s(:ivar, :@env), :[],
                      s(:str, "SSL_CLIENT_CERT"))),
                  s(:if,
                    s(:send,
                      s(:lvar, :pem), :empty?), nil,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
                      s(:lvar, :pem))), nil))),
            s(:def, :peer_cert_chain,
              s(:args),
              s(:begin,
                s(:if,
                  s(:defined?,
                    s(:const, nil, :OpenSSL)), nil,
                  s(:return,
                    s(:nil))),
                s(:if,
                  s(:send,
                    s(:ivar, :@env), :[],
                    s(:str, "SSL_CLIENT_CERT_CHAIN_0")),
                  s(:begin,
                    s(:lvasgn, :keys,
                      s(:send,
                        s(:ivar, :@env), :keys)),
                    s(:lvasgn, :certs,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :keys), :sort), :collect),
                        s(:args,
                          s(:arg, :k)),
                        s(:if,
                          s(:match_with_lvasgn,
                            s(:regexp,
                              s(:str, "^SSL_CLIENT_CERT_CHAIN_\\d+$"),
                              s(:regopt)),
                            s(:lvar, :k)),
                          s(:if,
                            s(:lvasgn, :pem,
                              s(:send,
                                s(:ivar, :@env), :[],
                                s(:lvar, :k))),
                            s(:if,
                              s(:send,
                                s(:lvar, :pem), :empty?), nil,
                              s(:send,
                                s(:const,
                                  s(:const,
                                    s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
                                s(:lvar, :pem))), nil), nil))),
                    s(:send,
                      s(:lvar, :certs), :compact)), nil))),
            s(:def, :cipher,
              s(:args),
              s(:begin,
                s(:if,
                  s(:defined?,
                    s(:const, nil, :OpenSSL)), nil,
                  s(:return,
                    s(:nil))),
                s(:if,
                  s(:lvasgn, :cipher,
                    s(:send,
                      s(:ivar, :@env), :[],
                      s(:str, "SSL_CIPHER"))),
                  s(:begin,
                    s(:lvasgn, :ret,
                      s(:array,
                        s(:lvar, :cipher))),
                    s(:send,
                      s(:lvar, :ret), :<<,
                      s(:send,
                        s(:ivar, :@env), :[],
                        s(:str, "SSL_PROTOCOL"))),
                    s(:send,
                      s(:lvar, :ret), :<<,
                      s(:send,
                        s(:ivar, :@env), :[],
                        s(:str, "SSL_CIPHER_USEKEYSIZE"))),
                    s(:send,
                      s(:lvar, :ret), :<<,
                      s(:send,
                        s(:ivar, :@env), :[],
                        s(:str, "SSL_CIPHER_ALGKEYSIZE"))),
                    s(:lvar, :ret)), nil)))))))))
