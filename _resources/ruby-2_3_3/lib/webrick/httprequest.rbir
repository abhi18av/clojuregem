s(:begin,
  s(:send, nil, :require,
    s(:str, "uri")),
  s(:send, nil, :require,
    s(:str, "webrick/httpversion")),
  s(:send, nil, :require,
    s(:str, "webrick/httpstatus")),
  s(:send, nil, :require,
    s(:str, "webrick/httputils")),
  s(:send, nil, :require,
    s(:str, "webrick/cookie")),
  s(:module,
    s(:const, nil, :WEBrick),
    s(:class,
      s(:const, nil, :HTTPRequest), nil,
      s(:begin,
        s(:casgn, nil, :BODY_CONTAINABLE_METHODS,
          s(:array,
            s(:str, "POST"),
            s(:str, "PUT"))),
        s(:send, nil, :attr_reader,
          s(:sym, :request_line)),
        s(:send, nil, :attr_reader,
          s(:sym, :request_method)),
        s(:send, nil, :attr_reader,
          s(:sym, :unparsed_uri)),
        s(:send, nil, :attr_reader,
          s(:sym, :http_version)),
        s(:send, nil, :attr_reader,
          s(:sym, :request_uri)),
        s(:send, nil, :attr_reader,
          s(:sym, :path)),
        s(:send, nil, :attr_accessor,
          s(:sym, :script_name)),
        s(:send, nil, :attr_accessor,
          s(:sym, :path_info)),
        s(:send, nil, :attr_accessor,
          s(:sym, :query_string)),
        s(:send, nil, :attr_reader,
          s(:sym, :raw_header)),
        s(:send, nil, :attr_reader,
          s(:sym, :header)),
        s(:send, nil, :attr_reader,
          s(:sym, :cookies)),
        s(:send, nil, :attr_reader,
          s(:sym, :accept)),
        s(:send, nil, :attr_reader,
          s(:sym, :accept_charset)),
        s(:send, nil, :attr_reader,
          s(:sym, :accept_encoding)),
        s(:send, nil, :attr_reader,
          s(:sym, :accept_language)),
        s(:send, nil, :attr_accessor,
          s(:sym, :user)),
        s(:send, nil, :attr_reader,
          s(:sym, :addr)),
        s(:send, nil, :attr_reader,
          s(:sym, :peeraddr)),
        s(:send, nil, :attr_reader,
          s(:sym, :attributes)),
        s(:send, nil, :attr_reader,
          s(:sym, :keep_alive)),
        s(:send, nil, :attr_reader,
          s(:sym, :request_time)),
        s(:def, :initialize,
          s(:args,
            s(:arg, :config)),
          s(:begin,
            s(:ivasgn, :@config,
              s(:lvar, :config)),
            s(:ivasgn, :@buffer_size,
              s(:send,
                s(:ivar, :@config), :[],
                s(:sym, :InputBufferSize))),
            s(:ivasgn, :@logger,
              s(:send,
                s(:lvar, :config), :[],
                s(:sym, :Logger))),
            s(:ivasgn, :@request_line,
              s(:ivasgn, :@request_method,
                s(:ivasgn, :@unparsed_uri,
                  s(:ivasgn, :@http_version,
                    s(:nil))))),
            s(:ivasgn, :@request_uri,
              s(:ivasgn, :@host,
                s(:ivasgn, :@port,
                  s(:ivasgn, :@path,
                    s(:nil))))),
            s(:ivasgn, :@script_name,
              s(:ivasgn, :@path_info,
                s(:nil))),
            s(:ivasgn, :@query_string,
              s(:nil)),
            s(:ivasgn, :@query,
              s(:nil)),
            s(:ivasgn, :@form_data,
              s(:nil)),
            s(:ivasgn, :@raw_header,
              s(:send,
                s(:const, nil, :Array), :new)),
            s(:ivasgn, :@header,
              s(:nil)),
            s(:ivasgn, :@cookies,
              s(:array)),
            s(:ivasgn, :@accept,
              s(:array)),
            s(:ivasgn, :@accept_charset,
              s(:array)),
            s(:ivasgn, :@accept_encoding,
              s(:array)),
            s(:ivasgn, :@accept_language,
              s(:array)),
            s(:ivasgn, :@body,
              s(:str, "")),
            s(:ivasgn, :@addr,
              s(:ivasgn, :@peeraddr,
                s(:nil))),
            s(:ivasgn, :@attributes,
              s(:hash)),
            s(:ivasgn, :@user,
              s(:nil)),
            s(:ivasgn, :@keep_alive,
              s(:false)),
            s(:ivasgn, :@request_time,
              s(:nil)),
            s(:ivasgn, :@remaining_size,
              s(:nil)),
            s(:ivasgn, :@socket,
              s(:nil)),
            s(:ivasgn, :@forwarded_proto,
              s(:ivasgn, :@forwarded_host,
                s(:ivasgn, :@forwarded_port,
                  s(:ivasgn, :@forwarded_server,
                    s(:ivasgn, :@forwarded_for,
                      s(:nil)))))))),
        s(:def, :parse,
          s(:args,
            s(:optarg, :socket,
              s(:nil))),
          s(:begin,
            s(:ivasgn, :@socket,
              s(:lvar, :socket)),
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:ivasgn, :@peeraddr,
                    s(:if,
                      s(:send,
                        s(:lvar, :socket), :respond_to?,
                        s(:sym, :peeraddr)),
                      s(:send,
                        s(:lvar, :socket), :peeraddr),
                      s(:array))),
                  s(:ivasgn, :@addr,
                    s(:if,
                      s(:send,
                        s(:lvar, :socket), :respond_to?,
                        s(:sym, :addr)),
                      s(:send,
                        s(:lvar, :socket), :addr),
                      s(:array)))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Errno), :ENOTCONN)), nil,
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :HTTPStatus), :EOFError))), nil)),
            s(:send, nil, :read_request_line,
              s(:lvar, :socket)),
            s(:if,
              s(:send,
                s(:send,
                  s(:ivar, :@http_version), :major), :>,
                s(:int, 0)),
              s(:begin,
                s(:send, nil, :read_header,
                  s(:lvar, :socket)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:ivar, :@header), :[],
                      s(:str, "cookie")), :each),
                  s(:args,
                    s(:arg, :cookie)),
                  s(:op_asgn,
                    s(:ivasgn, :@cookies), :+,
                    s(:send,
                      s(:const, nil, :Cookie), :parse,
                      s(:lvar, :cookie)))),
                s(:ivasgn, :@accept,
                  s(:send,
                    s(:const, nil, :HTTPUtils), :parse_qvalues,
                    s(:send,
                      s(:self), :[],
                      s(:str, "accept")))),
                s(:ivasgn, :@accept_charset,
                  s(:send,
                    s(:const, nil, :HTTPUtils), :parse_qvalues,
                    s(:send,
                      s(:self), :[],
                      s(:str, "accept-charset")))),
                s(:ivasgn, :@accept_encoding,
                  s(:send,
                    s(:const, nil, :HTTPUtils), :parse_qvalues,
                    s(:send,
                      s(:self), :[],
                      s(:str, "accept-encoding")))),
                s(:ivasgn, :@accept_language,
                  s(:send,
                    s(:const, nil, :HTTPUtils), :parse_qvalues,
                    s(:send,
                      s(:self), :[],
                      s(:str, "accept-language"))))), nil),
            s(:if,
              s(:send,
                s(:ivar, :@request_method), :==,
                s(:str, "CONNECT")),
              s(:return), nil),
            s(:if,
              s(:send,
                s(:ivar, :@unparsed_uri), :==,
                s(:str, "*")),
              s(:return), nil),
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:send, nil, :setup_forwarded_info),
                  s(:ivasgn, :@request_uri,
                    s(:send, nil, :parse_uri,
                      s(:ivar, :@unparsed_uri))),
                  s(:ivasgn, :@path,
                    s(:send,
                      s(:const, nil, :HTTPUtils), :unescape,
                      s(:send,
                        s(:ivar, :@request_uri), :path))),
                  s(:ivasgn, :@path,
                    s(:send,
                      s(:const, nil, :HTTPUtils), :normalize_path,
                      s(:ivar, :@path))),
                  s(:ivasgn, :@host,
                    s(:send,
                      s(:ivar, :@request_uri), :host)),
                  s(:ivasgn, :@port,
                    s(:send,
                      s(:ivar, :@request_uri), :port)),
                  s(:ivasgn, :@query_string,
                    s(:send,
                      s(:ivar, :@request_uri), :query)),
                  s(:ivasgn, :@script_name,
                    s(:str, "")),
                  s(:ivasgn, :@path_info,
                    s(:send,
                      s(:ivar, :@path), :dup))),
                s(:resbody, nil, nil,
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :HTTPStatus), :BadRequest),
                    s(:dstr,
                      s(:str, "bad URI `"),
                      s(:begin,
                        s(:ivar, :@unparsed_uri)),
                      s(:str, "'.")))), nil)),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "close"),
                  s(:regopt, :i, :o)),
                s(:send,
                  s(:self), :[],
                  s(:str, "connection"))),
              s(:ivasgn, :@keep_alive,
                s(:false)),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "keep-alive"),
                    s(:regopt, :i, :o)),
                  s(:send,
                    s(:self), :[],
                    s(:str, "connection"))),
                s(:ivasgn, :@keep_alive,
                  s(:true)),
                s(:if,
                  s(:send,
                    s(:ivar, :@http_version), :<,
                    s(:str, "1.1")),
                  s(:ivasgn, :@keep_alive,
                    s(:false)),
                  s(:ivasgn, :@keep_alive,
                    s(:true))))))),
        s(:def, :continue,
          s(:args),
          s(:if,
            s(:and,
              s(:send,
                s(:send,
                  s(:self), :[],
                  s(:str, "expect")), :==,
                s(:str, "100-continue")),
              s(:send,
                s(:send,
                  s(:ivar, :@config), :[],
                  s(:sym, :HTTPVersion)), :>=,
                s(:str, "1.1"))),
            s(:begin,
              s(:send,
                s(:ivar, :@socket), :<<,
                s(:dstr,
                  s(:str, "HTTP/"),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@config), :[],
                      s(:sym, :HTTPVersion))),
                  s(:str, " 100 continue"),
                  s(:begin,
                    s(:const, nil, :CRLF)),
                  s(:begin,
                    s(:const, nil, :CRLF)))),
              s(:send,
                s(:ivar, :@header), :delete,
                s(:str, "expect"))), nil)),
        s(:def, :body,
          s(:args,
            s(:blockarg, :block)),
          s(:begin,
            s(:or_asgn,
              s(:lvasgn, :block),
              s(:block,
                s(:send,
                  s(:const, nil, :Proc), :new),
                s(:args,
                  s(:arg, :chunk)),
                s(:send,
                  s(:ivar, :@body), :<<,
                  s(:lvar, :chunk)))),
            s(:send, nil, :read_body,
              s(:ivar, :@socket),
              s(:lvar, :block)),
            s(:if,
              s(:send,
                s(:ivar, :@body), :empty?),
              s(:nil),
              s(:ivar, :@body)))),
        s(:def, :query,
          s(:args),
          s(:begin,
            s(:if,
              s(:ivar, :@query), nil,
              s(:send, nil, :parse_query)),
            s(:ivar, :@query))),
        s(:def, :content_length,
          s(:args),
          s(:return,
            s(:send, nil, :Integer,
              s(:send,
                s(:self), :[],
                s(:str, "content-length"))))),
        s(:def, :content_type,
          s(:args),
          s(:return,
            s(:send,
              s(:self), :[],
              s(:str, "content-type")))),
        s(:def, :[],
          s(:args,
            s(:arg, :header_name)),
          s(:if,
            s(:ivar, :@header),
            s(:begin,
              s(:lvasgn, :value,
                s(:send,
                  s(:ivar, :@header), :[],
                  s(:send,
                    s(:lvar, :header_name), :downcase))),
              s(:if,
                s(:send,
                  s(:lvar, :value), :empty?),
                s(:nil),
                s(:send,
                  s(:lvar, :value), :join,
                  s(:str, ", ")))), nil)),
        s(:def, :each,
          s(:args),
          s(:if,
            s(:ivar, :@header),
            s(:block,
              s(:send,
                s(:ivar, :@header), :each),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:begin,
                s(:lvasgn, :value,
                  s(:send,
                    s(:ivar, :@header), :[],
                    s(:lvar, :k))),
                s(:yield,
                  s(:lvar, :k),
                  s(:if,
                    s(:send,
                      s(:lvar, :value), :empty?),
                    s(:nil),
                    s(:send,
                      s(:lvar, :value), :join,
                      s(:str, ", ")))))), nil)),
        s(:def, :host,
          s(:args),
          s(:return,
            s(:or,
              s(:ivar, :@forwarded_host),
              s(:ivar, :@host)))),
        s(:def, :port,
          s(:args),
          s(:return,
            s(:or,
              s(:ivar, :@forwarded_port),
              s(:ivar, :@port)))),
        s(:def, :server_name,
          s(:args),
          s(:return,
            s(:or,
              s(:ivar, :@forwarded_server),
              s(:send,
                s(:ivar, :@config), :[],
                s(:sym, :ServerName))))),
        s(:def, :remote_ip,
          s(:args),
          s(:return,
            s(:or,
              s(:or,
                s(:send,
                  s(:self), :[],
                  s(:str, "client-ip")),
                s(:ivar, :@forwarded_for)),
              s(:send,
                s(:ivar, :@peeraddr), :[],
                s(:int, 3))))),
        s(:def, :ssl?,
          s(:args),
          s(:return,
            s(:send,
              s(:send,
                s(:ivar, :@request_uri), :scheme), :==,
              s(:str, "https")))),
        s(:def, :keep_alive?,
          s(:args),
          s(:ivar, :@keep_alive)),
        s(:def, :to_s,
          s(:args),
          s(:begin,
            s(:lvasgn, :ret,
              s(:send,
                s(:ivar, :@request_line), :dup)),
            s(:block,
              s(:send,
                s(:ivar, :@raw_header), :each),
              s(:args,
                s(:arg, :line)),
              s(:send,
                s(:lvar, :ret), :<<,
                s(:lvar, :line))),
            s(:send,
              s(:lvar, :ret), :<<,
              s(:const, nil, :CRLF)),
            s(:if,
              s(:send, nil, :body),
              s(:send,
                s(:lvar, :ret), :<<,
                s(:send, nil, :body)), nil),
            s(:lvar, :ret))),
        s(:def, :fixup,
          s(:args),
          s(:kwbegin,
            s(:rescue,
              s(:block,
                s(:send, nil, :body),
                s(:args,
                  s(:arg, :chunk)), nil),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :HTTPStatus), :Error)),
                s(:lvasgn, :ex),
                s(:begin,
                  s(:send,
                    s(:ivar, :@logger), :error,
                    s(:dstr,
                      s(:str, "HTTPRequest#fixup: "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :ex), :class)),
                      s(:str, " occurred."))),
                  s(:ivasgn, :@keep_alive,
                    s(:false)))),
              s(:resbody, nil,
                s(:lvasgn, :ex),
                s(:begin,
                  s(:send,
                    s(:ivar, :@logger), :error,
                    s(:lvar, :ex)),
                  s(:ivasgn, :@keep_alive,
                    s(:false)))), nil))),
        s(:def, :meta_vars,
          s(:args),
          s(:begin,
            s(:lvasgn, :meta,
              s(:send,
                s(:const, nil, :Hash), :new)),
            s(:lvasgn, :cl,
              s(:send,
                s(:self), :[],
                s(:str, "Content-Length"))),
            s(:lvasgn, :ct,
              s(:send,
                s(:self), :[],
                s(:str, "Content-Type"))),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :cl), :to_i), :>,
                s(:int, 0)),
              s(:send,
                s(:lvar, :meta), :[]=,
                s(:str, "CONTENT_LENGTH"),
                s(:lvar, :cl)), nil),
            s(:if,
              s(:lvar, :ct),
              s(:send,
                s(:lvar, :meta), :[]=,
                s(:str, "CONTENT_TYPE"),
                s(:send,
                  s(:lvar, :ct), :dup)), nil),
            s(:send,
              s(:lvar, :meta), :[]=,
              s(:str, "GATEWAY_INTERFACE"),
              s(:str, "CGI/1.1")),
            s(:send,
              s(:lvar, :meta), :[]=,
              s(:str, "PATH_INFO"),
              s(:if,
                s(:ivar, :@path_info),
                s(:send,
                  s(:ivar, :@path_info), :dup),
                s(:str, ""))),
            s(:send,
              s(:lvar, :meta), :[]=,
              s(:str, "QUERY_STRING"),
              s(:if,
                s(:ivar, :@query_string),
                s(:send,
                  s(:ivar, :@query_string), :dup),
                s(:str, ""))),
            s(:send,
              s(:lvar, :meta), :[]=,
              s(:str, "REMOTE_ADDR"),
              s(:send,
                s(:ivar, :@peeraddr), :[],
                s(:int, 3))),
            s(:send,
              s(:lvar, :meta), :[]=,
              s(:str, "REMOTE_HOST"),
              s(:send,
                s(:ivar, :@peeraddr), :[],
                s(:int, 2))),
            s(:send,
              s(:lvar, :meta), :[]=,
              s(:str, "REMOTE_USER"),
              s(:ivar, :@user)),
            s(:send,
              s(:lvar, :meta), :[]=,
              s(:str, "REQUEST_METHOD"),
              s(:send,
                s(:ivar, :@request_method), :dup)),
            s(:send,
              s(:lvar, :meta), :[]=,
              s(:str, "REQUEST_URI"),
              s(:send,
                s(:ivar, :@request_uri), :to_s)),
            s(:send,
              s(:lvar, :meta), :[]=,
              s(:str, "SCRIPT_NAME"),
              s(:send,
                s(:ivar, :@script_name), :dup)),
            s(:send,
              s(:lvar, :meta), :[]=,
              s(:str, "SERVER_NAME"),
              s(:ivar, :@host)),
            s(:send,
              s(:lvar, :meta), :[]=,
              s(:str, "SERVER_PORT"),
              s(:send,
                s(:ivar, :@port), :to_s)),
            s(:send,
              s(:lvar, :meta), :[]=,
              s(:str, "SERVER_PROTOCOL"),
              s(:send,
                s(:str, "HTTP/"), :+,
                s(:send,
                  s(:send,
                    s(:ivar, :@config), :[],
                    s(:sym, :HTTPVersion)), :to_s))),
            s(:send,
              s(:lvar, :meta), :[]=,
              s(:str, "SERVER_SOFTWARE"),
              s(:send,
                s(:send,
                  s(:ivar, :@config), :[],
                  s(:sym, :ServerSoftware)), :dup)),
            s(:block,
              s(:send,
                s(:self), :each),
              s(:args,
                s(:arg, :key),
                s(:arg, :val)),
              s(:begin,
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "^content-type$"),
                      s(:regopt, :i)),
                    s(:lvar, :key)),
                  s(:next), nil),
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "^content-length$"),
                      s(:regopt, :i)),
                    s(:lvar, :key)),
                  s(:next), nil),
                s(:lvasgn, :name,
                  s(:send,
                    s(:str, "HTTP_"), :+,
                    s(:lvar, :key))),
                s(:send,
                  s(:lvar, :name), :gsub!,
                  s(:regexp,
                    s(:str, "-"),
                    s(:regopt, :o)),
                  s(:str, "_")),
                s(:send,
                  s(:lvar, :name), :upcase!),
                s(:send,
                  s(:lvar, :meta), :[]=,
                  s(:lvar, :name),
                  s(:lvar, :val)))),
            s(:lvar, :meta))),
        s(:send, nil, :private),
        s(:casgn, nil, :MAX_URI_LENGTH,
          s(:int, 2083)),
        s(:def, :read_request_line,
          s(:args,
            s(:arg, :socket)),
          s(:begin,
            s(:if,
              s(:lvar, :socket),
              s(:ivasgn, :@request_line,
                s(:send, nil, :read_line,
                  s(:lvar, :socket),
                  s(:const, nil, :MAX_URI_LENGTH))), nil),
            s(:if,
              s(:and,
                s(:send,
                  s(:send,
                    s(:ivar, :@request_line), :bytesize), :>=,
                  s(:const, nil, :MAX_URI_LENGTH)),
                s(:send,
                  s(:send,
                    s(:ivar, :@request_line), :[],
                    s(:int, -1),
                    s(:int, 1)), :!=,
                  s(:const, nil, :LF))),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :HTTPStatus), :RequestURITooLarge)), nil),
            s(:ivasgn, :@request_time,
              s(:send,
                s(:const, nil, :Time), :now)),
            s(:if,
              s(:ivar, :@request_line), nil,
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :HTTPStatus), :EOFError))),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "^(\\S+)\\s+(\\S++)(?:\\s+HTTP/(\\d+\\.\\d+))?\\r?\\n"),
                  s(:regopt, :m, :o)),
                s(:ivar, :@request_line)),
              s(:begin,
                s(:ivasgn, :@request_method,
                  s(:nth_ref, 1)),
                s(:ivasgn, :@unparsed_uri,
                  s(:nth_ref, 2)),
                s(:ivasgn, :@http_version,
                  s(:send,
                    s(:const, nil, :HTTPVersion), :new,
                    s(:if,
                      s(:nth_ref, 3),
                      s(:nth_ref, 3),
                      s(:str, "0.9"))))),
              s(:begin,
                s(:lvasgn, :rl,
                  s(:send,
                    s(:ivar, :@request_line), :sub,
                    s(:regexp,
                      s(:str, "\\x0d?\\x0a\\z"),
                      s(:regopt, :o)),
                    s(:str, ""))),
                s(:send, nil, :raise,
                  s(:const,
                    s(:const, nil, :HTTPStatus), :BadRequest),
                  s(:dstr,
                    s(:str, "bad Request-Line `"),
                    s(:begin,
                      s(:lvar, :rl)),
                    s(:str, "'."))))))),
        s(:def, :read_header,
          s(:args,
            s(:arg, :socket)),
          s(:begin,
            s(:if,
              s(:lvar, :socket),
              s(:while,
                s(:lvasgn, :line,
                  s(:send, nil, :read_line,
                    s(:lvar, :socket))),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:regexp,
                        s(:str, "\\A("),
                        s(:begin,
                          s(:const, nil, :CRLF)),
                        s(:str, "|"),
                        s(:begin,
                          s(:const, nil, :LF)),
                        s(:str, ")\\z"),
                        s(:regopt, :m, :o)), :=~,
                      s(:lvar, :line)),
                    s(:break), nil),
                  s(:send,
                    s(:ivar, :@raw_header), :<<,
                    s(:lvar, :line)))), nil),
            s(:ivasgn, :@header,
              s(:send,
                s(:const, nil, :HTTPUtils), :parse_header,
                s(:send,
                  s(:ivar, :@raw_header), :join))))),
        s(:def, :parse_uri,
          s(:args,
            s(:arg, :str),
            s(:optarg, :scheme,
              s(:str, "http"))),
          s(:begin,
            s(:if,
              s(:send,
                s(:ivar, :@config), :[],
                s(:sym, :Escape8bitURI)),
              s(:lvasgn, :str,
                s(:send,
                  s(:const, nil, :HTTPUtils), :escape8bit,
                  s(:lvar, :str))), nil),
            s(:send,
              s(:lvar, :str), :sub!,
              s(:regexp,
                s(:str, "\\A/+"),
                s(:regopt, :o)),
              s(:str, "/")),
            s(:lvasgn, :uri,
              s(:send,
                s(:const, nil, :URI), :parse,
                s(:lvar, :str))),
            s(:if,
              s(:send,
                s(:lvar, :uri), :absolute?),
              s(:return,
                s(:lvar, :uri)), nil),
            s(:if,
              s(:ivar, :@forwarded_host),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :host),
                  s(:lvasgn, :port)),
                s(:array,
                  s(:ivar, :@forwarded_host),
                  s(:ivar, :@forwarded_port))),
              s(:if,
                s(:send,
                  s(:self), :[],
                  s(:str, "host")),
                s(:begin,
                  s(:lvasgn, :pattern,
                    s(:regexp,
                      s(:str, "\\A("),
                      s(:begin,
                        s(:const,
                          s(:const,
                            s(:const,
                              s(:const, nil, :URI), :REGEXP), :PATTERN), :HOST)),
                      s(:str, ")(?::(\\d+))?\\z"),
                      s(:regopt, :n))),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :host),
                      s(:lvasgn, :port)),
                    s(:array,
                      s(:splat,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:self), :[],
                              s(:str, "host")), :scan,
                            s(:lvar, :pattern)), :[],
                          s(:int, 0)))))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:ivar, :@addr), :size), :>,
                    s(:int, 0)),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :host),
                      s(:lvasgn, :port)),
                    s(:array,
                      s(:send,
                        s(:ivar, :@addr), :[],
                        s(:int, 2)),
                      s(:send,
                        s(:ivar, :@addr), :[],
                        s(:int, 1)))),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :host),
                      s(:lvasgn, :port)),
                    s(:array,
                      s(:send,
                        s(:ivar, :@config), :[],
                        s(:sym, :ServerName)),
                      s(:send,
                        s(:ivar, :@config), :[],
                        s(:sym, :Port))))))),
            s(:send,
              s(:lvar, :uri), :scheme=,
              s(:or,
                s(:ivar, :@forwarded_proto),
                s(:lvar, :scheme))),
            s(:send,
              s(:lvar, :uri), :host=,
              s(:lvar, :host)),
            s(:send,
              s(:lvar, :uri), :port=,
              s(:if,
                s(:lvar, :port),
                s(:send,
                  s(:lvar, :port), :to_i),
                s(:nil))),
            s(:return,
              s(:send,
                s(:const, nil, :URI), :parse,
                s(:send,
                  s(:lvar, :uri), :to_s))))),
        s(:def, :read_body,
          s(:args,
            s(:arg, :socket),
            s(:arg, :block)),
          s(:begin,
            s(:if,
              s(:lvar, :socket), nil,
              s(:return)),
            s(:if,
              s(:lvasgn, :tc,
                s(:send,
                  s(:self), :[],
                  s(:str, "transfer-encoding"))),
              s(:case,
                s(:lvar, :tc),
                s(:when,
                  s(:regexp,
                    s(:str, "chunked"),
                    s(:regopt, :i, :o)),
                  s(:send, nil, :read_chunked,
                    s(:lvar, :socket),
                    s(:lvar, :block))),
                s(:send, nil, :raise,
                  s(:const,
                    s(:const, nil, :HTTPStatus), :NotImplemented),
                  s(:dstr,
                    s(:str, "Transfer-Encoding: "),
                    s(:begin,
                      s(:lvar, :tc)),
                    s(:str, ".")))),
              s(:if,
                s(:or,
                  s(:send,
                    s(:self), :[],
                    s(:str, "content-length")),
                  s(:ivar, :@remaining_size)),
                s(:begin,
                  s(:or_asgn,
                    s(:ivasgn, :@remaining_size),
                    s(:send,
                      s(:send,
                        s(:self), :[],
                        s(:str, "content-length")), :to_i)),
                  s(:while,
                    s(:send,
                      s(:ivar, :@remaining_size), :>,
                      s(:int, 0)),
                    s(:begin,
                      s(:lvasgn, :sz,
                        s(:send,
                          s(:array,
                            s(:ivar, :@buffer_size),
                            s(:ivar, :@remaining_size)), :min)),
                      s(:if,
                        s(:lvasgn, :buf,
                          s(:send, nil, :read_data,
                            s(:lvar, :socket),
                            s(:lvar, :sz))), nil,
                        s(:break)),
                      s(:op_asgn,
                        s(:ivasgn, :@remaining_size), :-,
                        s(:send,
                          s(:lvar, :buf), :bytesize)),
                      s(:send,
                        s(:lvar, :block), :call,
                        s(:lvar, :buf)))),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:ivar, :@remaining_size), :>,
                        s(:int, 0)),
                      s(:send,
                        s(:ivar, :@socket), :eof?)),
                    s(:send, nil, :raise,
                      s(:const,
                        s(:const, nil, :HTTPStatus), :BadRequest),
                      s(:str, "invalid body size.")), nil)),
                s(:if,
                  s(:send,
                    s(:const, nil, :BODY_CONTAINABLE_METHODS), :member?,
                    s(:ivar, :@request_method)),
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :HTTPStatus), :LengthRequired)), nil))),
            s(:return,
              s(:ivar, :@body)))),
        s(:def, :read_chunk_size,
          s(:args,
            s(:arg, :socket)),
          s(:begin,
            s(:lvasgn, :line,
              s(:send, nil, :read_line,
                s(:lvar, :socket))),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "^([0-9a-fA-F]+)(?:;(\\S+))?"),
                  s(:regopt)),
                s(:lvar, :line)),
              s(:begin,
                s(:lvasgn, :chunk_size,
                  s(:send,
                    s(:nth_ref, 1), :hex)),
                s(:lvasgn, :chunk_ext,
                  s(:nth_ref, 2)),
                s(:array,
                  s(:lvar, :chunk_size),
                  s(:lvar, :chunk_ext))),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :HTTPStatus), :BadRequest),
                s(:dstr,
                  s(:str, "bad chunk `"),
                  s(:begin,
                    s(:lvar, :line)),
                  s(:str, "'.")))))),
        s(:def, :read_chunked,
          s(:args,
            s(:arg, :socket),
            s(:arg, :block)),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :chunk_size)),
              s(:send, nil, :read_chunk_size,
                s(:lvar, :socket))),
            s(:while,
              s(:send,
                s(:lvar, :chunk_size), :>,
                s(:int, 0)),
              s(:begin,
                s(:lvasgn, :data,
                  s(:send, nil, :read_data,
                    s(:lvar, :socket),
                    s(:lvar, :chunk_size))),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:lvar, :data), :nil?),
                    s(:send,
                      s(:send,
                        s(:lvar, :data), :bytesize), :!=,
                      s(:lvar, :chunk_size))),
                  s(:send, nil, :raise,
                    s(:const, nil, :BadRequest),
                    s(:str, "bad chunk data size.")), nil),
                s(:send, nil, :read_line,
                  s(:lvar, :socket)),
                s(:send,
                  s(:lvar, :block), :call,
                  s(:lvar, :data)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :chunk_size)),
                  s(:send, nil, :read_chunk_size,
                    s(:lvar, :socket))))),
            s(:send, nil, :read_header,
              s(:lvar, :socket)),
            s(:send,
              s(:ivar, :@header), :delete,
              s(:str, "transfer-encoding")),
            s(:ivasgn, :@remaining_size,
              s(:int, 0)))),
        s(:def, :_read_data,
          s(:args,
            s(:arg, :io),
            s(:arg, :method),
            s(:restarg, :arg)),
          s(:kwbegin,
            s(:rescue,
              s(:block,
                s(:send,
                  s(:const,
                    s(:const, nil, :WEBrick), :Utils), :timeout,
                  s(:send,
                    s(:ivar, :@config), :[],
                    s(:sym, :RequestTimeout))),
                s(:args),
                s(:return,
                  s(:send,
                    s(:lvar, :io), :__send__,
                    s(:lvar, :method),
                    s(:splat,
                      s(:lvar, :arg))))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :ECONNRESET)), nil,
                s(:return,
                  s(:nil))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Timeout), :Error)), nil,
                s(:send, nil, :raise,
                  s(:const,
                    s(:const, nil, :HTTPStatus), :RequestTimeout))), nil))),
        s(:def, :read_line,
          s(:args,
            s(:arg, :io),
            s(:optarg, :size,
              s(:int, 4096))),
          s(:send, nil, :_read_data,
            s(:lvar, :io),
            s(:sym, :gets),
            s(:const, nil, :LF),
            s(:lvar, :size))),
        s(:def, :read_data,
          s(:args,
            s(:arg, :io),
            s(:arg, :size)),
          s(:send, nil, :_read_data,
            s(:lvar, :io),
            s(:sym, :read),
            s(:lvar, :size))),
        s(:def, :parse_query,
          s(:args),
          s(:kwbegin,
            s(:rescue,
              s(:if,
                s(:or,
                  s(:send,
                    s(:ivar, :@request_method), :==,
                    s(:str, "GET")),
                  s(:send,
                    s(:ivar, :@request_method), :==,
                    s(:str, "HEAD"))),
                s(:ivasgn, :@query,
                  s(:send,
                    s(:const, nil, :HTTPUtils), :parse_query,
                    s(:ivar, :@query_string))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:self), :[],
                      s(:str, "content-type")), :=~,
                    s(:regexp,
                      s(:str, "^application/x-www-form-urlencoded"),
                      s(:regopt))),
                  s(:ivasgn, :@query,
                    s(:send,
                      s(:const, nil, :HTTPUtils), :parse_query,
                      s(:send, nil, :body))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:self), :[],
                        s(:str, "content-type")), :=~,
                      s(:regexp,
                        s(:str, "^multipart/form-data; boundary=(.+)"),
                        s(:regopt))),
                    s(:begin,
                      s(:lvasgn, :boundary,
                        s(:send,
                          s(:const, nil, :HTTPUtils), :dequote,
                          s(:nth_ref, 1))),
                      s(:ivasgn, :@query,
                        s(:send,
                          s(:const, nil, :HTTPUtils), :parse_form_data,
                          s(:send, nil, :body),
                          s(:lvar, :boundary)))),
                    s(:ivasgn, :@query,
                      s(:send,
                        s(:const, nil, :Hash), :new))))),
              s(:resbody, nil,
                s(:lvasgn, :ex),
                s(:send, nil, :raise,
                  s(:const,
                    s(:const, nil, :HTTPStatus), :BadRequest),
                  s(:send,
                    s(:lvar, :ex), :message))), nil))),
        s(:casgn, nil, :PrivateNetworkRegexp,
          s(:regexp,
            s(:str, "\n"),
            s(:str, "      ^unknown$|\n"),
            s(:str, "      ^((::ffff:)?127.0.0.1|::1)$|\n"),
            s(:str, "      ^(::ffff:)?(10|172\\.(1[6-9]|2[0-9]|3[01])|192\\.168)\\.\n"),
            s(:str, "    "),
            s(:regopt, :i, :o, :x))),
        s(:def, :setup_forwarded_info,
          s(:args),
          s(:begin,
            s(:if,
              s(:ivasgn, :@forwarded_server,
                s(:send,
                  s(:self), :[],
                  s(:str, "x-forwarded-server"))),
              s(:ivasgn, :@forwarded_server,
                s(:send,
                  s(:send,
                    s(:ivar, :@forwarded_server), :split,
                    s(:str, ","),
                    s(:int, 2)), :first)), nil),
            s(:ivasgn, :@forwarded_proto,
              s(:send,
                s(:self), :[],
                s(:str, "x-forwarded-proto"))),
            s(:if,
              s(:lvasgn, :host_port,
                s(:send,
                  s(:self), :[],
                  s(:str, "x-forwarded-host"))),
              s(:begin,
                s(:lvasgn, :host_port,
                  s(:send,
                    s(:send,
                      s(:lvar, :host_port), :split,
                      s(:str, ","),
                      s(:int, 2)), :first)),
                s(:masgn,
                  s(:mlhs,
                    s(:ivasgn, :@forwarded_host),
                    s(:lvasgn, :tmp)),
                  s(:send,
                    s(:lvar, :host_port), :split,
                    s(:str, ":"),
                    s(:int, 2))),
                s(:ivasgn, :@forwarded_port,
                  s(:send,
                    s(:begin,
                      s(:or,
                        s(:lvar, :tmp),
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:ivar, :@forwarded_proto), :==,
                              s(:str, "https")),
                            s(:int, 443),
                            s(:int, 80))))), :to_i))), nil),
            s(:if,
              s(:lvasgn, :addrs,
                s(:send,
                  s(:self), :[],
                  s(:str, "x-forwarded-for"))),
              s(:begin,
                s(:lvasgn, :addrs,
                  s(:send,
                    s(:send,
                      s(:lvar, :addrs), :split,
                      s(:str, ",")), :collect,
                    s(:block_pass,
                      s(:sym, :strip)))),
                s(:block,
                  s(:send,
                    s(:lvar, :addrs), :reject!),
                  s(:args,
                    s(:arg, :ip)),
                  s(:send,
                    s(:const, nil, :PrivateNetworkRegexp), :=~,
                    s(:lvar, :ip))),
                s(:ivasgn, :@forwarded_for,
                  s(:send,
                    s(:lvar, :addrs), :first))), nil)))))))
