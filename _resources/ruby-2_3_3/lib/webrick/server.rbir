s(:begin,
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:send, nil, :require,
    s(:str, "socket")),
  s(:send, nil, :require,
    s(:str, "webrick/config")),
  s(:send, nil, :require,
    s(:str, "webrick/log")),
  s(:module,
    s(:const, nil, :WEBrick),
    s(:begin,
      s(:class,
        s(:const, nil, :ServerError),
        s(:const, nil, :StandardError), nil),
      s(:class,
        s(:const, nil, :SimpleServer), nil,
        s(:defs,
          s(:const, nil, :SimpleServer), :start,
          s(:args),
          s(:yield))),
      s(:class,
        s(:const, nil, :Daemon), nil,
        s(:defs,
          s(:const, nil, :Daemon), :start,
          s(:args),
          s(:begin,
            s(:if,
              s(:send, nil, :fork),
              s(:send, nil, :exit!,
                s(:int, 0)), nil),
            s(:send,
              s(:const, nil, :Process), :setsid),
            s(:if,
              s(:send, nil, :fork),
              s(:send, nil, :exit!,
                s(:int, 0)), nil),
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:str, "/")),
            s(:send,
              s(:const, nil, :File), :umask,
              s(:int, 0)),
            s(:send,
              s(:const, nil, :STDIN), :reopen,
              s(:const,
                s(:const, nil, :IO), :NULL)),
            s(:send,
              s(:const, nil, :STDOUT), :reopen,
              s(:const,
                s(:const, nil, :IO), :NULL),
              s(:str, "w")),
            s(:send,
              s(:const, nil, :STDERR), :reopen,
              s(:const,
                s(:const, nil, :IO), :NULL),
              s(:str, "w")),
            s(:if,
              s(:send, nil, :block_given?),
              s(:yield), nil)))),
      s(:class,
        s(:const, nil, :GenericServer), nil,
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :status)),
          s(:send, nil, :attr_reader,
            s(:sym, :config)),
          s(:send, nil, :attr_reader,
            s(:sym, :logger)),
          s(:send, nil, :attr_reader,
            s(:sym, :tokens)),
          s(:send, nil, :attr_reader,
            s(:sym, :listeners)),
          s(:def, :initialize,
            s(:args,
              s(:optarg, :config,
                s(:hash)),
              s(:optarg, :default,
                s(:const,
                  s(:const, nil, :Config), :General))),
            s(:begin,
              s(:ivasgn, :@config,
                s(:send,
                  s(:send,
                    s(:lvar, :default), :dup), :update,
                  s(:lvar, :config))),
              s(:ivasgn, :@status,
                s(:sym, :Stop)),
              s(:or_asgn,
                s(:send,
                  s(:ivar, :@config), :[],
                  s(:sym, :Logger)),
                s(:send,
                  s(:const, nil, :Log), :new)),
              s(:ivasgn, :@logger,
                s(:send,
                  s(:ivar, :@config), :[],
                  s(:sym, :Logger))),
              s(:ivasgn, :@tokens,
                s(:send,
                  s(:const, nil, :SizedQueue), :new,
                  s(:send,
                    s(:ivar, :@config), :[],
                    s(:sym, :MaxClients)))),
              s(:block,
                s(:send,
                  s(:send,
                    s(:ivar, :@config), :[],
                    s(:sym, :MaxClients)), :times),
                s(:args),
                s(:send,
                  s(:ivar, :@tokens), :push,
                  s(:nil))),
              s(:lvasgn, :webrickv,
                s(:const,
                  s(:const, nil, :WEBrick), :VERSION)),
              s(:lvasgn, :rubyv,
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :RUBY_VERSION)),
                  s(:str, " ("),
                  s(:begin,
                    s(:const, nil, :RUBY_RELEASE_DATE)),
                  s(:str, ") ["),
                  s(:begin,
                    s(:const, nil, :RUBY_PLATFORM)),
                  s(:str, "]"))),
              s(:send,
                s(:ivar, :@logger), :info,
                s(:dstr,
                  s(:str, "WEBrick "),
                  s(:begin,
                    s(:lvar, :webrickv)))),
              s(:send,
                s(:ivar, :@logger), :info,
                s(:dstr,
                  s(:str, "ruby "),
                  s(:begin,
                    s(:lvar, :rubyv)))),
              s(:ivasgn, :@listeners,
                s(:array)),
              s(:ivasgn, :@shutdown_pipe,
                s(:nil)),
              s(:if,
                s(:send,
                  s(:ivar, :@config), :[],
                  s(:sym, :DoNotListen)), nil,
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:ivar, :@config), :[],
                      s(:sym, :Listen)),
                    s(:send, nil, :warn,
                      s(:str, ":Listen option is deprecated; use GenericServer#listen")), nil),
                  s(:send, nil, :listen,
                    s(:send,
                      s(:ivar, :@config), :[],
                      s(:sym, :BindAddress)),
                    s(:send,
                      s(:ivar, :@config), :[],
                      s(:sym, :Port))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:ivar, :@config), :[],
                        s(:sym, :Port)), :==,
                      s(:int, 0)),
                    s(:send,
                      s(:ivar, :@config), :[]=,
                      s(:sym, :Port),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:ivar, :@listeners), :[],
                            s(:int, 0)), :addr), :[],
                        s(:int, 1))), nil))))),
          s(:def, :[],
            s(:args,
              s(:arg, :key)),
            s(:send,
              s(:ivar, :@config), :[],
              s(:lvar, :key))),
          s(:def, :listen,
            s(:args,
              s(:arg, :address),
              s(:arg, :port)),
            s(:op_asgn,
              s(:ivasgn, :@listeners), :+,
              s(:send,
                s(:const, nil, :Utils), :create_listeners,
                s(:lvar, :address),
                s(:lvar, :port)))),
          s(:def, :start,
            s(:args,
              s(:blockarg, :block)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@status), :!=,
                  s(:sym, :Stop)),
                s(:send, nil, :raise,
                  s(:const, nil, :ServerError),
                  s(:str, "already started.")), nil),
              s(:lvasgn, :server_type,
                s(:or,
                  s(:send,
                    s(:ivar, :@config), :[],
                    s(:sym, :ServerType)),
                  s(:const, nil, :SimpleServer))),
              s(:send, nil, :setup_shutdown_pipe),
              s(:block,
                s(:send,
                  s(:lvar, :server_type), :start),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:ivar, :@logger), :info,
                    s(:dstr,
                      s(:begin,
                        s(:send,
                          s(:self), :class)),
                      s(:str, "#start: pid="),
                      s(:begin,
                        s(:gvar, :$$)),
                      s(:str, " port="),
                      s(:begin,
                        s(:send,
                          s(:ivar, :@config), :[],
                          s(:sym, :Port))))),
                  s(:send, nil, :call_callback,
                    s(:sym, :StartCallback)),
                  s(:lvasgn, :shutdown_pipe,
                    s(:ivar, :@shutdown_pipe)),
                  s(:lvasgn, :thgroup,
                    s(:send,
                      s(:const, nil, :ThreadGroup), :new)),
                  s(:ivasgn, :@status,
                    s(:sym, :Running)),
                  s(:kwbegin,
                    s(:ensure,
                      s(:while,
                        s(:send,
                          s(:ivar, :@status), :==,
                          s(:sym, :Running)),
                        s(:kwbegin,
                          s(:rescue,
                            s(:begin,
                              s(:lvasgn, :sp,
                                s(:send,
                                  s(:lvar, :shutdown_pipe), :[],
                                  s(:int, 0))),
                              s(:if,
                                s(:lvasgn, :svrs,
                                  s(:send,
                                    s(:const, nil, :IO), :select,
                                    s(:array,
                                      s(:lvar, :sp),
                                      s(:splat,
                                        s(:ivar, :@listeners))),
                                    s(:nil),
                                    s(:nil),
                                    s(:float, 2.0))),
                                s(:begin,
                                  s(:if,
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :svrs), :[],
                                        s(:int, 0)), :include?,
                                      s(:lvar, :sp)),
                                    s(:begin,
                                      s(:lvasgn, :buf,
                                        s(:send,
                                          s(:const, nil, :String), :new)),
                                      s(:while,
                                        s(:send,
                                          s(:const, nil, :String), :===,
                                          s(:send,
                                            s(:lvar, :sp), :read_nonblock,
                                            s(:send,
                                              s(:array,
                                                s(:send,
                                                  s(:lvar, :sp), :nread),
                                                s(:int, 8)), :max),
                                            s(:lvar, :buf),
                                            s(:hash,
                                              s(:pair,
                                                s(:sym, :exception),
                                                s(:false))))),
                                        s(:nil)),
                                      s(:break)), nil),
                                  s(:block,
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :svrs), :[],
                                        s(:int, 0)), :each),
                                    s(:args,
                                      s(:arg, :svr)),
                                    s(:begin,
                                      s(:send,
                                        s(:ivar, :@tokens), :pop),
                                      s(:if,
                                        s(:lvasgn, :sock,
                                          s(:send, nil, :accept_client,
                                            s(:lvar, :svr))),
                                        s(:begin,
                                          s(:if,
                                            s(:send,
                                              s(:send,
                                                s(:send, nil, :config), :[],
                                                s(:sym, :DoNotReverseLookup)), :nil?), nil,
                                            s(:send,
                                              s(:lvar, :sock), :do_not_reverse_lookup=,
                                              s(:send,
                                                s(:send,
                                                  s(:send,
                                                    s(:send, nil, :config), :[],
                                                    s(:sym, :DoNotReverseLookup)), :!), :!))),
                                          s(:lvasgn, :th,
                                            s(:send, nil, :start_thread,
                                              s(:lvar, :sock),
                                              s(:block_pass,
                                                s(:lvar, :block)))),
                                          s(:send,
                                            s(:lvar, :th), :[]=,
                                            s(:sym, :WEBrickThread),
                                            s(:true)),
                                          s(:send,
                                            s(:lvar, :thgroup), :add,
                                            s(:lvar, :th))),
                                        s(:send,
                                          s(:ivar, :@tokens), :push,
                                          s(:nil)))))), nil)),
                            s(:resbody,
                              s(:array,
                                s(:const,
                                  s(:const, nil, :Errno), :EBADF),
                                s(:const,
                                  s(:const, nil, :Errno), :ENOTSOCK),
                                s(:const, nil, :IOError)),
                              s(:lvasgn, :ex), nil),
                            s(:resbody,
                              s(:array,
                                s(:const, nil, :StandardError)),
                              s(:lvasgn, :ex),
                              s(:begin,
                                s(:lvasgn, :msg,
                                  s(:dstr,
                                    s(:begin,
                                      s(:send,
                                        s(:lvar, :ex), :class)),
                                    s(:str, ": "),
                                    s(:begin,
                                      s(:send,
                                        s(:lvar, :ex), :message)),
                                    s(:str, "\n\t"),
                                    s(:begin,
                                      s(:send,
                                        s(:send,
                                          s(:lvar, :ex), :backtrace), :[],
                                        s(:int, 0))))),
                                s(:send,
                                  s(:ivar, :@logger), :error,
                                  s(:lvar, :msg)))),
                            s(:resbody,
                              s(:array,
                                s(:const, nil, :Exception)),
                              s(:lvasgn, :ex),
                              s(:begin,
                                s(:send,
                                  s(:ivar, :@logger), :fatal,
                                  s(:lvar, :ex)),
                                s(:send, nil, :raise))), nil))),
                      s(:begin,
                        s(:send, nil, :cleanup_shutdown_pipe,
                          s(:lvar, :shutdown_pipe)),
                        s(:send, nil, :cleanup_listener),
                        s(:ivasgn, :@status,
                          s(:sym, :Shutdown)),
                        s(:send,
                          s(:ivar, :@logger), :info,
                          s(:str, "going to shutdown ...")),
                        s(:block,
                          s(:send,
                            s(:send,
                              s(:lvar, :thgroup), :list), :each),
                          s(:args,
                            s(:arg, :th)),
                          s(:if,
                            s(:send,
                              s(:lvar, :th), :[],
                              s(:sym, :WEBrickThread)),
                            s(:send,
                              s(:lvar, :th), :join), nil)),
                        s(:send, nil, :call_callback,
                          s(:sym, :StopCallback)),
                        s(:send,
                          s(:ivar, :@logger), :info,
                          s(:dstr,
                            s(:begin,
                              s(:send,
                                s(:self), :class)),
                            s(:str, "#start done."))),
                        s(:ivasgn, :@status,
                          s(:sym, :Stop))))))))),
          s(:def, :stop,
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@status), :==,
                  s(:sym, :Running)),
                s(:ivasgn, :@status,
                  s(:sym, :Shutdown)), nil),
              s(:block,
                s(:send, nil, :alarm_shutdown_pipe),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:lvar, :f), :write_nonblock,
                  s(:str, "\u0000"))))),
          s(:def, :shutdown,
            s(:args),
            s(:begin,
              s(:send, nil, :stop),
              s(:block,
                s(:send, nil, :alarm_shutdown_pipe),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:lvar, :f), :close)))),
          s(:def, :run,
            s(:args,
              s(:arg, :sock)),
            s(:send,
              s(:ivar, :@logger), :fatal,
              s(:str, "run() must be provided by user."))),
          s(:send, nil, :private),
          s(:def, :accept_client,
            s(:args,
              s(:arg, :svr)),
            s(:begin,
              s(:lvasgn, :sock,
                s(:nil)),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:lvasgn, :sock,
                      s(:send,
                        s(:lvar, :svr), :accept)),
                    s(:send,
                      s(:lvar, :sock), :sync=,
                      s(:true)),
                    s(:send,
                      s(:const, nil, :Utils), :set_non_blocking,
                      s(:lvar, :sock))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :Errno), :ECONNRESET),
                      s(:const,
                        s(:const, nil, :Errno), :ECONNABORTED),
                      s(:const,
                        s(:const, nil, :Errno), :EPROTO),
                      s(:const,
                        s(:const, nil, :Errno), :EINVAL)), nil, nil),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :StandardError)),
                    s(:lvasgn, :ex),
                    s(:begin,
                      s(:lvasgn, :msg,
                        s(:dstr,
                          s(:begin,
                            s(:send,
                              s(:lvar, :ex), :class)),
                          s(:str, ": "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :ex), :message)),
                          s(:str, "\n\t"),
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:lvar, :ex), :backtrace), :[],
                              s(:int, 0))))),
                      s(:send,
                        s(:ivar, :@logger), :error,
                        s(:lvar, :msg)))), nil)),
              s(:return,
                s(:lvar, :sock)))),
          s(:def, :start_thread,
            s(:args,
              s(:arg, :sock),
              s(:blockarg, :block)),
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:kwbegin,
                s(:ensure,
                  s(:rescue,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Thread), :current), :[]=,
                        s(:sym, :WEBrickSocket),
                        s(:lvar, :sock)),
                      s(:kwbegin,
                        s(:rescue,
                          s(:begin,
                            s(:lvasgn, :addr,
                              s(:send,
                                s(:lvar, :sock), :peeraddr)),
                            s(:send,
                              s(:ivar, :@logger), :debug,
                              s(:dstr,
                                s(:str, "accept: "),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :addr), :[],
                                    s(:int, 3))),
                                s(:str, ":"),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :addr), :[],
                                    s(:int, 1)))))),
                          s(:resbody,
                            s(:array,
                              s(:const, nil, :SocketError)), nil,
                            s(:begin,
                              s(:send,
                                s(:ivar, :@logger), :debug,
                                s(:str, "accept: <address unknown>")),
                              s(:send, nil, :raise))), nil)),
                      s(:send, nil, :call_callback,
                        s(:sym, :AcceptCallback),
                        s(:lvar, :sock)),
                      s(:if,
                        s(:lvar, :block),
                        s(:send,
                          s(:lvar, :block), :call,
                          s(:lvar, :sock)),
                        s(:send, nil, :run,
                          s(:lvar, :sock)))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Errno), :ENOTCONN)), nil,
                      s(:send,
                        s(:ivar, :@logger), :debug,
                        s(:str, "Errno::ENOTCONN raised"))),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :ServerError)),
                      s(:lvasgn, :ex),
                      s(:begin,
                        s(:lvasgn, :msg,
                          s(:dstr,
                            s(:begin,
                              s(:send,
                                s(:lvar, :ex), :class)),
                            s(:str, ": "),
                            s(:begin,
                              s(:send,
                                s(:lvar, :ex), :message)),
                            s(:str, "\n\t"),
                            s(:begin,
                              s(:send,
                                s(:send,
                                  s(:lvar, :ex), :backtrace), :[],
                                s(:int, 0))))),
                        s(:send,
                          s(:ivar, :@logger), :error,
                          s(:lvar, :msg)))),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :Exception)),
                      s(:lvasgn, :ex),
                      s(:send,
                        s(:ivar, :@logger), :error,
                        s(:lvar, :ex))), nil),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@tokens), :push,
                      s(:nil)),
                    s(:send,
                      s(:send,
                        s(:const, nil, :Thread), :current), :[]=,
                      s(:sym, :WEBrickSocket),
                      s(:nil)),
                    s(:if,
                      s(:lvar, :addr),
                      s(:send,
                        s(:ivar, :@logger), :debug,
                        s(:dstr,
                          s(:str, "close: "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :addr), :[],
                              s(:int, 3))),
                          s(:str, ":"),
                          s(:begin,
                            s(:send,
                              s(:lvar, :addr), :[],
                              s(:int, 1))))),
                      s(:send,
                        s(:ivar, :@logger), :debug,
                        s(:str, "close: <address unknown>"))),
                    s(:if,
                      s(:send,
                        s(:lvar, :sock), :closed?), nil,
                      s(:send,
                        s(:lvar, :sock), :close))))))),
          s(:def, :call_callback,
            s(:args,
              s(:arg, :callback_name),
              s(:restarg, :args)),
            s(:if,
              s(:lvasgn, :cb,
                s(:send,
                  s(:ivar, :@config), :[],
                  s(:lvar, :callback_name))),
              s(:send,
                s(:lvar, :cb), :call,
                s(:splat,
                  s(:lvar, :args))), nil)),
          s(:def, :setup_shutdown_pipe,
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@shutdown_pipe), :!),
                s(:ivasgn, :@shutdown_pipe,
                  s(:send,
                    s(:const, nil, :IO), :pipe)), nil),
              s(:ivar, :@shutdown_pipe))),
          s(:def, :cleanup_shutdown_pipe,
            s(:args,
              s(:arg, :shutdown_pipe)),
            s(:begin,
              s(:ivasgn, :@shutdown_pipe,
                s(:nil)),
              s(:if,
                s(:send,
                  s(:lvar, :shutdown_pipe), :!),
                s(:return), nil),
              s(:block,
                s(:send,
                  s(:lvar, :shutdown_pipe), :each),
                s(:args,
                  s(:arg, :io)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :io), :closed?), :!),
                  s(:kwbegin,
                    s(:rescue,
                      s(:send,
                        s(:lvar, :io), :close),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :IOError)), nil, nil), nil)), nil)))),
          s(:def, :alarm_shutdown_pipe,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :_),
                  s(:lvasgn, :pipe)),
                s(:ivar, :@shutdown_pipe)),
              s(:if,
                s(:lvar, :pipe),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :pipe), :closed?), :!),
                  s(:kwbegin,
                    s(:rescue,
                      s(:yield,
                        s(:lvar, :pipe)),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :IOError)), nil, nil), nil)), nil), nil))),
          s(:def, :cleanup_listener,
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:ivar, :@listeners), :each),
                s(:args,
                  s(:arg, :s)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:ivar, :@logger), :debug?),
                    s(:begin,
                      s(:lvasgn, :addr,
                        s(:send,
                          s(:lvar, :s), :addr)),
                      s(:send,
                        s(:ivar, :@logger), :debug,
                        s(:dstr,
                          s(:str, "close TCPSocket("),
                          s(:begin,
                            s(:send,
                              s(:lvar, :addr), :[],
                              s(:int, 2))),
                          s(:str, ", "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :addr), :[],
                              s(:int, 1))),
                          s(:str, ")")))), nil),
                  s(:kwbegin,
                    s(:rescue,
                      s(:send,
                        s(:lvar, :s), :shutdown),
                      s(:resbody,
                        s(:array,
                          s(:const,
                            s(:const, nil, :Errno), :ENOTCONN)), nil,
                        s(:send,
                          s(:lvar, :s), :close)),
                      s(:if,
                        s(:send,
                          s(:ivar, :@config), :[],
                          s(:sym, :ShutdownSocketWithoutClose)), nil,
                        s(:send,
                          s(:lvar, :s), :close)))))),
              s(:send,
                s(:ivar, :@listeners), :clear))))))))
