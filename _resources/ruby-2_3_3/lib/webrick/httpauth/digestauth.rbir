s(:begin,
  s(:send, nil, :require,
    s(:str, "webrick/config")),
  s(:send, nil, :require,
    s(:str, "webrick/httpstatus")),
  s(:send, nil, :require,
    s(:str, "webrick/httpauth/authenticator")),
  s(:send, nil, :require,
    s(:str, "digest/md5")),
  s(:send, nil, :require,
    s(:str, "digest/sha1")),
  s(:module,
    s(:const, nil, :WEBrick),
    s(:module,
      s(:const, nil, :HTTPAuth),
      s(:begin,
        s(:class,
          s(:const, nil, :DigestAuth), nil,
          s(:begin,
            s(:send, nil, :include,
              s(:const, nil, :Authenticator)),
            s(:casgn, nil, :AuthScheme,
              s(:str, "Digest")),
            s(:casgn, nil, :OpaqueInfo,
              s(:send,
                s(:const, nil, :Struct), :new,
                s(:sym, :time),
                s(:sym, :nonce),
                s(:sym, :nc))),
            s(:send, nil, :attr_reader,
              s(:sym, :algorithm)),
            s(:send, nil, :attr_reader,
              s(:sym, :qop)),
            s(:defs,
              s(:self), :make_passwd,
              s(:args,
                s(:arg, :realm),
                s(:arg, :user),
                s(:arg, :pass)),
              s(:begin,
                s(:or_asgn,
                  s(:lvasgn, :pass),
                  s(:str, "")),
                s(:send,
                  s(:const,
                    s(:const, nil, :Digest), :MD5), :hexdigest,
                  s(:send,
                    s(:array,
                      s(:lvar, :user),
                      s(:lvar, :realm),
                      s(:lvar, :pass)), :join,
                    s(:str, ":"))))),
            s(:def, :initialize,
              s(:args,
                s(:arg, :config),
                s(:optarg, :default,
                  s(:const,
                    s(:const, nil, :Config), :DigestAuth))),
              s(:begin,
                s(:send, nil, :check_init,
                  s(:lvar, :config)),
                s(:ivasgn, :@config,
                  s(:send,
                    s(:send,
                      s(:lvar, :default), :dup), :update,
                    s(:lvar, :config))),
                s(:ivasgn, :@algorithm,
                  s(:send,
                    s(:ivar, :@config), :[],
                    s(:sym, :Algorithm))),
                s(:ivasgn, :@domain,
                  s(:send,
                    s(:ivar, :@config), :[],
                    s(:sym, :Domain))),
                s(:ivasgn, :@qop,
                  s(:send,
                    s(:ivar, :@config), :[],
                    s(:sym, :Qop))),
                s(:ivasgn, :@use_opaque,
                  s(:send,
                    s(:ivar, :@config), :[],
                    s(:sym, :UseOpaque))),
                s(:ivasgn, :@use_next_nonce,
                  s(:send,
                    s(:ivar, :@config), :[],
                    s(:sym, :UseNextNonce))),
                s(:ivasgn, :@check_nc,
                  s(:send,
                    s(:ivar, :@config), :[],
                    s(:sym, :CheckNc))),
                s(:ivasgn, :@use_auth_info_header,
                  s(:send,
                    s(:ivar, :@config), :[],
                    s(:sym, :UseAuthenticationInfoHeader))),
                s(:ivasgn, :@nonce_expire_period,
                  s(:send,
                    s(:ivar, :@config), :[],
                    s(:sym, :NonceExpirePeriod))),
                s(:ivasgn, :@nonce_expire_delta,
                  s(:send,
                    s(:ivar, :@config), :[],
                    s(:sym, :NonceExpireDelta))),
                s(:ivasgn, :@internet_explorer_hack,
                  s(:send,
                    s(:ivar, :@config), :[],
                    s(:sym, :InternetExplorerHack))),
                s(:case,
                  s(:ivar, :@algorithm),
                  s(:when,
                    s(:str, "MD5"),
                    s(:str, "MD5-sess"),
                    s(:ivasgn, :@h,
                      s(:const,
                        s(:const, nil, :Digest), :MD5))),
                  s(:when,
                    s(:str, "SHA1"),
                    s(:str, "SHA1-sess"),
                    s(:ivasgn, :@h,
                      s(:const,
                        s(:const, nil, :Digest), :SHA1))),
                  s(:begin,
                    s(:lvasgn, :msg,
                      s(:send, nil, :format,
                        s(:str, "Algorithm \"%s\" is not supported."),
                        s(:ivar, :@algorithm))),
                    s(:send, nil, :raise,
                      s(:send,
                        s(:const, nil, :ArgumentError), :new,
                        s(:lvar, :msg))))),
                s(:ivasgn, :@instance_key,
                  s(:send, nil, :hexdigest,
                    s(:send,
                      s(:self), :__id__),
                    s(:send,
                      s(:send,
                        s(:const, nil, :Time), :now), :to_i),
                    s(:send,
                      s(:const, nil, :Process), :pid))),
                s(:ivasgn, :@opaques,
                  s(:hash)),
                s(:ivasgn, :@last_nonce_expire,
                  s(:send,
                    s(:const, nil, :Time), :now)),
                s(:ivasgn, :@mutex,
                  s(:send,
                    s(:const, nil, :Mutex), :new)))),
            s(:def, :authenticate,
              s(:args,
                s(:arg, :req),
                s(:arg, :res)),
              s(:begin,
                s(:if,
                  s(:lvasgn, :result,
                    s(:block,
                      s(:send,
                        s(:ivar, :@mutex), :synchronize),
                      s(:args),
                      s(:send, nil, :_authenticate,
                        s(:lvar, :req),
                        s(:lvar, :res)))), nil,
                  s(:send, nil, :challenge,
                    s(:lvar, :req),
                    s(:lvar, :res))),
                s(:if,
                  s(:send,
                    s(:lvar, :result), :==,
                    s(:sym, :nonce_is_stale)),
                  s(:send, nil, :challenge,
                    s(:lvar, :req),
                    s(:lvar, :res),
                    s(:true)), nil),
                s(:return,
                  s(:true)))),
            s(:def, :challenge,
              s(:args,
                s(:arg, :req),
                s(:arg, :res),
                s(:optarg, :stale,
                  s(:false))),
              s(:begin,
                s(:lvasgn, :nonce,
                  s(:send, nil, :generate_next_nonce,
                    s(:lvar, :req))),
                s(:if,
                  s(:ivar, :@use_opaque),
                  s(:begin,
                    s(:lvasgn, :opaque,
                      s(:send, nil, :generate_opaque,
                        s(:lvar, :req))),
                    s(:send,
                      s(:send,
                        s(:ivar, :@opaques), :[],
                        s(:lvar, :opaque)), :nonce=,
                      s(:lvar, :nonce))), nil),
                s(:lvasgn, :param,
                  s(:send,
                    s(:const, nil, :Hash), :new)),
                s(:send,
                  s(:lvar, :param), :[]=,
                  s(:str, "realm"),
                  s(:send,
                    s(:const, nil, :HTTPUtils), :quote,
                    s(:ivar, :@realm))),
                s(:if,
                  s(:ivar, :@domain),
                  s(:send,
                    s(:lvar, :param), :[]=,
                    s(:str, "domain"),
                    s(:send,
                      s(:const, nil, :HTTPUtils), :quote,
                      s(:send,
                        s(:send,
                          s(:ivar, :@domain), :to_a), :join,
                        s(:str, " ")))), nil),
                s(:send,
                  s(:lvar, :param), :[]=,
                  s(:str, "nonce"),
                  s(:send,
                    s(:const, nil, :HTTPUtils), :quote,
                    s(:lvar, :nonce))),
                s(:if,
                  s(:lvar, :opaque),
                  s(:send,
                    s(:lvar, :param), :[]=,
                    s(:str, "opaque"),
                    s(:send,
                      s(:const, nil, :HTTPUtils), :quote,
                      s(:lvar, :opaque))), nil),
                s(:send,
                  s(:lvar, :param), :[]=,
                  s(:str, "stale"),
                  s(:send,
                    s(:lvar, :stale), :to_s)),
                s(:send,
                  s(:lvar, :param), :[]=,
                  s(:str, "algorithm"),
                  s(:ivar, :@algorithm)),
                s(:if,
                  s(:ivar, :@qop),
                  s(:send,
                    s(:lvar, :param), :[]=,
                    s(:str, "qop"),
                    s(:send,
                      s(:const, nil, :HTTPUtils), :quote,
                      s(:send,
                        s(:send,
                          s(:ivar, :@qop), :to_a), :join,
                        s(:str, ",")))), nil),
                s(:send,
                  s(:lvar, :res), :[]=,
                  s(:ivar, :@response_field),
                  s(:send,
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@auth_scheme)),
                      s(:str, " ")), :+,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:lvar, :param), :map),
                        s(:args,
                          s(:arg, :k),
                          s(:arg, :v)),
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :k)),
                          s(:str, "="),
                          s(:begin,
                            s(:lvar, :v)))), :join,
                      s(:str, ", ")))),
                s(:if,
                  s(:gvar, :$DEBUG),
                  s(:send, nil, :info,
                    s(:str, "%s: %s"),
                    s(:ivar, :@response_field),
                    s(:send,
                      s(:lvar, :res), :[],
                      s(:ivar, :@response_field))), nil),
                s(:send, nil, :raise,
                  s(:ivar, :@auth_exception)))),
            s(:send, nil, :private),
            s(:casgn, nil, :MustParams,
              s(:array,
                s(:str, "username"),
                s(:str, "realm"),
                s(:str, "nonce"),
                s(:str, "uri"),
                s(:str, "response"))),
            s(:casgn, nil, :MustParamsAuth,
              s(:array,
                s(:str, "cnonce"),
                s(:str, "nc"))),
            s(:def, :_authenticate,
              s(:args,
                s(:arg, :req),
                s(:arg, :res)),
              s(:begin,
                s(:if,
                  s(:lvasgn, :digest_credentials,
                    s(:send, nil, :check_scheme,
                      s(:lvar, :req))), nil,
                  s(:return,
                    s(:false))),
                s(:lvasgn, :auth_req,
                  s(:send, nil, :split_param_value,
                    s(:lvar, :digest_credentials))),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "qop")), :==,
                      s(:str, "auth")),
                    s(:send,
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "qop")), :==,
                      s(:str, "auth-int"))),
                  s(:lvasgn, :req_params,
                    s(:send,
                      s(:const, nil, :MustParams), :+,
                      s(:const, nil, :MustParamsAuth))),
                  s(:lvasgn, :req_params,
                    s(:const, nil, :MustParams))),
                s(:block,
                  s(:send,
                    s(:lvar, :req_params), :each),
                  s(:args,
                    s(:arg, :key)),
                  s(:if,
                    s(:send,
                      s(:lvar, :auth_req), :has_key?,
                      s(:lvar, :key)), nil,
                    s(:begin,
                      s(:send, nil, :error,
                        s(:str, "%s: parameter missing. \"%s\""),
                        s(:send,
                          s(:lvar, :auth_req), :[],
                          s(:str, "username")),
                        s(:lvar, :key)),
                      s(:send, nil, :raise,
                        s(:const,
                          s(:const, nil, :HTTPStatus), :BadRequest))))),
                s(:if,
                  s(:send,
                    s(:send, nil, :check_uri,
                      s(:lvar, :req),
                      s(:lvar, :auth_req)), :!),
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :HTTPStatus), :BadRequest)), nil),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :auth_req), :[],
                      s(:str, "realm")), :!=,
                    s(:ivar, :@realm)),
                  s(:begin,
                    s(:send, nil, :error,
                      s(:str, "%s: realm unmatch. \"%s\" for \"%s\""),
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "username")),
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "realm")),
                      s(:ivar, :@realm)),
                    s(:return,
                      s(:false))), nil),
                s(:or_asgn,
                  s(:send,
                    s(:lvar, :auth_req), :[],
                    s(:str, "algorithm")),
                  s(:str, "MD5")),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "algorithm")), :upcase), :!=,
                    s(:send,
                      s(:ivar, :@algorithm), :upcase)),
                  s(:begin,
                    s(:send, nil, :error,
                      s(:str, "%s: algorithm unmatch. \"%s\" for \"%s\""),
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "username")),
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "algorithm")),
                      s(:ivar, :@algorithm)),
                    s(:return,
                      s(:false))), nil),
                s(:if,
                  s(:or,
                    s(:begin,
                      s(:and,
                        s(:send,
                          s(:ivar, :@qop), :nil?),
                        s(:send,
                          s(:lvar, :auth_req), :has_key?,
                          s(:str, "qop")))),
                    s(:begin,
                      s(:and,
                        s(:ivar, :@qop),
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:ivar, :@qop), :member?,
                              s(:send,
                                s(:lvar, :auth_req), :[],
                                s(:str, "qop"))), :!))))),
                  s(:begin,
                    s(:send, nil, :error,
                      s(:str, "%s: the qop is not allowed. \"%s\""),
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "username")),
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "qop"))),
                    s(:return,
                      s(:false))), nil),
                s(:lvasgn, :password,
                  s(:send,
                    s(:ivar, :@userdb), :get_passwd,
                    s(:ivar, :@realm),
                    s(:send,
                      s(:lvar, :auth_req), :[],
                      s(:str, "username")),
                    s(:ivar, :@reload_db))),
                s(:if,
                  s(:lvar, :password), nil,
                  s(:begin,
                    s(:send, nil, :error,
                      s(:str, "%s: the user is not allowed."),
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "username"))),
                    s(:return,
                      s(:false)))),
                s(:lvasgn, :nonce_is_invalid,
                  s(:false)),
                s(:if,
                  s(:ivar, :@use_opaque),
                  s(:begin,
                    s(:if,
                      s(:gvar, :$DEBUG),
                      s(:send, nil, :info,
                        s(:str, "@opaque = %s"),
                        s(:send,
                          s(:ivar, :@opaque), :inspect)), nil),
                    s(:if,
                      s(:send,
                        s(:begin,
                          s(:lvasgn, :opaque,
                            s(:send,
                              s(:lvar, :auth_req), :[],
                              s(:str, "opaque")))), :!),
                      s(:begin,
                        s(:send, nil, :error,
                          s(:str, "%s: opaque is not given."),
                          s(:send,
                            s(:lvar, :auth_req), :[],
                            s(:str, "username"))),
                        s(:lvasgn, :nonce_is_invalid,
                          s(:true))),
                      s(:if,
                        s(:send,
                          s(:begin,
                            s(:lvasgn, :opaque_struct,
                              s(:send,
                                s(:ivar, :@opaques), :[],
                                s(:lvar, :opaque)))), :!),
                        s(:begin,
                          s(:send, nil, :error,
                            s(:str, "%s: invalid opaque is given."),
                            s(:send,
                              s(:lvar, :auth_req), :[],
                              s(:str, "username"))),
                          s(:lvasgn, :nonce_is_invalid,
                            s(:true))),
                        s(:if,
                          s(:send,
                            s(:send, nil, :check_opaque,
                              s(:lvar, :opaque_struct),
                              s(:lvar, :req),
                              s(:lvar, :auth_req)), :!),
                          s(:begin,
                            s(:send,
                              s(:ivar, :@opaques), :delete,
                              s(:send,
                                s(:lvar, :auth_req), :[],
                                s(:str, "opaque"))),
                            s(:lvasgn, :nonce_is_invalid,
                              s(:true))), nil)))),
                  s(:if,
                    s(:send,
                      s(:send, nil, :check_nonce,
                        s(:lvar, :req),
                        s(:lvar, :auth_req)), :!),
                    s(:lvasgn, :nonce_is_invalid,
                      s(:true)), nil)),
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "-sess$"),
                      s(:regopt, :i)),
                    s(:send,
                      s(:lvar, :auth_req), :[],
                      s(:str, "algorithm"))),
                  s(:lvasgn, :ha1,
                    s(:send, nil, :hexdigest,
                      s(:lvar, :password),
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "nonce")),
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "cnonce")))),
                  s(:lvasgn, :ha1,
                    s(:lvar, :password))),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "qop")), :==,
                      s(:str, "auth")),
                    s(:send,
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "qop")), :==,
                      s(:nil))),
                  s(:begin,
                    s(:lvasgn, :ha2,
                      s(:send, nil, :hexdigest,
                        s(:send,
                          s(:lvar, :req), :request_method),
                        s(:send,
                          s(:lvar, :auth_req), :[],
                          s(:str, "uri")))),
                    s(:lvasgn, :ha2_res,
                      s(:send, nil, :hexdigest,
                        s(:str, ""),
                        s(:send,
                          s(:lvar, :auth_req), :[],
                          s(:str, "uri"))))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "qop")), :==,
                      s(:str, "auth-int")),
                    s(:begin,
                      s(:lvasgn, :ha2,
                        s(:send, nil, :hexdigest,
                          s(:send,
                            s(:lvar, :req), :request_method),
                          s(:send,
                            s(:lvar, :auth_req), :[],
                            s(:str, "uri")),
                          s(:send, nil, :hexdigest,
                            s(:send,
                              s(:lvar, :req), :body)))),
                      s(:lvasgn, :ha2_res,
                        s(:send, nil, :hexdigest,
                          s(:str, ""),
                          s(:send,
                            s(:lvar, :auth_req), :[],
                            s(:str, "uri")),
                          s(:send, nil, :hexdigest,
                            s(:send,
                              s(:lvar, :res), :body))))), nil)),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "qop")), :==,
                      s(:str, "auth")),
                    s(:send,
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "qop")), :==,
                      s(:str, "auth-int"))),
                  s(:begin,
                    s(:lvasgn, :param2,
                      s(:send,
                        s(:block,
                          s(:send,
                            s(:array,
                              s(:str, "nonce"),
                              s(:str, "nc"),
                              s(:str, "cnonce"),
                              s(:str, "qop")), :map),
                          s(:args,
                            s(:arg, :key)),
                          s(:send,
                            s(:lvar, :auth_req), :[],
                            s(:lvar, :key))), :join,
                        s(:str, ":"))),
                    s(:lvasgn, :digest,
                      s(:send, nil, :hexdigest,
                        s(:lvar, :ha1),
                        s(:lvar, :param2),
                        s(:lvar, :ha2))),
                    s(:lvasgn, :digest_res,
                      s(:send, nil, :hexdigest,
                        s(:lvar, :ha1),
                        s(:lvar, :param2),
                        s(:lvar, :ha2_res)))),
                  s(:begin,
                    s(:lvasgn, :digest,
                      s(:send, nil, :hexdigest,
                        s(:lvar, :ha1),
                        s(:send,
                          s(:lvar, :auth_req), :[],
                          s(:str, "nonce")),
                        s(:lvar, :ha2))),
                    s(:lvasgn, :digest_res,
                      s(:send, nil, :hexdigest,
                        s(:lvar, :ha1),
                        s(:send,
                          s(:lvar, :auth_req), :[],
                          s(:str, "nonce")),
                        s(:lvar, :ha2_res))))),
                s(:if,
                  s(:send,
                    s(:lvar, :digest), :!=,
                    s(:send,
                      s(:lvar, :auth_req), :[],
                      s(:str, "response"))),
                  s(:begin,
                    s(:send, nil, :error,
                      s(:str, "%s: digest unmatch."),
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "username"))),
                    s(:return,
                      s(:false))),
                  s(:if,
                    s(:lvar, :nonce_is_invalid),
                    s(:begin,
                      s(:send, nil, :error,
                        s(:str, "%s: digest is valid, but nonce is not valid."),
                        s(:send,
                          s(:lvar, :auth_req), :[],
                          s(:str, "username"))),
                      s(:return,
                        s(:sym, :nonce_is_stale))),
                    s(:if,
                      s(:ivar, :@use_auth_info_header),
                      s(:begin,
                        s(:lvasgn, :auth_info,
                          s(:hash,
                            s(:pair,
                              s(:str, "nextnonce"),
                              s(:send, nil, :generate_next_nonce,
                                s(:lvar, :req))),
                            s(:pair,
                              s(:str, "rspauth"),
                              s(:lvar, :digest_res)))),
                        s(:if,
                          s(:ivar, :@use_opaque),
                          s(:begin,
                            s(:send,
                              s(:lvar, :opaque_struct), :time=,
                              s(:send,
                                s(:lvar, :req), :request_time)),
                            s(:send,
                              s(:lvar, :opaque_struct), :nonce=,
                              s(:send,
                                s(:lvar, :auth_info), :[],
                                s(:str, "nextnonce"))),
                            s(:send,
                              s(:lvar, :opaque_struct), :nc=,
                              s(:send,
                                s(:str, "%08x"), :%,
                                s(:begin,
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :auth_req), :[],
                                        s(:str, "nc")), :hex), :+,
                                    s(:int, 1)))))), nil),
                        s(:if,
                          s(:or,
                            s(:send,
                              s(:send,
                                s(:lvar, :auth_req), :[],
                                s(:str, "qop")), :==,
                              s(:str, "auth")),
                            s(:send,
                              s(:send,
                                s(:lvar, :auth_req), :[],
                                s(:str, "qop")), :==,
                              s(:str, "auth-int"))),
                          s(:block,
                            s(:send,
                              s(:array,
                                s(:str, "qop"),
                                s(:str, "cnonce"),
                                s(:str, "nc")), :each),
                            s(:args,
                              s(:arg, :key)),
                            s(:send,
                              s(:lvar, :auth_info), :[]=,
                              s(:lvar, :key),
                              s(:send,
                                s(:lvar, :auth_req), :[],
                                s(:lvar, :key)))), nil),
                        s(:send,
                          s(:lvar, :res), :[]=,
                          s(:ivar, :@resp_info_field),
                          s(:send,
                            s(:block,
                              s(:send,
                                s(:send,
                                  s(:lvar, :auth_info), :keys), :map),
                              s(:args,
                                s(:arg, :key)),
                              s(:if,
                                s(:send,
                                  s(:lvar, :key), :==,
                                  s(:str, "nc")),
                                s(:send,
                                  s(:send,
                                    s(:lvar, :key), :+,
                                    s(:str, "=")), :+,
                                  s(:send,
                                    s(:lvar, :auth_info), :[],
                                    s(:lvar, :key))),
                                s(:send,
                                  s(:send,
                                    s(:lvar, :key), :+,
                                    s(:str, "=")), :+,
                                  s(:send,
                                    s(:const, nil, :HTTPUtils), :quote,
                                    s(:send,
                                      s(:lvar, :auth_info), :[],
                                      s(:lvar, :key)))))), :join,
                            s(:str, ", ")))), nil))),
                s(:send, nil, :info,
                  s(:str, "%s: authentication succeeded."),
                  s(:send,
                    s(:lvar, :auth_req), :[],
                    s(:str, "username"))),
                s(:send,
                  s(:lvar, :req), :user=,
                  s(:send,
                    s(:lvar, :auth_req), :[],
                    s(:str, "username"))),
                s(:return,
                  s(:true)))),
            s(:def, :split_param_value,
              s(:args,
                s(:arg, :string)),
              s(:begin,
                s(:lvasgn, :ret,
                  s(:hash)),
                s(:while,
                  s(:send,
                    s(:send,
                      s(:lvar, :string), :bytesize), :!=,
                    s(:int, 0)),
                  s(:case,
                    s(:lvar, :string),
                    s(:when,
                      s(:regexp,
                        s(:str, "^\\s*([\\w\\-\\.\\*\\%\\!]+)=\\s*\\\"((\\\\.|[^\\\"])*)\\\"\\s*,?"),
                        s(:regopt)),
                      s(:begin,
                        s(:lvasgn, :key,
                          s(:nth_ref, 1)),
                        s(:lvasgn, :matched,
                          s(:nth_ref, 2)),
                        s(:lvasgn, :string,
                          s(:back_ref, :$')),
                        s(:send,
                          s(:lvar, :ret), :[]=,
                          s(:lvar, :key),
                          s(:send,
                            s(:lvar, :matched), :gsub,
                            s(:regexp,
                              s(:str, "\\\\(.)"),
                              s(:regopt)),
                            s(:str, "\\1"))))),
                    s(:when,
                      s(:regexp,
                        s(:str, "^\\s*([\\w\\-\\.\\*\\%\\!]+)=\\s*([^,\\\"]*),?"),
                        s(:regopt)),
                      s(:begin,
                        s(:lvasgn, :key,
                          s(:nth_ref, 1)),
                        s(:lvasgn, :matched,
                          s(:nth_ref, 2)),
                        s(:lvasgn, :string,
                          s(:back_ref, :$')),
                        s(:send,
                          s(:lvar, :ret), :[]=,
                          s(:lvar, :key),
                          s(:send,
                            s(:lvar, :matched), :clone)))),
                    s(:when,
                      s(:regexp,
                        s(:str, "^s*^,"),
                        s(:regopt)),
                      s(:lvasgn, :string,
                        s(:back_ref, :$'))),
                    s(:break))),
                s(:lvar, :ret))),
            s(:def, :generate_next_nonce,
              s(:args,
                s(:arg, :req)),
              s(:begin,
                s(:lvasgn, :now,
                  s(:send,
                    s(:str, "%012d"), :%,
                    s(:send,
                      s(:send,
                        s(:lvar, :req), :request_time), :to_i))),
                s(:lvasgn, :pk,
                  s(:send,
                    s(:send, nil, :hexdigest,
                      s(:lvar, :now),
                      s(:ivar, :@instance_key)), :[],
                    s(:int, 0),
                    s(:int, 32))),
                s(:lvasgn, :nonce,
                  s(:send,
                    s(:send,
                      s(:array,
                        s(:send,
                          s(:send,
                            s(:lvar, :now), :+,
                            s(:str, ":")), :+,
                          s(:lvar, :pk))), :pack,
                      s(:str, "m*")), :chop)),
                s(:lvar, :nonce))),
            s(:def, :check_nonce,
              s(:args,
                s(:arg, :req),
                s(:arg, :auth_req)),
              s(:begin,
                s(:lvasgn, :username,
                  s(:send,
                    s(:lvar, :auth_req), :[],
                    s(:str, "username"))),
                s(:lvasgn, :nonce,
                  s(:send,
                    s(:lvar, :auth_req), :[],
                    s(:str, "nonce"))),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :pub_time),
                    s(:lvasgn, :pk)),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :nonce), :unpack,
                        s(:str, "m*")), :[],
                      s(:int, 0)), :split,
                    s(:str, ":"),
                    s(:int, 2))),
                s(:if,
                  s(:begin,
                    s(:or,
                      s(:send,
                        s(:lvar, :pub_time), :!),
                      s(:send,
                        s(:lvar, :pk), :!))),
                  s(:begin,
                    s(:send, nil, :error,
                      s(:str, "%s: empty nonce is given"),
                      s(:lvar, :username)),
                    s(:return,
                      s(:false))),
                  s(:if,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:send, nil, :hexdigest,
                            s(:lvar, :pub_time),
                            s(:ivar, :@instance_key)), :[],
                          s(:int, 0),
                          s(:int, 32)), :!=,
                        s(:lvar, :pk))),
                    s(:begin,
                      s(:send, nil, :error,
                        s(:str, "%s: invalid private-key: %s for %s"),
                        s(:lvar, :username),
                        s(:send,
                          s(:send, nil, :hexdigest,
                            s(:lvar, :pub_time),
                            s(:ivar, :@instance_key)), :[],
                          s(:int, 0),
                          s(:int, 32)),
                        s(:lvar, :pk)),
                      s(:return,
                        s(:false))), nil)),
                s(:lvasgn, :diff_time,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :req), :request_time), :to_i), :-,
                    s(:send,
                      s(:lvar, :pub_time), :to_i))),
                s(:if,
                  s(:begin,
                    s(:send,
                      s(:lvar, :diff_time), :<,
                      s(:int, 0))),
                  s(:begin,
                    s(:send, nil, :error,
                      s(:str, "%s: difference of time-stamp is negative."),
                      s(:lvar, :username)),
                    s(:return,
                      s(:false))),
                  s(:if,
                    s(:send,
                      s(:lvar, :diff_time), :>,
                      s(:ivar, :@nonce_expire_period)),
                    s(:begin,
                      s(:send, nil, :error,
                        s(:str, "%s: nonce is expired."),
                        s(:lvar, :username)),
                      s(:return,
                        s(:false))), nil)),
                s(:return,
                  s(:true)))),
            s(:def, :generate_opaque,
              s(:args,
                s(:arg, :req)),
              s(:block,
                s(:send,
                  s(:ivar, :@mutex), :synchronize),
                s(:args),
                s(:begin,
                  s(:lvasgn, :now,
                    s(:send,
                      s(:lvar, :req), :request_time)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :now), :-,
                        s(:ivar, :@last_nonce_expire)), :>,
                      s(:ivar, :@nonce_expire_delta)),
                    s(:begin,
                      s(:block,
                        s(:send,
                          s(:ivar, :@opaques), :delete_if),
                        s(:args,
                          s(:arg, :key),
                          s(:arg, :val)),
                        s(:send,
                          s(:begin,
                            s(:send,
                              s(:lvar, :now), :-,
                              s(:send,
                                s(:lvar, :val), :time))), :>,
                          s(:ivar, :@nonce_expire_period))),
                      s(:ivasgn, :@last_nonce_expire,
                        s(:lvar, :now))), nil),
                  s(:while_post,
                    s(:send,
                      s(:ivar, :@opaques), :[],
                      s(:lvar, :opaque)),
                    s(:kwbegin,
                      s(:lvasgn, :opaque,
                        s(:send,
                          s(:const, nil, :Utils), :random_string,
                          s(:int, 16))))),
                  s(:send,
                    s(:ivar, :@opaques), :[]=,
                    s(:lvar, :opaque),
                    s(:send,
                      s(:const, nil, :OpaqueInfo), :new,
                      s(:lvar, :now),
                      s(:nil),
                      s(:str, "00000001"))),
                  s(:lvar, :opaque)))),
            s(:def, :check_opaque,
              s(:args,
                s(:arg, :opaque_struct),
                s(:arg, :req),
                s(:arg, :auth_req)),
              s(:begin,
                s(:if,
                  s(:begin,
                    s(:and,
                      s(:ivar, :@use_next_nonce),
                      s(:send,
                        s(:send,
                          s(:lvar, :auth_req), :[],
                          s(:str, "nonce")), :!=,
                        s(:send,
                          s(:lvar, :opaque_struct), :nonce)))),
                  s(:begin,
                    s(:send, nil, :error,
                      s(:str, "%s: nonce unmatched. \"%s\" for \"%s\""),
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "username")),
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "nonce")),
                      s(:send,
                        s(:lvar, :opaque_struct), :nonce)),
                    s(:return,
                      s(:false))),
                  s(:if,
                    s(:send,
                      s(:send, nil, :check_nonce,
                        s(:lvar, :req),
                        s(:lvar, :auth_req)), :!),
                    s(:return,
                      s(:false)), nil)),
                s(:if,
                  s(:begin,
                    s(:and,
                      s(:ivar, :@check_nc),
                      s(:send,
                        s(:send,
                          s(:lvar, :auth_req), :[],
                          s(:str, "nc")), :!=,
                        s(:send,
                          s(:lvar, :opaque_struct), :nc)))),
                  s(:begin,
                    s(:send, nil, :error,
                      s(:str, "%s: nc unmatched.\"%s\" for \"%s\""),
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "username")),
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "nc")),
                      s(:send,
                        s(:lvar, :opaque_struct), :nc)),
                    s(:return,
                      s(:false))), nil),
                s(:true))),
            s(:def, :check_uri,
              s(:args,
                s(:arg, :req),
                s(:arg, :auth_req)),
              s(:begin,
                s(:lvasgn, :uri,
                  s(:send,
                    s(:lvar, :auth_req), :[],
                    s(:str, "uri"))),
                s(:if,
                  s(:and,
                    s(:and,
                      s(:send,
                        s(:lvar, :uri), :!=,
                        s(:send,
                          s(:send,
                            s(:lvar, :req), :request_uri), :to_s)),
                      s(:send,
                        s(:lvar, :uri), :!=,
                        s(:send,
                          s(:lvar, :req), :unparsed_uri))),
                    s(:begin,
                      s(:and,
                        s(:ivar, :@internet_explorer_hack),
                        s(:send,
                          s(:lvar, :uri), :!=,
                          s(:send,
                            s(:lvar, :req), :path))))),
                  s(:begin,
                    s(:send, nil, :error,
                      s(:str, "%s: uri unmatch. \"%s\" for \"%s\""),
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "username")),
                      s(:send,
                        s(:lvar, :auth_req), :[],
                        s(:str, "uri")),
                      s(:send,
                        s(:send,
                          s(:lvar, :req), :request_uri), :to_s)),
                    s(:return,
                      s(:false))), nil),
                s(:true))),
            s(:def, :hexdigest,
              s(:args,
                s(:restarg, :args)),
              s(:send,
                s(:ivar, :@h), :hexdigest,
                s(:send,
                  s(:lvar, :args), :join,
                  s(:str, ":")))))),
        s(:class,
          s(:const, nil, :ProxyDigestAuth),
          s(:const, nil, :DigestAuth),
          s(:begin,
            s(:send, nil, :include,
              s(:const, nil, :ProxyAuthenticator)),
            s(:send, nil, :private),
            s(:def, :check_uri,
              s(:args,
                s(:arg, :req),
                s(:arg, :auth_req)),
              s(:return,
                s(:true)))))))))
