s(:begin,
  s(:send, nil, :require,
    s(:str, "webrick/config")),
  s(:send, nil, :require,
    s(:str, "webrick/httpstatus")),
  s(:send, nil, :require,
    s(:str, "webrick/httpauth/authenticator")),
  s(:module,
    s(:const, nil, :WEBrick),
    s(:module,
      s(:const, nil, :HTTPAuth),
      s(:begin,
        s(:class,
          s(:const, nil, :BasicAuth), nil,
          s(:begin,
            s(:send, nil, :include,
              s(:const, nil, :Authenticator)),
            s(:casgn, nil, :AuthScheme,
              s(:str, "Basic")),
            s(:defs,
              s(:self), :make_passwd,
              s(:args,
                s(:arg, :realm),
                s(:arg, :user),
                s(:arg, :pass)),
              s(:begin,
                s(:or_asgn,
                  s(:lvasgn, :pass),
                  s(:str, "")),
                s(:send,
                  s(:lvar, :pass), :crypt,
                  s(:send,
                    s(:const, nil, :Utils), :random_string,
                    s(:int, 2))))),
            s(:send, nil, :attr_reader,
              s(:sym, :realm),
              s(:sym, :userdb),
              s(:sym, :logger)),
            s(:def, :initialize,
              s(:args,
                s(:arg, :config),
                s(:optarg, :default,
                  s(:const,
                    s(:const, nil, :Config), :BasicAuth))),
              s(:begin,
                s(:send, nil, :check_init,
                  s(:lvar, :config)),
                s(:ivasgn, :@config,
                  s(:send,
                    s(:send,
                      s(:lvar, :default), :dup), :update,
                    s(:lvar, :config))))),
            s(:def, :authenticate,
              s(:args,
                s(:arg, :req),
                s(:arg, :res)),
              s(:begin,
                s(:if,
                  s(:lvasgn, :basic_credentials,
                    s(:send, nil, :check_scheme,
                      s(:lvar, :req))), nil,
                  s(:send, nil, :challenge,
                    s(:lvar, :req),
                    s(:lvar, :res))),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :userid),
                    s(:lvasgn, :password)),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :basic_credentials), :unpack,
                        s(:str, "m*")), :[],
                      s(:int, 0)), :split,
                    s(:str, ":"),
                    s(:int, 2))),
                s(:or_asgn,
                  s(:lvasgn, :password),
                  s(:str, "")),
                s(:if,
                  s(:send,
                    s(:lvar, :userid), :empty?),
                  s(:begin,
                    s(:send, nil, :error,
                      s(:str, "user id was not given.")),
                    s(:send, nil, :challenge,
                      s(:lvar, :req),
                      s(:lvar, :res))), nil),
                s(:if,
                  s(:lvasgn, :encpass,
                    s(:send,
                      s(:ivar, :@userdb), :get_passwd,
                      s(:ivar, :@realm),
                      s(:lvar, :userid),
                      s(:ivar, :@reload_db))), nil,
                  s(:begin,
                    s(:send, nil, :error,
                      s(:str, "%s: the user is not allowed."),
                      s(:lvar, :userid)),
                    s(:send, nil, :challenge,
                      s(:lvar, :req),
                      s(:lvar, :res)))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :password), :crypt,
                      s(:lvar, :encpass)), :!=,
                    s(:lvar, :encpass)),
                  s(:begin,
                    s(:send, nil, :error,
                      s(:str, "%s: password unmatch."),
                      s(:lvar, :userid)),
                    s(:send, nil, :challenge,
                      s(:lvar, :req),
                      s(:lvar, :res))), nil),
                s(:send, nil, :info,
                  s(:str, "%s: authentication succeeded."),
                  s(:lvar, :userid)),
                s(:send,
                  s(:lvar, :req), :user=,
                  s(:lvar, :userid)))),
            s(:def, :challenge,
              s(:args,
                s(:arg, :req),
                s(:arg, :res)),
              s(:begin,
                s(:send,
                  s(:lvar, :res), :[]=,
                  s(:ivar, :@response_field),
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@auth_scheme)),
                    s(:str, " realm=\""),
                    s(:begin,
                      s(:ivar, :@realm)),
                    s(:str, "\""))),
                s(:send, nil, :raise,
                  s(:ivar, :@auth_exception)))))),
        s(:class,
          s(:const, nil, :ProxyBasicAuth),
          s(:const, nil, :BasicAuth),
          s(:send, nil, :include,
            s(:const, nil, :ProxyAuthenticator)))))))
