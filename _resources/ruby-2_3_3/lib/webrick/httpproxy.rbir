s(:begin,
  s(:send, nil, :require,
    s(:str, "webrick/httpserver")),
  s(:send, nil, :require,
    s(:str, "net/http")),
  s(:module,
    s(:const, nil, :WEBrick),
    s(:begin,
      s(:casgn, nil, :NullReader,
        s(:send,
          s(:const, nil, :Object), :new)),
      s(:sclass,
        s(:const, nil, :NullReader),
        s(:begin,
          s(:def, :read,
            s(:args,
              s(:restarg, :args)),
            s(:nil)),
          s(:alias,
            s(:sym, :gets),
            s(:sym, :read)))),
      s(:casgn, nil, :FakeProxyURI,
        s(:send,
          s(:const, nil, :Object), :new)),
      s(:sclass,
        s(:const, nil, :FakeProxyURI),
        s(:def, :method_missing,
          s(:args,
            s(:arg, :meth),
            s(:restarg, :args)),
          s(:begin,
            s(:if,
              s(:send,
                s(:array,
                  s(:str, "scheme"),
                  s(:str, "host"),
                  s(:str, "port"),
                  s(:str, "path"),
                  s(:str, "query"),
                  s(:str, "userinfo")), :member?,
                s(:send,
                  s(:lvar, :meth), :to_s)),
              s(:return,
                s(:nil)), nil),
            s(:zsuper)))),
      s(:class,
        s(:const, nil, :HTTPProxyServer),
        s(:const, nil, :HTTPServer),
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:optarg, :config,
                s(:hash)),
              s(:optarg, :default,
                s(:const,
                  s(:const, nil, :Config), :HTTP))),
            s(:begin,
              s(:super,
                s(:lvar, :config),
                s(:lvar, :default)),
              s(:lvasgn, :c,
                s(:ivar, :@config)),
              s(:ivasgn, :@via,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :c), :[],
                      s(:sym, :HTTPVersion))),
                  s(:str, " "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :c), :[],
                      s(:sym, :ServerName))),
                  s(:str, ":"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :c), :[],
                      s(:sym, :Port))))))),
          s(:def, :service,
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :req), :request_method), :==,
                s(:str, "CONNECT")),
              s(:send, nil, :do_CONNECT,
                s(:lvar, :req),
                s(:lvar, :res)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :req), :unparsed_uri), :=~,
                  s(:regexp,
                    s(:str, "^http://"),
                    s(:regopt))),
                s(:send, nil, :proxy_service,
                  s(:lvar, :req),
                  s(:lvar, :res)),
                s(:super,
                  s(:lvar, :req),
                  s(:lvar, :res))))),
          s(:def, :proxy_auth,
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:begin,
              s(:if,
                s(:lvasgn, :proc,
                  s(:send,
                    s(:ivar, :@config), :[],
                    s(:sym, :ProxyAuthProc))),
                s(:send,
                  s(:lvar, :proc), :call,
                  s(:lvar, :req),
                  s(:lvar, :res)), nil),
              s(:send,
                s(:send,
                  s(:lvar, :req), :header), :delete,
                s(:str, "proxy-authorization")))),
          s(:def, :proxy_uri,
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:return,
              s(:send,
                s(:ivar, :@config), :[],
                s(:sym, :ProxyURI)))),
          s(:def, :proxy_service,
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:begin,
              s(:send, nil, :proxy_auth,
                s(:lvar, :req),
                s(:lvar, :res)),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:self), :send,
                    s(:dstr,
                      s(:str, "do_"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :req), :request_method))),
                    s(:lvar, :req),
                    s(:lvar, :res)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :NoMethodError)), nil,
                    s(:send, nil, :raise,
                      s(:const,
                        s(:const, nil, :HTTPStatus), :MethodNotAllowed),
                      s(:dstr,
                        s(:str, "unsupported method `"),
                        s(:begin,
                          s(:send,
                            s(:lvar, :req), :request_method)),
                        s(:str, "'.")))),
                  s(:resbody, nil,
                    s(:lvasgn, :err),
                    s(:begin,
                      s(:send,
                        s(:send, nil, :logger), :debug,
                        s(:dstr,
                          s(:begin,
                            s(:send,
                              s(:lvar, :err), :class)),
                          s(:str, ": "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :err), :message)))),
                      s(:send, nil, :raise,
                        s(:const,
                          s(:const, nil, :HTTPStatus), :ServiceUnavailable),
                        s(:send,
                          s(:lvar, :err), :message)))), nil)),
              s(:if,
                s(:lvasgn, :handler,
                  s(:send,
                    s(:ivar, :@config), :[],
                    s(:sym, :ProxyContentHandler))),
                s(:send,
                  s(:lvar, :handler), :call,
                  s(:lvar, :req),
                  s(:lvar, :res)), nil))),
          s(:def, :do_CONNECT,
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:begin,
              s(:send, nil, :proxy_auth,
                s(:lvar, :req),
                s(:lvar, :res)),
              s(:lvasgn, :ua,
                s(:send,
                  s(:send,
                    s(:const, nil, :Thread), :current), :[],
                  s(:sym, :WEBrickSocket))),
              s(:if,
                s(:lvar, :ua), nil,
                s(:send, nil, :raise,
                  s(:const,
                    s(:const, nil, :HTTPStatus), :InternalServerError),
                  s(:str, "[BUG] cannot get socket"))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :host),
                  s(:lvasgn, :port)),
                s(:send,
                  s(:send,
                    s(:lvar, :req), :unparsed_uri), :split,
                  s(:str, ":"),
                  s(:int, 2))),
              s(:if,
                s(:lvasgn, :proxy,
                  s(:send, nil, :proxy_uri,
                    s(:lvar, :req),
                    s(:lvar, :res))),
                s(:begin,
                  s(:lvasgn, :proxy_request_line,
                    s(:dstr,
                      s(:str, "CONNECT "),
                      s(:begin,
                        s(:lvar, :host)),
                      s(:str, ":"),
                      s(:begin,
                        s(:lvar, :port)),
                      s(:str, " HTTP/1.0"))),
                  s(:if,
                    s(:send,
                      s(:lvar, :proxy), :userinfo),
                    s(:lvasgn, :credentials,
                      s(:send,
                        s(:str, "Basic "), :+,
                        s(:send,
                          s(:send,
                            s(:array,
                              s(:send,
                                s(:lvar, :proxy), :userinfo)), :pack,
                            s(:str, "m")), :delete,
                          s(:str, "\n")))), nil),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :host),
                      s(:lvasgn, :port)),
                    s(:array,
                      s(:send,
                        s(:lvar, :proxy), :host),
                      s(:send,
                        s(:lvar, :proxy), :port)))), nil),
              s(:kwbegin,
                s(:ensure,
                  s(:rescue,
                    s(:begin,
                      s(:send,
                        s(:ivar, :@logger), :debug,
                        s(:dstr,
                          s(:str, "CONNECT: upstream proxy is `"),
                          s(:begin,
                            s(:lvar, :host)),
                          s(:str, ":"),
                          s(:begin,
                            s(:lvar, :port)),
                          s(:str, "'."))),
                      s(:lvasgn, :os,
                        s(:send,
                          s(:const, nil, :TCPSocket), :new,
                          s(:lvar, :host),
                          s(:lvar, :port))),
                      s(:if,
                        s(:lvar, :proxy),
                        s(:begin,
                          s(:send,
                            s(:ivar, :@logger), :debug,
                            s(:str, "CONNECT: sending a Request-Line")),
                          s(:send,
                            s(:send,
                              s(:lvar, :os), :<<,
                              s(:lvar, :proxy_request_line)), :<<,
                            s(:const, nil, :CRLF)),
                          s(:send,
                            s(:ivar, :@logger), :debug,
                            s(:dstr,
                              s(:str, "CONNECT: > "),
                              s(:begin,
                                s(:lvar, :proxy_request_line)))),
                          s(:if,
                            s(:lvar, :credentials),
                            s(:begin,
                              s(:send,
                                s(:ivar, :@logger), :debug,
                                s(:str, "CONNECT: sending credentials")),
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :os), :<<,
                                    s(:str, "Proxy-Authorization: ")), :<<,
                                  s(:lvar, :credentials)), :<<,
                                s(:const, nil, :CRLF))), nil),
                          s(:send,
                            s(:lvar, :os), :<<,
                            s(:const, nil, :CRLF)),
                          s(:lvasgn, :proxy_status_line,
                            s(:send,
                              s(:lvar, :os), :gets,
                              s(:const, nil, :LF))),
                          s(:send,
                            s(:ivar, :@logger), :debug,
                            s(:str, "CONNECT: read Status-Line from the upstream server")),
                          s(:send,
                            s(:ivar, :@logger), :debug,
                            s(:dstr,
                              s(:str, "CONNECT: < "),
                              s(:begin,
                                s(:lvar, :proxy_status_line)))),
                          s(:if,
                            s(:match_with_lvasgn,
                              s(:regexp,
                                s(:str, "^HTTP/\\d+\\.\\d+\\s+200\\s*"),
                                s(:regopt)),
                              s(:lvar, :proxy_status_line)),
                            s(:while,
                              s(:lvasgn, :line,
                                s(:send,
                                  s(:lvar, :os), :gets,
                                  s(:const, nil, :LF))),
                              s(:if,
                                s(:send,
                                  s(:regexp,
                                    s(:str, "\\A("),
                                    s(:begin,
                                      s(:const, nil, :CRLF)),
                                    s(:str, "|"),
                                    s(:begin,
                                      s(:const, nil, :LF)),
                                    s(:str, ")\\z"),
                                    s(:regopt, :m, :o)), :=~,
                                  s(:lvar, :line)),
                                s(:break), nil)),
                            s(:send, nil, :raise,
                              s(:const,
                                s(:const, nil, :HTTPStatus), :BadGateway)))), nil),
                      s(:send,
                        s(:ivar, :@logger), :debug,
                        s(:dstr,
                          s(:str, "CONNECT "),
                          s(:begin,
                            s(:lvar, :host)),
                          s(:str, ":"),
                          s(:begin,
                            s(:lvar, :port)),
                          s(:str, ": succeeded"))),
                      s(:send,
                        s(:lvar, :res), :status=,
                        s(:const,
                          s(:const, nil, :HTTPStatus), :RC_OK))),
                    s(:resbody, nil,
                      s(:lvasgn, :ex),
                      s(:begin,
                        s(:send,
                          s(:ivar, :@logger), :debug,
                          s(:dstr,
                            s(:str, "CONNECT "),
                            s(:begin,
                              s(:lvar, :host)),
                            s(:str, ":"),
                            s(:begin,
                              s(:lvar, :port)),
                            s(:str, ": failed `"),
                            s(:begin,
                              s(:send,
                                s(:lvar, :ex), :message)),
                            s(:str, "'"))),
                        s(:send,
                          s(:lvar, :res), :set_error,
                          s(:lvar, :ex)),
                        s(:send, nil, :raise,
                          s(:const,
                            s(:const, nil, :HTTPStatus), :EOFError)))), nil),
                  s(:begin,
                    s(:if,
                      s(:lvasgn, :handler,
                        s(:send,
                          s(:ivar, :@config), :[],
                          s(:sym, :ProxyContentHandler))),
                      s(:send,
                        s(:lvar, :handler), :call,
                        s(:lvar, :req),
                        s(:lvar, :res)), nil),
                    s(:send,
                      s(:lvar, :res), :send_response,
                      s(:lvar, :ua)),
                    s(:send, nil, :access_log,
                      s(:ivar, :@config),
                      s(:lvar, :req),
                      s(:lvar, :res)),
                    s(:rescue,
                      s(:send,
                        s(:lvar, :req), :parse,
                        s(:const, nil, :NullReader)),
                      s(:resbody, nil, nil,
                        s(:nil)), nil)))),
              s(:kwbegin,
                s(:rescue,
                  s(:while,
                    s(:lvasgn, :fds,
                      s(:send,
                        s(:const, nil, :IO), :select,
                        s(:array,
                          s(:lvar, :ua),
                          s(:lvar, :os)))),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :fds), :[],
                          s(:int, 0)), :member?,
                        s(:lvar, :ua)),
                      s(:begin,
                        s(:lvasgn, :buf,
                          s(:send,
                            s(:lvar, :ua), :sysread,
                            s(:int, 1024))),
                        s(:send,
                          s(:ivar, :@logger), :debug,
                          s(:dstr,
                            s(:str, "CONNECT: "),
                            s(:begin,
                              s(:send,
                                s(:lvar, :buf), :bytesize)),
                            s(:str, " byte from User-Agent"))),
                        s(:send,
                          s(:lvar, :os), :syswrite,
                          s(:lvar, :buf))),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :fds), :[],
                            s(:int, 0)), :member?,
                          s(:lvar, :os)),
                        s(:begin,
                          s(:lvasgn, :buf,
                            s(:send,
                              s(:lvar, :os), :sysread,
                              s(:int, 1024))),
                          s(:send,
                            s(:ivar, :@logger), :debug,
                            s(:dstr,
                              s(:str, "CONNECT: "),
                              s(:begin,
                                s(:send,
                                  s(:lvar, :buf), :bytesize)),
                              s(:str, " byte from "),
                              s(:begin,
                                s(:lvar, :host)),
                              s(:str, ":"),
                              s(:begin,
                                s(:lvar, :port)))),
                          s(:send,
                            s(:lvar, :ua), :syswrite,
                            s(:lvar, :buf))), nil))),
                  s(:resbody, nil, nil,
                    s(:begin,
                      s(:send,
                        s(:lvar, :os), :close),
                      s(:send,
                        s(:ivar, :@logger), :debug,
                        s(:dstr,
                          s(:str, "CONNECT "),
                          s(:begin,
                            s(:lvar, :host)),
                          s(:str, ":"),
                          s(:begin,
                            s(:lvar, :port)),
                          s(:str, ": closed"))))), nil)),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :HTTPStatus), :EOFError)))),
          s(:def, :do_GET,
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:block,
              s(:send, nil, :perform_proxy_request,
                s(:lvar, :req),
                s(:lvar, :res)),
              s(:args,
                s(:arg, :http),
                s(:arg, :path),
                s(:arg, :header)),
              s(:send,
                s(:lvar, :http), :get,
                s(:lvar, :path),
                s(:lvar, :header)))),
          s(:def, :do_HEAD,
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:block,
              s(:send, nil, :perform_proxy_request,
                s(:lvar, :req),
                s(:lvar, :res)),
              s(:args,
                s(:arg, :http),
                s(:arg, :path),
                s(:arg, :header)),
              s(:send,
                s(:lvar, :http), :head,
                s(:lvar, :path),
                s(:lvar, :header)))),
          s(:def, :do_POST,
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:block,
              s(:send, nil, :perform_proxy_request,
                s(:lvar, :req),
                s(:lvar, :res)),
              s(:args,
                s(:arg, :http),
                s(:arg, :path),
                s(:arg, :header)),
              s(:send,
                s(:lvar, :http), :post,
                s(:lvar, :path),
                s(:or,
                  s(:send,
                    s(:lvar, :req), :body),
                  s(:str, "")),
                s(:lvar, :header)))),
          s(:def, :do_OPTIONS,
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:send,
              s(:lvar, :res), :[]=,
              s(:str, "allow"),
              s(:str, "GET,HEAD,POST,OPTIONS,CONNECT"))),
          s(:send, nil, :private),
          s(:casgn, nil, :HopByHop,
            s(:array,
              s(:str, "connection"),
              s(:str, "keep-alive"),
              s(:str, "proxy-authenticate"),
              s(:str, "upgrade"),
              s(:str, "proxy-authorization"),
              s(:str, "te"),
              s(:str, "trailers"),
              s(:str, "transfer-encoding"))),
          s(:casgn, nil, :ShouldNotTransfer,
            s(:array,
              s(:str, "set-cookie"),
              s(:str, "proxy-connection"))),
          s(:def, :split_field,
            s(:args,
              s(:arg, :f)),
            s(:if,
              s(:lvar, :f),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :f), :split,
                    s(:regexp,
                      s(:str, ",\\s+"),
                      s(:regopt))), :collect),
                s(:args,
                  s(:arg, :i)),
                s(:send,
                  s(:lvar, :i), :downcase)),
              s(:array))),
          s(:def, :choose_header,
            s(:args,
              s(:arg, :src),
              s(:arg, :dst)),
            s(:begin,
              s(:lvasgn, :connections,
                s(:send, nil, :split_field,
                  s(:send,
                    s(:lvar, :src), :[],
                    s(:str, "connection")))),
              s(:block,
                s(:send,
                  s(:lvar, :src), :each),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :value)),
                s(:begin,
                  s(:lvasgn, :key,
                    s(:send,
                      s(:lvar, :key), :downcase)),
                  s(:if,
                    s(:or,
                      s(:or,
                        s(:send,
                          s(:const, nil, :HopByHop), :member?,
                          s(:lvar, :key)),
                        s(:send,
                          s(:lvar, :connections), :member?,
                          s(:lvar, :key))),
                      s(:send,
                        s(:const, nil, :ShouldNotTransfer), :member?,
                        s(:lvar, :key))),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@logger), :debug,
                        s(:dstr,
                          s(:str, "choose_header: `"),
                          s(:begin,
                            s(:lvar, :key)),
                          s(:str, ": "),
                          s(:begin,
                            s(:lvar, :value)),
                          s(:str, "'"))),
                      s(:next)), nil),
                  s(:send,
                    s(:lvar, :dst), :[]=,
                    s(:lvar, :key),
                    s(:lvar, :value)))))),
          s(:def, :set_cookie,
            s(:args,
              s(:arg, :src),
              s(:arg, :dst)),
            s(:if,
              s(:lvasgn, :str,
                s(:send,
                  s(:lvar, :src), :[],
                  s(:str, "set-cookie"))),
              s(:begin,
                s(:lvasgn, :cookies,
                  s(:array)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :str), :split,
                      s(:regexp,
                        s(:str, ",\\s*"),
                        s(:regopt))), :each),
                  s(:args,
                    s(:arg, :token)),
                  s(:if,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "^[^=]+;"),
                        s(:regopt, :o)),
                      s(:lvar, :token)),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :cookies), :[],
                          s(:int, -1)), :<<,
                        s(:str, ", ")), :<<,
                      s(:lvar, :token)),
                    s(:if,
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "="),
                          s(:regopt, :o)),
                        s(:lvar, :token)),
                      s(:send,
                        s(:lvar, :cookies), :<<,
                        s(:lvar, :token)),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :cookies), :[],
                            s(:int, -1)), :<<,
                          s(:str, ", ")), :<<,
                        s(:lvar, :token))))),
                s(:send,
                  s(:send,
                    s(:lvar, :dst), :cookies), :replace,
                  s(:lvar, :cookies))), nil)),
          s(:def, :set_via,
            s(:args,
              s(:arg, :h)),
            s(:if,
              s(:send,
                s(:ivar, :@config), :[],
                s(:sym, :ProxyVia)),
              s(:if,
                s(:send,
                  s(:lvar, :h), :[],
                  s(:str, "via")),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :h), :[],
                      s(:str, "via")), :<<,
                    s(:str, ", ")), :<<,
                  s(:ivar, :@via)),
                s(:send,
                  s(:lvar, :h), :[]=,
                  s(:str, "via"),
                  s(:ivar, :@via))), nil)),
          s(:def, :setup_proxy_header,
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:begin,
              s(:lvasgn, :header,
                s(:send,
                  s(:const, nil, :Hash), :new)),
              s(:send, nil, :choose_header,
                s(:lvar, :req),
                s(:lvar, :header)),
              s(:send, nil, :set_via,
                s(:lvar, :header)),
              s(:return,
                s(:lvar, :header)))),
          s(:def, :setup_upstream_proxy_authentication,
            s(:args,
              s(:arg, :req),
              s(:arg, :res),
              s(:arg, :header)),
            s(:begin,
              s(:if,
                s(:lvasgn, :upstream,
                  s(:send, nil, :proxy_uri,
                    s(:lvar, :req),
                    s(:lvar, :res))),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :upstream), :userinfo),
                    s(:send,
                      s(:lvar, :header), :[]=,
                      s(:str, "proxy-authorization"),
                      s(:send,
                        s(:str, "Basic "), :+,
                        s(:send,
                          s(:send,
                            s(:array,
                              s(:send,
                                s(:lvar, :upstream), :userinfo)), :pack,
                            s(:str, "m")), :delete,
                          s(:str, "\n")))), nil),
                  s(:return,
                    s(:lvar, :upstream))), nil),
              s(:return,
                s(:const, nil, :FakeProxyURI)))),
          s(:def, :perform_proxy_request,
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:begin,
              s(:lvasgn, :uri,
                s(:send,
                  s(:lvar, :req), :request_uri)),
              s(:lvasgn, :path,
                s(:send,
                  s(:send,
                    s(:lvar, :uri), :path), :dup)),
              s(:if,
                s(:send,
                  s(:lvar, :uri), :query),
                s(:send,
                  s(:send,
                    s(:lvar, :path), :<<,
                    s(:str, "?")), :<<,
                  s(:send,
                    s(:lvar, :uri), :query)), nil),
              s(:lvasgn, :header,
                s(:send, nil, :setup_proxy_header,
                  s(:lvar, :req),
                  s(:lvar, :res))),
              s(:lvasgn, :upstream,
                s(:send, nil, :setup_upstream_proxy_authentication,
                  s(:lvar, :req),
                  s(:lvar, :res),
                  s(:lvar, :header))),
              s(:lvasgn, :response,
                s(:nil)),
              s(:lvasgn, :http,
                s(:send,
                  s(:const,
                    s(:const, nil, :Net), :HTTP), :new,
                  s(:send,
                    s(:lvar, :uri), :host),
                  s(:send,
                    s(:lvar, :uri), :port),
                  s(:send,
                    s(:lvar, :upstream), :host),
                  s(:send,
                    s(:lvar, :upstream), :port))),
              s(:block,
                s(:send,
                  s(:lvar, :http), :start),
                s(:args),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:ivar, :@config), :[],
                      s(:sym, :ProxyTimeout)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :http), :open_timeout=,
                        s(:int, 30)),
                      s(:send,
                        s(:lvar, :http), :read_timeout=,
                        s(:int, 60))), nil),
                  s(:lvasgn, :response,
                    s(:yield,
                      s(:lvar, :http),
                      s(:lvar, :path),
                      s(:lvar, :header))))),
              s(:send,
                s(:lvar, :res), :[]=,
                s(:str, "proxy-connection"),
                s(:str, "close")),
              s(:send,
                s(:lvar, :res), :[]=,
                s(:str, "connection"),
                s(:str, "close")),
              s(:send,
                s(:lvar, :res), :status=,
                s(:send,
                  s(:send,
                    s(:lvar, :response), :code), :to_i)),
              s(:send, nil, :choose_header,
                s(:lvar, :response),
                s(:lvar, :res)),
              s(:send, nil, :set_cookie,
                s(:lvar, :response),
                s(:lvar, :res)),
              s(:send, nil, :set_via,
                s(:lvar, :res)),
              s(:send,
                s(:lvar, :res), :body=,
                s(:send,
                  s(:lvar, :response), :body)))))))))
