s(:begin,
  s(:send, nil, :require,
    s(:str, "webrick")),
  s(:send, nil, :require,
    s(:str, "openssl")),
  s(:module,
    s(:const, nil, :WEBrick),
    s(:begin,
      s(:module,
        s(:const, nil, :Config),
        s(:begin,
          s(:lvasgn, :svrsoft,
            s(:send,
              s(:const, nil, :General), :[],
              s(:sym, :ServerSoftware))),
          s(:lvasgn, :osslv,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:cbase), :OpenSSL), :OPENSSL_VERSION), :split), :[],
              s(:int, 1))),
          s(:casgn, nil, :SSL,
            s(:hash,
              s(:pair,
                s(:sym, :ServerSoftware),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :svrsoft)),
                  s(:str, " OpenSSL/"),
                  s(:begin,
                    s(:lvar, :osslv)))),
              s(:pair,
                s(:sym, :SSLEnable),
                s(:false)),
              s(:pair,
                s(:sym, :SSLCertificate),
                s(:nil)),
              s(:pair,
                s(:sym, :SSLPrivateKey),
                s(:nil)),
              s(:pair,
                s(:sym, :SSLClientCA),
                s(:nil)),
              s(:pair,
                s(:sym, :SSLExtraChainCert),
                s(:nil)),
              s(:pair,
                s(:sym, :SSLCACertificateFile),
                s(:nil)),
              s(:pair,
                s(:sym, :SSLCACertificatePath),
                s(:nil)),
              s(:pair,
                s(:sym, :SSLCertificateStore),
                s(:nil)),
              s(:pair,
                s(:sym, :SSLTmpDhCallback),
                s(:nil)),
              s(:pair,
                s(:sym, :SSLVerifyClient),
                s(:const,
                  s(:const,
                    s(:const,
                      s(:cbase), :OpenSSL), :SSL), :VERIFY_NONE)),
              s(:pair,
                s(:sym, :SSLVerifyDepth),
                s(:nil)),
              s(:pair,
                s(:sym, :SSLVerifyCallback),
                s(:nil)),
              s(:pair,
                s(:sym, :SSLTimeout),
                s(:nil)),
              s(:pair,
                s(:sym, :SSLOptions),
                s(:nil)),
              s(:pair,
                s(:sym, :SSLStartImmediately),
                s(:true)),
              s(:pair,
                s(:sym, :SSLCertName),
                s(:nil)),
              s(:pair,
                s(:sym, :SSLCertComment),
                s(:str, "Generated by Ruby/OpenSSL")))),
          s(:send,
            s(:const, nil, :General), :update,
            s(:const, nil, :SSL)))),
      s(:module,
        s(:const, nil, :Utils),
        s(:begin,
          s(:def, :create_self_signed_cert,
            s(:args,
              s(:arg, :bits),
              s(:arg, :cn),
              s(:arg, :comment)),
            s(:begin,
              s(:lvasgn, :rsa,
                s(:block,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                    s(:lvar, :bits)),
                  s(:args,
                    s(:arg, :p),
                    s(:arg, :n)),
                  s(:case,
                    s(:lvar, :p),
                    s(:when,
                      s(:int, 0),
                      s(:send,
                        s(:gvar, :$stderr), :putc,
                        s(:str, "."))),
                    s(:when,
                      s(:int, 1),
                      s(:send,
                        s(:gvar, :$stderr), :putc,
                        s(:str, "+"))),
                    s(:when,
                      s(:int, 2),
                      s(:send,
                        s(:gvar, :$stderr), :putc,
                        s(:str, "*"))),
                    s(:when,
                      s(:int, 3),
                      s(:send,
                        s(:gvar, :$stderr), :putc,
                        s(:str, "\n"))),
                    s(:send,
                      s(:gvar, :$stderr), :putc,
                      s(:str, "*"))))),
              s(:lvasgn, :cert,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :X509), :Certificate), :new)),
              s(:send,
                s(:lvar, :cert), :version=,
                s(:int, 2)),
              s(:send,
                s(:lvar, :cert), :serial=,
                s(:int, 1)),
              s(:lvasgn, :name,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :X509), :Name), :new,
                  s(:lvar, :cn))),
              s(:send,
                s(:lvar, :cert), :subject=,
                s(:lvar, :name)),
              s(:send,
                s(:lvar, :cert), :issuer=,
                s(:lvar, :name)),
              s(:send,
                s(:lvar, :cert), :not_before=,
                s(:send,
                  s(:const, nil, :Time), :now)),
              s(:send,
                s(:lvar, :cert), :not_after=,
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:int, 365), :*,
                          s(:int, 24)), :*,
                        s(:int, 60)), :*,
                      s(:int, 60))))),
              s(:send,
                s(:lvar, :cert), :public_key=,
                s(:send,
                  s(:lvar, :rsa), :public_key)),
              s(:lvasgn, :ef,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :X509), :ExtensionFactory), :new,
                  s(:nil),
                  s(:lvar, :cert))),
              s(:send,
                s(:lvar, :ef), :issuer_certificate=,
                s(:lvar, :cert)),
              s(:send,
                s(:lvar, :cert), :extensions=,
                s(:array,
                  s(:send,
                    s(:lvar, :ef), :create_extension,
                    s(:str, "basicConstraints"),
                    s(:str, "CA:FALSE")),
                  s(:send,
                    s(:lvar, :ef), :create_extension,
                    s(:str, "keyUsage"),
                    s(:str, "keyEncipherment")),
                  s(:send,
                    s(:lvar, :ef), :create_extension,
                    s(:str, "subjectKeyIdentifier"),
                    s(:str, "hash")),
                  s(:send,
                    s(:lvar, :ef), :create_extension,
                    s(:str, "extendedKeyUsage"),
                    s(:str, "serverAuth")),
                  s(:send,
                    s(:lvar, :ef), :create_extension,
                    s(:str, "nsComment"),
                    s(:lvar, :comment)))),
              s(:lvasgn, :aki,
                s(:send,
                  s(:lvar, :ef), :create_extension,
                  s(:str, "authorityKeyIdentifier"),
                  s(:str, "keyid:always,issuer:always"))),
              s(:send,
                s(:lvar, :cert), :add_extension,
                s(:lvar, :aki)),
              s(:send,
                s(:lvar, :cert), :sign,
                s(:lvar, :rsa),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new)),
              s(:return,
                s(:array,
                  s(:lvar, :cert),
                  s(:lvar, :rsa))))),
          s(:send, nil, :module_function,
            s(:sym, :create_self_signed_cert)))),
      s(:class,
        s(:const, nil, :GenericServer), nil,
        s(:begin,
          s(:def, :ssl_context,
            s(:args),
            s(:or_asgn,
              s(:ivasgn, :@ssl_context),
              s(:nil))),
          s(:undef,
            s(:sym, :listen)),
          s(:def, :listen,
            s(:args,
              s(:arg, :address),
              s(:arg, :port)),
            s(:begin,
              s(:lvasgn, :listeners,
                s(:send,
                  s(:const, nil, :Utils), :create_listeners,
                  s(:lvar, :address),
                  s(:lvar, :port))),
              s(:if,
                s(:send,
                  s(:ivar, :@config), :[],
                  s(:sym, :SSLEnable)),
                s(:begin,
                  s(:if,
                    s(:send, nil, :ssl_context), nil,
                    s(:begin,
                      s(:ivasgn, :@ssl_context,
                        s(:send, nil, :setup_ssl_context,
                          s(:ivar, :@config))),
                      s(:send,
                        s(:ivar, :@logger), :info,
                        s(:send,
                          s(:str, "\n"), :+,
                          s(:send,
                            s(:send,
                              s(:ivar, :@config), :[],
                              s(:sym, :SSLCertificate)), :to_text))))),
                  s(:block,
                    s(:send,
                      s(:lvar, :listeners), :collect!),
                    s(:args,
                      s(:arg, :svr)),
                    s(:begin,
                      s(:lvasgn, :ssvr,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const,
                                s(:cbase), :OpenSSL), :SSL), :SSLServer), :new,
                          s(:lvar, :svr),
                          s(:send, nil, :ssl_context))),
                      s(:send,
                        s(:lvar, :ssvr), :start_immediately=,
                        s(:send,
                          s(:ivar, :@config), :[],
                          s(:sym, :SSLStartImmediately))),
                      s(:lvar, :ssvr)))), nil),
              s(:op_asgn,
                s(:ivasgn, :@listeners), :+,
                s(:lvar, :listeners)),
              s(:send, nil, :setup_shutdown_pipe))),
          s(:def, :setup_ssl_context,
            s(:args,
              s(:arg, :config)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :config), :[],
                  s(:sym, :SSLCertificate)), nil,
                s(:begin,
                  s(:lvasgn, :cn,
                    s(:send,
                      s(:lvar, :config), :[],
                      s(:sym, :SSLCertName))),
                  s(:lvasgn, :comment,
                    s(:send,
                      s(:lvar, :config), :[],
                      s(:sym, :SSLCertComment))),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :cert),
                      s(:lvasgn, :key)),
                    s(:send,
                      s(:const, nil, :Utils), :create_self_signed_cert,
                      s(:int, 1024),
                      s(:lvar, :cn),
                      s(:lvar, :comment))),
                  s(:send,
                    s(:lvar, :config), :[]=,
                    s(:sym, :SSLCertificate),
                    s(:lvar, :cert)),
                  s(:send,
                    s(:lvar, :config), :[]=,
                    s(:sym, :SSLPrivateKey),
                    s(:lvar, :key)))),
              s(:lvasgn, :ctx,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
              s(:send,
                s(:lvar, :ctx), :key=,
                s(:send,
                  s(:lvar, :config), :[],
                  s(:sym, :SSLPrivateKey))),
              s(:send,
                s(:lvar, :ctx), :cert=,
                s(:send,
                  s(:lvar, :config), :[],
                  s(:sym, :SSLCertificate))),
              s(:send,
                s(:lvar, :ctx), :client_ca=,
                s(:send,
                  s(:lvar, :config), :[],
                  s(:sym, :SSLClientCA))),
              s(:send,
                s(:lvar, :ctx), :extra_chain_cert=,
                s(:send,
                  s(:lvar, :config), :[],
                  s(:sym, :SSLExtraChainCert))),
              s(:send,
                s(:lvar, :ctx), :ca_file=,
                s(:send,
                  s(:lvar, :config), :[],
                  s(:sym, :SSLCACertificateFile))),
              s(:send,
                s(:lvar, :ctx), :ca_path=,
                s(:send,
                  s(:lvar, :config), :[],
                  s(:sym, :SSLCACertificatePath))),
              s(:send,
                s(:lvar, :ctx), :cert_store=,
                s(:send,
                  s(:lvar, :config), :[],
                  s(:sym, :SSLCertificateStore))),
              s(:send,
                s(:lvar, :ctx), :tmp_dh_callback=,
                s(:send,
                  s(:lvar, :config), :[],
                  s(:sym, :SSLTmpDhCallback))),
              s(:send,
                s(:lvar, :ctx), :verify_mode=,
                s(:send,
                  s(:lvar, :config), :[],
                  s(:sym, :SSLVerifyClient))),
              s(:send,
                s(:lvar, :ctx), :verify_depth=,
                s(:send,
                  s(:lvar, :config), :[],
                  s(:sym, :SSLVerifyDepth))),
              s(:send,
                s(:lvar, :ctx), :verify_callback=,
                s(:send,
                  s(:lvar, :config), :[],
                  s(:sym, :SSLVerifyCallback))),
              s(:send,
                s(:lvar, :ctx), :timeout=,
                s(:send,
                  s(:lvar, :config), :[],
                  s(:sym, :SSLTimeout))),
              s(:send,
                s(:lvar, :ctx), :options=,
                s(:send,
                  s(:lvar, :config), :[],
                  s(:sym, :SSLOptions))),
              s(:lvar, :ctx))))))))
