s(:begin,
  s(:send, nil, :require,
    s(:str, "socket")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:module,
    s(:const, nil, :WEBrick),
    s(:begin,
      s(:casgn, nil, :CR,
        s(:str, "\r")),
      s(:casgn, nil, :LF,
        s(:str, "\n")),
      s(:casgn, nil, :CRLF,
        s(:str, "\r\n")),
      s(:module,
        s(:const, nil, :HTTPUtils),
        s(:begin,
          s(:def, :normalize_path,
            s(:args,
              s(:arg, :path)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :path), :[],
                    s(:int, 0)), :!=,
                  s(:str, "/")),
                s(:send, nil, :raise,
                  s(:dstr,
                    s(:str, "abnormal path `"),
                    s(:begin,
                      s(:lvar, :path)),
                    s(:str, "'"))), nil),
              s(:lvasgn, :ret,
                s(:send,
                  s(:lvar, :path), :dup)),
              s(:send,
                s(:lvar, :ret), :gsub!,
                s(:regexp,
                  s(:str, "/+"),
                  s(:regopt, :o)),
                s(:str, "/")),
              s(:while,
                s(:send,
                  s(:lvar, :ret), :sub!,
                  s(:regexp,
                    s(:str, "/\\.(?:/|\\Z)"),
                    s(:regopt)),
                  s(:str, "/")), nil),
              s(:while,
                s(:send,
                  s(:lvar, :ret), :sub!,
                  s(:regexp,
                    s(:str, "/(?!\\.\\./)[^/]+/\\.\\.(?:/|\\Z)"),
                    s(:regopt)),
                  s(:str, "/")), nil),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "/\\.\\.(/|\\Z)"),
                    s(:regopt)),
                  s(:lvar, :ret)),
                s(:send, nil, :raise,
                  s(:dstr,
                    s(:str, "abnormal path `"),
                    s(:begin,
                      s(:lvar, :path)),
                    s(:str, "'"))), nil),
              s(:lvar, :ret))),
          s(:send, nil, :module_function,
            s(:sym, :normalize_path)),
          s(:casgn, nil, :DefaultMimeTypes,
            s(:hash,
              s(:pair,
                s(:str, "ai"),
                s(:str, "application/postscript")),
              s(:pair,
                s(:str, "asc"),
                s(:str, "text/plain")),
              s(:pair,
                s(:str, "avi"),
                s(:str, "video/x-msvideo")),
              s(:pair,
                s(:str, "bin"),
                s(:str, "application/octet-stream")),
              s(:pair,
                s(:str, "bmp"),
                s(:str, "image/bmp")),
              s(:pair,
                s(:str, "class"),
                s(:str, "application/octet-stream")),
              s(:pair,
                s(:str, "cer"),
                s(:str, "application/pkix-cert")),
              s(:pair,
                s(:str, "crl"),
                s(:str, "application/pkix-crl")),
              s(:pair,
                s(:str, "crt"),
                s(:str, "application/x-x509-ca-cert")),
              s(:pair,
                s(:str, "css"),
                s(:str, "text/css")),
              s(:pair,
                s(:str, "dms"),
                s(:str, "application/octet-stream")),
              s(:pair,
                s(:str, "doc"),
                s(:str, "application/msword")),
              s(:pair,
                s(:str, "dvi"),
                s(:str, "application/x-dvi")),
              s(:pair,
                s(:str, "eps"),
                s(:str, "application/postscript")),
              s(:pair,
                s(:str, "etx"),
                s(:str, "text/x-setext")),
              s(:pair,
                s(:str, "exe"),
                s(:str, "application/octet-stream")),
              s(:pair,
                s(:str, "gif"),
                s(:str, "image/gif")),
              s(:pair,
                s(:str, "htm"),
                s(:str, "text/html")),
              s(:pair,
                s(:str, "html"),
                s(:str, "text/html")),
              s(:pair,
                s(:str, "jpe"),
                s(:str, "image/jpeg")),
              s(:pair,
                s(:str, "jpeg"),
                s(:str, "image/jpeg")),
              s(:pair,
                s(:str, "jpg"),
                s(:str, "image/jpeg")),
              s(:pair,
                s(:str, "js"),
                s(:str, "application/javascript")),
              s(:pair,
                s(:str, "lha"),
                s(:str, "application/octet-stream")),
              s(:pair,
                s(:str, "lzh"),
                s(:str, "application/octet-stream")),
              s(:pair,
                s(:str, "mov"),
                s(:str, "video/quicktime")),
              s(:pair,
                s(:str, "mpe"),
                s(:str, "video/mpeg")),
              s(:pair,
                s(:str, "mpeg"),
                s(:str, "video/mpeg")),
              s(:pair,
                s(:str, "mpg"),
                s(:str, "video/mpeg")),
              s(:pair,
                s(:str, "pbm"),
                s(:str, "image/x-portable-bitmap")),
              s(:pair,
                s(:str, "pdf"),
                s(:str, "application/pdf")),
              s(:pair,
                s(:str, "pgm"),
                s(:str, "image/x-portable-graymap")),
              s(:pair,
                s(:str, "png"),
                s(:str, "image/png")),
              s(:pair,
                s(:str, "pnm"),
                s(:str, "image/x-portable-anymap")),
              s(:pair,
                s(:str, "ppm"),
                s(:str, "image/x-portable-pixmap")),
              s(:pair,
                s(:str, "ppt"),
                s(:str, "application/vnd.ms-powerpoint")),
              s(:pair,
                s(:str, "ps"),
                s(:str, "application/postscript")),
              s(:pair,
                s(:str, "qt"),
                s(:str, "video/quicktime")),
              s(:pair,
                s(:str, "ras"),
                s(:str, "image/x-cmu-raster")),
              s(:pair,
                s(:str, "rb"),
                s(:str, "text/plain")),
              s(:pair,
                s(:str, "rd"),
                s(:str, "text/plain")),
              s(:pair,
                s(:str, "rtf"),
                s(:str, "application/rtf")),
              s(:pair,
                s(:str, "sgm"),
                s(:str, "text/sgml")),
              s(:pair,
                s(:str, "sgml"),
                s(:str, "text/sgml")),
              s(:pair,
                s(:str, "svg"),
                s(:str, "image/svg+xml")),
              s(:pair,
                s(:str, "tif"),
                s(:str, "image/tiff")),
              s(:pair,
                s(:str, "tiff"),
                s(:str, "image/tiff")),
              s(:pair,
                s(:str, "txt"),
                s(:str, "text/plain")),
              s(:pair,
                s(:str, "xbm"),
                s(:str, "image/x-xbitmap")),
              s(:pair,
                s(:str, "xhtml"),
                s(:str, "text/html")),
              s(:pair,
                s(:str, "xls"),
                s(:str, "application/vnd.ms-excel")),
              s(:pair,
                s(:str, "xml"),
                s(:str, "text/xml")),
              s(:pair,
                s(:str, "xpm"),
                s(:str, "image/x-xpixmap")),
              s(:pair,
                s(:str, "xwd"),
                s(:str, "image/x-xwindowdump")),
              s(:pair,
                s(:str, "zip"),
                s(:str, "application/zip")))),
          s(:def, :load_mime_types,
            s(:args,
              s(:arg, :file)),
            s(:block,
              s(:send, nil, :open,
                s(:lvar, :file)),
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:lvasgn, :hash,
                  s(:send,
                    s(:const, nil, :Hash), :new)),
                s(:block,
                  s(:send,
                    s(:lvar, :io), :each),
                  s(:args,
                    s(:arg, :line)),
                  s(:begin,
                    s(:if,
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "^#"),
                          s(:regopt)),
                        s(:lvar, :line)),
                      s(:next), nil),
                    s(:send,
                      s(:lvar, :line), :chomp!),
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :mimetype),
                        s(:lvasgn, :ext0)),
                      s(:send,
                        s(:lvar, :line), :split,
                        s(:regexp,
                          s(:str, "\\s+"),
                          s(:regopt)),
                        s(:int, 2))),
                    s(:if,
                      s(:lvar, :ext0), nil,
                      s(:next)),
                    s(:if,
                      s(:send,
                        s(:lvar, :ext0), :empty?),
                      s(:next), nil),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :ext0), :split,
                          s(:regexp,
                            s(:str, "\\s+"),
                            s(:regopt))), :each),
                      s(:args,
                        s(:arg, :ext)),
                      s(:send,
                        s(:lvar, :hash), :[]=,
                        s(:lvar, :ext),
                        s(:lvar, :mimetype))))),
                s(:lvar, :hash)))),
          s(:send, nil, :module_function,
            s(:sym, :load_mime_types)),
          s(:def, :mime_type,
            s(:args,
              s(:arg, :filename),
              s(:arg, :mime_tab)),
            s(:begin,
              s(:lvasgn, :suffix1,
                s(:begin,
                  s(:and,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "\\.(\\w+)$"),
                        s(:regopt)),
                      s(:lvar, :filename)),
                    s(:send,
                      s(:nth_ref, 1), :downcase)))),
              s(:lvasgn, :suffix2,
                s(:begin,
                  s(:and,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "\\.(\\w+)\\.[\\w\\-]+$"),
                        s(:regopt)),
                      s(:lvar, :filename)),
                    s(:send,
                      s(:nth_ref, 1), :downcase)))),
              s(:or,
                s(:or,
                  s(:send,
                    s(:lvar, :mime_tab), :[],
                    s(:lvar, :suffix1)),
                  s(:send,
                    s(:lvar, :mime_tab), :[],
                    s(:lvar, :suffix2))),
                s(:str, "application/octet-stream")))),
          s(:send, nil, :module_function,
            s(:sym, :mime_type)),
          s(:def, :parse_header,
            s(:args,
              s(:arg, :raw)),
            s(:begin,
              s(:lvasgn, :header,
                s(:send,
                  s(:const, nil, :Hash), :new,
                  s(:send,
                    s(:array), :freeze))),
              s(:lvasgn, :field,
                s(:nil)),
              s(:block,
                s(:send,
                  s(:lvar, :raw), :each_line),
                s(:args,
                  s(:arg, :line)),
                s(:case,
                  s(:lvar, :line),
                  s(:when,
                    s(:regexp,
                      s(:str, "^([A-Za-z0-9!\\\#$%&'*+\\-.^_`|~]+):\\s*(.*?)\\s*\\z"),
                      s(:regopt, :m, :o)),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :field),
                          s(:lvasgn, :value)),
                        s(:array,
                          s(:nth_ref, 1),
                          s(:nth_ref, 2))),
                      s(:send,
                        s(:lvar, :field), :downcase!),
                      s(:if,
                        s(:send,
                          s(:lvar, :header), :has_key?,
                          s(:lvar, :field)), nil,
                        s(:send,
                          s(:lvar, :header), :[]=,
                          s(:lvar, :field),
                          s(:array))),
                      s(:send,
                        s(:send,
                          s(:lvar, :header), :[],
                          s(:lvar, :field)), :<<,
                        s(:lvar, :value)))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^\\s+(.*?)\\s*\\z"),
                      s(:regopt, :m, :o)),
                    s(:begin,
                      s(:lvasgn, :value,
                        s(:nth_ref, 1)),
                      s(:if,
                        s(:lvar, :field), nil,
                        s(:send, nil, :raise,
                          s(:const,
                            s(:const, nil, :HTTPStatus), :BadRequest),
                          s(:dstr,
                            s(:str, "bad header '"),
                            s(:begin,
                              s(:lvar, :line)),
                            s(:str, "'.")))),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :header), :[],
                              s(:lvar, :field)), :[],
                            s(:int, -1)), :<<,
                          s(:str, " ")), :<<,
                        s(:lvar, :value)))),
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :HTTPStatus), :BadRequest),
                    s(:dstr,
                      s(:str, "bad header '"),
                      s(:begin,
                        s(:lvar, :line)),
                      s(:str, "'."))))),
              s(:block,
                s(:send,
                  s(:lvar, :header), :each),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :values)),
                s(:block,
                  s(:send,
                    s(:lvar, :values), :each),
                  s(:args,
                    s(:arg, :value)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :value), :strip!),
                    s(:send,
                      s(:lvar, :value), :gsub!,
                      s(:regexp,
                        s(:str, "\\s+"),
                        s(:regopt)),
                      s(:str, " "))))),
              s(:lvar, :header))),
          s(:send, nil, :module_function,
            s(:sym, :parse_header)),
          s(:def, :split_header_value,
            s(:args,
              s(:arg, :str)),
            s(:send,
              s(:send,
                s(:lvar, :str), :scan,
                s(:regexp,
                  s(:str, "\\G((?:\"(?:\\\\.|[^\"])+?\"|[^\",]+)+)\n"),
                  s(:str, "                    (?:,\\s*|\\Z)"),
                  s(:regopt, :n, :x))), :flatten)),
          s(:send, nil, :module_function,
            s(:sym, :split_header_value)),
          s(:def, :parse_range_header,
            s(:args,
              s(:arg, :ranges_specifier)),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "^bytes=(.*)"),
                  s(:regopt)),
                s(:lvar, :ranges_specifier)),
              s(:begin,
                s(:lvasgn, :byte_range_set,
                  s(:send, nil, :split_header_value,
                    s(:nth_ref, 1))),
                s(:block,
                  s(:send,
                    s(:lvar, :byte_range_set), :collect),
                  s(:args,
                    s(:arg, :range_spec)),
                  s(:case,
                    s(:lvar, :range_spec),
                    s(:when,
                      s(:regexp,
                        s(:str, "^(\\d+)-(\\d+)"),
                        s(:regopt)),
                      s(:irange,
                        s(:send,
                          s(:nth_ref, 1), :to_i),
                        s(:send,
                          s(:nth_ref, 2), :to_i))),
                    s(:when,
                      s(:regexp,
                        s(:str, "^(\\d+)-"),
                        s(:regopt)),
                      s(:irange,
                        s(:send,
                          s(:nth_ref, 1), :to_i),
                        s(:int, -1))),
                    s(:when,
                      s(:regexp,
                        s(:str, "^-(\\d+)"),
                        s(:regopt)),
                      s(:irange,
                        s(:send,
                          s(:begin,
                            s(:send,
                              s(:nth_ref, 1), :to_i)), :-@),
                        s(:int, -1))),
                    s(:return,
                      s(:nil))))), nil)),
          s(:send, nil, :module_function,
            s(:sym, :parse_range_header)),
          s(:def, :parse_qvalues,
            s(:args,
              s(:arg, :value)),
            s(:begin,
              s(:lvasgn, :tmp,
                s(:array)),
              s(:if,
                s(:lvar, :value),
                s(:begin,
                  s(:lvasgn, :parts,
                    s(:send,
                      s(:lvar, :value), :split,
                      s(:regexp,
                        s(:str, ",\\s*"),
                        s(:regopt)))),
                  s(:block,
                    s(:send,
                      s(:lvar, :parts), :each),
                    s(:args,
                      s(:arg, :part)),
                    s(:if,
                      s(:lvasgn, :m,
                        s(:send,
                          s(:regexp,
                            s(:str, "^([^\\s,]+?)(?:;\\s*q=(\\d+(?:\\.\\d+)?))?$"),
                            s(:regopt)), :match,
                          s(:lvar, :part))),
                      s(:begin,
                        s(:lvasgn, :val,
                          s(:send,
                            s(:lvar, :m), :[],
                            s(:int, 1))),
                        s(:lvasgn, :q,
                          s(:send,
                            s(:begin,
                              s(:or,
                                s(:send,
                                  s(:lvar, :m), :[],
                                  s(:int, 2)),
                                s(:int, 1))), :to_f)),
                        s(:send,
                          s(:lvar, :tmp), :push,
                          s(:array,
                            s(:lvar, :val),
                            s(:lvar, :q)))), nil)),
                  s(:lvasgn, :tmp,
                    s(:block,
                      s(:send,
                        s(:lvar, :tmp), :sort_by),
                      s(:args,
                        s(:arg, :val),
                        s(:arg, :q)),
                      s(:send,
                        s(:lvar, :q), :-@))),
                  s(:block,
                    s(:send,
                      s(:lvar, :tmp), :collect!),
                    s(:args,
                      s(:arg, :val),
                      s(:arg, :q)),
                    s(:lvar, :val))), nil),
              s(:return,
                s(:lvar, :tmp)))),
          s(:send, nil, :module_function,
            s(:sym, :parse_qvalues)),
          s(:def, :dequote,
            s(:args,
              s(:arg, :str)),
            s(:begin,
              s(:lvasgn, :ret,
                s(:if,
                  s(:begin,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "\\A\"(.*)\"\\Z"),
                        s(:regopt)),
                      s(:lvar, :str))),
                  s(:nth_ref, 1),
                  s(:send,
                    s(:lvar, :str), :dup))),
              s(:send,
                s(:lvar, :ret), :gsub!,
                s(:regexp,
                  s(:str, "\\\\(.)"),
                  s(:regopt)),
                s(:str, "\\1")),
              s(:lvar, :ret))),
          s(:send, nil, :module_function,
            s(:sym, :dequote)),
          s(:def, :quote,
            s(:args,
              s(:arg, :str)),
            s(:send,
              s(:send,
                s(:str, "\""), :<<,
                s(:send,
                  s(:lvar, :str), :gsub,
                  s(:regexp,
                    s(:str, "[\\\\\\\"]"),
                    s(:regopt, :o)),
                  s(:str, "\\\u0001"))), :<<,
              s(:str, "\""))),
          s(:send, nil, :module_function,
            s(:sym, :quote)),
          s(:class,
            s(:const, nil, :FormData),
            s(:const, nil, :String),
            s(:begin,
              s(:casgn, nil, :EmptyRawHeader,
                s(:send,
                  s(:array), :freeze)),
              s(:casgn, nil, :EmptyHeader,
                s(:send,
                  s(:hash), :freeze)),
              s(:send, nil, :attr_accessor,
                s(:sym, :name)),
              s(:send, nil, :attr_accessor,
                s(:sym, :filename)),
              s(:send, nil, :attr_accessor,
                s(:sym, :next_data)),
              s(:send, nil, :protected,
                s(:sym, :next_data)),
              s(:def, :initialize,
                s(:args,
                  s(:restarg, :args)),
                s(:begin,
                  s(:ivasgn, :@name,
                    s(:ivasgn, :@filename,
                      s(:ivasgn, :@next_data,
                        s(:nil)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :args), :empty?),
                    s(:begin,
                      s(:ivasgn, :@raw_header,
                        s(:array)),
                      s(:ivasgn, :@header,
                        s(:nil)),
                      s(:super,
                        s(:str, ""))),
                    s(:begin,
                      s(:ivasgn, :@raw_header,
                        s(:const, nil, :EmptyRawHeader)),
                      s(:ivasgn, :@header,
                        s(:const, nil, :EmptyHeader)),
                      s(:super,
                        s(:send,
                          s(:lvar, :args), :shift)),
                      s(:if,
                        s(:send,
                          s(:lvar, :args), :empty?), nil,
                        s(:ivasgn, :@next_data,
                          s(:send,
                            s(:send,
                              s(:self), :class), :new,
                            s(:splat,
                              s(:lvar, :args))))))))),
              s(:def, :[],
                s(:args,
                  s(:restarg, :key)),
                s(:kwbegin,
                  s(:rescue,
                    s(:send,
                      s(:send,
                        s(:ivar, :@header), :[],
                        s(:send,
                          s(:send,
                            s(:lvar, :key), :[],
                            s(:int, 0)), :downcase)), :join,
                      s(:str, ", ")),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :StandardError),
                        s(:const, nil, :NameError)), nil,
                      s(:zsuper)), nil))),
              s(:def, :<<,
                s(:args,
                  s(:arg, :str)),
                s(:begin,
                  s(:if,
                    s(:ivar, :@header),
                    s(:zsuper),
                    s(:if,
                      s(:send,
                        s(:lvar, :str), :==,
                        s(:const, nil, :CRLF)),
                      s(:begin,
                        s(:ivasgn, :@header,
                          s(:send,
                            s(:const, nil, :HTTPUtils), :parse_header,
                            s(:send,
                              s(:ivar, :@raw_header), :join))),
                        s(:if,
                          s(:lvasgn, :cd,
                            s(:send,
                              s(:self), :[],
                              s(:str, "content-disposition"))),
                          s(:begin,
                            s(:if,
                              s(:match_with_lvasgn,
                                s(:regexp,
                                  s(:str, "\\s+name=\"(.*?)\""),
                                  s(:regopt)),
                                s(:lvar, :cd)),
                              s(:ivasgn, :@name,
                                s(:nth_ref, 1)), nil),
                            s(:if,
                              s(:match_with_lvasgn,
                                s(:regexp,
                                  s(:str, "\\s+filename=\"(.*?)\""),
                                  s(:regopt)),
                                s(:lvar, :cd)),
                              s(:ivasgn, :@filename,
                                s(:nth_ref, 1)), nil)), nil)),
                      s(:send,
                        s(:ivar, :@raw_header), :<<,
                        s(:lvar, :str)))),
                  s(:self))),
              s(:def, :append_data,
                s(:args,
                  s(:arg, :data)),
                s(:begin,
                  s(:lvasgn, :tmp,
                    s(:self)),
                  s(:while,
                    s(:lvar, :tmp),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :tmp), :next_data), nil,
                        s(:begin,
                          s(:send,
                            s(:lvar, :tmp), :next_data=,
                            s(:lvar, :data)),
                          s(:break))),
                      s(:lvasgn, :tmp,
                        s(:send,
                          s(:lvar, :tmp), :next_data)))),
                  s(:self))),
              s(:def, :each_data,
                s(:args),
                s(:begin,
                  s(:lvasgn, :tmp,
                    s(:self)),
                  s(:while,
                    s(:lvar, :tmp),
                    s(:begin,
                      s(:lvasgn, :next_data,
                        s(:send,
                          s(:lvar, :tmp), :next_data)),
                      s(:yield,
                        s(:lvar, :tmp)),
                      s(:lvasgn, :tmp,
                        s(:lvar, :next_data)))))),
              s(:def, :list,
                s(:args),
                s(:begin,
                  s(:lvasgn, :ret,
                    s(:array)),
                  s(:block,
                    s(:send, nil, :each_data),
                    s(:args,
                      s(:arg, :data)),
                    s(:send,
                      s(:lvar, :ret), :<<,
                      s(:send,
                        s(:lvar, :data), :to_s))),
                  s(:lvar, :ret))),
              s(:alias,
                s(:sym, :to_ary),
                s(:sym, :list)),
              s(:def, :to_s,
                s(:args),
                s(:send,
                  s(:const, nil, :String), :new,
                  s(:self))))),
          s(:def, :parse_query,
            s(:args,
              s(:arg, :str)),
            s(:begin,
              s(:lvasgn, :query,
                s(:send,
                  s(:const, nil, :Hash), :new)),
              s(:if,
                s(:lvar, :str),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :str), :split,
                      s(:regexp,
                        s(:str, "[&;]"),
                        s(:regopt))), :each),
                  s(:args,
                    s(:arg, :x)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :x), :empty?),
                      s(:next), nil),
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :key),
                        s(:lvasgn, :val)),
                      s(:send,
                        s(:lvar, :x), :split,
                        s(:regexp,
                          s(:str, "="),
                          s(:regopt)),
                        s(:int, 2))),
                    s(:lvasgn, :key,
                      s(:send, nil, :unescape_form,
                        s(:lvar, :key))),
                    s(:lvasgn, :val,
                      s(:send, nil, :unescape_form,
                        s(:send,
                          s(:lvar, :val), :to_s))),
                    s(:lvasgn, :val,
                      s(:send,
                        s(:const, nil, :FormData), :new,
                        s(:lvar, :val))),
                    s(:send,
                      s(:lvar, :val), :name=,
                      s(:lvar, :key)),
                    s(:if,
                      s(:send,
                        s(:lvar, :query), :has_key?,
                        s(:lvar, :key)),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:lvar, :query), :[],
                            s(:lvar, :key)), :append_data,
                          s(:lvar, :val)),
                        s(:next)), nil),
                    s(:send,
                      s(:lvar, :query), :[]=,
                      s(:lvar, :key),
                      s(:lvar, :val)))), nil),
              s(:lvar, :query))),
          s(:send, nil, :module_function,
            s(:sym, :parse_query)),
          s(:def, :parse_form_data,
            s(:args,
              s(:arg, :io),
              s(:arg, :boundary)),
            s(:begin,
              s(:lvasgn, :boundary_regexp,
                s(:regexp,
                  s(:str, "\\A--"),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Regexp), :quote,
                      s(:lvar, :boundary))),
                  s(:str, "(--)?"),
                  s(:begin,
                    s(:const, nil, :CRLF)),
                  s(:str, "\\z"),
                  s(:regopt))),
              s(:lvasgn, :form_data,
                s(:send,
                  s(:const, nil, :Hash), :new)),
              s(:if,
                s(:lvar, :io), nil,
                s(:return,
                  s(:lvar, :form_data))),
              s(:lvasgn, :data,
                s(:nil)),
              s(:block,
                s(:send,
                  s(:lvar, :io), :each_line),
                s(:args,
                  s(:arg, :line)),
                s(:if,
                  s(:send,
                    s(:lvar, :boundary_regexp), :=~,
                    s(:lvar, :line)),
                  s(:begin,
                    s(:if,
                      s(:lvar, :data),
                      s(:begin,
                        s(:send,
                          s(:lvar, :data), :chop!),
                        s(:lvasgn, :key,
                          s(:send,
                            s(:lvar, :data), :name)),
                        s(:if,
                          s(:send,
                            s(:lvar, :form_data), :has_key?,
                            s(:lvar, :key)),
                          s(:send,
                            s(:send,
                              s(:lvar, :form_data), :[],
                              s(:lvar, :key)), :append_data,
                            s(:lvar, :data)),
                          s(:send,
                            s(:lvar, :form_data), :[]=,
                            s(:lvar, :key),
                            s(:lvar, :data)))), nil),
                    s(:lvasgn, :data,
                      s(:send,
                        s(:const, nil, :FormData), :new)),
                    s(:next)),
                  s(:if,
                    s(:lvar, :data),
                    s(:send,
                      s(:lvar, :data), :<<,
                      s(:lvar, :line)), nil))),
              s(:return,
                s(:lvar, :form_data)))),
          s(:send, nil, :module_function,
            s(:sym, :parse_form_data)),
          s(:lvasgn, :reserved,
            s(:str, ";/?:@&=+$,")),
          s(:lvasgn, :num,
            s(:str, "0123456789")),
          s(:lvasgn, :lowalpha,
            s(:str, "abcdefghijklmnopqrstuvwxyz")),
          s(:lvasgn, :upalpha,
            s(:str, "ABCDEFGHIJKLMNOPQRSTUVWXYZ")),
          s(:lvasgn, :mark,
            s(:str, "-_.!~*'()")),
          s(:lvasgn, :unreserved,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :num), :+,
                  s(:lvar, :lowalpha)), :+,
                s(:lvar, :upalpha)), :+,
              s(:lvar, :mark))),
          s(:lvasgn, :control,
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:int, 0),
                        s(:int, 31))), :collect),
                  s(:args,
                    s(:arg, :c)),
                  s(:send,
                    s(:lvar, :c), :chr)), :join), :+,
              s(:str, "\u007F"))),
          s(:lvasgn, :space,
            s(:str, " ")),
          s(:lvasgn, :delims,
            s(:str, "<>#%\"")),
          s(:lvasgn, :unwise,
            s(:str, "{}|\\^[]`")),
          s(:lvasgn, :nonascii,
            s(:send,
              s(:block,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 128),
                      s(:int, 255))), :collect),
                s(:args,
                  s(:arg, :c)),
                s(:send,
                  s(:lvar, :c), :chr)), :join)),
          s(:send, nil, :module_function),
          s(:def, :_make_regex,
            s(:args,
              s(:arg, :str)),
            s(:regexp,
              s(:str, "(["),
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :escape,
                  s(:lvar, :str))),
              s(:str, "])"),
              s(:regopt, :n))),
          s(:def, :_make_regex!,
            s(:args,
              s(:arg, :str)),
            s(:regexp,
              s(:str, "([^"),
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :escape,
                  s(:lvar, :str))),
              s(:str, "])"),
              s(:regopt, :n))),
          s(:def, :_escape,
            s(:args,
              s(:arg, :str),
              s(:arg, :regex)),
            s(:begin,
              s(:lvasgn, :str,
                s(:send,
                  s(:lvar, :str), :b)),
              s(:block,
                s(:send,
                  s(:lvar, :str), :gsub!,
                  s(:lvar, :regex)),
                s(:args),
                s(:send,
                  s(:str, "%%%02X"), :%,
                  s(:send,
                    s(:nth_ref, 1), :ord))),
              s(:send,
                s(:lvar, :str), :force_encoding,
                s(:const,
                  s(:const, nil, :Encoding), :US_ASCII)))),
          s(:def, :_unescape,
            s(:args,
              s(:arg, :str),
              s(:arg, :regex)),
            s(:begin,
              s(:lvasgn, :str,
                s(:send,
                  s(:lvar, :str), :b)),
              s(:block,
                s(:send,
                  s(:lvar, :str), :gsub!,
                  s(:lvar, :regex)),
                s(:args),
                s(:send,
                  s(:send,
                    s(:nth_ref, 1), :hex), :chr)),
              s(:lvar, :str))),
          s(:casgn, nil, :UNESCAPED,
            s(:send, nil, :_make_regex,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :control), :+,
                      s(:lvar, :space)), :+,
                    s(:lvar, :delims)), :+,
                  s(:lvar, :unwise)), :+,
                s(:lvar, :nonascii)))),
          s(:casgn, nil, :UNESCAPED_FORM,
            s(:send, nil, :_make_regex,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :reserved), :+,
                      s(:lvar, :control)), :+,
                    s(:lvar, :delims)), :+,
                  s(:lvar, :unwise)), :+,
                s(:lvar, :nonascii)))),
          s(:casgn, nil, :NONASCII,
            s(:send, nil, :_make_regex,
              s(:lvar, :nonascii))),
          s(:casgn, nil, :ESCAPED,
            s(:regexp,
              s(:str, "%([0-9a-fA-F]{2})"),
              s(:regopt))),
          s(:casgn, nil, :UNESCAPED_PCHAR,
            s(:send, nil, :_make_regex!,
              s(:send,
                s(:lvar, :unreserved), :+,
                s(:str, ":@&=+$,")))),
          s(:def, :escape,
            s(:args,
              s(:arg, :str)),
            s(:send, nil, :_escape,
              s(:lvar, :str),
              s(:const, nil, :UNESCAPED))),
          s(:def, :unescape,
            s(:args,
              s(:arg, :str)),
            s(:send, nil, :_unescape,
              s(:lvar, :str),
              s(:const, nil, :ESCAPED))),
          s(:def, :escape_form,
            s(:args,
              s(:arg, :str)),
            s(:begin,
              s(:lvasgn, :ret,
                s(:send, nil, :_escape,
                  s(:lvar, :str),
                  s(:const, nil, :UNESCAPED_FORM))),
              s(:send,
                s(:lvar, :ret), :gsub!,
                s(:regexp,
                  s(:str, " "),
                  s(:regopt)),
                s(:str, "+")),
              s(:lvar, :ret))),
          s(:def, :unescape_form,
            s(:args,
              s(:arg, :str)),
            s(:send, nil, :_unescape,
              s(:send,
                s(:lvar, :str), :gsub,
                s(:regexp,
                  s(:str, "\\+"),
                  s(:regopt)),
                s(:str, " ")),
              s(:const, nil, :ESCAPED))),
          s(:def, :escape_path,
            s(:args,
              s(:arg, :str)),
            s(:begin,
              s(:lvasgn, :result,
                s(:str, "")),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :str), :scan,
                    s(:regexp,
                      s(:str, "/([^/]*)"),
                      s(:regopt))), :each),
                s(:args,
                  s(:arg, :i)),
                s(:send,
                  s(:send,
                    s(:lvar, :result), :<<,
                    s(:str, "/")), :<<,
                  s(:send, nil, :_escape,
                    s(:send,
                      s(:lvar, :i), :[],
                      s(:int, 0)),
                    s(:const, nil, :UNESCAPED_PCHAR)))),
              s(:return,
                s(:lvar, :result)))),
          s(:def, :escape8bit,
            s(:args,
              s(:arg, :str)),
            s(:send, nil, :_escape,
              s(:lvar, :str),
              s(:const, nil, :NONASCII))))))))
