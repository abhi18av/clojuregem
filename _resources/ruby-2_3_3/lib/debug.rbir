s(:begin,
  s(:send, nil, :require,
    s(:str, "continuation")),
  s(:if,
    s(:send,
      s(:gvar, :$SAFE), :>,
      s(:int, 0)),
    s(:begin,
      s(:send,
        s(:const, nil, :STDERR), :print,
        s(:str, "-r debug.rb is not available in safe mode\n")),
      s(:send, nil, :exit,
        s(:int, 1))), nil),
  s(:send, nil, :require,
    s(:str, "tracer")),
  s(:send, nil, :require,
    s(:str, "pp")),
  s(:class,
    s(:const, nil, :Tracer), nil,
    s(:defs,
      s(:const, nil, :Tracer), :trace_func,
      s(:args,
        s(:restarg, :vars)),
      s(:send,
        s(:const, nil, :Single), :trace_func,
        s(:splat,
          s(:lvar, :vars))))),
  s(:if,
    s(:defined?,
      s(:const, nil, :SCRIPT_LINES__)), nil,
    s(:casgn, nil, :SCRIPT_LINES__,
      s(:hash))),
  s(:class,
    s(:const, nil, :DEBUGGER__), nil,
    s(:begin,
      s(:casgn, nil, :MUTEX,
        s(:send,
          s(:const, nil, :Mutex), :new)),
      s(:class,
        s(:const, nil, :Context), nil,
        s(:begin,
          s(:casgn, nil, :DEBUG_LAST_CMD,
            s(:array)),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:send, nil, :require,
                  s(:str, "readline")),
                s(:def, :readline,
                  s(:args,
                    s(:arg, :prompt),
                    s(:arg, :hist)),
                  s(:send,
                    s(:const, nil, :Readline), :readline,
                    s(:lvar, :prompt),
                    s(:lvar, :hist)))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :LoadError)), nil,
                s(:begin,
                  s(:def, :readline,
                    s(:args,
                      s(:arg, :prompt),
                      s(:arg, :hist)),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :STDOUT), :print,
                        s(:lvar, :prompt)),
                      s(:send,
                        s(:const, nil, :STDOUT), :flush),
                      s(:lvasgn, :line,
                        s(:send,
                          s(:const, nil, :STDIN), :gets)),
                      s(:if,
                        s(:lvar, :line), nil,
                        s(:send, nil, :exit)),
                      s(:send,
                        s(:lvar, :line), :chomp!),
                      s(:lvar, :line))),
                  s(:casgn, nil, :USE_READLINE,
                    s(:false)))), nil)),
          s(:def, :initialize,
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:const, nil, :Thread), :current), :==,
                  s(:send,
                    s(:const, nil, :Thread), :main)),
                s(:ivasgn, :@stop_next,
                  s(:int, 1)),
                s(:ivasgn, :@stop_next,
                  s(:int, 0))),
              s(:ivasgn, :@last_file,
                s(:nil)),
              s(:ivasgn, :@file,
                s(:nil)),
              s(:ivasgn, :@line,
                s(:nil)),
              s(:ivasgn, :@no_step,
                s(:nil)),
              s(:ivasgn, :@frames,
                s(:array)),
              s(:ivasgn, :@finish_pos,
                s(:int, 0)),
              s(:ivasgn, :@trace,
                s(:false)),
              s(:ivasgn, :@catch,
                s(:str, "StandardError")),
              s(:ivasgn, :@suspend_next,
                s(:false)))),
          s(:def, :stop_next,
            s(:args,
              s(:optarg, :n,
                s(:int, 1))),
            s(:ivasgn, :@stop_next,
              s(:lvar, :n))),
          s(:def, :set_suspend,
            s(:args),
            s(:ivasgn, :@suspend_next,
              s(:true))),
          s(:def, :clear_suspend,
            s(:args),
            s(:ivasgn, :@suspend_next,
              s(:false))),
          s(:def, :suspend_all,
            s(:args),
            s(:send,
              s(:const, nil, :DEBUGGER__), :suspend)),
          s(:def, :resume_all,
            s(:args),
            s(:send,
              s(:const, nil, :DEBUGGER__), :resume)),
          s(:def, :check_suspend,
            s(:args),
            s(:while,
              s(:block,
                s(:send,
                  s(:const, nil, :MUTEX), :synchronize),
                s(:args),
                s(:if,
                  s(:ivar, :@suspend_next),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:const, nil, :DEBUGGER__), :waiting), :push,
                      s(:send,
                        s(:const, nil, :Thread), :current)),
                    s(:ivasgn, :@suspend_next,
                      s(:false)),
                    s(:true)), nil)), nil)),
          s(:def, :trace?,
            s(:args),
            s(:ivar, :@trace)),
          s(:def, :set_trace,
            s(:args,
              s(:arg, :arg)),
            s(:ivasgn, :@trace,
              s(:lvar, :arg))),
          s(:def, :stdout,
            s(:args),
            s(:send,
              s(:const, nil, :DEBUGGER__), :stdout)),
          s(:def, :break_points,
            s(:args),
            s(:send,
              s(:const, nil, :DEBUGGER__), :break_points)),
          s(:def, :display,
            s(:args),
            s(:send,
              s(:const, nil, :DEBUGGER__), :display)),
          s(:def, :context,
            s(:args,
              s(:arg, :th)),
            s(:send,
              s(:const, nil, :DEBUGGER__), :context,
              s(:lvar, :th))),
          s(:def, :set_trace_all,
            s(:args,
              s(:arg, :arg)),
            s(:send,
              s(:const, nil, :DEBUGGER__), :set_trace,
              s(:lvar, :arg))),
          s(:def, :set_last_thread,
            s(:args,
              s(:arg, :th)),
            s(:send,
              s(:const, nil, :DEBUGGER__), :set_last_thread,
              s(:lvar, :th))),
          s(:def, :debug_eval,
            s(:args,
              s(:arg, :str),
              s(:arg, :binding)),
            s(:kwbegin,
              s(:rescue,
                s(:send, nil, :eval,
                  s(:lvar, :str),
                  s(:lvar, :binding)),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :StandardError),
                    s(:const, nil, :ScriptError)),
                  s(:lvasgn, :e),
                  s(:begin,
                    s(:lvasgn, :at,
                      s(:send, nil, :eval,
                        s(:str, "caller(1)"),
                        s(:lvar, :binding))),
                    s(:send,
                      s(:send, nil, :stdout), :printf,
                      s(:str, "%s:%s\n"),
                      s(:send,
                        s(:lvar, :at), :shift),
                      s(:send,
                        s(:send,
                          s(:lvar, :e), :to_s), :sub,
                        s(:regexp,
                          s(:str, "\\(eval\\):1:(in `.*?':)?"),
                          s(:regopt)),
                        s(:str, ""))),
                    s(:for,
                      s(:lvasgn, :i),
                      s(:lvar, :at),
                      s(:send,
                        s(:send, nil, :stdout), :printf,
                        s(:str, "\tfrom %s\n"),
                        s(:lvar, :i))),
                    s(:send, nil, :throw,
                      s(:sym, :debug_error)))), nil))),
          s(:def, :debug_silent_eval,
            s(:args,
              s(:arg, :str),
              s(:arg, :binding)),
            s(:kwbegin,
              s(:rescue,
                s(:send, nil, :eval,
                  s(:lvar, :str),
                  s(:lvar, :binding)),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :StandardError),
                    s(:const, nil, :ScriptError)), nil,
                  s(:nil)), nil))),
          s(:def, :var_list,
            s(:args,
              s(:arg, :ary),
              s(:arg, :binding)),
            s(:begin,
              s(:send,
                s(:lvar, :ary), :sort!),
              s(:for,
                s(:lvasgn, :v),
                s(:lvar, :ary),
                s(:send,
                  s(:send, nil, :stdout), :printf,
                  s(:str, "  %s => %s\n"),
                  s(:lvar, :v),
                  s(:send,
                    s(:send, nil, :eval,
                      s(:send,
                        s(:lvar, :v), :to_s),
                      s(:lvar, :binding)), :inspect))))),
          s(:def, :debug_variable_info,
            s(:args,
              s(:arg, :input),
              s(:arg, :binding)),
            s(:case,
              s(:lvar, :input),
              s(:when,
                s(:regexp,
                  s(:str, "^\\s*g(?:lobal)?\\s*$"),
                  s(:regopt)),
                s(:send, nil, :var_list,
                  s(:send, nil, :global_variables),
                  s(:lvar, :binding))),
              s(:when,
                s(:regexp,
                  s(:str, "^\\s*l(?:ocal)?\\s*$"),
                  s(:regopt)),
                s(:send, nil, :var_list,
                  s(:send, nil, :eval,
                    s(:str, "local_variables"),
                    s(:lvar, :binding)),
                  s(:lvar, :binding))),
              s(:when,
                s(:regexp,
                  s(:str, "^\\s*i(?:nstance)?\\s+"),
                  s(:regopt)),
                s(:begin,
                  s(:lvasgn, :obj,
                    s(:send, nil, :debug_eval,
                      s(:back_ref, :$'),
                      s(:lvar, :binding))),
                  s(:send, nil, :var_list,
                    s(:send,
                      s(:lvar, :obj), :instance_variables),
                    s(:block,
                      s(:send,
                        s(:lvar, :obj), :instance_eval),
                      s(:args),
                      s(:send, nil, :binding))))),
              s(:when,
                s(:regexp,
                  s(:str, "^\\s*c(?:onst(?:ant)?)?\\s+"),
                  s(:regopt)),
                s(:begin,
                  s(:lvasgn, :obj,
                    s(:send, nil, :debug_eval,
                      s(:back_ref, :$'),
                      s(:lvar, :binding))),
                  s(:if,
                    s(:send,
                      s(:lvar, :obj), :kind_of?,
                      s(:const, nil, :Module)),
                    s(:send, nil, :var_list,
                      s(:send,
                        s(:lvar, :obj), :constants),
                      s(:block,
                        s(:send,
                          s(:lvar, :obj), :module_eval),
                        s(:args),
                        s(:send, nil, :binding))),
                    s(:send,
                      s(:send, nil, :stdout), :print,
                      s(:str, "Should be Class/Module: "),
                      s(:back_ref, :$'),
                      s(:str, "\n"))))), nil)),
          s(:def, :debug_method_info,
            s(:args,
              s(:arg, :input),
              s(:arg, :binding)),
            s(:case,
              s(:lvar, :input),
              s(:when,
                s(:regexp,
                  s(:str, "^i(:?nstance)?\\s+"),
                  s(:regopt)),
                s(:begin,
                  s(:lvasgn, :obj,
                    s(:send, nil, :debug_eval,
                      s(:back_ref, :$'),
                      s(:lvar, :binding))),
                  s(:lvasgn, :len,
                    s(:int, 0)),
                  s(:for,
                    s(:lvasgn, :v),
                    s(:send,
                      s(:send,
                        s(:lvar, :obj), :methods), :sort),
                    s(:begin,
                      s(:op_asgn,
                        s(:lvasgn, :len), :+,
                        s(:send,
                          s(:send,
                            s(:lvar, :v), :size), :+,
                          s(:int, 1))),
                      s(:if,
                        s(:send,
                          s(:lvar, :len), :>,
                          s(:int, 70)),
                        s(:begin,
                          s(:lvasgn, :len,
                            s(:send,
                              s(:send,
                                s(:lvar, :v), :size), :+,
                              s(:int, 1))),
                          s(:send,
                            s(:send, nil, :stdout), :print,
                            s(:str, "\n"))), nil),
                      s(:send,
                        s(:send, nil, :stdout), :print,
                        s(:lvar, :v),
                        s(:str, " ")))),
                  s(:send,
                    s(:send, nil, :stdout), :print,
                    s(:str, "\n")))),
              s(:begin,
                s(:lvasgn, :obj,
                  s(:send, nil, :debug_eval,
                    s(:lvar, :input),
                    s(:lvar, :binding))),
                s(:if,
                  s(:send,
                    s(:lvar, :obj), :kind_of?,
                    s(:const, nil, :Module)),
                  s(:begin,
                    s(:lvasgn, :len,
                      s(:int, 0)),
                    s(:for,
                      s(:lvasgn, :v),
                      s(:send,
                        s(:send,
                          s(:lvar, :obj), :instance_methods,
                          s(:false)), :sort),
                      s(:begin,
                        s(:op_asgn,
                          s(:lvasgn, :len), :+,
                          s(:send,
                            s(:send,
                              s(:lvar, :v), :size), :+,
                            s(:int, 1))),
                        s(:if,
                          s(:send,
                            s(:lvar, :len), :>,
                            s(:int, 70)),
                          s(:begin,
                            s(:lvasgn, :len,
                              s(:send,
                                s(:send,
                                  s(:lvar, :v), :size), :+,
                                s(:int, 1))),
                            s(:send,
                              s(:send, nil, :stdout), :print,
                              s(:str, "\n"))), nil),
                        s(:send,
                          s(:send, nil, :stdout), :print,
                          s(:lvar, :v),
                          s(:str, " ")))),
                    s(:send,
                      s(:send, nil, :stdout), :print,
                      s(:str, "\n"))),
                  s(:send,
                    s(:send, nil, :stdout), :print,
                    s(:str, "Should be Class/Module: "),
                    s(:lvar, :input),
                    s(:str, "\n")))))),
          s(:def, :thnum,
            s(:args),
            s(:begin,
              s(:lvasgn, :num,
                s(:block,
                  s(:send,
                    s(:const, nil, :DEBUGGER__), :instance_eval),
                  s(:args),
                  s(:send,
                    s(:ivar, :@thread_list), :[],
                    s(:send,
                      s(:const, nil, :Thread), :current)))),
              s(:if,
                s(:lvar, :num), nil,
                s(:begin,
                  s(:send,
                    s(:const, nil, :DEBUGGER__), :make_thread_list),
                  s(:lvasgn, :num,
                    s(:block,
                      s(:send,
                        s(:const, nil, :DEBUGGER__), :instance_eval),
                      s(:args),
                      s(:send,
                        s(:ivar, :@thread_list), :[],
                        s(:send,
                          s(:const, nil, :Thread), :current)))))),
              s(:lvar, :num))),
          s(:def, :debug_command,
            s(:args,
              s(:arg, :file),
              s(:arg, :line),
              s(:arg, :id),
              s(:arg, :binding)),
            s(:begin,
              s(:send,
                s(:const, nil, :MUTEX), :lock),
              s(:if,
                s(:and,
                  s(:defined?,
                    s(:gvar, :$debugger_restart)),
                  s(:gvar, :$debugger_restart)), nil,
                s(:block,
                  s(:send, nil, :callcc),
                  s(:args,
                    s(:arg, :c)),
                  s(:gvasgn, :$debugger_restart,
                    s(:lvar, :c)))),
              s(:send, nil, :set_last_thread,
                s(:send,
                  s(:const, nil, :Thread), :current)),
              s(:lvasgn, :frame_pos,
                s(:int, 0)),
              s(:lvasgn, :binding_file,
                s(:lvar, :file)),
              s(:lvasgn, :binding_line,
                s(:lvar, :line)),
              s(:lvasgn, :previous_line,
                s(:nil)),
              s(:if,
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:str, "EMACS")),
                s(:send,
                  s(:send, nil, :stdout), :printf,
                  s(:str, "\u001A\u001A%s:%d:\n"),
                  s(:lvar, :binding_file),
                  s(:lvar, :binding_line)),
                s(:send,
                  s(:send, nil, :stdout), :printf,
                  s(:str, "%s:%d:%s"),
                  s(:lvar, :binding_file),
                  s(:lvar, :binding_line),
                  s(:send, nil, :line_at,
                    s(:lvar, :binding_file),
                    s(:lvar, :binding_line)))),
              s(:send,
                s(:ivar, :@frames), :[]=,
                s(:int, 0),
                s(:array,
                  s(:lvar, :binding),
                  s(:lvar, :file),
                  s(:lvar, :line),
                  s(:lvar, :id))),
              s(:send, nil, :display_expressions,
                s(:lvar, :binding)),
              s(:lvasgn, :prompt,
                s(:true)),
              s(:while,
                s(:and,
                  s(:lvar, :prompt),
                  s(:lvasgn, :input,
                    s(:send, nil, :readline,
                      s(:send,
                        s(:str, "(rdb:%d) "), :%,
                        s(:send, nil, :thnum)),
                      s(:true)))),
                s(:block,
                  s(:send, nil, :catch,
                    s(:sym, :debug_error)),
                  s(:args),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :input), :==,
                        s(:str, "")),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:const, nil, :DEBUG_LAST_CMD), :[],
                            s(:int, 0)), nil,
                          s(:next)),
                        s(:lvasgn, :input,
                          s(:send,
                            s(:const, nil, :DEBUG_LAST_CMD), :[],
                            s(:int, 0))),
                        s(:send,
                          s(:send, nil, :stdout), :print,
                          s(:lvar, :input),
                          s(:str, "\n"))),
                      s(:send,
                        s(:const, nil, :DEBUG_LAST_CMD), :[]=,
                        s(:int, 0),
                        s(:lvar, :input))),
                    s(:case,
                      s(:lvar, :input),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*tr(?:ace)?(?:\\s+(on|off))?(?:\\s+(all))?$"),
                          s(:regopt)),
                        s(:begin,
                          s(:if,
                            s(:defined?,
                              s(:nth_ref, 2)),
                            s(:if,
                              s(:send,
                                s(:nth_ref, 1), :==,
                                s(:str, "on")),
                              s(:send, nil, :set_trace_all,
                                s(:true)),
                              s(:send, nil, :set_trace_all,
                                s(:false))),
                            s(:if,
                              s(:defined?,
                                s(:nth_ref, 1)),
                              s(:if,
                                s(:send,
                                  s(:nth_ref, 1), :==,
                                  s(:str, "on")),
                                s(:send, nil, :set_trace,
                                  s(:true)),
                                s(:send, nil, :set_trace,
                                  s(:false))), nil)),
                          s(:if,
                            s(:send, nil, :trace?),
                            s(:send,
                              s(:send, nil, :stdout), :print,
                              s(:str, "Trace on.\n")),
                            s(:send,
                              s(:send, nil, :stdout), :print,
                              s(:str, "Trace off.\n"))))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*b(?:reak)?\\s+(?:(.+):)?([^.:]+)$"),
                          s(:regopt)),
                        s(:begin,
                          s(:lvasgn, :pos,
                            s(:nth_ref, 2)),
                          s(:if,
                            s(:nth_ref, 1),
                            s(:begin,
                              s(:lvasgn, :klass,
                                s(:send, nil, :debug_silent_eval,
                                  s(:nth_ref, 1),
                                  s(:lvar, :binding))),
                              s(:lvasgn, :file,
                                s(:nth_ref, 1))), nil),
                          s(:if,
                            s(:send,
                              s(:lvar, :pos), :=~,
                              s(:regexp,
                                s(:str, "^\\d+$"),
                                s(:regopt))),
                            s(:begin,
                              s(:lvasgn, :pname,
                                s(:lvar, :pos)),
                              s(:lvasgn, :pos,
                                s(:send,
                                  s(:lvar, :pos), :to_i))),
                            s(:lvasgn, :pname,
                              s(:lvasgn, :pos,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :pos), :intern), :id2name)))),
                          s(:send,
                            s(:send, nil, :break_points), :push,
                            s(:array,
                              s(:true),
                              s(:int, 0),
                              s(:or,
                                s(:lvar, :klass),
                                s(:lvar, :file)),
                              s(:lvar, :pos))),
                          s(:send,
                            s(:send, nil, :stdout), :printf,
                            s(:str, "Set breakpoint %d at %s:%s\n"),
                            s(:send,
                              s(:send, nil, :break_points), :size),
                            s(:or,
                              s(:lvar, :klass),
                              s(:lvar, :file)),
                            s(:lvar, :pname)))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*b(?:reak)?\\s+(.+)[#.]([^.:]+)$"),
                          s(:regopt)),
                        s(:begin,
                          s(:lvasgn, :pos,
                            s(:send,
                              s(:send,
                                s(:nth_ref, 2), :intern), :id2name)),
                          s(:lvasgn, :klass,
                            s(:send, nil, :debug_eval,
                              s(:nth_ref, 1),
                              s(:lvar, :binding))),
                          s(:send,
                            s(:send, nil, :break_points), :push,
                            s(:array,
                              s(:true),
                              s(:int, 0),
                              s(:lvar, :klass),
                              s(:lvar, :pos))),
                          s(:send,
                            s(:send, nil, :stdout), :printf,
                            s(:str, "Set breakpoint %d at %s.%s\n"),
                            s(:send,
                              s(:send, nil, :break_points), :size),
                            s(:lvar, :klass),
                            s(:lvar, :pos)))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*wat(?:ch)?\\s+(.+)$"),
                          s(:regopt)),
                        s(:begin,
                          s(:lvasgn, :exp,
                            s(:nth_ref, 1)),
                          s(:send,
                            s(:send, nil, :break_points), :push,
                            s(:array,
                              s(:true),
                              s(:int, 1),
                              s(:lvar, :exp))),
                          s(:send,
                            s(:send, nil, :stdout), :printf,
                            s(:str, "Set watchpoint %d:%s\n"),
                            s(:send,
                              s(:send, nil, :break_points), :size),
                            s(:lvar, :exp)))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*b(?:reak)?$"),
                          s(:regopt)),
                        s(:begin,
                          s(:if,
                            s(:block,
                              s(:send,
                                s(:send, nil, :break_points), :find),
                              s(:args,
                                s(:arg, :b)),
                              s(:send,
                                s(:send,
                                  s(:lvar, :b), :[],
                                  s(:int, 1)), :==,
                                s(:int, 0))),
                            s(:begin,
                              s(:lvasgn, :n,
                                s(:int, 1)),
                              s(:send,
                                s(:send, nil, :stdout), :print,
                                s(:str, "Breakpoints:\n")),
                              s(:block,
                                s(:send,
                                  s(:send, nil, :break_points), :each),
                                s(:args,
                                  s(:arg, :b)),
                                s(:begin,
                                  s(:if,
                                    s(:and,
                                      s(:send,
                                        s(:lvar, :b), :[],
                                        s(:int, 0)),
                                      s(:send,
                                        s(:send,
                                          s(:lvar, :b), :[],
                                          s(:int, 1)), :==,
                                        s(:int, 0))),
                                    s(:send,
                                      s(:send, nil, :stdout), :printf,
                                      s(:str, "  %d %s:%s\n"),
                                      s(:lvar, :n),
                                      s(:send,
                                        s(:lvar, :b), :[],
                                        s(:int, 2)),
                                      s(:send,
                                        s(:lvar, :b), :[],
                                        s(:int, 3))), nil),
                                  s(:op_asgn,
                                    s(:lvasgn, :n), :+,
                                    s(:int, 1))))), nil),
                          s(:if,
                            s(:block,
                              s(:send,
                                s(:send, nil, :break_points), :find),
                              s(:args,
                                s(:arg, :b)),
                              s(:send,
                                s(:send,
                                  s(:lvar, :b), :[],
                                  s(:int, 1)), :==,
                                s(:int, 1))),
                            s(:begin,
                              s(:lvasgn, :n,
                                s(:int, 1)),
                              s(:send,
                                s(:send, nil, :stdout), :print,
                                s(:str, "\n")),
                              s(:send,
                                s(:send, nil, :stdout), :print,
                                s(:str, "Watchpoints:\n")),
                              s(:for,
                                s(:lvasgn, :b),
                                s(:send, nil, :break_points),
                                s(:begin,
                                  s(:if,
                                    s(:and,
                                      s(:send,
                                        s(:lvar, :b), :[],
                                        s(:int, 0)),
                                      s(:send,
                                        s(:send,
                                          s(:lvar, :b), :[],
                                          s(:int, 1)), :==,
                                        s(:int, 1))),
                                    s(:send,
                                      s(:send, nil, :stdout), :printf,
                                      s(:str, "  %d %s\n"),
                                      s(:lvar, :n),
                                      s(:send,
                                        s(:lvar, :b), :[],
                                        s(:int, 2))), nil),
                                  s(:op_asgn,
                                    s(:lvasgn, :n), :+,
                                    s(:int, 1))))), nil),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:send, nil, :break_points), :size), :==,
                              s(:int, 0)),
                            s(:send,
                              s(:send, nil, :stdout), :print,
                              s(:str, "No breakpoints\n")),
                            s(:send,
                              s(:send, nil, :stdout), :print,
                              s(:str, "\n"))))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*del(?:ete)?(?:\\s+(\\d+))?$"),
                          s(:regopt)),
                        s(:begin,
                          s(:lvasgn, :pos,
                            s(:nth_ref, 1)),
                          s(:if,
                            s(:lvar, :pos),
                            s(:begin,
                              s(:lvasgn, :pos,
                                s(:send,
                                  s(:lvar, :pos), :to_i)),
                              s(:if,
                                s(:send,
                                  s(:send, nil, :break_points), :[],
                                  s(:send,
                                    s(:lvar, :pos), :-,
                                    s(:int, 1))),
                                s(:send,
                                  s(:send,
                                    s(:send, nil, :break_points), :[],
                                    s(:send,
                                      s(:lvar, :pos), :-,
                                      s(:int, 1))), :[]=,
                                  s(:int, 0),
                                  s(:false)),
                                s(:send,
                                  s(:send, nil, :stdout), :printf,
                                  s(:str, "Breakpoint %d is not defined\n"),
                                  s(:lvar, :pos)))),
                            s(:begin,
                              s(:lvasgn, :input,
                                s(:send, nil, :readline,
                                  s(:str, "Clear all breakpoints? (y/n) "),
                                  s(:false))),
                              s(:if,
                                s(:send,
                                  s(:lvar, :input), :==,
                                  s(:str, "y")),
                                s(:for,
                                  s(:lvasgn, :b),
                                  s(:send, nil, :break_points),
                                  s(:send,
                                    s(:lvar, :b), :[]=,
                                    s(:int, 0),
                                    s(:false))), nil))))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*disp(?:lay)?\\s+(.+)$"),
                          s(:regopt)),
                        s(:begin,
                          s(:lvasgn, :exp,
                            s(:nth_ref, 1)),
                          s(:send,
                            s(:send, nil, :display), :push,
                            s(:array,
                              s(:true),
                              s(:lvar, :exp))),
                          s(:send,
                            s(:send, nil, :stdout), :printf,
                            s(:str, "%d: "),
                            s(:send,
                              s(:send, nil, :display), :size)),
                          s(:send, nil, :display_expression,
                            s(:lvar, :exp),
                            s(:lvar, :binding)))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*disp(?:lay)?$"),
                          s(:regopt)),
                        s(:send, nil, :display_expressions,
                          s(:lvar, :binding))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*undisp(?:lay)?(?:\\s+(\\d+))?$"),
                          s(:regopt)),
                        s(:begin,
                          s(:lvasgn, :pos,
                            s(:nth_ref, 1)),
                          s(:if,
                            s(:lvar, :pos),
                            s(:begin,
                              s(:lvasgn, :pos,
                                s(:send,
                                  s(:lvar, :pos), :to_i)),
                              s(:if,
                                s(:send,
                                  s(:send, nil, :display), :[],
                                  s(:send,
                                    s(:lvar, :pos), :-,
                                    s(:int, 1))),
                                s(:send,
                                  s(:send,
                                    s(:send, nil, :display), :[],
                                    s(:send,
                                      s(:lvar, :pos), :-,
                                      s(:int, 1))), :[]=,
                                  s(:int, 0),
                                  s(:false)),
                                s(:send,
                                  s(:send, nil, :stdout), :printf,
                                  s(:str, "Display expression %d is not defined\n"),
                                  s(:lvar, :pos)))),
                            s(:begin,
                              s(:lvasgn, :input,
                                s(:send, nil, :readline,
                                  s(:str, "Clear all expressions? (y/n) "),
                                  s(:false))),
                              s(:if,
                                s(:send,
                                  s(:lvar, :input), :==,
                                  s(:str, "y")),
                                s(:for,
                                  s(:lvasgn, :d),
                                  s(:send, nil, :display),
                                  s(:send,
                                    s(:lvar, :d), :[]=,
                                    s(:int, 0),
                                    s(:false))), nil))))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*c(?:ont)?$"),
                          s(:regopt)),
                        s(:lvasgn, :prompt,
                          s(:false))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*s(?:tep)?(?:\\s+(\\d+))?$"),
                          s(:regopt)),
                        s(:begin,
                          s(:if,
                            s(:nth_ref, 1),
                            s(:lvasgn, :lev,
                              s(:send,
                                s(:nth_ref, 1), :to_i)),
                            s(:lvasgn, :lev,
                              s(:int, 1))),
                          s(:ivasgn, :@stop_next,
                            s(:lvar, :lev)),
                          s(:lvasgn, :prompt,
                            s(:false)))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*n(?:ext)?(?:\\s+(\\d+))?$"),
                          s(:regopt)),
                        s(:begin,
                          s(:if,
                            s(:nth_ref, 1),
                            s(:lvasgn, :lev,
                              s(:send,
                                s(:nth_ref, 1), :to_i)),
                            s(:lvasgn, :lev,
                              s(:int, 1))),
                          s(:ivasgn, :@stop_next,
                            s(:lvar, :lev)),
                          s(:ivasgn, :@no_step,
                            s(:send,
                              s(:send,
                                s(:ivar, :@frames), :size), :-,
                              s(:lvar, :frame_pos))),
                          s(:lvasgn, :prompt,
                            s(:false)))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*w(?:here)?$"),
                          s(:regopt)),
                        s(:regexp,
                          s(:str, "^\\s*f(?:rame)?$"),
                          s(:regopt)),
                        s(:send, nil, :display_frames,
                          s(:lvar, :frame_pos))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*l(?:ist)?(?:\\s+(.+))?$"),
                          s(:regopt)),
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:nth_ref, 1), :!),
                            s(:begin,
                              s(:lvasgn, :b,
                                s(:if,
                                  s(:lvar, :previous_line),
                                  s(:send,
                                    s(:lvar, :previous_line), :+,
                                    s(:int, 10)),
                                  s(:send,
                                    s(:lvar, :binding_line), :-,
                                    s(:int, 5)))),
                              s(:lvasgn, :e,
                                s(:send,
                                  s(:lvar, :b), :+,
                                  s(:int, 9)))),
                            s(:if,
                              s(:send,
                                s(:nth_ref, 1), :==,
                                s(:str, "-")),
                              s(:begin,
                                s(:lvasgn, :b,
                                  s(:if,
                                    s(:lvar, :previous_line),
                                    s(:send,
                                      s(:lvar, :previous_line), :-,
                                      s(:int, 10)),
                                    s(:send,
                                      s(:lvar, :binding_line), :-,
                                      s(:int, 5)))),
                                s(:lvasgn, :e,
                                  s(:send,
                                    s(:lvar, :b), :+,
                                    s(:int, 9)))),
                              s(:begin,
                                s(:masgn,
                                  s(:mlhs,
                                    s(:lvasgn, :b),
                                    s(:lvasgn, :e)),
                                  s(:send,
                                    s(:nth_ref, 1), :split,
                                    s(:regexp,
                                      s(:str, "[-,]"),
                                      s(:regopt)))),
                                s(:if,
                                  s(:lvar, :e),
                                  s(:begin,
                                    s(:lvasgn, :b,
                                      s(:send,
                                        s(:lvar, :b), :to_i)),
                                    s(:lvasgn, :e,
                                      s(:send,
                                        s(:lvar, :e), :to_i))),
                                  s(:begin,
                                    s(:lvasgn, :b,
                                      s(:send,
                                        s(:send,
                                          s(:lvar, :b), :to_i), :-,
                                        s(:int, 5))),
                                    s(:lvasgn, :e,
                                      s(:send,
                                        s(:lvar, :b), :+,
                                        s(:int, 9)))))))),
                          s(:lvasgn, :previous_line,
                            s(:lvar, :b)),
                          s(:send, nil, :display_list,
                            s(:lvar, :b),
                            s(:lvar, :e),
                            s(:lvar, :binding_file),
                            s(:lvar, :binding_line)))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*up(?:\\s+(\\d+))?$"),
                          s(:regopt)),
                        s(:begin,
                          s(:lvasgn, :previous_line,
                            s(:nil)),
                          s(:if,
                            s(:nth_ref, 1),
                            s(:lvasgn, :lev,
                              s(:send,
                                s(:nth_ref, 1), :to_i)),
                            s(:lvasgn, :lev,
                              s(:int, 1))),
                          s(:op_asgn,
                            s(:lvasgn, :frame_pos), :+,
                            s(:lvar, :lev)),
                          s(:if,
                            s(:send,
                              s(:lvar, :frame_pos), :>=,
                              s(:send,
                                s(:ivar, :@frames), :size)),
                            s(:begin,
                              s(:lvasgn, :frame_pos,
                                s(:send,
                                  s(:send,
                                    s(:ivar, :@frames), :size), :-,
                                  s(:int, 1))),
                              s(:send,
                                s(:send, nil, :stdout), :print,
                                s(:str, "At toplevel\n"))), nil),
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :binding),
                              s(:lvasgn, :binding_file),
                              s(:lvasgn, :binding_line)),
                            s(:send,
                              s(:ivar, :@frames), :[],
                              s(:lvar, :frame_pos))),
                          s(:send,
                            s(:send, nil, :stdout), :print,
                            s(:send, nil, :format_frame,
                              s(:lvar, :frame_pos))))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*down(?:\\s+(\\d+))?$"),
                          s(:regopt)),
                        s(:begin,
                          s(:lvasgn, :previous_line,
                            s(:nil)),
                          s(:if,
                            s(:nth_ref, 1),
                            s(:lvasgn, :lev,
                              s(:send,
                                s(:nth_ref, 1), :to_i)),
                            s(:lvasgn, :lev,
                              s(:int, 1))),
                          s(:op_asgn,
                            s(:lvasgn, :frame_pos), :-,
                            s(:lvar, :lev)),
                          s(:if,
                            s(:send,
                              s(:lvar, :frame_pos), :<,
                              s(:int, 0)),
                            s(:begin,
                              s(:lvasgn, :frame_pos,
                                s(:int, 0)),
                              s(:send,
                                s(:send, nil, :stdout), :print,
                                s(:str, "At stack bottom\n"))), nil),
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :binding),
                              s(:lvasgn, :binding_file),
                              s(:lvasgn, :binding_line)),
                            s(:send,
                              s(:ivar, :@frames), :[],
                              s(:lvar, :frame_pos))),
                          s(:send,
                            s(:send, nil, :stdout), :print,
                            s(:send, nil, :format_frame,
                              s(:lvar, :frame_pos))))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*fin(?:ish)?$"),
                          s(:regopt)),
                        s(:if,
                          s(:send,
                            s(:lvar, :frame_pos), :==,
                            s(:send,
                              s(:ivar, :@frames), :size)),
                          s(:send,
                            s(:send, nil, :stdout), :print,
                            s(:str, "\"finish\" not meaningful in the outermost frame.\n")),
                          s(:begin,
                            s(:ivasgn, :@finish_pos,
                              s(:send,
                                s(:send,
                                  s(:ivar, :@frames), :size), :-,
                                s(:lvar, :frame_pos))),
                            s(:lvasgn, :frame_pos,
                              s(:int, 0)),
                            s(:lvasgn, :prompt,
                              s(:false))))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*cat(?:ch)?(?:\\s+(.+))?$"),
                          s(:regopt)),
                        s(:if,
                          s(:nth_ref, 1),
                          s(:begin,
                            s(:lvasgn, :excn,
                              s(:nth_ref, 1)),
                            s(:if,
                              s(:send,
                                s(:lvar, :excn), :==,
                                s(:str, "off")),
                              s(:begin,
                                s(:ivasgn, :@catch,
                                  s(:nil)),
                                s(:send,
                                  s(:send, nil, :stdout), :print,
                                  s(:str, "Clear catchpoint.\n"))),
                              s(:begin,
                                s(:ivasgn, :@catch,
                                  s(:lvar, :excn)),
                                s(:send,
                                  s(:send, nil, :stdout), :printf,
                                  s(:str, "Set catchpoint %s.\n"),
                                  s(:ivar, :@catch))))),
                          s(:if,
                            s(:ivar, :@catch),
                            s(:send,
                              s(:send, nil, :stdout), :printf,
                              s(:str, "Catchpoint %s.\n"),
                              s(:ivar, :@catch)),
                            s(:send,
                              s(:send, nil, :stdout), :print,
                              s(:str, "No catchpoint.\n"))))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*q(?:uit)?$"),
                          s(:regopt)),
                        s(:begin,
                          s(:lvasgn, :input,
                            s(:send, nil, :readline,
                              s(:str, "Really quit? (y/n) "),
                              s(:false))),
                          s(:if,
                            s(:send,
                              s(:lvar, :input), :==,
                              s(:str, "y")),
                            s(:send, nil, :exit!), nil))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*v(?:ar)?\\s+"),
                          s(:regopt)),
                        s(:send, nil, :debug_variable_info,
                          s(:back_ref, :$'),
                          s(:lvar, :binding))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*m(?:ethod)?\\s+"),
                          s(:regopt)),
                        s(:send, nil, :debug_method_info,
                          s(:back_ref, :$'),
                          s(:lvar, :binding))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*th(?:read)?\\s+"),
                          s(:regopt)),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:const, nil, :DEBUGGER__), :debug_thread_info,
                              s(:back_ref, :$'),
                              s(:lvar, :binding)), :==,
                            s(:sym, :cont)),
                          s(:lvasgn, :prompt,
                            s(:false)), nil)),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*pp\\s+"),
                          s(:regopt)),
                        s(:send,
                          s(:const, nil, :PP), :pp,
                          s(:send, nil, :debug_eval,
                            s(:back_ref, :$'),
                            s(:lvar, :binding)),
                          s(:send, nil, :stdout))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*p\\s+"),
                          s(:regopt)),
                        s(:send,
                          s(:send, nil, :stdout), :printf,
                          s(:str, "%s\n"),
                          s(:send,
                            s(:send, nil, :debug_eval,
                              s(:back_ref, :$'),
                              s(:lvar, :binding)), :inspect))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*r(?:estart)?$"),
                          s(:regopt)),
                        s(:send,
                          s(:gvar, :$debugger_restart), :call)),
                      s(:when,
                        s(:regexp,
                          s(:str, "^\\s*h(?:elp)?$"),
                          s(:regopt)),
                        s(:send, nil, :debug_print_help)),
                      s(:begin,
                        s(:lvasgn, :v,
                          s(:send, nil, :debug_eval,
                            s(:lvar, :input),
                            s(:lvar, :binding))),
                        s(:send,
                          s(:send, nil, :stdout), :printf,
                          s(:str, "%s\n"),
                          s(:send,
                            s(:lvar, :v), :inspect))))))),
              s(:send,
                s(:const, nil, :MUTEX), :unlock),
              s(:send, nil, :resume_all))),
          s(:def, :debug_print_help,
            s(:args),
            s(:send,
              s(:send, nil, :stdout), :print,
              s(:dstr,
                s(:str, "Debugger help v.-0.002b\n"),
                s(:str, "Commands\n"),
                s(:str, "  b[reak] [file:|class:]<line|method>\n"),
                s(:str, "  b[reak] [class.]<line|method>\n"),
                s(:str, "                             set breakpoint to some position\n"),
                s(:str, "  wat[ch] <expression>       set watchpoint to some expression\n"),
                s(:str, "  cat[ch] (<exception>|off)  set catchpoint to an exception\n"),
                s(:str, "  b[reak]                    list breakpoints\n"),
                s(:str, "  cat[ch]                    show catchpoint\n"),
                s(:str, "  del[ete][ nnn]             delete some or all breakpoints\n"),
                s(:str, "  disp[lay] <expression>     add expression into display expression list\n"),
                s(:str, "  undisp[lay][ nnn]          delete one particular or all display expressions\n"),
                s(:str, "  c[ont]                     run until program ends or hit breakpoint\n"),
                s(:str, "  s[tep][ nnn]               step (into methods) one line or till line nnn\n"),
                s(:str, "  n[ext][ nnn]               go over one line or till line nnn\n"),
                s(:str, "  w[here]                    display frames\n"),
                s(:str, "  f[rame]                    alias for where\n"),
                s(:str, "  l[ist][ (-|nn-mm)]         list program, - lists backwards\n"),
                s(:str, "                             nn-mm lists given lines\n"),
                s(:str, "  up[ nn]                    move to higher frame\n"),
                s(:str, "  down[ nn]                  move to lower frame\n"),
                s(:str, "  fin[ish]                   return to outer frame\n"),
                s(:str, "  tr[ace] (on|off)           set trace mode of current thread\n"),
                s(:str, "  tr[ace] (on|off) all       set trace mode of all threads\n"),
                s(:str, "  q[uit]                     exit from debugger\n"),
                s(:str, "  v[ar] g[lobal]             show global variables\n"),
                s(:str, "  v[ar] l[ocal]              show local variables\n"),
                s(:str, "  v[ar] i[nstance] <object>  show instance variables of object\n"),
                s(:str, "  v[ar] c[onst] <object>     show constants of object\n"),
                s(:str, "  m[ethod] i[nstance] <obj>  show methods of object\n"),
                s(:str, "  m[ethod] <class|module>    show instance methods of class or module\n"),
                s(:str, "  th[read] l[ist]            list all threads\n"),
                s(:str, "  th[read] c[ur[rent]]       show current thread\n"),
                s(:str, "  th[read] [sw[itch]] <nnn>  switch thread context to nnn\n"),
                s(:str, "  th[read] stop <nnn>        stop thread nnn\n"),
                s(:str, "  th[read] resume <nnn>      resume thread nnn\n"),
                s(:str, "  pp expression              evaluate expression and pretty_print its value\n"),
                s(:str, "  p expression               evaluate expression and print its value\n"),
                s(:str, "  r[estart]                  restart program\n"),
                s(:str, "  h[elp]                     print this help\n"),
                s(:str, "  <everything else>          evaluate\n")))),
          s(:def, :display_expressions,
            s(:args,
              s(:arg, :binding)),
            s(:begin,
              s(:lvasgn, :n,
                s(:int, 1)),
              s(:for,
                s(:lvasgn, :d),
                s(:send, nil, :display),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :d), :[],
                      s(:int, 0)),
                    s(:begin,
                      s(:send,
                        s(:send, nil, :stdout), :printf,
                        s(:str, "%d: "),
                        s(:lvar, :n)),
                      s(:send, nil, :display_expression,
                        s(:send,
                          s(:lvar, :d), :[],
                          s(:int, 1)),
                        s(:lvar, :binding))), nil),
                  s(:op_asgn,
                    s(:lvasgn, :n), :+,
                    s(:int, 1)))))),
          s(:def, :display_expression,
            s(:args,
              s(:arg, :exp),
              s(:arg, :binding)),
            s(:send,
              s(:send, nil, :stdout), :printf,
              s(:str, "%s = %s\n"),
              s(:lvar, :exp),
              s(:send,
                s(:send, nil, :debug_silent_eval,
                  s(:lvar, :exp),
                  s(:lvar, :binding)), :to_s))),
          s(:def, :frame_set_pos,
            s(:args,
              s(:arg, :file),
              s(:arg, :line)),
            s(:if,
              s(:send,
                s(:ivar, :@frames), :[],
                s(:int, 0)),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:ivar, :@frames), :[],
                    s(:int, 0)), :[]=,
                  s(:int, 1),
                  s(:lvar, :file)),
                s(:send,
                  s(:send,
                    s(:ivar, :@frames), :[],
                    s(:int, 0)), :[]=,
                  s(:int, 2),
                  s(:lvar, :line))), nil)),
          s(:def, :display_frames,
            s(:args,
              s(:arg, :pos)),
            s(:block,
              s(:send,
                s(:int, 0), :upto,
                s(:send,
                  s(:send,
                    s(:ivar, :@frames), :size), :-,
                  s(:int, 1))),
              s(:args,
                s(:arg, :n)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :n), :==,
                    s(:lvar, :pos)),
                  s(:send,
                    s(:send, nil, :stdout), :print,
                    s(:str, "--> ")),
                  s(:send,
                    s(:send, nil, :stdout), :print,
                    s(:str, "    "))),
                s(:send,
                  s(:send, nil, :stdout), :print,
                  s(:send, nil, :format_frame,
                    s(:lvar, :n)))))),
          s(:def, :format_frame,
            s(:args,
              s(:arg, :pos)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :_),
                  s(:lvasgn, :file),
                  s(:lvasgn, :line),
                  s(:lvasgn, :id)),
                s(:send,
                  s(:ivar, :@frames), :[],
                  s(:lvar, :pos))),
              s(:send, nil, :sprintf,
                s(:str, "#%d %s:%s%s\n"),
                s(:send,
                  s(:lvar, :pos), :+,
                  s(:int, 1)),
                s(:lvar, :file),
                s(:lvar, :line),
                s(:begin,
                  s(:if,
                    s(:lvar, :id),
                    s(:dstr,
                      s(:str, ":in `"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :id), :id2name)),
                      s(:str, "'")),
                    s(:str, "")))))),
          s(:def, :script_lines,
            s(:args,
              s(:arg, :file),
              s(:arg, :line)),
            s(:begin,
              s(:if,
                s(:and,
                  s(:begin,
                    s(:lvasgn, :lines,
                      s(:send,
                        s(:const, nil, :SCRIPT_LINES__), :[],
                        s(:lvar, :file)))),
                  s(:send,
                    s(:lvar, :lines), :!=,
                    s(:true))), nil,
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:const, nil, :File), :exist?,
                      s(:lvar, :file)),
                    s(:send,
                      s(:const,
                        s(:const, nil, :Tracer), :Single), :get_line,
                      s(:lvar, :file),
                      s(:lvar, :line)), nil),
                  s(:lvasgn, :lines,
                    s(:send,
                      s(:const, nil, :SCRIPT_LINES__), :[],
                      s(:lvar, :file))),
                  s(:if,
                    s(:send,
                      s(:lvar, :lines), :==,
                      s(:true)),
                    s(:lvasgn, :lines,
                      s(:nil)), nil))),
              s(:lvar, :lines))),
          s(:def, :display_list,
            s(:args,
              s(:arg, :b),
              s(:arg, :e),
              s(:arg, :file),
              s(:arg, :line)),
            s(:if,
              s(:lvasgn, :lines,
                s(:send, nil, :script_lines,
                  s(:lvar, :file),
                  s(:lvar, :line))),
              s(:begin,
                s(:send,
                  s(:send, nil, :stdout), :printf,
                  s(:str, "[%d, %d] in %s\n"),
                  s(:lvar, :b),
                  s(:lvar, :e),
                  s(:lvar, :file)),
                s(:block,
                  s(:send,
                    s(:lvar, :b), :upto,
                    s(:lvar, :e)),
                  s(:args,
                    s(:arg, :n)),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :n), :>,
                        s(:int, 0)),
                      s(:send,
                        s(:lvar, :lines), :[],
                        s(:send,
                          s(:lvar, :n), :-,
                          s(:int, 1)))),
                    s(:if,
                      s(:send,
                        s(:lvar, :n), :==,
                        s(:lvar, :line)),
                      s(:send,
                        s(:send, nil, :stdout), :printf,
                        s(:str, "=> %d  %s\n"),
                        s(:lvar, :n),
                        s(:send,
                          s(:send,
                            s(:lvar, :lines), :[],
                            s(:send,
                              s(:lvar, :n), :-,
                              s(:int, 1))), :chomp)),
                      s(:send,
                        s(:send, nil, :stdout), :printf,
                        s(:str, "   %d  %s\n"),
                        s(:lvar, :n),
                        s(:send,
                          s(:send,
                            s(:lvar, :lines), :[],
                            s(:send,
                              s(:lvar, :n), :-,
                              s(:int, 1))), :chomp))), nil))),
              s(:send,
                s(:send, nil, :stdout), :printf,
                s(:str, "No sourcefile available for %s\n"),
                s(:lvar, :file)))),
          s(:def, :line_at,
            s(:args,
              s(:arg, :file),
              s(:arg, :line)),
            s(:begin,
              s(:lvasgn, :lines,
                s(:send, nil, :script_lines,
                  s(:lvar, :file),
                  s(:lvar, :line))),
              s(:if,
                s(:and,
                  s(:lvar, :lines),
                  s(:lvasgn, :line,
                    s(:send,
                      s(:lvar, :lines), :[],
                      s(:send,
                        s(:lvar, :line), :-,
                        s(:int, 1))))),
                s(:return,
                  s(:lvar, :line)), nil),
              s(:return,
                s(:str, "\n")))),
          s(:def, :debug_funcname,
            s(:args,
              s(:arg, :id)),
            s(:if,
              s(:send,
                s(:lvar, :id), :nil?),
              s(:str, "toplevel"),
              s(:send,
                s(:lvar, :id), :id2name))),
          s(:def, :check_break_points,
            s(:args,
              s(:arg, :file),
              s(:arg, :klass),
              s(:arg, :pos),
              s(:arg, :binding),
              s(:arg, :id)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send, nil, :break_points), :empty?),
                s(:return,
                  s(:false)), nil),
              s(:lvasgn, :n,
                s(:int, 1)),
              s(:for,
                s(:lvasgn, :b),
                s(:send, nil, :break_points),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :b), :[],
                      s(:int, 0)),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :b), :[],
                          s(:int, 1)), :==,
                        s(:int, 0)),
                      s(:if,
                        s(:or,
                          s(:begin,
                            s(:and,
                              s(:send,
                                s(:send,
                                  s(:lvar, :b), :[],
                                  s(:int, 2)), :==,
                                s(:lvar, :file)),
                              s(:send,
                                s(:send,
                                  s(:lvar, :b), :[],
                                  s(:int, 3)), :==,
                                s(:lvar, :pos)))),
                          s(:begin,
                            s(:and,
                              s(:and,
                                s(:lvar, :klass),
                                s(:send,
                                  s(:send,
                                    s(:lvar, :b), :[],
                                    s(:int, 2)), :==,
                                  s(:lvar, :klass))),
                              s(:send,
                                s(:send,
                                  s(:lvar, :b), :[],
                                  s(:int, 3)), :==,
                                s(:lvar, :pos))))),
                        s(:begin,
                          s(:send,
                            s(:send, nil, :stdout), :printf,
                            s(:str, "Breakpoint %d, %s at %s:%s\n"),
                            s(:lvar, :n),
                            s(:send, nil, :debug_funcname,
                              s(:lvar, :id)),
                            s(:lvar, :file),
                            s(:lvar, :pos)),
                          s(:return,
                            s(:true))), nil),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :b), :[],
                            s(:int, 1)), :==,
                          s(:int, 1)),
                        s(:if,
                          s(:send, nil, :debug_silent_eval,
                            s(:send,
                              s(:lvar, :b), :[],
                              s(:int, 2)),
                            s(:lvar, :binding)),
                          s(:begin,
                            s(:send,
                              s(:send, nil, :stdout), :printf,
                              s(:str, "Watchpoint %d, %s at %s:%s\n"),
                              s(:lvar, :n),
                              s(:send, nil, :debug_funcname,
                                s(:lvar, :id)),
                              s(:lvar, :file),
                              s(:lvar, :pos)),
                            s(:return,
                              s(:true))), nil), nil)), nil),
                  s(:op_asgn,
                    s(:lvasgn, :n), :+,
                    s(:int, 1)))),
              s(:return,
                s(:false)))),
          s(:def, :excn_handle,
            s(:args,
              s(:arg, :file),
              s(:arg, :line),
              s(:arg, :id),
              s(:arg, :binding)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:gvar, :$!), :class), :<=,
                  s(:const, nil, :SystemExit)),
                s(:begin,
                  s(:send, nil, :set_trace_func,
                    s(:nil)),
                  s(:send, nil, :exit)), nil),
              s(:if,
                s(:and,
                  s(:ivar, :@catch),
                  s(:begin,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:gvar, :$!), :class), :ancestors), :find),
                      s(:args,
                        s(:arg, :e)),
                      s(:send,
                        s(:send,
                          s(:lvar, :e), :to_s), :==,
                        s(:ivar, :@catch))))),
                s(:begin,
                  s(:send,
                    s(:send, nil, :stdout), :printf,
                    s(:str, "%s:%d: `%s' (%s)\n"),
                    s(:lvar, :file),
                    s(:lvar, :line),
                    s(:gvar, :$!),
                    s(:send,
                      s(:gvar, :$!), :class)),
                  s(:lvasgn, :fs,
                    s(:send,
                      s(:ivar, :@frames), :size)),
                  s(:lvasgn, :tb,
                    s(:send,
                      s(:send, nil, :caller,
                        s(:int, 0)), :[],
                      s(:irange,
                        s(:send,
                          s(:lvar, :fs), :-@),
                        s(:int, -1)))),
                  s(:if,
                    s(:lvar, :tb),
                    s(:for,
                      s(:lvasgn, :i),
                      s(:lvar, :tb),
                      s(:send,
                        s(:send, nil, :stdout), :printf,
                        s(:str, "\tfrom %s\n"),
                        s(:lvar, :i))), nil),
                  s(:send, nil, :suspend_all),
                  s(:send, nil, :debug_command,
                    s(:lvar, :file),
                    s(:lvar, :line),
                    s(:lvar, :id),
                    s(:lvar, :binding))), nil))),
          s(:def, :trace_func,
            s(:args,
              s(:arg, :event),
              s(:arg, :file),
              s(:arg, :line),
              s(:arg, :id),
              s(:arg, :binding),
              s(:arg, :klass)),
            s(:begin,
              s(:if,
                s(:send, nil, :trace?),
                s(:send,
                  s(:const, nil, :Tracer), :trace_func,
                  s(:lvar, :event),
                  s(:lvar, :file),
                  s(:lvar, :line),
                  s(:lvar, :id),
                  s(:lvar, :binding),
                  s(:lvar, :klass)), nil),
              s(:send,
                s(:send, nil, :context,
                  s(:send,
                    s(:const, nil, :Thread), :current)), :check_suspend),
              s(:ivasgn, :@file,
                s(:lvar, :file)),
              s(:ivasgn, :@line,
                s(:lvar, :line)),
              s(:case,
                s(:lvar, :event),
                s(:when,
                  s(:str, "line"),
                  s(:begin,
                    s(:send, nil, :frame_set_pos,
                      s(:lvar, :file),
                      s(:lvar, :line)),
                    s(:if,
                      s(:or,
                        s(:send,
                          s(:ivar, :@no_step), :!),
                        s(:send,
                          s(:send,
                            s(:ivar, :@frames), :size), :==,
                          s(:ivar, :@no_step))),
                      s(:begin,
                        s(:op_asgn,
                          s(:ivasgn, :@stop_next), :-,
                          s(:int, 1)),
                        s(:if,
                          s(:send,
                            s(:ivar, :@stop_next), :<,
                            s(:int, 0)),
                          s(:ivasgn, :@stop_next,
                            s(:int, -1)), nil)),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:ivar, :@frames), :size), :<,
                          s(:ivar, :@no_step)),
                        s(:ivasgn, :@stop_next,
                          s(:int, 0)), nil)),
                    s(:if,
                      s(:or,
                        s(:send,
                          s(:ivar, :@stop_next), :==,
                          s(:int, 0)),
                        s(:send, nil, :check_break_points,
                          s(:lvar, :file),
                          s(:nil),
                          s(:lvar, :line),
                          s(:lvar, :binding),
                          s(:lvar, :id))),
                      s(:begin,
                        s(:ivasgn, :@no_step,
                          s(:nil)),
                        s(:send, nil, :suspend_all),
                        s(:send, nil, :debug_command,
                          s(:lvar, :file),
                          s(:lvar, :line),
                          s(:lvar, :id),
                          s(:lvar, :binding))), nil))),
                s(:when,
                  s(:str, "call"),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@frames), :unshift,
                      s(:array,
                        s(:lvar, :binding),
                        s(:lvar, :file),
                        s(:lvar, :line),
                        s(:lvar, :id))),
                    s(:if,
                      s(:send, nil, :check_break_points,
                        s(:lvar, :file),
                        s(:lvar, :klass),
                        s(:send,
                          s(:lvar, :id), :id2name),
                        s(:lvar, :binding),
                        s(:lvar, :id)),
                      s(:begin,
                        s(:send, nil, :suspend_all),
                        s(:send, nil, :debug_command,
                          s(:lvar, :file),
                          s(:lvar, :line),
                          s(:lvar, :id),
                          s(:lvar, :binding))), nil))),
                s(:when,
                  s(:str, "c-call"),
                  s(:send, nil, :frame_set_pos,
                    s(:lvar, :file),
                    s(:lvar, :line))),
                s(:when,
                  s(:str, "class"),
                  s(:send,
                    s(:ivar, :@frames), :unshift,
                    s(:array,
                      s(:lvar, :binding),
                      s(:lvar, :file),
                      s(:lvar, :line),
                      s(:lvar, :id)))),
                s(:when,
                  s(:str, "return"),
                  s(:str, "end"),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:ivar, :@frames), :size), :==,
                        s(:ivar, :@finish_pos)),
                      s(:begin,
                        s(:ivasgn, :@stop_next,
                          s(:int, 1)),
                        s(:ivasgn, :@finish_pos,
                          s(:int, 0))), nil),
                    s(:send,
                      s(:ivar, :@frames), :shift))),
                s(:when,
                  s(:str, "raise"),
                  s(:send, nil, :excn_handle,
                    s(:lvar, :file),
                    s(:lvar, :line),
                    s(:lvar, :id),
                    s(:lvar, :binding))), nil),
              s(:ivasgn, :@last_file,
                s(:lvar, :file)))))),
      s(:block,
        s(:send, nil, :trap,
          s(:str, "INT")),
        s(:args),
        s(:send,
          s(:const, nil, :DEBUGGER__), :interrupt)),
      s(:ivasgn, :@last_thread,
        s(:send,
          s(:const, nil, :Thread), :main)),
      s(:ivasgn, :@max_thread,
        s(:int, 1)),
      s(:ivasgn, :@thread_list,
        s(:hash,
          s(:pair,
            s(:send,
              s(:const, nil, :Thread), :main),
            s(:int, 1)))),
      s(:ivasgn, :@break_points,
        s(:array)),
      s(:ivasgn, :@display,
        s(:array)),
      s(:ivasgn, :@waiting,
        s(:array)),
      s(:ivasgn, :@stdout,
        s(:const, nil, :STDOUT)),
      s(:sclass,
        s(:const, nil, :DEBUGGER__),
        s(:begin,
          s(:def, :stdout,
            s(:args),
            s(:ivar, :@stdout)),
          s(:def, :stdout=,
            s(:args,
              s(:arg, :s)),
            s(:ivasgn, :@stdout,
              s(:lvar, :s))),
          s(:def, :display,
            s(:args),
            s(:ivar, :@display)),
          s(:def, :break_points,
            s(:args),
            s(:ivar, :@break_points)),
          s(:def, :waiting,
            s(:args),
            s(:ivar, :@waiting)),
          s(:def, :set_trace,
            s(:args,
              s(:arg, :arg)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:const, nil, :MUTEX), :synchronize),
                s(:args),
                s(:begin,
                  s(:send, nil, :make_thread_list),
                  s(:for,
                    s(:mlhs,
                      s(:lvasgn, :th)),
                    s(:ivar, :@thread_list),
                    s(:send,
                      s(:send, nil, :context,
                        s(:lvar, :th)), :set_trace,
                      s(:lvar, :arg))))),
              s(:lvar, :arg))),
          s(:def, :set_last_thread,
            s(:args,
              s(:arg, :th)),
            s(:ivasgn, :@last_thread,
              s(:lvar, :th))),
          s(:def, :suspend,
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:const, nil, :MUTEX), :synchronize),
                s(:args),
                s(:begin,
                  s(:send, nil, :make_thread_list),
                  s(:for,
                    s(:mlhs,
                      s(:lvasgn, :th)),
                    s(:ivar, :@thread_list),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :th), :==,
                          s(:send,
                            s(:const, nil, :Thread), :current)),
                        s(:next), nil),
                      s(:send,
                        s(:send, nil, :context,
                          s(:lvar, :th)), :set_suspend))))),
              s(:send,
                s(:const, nil, :Thread), :pass))),
          s(:def, :resume,
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:const, nil, :MUTEX), :synchronize),
                s(:args),
                s(:begin,
                  s(:send, nil, :make_thread_list),
                  s(:block,
                    s(:send,
                      s(:ivar, :@thread_list), :each),
                    s(:args,
                      s(:arg, :th)),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :th), :==,
                          s(:send,
                            s(:const, nil, :Thread), :current)),
                        s(:next), nil),
                      s(:send,
                        s(:send, nil, :context,
                          s(:lvar, :th)), :clear_suspend))),
                  s(:block,
                    s(:send,
                      s(:send, nil, :waiting), :each),
                    s(:args,
                      s(:arg, :th)),
                    s(:send,
                      s(:lvar, :th), :run)),
                  s(:send,
                    s(:send, nil, :waiting), :clear))),
              s(:send,
                s(:const, nil, :Thread), :pass))),
          s(:def, :context,
            s(:args,
              s(:optarg, :thread,
                s(:send,
                  s(:const, nil, :Thread), :current))),
            s(:begin,
              s(:lvasgn, :c,
                s(:send,
                  s(:lvar, :thread), :[],
                  s(:sym, :__debugger_data__))),
              s(:if,
                s(:lvar, :c), nil,
                s(:send,
                  s(:lvar, :thread), :[]=,
                  s(:sym, :__debugger_data__),
                  s(:lvasgn, :c,
                    s(:send,
                      s(:const, nil, :Context), :new)))),
              s(:lvar, :c))),
          s(:def, :interrupt,
            s(:args),
            s(:send,
              s(:send, nil, :context,
                s(:ivar, :@last_thread)), :stop_next)),
          s(:def, :get_thread,
            s(:args,
              s(:arg, :num)),
            s(:begin,
              s(:lvasgn, :th,
                s(:send,
                  s(:ivar, :@thread_list), :key,
                  s(:lvar, :num))),
              s(:if,
                s(:lvar, :th), nil,
                s(:begin,
                  s(:send,
                    s(:ivar, :@stdout), :print,
                    s(:dstr,
                      s(:str, "No thread #"),
                      s(:begin,
                        s(:lvar, :num)),
                      s(:str, "\n"))),
                  s(:send, nil, :throw,
                    s(:sym, :debug_error)))),
              s(:lvar, :th))),
          s(:def, :thread_list,
            s(:args,
              s(:arg, :num)),
            s(:begin,
              s(:lvasgn, :th,
                s(:send, nil, :get_thread,
                  s(:lvar, :num))),
              s(:if,
                s(:send,
                  s(:lvar, :th), :==,
                  s(:send,
                    s(:const, nil, :Thread), :current)),
                s(:send,
                  s(:ivar, :@stdout), :print,
                  s(:str, "+")),
                s(:send,
                  s(:ivar, :@stdout), :print,
                  s(:str, " "))),
              s(:send,
                s(:ivar, :@stdout), :printf,
                s(:str, "%d "),
                s(:lvar, :num)),
              s(:send,
                s(:ivar, :@stdout), :print,
                s(:send,
                  s(:lvar, :th), :inspect),
                s(:str, "\t")),
              s(:lvasgn, :file,
                s(:block,
                  s(:send,
                    s(:send, nil, :context,
                      s(:lvar, :th)), :instance_eval),
                  s(:args),
                  s(:ivar, :@file))),
              s(:if,
                s(:lvar, :file),
                s(:send,
                  s(:ivar, :@stdout), :print,
                  s(:lvar, :file),
                  s(:str, ":"),
                  s(:block,
                    s(:send,
                      s(:send, nil, :context,
                        s(:lvar, :th)), :instance_eval),
                    s(:args),
                    s(:ivar, :@line))), nil),
              s(:send,
                s(:ivar, :@stdout), :print,
                s(:str, "\n")))),
          s(:def, :thread_list_all,
            s(:args),
            s(:for,
              s(:lvasgn, :th),
              s(:send,
                s(:send,
                  s(:ivar, :@thread_list), :values), :sort),
              s(:send, nil, :thread_list,
                s(:lvar, :th)))),
          s(:def, :make_thread_list,
            s(:args),
            s(:begin,
              s(:lvasgn, :hash,
                s(:hash)),
              s(:for,
                s(:lvasgn, :th),
                s(:send,
                  s(:const, nil, :Thread), :list),
                s(:if,
                  s(:send,
                    s(:ivar, :@thread_list), :key?,
                    s(:lvar, :th)),
                  s(:send,
                    s(:lvar, :hash), :[]=,
                    s(:lvar, :th),
                    s(:send,
                      s(:ivar, :@thread_list), :[],
                      s(:lvar, :th))),
                  s(:begin,
                    s(:op_asgn,
                      s(:ivasgn, :@max_thread), :+,
                      s(:int, 1)),
                    s(:send,
                      s(:lvar, :hash), :[]=,
                      s(:lvar, :th),
                      s(:ivar, :@max_thread))))),
              s(:ivasgn, :@thread_list,
                s(:lvar, :hash)))),
          s(:def, :debug_thread_info,
            s(:args,
              s(:arg, :input),
              s(:arg, :binding)),
            s(:case,
              s(:lvar, :input),
              s(:when,
                s(:regexp,
                  s(:str, "^l(?:ist)?"),
                  s(:regopt)),
                s(:begin,
                  s(:send, nil, :make_thread_list),
                  s(:send, nil, :thread_list_all))),
              s(:when,
                s(:regexp,
                  s(:str, "^c(?:ur(?:rent)?)?$"),
                  s(:regopt)),
                s(:begin,
                  s(:send, nil, :make_thread_list),
                  s(:send, nil, :thread_list,
                    s(:send,
                      s(:ivar, :@thread_list), :[],
                      s(:send,
                        s(:const, nil, :Thread), :current))))),
              s(:when,
                s(:regexp,
                  s(:str, "^(?:sw(?:itch)?\\s+)?(\\d+)"),
                  s(:regopt)),
                s(:begin,
                  s(:send, nil, :make_thread_list),
                  s(:lvasgn, :th,
                    s(:send, nil, :get_thread,
                      s(:send,
                        s(:nth_ref, 1), :to_i))),
                  s(:if,
                    s(:send,
                      s(:lvar, :th), :==,
                      s(:send,
                        s(:const, nil, :Thread), :current)),
                    s(:send,
                      s(:ivar, :@stdout), :print,
                      s(:str, "It's the current thread.\n")),
                    s(:begin,
                      s(:send, nil, :thread_list,
                        s(:send,
                          s(:ivar, :@thread_list), :[],
                          s(:lvar, :th))),
                      s(:send,
                        s(:send, nil, :context,
                          s(:lvar, :th)), :stop_next),
                      s(:send,
                        s(:lvar, :th), :run),
                      s(:return,
                        s(:sym, :cont)))))),
              s(:when,
                s(:regexp,
                  s(:str, "^stop\\s+(\\d+)"),
                  s(:regopt)),
                s(:begin,
                  s(:send, nil, :make_thread_list),
                  s(:lvasgn, :th,
                    s(:send, nil, :get_thread,
                      s(:send,
                        s(:nth_ref, 1), :to_i))),
                  s(:if,
                    s(:send,
                      s(:lvar, :th), :==,
                      s(:send,
                        s(:const, nil, :Thread), :current)),
                    s(:send,
                      s(:ivar, :@stdout), :print,
                      s(:str, "It's the current thread.\n")),
                    s(:if,
                      s(:send,
                        s(:lvar, :th), :stop?),
                      s(:send,
                        s(:ivar, :@stdout), :print,
                        s(:str, "Already stopped.\n")),
                      s(:begin,
                        s(:send, nil, :thread_list,
                          s(:send,
                            s(:ivar, :@thread_list), :[],
                            s(:lvar, :th))),
                        s(:send,
                          s(:send, nil, :context,
                            s(:lvar, :th)), :suspend)))))),
              s(:when,
                s(:regexp,
                  s(:str, "^resume\\s+(\\d+)"),
                  s(:regopt)),
                s(:begin,
                  s(:send, nil, :make_thread_list),
                  s(:lvasgn, :th,
                    s(:send, nil, :get_thread,
                      s(:send,
                        s(:nth_ref, 1), :to_i))),
                  s(:if,
                    s(:send,
                      s(:lvar, :th), :==,
                      s(:send,
                        s(:const, nil, :Thread), :current)),
                    s(:send,
                      s(:ivar, :@stdout), :print,
                      s(:str, "It's the current thread.\n")),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :th), :stop?), :!),
                      s(:send,
                        s(:ivar, :@stdout), :print,
                        s(:str, "Already running.")),
                      s(:begin,
                        s(:send, nil, :thread_list,
                          s(:send,
                            s(:ivar, :@thread_list), :[],
                            s(:lvar, :th))),
                        s(:send,
                          s(:lvar, :th), :run)))))), nil)))),
      s(:send,
        s(:send, nil, :stdout), :printf,
        s(:str, "Debug.rb\n")),
      s(:send,
        s(:send, nil, :stdout), :printf,
        s(:str, "Emacs support available.\n\n")),
      s(:send,
        s(:const,
          s(:const, nil, :RubyVM), :InstructionSequence), :compile_option=,
        s(:hash,
          s(:pair,
            s(:sym, :trace_instruction),
            s(:true)))),
      s(:send, nil, :set_trace_func,
        s(:block,
          s(:send, nil, :proc),
          s(:args,
            s(:arg, :event),
            s(:arg, :file),
            s(:arg, :line),
            s(:arg, :id),
            s(:arg, :binding),
            s(:arg, :klass),
            s(:restarg, :rest)),
          s(:send,
            s(:send,
              s(:const, nil, :DEBUGGER__), :context), :trace_func,
            s(:lvar, :event),
            s(:lvar, :file),
            s(:lvar, :line),
            s(:lvar, :id),
            s(:lvar, :binding),
            s(:lvar, :klass)))))))
