s(:begin,
  s(:send, nil, :require,
    s(:str, "e2mmap")),
  s(:if,
    s(:defined?,
      s(:const, nil, :Mutex)), nil,
    s(:send, nil, :require,
      s(:str, "thread"))),
  s(:send, nil, :require,
    s(:str, "forwardable")),
  s(:send, nil, :require,
    s(:str, "shell/error")),
  s(:send, nil, :require,
    s(:str, "shell/command-processor")),
  s(:send, nil, :require,
    s(:str, "shell/process-controller")),
  s(:class,
    s(:const, nil, :Shell), nil,
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :Error)),
      s(:send, nil, :extend,
        s(:const, nil, :Exception2MessageMapper)),
      s(:ivasgn, :@debug,
        s(:false)),
      s(:ivasgn, :@verbose,
        s(:true)),
      s(:ivasgn, :@debug_display_process_id,
        s(:false)),
      s(:ivasgn, :@debug_display_thread_id,
        s(:true)),
      s(:ivasgn, :@debug_output_mutex,
        s(:send,
          s(:const, nil, :Mutex), :new)),
      s(:sclass,
        s(:const, nil, :Shell),
        s(:begin,
          s(:send, nil, :extend,
            s(:const, nil, :Forwardable)),
          s(:send, nil, :attr_accessor,
            s(:sym, :cascade),
            s(:sym, :debug),
            s(:sym, :verbose)),
          s(:alias,
            s(:sym, :debug?),
            s(:sym, :debug)),
          s(:alias,
            s(:sym, :verbose?),
            s(:sym, :verbose)),
          s(:ivasgn, :@verbose,
            s(:true)),
          s(:def, :debug=,
            s(:args,
              s(:arg, :val)),
            s(:begin,
              s(:ivasgn, :@debug,
                s(:lvar, :val)),
              s(:if,
                s(:lvar, :val),
                s(:ivasgn, :@verbose,
                  s(:lvar, :val)), nil))),
          s(:def, :cd,
            s(:args,
              s(:arg, :path)),
            s(:send, nil, :new,
              s(:lvar, :path))),
          s(:def, :default_system_path,
            s(:args),
            s(:if,
              s(:ivar, :@default_system_path),
              s(:ivar, :@default_system_path),
              s(:send,
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:str, "PATH")), :split,
                s(:str, ":")))),
          s(:def, :default_system_path=,
            s(:args,
              s(:arg, :path)),
            s(:ivasgn, :@default_system_path,
              s(:lvar, :path))),
          s(:def, :default_record_separator,
            s(:args),
            s(:if,
              s(:ivar, :@default_record_separator),
              s(:ivar, :@default_record_separator),
              s(:gvar, :$/))),
          s(:def, :default_record_separator=,
            s(:args,
              s(:arg, :rs)),
            s(:ivasgn, :@default_record_separator,
              s(:lvar, :rs))),
          s(:lvasgn, :mutex_methods,
            s(:array,
              s(:str, "unlock"),
              s(:str, "lock"),
              s(:str, "locked?"),
              s(:str, "synchronize"),
              s(:str, "try_lock"),
              s(:str, "exclusive_unlock"))),
          s(:for,
            s(:lvasgn, :m),
            s(:lvar, :mutex_methods),
            s(:send, nil, :def_delegator,
              s(:str, "@debug_output_mutex"),
              s(:lvar, :m),
              s(:send,
                s(:str, "debug_output_"), :+,
                s(:send,
                  s(:lvar, :m), :to_s)))))),
      s(:def, :initialize,
        s(:args,
          s(:optarg, :pwd,
            s(:send,
              s(:const, nil, :Dir), :pwd)),
          s(:optarg, :umask,
            s(:nil))),
        s(:begin,
          s(:ivasgn, :@cwd,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:lvar, :pwd))),
          s(:ivasgn, :@dir_stack,
            s(:array)),
          s(:ivasgn, :@umask,
            s(:lvar, :umask)),
          s(:ivasgn, :@system_path,
            s(:send,
              s(:const, nil, :Shell), :default_system_path)),
          s(:ivasgn, :@record_separator,
            s(:send,
              s(:const, nil, :Shell), :default_record_separator)),
          s(:ivasgn, :@command_processor,
            s(:send,
              s(:const, nil, :CommandProcessor), :new,
              s(:self))),
          s(:ivasgn, :@process_controller,
            s(:send,
              s(:const, nil, :ProcessController), :new,
              s(:self))),
          s(:ivasgn, :@verbose,
            s(:send,
              s(:const, nil, :Shell), :verbose)),
          s(:ivasgn, :@debug,
            s(:send,
              s(:const, nil, :Shell), :debug)))),
      s(:send, nil, :attr_reader,
        s(:sym, :system_path)),
      s(:def, :system_path=,
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:ivasgn, :@system_path,
            s(:lvar, :path)),
          s(:send, nil, :rehash))),
      s(:send, nil, :attr_accessor,
        s(:sym, :umask)),
      s(:send, nil, :attr_accessor,
        s(:sym, :record_separator)),
      s(:send, nil, :attr_accessor,
        s(:sym, :verbose),
        s(:sym, :debug)),
      s(:def, :debug=,
        s(:args,
          s(:arg, :val)),
        s(:begin,
          s(:ivasgn, :@debug,
            s(:lvar, :val)),
          s(:if,
            s(:lvar, :val),
            s(:ivasgn, :@verbose,
              s(:lvar, :val)), nil))),
      s(:alias,
        s(:sym, :verbose?),
        s(:sym, :verbose)),
      s(:alias,
        s(:sym, :debug?),
        s(:sym, :debug)),
      s(:send, nil, :attr_reader,
        s(:sym, :command_processor)),
      s(:send, nil, :attr_reader,
        s(:sym, :process_controller)),
      s(:def, :expand_path,
        s(:args,
          s(:arg, :path)),
        s(:send,
          s(:const, nil, :File), :expand_path,
          s(:lvar, :path),
          s(:ivar, :@cwd))),
      s(:send, nil, :attr_reader,
        s(:sym, :cwd)),
      s(:alias,
        s(:sym, :dir),
        s(:sym, :cwd)),
      s(:alias,
        s(:sym, :getwd),
        s(:sym, :cwd)),
      s(:alias,
        s(:sym, :pwd),
        s(:sym, :cwd)),
      s(:send, nil, :attr_reader,
        s(:sym, :dir_stack)),
      s(:alias,
        s(:sym, :dirs),
        s(:sym, :dir_stack)),
      s(:def, :chdir,
        s(:args,
          s(:optarg, :path,
            s(:nil)),
          s(:optarg, :verbose,
            s(:ivar, :@verbose))),
        s(:begin,
          s(:send, nil, :check_point),
          s(:if,
            s(:send, nil, :iterator?),
            s(:begin,
              s(:if,
                s(:lvar, :verbose),
                s(:send, nil, :notify,
                  s(:dstr,
                    s(:str, "chdir(with block) "),
                    s(:begin,
                      s(:lvar, :path)))), nil),
              s(:lvasgn, :cwd_old,
                s(:ivar, :@cwd)),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:send, nil, :chdir,
                      s(:lvar, :path),
                      s(:nil)),
                    s(:yield)),
                  s(:send, nil, :chdir,
                    s(:lvar, :cwd_old),
                    s(:nil))))),
            s(:begin,
              s(:if,
                s(:lvar, :verbose),
                s(:send, nil, :notify,
                  s(:dstr,
                    s(:str, "chdir "),
                    s(:begin,
                      s(:lvar, :path)))), nil),
              s(:if,
                s(:lvar, :path), nil,
                s(:lvasgn, :path,
                  s(:str, "~"))),
              s(:ivasgn, :@cwd,
                s(:send, nil, :expand_path,
                  s(:lvar, :path))),
              s(:send, nil, :notify,
                s(:dstr,
                  s(:str, "current dir: "),
                  s(:begin,
                    s(:ivar, :@cwd)))),
              s(:send, nil, :rehash),
              s(:send,
                s(:const, nil, :Void), :new,
                s(:self)))))),
      s(:alias,
        s(:sym, :cd),
        s(:sym, :chdir)),
      s(:def, :pushdir,
        s(:args,
          s(:optarg, :path,
            s(:nil)),
          s(:optarg, :verbose,
            s(:ivar, :@verbose))),
        s(:begin,
          s(:send, nil, :check_point),
          s(:if,
            s(:send, nil, :iterator?),
            s(:begin,
              s(:if,
                s(:lvar, :verbose),
                s(:send, nil, :notify,
                  s(:dstr,
                    s(:str, "pushdir(with block) "),
                    s(:begin,
                      s(:lvar, :path)))), nil),
              s(:send, nil, :pushdir,
                s(:lvar, :path),
                s(:nil)),
              s(:kwbegin,
                s(:ensure,
                  s(:yield),
                  s(:send, nil, :popdir)))),
            s(:if,
              s(:lvar, :path),
              s(:begin,
                s(:if,
                  s(:lvar, :verbose),
                  s(:send, nil, :notify,
                    s(:dstr,
                      s(:str, "pushdir "),
                      s(:begin,
                        s(:lvar, :path)))), nil),
                s(:send,
                  s(:ivar, :@dir_stack), :push,
                  s(:ivar, :@cwd)),
                s(:send, nil, :chdir,
                  s(:lvar, :path),
                  s(:nil)),
                s(:send, nil, :notify,
                  s(:dstr,
                    s(:str, "dir stack: ["),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@dir_stack), :join,
                        s(:str, ", "))),
                    s(:str, "]"))),
                s(:self)),
              s(:begin,
                s(:if,
                  s(:lvar, :verbose),
                  s(:send, nil, :notify,
                    s(:str, "pushdir")), nil),
                s(:if,
                  s(:lvasgn, :pop,
                    s(:send,
                      s(:ivar, :@dir_stack), :pop)),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@dir_stack), :push,
                      s(:ivar, :@cwd)),
                    s(:send, nil, :chdir,
                      s(:lvar, :pop)),
                    s(:send, nil, :notify,
                      s(:dstr,
                        s(:str, "dir stack: ["),
                        s(:begin,
                          s(:send,
                            s(:ivar, :@dir_stack), :join,
                            s(:str, ", "))),
                        s(:str, "]"))),
                    s(:self)),
                  s(:send,
                    s(:const, nil, :Shell), :Fail,
                    s(:const, nil, :DirStackEmpty)))))),
          s(:send,
            s(:const, nil, :Void), :new,
            s(:self)))),
      s(:alias,
        s(:sym, :pushd),
        s(:sym, :pushdir)),
      s(:def, :popdir,
        s(:args),
        s(:begin,
          s(:send, nil, :check_point),
          s(:send, nil, :notify,
            s(:str, "popdir")),
          s(:if,
            s(:lvasgn, :pop,
              s(:send,
                s(:ivar, :@dir_stack), :pop)),
            s(:begin,
              s(:send, nil, :chdir,
                s(:lvar, :pop)),
              s(:send, nil, :notify,
                s(:dstr,
                  s(:str, "dir stack: ["),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@dir_stack), :join,
                      s(:str, ", "))),
                  s(:str, "]"))),
              s(:self)),
            s(:send,
              s(:const, nil, :Shell), :Fail,
              s(:const, nil, :DirStackEmpty))),
          s(:send,
            s(:const, nil, :Void), :new,
            s(:self)))),
      s(:alias,
        s(:sym, :popd),
        s(:sym, :popdir)),
      s(:def, :jobs,
        s(:args),
        s(:send,
          s(:ivar, :@process_controller), :jobs)),
      s(:def, :kill,
        s(:args,
          s(:arg, :sig),
          s(:arg, :command)),
        s(:send,
          s(:ivar, :@process_controller), :kill_job,
          s(:lvar, :sig),
          s(:lvar, :command))),
      s(:defs,
        s(:const, nil, :Shell), :def_system_command,
        s(:args,
          s(:arg, :command),
          s(:optarg, :path,
            s(:lvar, :command))),
        s(:send,
          s(:const, nil, :CommandProcessor), :def_system_command,
          s(:lvar, :command),
          s(:lvar, :path))),
      s(:defs,
        s(:const, nil, :Shell), :undef_system_command,
        s(:args,
          s(:arg, :command)),
        s(:send,
          s(:const, nil, :CommandProcessor), :undef_system_command,
          s(:lvar, :command))),
      s(:defs,
        s(:const, nil, :Shell), :alias_command,
        s(:args,
          s(:arg, :ali),
          s(:arg, :command),
          s(:restarg, :opts),
          s(:blockarg, :block)),
        s(:send,
          s(:const, nil, :CommandProcessor), :alias_command,
          s(:lvar, :ali),
          s(:lvar, :command),
          s(:splat,
            s(:lvar, :opts)),
          s(:block_pass,
            s(:lvar, :block)))),
      s(:defs,
        s(:const, nil, :Shell), :unalias_command,
        s(:args,
          s(:arg, :ali)),
        s(:send,
          s(:const, nil, :CommandProcessor), :unalias_command,
          s(:lvar, :ali))),
      s(:defs,
        s(:const, nil, :Shell), :install_system_commands,
        s(:args,
          s(:optarg, :pre,
            s(:str, "sys_"))),
        s(:send,
          s(:const, nil, :CommandProcessor), :install_system_commands,
          s(:lvar, :pre))),
      s(:def, :inspect,
        s(:args),
        s(:if,
          s(:and,
            s(:send,
              s(:send, nil, :debug), :kind_of?,
              s(:const, nil, :Integer)),
            s(:send,
              s(:send, nil, :debug), :>,
              s(:int, 2))),
          s(:zsuper),
          s(:send, nil, :to_s))),
      s(:defs,
        s(:self), :notify,
        s(:args,
          s(:restarg, :opts)),
        s(:block,
          s(:send,
            s(:const, nil, :Shell), :debug_output_synchronize),
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :opts), :[],
                  s(:int, -1)), :kind_of?,
                s(:const, nil, :String)),
              s(:lvasgn, :yorn,
                s(:send, nil, :verbose?)),
              s(:lvasgn, :yorn,
                s(:send,
                  s(:lvar, :opts), :pop))),
            s(:if,
              s(:lvar, :yorn), nil,
              s(:return)),
            s(:if,
              s(:ivar, :@debug_display_thread_id),
              s(:if,
                s(:ivar, :@debug_display_process_id),
                s(:lvasgn, :prefix,
                  s(:dstr,
                    s(:str, "shell(#"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Process), :pid)),
                    s(:str, ":"),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Thread), :current), :to_s), :sub,
                        s(:str, "Thread"),
                        s(:str, "Th"))),
                    s(:str, "): "))),
                s(:lvasgn, :prefix,
                  s(:dstr,
                    s(:str, "shell("),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Thread), :current), :to_s), :sub,
                        s(:str, "Thread"),
                        s(:str, "Th"))),
                    s(:str, "): ")))),
              s(:lvasgn, :prefix,
                s(:str, "shell: "))),
            s(:lvasgn, :_head,
              s(:true)),
            s(:send,
              s(:const, nil, :STDERR), :print,
              s(:send,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :opts), :collect),
                    s(:args,
                      s(:arg, :mes)),
                    s(:begin,
                      s(:lvasgn, :mes,
                        s(:send,
                          s(:lvar, :mes), :dup)),
                      s(:if,
                        s(:send, nil, :iterator?),
                        s(:yield,
                          s(:lvar, :mes)), nil),
                      s(:if,
                        s(:lvar, :_head),
                        s(:begin,
                          s(:lvasgn, :_head,
                            s(:false)),
                          s(:send,
                            s(:lvar, :prefix), :+,
                            s(:lvar, :mes))),
                        s(:send,
                          s(:send,
                            s(:str, " "), :*,
                            s(:send,
                              s(:lvar, :prefix), :size)), :+,
                          s(:lvar, :mes))))), :join,
                  s(:str, "\n")), :+,
                s(:str, "\n")))))),
      s(:send,
        s(:const, nil, :CommandProcessor), :initialize),
      s(:send,
        s(:const, nil, :CommandProcessor), :run_config))))
