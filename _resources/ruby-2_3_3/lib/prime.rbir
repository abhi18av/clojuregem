s(:begin,
  s(:send, nil, :require,
    s(:str, "singleton")),
  s(:send, nil, :require,
    s(:str, "forwardable")),
  s(:class,
    s(:const, nil, :Integer), nil,
    s(:begin,
      s(:defs,
        s(:const, nil, :Integer), :from_prime_division,
        s(:args,
          s(:arg, :pd)),
        s(:send,
          s(:const, nil, :Prime), :int_from_prime_division,
          s(:lvar, :pd))),
      s(:def, :prime_division,
        s(:args,
          s(:optarg, :generator,
            s(:send,
              s(:const,
                s(:const, nil, :Prime), :Generator23), :new))),
        s(:send,
          s(:const, nil, :Prime), :prime_division,
          s(:self),
          s(:lvar, :generator))),
      s(:def, :prime?,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:self), :<=,
              s(:int, 3)),
            s(:return,
              s(:send,
                s(:self), :>=,
                s(:int, 2))), nil),
          s(:if,
            s(:or,
              s(:send,
                s(:send,
                  s(:self), :%,
                  s(:int, 2)), :==,
                s(:int, 0)),
              s(:send,
                s(:send,
                  s(:self), :%,
                  s(:int, 3)), :==,
                s(:int, 0))),
            s(:return,
              s(:false)), nil),
          s(:block,
            s(:send,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 5),
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:self), :**,
                          s(:float, 0.5))), :floor))), :step,
                s(:int, 6)), :each),
            s(:args,
              s(:arg, :i)),
            s(:if,
              s(:or,
                s(:send,
                  s(:send,
                    s(:self), :%,
                    s(:lvar, :i)), :==,
                  s(:int, 0)),
                s(:send,
                  s(:send,
                    s(:self), :%,
                    s(:begin,
                      s(:send,
                        s(:lvar, :i), :+,
                        s(:int, 2)))), :==,
                  s(:int, 0))),
              s(:return,
                s(:false)), nil)),
          s(:true))),
      s(:defs,
        s(:const, nil, :Integer), :each_prime,
        s(:args,
          s(:arg, :ubound),
          s(:blockarg, :block)),
        s(:send,
          s(:const, nil, :Prime), :each,
          s(:lvar, :ubound),
          s(:block_pass,
            s(:lvar, :block)))))),
  s(:class,
    s(:const, nil, :Prime), nil,
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :Enumerable)),
      s(:send, nil, :include,
        s(:const, nil, :Singleton)),
      s(:sclass,
        s(:self),
        s(:begin,
          s(:send, nil, :extend,
            s(:const, nil, :Forwardable)),
          s(:send, nil, :include,
            s(:const, nil, :Enumerable)),
          s(:def, :method_added,
            s(:args,
              s(:arg, :method)),
            s(:send,
              s(:begin,
                s(:sclass,
                  s(:self),
                  s(:self))), :def_delegator,
              s(:sym, :instance),
              s(:lvar, :method))))),
      s(:def, :each,
        s(:args,
          s(:optarg, :ubound,
            s(:nil)),
          s(:optarg, :generator,
            s(:send,
              s(:const, nil, :EratosthenesGenerator), :new)),
          s(:blockarg, :block)),
        s(:begin,
          s(:send,
            s(:lvar, :generator), :upper_bound=,
            s(:lvar, :ubound)),
          s(:send,
            s(:lvar, :generator), :each,
            s(:block_pass,
              s(:lvar, :block))))),
      s(:def, :prime?,
        s(:args,
          s(:arg, :value),
          s(:optarg, :generator,
            s(:send,
              s(:const,
                s(:const, nil, :Prime), :Generator23), :new))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :generator), :respond_to?,
              s(:sym, :each)), nil,
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "Expected a prime generator, got "),
                s(:begin,
                  s(:lvar, :generator))))),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :value), :respond_to?,
                s(:sym, :integer?)),
              s(:send,
                s(:lvar, :value), :integer?)), nil,
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "Expected an integer, got "),
                s(:begin,
                  s(:lvar, :value))))),
          s(:if,
            s(:send,
              s(:lvar, :value), :<,
              s(:int, 2)),
            s(:return,
              s(:false)), nil),
          s(:block,
            s(:send,
              s(:lvar, :generator), :each),
            s(:args,
              s(:arg, :num)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :q),
                  s(:lvasgn, :r)),
                s(:send,
                  s(:lvar, :value), :divmod,
                  s(:lvar, :num))),
              s(:if,
                s(:send,
                  s(:lvar, :q), :<,
                  s(:lvar, :num)),
                s(:return,
                  s(:true)), nil),
              s(:if,
                s(:send,
                  s(:lvar, :r), :==,
                  s(:int, 0)),
                s(:return,
                  s(:false)), nil))))),
      s(:def, :int_from_prime_division,
        s(:args,
          s(:arg, :pd)),
        s(:block,
          s(:send,
            s(:lvar, :pd), :inject,
            s(:int, 1)),
          s(:args,
            s(:arg, :value),
            s(:mlhs,
              s(:arg, :prime),
              s(:arg, :index))),
          s(:send,
            s(:lvar, :value), :*,
            s(:send,
              s(:lvar, :prime), :**,
              s(:lvar, :index))))),
      s(:def, :prime_division,
        s(:args,
          s(:arg, :value),
          s(:optarg, :generator,
            s(:send,
              s(:const,
                s(:const, nil, :Prime), :Generator23), :new))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :value), :==,
              s(:int, 0)),
            s(:send, nil, :raise,
              s(:const, nil, :ZeroDivisionError)), nil),
          s(:if,
            s(:send,
              s(:lvar, :value), :<,
              s(:int, 0)),
            s(:begin,
              s(:lvasgn, :value,
                s(:send,
                  s(:lvar, :value), :-@)),
              s(:lvasgn, :pv,
                s(:array,
                  s(:array,
                    s(:int, -1),
                    s(:int, 1))))),
            s(:lvasgn, :pv,
              s(:array))),
          s(:block,
            s(:send,
              s(:lvar, :generator), :each),
            s(:args,
              s(:arg, :prime)),
            s(:begin,
              s(:lvasgn, :count,
                s(:int, 0)),
              s(:while,
                s(:send,
                  s(:begin,
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :value1),
                        s(:lvasgn, :mod)),
                      s(:send,
                        s(:lvar, :value), :divmod,
                        s(:lvar, :prime))),
                    s(:lvar, :mod)), :==,
                  s(:int, 0)),
                s(:begin,
                  s(:lvasgn, :value,
                    s(:lvar, :value1)),
                  s(:op_asgn,
                    s(:lvasgn, :count), :+,
                    s(:int, 1)))),
              s(:if,
                s(:send,
                  s(:lvar, :count), :!=,
                  s(:int, 0)),
                s(:send,
                  s(:lvar, :pv), :push,
                  s(:array,
                    s(:lvar, :prime),
                    s(:lvar, :count))), nil),
              s(:if,
                s(:send,
                  s(:lvar, :value1), :<=,
                  s(:lvar, :prime)),
                s(:break), nil))),
          s(:if,
            s(:send,
              s(:lvar, :value), :>,
              s(:int, 1)),
            s(:send,
              s(:lvar, :pv), :push,
              s(:array,
                s(:lvar, :value),
                s(:int, 1))), nil),
          s(:lvar, :pv))),
      s(:class,
        s(:const, nil, :PseudoPrimeGenerator), nil,
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :Enumerable)),
          s(:def, :initialize,
            s(:args,
              s(:optarg, :ubound,
                s(:nil))),
            s(:ivasgn, :@ubound,
              s(:lvar, :ubound))),
          s(:def, :upper_bound=,
            s(:args,
              s(:arg, :ubound)),
            s(:ivasgn, :@ubound,
              s(:lvar, :ubound))),
          s(:def, :upper_bound,
            s(:args),
            s(:ivar, :@ubound)),
          s(:def, :succ,
            s(:args),
            s(:send, nil, :raise,
              s(:const, nil, :NotImplementedError),
              s(:str, "need to define `succ'"))),
          s(:def, :next,
            s(:args),
            s(:send, nil, :raise,
              s(:const, nil, :NotImplementedError),
              s(:str, "need to define `next'"))),
          s(:def, :rewind,
            s(:args),
            s(:send, nil, :raise,
              s(:const, nil, :NotImplementedError),
              s(:str, "need to define `rewind'"))),
          s(:def, :each,
            s(:args),
            s(:begin,
              s(:if,
                s(:send, nil, :block_given?), nil,
                s(:return,
                  s(:send,
                    s(:self), :dup))),
              s(:if,
                s(:ivar, :@ubound),
                s(:begin,
                  s(:lvasgn, :last_value,
                    s(:nil)),
                  s(:block,
                    s(:send, nil, :loop),
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :prime,
                        s(:send, nil, :succ)),
                      s(:if,
                        s(:send,
                          s(:lvar, :prime), :>,
                          s(:ivar, :@ubound)),
                        s(:break,
                          s(:lvar, :last_value)), nil),
                      s(:lvasgn, :last_value,
                        s(:yield,
                          s(:lvar, :prime)))))),
                s(:block,
                  s(:send, nil, :loop),
                  s(:args),
                  s(:yield,
                    s(:send, nil, :succ)))))),
          s(:def, :with_index,
            s(:args,
              s(:optarg, :offset,
                s(:int, 0))),
            s(:begin,
              s(:if,
                s(:send, nil, :block_given?), nil,
                s(:return,
                  s(:block,
                    s(:send, nil, :enum_for,
                      s(:sym, :with_index),
                      s(:lvar, :offset)),
                    s(:args),
                    s(:const,
                      s(:const, nil, :Float), :INFINITY)))),
              s(:if,
                s(:send,
                  s(:lvar, :offset), :==,
                  s(:int, 0)),
                s(:return,
                  s(:send, nil, :each_with_index,
                    s(:block_pass,
                      s(:send, nil, :proc)))), nil),
              s(:block,
                s(:send, nil, :each),
                s(:args,
                  s(:arg, :prime)),
                s(:begin,
                  s(:yield,
                    s(:lvar, :prime),
                    s(:lvar, :offset)),
                  s(:op_asgn,
                    s(:lvasgn, :offset), :+,
                    s(:int, 1)))))),
          s(:def, :with_object,
            s(:args,
              s(:arg, :obj)),
            s(:begin,
              s(:if,
                s(:send, nil, :block_given?), nil,
                s(:return,
                  s(:block,
                    s(:send, nil, :enum_for,
                      s(:sym, :with_object),
                      s(:lvar, :obj)),
                    s(:args),
                    s(:const,
                      s(:const, nil, :Float), :INFINITY)))),
              s(:block,
                s(:send, nil, :each),
                s(:args,
                  s(:arg, :prime)),
                s(:yield,
                  s(:lvar, :prime),
                  s(:lvar, :obj))))),
          s(:def, :size,
            s(:args),
            s(:const,
              s(:const, nil, :Float), :INFINITY)))),
      s(:class,
        s(:const, nil, :EratosthenesGenerator),
        s(:const, nil, :PseudoPrimeGenerator),
        s(:begin,
          s(:def, :initialize,
            s(:args),
            s(:begin,
              s(:ivasgn, :@last_prime_index,
                s(:int, -1)),
              s(:zsuper))),
          s(:def, :succ,
            s(:args),
            s(:begin,
              s(:op_asgn,
                s(:ivasgn, :@last_prime_index), :+,
                s(:int, 1)),
              s(:send,
                s(:send,
                  s(:const, nil, :EratosthenesSieve), :instance), :get_nth_prime,
                s(:ivar, :@last_prime_index)))),
          s(:def, :rewind,
            s(:args),
            s(:send, nil, :initialize)),
          s(:alias,
            s(:sym, :next),
            s(:sym, :succ)))),
      s(:class,
        s(:const, nil, :TrialDivisionGenerator),
        s(:const, nil, :PseudoPrimeGenerator),
        s(:begin,
          s(:def, :initialize,
            s(:args),
            s(:begin,
              s(:ivasgn, :@index,
                s(:int, -1)),
              s(:zsuper))),
          s(:def, :succ,
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :TrialDivision), :instance), :[],
              s(:op_asgn,
                s(:ivasgn, :@index), :+,
                s(:int, 1)))),
          s(:def, :rewind,
            s(:args),
            s(:send, nil, :initialize)),
          s(:alias,
            s(:sym, :next),
            s(:sym, :succ)))),
      s(:class,
        s(:const, nil, :Generator23),
        s(:const, nil, :PseudoPrimeGenerator),
        s(:begin,
          s(:def, :initialize,
            s(:args),
            s(:begin,
              s(:ivasgn, :@prime,
                s(:int, 1)),
              s(:ivasgn, :@step,
                s(:nil)),
              s(:zsuper))),
          s(:def, :succ,
            s(:args),
            s(:begin,
              s(:if,
                s(:begin,
                  s(:ivar, :@step)),
                s(:begin,
                  s(:op_asgn,
                    s(:ivasgn, :@prime), :+,
                    s(:ivar, :@step)),
                  s(:ivasgn, :@step,
                    s(:send,
                      s(:int, 6), :-,
                      s(:ivar, :@step)))),
                s(:case,
                  s(:ivar, :@prime),
                  s(:when,
                    s(:int, 1),
                    s(:ivasgn, :@prime,
                      s(:int, 2))),
                  s(:when,
                    s(:int, 2),
                    s(:ivasgn, :@prime,
                      s(:int, 3))),
                  s(:when,
                    s(:int, 3),
                    s(:begin,
                      s(:ivasgn, :@prime,
                        s(:int, 5)),
                      s(:ivasgn, :@step,
                        s(:int, 2)))), nil)),
              s(:ivar, :@prime))),
          s(:alias,
            s(:sym, :next),
            s(:sym, :succ)),
          s(:def, :rewind,
            s(:args),
            s(:send, nil, :initialize)))),
      s(:class,
        s(:const, nil, :TrialDivision), nil,
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :Singleton)),
          s(:def, :initialize,
            s(:args),
            s(:begin,
              s(:ivasgn, :@primes,
                s(:array,
                  s(:int, 2),
                  s(:int, 3),
                  s(:int, 5),
                  s(:int, 7),
                  s(:int, 11),
                  s(:int, 13),
                  s(:int, 17),
                  s(:int, 19),
                  s(:int, 23),
                  s(:int, 29),
                  s(:int, 31),
                  s(:int, 37),
                  s(:int, 41),
                  s(:int, 43),
                  s(:int, 47),
                  s(:int, 53),
                  s(:int, 59),
                  s(:int, 61),
                  s(:int, 67),
                  s(:int, 71),
                  s(:int, 73),
                  s(:int, 79),
                  s(:int, 83),
                  s(:int, 89),
                  s(:int, 97),
                  s(:int, 101))),
              s(:ivasgn, :@next_to_check,
                s(:int, 103)),
              s(:ivasgn, :@ulticheck_index,
                s(:int, 3)),
              s(:ivasgn, :@ulticheck_next_squared,
                s(:int, 121)))),
          s(:def, :cache,
            s(:args),
            s(:ivar, :@primes)),
          s(:alias,
            s(:sym, :primes),
            s(:sym, :cache)),
          s(:alias,
            s(:sym, :primes_so_far),
            s(:sym, :cache)),
          s(:def, :[],
            s(:args,
              s(:arg, :index)),
            s(:begin,
              s(:while,
                s(:send,
                  s(:lvar, :index), :>=,
                  s(:send,
                    s(:ivar, :@primes), :length)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:ivar, :@next_to_check), :+,
                        s(:int, 4)), :>,
                      s(:ivar, :@ulticheck_next_squared)),
                    s(:begin,
                      s(:op_asgn,
                        s(:ivasgn, :@ulticheck_index), :+,
                        s(:int, 1)),
                      s(:ivasgn, :@ulticheck_next_squared,
                        s(:send,
                          s(:send,
                            s(:ivar, :@primes), :at,
                            s(:send,
                              s(:ivar, :@ulticheck_index), :+,
                              s(:int, 1))), :**,
                          s(:int, 2)))), nil),
                  s(:if,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:ivar, :@primes), :[],
                            s(:irange,
                              s(:int, 2),
                              s(:ivar, :@ulticheck_index))), :find),
                        s(:args,
                          s(:arg, :prime)),
                        s(:send,
                          s(:send,
                            s(:ivar, :@next_to_check), :%,
                            s(:lvar, :prime)), :==,
                          s(:int, 0))), :nil?),
                    s(:send,
                      s(:ivar, :@primes), :push,
                      s(:ivar, :@next_to_check)), nil),
                  s(:op_asgn,
                    s(:ivasgn, :@next_to_check), :+,
                    s(:int, 4)),
                  s(:if,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:ivar, :@primes), :[],
                            s(:irange,
                              s(:int, 2),
                              s(:ivar, :@ulticheck_index))), :find),
                        s(:args,
                          s(:arg, :prime)),
                        s(:send,
                          s(:send,
                            s(:ivar, :@next_to_check), :%,
                            s(:lvar, :prime)), :==,
                          s(:int, 0))), :nil?),
                    s(:send,
                      s(:ivar, :@primes), :push,
                      s(:ivar, :@next_to_check)), nil),
                  s(:op_asgn,
                    s(:ivasgn, :@next_to_check), :+,
                    s(:int, 2)))),
              s(:send,
                s(:ivar, :@primes), :[],
                s(:lvar, :index)))))),
      s(:class,
        s(:const, nil, :EratosthenesSieve), nil,
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :Singleton)),
          s(:def, :initialize,
            s(:args),
            s(:begin,
              s(:ivasgn, :@primes,
                s(:array,
                  s(:int, 2),
                  s(:int, 3),
                  s(:int, 5),
                  s(:int, 7),
                  s(:int, 11),
                  s(:int, 13),
                  s(:int, 17),
                  s(:int, 19),
                  s(:int, 23),
                  s(:int, 29),
                  s(:int, 31),
                  s(:int, 37),
                  s(:int, 41),
                  s(:int, 43),
                  s(:int, 47),
                  s(:int, 53),
                  s(:int, 59),
                  s(:int, 61),
                  s(:int, 67),
                  s(:int, 71),
                  s(:int, 73),
                  s(:int, 79),
                  s(:int, 83),
                  s(:int, 89),
                  s(:int, 97),
                  s(:int, 101))),
              s(:ivasgn, :@max_checked,
                s(:send,
                  s(:send,
                    s(:ivar, :@primes), :last), :+,
                  s(:int, 1))))),
          s(:def, :get_nth_prime,
            s(:args,
              s(:arg, :n)),
            s(:begin,
              s(:while,
                s(:send,
                  s(:send,
                    s(:ivar, :@primes), :size), :<=,
                  s(:lvar, :n)),
                s(:send, nil, :compute_primes)),
              s(:send,
                s(:ivar, :@primes), :[],
                s(:lvar, :n)))),
          s(:send, nil, :private),
          s(:def, :compute_primes,
            s(:args),
            s(:begin,
              s(:lvasgn, :max_segment_size,
                s(:send,
                  s(:float, 1000000.0), :to_i)),
              s(:lvasgn, :max_cached_prime,
                s(:send,
                  s(:ivar, :@primes), :last)),
              s(:if,
                s(:send,
                  s(:lvar, :max_cached_prime), :>,
                  s(:ivar, :@max_checked)),
                s(:ivasgn, :@max_checked,
                  s(:send,
                    s(:lvar, :max_cached_prime), :+,
                    s(:int, 1))), nil),
              s(:lvasgn, :segment_min,
                s(:ivar, :@max_checked)),
              s(:lvasgn, :segment_max,
                s(:send,
                  s(:array,
                    s(:send,
                      s(:lvar, :segment_min), :+,
                      s(:lvar, :max_segment_size)),
                    s(:send,
                      s(:lvar, :max_cached_prime), :*,
                      s(:int, 2))), :min)),
              s(:lvasgn, :root,
                s(:send, nil, :Integer,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Math), :sqrt,
                      s(:lvar, :segment_max)), :floor))),
              s(:lvasgn, :segment,
                s(:send,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:begin,
                          s(:send,
                            s(:lvar, :segment_min), :+,
                            s(:int, 1))),
                        s(:lvar, :segment_max))), :step,
                    s(:int, 2)), :to_a)),
              s(:block,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:const,
                        s(:const, nil, :Float), :INFINITY))), :each),
                s(:args,
                  s(:arg, :sieving)),
                s(:begin,
                  s(:lvasgn, :prime,
                    s(:send,
                      s(:ivar, :@primes), :[],
                      s(:lvar, :sieving))),
                  s(:if,
                    s(:send,
                      s(:lvar, :prime), :>,
                      s(:lvar, :root)),
                    s(:break), nil),
                  s(:lvasgn, :composite_index,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:begin,
                              s(:send,
                                s(:send,
                                  s(:lvar, :segment_min), :+,
                                  s(:int, 1)), :+,
                                s(:lvar, :prime))), :-@), :/,
                          s(:int, 2))), :%,
                      s(:lvar, :prime))),
                  s(:while,
                    s(:send,
                      s(:lvar, :composite_index), :<,
                      s(:send,
                        s(:lvar, :segment), :size)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :segment), :[]=,
                        s(:lvar, :composite_index),
                        s(:nil)),
                      s(:op_asgn,
                        s(:lvasgn, :composite_index), :+,
                        s(:lvar, :prime)))))),
              s(:send,
                s(:ivar, :@primes), :concat,
                s(:send,
                  s(:lvar, :segment), :compact!)),
              s(:ivasgn, :@max_checked,
                s(:lvar, :segment_max)))))))))
