s(:begin,
  s(:send, nil, :require,
    s(:str, "pp")),
  s(:send, nil, :require,
    s(:str, "delegate")),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:module,
    s(:const, nil, :PPTestModule),
    s(:begin,
      s(:class,
        s(:const, nil, :PPTest),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :test_list0123_12,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:str, "[0, 1, 2, 3]\n"),
              s(:send,
                s(:const, nil, :PP), :pp,
                s(:array,
                  s(:int, 0),
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3)),
                s(:send,
                  s(:str, ""), :dup),
                s(:int, 12)))),
          s(:def, :test_list0123_11,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:str, "[0,\n 1,\n 2,\n 3]\n"),
              s(:send,
                s(:const, nil, :PP), :pp,
                s(:array,
                  s(:int, 0),
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3)),
                s(:send,
                  s(:str, ""), :dup),
                s(:int, 11)))),
          s(:casgn, nil, :OverriddenStruct,
            s(:send,
              s(:const, nil, :Struct), :new,
              s(:str, "OverriddenStruct"),
              s(:sym, :members),
              s(:sym, :class))),
          s(:def, :test_struct_override_members,
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:send,
                  s(:const, nil, :OverriddenStruct), :new,
                  s(:int, 1),
                  s(:int, 2))),
              s(:send, nil, :assert_equal,
                s(:str, "#<struct Struct::OverriddenStruct members=1, class=2>\n"),
                s(:send,
                  s(:const, nil, :PP), :pp,
                  s(:lvar, :a),
                  s(:send,
                    s(:str, ""), :dup))))),
          s(:def, :test_redefined_method,
            s(:args),
            s(:begin,
              s(:lvasgn, :o,
                s(:send,
                  s(:str, ""), :dup)),
              s(:defs,
                s(:lvar, :o), :method,
                s(:args), nil),
              s(:send, nil, :assert_equal,
                s(:str, "\"\"\n"),
                s(:send,
                  s(:const, nil, :PP), :pp,
                  s(:lvar, :o),
                  s(:send,
                    s(:str, ""), :dup))))))),
      s(:class,
        s(:const, nil, :HasInspect), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :a)),
            s(:ivasgn, :@a,
              s(:lvar, :a))),
          s(:def, :inspect,
            s(:args),
            s(:return,
              s(:dstr,
                s(:str, "<inspect:"),
                s(:begin,
                  s(:send,
                    s(:ivar, :@a), :inspect)),
                s(:str, ">")))))),
      s(:class,
        s(:const, nil, :HasPrettyPrint), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :a)),
            s(:ivasgn, :@a,
              s(:lvar, :a))),
          s(:def, :pretty_print,
            s(:args,
              s(:arg, :q)),
            s(:begin,
              s(:send,
                s(:lvar, :q), :text,
                s(:str, "<pretty_print:")),
              s(:send,
                s(:lvar, :q), :pp,
                s(:ivar, :@a)),
              s(:send,
                s(:lvar, :q), :text,
                s(:str, ">")))))),
      s(:class,
        s(:const, nil, :HasBoth), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :a)),
            s(:ivasgn, :@a,
              s(:lvar, :a))),
          s(:def, :inspect,
            s(:args),
            s(:return,
              s(:dstr,
                s(:str, "<inspect:"),
                s(:begin,
                  s(:send,
                    s(:ivar, :@a), :inspect)),
                s(:str, ">")))),
          s(:def, :pretty_print,
            s(:args,
              s(:arg, :q)),
            s(:begin,
              s(:send,
                s(:lvar, :q), :text,
                s(:str, "<pretty_print:")),
              s(:send,
                s(:lvar, :q), :pp,
                s(:ivar, :@a)),
              s(:send,
                s(:lvar, :q), :text,
                s(:str, ">")))))),
      s(:class,
        s(:const, nil, :PrettyPrintInspect),
        s(:const, nil, :HasPrettyPrint),
        s(:alias,
          s(:sym, :inspect),
          s(:sym, :pretty_print_inspect))),
      s(:class,
        s(:const, nil, :PrettyPrintInspectWithoutPrettyPrint), nil,
        s(:alias,
          s(:sym, :inspect),
          s(:sym, :pretty_print_inspect))),
      s(:class,
        s(:const, nil, :PPInspectTest),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :test_hasinspect,
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:send,
                  s(:const, nil, :HasInspect), :new,
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:str, "<inspect:1>\n"),
                s(:send,
                  s(:const, nil, :PP), :pp,
                  s(:lvar, :a),
                  s(:send,
                    s(:str, ""), :dup))))),
          s(:def, :test_hasprettyprint,
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:send,
                  s(:const, nil, :HasPrettyPrint), :new,
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:str, "<pretty_print:1>\n"),
                s(:send,
                  s(:const, nil, :PP), :pp,
                  s(:lvar, :a),
                  s(:send,
                    s(:str, ""), :dup))))),
          s(:def, :test_hasboth,
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:send,
                  s(:const, nil, :HasBoth), :new,
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:str, "<pretty_print:1>\n"),
                s(:send,
                  s(:const, nil, :PP), :pp,
                  s(:lvar, :a),
                  s(:send,
                    s(:str, ""), :dup))))),
          s(:def, :test_pretty_print_inspect,
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:send,
                  s(:const, nil, :PrettyPrintInspect), :new,
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:str, "<pretty_print:1>"),
                s(:send,
                  s(:lvar, :a), :inspect)),
              s(:lvasgn, :a,
                s(:send,
                  s(:const, nil, :PrettyPrintInspectWithoutPrettyPrint), :new)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :RuntimeError)),
                s(:args),
                s(:send,
                  s(:lvar, :a), :inspect)))),
          s(:def, :test_proc,
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args),
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :inspect)),
                  s(:str, "\n")),
                s(:send,
                  s(:const, nil, :PP), :pp,
                  s(:lvar, :a),
                  s(:send,
                    s(:str, ""), :dup))))),
          s(:def, :test_to_s_with_iv,
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:send,
                  s(:const, nil, :Object), :new)),
              s(:defs,
                s(:lvar, :a), :to_s,
                s(:args),
                s(:str, "aaa")),
              s(:block,
                s(:send,
                  s(:lvar, :a), :instance_eval),
                s(:args),
                s(:ivasgn, :@a,
                  s(:nil))),
              s(:lvasgn, :result,
                s(:send,
                  s(:const, nil, :PP), :pp,
                  s(:lvar, :a),
                  s(:send,
                    s(:str, ""), :dup))),
              s(:send, nil, :assert_equal,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :inspect)),
                  s(:str, "\n")),
                s(:lvar, :result)))),
          s(:def, :test_to_s_without_iv,
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:send,
                  s(:const, nil, :Object), :new)),
              s(:defs,
                s(:lvar, :a), :to_s,
                s(:args),
                s(:str, "aaa")),
              s(:lvasgn, :result,
                s(:send,
                  s(:const, nil, :PP), :pp,
                  s(:lvar, :a),
                  s(:send,
                    s(:str, ""), :dup))),
              s(:send, nil, :assert_equal,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :inspect)),
                  s(:str, "\n")),
                s(:lvar, :result)))))),
      s(:class,
        s(:const, nil, :PPCycleTest),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :test_array,
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:array)),
              s(:send,
                s(:lvar, :a), :<<,
                s(:lvar, :a)),
              s(:send, nil, :assert_equal,
                s(:str, "[[...]]\n"),
                s(:send,
                  s(:const, nil, :PP), :pp,
                  s(:lvar, :a),
                  s(:send,
                    s(:str, ""), :dup))),
              s(:send, nil, :assert_equal,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :inspect)),
                  s(:str, "\n")),
                s(:send,
                  s(:const, nil, :PP), :pp,
                  s(:lvar, :a),
                  s(:send,
                    s(:str, ""), :dup))))),
          s(:def, :test_hash,
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:hash)),
              s(:send,
                s(:lvar, :a), :[]=,
                s(:int, 0),
                s(:lvar, :a)),
              s(:send, nil, :assert_equal,
                s(:str, "{0=>{...}}\n"),
                s(:send,
                  s(:const, nil, :PP), :pp,
                  s(:lvar, :a),
                  s(:send,
                    s(:str, ""), :dup))),
              s(:send, nil, :assert_equal,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :inspect)),
                  s(:str, "\n")),
                s(:send,
                  s(:const, nil, :PP), :pp,
                  s(:lvar, :a),
                  s(:send,
                    s(:str, ""), :dup))))),
          s(:casgn, nil, :S,
            s(:send,
              s(:const, nil, :Struct), :new,
              s(:str, "S"),
              s(:sym, :a),
              s(:sym, :b))),
          s(:def, :test_struct,
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:send,
                  s(:const, nil, :S), :new,
                  s(:int, 1),
                  s(:int, 2))),
              s(:send,
                s(:lvar, :a), :b=,
                s(:lvar, :a)),
              s(:send, nil, :assert_equal,
                s(:str, "#<struct Struct::S a=1, b=#<struct Struct::S:...>>\n"),
                s(:send,
                  s(:const, nil, :PP), :pp,
                  s(:lvar, :a),
                  s(:send,
                    s(:str, ""), :dup))),
              s(:send, nil, :assert_equal,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :inspect)),
                  s(:str, "\n")),
                s(:send,
                  s(:const, nil, :PP), :pp,
                  s(:lvar, :a),
                  s(:send,
                    s(:str, ""), :dup))))),
          s(:def, :test_object,
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:send,
                  s(:const, nil, :Object), :new)),
              s(:block,
                s(:send,
                  s(:lvar, :a), :instance_eval),
                s(:args),
                s(:ivasgn, :@a,
                  s(:lvar, :a))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :inspect), :+,
                  s(:str, "\n")),
                s(:send,
                  s(:const, nil, :PP), :pp,
                  s(:lvar, :a),
                  s(:send,
                    s(:str, ""), :dup))))),
          s(:def, :test_anonymous,
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:send,
                  s(:send,
                    s(:const, nil, :Class), :new), :new)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :inspect), :+,
                  s(:str, "\n")),
                s(:send,
                  s(:const, nil, :PP), :pp,
                  s(:lvar, :a),
                  s(:send,
                    s(:str, ""), :dup))))),
          s(:def, :test_withinspect,
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:array)),
              s(:send,
                s(:lvar, :a), :<<,
                s(:send,
                  s(:const, nil, :HasInspect), :new,
                  s(:lvar, :a))),
              s(:send, nil, :assert_equal,
                s(:str, "[<inspect:[...]>]\n"),
                s(:send,
                  s(:const, nil, :PP), :pp,
                  s(:lvar, :a),
                  s(:send,
                    s(:str, ""), :dup))),
              s(:send, nil, :assert_equal,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :inspect)),
                  s(:str, "\n")),
                s(:send,
                  s(:const, nil, :PP), :pp,
                  s(:lvar, :a),
                  s(:send,
                    s(:str, ""), :dup))))),
          s(:def, :test_share_nil,
            s(:args),
            s(:kwbegin,
              s(:ensure,
                s(:begin,
                  s(:send,
                    s(:const, nil, :PP), :sharing_detection=,
                    s(:true)),
                  s(:lvasgn, :a,
                    s(:array,
                      s(:nil),
                      s(:nil))),
                  s(:send, nil, :assert_equal,
                    s(:str, "[nil, nil]\n"),
                    s(:send,
                      s(:const, nil, :PP), :pp,
                      s(:lvar, :a),
                      s(:send,
                        s(:str, ""), :dup)))),
                s(:send,
                  s(:const, nil, :PP), :sharing_detection=,
                  s(:false))))))),
      s(:class,
        s(:const, nil, :PPSingleLineTest),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:def, :test_hash,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "{1=>1}"),
              s(:send,
                s(:const, nil, :PP), :singleline_pp,
                s(:hash,
                  s(:pair,
                    s(:int, 1),
                    s(:int, 1))),
                s(:send,
                  s(:str, ""), :dup))),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "[1"),
                s(:begin,
                  s(:send,
                    s(:str, ", 1"), :*,
                    s(:int, 99))),
                s(:str, "]")),
              s(:send,
                s(:const, nil, :PP), :singleline_pp,
                s(:send,
                  s(:array,
                    s(:int, 1)), :*,
                  s(:int, 100)),
                s(:send,
                  s(:str, ""), :dup)))))),
      s(:class,
        s(:const, nil, :PPDelegateTest),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:class,
            s(:const, nil, :A),
            s(:send, nil, :DelegateClass,
              s(:const, nil, :Array)), nil),
          s(:def, :test_delegate,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:str, "[]\n"),
              s(:send,
                s(:send,
                  s(:const, nil, :A), :new,
                  s(:array)), :pretty_inspect),
              s(:str, "[ruby-core:25804]"))))),
      s(:class,
        s(:const, nil, :PPFileStatTest),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:def, :test_nothing_raised,
          s(:args),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :File), :stat,
                s(:str, "(string)")), :pretty_inspect)))))))
