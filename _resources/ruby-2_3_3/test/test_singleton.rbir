s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "singleton")),
  s(:class,
    s(:const, nil, :TestSingleton),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:class,
        s(:const, nil, :SingletonTest), nil,
        s(:send, nil, :include,
          s(:const, nil, :Singleton))),
      s(:def, :test_marshal,
        s(:args),
        s(:begin,
          s(:lvasgn, :o1,
            s(:send,
              s(:const, nil, :SingletonTest), :instance)),
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:lvar, :o1))),
          s(:lvasgn, :o2,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:lvar, :m))),
          s(:send, nil, :assert_same,
            s(:lvar, :o1),
            s(:lvar, :o2)))),
      s(:def, :test_instance_never_changes,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :SingletonTest), :instance)),
          s(:lvasgn, :b,
            s(:send,
              s(:const, nil, :SingletonTest), :instance)),
          s(:send, nil, :assert_same,
            s(:lvar, :a),
            s(:lvar, :b)))),
      s(:def, :test_initialize_raises_exception,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :NoMethodError)),
          s(:args),
          s(:send,
            s(:const, nil, :SingletonTest), :new))),
      s(:def, :test_allocate_raises_exception,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :NoMethodError)),
          s(:args),
          s(:send,
            s(:const, nil, :SingletonTest), :allocate))),
      s(:def, :test_clone_raises_exception,
        s(:args),
        s(:begin,
          s(:lvasgn, :exception,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :TypeError)),
              s(:args),
              s(:send,
                s(:send,
                  s(:const, nil, :SingletonTest), :instance), :clone))),
          s(:lvasgn, :expected,
            s(:str, "can't clone instance of singleton TestSingleton::SingletonTest")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :exception), :message)))),
      s(:def, :test_dup_raises_exception,
        s(:args),
        s(:begin,
          s(:lvasgn, :exception,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :TypeError)),
              s(:args),
              s(:send,
                s(:send,
                  s(:const, nil, :SingletonTest), :instance), :dup))),
          s(:lvasgn, :expected,
            s(:str, "can't dup instance of singleton TestSingleton::SingletonTest")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :exception), :message)))),
      s(:def, :test_include_in_module_raises_exception,
        s(:args),
        s(:begin,
          s(:lvasgn, :mod,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:lvasgn, :exception,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :TypeError)),
              s(:args),
              s(:block,
                s(:send,
                  s(:lvar, :mod), :class_eval),
                s(:args),
                s(:send, nil, :include,
                  s(:const, nil, :Singleton))))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "Inclusion of the OO-Singleton module in module "),
              s(:begin,
                s(:lvar, :mod)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :exception), :message)))),
      s(:def, :test_extending_singleton_raises_exception,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :NoMethodError)),
          s(:args),
          s(:send,
            s(:str, "foo"), :extend,
            s(:const, nil, :Singleton)))),
      s(:def, :test_inheritance_works_with_overridden_inherited_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :super_super_called,
            s(:false)),
          s(:lvasgn, :outer,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:block,
                s(:send, nil, :define_singleton_method,
                  s(:sym, :inherited)),
                s(:args,
                  s(:arg, :sub)),
                s(:lvasgn, :super_super_called,
                  s(:true))))),
          s(:lvasgn, :inner,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:lvar, :outer)),
              s(:args),
              s(:send, nil, :include,
                s(:const, nil, :Singleton)))),
          s(:lvasgn, :tester,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :inner))),
          s(:send, nil, :assert,
            s(:lvar, :super_super_called)),
          s(:lvasgn, :a,
            s(:send,
              s(:lvar, :tester), :instance)),
          s(:lvasgn, :b,
            s(:send,
              s(:lvar, :tester), :instance)),
          s(:send, nil, :assert_same,
            s(:lvar, :a),
            s(:lvar, :b)))),
      s(:def, :test_class_level_cloning_preserves_singleton_behavior,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:const, nil, :SingletonTest), :clone)),
          s(:lvasgn, :a,
            s(:send,
              s(:lvar, :klass), :instance)),
          s(:lvasgn, :b,
            s(:send,
              s(:lvar, :klass), :instance)),
          s(:send, nil, :assert_same,
            s(:lvar, :a),
            s(:lvar, :b)))))))
