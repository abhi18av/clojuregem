s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:send, nil, :require,
    s(:str, "mutex_m")),
  s(:class,
    s(:const, nil, :TestMutexM),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:def, :test_cv_wait,
      s(:args),
      s(:begin,
        s(:lvasgn, :o,
          s(:send,
            s(:const, nil, :Object), :new)),
        s(:send,
          s(:lvar, :o), :instance_variable_set,
          s(:sym, :@foo),
          s(:nil)),
        s(:send,
          s(:lvar, :o), :extend,
          s(:const, nil, :Mutex_m)),
        s(:lvasgn, :c,
          s(:send,
            s(:const, nil, :ConditionVariable), :new)),
        s(:lvasgn, :t,
          s(:block,
            s(:send,
              s(:const, nil, :Thread), :start),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :o), :synchronize),
              s(:args),
              s(:begin,
                s(:until,
                  s(:lvasgn, :foo,
                    s(:send,
                      s(:lvar, :o), :instance_variable_get,
                      s(:sym, :@foo))),
                  s(:send,
                    s(:lvar, :c), :wait,
                    s(:lvar, :o))),
                s(:lvar, :foo))))),
        s(:send, nil, :sleep,
          s(:float, 0.0001)),
        s(:block,
          s(:send,
            s(:lvar, :o), :synchronize),
          s(:args),
          s(:send,
            s(:lvar, :o), :instance_variable_set,
            s(:sym, :@foo),
            s(:str, "abc"))),
        s(:send,
          s(:lvar, :c), :signal),
        s(:send, nil, :assert_equal,
          s(:str, "abc"),
          s(:send,
            s(:lvar, :t), :value))))))
