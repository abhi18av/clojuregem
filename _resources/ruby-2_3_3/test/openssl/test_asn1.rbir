s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "utils")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :TestUtils)),
    s(:class,
      s(:const,
        s(:const, nil, :OpenSSL), :TestASN1),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :test_decode,
          s(:args),
          s(:begin,
            s(:lvasgn, :subj,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Name), :parse,
                s(:str, "/DC=org/DC=ruby-lang/CN=TestCA"))),
            s(:lvasgn, :key,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA1024)),
            s(:lvasgn, :now,
              s(:send,
                s(:const, nil, :Time), :at,
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :to_i))),
            s(:lvasgn, :s,
              s(:int, 295990750012446699619010157040970350255)),
            s(:lvasgn, :exts,
              s(:array,
                s(:array,
                  s(:str, "basicConstraints"),
                  s(:str, "CA:TRUE,pathlen:1"),
                  s(:true)),
                s(:array,
                  s(:str, "keyUsage"),
                  s(:str, "keyCertSign, cRLSign"),
                  s(:true)),
                s(:array,
                  s(:str, "subjectKeyIdentifier"),
                  s(:str, "hash"),
                  s(:false)))),
            s(:lvasgn, :dgst,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Digest), :SHA1), :new)),
            s(:lvasgn, :cert,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :issue_cert,
                s(:lvar, :subj),
                s(:lvar, :key),
                s(:lvar, :s),
                s(:lvar, :now),
                s(:send,
                  s(:lvar, :now), :+,
                  s(:int, 3600)),
                s(:lvar, :exts),
                s(:nil),
                s(:nil),
                s(:lvar, :dgst))),
            s(:lvasgn, :asn1,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode,
                s(:lvar, :cert))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:lvar, :asn1), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send,
                  s(:lvar, :asn1), :value), :size)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :tbs_cert),
                s(:lvasgn, :sig_alg),
                s(:lvasgn, :sig_val)),
              s(:array,
                s(:splat,
                  s(:send,
                    s(:lvar, :asn1), :value)))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:lvar, :tbs_cert), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 8),
              s(:send,
                s(:send,
                  s(:lvar, :tbs_cert), :value), :size)),
            s(:lvasgn, :version,
              s(:send,
                s(:send,
                  s(:lvar, :tbs_cert), :value), :[],
                s(:int, 0))),
            s(:send, nil, :assert_equal,
              s(:sym, :CONTEXT_SPECIFIC),
              s(:send,
                s(:lvar, :version), :tag_class)),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :version), :tag)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:lvar, :version), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Integer),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :version), :value), :[],
                  s(:int, 0)), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :version), :value), :[],
                  s(:int, 0)), :value)),
            s(:lvasgn, :serial,
              s(:send,
                s(:send,
                  s(:lvar, :tbs_cert), :value), :[],
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Integer),
              s(:send,
                s(:lvar, :serial), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 295990750012446699619010157040970350255),
              s(:send,
                s(:lvar, :serial), :value)),
            s(:lvasgn, :sig,
              s(:send,
                s(:send,
                  s(:lvar, :tbs_cert), :value), :[],
                s(:int, 2))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:lvar, :sig), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:lvar, :sig), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :ObjectId),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :sig), :value), :[],
                  s(:int, 0)), :class)),
            s(:send, nil, :assert_equal,
              s(:str, "1.2.840.113549.1.1.5"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :sig), :value), :[],
                  s(:int, 0)), :oid)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Null),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :sig), :value), :[],
                  s(:int, 1)), :class)),
            s(:lvasgn, :dn,
              s(:send,
                s(:send,
                  s(:lvar, :tbs_cert), :value), :[],
                s(:int, 3))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :subj), :hash),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :X509), :Name), :new,
                  s(:lvar, :dn)), :hash)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:lvar, :dn), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send,
                  s(:lvar, :dn), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Set),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :dn), :value), :[],
                  s(:int, 0)), :class)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Set),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :dn), :value), :[],
                  s(:int, 1)), :class)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Set),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :dn), :value), :[],
                  s(:int, 2)), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :dn), :value), :[],
                    s(:int, 0)), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :dn), :value), :[],
                    s(:int, 1)), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :dn), :value), :[],
                    s(:int, 2)), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :dn), :value), :[],
                      s(:int, 0)), :value), :[],
                  s(:int, 0)), :class)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :dn), :value), :[],
                      s(:int, 1)), :value), :[],
                  s(:int, 0)), :class)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :dn), :value), :[],
                      s(:int, 2)), :value), :[],
                  s(:int, 0)), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :dn), :value), :[],
                        s(:int, 0)), :value), :[],
                    s(:int, 0)), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :dn), :value), :[],
                        s(:int, 1)), :value), :[],
                    s(:int, 0)), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :dn), :value), :[],
                        s(:int, 2)), :value), :[],
                    s(:int, 0)), :value), :size)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :oid),
                s(:lvasgn, :value)),
              s(:array,
                s(:splat,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :dn), :value), :[],
                          s(:int, 0)), :value), :[],
                      s(:int, 0)), :value)))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :ObjectId),
              s(:send,
                s(:lvar, :oid), :class)),
            s(:send, nil, :assert_equal,
              s(:str, "0.9.2342.19200300.100.1.25"),
              s(:send,
                s(:lvar, :oid), :oid)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :IA5String),
              s(:send,
                s(:lvar, :value), :class)),
            s(:send, nil, :assert_equal,
              s(:str, "org"),
              s(:send,
                s(:lvar, :value), :value)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :oid),
                s(:lvasgn, :value)),
              s(:array,
                s(:splat,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :dn), :value), :[],
                          s(:int, 1)), :value), :[],
                      s(:int, 0)), :value)))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :ObjectId),
              s(:send,
                s(:lvar, :oid), :class)),
            s(:send, nil, :assert_equal,
              s(:str, "0.9.2342.19200300.100.1.25"),
              s(:send,
                s(:lvar, :oid), :oid)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :IA5String),
              s(:send,
                s(:lvar, :value), :class)),
            s(:send, nil, :assert_equal,
              s(:str, "ruby-lang"),
              s(:send,
                s(:lvar, :value), :value)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :oid),
                s(:lvasgn, :value)),
              s(:array,
                s(:splat,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :dn), :value), :[],
                          s(:int, 2)), :value), :[],
                      s(:int, 0)), :value)))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :ObjectId),
              s(:send,
                s(:lvar, :oid), :class)),
            s(:send, nil, :assert_equal,
              s(:str, "2.5.4.3"),
              s(:send,
                s(:lvar, :oid), :oid)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :UTF8String),
              s(:send,
                s(:lvar, :value), :class)),
            s(:send, nil, :assert_equal,
              s(:str, "TestCA"),
              s(:send,
                s(:lvar, :value), :value)),
            s(:lvasgn, :validity,
              s(:send,
                s(:send,
                  s(:lvar, :tbs_cert), :value), :[],
                s(:int, 4))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:lvar, :validity), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:lvar, :validity), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :UTCTime),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :validity), :value), :[],
                  s(:int, 0)), :class)),
            s(:send, nil, :assert_equal,
              s(:lvar, :now),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :validity), :value), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :UTCTime),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :validity), :value), :[],
                  s(:int, 1)), :class)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :now), :+,
                s(:int, 3600)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :validity), :value), :[],
                  s(:int, 1)), :value)),
            s(:lvasgn, :dn,
              s(:send,
                s(:send,
                  s(:lvar, :tbs_cert), :value), :[],
                s(:int, 5))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :subj), :hash),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :X509), :Name), :new,
                  s(:lvar, :dn)), :hash)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:lvar, :dn), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send,
                  s(:lvar, :dn), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Set),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :dn), :value), :[],
                  s(:int, 0)), :class)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Set),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :dn), :value), :[],
                  s(:int, 1)), :class)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Set),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :dn), :value), :[],
                  s(:int, 2)), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :dn), :value), :[],
                    s(:int, 0)), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :dn), :value), :[],
                    s(:int, 1)), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :dn), :value), :[],
                    s(:int, 2)), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :dn), :value), :[],
                      s(:int, 0)), :value), :[],
                  s(:int, 0)), :class)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :dn), :value), :[],
                      s(:int, 1)), :value), :[],
                  s(:int, 0)), :class)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :dn), :value), :[],
                      s(:int, 2)), :value), :[],
                  s(:int, 0)), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :dn), :value), :[],
                        s(:int, 0)), :value), :[],
                    s(:int, 0)), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :dn), :value), :[],
                        s(:int, 1)), :value), :[],
                    s(:int, 0)), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :dn), :value), :[],
                        s(:int, 2)), :value), :[],
                    s(:int, 0)), :value), :size)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :oid),
                s(:lvasgn, :value)),
              s(:array,
                s(:splat,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :dn), :value), :[],
                          s(:int, 0)), :value), :[],
                      s(:int, 0)), :value)))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :ObjectId),
              s(:send,
                s(:lvar, :oid), :class)),
            s(:send, nil, :assert_equal,
              s(:str, "0.9.2342.19200300.100.1.25"),
              s(:send,
                s(:lvar, :oid), :oid)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :IA5String),
              s(:send,
                s(:lvar, :value), :class)),
            s(:send, nil, :assert_equal,
              s(:str, "org"),
              s(:send,
                s(:lvar, :value), :value)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :oid),
                s(:lvasgn, :value)),
              s(:array,
                s(:splat,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :dn), :value), :[],
                          s(:int, 1)), :value), :[],
                      s(:int, 0)), :value)))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :ObjectId),
              s(:send,
                s(:lvar, :oid), :class)),
            s(:send, nil, :assert_equal,
              s(:str, "0.9.2342.19200300.100.1.25"),
              s(:send,
                s(:lvar, :oid), :oid)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :IA5String),
              s(:send,
                s(:lvar, :value), :class)),
            s(:send, nil, :assert_equal,
              s(:str, "ruby-lang"),
              s(:send,
                s(:lvar, :value), :value)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :oid),
                s(:lvasgn, :value)),
              s(:array,
                s(:splat,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :dn), :value), :[],
                          s(:int, 2)), :value), :[],
                      s(:int, 0)), :value)))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :ObjectId),
              s(:send,
                s(:lvar, :oid), :class)),
            s(:send, nil, :assert_equal,
              s(:str, "2.5.4.3"),
              s(:send,
                s(:lvar, :oid), :oid)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :UTF8String),
              s(:send,
                s(:lvar, :value), :class)),
            s(:send, nil, :assert_equal,
              s(:str, "TestCA"),
              s(:send,
                s(:lvar, :value), :value)),
            s(:lvasgn, :pkey,
              s(:send,
                s(:send,
                  s(:lvar, :tbs_cert), :value), :[],
                s(:int, 6))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:lvar, :pkey), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:lvar, :pkey), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :pkey), :value), :[],
                  s(:int, 0)), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :pkey), :value), :[],
                    s(:int, 0)), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :ObjectId),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :pkey), :value), :[],
                      s(:int, 0)), :value), :[],
                  s(:int, 0)), :class)),
            s(:send, nil, :assert_equal,
              s(:str, "1.2.840.113549.1.1.1"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :pkey), :value), :[],
                      s(:int, 0)), :value), :[],
                  s(:int, 0)), :oid)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :BitString),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :pkey), :value), :[],
                  s(:int, 1)), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :pkey), :value), :[],
                  s(:int, 1)), :unused_bits)),
            s(:lvasgn, :spkey,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :pkey), :value), :[],
                    s(:int, 1)), :value))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:lvar, :spkey), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:lvar, :spkey), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Integer),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :spkey), :value), :[],
                  s(:int, 0)), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 143085709396403084580358323862163416700436550432664688288860593156058579474547937626086626045206357324274536445865308750491138538454154232826011964045825759324933943290377903384882276841880081931690695505836279972214003660451338124170055999155993192881685495391496854691199517389593073052473319331505702779271),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :spkey), :value), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Integer),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :spkey), :value), :[],
                  s(:int, 1)), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 65537),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :spkey), :value), :[],
                  s(:int, 1)), :value)),
            s(:lvasgn, :extensions,
              s(:send,
                s(:send,
                  s(:lvar, :tbs_cert), :value), :[],
                s(:int, 7))),
            s(:send, nil, :assert_equal,
              s(:sym, :CONTEXT_SPECIFIC),
              s(:send,
                s(:lvar, :extensions), :tag_class)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:lvar, :extensions), :tag)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:lvar, :extensions), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :extensions), :value), :[],
                  s(:int, 0)), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :extensions), :value), :[],
                    s(:int, 0)), :value), :size)),
            s(:lvasgn, :ext,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :extensions), :value), :[],
                    s(:int, 0)), :value), :[],
                s(:int, 0))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:lvar, :ext), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send,
                  s(:lvar, :ext), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :ObjectId),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :value), :[],
                  s(:int, 0)), :class)),
            s(:send, nil, :assert_equal,
              s(:str, "2.5.29.19"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :value), :[],
                  s(:int, 0)), :oid)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Boolean),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :value), :[],
                  s(:int, 1)), :class)),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :value), :[],
                  s(:int, 1)), :value)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :OctetString),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :value), :[],
                  s(:int, 2)), :class)),
            s(:lvasgn, :extv,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :ext), :value), :[],
                    s(:int, 2)), :value))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:lvar, :extv), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:lvar, :extv), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Boolean),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :extv), :value), :[],
                  s(:int, 0)), :class)),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :extv), :value), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Integer),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :extv), :value), :[],
                  s(:int, 1)), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :extv), :value), :[],
                  s(:int, 1)), :value)),
            s(:lvasgn, :ext,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :extensions), :value), :[],
                    s(:int, 0)), :value), :[],
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:lvar, :ext), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send,
                  s(:lvar, :ext), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :ObjectId),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :value), :[],
                  s(:int, 0)), :class)),
            s(:send, nil, :assert_equal,
              s(:str, "2.5.29.15"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :value), :[],
                  s(:int, 0)), :oid)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Boolean),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :value), :[],
                  s(:int, 1)), :class)),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :value), :[],
                  s(:int, 1)), :value)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :OctetString),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :value), :[],
                  s(:int, 2)), :class)),
            s(:lvasgn, :extv,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :ext), :value), :[],
                    s(:int, 2)), :value))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :BitString),
              s(:send,
                s(:lvar, :extv), :class)),
            s(:lvasgn, :str,
              s(:str, "\u0000")),
            s(:send,
              s(:lvar, :str), :[]=,
              s(:int, 0),
              s(:send,
                s(:int, 6), :chr)),
            s(:send, nil, :assert_equal,
              s(:lvar, :str),
              s(:send,
                s(:lvar, :extv), :value)),
            s(:lvasgn, :ext,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :extensions), :value), :[],
                    s(:int, 0)), :value), :[],
                s(:int, 2))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:lvar, :ext), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:lvar, :ext), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :ObjectId),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :value), :[],
                  s(:int, 0)), :class)),
            s(:send, nil, :assert_equal,
              s(:str, "2.5.29.14"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :value), :[],
                  s(:int, 0)), :oid)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :OctetString),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :value), :[],
                  s(:int, 1)), :class)),
            s(:lvasgn, :extv,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :ext), :value), :[],
                    s(:int, 1)), :value))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :OctetString),
              s(:send,
                s(:lvar, :extv), :class)),
            s(:lvasgn, :sha1,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Digest), :SHA1), :new)),
            s(:send,
              s(:lvar, :sha1), :update,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :pkey), :value), :[],
                  s(:int, 1)), :value)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :sha1), :digest),
              s(:send,
                s(:lvar, :extv), :value)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence),
              s(:send,
                s(:lvar, :sig_alg), :class)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:lvar, :sig_alg), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :ObjectId),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :pkey), :value), :[],
                      s(:int, 0)), :value), :[],
                  s(:int, 0)), :class)),
            s(:send, nil, :assert_equal,
              s(:str, "1.2.840.113549.1.1.1"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :pkey), :value), :[],
                      s(:int, 0)), :value), :[],
                  s(:int, 0)), :oid)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Null),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :pkey), :value), :[],
                      s(:int, 0)), :value), :[],
                  s(:int, 1)), :class)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :BitString),
              s(:send,
                s(:lvar, :sig_val), :class)),
            s(:lvasgn, :cululated_sig,
              s(:send,
                s(:lvar, :key), :sign,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new),
                s(:send,
                  s(:lvar, :tbs_cert), :to_der))),
            s(:send, nil, :assert_equal,
              s(:lvar, :cululated_sig),
              s(:send,
                s(:lvar, :sig_val), :value)))),
        s(:def, :test_encode_boolean,
          s(:args),
          s(:send, nil, :encode_decode_test,
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :ASN1), :Boolean),
            s(:array,
              s(:true),
              s(:false)))),
        s(:def, :test_encode_integer,
          s(:args),
          s(:send, nil, :encode_decode_test,
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :ASN1), :Integer),
            s(:array,
              s(:int, 72),
              s(:int, -127),
              s(:int, -128),
              s(:int, 128),
              s(:int, -1),
              s(:int, 0),
              s(:int, 1),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 12345))), :-@),
              s(:send,
                s(:int, 2), :**,
                s(:int, 12345))))),
        s(:def, :test_encode_nil,
          s(:args),
          s(:begin,
            s(:lvasgn, :m,
              s(:const,
                s(:const, nil, :OpenSSL), :ASN1)),
            s(:block,
              s(:send,
                s(:array,
                  s(:const,
                    s(:lvar, :m), :Boolean),
                  s(:const,
                    s(:lvar, :m), :Integer),
                  s(:const,
                    s(:lvar, :m), :BitString),
                  s(:const,
                    s(:lvar, :m), :OctetString),
                  s(:const,
                    s(:lvar, :m), :ObjectId),
                  s(:const,
                    s(:lvar, :m), :Enumerated),
                  s(:const,
                    s(:lvar, :m), :UTF8String),
                  s(:const,
                    s(:lvar, :m), :UTCTime),
                  s(:const,
                    s(:lvar, :m), :GeneralizedTime),
                  s(:const,
                    s(:lvar, :m), :Sequence),
                  s(:const,
                    s(:lvar, :m), :Set)), :each),
              s(:args,
                s(:arg, :klass)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :TypeError),
                  s(:const, nil, :NoMethodError)),
                s(:args),
                s(:send,
                  s(:send,
                    s(:lvar, :klass), :send,
                    s(:sym, :new),
                    s(:nil)), :to_der))))),
        s(:def, :encode_decode_test,
          s(:args,
            s(:arg, :type),
            s(:arg, :values)),
          s(:block,
            s(:send,
              s(:lvar, :values), :each),
            s(:args,
              s(:arg, :v)),
            s(:send, nil, :assert_equal,
              s(:lvar, :v),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :decode,
                  s(:send,
                    s(:send,
                      s(:lvar, :type), :new,
                      s(:lvar, :v)), :to_der)), :value)))),
        s(:def, :test_decode_pem,
          s(:args),
          s(:begin,
            s(:lvasgn, :pem,
              s(:dstr,
                s(:str, "-----BEGIN CERTIFICATE-----\n"),
                s(:str, "MIIC8zCCAdugAwIBAgIBATANBgkqhkiG9w0BAQUFADA9MRMwEQYKCZImiZPyLGQB\n"),
                s(:str, "GRYDb3JnMRkwFwYKCZImiZPyLGQBGRYJcnVieS1sYW5nMQswCQYDVQQDDAJDQTAe\n"),
                s(:str, "Fw0xMTA5MjUxMzQ4MjZaFw0xMTA5MjUxNDQ4MjZaMD0xEzARBgoJkiaJk/IsZAEZ\n"),
                s(:str, "FgNvcmcxGTAXBgoJkiaJk/IsZAEZFglydWJ5LWxhbmcxCzAJBgNVBAMMAkNBMIIB\n"),
                s(:str, "IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuV9ht9J7k4NBs38jOXvvTKY9\n"),
                s(:str, "gW8nLICSno5EETR1cuF7i4pNs9I1QJGAFAX0BEO4KbzXmuOvfCpD3CU+Slp1enen\n"),
                s(:str, "fzq/t/e/1IRW0wkJUJUFQign4CtrkJL+P07yx18UjyPlBXb81ApEmAB5mrJVSrWm\n"),
                s(:str, "qbjs07JbuS4QQGGXLc+Su96DkYKmSNVjBiLxVVSpyZfAY3hD37d60uG+X8xdW5v6\n"),
                s(:str, "8JkRFIhdGlb6JL8fllf/A/blNwdJOhVr9mESHhwGjwfSeTDPfd8ZLE027E5lyAVX\n"),
                s(:str, "9KZYcU00mOX+fdxOSnGqS/8JDRh0EPHDL15RcJjV2J6vZjPb0rOYGDoMcH+94wID\n"),
                s(:str, "AQABMA0GCSqGSIb3DQEBBQUAA4IBAQAiAtrIr1pLX4GYN5klviWKb8HC9ICYuAFI\n"),
                s(:str, "NfE3FwqzErEVXotuMe3yPVyB3Bv6rjYY/x5EtS5+WPTbHlvHZTkfcsnTpizcn4mW\n"),
                s(:str, "dJ6dDRaFCHt1YKKjUxqBt9lvvrc3nReYZN/P+s1mrDhWzGf8iPZgf8sFUHgnaK7W\n"),
                s(:str, "CXRVXmPFgCDRNpDDVQ0MQkr509yYfTH+dujNzqTCwSvkyZFyQ7Oe8Yj0VR6kquG3\n"),
                s(:str, "rEzBQ0F9dUyqQ9gyRg8KHhDfv9HzT1d/rnUZMkoombwYBRIUChGCYV0GnJcan2Zm\n"),
                s(:str, "/93PnPG1IvPjYNd5VlV+sXSnaxQn974HRCsMv7jA8BD6IgSaX6WK\n"),
                s(:str, "-----END CERTIFICATE-----\n"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :ASN1Error)),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode,
                s(:lvar, :pem))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :ASN1Error)),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode_all,
                s(:lvar, :pem))))),
        s(:def, :test_primitive_cannot_set_infinite_length,
          s(:args),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:lvasgn, :prim,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :ASN1), :Integer), :new,
                    s(:int, 50))),
                s(:send, nil, :assert_equal,
                  s(:false),
                  s(:send,
                    s(:lvar, :prim), :infinite_length)),
                s(:send,
                  s(:lvar, :prim), :infinite_length=,
                  s(:true)),
                s(:send, nil, :flunk,
                  s(:str, "Could set infinite length on primitive value"))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :NoMethodError)), nil, nil), nil))),
        s(:def, :test_decode_all,
          s(:args),
          s(:begin,
            s(:lvasgn, :expected,
              s(:array,
                s(:str, "02"),
                s(:str, "01"),
                s(:str, "01"),
                s(:str, "02"),
                s(:str, "01"),
                s(:str, "02"),
                s(:str, "02"),
                s(:str, "01"),
                s(:str, "03"))),
            s(:lvasgn, :raw,
              s(:send,
                s(:array,
                  s(:send,
                    s(:lvar, :expected), :join,
                    s(:str, ""))), :pack,
                s(:str, "H*"))),
            s(:lvasgn, :ary,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode_all,
                s(:lvar, :raw))),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:lvar, :ary), :size)),
            s(:block,
              s(:send,
                s(:lvar, :ary), :each_with_index),
              s(:args,
                s(:arg, :asn1),
                s(:arg, :i)),
              s(:begin,
                s(:send, nil, :assert_universal,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :INTEGER),
                  s(:lvar, :asn1)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :i), :+,
                    s(:int, 1)),
                  s(:send,
                    s(:lvar, :asn1), :value)))))),
        s(:def, :test_decode_utctime,
          s(:args),
          s(:begin,
            s(:lvasgn, :expected,
              s(:send,
                s(:const, nil, :Time), :at,
                s(:int, 1374535380))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :decode,
                  s(:str, "\u0017\v1307222323Z")), :value)),
            s(:op_asgn,
              s(:lvasgn, :expected), :+,
              s(:int, 17)),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :decode,
                  s(:str, "\u0017\r130722232317Z")), :value)))),
        s(:def, :test_create_inf_length_primitive,
          s(:args),
          s(:begin,
            s(:lvasgn, :expected,
              s(:array,
                s(:str, "24"),
                s(:str, "80"),
                s(:str, "04"),
                s(:str, "01"),
                s(:str, "61"),
                s(:str, "00"),
                s(:str, "00"))),
            s(:lvasgn, :raw,
              s(:send,
                s(:array,
                  s(:send,
                    s(:lvar, :expected), :join,
                    s(:str, ""))), :pack,
                s(:str, "H*"))),
            s(:lvasgn, :val,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :OctetString), :new,
                s(:str, "a"))),
            s(:lvasgn, :cons,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Constructive), :new,
                s(:array,
                  s(:lvar, :val),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :ASN1), :EndOfContent), :new)),
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :OCTET_STRING),
                s(:nil),
                s(:sym, :UNIVERSAL))),
            s(:send,
              s(:lvar, :cons), :infinite_length=,
              s(:true)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :cons), :tagging)),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:lvar, :cons), :to_der)),
            s(:lvasgn, :asn1,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode,
                s(:lvar, :raw))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :asn1), :infinite_length)),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:lvar, :asn1), :to_der)))),
        s(:def, :test_cons_without_inf_length_forbidden,
          s(:args),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :ASN1Error)),
            s(:args),
            s(:begin,
              s(:lvasgn, :val,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :OctetString), :new,
                  s(:str, "a"))),
              s(:lvasgn, :cons,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :Constructive), :new,
                  s(:array,
                    s(:lvar, :val)),
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :OCTET_STRING),
                  s(:nil),
                  s(:sym, :UNIVERSAL))),
              s(:send,
                s(:lvar, :cons), :to_der)))),
        s(:def, :test_cons_without_array_forbidden,
          s(:args),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :ASN1Error)),
            s(:args),
            s(:begin,
              s(:lvasgn, :val,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :OctetString), :new,
                  s(:str, "a"))),
              s(:lvasgn, :cons,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :Constructive), :new,
                  s(:lvar, :val),
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :OCTET_STRING),
                  s(:nil),
                  s(:sym, :UNIVERSAL))),
              s(:send,
                s(:lvar, :cons), :infinite_length=,
                s(:true)),
              s(:send,
                s(:lvar, :cons), :to_der)))),
        s(:def, :test_parse_empty_sequence,
          s(:args),
          s(:begin,
            s(:lvasgn, :expected,
              s(:array,
                s(:str, "A0"),
                s(:str, "07"),
                s(:str, "30"),
                s(:str, "02"),
                s(:str, "30"),
                s(:str, "00"),
                s(:str, "02"),
                s(:str, "01"),
                s(:str, "00"))),
            s(:lvasgn, :raw,
              s(:send,
                s(:array,
                  s(:send,
                    s(:lvar, :expected), :join,
                    s(:str, ""))), :pack,
                s(:str, "H*"))),
            s(:lvasgn, :asn1,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode,
                s(:lvar, :raw))),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:lvar, :asn1), :to_der)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:lvar, :asn1), :value), :size)),
            s(:lvasgn, :seq,
              s(:send,
                s(:send,
                  s(:lvar, :asn1), :value), :[],
                s(:int, 0))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:lvar, :seq), :value), :size)),
            s(:lvasgn, :inner_seq,
              s(:send,
                s(:send,
                  s(:lvar, :seq), :value), :[],
                s(:int, 0))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:send,
                  s(:lvar, :inner_seq), :value), :size)))),
        s(:def, :test_parse_tagged_0_infinite,
          s(:args),
          s(:begin,
            s(:lvasgn, :expected,
              s(:array,
                s(:str, "30"),
                s(:str, "80"),
                s(:str, "02"),
                s(:str, "01"),
                s(:str, "01"),
                s(:str, "80"),
                s(:str, "01"),
                s(:str, "02"),
                s(:str, "00"),
                s(:str, "00"))),
            s(:lvasgn, :raw,
              s(:send,
                s(:array,
                  s(:send,
                    s(:lvar, :expected), :join,
                    s(:str, ""))), :pack,
                s(:str, "H*"))),
            s(:lvasgn, :asn1,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode,
                s(:lvar, :raw))),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send,
                  s(:lvar, :asn1), :value), :size)),
            s(:lvasgn, :int,
              s(:send,
                s(:send,
                  s(:lvar, :asn1), :value), :[],
                s(:int, 0))),
            s(:send, nil, :assert_universal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :INTEGER),
              s(:lvar, :int)),
            s(:lvasgn, :tagged,
              s(:send,
                s(:send,
                  s(:lvar, :asn1), :value), :[],
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :tagged), :tag)),
            s(:send, nil, :assert_universal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :EOC),
              s(:send,
                s(:send,
                  s(:lvar, :asn1), :value), :[],
                s(:int, 2))),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:lvar, :asn1), :to_der)))),
        s(:def, :test_seq_infinite_length,
          s(:args),
          s(:kwbegin,
            s(:lvasgn, :content,
              s(:array,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :Null), :new,
                  s(:nil)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :EndOfContent), :new))),
            s(:lvasgn, :cons,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Sequence), :new,
                s(:lvar, :content))),
            s(:send,
              s(:lvar, :cons), :infinite_length=,
              s(:true)),
            s(:lvasgn, :expected,
              s(:array,
                s(:str, "30"),
                s(:str, "80"),
                s(:str, "05"),
                s(:str, "00"),
                s(:str, "00"),
                s(:str, "00"))),
            s(:lvasgn, :raw,
              s(:send,
                s(:array,
                  s(:send,
                    s(:lvar, :expected), :join,
                    s(:str, ""))), :pack,
                s(:str, "H*"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:lvar, :cons), :to_der)),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :decode,
                  s(:lvar, :raw)), :to_der)))),
        s(:def, :test_set_infinite_length,
          s(:args),
          s(:kwbegin,
            s(:lvasgn, :content,
              s(:array,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :Null), :new,
                  s(:nil)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :EndOfContent), :new))),
            s(:lvasgn, :cons,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Set), :new,
                s(:lvar, :content))),
            s(:send,
              s(:lvar, :cons), :infinite_length=,
              s(:true)),
            s(:lvasgn, :expected,
              s(:array,
                s(:str, "31"),
                s(:str, "80"),
                s(:str, "05"),
                s(:str, "00"),
                s(:str, "00"),
                s(:str, "00"))),
            s(:lvasgn, :raw,
              s(:send,
                s(:array,
                  s(:send,
                    s(:lvar, :expected), :join,
                    s(:str, ""))), :pack,
                s(:str, "H*"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:lvar, :cons), :to_der)),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :decode,
                  s(:lvar, :raw)), :to_der)))),
        s(:def, :test_octet_string_infinite_length,
          s(:args),
          s(:kwbegin,
            s(:lvasgn, :octets,
              s(:array,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :OctetString), :new,
                  s(:str, "aaa")),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :EndOfContent), :new))),
            s(:lvasgn, :cons,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Constructive), :new,
                s(:lvar, :octets),
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :OCTET_STRING),
                s(:nil),
                s(:sym, :UNIVERSAL))),
            s(:send,
              s(:lvar, :cons), :infinite_length=,
              s(:true)),
            s(:lvasgn, :expected,
              s(:array,
                s(:str, "24"),
                s(:str, "80"),
                s(:str, "04"),
                s(:str, "03"),
                s(:str, "61"),
                s(:str, "61"),
                s(:str, "61"),
                s(:str, "00"),
                s(:str, "00"))),
            s(:lvasgn, :raw,
              s(:send,
                s(:array,
                  s(:send,
                    s(:lvar, :expected), :join,
                    s(:str, ""))), :pack,
                s(:str, "H*"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:lvar, :cons), :to_der)),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :decode,
                  s(:lvar, :raw)), :to_der)))),
        s(:def, :test_prim_explicit_tagging,
          s(:args),
          s(:kwbegin,
            s(:lvasgn, :oct_str,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :OctetString), :new,
                s(:str, "a"),
                s(:int, 0),
                s(:sym, :EXPLICIT))),
            s(:lvasgn, :expected,
              s(:array,
                s(:str, "A0"),
                s(:str, "03"),
                s(:str, "04"),
                s(:str, "01"),
                s(:str, "61"))),
            s(:lvasgn, :raw,
              s(:send,
                s(:array,
                  s(:send,
                    s(:lvar, :expected), :join,
                    s(:str, ""))), :pack,
                s(:str, "H*"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:lvar, :oct_str), :to_der)),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :decode,
                  s(:lvar, :raw)), :to_der)))),
        s(:def, :test_prim_explicit_tagging_tag_class,
          s(:args),
          s(:kwbegin,
            s(:lvasgn, :oct_str,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :OctetString), :new,
                s(:str, "a"),
                s(:int, 0),
                s(:sym, :EXPLICIT))),
            s(:lvasgn, :oct_str2,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :OctetString), :new,
                s(:str, "a"),
                s(:int, 0),
                s(:sym, :EXPLICIT),
                s(:sym, :CONTEXT_SPECIFIC))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :oct_str), :to_der),
              s(:send,
                s(:lvar, :oct_str2), :to_der)))),
        s(:def, :test_prim_implicit_tagging,
          s(:args),
          s(:kwbegin,
            s(:lvasgn, :int,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Integer), :new,
                s(:int, 1),
                s(:int, 0),
                s(:sym, :IMPLICIT))),
            s(:lvasgn, :expected,
              s(:array,
                s(:str, "80"),
                s(:str, "01"),
                s(:str, "01"))),
            s(:lvasgn, :raw,
              s(:send,
                s(:array,
                  s(:send,
                    s(:lvar, :expected), :join,
                    s(:str, ""))), :pack,
                s(:str, "H*"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:lvar, :int), :to_der)),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :decode,
                  s(:lvar, :raw)), :to_der)))),
        s(:def, :test_prim_implicit_tagging_tag_class,
          s(:args),
          s(:kwbegin,
            s(:lvasgn, :int,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Integer), :new,
                s(:int, 1),
                s(:int, 0),
                s(:sym, :IMPLICIT))),
            s(:lvasgn, :int2,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Integer), :new,
                s(:int, 1),
                s(:int, 0),
                s(:sym, :IMPLICIT),
                s(:sym, :CONTEXT_SPECIFIC))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :int), :to_der),
              s(:send,
                s(:lvar, :int2), :to_der)))),
        s(:def, :test_cons_explicit_tagging,
          s(:args),
          s(:kwbegin,
            s(:lvasgn, :content,
              s(:array,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :PrintableString), :new,
                  s(:str, "abc")))),
            s(:lvasgn, :seq,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Sequence), :new,
                s(:lvar, :content),
                s(:int, 2),
                s(:sym, :EXPLICIT))),
            s(:lvasgn, :expected,
              s(:array,
                s(:str, "A2"),
                s(:str, "07"),
                s(:str, "30"),
                s(:str, "05"),
                s(:str, "13"),
                s(:str, "03"),
                s(:str, "61"),
                s(:str, "62"),
                s(:str, "63"))),
            s(:lvasgn, :raw,
              s(:send,
                s(:array,
                  s(:send,
                    s(:lvar, :expected), :join,
                    s(:str, ""))), :pack,
                s(:str, "H*"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:lvar, :seq), :to_der)),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :decode,
                  s(:lvar, :raw)), :to_der)))),
        s(:def, :test_cons_explicit_tagging_inf_length,
          s(:args),
          s(:kwbegin,
            s(:lvasgn, :content,
              s(:array,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :PrintableString), :new,
                  s(:str, "abc")),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :EndOfContent), :new))),
            s(:lvasgn, :seq,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Sequence), :new,
                s(:lvar, :content),
                s(:int, 2),
                s(:sym, :EXPLICIT))),
            s(:send,
              s(:lvar, :seq), :infinite_length=,
              s(:true)),
            s(:lvasgn, :expected,
              s(:array,
                s(:str, "A2"),
                s(:str, "80"),
                s(:str, "30"),
                s(:str, "80"),
                s(:str, "13"),
                s(:str, "03"),
                s(:str, "61"),
                s(:str, "62"),
                s(:str, "63"),
                s(:str, "00"),
                s(:str, "00"),
                s(:str, "00"),
                s(:str, "00"))),
            s(:lvasgn, :raw,
              s(:send,
                s(:array,
                  s(:send,
                    s(:lvar, :expected), :join,
                    s(:str, ""))), :pack,
                s(:str, "H*"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:lvar, :seq), :to_der)),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :decode,
                  s(:lvar, :raw)), :to_der)))),
        s(:def, :test_cons_implicit_tagging,
          s(:args),
          s(:kwbegin,
            s(:lvasgn, :content,
              s(:array,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :Null), :new,
                  s(:nil)))),
            s(:lvasgn, :seq,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Sequence), :new,
                s(:lvar, :content),
                s(:int, 1),
                s(:sym, :IMPLICIT))),
            s(:lvasgn, :expected,
              s(:array,
                s(:str, "A1"),
                s(:str, "02"),
                s(:str, "05"),
                s(:str, "00"))),
            s(:lvasgn, :raw,
              s(:send,
                s(:array,
                  s(:send,
                    s(:lvar, :expected), :join,
                    s(:str, ""))), :pack,
                s(:str, "H*"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:lvar, :seq), :to_der)),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :decode,
                  s(:lvar, :raw)), :to_der)))),
        s(:def, :test_cons_implicit_tagging_inf_length,
          s(:args),
          s(:kwbegin,
            s(:lvasgn, :content,
              s(:array,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :Null), :new,
                  s(:nil)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :EndOfContent), :new))),
            s(:lvasgn, :seq,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Sequence), :new,
                s(:lvar, :content),
                s(:int, 1),
                s(:sym, :IMPLICIT))),
            s(:send,
              s(:lvar, :seq), :infinite_length=,
              s(:true)),
            s(:lvasgn, :expected,
              s(:array,
                s(:str, "A1"),
                s(:str, "80"),
                s(:str, "05"),
                s(:str, "00"),
                s(:str, "00"),
                s(:str, "00"))),
            s(:lvasgn, :raw,
              s(:send,
                s(:array,
                  s(:send,
                    s(:lvar, :expected), :join,
                    s(:str, ""))), :pack,
                s(:str, "H*"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:lvar, :seq), :to_der)),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :decode,
                  s(:lvar, :raw)), :to_der)))),
        s(:def, :test_octet_string_infinite_length_explicit_tagging,
          s(:args),
          s(:kwbegin,
            s(:lvasgn, :octets,
              s(:array,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :OctetString), :new,
                  s(:str, "aaa")),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :EndOfContent), :new))),
            s(:lvasgn, :cons,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Constructive), :new,
                s(:lvar, :octets),
                s(:int, 1),
                s(:sym, :EXPLICIT))),
            s(:send,
              s(:lvar, :cons), :infinite_length=,
              s(:true)),
            s(:lvasgn, :expected,
              s(:array,
                s(:str, "A1"),
                s(:str, "80"),
                s(:str, "24"),
                s(:str, "80"),
                s(:str, "04"),
                s(:str, "03"),
                s(:str, "61"),
                s(:str, "61"),
                s(:str, "61"),
                s(:str, "00"),
                s(:str, "00"),
                s(:str, "00"),
                s(:str, "00"))),
            s(:lvasgn, :raw,
              s(:send,
                s(:array,
                  s(:send,
                    s(:lvar, :expected), :join,
                    s(:str, ""))), :pack,
                s(:str, "H*"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:lvar, :cons), :to_der)),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :decode,
                  s(:lvar, :raw)), :to_der)))),
        s(:def, :test_octet_string_infinite_length_implicit_tagging,
          s(:args),
          s(:kwbegin,
            s(:lvasgn, :octets,
              s(:array,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :OctetString), :new,
                  s(:str, "aaa")),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :EndOfContent), :new))),
            s(:lvasgn, :cons,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Constructive), :new,
                s(:lvar, :octets),
                s(:int, 0),
                s(:sym, :IMPLICIT))),
            s(:send,
              s(:lvar, :cons), :infinite_length=,
              s(:true)),
            s(:lvasgn, :expected,
              s(:array,
                s(:str, "A0"),
                s(:str, "80"),
                s(:str, "04"),
                s(:str, "03"),
                s(:str, "61"),
                s(:str, "61"),
                s(:str, "61"),
                s(:str, "00"),
                s(:str, "00"))),
            s(:lvasgn, :raw,
              s(:send,
                s(:array,
                  s(:send,
                    s(:lvar, :expected), :join,
                    s(:str, ""))), :pack,
                s(:str, "H*"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:lvar, :cons), :to_der)),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :decode,
                  s(:lvar, :raw)), :to_der)))),
        s(:def, :test_recursive_octet_string_infinite_length,
          s(:args),
          s(:kwbegin,
            s(:lvasgn, :octets_sub1,
              s(:array,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :OctetString), :new,
                  s(:str, "\u0001")),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :EndOfContent), :new))),
            s(:lvasgn, :octets_sub2,
              s(:array,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :OctetString), :new,
                  s(:str, "\u0002")),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :EndOfContent), :new))),
            s(:lvasgn, :container1,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Constructive), :new,
                s(:lvar, :octets_sub1),
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :OCTET_STRING),
                s(:nil),
                s(:sym, :UNIVERSAL))),
            s(:send,
              s(:lvar, :container1), :infinite_length=,
              s(:true)),
            s(:lvasgn, :container2,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Constructive), :new,
                s(:lvar, :octets_sub2),
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :OCTET_STRING),
                s(:nil),
                s(:sym, :UNIVERSAL))),
            s(:send,
              s(:lvar, :container2), :infinite_length=,
              s(:true)),
            s(:lvasgn, :octets3,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :OctetString), :new,
                s(:str, "\u0003"))),
            s(:lvasgn, :octets,
              s(:array,
                s(:lvar, :container1),
                s(:lvar, :container2),
                s(:lvar, :octets3),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :EndOfContent), :new))),
            s(:lvasgn, :cons,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Constructive), :new,
                s(:lvar, :octets),
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :OCTET_STRING),
                s(:nil),
                s(:sym, :UNIVERSAL))),
            s(:send,
              s(:lvar, :cons), :infinite_length=,
              s(:true)),
            s(:lvasgn, :expected,
              s(:array,
                s(:str, "24"),
                s(:str, "80"),
                s(:str, "24"),
                s(:str, "80"),
                s(:str, "04"),
                s(:str, "01"),
                s(:str, "01"),
                s(:str, "00"),
                s(:str, "00"),
                s(:str, "24"),
                s(:str, "80"),
                s(:str, "04"),
                s(:str, "01"),
                s(:str, "02"),
                s(:str, "00"),
                s(:str, "00"),
                s(:str, "04"),
                s(:str, "01"),
                s(:str, "03"),
                s(:str, "00"),
                s(:str, "00"))),
            s(:lvasgn, :raw,
              s(:send,
                s(:array,
                  s(:send,
                    s(:lvar, :expected), :join,
                    s(:str, ""))), :pack,
                s(:str, "H*"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:lvar, :cons), :to_der)),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :decode,
                  s(:lvar, :raw)), :to_der)))),
        s(:def, :test_bit_string_infinite_length,
          s(:args),
          s(:kwbegin,
            s(:lvasgn, :content,
              s(:array,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :BitString), :new,
                  s(:str, "\u0001")),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :EndOfContent), :new))),
            s(:lvasgn, :cons,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Constructive), :new,
                s(:lvar, :content),
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :BIT_STRING),
                s(:nil),
                s(:sym, :UNIVERSAL))),
            s(:send,
              s(:lvar, :cons), :infinite_length=,
              s(:true)),
            s(:lvasgn, :expected,
              s(:array,
                s(:str, "23"),
                s(:str, "80"),
                s(:str, "03"),
                s(:str, "02"),
                s(:str, "00"),
                s(:str, "01"),
                s(:str, "00"),
                s(:str, "00"))),
            s(:lvasgn, :raw,
              s(:send,
                s(:array,
                  s(:send,
                    s(:lvar, :expected), :join,
                    s(:str, ""))), :pack,
                s(:str, "H*"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:lvar, :cons), :to_der)),
            s(:send, nil, :assert_equal,
              s(:lvar, :raw),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :decode,
                  s(:lvar, :raw)), :to_der)))),
        s(:def, :test_primitive_inf_length,
          s(:args),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :ASN1Error)),
            s(:args),
            s(:begin,
              s(:lvasgn, :spec,
                s(:array,
                  s(:str, "02"),
                  s(:str, "80"),
                  s(:str, "02"),
                  s(:str, "01"),
                  s(:str, "01"),
                  s(:str, "00"),
                  s(:str, "00"))),
              s(:lvasgn, :raw,
                s(:send,
                  s(:array,
                    s(:send,
                      s(:lvar, :spec), :join,
                      s(:str, ""))), :pack,
                  s(:str, "H*"))),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode,
                s(:lvar, :raw)),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode_all,
                s(:lvar, :raw))))),
        s(:def, :test_recursive_octet_string_parse,
          s(:args),
          s(:begin,
            s(:lvasgn, :test,
              s(:array,
                s(:str, "24"),
                s(:str, "80"),
                s(:str, "24"),
                s(:str, "80"),
                s(:str, "04"),
                s(:str, "01"),
                s(:str, "01"),
                s(:str, "00"),
                s(:str, "00"),
                s(:str, "24"),
                s(:str, "80"),
                s(:str, "04"),
                s(:str, "01"),
                s(:str, "02"),
                s(:str, "00"),
                s(:str, "00"),
                s(:str, "04"),
                s(:str, "01"),
                s(:str, "03"),
                s(:str, "00"),
                s(:str, "00"))),
            s(:lvasgn, :raw,
              s(:send,
                s(:array,
                  s(:send,
                    s(:lvar, :test), :join,
                    s(:str, ""))), :pack,
                s(:str, "H*"))),
            s(:lvasgn, :asn1,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode,
                s(:lvar, :raw))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Constructive),
              s(:send,
                s(:lvar, :asn1), :class)),
            s(:send, nil, :assert_universal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :OCTET_STRING),
              s(:lvar, :asn1)),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:lvar, :asn1), :infinite_length)),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:send,
                s(:send,
                  s(:lvar, :asn1), :value), :size)),
            s(:lvasgn, :nested1,
              s(:send,
                s(:send,
                  s(:lvar, :asn1), :value), :[],
                s(:int, 0))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Constructive),
              s(:send,
                s(:lvar, :nested1), :class)),
            s(:send, nil, :assert_universal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :OCTET_STRING),
              s(:lvar, :nested1)),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:lvar, :nested1), :infinite_length)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:lvar, :nested1), :value), :size)),
            s(:lvasgn, :oct1,
              s(:send,
                s(:send,
                  s(:lvar, :nested1), :value), :[],
                s(:int, 0))),
            s(:send, nil, :assert_universal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :OCTET_STRING),
              s(:lvar, :oct1)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :oct1), :infinite_length)),
            s(:send, nil, :assert_universal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :EOC),
              s(:send,
                s(:send,
                  s(:lvar, :nested1), :value), :[],
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :nested1), :value), :[],
                  s(:int, 1)), :infinite_length)),
            s(:lvasgn, :nested2,
              s(:send,
                s(:send,
                  s(:lvar, :asn1), :value), :[],
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Constructive),
              s(:send,
                s(:lvar, :nested2), :class)),
            s(:send, nil, :assert_universal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :OCTET_STRING),
              s(:lvar, :nested2)),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:lvar, :nested2), :infinite_length)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:lvar, :nested2), :value), :size)),
            s(:lvasgn, :oct2,
              s(:send,
                s(:send,
                  s(:lvar, :nested2), :value), :[],
                s(:int, 0))),
            s(:send, nil, :assert_universal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :OCTET_STRING),
              s(:lvar, :oct2)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :oct2), :infinite_length)),
            s(:send, nil, :assert_universal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :EOC),
              s(:send,
                s(:send,
                  s(:lvar, :nested2), :value), :[],
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :nested2), :value), :[],
                  s(:int, 1)), :infinite_length)),
            s(:lvasgn, :oct3,
              s(:send,
                s(:send,
                  s(:lvar, :asn1), :value), :[],
                s(:int, 2))),
            s(:send, nil, :assert_universal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :OCTET_STRING),
              s(:lvar, :oct3)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :oct3), :infinite_length)),
            s(:send, nil, :assert_universal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :EOC),
              s(:send,
                s(:send,
                  s(:lvar, :asn1), :value), :[],
                s(:int, 3))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :asn1), :value), :[],
                  s(:int, 3)), :infinite_length)))),
        s(:send, nil, :private),
        s(:def, :assert_universal,
          s(:args,
            s(:arg, :tag),
            s(:arg, :asn1)),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:lvar, :tag),
              s(:send,
                s(:lvar, :asn1), :tag)),
            s(:if,
              s(:send,
                s(:lvar, :asn1), :respond_to?,
                s(:sym, :tagging)),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:lvar, :asn1), :tagging)), nil),
            s(:send, nil, :assert_equal,
              s(:sym, :UNIVERSAL),
              s(:send,
                s(:lvar, :asn1), :tag_class)))))), nil))
