s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "utils")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :TestUtils)),
    s(:class,
      s(:const,
        s(:const, nil, :OpenSSL), :TestX509Extension),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:ivasgn, :@basic_constraints_value,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence,
                s(:array,
                  s(:send,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :Boolean,
                    s(:true)),
                  s(:send,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :Integer,
                    s(:int, 2))))),
            s(:ivasgn, :@basic_constraints,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Sequence,
                s(:array,
                  s(:send,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :ObjectId,
                    s(:str, "basicConstraints")),
                  s(:send,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :Boolean,
                    s(:true)),
                  s(:send,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :OctetString,
                    s(:send,
                      s(:ivar, :@basic_constraints_value), :to_der))))))),
        s(:def, :teardown,
          s(:args), nil),
        s(:def, :test_new,
          s(:args),
          s(:begin,
            s(:lvasgn, :ext,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Extension), :new,
                s(:send,
                  s(:ivar, :@basic_constraints), :to_der))),
            s(:send, nil, :assert_equal,
              s(:str, "basicConstraints"),
              s(:send,
                s(:lvar, :ext), :oid)),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:lvar, :ext), :critical?)),
            s(:send, nil, :assert_equal,
              s(:str, "CA:TRUE, pathlen:2"),
              s(:send,
                s(:lvar, :ext), :value)),
            s(:lvasgn, :ext,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Extension), :new,
                s(:str, "2.5.29.19"),
                s(:send,
                  s(:ivar, :@basic_constraints_value), :to_der),
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@basic_constraints), :to_der),
              s(:send,
                s(:lvar, :ext), :to_der)))),
        s(:def, :test_create_by_factory,
          s(:args),
          s(:begin,
            s(:lvasgn, :ef,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :ExtensionFactory), :new)),
            s(:lvasgn, :bc,
              s(:send,
                s(:lvar, :ef), :create_extension,
                s(:str, "basicConstraints"),
                s(:str, "critical, CA:TRUE, pathlen:2"))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@basic_constraints), :to_der),
              s(:send,
                s(:lvar, :bc), :to_der)),
            s(:lvasgn, :bc,
              s(:send,
                s(:lvar, :ef), :create_extension,
                s(:str, "basicConstraints"),
                s(:str, "CA:TRUE, pathlen:2"),
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@basic_constraints), :to_der),
              s(:send,
                s(:lvar, :bc), :to_der)),
            s(:send,
              s(:lvar, :ef), :config=,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :Config), :parse,
                s(:dstr,
                  s(:str, "    [crlDistPts]\n"),
                  s(:str, "    URI.1 = http://www.example.com/crl\n"),
                  s(:str, "    URI.2 = ldap://ldap.example.com/cn=ca?certificateRevocationList;binary\n"),
                  s(:str, "\n"),
                  s(:str, "    [certPolicies]\n"),
                  s(:str, "    policyIdentifier = 2.23.140.1.2.1\n"),
                  s(:str, "    CPS.1 = http://cps.example.com\n")))),
            s(:lvasgn, :cdp,
              s(:send,
                s(:lvar, :ef), :create_extension,
                s(:str, "crlDistributionPoints"),
                s(:str, "@crlDistPts"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :cdp), :critical?)),
            s(:send, nil, :assert_equal,
              s(:str, "crlDistributionPoints"),
              s(:send,
                s(:lvar, :cdp), :oid)),
            s(:send, nil, :assert_match,
              s(:str, "URI:http://www.example.com/crl"),
              s(:send,
                s(:lvar, :cdp), :value)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "URI:ldap://ldap\\.example\\.com/cn=ca\\?certificateRevocationList;binary"),
                s(:regopt)),
              s(:send,
                s(:lvar, :cdp), :value)),
            s(:lvasgn, :cdp,
              s(:send,
                s(:lvar, :ef), :create_extension,
                s(:str, "crlDistributionPoints"),
                s(:str, "critical, @crlDistPts"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:lvar, :cdp), :critical?)),
            s(:send, nil, :assert_equal,
              s(:str, "crlDistributionPoints"),
              s(:send,
                s(:lvar, :cdp), :oid)),
            s(:send, nil, :assert_match,
              s(:str, "URI:http://www.example.com/crl"),
              s(:send,
                s(:lvar, :cdp), :value)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "URI:ldap://ldap.example.com/cn=ca\\?certificateRevocationList;binary"),
                s(:regopt)),
              s(:send,
                s(:lvar, :cdp), :value)),
            s(:lvasgn, :cp,
              s(:send,
                s(:lvar, :ef), :create_extension,
                s(:str, "certificatePolicies"),
                s(:str, "@certPolicies"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :cp), :critical?)),
            s(:send, nil, :assert_equal,
              s(:str, "certificatePolicies"),
              s(:send,
                s(:lvar, :cp), :oid)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "2.23.140.1.2.1"),
                s(:regopt)),
              s(:send,
                s(:lvar, :cp), :value)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "http://cps.example.com"),
                s(:regopt)),
              s(:send,
                s(:lvar, :cp), :value)))))), nil))
