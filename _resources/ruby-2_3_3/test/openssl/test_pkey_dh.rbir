s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "utils")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :TestUtils)),
    s(:class,
      s(:const,
        s(:const, nil, :OpenSSL), :TestPKeyDH),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:casgn, nil, :NEW_KEYLEN,
          s(:int, 256)),
        s(:def, :test_DEFAULT_512,
          s(:args),
          s(:begin,
            s(:lvasgn, :params,
              s(:dstr,
                s(:str, "-----BEGIN DH PARAMETERS-----\n"),
                s(:str, "MEYCQQD0zXHljRg/mJ9PYLACLv58Cd8VxBxxY7oEuCeURMiTqEhMym16rhhKgZG2\n"),
                s(:str, "zk2O9uUIBIxSj+NKMURHGaFKyIvLAgEC\n"),
                s(:str, "-----END DH PARAMETERS-----\n"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :params),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :PKey), :DH), :DEFAULT_512), :to_s)))),
        s(:def, :test_DEFAULT_1024,
          s(:args),
          s(:begin,
            s(:lvasgn, :params,
              s(:dstr,
                s(:str, "-----BEGIN DH PARAMETERS-----\n"),
                s(:str, "MIGHAoGBAJ0lOVy0VIr/JebWn0zDwY2h+rqITFOpdNr6ugsgvkDXuucdcChhYExJ\n"),
                s(:str, "AV/ZD2AWPbrTqV76mGRgJg4EddgT1zG0jq3rnFdMj2XzkBYx3BVvfR0Arnby0RHR\n"),
                s(:str, "T4h7KZ/2zmjvV+eF8kBUHBJAojUlzxKj4QeO2x20FP9X5xmNUXeDAgEC\n"),
                s(:str, "-----END DH PARAMETERS-----\n"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :params),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :PKey), :DH), :DEFAULT_1024), :to_s)))),
        s(:def, :test_new,
          s(:args),
          s(:begin,
            s(:lvasgn, :dh,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :DH), :new,
                s(:const, nil, :NEW_KEYLEN))),
            s(:send, nil, :assert_key,
              s(:lvar, :dh)))),
        s(:def, :test_new_break,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_nil,
              s(:block,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :PKey), :DH), :new,
                  s(:const, nil, :NEW_KEYLEN)),
                s(:args),
                s(:break))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :RuntimeError)),
              s(:args),
              s(:block,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :PKey), :DH), :new,
                  s(:const, nil, :NEW_KEYLEN)),
                s(:args),
                s(:send, nil, :raise))))),
        s(:def, :test_to_der,
          s(:args),
          s(:begin,
            s(:lvasgn, :dh,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DH1024)),
            s(:lvasgn, :der,
              s(:send,
                s(:lvar, :dh), :to_der)),
            s(:lvasgn, :dh2,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :DH), :new,
                s(:lvar, :der))),
            s(:send, nil, :assert_equal_params,
              s(:lvar, :dh),
              s(:lvar, :dh2)),
            s(:send, nil, :assert_no_key,
              s(:lvar, :dh2)))),
        s(:def, :test_to_pem,
          s(:args),
          s(:begin,
            s(:lvasgn, :dh,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DH1024)),
            s(:lvasgn, :pem,
              s(:send,
                s(:lvar, :dh), :to_pem)),
            s(:lvasgn, :dh2,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :DH), :new,
                s(:lvar, :pem))),
            s(:send, nil, :assert_equal_params,
              s(:lvar, :dh),
              s(:lvar, :dh2)),
            s(:send, nil, :assert_no_key,
              s(:lvar, :dh2)))),
        s(:def, :test_public_key,
          s(:args),
          s(:begin,
            s(:lvasgn, :dh,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DH1024)),
            s(:lvasgn, :public_key,
              s(:send,
                s(:lvar, :dh), :public_key)),
            s(:send, nil, :assert_no_key,
              s(:lvar, :public_key)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :dh), :to_der),
              s(:send,
                s(:lvar, :public_key), :to_der)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :dh), :to_pem),
              s(:send,
                s(:lvar, :public_key), :to_pem)))),
        s(:def, :test_generate_key,
          s(:args),
          s(:begin,
            s(:lvasgn, :dh,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DH512_PUB), :public_key)),
            s(:send, nil, :assert_no_key,
              s(:lvar, :dh)),
            s(:send,
              s(:lvar, :dh), :generate_key!),
            s(:send, nil, :assert_key,
              s(:lvar, :dh)))),
        s(:def, :test_key_exchange,
          s(:args),
          s(:begin,
            s(:lvasgn, :dh,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DH512_PUB)),
            s(:lvasgn, :dh2,
              s(:send,
                s(:lvar, :dh), :public_key)),
            s(:send,
              s(:lvar, :dh), :generate_key!),
            s(:send,
              s(:lvar, :dh2), :generate_key!),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :dh), :compute_key,
                s(:send,
                  s(:lvar, :dh2), :pub_key)),
              s(:send,
                s(:lvar, :dh2), :compute_key,
                s(:send,
                  s(:lvar, :dh), :pub_key))))),
        s(:send, nil, :private),
        s(:def, :assert_equal_params,
          s(:args,
            s(:arg, :dh1),
            s(:arg, :dh2)),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :dh1), :g),
              s(:send,
                s(:lvar, :dh2), :g)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :dh1), :p),
              s(:send,
                s(:lvar, :dh2), :p)))),
        s(:def, :assert_no_key,
          s(:args,
            s(:arg, :dh)),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :dh), :public?)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :dh), :private?)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :dh), :pub_key)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :dh), :priv_key)))),
        s(:def, :assert_key,
          s(:args,
            s(:arg, :dh)),
          s(:begin,
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :dh), :public?)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :dh), :private?)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :dh), :pub_key)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :dh), :priv_key)))))), nil))
