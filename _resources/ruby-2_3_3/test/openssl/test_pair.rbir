s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "utils")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :TestUtils)),
    s(:begin,
      s(:send, nil, :require,
        s(:str, "socket")),
      s(:send, nil, :require_relative,
        s(:str, "../ruby/ut_eof")),
      s(:module,
        s(:const,
          s(:const, nil, :OpenSSL), :SSLPairM),
        s(:begin,
          s(:def, :server,
            s(:args),
            s(:begin,
              s(:lvasgn, :host,
                s(:str, "127.0.0.1")),
              s(:lvasgn, :port,
                s(:int, 0)),
              s(:lvasgn, :ctx,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
              s(:send,
                s(:lvar, :ctx), :ciphers=,
                s(:str, "ADH")),
              s(:send,
                s(:lvar, :ctx), :tmp_dh_callback=,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args),
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DH1024))),
              s(:lvasgn, :tcps,
                s(:send, nil, :create_tcp_server,
                  s(:lvar, :host),
                  s(:lvar, :port))),
              s(:lvasgn, :ssls,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLServer), :new,
                  s(:lvar, :tcps),
                  s(:lvar, :ctx))),
              s(:return,
                s(:lvar, :ssls)))),
          s(:def, :client,
            s(:args,
              s(:arg, :port)),
            s(:begin,
              s(:lvasgn, :host,
                s(:str, "127.0.0.1")),
              s(:lvasgn, :ctx,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
              s(:send,
                s(:lvar, :ctx), :ciphers=,
                s(:str, "ADH")),
              s(:lvasgn, :s,
                s(:send, nil, :create_tcp_client,
                  s(:lvar, :host),
                  s(:lvar, :port))),
              s(:lvasgn, :ssl,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                  s(:lvar, :s),
                  s(:lvar, :ctx))),
              s(:send,
                s(:lvar, :ssl), :connect),
              s(:send,
                s(:lvar, :ssl), :sync_close=,
                s(:true)),
              s(:lvar, :ssl))),
          s(:def, :ssl_pair,
            s(:args),
            s(:ensure,
              s(:begin,
                s(:lvasgn, :ssls,
                  s(:send, nil, :server)),
                s(:lvasgn, :th,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :ns,
                        s(:send,
                          s(:lvar, :ssls), :accept)),
                      s(:send,
                        s(:lvar, :ssls), :close),
                      s(:lvar, :ns)))),
                s(:lvasgn, :port,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :ssls), :to_io), :local_address), :ip_port)),
                s(:lvasgn, :c,
                  s(:send, nil, :client,
                    s(:lvar, :port))),
                s(:lvasgn, :s,
                  s(:send,
                    s(:lvar, :th), :value)),
                s(:if,
                  s(:send, nil, :block_given?),
                  s(:kwbegin,
                    s(:ensure,
                      s(:yield,
                        s(:lvar, :c),
                        s(:lvar, :s)),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:lvar, :c), :closed?), nil,
                          s(:send,
                            s(:lvar, :c), :close)),
                        s(:if,
                          s(:send,
                            s(:lvar, :s), :closed?), nil,
                          s(:send,
                            s(:lvar, :s), :close))))),
                  s(:return,
                    s(:lvar, :c),
                    s(:lvar, :s)))),
              s(:if,
                s(:csend,
                  s(:lvar, :th), :alive?),
                s(:begin,
                  s(:send,
                    s(:lvar, :th), :kill),
                  s(:send,
                    s(:lvar, :th), :join)), nil))))),
      s(:module,
        s(:const,
          s(:const, nil, :OpenSSL), :SSLPair),
        s(:begin,
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :OpenSSL), :SSLPairM)),
          s(:def, :create_tcp_server,
            s(:args,
              s(:arg, :host),
              s(:arg, :port)),
            s(:send,
              s(:const, nil, :TCPServer), :new,
              s(:lvar, :host),
              s(:lvar, :port))),
          s(:def, :create_tcp_client,
            s(:args,
              s(:arg, :host),
              s(:arg, :port)),
            s(:send,
              s(:const, nil, :TCPSocket), :new,
              s(:lvar, :host),
              s(:lvar, :port))))),
      s(:module,
        s(:const,
          s(:const, nil, :OpenSSL), :SSLPairLowlevelSocket),
        s(:begin,
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :OpenSSL), :SSLPairM)),
          s(:def, :create_tcp_server,
            s(:args,
              s(:arg, :host),
              s(:arg, :port)),
            s(:send,
              s(:send,
                s(:const, nil, :Addrinfo), :tcp,
                s(:lvar, :host),
                s(:lvar, :port)), :listen)),
          s(:def, :create_tcp_client,
            s(:args,
              s(:arg, :host),
              s(:arg, :port)),
            s(:send,
              s(:send,
                s(:const, nil, :Addrinfo), :tcp,
                s(:lvar, :host),
                s(:lvar, :port)), :connect)))),
      s(:module,
        s(:const,
          s(:const, nil, :OpenSSL), :TestEOF1M),
        s(:def, :open_file,
          s(:args,
            s(:arg, :content)),
          s(:ensure,
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :s1),
                  s(:lvasgn, :s2)),
                s(:send, nil, :ssl_pair)),
              s(:lvasgn, :th,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:lvar, :s2), :<<,
                      s(:lvar, :content)),
                    s(:send,
                      s(:lvar, :s2), :close)))),
              s(:yield,
                s(:lvar, :s1))),
            s(:begin,
              s(:if,
                s(:lvar, :th),
                s(:send,
                  s(:lvar, :th), :join), nil),
              s(:send,
                s(:lvar, :s1), :close))))),
      s(:module,
        s(:const,
          s(:const, nil, :OpenSSL), :TestEOF2M),
        s(:def, :open_file,
          s(:args,
            s(:arg, :content)),
          s(:ensure,
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :s1),
                  s(:lvasgn, :s2)),
                s(:send, nil, :ssl_pair)),
              s(:lvasgn, :th,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:lvar, :s1), :<<,
                      s(:lvar, :content)),
                    s(:send,
                      s(:lvar, :s1), :close)))),
              s(:yield,
                s(:lvar, :s2))),
            s(:begin,
              s(:if,
                s(:lvar, :th),
                s(:send,
                  s(:lvar, :th), :join), nil),
              s(:send,
                s(:lvar, :s2), :close))))),
      s(:module,
        s(:const,
          s(:const, nil, :OpenSSL), :TestPairM),
        s(:begin,
          s(:def, :test_getc,
            s(:args),
            s(:block,
              s(:send, nil, :ssl_pair),
              s(:args,
                s(:arg, :s1),
                s(:arg, :s2)),
              s(:begin,
                s(:send,
                  s(:lvar, :s1), :<<,
                  s(:str, "a")),
                s(:send, nil, :assert_equal,
                  s(:str, "a"),
                  s(:send,
                    s(:lvar, :s2), :getc))))),
          s(:def, :test_gets_eof_limit,
            s(:args),
            s(:block,
              s(:send, nil, :ssl_pair),
              s(:args,
                s(:arg, :s1),
                s(:arg, :s2)),
              s(:begin,
                s(:send,
                  s(:lvar, :s1), :write,
                  s(:str, "hello")),
                s(:send,
                  s(:lvar, :s1), :close),
                s(:send, nil, :assert_match,
                  s(:str, "hello"),
                  s(:send,
                    s(:lvar, :s2), :gets,
                    s(:str, "\n"),
                    s(:int, 6)),
                  s(:str, "[ruby-core:70149] [Bug #11140]"))))),
          s(:def, :test_readpartial,
            s(:args),
            s(:block,
              s(:send, nil, :ssl_pair),
              s(:args,
                s(:arg, :s1),
                s(:arg, :s2)),
              s(:begin,
                s(:send,
                  s(:lvar, :s2), :write,
                  s(:str, "a\nbcd")),
                s(:send, nil, :assert_equal,
                  s(:str, "a\n"),
                  s(:send,
                    s(:lvar, :s1), :gets)),
                s(:lvasgn, :result,
                  s(:str, "")),
                s(:until,
                  s(:send,
                    s(:send,
                      s(:lvar, :result), :length), :==,
                    s(:int, 3)),
                  s(:send,
                    s(:lvar, :result), :<<,
                    s(:send,
                      s(:lvar, :s1), :readpartial,
                      s(:int, 10)))),
                s(:send, nil, :assert_equal,
                  s(:str, "bcd"),
                  s(:lvar, :result)),
                s(:send,
                  s(:lvar, :s2), :write,
                  s(:str, "efg")),
                s(:lvasgn, :result,
                  s(:str, "")),
                s(:until,
                  s(:send,
                    s(:send,
                      s(:lvar, :result), :length), :==,
                    s(:int, 3)),
                  s(:send,
                    s(:lvar, :result), :<<,
                    s(:send,
                      s(:lvar, :s1), :readpartial,
                      s(:int, 10)))),
                s(:send, nil, :assert_equal,
                  s(:str, "efg"),
                  s(:lvar, :result)),
                s(:send,
                  s(:lvar, :s2), :close),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :EOFError)),
                  s(:args),
                  s(:send,
                    s(:lvar, :s1), :readpartial,
                    s(:int, 10))),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :EOFError)),
                  s(:args),
                  s(:send,
                    s(:lvar, :s1), :readpartial,
                    s(:int, 10))),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:send,
                    s(:lvar, :s1), :readpartial,
                    s(:int, 0)))))),
          s(:def, :test_readall,
            s(:args),
            s(:block,
              s(:send, nil, :ssl_pair),
              s(:args,
                s(:arg, :s1),
                s(:arg, :s2)),
              s(:begin,
                s(:send,
                  s(:lvar, :s2), :close),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:send,
                    s(:lvar, :s1), :read))))),
          s(:def, :test_readline,
            s(:args),
            s(:block,
              s(:send, nil, :ssl_pair),
              s(:args,
                s(:arg, :s1),
                s(:arg, :s2)),
              s(:begin,
                s(:send,
                  s(:lvar, :s2), :close),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :EOFError)),
                  s(:args),
                  s(:send,
                    s(:lvar, :s1), :readline))))),
          s(:def, :test_puts_meta,
            s(:args),
            s(:block,
              s(:send, nil, :ssl_pair),
              s(:args,
                s(:arg, :s1),
                s(:arg, :s2)),
              s(:begin,
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:lvasgn, :old,
                        s(:gvar, :$/)),
                      s(:gvasgn, :$/,
                        s(:str, "*")),
                      s(:send,
                        s(:lvar, :s1), :puts,
                        s(:str, "a"))),
                    s(:gvasgn, :$/,
                      s(:lvar, :old)))),
                s(:send,
                  s(:lvar, :s1), :close),
                s(:send, nil, :assert_equal,
                  s(:str, "a\n"),
                  s(:send,
                    s(:lvar, :s2), :read))))),
          s(:def, :test_puts_empty,
            s(:args),
            s(:block,
              s(:send, nil, :ssl_pair),
              s(:args,
                s(:arg, :s1),
                s(:arg, :s2)),
              s(:begin,
                s(:send,
                  s(:lvar, :s1), :puts),
                s(:send,
                  s(:lvar, :s1), :close),
                s(:send, nil, :assert_equal,
                  s(:str, "\n"),
                  s(:send,
                    s(:lvar, :s2), :read))))),
          s(:def, :test_read_nonblock,
            s(:args),
            s(:block,
              s(:send, nil, :ssl_pair),
              s(:args,
                s(:arg, :s1),
                s(:arg, :s2)),
              s(:begin,
                s(:lvasgn, :err,
                  s(:nil)),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLErrorWaitReadable)),
                  s(:args),
                  s(:kwbegin,
                    s(:ensure,
                      s(:send,
                        s(:lvar, :s2), :read_nonblock,
                        s(:int, 10)),
                      s(:lvasgn, :err,
                        s(:gvar, :$!))))),
                s(:send, nil, :assert_kind_of,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable),
                  s(:lvar, :err)),
                s(:send,
                  s(:lvar, :s1), :write,
                  s(:str, "abc\ndef\n")),
                s(:send,
                  s(:const, nil, :IO), :select,
                  s(:array,
                    s(:lvar, :s2))),
                s(:send, nil, :assert_equal,
                  s(:str, "ab"),
                  s(:send,
                    s(:lvar, :s2), :read_nonblock,
                    s(:int, 2))),
                s(:send, nil, :assert_equal,
                  s(:str, "c\n"),
                  s(:send,
                    s(:lvar, :s2), :gets)),
                s(:lvasgn, :ret,
                  s(:nil)),
                s(:block,
                  s(:send, nil, :assert_nothing_raised,
                    s(:str, "[ruby-core:20298]")),
                  s(:args),
                  s(:lvasgn, :ret,
                    s(:send,
                      s(:lvar, :s2), :read_nonblock,
                      s(:int, 10)))),
                s(:send, nil, :assert_equal,
                  s(:str, "def\n"),
                  s(:lvar, :ret)),
                s(:send,
                  s(:lvar, :s1), :close),
                s(:send, nil, :sleep,
                  s(:float, 0.1)),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :EOFError)),
                  s(:args),
                  s(:send,
                    s(:lvar, :s2), :read_nonblock,
                    s(:int, 10)))))),
          s(:def, :test_read_nonblock_no_exception,
            s(:args),
            s(:block,
              s(:send, nil, :ssl_pair),
              s(:args,
                s(:arg, :s1),
                s(:arg, :s2)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:sym, :wait_readable),
                  s(:send,
                    s(:lvar, :s2), :read_nonblock,
                    s(:int, 10),
                    s(:hash,
                      s(:pair,
                        s(:sym, :exception),
                        s(:false))))),
                s(:send,
                  s(:lvar, :s1), :write,
                  s(:str, "abc\ndef\n")),
                s(:send,
                  s(:const, nil, :IO), :select,
                  s(:array,
                    s(:lvar, :s2))),
                s(:send, nil, :assert_equal,
                  s(:str, "ab"),
                  s(:send,
                    s(:lvar, :s2), :read_nonblock,
                    s(:int, 2),
                    s(:hash,
                      s(:pair,
                        s(:sym, :exception),
                        s(:false))))),
                s(:send, nil, :assert_equal,
                  s(:str, "c\n"),
                  s(:send,
                    s(:lvar, :s2), :gets)),
                s(:lvasgn, :ret,
                  s(:nil)),
                s(:block,
                  s(:send, nil, :assert_nothing_raised,
                    s(:str, "[ruby-core:20298]")),
                  s(:args),
                  s(:lvasgn, :ret,
                    s(:send,
                      s(:lvar, :s2), :read_nonblock,
                      s(:int, 10),
                      s(:hash,
                        s(:pair,
                          s(:sym, :exception),
                          s(:false)))))),
                s(:send, nil, :assert_equal,
                  s(:str, "def\n"),
                  s(:lvar, :ret)),
                s(:send,
                  s(:lvar, :s1), :close),
                s(:send, nil, :sleep,
                  s(:float, 0.1)),
                s(:send, nil, :assert_equal,
                  s(:nil),
                  s(:send,
                    s(:lvar, :s2), :read_nonblock,
                    s(:int, 10),
                    s(:hash,
                      s(:pair,
                        s(:sym, :exception),
                        s(:false)))))))),
          s(:def, :write_nonblock,
            s(:args,
              s(:arg, :socket),
              s(:arg, :meth),
              s(:arg, :str)),
            s(:begin,
              s(:lvasgn, :ret,
                s(:send,
                  s(:lvar, :socket), :send,
                  s(:lvar, :meth),
                  s(:lvar, :str))),
              s(:if,
                s(:send,
                  s(:lvar, :ret), :is_a?,
                  s(:const, nil, :Symbol)),
                s(:int, 0),
                s(:lvar, :ret)))),
          s(:def, :write_nonblock_no_ex,
            s(:args,
              s(:arg, :socket),
              s(:arg, :str)),
            s(:begin,
              s(:lvasgn, :ret,
                s(:send,
                  s(:lvar, :socket), :write_nonblock,
                  s(:lvar, :str),
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:false))))),
              s(:if,
                s(:send,
                  s(:lvar, :ret), :is_a?,
                  s(:const, nil, :Symbol)),
                s(:int, 0),
                s(:lvar, :ret)))),
          s(:def, :test_write_nonblock,
            s(:args),
            s(:block,
              s(:send, nil, :ssl_pair),
              s(:args,
                s(:arg, :s1),
                s(:arg, :s2)),
              s(:begin,
                s(:lvasgn, :n,
                  s(:int, 0)),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:op_asgn,
                        s(:lvasgn, :n), :+,
                        s(:send, nil, :write_nonblock,
                          s(:lvar, :s1),
                          s(:sym, :write_nonblock),
                          s(:send,
                            s(:str, "a"), :*,
                            s(:int, 100000)))),
                      s(:op_asgn,
                        s(:lvasgn, :n), :+,
                        s(:send, nil, :write_nonblock,
                          s(:lvar, :s1),
                          s(:sym, :write_nonblock),
                          s(:send,
                            s(:str, "b"), :*,
                            s(:int, 100000)))),
                      s(:op_asgn,
                        s(:lvasgn, :n), :+,
                        s(:send, nil, :write_nonblock,
                          s(:lvar, :s1),
                          s(:sym, :write_nonblock),
                          s(:send,
                            s(:str, "c"), :*,
                            s(:int, 100000)))),
                      s(:op_asgn,
                        s(:lvasgn, :n), :+,
                        s(:send, nil, :write_nonblock,
                          s(:lvar, :s1),
                          s(:sym, :write_nonblock),
                          s(:send,
                            s(:str, "d"), :*,
                            s(:int, 100000)))),
                      s(:op_asgn,
                        s(:lvasgn, :n), :+,
                        s(:send, nil, :write_nonblock,
                          s(:lvar, :s1),
                          s(:sym, :write_nonblock),
                          s(:send,
                            s(:str, "e"), :*,
                            s(:int, 100000)))),
                      s(:op_asgn,
                        s(:lvasgn, :n), :+,
                        s(:send, nil, :write_nonblock,
                          s(:lvar, :s1),
                          s(:sym, :write_nonblock),
                          s(:send,
                            s(:str, "f"), :*,
                            s(:int, 100000))))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :IO), :WaitWritable)), nil, nil), nil)),
                s(:send,
                  s(:lvar, :s1), :close),
                s(:send, nil, :assert_equal,
                  s(:lvar, :n),
                  s(:send,
                    s(:send,
                      s(:lvar, :s2), :read), :length))))),
          s(:def, :test_write_nonblock_no_exceptions,
            s(:args),
            s(:block,
              s(:send, nil, :ssl_pair),
              s(:args,
                s(:arg, :s1),
                s(:arg, :s2)),
              s(:begin,
                s(:lvasgn, :n,
                  s(:int, 0)),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:op_asgn,
                        s(:lvasgn, :n), :+,
                        s(:send, nil, :write_nonblock_no_ex,
                          s(:lvar, :s1),
                          s(:send,
                            s(:str, "a"), :*,
                            s(:int, 100000)))),
                      s(:op_asgn,
                        s(:lvasgn, :n), :+,
                        s(:send, nil, :write_nonblock_no_ex,
                          s(:lvar, :s1),
                          s(:send,
                            s(:str, "b"), :*,
                            s(:int, 100000)))),
                      s(:op_asgn,
                        s(:lvasgn, :n), :+,
                        s(:send, nil, :write_nonblock_no_ex,
                          s(:lvar, :s1),
                          s(:send,
                            s(:str, "c"), :*,
                            s(:int, 100000)))),
                      s(:op_asgn,
                        s(:lvasgn, :n), :+,
                        s(:send, nil, :write_nonblock_no_ex,
                          s(:lvar, :s1),
                          s(:send,
                            s(:str, "d"), :*,
                            s(:int, 100000)))),
                      s(:op_asgn,
                        s(:lvasgn, :n), :+,
                        s(:send, nil, :write_nonblock_no_ex,
                          s(:lvar, :s1),
                          s(:send,
                            s(:str, "e"), :*,
                            s(:int, 100000)))),
                      s(:op_asgn,
                        s(:lvasgn, :n), :+,
                        s(:send, nil, :write_nonblock_no_ex,
                          s(:lvar, :s1),
                          s(:send,
                            s(:str, "f"), :*,
                            s(:int, 100000))))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :SSLError)),
                      s(:lvasgn, :e),
                      s(:if,
                        s(:send,
                          s(:lvar, :n), :==,
                          s(:int, 0)),
                        s(:send, nil, :raise,
                          s(:lvar, :e)), nil)), nil)),
                s(:send,
                  s(:lvar, :s1), :close),
                s(:send, nil, :assert_equal,
                  s(:lvar, :n),
                  s(:send,
                    s(:send,
                      s(:lvar, :s2), :read), :length))))),
          s(:def, :test_write_nonblock_with_buffered_data,
            s(:args),
            s(:block,
              s(:send, nil, :ssl_pair),
              s(:args,
                s(:arg, :s1),
                s(:arg, :s2)),
              s(:begin,
                s(:send,
                  s(:lvar, :s1), :write,
                  s(:str, "foo")),
                s(:send,
                  s(:lvar, :s1), :write_nonblock,
                  s(:str, "bar")),
                s(:send,
                  s(:lvar, :s1), :write,
                  s(:str, "baz")),
                s(:send,
                  s(:lvar, :s1), :close),
                s(:send, nil, :assert_equal,
                  s(:str, "foobarbaz"),
                  s(:send,
                    s(:lvar, :s2), :read))))),
          s(:def, :test_write_nonblock_with_buffered_data_no_exceptions,
            s(:args),
            s(:block,
              s(:send, nil, :ssl_pair),
              s(:args,
                s(:arg, :s1),
                s(:arg, :s2)),
              s(:begin,
                s(:send,
                  s(:lvar, :s1), :write,
                  s(:str, "foo")),
                s(:send,
                  s(:lvar, :s1), :write_nonblock,
                  s(:str, "bar"),
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:false)))),
                s(:send,
                  s(:lvar, :s1), :write,
                  s(:str, "baz")),
                s(:send,
                  s(:lvar, :s1), :close),
                s(:send, nil, :assert_equal,
                  s(:str, "foobarbaz"),
                  s(:send,
                    s(:lvar, :s2), :read))))),
          s(:def, :test_write_zero,
            s(:args),
            s(:block,
              s(:send, nil, :ssl_pair),
              s(:args,
                s(:arg, :s1),
                s(:arg, :s2)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:int, 0),
                  s(:send,
                    s(:lvar, :s2), :write_nonblock,
                    s(:str, ""),
                    s(:hash,
                      s(:pair,
                        s(:sym, :exception),
                        s(:false))))),
                s(:send, nil, :assert_kind_of,
                  s(:const, nil, :Symbol),
                  s(:send,
                    s(:lvar, :s1), :read_nonblock,
                    s(:int, 1),
                    s(:hash,
                      s(:pair,
                        s(:sym, :exception),
                        s(:false))))),
                s(:send, nil, :assert_equal,
                  s(:int, 0),
                  s(:send,
                    s(:lvar, :s2), :syswrite,
                    s(:str, ""))),
                s(:send, nil, :assert_kind_of,
                  s(:const, nil, :Symbol),
                  s(:send,
                    s(:lvar, :s1), :read_nonblock,
                    s(:int, 1),
                    s(:hash,
                      s(:pair,
                        s(:sym, :exception),
                        s(:false))))),
                s(:send, nil, :assert_equal,
                  s(:int, 0),
                  s(:send,
                    s(:lvar, :s2), :write,
                    s(:str, ""))),
                s(:send, nil, :assert_kind_of,
                  s(:const, nil, :Symbol),
                  s(:send,
                    s(:lvar, :s1), :read_nonblock,
                    s(:int, 1),
                    s(:hash,
                      s(:pair,
                        s(:sym, :exception),
                        s(:false)))))))),
          s(:def, :tcp_pair,
            s(:args),
            s(:ensure,
              s(:begin,
                s(:lvasgn, :host,
                  s(:str, "127.0.0.1")),
                s(:lvasgn, :serv,
                  s(:send,
                    s(:const, nil, :TCPServer), :new,
                    s(:lvar, :host),
                    s(:int, 0))),
                s(:lvasgn, :port,
                  s(:send,
                    s(:send,
                      s(:lvar, :serv), :connect_address), :ip_port)),
                s(:lvasgn, :sock1,
                  s(:send,
                    s(:const, nil, :TCPSocket), :new,
                    s(:lvar, :host),
                    s(:lvar, :port))),
                s(:lvasgn, :sock2,
                  s(:send,
                    s(:lvar, :serv), :accept)),
                s(:send,
                  s(:lvar, :serv), :close),
                s(:array,
                  s(:lvar, :sock1),
                  s(:lvar, :sock2))),
              s(:if,
                s(:and,
                  s(:lvar, :serv),
                  s(:send,
                    s(:send,
                      s(:lvar, :serv), :closed?), :!)),
                s(:send,
                  s(:lvar, :serv), :close), nil))),
          s(:def, :test_connect_works_when_setting_dh_callback_to_nil,
            s(:args),
            s(:ensure,
              s(:begin,
                s(:lvasgn, :ctx2,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                s(:send,
                  s(:lvar, :ctx2), :ciphers=,
                  s(:str, "DH")),
                s(:send,
                  s(:lvar, :ctx2), :tmp_dh_callback=,
                  s(:nil)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :sock1),
                    s(:lvasgn, :sock2)),
                  s(:send, nil, :tcp_pair)),
                s(:lvasgn, :s2,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                    s(:lvar, :sock2),
                    s(:lvar, :ctx2))),
                s(:lvasgn, :accepted,
                  s(:send,
                    s(:lvar, :s2), :accept_nonblock,
                    s(:hash,
                      s(:pair,
                        s(:sym, :exception),
                        s(:false))))),
                s(:lvasgn, :ctx1,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                s(:send,
                  s(:lvar, :ctx1), :ciphers=,
                  s(:str, "DH")),
                s(:send,
                  s(:lvar, :ctx1), :tmp_dh_callback=,
                  s(:nil)),
                s(:lvasgn, :s1,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                    s(:lvar, :sock1),
                    s(:lvar, :ctx1))),
                s(:lvasgn, :t,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:send,
                      s(:lvar, :s1), :connect))),
                s(:lvasgn, :accept,
                  s(:send,
                    s(:lvar, :s2), :accept)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :s1),
                  s(:send,
                    s(:lvar, :t), :value)),
                s(:send, nil, :assert,
                  s(:lvar, :accept))),
              s(:begin,
                s(:if,
                  s(:lvar, :t),
                  s(:send,
                    s(:lvar, :t), :join), nil),
                s(:if,
                  s(:lvar, :s1),
                  s(:send,
                    s(:lvar, :s1), :close), nil),
                s(:if,
                  s(:lvar, :s2),
                  s(:send,
                    s(:lvar, :s2), :close), nil),
                s(:if,
                  s(:lvar, :sock1),
                  s(:send,
                    s(:lvar, :sock1), :close), nil),
                s(:if,
                  s(:lvar, :sock2),
                  s(:send,
                    s(:lvar, :sock2), :close), nil),
                s(:if,
                  s(:send,
                    s(:lvar, :accepted), :respond_to?,
                    s(:sym, :close)),
                  s(:send,
                    s(:lvar, :accepted), :close), nil)))),
          s(:def, :test_connect_without_setting_dh_callback,
            s(:args),
            s(:ensure,
              s(:begin,
                s(:lvasgn, :ctx2,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                s(:send,
                  s(:lvar, :ctx2), :ciphers=,
                  s(:str, "DH")),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :sock1),
                    s(:lvasgn, :sock2)),
                  s(:send, nil, :tcp_pair)),
                s(:lvasgn, :s2,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                    s(:lvar, :sock2),
                    s(:lvar, :ctx2))),
                s(:lvasgn, :accepted,
                  s(:send,
                    s(:lvar, :s2), :accept_nonblock,
                    s(:hash,
                      s(:pair,
                        s(:sym, :exception),
                        s(:false))))),
                s(:lvasgn, :ctx1,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                s(:send,
                  s(:lvar, :ctx1), :ciphers=,
                  s(:str, "DH")),
                s(:lvasgn, :s1,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                    s(:lvar, :sock1),
                    s(:lvar, :ctx1))),
                s(:lvasgn, :t,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:send,
                      s(:lvar, :s1), :connect))),
                s(:lvasgn, :accept,
                  s(:send,
                    s(:lvar, :s2), :accept)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :s1),
                  s(:send,
                    s(:lvar, :t), :value)),
                s(:send, nil, :assert,
                  s(:lvar, :accept))),
              s(:begin,
                s(:if,
                  s(:lvar, :t),
                  s(:send,
                    s(:lvar, :t), :join), nil),
                s(:if,
                  s(:lvar, :s1),
                  s(:send,
                    s(:lvar, :s1), :close), nil),
                s(:if,
                  s(:lvar, :s2),
                  s(:send,
                    s(:lvar, :s2), :close), nil),
                s(:if,
                  s(:lvar, :sock1),
                  s(:send,
                    s(:lvar, :sock1), :close), nil),
                s(:if,
                  s(:lvar, :sock2),
                  s(:send,
                    s(:lvar, :sock2), :close), nil),
                s(:if,
                  s(:send,
                    s(:lvar, :accepted), :respond_to?,
                    s(:sym, :close)),
                  s(:send,
                    s(:lvar, :accepted), :close), nil)))),
          s(:def, :test_ecdh_callback,
            s(:args),
            s(:ensure,
              s(:rescue,
                s(:begin,
                  s(:lvasgn, :called,
                    s(:false)),
                  s(:lvasgn, :ctx2,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                  s(:send,
                    s(:lvar, :ctx2), :ciphers=,
                    s(:str, "ECDH")),
                  s(:send,
                    s(:lvar, :ctx2), :tmp_ecdh_callback=,
                    s(:block,
                      s(:send, nil, :lambda),
                      s(:args,
                        s(:restarg, :args)),
                      s(:begin,
                        s(:lvasgn, :called,
                          s(:true)),
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :PKey), :EC), :new,
                          s(:str, "prime256v1"))))),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :sock1),
                      s(:lvasgn, :sock2)),
                    s(:send, nil, :tcp_pair)),
                  s(:lvasgn, :s2,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                      s(:lvar, :sock2),
                      s(:lvar, :ctx2))),
                  s(:lvasgn, :ctx1,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                  s(:send,
                    s(:lvar, :ctx1), :ciphers=,
                    s(:str, "ECDH")),
                  s(:lvasgn, :s1,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                      s(:lvar, :sock1),
                      s(:lvar, :ctx1))),
                  s(:lvasgn, :th,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Thread), :new),
                      s(:args),
                      s(:until_post,
                        s(:send,
                          s(:lvar, :rv), :==,
                          s(:lvar, :s1)),
                        s(:kwbegin,
                          s(:lvasgn, :rv,
                            s(:send,
                              s(:lvar, :s1), :connect_nonblock,
                              s(:hash,
                                s(:pair,
                                  s(:sym, :exception),
                                  s(:false))))),
                          s(:case,
                            s(:lvar, :rv),
                            s(:when,
                              s(:sym, :wait_writable),
                              s(:send,
                                s(:const, nil, :IO), :select,
                                s(:nil),
                                s(:array,
                                  s(:lvar, :s1)),
                                s(:nil),
                                s(:int, 5))),
                            s(:when,
                              s(:sym, :wait_readable),
                              s(:send,
                                s(:const, nil, :IO), :select,
                                s(:array,
                                  s(:lvar, :s1)),
                                s(:nil),
                                s(:nil),
                                s(:int, 5))), nil))))),
                  s(:lvasgn, :accepted,
                    s(:send,
                      s(:lvar, :s2), :accept)),
                  s(:send, nil, :assert,
                    s(:lvar, :called),
                    s(:str, "ecdh callback should be called"))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLError)),
                  s(:lvasgn, :e),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :e), :message), :=~,
                      s(:regexp,
                        s(:str, "no cipher match"),
                        s(:regopt))),
                    s(:send, nil, :skip,
                      s(:str, "ECDH cipher not supported.")),
                    s(:send, nil, :raise,
                      s(:lvar, :e)))), nil),
              s(:begin,
                s(:if,
                  s(:lvar, :th),
                  s(:send,
                    s(:lvar, :th), :join), nil),
                s(:if,
                  s(:lvar, :s1),
                  s(:send,
                    s(:lvar, :s1), :close), nil),
                s(:if,
                  s(:lvar, :s2),
                  s(:send,
                    s(:lvar, :s2), :close), nil),
                s(:if,
                  s(:lvar, :sock1),
                  s(:send,
                    s(:lvar, :sock1), :close), nil),
                s(:if,
                  s(:lvar, :sock2),
                  s(:send,
                    s(:lvar, :sock2), :close), nil),
                s(:if,
                  s(:send,
                    s(:lvar, :accepted), :respond_to?,
                    s(:sym, :close)),
                  s(:send,
                    s(:lvar, :accepted), :close), nil)))),
          s(:def, :test_connect_accept_nonblock_no_exception,
            s(:args),
            s(:ensure,
              s(:begin,
                s(:lvasgn, :ctx2,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                s(:send,
                  s(:lvar, :ctx2), :ciphers=,
                  s(:str, "ADH")),
                s(:send,
                  s(:lvar, :ctx2), :tmp_dh_callback=,
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args),
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DH1024))),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :sock1),
                    s(:lvasgn, :sock2)),
                  s(:send, nil, :tcp_pair)),
                s(:lvasgn, :s2,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                    s(:lvar, :sock2),
                    s(:lvar, :ctx2))),
                s(:lvasgn, :accepted,
                  s(:send,
                    s(:lvar, :s2), :accept_nonblock,
                    s(:hash,
                      s(:pair,
                        s(:sym, :exception),
                        s(:false))))),
                s(:send, nil, :assert_equal,
                  s(:sym, :wait_readable),
                  s(:lvar, :accepted)),
                s(:lvasgn, :ctx1,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                s(:send,
                  s(:lvar, :ctx1), :ciphers=,
                  s(:str, "ADH")),
                s(:lvasgn, :s1,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                    s(:lvar, :sock1),
                    s(:lvar, :ctx1))),
                s(:lvasgn, :th,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :rets,
                        s(:array)),
                      s(:until_post,
                        s(:send,
                          s(:lvar, :rv), :==,
                          s(:lvar, :s1)),
                        s(:kwbegin,
                          s(:lvasgn, :rv,
                            s(:send,
                              s(:lvar, :s1), :connect_nonblock,
                              s(:hash,
                                s(:pair,
                                  s(:sym, :exception),
                                  s(:false))))),
                          s(:send,
                            s(:lvar, :rets), :<<,
                            s(:lvar, :rv)),
                          s(:case,
                            s(:lvar, :rv),
                            s(:when,
                              s(:sym, :wait_writable),
                              s(:send,
                                s(:const, nil, :IO), :select,
                                s(:nil),
                                s(:array,
                                  s(:lvar, :s1)),
                                s(:nil),
                                s(:int, 5))),
                            s(:when,
                              s(:sym, :wait_readable),
                              s(:send,
                                s(:const, nil, :IO), :select,
                                s(:array,
                                  s(:lvar, :s1)),
                                s(:nil),
                                s(:nil),
                                s(:int, 5))), nil))),
                      s(:lvar, :rets)))),
                s(:until,
                  s(:send,
                    s(:lvar, :th), :join,
                    s(:float, 0.01)),
                  s(:begin,
                    s(:lvasgn, :accepted,
                      s(:send,
                        s(:lvar, :s2), :accept_nonblock,
                        s(:hash,
                          s(:pair,
                            s(:sym, :exception),
                            s(:false))))),
                    s(:send, nil, :assert_includes,
                      s(:array,
                        s(:lvar, :s2),
                        s(:sym, :wait_readable),
                        s(:sym, :wait_writable)),
                      s(:lvar, :accepted)))),
                s(:lvasgn, :rets,
                  s(:send,
                    s(:lvar, :th), :value)),
                s(:send, nil, :assert_instance_of,
                  s(:const, nil, :Array),
                  s(:lvar, :rets)),
                s(:block,
                  s(:send,
                    s(:lvar, :rets), :each),
                  s(:args,
                    s(:arg, :rv)),
                  s(:send, nil, :assert_includes,
                    s(:array,
                      s(:lvar, :s1),
                      s(:sym, :wait_readable),
                      s(:sym, :wait_writable)),
                    s(:lvar, :rv)))),
              s(:begin,
                s(:if,
                  s(:lvar, :th),
                  s(:send,
                    s(:lvar, :th), :join), nil),
                s(:if,
                  s(:lvar, :s1),
                  s(:send,
                    s(:lvar, :s1), :close), nil),
                s(:if,
                  s(:lvar, :s2),
                  s(:send,
                    s(:lvar, :s2), :close), nil),
                s(:if,
                  s(:lvar, :sock1),
                  s(:send,
                    s(:lvar, :sock1), :close), nil),
                s(:if,
                  s(:lvar, :sock2),
                  s(:send,
                    s(:lvar, :sock2), :close), nil),
                s(:if,
                  s(:send,
                    s(:lvar, :accepted), :respond_to?,
                    s(:sym, :close)),
                  s(:send,
                    s(:lvar, :accepted), :close), nil)))),
          s(:def, :test_connect_accept_nonblock,
            s(:args),
            s(:ensure,
              s(:begin,
                s(:lvasgn, :ctx,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                s(:send,
                  s(:lvar, :ctx), :ciphers=,
                  s(:str, "ADH")),
                s(:send,
                  s(:lvar, :ctx), :tmp_dh_callback=,
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args),
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DH1024))),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :sock1),
                    s(:lvasgn, :sock2)),
                  s(:send, nil, :tcp_pair)),
                s(:lvasgn, :th,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :s2,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                          s(:lvar, :sock2),
                          s(:lvar, :ctx))),
                      s(:send,
                        s(:lvar, :s2), :sync_close=,
                        s(:true)),
                      s(:kwbegin,
                        s(:rescue,
                          s(:begin,
                            s(:send, nil, :sleep,
                              s(:float, 0.2)),
                            s(:send,
                              s(:lvar, :s2), :accept_nonblock)),
                          s(:resbody,
                            s(:array,
                              s(:const,
                                s(:const, nil, :IO), :WaitReadable)), nil,
                            s(:begin,
                              s(:send,
                                s(:const, nil, :IO), :select,
                                s(:array,
                                  s(:lvar, :s2))),
                              s(:retry))),
                          s(:resbody,
                            s(:array,
                              s(:const,
                                s(:const, nil, :IO), :WaitWritable)), nil,
                            s(:begin,
                              s(:send,
                                s(:const, nil, :IO), :select,
                                s(:nil),
                                s(:array,
                                  s(:lvar, :s2))),
                              s(:retry))), nil)),
                      s(:lvar, :s2)))),
                s(:send, nil, :sleep,
                  s(:float, 0.1)),
                s(:lvasgn, :ctx,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                s(:send,
                  s(:lvar, :ctx), :ciphers=,
                  s(:str, "ADH")),
                s(:lvasgn, :s1,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                    s(:lvar, :sock1),
                    s(:lvar, :ctx))),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:send, nil, :sleep,
                        s(:float, 0.2)),
                      s(:send,
                        s(:lvar, :s1), :connect_nonblock)),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :IO), :WaitReadable)), nil,
                      s(:begin,
                        s(:send,
                          s(:const, nil, :IO), :select,
                          s(:array,
                            s(:lvar, :s1))),
                        s(:retry))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :IO), :WaitWritable)), nil,
                      s(:begin,
                        s(:send,
                          s(:const, nil, :IO), :select,
                          s(:nil),
                          s(:array,
                            s(:lvar, :s1))),
                        s(:retry))), nil)),
                s(:send,
                  s(:lvar, :s1), :sync_close=,
                  s(:true)),
                s(:lvasgn, :s2,
                  s(:send,
                    s(:lvar, :th), :value)),
                s(:send,
                  s(:lvar, :s1), :print,
                  s(:str, "a\ndef")),
                s(:send, nil, :assert_equal,
                  s(:str, "a\n"),
                  s(:send,
                    s(:lvar, :s2), :gets))),
              s(:begin,
                s(:if,
                  s(:lvar, :th),
                  s(:send,
                    s(:lvar, :th), :join), nil),
                s(:if,
                  s(:and,
                    s(:lvar, :s1),
                    s(:send,
                      s(:send,
                        s(:lvar, :s1), :closed?), :!)),
                  s(:send,
                    s(:lvar, :s1), :close), nil),
                s(:if,
                  s(:and,
                    s(:lvar, :s2),
                    s(:send,
                      s(:send,
                        s(:lvar, :s2), :closed?), :!)),
                  s(:send,
                    s(:lvar, :s2), :close), nil),
                s(:if,
                  s(:and,
                    s(:lvar, :sock1),
                    s(:send,
                      s(:send,
                        s(:lvar, :sock1), :closed?), :!)),
                  s(:send,
                    s(:lvar, :sock1), :close), nil),
                s(:if,
                  s(:and,
                    s(:lvar, :sock2),
                    s(:send,
                      s(:send,
                        s(:lvar, :sock2), :closed?), :!)),
                  s(:send,
                    s(:lvar, :sock2), :close), nil)))))),
      s(:class,
        s(:const,
          s(:const, nil, :OpenSSL), :TestEOF1),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :TestEOF)),
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :OpenSSL), :SSLPair)),
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :OpenSSL), :TestEOF1M)))),
      s(:class,
        s(:const,
          s(:const, nil, :OpenSSL), :TestEOF1LowlevelSocket),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :TestEOF)),
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :OpenSSL), :SSLPairLowlevelSocket)),
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :OpenSSL), :TestEOF1M)))),
      s(:class,
        s(:const,
          s(:const, nil, :OpenSSL), :TestEOF2),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :TestEOF)),
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :OpenSSL), :SSLPair)),
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :OpenSSL), :TestEOF2M)))),
      s(:class,
        s(:const,
          s(:const, nil, :OpenSSL), :TestEOF2LowlevelSocket),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :TestEOF)),
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :OpenSSL), :SSLPairLowlevelSocket)),
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :OpenSSL), :TestEOF2M)))),
      s(:class,
        s(:const,
          s(:const, nil, :OpenSSL), :TestPair),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :OpenSSL), :SSLPair)),
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :OpenSSL), :TestPairM)))),
      s(:class,
        s(:const,
          s(:const, nil, :OpenSSL), :TestPairLowlevelSocket),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :OpenSSL), :SSLPairLowlevelSocket)),
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :OpenSSL), :TestPairM))))), nil))
