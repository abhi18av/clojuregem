s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "utils")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :TestUtils)),
    s(:module,
      s(:const, nil, :OpenSSL),
      s(:class,
        s(:const, nil, :TestPKCS12),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :OpenSSL), :TestUtils)),
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:lvasgn, :ca,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :X509), :Name), :parse,
                  s(:str, "/DC=org/DC=ruby-lang/CN=CA"))),
              s(:lvasgn, :now,
                s(:send,
                  s(:const, nil, :Time), :now)),
              s(:lvasgn, :ca_exts,
                s(:array,
                  s(:array,
                    s(:str, "basicConstraints"),
                    s(:str, "CA:TRUE"),
                    s(:true)),
                  s(:array,
                    s(:str, "keyUsage"),
                    s(:str, "keyCertSign, cRLSign"),
                    s(:true)),
                  s(:array,
                    s(:str, "subjectKeyIdentifier"),
                    s(:str, "hash"),
                    s(:false)),
                  s(:array,
                    s(:str, "authorityKeyIdentifier"),
                    s(:str, "keyid:always"),
                    s(:false)))),
              s(:ivasgn, :@cacert,
                s(:send, nil, :issue_cert,
                  s(:lvar, :ca),
                  s(:const, nil, :TEST_KEY_RSA2048),
                  s(:int, 1),
                  s(:lvar, :now),
                  s(:send,
                    s(:lvar, :now), :+,
                    s(:int, 3600)),
                  s(:lvar, :ca_exts),
                  s(:nil),
                  s(:nil),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
              s(:lvasgn, :inter_ca,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :X509), :Name), :parse,
                  s(:str, "/DC=org/DC=ruby-lang/CN=Intermediate CA"))),
              s(:lvasgn, :inter_ca_key,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :read,
                  s(:dstr,
                    s(:str, "-----BEGIN RSA PRIVATE KEY-----\n"),
                    s(:str, "MIICXAIBAAKBgQDp7hIG0SFMG/VWv1dBUWziAPrNmkMXJgTCAoB7jffzRtyyN04K\n"),
                    s(:str, "oq/89HAszTMStZoMigQURfokzKsjpUp8OYCAEsBtt9d5zPndWMz/gHN73GrXk3LT\n"),
                    s(:str, "ZsxEn7Xv5Da+Y9F/Hx2QZUHarV5cdZixq2NbzWGwrToogOQMh2pxN3Z/0wIDAQAB\n"),
                    s(:str, "AoGBAJysUyx3olpsGzv3OMRJeahASbmsSKTXVLZvoIefxOINosBFpCIhZccAG6UV\n"),
                    s(:str, "5c/xCvS89xBw8aD15uUfziw3AuT8QPEtHCgfSjeT7aWzBfYswEgOW4XPuWr7EeI9\n"),
                    s(:str, "iNHGD6z+hCN/IQr7FiEBgTp6A+i/hffcSdR83fHWKyb4M7TRAkEA+y4BNd668HmC\n"),
                    s(:str, "G5MPRx25n6LixuBxrNp1umfjEI6UZgEFVpYOg4agNuimN6NqM253kcTR94QNTUs5\n"),
                    s(:str, "Kj3EhG1YWwJBAO5rUjiOyCNVX2WUQrOMYK/c1lU7fvrkdygXkvIGkhsPoNRzLPeA\n"),
                    s(:str, "HGJszKtrKD8bNihWpWNIyqKRHfKVD7yXT+kCQGCAhVCIGTRoypcDghwljHqLnysf\n"),
                    s(:str, "ci0h5ZdPcIqc7ODfxYhFsJ/Rql5ONgYsT5Ig/+lOQAkjf+TRYM4c2xKx2/8CQBvG\n"),
                    s(:str, "jv6dy70qDgIUgqzONtlmHeYyFzn9cdBO5sShdVYHvRHjFSMEXsosqK9zvW2UqvuK\n"),
                    s(:str, "FJx7d3f29gkzynCLJDkCQGQZlEZJC4vWmWJGRKJ24P6MyQn3VsPfErSKOg4lvyM3\n"),
                    s(:str, "Li8JsX5yIiuVYaBg/6ha3tOg4TCa5K/3r3tVliRZ2Es=\n"),
                    s(:str, "-----END RSA PRIVATE KEY-----\n")))),
              s(:ivasgn, :@inter_cacert,
                s(:send, nil, :issue_cert,
                  s(:lvar, :inter_ca),
                  s(:lvar, :inter_ca_key),
                  s(:int, 2),
                  s(:lvar, :now),
                  s(:send,
                    s(:lvar, :now), :+,
                    s(:int, 3600)),
                  s(:lvar, :ca_exts),
                  s(:ivar, :@cacert),
                  s(:const, nil, :TEST_KEY_RSA2048),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
              s(:lvasgn, :exts,
                s(:array,
                  s(:array,
                    s(:str, "keyUsage"),
                    s(:str, "digitalSignature"),
                    s(:true)),
                  s(:array,
                    s(:str, "subjectKeyIdentifier"),
                    s(:str, "hash"),
                    s(:false)))),
              s(:lvasgn, :ee,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :X509), :Name), :parse,
                  s(:str, "/DC=org/DC=ruby-lang/CN=Ruby PKCS12 Test Certificate"))),
              s(:ivasgn, :@mycert,
                s(:send, nil, :issue_cert,
                  s(:lvar, :ee),
                  s(:const, nil, :TEST_KEY_RSA1024),
                  s(:int, 3),
                  s(:lvar, :now),
                  s(:send,
                    s(:lvar, :now), :+,
                    s(:int, 3600)),
                  s(:lvar, :exts),
                  s(:ivar, :@inter_cacert),
                  s(:lvar, :inter_ca_key),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))))),
          s(:def, :test_create,
            s(:args),
            s(:begin,
              s(:lvasgn, :pkcs12,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKCS12), :create,
                  s(:str, "omg"),
                  s(:str, "hello"),
                  s(:const, nil, :TEST_KEY_RSA1024),
                  s(:ivar, :@mycert))),
              s(:send, nil, :assert_equal,
                s(:ivar, :@mycert),
                s(:send,
                  s(:lvar, :pkcs12), :certificate)),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TEST_KEY_RSA1024),
                s(:send,
                  s(:lvar, :pkcs12), :key)),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:lvar, :pkcs12), :ca_certs)))),
          s(:def, :test_create_no_pass,
            s(:args),
            s(:begin,
              s(:lvasgn, :pkcs12,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKCS12), :create,
                  s(:nil),
                  s(:str, "hello"),
                  s(:const, nil, :TEST_KEY_RSA1024),
                  s(:ivar, :@mycert))),
              s(:send, nil, :assert_equal,
                s(:ivar, :@mycert),
                s(:send,
                  s(:lvar, :pkcs12), :certificate)),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TEST_KEY_RSA1024),
                s(:send,
                  s(:lvar, :pkcs12), :key)),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:lvar, :pkcs12), :ca_certs)),
              s(:lvasgn, :decoded,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKCS12), :new,
                  s(:send,
                    s(:lvar, :pkcs12), :to_der))),
              s(:send, nil, :assert_cert,
                s(:ivar, :@mycert),
                s(:send,
                  s(:lvar, :decoded), :certificate)))),
          s(:def, :test_create_with_chain,
            s(:args),
            s(:begin,
              s(:lvasgn, :chain,
                s(:array,
                  s(:ivar, :@inter_cacert),
                  s(:ivar, :@cacert))),
              s(:lvasgn, :pkcs12,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKCS12), :create,
                  s(:str, "omg"),
                  s(:str, "hello"),
                  s(:const, nil, :TEST_KEY_RSA1024),
                  s(:ivar, :@mycert),
                  s(:lvar, :chain))),
              s(:send, nil, :assert_equal,
                s(:lvar, :chain),
                s(:send,
                  s(:lvar, :pkcs12), :ca_certs)))),
          s(:def, :test_create_with_chain_decode,
            s(:args),
            s(:begin,
              s(:lvasgn, :chain,
                s(:array,
                  s(:ivar, :@cacert),
                  s(:ivar, :@inter_cacert))),
              s(:lvasgn, :passwd,
                s(:str, "omg")),
              s(:lvasgn, :pkcs12,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKCS12), :create,
                  s(:lvar, :passwd),
                  s(:str, "hello"),
                  s(:const, nil, :TEST_KEY_RSA1024),
                  s(:ivar, :@mycert),
                  s(:lvar, :chain))),
              s(:lvasgn, :decoded,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKCS12), :new,
                  s(:send,
                    s(:lvar, :pkcs12), :to_der),
                  s(:lvar, :passwd))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :chain), :size),
                s(:send,
                  s(:send,
                    s(:lvar, :decoded), :ca_certs), :size)),
              s(:send, nil, :assert_include_cert,
                s(:ivar, :@cacert),
                s(:send,
                  s(:lvar, :decoded), :ca_certs)),
              s(:send, nil, :assert_include_cert,
                s(:ivar, :@inter_cacert),
                s(:send,
                  s(:lvar, :decoded), :ca_certs)),
              s(:send, nil, :assert_cert,
                s(:ivar, :@mycert),
                s(:send,
                  s(:lvar, :decoded), :certificate)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :TEST_KEY_RSA1024), :to_der),
                s(:send,
                  s(:send,
                    s(:lvar, :decoded), :key), :to_der)))),
          s(:def, :test_create_with_bad_nid,
            s(:args),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS12), :create,
                s(:str, "omg"),
                s(:str, "hello"),
                s(:const, nil, :TEST_KEY_RSA1024),
                s(:ivar, :@mycert),
                s(:array),
                s(:str, "foo")))),
          s(:def, :test_create_with_itr,
            s(:args),
            s(:begin,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS12), :create,
                s(:str, "omg"),
                s(:str, "hello"),
                s(:const, nil, :TEST_KEY_RSA1024),
                s(:ivar, :@mycert),
                s(:array),
                s(:nil),
                s(:nil),
                s(:int, 2048)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :TypeError)),
                s(:args),
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKCS12), :create,
                  s(:str, "omg"),
                  s(:str, "hello"),
                  s(:const, nil, :TEST_KEY_RSA1024),
                  s(:ivar, :@mycert),
                  s(:array),
                  s(:nil),
                  s(:nil),
                  s(:str, "omg"))))),
          s(:def, :test_create_with_mac_itr,
            s(:args),
            s(:begin,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS12), :create,
                s(:str, "omg"),
                s(:str, "hello"),
                s(:const, nil, :TEST_KEY_RSA1024),
                s(:ivar, :@mycert),
                s(:array),
                s(:nil),
                s(:nil),
                s(:nil),
                s(:int, 2048)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :TypeError)),
                s(:args),
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKCS12), :create,
                  s(:str, "omg"),
                  s(:str, "hello"),
                  s(:const, nil, :TEST_KEY_RSA1024),
                  s(:ivar, :@mycert),
                  s(:array),
                  s(:nil),
                  s(:nil),
                  s(:nil),
                  s(:str, "omg"))))),
          s(:send, nil, :private),
          s(:def, :assert_cert,
            s(:args,
              s(:arg, :expected),
              s(:arg, :actual)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:array,
                    s(:sym, :subject),
                    s(:sym, :issuer),
                    s(:sym, :serial),
                    s(:sym, :not_before),
                    s(:sym, :not_after)), :each),
                s(:args,
                  s(:arg, :attribute)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :expected), :send,
                    s(:lvar, :attribute)),
                  s(:send,
                    s(:lvar, :actual), :send,
                    s(:lvar, :attribute)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :expected), :to_der),
                s(:send,
                  s(:lvar, :actual), :to_der)))),
          s(:def, :assert_include_cert,
            s(:args,
              s(:arg, :cert),
              s(:arg, :ary)),
            s(:begin,
              s(:lvasgn, :der,
                s(:send,
                  s(:lvar, :cert), :to_der)),
              s(:block,
                s(:send,
                  s(:lvar, :ary), :each),
                s(:args,
                  s(:arg, :candidate)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :candidate), :to_der), :==,
                    s(:lvar, :der)),
                  s(:return,
                    s(:true)), nil)),
              s(:false)))))), nil))
