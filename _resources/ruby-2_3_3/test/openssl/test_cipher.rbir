s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "utils")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :TestUtils)),
    s(:class,
      s(:const,
        s(:const, nil, :OpenSSL), :TestCipher),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:sclass,
          s(:self),
          s(:begin,
            s(:def, :has_cipher?,
              s(:args,
                s(:arg, :name)),
              s(:begin,
                s(:lvasgn, :ciphers,
                  s(:send,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Cipher), :ciphers)),
                s(:block,
                  s(:send, nil, :define_singleton_method,
                    s(:sym, :has_cipher?)),
                  s(:args,
                    s(:arg, :name)),
                  s(:send,
                    s(:lvar, :ciphers), :include?,
                    s(:lvar, :name))),
                s(:send, nil, :has_cipher?,
                  s(:lvar, :name)))),
            s(:def, :has_ciphers?,
              s(:args,
                s(:arg, :list)),
              s(:block,
                s(:send,
                  s(:lvar, :list), :all?),
                s(:args,
                  s(:arg, :name)),
                s(:send, nil, :has_cipher?,
                  s(:lvar, :name)))))),
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:ivasgn, :@c1,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Cipher), :Cipher), :new,
                s(:str, "DES-EDE3-CBC"))),
            s(:ivasgn, :@c2,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Cipher), :DES), :new,
                s(:sym, :EDE3),
                s(:str, "CBC"))),
            s(:ivasgn, :@key,
              s(:str, "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000")),
            s(:ivasgn, :@iv,
              s(:str, "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000")),
            s(:ivasgn, :@hexkey,
              s(:str, "0000000000000000000000000000000000000000000000")),
            s(:ivasgn, :@hexiv,
              s(:str, "0000000000000000")),
            s(:ivasgn, :@data,
              s(:str, "DATA")))),
        s(:def, :teardown,
          s(:args),
          s(:ivasgn, :@c1,
            s(:ivasgn, :@c2,
              s(:nil)))),
        s(:def, :test_crypt,
          s(:args),
          s(:begin,
            s(:send,
              s(:send,
                s(:ivar, :@c1), :encrypt), :pkcs5_keyivgen,
              s(:ivar, :@key),
              s(:ivar, :@iv)),
            s(:send,
              s(:send,
                s(:ivar, :@c2), :encrypt), :pkcs5_keyivgen,
              s(:ivar, :@key),
              s(:ivar, :@iv)),
            s(:lvasgn, :s1,
              s(:send,
                s(:send,
                  s(:ivar, :@c1), :update,
                  s(:ivar, :@data)), :+,
                s(:send,
                  s(:ivar, :@c1), :final))),
            s(:lvasgn, :s2,
              s(:send,
                s(:send,
                  s(:ivar, :@c2), :update,
                  s(:ivar, :@data)), :+,
                s(:send,
                  s(:ivar, :@c2), :final))),
            s(:send, nil, :assert_equal,
              s(:lvar, :s1),
              s(:lvar, :s2),
              s(:str, "encrypt")),
            s(:send,
              s(:send,
                s(:ivar, :@c1), :decrypt), :pkcs5_keyivgen,
              s(:ivar, :@key),
              s(:ivar, :@iv)),
            s(:send,
              s(:send,
                s(:ivar, :@c2), :decrypt), :pkcs5_keyivgen,
              s(:ivar, :@key),
              s(:ivar, :@iv)),
            s(:send, nil, :assert_equal,
              s(:ivar, :@data),
              s(:send,
                s(:send,
                  s(:ivar, :@c1), :update,
                  s(:lvar, :s1)), :+,
                s(:send,
                  s(:ivar, :@c1), :final)),
              s(:str, "decrypt")),
            s(:send, nil, :assert_equal,
              s(:ivar, :@data),
              s(:send,
                s(:send,
                  s(:ivar, :@c2), :update,
                  s(:lvar, :s2)), :+,
                s(:send,
                  s(:ivar, :@c2), :final)),
              s(:str, "decrypt")))),
        s(:def, :test_info,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "DES-EDE3-CBC"),
              s(:send,
                s(:ivar, :@c1), :name),
              s(:str, "name")),
            s(:send, nil, :assert_equal,
              s(:str, "DES-EDE3-CBC"),
              s(:send,
                s(:ivar, :@c2), :name),
              s(:str, "name")),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Fixnum),
              s(:send,
                s(:ivar, :@c1), :key_len),
              s(:str, "key_len")),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Fixnum),
              s(:send,
                s(:ivar, :@c1), :iv_len),
              s(:str, "iv_len")))),
        s(:def, :test_dup,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@c1), :name),
              s(:send,
                s(:send,
                  s(:ivar, :@c1), :dup), :name),
              s(:str, "dup")),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@c1), :name),
              s(:send,
                s(:send,
                  s(:ivar, :@c1), :clone), :name),
              s(:str, "clone")),
            s(:send,
              s(:ivar, :@c1), :encrypt),
            s(:send,
              s(:ivar, :@c1), :key=,
              s(:ivar, :@key)),
            s(:send,
              s(:ivar, :@c1), :iv=,
              s(:ivar, :@iv)),
            s(:lvasgn, :tmpc,
              s(:send,
                s(:ivar, :@c1), :dup)),
            s(:lvasgn, :s1,
              s(:send,
                s(:send,
                  s(:ivar, :@c1), :update,
                  s(:ivar, :@data)), :+,
                s(:send,
                  s(:ivar, :@c1), :final))),
            s(:lvasgn, :s2,
              s(:send,
                s(:send,
                  s(:lvar, :tmpc), :update,
                  s(:ivar, :@data)), :+,
                s(:send,
                  s(:lvar, :tmpc), :final))),
            s(:send, nil, :assert_equal,
              s(:lvar, :s1),
              s(:lvar, :s2),
              s(:str, "encrypt dup")))),
        s(:def, :test_reset,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@c1), :encrypt),
            s(:send,
              s(:ivar, :@c1), :key=,
              s(:ivar, :@key)),
            s(:send,
              s(:ivar, :@c1), :iv=,
              s(:ivar, :@iv)),
            s(:lvasgn, :s1,
              s(:send,
                s(:send,
                  s(:ivar, :@c1), :update,
                  s(:ivar, :@data)), :+,
                s(:send,
                  s(:ivar, :@c1), :final))),
            s(:send,
              s(:ivar, :@c1), :reset),
            s(:lvasgn, :s2,
              s(:send,
                s(:send,
                  s(:ivar, :@c1), :update,
                  s(:ivar, :@data)), :+,
                s(:send,
                  s(:ivar, :@c1), :final))),
            s(:send, nil, :assert_equal,
              s(:lvar, :s1),
              s(:lvar, :s2),
              s(:str, "encrypt reset")))),
        s(:def, :test_empty_data,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@c1), :encrypt),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:ivar, :@c1), :update,
                s(:str, ""))))),
        s(:def, :test_initialize,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :RuntimeError)),
              s(:args),
              s(:send,
                s(:ivar, :@c1), :__send__,
                s(:sym, :initialize),
                s(:str, "DES-EDE3-CBC"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :RuntimeError)),
              s(:args),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Cipher), :allocate), :final)))),
        s(:if,
          s(:send, nil, :has_cipher?,
            s(:str, "aes-128-ctr")),
          s(:def, :test_ctr_if_exists,
            s(:args),
            s(:kwbegin,
              s(:lvasgn, :cipher,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Cipher), :new,
                  s(:str, "aes-128-ctr"))),
              s(:send,
                s(:lvar, :cipher), :encrypt),
              s(:send,
                s(:lvar, :cipher), :pkcs5_keyivgen,
                s(:str, "password")),
              s(:lvasgn, :c,
                s(:send,
                  s(:send,
                    s(:lvar, :cipher), :update,
                    s(:str, "hello,world")), :+,
                  s(:send,
                    s(:lvar, :cipher), :final))),
              s(:send,
                s(:lvar, :cipher), :decrypt),
              s(:send,
                s(:lvar, :cipher), :pkcs5_keyivgen,
                s(:str, "password")),
              s(:send, nil, :assert_equal,
                s(:str, "hello,world"),
                s(:send,
                  s(:send,
                    s(:lvar, :cipher), :update,
                    s(:lvar, :c)), :+,
                  s(:send,
                    s(:lvar, :cipher), :final))))), nil),
        s(:if,
          s(:send,
            s(:const,
              s(:const, nil, :OpenSSL), :OPENSSL_VERSION_NUMBER), :>,
            s(:int, 9465856)),
          s(:begin,
            s(:def, :test_ciphers,
              s(:args),
              s(:block,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Cipher), :ciphers), :each),
                s(:args,
                  s(:arg, :name)),
                s(:begin,
                  s(:if,
                    s(:and,
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "netbsd"),
                          s(:regopt)),
                        s(:const, nil, :RUBY_PLATFORM)),
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "idea|rc5"),
                          s(:regopt, :i)),
                        s(:lvar, :name))),
                    s(:next), nil),
                  s(:kwbegin,
                    s(:rescue,
                      s(:send, nil, :assert_kind_of,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :Cipher), :Cipher),
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :Cipher), :Cipher), :new,
                          s(:lvar, :name))),
                      s(:resbody,
                        s(:array,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :Cipher), :CipherError)),
                        s(:lvasgn, :e),
                        s(:begin,
                          s(:if,
                            s(:and,
                              s(:match_with_lvasgn,
                                s(:regexp,
                                  s(:str, "wrap"),
                                  s(:regopt)),
                                s(:lvar, :name)),
                              s(:send,
                                s(:send,
                                  s(:lvar, :e), :message), :==,
                                s(:str, "wrap mode not allowed"))),
                            s(:next), nil),
                          s(:send, nil, :raise))), nil))))),
            s(:def, :test_AES,
              s(:args),
              s(:begin,
                s(:lvasgn, :pt,
                  s(:send,
                    s(:const, nil, :File), :read,
                    s(:str, "(string)"))),
                s(:block,
                  s(:send,
                    s(:array,
                      s(:str, "ECB"),
                      s(:str, "CBC"),
                      s(:str, "CFB"),
                      s(:str, "OFB")), :each),
                  s(:args,
                    s(:arg, :mode)),
                  s(:begin,
                    s(:lvasgn, :c1,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :Cipher), :AES256), :new,
                        s(:lvar, :mode))),
                    s(:send,
                      s(:lvar, :c1), :encrypt),
                    s(:send,
                      s(:lvar, :c1), :pkcs5_keyivgen,
                      s(:str, "passwd")),
                    s(:lvasgn, :ct,
                      s(:send,
                        s(:send,
                          s(:lvar, :c1), :update,
                          s(:lvar, :pt)), :+,
                        s(:send,
                          s(:lvar, :c1), :final))),
                    s(:lvasgn, :c2,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :Cipher), :AES256), :new,
                        s(:lvar, :mode))),
                    s(:send,
                      s(:lvar, :c2), :decrypt),
                    s(:send,
                      s(:lvar, :c2), :pkcs5_keyivgen,
                      s(:str, "passwd")),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :pt),
                      s(:send,
                        s(:send,
                          s(:lvar, :c2), :update,
                          s(:lvar, :ct)), :+,
                        s(:send,
                          s(:lvar, :c2), :final))))))),
            s(:def, :test_AES_crush,
              s(:args),
              s(:block,
                s(:send,
                  s(:int, 500), :times),
                s(:args),
                s(:block,
                  s(:send, nil, :assert_nothing_raised,
                    s(:str, "[Bug #2768]")),
                  s(:args),
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :Cipher), :AES128), :new,
                      s(:str, "ECB")), :update,
                    s(:send,
                      s(:str, "."), :*,
                      s(:int, 17))))))), nil),
        s(:if,
          s(:send, nil, :has_ciphers?,
            s(:array,
              s(:str, "aes-128-gcm"),
              s(:str, "aes-192-gcm"),
              s(:str, "aes-256-gcm"))),
          s(:begin,
            s(:def, :test_authenticated,
              s(:args),
              s(:begin,
                s(:lvasgn, :cipher,
                  s(:send,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Cipher), :new,
                    s(:str, "aes-128-gcm"))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:lvar, :cipher), :authenticated?)),
                s(:lvasgn, :cipher,
                  s(:send,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Cipher), :new,
                    s(:str, "aes-128-cbc"))),
                s(:send, nil, :refute,
                  s(:send,
                    s(:lvar, :cipher), :authenticated?)))),
            s(:def, :test_aes_gcm,
              s(:args),
              s(:block,
                s(:send,
                  s(:array,
                    s(:str, "aes-128-gcm"),
                    s(:str, "aes-192-gcm"),
                    s(:str, "aes-256-gcm")), :each),
                s(:args,
                  s(:arg, :algo)),
                s(:begin,
                  s(:lvasgn, :pt,
                    s(:str, "You should all use Authenticated Encryption!")),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :cipher),
                      s(:lvasgn, :key),
                      s(:lvasgn, :iv)),
                    s(:send, nil, :new_encryptor,
                      s(:lvar, :algo))),
                  s(:send,
                    s(:lvar, :cipher), :auth_data=,
                    s(:str, "aad")),
                  s(:lvasgn, :ct,
                    s(:send,
                      s(:send,
                        s(:lvar, :cipher), :update,
                        s(:lvar, :pt)), :+,
                      s(:send,
                        s(:lvar, :cipher), :final))),
                  s(:lvasgn, :tag,
                    s(:send,
                      s(:lvar, :cipher), :auth_tag)),
                  s(:send, nil, :assert_equal,
                    s(:int, 16),
                    s(:send,
                      s(:lvar, :tag), :size)),
                  s(:lvasgn, :decipher,
                    s(:send, nil, :new_decryptor,
                      s(:lvar, :algo),
                      s(:lvar, :key),
                      s(:lvar, :iv))),
                  s(:send,
                    s(:lvar, :decipher), :auth_tag=,
                    s(:lvar, :tag)),
                  s(:send,
                    s(:lvar, :decipher), :auth_data=,
                    s(:str, "aad")),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :pt),
                    s(:send,
                      s(:send,
                        s(:lvar, :decipher), :update,
                        s(:lvar, :ct)), :+,
                      s(:send,
                        s(:lvar, :decipher), :final)))))),
            s(:def, :test_aes_gcm_short_tag,
              s(:args),
              s(:block,
                s(:send,
                  s(:array,
                    s(:str, "aes-128-gcm"),
                    s(:str, "aes-192-gcm"),
                    s(:str, "aes-256-gcm")), :each),
                s(:args,
                  s(:arg, :algo)),
                s(:begin,
                  s(:lvasgn, :pt,
                    s(:str, "You should all use Authenticated Encryption!")),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :cipher),
                      s(:lvasgn, :key),
                      s(:lvasgn, :iv)),
                    s(:send, nil, :new_encryptor,
                      s(:lvar, :algo))),
                  s(:send,
                    s(:lvar, :cipher), :auth_data=,
                    s(:str, "aad")),
                  s(:lvasgn, :ct,
                    s(:send,
                      s(:send,
                        s(:lvar, :cipher), :update,
                        s(:lvar, :pt)), :+,
                      s(:send,
                        s(:lvar, :cipher), :final))),
                  s(:lvasgn, :tag,
                    s(:send,
                      s(:lvar, :cipher), :auth_tag,
                      s(:int, 8))),
                  s(:send, nil, :assert_equal,
                    s(:int, 8),
                    s(:send,
                      s(:lvar, :tag), :size)),
                  s(:lvasgn, :decipher,
                    s(:send, nil, :new_decryptor,
                      s(:lvar, :algo),
                      s(:lvar, :key),
                      s(:lvar, :iv))),
                  s(:send,
                    s(:lvar, :decipher), :auth_tag=,
                    s(:lvar, :tag)),
                  s(:send,
                    s(:lvar, :decipher), :auth_data=,
                    s(:str, "aad")),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :pt),
                    s(:send,
                      s(:send,
                        s(:lvar, :decipher), :update,
                        s(:lvar, :ct)), :+,
                      s(:send,
                        s(:lvar, :decipher), :final)))))),
            s(:def, :test_aes_gcm_wrong_tag,
              s(:args),
              s(:begin,
                s(:lvasgn, :pt,
                  s(:str, "You should all use Authenticated Encryption!")),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :cipher),
                    s(:lvasgn, :key),
                    s(:lvasgn, :iv)),
                  s(:send, nil, :new_encryptor,
                    s(:str, "aes-128-gcm"))),
                s(:send,
                  s(:lvar, :cipher), :auth_data=,
                  s(:str, "aad")),
                s(:lvasgn, :ct,
                  s(:send,
                    s(:send,
                      s(:lvar, :cipher), :update,
                      s(:lvar, :pt)), :+,
                    s(:send,
                      s(:lvar, :cipher), :final))),
                s(:lvasgn, :tag,
                  s(:send,
                    s(:lvar, :cipher), :auth_tag)),
                s(:lvasgn, :decipher,
                  s(:send, nil, :new_decryptor,
                    s(:str, "aes-128-gcm"),
                    s(:lvar, :key),
                    s(:lvar, :iv))),
                s(:send,
                  s(:lvar, :tag), :setbyte,
                  s(:int, -1),
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :tag), :getbyte,
                          s(:int, -1)), :+,
                        s(:int, 1))), :&,
                    s(:int, 255))),
                s(:send,
                  s(:lvar, :decipher), :auth_tag=,
                  s(:lvar, :tag)),
                s(:send,
                  s(:lvar, :decipher), :auth_data=,
                  s(:str, "aad")),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :Cipher), :CipherError)),
                  s(:args),
                  s(:send,
                    s(:send,
                      s(:lvar, :decipher), :update,
                      s(:lvar, :ct)), :+,
                    s(:send,
                      s(:lvar, :decipher), :final))))),
            s(:def, :test_aes_gcm_wrong_auth_data,
              s(:args),
              s(:begin,
                s(:lvasgn, :pt,
                  s(:str, "You should all use Authenticated Encryption!")),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :cipher),
                    s(:lvasgn, :key),
                    s(:lvasgn, :iv)),
                  s(:send, nil, :new_encryptor,
                    s(:str, "aes-128-gcm"))),
                s(:send,
                  s(:lvar, :cipher), :auth_data=,
                  s(:str, "aad")),
                s(:lvasgn, :ct,
                  s(:send,
                    s(:send,
                      s(:lvar, :cipher), :update,
                      s(:lvar, :pt)), :+,
                    s(:send,
                      s(:lvar, :cipher), :final))),
                s(:lvasgn, :tag,
                  s(:send,
                    s(:lvar, :cipher), :auth_tag)),
                s(:lvasgn, :decipher,
                  s(:send, nil, :new_decryptor,
                    s(:str, "aes-128-gcm"),
                    s(:lvar, :key),
                    s(:lvar, :iv))),
                s(:send,
                  s(:lvar, :decipher), :auth_tag=,
                  s(:lvar, :tag)),
                s(:send,
                  s(:lvar, :decipher), :auth_data=,
                  s(:str, "daa")),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :Cipher), :CipherError)),
                  s(:args),
                  s(:send,
                    s(:send,
                      s(:lvar, :decipher), :update,
                      s(:lvar, :ct)), :+,
                    s(:send,
                      s(:lvar, :decipher), :final))))),
            s(:def, :test_aes_gcm_wrong_ciphertext,
              s(:args),
              s(:begin,
                s(:lvasgn, :pt,
                  s(:str, "You should all use Authenticated Encryption!")),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :cipher),
                    s(:lvasgn, :key),
                    s(:lvasgn, :iv)),
                  s(:send, nil, :new_encryptor,
                    s(:str, "aes-128-gcm"))),
                s(:send,
                  s(:lvar, :cipher), :auth_data=,
                  s(:str, "aad")),
                s(:lvasgn, :ct,
                  s(:send,
                    s(:send,
                      s(:lvar, :cipher), :update,
                      s(:lvar, :pt)), :+,
                    s(:send,
                      s(:lvar, :cipher), :final))),
                s(:lvasgn, :tag,
                  s(:send,
                    s(:lvar, :cipher), :auth_tag)),
                s(:lvasgn, :decipher,
                  s(:send, nil, :new_decryptor,
                    s(:str, "aes-128-gcm"),
                    s(:lvar, :key),
                    s(:lvar, :iv))),
                s(:send,
                  s(:lvar, :decipher), :auth_tag=,
                  s(:lvar, :tag)),
                s(:send,
                  s(:lvar, :decipher), :auth_data=,
                  s(:str, "aad")),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :Cipher), :CipherError)),
                  s(:args),
                  s(:send,
                    s(:send,
                      s(:lvar, :decipher), :update,
                      s(:send,
                        s(:send,
                          s(:lvar, :ct), :[],
                          s(:irange,
                            s(:int, 0),
                            s(:int, -2))), :<<,
                        s(:send,
                          s(:send,
                            s(:lvar, :ct), :[],
                            s(:int, -1)), :succ))), :+,
                    s(:send,
                      s(:lvar, :decipher), :final)))))), nil),
        s(:send, nil, :private),
        s(:def, :new_encryptor,
          s(:args,
            s(:arg, :algo)),
          s(:begin,
            s(:lvasgn, :cipher,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :Cipher), :new,
                s(:lvar, :algo))),
            s(:send,
              s(:lvar, :cipher), :encrypt),
            s(:lvasgn, :key,
              s(:send,
                s(:lvar, :cipher), :random_key)),
            s(:lvasgn, :iv,
              s(:send,
                s(:lvar, :cipher), :random_iv)),
            s(:array,
              s(:lvar, :cipher),
              s(:lvar, :key),
              s(:lvar, :iv)))),
        s(:def, :new_decryptor,
          s(:args,
            s(:arg, :algo),
            s(:arg, :key),
            s(:arg, :iv)),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :Cipher), :new,
                s(:lvar, :algo)), :tap),
            s(:args,
              s(:arg, :cipher)),
            s(:begin,
              s(:send,
                s(:lvar, :cipher), :decrypt),
              s(:send,
                s(:lvar, :cipher), :key=,
                s(:lvar, :key)),
              s(:send,
                s(:lvar, :cipher), :iv=,
                s(:lvar, :iv))))))), nil))
