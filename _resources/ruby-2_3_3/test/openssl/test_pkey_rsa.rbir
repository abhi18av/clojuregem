s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "utils")),
  s(:send, nil, :require,
    s(:str, "base64")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :TestUtils)),
    s(:class,
      s(:const,
        s(:const, nil, :OpenSSL), :TestPKeyRSA),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :test_padding,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                s(:int, 512),
                s(:int, 3))),
            s(:lvasgn, :plain0,
              s(:send,
                s(:str, "x"), :*,
                s(:begin,
                  s(:send,
                    s(:int, 512), :/,
                    s(:int, 8))))),
            s(:lvasgn, :cipher,
              s(:send,
                s(:lvar, :key), :private_encrypt,
                s(:lvar, :plain0),
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :PKey), :RSA), :NO_PADDING))),
            s(:lvasgn, :plain1,
              s(:send,
                s(:lvar, :key), :public_decrypt,
                s(:lvar, :cipher),
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :PKey), :RSA), :NO_PADDING))),
            s(:send, nil, :assert_equal,
              s(:lvar, :plain0),
              s(:lvar, :plain1)),
            s(:lvasgn, :plain0,
              s(:send,
                s(:str, "x"), :*,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:int, 512), :/,
                      s(:int, 8)), :-,
                    s(:int, 11))))),
            s(:lvasgn, :cipher1,
              s(:send,
                s(:lvar, :key), :private_encrypt,
                s(:lvar, :plain0),
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :PKey), :RSA), :PKCS1_PADDING))),
            s(:lvasgn, :plain1,
              s(:send,
                s(:lvar, :key), :public_decrypt,
                s(:lvar, :cipher1),
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :PKey), :RSA), :PKCS1_PADDING))),
            s(:send, nil, :assert_equal,
              s(:lvar, :plain0),
              s(:lvar, :plain1)),
            s(:lvasgn, :cipherdef,
              s(:send,
                s(:lvar, :key), :private_encrypt,
                s(:lvar, :plain0))),
            s(:lvasgn, :plain1,
              s(:send,
                s(:lvar, :key), :public_decrypt,
                s(:lvar, :cipherdef))),
            s(:send, nil, :assert_equal,
              s(:lvar, :plain0),
              s(:lvar, :plain1)),
            s(:send, nil, :assert_equal,
              s(:lvar, :cipher1),
              s(:lvar, :cipherdef)),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:lvar, :key), :private_encrypt)),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:lvar, :key), :private_encrypt,
                s(:str, "hi"),
                s(:int, 1),
                s(:nil))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :RSAError)),
              s(:args),
              s(:send,
                s(:lvar, :key), :private_encrypt,
                s(:lvar, :plain0),
                s(:int, 666))))),
        s(:def, :test_private,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                s(:int, 512),
                s(:int, 3))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key), :private?)),
            s(:lvasgn, :key2,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                s(:send,
                  s(:lvar, :key), :to_der))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key2), :private?)),
            s(:lvasgn, :key3,
              s(:send,
                s(:lvar, :key), :public_key)),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :key3), :private?), :!)),
            s(:lvasgn, :key4,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                s(:send,
                  s(:lvar, :key3), :to_der))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :key4), :private?), :!)))),
        s(:def, :test_new,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                s(:int, 512))),
            s(:lvasgn, :pem,
              s(:send,
                s(:send,
                  s(:lvar, :key), :public_key), :to_pem)),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
              s(:lvar, :pem)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_new_exponent_default,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:int, 65537),
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                s(:int, 512)), :e))),
        s(:def, :test_new_with_exponent,
          s(:args),
          s(:block,
            s(:send,
              s(:int, 1), :upto,
              s(:int, 30)),
            s(:args,
              s(:arg, :idx)),
            s(:begin,
              s(:lvasgn, :e,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:int, 2), :**,
                      s(:lvar, :idx))), :+,
                  s(:int, 1))),
              s(:lvasgn, :key,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                  s(:int, 512),
                  s(:lvar, :e))),
              s(:send, nil, :assert_equal,
                s(:lvar, :e),
                s(:send,
                  s(:lvar, :key), :e))))),
        s(:def, :test_new_break,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_nil,
              s(:block,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                  s(:int, 1024)),
                s(:args),
                s(:break))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :RuntimeError)),
              s(:args),
              s(:block,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                  s(:int, 1024)),
                s(:args),
                s(:send, nil, :raise))))),
        s(:def, :test_sign_verify,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA1024)),
            s(:lvasgn, :digest,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Digest), :SHA1), :new)),
            s(:lvasgn, :data,
              s(:str, "Sign me!")),
            s(:lvasgn, :sig,
              s(:send,
                s(:lvar, :key), :sign,
                s(:lvar, :digest),
                s(:lvar, :data))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key), :verify,
                s(:lvar, :digest),
                s(:lvar, :sig),
                s(:lvar, :data))))),
        s(:def, :test_sign_verify_memory_leak,
          s(:args),
          s(:begin,
            s(:lvasgn, :bug9743,
              s(:str, "[ruby-core:62038] [Bug #9743]")),
            s(:send, nil, :assert_no_memory_leak,
              s(:array,
                s(:str, "-ropenssl")),
              s(:dstr,
                s(:str, "    data = 'Sign me!'\n"),
                s(:str, "    digest = OpenSSL::Digest::SHA512.new\n"),
                s(:str, "    pkey = OpenSSL::PKey::RSA.new(2048)\n"),
                s(:str, "    signature = pkey.sign(digest, data)\n"),
                s(:str, "    pub_key = pkey.public_key\n")),
              s(:dstr,
                s(:str, "    20_000.times {\n"),
                s(:str, "      pub_key.verify(digest, signature, data)\n"),
                s(:str, "    }\n")),
              s(:lvar, :bug9743),
              s(:hash,
                s(:pair,
                  s(:sym, :rss),
                  s(:true)),
                s(:pair,
                  s(:sym, :timeout),
                  s(:int, 30)))),
            s(:send, nil, :assert_no_memory_leak,
              s(:array,
                s(:str, "-ropenssl")),
              s(:dstr,
                s(:str, "    data = 'Sign me!'\n"),
                s(:str, "    digest = OpenSSL::Digest::SHA512.new\n"),
                s(:str, "    pkey = OpenSSL::PKey::RSA.new(2048)\n"),
                s(:str, "    signature = pkey.sign(digest, data)\n"),
                s(:str, "    pub_key = pkey.public_key\n")),
              s(:dstr,
                s(:str, "    20_000.times {\n"),
                s(:str, "      begin\n"),
                s(:str, "        pub_key.verify(digest, signature, 1)\n"),
                s(:str, "      rescue TypeError\n"),
                s(:str, "      end\n"),
                s(:str, "    }\n")),
              s(:lvar, :bug9743),
              s(:hash,
                s(:pair,
                  s(:sym, :rss),
                  s(:true)),
                s(:pair,
                  s(:sym, :timeout),
                  s(:int, 30)))))),
        s(:def, :test_digest_state_irrelevant_sign,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA1024)),
            s(:lvasgn, :digest1,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Digest), :SHA1), :new)),
            s(:lvasgn, :digest2,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Digest), :SHA1), :new)),
            s(:lvasgn, :data,
              s(:str, "Sign me!")),
            s(:send,
              s(:lvar, :digest1), :<<,
              s(:str, "Change state of digest1")),
            s(:lvasgn, :sig1,
              s(:send,
                s(:lvar, :key), :sign,
                s(:lvar, :digest1),
                s(:lvar, :data))),
            s(:lvasgn, :sig2,
              s(:send,
                s(:lvar, :key), :sign,
                s(:lvar, :digest2),
                s(:lvar, :data))),
            s(:send, nil, :assert_equal,
              s(:lvar, :sig1),
              s(:lvar, :sig2)))),
        s(:def, :test_digest_state_irrelevant_verify,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA1024)),
            s(:lvasgn, :digest1,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Digest), :SHA1), :new)),
            s(:lvasgn, :digest2,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Digest), :SHA1), :new)),
            s(:lvasgn, :data,
              s(:str, "Sign me!")),
            s(:lvasgn, :sig,
              s(:send,
                s(:lvar, :key), :sign,
                s(:lvar, :digest1),
                s(:lvar, :data))),
            s(:send,
              s(:lvar, :digest1), :reset),
            s(:send,
              s(:lvar, :digest1), :<<,
              s(:str, "Change state of digest1")),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key), :verify,
                s(:lvar, :digest1),
                s(:lvar, :sig),
                s(:lvar, :data))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key), :verify,
                s(:lvar, :digest2),
                s(:lvar, :sig),
                s(:lvar, :data))))),
        s(:def, :test_read_RSAPublicKey,
          s(:args),
          s(:begin,
            s(:lvasgn, :modulus,
              s(:int, 10664264882656732240315063514678024569492171560814833397008094754351396057398262071307709191731289492697968568138092052265293364132872019762410446076526351)),
            s(:lvasgn, :exponent,
              s(:int, 65537)),
            s(:lvasgn, :seq,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Sequence), :new,
                s(:array,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :ASN1), :Integer), :new,
                    s(:lvar, :modulus)),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :ASN1), :Integer), :new,
                    s(:lvar, :exponent))))),
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                s(:send,
                  s(:lvar, :seq), :to_der))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key), :public?)),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :key), :private?), :!)),
            s(:send, nil, :assert_equal,
              s(:lvar, :modulus),
              s(:send,
                s(:lvar, :key), :n)),
            s(:send, nil, :assert_equal,
              s(:lvar, :exponent),
              s(:send,
                s(:lvar, :key), :e)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :key), :d)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :key), :p)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :key), :q)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_read_RSA_PUBKEY,
          s(:args),
          s(:begin,
            s(:lvasgn, :modulus,
              s(:int, 10664264882656732240315063514678024569492171560814833397008094754351396057398262071307709191731289492697968568138092052265293364132872019762410446076526351)),
            s(:lvasgn, :exponent,
              s(:int, 65537)),
            s(:lvasgn, :algo,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :ObjectId), :new,
                s(:str, "rsaEncryption"))),
            s(:lvasgn, :null_params,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Null), :new,
                s(:nil))),
            s(:lvasgn, :algo_id,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Sequence), :new,
                s(:begin,
                  s(:array,
                    s(:lvar, :algo),
                    s(:lvar, :null_params))))),
            s(:lvasgn, :pub_key,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Sequence), :new,
                s(:array,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :ASN1), :Integer), :new,
                    s(:lvar, :modulus)),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :ASN1), :Integer), :new,
                    s(:lvar, :exponent))))),
            s(:lvasgn, :seq,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Sequence), :new,
                s(:array,
                  s(:lvar, :algo_id),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :ASN1), :BitString), :new,
                    s(:send,
                      s(:lvar, :pub_key), :to_der))))),
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                s(:send,
                  s(:lvar, :seq), :to_der))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key), :public?)),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :key), :private?), :!)),
            s(:send, nil, :assert_equal,
              s(:lvar, :modulus),
              s(:send,
                s(:lvar, :key), :n)),
            s(:send, nil, :assert_equal,
              s(:lvar, :exponent),
              s(:send,
                s(:lvar, :key), :e)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :key), :d)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :key), :p)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :key), :q)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_read_RSAPublicKey_pem,
          s(:args),
          s(:begin,
            s(:lvasgn, :modulus,
              s(:int, 9416340886363418692990906464787534854462163316648195510702927337693641649864839352187127240942127674615733815606532506566068276485089353644309497938966061)),
            s(:lvasgn, :exponent,
              s(:int, 65537)),
            s(:lvasgn, :pem,
              s(:dstr,
                s(:str, "-----BEGIN RSA PUBLIC KEY-----\n"),
                s(:str, "MEgCQQCzyh2RIZK62E2PbTWqUljD+K23XR9AGBKNtXjal6WD2yRGcLqzPJLNCa60\n"),
                s(:str, "AudJR1JobbIbDJrQu6AXnWh5k/YtAgMBAAE=\n"),
                s(:str, "-----END RSA PUBLIC KEY-----\n"))),
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                s(:lvar, :pem))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key), :public?)),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :key), :private?), :!)),
            s(:send, nil, :assert_equal,
              s(:lvar, :modulus),
              s(:send,
                s(:lvar, :key), :n)),
            s(:send, nil, :assert_equal,
              s(:lvar, :exponent),
              s(:send,
                s(:lvar, :key), :e)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :key), :d)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :key), :p)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :key), :q)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_read_RSA_PUBKEY_pem,
          s(:args),
          s(:begin,
            s(:lvasgn, :modulus,
              s(:int, 9416340886363418692990906464787534854462163316648195510702927337693641649864839352187127240942127674615733815606532506566068276485089353644309497938966061)),
            s(:lvasgn, :exponent,
              s(:int, 65537)),
            s(:lvasgn, :pem,
              s(:dstr,
                s(:str, "-----BEGIN PUBLIC KEY-----\n"),
                s(:str, "MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALPKHZEhkrrYTY9tNapSWMP4rbdd\n"),
                s(:str, "H0AYEo21eNqXpYPbJEZwurM8ks0JrrQC50lHUmhtshsMmtC7oBedaHmT9i0C\n"),
                s(:str, "AwEAAQ==\n"),
                s(:str, "-----END PUBLIC KEY-----\n"))),
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                s(:lvar, :pem))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key), :public?)),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :key), :private?), :!)),
            s(:send, nil, :assert_equal,
              s(:lvar, :modulus),
              s(:send,
                s(:lvar, :key), :n)),
            s(:send, nil, :assert_equal,
              s(:lvar, :exponent),
              s(:send,
                s(:lvar, :key), :e)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :key), :d)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :key), :p)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :key), :q)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_export_format_is_RSA_PUBKEY,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                s(:int, 512))),
            s(:lvasgn, :asn1,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode,
                s(:send,
                  s(:send,
                    s(:lvar, :key), :public_key), :to_der))),
            s(:send, nil, :check_PUBKEY,
              s(:lvar, :asn1),
              s(:lvar, :key)))),
        s(:def, :test_export_format_is_RSA_PUBKEY_pem,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                s(:int, 512))),
            s(:lvasgn, :pem,
              s(:send,
                s(:send,
                  s(:lvar, :key), :public_key), :to_pem)),
            s(:send,
              s(:lvar, :pem), :gsub!,
              s(:regexp,
                s(:str, "^-+(\\w|\\s)+-+$"),
                s(:regopt)),
              s(:str, "")),
            s(:lvasgn, :asn1,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode,
                s(:send,
                  s(:const, nil, :Base64), :decode64,
                  s(:lvar, :pem)))),
            s(:send, nil, :check_PUBKEY,
              s(:lvar, :asn1),
              s(:lvar, :key)))),
        s(:def, :test_read_private_key_der,
          s(:args),
          s(:begin,
            s(:lvasgn, :der,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA1024), :to_der)),
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :read,
                s(:lvar, :der))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key), :private?)),
            s(:send, nil, :assert_equal,
              s(:lvar, :der),
              s(:send,
                s(:lvar, :key), :to_der)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_read_private_key_pem,
          s(:args),
          s(:begin,
            s(:lvasgn, :pem,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA1024), :to_pem)),
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :read,
                s(:lvar, :pem))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key), :private?)),
            s(:send, nil, :assert_equal,
              s(:lvar, :pem),
              s(:send,
                s(:lvar, :key), :to_pem)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_read_public_key_der,
          s(:args),
          s(:begin,
            s(:lvasgn, :der,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA1024), :public_key), :to_der)),
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :read,
                s(:lvar, :der))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :key), :private?), :!)),
            s(:send, nil, :assert_equal,
              s(:lvar, :der),
              s(:send,
                s(:lvar, :key), :to_der)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_read_public_key_pem,
          s(:args),
          s(:begin,
            s(:lvasgn, :pem,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA1024), :public_key), :to_pem)),
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :read,
                s(:lvar, :pem))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :key), :private?), :!)),
            s(:send, nil, :assert_equal,
              s(:lvar, :pem),
              s(:send,
                s(:lvar, :key), :to_pem)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_read_private_key_pem_pw,
          s(:args),
          s(:begin,
            s(:lvasgn, :pem,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA1024), :to_pem,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Cipher), :new,
                  s(:str, "AES-128-CBC")),
                s(:str, "secret"))),
            s(:lvasgn, :key,
              s(:block,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :read,
                  s(:lvar, :pem)),
                s(:args),
                s(:str, "secret"))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key), :private?)),
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :read,
                s(:lvar, :pem),
                s(:str, "secret"))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key), :private?)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_read_private_key_pem_pw_exception,
          s(:args),
          s(:begin,
            s(:lvasgn, :pem,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA1024), :to_pem,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Cipher), :new,
                  s(:str, "AES-128-CBC")),
                s(:str, "secret"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:block,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :read,
                  s(:lvar, :pem)),
                s(:args),
                s(:send, nil, :raise,
                  s(:const, nil, :RuntimeError)))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_export_password_length,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA1024)),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :OpenSSL), :OpenSSLError)),
              s(:args),
              s(:send,
                s(:lvar, :key), :export,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Cipher), :new,
                  s(:str, "AES-128-CBC")),
                s(:str, "sec"))),
            s(:lvasgn, :pem,
              s(:send,
                s(:lvar, :key), :export,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Cipher), :new,
                  s(:str, "AES-128-CBC")),
                s(:str, "secr"))),
            s(:send, nil, :assert,
              s(:lvar, :pem)))),
        s(:send, nil, :private),
        s(:def, :check_PUBKEY,
          s(:args,
            s(:arg, :asn1),
            s(:arg, :key)),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :SEQUENCE),
              s(:send,
                s(:lvar, :asn1), :tag)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:lvar, :asn1), :value), :size)),
            s(:lvasgn, :seq,
              s(:send,
                s(:lvar, :asn1), :value)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :SEQUENCE),
              s(:send,
                s(:send,
                  s(:lvar, :seq), :[],
                  s(:int, 0)), :tag)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :seq), :[],
                    s(:int, 0)), :value), :size)),
            s(:lvasgn, :algo_id,
              s(:send,
                s(:send,
                  s(:lvar, :seq), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :OBJECT),
              s(:send,
                s(:send,
                  s(:lvar, :algo_id), :[],
                  s(:int, 0)), :tag)),
            s(:send, nil, :assert_equal,
              s(:str, "rsaEncryption"),
              s(:send,
                s(:send,
                  s(:lvar, :algo_id), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :NULL),
              s(:send,
                s(:send,
                  s(:lvar, :algo_id), :[],
                  s(:int, 1)), :tag)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:send,
                  s(:lvar, :algo_id), :[],
                  s(:int, 1)), :value)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :BIT_STRING),
              s(:send,
                s(:send,
                  s(:lvar, :seq), :[],
                  s(:int, 1)), :tag)),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:send,
                  s(:lvar, :seq), :[],
                  s(:int, 1)), :unused_bits)),
            s(:lvasgn, :pub_key,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode,
                s(:send,
                  s(:send,
                    s(:lvar, :seq), :[],
                    s(:int, 1)), :value))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :SEQUENCE),
              s(:send,
                s(:lvar, :pub_key), :tag)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:lvar, :pub_key), :value), :size)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :INTEGER),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :pub_key), :value), :[],
                  s(:int, 0)), :tag)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :key), :n),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :pub_key), :value), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :INTEGER),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :pub_key), :value), :[],
                  s(:int, 1)), :tag)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :key), :e),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :pub_key), :value), :[],
                  s(:int, 1)), :value)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))))), nil))
