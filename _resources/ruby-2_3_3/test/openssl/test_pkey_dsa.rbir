s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "utils")),
  s(:send, nil, :require,
    s(:str, "base64")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :TestUtils)),
    s(:class,
      s(:const,
        s(:const, nil, :OpenSSL), :TestPKeyDSA),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :test_private,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :DSA), :new,
                s(:int, 256))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key), :private?)),
            s(:lvasgn, :key2,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :DSA), :new,
                s(:send,
                  s(:lvar, :key), :to_der))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key2), :private?)),
            s(:lvasgn, :key3,
              s(:send,
                s(:lvar, :key), :public_key)),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :key3), :private?), :!)),
            s(:lvasgn, :key4,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :DSA), :new,
                s(:send,
                  s(:lvar, :key3), :to_der))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :key4), :private?), :!)))),
        s(:def, :test_new,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :DSA), :new,
                s(:int, 256))),
            s(:lvasgn, :pem,
              s(:send,
                s(:send,
                  s(:lvar, :key), :public_key), :to_pem)),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :DSA), :new,
              s(:lvar, :pem)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_new_break,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_nil,
              s(:block,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :PKey), :DSA), :new,
                  s(:int, 512)),
                s(:args),
                s(:break))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :RuntimeError)),
              s(:args),
              s(:block,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :PKey), :DSA), :new,
                  s(:int, 512)),
                s(:args),
                s(:send, nil, :raise))))),
        s(:def, :test_sys_sign_verify,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DSA256)),
            s(:lvasgn, :data,
              s(:str, "Sign me!")),
            s(:lvasgn, :digest,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Digest), :SHA1), :digest,
                s(:lvar, :data))),
            s(:lvasgn, :sig,
              s(:send,
                s(:lvar, :key), :syssign,
                s(:lvar, :digest))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key), :sysverify,
                s(:lvar, :digest),
                s(:lvar, :sig))))),
        s(:def, :test_sign_verify,
          s(:args),
          s(:send, nil, :check_sign_verify,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :Digest), :DSS1), :new))),
        s(:if,
          s(:begin,
            s(:send,
              s(:const,
                s(:const, nil, :OpenSSL), :OPENSSL_VERSION_NUMBER), :>,
              s(:int, 268435456))),
          s(:begin,
            s(:def, :test_sign_verify_sha1,
              s(:args),
              s(:send, nil, :check_sign_verify,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:def, :test_sign_verify_sha256,
              s(:args),
              s(:send, nil, :check_sign_verify,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA256), :new)))), nil),
        s(:def, :test_digest_state_irrelevant_verify,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DSA256)),
            s(:lvasgn, :digest1,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Digest), :DSS1), :new)),
            s(:lvasgn, :digest2,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Digest), :DSS1), :new)),
            s(:lvasgn, :data,
              s(:str, "Sign me!")),
            s(:lvasgn, :sig,
              s(:send,
                s(:lvar, :key), :sign,
                s(:lvar, :digest1),
                s(:lvar, :data))),
            s(:send,
              s(:lvar, :digest1), :reset),
            s(:send,
              s(:lvar, :digest1), :<<,
              s(:str, "Change state of digest1")),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key), :verify,
                s(:lvar, :digest1),
                s(:lvar, :sig),
                s(:lvar, :data))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key), :verify,
                s(:lvar, :digest2),
                s(:lvar, :sig),
                s(:lvar, :data))))),
        s(:def, :test_read_DSA_PUBKEY,
          s(:args),
          s(:begin,
            s(:lvasgn, :p,
              s(:int, 7188211954100152441468596248707152960171255279130004340103875772401008316444412091945435731597638374542374929457672178957081124632837356913990200866056699)),
            s(:lvasgn, :q,
              s(:int, 957032439192465935099784319494405376402293318491)),
            s(:lvasgn, :g,
              s(:int, 122928973717064636255205666162891733518376475981809749897454444301389338825906076467196186192907631719698166056821519884939865041993585844526937010746285)),
            s(:lvasgn, :y,
              s(:int, 1235756183583465414789073313502727057075641172514181938731172021825149551960029708596057102104063395063907739571546165975727369183495540798749742124846271)),
            s(:lvasgn, :algo,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :ObjectId), :new,
                s(:str, "DSA"))),
            s(:lvasgn, :params,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Sequence), :new,
                s(:array,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :ASN1), :Integer), :new,
                    s(:lvar, :p)),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :ASN1), :Integer), :new,
                    s(:lvar, :q)),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :ASN1), :Integer), :new,
                    s(:lvar, :g))))),
            s(:lvasgn, :algo_id,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Sequence), :new,
                s(:begin,
                  s(:array,
                    s(:lvar, :algo),
                    s(:lvar, :params))))),
            s(:lvasgn, :pub_key,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Integer), :new,
                s(:lvar, :y))),
            s(:lvasgn, :seq,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ASN1), :Sequence), :new,
                s(:array,
                  s(:lvar, :algo_id),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :ASN1), :BitString), :new,
                    s(:send,
                      s(:lvar, :pub_key), :to_der))))),
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :DSA), :new,
                s(:send,
                  s(:lvar, :seq), :to_der))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key), :public?)),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :key), :private?), :!)),
            s(:send, nil, :assert_equal,
              s(:lvar, :p),
              s(:send,
                s(:lvar, :key), :p)),
            s(:send, nil, :assert_equal,
              s(:lvar, :q),
              s(:send,
                s(:lvar, :key), :q)),
            s(:send, nil, :assert_equal,
              s(:lvar, :g),
              s(:send,
                s(:lvar, :key), :g)),
            s(:send, nil, :assert_equal,
              s(:lvar, :y),
              s(:send,
                s(:lvar, :key), :pub_key)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :key), :priv_key)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_read_DSAPublicKey_pem,
          s(:args),
          s(:begin,
            s(:lvasgn, :p,
              s(:int, 12260055936871293565827712385212529106400444521449663325576634579961635627321079536132296996623400607469624537382977152381984332395192110731059176842635699)),
            s(:lvasgn, :q,
              s(:int, 979494906553787301107832405790107343409973851677)),
            s(:lvasgn, :g,
              s(:int, 3731695366899846297271147240305742456317979984190506040697507048095553842519347835107669437969086119948785140453492839427038591924536131566350847469993845)),
            s(:lvasgn, :y,
              s(:int, 10505239074982761504240823422422813362721498896040719759460296306305851824586095328615844661273887569281276387605297130014564808567159023649684010036304695)),
            s(:lvasgn, :pem,
              s(:dstr,
                s(:str, "-----BEGIN DSA PUBLIC KEY-----\n"),
                s(:str, "MIHfAkEAyJSJ+g+P/knVcgDwwTzC7Pwg/pWs2EMd/r+lYlXhNfzg0biuXRul8VR4\n"),
                s(:str, "VUC/phySExY0PdcqItkR/xYAYNMbNwJBAOoV57X0FxKO/PrNa/MkoWzkCKV/hzhE\n"),
                s(:str, "p0zbFdsicw+hIjJ7S6Sd/FlDlo89HQZ2FuvWJ6wGLM1j00r39+F2qbMCFQCrkhIX\n"),
                s(:str, "SG+is37hz1IaBeEudjB2HQJAR0AloavBvtsng8obsjLb7EKnB+pSeHr/BdIQ3VH7\n"),
                s(:str, "fWLOqqkzFeRrYMDzUpl36XktY6Yq8EJYlW9pCMmBVNy/dQ==\n"),
                s(:str, "-----END DSA PUBLIC KEY-----\n"))),
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :DSA), :new,
                s(:lvar, :pem))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key), :public?)),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :key), :private?), :!)),
            s(:send, nil, :assert_equal,
              s(:lvar, :p),
              s(:send,
                s(:lvar, :key), :p)),
            s(:send, nil, :assert_equal,
              s(:lvar, :q),
              s(:send,
                s(:lvar, :key), :q)),
            s(:send, nil, :assert_equal,
              s(:lvar, :g),
              s(:send,
                s(:lvar, :key), :g)),
            s(:send, nil, :assert_equal,
              s(:lvar, :y),
              s(:send,
                s(:lvar, :key), :pub_key)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :key), :priv_key)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_read_DSA_PUBKEY_pem,
          s(:args),
          s(:begin,
            s(:lvasgn, :p,
              s(:int, 12260055936871293565827712385212529106400444521449663325576634579961635627321079536132296996623400607469624537382977152381984332395192110731059176842635699)),
            s(:lvasgn, :q,
              s(:int, 979494906553787301107832405790107343409973851677)),
            s(:lvasgn, :g,
              s(:int, 3731695366899846297271147240305742456317979984190506040697507048095553842519347835107669437969086119948785140453492839427038591924536131566350847469993845)),
            s(:lvasgn, :y,
              s(:int, 10505239074982761504240823422422813362721498896040719759460296306305851824586095328615844661273887569281276387605297130014564808567159023649684010036304695)),
            s(:lvasgn, :pem,
              s(:dstr,
                s(:str, "-----BEGIN PUBLIC KEY-----\n"),
                s(:str, "MIHxMIGoBgcqhkjOOAQBMIGcAkEA6hXntfQXEo78+s1r8yShbOQIpX+HOESnTNsV\n"),
                s(:str, "2yJzD6EiMntLpJ38WUOWjz0dBnYW69YnrAYszWPTSvf34XapswIVAKuSEhdIb6Kz\n"),
                s(:str, "fuHPUhoF4S52MHYdAkBHQCWhq8G+2yeDyhuyMtvsQqcH6lJ4ev8F0hDdUft9Ys6q\n"),
                s(:str, "qTMV5GtgwPNSmXfpeS1jpirwQliVb2kIyYFU3L91A0QAAkEAyJSJ+g+P/knVcgDw\n"),
                s(:str, "wTzC7Pwg/pWs2EMd/r+lYlXhNfzg0biuXRul8VR4VUC/phySExY0PdcqItkR/xYA\n"),
                s(:str, "YNMbNw==\n"),
                s(:str, "-----END PUBLIC KEY-----\n"))),
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :DSA), :new,
                s(:lvar, :pem))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key), :public?)),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :key), :private?), :!)),
            s(:send, nil, :assert_equal,
              s(:lvar, :p),
              s(:send,
                s(:lvar, :key), :p)),
            s(:send, nil, :assert_equal,
              s(:lvar, :q),
              s(:send,
                s(:lvar, :key), :q)),
            s(:send, nil, :assert_equal,
              s(:lvar, :g),
              s(:send,
                s(:lvar, :key), :g)),
            s(:send, nil, :assert_equal,
              s(:lvar, :y),
              s(:send,
                s(:lvar, :key), :pub_key)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :key), :priv_key)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_export_format_is_DSA_PUBKEY_pem,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DSA256)),
            s(:lvasgn, :pem,
              s(:send,
                s(:send,
                  s(:lvar, :key), :public_key), :to_pem)),
            s(:send,
              s(:lvar, :pem), :gsub!,
              s(:regexp,
                s(:str, "^-+(\\w|\\s)+-+$"),
                s(:regopt)),
              s(:str, "")),
            s(:lvasgn, :asn1,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode,
                s(:send,
                  s(:const, nil, :Base64), :decode64,
                  s(:lvar, :pem)))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :SEQUENCE),
              s(:send,
                s(:lvar, :asn1), :tag)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:lvar, :asn1), :value), :size)),
            s(:lvasgn, :seq,
              s(:send,
                s(:lvar, :asn1), :value)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :SEQUENCE),
              s(:send,
                s(:send,
                  s(:lvar, :seq), :[],
                  s(:int, 0)), :tag)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :seq), :[],
                    s(:int, 0)), :value), :size)),
            s(:lvasgn, :algo_id,
              s(:send,
                s(:send,
                  s(:lvar, :seq), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :OBJECT),
              s(:send,
                s(:send,
                  s(:lvar, :algo_id), :[],
                  s(:int, 0)), :tag)),
            s(:send, nil, :assert_equal,
              s(:str, "DSA"),
              s(:send,
                s(:send,
                  s(:lvar, :algo_id), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :SEQUENCE),
              s(:send,
                s(:send,
                  s(:lvar, :algo_id), :[],
                  s(:int, 1)), :tag)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :algo_id), :[],
                    s(:int, 1)), :value), :size)),
            s(:lvasgn, :params,
              s(:send,
                s(:send,
                  s(:lvar, :algo_id), :[],
                  s(:int, 1)), :value)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :INTEGER),
              s(:send,
                s(:send,
                  s(:lvar, :params), :[],
                  s(:int, 0)), :tag)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :key), :p),
              s(:send,
                s(:send,
                  s(:lvar, :params), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :INTEGER),
              s(:send,
                s(:send,
                  s(:lvar, :params), :[],
                  s(:int, 1)), :tag)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :key), :q),
              s(:send,
                s(:send,
                  s(:lvar, :params), :[],
                  s(:int, 1)), :value)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :INTEGER),
              s(:send,
                s(:send,
                  s(:lvar, :params), :[],
                  s(:int, 2)), :tag)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :key), :g),
              s(:send,
                s(:send,
                  s(:lvar, :params), :[],
                  s(:int, 2)), :value)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :BIT_STRING),
              s(:send,
                s(:send,
                  s(:lvar, :seq), :[],
                  s(:int, 1)), :tag)),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:send,
                  s(:lvar, :seq), :[],
                  s(:int, 1)), :unused_bits)),
            s(:lvasgn, :pub_key,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode,
                s(:send,
                  s(:send,
                    s(:lvar, :seq), :[],
                    s(:int, 1)), :value))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :INTEGER),
              s(:send,
                s(:lvar, :pub_key), :tag)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :key), :pub_key),
              s(:send,
                s(:lvar, :pub_key), :value)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_read_private_key_der,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DSA256)),
            s(:lvasgn, :der,
              s(:send,
                s(:lvar, :key), :to_der)),
            s(:lvasgn, :key2,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :read,
                s(:lvar, :der))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key2), :private?)),
            s(:send, nil, :assert_equal,
              s(:lvar, :der),
              s(:send,
                s(:lvar, :key2), :to_der)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_read_private_key_pem,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DSA256)),
            s(:lvasgn, :pem,
              s(:send,
                s(:lvar, :key), :to_pem)),
            s(:lvasgn, :key2,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :read,
                s(:lvar, :pem))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key2), :private?)),
            s(:send, nil, :assert_equal,
              s(:lvar, :pem),
              s(:send,
                s(:lvar, :key2), :to_pem)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_read_public_key_der,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DSA256), :public_key)),
            s(:lvasgn, :der,
              s(:send,
                s(:lvar, :key), :to_der)),
            s(:lvasgn, :key2,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :read,
                s(:lvar, :der))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :key2), :private?), :!)),
            s(:send, nil, :assert_equal,
              s(:lvar, :der),
              s(:send,
                s(:lvar, :key2), :to_der)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_read_public_key_pem,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DSA256), :public_key)),
            s(:lvasgn, :pem,
              s(:send,
                s(:lvar, :key), :to_pem)),
            s(:lvasgn, :key2,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :read,
                s(:lvar, :pem))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :key2), :private?), :!)),
            s(:send, nil, :assert_equal,
              s(:lvar, :pem),
              s(:send,
                s(:lvar, :key2), :to_pem)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_read_private_key_pem_pw,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DSA256)),
            s(:lvasgn, :pem,
              s(:send,
                s(:lvar, :key), :to_pem,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Cipher), :new,
                  s(:str, "AES-128-CBC")),
                s(:str, "secret"))),
            s(:lvasgn, :key2,
              s(:block,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :read,
                  s(:lvar, :pem)),
                s(:args),
                s(:str, "secret"))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key2), :private?)),
            s(:lvasgn, :key2,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :read,
                s(:lvar, :pem),
                s(:str, "secret"))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key2), :private?)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_export_password_length,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DSA256)),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :OpenSSL), :OpenSSLError)),
              s(:args),
              s(:send,
                s(:lvar, :key), :export,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Cipher), :new,
                  s(:str, "AES-128-CBC")),
                s(:str, "sec"))),
            s(:lvasgn, :pem,
              s(:send,
                s(:lvar, :key), :export,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Cipher), :new,
                  s(:str, "AES-128-CBC")),
                s(:str, "secr"))),
            s(:send, nil, :assert,
              s(:lvar, :pem)))),
        s(:send, nil, :private),
        s(:def, :check_sign_verify,
          s(:args,
            s(:arg, :digest)),
          s(:begin,
            s(:lvasgn, :key,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DSA256)),
            s(:lvasgn, :data,
              s(:str, "Sign me!")),
            s(:lvasgn, :sig,
              s(:send,
                s(:lvar, :key), :sign,
                s(:lvar, :digest),
                s(:lvar, :data))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :key), :verify,
                s(:lvar, :digest),
                s(:lvar, :sig),
                s(:lvar, :data))))))), nil))
