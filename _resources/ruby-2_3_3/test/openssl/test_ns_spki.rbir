s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "utils")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :TestUtils)),
    s(:class,
      s(:const,
        s(:const, nil, :OpenSSL), :TestNSSPI),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:ivasgn, :@b64,
              s(:str, "MIHFMHEwXDANBgkqhkiG9w0BAQEFAANLADBIAkEAnX0TILJrOMUue+PtwBRE6XfV")),
            s(:send,
              s(:ivar, :@b64), :<<,
              s(:str, "WtKQbsshxk5ZhcUwcwyvcnIq9b82QhJdoACdD34rqfCAIND46fXKQUnb0mvKzQID")),
            s(:send,
              s(:ivar, :@b64), :<<,
              s(:str, "AQABFhFNb3ppbGxhSXNNeUZyaWVuZDANBgkqhkiG9w0BAQQFAANBAAKv2Eex2n/S")),
            s(:send,
              s(:ivar, :@b64), :<<,
              s(:str, "r/7iJNroWlSzSMtTiQTEB+ADWHGj9u1xrUrOilq/o2cuQxIfZcNZkYAkWP4DubqW")),
            s(:send,
              s(:ivar, :@b64), :<<,
              s(:str, "i0//rgBvmco=")))),
        s(:def, :test_build_data,
          s(:args),
          s(:begin,
            s(:lvasgn, :key1,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA1024)),
            s(:lvasgn, :key2,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA2048)),
            s(:lvasgn, :spki,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Netscape), :SPKI), :new)),
            s(:send,
              s(:lvar, :spki), :challenge=,
              s(:str, "RandomString")),
            s(:send,
              s(:lvar, :spki), :public_key=,
              s(:send,
                s(:lvar, :key1), :public_key)),
            s(:send,
              s(:lvar, :spki), :sign,
              s(:lvar, :key1),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Digest), :SHA1), :new)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :spki), :verify,
                s(:send,
                  s(:lvar, :spki), :public_key))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :spki), :verify,
                s(:send,
                  s(:lvar, :key1), :public_key))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :spki), :verify,
                  s(:send,
                    s(:lvar, :key2), :public_key)), :!)),
            s(:lvasgn, :der,
              s(:send,
                s(:lvar, :spki), :to_der)),
            s(:lvasgn, :spki,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Netscape), :SPKI), :new,
                s(:lvar, :der))),
            s(:send, nil, :assert_equal,
              s(:str, "RandomString"),
              s(:send,
                s(:lvar, :spki), :challenge)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:lvar, :key1), :public_key), :to_der),
              s(:send,
                s(:send,
                  s(:lvar, :spki), :public_key), :to_der)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :spki), :verify,
                s(:send,
                  s(:lvar, :spki), :public_key))),
            s(:send, nil, :assert_not_nil,
              s(:send,
                s(:lvar, :spki), :to_text)))),
        s(:def, :test_decode_data,
          s(:args),
          s(:begin,
            s(:lvasgn, :spki,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Netscape), :SPKI), :new,
                s(:ivar, :@b64))),
            s(:send, nil, :assert_equal,
              s(:ivar, :@b64),
              s(:send,
                s(:lvar, :spki), :to_pem)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@b64), :unpack,
                  s(:str, "m")), :first),
              s(:send,
                s(:lvar, :spki), :to_der)),
            s(:send, nil, :assert_equal,
              s(:str, "MozillaIsMyFriend"),
              s(:send,
                s(:lvar, :spki), :challenge)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :RSA),
              s(:send,
                s(:send,
                  s(:lvar, :spki), :public_key), :class)),
            s(:lvasgn, :spki,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Netscape), :SPKI), :new,
                s(:send,
                  s(:send,
                    s(:ivar, :@b64), :unpack,
                    s(:str, "m")), :first))),
            s(:send, nil, :assert_equal,
              s(:ivar, :@b64),
              s(:send,
                s(:lvar, :spki), :to_pem)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@b64), :unpack,
                  s(:str, "m")), :first),
              s(:send,
                s(:lvar, :spki), :to_der)),
            s(:send, nil, :assert_equal,
              s(:str, "MozillaIsMyFriend"),
              s(:send,
                s(:lvar, :spki), :challenge)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :RSA),
              s(:send,
                s(:send,
                  s(:lvar, :spki), :public_key), :class)))))), nil))
