s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "utils")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :TestUtils)),
    s(:class,
      s(:const,
        s(:const, nil, :OpenSSL), :TestSSL),
      s(:const,
        s(:const, nil, :OpenSSL), :SSLTestCase),
      s(:begin,
        s(:def, :test_ctx_setup,
          s(:args),
          s(:begin,
            s(:lvasgn, :ctx,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :ctx), :setup),
              s(:true)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :ctx), :setup),
              s(:nil)))),
        s(:def, :test_ctx_setup_invalid,
          s(:args),
          s(:begin,
            s(:lvasgn, :m,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLContext), :METHODS), :first)),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :ArgumentError),
                s(:regexp,
                  s(:str, "null"),
                  s(:regopt))),
              s(:args),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :m)),
                  s(:str, "\u0000")))),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :ArgumentError),
                s(:regexp,
                  s(:str, "\\u{ff33 ff33 ff2c}"),
                  s(:regopt))),
              s(:args),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new,
                s(:str, "ＳＳＬ"))))),
        s(:def, :test_options_defaults_to_OP_ALL_on,
          s(:args),
          s(:begin,
            s(:lvasgn, :ctx,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :OP_ALL),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :OP_ALL), :&,
                  s(:send,
                    s(:lvar, :ctx), :options)))))),
        s(:def, :test_setting_twice,
          s(:args),
          s(:begin,
            s(:lvasgn, :ctx,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
            s(:send,
              s(:lvar, :ctx), :options=,
              s(:int, 4)),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :ctx), :options), :&,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :OP_ALL)))),
            s(:send,
              s(:lvar, :ctx), :options=,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :OP_ALL)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :OP_ALL),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :ctx), :options), :&,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :OP_ALL)))))),
        s(:def, :test_options_setting_nil_means_all,
          s(:args),
          s(:begin,
            s(:lvasgn, :ctx,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
            s(:send,
              s(:lvar, :ctx), :options=,
              s(:nil)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :OP_ALL),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :OP_ALL), :&,
                  s(:send,
                    s(:lvar, :ctx), :options)))))),
        s(:def, :test_setting_options_raises_after_setup,
          s(:args),
          s(:begin,
            s(:lvasgn, :ctx,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
            s(:lvasgn, :options,
              s(:send,
                s(:lvar, :ctx), :options)),
            s(:send,
              s(:lvar, :ctx), :setup),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :RuntimeError)),
              s(:args),
              s(:send,
                s(:lvar, :ctx), :options=,
                s(:lvar, :options))))),
        s(:if,
          s(:defined?,
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :SSL), :OP_NO_COMPRESSION)),
          s(:def, :test_ctx_setup_no_compression,
            s(:args),
            s(:begin,
              s(:lvasgn, :ctx,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
              s(:send,
                s(:lvar, :ctx), :options=,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :OP_ALL), :|,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :OP_NO_COMPRESSION))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :ctx), :setup),
                s(:true)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :ctx), :setup),
                s(:nil)),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :OP_NO_COMPRESSION),
                s(:send,
                  s(:send,
                    s(:lvar, :ctx), :options), :&,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :OP_NO_COMPRESSION))))), nil),
        s(:def, :test_ctx_setup_with_extra_chain_cert,
          s(:args),
          s(:begin,
            s(:lvasgn, :ctx,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
            s(:send,
              s(:lvar, :ctx), :extra_chain_cert=,
              s(:array,
                s(:ivar, :@ca_cert),
                s(:ivar, :@cli_cert))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :ctx), :setup),
              s(:true)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :ctx), :setup),
              s(:nil)))),
        s(:def, :test_not_started_session,
          s(:args),
          s(:begin,
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "mswin|mingw"),
                  s(:regopt)),
                s(:const, nil, :RUBY_PLATFORM)),
              s(:send, nil, :skip,
                s(:str, "non socket argument of SSLSocket.new is not supported on this platform")), nil),
            s(:block,
              s(:send, nil, :open,
                s(:str, "(string)")),
              s(:args,
                s(:arg, :f)),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                    s(:lvar, :f)), :cert))))),
        s(:def, :test_ssl_gets,
          s(:args),
          s(:block,
            s(:send, nil, :start_server,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
              s(:true)),
            s(:args,
              s(:arg, :server),
              s(:arg, :port)),
            s(:block,
              s(:send, nil, :server_connect,
                s(:lvar, :port)),
              s(:args,
                s(:arg, :ssl)),
              s(:begin,
                s(:send,
                  s(:lvar, :ssl), :write,
                  s(:str, "abc\n")),
                s(:send,
                  s(:const, nil, :IO), :select,
                  s(:array,
                    s(:lvar, :ssl))),
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :ssl), :gets)),
                s(:send, nil, :assert_equal,
                  s(:str, "abc\n"),
                  s(:lvar, :line)),
                s(:send, nil, :assert_equal,
                  s(:const,
                    s(:const, nil, :Encoding), :BINARY),
                  s(:send,
                    s(:lvar, :line), :encoding)))))),
        s(:def, :test_ssl_read_nonblock,
          s(:args),
          s(:block,
            s(:send, nil, :start_server,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
              s(:true)),
            s(:args,
              s(:arg, :server),
              s(:arg, :port)),
            s(:block,
              s(:send, nil, :server_connect,
                s(:lvar, :port)),
              s(:args,
                s(:arg, :ssl)),
              s(:begin,
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const, nil, :IO), :WaitReadable)),
                  s(:args),
                  s(:send,
                    s(:lvar, :ssl), :read_nonblock,
                    s(:int, 100))),
                s(:send,
                  s(:lvar, :ssl), :write,
                  s(:str, "abc\n")),
                s(:send,
                  s(:const, nil, :IO), :select,
                  s(:array,
                    s(:lvar, :ssl))),
                s(:send, nil, :assert_equal,
                  s(:str, "a"),
                  s(:send,
                    s(:lvar, :ssl), :read_nonblock,
                    s(:int, 1))),
                s(:send, nil, :assert_equal,
                  s(:str, "bc\n"),
                  s(:send,
                    s(:lvar, :ssl), :read_nonblock,
                    s(:int, 100))),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const, nil, :IO), :WaitReadable)),
                  s(:args),
                  s(:send,
                    s(:lvar, :ssl), :read_nonblock,
                    s(:int, 100))))))),
        s(:def, :test_ssl_sysread_blocking_error,
          s(:args),
          s(:block,
            s(:send, nil, :start_server,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
              s(:true)),
            s(:args,
              s(:arg, :server),
              s(:arg, :port)),
            s(:block,
              s(:send, nil, :server_connect,
                s(:lvar, :port)),
              s(:args,
                s(:arg, :ssl)),
              s(:begin,
                s(:send,
                  s(:lvar, :ssl), :write,
                  s(:str, "abc\n")),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :TypeError)),
                  s(:args),
                  s(:send,
                    s(:lvar, :ssl), :sysread,
                    s(:int, 4),
                    s(:hash,
                      s(:pair,
                        s(:sym, :exception),
                        s(:false))))),
                s(:lvasgn, :buf,
                  s(:str, "")),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :ArgumentError)),
                  s(:args),
                  s(:send,
                    s(:lvar, :ssl), :sysread,
                    s(:int, 4),
                    s(:lvar, :buf),
                    s(:hash,
                      s(:pair,
                        s(:sym, :exception),
                        s(:false))))),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:lvar, :buf)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :buf), :object_id),
                  s(:send,
                    s(:send,
                      s(:lvar, :ssl), :sysread,
                      s(:int, 4),
                      s(:lvar, :buf)), :object_id)),
                s(:send, nil, :assert_equal,
                  s(:str, "abc\n"),
                  s(:lvar, :buf)))))),
        s(:def, :test_connect_and_close,
          s(:args),
          s(:block,
            s(:send, nil, :start_server,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
              s(:true)),
            s(:args,
              s(:arg, :server),
              s(:arg, :port)),
            s(:begin,
              s(:lvasgn, :sock,
                s(:send,
                  s(:const, nil, :TCPSocket), :new,
                  s(:str, "127.0.0.1"),
                  s(:lvar, :port))),
              s(:lvasgn, :ssl,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                  s(:lvar, :sock))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :ssl), :connect)),
              s(:send,
                s(:lvar, :ssl), :close),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :sock), :closed?), :!)),
              s(:send,
                s(:lvar, :sock), :close),
              s(:lvasgn, :sock,
                s(:send,
                  s(:const, nil, :TCPSocket), :new,
                  s(:str, "127.0.0.1"),
                  s(:lvar, :port))),
              s(:lvasgn, :ssl,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                  s(:lvar, :sock))),
              s(:send,
                s(:lvar, :ssl), :sync_close=,
                s(:true)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :ssl), :connect)),
              s(:send,
                s(:lvar, :ssl), :close),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :sock), :closed?))))),
        s(:def, :test_read_and_write,
          s(:args),
          s(:block,
            s(:send, nil, :start_server,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
              s(:true)),
            s(:args,
              s(:arg, :server),
              s(:arg, :port)),
            s(:block,
              s(:send, nil, :server_connect,
                s(:lvar, :port)),
              s(:args,
                s(:arg, :ssl)),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:const, nil, :ITERATIONS), :times),
                  s(:args,
                    s(:arg, :i)),
                  s(:begin,
                    s(:lvasgn, :str,
                      s(:send,
                        s(:send,
                          s(:str, "x"), :*,
                          s(:int, 100)), :+,
                        s(:str, "\n"))),
                    s(:send,
                      s(:lvar, :ssl), :syswrite,
                      s(:lvar, :str)),
                    s(:lvasgn, :newstr,
                      s(:str, "")),
                    s(:until,
                      s(:send,
                        s(:send,
                          s(:lvar, :newstr), :size), :==,
                        s(:send,
                          s(:lvar, :str), :size)),
                      s(:send,
                        s(:lvar, :newstr), :<<,
                        s(:send,
                          s(:lvar, :ssl), :sysread,
                          s(:send,
                            s(:send,
                              s(:lvar, :str), :size), :-,
                            s(:send,
                              s(:lvar, :newstr), :size))))),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :str),
                      s(:lvar, :newstr)),
                    s(:lvasgn, :str,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:str, "x"), :*,
                            s(:lvar, :i)), :*,
                          s(:int, 100)), :+,
                        s(:str, "\n"))),
                    s(:lvasgn, :buf,
                      s(:str, "")),
                    s(:send,
                      s(:lvar, :ssl), :syswrite,
                      s(:lvar, :str)),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:lvar, :buf), :object_id),
                      s(:send,
                        s(:send,
                          s(:lvar, :ssl), :sysread,
                          s(:send,
                            s(:lvar, :str), :size),
                          s(:lvar, :buf)), :object_id)),
                    s(:lvasgn, :newstr,
                      s(:lvar, :buf)),
                    s(:until,
                      s(:send,
                        s(:send,
                          s(:lvar, :newstr), :size), :==,
                        s(:send,
                          s(:lvar, :str), :size)),
                      s(:send,
                        s(:lvar, :newstr), :<<,
                        s(:send,
                          s(:lvar, :ssl), :sysread,
                          s(:send,
                            s(:send,
                              s(:lvar, :str), :size), :-,
                            s(:send,
                              s(:lvar, :newstr), :size))))),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :str),
                      s(:lvar, :newstr)))),
                s(:block,
                  s(:send,
                    s(:const, nil, :ITERATIONS), :times),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :str,
                      s(:send,
                        s(:send,
                          s(:str, "x"), :*,
                          s(:int, 100)), :+,
                        s(:str, "\n"))),
                    s(:send,
                      s(:lvar, :ssl), :puts,
                      s(:lvar, :str)),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :str),
                      s(:send,
                        s(:lvar, :ssl), :gets)),
                    s(:lvasgn, :str,
                      s(:send,
                        s(:str, "x"), :*,
                        s(:int, 100))),
                    s(:send,
                      s(:lvar, :ssl), :puts,
                      s(:lvar, :str)),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :str),
                      s(:send,
                        s(:lvar, :ssl), :gets,
                        s(:str, "\n"),
                        s(:int, 100))),
                    s(:send, nil, :assert_equal,
                      s(:str, "\n"),
                      s(:send,
                        s(:lvar, :ssl), :gets)))),
                s(:block,
                  s(:send,
                    s(:const, nil, :ITERATIONS), :times),
                  s(:args,
                    s(:arg, :i)),
                  s(:begin,
                    s(:lvasgn, :str,
                      s(:send,
                        s(:send,
                          s(:str, "x"), :*,
                          s(:int, 100)), :+,
                        s(:str, "\n"))),
                    s(:send,
                      s(:lvar, :ssl), :write,
                      s(:lvar, :str)),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :str),
                      s(:send,
                        s(:lvar, :ssl), :read,
                        s(:send,
                          s(:lvar, :str), :size))),
                    s(:lvasgn, :str,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:str, "x"), :*,
                            s(:lvar, :i)), :*,
                          s(:int, 100)), :+,
                        s(:str, "\n"))),
                    s(:lvasgn, :buf,
                      s(:str, "")),
                    s(:send,
                      s(:lvar, :ssl), :write,
                      s(:lvar, :str)),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:lvar, :buf), :object_id),
                      s(:send,
                        s(:send,
                          s(:lvar, :ssl), :read,
                          s(:send,
                            s(:lvar, :str), :size),
                          s(:lvar, :buf)), :object_id)),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :str),
                      s(:lvar, :buf)))))))),
        s(:def, :test_copy_stream,
          s(:args),
          s(:block,
            s(:send, nil, :start_server,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
              s(:true)),
            s(:args,
              s(:arg, :server),
              s(:arg, :port)),
            s(:block,
              s(:send, nil, :server_connect,
                s(:lvar, :port)),
              s(:args,
                s(:arg, :ssl)),
              s(:block,
                s(:send,
                  s(:const, nil, :IO), :pipe),
                s(:args,
                  s(:arg, :r),
                  s(:arg, :w)),
                s(:begin,
                  s(:lvasgn, :str,
                    s(:str, "hello world\n")),
                  s(:send,
                    s(:lvar, :w), :write,
                    s(:lvar, :str)),
                  s(:send,
                    s(:const, nil, :IO), :copy_stream,
                    s(:lvar, :r),
                    s(:lvar, :ssl),
                    s(:send,
                      s(:lvar, :str), :bytesize)),
                  s(:send,
                    s(:const, nil, :IO), :copy_stream,
                    s(:lvar, :ssl),
                    s(:lvar, :w),
                    s(:send,
                      s(:lvar, :str), :bytesize)),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :str),
                    s(:send,
                      s(:lvar, :r), :read,
                      s(:send,
                        s(:lvar, :str), :bytesize)))))))),
        s(:def, :test_client_auth_failure,
          s(:args),
          s(:begin,
            s(:lvasgn, :vflag,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_PEER), :|,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_FAIL_IF_NO_PEER_CERT))),
            s(:block,
              s(:send, nil, :start_server,
                s(:lvar, :vflag),
                s(:true),
                s(:hash,
                  s(:pair,
                    s(:sym, :ignore_listener_error),
                    s(:true)))),
              s(:args,
                s(:arg, :server),
                s(:arg, :port)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLError),
                  s(:const,
                    s(:const, nil, :Errno), :ECONNRESET)),
                s(:args),
                s(:begin,
                  s(:lvasgn, :sock,
                    s(:send,
                      s(:const, nil, :TCPSocket), :new,
                      s(:str, "127.0.0.1"),
                      s(:lvar, :port))),
                  s(:lvasgn, :ssl,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                      s(:lvar, :sock))),
                  s(:send,
                    s(:lvar, :ssl), :sync_close=,
                    s(:true)),
                  s(:kwbegin,
                    s(:ensure,
                      s(:send,
                        s(:lvar, :ssl), :connect),
                      s(:send,
                        s(:lvar, :ssl), :close)))))))),
        s(:def, :test_client_auth_success,
          s(:args),
          s(:begin,
            s(:lvasgn, :vflag,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_PEER), :|,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_FAIL_IF_NO_PEER_CERT))),
            s(:block,
              s(:send, nil, :start_server,
                s(:lvar, :vflag),
                s(:true)),
              s(:args,
                s(:arg, :server),
                s(:arg, :port)),
              s(:begin,
                s(:lvasgn, :ctx,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                s(:send,
                  s(:lvar, :ctx), :key=,
                  s(:ivar, :@cli_key)),
                s(:send,
                  s(:lvar, :ctx), :cert=,
                  s(:ivar, :@cli_cert)),
                s(:block,
                  s(:send, nil, :server_connect,
                    s(:lvar, :port),
                    s(:lvar, :ctx)),
                  s(:args,
                    s(:arg, :ssl)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :ssl), :puts,
                      s(:str, "foo")),
                    s(:send, nil, :assert_equal,
                      s(:str, "foo\n"),
                      s(:send,
                        s(:lvar, :ssl), :gets)))),
                s(:lvasgn, :called,
                  s(:nil)),
                s(:lvasgn, :ctx,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                s(:send,
                  s(:lvar, :ctx), :client_cert_cb=,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Proc), :new),
                    s(:args,
                      s(:arg, :sslconn)),
                    s(:begin,
                      s(:lvasgn, :called,
                        s(:true)),
                      s(:array,
                        s(:ivar, :@cli_cert),
                        s(:ivar, :@cli_key))))),
                s(:block,
                  s(:send, nil, :server_connect,
                    s(:lvar, :port),
                    s(:lvar, :ctx)),
                  s(:args,
                    s(:arg, :ssl)),
                  s(:begin,
                    s(:send, nil, :assert,
                      s(:lvar, :called)),
                    s(:send,
                      s(:lvar, :ssl), :puts,
                      s(:str, "foo")),
                    s(:send, nil, :assert_equal,
                      s(:str, "foo\n"),
                      s(:send,
                        s(:lvar, :ssl), :gets)))))))),
        s(:def, :test_client_ca,
          s(:args),
          s(:begin,
            s(:lvasgn, :ctx_proc,
              s(:block,
                s(:send,
                  s(:const, nil, :Proc), :new),
                s(:args,
                  s(:arg, :ctx)),
                s(:send,
                  s(:lvar, :ctx), :client_ca=,
                  s(:array,
                    s(:ivar, :@ca_cert))))),
            s(:lvasgn, :vflag,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_PEER), :|,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_FAIL_IF_NO_PEER_CERT))),
            s(:block,
              s(:send, nil, :start_server,
                s(:lvar, :vflag),
                s(:true),
                s(:hash,
                  s(:pair,
                    s(:sym, :ctx_proc),
                    s(:lvar, :ctx_proc)))),
              s(:args,
                s(:arg, :server),
                s(:arg, :port)),
              s(:begin,
                s(:lvasgn, :ctx,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                s(:lvasgn, :client_ca_from_server,
                  s(:nil)),
                s(:send,
                  s(:lvar, :ctx), :client_cert_cb=,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Proc), :new),
                    s(:args,
                      s(:arg, :sslconn)),
                    s(:begin,
                      s(:lvasgn, :client_ca_from_server,
                        s(:send,
                          s(:lvar, :sslconn), :client_ca)),
                      s(:array,
                        s(:ivar, :@cli_cert),
                        s(:ivar, :@cli_key))))),
                s(:block,
                  s(:send, nil, :server_connect,
                    s(:lvar, :port),
                    s(:lvar, :ctx)),
                  s(:args,
                    s(:arg, :ssl)),
                  s(:send, nil, :assert_equal,
                    s(:array,
                      s(:ivar, :@ca)),
                    s(:lvar, :client_ca_from_server))))))),
        s(:def, :test_read_nonblock_without_session,
          s(:args),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :OpenSSL), :TestUtils), :silent),
            s(:args),
            s(:block,
              s(:send, nil, :start_server,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
                s(:false)),
              s(:args,
                s(:arg, :server),
                s(:arg, :port)),
              s(:begin,
                s(:lvasgn, :sock,
                  s(:send,
                    s(:const, nil, :TCPSocket), :new,
                    s(:str, "127.0.0.1"),
                    s(:lvar, :port))),
                s(:lvasgn, :ssl,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                    s(:lvar, :sock))),
                s(:send,
                  s(:lvar, :ssl), :sync_close=,
                  s(:true)),
                s(:send, nil, :assert_equal,
                  s(:sym, :wait_readable),
                  s(:send,
                    s(:lvar, :ssl), :read_nonblock,
                    s(:int, 100),
                    s(:hash,
                      s(:pair,
                        s(:sym, :exception),
                        s(:false))))),
                s(:send,
                  s(:lvar, :ssl), :write,
                  s(:str, "abc\n")),
                s(:send,
                  s(:const, nil, :IO), :select,
                  s(:array,
                    s(:lvar, :ssl))),
                s(:send, nil, :assert_equal,
                  s(:str, "a"),
                  s(:send,
                    s(:lvar, :ssl), :read_nonblock,
                    s(:int, 1))),
                s(:send, nil, :assert_equal,
                  s(:str, "bc\n"),
                  s(:send,
                    s(:lvar, :ssl), :read_nonblock,
                    s(:int, 100))),
                s(:send, nil, :assert_equal,
                  s(:sym, :wait_readable),
                  s(:send,
                    s(:lvar, :ssl), :read_nonblock,
                    s(:int, 100),
                    s(:hash,
                      s(:pair,
                        s(:sym, :exception),
                        s(:false))))),
                s(:send,
                  s(:lvar, :ssl), :close))))),
        s(:def, :test_starttls,
          s(:args),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :OpenSSL), :TestUtils), :silent),
            s(:args),
            s(:block,
              s(:send, nil, :start_server,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
                s(:false)),
              s(:args,
                s(:arg, :server),
                s(:arg, :port)),
              s(:begin,
                s(:lvasgn, :sock,
                  s(:send,
                    s(:const, nil, :TCPSocket), :new,
                    s(:str, "127.0.0.1"),
                    s(:lvar, :port))),
                s(:lvasgn, :ssl,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                    s(:lvar, :sock))),
                s(:send,
                  s(:lvar, :ssl), :sync_close=,
                  s(:true)),
                s(:lvasgn, :str,
                  s(:send,
                    s(:send,
                      s(:str, "x"), :*,
                      s(:int, 1000)), :+,
                    s(:str, "\n"))),
                s(:block,
                  s(:send,
                    s(:const, nil, :ITERATIONS), :times),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:lvar, :ssl), :puts,
                      s(:lvar, :str)),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :str),
                      s(:send,
                        s(:lvar, :ssl), :gets)))),
                s(:send, nil, :starttls,
                  s(:lvar, :ssl)),
                s(:block,
                  s(:send,
                    s(:const, nil, :ITERATIONS), :times),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:lvar, :ssl), :puts,
                      s(:lvar, :str)),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :str),
                      s(:send,
                        s(:lvar, :ssl), :gets)))),
                s(:send,
                  s(:lvar, :ssl), :close))))),
        s(:def, :test_parallel,
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :GC), :start),
            s(:block,
              s(:send, nil, :start_server,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
                s(:true)),
              s(:args,
                s(:arg, :server),
                s(:arg, :port)),
              s(:begin,
                s(:lvasgn, :ssls,
                  s(:array)),
                s(:block,
                  s(:send,
                    s(:int, 10), :times),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :sock,
                      s(:send,
                        s(:const, nil, :TCPSocket), :new,
                        s(:str, "127.0.0.1"),
                        s(:lvar, :port))),
                    s(:lvasgn, :ssl,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                        s(:lvar, :sock))),
                    s(:send,
                      s(:lvar, :ssl), :connect),
                    s(:send,
                      s(:lvar, :ssl), :sync_close=,
                      s(:true)),
                    s(:send,
                      s(:lvar, :ssls), :<<,
                      s(:lvar, :ssl)))),
                s(:lvasgn, :str,
                  s(:send,
                    s(:send,
                      s(:str, "x"), :*,
                      s(:int, 1000)), :+,
                    s(:str, "\n"))),
                s(:block,
                  s(:send,
                    s(:const, nil, :ITERATIONS), :times),
                  s(:args),
                  s(:block,
                    s(:send,
                      s(:lvar, :ssls), :each),
                    s(:args,
                      s(:arg, :ssl)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :ssl), :puts,
                        s(:lvar, :str)),
                      s(:send, nil, :assert_equal,
                        s(:lvar, :str),
                        s(:send,
                          s(:lvar, :ssl), :gets))))),
                s(:block,
                  s(:send,
                    s(:lvar, :ssls), :each),
                  s(:args,
                    s(:arg, :ssl)),
                  s(:send,
                    s(:lvar, :ssl), :close)))))),
        s(:def, :test_verify_result,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :start_server,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
                s(:true),
                s(:hash,
                  s(:pair,
                    s(:sym, :ignore_listener_error),
                    s(:true)))),
              s(:args,
                s(:arg, :server),
                s(:arg, :port)),
              s(:begin,
                s(:lvasgn, :sock,
                  s(:send,
                    s(:const, nil, :TCPSocket), :new,
                    s(:str, "127.0.0.1"),
                    s(:lvar, :port))),
                s(:lvasgn, :ctx,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                s(:send,
                  s(:lvar, :ctx), :set_params),
                s(:lvasgn, :ssl,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                    s(:lvar, :sock),
                    s(:lvar, :ctx))),
                s(:send,
                  s(:lvar, :ssl), :sync_close=,
                  s(:true)),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:block,
                        s(:send, nil, :assert_raise,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :SSL), :SSLError)),
                        s(:args),
                        s(:send,
                          s(:lvar, :ssl), :connect)),
                      s(:send, nil, :assert_equal,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :X509), :V_ERR_SELF_SIGNED_CERT_IN_CHAIN),
                        s(:send,
                          s(:lvar, :ssl), :verify_result))),
                    s(:send,
                      s(:lvar, :ssl), :close))))),
            s(:block,
              s(:send, nil, :start_server,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
                s(:true)),
              s(:args,
                s(:arg, :server),
                s(:arg, :port)),
              s(:begin,
                s(:lvasgn, :sock,
                  s(:send,
                    s(:const, nil, :TCPSocket), :new,
                    s(:str, "127.0.0.1"),
                    s(:lvar, :port))),
                s(:lvasgn, :ctx,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                s(:send,
                  s(:lvar, :ctx), :set_params,
                  s(:hash,
                    s(:pair,
                      s(:sym, :verify_callback),
                      s(:block,
                        s(:send,
                          s(:const, nil, :Proc), :new),
                        s(:args,
                          s(:arg, :preverify_ok),
                          s(:arg, :store_ctx)),
                        s(:begin,
                          s(:send,
                            s(:lvar, :store_ctx), :error=,
                            s(:const,
                              s(:const,
                                s(:const, nil, :OpenSSL), :X509), :V_OK)),
                          s(:true)))))),
                s(:lvasgn, :ssl,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                    s(:lvar, :sock),
                    s(:lvar, :ctx))),
                s(:send,
                  s(:lvar, :ssl), :sync_close=,
                  s(:true)),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:send,
                        s(:lvar, :ssl), :connect),
                      s(:send, nil, :assert_equal,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :X509), :V_OK),
                        s(:send,
                          s(:lvar, :ssl), :verify_result))),
                    s(:send,
                      s(:lvar, :ssl), :close))))),
            s(:block,
              s(:send, nil, :start_server,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
                s(:true),
                s(:hash,
                  s(:pair,
                    s(:sym, :ignore_listener_error),
                    s(:true)))),
              s(:args,
                s(:arg, :server),
                s(:arg, :port)),
              s(:begin,
                s(:lvasgn, :sock,
                  s(:send,
                    s(:const, nil, :TCPSocket), :new,
                    s(:str, "127.0.0.1"),
                    s(:lvar, :port))),
                s(:lvasgn, :ctx,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                s(:send,
                  s(:lvar, :ctx), :set_params,
                  s(:hash,
                    s(:pair,
                      s(:sym, :verify_callback),
                      s(:block,
                        s(:send,
                          s(:const, nil, :Proc), :new),
                        s(:args,
                          s(:arg, :preverify_ok),
                          s(:arg, :store_ctx)),
                        s(:begin,
                          s(:send,
                            s(:lvar, :store_ctx), :error=,
                            s(:const,
                              s(:const,
                                s(:const, nil, :OpenSSL), :X509), :V_ERR_APPLICATION_VERIFICATION)),
                          s(:false)))))),
                s(:lvasgn, :ssl,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                    s(:lvar, :sock),
                    s(:lvar, :ctx))),
                s(:send,
                  s(:lvar, :ssl), :sync_close=,
                  s(:true)),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:block,
                        s(:send, nil, :assert_raise,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :SSL), :SSLError)),
                        s(:args),
                        s(:send,
                          s(:lvar, :ssl), :connect)),
                      s(:send, nil, :assert_equal,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :X509), :V_ERR_APPLICATION_VERIFICATION),
                        s(:send,
                          s(:lvar, :ssl), :verify_result))),
                    s(:send,
                      s(:lvar, :ssl), :close))))))),
        s(:def, :test_exception_in_verify_callback_is_ignored,
          s(:args),
          s(:block,
            s(:send, nil, :start_server,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
              s(:true),
              s(:hash,
                s(:pair,
                  s(:sym, :ignore_listener_error),
                  s(:true)))),
            s(:args,
              s(:arg, :server),
              s(:arg, :port)),
            s(:begin,
              s(:lvasgn, :sock,
                s(:send,
                  s(:const, nil, :TCPSocket), :new,
                  s(:str, "127.0.0.1"),
                  s(:lvar, :port))),
              s(:lvasgn, :ctx,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
              s(:send,
                s(:lvar, :ctx), :set_params,
                s(:hash,
                  s(:pair,
                    s(:sym, :verify_callback),
                    s(:block,
                      s(:send,
                        s(:const, nil, :Proc), :new),
                      s(:args,
                        s(:arg, :preverify_ok),
                        s(:arg, :store_ctx)),
                      s(:begin,
                        s(:send,
                          s(:lvar, :store_ctx), :error=,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :X509), :V_OK)),
                        s(:send, nil, :raise,
                          s(:const, nil, :RuntimeError))))))),
              s(:lvasgn, :ssl,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                  s(:lvar, :sock),
                  s(:lvar, :ctx))),
              s(:send,
                s(:lvar, :ssl), :sync_close=,
                s(:true)),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:block,
                      s(:send,
                        s(:const,
                          s(:const, nil, :OpenSSL), :TestUtils), :silent),
                      s(:args),
                      s(:block,
                        s(:send, nil, :assert_raise,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :SSL), :SSLError)),
                        s(:args),
                        s(:send,
                          s(:lvar, :ssl), :connect))),
                    s(:send, nil, :assert_equal,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :X509), :V_ERR_CERT_REJECTED),
                      s(:send,
                        s(:lvar, :ssl), :verify_result))),
                  s(:send,
                    s(:lvar, :ssl), :close)))))),
        s(:def, :test_sslctx_set_params,
          s(:args),
          s(:block,
            s(:send, nil, :start_server,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
              s(:true),
              s(:hash,
                s(:pair,
                  s(:sym, :ignore_listener_error),
                  s(:true)))),
            s(:args,
              s(:arg, :server),
              s(:arg, :port)),
            s(:begin,
              s(:lvasgn, :sock,
                s(:send,
                  s(:const, nil, :TCPSocket), :new,
                  s(:str, "127.0.0.1"),
                  s(:lvar, :port))),
              s(:lvasgn, :ctx,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
              s(:send,
                s(:lvar, :ctx), :set_params),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_PEER),
                s(:send,
                  s(:lvar, :ctx), :verify_mode)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLContext), :DEFAULT_PARAMS), :[],
                  s(:sym, :options)),
                s(:send,
                  s(:lvar, :ctx), :options)),
              s(:lvasgn, :ciphers,
                s(:send,
                  s(:lvar, :ctx), :ciphers)),
              s(:lvasgn, :ciphers_versions,
                s(:block,
                  s(:send,
                    s(:lvar, :ciphers), :collect),
                  s(:args,
                    s(:arg, :_),
                    s(:arg, :v),
                    s(:arg, :_),
                    s(:arg, :_)),
                  s(:lvar, :v))),
              s(:lvasgn, :ciphers_names,
                s(:block,
                  s(:send,
                    s(:lvar, :ciphers), :collect),
                  s(:args,
                    s(:arg, :v),
                    s(:arg, :_),
                    s(:arg, :_),
                    s(:arg, :_)),
                  s(:lvar, :v))),
              s(:send, nil, :assert,
                s(:block,
                  s(:send,
                    s(:lvar, :ciphers_names), :all?),
                  s(:args,
                    s(:arg, :v)),
                  s(:send,
                    s(:regexp,
                      s(:str, "ADH"),
                      s(:regopt)), :!~,
                    s(:lvar, :v)))),
              s(:send, nil, :assert,
                s(:block,
                  s(:send,
                    s(:lvar, :ciphers_versions), :all?),
                  s(:args,
                    s(:arg, :v)),
                  s(:send,
                    s(:regexp,
                      s(:str, "SSLv2"),
                      s(:regopt)), :!~,
                    s(:lvar, :v)))),
              s(:lvasgn, :ssl,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                  s(:lvar, :sock),
                  s(:lvar, :ctx))),
              s(:send,
                s(:lvar, :ssl), :sync_close=,
                s(:true)),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :SSLError)),
                      s(:args),
                      s(:send,
                        s(:lvar, :ssl), :connect)),
                    s(:send, nil, :assert_equal,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :X509), :V_ERR_SELF_SIGNED_CERT_IN_CHAIN),
                      s(:send,
                        s(:lvar, :ssl), :verify_result))),
                  s(:send,
                    s(:lvar, :ssl), :close)))))),
        s(:if,
          s(:const,
            s(:const,
              s(:const, nil, :OpenSSL), :ExtConfig), :TLS_DH_anon_WITH_AES_256_GCM_SHA384),
          s(:def, :test_post_connect_check_with_anon_ciphers,
            s(:args),
            s(:begin,
              s(:lvasgn, :sslerr,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :SSLError)),
              s(:block,
                s(:send, nil, :start_server,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
                  s(:true),
                  s(:hash,
                    s(:pair,
                      s(:sym, :use_anon_cipher),
                      s(:true)))),
                s(:args,
                  s(:arg, :server),
                  s(:arg, :port)),
                s(:begin,
                  s(:lvasgn, :ctx,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                  s(:send,
                    s(:lvar, :ctx), :ciphers=,
                    s(:str, "aNULL")),
                  s(:block,
                    s(:send, nil, :server_connect,
                      s(:lvar, :port),
                      s(:lvar, :ctx)),
                    s(:args,
                      s(:arg, :ssl)),
                    s(:begin,
                      s(:lvasgn, :msg,
                        s(:dstr,
                          s(:str, "Peer verification enabled, but no certificate received. Anonymous cipher suite "),
                          s(:str, "ADH-AES256-GCM-SHA384 was negotiated. Anonymous suites must be disabled to use peer verification."))),
                      s(:block,
                        s(:send, nil, :assert_raise_with_message,
                          s(:lvar, :sslerr),
                          s(:lvar, :msg)),
                        s(:args),
                        s(:send,
                          s(:lvar, :ssl), :post_connection_check,
                          s(:str, "localhost.localdomain"))))))))), nil),
        s(:def, :test_post_connection_check,
          s(:args),
          s(:begin,
            s(:lvasgn, :sslerr,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :SSLError)),
            s(:block,
              s(:send, nil, :start_server,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
                s(:true)),
              s(:args,
                s(:arg, :server),
                s(:arg, :port)),
              s(:block,
                s(:send, nil, :server_connect,
                  s(:lvar, :port)),
                s(:args,
                  s(:arg, :ssl)),
                s(:begin,
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:lvar, :sslerr)),
                    s(:args),
                    s(:send,
                      s(:lvar, :ssl), :post_connection_check,
                      s(:str, "localhost.localdomain"))),
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:lvar, :sslerr)),
                    s(:args),
                    s(:send,
                      s(:lvar, :ssl), :post_connection_check,
                      s(:str, "127.0.0.1"))),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:lvar, :ssl), :post_connection_check,
                      s(:str, "localhost"))),
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:lvar, :sslerr)),
                    s(:args),
                    s(:send,
                      s(:lvar, :ssl), :post_connection_check,
                      s(:str, "foo.example.com"))),
                  s(:lvasgn, :cert,
                    s(:send,
                      s(:lvar, :ssl), :peer_cert)),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                        s(:lvar, :cert),
                        s(:str, "localhost.localdomain")), :!)),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                        s(:lvar, :cert),
                        s(:str, "127.0.0.1")), :!)),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                      s(:lvar, :cert),
                      s(:str, "localhost"))),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                        s(:lvar, :cert),
                        s(:str, "foo.example.com")), :!))))),
            s(:lvasgn, :now,
              s(:send,
                s(:const, nil, :Time), :now)),
            s(:lvasgn, :exts,
              s(:array,
                s(:array,
                  s(:str, "keyUsage"),
                  s(:str, "keyEncipherment,digitalSignature"),
                  s(:true)),
                s(:array,
                  s(:str, "subjectAltName"),
                  s(:str, "DNS:localhost.localdomain"),
                  s(:false)),
                s(:array,
                  s(:str, "subjectAltName"),
                  s(:str, "IP:127.0.0.1"),
                  s(:false)))),
            s(:ivasgn, :@svr_cert,
              s(:send, nil, :issue_cert,
                s(:ivar, :@svr),
                s(:ivar, :@svr_key),
                s(:int, 4),
                s(:lvar, :now),
                s(:send,
                  s(:lvar, :now), :+,
                  s(:int, 1800)),
                s(:lvar, :exts),
                s(:ivar, :@ca_cert),
                s(:ivar, :@ca_key),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:block,
              s(:send, nil, :start_server,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
                s(:true)),
              s(:args,
                s(:arg, :server),
                s(:arg, :port)),
              s(:block,
                s(:send, nil, :server_connect,
                  s(:lvar, :port)),
                s(:args,
                  s(:arg, :ssl)),
                s(:begin,
                  s(:send, nil, :assert,
                    s(:send,
                      s(:lvar, :ssl), :post_connection_check,
                      s(:str, "localhost.localdomain"))),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:lvar, :ssl), :post_connection_check,
                      s(:str, "127.0.0.1"))),
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:lvar, :sslerr)),
                    s(:args),
                    s(:send,
                      s(:lvar, :ssl), :post_connection_check,
                      s(:str, "localhost"))),
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:lvar, :sslerr)),
                    s(:args),
                    s(:send,
                      s(:lvar, :ssl), :post_connection_check,
                      s(:str, "foo.example.com"))),
                  s(:lvasgn, :cert,
                    s(:send,
                      s(:lvar, :ssl), :peer_cert)),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                      s(:lvar, :cert),
                      s(:str, "localhost.localdomain"))),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                      s(:lvar, :cert),
                      s(:str, "127.0.0.1"))),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                        s(:lvar, :cert),
                        s(:str, "localhost")), :!)),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                        s(:lvar, :cert),
                        s(:str, "foo.example.com")), :!))))),
            s(:lvasgn, :now,
              s(:send,
                s(:const, nil, :Time), :now)),
            s(:lvasgn, :exts,
              s(:array,
                s(:array,
                  s(:str, "keyUsage"),
                  s(:str, "keyEncipherment,digitalSignature"),
                  s(:true)),
                s(:array,
                  s(:str, "subjectAltName"),
                  s(:str, "DNS:*.localdomain"),
                  s(:false)))),
            s(:ivasgn, :@svr_cert,
              s(:send, nil, :issue_cert,
                s(:ivar, :@svr),
                s(:ivar, :@svr_key),
                s(:int, 5),
                s(:lvar, :now),
                s(:send,
                  s(:lvar, :now), :+,
                  s(:int, 1800)),
                s(:lvar, :exts),
                s(:ivar, :@ca_cert),
                s(:ivar, :@ca_key),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:block,
              s(:send, nil, :start_server,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
                s(:true)),
              s(:args,
                s(:arg, :server),
                s(:arg, :port)),
              s(:block,
                s(:send, nil, :server_connect,
                  s(:lvar, :port)),
                s(:args,
                  s(:arg, :ssl)),
                s(:begin,
                  s(:send, nil, :assert,
                    s(:send,
                      s(:lvar, :ssl), :post_connection_check,
                      s(:str, "localhost.localdomain"))),
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:lvar, :sslerr)),
                    s(:args),
                    s(:send,
                      s(:lvar, :ssl), :post_connection_check,
                      s(:str, "127.0.0.1"))),
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:lvar, :sslerr)),
                    s(:args),
                    s(:send,
                      s(:lvar, :ssl), :post_connection_check,
                      s(:str, "localhost"))),
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:lvar, :sslerr)),
                    s(:args),
                    s(:send,
                      s(:lvar, :ssl), :post_connection_check,
                      s(:str, "foo.example.com"))),
                  s(:lvasgn, :cert,
                    s(:send,
                      s(:lvar, :ssl), :peer_cert)),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                      s(:lvar, :cert),
                      s(:str, "localhost.localdomain"))),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                        s(:lvar, :cert),
                        s(:str, "127.0.0.1")), :!)),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                        s(:lvar, :cert),
                        s(:str, "localhost")), :!)),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                        s(:lvar, :cert),
                        s(:str, "foo.example.com")), :!))))))),
        s(:def, :test_verify_certificate_identity,
          s(:args),
          s(:block,
            s(:send,
              s(:array,
                s(:true),
                s(:false)), :each),
            s(:args,
              s(:arg, :criticality)),
            s(:begin,
              s(:lvasgn, :cert,
                s(:send, nil, :create_null_byte_SAN_certificate,
                  s(:lvar, :criticality))),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                  s(:lvar, :cert),
                  s(:str, "www.example.com"))),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                  s(:lvar, :cert),
                  s(:str, "www.example.com\u0000.evil.com"))),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                  s(:lvar, :cert),
                  s(:str, "192.168.7.255"))),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                  s(:lvar, :cert),
                  s(:str, "192.168.7.1"))),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                  s(:lvar, :cert),
                  s(:str, "13::17"))),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                  s(:lvar, :cert),
                  s(:str, "13:0:0:0:0:0:0:17")))))),
        s(:def, :test_verify_hostname,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_hostname,
                s(:str, "www.example.com"),
                s(:str, "*.example.com"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_hostname,
                s(:str, "www.subdomain.example.com"),
                s(:str, "*.example.com"))))),
        s(:def, :test_verify_wildcard,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_wildcard,
                s(:str, "foo"),
                s(:str, "x*"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_wildcard,
                s(:str, "foo"),
                s(:str, "foo"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_wildcard,
                s(:str, "foo"),
                s(:str, "f*"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_wildcard,
                s(:str, "foo"),
                s(:str, "*"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_wildcard,
                s(:str, "abc*bcd"),
                s(:str, "abcd"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_wildcard,
                s(:str, "xn--qdk4b9b"),
                s(:str, "x*"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_wildcard,
                s(:str, "xn--qdk4b9b"),
                s(:str, "*--qdk4b9b"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_wildcard,
                s(:str, "xn--qdk4b9b"),
                s(:str, "xn--qdk4b9b"))))),
        s(:def, :test_post_connection_check_wildcard_san,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_san,
                  s(:str, "DNS:*.example.com")),
                s(:str, "www.example.com"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_san,
                  s(:str, "DNS:*.Example.COM")),
                s(:str, "www.example.com"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_san,
                  s(:str, "DNS:*.example.com")),
                s(:str, "WWW.Example.COM"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_san,
                  s(:str, "DNS:www.*.com")),
                s(:str, "www.example.com"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_san,
                  s(:str, "DNS:*.example.com")),
                s(:str, "foo.example.com"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_san,
                  s(:str, "DNS:*.example.com")),
                s(:str, "bar.foo.example.com"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_san,
                  s(:str, "DNS:baz*.example.com")),
                s(:str, "baz1.example.com"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_san,
                  s(:str, "DNS:*baz.example.com")),
                s(:str, "foobaz.example.com"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_san,
                  s(:str, "DNS:b*z.example.com")),
                s(:str, "buzz.example.com"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_san,
                  s(:str, "DNS:*b*.example.com")),
                s(:str, "abc.example.com"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_san,
                  s(:str, "DNS:*b*.example.com")),
                s(:str, "ab.example.com"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_san,
                  s(:str, "DNS:*b*.example.com")),
                s(:str, "bc.example.com"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_san,
                  s(:str, "DNS:xn*.example.com")),
                s(:str, "xn1ca.example.com"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_san,
                  s(:str, "DNS:xn--*.example.com")),
                s(:str, "xn--1ca.example.com"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_san,
                  s(:str, "DNS:á*.example.com")),
                s(:str, "á1.example.com"))))),
        s(:def, :test_post_connection_check_wildcard_cn,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_name,
                  s(:str, "*.example.com")),
                s(:str, "www.example.com"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_name,
                  s(:str, "*.Example.COM")),
                s(:str, "www.example.com"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_name,
                  s(:str, "*.example.com")),
                s(:str, "WWW.Example.COM"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_name,
                  s(:str, "www.*.com")),
                s(:str, "www.example.com"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_name,
                  s(:str, "*.example.com")),
                s(:str, "foo.example.com"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_name,
                  s(:str, "*.example.com")),
                s(:str, "bar.foo.example.com"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_name,
                  s(:str, "baz*.example.com")),
                s(:str, "baz1.example.com"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_name,
                  s(:str, "*baz.example.com")),
                s(:str, "foobaz.example.com"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_name,
                  s(:str, "b*z.example.com")),
                s(:str, "buzz.example.com"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_name,
                  s(:str, "*b*.example.com")),
                s(:str, "abc.example.com"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_name,
                  s(:str, "*b*.example.com")),
                s(:str, "ab.example.com"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_name,
                  s(:str, "*b*.example.com")),
                s(:str, "bc.example.com"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_name,
                  s(:str, "xn*.example.com")),
                s(:str, "xn1ca.example.com"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_name,
                  s(:str, "xn--*.example.com")),
                s(:str, "xn--1ca.example.com"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                s(:send, nil, :create_cert_with_name,
                  s(:str, "á*.example.com")),
                s(:str, "á1.example.com"))))),
        s(:def, :create_cert_with_san,
          s(:args,
            s(:arg, :san)),
          s(:begin,
            s(:lvasgn, :ef,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :ExtensionFactory), :new)),
            s(:lvasgn, :cert,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Certificate), :new)),
            s(:send,
              s(:lvar, :cert), :subject=,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Name), :parse,
                s(:str, "/DC=some/DC=site/CN=Some Site"))),
            s(:lvasgn, :ext,
              s(:send,
                s(:lvar, :ef), :create_ext,
                s(:str, "subjectAltName"),
                s(:lvar, :san))),
            s(:send,
              s(:lvar, :cert), :add_extension,
              s(:lvar, :ext)),
            s(:lvar, :cert))),
        s(:def, :create_cert_with_name,
          s(:args,
            s(:arg, :name)),
          s(:begin,
            s(:lvasgn, :cert,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Certificate), :new)),
            s(:send,
              s(:lvar, :cert), :subject=,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Name), :new,
                s(:array,
                  s(:array,
                    s(:str, "DC"),
                    s(:str, "some")),
                  s(:array,
                    s(:str, "DC"),
                    s(:str, "site")),
                  s(:array,
                    s(:str, "CN"),
                    s(:lvar, :name))))),
            s(:lvar, :cert))),
        s(:def, :create_null_byte_SAN_certificate,
          s(:args,
            s(:optarg, :critical,
              s(:false))),
          s(:begin,
            s(:lvasgn, :ef,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :ExtensionFactory), :new)),
            s(:lvasgn, :cert,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Certificate), :new)),
            s(:send,
              s(:lvar, :cert), :subject=,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Name), :parse,
                s(:str, "/DC=some/DC=site/CN=Some Site"))),
            s(:lvasgn, :ext,
              s(:send,
                s(:lvar, :ef), :create_ext,
                s(:str, "subjectAltName"),
                s(:str, "DNS:placeholder,IP:192.168.7.1,IP:13::17"),
                s(:lvar, :critical))),
            s(:lvasgn, :ext_asn1,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode,
                s(:send,
                  s(:lvar, :ext), :to_der))),
            s(:lvasgn, :san_list_der,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :ext_asn1), :value), :reduce,
                  s(:nil)),
                s(:args,
                  s(:arg, :memo),
                  s(:arg, :val)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :val), :tag), :==,
                    s(:int, 4)),
                  s(:send,
                    s(:lvar, :val), :value),
                  s(:lvar, :memo)))),
            s(:lvasgn, :san_list_asn1,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode,
                s(:lvar, :san_list_der))),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :san_list_asn1), :value), :[],
                s(:int, 0)), :value=,
              s(:str, "www.example.com\u0000.evil.com")),
            s(:lvasgn, :pos,
              s(:if,
                s(:lvar, :critical),
                s(:int, 2),
                s(:int, 1))),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :ext_asn1), :value), :[],
                s(:lvar, :pos)), :value=,
              s(:send,
                s(:lvar, :san_list_asn1), :to_der)),
            s(:lvasgn, :real_ext,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Extension), :new,
                s(:lvar, :ext_asn1))),
            s(:send,
              s(:lvar, :cert), :add_extension,
              s(:lvar, :real_ext)),
            s(:lvar, :cert))),
        s(:def, :socketpair,
          s(:args),
          s(:if,
            s(:defined?,
              s(:const, nil, :UNIXSocket)),
            s(:send,
              s(:const, nil, :UNIXSocket), :pair),
            s(:send,
              s(:const, nil, :Socket), :pair,
              s(:const,
                s(:const, nil, :Socket), :AF_INET),
              s(:const,
                s(:const, nil, :Socket), :SOCK_STREAM),
              s(:int, 0)))),
        s(:def, :test_servername_cb_sets_context_on_the_socket,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :hostname,
                s(:str, "example.org")),
              s(:lvasgn, :ctx3,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
              s(:send,
                s(:lvar, :ctx3), :ciphers=,
                s(:str, "DH")),
              s(:lvasgn, :ctx2,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
              s(:send,
                s(:lvar, :ctx2), :ciphers=,
                s(:str, "DH")),
              s(:send,
                s(:lvar, :ctx2), :servername_cb=,
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args,
                    s(:arg, :args)),
                  s(:lvar, :ctx3))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :sock1),
                  s(:lvasgn, :sock2)),
                s(:send, nil, :socketpair)),
              s(:lvasgn, :s2,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                  s(:lvar, :sock2),
                  s(:lvar, :ctx2))),
              s(:lvasgn, :ctx1,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
              s(:send,
                s(:lvar, :ctx1), :ciphers=,
                s(:str, "DH")),
              s(:lvasgn, :s1,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                  s(:lvar, :sock1),
                  s(:lvar, :ctx1))),
              s(:send,
                s(:lvar, :s1), :hostname=,
                s(:lvar, :hostname)),
              s(:lvasgn, :t,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:send,
                    s(:lvar, :s1), :connect))),
              s(:send, nil, :assert_equal,
                s(:lvar, :ctx2),
                s(:send,
                  s(:lvar, :s2), :context)),
              s(:lvasgn, :accepted,
                s(:send,
                  s(:lvar, :s2), :accept)),
              s(:send, nil, :assert_equal,
                s(:lvar, :ctx3),
                s(:send,
                  s(:lvar, :s2), :context)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :t), :value))),
            s(:begin,
              s(:if,
                s(:lvar, :s1),
                s(:send,
                  s(:lvar, :s1), :close), nil),
              s(:if,
                s(:lvar, :s2),
                s(:send,
                  s(:lvar, :s2), :close), nil),
              s(:if,
                s(:lvar, :sock1),
                s(:send,
                  s(:lvar, :sock1), :close), nil),
              s(:if,
                s(:lvar, :sock2),
                s(:send,
                  s(:lvar, :sock2), :close), nil),
              s(:if,
                s(:send,
                  s(:lvar, :accepted), :respond_to?,
                  s(:sym, :close)),
                s(:send,
                  s(:lvar, :accepted), :close), nil)))),
        s(:def, :test_servername_cb_raises_an_exception_on_unknown_objects,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :hostname,
                s(:str, "example.org")),
              s(:lvasgn, :ctx2,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
              s(:send,
                s(:lvar, :ctx2), :ciphers=,
                s(:str, "DH")),
              s(:send,
                s(:lvar, :ctx2), :servername_cb=,
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args,
                    s(:arg, :args)),
                  s(:send,
                    s(:const, nil, :Object), :new))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :sock1),
                  s(:lvasgn, :sock2)),
                s(:send, nil, :socketpair)),
              s(:lvasgn, :s2,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                  s(:lvar, :sock2),
                  s(:lvar, :ctx2))),
              s(:lvasgn, :ctx1,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
              s(:send,
                s(:lvar, :ctx1), :ciphers=,
                s(:str, "DH")),
              s(:lvasgn, :s1,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                  s(:lvar, :sock1),
                  s(:lvar, :ctx1))),
              s(:send,
                s(:lvar, :s1), :hostname=,
                s(:lvar, :hostname)),
              s(:lvasgn, :t,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :SSLError)),
                    s(:args),
                    s(:send,
                      s(:lvar, :s1), :connect)))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :ArgumentError)),
                s(:args),
                s(:send,
                  s(:lvar, :s2), :accept)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :t), :join))),
            s(:begin,
              s(:if,
                s(:lvar, :sock1),
                s(:send,
                  s(:lvar, :sock1), :close), nil),
              s(:if,
                s(:lvar, :sock2),
                s(:send,
                  s(:lvar, :sock2), :close), nil)))),
        s(:def, :test_servername_cb_calls_setup_on_returned_ctx,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :hostname,
                s(:str, "example.org")),
              s(:lvasgn, :ctx3,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
              s(:send,
                s(:lvar, :ctx3), :ciphers=,
                s(:str, "DH")),
              s(:send, nil, :refute_predicate,
                s(:lvar, :ctx3),
                s(:sym, :frozen?)),
              s(:lvasgn, :ctx2,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
              s(:send,
                s(:lvar, :ctx2), :ciphers=,
                s(:str, "DH")),
              s(:send,
                s(:lvar, :ctx2), :servername_cb=,
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args,
                    s(:arg, :args)),
                  s(:lvar, :ctx3))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :sock1),
                  s(:lvasgn, :sock2)),
                s(:send, nil, :socketpair)),
              s(:lvasgn, :s2,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                  s(:lvar, :sock2),
                  s(:lvar, :ctx2))),
              s(:lvasgn, :ctx1,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
              s(:send,
                s(:lvar, :ctx1), :ciphers=,
                s(:str, "DH")),
              s(:lvasgn, :s1,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                  s(:lvar, :sock1),
                  s(:lvar, :ctx1))),
              s(:send,
                s(:lvar, :s1), :hostname=,
                s(:lvar, :hostname)),
              s(:lvasgn, :t,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:send,
                    s(:lvar, :s1), :connect))),
              s(:lvasgn, :accepted,
                s(:send,
                  s(:lvar, :s2), :accept)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :t), :value)),
              s(:send, nil, :assert_predicate,
                s(:lvar, :ctx3),
                s(:sym, :frozen?))),
            s(:begin,
              s(:if,
                s(:lvar, :s1),
                s(:send,
                  s(:lvar, :s1), :close), nil),
              s(:if,
                s(:lvar, :s2),
                s(:send,
                  s(:lvar, :s2), :close), nil),
              s(:if,
                s(:lvar, :sock1),
                s(:send,
                  s(:lvar, :sock1), :close), nil),
              s(:if,
                s(:lvar, :sock2),
                s(:send,
                  s(:lvar, :sock2), :close), nil),
              s(:if,
                s(:send,
                  s(:lvar, :accepted), :respond_to?,
                  s(:sym, :close)),
                s(:send,
                  s(:lvar, :accepted), :close), nil)))),
        s(:def, :test_servername_cb_can_return_nil,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :hostname,
                s(:str, "example.org")),
              s(:lvasgn, :ctx2,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
              s(:send,
                s(:lvar, :ctx2), :ciphers=,
                s(:str, "DH")),
              s(:send,
                s(:lvar, :ctx2), :servername_cb=,
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args,
                    s(:arg, :args)),
                  s(:nil))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :sock1),
                  s(:lvasgn, :sock2)),
                s(:send, nil, :socketpair)),
              s(:lvasgn, :s2,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                  s(:lvar, :sock2),
                  s(:lvar, :ctx2))),
              s(:lvasgn, :ctx1,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
              s(:send,
                s(:lvar, :ctx1), :ciphers=,
                s(:str, "DH")),
              s(:lvasgn, :s1,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                  s(:lvar, :sock1),
                  s(:lvar, :ctx1))),
              s(:send,
                s(:lvar, :s1), :hostname=,
                s(:lvar, :hostname)),
              s(:lvasgn, :t,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:send,
                    s(:lvar, :s1), :connect))),
              s(:lvasgn, :accepted,
                s(:send,
                  s(:lvar, :s2), :accept)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :t), :value))),
            s(:begin,
              s(:if,
                s(:lvar, :s1),
                s(:send,
                  s(:lvar, :s1), :close), nil),
              s(:if,
                s(:lvar, :s2),
                s(:send,
                  s(:lvar, :s2), :close), nil),
              s(:if,
                s(:lvar, :sock1),
                s(:send,
                  s(:lvar, :sock1), :close), nil),
              s(:if,
                s(:lvar, :sock2),
                s(:send,
                  s(:lvar, :sock2), :close), nil),
              s(:if,
                s(:send,
                  s(:lvar, :accepted), :respond_to?,
                  s(:sym, :close)),
                s(:send,
                  s(:lvar, :accepted), :close), nil)))),
        s(:def, :test_servername_cb,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :lambda_called,
                s(:nil)),
              s(:lvasgn, :cb_socket,
                s(:nil)),
              s(:lvasgn, :hostname,
                s(:str, "example.org")),
              s(:lvasgn, :ctx2,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
              s(:send,
                s(:lvar, :ctx2), :ciphers=,
                s(:str, "DH")),
              s(:send,
                s(:lvar, :ctx2), :servername_cb=,
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args,
                    s(:arg, :args)),
                  s(:begin,
                    s(:lvasgn, :cb_socket,
                      s(:send,
                        s(:lvar, :args), :[],
                        s(:int, 0))),
                    s(:lvasgn, :lambda_called,
                      s(:send,
                        s(:lvar, :args), :[],
                        s(:int, 1))),
                    s(:lvar, :ctx2)))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :sock1),
                  s(:lvasgn, :sock2)),
                s(:send, nil, :socketpair)),
              s(:lvasgn, :s2,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                  s(:lvar, :sock2),
                  s(:lvar, :ctx2))),
              s(:lvasgn, :ctx1,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
              s(:send,
                s(:lvar, :ctx1), :ciphers=,
                s(:str, "DH")),
              s(:lvasgn, :s1,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                  s(:lvar, :sock1),
                  s(:lvar, :ctx1))),
              s(:send,
                s(:lvar, :s1), :hostname=,
                s(:lvar, :hostname)),
              s(:lvasgn, :t,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:send,
                    s(:lvar, :s1), :connect))),
              s(:lvasgn, :accepted,
                s(:send,
                  s(:lvar, :s2), :accept)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :t), :value)),
              s(:send, nil, :assert_equal,
                s(:lvar, :hostname),
                s(:lvar, :lambda_called)),
              s(:send, nil, :assert_equal,
                s(:lvar, :s2),
                s(:lvar, :cb_socket))),
            s(:begin,
              s(:if,
                s(:lvar, :s1),
                s(:send,
                  s(:lvar, :s1), :close), nil),
              s(:if,
                s(:lvar, :s2),
                s(:send,
                  s(:lvar, :s2), :close), nil),
              s(:if,
                s(:lvar, :sock1),
                s(:send,
                  s(:lvar, :sock1), :close), nil),
              s(:if,
                s(:lvar, :sock2),
                s(:send,
                  s(:lvar, :sock2), :close), nil),
              s(:if,
                s(:send,
                  s(:lvar, :accepted), :respond_to?,
                  s(:sym, :close)),
                s(:send,
                  s(:lvar, :accepted), :close), nil)))),
        s(:def, :test_tlsext_hostname,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :instance_methods), :include?,
                s(:sym, :hostname)), nil,
              s(:return)),
            s(:lvasgn, :ctx_proc,
              s(:block,
                s(:send,
                  s(:const, nil, :Proc), :new),
                s(:args,
                  s(:arg, :ctx),
                  s(:arg, :ssl)),
                s(:begin,
                  s(:lvasgn, :foo_ctx,
                    s(:send,
                      s(:lvar, :ctx), :dup)),
                  s(:send,
                    s(:lvar, :ctx), :servername_cb=,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Proc), :new),
                      s(:args,
                        s(:arg, :ssl2),
                        s(:arg, :hostname)),
                      s(:case,
                        s(:lvar, :hostname),
                        s(:when,
                          s(:str, "foo.example.com"),
                          s(:lvar, :foo_ctx)),
                        s(:when,
                          s(:str, "bar.example.com"),
                          s(:nil)),
                        s(:send, nil, :raise,
                          s(:dstr,
                            s(:str, "unknown hostname "),
                            s(:begin,
                              s(:send,
                                s(:lvar, :hostname), :inspect)))))))))),
            s(:lvasgn, :server_proc,
              s(:block,
                s(:send,
                  s(:const, nil, :Proc), :new),
                s(:args,
                  s(:arg, :ctx),
                  s(:arg, :ssl)),
                s(:send, nil, :readwrite_loop,
                  s(:lvar, :ctx),
                  s(:lvar, :ssl)))),
            s(:block,
              s(:send, nil, :start_server,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
                s(:true),
                s(:hash,
                  s(:pair,
                    s(:sym, :ctx_proc),
                    s(:lvar, :ctx_proc)),
                  s(:pair,
                    s(:sym, :server_proc),
                    s(:lvar, :server_proc)))),
              s(:args,
                s(:arg, :server),
                s(:arg, :port)),
              s(:block,
                s(:send,
                  s(:int, 2), :times),
                s(:args,
                  s(:arg, :i)),
                s(:begin,
                  s(:lvasgn, :ctx,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                  s(:if,
                    s(:defined?,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :OP_NO_TICKET)),
                    s(:send,
                      s(:lvar, :ctx), :options=,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :OP_NO_TICKET)), nil),
                  s(:block,
                    s(:send, nil, :server_connect,
                      s(:lvar, :port),
                      s(:lvar, :ctx)),
                    s(:args,
                      s(:arg, :ssl)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :ssl), :hostname=,
                        s(:if,
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:lvar, :i), :&,
                                s(:int, 1)), :==,
                              s(:int, 0))),
                          s(:str, "foo.example.com"),
                          s(:str, "bar.example.com"))),
                      s(:lvasgn, :str,
                        s(:send,
                          s(:send,
                            s(:str, "x"), :*,
                            s(:int, 100)), :+,
                          s(:str, "\n"))),
                      s(:send,
                        s(:lvar, :ssl), :puts,
                        s(:lvar, :str)),
                      s(:send, nil, :assert_equal,
                        s(:lvar, :str),
                        s(:send,
                          s(:lvar, :ssl), :gets))))))))),
        s(:def, :test_multibyte_read_write,
          s(:args),
          s(:begin,
            s(:lvasgn, :auml,
              s(:send,
                s(:array,
                  s(:send,
                    s(:array,
                      s(:str, "C3"),
                      s(:str, "A4")), :join,
                    s(:str, ""))), :pack,
                s(:str, "H*"))),
            s(:send,
              s(:lvar, :auml), :force_encoding,
              s(:const,
                s(:const, nil, :Encoding), :UTF_8)),
            s(:block,
              s(:send,
                s(:array,
                  s(:int, 10),
                  s(:int, 1000),
                  s(:int, 100000)), :each),
              s(:args,
                s(:arg, :i)),
              s(:begin,
                s(:lvasgn, :str,
                  s(:nil)),
                s(:lvasgn, :num_written,
                  s(:nil)),
                s(:lvasgn, :server_proc,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Proc), :new),
                    s(:args,
                      s(:arg, :ctx),
                      s(:arg, :ssl)),
                    s(:begin,
                      s(:lvasgn, :cmp,
                        s(:send,
                          s(:lvar, :ssl), :read)),
                      s(:lvasgn, :raw_size,
                        s(:send,
                          s(:lvar, :cmp), :size)),
                      s(:send,
                        s(:lvar, :cmp), :force_encoding,
                        s(:const,
                          s(:const, nil, :Encoding), :UTF_8)),
                      s(:send, nil, :assert_equal,
                        s(:lvar, :str),
                        s(:lvar, :cmp)),
                      s(:send, nil, :assert_equal,
                        s(:lvar, :num_written),
                        s(:lvar, :raw_size)),
                      s(:send,
                        s(:lvar, :ssl), :close)))),
                s(:block,
                  s(:send, nil, :start_server,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
                    s(:true),
                    s(:hash,
                      s(:pair,
                        s(:sym, :server_proc),
                        s(:lvar, :server_proc)))),
                  s(:args,
                    s(:arg, :server),
                    s(:arg, :port)),
                  s(:block,
                    s(:send, nil, :server_connect,
                      s(:lvar, :port)),
                    s(:args,
                      s(:arg, :ssl)),
                    s(:begin,
                      s(:lvasgn, :str,
                        s(:send,
                          s(:lvar, :auml), :*,
                          s(:lvar, :i))),
                      s(:lvasgn, :num_written,
                        s(:send,
                          s(:lvar, :ssl), :write,
                          s(:lvar, :str)))))))))),
        s(:def, :test_unset_OP_ALL,
          s(:args),
          s(:begin,
            s(:lvasgn, :ctx_proc,
              s(:block,
                s(:send,
                  s(:const, nil, :Proc), :new),
                s(:args,
                  s(:arg, :ctx)),
                s(:send,
                  s(:lvar, :ctx), :options=,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :OP_ALL)))),
            s(:block,
              s(:send, nil, :start_server,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
                s(:true),
                s(:hash,
                  s(:pair,
                    s(:sym, :ctx_proc),
                    s(:lvar, :ctx_proc)))),
              s(:args,
                s(:arg, :server),
                s(:arg, :port)),
              s(:block,
                s(:send, nil, :server_connect,
                  s(:lvar, :port)),
                s(:args,
                  s(:arg, :ssl)),
                s(:begin,
                  s(:send,
                    s(:lvar, :ssl), :puts,
                    s(:str, "hello")),
                  s(:send, nil, :assert_equal,
                    s(:str, "hello\n"),
                    s(:send,
                      s(:lvar, :ssl), :gets))))))),
        s(:casgn, nil, :HANDSHAKE_ERRORS,
          s(:array,
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :SSL), :SSLError),
            s(:const,
              s(:const, nil, :Errno), :ECONNRESET))),
        s(:if,
          s(:and,
            s(:send,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :SSLContext), :METHODS), :include?,
              s(:sym, :TLSv1)),
            s(:send,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :SSLContext), :METHODS), :include?,
              s(:sym, :SSLv3))),
          s(:begin,
            s(:def, :test_forbid_ssl_v3_for_client,
              s(:args),
              s(:begin,
                s(:lvasgn, :ctx_proc,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Proc), :new),
                    s(:args,
                      s(:arg, :ctx)),
                    s(:send,
                      s(:lvar, :ctx), :options=,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :OP_ALL), :|,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :OP_NO_SSLv3))))),
                s(:block,
                  s(:send, nil, :start_server_version,
                    s(:sym, :SSLv23),
                    s(:lvar, :ctx_proc)),
                  s(:args,
                    s(:arg, :server),
                    s(:arg, :port)),
                  s(:begin,
                    s(:lvasgn, :ctx,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                    s(:send,
                      s(:lvar, :ctx), :ssl_version=,
                      s(:sym, :SSLv3)),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:splat,
                          s(:const, nil, :HANDSHAKE_ERRORS))),
                      s(:args),
                      s(:send, nil, :server_connect,
                        s(:lvar, :port),
                        s(:lvar, :ctx))))))),
            s(:def, :test_forbid_ssl_v3_from_server,
              s(:args),
              s(:block,
                s(:send, nil, :start_server_version,
                  s(:sym, :SSLv3)),
                s(:args,
                  s(:arg, :server),
                  s(:arg, :port)),
                s(:begin,
                  s(:lvasgn, :ctx,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                  s(:send,
                    s(:lvar, :ctx), :options=,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :OP_ALL), :|,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :OP_NO_SSLv3))),
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:splat,
                        s(:const, nil, :HANDSHAKE_ERRORS))),
                    s(:args),
                    s(:send, nil, :server_connect,
                      s(:lvar, :port),
                      s(:lvar, :ctx))))))), nil),
        s(:if,
          s(:send,
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :SSLContext), :METHODS), :include?,
            s(:sym, :TLSv1_1)),
          s(:begin,
            s(:def, :test_tls_v1_1,
              s(:args),
              s(:block,
                s(:send, nil, :start_server_version,
                  s(:sym, :TLSv1_1)),
                s(:args,
                  s(:arg, :server),
                  s(:arg, :port)),
                s(:block,
                  s(:send, nil, :server_connect,
                    s(:lvar, :port)),
                  s(:args,
                    s(:arg, :ssl)),
                  s(:send, nil, :assert_equal,
                    s(:str, "TLSv1.1"),
                    s(:send,
                      s(:lvar, :ssl), :ssl_version))))),
            s(:def, :test_forbid_tls_v1_for_client,
              s(:args),
              s(:begin,
                s(:lvasgn, :ctx_proc,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Proc), :new),
                    s(:args,
                      s(:arg, :ctx)),
                    s(:send,
                      s(:lvar, :ctx), :options=,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :OP_ALL), :|,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :OP_NO_TLSv1))))),
                s(:block,
                  s(:send, nil, :start_server_version,
                    s(:sym, :SSLv23),
                    s(:lvar, :ctx_proc)),
                  s(:args,
                    s(:arg, :server),
                    s(:arg, :port)),
                  s(:begin,
                    s(:lvasgn, :ctx,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                    s(:send,
                      s(:lvar, :ctx), :ssl_version=,
                      s(:sym, :TLSv1)),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:splat,
                          s(:const, nil, :HANDSHAKE_ERRORS))),
                      s(:args),
                      s(:send, nil, :server_connect,
                        s(:lvar, :port),
                        s(:lvar, :ctx))))))),
            s(:def, :test_forbid_tls_v1_from_server,
              s(:args),
              s(:block,
                s(:send, nil, :start_server_version,
                  s(:sym, :TLSv1)),
                s(:args,
                  s(:arg, :server),
                  s(:arg, :port)),
                s(:begin,
                  s(:lvasgn, :ctx,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                  s(:send,
                    s(:lvar, :ctx), :options=,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :OP_ALL), :|,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :OP_NO_TLSv1))),
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:splat,
                        s(:const, nil, :HANDSHAKE_ERRORS))),
                    s(:args),
                    s(:send, nil, :server_connect,
                      s(:lvar, :port),
                      s(:lvar, :ctx))))))), nil),
        s(:if,
          s(:send,
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :SSLContext), :METHODS), :include?,
            s(:sym, :TLSv1_2)),
          s(:begin,
            s(:if,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :OPENSSL_VERSION_NUMBER), :>,
                s(:int, 268439552)),
              s(:def, :test_tls_v1_2,
                s(:args),
                s(:block,
                  s(:send, nil, :start_server_version,
                    s(:sym, :TLSv1_2)),
                  s(:args,
                    s(:arg, :server),
                    s(:arg, :port)),
                  s(:begin,
                    s(:lvasgn, :ctx,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                    s(:send,
                      s(:lvar, :ctx), :ssl_version=,
                      s(:sym, :TLSv1_2_client)),
                    s(:block,
                      s(:send, nil, :server_connect,
                        s(:lvar, :port),
                        s(:lvar, :ctx)),
                      s(:args,
                        s(:arg, :ssl)),
                      s(:send, nil, :assert_equal,
                        s(:str, "TLSv1.2"),
                        s(:send,
                          s(:lvar, :ssl), :ssl_version)))))), nil),
            s(:if,
              s(:defined?,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :OP_NO_TLSv1_1)),
              s(:def, :test_forbid_tls_v1_1_for_client,
                s(:args),
                s(:begin,
                  s(:lvasgn, :ctx_proc,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Proc), :new),
                      s(:args,
                        s(:arg, :ctx)),
                      s(:send,
                        s(:lvar, :ctx), :options=,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :SSL), :OP_ALL), :|,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :SSL), :OP_NO_TLSv1_1))))),
                  s(:block,
                    s(:send, nil, :start_server_version,
                      s(:sym, :SSLv23),
                      s(:lvar, :ctx_proc)),
                    s(:args,
                      s(:arg, :server),
                      s(:arg, :port)),
                    s(:begin,
                      s(:lvasgn, :ctx,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                      s(:send,
                        s(:lvar, :ctx), :ssl_version=,
                        s(:sym, :TLSv1_1)),
                      s(:block,
                        s(:send, nil, :assert_raise,
                          s(:splat,
                            s(:const, nil, :HANDSHAKE_ERRORS))),
                        s(:args),
                        s(:send, nil, :server_connect,
                          s(:lvar, :port),
                          s(:lvar, :ctx))))))), nil),
            s(:if,
              s(:defined?,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :OP_NO_TLSv1_1)),
              s(:def, :test_forbid_tls_v1_1_from_server,
                s(:args),
                s(:block,
                  s(:send, nil, :start_server_version,
                    s(:sym, :TLSv1_1)),
                  s(:args,
                    s(:arg, :server),
                    s(:arg, :port)),
                  s(:begin,
                    s(:lvasgn, :ctx,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                    s(:send,
                      s(:lvar, :ctx), :options=,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :OP_ALL), :|,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :OP_NO_TLSv1_1))),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:splat,
                          s(:const, nil, :HANDSHAKE_ERRORS))),
                      s(:args),
                      s(:send, nil, :server_connect,
                        s(:lvar, :port),
                        s(:lvar, :ctx)))))), nil),
            s(:if,
              s(:defined?,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :OP_NO_TLSv1_2)),
              s(:def, :test_forbid_tls_v1_2_for_client,
                s(:args),
                s(:begin,
                  s(:lvasgn, :ctx_proc,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Proc), :new),
                      s(:args,
                        s(:arg, :ctx)),
                      s(:send,
                        s(:lvar, :ctx), :options=,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :SSL), :OP_ALL), :|,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :SSL), :OP_NO_TLSv1_2))))),
                  s(:block,
                    s(:send, nil, :start_server_version,
                      s(:sym, :SSLv23),
                      s(:lvar, :ctx_proc)),
                    s(:args,
                      s(:arg, :server),
                      s(:arg, :port)),
                    s(:begin,
                      s(:lvasgn, :ctx,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                      s(:send,
                        s(:lvar, :ctx), :ssl_version=,
                        s(:sym, :TLSv1_2)),
                      s(:block,
                        s(:send, nil, :assert_raise,
                          s(:splat,
                            s(:const, nil, :HANDSHAKE_ERRORS))),
                        s(:args),
                        s(:send, nil, :server_connect,
                          s(:lvar, :port),
                          s(:lvar, :ctx))))))), nil),
            s(:if,
              s(:defined?,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :OP_NO_TLSv1_2)),
              s(:def, :test_forbid_tls_v1_2_from_server,
                s(:args),
                s(:block,
                  s(:send, nil, :start_server_version,
                    s(:sym, :TLSv1_2)),
                  s(:args,
                    s(:arg, :server),
                    s(:arg, :port)),
                  s(:begin,
                    s(:lvasgn, :ctx,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                    s(:send,
                      s(:lvar, :ctx), :options=,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :OP_ALL), :|,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :OP_NO_TLSv1_2))),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:splat,
                          s(:const, nil, :HANDSHAKE_ERRORS))),
                      s(:args),
                      s(:send, nil, :server_connect,
                        s(:lvar, :port),
                        s(:lvar, :ctx)))))), nil)), nil),
        s(:def, :test_renegotiation_cb,
          s(:args),
          s(:begin,
            s(:lvasgn, :num_handshakes,
              s(:int, 0)),
            s(:lvasgn, :renegotiation_cb,
              s(:block,
                s(:send,
                  s(:const, nil, :Proc), :new),
                s(:args,
                  s(:arg, :ssl)),
                s(:op_asgn,
                  s(:lvasgn, :num_handshakes), :+,
                  s(:int, 1)))),
            s(:lvasgn, :ctx_proc,
              s(:block,
                s(:send,
                  s(:const, nil, :Proc), :new),
                s(:args,
                  s(:arg, :ctx)),
                s(:send,
                  s(:lvar, :ctx), :renegotiation_cb=,
                  s(:lvar, :renegotiation_cb)))),
            s(:block,
              s(:send, nil, :start_server_version,
                s(:sym, :SSLv23),
                s(:lvar, :ctx_proc)),
              s(:args,
                s(:arg, :server),
                s(:arg, :port)),
              s(:block,
                s(:send, nil, :server_connect,
                  s(:lvar, :port)),
                s(:args,
                  s(:arg, :ssl)),
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:lvar, :num_handshakes)))))),
        s(:if,
          s(:send,
            s(:const,
              s(:const, nil, :OpenSSL), :OPENSSL_VERSION_NUMBER), :>=,
            s(:int, 268443648)),
          s(:begin,
            s(:def, :test_alpn_protocol_selection_ary,
              s(:args),
              s(:begin,
                s(:lvasgn, :advertised,
                  s(:array,
                    s(:str, "http/1.1"),
                    s(:str, "spdy/2"))),
                s(:lvasgn, :ctx_proc,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Proc), :new),
                    s(:args,
                      s(:arg, :ctx)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :ctx), :alpn_select_cb=,
                        s(:block,
                          s(:send, nil, :lambda),
                          s(:args,
                            s(:arg, :protocols)),
                          s(:send,
                            s(:lvar, :protocols), :first))),
                      s(:send,
                        s(:lvar, :ctx), :alpn_protocols=,
                        s(:lvar, :advertised))))),
                s(:block,
                  s(:send, nil, :start_server_version,
                    s(:sym, :SSLv23),
                    s(:lvar, :ctx_proc)),
                  s(:args,
                    s(:arg, :server),
                    s(:arg, :port)),
                  s(:begin,
                    s(:lvasgn, :ctx,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                    s(:send,
                      s(:lvar, :ctx), :alpn_protocols=,
                      s(:lvar, :advertised)),
                    s(:block,
                      s(:send, nil, :server_connect,
                        s(:lvar, :port),
                        s(:lvar, :ctx)),
                      s(:args,
                        s(:arg, :ssl)),
                      s(:send, nil, :assert_equal,
                        s(:send,
                          s(:lvar, :advertised), :first),
                        s(:send,
                          s(:lvar, :ssl), :alpn_protocol))))))),
            s(:def, :test_alpn_protocol_selection_cancel,
              s(:args),
              s(:begin,
                s(:lvasgn, :ctx_proc,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Proc), :new),
                    s(:args,
                      s(:arg, :ctx)),
                    s(:send,
                      s(:lvar, :ctx), :alpn_select_cb=,
                      s(:block,
                        s(:send, nil, :lambda),
                        s(:args,
                          s(:arg, :protocols)),
                        s(:nil))))),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const, nil, :MiniTest), :Assertion)),
                  s(:args),
                  s(:block,
                    s(:send, nil, :start_server_version,
                      s(:sym, :SSLv23),
                      s(:lvar, :ctx_proc)),
                    s(:args,
                      s(:arg, :server),
                      s(:arg, :port)),
                    s(:begin,
                      s(:lvasgn, :ctx,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                      s(:send,
                        s(:lvar, :ctx), :alpn_protocols=,
                        s(:array,
                          s(:str, "http/1.1"))),
                      s(:block,
                        s(:send, nil, :assert_raise,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :SSL), :SSLError)),
                        s(:args),
                        s(:send, nil, :server_connect,
                          s(:lvar, :port),
                          s(:lvar, :ctx))))))))), nil),
        s(:if,
          s(:and,
            s(:send,
              s(:const,
                s(:const, nil, :OpenSSL), :OPENSSL_VERSION_NUMBER), :>,
              s(:int, 268439552)),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :SSLContext), :method_defined?,
              s(:sym, :npn_select_cb))),
          s(:begin,
            s(:def, :test_npn_protocol_selection_ary,
              s(:args),
              s(:begin,
                s(:lvasgn, :advertised,
                  s(:array,
                    s(:str, "http/1.1"),
                    s(:str, "spdy/2"))),
                s(:lvasgn, :ctx_proc,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Proc), :new),
                    s(:args,
                      s(:arg, :ctx)),
                    s(:send,
                      s(:lvar, :ctx), :npn_protocols=,
                      s(:lvar, :advertised)))),
                s(:block,
                  s(:send, nil, :start_server_version,
                    s(:sym, :SSLv23),
                    s(:lvar, :ctx_proc)),
                  s(:args,
                    s(:arg, :server),
                    s(:arg, :port)),
                  s(:begin,
                    s(:lvasgn, :selector,
                      s(:block,
                        s(:send, nil, :lambda),
                        s(:args,
                          s(:arg, :which)),
                        s(:begin,
                          s(:lvasgn, :ctx,
                            s(:send,
                              s(:const,
                                s(:const,
                                  s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                          s(:send,
                            s(:lvar, :ctx), :npn_select_cb=,
                            s(:block,
                              s(:send, nil, :lambda),
                              s(:args,
                                s(:arg, :protocols)),
                              s(:send,
                                s(:lvar, :protocols), :send,
                                s(:lvar, :which)))),
                          s(:block,
                            s(:send, nil, :server_connect,
                              s(:lvar, :port),
                              s(:lvar, :ctx)),
                            s(:args,
                              s(:arg, :ssl)),
                            s(:send, nil, :assert_equal,
                              s(:send,
                                s(:lvar, :advertised), :send,
                                s(:lvar, :which)),
                              s(:send,
                                s(:lvar, :ssl), :npn_protocol)))))),
                    s(:send,
                      s(:lvar, :selector), :call,
                      s(:sym, :first)),
                    s(:send,
                      s(:lvar, :selector), :call,
                      s(:sym, :last)))))),
            s(:def, :test_npn_protocol_selection_enum,
              s(:args),
              s(:begin,
                s(:lvasgn, :advertised,
                  s(:send,
                    s(:const, nil, :Object), :new)),
                s(:defs,
                  s(:lvar, :advertised), :each,
                  s(:args),
                  s(:begin,
                    s(:yield,
                      s(:str, "http/1.1")),
                    s(:yield,
                      s(:str, "spdy/2")))),
                s(:lvasgn, :ctx_proc,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Proc), :new),
                    s(:args,
                      s(:arg, :ctx)),
                    s(:send,
                      s(:lvar, :ctx), :npn_protocols=,
                      s(:lvar, :advertised)))),
                s(:block,
                  s(:send, nil, :start_server_version,
                    s(:sym, :SSLv23),
                    s(:lvar, :ctx_proc)),
                  s(:args,
                    s(:arg, :server),
                    s(:arg, :port)),
                  s(:begin,
                    s(:lvasgn, :selector,
                      s(:block,
                        s(:send, nil, :lambda),
                        s(:args,
                          s(:arg, :selected),
                          s(:arg, :which)),
                        s(:begin,
                          s(:lvasgn, :ctx,
                            s(:send,
                              s(:const,
                                s(:const,
                                  s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                          s(:send,
                            s(:lvar, :ctx), :npn_select_cb=,
                            s(:block,
                              s(:send, nil, :lambda),
                              s(:args,
                                s(:arg, :protocols)),
                              s(:send,
                                s(:send,
                                  s(:lvar, :protocols), :to_a), :send,
                                s(:lvar, :which)))),
                          s(:block,
                            s(:send, nil, :server_connect,
                              s(:lvar, :port),
                              s(:lvar, :ctx)),
                            s(:args,
                              s(:arg, :ssl)),
                            s(:send, nil, :assert_equal,
                              s(:lvar, :selected),
                              s(:send,
                                s(:lvar, :ssl), :npn_protocol)))))),
                    s(:send,
                      s(:lvar, :selector), :call,
                      s(:str, "http/1.1"),
                      s(:sym, :first)),
                    s(:send,
                      s(:lvar, :selector), :call,
                      s(:str, "spdy/2"),
                      s(:sym, :last)))))),
            s(:def, :test_npn_protocol_selection_cancel,
              s(:args),
              s(:begin,
                s(:lvasgn, :ctx_proc,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Proc), :new),
                    s(:args,
                      s(:arg, :ctx)),
                    s(:send,
                      s(:lvar, :ctx), :npn_protocols=,
                      s(:array,
                        s(:str, "http/1.1"))))),
                s(:block,
                  s(:send, nil, :start_server_version,
                    s(:sym, :SSLv23),
                    s(:lvar, :ctx_proc)),
                  s(:args,
                    s(:arg, :server),
                    s(:arg, :port)),
                  s(:begin,
                    s(:lvasgn, :ctx,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                    s(:send,
                      s(:lvar, :ctx), :npn_select_cb=,
                      s(:block,
                        s(:send, nil, :lambda),
                        s(:args,
                          s(:arg, :protocols)),
                        s(:send, nil, :raise,
                          s(:send,
                            s(:const, nil, :RuntimeError), :new)))),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const, nil, :RuntimeError)),
                      s(:args),
                      s(:send, nil, :server_connect,
                        s(:lvar, :port),
                        s(:lvar, :ctx))))))),
            s(:def, :test_npn_advertised_protocol_too_long,
              s(:args),
              s(:begin,
                s(:lvasgn, :ctx_proc,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Proc), :new),
                    s(:args,
                      s(:arg, :ctx)),
                    s(:send,
                      s(:lvar, :ctx), :npn_protocols=,
                      s(:array,
                        s(:send,
                          s(:str, "a"), :*,
                          s(:int, 256)))))),
                s(:block,
                  s(:send, nil, :start_server_version,
                    s(:sym, :SSLv23),
                    s(:lvar, :ctx_proc)),
                  s(:args,
                    s(:arg, :server),
                    s(:arg, :port)),
                  s(:begin,
                    s(:lvasgn, :ctx,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                    s(:send,
                      s(:lvar, :ctx), :npn_select_cb=,
                      s(:block,
                        s(:send, nil, :lambda),
                        s(:args,
                          s(:arg, :protocols)),
                        s(:send,
                          s(:lvar, :protocols), :first))),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:splat,
                          s(:const, nil, :HANDSHAKE_ERRORS))),
                      s(:args),
                      s(:send, nil, :server_connect,
                        s(:lvar, :port),
                        s(:lvar, :ctx))))))),
            s(:def, :test_npn_selected_protocol_too_long,
              s(:args),
              s(:begin,
                s(:lvasgn, :ctx_proc,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Proc), :new),
                    s(:args,
                      s(:arg, :ctx)),
                    s(:send,
                      s(:lvar, :ctx), :npn_protocols=,
                      s(:array,
                        s(:str, "http/1.1"))))),
                s(:block,
                  s(:send, nil, :start_server_version,
                    s(:sym, :SSLv23),
                    s(:lvar, :ctx_proc)),
                  s(:args,
                    s(:arg, :server),
                    s(:arg, :port)),
                  s(:begin,
                    s(:lvasgn, :ctx,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                    s(:send,
                      s(:lvar, :ctx), :npn_select_cb=,
                      s(:block,
                        s(:send, nil, :lambda),
                        s(:args,
                          s(:arg, :protocols)),
                        s(:send,
                          s(:str, "a"), :*,
                          s(:int, 256)))),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:splat,
                          s(:const, nil, :HANDSHAKE_ERRORS))),
                      s(:args),
                      s(:send, nil, :server_connect,
                        s(:lvar, :port),
                        s(:lvar, :ctx)))))))), nil),
        s(:def, :test_invalid_shutdown_by_gc,
          s(:args),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:block,
              s(:send, nil, :start_server,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
                s(:true)),
              s(:args,
                s(:arg, :server),
                s(:arg, :port)),
              s(:block,
                s(:send,
                  s(:int, 10), :times),
                s(:args),
                s(:begin,
                  s(:lvasgn, :sock,
                    s(:send,
                      s(:const, nil, :TCPSocket), :new,
                      s(:str, "127.0.0.1"),
                      s(:lvar, :port))),
                  s(:lvasgn, :ssl,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                      s(:lvar, :sock))),
                  s(:send,
                    s(:const, nil, :GC), :start),
                  s(:send,
                    s(:lvar, :ssl), :connect),
                  s(:send,
                    s(:lvar, :sock), :close)))))),
        s(:def, :test_close_after_socket_close,
          s(:args),
          s(:block,
            s(:send, nil, :start_server,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
              s(:true)),
            s(:args,
              s(:arg, :server),
              s(:arg, :port)),
            s(:begin,
              s(:lvasgn, :sock,
                s(:send,
                  s(:const, nil, :TCPSocket), :new,
                  s(:str, "127.0.0.1"),
                  s(:lvar, :port))),
              s(:lvasgn, :ssl,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                  s(:lvar, :sock))),
              s(:send,
                s(:lvar, :ssl), :sync_close=,
                s(:true)),
              s(:send,
                s(:lvar, :ssl), :connect),
              s(:send,
                s(:lvar, :sock), :close),
              s(:block,
                s(:send, nil, :assert_nothing_raised),
                s(:args),
                s(:send,
                  s(:lvar, :ssl), :close))))),
        s(:def, :test_sync_close_without_connect,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Socket), :open,
              s(:sym, :INET),
              s(:sym, :STREAM)),
            s(:args,
              s(:arg, :s)),
            s(:begin,
              s(:lvasgn, :ssl,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                  s(:lvar, :s))),
              s(:send,
                s(:lvar, :ssl), :sync_close=,
                s(:true)),
              s(:send,
                s(:lvar, :ssl), :close),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :s), :closed?))))),
        s(:def, :test_close_and_socket_close_while_connecting,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :ctx,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
              s(:send,
                s(:lvar, :ctx), :ciphers=,
                s(:str, "aNULL")),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :sock1),
                  s(:lvasgn, :sock2)),
                s(:send, nil, :socketpair)),
              s(:lvasgn, :ssl1,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                  s(:lvar, :sock1),
                  s(:lvar, :ctx))),
              s(:lvasgn, :ssl2,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                  s(:lvar, :sock2),
                  s(:lvar, :ctx))),
              s(:lvasgn, :t,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:send,
                    s(:lvar, :ssl1), :connect))),
              s(:send,
                s(:lvar, :ssl2), :accept),
              s(:send,
                s(:lvar, :ssl1), :close),
              s(:send,
                s(:lvar, :sock1), :close),
              s(:rescue,
                s(:send,
                  s(:lvar, :t), :value),
                s(:resbody, nil, nil,
                  s(:nil)), nil)),
            s(:begin,
              s(:if,
                s(:lvar, :ssl1),
                s(:send,
                  s(:lvar, :ssl1), :close), nil),
              s(:if,
                s(:lvar, :ssl2),
                s(:send,
                  s(:lvar, :ssl2), :close), nil),
              s(:if,
                s(:lvar, :sock1),
                s(:send,
                  s(:lvar, :sock1), :close), nil),
              s(:if,
                s(:lvar, :sock2),
                s(:send,
                  s(:lvar, :sock2), :close), nil)))),
        s(:send, nil, :private),
        s(:def, :start_server_version,
          s(:args,
            s(:arg, :version),
            s(:optarg, :ctx_proc,
              s(:nil)),
            s(:optarg, :server_proc,
              s(:nil)),
            s(:blockarg, :blk)),
          s(:begin,
            s(:lvasgn, :ctx_wrap,
              s(:block,
                s(:send,
                  s(:const, nil, :Proc), :new),
                s(:args,
                  s(:arg, :ctx)),
                s(:begin,
                  s(:send,
                    s(:lvar, :ctx), :ssl_version=,
                    s(:lvar, :version)),
                  s(:if,
                    s(:lvar, :ctx_proc),
                    s(:send,
                      s(:lvar, :ctx_proc), :call,
                      s(:lvar, :ctx)), nil)))),
            s(:send, nil, :start_server,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE),
              s(:true),
              s(:hash,
                s(:pair,
                  s(:sym, :ctx_proc),
                  s(:lvar, :ctx_wrap)),
                s(:pair,
                  s(:sym, :server_proc),
                  s(:lvar, :server_proc)),
                s(:pair,
                  s(:sym, :ignore_listener_error),
                  s(:true))),
              s(:block_pass,
                s(:lvar, :blk))))),
        s(:def, :server_connect,
          s(:args,
            s(:arg, :port),
            s(:optarg, :ctx,
              s(:nil))),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :sock,
                s(:send,
                  s(:const, nil, :TCPSocket), :new,
                  s(:str, "127.0.0.1"),
                  s(:lvar, :port))),
              s(:lvasgn, :ssl,
                s(:if,
                  s(:lvar, :ctx),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                    s(:lvar, :sock),
                    s(:lvar, :ctx)),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                    s(:lvar, :sock)))),
              s(:send,
                s(:lvar, :ssl), :sync_close=,
                s(:true)),
              s(:send,
                s(:lvar, :ssl), :connect),
              s(:if,
                s(:send, nil, :block_given?),
                s(:yield,
                  s(:lvar, :ssl)), nil)),
            s(:if,
              s(:lvar, :ssl),
              s(:send,
                s(:lvar, :ssl), :close),
              s(:if,
                s(:lvar, :sock),
                s(:send,
                  s(:lvar, :sock), :close), nil)))))), nil))
