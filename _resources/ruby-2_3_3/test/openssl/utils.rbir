s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :require,
          s(:str, "openssl")),
        s(:send,
          s(:const, nil, :OpenSSL), :fips_mode=,
          s(:false))),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "digest/md5")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:send, nil, :require,
    s(:str, "rbconfig")),
  s(:send, nil, :require,
    s(:str, "socket")),
  s(:if,
    s(:and,
      s(:defined?,
        s(:const,
          s(:const, nil, :OpenSSL), :OPENSSL_LIBRARY_VERSION)),
      s(:send,
        s(:regexp,
          s(:str, "\\AOpenSSL +0\\."),
          s(:regopt)), :!~,
        s(:const,
          s(:const, nil, :OpenSSL), :OPENSSL_LIBRARY_VERSION))),
    s(:module,
      s(:const,
        s(:const, nil, :OpenSSL), :TestUtils),
      s(:begin,
        s(:casgn, nil, :TEST_KEY_RSA1024,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
            s(:dstr,
              s(:str, "-----BEGIN RSA PRIVATE KEY-----\n"),
              s(:str, "MIICXgIBAAKBgQDLwsSw1ECnPtT+PkOgHhcGA71nwC2/nL85VBGnRqDxOqjVh7Cx\n"),
              s(:str, "aKPERYHsk4BPCkE3brtThPWc9kjHEQQ7uf9Y1rbCz0layNqHyywQEVLFmp1cpIt/\n"),
              s(:str, "Q3geLv8ZD9pihowKJDyMDiN6ArYUmZczvW4976MU3+l54E6lF/JfFEU5hwIDAQAB\n"),
              s(:str, "AoGBAKSl/MQarye1yOysqX6P8fDFQt68VvtXkNmlSiKOGuzyho0M+UVSFcs6k1L0\n"),
              s(:str, "maDE25AMZUiGzuWHyaU55d7RXDgeskDMakD1v6ZejYtxJkSXbETOTLDwUWTn618T\n"),
              s(:str, "gnb17tU1jktUtU67xK/08i/XodlgnQhs6VoHTuCh3Hu77O6RAkEA7+gxqBuZR572\n"),
              s(:str, "74/akiW/SuXm0SXPEviyO1MuSRwtI87B02D0qgV8D1UHRm4AhMnJ8MCs1809kMQE\n"),
              s(:str, "JiQUCrp9mQJBANlt2ngBO14us6NnhuAseFDTBzCHXwUUu1YKHpMMmxpnGqaldGgX\n"),
              s(:str, "sOZB3lgJsT9VlGf3YGYdkLTNVbogQKlKpB8CQQDiSwkb4vyQfDe8/NpU5Not0fII\n"),
              s(:str, "8jsDUCb+opWUTMmfbxWRR3FBNu8wnym/m19N4fFj8LqYzHX4KY0oVPu6qvJxAkEA\n"),
              s(:str, "wa5snNekFcqONLIE4G5cosrIrb74sqL8GbGb+KuTAprzj5z1K8Bm0UW9lTjVDjDi\n"),
              s(:str, "qRYgZfZSL+x1P/54+xTFSwJAY1FxA/N3QPCXCjPh5YqFxAMQs2VVYTfg+t0MEcJD\n"),
              s(:str, "dPMQD5JX6g5HKnHFg2mZtoXQrWmJSn7p8GJK8yNTopEErA==\n"),
              s(:str, "-----END RSA PRIVATE KEY-----\n")))),
        s(:casgn, nil, :TEST_KEY_RSA2048,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
            s(:dstr,
              s(:str, "-----BEGIN RSA PRIVATE KEY-----\n"),
              s(:str, "MIIEpAIBAAKCAQEAuV9ht9J7k4NBs38jOXvvTKY9gW8nLICSno5EETR1cuF7i4pN\n"),
              s(:str, "s9I1QJGAFAX0BEO4KbzXmuOvfCpD3CU+Slp1enenfzq/t/e/1IRW0wkJUJUFQign\n"),
              s(:str, "4CtrkJL+P07yx18UjyPlBXb81ApEmAB5mrJVSrWmqbjs07JbuS4QQGGXLc+Su96D\n"),
              s(:str, "kYKmSNVjBiLxVVSpyZfAY3hD37d60uG+X8xdW5v68JkRFIhdGlb6JL8fllf/A/bl\n"),
              s(:str, "NwdJOhVr9mESHhwGjwfSeTDPfd8ZLE027E5lyAVX9KZYcU00mOX+fdxOSnGqS/8J\n"),
              s(:str, "DRh0EPHDL15RcJjV2J6vZjPb0rOYGDoMcH+94wIDAQABAoIBAAzsamqfYQAqwXTb\n"),
              s(:str, "I0CJtGg6msUgU7HVkOM+9d3hM2L791oGHV6xBAdpXW2H8LgvZHJ8eOeSghR8+dgq\n"),
              s(:str, "PIqAffo4x1Oma+FOg3A0fb0evyiACyrOk+EcBdbBeLo/LcvahBtqnDfiUMQTpy6V\n"),
              s(:str, "seSoFCwuN91TSCeGIsDpRjbG1vxZgtx+uI+oH5+ytqJOmfCksRDCkMglGkzyfcl0\n"),
              s(:str, "Xc5CUhIJ0my53xijEUQl19rtWdMnNnnkdbG8PT3LZlOta5Do86BElzUYka0C6dUc\n"),
              s(:str, "VsBDQ0Nup0P6rEQgy7tephHoRlUGTYamsajGJaAo1F3IQVIrRSuagi7+YpSpCqsW\n"),
              s(:str, "wORqorkCgYEA7RdX6MDVrbw7LePnhyuaqTiMK+055/R1TqhB1JvvxJ1CXk2rDL6G\n"),
              s(:str, "0TLHQ7oGofd5LYiemg4ZVtWdJe43BPZlVgT6lvL/iGo8JnrncB9Da6L7nrq/+Rvj\n"),
              s(:str, "XGjf1qODCK+LmreZWEsaLPURIoR/Ewwxb9J2zd0CaMjeTwafJo1CZvcCgYEAyCgb\n"),
              s(:str, "aqoWvUecX8VvARfuA593Lsi50t4MEArnOXXcd1RnXoZWhbx5rgO8/ATKfXr0BK/n\n"),
              s(:str, "h2GF9PfKzHFm/4V6e82OL7gu/kLy2u9bXN74vOvWFL5NOrOKPM7Kg+9I131kNYOw\n"),
              s(:str, "Ivnr/VtHE5s0dY7JChYWE1F3vArrOw3T00a4CXUCgYEA0SqY+dS2LvIzW4cHCe9k\n"),
              s(:str, "IQqsT0yYm5TFsUEr4sA3xcPfe4cV8sZb9k/QEGYb1+SWWZ+AHPV3UW5fl8kTbSNb\n"),
              s(:str, "v4ng8i8rVVQ0ANbJO9e5CUrepein2MPL0AkOATR8M7t7dGGpvYV0cFk8ZrFx0oId\n"),
              s(:str, "U0PgYDotF/iueBWlbsOM430CgYEAqYI95dFyPI5/AiSkY5queeb8+mQH62sdcCCr\n"),
              s(:str, "vd/w/CZA/K5sbAo4SoTj8dLk4evU6HtIa0DOP63y071eaxvRpTNqLUOgmLh+D6gS\n"),
              s(:str, "Cc7TfLuFrD+WDBatBd5jZ+SoHccVrLR/4L8jeodo5FPW05A+9gnKXEXsTxY4LOUC\n"),
              s(:str, "9bS4e1kCgYAqVXZh63JsMwoaxCYmQ66eJojKa47VNrOeIZDZvd2BPVf30glBOT41\n"),
              s(:str, "gBoDG3WMPZoQj9pb7uMcrnvs4APj2FIhMU8U15LcPAj59cD6S6rWnAxO8NFK7HQG\n"),
              s(:str, "4Jxg3JNNf8ErQoCHb1B3oVdXJkmbJkARoDpBKmTCgKtP8ADYLmVPQw==\n"),
              s(:str, "-----END RSA PRIVATE KEY-----\n")))),
        s(:casgn, nil, :TEST_KEY_DSA256,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :PKey), :DSA), :new,
            s(:dstr,
              s(:str, "-----BEGIN DSA PRIVATE KEY-----\n"),
              s(:str, "MIH3AgEAAkEAhk2libbY2a8y2Pt21+YPYGZeW6wzaW2yfj5oiClXro9XMR7XWLkE\n"),
              s(:str, "9B7XxLNFCS2gmCCdMsMW1HulaHtLFQmB2wIVAM43JZrcgpu6ajZ01VkLc93gu/Ed\n"),
              s(:str, "AkAOhujZrrKV5CzBKutKLb0GVyVWmdC7InoNSMZEeGU72rT96IjM59YzoqmD0pGM\n"),
              s(:str, "3I1o4cGqg1D1DfM1rQlnN1eSAkBq6xXfEDwJ1mLNxF6q8Zm/ugFYWR5xcX/3wFiT\n"),
              s(:str, "b4+EjHP/DbNh9Vm5wcfnDBJ1zKvrMEf2xqngYdrV/3CiGJeKAhRvL57QvJZcQGvn\n"),
              s(:str, "ISNX5cMzFHRW3Q==\n"),
              s(:str, "-----END DSA PRIVATE KEY-----\n")))),
        s(:casgn, nil, :TEST_KEY_DSA512,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :PKey), :DSA), :new,
            s(:dstr,
              s(:str, "-----BEGIN DSA PRIVATE KEY-----\n"),
              s(:str, "MIH4AgEAAkEA5lB4GvEwjrsMlGDqGsxrbqeFRh6o9OWt6FgTYiEEHaOYhkIxv0Ok\n"),
              s(:str, "RZPDNwOG997mDjBnvDJ1i56OmS3MbTnovwIVAJgub/aDrSDB4DZGH7UyarcaGy6D\n"),
              s(:str, "AkB9HdFw/3td8K4l1FZHv7TCZeJ3ZLb7dF3TWoGUP003RCqoji3/lHdKoVdTQNuR\n"),
              s(:str, "S/m6DlCwhjRjiQ/lBRgCLCcaAkEAjN891JBjzpMj4bWgsACmMggFf57DS0Ti+5++\n"),
              s(:str, "Q1VB8qkJN7rA7/2HrCR3gTsWNb1YhAsnFsoeRscC+LxXoXi9OAIUBG98h4tilg6S\n"),
              s(:str, "55jreJD3Se3slps=\n"),
              s(:str, "-----END DSA PRIVATE KEY-----\n")))),
        s(:if,
          s(:defined?,
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :PKey), :EC)),
          s(:casgn, nil, :TEST_KEY_EC_P256V1,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :EC), :new,
              s(:dstr,
                s(:str, "-----BEGIN EC PRIVATE KEY-----\n"),
                s(:str, "MHcCAQEEIID49FDqcf1O1eO8saTgG70UbXQw9Fqwseliit2aWhH1oAoGCCqGSM49\n"),
                s(:str, "AwEHoUQDQgAEFglk2c+oVUIKQ64eZG9bhLNPWB7lSZ/ArK41eGy5wAzU/0G51Xtt\n"),
                s(:str, "CeBUl+MahZtn9fO1JKdF4qJmS39dXnpENg==\n"),
                s(:str, "-----END EC PRIVATE KEY-----\n")))), nil),
        s(:casgn, nil, :TEST_KEY_DH512_PUB,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :PKey), :DH), :new,
            s(:dstr,
              s(:str, "-----BEGIN DH PARAMETERS-----\n"),
              s(:str, "MEYCQQDmWXGPqk76sKw/edIOdhAQD4XzjJ+AR/PTk2qzaGs+u4oND2yU5D2NN4wr\n"),
              s(:str, "aPgwHyJBiK1/ebK3tYcrSKrOoRyrAgEC\n"),
              s(:str, "-----END DH PARAMETERS-----\n")))),
        s(:casgn, nil, :TEST_KEY_DH1024,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :PKey), :DH), :new,
            s(:dstr,
              s(:str, "-----BEGIN DH PARAMETERS-----\n"),
              s(:str, "MIGHAoGBAKnKQ8MNK6nYZzLrrcuTsLxuiJGXoOO5gT+tljOTbHBuiktdMTITzIY0\n"),
              s(:str, "pFxIvjG05D7HoBZQfrR0c92NGWPkAiCkhQKB8JCbPVzwNLDy6DZ0pmofDKrEsYHG\n"),
              s(:str, "AQjjxMXhwULlmuR/K+WwlaZPiLIBYalLAZQ7ZbOPeVkJ8ePao0eLAgEC\n"),
              s(:str, "-----END DH PARAMETERS-----\n")))),
        s(:send,
          s(:const, nil, :TEST_KEY_DH1024), :priv_key=,
          s(:send,
            s(:const,
              s(:const, nil, :OpenSSL), :BN), :new,
            s(:str, "48561834C67E65FFD2A9B47F41E5E78FDC95C387428FDB1E4B0188B64D1643C3A8D3455B945B7E8C4D166010C7C2CE23BFB9BEF43D0348FE7FA5284B0225E7FE1537546D114E3D8A4411B9B9351AB451E1A358F50ED61B1F00DA29336EEBBD649980AC86D76AF8BBB065298C2052672EEF3EF13AB47A15275FC2836F3AC74CEA"),
            s(:int, 16))),
        s(:casgn, nil, :DSA_SIGNATURE_DIGEST,
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :OpenSSL), :OPENSSL_VERSION_NUMBER), :>,
              s(:int, 268435456)),
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :Digest), :SHA1),
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :Digest), :DSS1))),
        s(:send, nil, :module_function),
        s(:def, :issue_cert,
          s(:args,
            s(:arg, :dn),
            s(:arg, :key),
            s(:arg, :serial),
            s(:arg, :not_before),
            s(:arg, :not_after),
            s(:arg, :extensions),
            s(:arg, :issuer),
            s(:arg, :issuer_key),
            s(:arg, :digest)),
          s(:begin,
            s(:lvasgn, :cert,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Certificate), :new)),
            s(:if,
              s(:lvar, :issuer), nil,
              s(:lvasgn, :issuer,
                s(:lvar, :cert))),
            s(:if,
              s(:lvar, :issuer_key), nil,
              s(:lvasgn, :issuer_key,
                s(:lvar, :key))),
            s(:send,
              s(:lvar, :cert), :version=,
              s(:int, 2)),
            s(:send,
              s(:lvar, :cert), :serial=,
              s(:lvar, :serial)),
            s(:send,
              s(:lvar, :cert), :subject=,
              s(:lvar, :dn)),
            s(:send,
              s(:lvar, :cert), :issuer=,
              s(:send,
                s(:lvar, :issuer), :subject)),
            s(:send,
              s(:lvar, :cert), :public_key=,
              s(:send,
                s(:lvar, :key), :public_key)),
            s(:send,
              s(:lvar, :cert), :not_before=,
              s(:lvar, :not_before)),
            s(:send,
              s(:lvar, :cert), :not_after=,
              s(:lvar, :not_after)),
            s(:lvasgn, :ef,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :ExtensionFactory), :new)),
            s(:send,
              s(:lvar, :ef), :subject_certificate=,
              s(:lvar, :cert)),
            s(:send,
              s(:lvar, :ef), :issuer_certificate=,
              s(:lvar, :issuer)),
            s(:block,
              s(:send,
                s(:lvar, :extensions), :each),
              s(:args,
                s(:arg, :oid),
                s(:arg, :value),
                s(:arg, :critical)),
              s(:send,
                s(:lvar, :cert), :add_extension,
                s(:send,
                  s(:lvar, :ef), :create_extension,
                  s(:lvar, :oid),
                  s(:lvar, :value),
                  s(:lvar, :critical)))),
            s(:send,
              s(:lvar, :cert), :sign,
              s(:lvar, :issuer_key),
              s(:lvar, :digest)),
            s(:lvar, :cert))),
        s(:def, :issue_crl,
          s(:args,
            s(:arg, :revoke_info),
            s(:arg, :serial),
            s(:arg, :lastup),
            s(:arg, :nextup),
            s(:arg, :extensions),
            s(:arg, :issuer),
            s(:arg, :issuer_key),
            s(:arg, :digest)),
          s(:begin,
            s(:lvasgn, :crl,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :CRL), :new)),
            s(:send,
              s(:lvar, :crl), :issuer=,
              s(:send,
                s(:lvar, :issuer), :subject)),
            s(:send,
              s(:lvar, :crl), :version=,
              s(:int, 1)),
            s(:send,
              s(:lvar, :crl), :last_update=,
              s(:lvar, :lastup)),
            s(:send,
              s(:lvar, :crl), :next_update=,
              s(:lvar, :nextup)),
            s(:block,
              s(:send,
                s(:lvar, :revoke_info), :each),
              s(:args,
                s(:arg, :rserial),
                s(:arg, :time),
                s(:arg, :reason_code)),
              s(:begin,
                s(:lvasgn, :revoked,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :X509), :Revoked), :new)),
                s(:send,
                  s(:lvar, :revoked), :serial=,
                  s(:lvar, :rserial)),
                s(:send,
                  s(:lvar, :revoked), :time=,
                  s(:lvar, :time)),
                s(:lvasgn, :enum,
                  s(:send,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :Enumerated,
                    s(:lvar, :reason_code))),
                s(:lvasgn, :ext,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :X509), :Extension), :new,
                    s(:str, "CRLReason"),
                    s(:lvar, :enum))),
                s(:send,
                  s(:lvar, :revoked), :add_extension,
                  s(:lvar, :ext)),
                s(:send,
                  s(:lvar, :crl), :add_revoked,
                  s(:lvar, :revoked)))),
            s(:lvasgn, :ef,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :ExtensionFactory), :new)),
            s(:send,
              s(:lvar, :ef), :issuer_certificate=,
              s(:lvar, :issuer)),
            s(:send,
              s(:lvar, :ef), :crl=,
              s(:lvar, :crl)),
            s(:lvasgn, :crlnum,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :Integer,
                s(:lvar, :serial))),
            s(:send,
              s(:lvar, :crl), :add_extension,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Extension), :new,
                s(:str, "crlNumber"),
                s(:lvar, :crlnum))),
            s(:block,
              s(:send,
                s(:lvar, :extensions), :each),
              s(:args,
                s(:arg, :oid),
                s(:arg, :value),
                s(:arg, :critical)),
              s(:send,
                s(:lvar, :crl), :add_extension,
                s(:send,
                  s(:lvar, :ef), :create_extension,
                  s(:lvar, :oid),
                  s(:lvar, :value),
                  s(:lvar, :critical)))),
            s(:send,
              s(:lvar, :crl), :sign,
              s(:lvar, :issuer_key),
              s(:lvar, :digest)),
            s(:lvar, :crl))),
        s(:def, :get_subject_key_id,
          s(:args,
            s(:arg, :cert)),
          s(:begin,
            s(:lvasgn, :asn1_cert,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode,
                s(:lvar, :cert))),
            s(:lvasgn, :tbscert,
              s(:send,
                s(:send,
                  s(:lvar, :asn1_cert), :value), :[],
                s(:int, 0))),
            s(:lvasgn, :pkinfo,
              s(:send,
                s(:send,
                  s(:lvar, :tbscert), :value), :[],
                s(:int, 6))),
            s(:lvasgn, :publickey,
              s(:send,
                s(:send,
                  s(:lvar, :pkinfo), :value), :[],
                s(:int, 1))),
            s(:lvasgn, :pkvalue,
              s(:send,
                s(:lvar, :publickey), :value)),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :Digest), :SHA1), :hexdigest,
                    s(:lvar, :pkvalue)), :scan,
                  s(:regexp,
                    s(:str, ".."),
                    s(:regopt))), :join,
                s(:str, ":")), :upcase))),
        s(:def, :silent,
          s(:args),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :back),
                    s(:gvasgn, :$VERBOSE)),
                  s(:array,
                    s(:gvar, :$VERBOSE),
                    s(:nil))),
                s(:yield)),
              s(:gvasgn, :$VERBOSE,
                s(:lvar, :back))))),
        s(:class,
          s(:const,
            s(:const, nil, :OpenSSL), :SSLTestCase),
          s(:const,
            s(:const,
              s(:const, nil, :Test), :Unit), :TestCase),
          s(:begin,
            s(:casgn, nil, :RUBY,
              s(:send,
                s(:const, nil, :EnvUtil), :rubybin)),
            s(:casgn, nil, :ITERATIONS,
              s(:if,
                s(:begin,
                  s(:send,
                    s(:gvar, :$0), :==,
                    s(:str, "(string)"))),
                s(:int, 100),
                s(:int, 10))),
            s(:def, :setup,
              s(:args),
              s(:begin,
                s(:ivasgn, :@ca_key,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA2048)),
                s(:ivasgn, :@svr_key,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA1024)),
                s(:ivasgn, :@cli_key,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DSA256)),
                s(:ivasgn, :@ca,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :X509), :Name), :parse,
                    s(:str, "/DC=org/DC=ruby-lang/CN=CA"))),
                s(:ivasgn, :@svr,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :X509), :Name), :parse,
                    s(:str, "/DC=org/DC=ruby-lang/CN=localhost"))),
                s(:ivasgn, :@cli,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :X509), :Name), :parse,
                    s(:str, "/DC=org/DC=ruby-lang/CN=localhost"))),
                s(:lvasgn, :now,
                  s(:send,
                    s(:const, nil, :Time), :at,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Time), :now), :to_i))),
                s(:lvasgn, :ca_exts,
                  s(:array,
                    s(:array,
                      s(:str, "basicConstraints"),
                      s(:str, "CA:TRUE"),
                      s(:true)),
                    s(:array,
                      s(:str, "keyUsage"),
                      s(:str, "cRLSign,keyCertSign"),
                      s(:true)))),
                s(:lvasgn, :ee_exts,
                  s(:array,
                    s(:array,
                      s(:str, "keyUsage"),
                      s(:str, "keyEncipherment,digitalSignature"),
                      s(:true)))),
                s(:ivasgn, :@ca_cert,
                  s(:send, nil, :issue_cert,
                    s(:ivar, :@ca),
                    s(:ivar, :@ca_key),
                    s(:int, 1),
                    s(:lvar, :now),
                    s(:send,
                      s(:lvar, :now), :+,
                      s(:int, 3600)),
                    s(:lvar, :ca_exts),
                    s(:nil),
                    s(:nil),
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
                s(:ivasgn, :@svr_cert,
                  s(:send, nil, :issue_cert,
                    s(:ivar, :@svr),
                    s(:ivar, :@svr_key),
                    s(:int, 2),
                    s(:lvar, :now),
                    s(:send,
                      s(:lvar, :now), :+,
                      s(:int, 1800)),
                    s(:lvar, :ee_exts),
                    s(:ivar, :@ca_cert),
                    s(:ivar, :@ca_key),
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
                s(:ivasgn, :@cli_cert,
                  s(:send, nil, :issue_cert,
                    s(:ivar, :@cli),
                    s(:ivar, :@cli_key),
                    s(:int, 3),
                    s(:lvar, :now),
                    s(:send,
                      s(:lvar, :now), :+,
                      s(:int, 1800)),
                    s(:lvar, :ee_exts),
                    s(:ivar, :@ca_cert),
                    s(:ivar, :@ca_key),
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
                s(:ivasgn, :@server,
                  s(:nil)))),
            s(:def, :teardown,
              s(:args), nil),
            s(:def, :issue_cert,
              s(:args,
                s(:restarg, :arg)),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :issue_cert,
                s(:splat,
                  s(:lvar, :arg)))),
            s(:def, :issue_crl,
              s(:args,
                s(:restarg, :arg)),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :issue_crl,
                s(:splat,
                  s(:lvar, :arg)))),
            s(:def, :readwrite_loop,
              s(:args,
                s(:arg, :ctx),
                s(:arg, :ssl)),
              s(:ensure,
                s(:rescue,
                  s(:while,
                    s(:lvasgn, :line,
                      s(:send,
                        s(:lvar, :ssl), :gets)),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :line), :=~,
                          s(:regexp,
                            s(:str, "^STARTTLS$"),
                            s(:regopt))),
                        s(:begin,
                          s(:send,
                            s(:lvar, :ssl), :accept),
                          s(:next)), nil),
                      s(:send,
                        s(:lvar, :ssl), :write,
                        s(:lvar, :line)))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :SSLError)), nil, nil),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :IOError)), nil, nil), nil),
                s(:rescue,
                  s(:send,
                    s(:lvar, :ssl), :close),
                  s(:resbody, nil, nil,
                    s(:nil)), nil))),
            s(:def, :server_loop,
              s(:args,
                s(:arg, :ctx),
                s(:arg, :ssls),
                s(:arg, :stop_pipe_r),
                s(:arg, :ignore_listener_error),
                s(:arg, :server_proc),
                s(:arg, :threads)),
              s(:rescue,
                s(:block,
                  s(:send, nil, :loop),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :ssl,
                      s(:nil)),
                    s(:kwbegin,
                      s(:rescue,
                        s(:begin,
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :readable)),
                            s(:send,
                              s(:const, nil, :IO), :select,
                              s(:array,
                                s(:lvar, :ssls),
                                s(:lvar, :stop_pipe_r)))),
                          s(:if,
                            s(:send,
                              s(:lvar, :readable), :include?,
                              s(:lvar, :stop_pipe_r)),
                            s(:return), nil),
                          s(:lvasgn, :ssl,
                            s(:send,
                              s(:lvar, :ssls), :accept))),
                        s(:resbody,
                          s(:array,
                            s(:const,
                              s(:const,
                                s(:const, nil, :OpenSSL), :SSL), :SSLError)), nil,
                          s(:if,
                            s(:lvar, :ignore_listener_error),
                            s(:retry),
                            s(:send, nil, :raise))), nil)),
                    s(:lvasgn, :th,
                      s(:block,
                        s(:send,
                          s(:const, nil, :Thread), :start),
                        s(:args),
                        s(:send,
                          s(:lvar, :server_proc), :call,
                          s(:lvar, :ctx),
                          s(:lvar, :ssl)))),
                    s(:send,
                      s(:lvar, :threads), :<<,
                      s(:lvar, :th)))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Errno), :EBADF),
                    s(:const, nil, :IOError),
                    s(:const,
                      s(:const, nil, :Errno), :EINVAL),
                    s(:const,
                      s(:const, nil, :Errno), :ECONNABORTED),
                    s(:const,
                      s(:const, nil, :Errno), :ENOTSOCK),
                    s(:const,
                      s(:const, nil, :Errno), :ECONNRESET)), nil,
                  s(:if,
                    s(:send,
                      s(:lvar, :ignore_listener_error), :!),
                    s(:send, nil, :raise), nil)), nil)),
            s(:def, :start_server,
              s(:args,
                s(:arg, :verify_mode),
                s(:arg, :start_immediately),
                s(:optarg, :args,
                  s(:hash)),
                s(:blockarg, :block)),
              s(:block,
                s(:send,
                  s(:const, nil, :IO), :pipe),
                s(:args,
                  s(:arg, :stop_pipe_r),
                  s(:arg, :stop_pipe_w)),
                s(:begin,
                  s(:lvasgn, :ctx_proc,
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:sym, :ctx_proc))),
                  s(:lvasgn, :server_proc,
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:sym, :server_proc))),
                  s(:lvasgn, :ignore_listener_error,
                    s(:send,
                      s(:lvar, :args), :fetch,
                      s(:sym, :ignore_listener_error),
                      s(:false))),
                  s(:lvasgn, :use_anon_cipher,
                    s(:send,
                      s(:lvar, :args), :fetch,
                      s(:sym, :use_anon_cipher),
                      s(:false))),
                  s(:or_asgn,
                    s(:lvasgn, :server_proc),
                    s(:send, nil, :method,
                      s(:sym, :readwrite_loop))),
                  s(:lvasgn, :store,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :X509), :Store), :new)),
                  s(:send,
                    s(:lvar, :store), :add_cert,
                    s(:ivar, :@ca_cert)),
                  s(:send,
                    s(:lvar, :store), :purpose=,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :X509), :PURPOSE_SSL_CLIENT)),
                  s(:lvasgn, :ctx,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                  s(:if,
                    s(:lvar, :use_anon_cipher),
                    s(:send,
                      s(:lvar, :ctx), :ciphers=,
                      s(:str, "ADH-AES256-GCM-SHA384")), nil),
                  s(:send,
                    s(:lvar, :ctx), :cert_store=,
                    s(:lvar, :store)),
                  s(:send,
                    s(:lvar, :ctx), :cert=,
                    s(:ivar, :@svr_cert)),
                  s(:send,
                    s(:lvar, :ctx), :key=,
                    s(:ivar, :@svr_key)),
                  s(:send,
                    s(:lvar, :ctx), :tmp_dh_callback=,
                    s(:block,
                      s(:send, nil, :proc),
                      s(:args),
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DH1024))),
                  s(:send,
                    s(:lvar, :ctx), :verify_mode=,
                    s(:lvar, :verify_mode)),
                  s(:if,
                    s(:lvar, :ctx_proc),
                    s(:send,
                      s(:lvar, :ctx_proc), :call,
                      s(:lvar, :ctx)), nil),
                  s(:send,
                    s(:const, nil, :Socket), :do_not_reverse_lookup=,
                    s(:true)),
                  s(:lvasgn, :tcps,
                    s(:nil)),
                  s(:lvasgn, :tcps,
                    s(:send,
                      s(:const, nil, :TCPServer), :new,
                      s(:str, "127.0.0.1"),
                      s(:int, 0))),
                  s(:lvasgn, :port,
                    s(:send,
                      s(:send,
                        s(:lvar, :tcps), :connect_address), :ip_port)),
                  s(:lvasgn, :ssls,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :SSLServer), :new,
                      s(:lvar, :tcps),
                      s(:lvar, :ctx))),
                  s(:send,
                    s(:lvar, :ssls), :start_immediately=,
                    s(:lvar, :start_immediately)),
                  s(:lvasgn, :threads,
                    s(:array)),
                  s(:kwbegin,
                    s(:ensure,
                      s(:begin,
                        s(:lvasgn, :server,
                          s(:block,
                            s(:send,
                              s(:const, nil, :Thread), :new),
                            s(:args),
                            s(:kwbegin,
                              s(:ensure,
                                s(:send, nil, :server_loop,
                                  s(:lvar, :ctx),
                                  s(:lvar, :ssls),
                                  s(:lvar, :stop_pipe_r),
                                  s(:lvar, :ignore_listener_error),
                                  s(:lvar, :server_proc),
                                  s(:lvar, :threads)),
                                s(:send,
                                  s(:lvar, :tcps), :close))))),
                        s(:send,
                          s(:lvar, :threads), :unshift,
                          s(:lvar, :server)),
                        s(:if,
                          s(:gvar, :$DEBUG),
                          s(:send,
                            s(:gvar, :$stderr), :printf,
                            s(:str, "SSL server started: pid=%d port=%d\n"),
                            s(:gvar, :$$),
                            s(:lvar, :port)), nil),
                        s(:lvasgn, :client,
                          s(:block,
                            s(:send,
                              s(:const, nil, :Thread), :new),
                            s(:args),
                            s(:kwbegin,
                              s(:ensure,
                                s(:send,
                                  s(:lvar, :block), :call,
                                  s(:lvar, :server),
                                  s(:send,
                                    s(:lvar, :port), :to_i)),
                                s(:send,
                                  s(:lvar, :stop_pipe_w), :close))))),
                        s(:send,
                          s(:lvar, :threads), :unshift,
                          s(:lvar, :client))),
                      s(:send, nil, :assert_join_threads,
                        s(:lvar, :threads))))))),
            s(:def, :starttls,
              s(:args,
                s(:arg, :ssl)),
              s(:begin,
                s(:send,
                  s(:lvar, :ssl), :puts,
                  s(:str, "STARTTLS")),
                s(:send, nil, :sleep,
                  s(:int, 1)),
                s(:send,
                  s(:lvar, :ssl), :connect))))))), nil))
