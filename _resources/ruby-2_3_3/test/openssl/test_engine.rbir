s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "utils")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :TestUtils)),
    s(:class,
      s(:const,
        s(:const, nil, :OpenSSL), :TestEngine),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :teardown,
          s(:args),
          s(:begin,
            s(:send,
              s(:const,
                s(:const, nil, :OpenSSL), :Engine), :cleanup),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Engine), :engines), :size)))),
        s(:def, :test_engines_free,
          s(:args),
          s(:begin,
            s(:send,
              s(:const,
                s(:const, nil, :OpenSSL), :Engine), :load,
              s(:str, "openssl")),
            s(:send,
              s(:const,
                s(:const, nil, :OpenSSL), :Engine), :engines),
            s(:send,
              s(:const,
                s(:const, nil, :OpenSSL), :Engine), :engines))),
        s(:def, :test_openssl_engine_builtin,
          s(:args),
          s(:begin,
            s(:lvasgn, :engine,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :Engine), :load,
                s(:str, "openssl"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :engine)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Engine), :engines), :size)))),
        s(:def, :test_openssl_engine_by_id_string,
          s(:args),
          s(:begin,
            s(:lvasgn, :engine,
              s(:send, nil, :get_engine)),
            s(:send, nil, :assert_not_nil,
              s(:lvar, :engine)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Engine), :engines), :size)))),
        s(:def, :test_openssl_engine_id_name_inspect,
          s(:args),
          s(:begin,
            s(:lvasgn, :engine,
              s(:send, nil, :get_engine)),
            s(:send, nil, :assert_equal,
              s(:str, "openssl"),
              s(:send,
                s(:lvar, :engine), :id)),
            s(:send, nil, :assert_not_nil,
              s(:send,
                s(:lvar, :engine), :name)),
            s(:send, nil, :assert_not_nil,
              s(:send,
                s(:lvar, :engine), :inspect)))),
        s(:def, :test_openssl_engine_digest_sha1,
          s(:args),
          s(:begin,
            s(:lvasgn, :engine,
              s(:send, nil, :get_engine)),
            s(:lvasgn, :digest,
              s(:send,
                s(:lvar, :engine), :digest,
                s(:str, "SHA1"))),
            s(:send, nil, :assert_not_nil,
              s(:lvar, :digest)),
            s(:lvasgn, :data,
              s(:str, "test")),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Digest), :SHA1), :digest,
                s(:lvar, :data)),
              s(:send,
                s(:lvar, :digest), :digest,
                s(:lvar, :data))))),
        s(:def, :test_openssl_engine_cipher_rc4,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :engine,
                s(:send, nil, :get_engine)),
              s(:lvasgn, :algo,
                s(:str, "RC4")),
              s(:lvasgn, :data,
                s(:send,
                  s(:str, "a"), :*,
                  s(:int, 1000))),
              s(:lvasgn, :key,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Random), :random_bytes,
                  s(:int, 16))),
              s(:lvasgn, :err_back,
                s(:send,
                  s(:gvar, :$stderr), :dup)),
              s(:send,
                s(:gvar, :$stderr), :reopen,
                s(:const,
                  s(:const, nil, :IO), :NULL)),
              s(:lvasgn, :encrypted,
                s(:block,
                  s(:send, nil, :crypt_data,
                    s(:lvar, :data),
                    s(:lvar, :key),
                    s(:sym, :encrypt)),
                  s(:args),
                  s(:send,
                    s(:lvar, :engine), :cipher,
                    s(:lvar, :algo)))),
              s(:lvasgn, :decrypted,
                s(:block,
                  s(:send, nil, :crypt_data,
                    s(:lvar, :encrypted),
                    s(:lvar, :key),
                    s(:sym, :decrypt)),
                  s(:args),
                  s(:send,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Cipher), :new,
                    s(:lvar, :algo)))),
              s(:send, nil, :assert_equal,
                s(:lvar, :data),
                s(:lvar, :decrypted))),
            s(:if,
              s(:lvar, :err_back),
              s(:begin,
                s(:send,
                  s(:gvar, :$stderr), :reopen,
                  s(:lvar, :err_back)),
                s(:send,
                  s(:lvar, :err_back), :close)), nil))),
        s(:send, nil, :private),
        s(:def, :get_engine,
          s(:args),
          s(:send,
            s(:const,
              s(:const, nil, :OpenSSL), :Engine), :by_id,
            s(:str, "openssl"))),
        s(:def, :crypt_data,
          s(:args,
            s(:arg, :data),
            s(:arg, :key),
            s(:arg, :mode)),
          s(:begin,
            s(:lvasgn, :cipher,
              s(:yield)),
            s(:send,
              s(:lvar, :cipher), :send,
              s(:lvar, :mode)),
            s(:send,
              s(:lvar, :cipher), :key=,
              s(:lvar, :key)),
            s(:send,
              s(:send,
                s(:lvar, :cipher), :update,
                s(:lvar, :data)), :+,
              s(:send,
                s(:lvar, :cipher), :final)))))), nil))
