s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "utils")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :TestUtils)),
    s(:class,
      s(:const,
        s(:const, nil, :OpenSSL), :TestX509CRL),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:ivasgn, :@rsa1024,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA1024)),
            s(:ivasgn, :@rsa2048,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA2048)),
            s(:ivasgn, :@dsa256,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DSA256)),
            s(:ivasgn, :@dsa512,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DSA512)),
            s(:ivasgn, :@ca,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Name), :parse,
                s(:str, "/DC=org/DC=ruby-lang/CN=CA"))),
            s(:ivasgn, :@ee1,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Name), :parse,
                s(:str, "/DC=org/DC=ruby-lang/CN=EE1"))),
            s(:ivasgn, :@ee2,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Name), :parse,
                s(:str, "/DC=org/DC=ruby-lang/CN=EE2"))))),
        s(:def, :teardown,
          s(:args), nil),
        s(:def, :issue_crl,
          s(:args,
            s(:restarg, :args)),
          s(:send,
            s(:const,
              s(:const, nil, :OpenSSL), :TestUtils), :issue_crl,
            s(:splat,
              s(:lvar, :args)))),
        s(:def, :issue_cert,
          s(:args,
            s(:restarg, :args)),
          s(:send,
            s(:const,
              s(:const, nil, :OpenSSL), :TestUtils), :issue_cert,
            s(:splat,
              s(:lvar, :args)))),
        s(:def, :test_basic,
          s(:args),
          s(:begin,
            s(:lvasgn, :now,
              s(:send,
                s(:const, nil, :Time), :at,
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :to_i))),
            s(:lvasgn, :cert,
              s(:send, nil, :issue_cert,
                s(:ivar, :@ca),
                s(:ivar, :@rsa2048),
                s(:int, 1),
                s(:lvar, :now),
                s(:send,
                  s(:lvar, :now), :+,
                  s(:int, 3600)),
                s(:array),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:lvasgn, :crl,
              s(:send, nil, :issue_crl,
                s(:array),
                s(:int, 1),
                s(:lvar, :now),
                s(:send,
                  s(:lvar, :now), :+,
                  s(:int, 1600)),
                s(:array),
                s(:lvar, :cert),
                s(:ivar, :@rsa2048),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :crl), :version)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:lvar, :cert), :issuer), :to_der),
              s(:send,
                s(:send,
                  s(:lvar, :crl), :issuer), :to_der)),
            s(:send, nil, :assert_equal,
              s(:lvar, :now),
              s(:send,
                s(:lvar, :crl), :last_update)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :now), :+,
                s(:int, 1600)),
              s(:send,
                s(:lvar, :crl), :next_update)),
            s(:lvasgn, :crl,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :CRL), :new,
                s(:send,
                  s(:lvar, :crl), :to_der))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :crl), :version)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:lvar, :cert), :issuer), :to_der),
              s(:send,
                s(:send,
                  s(:lvar, :crl), :issuer), :to_der)),
            s(:send, nil, :assert_equal,
              s(:lvar, :now),
              s(:send,
                s(:lvar, :crl), :last_update)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :now), :+,
                s(:int, 1600)),
              s(:send,
                s(:lvar, :crl), :next_update)))),
        s(:def, :test_revoked,
          s(:args),
          s(:begin,
            s(:lvasgn, :now,
              s(:send,
                s(:const, nil, :Time), :at,
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :to_i))),
            s(:lvasgn, :revoke_info,
              s(:array,
                s(:array,
                  s(:int, 1),
                  s(:send,
                    s(:const, nil, :Time), :at,
                    s(:int, 0)),
                  s(:int, 1)),
                s(:array,
                  s(:int, 2),
                  s(:send,
                    s(:const, nil, :Time), :at,
                    s(:int, 2147483647)),
                  s(:int, 2)),
                s(:array,
                  s(:int, 3),
                  s(:lvar, :now),
                  s(:int, 3)),
                s(:array,
                  s(:int, 4),
                  s(:lvar, :now),
                  s(:int, 4)),
                s(:array,
                  s(:int, 5),
                  s(:lvar, :now),
                  s(:int, 5)))),
            s(:lvasgn, :cert,
              s(:send, nil, :issue_cert,
                s(:ivar, :@ca),
                s(:ivar, :@rsa2048),
                s(:int, 1),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:int, 3600)),
                s(:array),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:lvasgn, :crl,
              s(:send, nil, :issue_crl,
                s(:lvar, :revoke_info),
                s(:int, 1),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:int, 1600)),
                s(:array),
                s(:lvar, :cert),
                s(:ivar, :@rsa2048),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:lvasgn, :revoked,
              s(:send,
                s(:lvar, :crl), :revoked)),
            s(:send, nil, :assert_equal,
              s(:int, 5),
              s(:send,
                s(:lvar, :revoked), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:lvar, :revoked), :[],
                  s(:int, 0)), :serial)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:lvar, :revoked), :[],
                  s(:int, 1)), :serial)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send,
                  s(:lvar, :revoked), :[],
                  s(:int, 2)), :serial)),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:send,
                s(:send,
                  s(:lvar, :revoked), :[],
                  s(:int, 3)), :serial)),
            s(:send, nil, :assert_equal,
              s(:int, 5),
              s(:send,
                s(:send,
                  s(:lvar, :revoked), :[],
                  s(:int, 4)), :serial)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :Time), :at,
                s(:int, 0)),
              s(:send,
                s(:send,
                  s(:lvar, :revoked), :[],
                  s(:int, 0)), :time)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :Time), :at,
                s(:int, 2147483647)),
              s(:send,
                s(:send,
                  s(:lvar, :revoked), :[],
                  s(:int, 1)), :time)),
            s(:send, nil, :assert_equal,
              s(:lvar, :now),
              s(:send,
                s(:send,
                  s(:lvar, :revoked), :[],
                  s(:int, 2)), :time)),
            s(:send, nil, :assert_equal,
              s(:lvar, :now),
              s(:send,
                s(:send,
                  s(:lvar, :revoked), :[],
                  s(:int, 3)), :time)),
            s(:send, nil, :assert_equal,
              s(:lvar, :now),
              s(:send,
                s(:send,
                  s(:lvar, :revoked), :[],
                  s(:int, 4)), :time)),
            s(:send, nil, :assert_equal,
              s(:str, "CRLReason"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :revoked), :[],
                      s(:int, 0)), :extensions), :[],
                  s(:int, 0)), :oid)),
            s(:send, nil, :assert_equal,
              s(:str, "CRLReason"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :revoked), :[],
                      s(:int, 1)), :extensions), :[],
                  s(:int, 0)), :oid)),
            s(:send, nil, :assert_equal,
              s(:str, "CRLReason"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :revoked), :[],
                      s(:int, 2)), :extensions), :[],
                  s(:int, 0)), :oid)),
            s(:send, nil, :assert_equal,
              s(:str, "CRLReason"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :revoked), :[],
                      s(:int, 3)), :extensions), :[],
                  s(:int, 0)), :oid)),
            s(:send, nil, :assert_equal,
              s(:str, "CRLReason"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :revoked), :[],
                      s(:int, 4)), :extensions), :[],
                  s(:int, 0)), :oid)),
            s(:send, nil, :assert_equal,
              s(:str, "Key Compromise"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :revoked), :[],
                      s(:int, 0)), :extensions), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_equal,
              s(:str, "CA Compromise"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :revoked), :[],
                      s(:int, 1)), :extensions), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_equal,
              s(:str, "Affiliation Changed"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :revoked), :[],
                      s(:int, 2)), :extensions), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_equal,
              s(:str, "Superseded"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :revoked), :[],
                      s(:int, 3)), :extensions), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_equal,
              s(:str, "Cessation Of Operation"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :revoked), :[],
                      s(:int, 4)), :extensions), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :revoked), :[],
                      s(:int, 0)), :extensions), :[],
                  s(:int, 0)), :critical?)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :revoked), :[],
                      s(:int, 1)), :extensions), :[],
                  s(:int, 0)), :critical?)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :revoked), :[],
                      s(:int, 2)), :extensions), :[],
                  s(:int, 0)), :critical?)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :revoked), :[],
                      s(:int, 3)), :extensions), :[],
                  s(:int, 0)), :critical?)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :revoked), :[],
                      s(:int, 4)), :extensions), :[],
                  s(:int, 0)), :critical?)),
            s(:send, nil, :assert_equal,
              s(:str, "Key Compromise"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :revoked), :[],
                      s(:int, 0)), :extensions), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_equal,
              s(:str, "CA Compromise"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :revoked), :[],
                      s(:int, 1)), :extensions), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_equal,
              s(:str, "Affiliation Changed"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :revoked), :[],
                      s(:int, 2)), :extensions), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_equal,
              s(:str, "Superseded"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :revoked), :[],
                      s(:int, 3)), :extensions), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_equal,
              s(:str, "Cessation Of Operation"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :revoked), :[],
                      s(:int, 4)), :extensions), :[],
                  s(:int, 0)), :value)),
            s(:lvasgn, :revoke_info,
              s(:block,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:int, 1000))), :collect),
                s(:args,
                  s(:arg, :i)),
                s(:array,
                  s(:lvar, :i),
                  s(:lvar, :now),
                  s(:int, 0)))),
            s(:lvasgn, :crl,
              s(:send, nil, :issue_crl,
                s(:lvar, :revoke_info),
                s(:int, 1),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:int, 1600)),
                s(:array),
                s(:lvar, :cert),
                s(:ivar, :@rsa2048),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:lvasgn, :revoked,
              s(:send,
                s(:lvar, :crl), :revoked)),
            s(:send, nil, :assert_equal,
              s(:int, 1000),
              s(:send,
                s(:lvar, :revoked), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:lvar, :revoked), :[],
                  s(:int, 0)), :serial)),
            s(:send, nil, :assert_equal,
              s(:int, 1000),
              s(:send,
                s(:send,
                  s(:lvar, :revoked), :[],
                  s(:int, 999)), :serial)))),
        s(:def, :test_extension,
          s(:args),
          s(:begin,
            s(:lvasgn, :cert_exts,
              s(:array,
                s(:array,
                  s(:str, "basicConstraints"),
                  s(:str, "CA:TRUE"),
                  s(:true)),
                s(:array,
                  s(:str, "subjectKeyIdentifier"),
                  s(:str, "hash"),
                  s(:false)),
                s(:array,
                  s(:str, "authorityKeyIdentifier"),
                  s(:str, "keyid:always"),
                  s(:false)),
                s(:array,
                  s(:str, "subjectAltName"),
                  s(:str, "email:xyzzy@ruby-lang.org"),
                  s(:false)),
                s(:array,
                  s(:str, "keyUsage"),
                  s(:str, "cRLSign, keyCertSign"),
                  s(:true)))),
            s(:lvasgn, :crl_exts,
              s(:array,
                s(:array,
                  s(:str, "authorityKeyIdentifier"),
                  s(:str, "keyid:always"),
                  s(:false)),
                s(:array,
                  s(:str, "issuerAltName"),
                  s(:str, "issuer:copy"),
                  s(:false)))),
            s(:lvasgn, :cert,
              s(:send, nil, :issue_cert,
                s(:ivar, :@ca),
                s(:ivar, :@rsa2048),
                s(:int, 1),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:int, 3600)),
                s(:lvar, :cert_exts),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:lvasgn, :crl,
              s(:send, nil, :issue_crl,
                s(:array),
                s(:int, 1),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:int, 1600)),
                s(:lvar, :crl_exts),
                s(:lvar, :cert),
                s(:ivar, :@rsa2048),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:lvasgn, :exts,
              s(:send,
                s(:lvar, :crl), :extensions)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:lvar, :exts), :size)),
            s(:send, nil, :assert_equal,
              s(:str, "1"),
              s(:send,
                s(:send,
                  s(:lvar, :exts), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_equal,
              s(:str, "crlNumber"),
              s(:send,
                s(:send,
                  s(:lvar, :exts), :[],
                  s(:int, 0)), :oid)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:send,
                  s(:lvar, :exts), :[],
                  s(:int, 0)), :critical?)),
            s(:send, nil, :assert_equal,
              s(:str, "authorityKeyIdentifier"),
              s(:send,
                s(:send,
                  s(:lvar, :exts), :[],
                  s(:int, 1)), :oid)),
            s(:lvasgn, :keyid,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :get_subject_key_id,
                s(:lvar, :cert))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "^keyid:"),
                s(:begin,
                  s(:lvar, :keyid)),
                s(:regopt)),
              s(:send,
                s(:send,
                  s(:lvar, :exts), :[],
                  s(:int, 1)), :value)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:send,
                  s(:lvar, :exts), :[],
                  s(:int, 1)), :critical?)),
            s(:send, nil, :assert_equal,
              s(:str, "issuerAltName"),
              s(:send,
                s(:send,
                  s(:lvar, :exts), :[],
                  s(:int, 2)), :oid)),
            s(:send, nil, :assert_equal,
              s(:str, "email:xyzzy@ruby-lang.org"),
              s(:send,
                s(:send,
                  s(:lvar, :exts), :[],
                  s(:int, 2)), :value)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:send,
                  s(:lvar, :exts), :[],
                  s(:int, 2)), :critical?)),
            s(:lvasgn, :crl,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :CRL), :new,
                s(:send,
                  s(:lvar, :crl), :to_der))),
            s(:lvasgn, :exts,
              s(:send,
                s(:lvar, :crl), :extensions)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:lvar, :exts), :size)),
            s(:send, nil, :assert_equal,
              s(:str, "1"),
              s(:send,
                s(:send,
                  s(:lvar, :exts), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_equal,
              s(:str, "crlNumber"),
              s(:send,
                s(:send,
                  s(:lvar, :exts), :[],
                  s(:int, 0)), :oid)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:send,
                  s(:lvar, :exts), :[],
                  s(:int, 0)), :critical?)),
            s(:send, nil, :assert_equal,
              s(:str, "authorityKeyIdentifier"),
              s(:send,
                s(:send,
                  s(:lvar, :exts), :[],
                  s(:int, 1)), :oid)),
            s(:lvasgn, :keyid,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :get_subject_key_id,
                s(:lvar, :cert))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "^keyid:"),
                s(:begin,
                  s(:lvar, :keyid)),
                s(:regopt)),
              s(:send,
                s(:send,
                  s(:lvar, :exts), :[],
                  s(:int, 1)), :value)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:send,
                  s(:lvar, :exts), :[],
                  s(:int, 1)), :critical?)),
            s(:send, nil, :assert_equal,
              s(:str, "issuerAltName"),
              s(:send,
                s(:send,
                  s(:lvar, :exts), :[],
                  s(:int, 2)), :oid)),
            s(:send, nil, :assert_equal,
              s(:str, "email:xyzzy@ruby-lang.org"),
              s(:send,
                s(:send,
                  s(:lvar, :exts), :[],
                  s(:int, 2)), :value)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:send,
                  s(:lvar, :exts), :[],
                  s(:int, 2)), :critical?)))),
        s(:def, :test_crlnumber,
          s(:args),
          s(:begin,
            s(:lvasgn, :cert,
              s(:send, nil, :issue_cert,
                s(:ivar, :@ca),
                s(:ivar, :@rsa2048),
                s(:int, 1),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:int, 3600)),
                s(:array),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:lvasgn, :crl,
              s(:send, nil, :issue_crl,
                s(:array),
                s(:int, 1),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:int, 1600)),
                s(:array),
                s(:lvar, :cert),
                s(:ivar, :@rsa2048),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:send, nil, :assert_match,
              s(:send,
                s(:int, 1), :to_s),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :crl), :extensions), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "X509v3 CRL Number:\\s+"),
                s(:begin,
                  s(:int, 1)),
                s(:regopt, :m)),
              s(:send,
                s(:lvar, :crl), :to_text)),
            s(:lvasgn, :crl,
              s(:send, nil, :issue_crl,
                s(:array),
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:int, 1600)),
                s(:array),
                s(:lvar, :cert),
                s(:ivar, :@rsa2048),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:send, nil, :assert_match,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 32))), :to_s),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :crl), :extensions), :[],
                  s(:int, 0)), :value)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "X509v3 CRL Number:\\s+"),
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 32))),
                s(:regopt, :m)),
              s(:send,
                s(:lvar, :crl), :to_text)),
            s(:lvasgn, :crl,
              s(:send, nil, :issue_crl,
                s(:array),
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 100)),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:int, 1600)),
                s(:array),
                s(:lvar, :cert),
                s(:ivar, :@rsa2048),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "X509v3 CRL Number:\\s+"),
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))),
                s(:regopt, :m)),
              s(:send,
                s(:lvar, :crl), :to_text)),
            s(:send, nil, :assert_match,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :crl), :extensions), :[],
                  s(:int, 0)), :value)))),
        s(:def, :test_sign_and_verify,
          s(:args),
          s(:begin,
            s(:lvasgn, :cert,
              s(:send, nil, :issue_cert,
                s(:ivar, :@ca),
                s(:ivar, :@rsa2048),
                s(:int, 1),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:int, 3600)),
                s(:array),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:lvasgn, :crl,
              s(:send, nil, :issue_crl,
                s(:array),
                s(:int, 1),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:int, 1600)),
                s(:array),
                s(:lvar, :cert),
                s(:ivar, :@rsa2048),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :crl), :verify,
                s(:ivar, :@rsa1024))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:lvar, :crl), :verify,
                s(:ivar, :@rsa2048))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:block,
                s(:send, nil, :crl_error_returns_false),
                s(:args),
                s(:send,
                  s(:lvar, :crl), :verify,
                  s(:ivar, :@dsa256)))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:block,
                s(:send, nil, :crl_error_returns_false),
                s(:args),
                s(:send,
                  s(:lvar, :crl), :verify,
                  s(:ivar, :@dsa512)))),
            s(:send,
              s(:lvar, :crl), :version=,
              s(:int, 0)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :crl), :verify,
                s(:ivar, :@rsa2048))),
            s(:lvasgn, :cert,
              s(:send, nil, :issue_cert,
                s(:ivar, :@ca),
                s(:ivar, :@dsa512),
                s(:int, 1),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:int, 3600)),
                s(:array),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :TestUtils), :DSA_SIGNATURE_DIGEST), :new))),
            s(:lvasgn, :crl,
              s(:send, nil, :issue_crl,
                s(:array),
                s(:int, 1),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:int, 1600)),
                s(:array),
                s(:lvar, :cert),
                s(:ivar, :@dsa512),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :TestUtils), :DSA_SIGNATURE_DIGEST), :new))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:block,
                s(:send, nil, :crl_error_returns_false),
                s(:args),
                s(:send,
                  s(:lvar, :crl), :verify,
                  s(:ivar, :@rsa1024)))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:block,
                s(:send, nil, :crl_error_returns_false),
                s(:args),
                s(:send,
                  s(:lvar, :crl), :verify,
                  s(:ivar, :@rsa2048)))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :crl), :verify,
                s(:ivar, :@dsa256))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:lvar, :crl), :verify,
                s(:ivar, :@dsa512))),
            s(:send,
              s(:lvar, :crl), :version=,
              s(:int, 0)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :crl), :verify,
                s(:ivar, :@dsa512))))),
        s(:send, nil, :private),
        s(:def, :crl_error_returns_false,
          s(:args),
          s(:rescue,
            s(:yield),
            s(:resbody,
              s(:array,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :CRLError)), nil,
              s(:false)), nil)))), nil))
