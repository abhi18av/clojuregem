s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "utils")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :TestUtils)),
    s(:class,
      s(:const,
        s(:const, nil, :OpenSSL), :TestX509Certificate),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:ivasgn, :@rsa1024,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA1024)),
            s(:ivasgn, :@rsa2048,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA2048)),
            s(:ivasgn, :@dsa256,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DSA256)),
            s(:ivasgn, :@dsa512,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DSA512)),
            s(:ivasgn, :@ca,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Name), :parse,
                s(:str, "/DC=org/DC=ruby-lang/CN=CA"))),
            s(:ivasgn, :@ee1,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Name), :parse,
                s(:str, "/DC=org/DC=ruby-lang/CN=EE1"))),
            s(:ivasgn, :@ee2,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Name), :parse,
                s(:str, "/DC=org/DC=ruby-lang/CN=EE2"))))),
        s(:def, :teardown,
          s(:args), nil),
        s(:def, :issue_cert,
          s(:args,
            s(:restarg, :args)),
          s(:send,
            s(:const,
              s(:const, nil, :OpenSSL), :TestUtils), :issue_cert,
            s(:splat,
              s(:lvar, :args)))),
        s(:def, :test_serial,
          s(:args),
          s(:block,
            s(:send,
              s(:array,
                s(:int, 1),
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)),
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 100))), :each),
            s(:args,
              s(:arg, :s)),
            s(:begin,
              s(:lvasgn, :cert,
                s(:send, nil, :issue_cert,
                  s(:ivar, :@ca),
                  s(:ivar, :@rsa2048),
                  s(:lvar, :s),
                  s(:send,
                    s(:const, nil, :Time), :now),
                  s(:send,
                    s(:send,
                      s(:const, nil, :Time), :now), :+,
                    s(:int, 3600)),
                  s(:array),
                  s(:nil),
                  s(:nil),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
              s(:send, nil, :assert_equal,
                s(:lvar, :s),
                s(:send,
                  s(:lvar, :cert), :serial)),
              s(:lvasgn, :cert,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
                  s(:send,
                    s(:lvar, :cert), :to_der))),
              s(:send, nil, :assert_equal,
                s(:lvar, :s),
                s(:send,
                  s(:lvar, :cert), :serial))))),
        s(:def, :test_public_key,
          s(:args),
          s(:begin,
            s(:lvasgn, :exts,
              s(:array,
                s(:array,
                  s(:str, "basicConstraints"),
                  s(:str, "CA:TRUE"),
                  s(:true)),
                s(:array,
                  s(:str, "subjectKeyIdentifier"),
                  s(:str, "hash"),
                  s(:false)),
                s(:array,
                  s(:str, "authorityKeyIdentifier"),
                  s(:str, "keyid:always"),
                  s(:false)))),
            s(:lvasgn, :sha1,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Digest), :SHA1), :new)),
            s(:lvasgn, :dsa_digest,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :TestUtils), :DSA_SIGNATURE_DIGEST), :new)),
            s(:block,
              s(:send,
                s(:array,
                  s(:array,
                    s(:ivar, :@rsa1024),
                    s(:lvar, :sha1)),
                  s(:array,
                    s(:ivar, :@rsa2048),
                    s(:lvar, :sha1)),
                  s(:array,
                    s(:ivar, :@dsa256),
                    s(:lvar, :dsa_digest)),
                  s(:array,
                    s(:ivar, :@dsa512),
                    s(:lvar, :dsa_digest))), :each),
              s(:args,
                s(:arg, :pk),
                s(:arg, :digest)),
              s(:begin,
                s(:lvasgn, :cert,
                  s(:send, nil, :issue_cert,
                    s(:ivar, :@ca),
                    s(:lvar, :pk),
                    s(:int, 1),
                    s(:send,
                      s(:const, nil, :Time), :now),
                    s(:send,
                      s(:send,
                        s(:const, nil, :Time), :now), :+,
                      s(:int, 3600)),
                    s(:lvar, :exts),
                    s(:nil),
                    s(:nil),
                    s(:lvar, :digest))),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :cert), :extensions), :sort_by,
                        s(:block_pass,
                          s(:sym, :to_s))), :[],
                      s(:int, 2)), :value),
                  s(:send,
                    s(:const,
                      s(:const, nil, :OpenSSL), :TestUtils), :get_subject_key_id,
                    s(:lvar, :cert))),
                s(:lvasgn, :cert,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
                    s(:send,
                      s(:lvar, :cert), :to_der))),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :cert), :extensions), :sort_by,
                        s(:block_pass,
                          s(:sym, :to_s))), :[],
                      s(:int, 2)), :value),
                  s(:send,
                    s(:const,
                      s(:const, nil, :OpenSSL), :TestUtils), :get_subject_key_id,
                    s(:lvar, :cert))))))),
        s(:def, :test_validity,
          s(:args),
          s(:begin,
            s(:until,
              s(:and,
                s(:lvar, :now),
                s(:send,
                  s(:send,
                    s(:lvar, :now), :usec), :!=,
                  s(:int, 0))),
              s(:lvasgn, :now,
                s(:send,
                  s(:const, nil, :Time), :now))),
            s(:lvasgn, :cert,
              s(:send, nil, :issue_cert,
                s(:ivar, :@ca),
                s(:ivar, :@rsa2048),
                s(:int, 1),
                s(:lvar, :now),
                s(:send,
                  s(:lvar, :now), :+,
                  s(:int, 3600)),
                s(:array),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:send, nil, :assert_not_equal,
              s(:lvar, :now),
              s(:send,
                s(:lvar, :cert), :not_before)),
            s(:send, nil, :assert_not_equal,
              s(:send,
                s(:lvar, :now), :+,
                s(:int, 3600)),
              s(:send,
                s(:lvar, :cert), :not_after)),
            s(:lvasgn, :now,
              s(:send,
                s(:const, nil, :Time), :at,
                s(:send,
                  s(:lvar, :now), :to_i))),
            s(:lvasgn, :cert,
              s(:send, nil, :issue_cert,
                s(:ivar, :@ca),
                s(:ivar, :@rsa2048),
                s(:int, 1),
                s(:lvar, :now),
                s(:send,
                  s(:lvar, :now), :+,
                  s(:int, 3600)),
                s(:array),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :now), :getutc),
              s(:send,
                s(:lvar, :cert), :not_before)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:lvar, :now), :+,
                    s(:int, 3600))), :getutc),
              s(:send,
                s(:lvar, :cert), :not_after)),
            s(:lvasgn, :now,
              s(:send,
                s(:const, nil, :Time), :at,
                s(:int, 0))),
            s(:lvasgn, :cert,
              s(:send, nil, :issue_cert,
                s(:ivar, :@ca),
                s(:ivar, :@rsa2048),
                s(:int, 1),
                s(:lvar, :now),
                s(:lvar, :now),
                s(:array),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :now), :getutc),
              s(:send,
                s(:lvar, :cert), :not_before)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :now), :getutc),
              s(:send,
                s(:lvar, :cert), :not_after)),
            s(:lvasgn, :now,
              s(:send,
                s(:const, nil, :Time), :at,
                s(:int, 2147483647))),
            s(:lvasgn, :cert,
              s(:send, nil, :issue_cert,
                s(:ivar, :@ca),
                s(:ivar, :@rsa2048),
                s(:int, 1),
                s(:lvar, :now),
                s(:lvar, :now),
                s(:array),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :now), :getutc),
              s(:send,
                s(:lvar, :cert), :not_before)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :now), :getutc),
              s(:send,
                s(:lvar, :cert), :not_after)))),
        s(:def, :test_extension,
          s(:args),
          s(:begin,
            s(:lvasgn, :ca_exts,
              s(:array,
                s(:array,
                  s(:str, "basicConstraints"),
                  s(:str, "CA:TRUE"),
                  s(:true)),
                s(:array,
                  s(:str, "keyUsage"),
                  s(:str, "keyCertSign, cRLSign"),
                  s(:true)),
                s(:array,
                  s(:str, "subjectKeyIdentifier"),
                  s(:str, "hash"),
                  s(:false)),
                s(:array,
                  s(:str, "authorityKeyIdentifier"),
                  s(:str, "keyid:always"),
                  s(:false)))),
            s(:lvasgn, :ca_cert,
              s(:send, nil, :issue_cert,
                s(:ivar, :@ca),
                s(:ivar, :@rsa2048),
                s(:int, 1),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:int, 3600)),
                s(:lvar, :ca_exts),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :ca_cert), :extensions), :each_with_index),
              s(:args,
                s(:arg, :ext),
                s(:arg, :i)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:send,
                      s(:lvar, :ca_exts), :[],
                      s(:lvar, :i)), :first),
                  s(:send,
                    s(:lvar, :ext), :oid)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:send,
                      s(:lvar, :ca_exts), :[],
                      s(:lvar, :i)), :last),
                  s(:send,
                    s(:lvar, :ext), :critical?)))),
            s(:lvasgn, :ee1_exts,
              s(:array,
                s(:array,
                  s(:str, "keyUsage"),
                  s(:str, "Non Repudiation, Digital Signature, Key Encipherment"),
                  s(:true)),
                s(:array,
                  s(:str, "subjectKeyIdentifier"),
                  s(:str, "hash"),
                  s(:false)),
                s(:array,
                  s(:str, "authorityKeyIdentifier"),
                  s(:str, "keyid:always"),
                  s(:false)),
                s(:array,
                  s(:str, "extendedKeyUsage"),
                  s(:str, "clientAuth, emailProtection, codeSigning"),
                  s(:false)),
                s(:array,
                  s(:str, "subjectAltName"),
                  s(:str, "email:ee1@ruby-lang.org"),
                  s(:false)))),
            s(:lvasgn, :ee1_cert,
              s(:send, nil, :issue_cert,
                s(:ivar, :@ee1),
                s(:ivar, :@rsa1024),
                s(:int, 2),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:int, 1800)),
                s(:lvar, :ee1_exts),
                s(:lvar, :ca_cert),
                s(:ivar, :@rsa2048),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:lvar, :ca_cert), :subject), :to_der),
              s(:send,
                s(:send,
                  s(:lvar, :ee1_cert), :issuer), :to_der)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :ee1_cert), :extensions), :each_with_index),
              s(:args,
                s(:arg, :ext),
                s(:arg, :i)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:send,
                      s(:lvar, :ee1_exts), :[],
                      s(:lvar, :i)), :first),
                  s(:send,
                    s(:lvar, :ext), :oid)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:send,
                      s(:lvar, :ee1_exts), :[],
                      s(:lvar, :i)), :last),
                  s(:send,
                    s(:lvar, :ext), :critical?)))),
            s(:lvasgn, :ee2_exts,
              s(:array,
                s(:array,
                  s(:str, "keyUsage"),
                  s(:str, "Non Repudiation, Digital Signature, Key Encipherment"),
                  s(:true)),
                s(:array,
                  s(:str, "subjectKeyIdentifier"),
                  s(:str, "hash"),
                  s(:false)),
                s(:array,
                  s(:str, "authorityKeyIdentifier"),
                  s(:str, "issuer:always"),
                  s(:false)),
                s(:array,
                  s(:str, "extendedKeyUsage"),
                  s(:str, "clientAuth, emailProtection, codeSigning"),
                  s(:false)),
                s(:array,
                  s(:str, "subjectAltName"),
                  s(:str, "email:ee2@ruby-lang.org"),
                  s(:false)))),
            s(:lvasgn, :ee2_cert,
              s(:send, nil, :issue_cert,
                s(:ivar, :@ee2),
                s(:ivar, :@rsa1024),
                s(:int, 3),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:int, 1800)),
                s(:lvar, :ee2_exts),
                s(:lvar, :ca_cert),
                s(:ivar, :@rsa2048),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :MD5), :new))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:lvar, :ca_cert), :subject), :to_der),
              s(:send,
                s(:send,
                  s(:lvar, :ee2_cert), :issuer), :to_der)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :ee2_cert), :extensions), :each_with_index),
              s(:args,
                s(:arg, :ext),
                s(:arg, :i)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:send,
                      s(:lvar, :ee2_exts), :[],
                      s(:lvar, :i)), :first),
                  s(:send,
                    s(:lvar, :ext), :oid)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:send,
                      s(:lvar, :ee2_exts), :[],
                      s(:lvar, :i)), :last),
                  s(:send,
                    s(:lvar, :ext), :critical?)))))),
        s(:def, :test_sign_and_verify_rsa_sha1,
          s(:args),
          s(:begin,
            s(:lvasgn, :cert,
              s(:send, nil, :issue_cert,
                s(:ivar, :@ca),
                s(:ivar, :@rsa2048),
                s(:int, 1),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:int, 3600)),
                s(:array),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :cert), :verify,
                s(:ivar, :@rsa1024))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:lvar, :cert), :verify,
                s(:ivar, :@rsa2048))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:block,
                s(:send, nil, :certificate_error_returns_false),
                s(:args),
                s(:send,
                  s(:lvar, :cert), :verify,
                  s(:ivar, :@dsa256)))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:block,
                s(:send, nil, :certificate_error_returns_false),
                s(:args),
                s(:send,
                  s(:lvar, :cert), :verify,
                  s(:ivar, :@dsa512)))),
            s(:send,
              s(:lvar, :cert), :serial=,
              s(:int, 2)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :cert), :verify,
                s(:ivar, :@rsa2048))))),
        s(:def, :test_sign_and_verify_rsa_md5,
          s(:args),
          s(:rescue,
            s(:begin,
              s(:lvasgn, :cert,
                s(:send, nil, :issue_cert,
                  s(:ivar, :@ca),
                  s(:ivar, :@rsa2048),
                  s(:int, 1),
                  s(:send,
                    s(:const, nil, :Time), :now),
                  s(:send,
                    s(:send,
                      s(:const, nil, :Time), :now), :+,
                    s(:int, 3600)),
                  s(:array),
                  s(:nil),
                  s(:nil),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :Digest), :MD5), :new))),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :cert), :verify,
                  s(:ivar, :@rsa1024))),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :cert), :verify,
                  s(:ivar, :@rsa2048))),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:block,
                  s(:send, nil, :certificate_error_returns_false),
                  s(:args),
                  s(:send,
                    s(:lvar, :cert), :verify,
                    s(:ivar, :@dsa256)))),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:block,
                  s(:send, nil, :certificate_error_returns_false),
                  s(:args),
                  s(:send,
                    s(:lvar, :cert), :verify,
                    s(:ivar, :@dsa512)))),
              s(:send,
                s(:lvar, :cert), :subject=,
                s(:ivar, :@ee1)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :cert), :verify,
                  s(:ivar, :@rsa2048)))),
            s(:resbody,
              s(:array,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :CertificateError)), nil, nil), nil)),
        s(:def, :test_sign_and_verify_dsa,
          s(:args),
          s(:begin,
            s(:lvasgn, :cert,
              s(:send, nil, :issue_cert,
                s(:ivar, :@ca),
                s(:ivar, :@dsa512),
                s(:int, 1),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:int, 3600)),
                s(:array),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :TestUtils), :DSA_SIGNATURE_DIGEST), :new))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:block,
                s(:send, nil, :certificate_error_returns_false),
                s(:args),
                s(:send,
                  s(:lvar, :cert), :verify,
                  s(:ivar, :@rsa1024)))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:block,
                s(:send, nil, :certificate_error_returns_false),
                s(:args),
                s(:send,
                  s(:lvar, :cert), :verify,
                  s(:ivar, :@rsa2048)))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :cert), :verify,
                s(:ivar, :@dsa256))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:lvar, :cert), :verify,
                s(:ivar, :@dsa512))),
            s(:send,
              s(:lvar, :cert), :not_after=,
              s(:send,
                s(:const, nil, :Time), :now)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :cert), :verify,
                s(:ivar, :@dsa512))))),
        s(:def, :test_sign_and_verify_rsa_dss1,
          s(:args),
          s(:rescue,
            s(:begin,
              s(:lvasgn, :cert,
                s(:send, nil, :issue_cert,
                  s(:ivar, :@ca),
                  s(:ivar, :@rsa2048),
                  s(:int, 1),
                  s(:send,
                    s(:const, nil, :Time), :now),
                  s(:send,
                    s(:send,
                      s(:const, nil, :Time), :now), :+,
                    s(:int, 3600)),
                  s(:array),
                  s(:nil),
                  s(:nil),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :Digest), :DSS1), :new))),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :cert), :verify,
                  s(:ivar, :@rsa1024))),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :cert), :verify,
                  s(:ivar, :@rsa2048))),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:block,
                  s(:send, nil, :certificate_error_returns_false),
                  s(:args),
                  s(:send,
                    s(:lvar, :cert), :verify,
                    s(:ivar, :@dsa256)))),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:block,
                  s(:send, nil, :certificate_error_returns_false),
                  s(:args),
                  s(:send,
                    s(:lvar, :cert), :verify,
                    s(:ivar, :@dsa512)))),
              s(:send,
                s(:lvar, :cert), :subject=,
                s(:ivar, :@ee1)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :cert), :verify,
                  s(:ivar, :@rsa2048)))),
            s(:resbody,
              s(:array,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :CertificateError)), nil, nil), nil)),
        s(:def, :test_sign_and_verify_dsa_md5,
          s(:args),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :X509), :CertificateError)),
            s(:args),
            s(:send, nil, :issue_cert,
              s(:ivar, :@ca),
              s(:ivar, :@dsa512),
              s(:int, 1),
              s(:send,
                s(:const, nil, :Time), :now),
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :now), :+,
                s(:int, 3600)),
              s(:array),
              s(:nil),
              s(:nil),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Digest), :MD5), :new)))),
        s(:def, :test_dsig_algorithm_mismatch,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :OPENSSL_VERSION_NUMBER), :<,
                s(:int, 268439552)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :X509), :CertificateError)),
                s(:args),
                s(:send, nil, :issue_cert,
                  s(:ivar, :@ca),
                  s(:ivar, :@rsa2048),
                  s(:int, 1),
                  s(:send,
                    s(:const, nil, :Time), :now),
                  s(:send,
                    s(:send,
                      s(:const, nil, :Time), :now), :+,
                    s(:int, 3600)),
                  s(:array),
                  s(:nil),
                  s(:nil),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :Digest), :DSS1), :new))), nil),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :CertificateError)),
              s(:args),
              s(:send, nil, :issue_cert,
                s(:ivar, :@ca),
                s(:ivar, :@dsa512),
                s(:int, 1),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:int, 3600)),
                s(:array),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :MD5), :new))))),
        s(:if,
          s(:defined?,
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :Digest), :SHA256)),
          s(:def, :test_dsa_with_sha2,
            s(:args),
            s(:begin,
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:lvasgn, :cert,
                      s(:send, nil, :issue_cert,
                        s(:ivar, :@ca),
                        s(:ivar, :@dsa256),
                        s(:int, 1),
                        s(:send,
                          s(:const, nil, :Time), :now),
                        s(:send,
                          s(:send,
                            s(:const, nil, :Time), :now), :+,
                          s(:int, 3600)),
                        s(:array),
                        s(:nil),
                        s(:nil),
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :Digest), :SHA256), :new))),
                    s(:send, nil, :assert_equal,
                      s(:str, "dsa_with_SHA256"),
                      s(:send,
                        s(:lvar, :cert), :signature_algorithm))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :X509), :CertificateError)), nil,
                    s(:return)), nil)),
              s(:lvasgn, :cert,
                s(:send, nil, :issue_cert,
                  s(:ivar, :@ca),
                  s(:ivar, :@dsa256),
                  s(:int, 1),
                  s(:send,
                    s(:const, nil, :Time), :now),
                  s(:send,
                    s(:send,
                      s(:const, nil, :Time), :now), :+,
                    s(:int, 3600)),
                  s(:array),
                  s(:nil),
                  s(:nil),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
              s(:send, nil, :assert_equal,
                s(:str, "dsaWithSHA1"),
                s(:send,
                  s(:lvar, :cert), :signature_algorithm)))), nil),
        s(:def, :test_check_private_key,
          s(:args),
          s(:begin,
            s(:lvasgn, :cert,
              s(:send, nil, :issue_cert,
                s(:ivar, :@ca),
                s(:ivar, :@rsa2048),
                s(:int, 1),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:int, 3600)),
                s(:array),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:lvar, :cert), :check_private_key,
                s(:ivar, :@rsa2048))))),
        s(:send, nil, :private),
        s(:def, :certificate_error_returns_false,
          s(:args),
          s(:rescue,
            s(:yield),
            s(:resbody,
              s(:array,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :CertificateError)), nil,
              s(:false)), nil)))), nil))
