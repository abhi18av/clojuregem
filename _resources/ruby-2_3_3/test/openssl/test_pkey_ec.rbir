s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "utils")),
  s(:if,
    s(:and,
      s(:defined?,
        s(:const,
          s(:const, nil, :OpenSSL), :TestUtils)),
      s(:defined?,
        s(:const,
          s(:const,
            s(:const, nil, :OpenSSL), :PKey), :EC))),
    s(:class,
      s(:const,
        s(:const, nil, :OpenSSL), :TestEC),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:ivasgn, :@data1,
              s(:str, "foo")),
            s(:ivasgn, :@data2,
              s(:send,
                s(:str, "bar"), :*,
                s(:int, 1000))),
            s(:ivasgn, :@groups,
              s(:array)),
            s(:ivasgn, :@keys,
              s(:array)),
            s(:block,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :PKey), :EC), :builtin_curves), :each),
              s(:args,
                s(:arg, :curve),
                s(:arg, :comment)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :curve), :start_with?,
                    s(:str, "Oakley")),
                  s(:next), nil),
                s(:lvasgn, :group,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :PKey), :EC), :Group), :new,
                    s(:lvar, :curve))),
                s(:lvasgn, :key,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :PKey), :EC), :new,
                    s(:lvar, :group))),
                s(:send,
                  s(:lvar, :key), :generate_key),
                s(:send,
                  s(:ivar, :@groups), :<<,
                  s(:lvar, :group)),
                s(:send,
                  s(:ivar, :@keys), :<<,
                  s(:lvar, :key)))))),
        s(:def, :compare_keys,
          s(:args,
            s(:arg, :k1),
            s(:arg, :k2)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :k1), :to_pem),
            s(:send,
              s(:lvar, :k2), :to_pem))),
        s(:def, :test_builtin_curves,
          s(:args),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :PKey), :EC), :builtin_curves), :empty?), :!))),
        s(:def, :test_curve_names,
          s(:args),
          s(:block,
            s(:send,
              s(:ivar, :@groups), :each_with_index),
            s(:args,
              s(:arg, :group),
              s(:arg, :idx)),
            s(:begin,
              s(:lvasgn, :key,
                s(:send,
                  s(:ivar, :@keys), :[],
                  s(:lvar, :idx))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :group), :curve_name),
                s(:send,
                  s(:send,
                    s(:lvar, :key), :group), :curve_name))))),
        s(:def, :test_check_key,
          s(:args),
          s(:for,
            s(:lvasgn, :key),
            s(:ivar, :@keys),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :key), :check_key),
                s(:true)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :key), :private_key?),
                s(:true)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :key), :public_key?),
                s(:true))))),
        s(:def, :test_group_encoding,
          s(:args),
          s(:for,
            s(:lvasgn, :group),
            s(:ivar, :@groups),
            s(:for,
              s(:lvasgn, :meth),
              s(:array,
                s(:sym, :to_der),
                s(:sym, :to_pem)),
              s(:begin,
                s(:lvasgn, :txt,
                  s(:send,
                    s(:lvar, :group), :send,
                    s(:lvar, :meth))),
                s(:lvasgn, :gr,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :PKey), :EC), :Group), :new,
                    s(:lvar, :txt))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :txt),
                  s(:send,
                    s(:lvar, :gr), :send,
                    s(:lvar, :meth))),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:send,
                      s(:lvar, :group), :generator), :to_bn),
                  s(:send,
                    s(:send,
                      s(:lvar, :gr), :generator), :to_bn)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :group), :cofactor),
                  s(:send,
                    s(:lvar, :gr), :cofactor)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :group), :order),
                  s(:send,
                    s(:lvar, :gr), :order)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :group), :seed),
                  s(:send,
                    s(:lvar, :gr), :seed)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :group), :degree),
                  s(:send,
                    s(:lvar, :gr), :degree)))))),
        s(:def, :test_key_encoding,
          s(:args),
          s(:for,
            s(:lvasgn, :key),
            s(:ivar, :@keys),
            s(:begin,
              s(:lvasgn, :group,
                s(:send,
                  s(:lvar, :key), :group)),
              s(:for,
                s(:lvasgn, :meth),
                s(:array,
                  s(:sym, :to_der),
                  s(:sym, :to_pem)),
                s(:begin,
                  s(:lvasgn, :txt,
                    s(:send,
                      s(:lvar, :key), :send,
                      s(:lvar, :meth))),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :txt),
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :PKey), :EC), :new,
                        s(:lvar, :txt)), :send,
                      s(:lvar, :meth))))),
              s(:lvasgn, :bn,
                s(:send,
                  s(:send,
                    s(:lvar, :key), :public_key), :to_bn)),
              s(:send, nil, :assert_equal,
                s(:lvar, :bn),
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :PKey), :EC), :Point), :new,
                    s(:lvar, :group),
                    s(:lvar, :bn)), :to_bn))))),
        s(:def, :test_set_keys,
          s(:args),
          s(:for,
            s(:lvasgn, :key),
            s(:ivar, :@keys),
            s(:begin,
              s(:lvasgn, :k,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :PKey), :EC), :new)),
              s(:send,
                s(:lvar, :k), :group=,
                s(:send,
                  s(:lvar, :key), :group)),
              s(:send,
                s(:lvar, :k), :private_key=,
                s(:send,
                  s(:lvar, :key), :private_key)),
              s(:send,
                s(:lvar, :k), :public_key=,
                s(:send,
                  s(:lvar, :key), :public_key)),
              s(:send, nil, :compare_keys,
                s(:lvar, :key),
                s(:lvar, :k))))),
        s(:def, :test_dsa_sign_verify,
          s(:args),
          s(:for,
            s(:lvasgn, :key),
            s(:ivar, :@keys),
            s(:begin,
              s(:lvasgn, :sig,
                s(:send,
                  s(:lvar, :key), :dsa_sign_asn1,
                  s(:ivar, :@data1))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :key), :dsa_verify_asn1,
                  s(:ivar, :@data1),
                  s(:lvar, :sig)))))),
        s(:def, :test_dsa_sign_asn1_FIPS186_3,
          s(:args),
          s(:for,
            s(:lvasgn, :key),
            s(:ivar, :@keys),
            s(:begin,
              s(:lvasgn, :size,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :key), :group), :order), :num_bits), :/,
                    s(:int, 8)), :+,
                  s(:int, 1))),
              s(:lvasgn, :dgst,
                s(:send,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:int, 1),
                        s(:lvar, :size))), :to_a), :pack,
                  s(:str, "C*"))),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:lvasgn, :sig,
                      s(:send,
                        s(:lvar, :key), :dsa_sign_asn1,
                        s(:lvar, :dgst))),
                    s(:send, nil, :assert,
                      s(:send,
                        s(:lvar, :key), :dsa_verify_asn1,
                        s(:send,
                          s(:lvar, :dgst), :+,
                          s(:str, "garbage")),
                        s(:lvar, :sig)))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :PKey), :ECError)),
                    s(:lvasgn, :e),
                    s(:begin,
                      s(:send, nil, :assert_equal,
                        s(:str, "ECDSA_sign: data too large for key size"),
                        s(:send,
                          s(:lvar, :e), :message)),
                      s(:return))), nil))))),
        s(:def, :test_dh_compute_key,
          s(:args),
          s(:for,
            s(:lvasgn, :key),
            s(:ivar, :@keys),
            s(:begin,
              s(:lvasgn, :k,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :PKey), :EC), :new,
                  s(:send,
                    s(:lvar, :key), :group))),
              s(:send,
                s(:lvar, :k), :generate_key),
              s(:lvasgn, :puba,
                s(:send,
                  s(:lvar, :key), :public_key)),
              s(:lvasgn, :pubb,
                s(:send,
                  s(:lvar, :k), :public_key)),
              s(:lvasgn, :a,
                s(:send,
                  s(:lvar, :key), :dh_compute_key,
                  s(:lvar, :pubb))),
              s(:lvasgn, :b,
                s(:send,
                  s(:lvar, :k), :dh_compute_key,
                  s(:lvar, :puba))),
              s(:send, nil, :assert_equal,
                s(:lvar, :a),
                s(:lvar, :b))))),
        s(:def, :test_read_private_key_der,
          s(:args),
          s(:begin,
            s(:lvasgn, :ec,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_EC_P256V1)),
            s(:lvasgn, :der,
              s(:send,
                s(:lvar, :ec), :to_der)),
            s(:lvasgn, :ec2,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :read,
                s(:lvar, :der))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :ec2), :private_key?)),
            s(:send, nil, :assert_equal,
              s(:lvar, :der),
              s(:send,
                s(:lvar, :ec2), :to_der)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_read_private_key_pem,
          s(:args),
          s(:begin,
            s(:lvasgn, :ec,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_EC_P256V1)),
            s(:lvasgn, :pem,
              s(:send,
                s(:lvar, :ec), :to_pem)),
            s(:lvasgn, :ec2,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :read,
                s(:lvar, :pem))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :ec2), :private_key?)),
            s(:send, nil, :assert_equal,
              s(:lvar, :pem),
              s(:send,
                s(:lvar, :ec2), :to_pem)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_read_public_key_der,
          s(:args),
          s(:begin,
            s(:lvasgn, :ec,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_EC_P256V1)),
            s(:lvasgn, :ec2,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :EC), :new,
                s(:send,
                  s(:lvar, :ec), :group))),
            s(:send,
              s(:lvar, :ec2), :public_key=,
              s(:send,
                s(:lvar, :ec), :public_key)),
            s(:lvasgn, :der,
              s(:send,
                s(:lvar, :ec2), :to_der)),
            s(:lvasgn, :ec3,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :read,
                s(:lvar, :der))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :ec3), :private_key?), :!)),
            s(:send, nil, :assert_equal,
              s(:lvar, :der),
              s(:send,
                s(:lvar, :ec3), :to_der)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_read_public_key_pem,
          s(:args),
          s(:begin,
            s(:lvasgn, :ec,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_EC_P256V1)),
            s(:lvasgn, :ec2,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :EC), :new,
                s(:send,
                  s(:lvar, :ec), :group))),
            s(:send,
              s(:lvar, :ec2), :public_key=,
              s(:send,
                s(:lvar, :ec), :public_key)),
            s(:lvasgn, :pem,
              s(:send,
                s(:lvar, :ec2), :to_pem)),
            s(:lvasgn, :ec3,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :read,
                s(:lvar, :pem))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :ec3), :private_key?), :!)),
            s(:send, nil, :assert_equal,
              s(:lvar, :pem),
              s(:send,
                s(:lvar, :ec3), :to_pem)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_read_private_key_pem_pw,
          s(:args),
          s(:begin,
            s(:lvasgn, :ec,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_EC_P256V1)),
            s(:lvasgn, :pem,
              s(:send,
                s(:lvar, :ec), :to_pem,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Cipher), :new,
                  s(:str, "AES-128-CBC")),
                s(:str, "secret"))),
            s(:lvasgn, :ec2,
              s(:block,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :read,
                  s(:lvar, :pem)),
                s(:args),
                s(:str, "secret"))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :ec2), :private_key?)),
            s(:lvasgn, :ec2,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :read,
                s(:lvar, :pem),
                s(:str, "secret"))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :ec2), :private_key?)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :OpenSSL), :errors)))),
        s(:def, :test_export_password_length,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_EC_P256V1)),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :OpenSSL), :OpenSSLError)),
              s(:args),
              s(:send,
                s(:lvar, :key), :export,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Cipher), :new,
                  s(:str, "AES-128-CBC")),
                s(:str, "sec"))),
            s(:lvasgn, :pem,
              s(:send,
                s(:lvar, :key), :export,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Cipher), :new,
                  s(:str, "AES-128-CBC")),
                s(:str, "secr"))),
            s(:send, nil, :assert,
              s(:lvar, :pem)))),
        s(:def, :test_ec_point_mul,
          s(:args),
          s(:begin,
            s(:lvasgn, :ec,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_EC_P256V1)),
            s(:lvasgn, :p1,
              s(:send,
                s(:lvar, :ec), :public_key)),
            s(:lvasgn, :bn1,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :BN), :new,
                s(:str, "10"))),
            s(:lvasgn, :bn2,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :BN), :new,
                s(:str, "20"))),
            s(:lvasgn, :p2,
              s(:send,
                s(:lvar, :p1), :mul,
                s(:lvar, :bn1))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :p1), :group), :==,
                s(:send,
                  s(:lvar, :p2), :group))),
            s(:lvasgn, :p2,
              s(:send,
                s(:lvar, :p1), :mul,
                s(:lvar, :bn1),
                s(:lvar, :bn2))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :p1), :group), :==,
                s(:send,
                  s(:lvar, :p2), :group))),
            s(:lvasgn, :p2,
              s(:send,
                s(:lvar, :p1), :mul,
                s(:array,
                  s(:lvar, :bn1),
                  s(:lvar, :bn2)),
                s(:array,
                  s(:lvar, :p1)))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :p1), :group), :==,
                s(:send,
                  s(:lvar, :p2), :group))),
            s(:lvasgn, :p2,
              s(:send,
                s(:lvar, :p1), :mul,
                s(:array,
                  s(:lvar, :bn1),
                  s(:lvar, :bn2)),
                s(:array,
                  s(:lvar, :p1)),
                s(:lvar, :bn2))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :p1), :group), :==,
                s(:send,
                  s(:lvar, :p2), :group))))))), nil))
