s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "utils")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :TestUtils)),
    s(:class,
      s(:const,
        s(:const, nil, :OpenSSL), :TestPKCS7),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:ivasgn, :@rsa1024,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA1024)),
            s(:ivasgn, :@rsa2048,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA2048)),
            s(:lvasgn, :ca,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Name), :parse,
                s(:str, "/DC=org/DC=ruby-lang/CN=CA"))),
            s(:lvasgn, :ee1,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Name), :parse,
                s(:str, "/DC=org/DC=ruby-lang/CN=EE1"))),
            s(:lvasgn, :ee2,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Name), :parse,
                s(:str, "/DC=org/DC=ruby-lang/CN=EE2"))),
            s(:lvasgn, :now,
              s(:send,
                s(:const, nil, :Time), :now)),
            s(:lvasgn, :ca_exts,
              s(:array,
                s(:array,
                  s(:str, "basicConstraints"),
                  s(:str, "CA:TRUE"),
                  s(:true)),
                s(:array,
                  s(:str, "keyUsage"),
                  s(:str, "keyCertSign, cRLSign"),
                  s(:true)),
                s(:array,
                  s(:str, "subjectKeyIdentifier"),
                  s(:str, "hash"),
                  s(:false)),
                s(:array,
                  s(:str, "authorityKeyIdentifier"),
                  s(:str, "keyid:always"),
                  s(:false)))),
            s(:ivasgn, :@ca_cert,
              s(:send, nil, :issue_cert,
                s(:lvar, :ca),
                s(:ivar, :@rsa2048),
                s(:int, 1),
                s(:lvar, :now),
                s(:send,
                  s(:lvar, :now), :+,
                  s(:int, 3600)),
                s(:lvar, :ca_exts),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:lvasgn, :ee_exts,
              s(:array,
                s(:array,
                  s(:str, "keyUsage"),
                  s(:str, "Non Repudiation, Digital Signature, Key Encipherment"),
                  s(:true)),
                s(:array,
                  s(:str, "authorityKeyIdentifier"),
                  s(:str, "keyid:always"),
                  s(:false)),
                s(:array,
                  s(:str, "extendedKeyUsage"),
                  s(:str, "clientAuth, emailProtection, codeSigning"),
                  s(:false)))),
            s(:ivasgn, :@ee1_cert,
              s(:send, nil, :issue_cert,
                s(:lvar, :ee1),
                s(:ivar, :@rsa1024),
                s(:int, 2),
                s(:lvar, :now),
                s(:send,
                  s(:lvar, :now), :+,
                  s(:int, 1800)),
                s(:lvar, :ee_exts),
                s(:ivar, :@ca_cert),
                s(:ivar, :@rsa2048),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
            s(:ivasgn, :@ee2_cert,
              s(:send, nil, :issue_cert,
                s(:lvar, :ee2),
                s(:ivar, :@rsa1024),
                s(:int, 3),
                s(:lvar, :now),
                s(:send,
                  s(:lvar, :now), :+,
                  s(:int, 1800)),
                s(:lvar, :ee_exts),
                s(:ivar, :@ca_cert),
                s(:ivar, :@rsa2048),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))))),
        s(:def, :issue_cert,
          s(:args,
            s(:restarg, :args)),
          s(:send,
            s(:const,
              s(:const, nil, :OpenSSL), :TestUtils), :issue_cert,
            s(:splat,
              s(:lvar, :args)))),
        s(:def, :test_signed,
          s(:args),
          s(:begin,
            s(:lvasgn, :store,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Store), :new)),
            s(:send,
              s(:lvar, :store), :add_cert,
              s(:ivar, :@ca_cert)),
            s(:lvasgn, :ca_certs,
              s(:array,
                s(:ivar, :@ca_cert))),
            s(:lvasgn, :data,
              s(:str, "aaaaa\r\nbbbbb\r\nccccc\r\n")),
            s(:lvasgn, :tmp,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :sign,
                s(:ivar, :@ee1_cert),
                s(:ivar, :@rsa1024),
                s(:lvar, :data),
                s(:lvar, :ca_certs))),
            s(:lvasgn, :p7,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :new,
                s(:send,
                  s(:lvar, :tmp), :to_der))),
            s(:lvasgn, :certs,
              s(:send,
                s(:lvar, :p7), :certificates)),
            s(:lvasgn, :signers,
              s(:send,
                s(:lvar, :p7), :signers)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :p7), :verify,
                s(:array),
                s(:lvar, :store))),
            s(:send, nil, :assert_equal,
              s(:lvar, :data),
              s(:send,
                s(:lvar, :p7), :data)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :certs), :size)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@ee1_cert), :subject), :to_s),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :certs), :[],
                    s(:int, 0)), :subject), :to_s)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@ca_cert), :subject), :to_s),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :certs), :[],
                    s(:int, 1)), :subject), :to_s)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :signers), :size)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@ee1_cert), :serial),
              s(:send,
                s(:send,
                  s(:lvar, :signers), :[],
                  s(:int, 0)), :serial)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@ee1_cert), :issuer), :to_s),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :signers), :[],
                    s(:int, 0)), :issuer), :to_s)),
            s(:lvasgn, :data,
              s(:str, "aaaaa\nbbbbb\nccccc\n")),
            s(:lvasgn, :flag,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :BINARY)),
            s(:lvasgn, :tmp,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :sign,
                s(:ivar, :@ee1_cert),
                s(:ivar, :@rsa1024),
                s(:lvar, :data),
                s(:lvar, :ca_certs),
                s(:lvar, :flag))),
            s(:lvasgn, :p7,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :new,
                s(:send,
                  s(:lvar, :tmp), :to_der))),
            s(:lvasgn, :certs,
              s(:send,
                s(:lvar, :p7), :certificates)),
            s(:lvasgn, :signers,
              s(:send,
                s(:lvar, :p7), :signers)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :p7), :verify,
                s(:array),
                s(:lvar, :store))),
            s(:send, nil, :assert_equal,
              s(:lvar, :data),
              s(:send,
                s(:lvar, :p7), :data)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :certs), :size)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@ee1_cert), :subject), :to_s),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :certs), :[],
                    s(:int, 0)), :subject), :to_s)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@ca_cert), :subject), :to_s),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :certs), :[],
                    s(:int, 1)), :subject), :to_s)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :signers), :size)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@ee1_cert), :serial),
              s(:send,
                s(:send,
                  s(:lvar, :signers), :[],
                  s(:int, 0)), :serial)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@ee1_cert), :issuer), :to_s),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :signers), :[],
                    s(:int, 0)), :issuer), :to_s)),
            s(:lvasgn, :tmp1,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :sign,
                s(:ivar, :@ee1_cert),
                s(:ivar, :@rsa1024),
                s(:lvar, :data),
                s(:array),
                s(:lvar, :flag))),
            s(:lvasgn, :tmp2,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :sign,
                s(:ivar, :@ee2_cert),
                s(:ivar, :@rsa1024),
                s(:lvar, :data),
                s(:array),
                s(:lvar, :flag))),
            s(:send,
              s(:lvar, :tmp1), :add_signer,
              s(:send,
                s(:send,
                  s(:lvar, :tmp2), :signers), :[],
                s(:int, 0))),
            s(:send,
              s(:lvar, :tmp1), :add_certificate,
              s(:ivar, :@ee2_cert)),
            s(:lvasgn, :p7,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :new,
                s(:send,
                  s(:lvar, :tmp1), :to_der))),
            s(:lvasgn, :certs,
              s(:send,
                s(:lvar, :p7), :certificates)),
            s(:lvasgn, :signers,
              s(:send,
                s(:lvar, :p7), :signers)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :p7), :verify,
                s(:array),
                s(:lvar, :store))),
            s(:send, nil, :assert_equal,
              s(:lvar, :data),
              s(:send,
                s(:lvar, :p7), :data)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :certs), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :signers), :size)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@ee1_cert), :serial),
              s(:send,
                s(:send,
                  s(:lvar, :signers), :[],
                  s(:int, 0)), :serial)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@ee1_cert), :issuer), :to_s),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :signers), :[],
                    s(:int, 0)), :issuer), :to_s)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@ee2_cert), :serial),
              s(:send,
                s(:send,
                  s(:lvar, :signers), :[],
                  s(:int, 1)), :serial)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@ee2_cert), :issuer), :to_s),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :signers), :[],
                    s(:int, 1)), :issuer), :to_s)))),
        s(:def, :test_detached_sign,
          s(:args),
          s(:begin,
            s(:lvasgn, :store,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Store), :new)),
            s(:send,
              s(:lvar, :store), :add_cert,
              s(:ivar, :@ca_cert)),
            s(:lvasgn, :ca_certs,
              s(:array,
                s(:ivar, :@ca_cert))),
            s(:lvasgn, :data,
              s(:str, "aaaaa\nbbbbb\nccccc\n")),
            s(:lvasgn, :flag,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKCS7), :BINARY), :|,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKCS7), :DETACHED))),
            s(:lvasgn, :tmp,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :sign,
                s(:ivar, :@ee1_cert),
                s(:ivar, :@rsa1024),
                s(:lvar, :data),
                s(:lvar, :ca_certs),
                s(:lvar, :flag))),
            s(:lvasgn, :p7,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :new,
                s(:send,
                  s(:lvar, :tmp), :to_der))),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :ASN1), :decode,
                s(:lvar, :p7))),
            s(:lvasgn, :certs,
              s(:send,
                s(:lvar, :p7), :certificates)),
            s(:lvasgn, :signers,
              s(:send,
                s(:lvar, :p7), :signers)),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :p7), :verify,
                  s(:array),
                  s(:lvar, :store)), :!)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :p7), :verify,
                s(:array),
                s(:lvar, :store),
                s(:lvar, :data))),
            s(:send, nil, :assert_equal,
              s(:lvar, :data),
              s(:send,
                s(:lvar, :p7), :data)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :certs), :size)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@ee1_cert), :subject), :to_s),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :certs), :[],
                    s(:int, 0)), :subject), :to_s)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@ca_cert), :subject), :to_s),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :certs), :[],
                    s(:int, 1)), :subject), :to_s)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :signers), :size)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@ee1_cert), :serial),
              s(:send,
                s(:send,
                  s(:lvar, :signers), :[],
                  s(:int, 0)), :serial)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@ee1_cert), :issuer), :to_s),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :signers), :[],
                    s(:int, 0)), :issuer), :to_s)))),
        s(:def, :test_enveloped,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :OPENSSL_VERSION_NUMBER), :<=,
                s(:int, 9465935)),
              s(:return), nil),
            s(:lvasgn, :certs,
              s(:array,
                s(:ivar, :@ee1_cert),
                s(:ivar, :@ee2_cert))),
            s(:lvasgn, :cipher,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Cipher), :AES), :new,
                s(:str, "128-CBC"))),
            s(:lvasgn, :data,
              s(:str, "aaaaa\nbbbbb\nccccc\n")),
            s(:lvasgn, :tmp,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :encrypt,
                s(:lvar, :certs),
                s(:lvar, :data),
                s(:lvar, :cipher),
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKCS7), :BINARY))),
            s(:lvasgn, :p7,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :new,
                s(:send,
                  s(:lvar, :tmp), :to_der))),
            s(:lvasgn, :recip,
              s(:send,
                s(:lvar, :p7), :recipients)),
            s(:send, nil, :assert_equal,
              s(:sym, :enveloped),
              s(:send,
                s(:lvar, :p7), :type)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :recip), :size)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@ca_cert), :subject), :to_s),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :recip), :[],
                    s(:int, 0)), :issuer), :to_s)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:lvar, :recip), :[],
                  s(:int, 0)), :serial)),
            s(:send, nil, :assert_equal,
              s(:lvar, :data),
              s(:send,
                s(:lvar, :p7), :decrypt,
                s(:ivar, :@rsa1024),
                s(:ivar, :@ee1_cert))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@ca_cert), :subject), :to_s),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :recip), :[],
                    s(:int, 1)), :issuer), :to_s)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send,
                  s(:lvar, :recip), :[],
                  s(:int, 1)), :serial)),
            s(:send, nil, :assert_equal,
              s(:lvar, :data),
              s(:send,
                s(:lvar, :p7), :decrypt,
                s(:ivar, :@rsa1024),
                s(:ivar, :@ee2_cert))))),
        s(:def, :test_graceful_parsing_failure,
          s(:args),
          s(:begin,
            s(:lvasgn, :contents,
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "(string)"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :new,
                s(:lvar, :contents))))),
        s(:def, :test_set_type_signed,
          s(:args),
          s(:begin,
            s(:lvasgn, :p7,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :new)),
            s(:send,
              s(:lvar, :p7), :type=,
              s(:str, "signed")),
            s(:send, nil, :assert_equal,
              s(:sym, :signed),
              s(:send,
                s(:lvar, :p7), :type)))),
        s(:def, :test_set_type_data,
          s(:args),
          s(:begin,
            s(:lvasgn, :p7,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :new)),
            s(:send,
              s(:lvar, :p7), :type=,
              s(:str, "data")),
            s(:send, nil, :assert_equal,
              s(:sym, :data),
              s(:send,
                s(:lvar, :p7), :type)))),
        s(:def, :test_set_type_signed_and_enveloped,
          s(:args),
          s(:begin,
            s(:lvasgn, :p7,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :new)),
            s(:send,
              s(:lvar, :p7), :type=,
              s(:str, "signedAndEnveloped")),
            s(:send, nil, :assert_equal,
              s(:sym, :signedAndEnveloped),
              s(:send,
                s(:lvar, :p7), :type)))),
        s(:def, :test_set_type_enveloped,
          s(:args),
          s(:begin,
            s(:lvasgn, :p7,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :new)),
            s(:send,
              s(:lvar, :p7), :type=,
              s(:str, "enveloped")),
            s(:send, nil, :assert_equal,
              s(:sym, :enveloped),
              s(:send,
                s(:lvar, :p7), :type)))),
        s(:def, :test_set_type_encrypted,
          s(:args),
          s(:begin,
            s(:lvasgn, :p7,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :new)),
            s(:send,
              s(:lvar, :p7), :type=,
              s(:str, "encrypted")),
            s(:send, nil, :assert_equal,
              s(:sym, :encrypted),
              s(:send,
                s(:lvar, :p7), :type)))),
        s(:def, :test_degenerate_pkcs7,
          s(:args),
          s(:begin,
            s(:lvasgn, :ca_cert_pem,
              s(:dstr,
                s(:str, "-----BEGIN CERTIFICATE-----\n"),
                s(:str, "MIID4DCCAsigAwIBAgIJAL1oVI72wmQwMA0GCSqGSIb3DQEBBQUAMFMxCzAJBgNV\n"),
                s(:str, "BAYTAkFVMQ4wDAYDVQQIEwVTdGF0ZTENMAsGA1UEBxMEQ2l0eTEQMA4GA1UEChMH\n"),
                s(:str, "RXhhbXBsZTETMBEGA1UEAxMKRXhhbXBsZSBDQTAeFw0xMjEwMTgwOTE2NTBaFw0y\n"),
                s(:str, "MjEwMTYwOTE2NTBaMFMxCzAJBgNVBAYTAkFVMQ4wDAYDVQQIEwVTdGF0ZTENMAsG\n"),
                s(:str, "A1UEBxMEQ2l0eTEQMA4GA1UEChMHRXhhbXBsZTETMBEGA1UEAxMKRXhhbXBsZSBD\n"),
                s(:str, "QTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMTSPNxOkd5NN19XO0fJ\n"),
                s(:str, "tGVlWN4DWuvVL9WbWnXJXX9rU6X8sSOL9RrRA64eEZf2UBFjz9fMHZj/OGcxZpus\n"),
                s(:str, "4YtzfSrMU6xfvsIHeqX+mT60ms2RfX4UXab50MQArBin3JVKHGnOi25uyAOylVFU\n"),
                s(:str, "TuzzQJvKyB67vjuRPMlVAgVAZAP07ru9gW0ajt/ODxvUfvXxp5SFF68mVP2ipMBr\n"),
                s(:str, "4fujUwQC6cVHmnuL6p87VFoo9uk87TSQVDOQGL8MK4moMFtEW9oUTU22CgnxnCsS\n"),
                s(:str, "sCCELYhy9BdaTWQH26LzMfhnwSuIRHZyprW4WZtU0akrYXNiCj8o92rZmQWXJDbl\n"),
                s(:str, "qNECAwEAAaOBtjCBszAdBgNVHQ4EFgQUNtVw4jvkZZbkdQbkYi2/F4QN79owgYMG\n"),
                s(:str, "A1UdIwR8MHqAFDbVcOI75GWW5HUG5GItvxeEDe/aoVekVTBTMQswCQYDVQQGEwJB\n"),
                s(:str, "VTEOMAwGA1UECBMFU3RhdGUxDTALBgNVBAcTBENpdHkxEDAOBgNVBAoTB0V4YW1w\n"),
                s(:str, "bGUxEzARBgNVBAMTCkV4YW1wbGUgQ0GCCQC9aFSO9sJkMDAMBgNVHRMEBTADAQH/\n"),
                s(:str, "MA0GCSqGSIb3DQEBBQUAA4IBAQBvJIsY9bIqliZ3WD1KoN4cvAQeRAPsoLXQkkHg\n"),
                s(:str, "P6Nrcw9rJ5JvoHfYbo5aNlwbnkbt/B2xlVEXUYpJoBZFXafgxG2gJleioIgnaDS4\n"),
                s(:str, "FPPwZf1C5ZrOgUBfxTGjHex4ghSAoNGOd35jQzin5NGKOvZclPjZ2vQ++LP3aA2l\n"),
                s(:str, "9Fn2qASS46IzMGJlC75mlTOTQwDM16UunMAK26lNG9J6q02o4d/oU2a7x0fD80yF\n"),
                s(:str, "64kNA1wDAwaVCYiUH541qKp+b4iDqer8nf8HqzYDFlpje18xYZMEd1hj8dVOharM\n"),
                s(:str, "pISJ+D52hV/BGEYF8r5k3hpC5d76gSP2oCcaY0XvLBf97qik\n"),
                s(:str, "-----END CERTIFICATE-----\n"))),
            s(:lvasgn, :p7,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :new)),
            s(:send,
              s(:lvar, :p7), :type=,
              s(:str, "signed")),
            s(:lvasgn, :ca_cert,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
                s(:lvar, :ca_cert_pem))),
            s(:send,
              s(:lvar, :p7), :add_certificate,
              s(:lvar, :ca_cert)),
            s(:send,
              s(:lvar, :p7), :add_data,
              s(:str, "")),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:send,
                s(:lvar, :p7), :to_pem)))),
        s(:def, :test_split_content,
          s(:args),
          s(:begin,
            s(:lvasgn, :pki_message_pem,
              s(:dstr,
                s(:str, "-----BEGIN PKCS7-----\n"),
                s(:str, "MIIHSwYJKoZIhvcNAQcCoIIHPDCCBzgCAQExCzAJBgUrDgMCGgUAMIIDiAYJKoZI\n"),
                s(:str, "hvcNAQcBoIIDeQSCA3UwgAYJKoZIhvcNAQcDoIAwgAIBADGCARAwggEMAgEAMHUw\n"),
                s(:str, "cDEQMA4GA1UECgwHZXhhbXBsZTEXMBUGA1UEAwwOVEFSTUFDIFJPT1QgQ0ExIjAg\n"),
                s(:str, "BgkqhkiG9w0BCQEWE3NvbWVvbmVAZXhhbXBsZS5vcmcxCzAJBgNVBAYTAlVTMRIw\n"),
                s(:str, "EAYDVQQHDAlUb3duIEhhbGwCAWYwDQYJKoZIhvcNAQEBBQAEgYBspXXse8ZhG1FE\n"),
                s(:str, "E3PVAulbvrdR52FWPkpeLvSjgEkYzTiUi0CC3poUL1Ku5mOlavWAJgoJpFICDbvc\n"),
                s(:str, "N4ZNDCwOhnzoI9fMGmm1gvPQy15BdhhZRo9lP7Ga/Hg2APKT0/0yhPsmJ+w+u1e7\n"),
                s(:str, "OoJEVeEZ27x3+u745bGEcu8of5th6TCABgkqhkiG9w0BBwEwFAYIKoZIhvcNAwcE\n"),
                s(:str, "CBNs2U5mMsd/oIAEggIQU6cur8QBz02/4eMpHdlU9IkyrRMiaMZ/ky9zecOAjnvY\n"),
                s(:str, "d2jZqS7RhczpaNJaSli3GmDsKrF+XqE9J58s9ScGqUigzapusTsxIoRUPr7Ztb0a\n"),
                s(:str, "pg8VWDipAsuw7GfEkgx868sV93uC4v6Isfjbhd+JRTFp/wR1kTi7YgSXhES+RLUW\n"),
                s(:str, "gQbDIDgEQYxJ5U951AJtnSpjs9za2ZkTdd8RSEizJK0bQ1vqLoApwAVgZqluATqQ\n"),
                s(:str, "AHSDCxhweVYw6+y90B9xOrqPC0eU7Wzryq2+Raq5ND2Wlf5/N11RQ3EQdKq/l5Te\n"),
                s(:str, "ijp9PdWPlkUhWVoDlOFkysjk+BE+7AkzgYvz9UvBjmZsMsWqf+KsZ4S8/30ndLzu\n"),
                s(:str, "iucsu6eOnFLLX8DKZxV6nYffZOPzZZL8hFBcE7PPgSdBEkazMrEBXq1j5mN7exbJ\n"),
                s(:str, "NOA5uGWyJNBMOCe+1JbxG9UeoqvCCTHESxEeDu7xR3NnSOD47n7cXwHr81YzK2zQ\n"),
                s(:str, "5oWpP3C8jzI7tUjLd1S0Z3Psd17oaCn+JOfUtuB0nc3wfPF/WPo0xZQodWxp2/Cl\n"),
                s(:str, "EltR6qr1zf5C7GwmLzBZ6bHFAIT60/JzV0/56Pn8ztsRFtI4cwaBfTfvnwi8/sD9\n"),
                s(:str, "/LYOMY+/b6UDCUSR7RTN7XfrtAqDEzSdzdJkOWm1jvM8gkLmxpZdvxG3ZvDYnEQE\n"),
                s(:str, "5Nq+un5nAny1wf3rWierBAjE5ntiAmgs5AAAAAAAAAAAAACgggHqMIIB5jCCAU+g\n"),
                s(:str, "AwIBAgIBATANBgkqhkiG9w0BAQUFADAvMS0wKwYDVQQDEyQwQUM5RjAyNi1EQ0VB\n"),
                s(:str, "LTRDMTItOTEyNy1DMEZEN0QyQThCNUEwHhcNMTIxMDE5MDk0NTQ3WhcNMTMxMDE5\n"),
                s(:str, "MDk0NTQ3WjAvMS0wKwYDVQQDEyQwQUM5RjAyNi1EQ0VBLTRDMTItOTEyNy1DMEZE\n"),
                s(:str, "N0QyQThCNUEwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALTsTNyGIsKvyw56\n"),
                s(:str, "WI3Gll/RmjsupkrdEtPbx7OjS9MEgyhOAf9+u6CV0LJGHpy7HUeROykF6xpbSdCm\n"),
                s(:str, "Mr6kNObl5N0ljOb8OmV4atKjmGg1rWawDLyDQ9Dtuby+dzfHtzAzP+J/3ZoOtSqq\n"),
                s(:str, "AHVTnCclU1pm/uHN0HZ5nL5iLJTvAgMBAAGjEjAQMA4GA1UdDwEB/wQEAwIFoDAN\n"),
                s(:str, "BgkqhkiG9w0BAQUFAAOBgQA8K+BouEV04HRTdMZd3akjTQOm6aEGW4nIRnYIf8ZV\n"),
                s(:str, "mvUpLirVlX/unKtJinhGisFGpuYLMpemx17cnGkBeLCQRvHQjC+ho7l8/LOGheMS\n"),
                s(:str, "nvu0XHhvmJtRbm8MKHhogwZqHFDnXonvjyqhnhEtK5F2Fimcce3MoF2QtEe0UWv/\n"),
                s(:str, "8DGCAaowggGmAgEBMDQwLzEtMCsGA1UEAxMkMEFDOUYwMjYtRENFQS00QzEyLTkx\n"),
                s(:str, "MjctQzBGRDdEMkE4QjVBAgEBMAkGBSsOAwIaBQCggc0wEgYKYIZIAYb4RQEJAjEE\n"),
                s(:str, "EwIxOTAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0x\n"),
                s(:str, "MjEwMTkwOTQ1NDdaMCAGCmCGSAGG+EUBCQUxEgQQ2EFUJdQNwQDxclIQ8qNyYzAj\n"),
                s(:str, "BgkqhkiG9w0BCQQxFgQUy8GFXPpAwRJUT3rdvNC9Pn+4eoswOAYKYIZIAYb4RQEJ\n"),
                s(:str, "BzEqEygwRkU3QzJEQTVEMDc2NzFFOTcxNDlCNUE3MDRCMERDNkM4MDYwRDJBMA0G\n"),
                s(:str, "CSqGSIb3DQEBAQUABIGAWUNdzvU2iiQOtihBwF0h48Nnw/2qX8uRjg6CVTOMcGji\n"),
                s(:str, "BxjUMifEbT//KJwljshl4y3yBLqeVYLOd04k6aKSdjgdZnrnUPI6p5tL5PfJkTAE\n"),
                s(:str, "L6qflZ9YCU5erE4T5U98hCQBMh4nOYxgaTjnZzhpkKQuEiKq/755cjzTzlI/eok=\n"),
                s(:str, "-----END PKCS7-----\n"))),
            s(:lvasgn, :pki_message_content_pem,
              s(:dstr,
                s(:str, "-----BEGIN PKCS7-----\n"),
                s(:str, "MIIDawYJKoZIhvcNAQcDoIIDXDCCA1gCAQAxggEQMIIBDAIBADB1MHAxEDAOBgNV\n"),
                s(:str, "BAoMB2V4YW1wbGUxFzAVBgNVBAMMDlRBUk1BQyBST09UIENBMSIwIAYJKoZIhvcN\n"),
                s(:str, "AQkBFhNzb21lb25lQGV4YW1wbGUub3JnMQswCQYDVQQGEwJVUzESMBAGA1UEBwwJ\n"),
                s(:str, "VG93biBIYWxsAgFmMA0GCSqGSIb3DQEBAQUABIGAbKV17HvGYRtRRBNz1QLpW763\n"),
                s(:str, "UedhVj5KXi70o4BJGM04lItAgt6aFC9SruZjpWr1gCYKCaRSAg273DeGTQwsDoZ8\n"),
                s(:str, "6CPXzBpptYLz0MteQXYYWUaPZT+xmvx4NgDyk9P9MoT7JifsPrtXuzqCRFXhGdu8\n"),
                s(:str, "d/ru+OWxhHLvKH+bYekwggI9BgkqhkiG9w0BBwEwFAYIKoZIhvcNAwcECBNs2U5m\n"),
                s(:str, "Msd/gIICGFOnLq/EAc9Nv+HjKR3ZVPSJMq0TImjGf5Mvc3nDgI572Hdo2aku0YXM\n"),
                s(:str, "6WjSWkpYtxpg7Cqxfl6hPSefLPUnBqlIoM2qbrE7MSKEVD6+2bW9GqYPFVg4qQLL\n"),
                s(:str, "sOxnxJIMfOvLFfd7guL+iLH424XfiUUxaf8EdZE4u2IEl4REvkS1FoEGwyA4BEGM\n"),
                s(:str, "SeVPedQCbZ0qY7Pc2tmZE3XfEUhIsyStG0Nb6i6AKcAFYGapbgE6kAB0gwsYcHlW\n"),
                s(:str, "MOvsvdAfcTq6jwtHlO1s68qtvkWquTQ9lpX+fzddUUNxEHSqv5eU3oo6fT3Vj5ZF\n"),
                s(:str, "IVlaA5ThZMrI5PgRPuwJM4GL8/VLwY5mbDLFqn/irGeEvP99J3S87ornLLunjpxS\n"),
                s(:str, "y1/AymcVep2H32Tj82WS/IRQXBOzz4EnQRJGszKxAV6tY+Zje3sWyTTgObhlsiTQ\n"),
                s(:str, "TDgnvtSW8RvVHqKrwgkxxEsRHg7u8UdzZ0jg+O5+3F8B6/NWMyts0OaFqT9wvI8y\n"),
                s(:str, "O7VIy3dUtGdz7Hde6Ggp/iTn1LbgdJ3N8Hzxf1j6NMWUKHVsadvwpRJbUeqq9c3+\n"),
                s(:str, "QuxsJi8wWemxxQCE+tPyc1dP+ej5/M7bERbSOHMGgX03758IvP7A/fy2DjGPv2+l\n"),
                s(:str, "AwlEke0Uze1367QKgxM0nc3SZDlptY7zPIJC5saWXb8Rt2bw2JxEBOTavrp+ZwJ8\n"),
                s(:str, "tcH961onq8Tme2ICaCzk\n"),
                s(:str, "-----END PKCS7-----\n"))),
            s(:lvasgn, :pki_msg,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :new,
                s(:lvar, :pki_message_pem))),
            s(:lvasgn, :store,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Store), :new)),
            s(:send,
              s(:lvar, :pki_msg), :verify,
              s(:nil),
              s(:lvar, :store),
              s(:nil),
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :NOVERIFY)),
            s(:lvasgn, :p7enc,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKCS7), :new,
                s(:send,
                  s(:lvar, :pki_msg), :data))),
            s(:send, nil, :assert_equal,
              s(:lvar, :pki_message_content_pem),
              s(:send,
                s(:lvar, :p7enc), :to_pem)))))), nil))
