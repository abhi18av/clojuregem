s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "utils")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :TestUtils)),
    s(:class,
      s(:const,
        s(:const, nil, :OpenSSL), :TestConfig),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:lvasgn, :file,
              s(:send,
                s(:const, nil, :Tempfile), :open,
                s(:str, "openssl.cnf"))),
            s(:send,
              s(:lvar, :file), :<<,
              s(:dstr,
                s(:str, "HOME = .\n"),
                s(:str, "[ ca ]\n"),
                s(:str, "default_ca = CA_default\n"),
                s(:str, "[ CA_default ]\n"),
                s(:str, "dir = ./demoCA\n"),
                s(:str, "certs                =                  ./certs\n"))),
            s(:send,
              s(:lvar, :file), :close),
            s(:ivasgn, :@tmpfile,
              s(:lvar, :file)),
            s(:ivasgn, :@it,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :Config), :new,
                s(:send,
                  s(:lvar, :file), :path))))),
        s(:def, :teardown,
          s(:args),
          s(:send,
            s(:ivar, :@tmpfile), :close!)),
        s(:def, :test_constants,
          s(:args),
          s(:begin,
            s(:send, nil, :assert,
              s(:defined?,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Config), :DEFAULT_CONFIG_FILE))),
            s(:lvasgn, :config_file,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :Config), :DEFAULT_CONFIG_FILE)),
            s(:if,
              s(:send,
                s(:const, nil, :File), :readable?,
                s(:lvar, :config_file)), nil,
              s(:send, nil, :skip,
                s(:str, "DEFAULT_CONFIG_FILE may return a wrong path on your platforms. [Bug #6830]"))),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :Config), :load,
                s(:lvar, :config_file))))),
        s(:def, :test_s_parse,
          s(:args),
          s(:begin,
            s(:lvasgn, :c,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :Config), :parse,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:str, "[ default ]\n\n"),
              s(:send,
                s(:lvar, :c), :to_s)),
            s(:lvasgn, :c,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :Config), :parse,
                s(:send,
                  s(:ivar, :@it), :to_s))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "CA_default"),
                s(:str, "ca"),
                s(:str, "default")),
              s(:send,
                s(:send,
                  s(:lvar, :c), :sections), :sort)))),
        s(:def, :test_s_parse_format,
          s(:args),
          s(:begin,
            s(:lvasgn, :c,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :Config), :parse,
                s(:dstr,
                  s(:str, " baz =qx\t                # \"baz = qx\"\n"),
                  s(:str, "\n"),
                  s(:str, "foo::bar = baz            # shortcut section::key format\n"),
                  s(:str, "  default::bar = baz      # ditto\n"),
                  s(:str, "a=\t \t                   # \"a = \": trailing spaces are ignored\n"),
                  s(:str, " =b                       # \" = b\": empty key\n"),
                  s(:str, " =c                       # \" = c\": empty key (override the above line)\n"),
                  s(:str, "    d=                    # \"c = \": trailing comment is ignored\n"),
                  s(:str, "\n"),
                  s(:str, "sq = 'foo''b\\'ar'\n"),
                  s(:str, "    dq =\"foo\"\"''\\\"\"\n"),
                  s(:str, "    dq2 = foo\"\"bar\n"),
                  s(:str, "esc=a\\r\\n\\b\\tb\n"),
                  s(:str, "foo\\bar = foo\\b\\\\ar\n"),
                  s(:str, "foo\\bar::foo\\bar = baz\n"),
                  s(:str, "[default1  default2]\t\t  # space is allowed in section name\n"),
                  s(:str, "          fo =b  ar       # space allowed in value\n"),
                  s(:str, "[emptysection]\n"),
                  s(:str, " [doller ]\n"),
                  s(:str, "foo=bar\n"),
                  s(:str, "bar = $(foo)\n"),
                  s(:str, "baz = 123$(default::bar)456${foo}798\n"),
                  s(:str, "qux = ${baz}\n"),
                  s(:str, "quxx = $qux.$qux\n")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "default"),
                s(:str, "default1  default2"),
                s(:str, "doller"),
                s(:str, "emptysection"),
                s(:str, "foo"),
                s(:str, "foo\\bar")),
              s(:send,
                s(:send,
                  s(:lvar, :c), :sections), :sort)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, ""),
                s(:str, "a"),
                s(:str, "bar"),
                s(:str, "baz"),
                s(:str, "d"),
                s(:str, "dq"),
                s(:str, "dq2"),
                s(:str, "esc"),
                s(:str, "foo\\bar"),
                s(:str, "sq")),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :c), :[],
                    s(:str, "default")), :keys), :sort)),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "default")), :[],
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "default")), :[],
                s(:str, "a"))),
            s(:send, nil, :assert_equal,
              s(:str, "qx"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "default")), :[],
                s(:str, "baz"))),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "default")), :[],
                s(:str, "d"))),
            s(:send, nil, :assert_equal,
              s(:str, "baz"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "default")), :[],
                s(:str, "bar"))),
            s(:send, nil, :assert_equal,
              s(:str, "foob'ar"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "default")), :[],
                s(:str, "sq"))),
            s(:send, nil, :assert_equal,
              s(:str, "foo''\""),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "default")), :[],
                s(:str, "dq"))),
            s(:send, nil, :assert_equal,
              s(:str, "foobar"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "default")), :[],
                s(:str, "dq2"))),
            s(:send, nil, :assert_equal,
              s(:str, "a\r\n\b\tb"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "default")), :[],
                s(:str, "esc"))),
            s(:send, nil, :assert_equal,
              s(:str, "foo\b\\ar"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "default")), :[],
                s(:str, "foo\\bar"))),
            s(:send, nil, :assert_equal,
              s(:str, "baz"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "foo")), :[],
                s(:str, "bar"))),
            s(:send, nil, :assert_equal,
              s(:str, "baz"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "foo\\bar")), :[],
                s(:str, "foo\\bar"))),
            s(:send, nil, :assert_equal,
              s(:str, "b  ar"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "default1  default2")), :[],
                s(:str, "fo"))),
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "doller")), :[],
                s(:str, "foo"))),
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "doller")), :[],
                s(:str, "bar"))),
            s(:send, nil, :assert_equal,
              s(:str, "123baz456bar798"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "doller")), :[],
                s(:str, "baz"))),
            s(:send, nil, :assert_equal,
              s(:str, "123baz456bar798"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "doller")), :[],
                s(:str, "qux"))),
            s(:send, nil, :assert_equal,
              s(:str, "123baz456bar798.123baz456bar798"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "doller")), :[],
                s(:str, "quxx"))),
            s(:lvasgn, :excn,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ConfigError)),
                s(:args),
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Config), :parse,
                  s(:str, "foo = $bar")))),
            s(:send, nil, :assert_equal,
              s(:str, "error in line 1: variable has no value"),
              s(:send,
                s(:lvar, :excn), :message)),
            s(:lvasgn, :excn,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ConfigError)),
                s(:args),
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Config), :parse,
                  s(:str, "foo = $(bar")))),
            s(:send, nil, :assert_equal,
              s(:str, "error in line 1: no close brace"),
              s(:send,
                s(:lvar, :excn), :message)),
            s(:lvasgn, :excn,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ConfigError)),
                s(:args),
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Config), :parse,
                  s(:str, "f o =b  ar      # no space in key")))),
            s(:send, nil, :assert_equal,
              s(:str, "error in line 1: missing equal sign"),
              s(:send,
                s(:lvar, :excn), :message)),
            s(:lvasgn, :excn,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :OpenSSL), :ConfigError)),
                s(:args),
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Config), :parse,
                  s(:dstr,
                    s(:str, "# comment 1               # comments\n"),
                    s(:str, "\n"),
                    s(:str, "#\n"),
                    s(:str, " # comment 2\n"),
                    s(:str, "\t#comment 3\n"),
                    s(:str, "  [second    ]\t\n"),
                    s(:str, "[third                    # section not terminated\n"))))),
            s(:send, nil, :assert_equal,
              s(:str, "error in line 7: missing close square bracket"),
              s(:send,
                s(:lvar, :excn), :message)))),
        s(:def, :test_s_load,
          s(:args),
          s(:begin,
            s(:lvasgn, :c,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :Config), :load)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :c), :to_s)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:lvar, :c), :sections)),
            s(:block,
              s(:send,
                s(:const, nil, :Tempfile), :create,
                s(:str, "openssl.cnf")),
              s(:args,
                s(:arg, :file)),
              s(:begin,
                s(:send,
                  s(:lvar, :file), :close),
                s(:lvasgn, :c,
                  s(:send,
                    s(:const,
                      s(:const, nil, :OpenSSL), :Config), :load,
                    s(:send,
                      s(:lvar, :file), :path))),
                s(:send, nil, :assert_equal,
                  s(:str, "[ default ]\n\n"),
                  s(:send,
                    s(:lvar, :c), :to_s)),
                s(:send, nil, :assert_equal,
                  s(:array,
                    s(:str, "default")),
                  s(:send,
                    s(:lvar, :c), :sections)))))),
        s(:def, :test_initialize,
          s(:args),
          s(:begin,
            s(:lvasgn, :c,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :Config), :new)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :c), :to_s)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:lvar, :c), :sections)))),
        s(:def, :test_initialize_with_empty_file,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:str, "openssl.cnf")),
            s(:args,
              s(:arg, :file)),
            s(:begin,
              s(:send,
                s(:lvar, :file), :close),
              s(:lvasgn, :c,
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Config), :new,
                  s(:send,
                    s(:lvar, :file), :path))),
              s(:send, nil, :assert_equal,
                s(:str, "[ default ]\n\n"),
                s(:send,
                  s(:lvar, :c), :to_s)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "default")),
                s(:send,
                  s(:lvar, :c), :sections))))),
        s(:def, :test_initialize_with_example_file,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "CA_default"),
              s(:str, "ca"),
              s(:str, "default")),
            s(:send,
              s(:send,
                s(:ivar, :@it), :sections), :sort))),
        s(:def, :test_get_value,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "CA_default"),
              s(:send,
                s(:ivar, :@it), :get_value,
                s(:str, "ca"),
                s(:str, "default_ca"))),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:ivar, :@it), :get_value,
                s(:str, "ca"),
                s(:str, "no such key"))),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:ivar, :@it), :get_value,
                s(:str, "no such section"),
                s(:str, "no such key"))),
            s(:send, nil, :assert_equal,
              s(:str, "."),
              s(:send,
                s(:ivar, :@it), :get_value,
                s(:str, ""),
                s(:str, "HOME"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :TypeError)),
              s(:args),
              s(:send,
                s(:ivar, :@it), :get_value,
                s(:nil),
                s(:str, "HOME"))),
            s(:send, nil, :assert_equal,
              s(:str, "."),
              s(:send,
                s(:ivar, :@it), :get_value,
                s(:str, "unknown"),
                s(:str, "HOME"))))),
        s(:def, :test_get_value_ENV,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:send,
                s(:send,
                  s(:const, nil, :ENV), :keys), :first)),
            s(:send, nil, :assert_not_nil,
              s(:lvar, :key)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:lvar, :key)),
              s(:send,
                s(:ivar, :@it), :get_value,
                s(:str, "ENV"),
                s(:lvar, :key))))),
        s(:def, :test_value,
          s(:args),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :OpenSSL), :TestUtils), :silent),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, "CA_default"),
                s(:send,
                  s(:ivar, :@it), :value,
                  s(:str, "ca"),
                  s(:str, "default_ca"))),
              s(:send, nil, :assert_equal,
                s(:nil),
                s(:send,
                  s(:ivar, :@it), :value,
                  s(:str, "ca"),
                  s(:str, "no such key"))),
              s(:send, nil, :assert_equal,
                s(:nil),
                s(:send,
                  s(:ivar, :@it), :value,
                  s(:str, "no such section"),
                  s(:str, "no such key"))),
              s(:send, nil, :assert_equal,
                s(:str, "."),
                s(:send,
                  s(:ivar, :@it), :value,
                  s(:str, ""),
                  s(:str, "HOME"))),
              s(:send, nil, :assert_equal,
                s(:str, "."),
                s(:send,
                  s(:ivar, :@it), :value,
                  s(:nil),
                  s(:str, "HOME"))),
              s(:send, nil, :assert_equal,
                s(:str, "."),
                s(:send,
                  s(:ivar, :@it), :value,
                  s(:str, "HOME"))),
              s(:send, nil, :assert_equal,
                s(:str, "."),
                s(:send,
                  s(:ivar, :@it), :value,
                  s(:str, "unknown"),
                  s(:str, "HOME")))))),
        s(:def, :test_value_ENV,
          s(:args),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :OpenSSL), :TestUtils), :silent),
            s(:args),
            s(:begin,
              s(:lvasgn, :key,
                s(:send,
                  s(:send,
                    s(:const, nil, :ENV), :keys), :first)),
              s(:send, nil, :assert_not_nil,
                s(:lvar, :key)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:lvar, :key)),
                s(:send,
                  s(:ivar, :@it), :value,
                  s(:str, "ENV"),
                  s(:lvar, :key)))))),
        s(:def, :test_aref,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:hash,
                s(:pair,
                  s(:str, "HOME"),
                  s(:str, "."))),
              s(:send,
                s(:ivar, :@it), :[],
                s(:str, "default"))),
            s(:send, nil, :assert_equal,
              s(:hash,
                s(:pair,
                  s(:str, "dir"),
                  s(:str, "./demoCA")),
                s(:pair,
                  s(:str, "certs"),
                  s(:str, "./certs"))),
              s(:send,
                s(:ivar, :@it), :[],
                s(:str, "CA_default"))),
            s(:send, nil, :assert_equal,
              s(:hash),
              s(:send,
                s(:ivar, :@it), :[],
                s(:str, "no_such_section"))),
            s(:send, nil, :assert_equal,
              s(:hash),
              s(:send,
                s(:ivar, :@it), :[],
                s(:str, ""))))),
        s(:def, :test_section,
          s(:args),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :OpenSSL), :TestUtils), :silent),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:hash,
                  s(:pair,
                    s(:str, "HOME"),
                    s(:str, "."))),
                s(:send,
                  s(:ivar, :@it), :section,
                  s(:str, "default"))),
              s(:send, nil, :assert_equal,
                s(:hash,
                  s(:pair,
                    s(:str, "dir"),
                    s(:str, "./demoCA")),
                  s(:pair,
                    s(:str, "certs"),
                    s(:str, "./certs"))),
                s(:send,
                  s(:ivar, :@it), :section,
                  s(:str, "CA_default"))),
              s(:send, nil, :assert_equal,
                s(:hash),
                s(:send,
                  s(:ivar, :@it), :section,
                  s(:str, "no_such_section"))),
              s(:send, nil, :assert_equal,
                s(:hash),
                s(:send,
                  s(:ivar, :@it), :section,
                  s(:str, "")))))),
        s(:def, :test_sections,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "CA_default"),
                s(:str, "ca"),
                s(:str, "default")),
              s(:send,
                s(:send,
                  s(:ivar, :@it), :sections), :sort)),
            s(:send,
              s(:ivar, :@it), :[]=,
              s(:str, "new_section"),
              s(:hash,
                s(:pair,
                  s(:str, "foo"),
                  s(:str, "bar")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "CA_default"),
                s(:str, "ca"),
                s(:str, "default"),
                s(:str, "new_section")),
              s(:send,
                s(:send,
                  s(:ivar, :@it), :sections), :sort)),
            s(:send,
              s(:ivar, :@it), :[]=,
              s(:str, "new_section"),
              s(:hash)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "CA_default"),
                s(:str, "ca"),
                s(:str, "default"),
                s(:str, "new_section")),
              s(:send,
                s(:send,
                  s(:ivar, :@it), :sections), :sort)))),
        s(:def, :test_add_value,
          s(:args),
          s(:begin,
            s(:lvasgn, :c,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :Config), :new)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :c), :to_s)),
            s(:send,
              s(:lvar, :c), :add_value,
              s(:str, "default"),
              s(:str, "foo"),
              s(:str, "bar")),
            s(:send, nil, :assert_equal,
              s(:str, "[ default ]\nfoo=bar\n\n"),
              s(:send,
                s(:lvar, :c), :to_s)),
            s(:send,
              s(:lvar, :c), :add_value,
              s(:str, "default"),
              s(:str, "baz"),
              s(:str, "qux")),
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "default")), :[],
                s(:str, "foo"))),
            s(:send, nil, :assert_equal,
              s(:str, "qux"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "default")), :[],
                s(:str, "baz"))),
            s(:send,
              s(:lvar, :c), :add_value,
              s(:str, "default"),
              s(:str, "baz"),
              s(:str, "quxxx")),
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "default")), :[],
                s(:str, "foo"))),
            s(:send, nil, :assert_equal,
              s(:str, "quxxx"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "default")), :[],
                s(:str, "baz"))),
            s(:send,
              s(:lvar, :c), :add_value,
              s(:str, "section"),
              s(:str, "foo"),
              s(:str, "bar")),
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "default")), :[],
                s(:str, "foo"))),
            s(:send, nil, :assert_equal,
              s(:str, "quxxx"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "default")), :[],
                s(:str, "baz"))),
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "section")), :[],
                s(:str, "foo"))))),
        s(:def, :test_aset,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@it), :[]=,
              s(:str, "foo"),
              s(:hash,
                s(:pair,
                  s(:str, "bar"),
                  s(:str, "baz")))),
            s(:send, nil, :assert_equal,
              s(:hash,
                s(:pair,
                  s(:str, "bar"),
                  s(:str, "baz"))),
              s(:send,
                s(:ivar, :@it), :[],
                s(:str, "foo"))),
            s(:send,
              s(:ivar, :@it), :[]=,
              s(:str, "foo"),
              s(:hash,
                s(:pair,
                  s(:str, "bar"),
                  s(:str, "qux")),
                s(:pair,
                  s(:str, "baz"),
                  s(:str, "quxx")))),
            s(:send, nil, :assert_equal,
              s(:hash,
                s(:pair,
                  s(:str, "bar"),
                  s(:str, "qux")),
                s(:pair,
                  s(:str, "baz"),
                  s(:str, "quxx"))),
              s(:send,
                s(:ivar, :@it), :[],
                s(:str, "foo"))),
            s(:send,
              s(:ivar, :@it), :[]=,
              s(:str, "foo"),
              s(:hash,
                s(:pair,
                  s(:str, "foo"),
                  s(:str, "foo")))),
            s(:send, nil, :assert_equal,
              s(:hash,
                s(:pair,
                  s(:str, "foo"),
                  s(:str, "foo")),
                s(:pair,
                  s(:str, "bar"),
                  s(:str, "qux")),
                s(:pair,
                  s(:str, "baz"),
                  s(:str, "quxx"))),
              s(:send,
                s(:ivar, :@it), :[],
                s(:str, "foo"))),
            s(:send,
              s(:ivar, :@it), :[]=,
              s(:str, "foo"),
              s(:hash)),
            s(:send, nil, :assert_equal,
              s(:hash,
                s(:pair,
                  s(:str, "foo"),
                  s(:str, "foo")),
                s(:pair,
                  s(:str, "bar"),
                  s(:str, "qux")),
                s(:pair,
                  s(:str, "baz"),
                  s(:str, "quxx"))),
              s(:send,
                s(:ivar, :@it), :[],
                s(:str, "foo"))))),
        s(:def, :test_each,
          s(:args),
          s(:begin,
            s(:lvasgn, :ary,
              s(:block,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:ivar, :@it), :map),
                    s(:args,
                      s(:arg, :e)),
                    s(:lvar, :e)), :sort),
                s(:args,
                  s(:arg, :a),
                  s(:arg, :b)),
                s(:send,
                  s(:send,
                    s(:lvar, :a), :[],
                    s(:int, 0)), :<=>,
                  s(:send,
                    s(:lvar, :b), :[],
                    s(:int, 0))))),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:send,
                s(:lvar, :ary), :size)),
            s(:send, nil, :assert_equal,
              s(:str, "CA_default"),
              s(:send,
                s(:send,
                  s(:lvar, :ary), :[],
                  s(:int, 0)), :[],
                s(:int, 0))),
            s(:send, nil, :assert_equal,
              s(:str, "CA_default"),
              s(:send,
                s(:send,
                  s(:lvar, :ary), :[],
                  s(:int, 1)), :[],
                s(:int, 0))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "ca"),
                s(:str, "default_ca"),
                s(:str, "CA_default")),
              s(:send,
                s(:lvar, :ary), :[],
                s(:int, 2))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "default"),
                s(:str, "HOME"),
                s(:str, ".")),
              s(:send,
                s(:lvar, :ary), :[],
                s(:int, 3))))),
        s(:def, :test_to_s,
          s(:args),
          s(:begin,
            s(:lvasgn, :c,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :Config), :parse,
                s(:str, "[empty]\n"))),
            s(:send, nil, :assert_equal,
              s(:str, "[ default ]\n\n[ empty ]\n\n"),
              s(:send,
                s(:lvar, :c), :to_s)))),
        s(:def, :test_inspect,
          s(:args),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "#<OpenSSL::Config sections=\\[.*\\]>"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@it), :inspect))),
        s(:def, :test_freeze,
          s(:args),
          s(:begin,
            s(:lvasgn, :c,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :Config), :new)),
            s(:send,
              s(:lvar, :c), :[]=,
              s(:str, "foo"),
              s(:array,
                s(:array,
                  s(:str, "key"),
                  s(:str, "value")))),
            s(:send,
              s(:lvar, :c), :freeze),
            s(:lvasgn, :bug,
              s(:str, "[ruby-core:18377]")),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :TypeError),
                  s(:lvar, :bug)),
                s(:args),
                s(:send,
                  s(:lvar, :c), :[]=,
                  s(:str, "foo"),
                  s(:array,
                    s(:array,
                      s(:str, "key"),
                      s(:str, "wrong")))))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "can't modify"),
                s(:regopt)),
              s(:send,
                s(:lvar, :e), :message),
              s(:lvar, :bug)))),
        s(:def, :test_dup,
          s(:args),
          s(:begin,
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@it), :sections), :empty?), :!)),
            s(:lvasgn, :c,
              s(:send,
                s(:ivar, :@it), :dup)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@it), :sections), :sort),
              s(:send,
                s(:send,
                  s(:lvar, :c), :sections), :sort)),
            s(:send,
              s(:ivar, :@it), :[]=,
              s(:str, "newsection"),
              s(:hash,
                s(:pair,
                  s(:str, "a"),
                  s(:str, "b")))),
            s(:send, nil, :assert_not_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@it), :sections), :sort),
              s(:send,
                s(:send,
                  s(:lvar, :c), :sections), :sort)))),
        s(:def, :test_clone,
          s(:args),
          s(:begin,
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@it), :sections), :empty?), :!)),
            s(:lvasgn, :c,
              s(:send,
                s(:ivar, :@it), :clone)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@it), :sections), :sort),
              s(:send,
                s(:send,
                  s(:lvar, :c), :sections), :sort)),
            s(:send,
              s(:ivar, :@it), :[]=,
              s(:str, "newsection"),
              s(:hash,
                s(:pair,
                  s(:str, "a"),
                  s(:str, "b")))),
            s(:send, nil, :assert_not_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@it), :sections), :sort),
              s(:send,
                s(:send,
                  s(:lvar, :c), :sections), :sort)))))), nil))
