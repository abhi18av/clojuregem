s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "helper")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :DTrace), :TestCase)),
    s(:module,
      s(:const, nil, :DTrace),
      s(:class,
        s(:const, nil, :TestLoad),
        s(:const, nil, :TestCase),
        s(:begin,
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:zsuper),
              s(:ivasgn, :@rbfile,
                s(:send,
                  s(:const, nil, :Tempfile), :new,
                  s(:array,
                    s(:str, "omg"),
                    s(:str, "rb")))),
              s(:send,
                s(:ivar, :@rbfile), :write,
                s(:str, "x = 10")))),
          s(:def, :teardown,
            s(:args),
            s(:begin,
              s(:zsuper),
              s(:if,
                s(:ivar, :@rbfile),
                s(:send,
                  s(:ivar, :@rbfile), :close,
                  s(:true)), nil))),
          s(:def, :test_load_entry,
            s(:args),
            s(:begin,
              s(:lvasgn, :probe,
                s(:dstr,
                  s(:str, "ruby$target:::load-entry\n"),
                  s(:str, "{\n"),
                  s(:str, "  printf(\"%s %s %d\\n\", copyinstr(arg0), copyinstr(arg1), arg2);\n"),
                  s(:str, "}\n"))),
              s(:block,
                s(:send, nil, :trap_probe,
                  s(:lvar, :probe),
                  s(:send, nil, :program)),
                s(:args,
                  s(:arg, :dpath),
                  s(:arg, :rbpath),
                  s(:arg, :saw)),
                s(:begin,
                  s(:lvasgn, :saw,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :saw), :map,
                          s(:block_pass,
                            s(:sym, :split))), :find_all),
                      s(:args,
                        s(:arg, :loaded),
                        s(:arg, :_),
                        s(:arg, :_)),
                      s(:send,
                        s(:lvar, :loaded), :==,
                        s(:send,
                          s(:ivar, :@rbfile), :path)))),
                  s(:send, nil, :assert_equal,
                    s(:int, 10),
                    s(:send,
                      s(:lvar, :saw), :length)))))),
          s(:def, :test_load_return,
            s(:args),
            s(:begin,
              s(:lvasgn, :probe,
                s(:dstr,
                  s(:str, "ruby$target:::load-return\n"),
                  s(:str, "{\n"),
                  s(:str, "  printf(\"%s\\n\", copyinstr(arg0));\n"),
                  s(:str, "}\n"))),
              s(:block,
                s(:send, nil, :trap_probe,
                  s(:lvar, :probe),
                  s(:send, nil, :program)),
                s(:args,
                  s(:arg, :dpath),
                  s(:arg, :rbpath),
                  s(:arg, :saw)),
                s(:begin,
                  s(:lvasgn, :saw,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :saw), :map,
                          s(:block_pass,
                            s(:sym, :split))), :find_all),
                      s(:args,
                        s(:arg, :loaded),
                        s(:arg, :_),
                        s(:arg, :_)),
                      s(:send,
                        s(:lvar, :loaded), :==,
                        s(:send,
                          s(:ivar, :@rbfile), :path)))),
                  s(:send, nil, :assert_equal,
                    s(:int, 10),
                    s(:send,
                      s(:lvar, :saw), :length)))))),
          s(:send, nil, :private),
          s(:def, :program,
            s(:args),
            s(:dstr,
              s(:str, "10.times { load '"),
              s(:begin,
                s(:send,
                  s(:ivar, :@rbfile), :path)),
              s(:str, "' }")))))), nil))
