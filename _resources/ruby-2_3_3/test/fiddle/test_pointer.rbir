s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require_relative,
        s(:str, "helper")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:defined?,
      s(:const, nil, :Fiddle)),
    s(:module,
      s(:const, nil, :Fiddle),
      s(:class,
        s(:const, nil, :TestPointer),
        s(:const, nil, :TestCase),
        s(:begin,
          s(:def, :dlwrap,
            s(:args,
              s(:arg, :arg)),
            s(:send,
              s(:const, nil, :Fiddle), :dlwrap,
              s(:lvar, :arg))),
          s(:send, nil, :include,
            s(:const,
              s(:const,
                s(:const, nil, :Test), :Unit), :Assertions)),
          s(:def, :test_cptr_to_int,
            s(:args),
            s(:begin,
              s(:lvasgn, :null,
                s(:const,
                  s(:const, nil, :Fiddle), :NULL)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :null), :to_i),
                s(:send,
                  s(:lvar, :null), :to_int)))),
          s(:def, :test_malloc_free_func_int,
            s(:args),
            s(:begin,
              s(:lvasgn, :free,
                s(:send,
                  s(:const,
                    s(:const, nil, :Fiddle), :Function), :new,
                  s(:const,
                    s(:const, nil, :Fiddle), :RUBY_FREE),
                  s(:array,
                    s(:const, nil, :TYPE_VOIDP)),
                  s(:const, nil, :TYPE_VOID))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :free), :to_i),
                s(:send,
                  s(:const,
                    s(:const, nil, :Fiddle), :RUBY_FREE), :to_i)),
              s(:lvasgn, :ptr,
                s(:send,
                  s(:const, nil, :Pointer), :malloc,
                  s(:int, 10),
                  s(:send,
                    s(:lvar, :free), :to_i))),
              s(:send, nil, :assert_equal,
                s(:int, 10),
                s(:send,
                  s(:lvar, :ptr), :size)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :free), :to_i),
                s(:send,
                  s(:send,
                    s(:lvar, :ptr), :free), :to_i)))),
          s(:def, :test_malloc_free_func,
            s(:args),
            s(:begin,
              s(:lvasgn, :free,
                s(:send,
                  s(:const,
                    s(:const, nil, :Fiddle), :Function), :new,
                  s(:const,
                    s(:const, nil, :Fiddle), :RUBY_FREE),
                  s(:array,
                    s(:const, nil, :TYPE_VOIDP)),
                  s(:const, nil, :TYPE_VOID))),
              s(:lvasgn, :ptr,
                s(:send,
                  s(:const, nil, :Pointer), :malloc,
                  s(:int, 10),
                  s(:lvar, :free))),
              s(:send, nil, :assert_equal,
                s(:int, 10),
                s(:send,
                  s(:lvar, :ptr), :size)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :free), :to_i),
                s(:send,
                  s(:send,
                    s(:lvar, :ptr), :free), :to_i)))),
          s(:def, :test_to_str,
            s(:args),
            s(:begin,
              s(:lvasgn, :str,
                s(:send,
                  s(:const, nil, :Marshal), :load,
                  s(:send,
                    s(:const, nil, :Marshal), :dump,
                    s(:str, "hello world")))),
              s(:lvasgn, :ptr,
                s(:send,
                  s(:const, nil, :Pointer), :[],
                  s(:lvar, :str))),
              s(:send, nil, :assert_equal,
                s(:int, 3),
                s(:send,
                  s(:send,
                    s(:lvar, :ptr), :to_str,
                    s(:int, 3)), :length)),
              s(:send, nil, :assert_equal,
                s(:lvar, :str),
                s(:send,
                  s(:lvar, :ptr), :to_str)),
              s(:send,
                s(:lvar, :ptr), :[]=,
                s(:int, 5),
                s(:int, 0)),
              s(:send, nil, :assert_equal,
                s(:str, "hello\u0000world"),
                s(:send,
                  s(:lvar, :ptr), :to_str)))),
          s(:def, :test_to_s,
            s(:args),
            s(:begin,
              s(:lvasgn, :str,
                s(:send,
                  s(:const, nil, :Marshal), :load,
                  s(:send,
                    s(:const, nil, :Marshal), :dump,
                    s(:str, "hello world")))),
              s(:lvasgn, :ptr,
                s(:send,
                  s(:const, nil, :Pointer), :[],
                  s(:lvar, :str))),
              s(:send, nil, :assert_equal,
                s(:int, 3),
                s(:send,
                  s(:send,
                    s(:lvar, :ptr), :to_s,
                    s(:int, 3)), :length)),
              s(:send, nil, :assert_equal,
                s(:lvar, :str),
                s(:send,
                  s(:lvar, :ptr), :to_s)),
              s(:send,
                s(:lvar, :ptr), :[]=,
                s(:int, 5),
                s(:int, 0)),
              s(:send, nil, :assert_equal,
                s(:str, "hello"),
                s(:send,
                  s(:lvar, :ptr), :to_s)))),
          s(:def, :test_minus,
            s(:args),
            s(:begin,
              s(:lvasgn, :str,
                s(:str, "hello world")),
              s(:lvasgn, :ptr,
                s(:send,
                  s(:const, nil, :Pointer), :[],
                  s(:lvar, :str))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :ptr), :to_s),
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :ptr), :+,
                        s(:int, 3)), :-,
                      s(:int, 3))), :to_s)))),
          s(:def, :test_plus,
            s(:args),
            s(:begin,
              s(:lvasgn, :str,
                s(:str, "hello world")),
              s(:lvasgn, :ptr,
                s(:send,
                  s(:const, nil, :Pointer), :[],
                  s(:lvar, :str))),
              s(:lvasgn, :new_str,
                s(:send,
                  s(:lvar, :ptr), :+,
                  s(:int, 3))),
              s(:send, nil, :assert_equal,
                s(:str, "lo world"),
                s(:send,
                  s(:lvar, :new_str), :to_s)))),
          s(:def, :test_inspect,
            s(:args),
            s(:begin,
              s(:lvasgn, :ptr,
                s(:send,
                  s(:const, nil, :Pointer), :new,
                  s(:int, 0))),
              s(:lvasgn, :inspect,
                s(:send,
                  s(:lvar, :ptr), :inspect)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "size="),
                  s(:begin,
                    s(:send,
                      s(:lvar, :ptr), :size)),
                  s(:regopt)),
                s(:lvar, :inspect)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "free="),
                  s(:begin,
                    s(:send, nil, :sprintf,
                      s(:str, "%#x"),
                      s(:send,
                        s(:send,
                          s(:lvar, :ptr), :free), :to_i))),
                  s(:regopt)),
                s(:lvar, :inspect)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "ptr="),
                  s(:begin,
                    s(:send, nil, :sprintf,
                      s(:str, "%#x"),
                      s(:send,
                        s(:lvar, :ptr), :to_i))),
                  s(:regopt)),
                s(:lvar, :inspect)))),
          s(:def, :test_to_ptr_string,
            s(:args),
            s(:begin,
              s(:lvasgn, :str,
                s(:str, "hello world")),
              s(:lvasgn, :ptr,
                s(:send,
                  s(:const, nil, :Pointer), :[],
                  s(:lvar, :str))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :ptr), :tainted?),
                s(:str, "pointer should be tainted")),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :str), :length),
                s(:send,
                  s(:lvar, :ptr), :size)),
              s(:send, nil, :assert_equal,
                s(:str, "hello"),
                s(:send,
                  s(:lvar, :ptr), :[],
                  s(:int, 0),
                  s(:int, 5))))),
          s(:def, :test_to_ptr_io,
            s(:args),
            s(:begin,
              s(:lvasgn, :buf,
                s(:send,
                  s(:const, nil, :Pointer), :malloc,
                  s(:int, 10))),
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:str, "(string)"),
                  s(:str, "r")),
                s(:args,
                  s(:arg, :f)),
                s(:begin,
                  s(:lvasgn, :ptr,
                    s(:send,
                      s(:const, nil, :Pointer), :to_ptr,
                      s(:lvar, :f))),
                  s(:lvasgn, :fread,
                    s(:send,
                      s(:const, nil, :Function), :new,
                      s(:send,
                        s(:ivar, :@libc), :[],
                        s(:str, "fread")),
                      s(:array,
                        s(:const, nil, :TYPE_VOIDP),
                        s(:const, nil, :TYPE_INT),
                        s(:const, nil, :TYPE_INT),
                        s(:const, nil, :TYPE_VOIDP)),
                      s(:const, nil, :TYPE_INT))),
                  s(:send,
                    s(:lvar, :fread), :call,
                    s(:send,
                      s(:lvar, :buf), :to_i),
                    s(:const,
                      s(:const, nil, :Fiddle), :SIZEOF_CHAR),
                    s(:send,
                      s(:send,
                        s(:lvar, :buf), :size), :-,
                      s(:int, 1)),
                    s(:send,
                      s(:lvar, :ptr), :to_i)))),
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:str, "(string)"),
                  s(:str, "r")),
                s(:args,
                  s(:arg, :f)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :f), :read,
                    s(:int, 9)),
                  s(:send,
                    s(:lvar, :buf), :to_s))))),
          s(:def, :test_to_ptr_with_ptr,
            s(:args),
            s(:begin,
              s(:lvasgn, :ptr,
                s(:send,
                  s(:const, nil, :Pointer), :new,
                  s(:int, 0))),
              s(:lvasgn, :ptr2,
                s(:send,
                  s(:const, nil, :Pointer), :to_ptr,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Struct), :new,
                      s(:sym, :to_ptr)), :new,
                    s(:lvar, :ptr)))),
              s(:send, nil, :assert_equal,
                s(:lvar, :ptr),
                s(:lvar, :ptr2)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :Fiddle), :DLError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Pointer), :to_ptr,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Struct), :new,
                      s(:sym, :to_ptr)), :new,
                    s(:nil)))))),
          s(:def, :test_to_ptr_with_num,
            s(:args),
            s(:begin,
              s(:lvasgn, :ptr,
                s(:send,
                  s(:const, nil, :Pointer), :new,
                  s(:int, 0))),
              s(:send, nil, :assert_equal,
                s(:lvar, :ptr),
                s(:send,
                  s(:const, nil, :Pointer), :[],
                  s(:int, 0))))),
          s(:def, :test_equals,
            s(:args),
            s(:begin,
              s(:lvasgn, :ptr,
                s(:send,
                  s(:const, nil, :Pointer), :new,
                  s(:int, 0))),
              s(:lvasgn, :ptr2,
                s(:send,
                  s(:const, nil, :Pointer), :new,
                  s(:int, 0))),
              s(:send, nil, :assert_equal,
                s(:lvar, :ptr2),
                s(:lvar, :ptr)))),
          s(:def, :test_not_equals,
            s(:args),
            s(:begin,
              s(:lvasgn, :ptr,
                s(:send,
                  s(:const, nil, :Pointer), :new,
                  s(:int, 0))),
              s(:send, nil, :refute_equal,
                s(:int, 10),
                s(:lvar, :ptr),
                s(:str, "10 should not equal the pointer")))),
          s(:def, :test_cmp,
            s(:args),
            s(:begin,
              s(:lvasgn, :ptr,
                s(:send,
                  s(:const, nil, :Pointer), :new,
                  s(:int, 0))),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:lvar, :ptr), :<=>,
                  s(:int, 10)),
                s(:str, "10 should not be comparable")))),
          s(:def, :test_ref_ptr,
            s(:args),
            s(:begin,
              s(:lvasgn, :ary,
                s(:array,
                  s(:int, 0),
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 4),
                  s(:int, 5))),
              s(:lvasgn, :addr,
                s(:send,
                  s(:const, nil, :Pointer), :new,
                  s(:send, nil, :dlwrap,
                    s(:lvar, :ary)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :addr), :to_i),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :addr), :ref), :ptr), :to_i)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :addr), :to_i),
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :addr), :-@)), :+@)), :to_i)))),
          s(:def, :test_to_value,
            s(:args),
            s(:begin,
              s(:lvasgn, :ary,
                s(:array,
                  s(:int, 0),
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 4),
                  s(:int, 5))),
              s(:lvasgn, :addr,
                s(:send,
                  s(:const, nil, :Pointer), :new,
                  s(:send, nil, :dlwrap,
                    s(:lvar, :ary)))),
              s(:send, nil, :assert_equal,
                s(:lvar, :ary),
                s(:send,
                  s(:lvar, :addr), :to_value)))),
          s(:def, :test_free,
            s(:args),
            s(:begin,
              s(:lvasgn, :ptr,
                s(:send,
                  s(:const, nil, :Pointer), :malloc,
                  s(:int, 4))),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:lvar, :ptr), :free)))),
          s(:def, :test_free=,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_normal_exit,
                s(:dstr,
                  s(:str, "        require 'fiddle'\n"),
                  s(:str, "        Fiddle::LIBC_SO = "),
                  s(:begin,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Fiddle), :LIBC_SO), :dump)),
                  s(:str, "\n"),
                  s(:str, "        Fiddle::LIBM_SO = "),
                  s(:begin,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Fiddle), :LIBM_SO), :dump)),
                  s(:str, "\n"),
                  s(:str, "        include Fiddle\n"),
                  s(:str, "        @libc = dlopen(LIBC_SO)\n"),
                  s(:str, "        @libm = dlopen(LIBM_SO)\n"),
                  s(:str, "        free = Fiddle::Function.new(Fiddle::RUBY_FREE, [TYPE_VOIDP], TYPE_VOID)\n"),
                  s(:str, "        ptr = Fiddle::Pointer.malloc(4)\n"),
                  s(:str, "        ptr.free = free\n"),
                  s(:str, "        free.ptr\n"),
                  s(:str, "        ptr.free.ptr\n")),
                s(:str, "[ruby-dev:39269]")),
              s(:lvasgn, :free,
                s(:send,
                  s(:const, nil, :Function), :new,
                  s(:const,
                    s(:const, nil, :Fiddle), :RUBY_FREE),
                  s(:array,
                    s(:const, nil, :TYPE_VOIDP)),
                  s(:const, nil, :TYPE_VOID))),
              s(:lvasgn, :ptr,
                s(:send,
                  s(:const, nil, :Pointer), :malloc,
                  s(:int, 4))),
              s(:send,
                s(:lvar, :ptr), :free=,
                s(:lvar, :free)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :free), :ptr),
                s(:send,
                  s(:send,
                    s(:lvar, :ptr), :free), :ptr)))),
          s(:def, :test_null?,
            s(:args),
            s(:begin,
              s(:lvasgn, :ptr,
                s(:send,
                  s(:const, nil, :Pointer), :new,
                  s(:int, 0))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :ptr), :null?)))),
          s(:def, :test_size,
            s(:args),
            s(:begin,
              s(:lvasgn, :ptr,
                s(:send,
                  s(:const, nil, :Pointer), :malloc,
                  s(:int, 4))),
              s(:send, nil, :assert_equal,
                s(:int, 4),
                s(:send,
                  s(:lvar, :ptr), :size)),
              s(:send,
                s(:const, nil, :Fiddle), :free,
                s(:send,
                  s(:lvar, :ptr), :to_i)))),
          s(:def, :test_size=,
            s(:args),
            s(:begin,
              s(:lvasgn, :ptr,
                s(:send,
                  s(:const, nil, :Pointer), :malloc,
                  s(:int, 4))),
              s(:send,
                s(:lvar, :ptr), :size=,
                s(:int, 10)),
              s(:send, nil, :assert_equal,
                s(:int, 10),
                s(:send,
                  s(:lvar, :ptr), :size)),
              s(:send,
                s(:const, nil, :Fiddle), :free,
                s(:send,
                  s(:lvar, :ptr), :to_i)))),
          s(:def, :test_aref_aset,
            s(:args),
            s(:begin,
              s(:lvasgn, :check,
                s(:block,
                  s(:send,
                    s(:const, nil, :Proc), :new),
                  s(:args,
                    s(:arg, :str),
                    s(:arg, :ptr)),
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:lvar, :str), :size),
                      s(:send,
                        s(:lvar, :ptr), :size)),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :str),
                      s(:send,
                        s(:lvar, :ptr), :to_s)),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:lvar, :str), :[],
                        s(:int, 0),
                        s(:int, 2)),
                      s(:send,
                        s(:lvar, :ptr), :to_s,
                        s(:int, 2))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:lvar, :str), :[],
                        s(:int, 0),
                        s(:int, 2)),
                      s(:send,
                        s(:lvar, :ptr), :[],
                        s(:int, 0),
                        s(:int, 2))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:lvar, :str), :[],
                        s(:int, 1),
                        s(:int, 2)),
                      s(:send,
                        s(:lvar, :ptr), :[],
                        s(:int, 1),
                        s(:int, 2))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:lvar, :str), :[],
                        s(:int, 1),
                        s(:int, 0)),
                      s(:send,
                        s(:lvar, :ptr), :[],
                        s(:int, 1),
                        s(:int, 0))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:send,
                          s(:lvar, :str), :[],
                          s(:int, 0)), :ord),
                      s(:send,
                        s(:lvar, :ptr), :[],
                        s(:int, 0))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:send,
                          s(:lvar, :str), :[],
                          s(:int, 1)), :ord),
                      s(:send,
                        s(:lvar, :ptr), :[],
                        s(:int, 1)))))),
              s(:lvasgn, :str,
                s(:send,
                  s(:const, nil, :Marshal), :load,
                  s(:send,
                    s(:const, nil, :Marshal), :dump,
                    s(:str, "abc")))),
              s(:lvasgn, :ptr,
                s(:send,
                  s(:const, nil, :Pointer), :[],
                  s(:lvar, :str))),
              s(:send,
                s(:lvar, :check), :call,
                s(:lvar, :str),
                s(:lvar, :ptr)),
              s(:send,
                s(:lvar, :str), :[]=,
                s(:int, 0),
                s(:str, "c")),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:str, "c"), :ord),
                s(:send,
                  s(:lvar, :ptr), :[]=,
                  s(:int, 0),
                  s(:send,
                    s(:str, "c"), :ord))),
              s(:send,
                s(:lvar, :check), :call,
                s(:lvar, :str),
                s(:lvar, :ptr)),
              s(:send,
                s(:lvar, :str), :[]=,
                s(:int, 0),
                s(:int, 2),
                s(:str, "aa")),
              s(:send, nil, :assert_equal,
                s(:str, "aa"),
                s(:send,
                  s(:lvar, :ptr), :[]=,
                  s(:int, 0),
                  s(:int, 2),
                  s(:str, "aa"))),
              s(:send,
                s(:lvar, :check), :call,
                s(:lvar, :str),
                s(:lvar, :ptr)),
              s(:lvasgn, :ptr2,
                s(:send,
                  s(:const, nil, :Pointer), :[],
                  s(:str, "cdeeee"))),
              s(:send,
                s(:lvar, :str), :[]=,
                s(:int, 0),
                s(:int, 2),
                s(:str, "cd")),
              s(:send, nil, :assert_equal,
                s(:lvar, :ptr2),
                s(:send,
                  s(:lvar, :ptr), :[]=,
                  s(:int, 0),
                  s(:int, 2),
                  s(:lvar, :ptr2))),
              s(:send,
                s(:lvar, :check), :call,
                s(:lvar, :str),
                s(:lvar, :ptr)),
              s(:lvasgn, :ptr3,
                s(:send,
                  s(:const, nil, :Pointer), :[],
                  s(:str, "vvvv"))),
              s(:send,
                s(:lvar, :str), :[]=,
                s(:int, 0),
                s(:int, 2),
                s(:str, "vv")),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :ptr3), :to_i),
                s(:send,
                  s(:lvar, :ptr), :[]=,
                  s(:int, 0),
                  s(:int, 2),
                  s(:send,
                    s(:lvar, :ptr3), :to_i))),
              s(:send,
                s(:lvar, :check), :call,
                s(:lvar, :str),
                s(:lvar, :ptr)))),
          s(:def, :test_null_pointer,
            s(:args),
            s(:begin,
              s(:lvasgn, :nullpo,
                s(:send,
                  s(:const, nil, :Pointer), :new,
                  s(:int, 0))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :DLError)),
                s(:args),
                s(:send,
                  s(:lvar, :nullpo), :[],
                  s(:int, 0))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :DLError)),
                s(:args),
                s(:send,
                  s(:lvar, :nullpo), :[]=,
                  s(:int, 0),
                  s(:int, 1))))),
          s(:def, :test_no_memory_leak,
            s(:args),
            s(:send, nil, :assert_no_memory_leak,
              s(:array,
                s(:str, "-W0"),
                s(:str, "-rfiddle.so")),
              s(:str, ""),
              s(:str, "100_000.times {Fiddle::Pointer.allocate}"),
              s(:hash,
                s(:pair,
                  s(:sym, :rss),
                  s(:true)))))))), nil))
