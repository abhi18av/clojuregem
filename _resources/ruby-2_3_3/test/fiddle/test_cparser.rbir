s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :require_relative,
          s(:str, "helper")),
        s(:send, nil, :require,
          s(:str, "fiddle/cparser"))),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:defined?,
      s(:const, nil, :Fiddle)),
    s(:module,
      s(:const, nil, :Fiddle),
      s(:class,
        s(:const, nil, :TestCParser),
        s(:const, nil, :TestCase),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :CParser)),
          s(:def, :test_char_ctype,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_CHAR),
                s(:send, nil, :parse_ctype,
                  s(:str, "char"))),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_CHAR),
                s(:send, nil, :parse_ctype,
                  s(:str, "signed char"))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :TYPE_CHAR), :-@),
                s(:send, nil, :parse_ctype,
                  s(:str, "unsigned char"))))),
          s(:def, :test_short_ctype,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_SHORT),
                s(:send, nil, :parse_ctype,
                  s(:str, "short"))),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_SHORT),
                s(:send, nil, :parse_ctype,
                  s(:str, "short int"))),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_SHORT),
                s(:send, nil, :parse_ctype,
                  s(:str, "signed short"))),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_SHORT),
                s(:send, nil, :parse_ctype,
                  s(:str, "signed short int"))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :TYPE_SHORT), :-@),
                s(:send, nil, :parse_ctype,
                  s(:str, "unsigned short"))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :TYPE_SHORT), :-@),
                s(:send, nil, :parse_ctype,
                  s(:str, "unsigned short int"))))),
          s(:def, :test_int_ctype,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_INT),
                s(:send, nil, :parse_ctype,
                  s(:str, "int"))),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_INT),
                s(:send, nil, :parse_ctype,
                  s(:str, "signed int"))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :TYPE_INT), :-@),
                s(:send, nil, :parse_ctype,
                  s(:str, "uint"))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :TYPE_INT), :-@),
                s(:send, nil, :parse_ctype,
                  s(:str, "unsigned int"))))),
          s(:def, :test_long_ctype,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_LONG),
                s(:send, nil, :parse_ctype,
                  s(:str, "long"))),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_LONG),
                s(:send, nil, :parse_ctype,
                  s(:str, "long int"))),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_LONG),
                s(:send, nil, :parse_ctype,
                  s(:str, "signed long"))),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_LONG),
                s(:send, nil, :parse_ctype,
                  s(:str, "signed long int"))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :TYPE_LONG), :-@),
                s(:send, nil, :parse_ctype,
                  s(:str, "unsigned long"))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :TYPE_LONG), :-@),
                s(:send, nil, :parse_ctype,
                  s(:str, "unsigned long int"))))),
          s(:def, :test_size_t_ctype,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:const, nil, :TYPE_SIZE_T),
              s(:send, nil, :parse_ctype,
                s(:str, "size_t")))),
          s(:def, :test_ssize_t_ctype,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:const, nil, :TYPE_SSIZE_T),
              s(:send, nil, :parse_ctype,
                s(:str, "ssize_t")))),
          s(:def, :test_ptrdiff_t_ctype,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:const, nil, :TYPE_PTRDIFF_T),
              s(:send, nil, :parse_ctype,
                s(:str, "ptrdiff_t")))),
          s(:def, :test_intptr_t_ctype,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:const, nil, :TYPE_INTPTR_T),
              s(:send, nil, :parse_ctype,
                s(:str, "intptr_t")))),
          s(:def, :test_uintptr_t_ctype,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:const, nil, :TYPE_UINTPTR_T),
              s(:send, nil, :parse_ctype,
                s(:str, "uintptr_t")))),
          s(:def, :test_undefined_ctype,
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :DLError)),
              s(:args),
              s(:send, nil, :parse_ctype,
                s(:str, "DWORD")))),
          s(:def, :test_undefined_ctype_with_type_alias,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :TYPE_LONG), :-@),
              s(:send, nil, :parse_ctype,
                s(:str, "DWORD"),
                s(:hash,
                  s(:pair,
                    s(:str, "DWORD"),
                    s(:str, "unsigned long")))))),
          s(:def, :test_struct_basic,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:const, nil, :TYPE_INT),
                  s(:const, nil, :TYPE_CHAR)),
                s(:array,
                  s(:str, "i"),
                  s(:str, "c"))),
              s(:send, nil, :parse_struct_signature,
                s(:array,
                  s(:str, "int i"),
                  s(:str, "char c"))))),
          s(:def, :test_struct_array,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:array,
                    s(:const, nil, :TYPE_CHAR),
                    s(:int, 80)),
                  s(:array,
                    s(:const, nil, :TYPE_INT),
                    s(:int, 5))),
                s(:array,
                  s(:str, "buffer"),
                  s(:str, "x"))),
              s(:send, nil, :parse_struct_signature,
                s(:array,
                  s(:str, "char buffer[80]"),
                  s(:str, "int[5] x"))))),
          s(:def, :test_struct_array_str,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:array,
                    s(:const, nil, :TYPE_CHAR),
                    s(:int, 80)),
                  s(:array,
                    s(:const, nil, :TYPE_INT),
                    s(:int, 5))),
                s(:array,
                  s(:str, "buffer"),
                  s(:str, "x"))),
              s(:send, nil, :parse_struct_signature,
                s(:str, "char buffer[80], int[5] x")))),
          s(:def, :test_struct_function_pointer,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:const, nil, :TYPE_VOIDP)),
                s(:array,
                  s(:str, "cb"))),
              s(:send, nil, :parse_struct_signature,
                s(:array,
                  s(:str, "void (*cb)(const char*)"))))),
          s(:def, :test_struct_function_pointer_str,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:const, nil, :TYPE_VOIDP),
                  s(:const, nil, :TYPE_VOIDP)),
                s(:array,
                  s(:str, "cb"),
                  s(:str, "data"))),
              s(:send, nil, :parse_struct_signature,
                s(:str, "void (*cb)(const char*), const char* data")))),
          s(:def, :test_struct_string,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:const, nil, :TYPE_INT),
                  s(:const, nil, :TYPE_VOIDP),
                  s(:const, nil, :TYPE_VOIDP)),
                s(:array,
                  s(:str, "x"),
                  s(:str, "cb"),
                  s(:str, "name"))),
              s(:send, nil, :parse_struct_signature,
                s(:str, "int x; void (*cb)(); const char* name")))),
          s(:def, :test_struct_undefined,
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :DLError)),
              s(:args),
              s(:send, nil, :parse_struct_signature,
                s(:array,
                  s(:str, "int i"),
                  s(:str, "DWORD cb"))))),
          s(:def, :test_struct_undefined_with_type_alias,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:const, nil, :TYPE_INT),
                  s(:send,
                    s(:const, nil, :TYPE_LONG), :-@)),
                s(:array,
                  s(:str, "i"),
                  s(:str, "cb"))),
              s(:send, nil, :parse_struct_signature,
                s(:array,
                  s(:str, "int i"),
                  s(:str, "DWORD cb")),
                s(:hash,
                  s(:pair,
                    s(:str, "DWORD"),
                    s(:str, "unsigned long")))))),
          s(:def, :test_signature_basic,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :func),
                  s(:lvasgn, :ret),
                  s(:lvasgn, :args)),
                s(:send, nil, :parse_signature,
                  s(:str, "void func()"))),
              s(:send, nil, :assert_equal,
                s(:str, "func"),
                s(:lvar, :func)),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_VOID),
                s(:lvar, :ret)),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:lvar, :args)))),
          s(:def, :test_signature_semi,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :func),
                  s(:lvasgn, :ret),
                  s(:lvasgn, :args)),
                s(:send, nil, :parse_signature,
                  s(:str, "void func();"))),
              s(:send, nil, :assert_equal,
                s(:str, "func"),
                s(:lvar, :func)),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_VOID),
                s(:lvar, :ret)),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:lvar, :args)))),
          s(:def, :test_signature_void_arg,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :func),
                  s(:lvasgn, :ret),
                  s(:lvasgn, :args)),
                s(:send, nil, :parse_signature,
                  s(:str, "void func(void)"))),
              s(:send, nil, :assert_equal,
                s(:str, "func"),
                s(:lvar, :func)),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_VOID),
                s(:lvar, :ret)),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:lvar, :args)))),
          s(:def, :test_signature_type_args,
            s(:args),
            s(:begin,
              s(:lvasgn, :types,
                s(:array,
                  s(:str, "char"),
                  s(:str, "unsigned char"),
                  s(:str, "short"),
                  s(:str, "unsigned short"),
                  s(:str, "int"),
                  s(:str, "unsigned int"),
                  s(:str, "long"),
                  s(:str, "unsigned long"),
                  s(:str, "long long"),
                  s(:str, "unsigned long long"),
                  s(:str, "float"),
                  s(:str, "double"),
                  s(:str, "const char*"),
                  s(:str, "void*"))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :func),
                  s(:lvasgn, :ret),
                  s(:lvasgn, :args)),
                s(:send, nil, :parse_signature,
                  s(:dstr,
                    s(:str, "void func("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :types), :join,
                        s(:str, ","))),
                    s(:str, ")")))),
              s(:send, nil, :assert_equal,
                s(:str, "func"),
                s(:lvar, :func)),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_VOID),
                s(:lvar, :ret)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:const, nil, :TYPE_CHAR),
                  s(:send,
                    s(:const, nil, :TYPE_CHAR), :-@),
                  s(:const, nil, :TYPE_SHORT),
                  s(:send,
                    s(:const, nil, :TYPE_SHORT), :-@),
                  s(:const, nil, :TYPE_INT),
                  s(:send,
                    s(:const, nil, :TYPE_INT), :-@),
                  s(:const, nil, :TYPE_LONG),
                  s(:send,
                    s(:const, nil, :TYPE_LONG), :-@),
                  s(:const, nil, :TYPE_LONG_LONG),
                  s(:send,
                    s(:const, nil, :TYPE_LONG_LONG), :-@),
                  s(:const, nil, :TYPE_FLOAT),
                  s(:const, nil, :TYPE_DOUBLE),
                  s(:const, nil, :TYPE_VOIDP),
                  s(:const, nil, :TYPE_VOIDP)),
                s(:lvar, :args)))),
          s(:def, :test_signature_single_variable,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :func),
                  s(:lvasgn, :ret),
                  s(:lvasgn, :args)),
                s(:send, nil, :parse_signature,
                  s(:str, "void func(int x)"))),
              s(:send, nil, :assert_equal,
                s(:str, "func"),
                s(:lvar, :func)),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_VOID),
                s(:lvar, :ret)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:const, nil, :TYPE_INT)),
                s(:lvar, :args)))),
          s(:def, :test_signature_multiple_variables,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :func),
                  s(:lvasgn, :ret),
                  s(:lvasgn, :args)),
                s(:send, nil, :parse_signature,
                  s(:str, "void func(int x, const char* s)"))),
              s(:send, nil, :assert_equal,
                s(:str, "func"),
                s(:lvar, :func)),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_VOID),
                s(:lvar, :ret)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:const, nil, :TYPE_INT),
                  s(:const, nil, :TYPE_VOIDP)),
                s(:lvar, :args)))),
          s(:def, :test_signature_array_variable,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :func),
                  s(:lvasgn, :ret),
                  s(:lvasgn, :args)),
                s(:send, nil, :parse_signature,
                  s(:str, "void func(int x[], int y[40])"))),
              s(:send, nil, :assert_equal,
                s(:str, "func"),
                s(:lvar, :func)),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_VOID),
                s(:lvar, :ret)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:const, nil, :TYPE_VOIDP),
                  s(:const, nil, :TYPE_VOIDP)),
                s(:lvar, :args)))),
          s(:def, :test_signature_function_pointer,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :func),
                  s(:lvasgn, :ret),
                  s(:lvasgn, :args)),
                s(:send, nil, :parse_signature,
                  s(:str, "int func(int (*sum)(int x, int y), int x, int y)"))),
              s(:send, nil, :assert_equal,
                s(:str, "func"),
                s(:lvar, :func)),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_INT),
                s(:lvar, :ret)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:const, nil, :TYPE_VOIDP),
                  s(:const, nil, :TYPE_INT),
                  s(:const, nil, :TYPE_INT)),
                s(:lvar, :args)))),
          s(:def, :test_signature_return_pointer,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :func),
                  s(:lvasgn, :ret),
                  s(:lvasgn, :args)),
                s(:send, nil, :parse_signature,
                  s(:str, "void* malloc(size_t)"))),
              s(:send, nil, :assert_equal,
                s(:str, "malloc"),
                s(:lvar, :func)),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_VOIDP),
                s(:lvar, :ret)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:const, nil, :TYPE_SIZE_T)),
                s(:lvar, :args)))),
          s(:def, :test_signature_return_array,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :func),
                  s(:lvasgn, :ret),
                  s(:lvasgn, :args)),
                s(:send, nil, :parse_signature,
                  s(:str, "int (*func())[32]"))),
              s(:send, nil, :assert_equal,
                s(:str, "func"),
                s(:lvar, :func)),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_VOIDP),
                s(:lvar, :ret)),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:lvar, :args)))),
          s(:def, :test_signature_return_array_with_args,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :func),
                  s(:lvasgn, :ret),
                  s(:lvasgn, :args)),
                s(:send, nil, :parse_signature,
                  s(:str, "int (*func(const char* s))[]"))),
              s(:send, nil, :assert_equal,
                s(:str, "func"),
                s(:lvar, :func)),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_VOIDP),
                s(:lvar, :ret)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:const, nil, :TYPE_VOIDP)),
                s(:lvar, :args)))),
          s(:def, :test_signature_return_function_pointer,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :func),
                  s(:lvasgn, :ret),
                  s(:lvasgn, :args)),
                s(:send, nil, :parse_signature,
                  s(:str, "int (*func())(int x, int y)"))),
              s(:send, nil, :assert_equal,
                s(:str, "func"),
                s(:lvar, :func)),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_VOIDP),
                s(:lvar, :ret)),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:lvar, :args)))),
          s(:def, :test_signature_return_function_pointer_with_args,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :func),
                  s(:lvasgn, :ret),
                  s(:lvasgn, :args)),
                s(:send, nil, :parse_signature,
                  s(:str, "int (*func(int z))(int x, int y)"))),
              s(:send, nil, :assert_equal,
                s(:str, "func"),
                s(:lvar, :func)),
              s(:send, nil, :assert_equal,
                s(:const, nil, :TYPE_VOIDP),
                s(:lvar, :ret)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:const, nil, :TYPE_INT)),
                s(:lvar, :args))))))), nil))
