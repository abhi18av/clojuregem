s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :require_relative,
          s(:str, "helper")),
        s(:send, nil, :require,
          s(:str, "fiddle/struct"))),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:defined?,
      s(:const, nil, :Fiddle)),
    s(:module,
      s(:const, nil, :Fiddle),
      s(:class,
        s(:const, nil, :TestCUnionEntity),
        s(:const, nil, :TestCase),
        s(:begin,
          s(:def, :test_class_size,
            s(:args),
            s(:begin,
              s(:lvasgn, :size,
                s(:send,
                  s(:const, nil, :CUnionEntity), :size,
                  s(:array,
                    s(:const, nil, :TYPE_DOUBLE),
                    s(:const, nil, :TYPE_CHAR)))),
              s(:send, nil, :assert_equal,
                s(:const, nil, :SIZEOF_DOUBLE),
                s(:lvar, :size)))),
          s(:def, :test_class_size_with_count,
            s(:args),
            s(:begin,
              s(:lvasgn, :size,
                s(:send,
                  s(:const, nil, :CUnionEntity), :size,
                  s(:array,
                    s(:array,
                      s(:const, nil, :TYPE_DOUBLE),
                      s(:int, 2)),
                    s(:array,
                      s(:const, nil, :TYPE_CHAR),
                      s(:int, 20))))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :SIZEOF_CHAR), :*,
                  s(:int, 20)),
                s(:lvar, :size)))),
          s(:def, :test_set_ctypes,
            s(:args),
            s(:begin,
              s(:lvasgn, :union,
                s(:send,
                  s(:const, nil, :CUnionEntity), :malloc,
                  s(:array,
                    s(:const, nil, :TYPE_INT),
                    s(:const, nil, :TYPE_LONG)))),
              s(:send,
                s(:lvar, :union), :assign_names,
                s(:array,
                  s(:str, "int"),
                  s(:str, "long"))),
              s(:send,
                s(:lvar, :union), :[]=,
                s(:str, "long"),
                s(:int, 1)),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:lvar, :union), :[],
                  s(:str, "long"))),
              s(:send,
                s(:lvar, :union), :[]=,
                s(:str, "int"),
                s(:int, 1)),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:lvar, :union), :[],
                  s(:str, "int")))))))), nil))
