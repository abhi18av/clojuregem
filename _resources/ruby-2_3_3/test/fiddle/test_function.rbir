s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require_relative,
        s(:str, "helper")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:defined?,
      s(:const, nil, :Fiddle)),
    s(:module,
      s(:const, nil, :Fiddle),
      s(:class,
        s(:const, nil, :TestFunction),
        s(:const,
          s(:const, nil, :Fiddle), :TestCase),
        s(:begin,
          s(:send, nil, :include,
            s(:const,
              s(:const,
                s(:const, nil, :Test), :Unit), :Assertions)),
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:zsuper),
              s(:send,
                s(:const, nil, :Fiddle), :last_error=,
                s(:nil)))),
          s(:def, :test_default_abi,
            s(:args),
            s(:begin,
              s(:lvasgn, :func,
                s(:send,
                  s(:const, nil, :Function), :new,
                  s(:send,
                    s(:ivar, :@libm), :[],
                    s(:str, "sin")),
                  s(:array,
                    s(:const, nil, :TYPE_DOUBLE)),
                  s(:const, nil, :TYPE_DOUBLE))),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Function), :DEFAULT),
                s(:send,
                  s(:lvar, :func), :abi)))),
          s(:def, :test_name,
            s(:args),
            s(:begin,
              s(:lvasgn, :func,
                s(:send,
                  s(:const, nil, :Function), :new,
                  s(:send,
                    s(:ivar, :@libm), :[],
                    s(:str, "sin")),
                  s(:array,
                    s(:const, nil, :TYPE_DOUBLE)),
                  s(:const, nil, :TYPE_DOUBLE),
                  s(:hash,
                    s(:pair,
                      s(:sym, :name),
                      s(:str, "sin"))))),
              s(:send, nil, :assert_equal,
                s(:str, "sin"),
                s(:send,
                  s(:lvar, :func), :name)))),
          s(:def, :test_argument_errors,
            s(:args),
            s(:begin,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :TypeError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Function), :new,
                  s(:send,
                    s(:ivar, :@libm), :[],
                    s(:str, "sin")),
                  s(:const, nil, :TYPE_DOUBLE),
                  s(:const, nil, :TYPE_DOUBLE))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :TypeError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Function), :new,
                  s(:send,
                    s(:ivar, :@libm), :[],
                    s(:str, "sin")),
                  s(:array,
                    s(:str, "foo")),
                  s(:const, nil, :TYPE_DOUBLE))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :TypeError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Function), :new,
                  s(:send,
                    s(:ivar, :@libm), :[],
                    s(:str, "sin")),
                  s(:array,
                    s(:const, nil, :TYPE_DOUBLE)),
                  s(:str, "foo"))))),
          s(:def, :test_call,
            s(:args),
            s(:begin,
              s(:lvasgn, :func,
                s(:send,
                  s(:const, nil, :Function), :new,
                  s(:send,
                    s(:ivar, :@libm), :[],
                    s(:str, "sin")),
                  s(:array,
                    s(:const, nil, :TYPE_DOUBLE)),
                  s(:const, nil, :TYPE_DOUBLE))),
              s(:send, nil, :assert_in_delta,
                s(:float, 1.0),
                s(:send,
                  s(:lvar, :func), :call,
                  s(:send,
                    s(:send,
                      s(:int, 90), :*,
                      s(:const,
                        s(:const, nil, :Math), :PI)), :/,
                    s(:int, 180))),
                s(:float, 0.0001)))),
          s(:def, :test_argument_count,
            s(:args),
            s(:begin,
              s(:lvasgn, :closure,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Class), :new,
                      s(:const, nil, :Closure)),
                    s(:args),
                    s(:def, :call,
                      s(:args,
                        s(:arg, :one)),
                      s(:send,
                        s(:int, 10), :+,
                        s(:lvar, :one)))), :new,
                  s(:const, nil, :TYPE_INT),
                  s(:array,
                    s(:const, nil, :TYPE_INT)))),
              s(:lvasgn, :func,
                s(:send,
                  s(:const, nil, :Function), :new,
                  s(:lvar, :closure),
                  s(:array,
                    s(:const, nil, :TYPE_INT)),
                  s(:const, nil, :TYPE_INT))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :ArgumentError)),
                s(:args),
                s(:send,
                  s(:lvar, :func), :call,
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :ArgumentError)),
                s(:args),
                s(:send,
                  s(:lvar, :func), :call)))),
          s(:def, :test_last_error,
            s(:args),
            s(:begin,
              s(:lvasgn, :func,
                s(:send,
                  s(:const, nil, :Function), :new,
                  s(:send,
                    s(:ivar, :@libc), :[],
                    s(:str, "strcpy")),
                  s(:array,
                    s(:const, nil, :TYPE_VOIDP),
                    s(:const, nil, :TYPE_VOIDP)),
                  s(:const, nil, :TYPE_VOIDP))),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:const, nil, :Fiddle), :last_error)),
              s(:send,
                s(:lvar, :func), :call,
                s(:str, "000"),
                s(:str, "123")),
              s(:send, nil, :refute_nil,
                s(:send,
                  s(:const, nil, :Fiddle), :last_error)))),
          s(:def, :test_strcpy,
            s(:args),
            s(:begin,
              s(:lvasgn, :f,
                s(:send,
                  s(:const, nil, :Function), :new,
                  s(:send,
                    s(:ivar, :@libc), :[],
                    s(:str, "strcpy")),
                  s(:array,
                    s(:const, nil, :TYPE_VOIDP),
                    s(:const, nil, :TYPE_VOIDP)),
                  s(:const, nil, :TYPE_VOIDP))),
              s(:lvasgn, :buff,
                s(:str, "000")),
              s(:lvasgn, :str,
                s(:send,
                  s(:lvar, :f), :call,
                  s(:lvar, :buff),
                  s(:str, "123"))),
              s(:send, nil, :assert_equal,
                s(:str, "123"),
                s(:lvar, :buff)),
              s(:send, nil, :assert_equal,
                s(:str, "123"),
                s(:send,
                  s(:lvar, :str), :to_s)))),
          s(:def, :test_nogvl_poll,
            s(:args),
            s(:begin,
              s(:kwbegin,
                s(:rescue,
                  s(:lvasgn, :poll,
                    s(:send,
                      s(:ivar, :@libc), :[],
                      s(:str, "poll"))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :Fiddle), :DLError)), nil,
                    s(:send, nil, :skip,
                      s(:str, "poll(2) not available"))), nil)),
              s(:lvasgn, :f,
                s(:send,
                  s(:const, nil, :Function), :new,
                  s(:lvar, :poll),
                  s(:array,
                    s(:const, nil, :TYPE_VOIDP),
                    s(:const, nil, :TYPE_INT),
                    s(:const, nil, :TYPE_INT)),
                  s(:const, nil, :TYPE_INT))),
              s(:lvasgn, :msec,
                s(:int, 200)),
              s(:lvasgn, :t0,
                s(:send,
                  s(:const, nil, :Process), :clock_gettime,
                  s(:const,
                    s(:const, nil, :Process), :CLOCK_MONOTONIC),
                  s(:sym, :millisecond))),
              s(:lvasgn, :th,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:send,
                    s(:lvar, :f), :call,
                    s(:nil),
                    s(:int, 0),
                    s(:lvar, :msec)))),
              s(:lvasgn, :n1,
                s(:send,
                  s(:lvar, :f), :call,
                  s(:nil),
                  s(:int, 0),
                  s(:lvar, :msec))),
              s(:lvasgn, :n2,
                s(:send,
                  s(:lvar, :th), :value)),
              s(:lvasgn, :t1,
                s(:send,
                  s(:const, nil, :Process), :clock_gettime,
                  s(:const,
                    s(:const, nil, :Process), :CLOCK_MONOTONIC),
                  s(:sym, :millisecond))),
              s(:send, nil, :assert_in_delta,
                s(:lvar, :msec),
                s(:send,
                  s(:lvar, :t1), :-,
                  s(:lvar, :t0)),
                s(:int, 100),
                s(:str, "slept correct amount of time")),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:lvar, :n1),
                s(:str, "poll(2) called correctly main-thread")),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:lvar, :n2),
                s(:str, "poll(2) called correctly in sub-thread")))),
          s(:def, :test_no_memory_leak,
            s(:args),
            s(:begin,
              s(:lvasgn, :prep,
                s(:str, "r = Fiddle::Function.new(Fiddle.dlopen(nil)[\"rb_obj_tainted\"], [Fiddle::TYPE_UINTPTR_T], Fiddle::TYPE_UINTPTR_T); a = \"a\"")),
              s(:lvasgn, :code,
                s(:str, "begin r.call(a); rescue TypeError; end")),
              s(:send, nil, :assert_no_memory_leak,
                s(:array,
                  s(:str, "-W0"),
                  s(:str, "-rfiddle")),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :prep)),
                  s(:str, "\n1000.times{"),
                  s(:begin,
                    s(:lvar, :code)),
                  s(:str, "}")),
                s(:dstr,
                  s(:str, "10_000.times {"),
                  s(:begin,
                    s(:lvar, :code)),
                  s(:str, "}")),
                s(:hash,
                  s(:pair,
                    s(:sym, :limit),
                    s(:float, 1.2))))))))), nil))
