s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require_relative,
        s(:str, "helper")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:defined?,
      s(:const, nil, :Fiddle)),
    s(:module,
      s(:const, nil, :Fiddle),
      s(:class,
        s(:const, nil, :TestFunc),
        s(:const, nil, :TestCase),
        s(:begin,
          s(:def, :test_random,
            s(:args),
            s(:begin,
              s(:lvasgn, :f,
                s(:send,
                  s(:const, nil, :Function), :new,
                  s(:send,
                    s(:ivar, :@libc), :[],
                    s(:str, "srand")),
                  s(:array,
                    s(:send,
                      s(:const, nil, :TYPE_LONG), :-@)),
                  s(:const, nil, :TYPE_VOID))),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:lvar, :f), :call,
                  s(:int, 10))))),
          s(:def, :test_syscall_with_tainted_string,
            s(:args),
            s(:begin,
              s(:lvasgn, :f,
                s(:send,
                  s(:const, nil, :Function), :new,
                  s(:send,
                    s(:ivar, :@libc), :[],
                    s(:str, "system")),
                  s(:array,
                    s(:const, nil, :TYPE_VOIDP)),
                  s(:const, nil, :TYPE_INT))),
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const, nil, :SecurityError)),
                s(:args),
                s(:send,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:begin,
                      s(:gvasgn, :$SAFE,
                        s(:int, 1)),
                      s(:send,
                        s(:lvar, :f), :call,
                        s(:send,
                          s(:str, "uname -rs"), :taint)))), :join)))),
          s(:def, :test_sinf,
            s(:args),
            s(:begin,
              s(:kwbegin,
                s(:rescue,
                  s(:lvasgn, :f,
                    s(:send,
                      s(:const, nil, :Function), :new,
                      s(:send,
                        s(:ivar, :@libm), :[],
                        s(:str, "sinf")),
                      s(:array,
                        s(:const, nil, :TYPE_FLOAT)),
                      s(:const, nil, :TYPE_FLOAT))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :Fiddle), :DLError)), nil,
                    s(:send, nil, :skip,
                      s(:str, "libm may not have sinf()"))), nil)),
              s(:send, nil, :assert_in_delta,
                s(:float, 1.0),
                s(:send,
                  s(:lvar, :f), :call,
                  s(:send,
                    s(:send,
                      s(:int, 90), :*,
                      s(:const,
                        s(:const, nil, :Math), :PI)), :/,
                    s(:int, 180))),
                s(:float, 0.0001)))),
          s(:def, :test_sin,
            s(:args),
            s(:begin,
              s(:lvasgn, :f,
                s(:send,
                  s(:const, nil, :Function), :new,
                  s(:send,
                    s(:ivar, :@libm), :[],
                    s(:str, "sin")),
                  s(:array,
                    s(:const, nil, :TYPE_DOUBLE)),
                  s(:const, nil, :TYPE_DOUBLE))),
              s(:send, nil, :assert_in_delta,
                s(:float, 1.0),
                s(:send,
                  s(:lvar, :f), :call,
                  s(:send,
                    s(:send,
                      s(:int, 90), :*,
                      s(:const,
                        s(:const, nil, :Math), :PI)), :/,
                    s(:int, 180))),
                s(:float, 0.0001)))),
          s(:def, :test_string,
            s(:args),
            s(:ensure,
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :stress),
                    s(:send,
                      s(:const, nil, :GC), :stress=)),
                  s(:array,
                    s(:send,
                      s(:const, nil, :GC), :stress),
                    s(:true))),
                s(:lvasgn, :f,
                  s(:send,
                    s(:const, nil, :Function), :new,
                    s(:send,
                      s(:ivar, :@libc), :[],
                      s(:str, "strcpy")),
                    s(:array,
                      s(:const, nil, :TYPE_VOIDP),
                      s(:const, nil, :TYPE_VOIDP)),
                    s(:const, nil, :TYPE_VOIDP))),
                s(:lvasgn, :buff,
                  s(:str, "000")),
                s(:lvasgn, :str,
                  s(:send,
                    s(:lvar, :f), :call,
                    s(:lvar, :buff),
                    s(:str, "123"))),
                s(:send, nil, :assert_equal,
                  s(:str, "123"),
                  s(:lvar, :buff)),
                s(:send, nil, :assert_equal,
                  s(:str, "123"),
                  s(:send,
                    s(:lvar, :str), :to_s))),
              s(:send,
                s(:const, nil, :GC), :stress=,
                s(:lvar, :stress)))),
          s(:def, :test_isdigit,
            s(:args),
            s(:begin,
              s(:lvasgn, :f,
                s(:send,
                  s(:const, nil, :Function), :new,
                  s(:send,
                    s(:ivar, :@libc), :[],
                    s(:str, "isdigit")),
                  s(:array,
                    s(:const, nil, :TYPE_INT)),
                  s(:const, nil, :TYPE_INT))),
              s(:lvasgn, :r1,
                s(:send,
                  s(:lvar, :f), :call,
                  s(:send,
                    s(:str, "1"), :ord))),
              s(:lvasgn, :r2,
                s(:send,
                  s(:lvar, :f), :call,
                  s(:send,
                    s(:str, "2"), :ord))),
              s(:lvasgn, :rr,
                s(:send,
                  s(:lvar, :f), :call,
                  s(:send,
                    s(:str, "r"), :ord))),
              s(:send, nil, :assert_operator,
                s(:lvar, :r1),
                s(:sym, :>),
                s(:int, 0)),
              s(:send, nil, :assert_operator,
                s(:lvar, :r2),
                s(:sym, :>),
                s(:int, 0)),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:lvar, :rr)))),
          s(:def, :test_atof,
            s(:args),
            s(:begin,
              s(:lvasgn, :f,
                s(:send,
                  s(:const, nil, :Function), :new,
                  s(:send,
                    s(:ivar, :@libc), :[],
                    s(:str, "atof")),
                  s(:array,
                    s(:const, nil, :TYPE_VOIDP)),
                  s(:const, nil, :TYPE_DOUBLE))),
              s(:lvasgn, :r,
                s(:send,
                  s(:lvar, :f), :call,
                  s(:str, "12.34"))),
              s(:send, nil, :assert_includes,
                s(:irange,
                  s(:float, 12.0),
                  s(:float, 13.0)),
                s(:lvar, :r)))),
          s(:def, :test_strtod,
            s(:args),
            s(:begin,
              s(:lvasgn, :f,
                s(:send,
                  s(:const, nil, :Function), :new,
                  s(:send,
                    s(:ivar, :@libc), :[],
                    s(:str, "strtod")),
                  s(:array,
                    s(:const, nil, :TYPE_VOIDP),
                    s(:const, nil, :TYPE_VOIDP)),
                  s(:const, nil, :TYPE_DOUBLE))),
              s(:lvasgn, :buff1,
                s(:send,
                  s(:const, nil, :Pointer), :[],
                  s(:str, "12.34"))),
              s(:lvasgn, :buff2,
                s(:send,
                  s(:lvar, :buff1), :+,
                  s(:int, 4))),
              s(:lvasgn, :r,
                s(:send,
                  s(:lvar, :f), :call,
                  s(:lvar, :buff1),
                  s(:send,
                    s(:lvar, :buff2), :-@))),
              s(:send, nil, :assert_in_delta,
                s(:float, 12.34),
                s(:lvar, :r),
                s(:float, 0.001)))),
          s(:def, :test_qsort1,
            s(:args),
            s(:begin,
              s(:lvasgn, :cb,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Class), :new,
                      s(:const, nil, :Closure)),
                    s(:args),
                    s(:def, :call,
                      s(:args,
                        s(:arg, :x),
                        s(:arg, :y)),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Pointer), :new,
                            s(:lvar, :x)), :[],
                          s(:int, 0)), :<=>,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Pointer), :new,
                            s(:lvar, :y)), :[],
                          s(:int, 0))))), :new,
                  s(:const, nil, :TYPE_INT),
                  s(:array,
                    s(:const, nil, :TYPE_VOIDP),
                    s(:const, nil, :TYPE_VOIDP)))),
              s(:lvasgn, :qsort,
                s(:send,
                  s(:const, nil, :Function), :new,
                  s(:send,
                    s(:ivar, :@libc), :[],
                    s(:str, "qsort")),
                  s(:array,
                    s(:const, nil, :TYPE_VOIDP),
                    s(:const, nil, :TYPE_SIZE_T),
                    s(:const, nil, :TYPE_SIZE_T),
                    s(:const, nil, :TYPE_VOIDP)),
                  s(:const, nil, :TYPE_VOID))),
              s(:lvasgn, :buff,
                s(:str, "9341")),
              s(:send,
                s(:lvar, :qsort), :call,
                s(:lvar, :buff),
                s(:send,
                  s(:lvar, :buff), :size),
                s(:int, 1),
                s(:lvar, :cb)),
              s(:send, nil, :assert_equal,
                s(:str, "1349"),
                s(:lvar, :buff)),
              s(:lvasgn, :bug4929,
                s(:str, "[ruby-core:37395]")),
              s(:lvasgn, :buff,
                s(:str, "9341")),
              s(:block,
                s(:send,
                  s(:const, nil, :EnvUtil), :under_gc_stress),
                s(:args),
                s(:send,
                  s(:lvar, :qsort), :call,
                  s(:lvar, :buff),
                  s(:send,
                    s(:lvar, :buff), :size),
                  s(:int, 1),
                  s(:lvar, :cb))),
              s(:send, nil, :assert_equal,
                s(:str, "1349"),
                s(:lvar, :buff),
                s(:lvar, :bug4929))))))), nil))
