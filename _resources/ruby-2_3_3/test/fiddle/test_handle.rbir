s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require_relative,
        s(:str, "helper")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:defined?,
      s(:const, nil, :Fiddle)),
    s(:module,
      s(:const, nil, :Fiddle),
      s(:class,
        s(:const, nil, :TestHandle),
        s(:const, nil, :TestCase),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :Fiddle)),
          s(:send, nil, :include,
            s(:const,
              s(:const,
                s(:const, nil, :Test), :Unit), :Assertions)),
          s(:def, :test_safe_handle_open,
            s(:args),
            s(:begin,
              s(:lvasgn, :t,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:begin,
                    s(:gvasgn, :$SAFE,
                      s(:int, 1)),
                    s(:send,
                      s(:const,
                        s(:const, nil, :Fiddle), :Handle), :new,
                      s(:send,
                        s(:const, nil, :LIBC_SO), :taint))))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :SecurityError)),
                s(:args),
                s(:send,
                  s(:lvar, :t), :value)))),
          s(:def, :test_safe_function_lookup,
            s(:args),
            s(:begin,
              s(:lvasgn, :t,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :h,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Fiddle), :Handle), :new,
                        s(:const, nil, :LIBC_SO))),
                    s(:gvasgn, :$SAFE,
                      s(:int, 1)),
                    s(:send,
                      s(:lvar, :h), :[],
                      s(:send,
                        s(:str, "qsort"), :taint))))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :SecurityError)),
                s(:args),
                s(:send,
                  s(:lvar, :t), :value)))),
          s(:def, :test_to_i,
            s(:args),
            s(:begin,
              s(:lvasgn, :handle,
                s(:send,
                  s(:const,
                    s(:const, nil, :Fiddle), :Handle), :new,
                  s(:const, nil, :LIBC_SO))),
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :Integer),
                s(:send,
                  s(:lvar, :handle), :to_i)))),
          s(:def, :test_static_sym_unknown,
            s(:args),
            s(:begin,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :DLError)),
                s(:args),
                s(:send,
                  s(:const,
                    s(:const, nil, :Fiddle), :Handle), :sym,
                  s(:str, "fooo"))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :DLError)),
                s(:args),
                s(:send,
                  s(:const,
                    s(:const, nil, :Fiddle), :Handle), :[],
                  s(:str, "fooo"))))),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "mswin|mingw"),
                s(:regopt)),
              s(:const, nil, :RUBY_PLATFORM)), nil,
            s(:def, :test_static_sym,
              s(:args),
              s(:begin,
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:send, nil, :refute_nil,
                        s(:send,
                          s(:const,
                            s(:const, nil, :Fiddle), :Handle), :sym,
                          s(:str, "dlopen"))),
                      s(:send, nil, :assert_equal,
                        s(:send,
                          s(:const,
                            s(:const, nil, :Fiddle), :Handle), :sym,
                          s(:str, "dlopen")),
                        s(:send,
                          s(:const,
                            s(:const, nil, :Fiddle), :Handle), :[],
                          s(:str, "dlopen"))),
                      s(:return)),
                    s(:resbody, nil, nil, nil), nil)),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:send, nil, :require,
                        s(:str, "-test-/dln/empty")),
                      s(:send, nil, :refute_nil,
                        s(:send,
                          s(:const,
                            s(:const, nil, :Fiddle), :Handle), :sym,
                          s(:str, "Init_empty"))),
                      s(:send, nil, :assert_equal,
                        s(:send,
                          s(:const,
                            s(:const, nil, :Fiddle), :Handle), :sym,
                          s(:str, "Init_empty")),
                        s(:send,
                          s(:const,
                            s(:const, nil, :Fiddle), :Handle), :[],
                          s(:str, "Init_empty"))),
                      s(:return)),
                    s(:resbody, nil, nil, nil), nil))))),
          s(:def, :test_sym_closed_handle,
            s(:args),
            s(:begin,
              s(:lvasgn, :handle,
                s(:send,
                  s(:const,
                    s(:const, nil, :Fiddle), :Handle), :new,
                  s(:const, nil, :LIBC_SO))),
              s(:send,
                s(:lvar, :handle), :close),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :DLError)),
                s(:args),
                s(:send,
                  s(:lvar, :handle), :sym,
                  s(:str, "calloc"))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :DLError)),
                s(:args),
                s(:send,
                  s(:lvar, :handle), :[],
                  s(:str, "calloc"))))),
          s(:def, :test_sym_unknown,
            s(:args),
            s(:begin,
              s(:lvasgn, :handle,
                s(:send,
                  s(:const,
                    s(:const, nil, :Fiddle), :Handle), :new,
                  s(:const, nil, :LIBC_SO))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :DLError)),
                s(:args),
                s(:send,
                  s(:lvar, :handle), :sym,
                  s(:str, "fooo"))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :DLError)),
                s(:args),
                s(:send,
                  s(:lvar, :handle), :[],
                  s(:str, "fooo"))))),
          s(:def, :test_sym_with_bad_args,
            s(:args),
            s(:begin,
              s(:lvasgn, :handle,
                s(:send,
                  s(:const, nil, :Handle), :new,
                  s(:const, nil, :LIBC_SO))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :TypeError)),
                s(:args),
                s(:send,
                  s(:lvar, :handle), :sym,
                  s(:nil))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :TypeError)),
                s(:args),
                s(:send,
                  s(:lvar, :handle), :[],
                  s(:nil))))),
          s(:def, :test_sym,
            s(:args),
            s(:begin,
              s(:lvasgn, :handle,
                s(:send,
                  s(:const, nil, :Handle), :new,
                  s(:const, nil, :LIBC_SO))),
              s(:send, nil, :refute_nil,
                s(:send,
                  s(:lvar, :handle), :sym,
                  s(:str, "calloc"))),
              s(:send, nil, :refute_nil,
                s(:send,
                  s(:lvar, :handle), :[],
                  s(:str, "calloc"))))),
          s(:def, :test_handle_close,
            s(:args),
            s(:begin,
              s(:lvasgn, :handle,
                s(:send,
                  s(:const, nil, :Handle), :new,
                  s(:const, nil, :LIBC_SO))),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:lvar, :handle), :close)))),
          s(:def, :test_handle_close_twice,
            s(:args),
            s(:begin,
              s(:lvasgn, :handle,
                s(:send,
                  s(:const, nil, :Handle), :new,
                  s(:const, nil, :LIBC_SO))),
              s(:send,
                s(:lvar, :handle), :close),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :DLError)),
                s(:args),
                s(:send,
                  s(:lvar, :handle), :close)))),
          s(:def, :test_dlopen_returns_handle,
            s(:args),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :Handle),
              s(:send, nil, :dlopen,
                s(:const, nil, :LIBC_SO)))),
          s(:def, :test_initialize_noargs,
            s(:args),
            s(:begin,
              s(:lvasgn, :handle,
                s(:send,
                  s(:const, nil, :Handle), :new)),
              s(:send, nil, :refute_nil,
                s(:send,
                  s(:lvar, :handle), :[],
                  s(:str, "rb_str_new"))))),
          s(:def, :test_initialize_flags,
            s(:args),
            s(:begin,
              s(:lvasgn, :handle,
                s(:send,
                  s(:const, nil, :Handle), :new,
                  s(:const, nil, :LIBC_SO),
                  s(:send,
                    s(:const, nil, :RTLD_LAZY), :|,
                    s(:const, nil, :RTLD_GLOBAL)))),
              s(:send, nil, :refute_nil,
                s(:send,
                  s(:lvar, :handle), :[],
                  s(:str, "calloc"))))),
          s(:def, :test_enable_close,
            s(:args),
            s(:begin,
              s(:lvasgn, :handle,
                s(:send,
                  s(:const, nil, :Handle), :new,
                  s(:const, nil, :LIBC_SO))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :handle), :close_enabled?), :!),
                s(:str, "close is enabled")),
              s(:send,
                s(:lvar, :handle), :enable_close),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :handle), :close_enabled?),
                s(:str, "close is not enabled")))),
          s(:def, :test_disable_close,
            s(:args),
            s(:begin,
              s(:lvasgn, :handle,
                s(:send,
                  s(:const, nil, :Handle), :new,
                  s(:const, nil, :LIBC_SO))),
              s(:send,
                s(:lvar, :handle), :enable_close),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :handle), :close_enabled?),
                s(:str, "close is enabled")),
              s(:send,
                s(:lvar, :handle), :disable_close),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :handle), :close_enabled?), :!),
                s(:str, "close is enabled")))),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "mswin|mingw"),
                s(:regopt)),
              s(:const, nil, :RUBY_PLATFORM)), nil,
            s(:def, :test_NEXT,
              s(:args),
              s(:begin,
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:lvasgn, :handle,
                        s(:const,
                          s(:const, nil, :Handle), :NEXT)),
                      s(:send, nil, :refute_nil,
                        s(:send,
                          s(:lvar, :handle), :[],
                          s(:str, "malloc"))),
                      s(:return)),
                    s(:resbody, nil, nil, nil), nil)),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:send, nil, :require,
                        s(:str, "-test-/dln/empty")),
                      s(:lvasgn, :handle,
                        s(:const,
                          s(:const, nil, :Handle), :NEXT)),
                      s(:send, nil, :refute_nil,
                        s(:send,
                          s(:lvar, :handle), :[],
                          s(:str, "Init_empty"))),
                      s(:return)),
                    s(:resbody, nil, nil, nil), nil))))),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "mswin|mingw"),
                s(:regopt)),
              s(:const, nil, :RUBY_PLATFORM)), nil,
            s(:def, :test_DEFAULT,
              s(:args),
              s(:begin,
                s(:lvasgn, :handle,
                  s(:const,
                    s(:const, nil, :Handle), :DEFAULT)),
                s(:send, nil, :refute_nil,
                  s(:send,
                    s(:lvar, :handle), :[],
                    s(:str, "malloc")))))),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "freebsd"),
                s(:regopt)),
              s(:const, nil, :RUBY_PLATFORM)),
            s(:def, :test_dlerror,
              s(:args),
              s(:begin,
                s(:send, nil, :require,
                  s(:str, "socket")),
                s(:send,
                  s(:const, nil, :Socket), :gethostbyname,
                  s(:str, "localhost")),
                s(:send,
                  s(:send,
                    s(:const, nil, :Fiddle), :dlopen,
                    s(:str, "/lib/libc.so.7")), :sym,
                  s(:str, "strcpy")))), nil),
          s(:def, :test_no_memory_leak,
            s(:args),
            s(:send, nil, :assert_no_memory_leak,
              s(:array,
                s(:str, "-W0"),
                s(:str, "-rfiddle.so")),
              s(:str, ""),
              s(:str, "100_000.times {Fiddle::Handle.allocate}; GC.start"),
              s(:hash,
                s(:pair,
                  s(:sym, :rss),
                  s(:true)))))))), nil))
