s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :join,
      s(:send,
        s(:const, nil, :File), :dirname,
        s(:str, "(string)")),
      s(:str, "setup_variant"))),
  s(:class,
    s(:const, nil, :TestJSONFixtures),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:lvasgn, :fixtures,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:str, "(string)")),
              s(:str, "fixtures/*.json"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :passed),
              s(:lvasgn, :failed)),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Dir), :[],
                  s(:lvar, :fixtures)), :partition),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:lvar, :f), :[],
                s(:str, "pass")))),
          s(:ivasgn, :@passed,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :passed), :inject,
                  s(:array)),
                s(:args,
                  s(:arg, :a),
                  s(:arg, :f)),
                s(:send,
                  s(:lvar, :a), :<<,
                  s(:array,
                    s(:lvar, :f),
                    s(:send,
                      s(:const, nil, :File), :read,
                      s(:lvar, :f))))), :sort)),
          s(:ivasgn, :@failed,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :failed), :inject,
                  s(:array)),
                s(:args,
                  s(:arg, :a),
                  s(:arg, :f)),
                s(:send,
                  s(:lvar, :a), :<<,
                  s(:array,
                    s(:lvar, :f),
                    s(:send,
                      s(:const, nil, :File), :read,
                      s(:lvar, :f))))), :sort)))),
      s(:def, :test_passing,
        s(:args),
        s(:for,
          s(:mlhs,
            s(:lvasgn, :name),
            s(:lvasgn, :source)),
          s(:ivar, :@passed),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :assert,
                s(:send,
                  s(:const, nil, :JSON), :parse,
                  s(:lvar, :source)),
                s(:dstr,
                  s(:str, "Did not pass for fixture '"),
                  s(:begin,
                    s(:lvar, :name)),
                  s(:str, "': "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :source), :inspect)))),
              s(:resbody, nil,
                s(:lvasgn, :e),
                s(:begin,
                  s(:send, nil, :warn,
                    s(:dstr,
                      s(:str, "\nCaught "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :e), :class)),
                      s(:str, "("),
                      s(:begin,
                        s(:lvar, :e)),
                      s(:str, ") for fixture '"),
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, "': "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :source), :inspect)),
                      s(:str, "\n"),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:lvar, :e), :backtrace), :*,
                          s(:str, "\n"))))),
                  s(:send, nil, :raise,
                    s(:lvar, :e)))), nil)))),
      s(:def, :test_failing,
        s(:args),
        s(:for,
          s(:mlhs,
            s(:lvasgn, :name),
            s(:lvasgn, :source)),
          s(:ivar, :@failed),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError),
              s(:const,
                s(:const, nil, :JSON), :NestingError),
              s(:dstr,
                s(:str, "Did not fail for fixture '"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "': "),
                s(:begin,
                  s(:send,
                    s(:lvar, :source), :inspect)))),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :source))))))))
