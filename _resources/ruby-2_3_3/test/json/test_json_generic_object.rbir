s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :join,
      s(:send,
        s(:const, nil, :File), :dirname,
        s(:str, "(string)")),
      s(:str, "setup_variant"))),
  s(:class,
    s(:const, nil, :TestJSONGenericObject),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :JSON)),
      s(:def, :setup,
        s(:args),
        s(:ivasgn, :@go,
          s(:send,
            s(:const, nil, :GenericObject), :[],
            s(:hash,
              s(:pair,
                s(:sym, :a),
                s(:int, 1)),
              s(:pair,
                s(:sym, :b),
                s(:int, 2)))))),
      s(:def, :test_attributes,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@go), :a)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@go), :[],
              s(:sym, :a))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@go), :b)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@go), :[],
              s(:sym, :b))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@go), :c)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@go), :[],
              s(:sym, :c))))),
      s(:def, :test_generate_json,
        s(:args),
        s(:block,
          s(:send, nil, :switch_json_creatable),
          s(:args),
          s(:send, nil, :assert_equal,
            s(:ivar, :@go),
            s(:send, nil, :JSON,
              s(:send, nil, :JSON,
                s(:ivar, :@go)),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))))),
      s(:def, :test_parse_json,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Hash),
            s(:send, nil, :JSON,
              s(:str, "{ \"json_class\": \"JSON::GenericObject\", \"a\": 1, \"b\": 2 }"),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))),
          s(:block,
            s(:send, nil, :switch_json_creatable),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:ivar, :@go),
                s(:lvasgn, :l,
                  s(:send, nil, :JSON,
                    s(:str, "{ \"json_class\": \"JSON::GenericObject\", \"a\": 1, \"b\": 2 }"),
                    s(:hash,
                      s(:pair,
                        s(:sym, :create_additions),
                        s(:true)))))),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:lvar, :l), :a)),
              s(:send, nil, :assert_equal,
                s(:ivar, :@go),
                s(:lvasgn, :l,
                  s(:send, nil, :JSON,
                    s(:str, "{ \"a\": 1, \"b\": 2 }"),
                    s(:hash,
                      s(:pair,
                        s(:sym, :object_class),
                        s(:const, nil, :GenericObject)))))),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:lvar, :l), :a)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :GenericObject), :[],
                  s(:hash,
                    s(:pair,
                      s(:sym, :a),
                      s(:send,
                        s(:const, nil, :GenericObject), :[],
                        s(:hash,
                          s(:pair,
                            s(:sym, :b),
                            s(:int, 2))))))),
                s(:lvasgn, :l,
                  s(:send, nil, :JSON,
                    s(:str, "{ \"a\": { \"b\": 2 } }"),
                    s(:hash,
                      s(:pair,
                        s(:sym, :object_class),
                        s(:const, nil, :GenericObject)))))),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:send,
                    s(:lvar, :l), :a), :b)))))),
      s(:def, :test_from_hash,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:const, nil, :GenericObject), :from_hash,
              s(:hash,
                s(:pair,
                  s(:sym, :foo),
                  s(:hash,
                    s(:pair,
                      s(:sym, :bar),
                      s(:hash,
                        s(:pair,
                          s(:sym, :baz),
                          s(:true)))),
                    s(:pair,
                      s(:sym, :quux),
                      s(:array,
                        s(:hash,
                          s(:pair,
                            s(:sym, :foobar),
                            s(:true)))))))))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :GenericObject),
            s(:send,
              s(:lvar, :result), :foo)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :GenericObject),
            s(:send,
              s(:send,
                s(:lvar, :result), :foo), :bar)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :result), :foo), :bar), :baz)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :GenericObject),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :result), :foo), :quux), :first)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :result), :foo), :quux), :first), :foobar)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:const, nil, :GenericObject), :from_hash,
              s(:true))))),
      s(:def, :test_json_generic_object_load,
        s(:args),
        s(:begin,
          s(:lvasgn, :empty,
            s(:send,
              s(:const,
                s(:const, nil, :JSON), :GenericObject), :load,
              s(:nil))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :JSON), :GenericObject),
            s(:lvar, :empty)),
          s(:lvasgn, :simple_json,
            s(:str, "{\"json_class\":\"JSON::GenericObject\",\"hello\":\"world\"}")),
          s(:lvasgn, :simple,
            s(:send,
              s(:const,
                s(:const, nil, :JSON), :GenericObject), :load,
              s(:lvar, :simple_json))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :JSON), :GenericObject),
            s(:lvar, :simple)),
          s(:send, nil, :assert_equal,
            s(:str, "world"),
            s(:send,
              s(:lvar, :simple), :hello)),
          s(:lvasgn, :converting,
            s(:send,
              s(:const,
                s(:const, nil, :JSON), :GenericObject), :load,
              s(:str, "{ \"hello\": \"world\" }"))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :JSON), :GenericObject),
            s(:lvar, :converting)),
          s(:send, nil, :assert_equal,
            s(:str, "world"),
            s(:send,
              s(:lvar, :converting), :hello)),
          s(:lvasgn, :json,
            s(:send,
              s(:const,
                s(:const, nil, :JSON), :GenericObject), :dump,
              s(:send,
                s(:const,
                  s(:const, nil, :JSON), :GenericObject), :[],
                s(:hash,
                  s(:pair,
                    s(:sym, :hello),
                    s(:str, "world")))))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :JSON,
              s(:lvar, :json)),
            s(:send, nil, :JSON,
              s(:str, "{\"json_class\":\"JSON::GenericObject\",\"hello\":\"world\"}"))))),
      s(:send, nil, :private),
      s(:def, :switch_json_creatable,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send,
              s(:const,
                s(:const, nil, :JSON), :GenericObject), :json_creatable=,
              s(:true)),
            s(:yield)),
          s(:send,
            s(:const,
              s(:const, nil, :JSON), :GenericObject), :json_creatable=,
            s(:false)))))))
