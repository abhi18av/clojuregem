s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :join,
      s(:send,
        s(:const, nil, :File), :dirname,
        s(:str, "(string)")),
      s(:str, "setup_variant"))),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:send, nil, :require,
    s(:str, "time")),
  s(:class,
    s(:const, nil, :TestJSONStringMatching),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :JSON)),
      s(:class,
        s(:const, nil, :TestTime),
        s(:const,
          s(:cbase), :Time),
        s(:begin,
          s(:defs,
            s(:self), :json_create,
            s(:args,
              s(:arg, :string)),
            s(:send,
              s(:const, nil, :Time), :parse,
              s(:lvar, :string))),
          s(:def, :to_json,
            s(:args,
              s(:restarg)),
            s(:dstr,
              s(:str, "\""),
              s(:begin,
                s(:send, nil, :strftime,
                  s(:str, "%FT%T%z"))),
              s(:str, "\""))),
          s(:def, :==,
            s(:args,
              s(:arg, :other)),
            s(:send,
              s(:send, nil, :to_i), :==,
              s(:send,
                s(:lvar, :other), :to_i))))),
      s(:def, :test_match_date,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send,
              s(:const, nil, :TestTime), :new)),
          s(:lvasgn, :t_json,
            s(:send,
              s(:array,
                s(:lvar, :t)), :to_json)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :t)),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :t_json),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true)),
                s(:pair,
                  s(:sym, :match_string),
                  s(:hash,
                    s(:pair,
                      s(:regexp,
                        s(:str, "\\A\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[+-]\\d{4}\\z"),
                        s(:regopt)),
                      s(:const, nil, :TestTime))))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:lvar, :t), :strftime,
                s(:str, "%FT%T%z"))),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :t_json),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true)),
                s(:pair,
                  s(:sym, :match_string),
                  s(:hash,
                    s(:pair,
                      s(:regexp,
                        s(:str, "\\A\\d{3}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[+-]\\d{4}\\z"),
                        s(:regopt)),
                      s(:const, nil, :TestTime))))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:lvar, :t), :strftime,
                s(:str, "%FT%T%z"))),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :t_json),
              s(:hash,
                s(:pair,
                  s(:sym, :match_string),
                  s(:hash,
                    s(:pair,
                      s(:regexp,
                        s(:str, "\\A\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[+-]\\d{4}\\z"),
                        s(:regopt)),
                      s(:const, nil, :TestTime))))))))))))
