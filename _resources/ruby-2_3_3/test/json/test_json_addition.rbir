s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :join,
      s(:send,
        s(:const, nil, :File), :dirname,
        s(:str, "(string)")),
      s(:str, "setup_variant"))),
  s(:send, nil, :require,
    s(:str, "json/add/core")),
  s(:send, nil, :require,
    s(:str, "json/add/complex")),
  s(:send, nil, :require,
    s(:str, "json/add/rational")),
  s(:send, nil, :require,
    s(:str, "json/add/bigdecimal")),
  s(:send, nil, :require,
    s(:str, "json/add/ostruct")),
  s(:send, nil, :require,
    s(:str, "date")),
  s(:class,
    s(:const, nil, :TestJSONAddition),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :JSON)),
      s(:class,
        s(:const, nil, :A), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :a)),
            s(:ivasgn, :@a,
              s(:lvar, :a))),
          s(:send, nil, :attr_reader,
            s(:sym, :a)),
          s(:def, :==,
            s(:args,
              s(:arg, :other)),
            s(:send,
              s(:send, nil, :a), :==,
              s(:send,
                s(:lvar, :other), :a))),
          s(:defs,
            s(:self), :json_create,
            s(:args,
              s(:arg, :object)),
            s(:send, nil, :new,
              s(:splat,
                s(:send,
                  s(:lvar, :object), :[],
                  s(:str, "args"))))),
          s(:def, :to_json,
            s(:args,
              s(:restarg, :args)),
            s(:send,
              s(:hash,
                s(:pair,
                  s(:str, "json_class"),
                  s(:send,
                    s(:send,
                      s(:self), :class), :name)),
                s(:pair,
                  s(:str, "args"),
                  s(:array,
                    s(:ivar, :@a)))), :to_json,
              s(:splat,
                s(:lvar, :args)))))),
      s(:class,
        s(:const, nil, :A2),
        s(:const, nil, :A),
        s(:def, :to_json,
          s(:args,
            s(:restarg, :args)),
          s(:send,
            s(:hash,
              s(:pair,
                s(:str, "json_class"),
                s(:send,
                  s(:send,
                    s(:self), :class), :name)),
              s(:pair,
                s(:str, "args"),
                s(:array,
                  s(:ivar, :@a)))), :to_json,
            s(:splat,
              s(:lvar, :args))))),
      s(:class,
        s(:const, nil, :B), nil,
        s(:begin,
          s(:defs,
            s(:self), :json_creatable?,
            s(:args),
            s(:false)),
          s(:def, :to_json,
            s(:args,
              s(:restarg, :args)),
            s(:send,
              s(:hash,
                s(:pair,
                  s(:str, "json_class"),
                  s(:send,
                    s(:send,
                      s(:self), :class), :name))), :to_json,
              s(:splat,
                s(:lvar, :args)))))),
      s(:class,
        s(:const, nil, :C), nil,
        s(:begin,
          s(:defs,
            s(:self), :json_creatable?,
            s(:args),
            s(:false)),
          s(:def, :to_json,
            s(:args,
              s(:restarg, :args)),
            s(:send,
              s(:hash,
                s(:pair,
                  s(:str, "json_class"),
                  s(:str, "TestJSONAddition::Nix"))), :to_json,
              s(:splat,
                s(:lvar, :args)))))),
      s(:def, :test_extended_json,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :A), :new,
              s(:int, 666))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :A), :json_creatable?)),
          s(:lvasgn, :json,
            s(:send, nil, :generate,
              s(:lvar, :a))),
          s(:lvasgn, :a_again,
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :json),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))),
          s(:send, nil, :assert_kind_of,
            s(:send,
              s(:lvar, :a), :class),
            s(:lvar, :a_again)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a),
            s(:lvar, :a_again)))),
      s(:def, :test_extended_json_default,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :A), :new,
              s(:int, 666))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :A), :json_creatable?)),
          s(:lvasgn, :json,
            s(:send, nil, :generate,
              s(:lvar, :a))),
          s(:lvasgn, :a_hash,
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :json))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Hash),
            s(:lvar, :a_hash)))),
      s(:def, :test_extended_json_disabled,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :A), :new,
              s(:int, 666))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :A), :json_creatable?)),
          s(:lvasgn, :json,
            s(:send, nil, :generate,
              s(:lvar, :a))),
          s(:lvasgn, :a_again,
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :json),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))),
          s(:send, nil, :assert_kind_of,
            s(:send,
              s(:lvar, :a), :class),
            s(:lvar, :a_again)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a),
            s(:lvar, :a_again)),
          s(:lvasgn, :a_hash,
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :json),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:false))))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Hash),
            s(:lvar, :a_hash)),
          s(:send, nil, :assert_equal,
            s(:block,
              s(:send,
                s(:hash,
                  s(:pair,
                    s(:str, "args"),
                    s(:array,
                      s(:int, 666))),
                  s(:pair,
                    s(:str, "json_class"),
                    s(:str, "TestJSONAddition::A"))), :sort_by),
              s(:args,
                s(:arg, :k)),
              s(:lvar, :k)),
            s(:block,
              s(:send,
                s(:lvar, :a_hash), :sort_by),
              s(:args,
                s(:arg, :k)),
              s(:lvar, :k))))),
      s(:def, :test_extended_json_fail1,
        s(:args),
        s(:begin,
          s(:lvasgn, :b,
            s(:send,
              s(:const, nil, :B), :new)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :B), :json_creatable?), :!)),
          s(:lvasgn, :json,
            s(:send, nil, :generate,
              s(:lvar, :b))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "json_class"),
                s(:str, "TestJSONAddition::B"))),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :json))))),
      s(:def, :test_extended_json_fail2,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :C), :new)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :C), :json_creatable?), :!)),
          s(:lvasgn, :json,
            s(:send, nil, :generate,
              s(:lvar, :c))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError),
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :json),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))))),
      s(:def, :test_raw_strings,
        s(:args),
        s(:begin,
          s(:lvasgn, :raw,
            s(:str, "")),
          s(:and,
            s(:send,
              s(:lvar, :raw), :respond_to?,
              s(:sym, :encode!)),
            s(:send,
              s(:lvar, :raw), :encode!,
              s(:const,
                s(:const, nil, :Encoding), :ASCII_8BIT))),
          s(:lvasgn, :raw_array,
            s(:array)),
          s(:for,
            s(:lvasgn, :i),
            s(:irange,
              s(:int, 0),
              s(:int, 255)),
            s(:begin,
              s(:send,
                s(:lvar, :raw), :<<,
                s(:lvar, :i)),
              s(:send,
                s(:lvar, :raw_array), :<<,
                s(:lvar, :i)))),
          s(:lvasgn, :json,
            s(:send,
              s(:lvar, :raw), :to_json_raw)),
          s(:lvasgn, :json_raw_object,
            s(:send,
              s(:lvar, :raw), :to_json_raw_object)),
          s(:lvasgn, :hash,
            s(:hash,
              s(:pair,
                s(:str, "json_class"),
                s(:str, "String")),
              s(:pair,
                s(:str, "raw"),
                s(:lvar, :raw_array)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :hash),
            s(:lvar, :json_raw_object)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A\\{.*\\}\\z"),
              s(:regopt)),
            s(:lvar, :json)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\"json_class\":\"String\""),
              s(:regopt)),
            s(:lvar, :json)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\"raw\":\\[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255\\]"),
              s(:regopt)),
            s(:lvar, :json)),
          s(:lvasgn, :raw_again,
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :json),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :raw),
            s(:lvar, :raw_again)))),
      s(:casgn, nil, :MyJsonStruct,
        s(:send,
          s(:const, nil, :Struct), :new,
          s(:str, "MyJsonStruct"),
          s(:sym, :foo),
          s(:sym, :bar))),
      s(:def, :test_core,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:send, nil, :assert_equal,
            s(:lvar, :t),
            s(:send, nil, :JSON,
              s(:send, nil, :JSON,
                s(:lvar, :t)),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))),
          s(:lvasgn, :d,
            s(:send,
              s(:const, nil, :Date), :today)),
          s(:send, nil, :assert_equal,
            s(:lvar, :d),
            s(:send, nil, :JSON,
              s(:send, nil, :JSON,
                s(:lvar, :d)),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))),
          s(:lvasgn, :d,
            s(:send,
              s(:const, nil, :DateTime), :civil,
              s(:int, 2007),
              s(:int, 6),
              s(:int, 14),
              s(:int, 14),
              s(:int, 57),
              s(:int, 10),
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 12)),
              s(:int, 2299161))),
          s(:send, nil, :assert_equal,
            s(:lvar, :d),
            s(:send, nil, :JSON,
              s(:send, nil, :JSON,
                s(:lvar, :d)),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))),
          s(:send, nil, :assert_equal,
            s(:irange,
              s(:int, 1),
              s(:int, 10)),
            s(:send, nil, :JSON,
              s(:send, nil, :JSON,
                s(:irange,
                  s(:int, 1),
                  s(:int, 10))),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))),
          s(:send, nil, :assert_equal,
            s(:erange,
              s(:int, 1),
              s(:int, 10)),
            s(:send, nil, :JSON,
              s(:send, nil, :JSON,
                s(:erange,
                  s(:int, 1),
                  s(:int, 10))),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))),
          s(:send, nil, :assert_equal,
            s(:irange,
              s(:str, "a"),
              s(:str, "c")),
            s(:send, nil, :JSON,
              s(:send, nil, :JSON,
                s(:irange,
                  s(:str, "a"),
                  s(:str, "c"))),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))),
          s(:send, nil, :assert_equal,
            s(:erange,
              s(:str, "a"),
              s(:str, "c")),
            s(:send, nil, :JSON,
              s(:send, nil, :JSON,
                s(:erange,
                  s(:str, "a"),
                  s(:str, "c"))),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))),
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :MyJsonStruct), :new,
              s(:int, 4711),
              s(:str, "foot"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :s),
            s(:send, nil, :JSON,
              s(:send, nil, :JSON,
                s(:lvar, :s)),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))),
          s(:lvasgn, :struct,
            s(:send,
              s(:const, nil, :Struct), :new,
              s(:sym, :foo),
              s(:sym, :bar))),
          s(:lvasgn, :s,
            s(:send,
              s(:lvar, :struct), :new,
              s(:int, 4711),
              s(:str, "foot"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :JSONError)),
            s(:args),
            s(:send, nil, :JSON,
              s(:lvar, :s))),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :raise,
                s(:const, nil, :TypeError),
                s(:str, "test me")),
              s(:resbody,
                s(:array,
                  s(:const, nil, :TypeError)),
                s(:lvasgn, :e),
                s(:begin,
                  s(:lvasgn, :e_json,
                    s(:send,
                      s(:const, nil, :JSON), :generate,
                      s(:lvar, :e))),
                  s(:lvasgn, :e_again,
                    s(:send, nil, :JSON,
                      s(:lvar, :e_json),
                      s(:hash,
                        s(:pair,
                          s(:sym, :create_additions),
                          s(:true))))),
                  s(:send, nil, :assert_kind_of,
                    s(:const, nil, :TypeError),
                    s(:lvar, :e_again)),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:lvar, :e), :message),
                    s(:send,
                      s(:lvar, :e_again), :message)),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:lvar, :e), :backtrace),
                    s(:send,
                      s(:lvar, :e_again), :backtrace)))), nil)),
          s(:send, nil, :assert_equal,
            s(:regexp,
              s(:str, "foo"),
              s(:regopt)),
            s(:send, nil, :JSON,
              s(:send, nil, :JSON,
                s(:regexp,
                  s(:str, "foo"),
                  s(:regopt))),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))),
          s(:send, nil, :assert_equal,
            s(:regexp,
              s(:str, "foo"),
              s(:regopt, :i)),
            s(:send, nil, :JSON,
              s(:send, nil, :JSON,
                s(:regexp,
                  s(:str, "foo"),
                  s(:regopt, :i))),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))))),
      s(:def, :test_utc_datetime,
        s(:args),
        s(:begin,
          s(:lvasgn, :now,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:lvasgn, :d,
            s(:send,
              s(:const, nil, :DateTime), :parse,
              s(:send,
                s(:lvar, :now), :to_s),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :d),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:send,
                s(:lvar, :d), :to_json),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))),
          s(:lvasgn, :d,
            s(:send,
              s(:const, nil, :DateTime), :parse,
              s(:send,
                s(:send,
                  s(:lvar, :now), :utc), :to_s))),
          s(:send, nil, :assert_equal,
            s(:lvar, :d),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:send,
                s(:lvar, :d), :to_json),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))),
          s(:lvasgn, :d,
            s(:send,
              s(:const, nil, :DateTime), :civil,
              s(:int, 2008),
              s(:int, 6),
              s(:int, 17),
              s(:int, 11),
              s(:int, 48),
              s(:int, 32),
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 24)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :d),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:send,
                s(:lvar, :d), :to_json),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))),
          s(:lvasgn, :d,
            s(:send,
              s(:const, nil, :DateTime), :civil,
              s(:int, 2008),
              s(:int, 6),
              s(:int, 17),
              s(:int, 11),
              s(:int, 48),
              s(:int, 32),
              s(:send, nil, :Rational,
                s(:int, 12),
                s(:int, 24)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :d),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:send,
                s(:lvar, :d), :to_json),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))))),
      s(:def, :test_rational_complex,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 2),
              s(:int, 9)),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:send, nil, :JSON,
                s(:send, nil, :Rational,
                  s(:int, 2),
                  s(:int, 9))),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 2),
              s(:int, 9)),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:send, nil, :JSON,
                s(:send, nil, :Complex,
                  s(:int, 2),
                  s(:int, 9))),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))))),
      s(:def, :test_bigdecimal,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "3.141"),
              s(:int, 23)),
            s(:send, nil, :JSON,
              s(:send, nil, :JSON,
                s(:send, nil, :BigDecimal,
                  s(:str, "3.141"),
                  s(:int, 23))),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "3.141"),
              s(:int, 666)),
            s(:send, nil, :JSON,
              s(:send, nil, :JSON,
                s(:send, nil, :BigDecimal,
                  s(:str, "3.141"),
                  s(:int, 666))),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))))),
      s(:def, :test_ostruct,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :OpenStruct), :new)),
          s(:send,
            s(:lvar, :o), :foo=,
            s(:hash,
              s(:pair,
                s(:str, "bar"),
                s(:true)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :o),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:send, nil, :JSON,
                s(:lvar, :o)),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))))))))
