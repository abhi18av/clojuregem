s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :join,
      s(:send,
        s(:const, nil, :File), :dirname,
        s(:str, "(string)")),
      s(:str, "setup_variant"))),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:send, nil, :require,
    s(:str, "ostruct")),
  s(:if,
    s(:send,
      s(:const, nil, :Array), :method_defined?,
      s(:sym, :permutation)), nil,
    s(:kwbegin,
      s(:rescue,
        s(:begin,
          s(:send, nil, :require,
            s(:str, "enumerator")),
          s(:send, nil, :require,
            s(:str, "permutation")),
          s(:class,
            s(:const, nil, :Array), nil,
            s(:def, :permutation,
              s(:args),
              s(:block,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Permutation), :for,
                      s(:self)), :to_enum), :map),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :x), :project))))),
        s(:resbody,
          s(:array,
            s(:const, nil, :LoadError)), nil,
          s(:send, nil, :warn,
            s(:str, "Skipping permutation tests."))), nil))),
  s(:class,
    s(:const, nil, :TestJSON),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :JSON)),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@ary,
            s(:block,
              s(:send,
                s(:array,
                  s(:int, 1),
                  s(:str, "foo"),
                  s(:float, 3.14),
                  s(:float, 4711.0),
                  s(:float, 2.718),
                  s(:nil),
                  s(:array,
                    s(:int, 1),
                    s(:int, -2),
                    s(:int, 3)),
                  s(:false),
                  s(:true)), :map),
              s(:args,
                s(:arg, :x)),
              s(:array,
                s(:lvar, :x)))),
          s(:ivasgn, :@ary_to_parse,
            s(:block,
              s(:send,
                s(:array,
                  s(:str, "1"),
                  s(:str, "\"foo\""),
                  s(:str, "3.14"),
                  s(:str, "4711.0"),
                  s(:str, "2.718"),
                  s(:str, "null"),
                  s(:str, "[1,-2,3]"),
                  s(:str, "false"),
                  s(:str, "true")), :map),
              s(:args,
                s(:arg, :x)),
              s(:dstr,
                s(:str, "["),
                s(:begin,
                  s(:lvar, :x)),
                s(:str, "]")))),
          s(:ivasgn, :@hash,
            s(:hash,
              s(:pair,
                s(:str, "a"),
                s(:int, 2)),
              s(:pair,
                s(:str, "b"),
                s(:float, 3.141)),
              s(:pair,
                s(:str, "c"),
                s(:str, "c")),
              s(:pair,
                s(:str, "d"),
                s(:array,
                  s(:int, 1),
                  s(:str, "b"),
                  s(:float, 3.14))),
              s(:pair,
                s(:str, "e"),
                s(:hash,
                  s(:pair,
                    s(:str, "foo"),
                    s(:str, "bar")))),
              s(:pair,
                s(:str, "g"),
                s(:str, "\"\u0000\u001F")),
              s(:pair,
                s(:str, "h"),
                s(:float, 1000.0)),
              s(:pair,
                s(:str, "i"),
                s(:float, 0.001)))),
          s(:ivasgn, :@json,
            s(:dstr,
              s(:str, "{\"a\":2,\"b\":3.141,\"c\":\"c\",\"d\":[1,\"b\",3.14],\"e\":{\"foo\":\"bar\"},"),
              s(:str, "\"g\":\"\\\"\\u0000\\u001f\",\"h\":1.0E3,\"i\":1.0E-3}"))))),
      s(:def, :test_construction,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const, nil, :JSON), :Parser), :new,
              s(:str, "test"))),
          s(:send, nil, :assert_equal,
            s(:str, "test"),
            s(:send,
              s(:lvar, :parser), :source)))),
      s(:def, :assert_equal_float,
        s(:args,
          s(:arg, :expected),
          s(:arg, :is)),
        s(:send, nil, :assert_in_delta,
          s(:send,
            s(:lvar, :expected), :first),
          s(:send,
            s(:lvar, :is), :first),
          s(:float, 0.01))),
      s(:def, :test_parse_simple_arrays,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send, nil, :parse,
              s(:str, "[]"))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send, nil, :parse,
              s(:str, "  [  ] "))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:nil)),
            s(:send, nil, :parse,
              s(:str, "[null]"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:false)),
            s(:send, nil, :parse,
              s(:str, "[false]"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:true)),
            s(:send, nil, :parse,
              s(:str, "[true]"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, -23)),
            s(:send, nil, :parse,
              s(:str, "[-23]"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 23)),
            s(:send, nil, :parse,
              s(:str, "[23]"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:float, 0.23)),
            s(:send, nil, :parse,
              s(:str, "[0.23]"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:float, 0.0)),
            s(:send, nil, :parse,
              s(:str, "[0e0]"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send, nil, :parse,
              s(:str, "[+23.2]"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send, nil, :parse,
              s(:str, "[+23]"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send, nil, :parse,
              s(:str, "[.23]"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send, nil, :parse,
              s(:str, "[023]"))),
          s(:send, nil, :assert_equal_float,
            s(:array,
              s(:float, 3.141)),
            s(:send, nil, :parse,
              s(:str, "[3.141]"))),
          s(:send, nil, :assert_equal_float,
            s(:array,
              s(:float, -3.141)),
            s(:send, nil, :parse,
              s(:str, "[-3.141]"))),
          s(:send, nil, :assert_equal_float,
            s(:array,
              s(:float, 3.141)),
            s(:send, nil, :parse,
              s(:str, "[3141e-3]"))),
          s(:send, nil, :assert_equal_float,
            s(:array,
              s(:float, 3.141)),
            s(:send, nil, :parse,
              s(:str, "[3141.1e-3]"))),
          s(:send, nil, :assert_equal_float,
            s(:array,
              s(:float, 3.141)),
            s(:send, nil, :parse,
              s(:str, "[3141E-3]"))),
          s(:send, nil, :assert_equal_float,
            s(:array,
              s(:float, 3.141)),
            s(:send, nil, :parse,
              s(:str, "[3141.0E-3]"))),
          s(:send, nil, :assert_equal_float,
            s(:array,
              s(:float, -3.141)),
            s(:send, nil, :parse,
              s(:str, "[-3141.0e-3]"))),
          s(:send, nil, :assert_equal_float,
            s(:array,
              s(:float, -3.141)),
            s(:send, nil, :parse,
              s(:str, "[-3141e-3]"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ParserError)),
            s(:args),
            s(:send, nil, :parse,
              s(:str, "[NaN]"))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:send, nil, :parse,
                  s(:str, "[NaN]"),
                  s(:hash,
                    s(:pair,
                      s(:sym, :allow_nan),
                      s(:true)))), :first), :nan?)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ParserError)),
            s(:args),
            s(:send, nil, :parse,
              s(:str, "[Infinity]"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:float, 1.0), :/,
                s(:int, 0))),
            s(:send, nil, :parse,
              s(:str, "[Infinity]"),
              s(:hash,
                s(:pair,
                  s(:sym, :allow_nan),
                  s(:true))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ParserError)),
            s(:args),
            s(:send, nil, :parse,
              s(:str, "[-Infinity]"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:float, -1.0), :/,
                s(:int, 0))),
            s(:send, nil, :parse,
              s(:str, "[-Infinity]"),
              s(:hash,
                s(:pair,
                  s(:sym, :allow_nan),
                  s(:true))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send, nil, :parse,
              s(:str, "[\"\"]"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "foobar")),
            s(:send, nil, :parse,
              s(:str, "[\"foobar\"]"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:hash)),
            s(:send, nil, :parse,
              s(:str, "[{}]"))))),
      s(:def, :test_parse_simple_objects,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:send, nil, :parse,
              s(:str, "{}"))),
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:send, nil, :parse,
              s(:str, " {   }   "))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "a"),
                s(:nil))),
            s(:send, nil, :parse,
              s(:str, "{   \"a\"   :  null}"))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "a"),
                s(:nil))),
            s(:send, nil, :parse,
              s(:str, "{\"a\":null}"))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "a"),
                s(:false))),
            s(:send, nil, :parse,
              s(:str, "{   \"a\"  :  false  }  "))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "a"),
                s(:false))),
            s(:send, nil, :parse,
              s(:str, "{\"a\":false}"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send, nil, :parse,
              s(:str, "{false}"))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "a"),
                s(:true))),
            s(:send, nil, :parse,
              s(:str, "{\"a\":true}"))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "a"),
                s(:true))),
            s(:send, nil, :parse,
              s(:str, "  { \"a\" :  true  }   "))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "a"),
                s(:int, -23))),
            s(:send, nil, :parse,
              s(:str, "  {  \"a\"  :  -23  }  "))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "a"),
                s(:int, -23))),
            s(:send, nil, :parse,
              s(:str, "  { \"a\" : -23 } "))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "a"),
                s(:int, 23))),
            s(:send, nil, :parse,
              s(:str, "{\"a\":23  } "))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "a"),
                s(:int, 23))),
            s(:send, nil, :parse,
              s(:str, "  { \"a\"  : 23  } "))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "a"),
                s(:float, 0.23))),
            s(:send, nil, :parse,
              s(:str, " { \"a\"  :  0.23 }  "))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "a"),
                s(:float, 0.23))),
            s(:send, nil, :parse,
              s(:str, "  {  \"a\"  :  0.23  }  "))))),
      s(:def, :test_parse_json_primitive_values,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, ""))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, ""),
              s(:hash,
                s(:pair,
                  s(:sym, :quirks_mode),
                  s(:true))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :JSON), :Parser), :new,
                s(:nil)), :parse)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :JSON), :Parser), :new,
                s(:nil),
                s(:hash,
                  s(:pair,
                    s(:sym, :quirks_mode),
                    s(:true)))), :parse)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:nil))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:nil),
              s(:hash,
                s(:pair,
                  s(:sym, :quirks_mode),
                  s(:true))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "  /* foo */ "))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "  /* foo */ "),
              s(:hash,
                s(:pair,
                  s(:sym, :quirks_mode),
                  s(:true))))),
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const, nil, :JSON), :Parser), :new,
              s(:str, "null"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :parser), :quirks_mode?)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send,
              s(:lvar, :parser), :parse)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "null"))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "null"),
              s(:hash,
                s(:pair,
                  s(:sym, :quirks_mode),
                  s(:true))))),
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const, nil, :JSON), :Parser), :new,
              s(:str, "null"),
              s(:hash,
                s(:pair,
                  s(:sym, :quirks_mode),
                  s(:true))))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :parser), :quirks_mode?)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :parser), :parse)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "false"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "false"),
              s(:hash,
                s(:pair,
                  s(:sym, :quirks_mode),
                  s(:true))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "true"))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "true"),
              s(:hash,
                s(:pair,
                  s(:sym, :quirks_mode),
                  s(:true))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "23"))),
          s(:send, nil, :assert_equal,
            s(:int, 23),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "23"),
              s(:hash,
                s(:pair,
                  s(:sym, :quirks_mode),
                  s(:true))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "1"))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:sym, :quirks_mode),
                  s(:true))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "3.141"))),
          s(:send, nil, :assert_in_delta,
            s(:float, 3.141),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "3.141"),
              s(:hash,
                s(:pair,
                  s(:sym, :quirks_mode),
                  s(:true)))),
            s(:float, 0.001)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "18446744073709551616"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 2), :**,
              s(:int, 64)),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "18446744073709551616"),
              s(:hash,
                s(:pair,
                  s(:sym, :quirks_mode),
                  s(:true))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "\"foo\""))),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "\"foo\""),
              s(:hash,
                s(:pair,
                  s(:sym, :quirks_mode),
                  s(:true))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "NaN"),
              s(:hash,
                s(:pair,
                  s(:sym, :allow_nan),
                  s(:true))))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :JSON), :parse,
                s(:str, "NaN"),
                s(:hash,
                  s(:pair,
                    s(:sym, :quirks_mode),
                    s(:true)),
                  s(:pair,
                    s(:sym, :allow_nan),
                    s(:true)))), :nan?)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "Infinity"),
              s(:hash,
                s(:pair,
                  s(:sym, :allow_nan),
                  s(:true))))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :JSON), :parse,
                s(:str, "Infinity"),
                s(:hash,
                  s(:pair,
                    s(:sym, :quirks_mode),
                    s(:true)),
                  s(:pair,
                    s(:sym, :allow_nan),
                    s(:true)))), :infinite?)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "-Infinity"),
              s(:hash,
                s(:pair,
                  s(:sym, :allow_nan),
                  s(:true))))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :JSON), :parse,
                s(:str, "-Infinity"),
                s(:hash,
                  s(:pair,
                    s(:sym, :quirks_mode),
                    s(:true)),
                  s(:pair,
                    s(:sym, :allow_nan),
                    s(:true)))), :infinite?)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "[ 1, ]"),
              s(:hash,
                s(:pair,
                  s(:sym, :quirks_mode),
                  s(:true))))))),
      s(:if,
        s(:send,
          s(:const, nil, :Array), :method_defined?,
          s(:sym, :permutation)),
        s(:begin,
          s(:def, :test_parse_more_complex_arrays,
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:array,
                  s(:nil),
                  s(:false),
                  s(:true),
                  s(:str, "foßbar"),
                  s(:array,
                    s(:str, "n€st€d"),
                    s(:true)),
                  s(:hash,
                    s(:pair,
                      s(:str, "nested"),
                      s(:true)),
                    s(:pair,
                      s(:str, "n€ßt€ð2"),
                      s(:hash))))),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :permutation), :each),
                s(:args,
                  s(:arg, :perm)),
                s(:begin,
                  s(:lvasgn, :json,
                    s(:send, nil, :pretty_generate,
                      s(:lvar, :perm))),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :perm),
                    s(:send, nil, :parse,
                      s(:lvar, :json))))))),
          s(:def, :test_parse_complex_objects,
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:array,
                  s(:nil),
                  s(:false),
                  s(:true),
                  s(:str, "foßbar"),
                  s(:array,
                    s(:str, "n€st€d"),
                    s(:true)),
                  s(:hash,
                    s(:pair,
                      s(:str, "nested"),
                      s(:true)),
                    s(:pair,
                      s(:str, "n€ßt€ð2"),
                      s(:hash))))),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :permutation), :each),
                s(:args,
                  s(:arg, :perm)),
                s(:begin,
                  s(:lvasgn, :s,
                    s(:str, "a")),
                  s(:lvasgn, :orig_obj,
                    s(:block,
                      s(:send,
                        s(:lvar, :perm), :inject,
                        s(:hash)),
                      s(:args,
                        s(:arg, :h),
                        s(:arg, :x)),
                      s(:begin,
                        s(:send,
                          s(:lvar, :h), :[]=,
                          s(:send,
                            s(:lvar, :s), :dup),
                          s(:lvar, :x)),
                        s(:lvasgn, :s,
                          s(:send,
                            s(:lvar, :s), :succ)),
                        s(:lvar, :h)))),
                  s(:lvasgn, :json,
                    s(:send, nil, :pretty_generate,
                      s(:lvar, :orig_obj))),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :orig_obj),
                    s(:send, nil, :parse,
                      s(:lvar, :json)))))))), nil),
      s(:def, :test_parse_arrays,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:send, nil, :parse,
              s(:str, "[1,2,3]"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:float, 1.2),
              s(:int, 2),
              s(:int, 3)),
            s(:send, nil, :parse,
              s(:str, "[1.2,2,3]"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array),
              s(:array,
                s(:array),
                s(:array))),
            s(:send, nil, :parse,
              s(:str, "[[],[[],[]]]"))))),
      s(:def, :test_parse_values,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send, nil, :parse,
              s(:str, "[\"\"]"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "\\")),
            s(:send, nil, :parse,
              s(:str, "[\"\\\\\"]"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "\"")),
            s(:send, nil, :parse,
              s(:str, "[\"\\\"\"]"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "\\\"\\")),
            s(:send, nil, :parse,
              s(:str, "[\"\\\\\\\"\\\\\"]"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "\"\b\n\r\t\u0000\u001F")),
            s(:send, nil, :parse,
              s(:str, "[\"\\\"\\b\\n\\r\\t\\u0000\\u001f\"]"))),
          s(:for,
            s(:lvasgn, :i),
            s(:erange,
              s(:int, 0),
              s(:send,
                s(:ivar, :@ary), :size)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@ary), :[],
                s(:lvar, :i)),
              s(:send, nil, :parse,
                s(:send,
                  s(:ivar, :@ary_to_parse), :[],
                  s(:lvar, :i))))))),
      s(:def, :test_parse_array,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send, nil, :parse,
              s(:str, "[]"))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send, nil, :parse,
              s(:str, "  [  ]  "))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send, nil, :parse,
              s(:str, "[1]"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send, nil, :parse,
              s(:str, "  [ 1  ]  "))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@ary),
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "[[1],[\"foo\"],[3.14],[47.11e+2],[2718.0E-3],[null],[[1,-2,3]]"),
                s(:str, ",[false],[true]]")))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@ary),
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "   [   [1] , [\"foo\"]  ,  [3.14] \t ,  [47.11e+2] \n"),
                s(:str, "      , [2718.0E-3 ],\r[ null] , [[1, -2, 3 ]], [false ],[ true]\n ]  ")))))),
      s(:class,
        s(:const, nil, :SubArray),
        s(:const, nil, :Array),
        s(:begin,
          s(:def, :<<,
            s(:args,
              s(:arg, :v)),
            s(:begin,
              s(:ivasgn, :@shifted,
                s(:true)),
              s(:zsuper))),
          s(:def, :shifted?,
            s(:args),
            s(:ivar, :@shifted)))),
      s(:class,
        s(:const, nil, :SubArray2),
        s(:const, nil, :Array),
        s(:begin,
          s(:def, :to_json,
            s(:args,
              s(:restarg, :a)),
            s(:send,
              s(:hash,
                s(:pair,
                  s(:send,
                    s(:const, nil, :JSON), :create_id),
                  s(:send,
                    s(:send,
                      s(:self), :class), :name)),
                s(:pair,
                  s(:str, "ary"),
                  s(:send, nil, :to_a))), :to_json,
              s(:splat,
                s(:lvar, :a)))),
          s(:defs,
            s(:self), :json_create,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:send,
                s(:lvar, :o), :delete,
                s(:send,
                  s(:const, nil, :JSON), :create_id)),
              s(:send,
                s(:lvar, :o), :[],
                s(:str, "ary")))))),
      s(:class,
        s(:const, nil, :SubArrayWrapper), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args),
            s(:ivasgn, :@data,
              s(:array))),
          s(:send, nil, :attr_reader,
            s(:sym, :data)),
          s(:def, :[],
            s(:args,
              s(:arg, :index)),
            s(:send,
              s(:ivar, :@data), :[],
              s(:lvar, :index))),
          s(:def, :<<,
            s(:args,
              s(:arg, :value)),
            s(:begin,
              s(:send,
                s(:ivar, :@data), :<<,
                s(:lvar, :value)),
              s(:ivasgn, :@shifted,
                s(:true)))),
          s(:def, :shifted?,
            s(:args),
            s(:ivar, :@shifted)))),
      s(:def, :test_parse_array_custom_array_derived_class,
        s(:args),
        s(:begin,
          s(:lvasgn, :res,
            s(:send, nil, :parse,
              s(:str, "[1,2]"),
              s(:hash,
                s(:pair,
                  s(:sym, :array_class),
                  s(:const, nil, :SubArray))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:lvar, :res)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :SubArray),
            s(:send,
              s(:lvar, :res), :class)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :res), :shifted?)))),
      s(:def, :test_parse_array_custom_non_array_derived_class,
        s(:args),
        s(:begin,
          s(:lvasgn, :res,
            s(:send, nil, :parse,
              s(:str, "[1,2]"),
              s(:hash,
                s(:pair,
                  s(:sym, :array_class),
                  s(:const, nil, :SubArrayWrapper))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :res), :data)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :SubArrayWrapper),
            s(:send,
              s(:lvar, :res), :class)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :res), :shifted?)))),
      s(:def, :test_parse_object,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:send, nil, :parse,
              s(:str, "{}"))),
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:send, nil, :parse,
              s(:str, "  {  }  "))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "foo"),
                s(:str, "bar"))),
            s(:send, nil, :parse,
              s(:str, "{\"foo\":\"bar\"}"))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "foo"),
                s(:str, "bar"))),
            s(:send, nil, :parse,
              s(:str, "    { \"foo\"  :   \"bar\"   }   "))))),
      s(:class,
        s(:const, nil, :SubHash),
        s(:const, nil, :Hash),
        s(:begin,
          s(:def, :[]=,
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:begin,
              s(:ivasgn, :@item_set,
                s(:true)),
              s(:zsuper))),
          s(:def, :item_set?,
            s(:args),
            s(:ivar, :@item_set)))),
      s(:class,
        s(:const, nil, :SubHash2),
        s(:const, nil, :Hash),
        s(:begin,
          s(:def, :to_json,
            s(:args,
              s(:restarg, :a)),
            s(:send,
              s(:send,
                s(:hash,
                  s(:pair,
                    s(:send,
                      s(:const, nil, :JSON), :create_id),
                    s(:send,
                      s(:send,
                        s(:self), :class), :name))), :merge,
                s(:self)), :to_json,
              s(:splat,
                s(:lvar, :a)))),
          s(:defs,
            s(:self), :json_create,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:send,
                s(:lvar, :o), :delete,
                s(:send,
                  s(:const, nil, :JSON), :create_id)),
              s(:send,
                s(:self), :[],
                s(:lvar, :o)))))),
      s(:class,
        s(:const, nil, :SubOpenStruct),
        s(:const, nil, :OpenStruct),
        s(:begin,
          s(:def, :[],
            s(:args,
              s(:arg, :k)),
            s(:send, nil, :__send__,
              s(:lvar, :k))),
          s(:def, :[]=,
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:begin,
              s(:ivasgn, :@item_set,
                s(:true)),
              s(:send, nil, :__send__,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :k)),
                  s(:str, "=")),
                s(:lvar, :v)))),
          s(:def, :item_set?,
            s(:args),
            s(:ivar, :@item_set)))),
      s(:def, :test_parse_object_custom_hash_derived_class,
        s(:args),
        s(:begin,
          s(:lvasgn, :res,
            s(:send, nil, :parse,
              s(:str, "{\"foo\":\"bar\"}"),
              s(:hash,
                s(:pair,
                  s(:sym, :object_class),
                  s(:const, nil, :SubHash))))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "foo"),
                s(:str, "bar"))),
            s(:lvar, :res)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :SubHash),
            s(:send,
              s(:lvar, :res), :class)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :res), :item_set?)))),
      s(:def, :test_parse_object_custom_non_hash_derived_class,
        s(:args),
        s(:begin,
          s(:lvasgn, :res,
            s(:send, nil, :parse,
              s(:str, "{\"foo\":\"bar\"}"),
              s(:hash,
                s(:pair,
                  s(:sym, :object_class),
                  s(:const, nil, :SubOpenStruct))))),
          s(:send, nil, :assert_equal,
            s(:str, "bar"),
            s(:send,
              s(:lvar, :res), :foo)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :SubOpenStruct),
            s(:send,
              s(:lvar, :res), :class)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :res), :item_set?)))),
      s(:def, :test_parse_generic_object,
        s(:args),
        s(:begin,
          s(:lvasgn, :res,
            s(:send, nil, :parse,
              s(:str, "{\"foo\":\"bar\", \"baz\":{}}"),
              s(:hash,
                s(:pair,
                  s(:sym, :object_class),
                  s(:const,
                    s(:const, nil, :JSON), :GenericObject))))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :JSON), :GenericObject),
            s(:send,
              s(:lvar, :res), :class)),
          s(:send, nil, :assert_equal,
            s(:str, "bar"),
            s(:send,
              s(:lvar, :res), :foo)),
          s(:send, nil, :assert_equal,
            s(:str, "bar"),
            s(:send,
              s(:lvar, :res), :[],
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "bar"),
            s(:send,
              s(:lvar, :res), :[],
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:str, "bar"),
            s(:send,
              s(:send,
                s(:lvar, :res), :to_hash), :[],
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :JSON), :GenericObject),
            s(:send,
              s(:send,
                s(:lvar, :res), :baz), :class)))),
      s(:def, :test_generate_core_subclasses_with_new_to_json,
        s(:args),
        s(:begin,
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :SubHash2), :[],
              s(:hash,
                s(:pair,
                  s(:str, "foo"),
                  s(:send,
                    s(:const, nil, :SubHash2), :[],
                    s(:hash,
                      s(:pair,
                        s(:str, "bar"),
                        s(:true)))))))),
          s(:lvasgn, :obj_json,
            s(:send, nil, :JSON,
              s(:lvar, :obj))),
          s(:lvasgn, :obj_again,
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :obj_json),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :SubHash2),
            s(:lvar, :obj_again)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :SubHash2),
            s(:send,
              s(:lvar, :obj_again), :[],
              s(:str, "foo"))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :obj_again), :[],
                s(:str, "foo")), :[],
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :obj),
            s(:lvar, :obj_again)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "foo")),
            s(:send, nil, :JSON,
              s(:send, nil, :JSON,
                s(:send,
                  s(:const, nil, :SubArray2), :[],
                  s(:str, "foo"))),
              s(:hash,
                s(:pair,
                  s(:sym, :create_additions),
                  s(:true))))))),
      s(:def, :test_generate_core_subclasses_with_default_to_json,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "{\"foo\":\"bar\"}"),
            s(:send, nil, :JSON,
              s(:send,
                s(:const, nil, :SubHash), :[],
                s(:hash,
                  s(:pair,
                    s(:str, "foo"),
                    s(:str, "bar")))))),
          s(:send, nil, :assert_equal,
            s(:str, "[\"foo\"]"),
            s(:send, nil, :JSON,
              s(:send,
                s(:const, nil, :SubArray), :[],
                s(:str, "foo")))))),
      s(:def, :test_generate_of_core_subclasses,
        s(:args),
        s(:begin,
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :SubHash), :[],
              s(:hash,
                s(:pair,
                  s(:str, "foo"),
                  s(:send,
                    s(:const, nil, :SubHash), :[],
                    s(:hash,
                      s(:pair,
                        s(:str, "bar"),
                        s(:true)))))))),
          s(:lvasgn, :obj_json,
            s(:send, nil, :JSON,
              s(:lvar, :obj))),
          s(:lvasgn, :obj_again,
            s(:send, nil, :JSON,
              s(:lvar, :obj_json))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Hash),
            s(:lvar, :obj_again)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Hash),
            s(:send,
              s(:lvar, :obj_again), :[],
              s(:str, "foo"))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :obj_again), :[],
                s(:str, "foo")), :[],
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :obj),
            s(:lvar, :obj_again)))),
      s(:def, :test_parser_reset,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:const, nil, :Parser), :new,
              s(:ivar, :@json))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@hash),
            s(:send,
              s(:lvar, :parser), :parse)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@hash),
            s(:send,
              s(:lvar, :parser), :parse)))),
      s(:def, :test_comments,
        s(:args),
        s(:begin,
          s(:lvasgn, :json,
            s(:dstr,
              s(:str, "{\n"),
              s(:str, "  \"key1\":\"value1\", // eol comment\n"),
              s(:str, "  \"key2\":\"value2\"  /* multi line\n"),
              s(:str, "                    *  comment */,\n"),
              s(:str, "  \"key3\":\"value3\"  /* multi line\n"),
              s(:str, "                    // nested eol comment\n"),
              s(:str, "                    *  comment */\n"),
              s(:str, "}\n"))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "key1"),
                s(:str, "value1")),
              s(:pair,
                s(:str, "key2"),
                s(:str, "value2")),
              s(:pair,
                s(:str, "key3"),
                s(:str, "value3"))),
            s(:send, nil, :parse,
              s(:lvar, :json))),
          s(:lvasgn, :json,
            s(:dstr,
              s(:str, "{\n"),
              s(:str, "  \"key1\":\"value1\"  /* multi line\n"),
              s(:str, "                    // nested eol comment\n"),
              s(:str, "                    /* illegal nested multi line comment */\n"),
              s(:str, "                    *  comment */\n"),
              s(:str, "}\n"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ParserError)),
            s(:args),
            s(:send, nil, :parse,
              s(:lvar, :json))),
          s(:lvasgn, :json,
            s(:dstr,
              s(:str, "{\n"),
              s(:str, "  \"key1\":\"value1\"  /* multi line\n"),
              s(:str, "                   // nested eol comment\n"),
              s(:str, "                   closed multi comment */\n"),
              s(:str, "                   and again, throw an Error */\n"),
              s(:str, "}\n"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ParserError)),
            s(:args),
            s(:send, nil, :parse,
              s(:lvar, :json))),
          s(:lvasgn, :json,
            s(:dstr,
              s(:str, "{\n"),
              s(:str, "  \"key1\":\"value1\"  /*/*/\n"),
              s(:str, "}\n"))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "key1"),
                s(:str, "value1"))),
            s(:send, nil, :parse,
              s(:lvar, :json))))),
      s(:def, :test_backslash,
        s(:args),
        s(:begin,
          s(:lvasgn, :data,
            s(:array,
              s(:str, "\\.(?i:gif|jpe?g|png)$"))),
          s(:lvasgn, :json,
            s(:str, "[\"\\\\.(?i:gif|jpe?g|png)$\"]")),
          s(:send, nil, :assert_equal,
            s(:lvar, :json),
            s(:send,
              s(:const, nil, :JSON), :generate,
              s(:lvar, :data))),
          s(:send, nil, :assert_equal,
            s(:lvar, :data),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :json))),
          s(:lvasgn, :data,
            s(:array,
              s(:str, "\\\""))),
          s(:lvasgn, :json,
            s(:str, "[\"\\\\\\\"\"]")),
          s(:send, nil, :assert_equal,
            s(:lvar, :json),
            s(:send,
              s(:const, nil, :JSON), :generate,
              s(:lvar, :data))),
          s(:send, nil, :assert_equal,
            s(:lvar, :data),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :json))),
          s(:lvasgn, :json,
            s(:str, "[\"/\"]")),
          s(:lvasgn, :data,
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :json))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "/")),
            s(:lvar, :data)),
          s(:send, nil, :assert_equal,
            s(:lvar, :json),
            s(:send,
              s(:const, nil, :JSON), :generate,
              s(:lvar, :data))),
          s(:lvasgn, :json,
            s(:str, "[\"\\\"\"]")),
          s(:lvasgn, :data,
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :json))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "\"")),
            s(:lvar, :data)),
          s(:send, nil, :assert_equal,
            s(:lvar, :json),
            s(:send,
              s(:const, nil, :JSON), :generate,
              s(:lvar, :data))),
          s(:lvasgn, :json,
            s(:str, "[\"\\'\"]")),
          s(:lvasgn, :data,
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :json))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "'")),
            s(:lvar, :data)),
          s(:send, nil, :assert_equal,
            s(:str, "[\"'\"]"),
            s(:send,
              s(:const, nil, :JSON), :generate,
              s(:lvar, :data))))),
      s(:def, :test_wrong_inputs,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "\"foo\""))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "123"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "[] bla"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "[] 1"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "[] []"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "[] {}"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "{} []"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "{} {}"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "[NULL]"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "[FALSE]"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "[TRUE]"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "[07]    "))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "[0a]"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "[1.]"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ParserError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "     "))))),
      s(:def, :test_nesting,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :NestingError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "[[]]"),
              s(:hash,
                s(:pair,
                  s(:sym, :max_nesting),
                  s(:int, 1))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :NestingError)),
            s(:args),
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :JSON), :parser), :new,
                s(:str, "[[]]"),
                s(:hash,
                  s(:pair,
                    s(:sym, :max_nesting),
                    s(:int, 1)))), :parse)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array)),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "[[]]"),
              s(:hash,
                s(:pair,
                  s(:sym, :max_nesting),
                  s(:int, 2))))),
          s(:lvasgn, :too_deep,
            s(:str, "[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\"Too deep\"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]")),
          s(:lvasgn, :too_deep_ary,
            s(:send, nil, :eval,
              s(:lvar, :too_deep))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :NestingError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :too_deep))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :NestingError)),
            s(:args),
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :JSON), :parser), :new,
                s(:lvar, :too_deep)), :parse)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :NestingError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :too_deep),
              s(:hash,
                s(:pair,
                  s(:sym, :max_nesting),
                  s(:int, 100))))),
          s(:lvasgn, :ok,
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :too_deep),
              s(:hash,
                s(:pair,
                  s(:sym, :max_nesting),
                  s(:int, 101))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :too_deep_ary),
            s(:lvar, :ok)),
          s(:lvasgn, :ok,
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :too_deep),
              s(:hash,
                s(:pair,
                  s(:sym, :max_nesting),
                  s(:nil))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :too_deep_ary),
            s(:lvar, :ok)),
          s(:lvasgn, :ok,
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :too_deep),
              s(:hash,
                s(:pair,
                  s(:sym, :max_nesting),
                  s(:false))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :too_deep_ary),
            s(:lvar, :ok)),
          s(:lvasgn, :ok,
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:lvar, :too_deep),
              s(:hash,
                s(:pair,
                  s(:sym, :max_nesting),
                  s(:int, 0))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :too_deep_ary),
            s(:lvar, :ok)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :NestingError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :generate,
              s(:array,
                s(:array)),
              s(:hash,
                s(:pair,
                  s(:sym, :max_nesting),
                  s(:int, 1))))),
          s(:send, nil, :assert_equal,
            s(:str, "[[]]"),
            s(:send,
              s(:const, nil, :JSON), :generate,
              s(:array,
                s(:array)),
              s(:hash,
                s(:pair,
                  s(:sym, :max_nesting),
                  s(:int, 2))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :NestingError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :generate,
              s(:lvar, :too_deep_ary))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :JSON), :NestingError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :generate,
              s(:lvar, :too_deep_ary),
              s(:hash,
                s(:pair,
                  s(:sym, :max_nesting),
                  s(:int, 100))))),
          s(:lvasgn, :ok,
            s(:send,
              s(:const, nil, :JSON), :generate,
              s(:lvar, :too_deep_ary),
              s(:hash,
                s(:pair,
                  s(:sym, :max_nesting),
                  s(:int, 101))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :too_deep),
            s(:lvar, :ok)),
          s(:lvasgn, :ok,
            s(:send,
              s(:const, nil, :JSON), :generate,
              s(:lvar, :too_deep_ary),
              s(:hash,
                s(:pair,
                  s(:sym, :max_nesting),
                  s(:nil))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :too_deep),
            s(:lvar, :ok)),
          s(:lvasgn, :ok,
            s(:send,
              s(:const, nil, :JSON), :generate,
              s(:lvar, :too_deep_ary),
              s(:hash,
                s(:pair,
                  s(:sym, :max_nesting),
                  s(:false))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :too_deep),
            s(:lvar, :ok)),
          s(:lvasgn, :ok,
            s(:send,
              s(:const, nil, :JSON), :generate,
              s(:lvar, :too_deep_ary),
              s(:hash,
                s(:pair,
                  s(:sym, :max_nesting),
                  s(:int, 0))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :too_deep),
            s(:lvar, :ok)))),
      s(:def, :test_symbolize_names,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "foo"),
                s(:str, "bar")),
              s(:pair,
                s(:str, "baz"),
                s(:str, "quux"))),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "{\"foo\":\"bar\", \"baz\":\"quux\"}"))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:sym, :foo),
                s(:str, "bar")),
              s(:pair,
                s(:sym, :baz),
                s(:str, "quux"))),
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:str, "{\"foo\":\"bar\", \"baz\":\"quux\"}"),
              s(:hash,
                s(:pair,
                  s(:sym, :symbolize_names),
                  s(:true))))))),
      s(:def, :test_load,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:ivar, :@hash),
              s(:send,
                s(:const, nil, :JSON), :load,
                s(:ivar, :@json))),
            s(:lvasgn, :tempfile,
              s(:send,
                s(:const, nil, :Tempfile), :open,
                s(:str, "json"))),
            s(:send,
              s(:lvar, :tempfile), :write,
              s(:ivar, :@json)),
            s(:send,
              s(:lvar, :tempfile), :rewind),
            s(:send, nil, :assert_equal,
              s(:ivar, :@hash),
              s(:send,
                s(:const, nil, :JSON), :load,
                s(:lvar, :tempfile))),
            s(:lvasgn, :stringio,
              s(:send,
                s(:const, nil, :StringIO), :new,
                s(:ivar, :@json))),
            s(:send,
              s(:lvar, :stringio), :rewind),
            s(:send, nil, :assert_equal,
              s(:ivar, :@hash),
              s(:send,
                s(:const, nil, :JSON), :load,
                s(:lvar, :stringio))),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:const, nil, :JSON), :load,
                s(:nil))),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:const, nil, :JSON), :load,
                s(:str, "")))),
          s(:send,
            s(:lvar, :tempfile), :close!))),
      s(:def, :test_load_with_options,
        s(:args),
        s(:begin,
          s(:lvasgn, :small_hash,
            s(:send, nil, :JSON,
              s(:hash,
                s(:pair,
                  s(:str, "foo"),
                  s(:str, "bar"))))),
          s(:lvasgn, :symbol_hash,
            s(:hash,
              s(:pair,
                s(:sym, :foo),
                s(:str, "bar")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :symbol_hash),
            s(:send,
              s(:const, nil, :JSON), :load,
              s(:lvar, :small_hash),
              s(:nil),
              s(:hash,
                s(:pair,
                  s(:sym, :symbolize_names),
                  s(:true))))))),
      s(:def, :test_dump,
        s(:args),
        s(:begin,
          s(:lvasgn, :too_deep,
            s(:str, "[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]")),
          s(:send, nil, :assert_equal,
            s(:lvar, :too_deep),
            s(:send,
              s(:const, nil, :JSON), :dump,
              s(:send, nil, :eval,
                s(:lvar, :too_deep)))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :String),
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:send, nil, :eval,
                s(:lvar, :too_deep)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :JSON), :dump,
              s(:send, nil, :eval,
                s(:lvar, :too_deep)),
              s(:int, 100))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:send, nil, :eval,
                s(:lvar, :too_deep)),
              s(:int, 100))),
          s(:send, nil, :assert_equal,
            s(:lvar, :too_deep),
            s(:send,
              s(:const, nil, :JSON), :dump,
              s(:send, nil, :eval,
                s(:lvar, :too_deep)),
              s(:int, 101))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :String),
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:send, nil, :eval,
                s(:lvar, :too_deep)),
              s(:int, 101))),
          s(:lvasgn, :output,
            s(:send,
              s(:const, nil, :StringIO), :new)),
          s(:send,
            s(:const, nil, :JSON), :dump,
            s(:send, nil, :eval,
              s(:lvar, :too_deep)),
            s(:lvar, :output)),
          s(:send, nil, :assert_equal,
            s(:lvar, :too_deep),
            s(:send,
              s(:lvar, :output), :string)),
          s(:lvasgn, :output,
            s(:send,
              s(:const, nil, :StringIO), :new)),
          s(:send,
            s(:const, nil, :JSON), :dump,
            s(:send, nil, :eval,
              s(:lvar, :too_deep)),
            s(:lvar, :output),
            s(:int, 101)),
          s(:send, nil, :assert_equal,
            s(:lvar, :too_deep),
            s(:send,
              s(:lvar, :output), :string)))),
      s(:def, :test_dump_should_modify_defaults,
        s(:args),
        s(:begin,
          s(:lvasgn, :max_nesting,
            s(:send,
              s(:send,
                s(:const, nil, :JSON), :dump_default_options), :[],
              s(:sym, :max_nesting))),
          s(:send,
            s(:const, nil, :JSON), :dump,
            s(:array),
            s(:send,
              s(:const, nil, :StringIO), :new),
            s(:int, 10)),
          s(:send, nil, :assert_equal,
            s(:lvar, :max_nesting),
            s(:send,
              s(:send,
                s(:const, nil, :JSON), :dump_default_options), :[],
              s(:sym, :max_nesting))))),
      s(:def, :test_big_integers,
        s(:args),
        s(:begin,
          s(:lvasgn, :json1,
            s(:send, nil, :JSON,
              s(:array,
                s(:lvasgn, :orig,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:int, 1), :<<,
                        s(:int, 31))), :-,
                    s(:int, 1)))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :orig),
            s(:send,
              s(:send,
                s(:const, nil, :JSON), :[],
                s(:lvar, :json1)), :[],
              s(:int, 0))),
          s(:lvasgn, :json2,
            s(:send, nil, :JSON,
              s(:array,
                s(:lvasgn, :orig,
                  s(:send,
                    s(:int, 1), :<<,
                    s(:int, 31)))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :orig),
            s(:send,
              s(:send,
                s(:const, nil, :JSON), :[],
                s(:lvar, :json2)), :[],
              s(:int, 0))),
          s(:lvasgn, :json3,
            s(:send, nil, :JSON,
              s(:array,
                s(:lvasgn, :orig,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:int, 1), :<<,
                        s(:int, 62))), :-,
                    s(:int, 1)))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :orig),
            s(:send,
              s(:send,
                s(:const, nil, :JSON), :[],
                s(:lvar, :json3)), :[],
              s(:int, 0))),
          s(:lvasgn, :json4,
            s(:send, nil, :JSON,
              s(:array,
                s(:lvasgn, :orig,
                  s(:send,
                    s(:int, 1), :<<,
                    s(:int, 62)))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :orig),
            s(:send,
              s(:send,
                s(:const, nil, :JSON), :[],
                s(:lvar, :json4)), :[],
              s(:int, 0))),
          s(:lvasgn, :json5,
            s(:send, nil, :JSON,
              s(:array,
                s(:lvasgn, :orig,
                  s(:send,
                    s(:int, 1), :<<,
                    s(:int, 64)))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :orig),
            s(:send,
              s(:send,
                s(:const, nil, :JSON), :[],
                s(:lvar, :json5)), :[],
              s(:int, 0))))),
      s(:if,
        s(:defined?,
          s(:const,
            s(:const,
              s(:const, nil, :JSON), :Ext), :Parser)),
        s(:def, :test_allocate,
          s(:args),
          s(:begin,
            s(:lvasgn, :parser,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :JSON), :Ext), :Parser), :new,
                s(:str, "{}"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :TypeError),
                s(:str, "[ruby-core:35079]")),
              s(:args),
              s(:send,
                s(:lvar, :parser), :__send__,
                s(:sym, :initialize),
                s(:str, "{}"))),
            s(:lvasgn, :parser,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :JSON), :Ext), :Parser), :allocate)),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :TypeError),
                s(:str, "[ruby-core:35079]")),
              s(:args),
              s(:send,
                s(:lvar, :parser), :source)))), nil),
      s(:if,
        s(:defined?,
          s(:const,
            s(:const, nil, :Encoding), :ASCII_8BIT)),
        s(:def, :test_argument_encoding,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:send,
                s(:str, "{}"), :force_encoding,
                s(:str, "ascii-8bit"))),
            s(:send,
              s(:const,
                s(:const, nil, :JSON), :Parser), :new,
              s(:lvar, :source)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Encoding), :ASCII_8BIT),
              s(:send,
                s(:lvar, :source), :encoding)))), nil),
      s(:if,
        s(:defined?,
          s(:const,
            s(:const, nil, :Encoding), :UTF_8)),
        s(:def, :test_error_message_encoding,
          s(:args),
          s(:begin,
            s(:lvasgn, :bug10705,
              s(:str, "[ruby-core:67386] [Bug #10705]")),
            s(:lvasgn, :json,
              s(:send,
                s(:str, "\"√\""), :force_encoding,
                s(:const,
                  s(:const, nil, :Encoding), :UTF_8))),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :JSON), :ParserError)),
                s(:args),
                s(:send,
                  s(:const, nil, :JSON), :parse,
                  s(:lvar, :json)))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Encoding), :UTF_8),
              s(:send,
                s(:send,
                  s(:lvar, :e), :message), :encoding),
              s(:lvar, :bug10705)),
            s(:send, nil, :assert_include,
              s(:send,
                s(:lvar, :e), :message),
              s(:lvar, :json),
              s(:lvar, :bug10705)))), nil),
      s(:if,
        s(:send,
          s(:const, nil, :EnvUtil), :gc_stress_to_class?),
        s(:begin,
          s(:def, :assert_no_memory_leak,
            s(:args,
              s(:arg, :code),
              s(:restarg, :rest),
              s(:kwrestarg, :opt)),
            s(:begin,
              s(:lvasgn, :code,
                s(:dstr,
                  s(:str, "8.times {20_000.times {begin "),
                  s(:begin,
                    s(:lvar, :code)),
                  s(:str, "; rescue NoMemoryError; end}; GC.start}"))),
              s(:super,
                s(:array,
                  s(:str, "-rjson/ext/parser")),
                s(:dstr,
                  s(:str, "GC.add_stress_to_class(JSON::Ext::Parser); "),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :code)))),
                s(:lvar, :code),
                s(:splat,
                  s(:lvar, :rest)),
                s(:hash,
                  s(:pair,
                    s(:sym, :rss),
                    s(:true)),
                  s(:pair,
                    s(:sym, :limit),
                    s(:float, 1.1)),
                  s(:kwsplat,
                    s(:lvar, :opt)))))),
          s(:def, :test_no_memory_leak_allocate,
            s(:args),
            s(:send, nil, :assert_no_memory_leak,
              s(:str, "JSON::Ext::Parser.allocate")))), nil))))
