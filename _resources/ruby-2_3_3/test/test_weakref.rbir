s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "weakref")),
  s(:class,
    s(:const, nil, :TestWeakRef),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :make_weakref,
        s(:args,
          s(:optarg, :level,
            s(:int, 10))),
        s(:if,
          s(:send,
            s(:lvar, :level), :>,
            s(:int, 0)),
          s(:send, nil, :make_weakref,
            s(:send,
              s(:lvar, :level), :-,
              s(:int, 1))),
          s(:send,
            s(:const, nil, :WeakRef), :new,
            s(:send,
              s(:const, nil, :Object), :new)))),
      s(:def, :test_ref,
        s(:args),
        s(:begin,
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :weak,
            s(:send,
              s(:const, nil, :WeakRef), :new,
              s(:lvar, :obj))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :obj), :to_s),
            s(:send,
              s(:lvar, :weak), :to_s)),
          s(:send, nil, :assert_predicate,
            s(:lvar, :weak),
            s(:sym, :weakref_alive?)))),
      s(:def, :test_recycled,
        s(:args),
        s(:begin,
          s(:lvasgn, :weaks,
            s(:array)),
          s(:lvasgn, :weak,
            s(:nil)),
          s(:block,
            s(:send,
              s(:int, 100), :times),
            s(:args),
            s(:begin,
              s(:send,
                s(:lvar, :weaks), :<<,
                s(:send, nil, :make_weakref)),
              s(:send,
                s(:const, nil, :ObjectSpace), :garbage_collect),
              s(:send,
                s(:const, nil, :ObjectSpace), :garbage_collect),
              s(:if,
                s(:lvasgn, :weak,
                  s(:block,
                    s(:send,
                      s(:lvar, :weaks), :find),
                    s(:args,
                      s(:arg, :w)),
                    s(:send,
                      s(:send,
                        s(:lvar, :w), :weakref_alive?), :!))),
                s(:break), nil))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :WeakRef), :RefError)),
            s(:args),
            s(:send,
              s(:lvar, :weak), :to_s)),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :weak),
            s(:sym, :weakref_alive?)))),
      s(:def, :test_not_reference_different_object,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7304,
            s(:str, "[ruby-core:49044]")),
          s(:lvasgn, :weakrefs,
            s(:array)),
          s(:block,
            s(:send,
              s(:int, 3), :times),
            s(:args),
            s(:begin,
              s(:lvasgn, :obj,
                s(:send,
                  s(:const, nil, :Object), :new)),
              s(:defs,
                s(:lvar, :obj), :foo,
                s(:args), nil),
              s(:send,
                s(:lvar, :weakrefs), :<<,
                s(:send,
                  s(:const, nil, :WeakRef), :new,
                  s(:lvar, :obj))),
              s(:send,
                s(:const, nil, :ObjectSpace), :garbage_collect))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :NoMethodError),
              s(:lvar, :bug7304)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :weakrefs), :each),
              s(:args,
                s(:arg, :weak)),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:lvar, :weak), :foo),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :WeakRef), :RefError)), nil, nil), nil)))))),
      s(:def, :test_weakref_finalize,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7304,
            s(:str, "[ruby-core:49044]")),
          s(:send, nil, :assert_normal_exit,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "      require 'weakref'\n"),
              s(:str, "      obj = Object.new\n"),
              s(:str, "      3.times do\n"),
              s(:str, "        WeakRef.new(obj)\n"),
              s(:str, "        ObjectSpace.garbage_collect\n"),
              s(:str, "      end\n"),
              s(:str, "    ")),
            s(:lvar, :bug7304)))),
      s(:def, :test_repeated_object_memory_leak,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug10537,
            s(:str, "[ruby-core:66428]")),
          s(:send, nil, :assert_no_memory_leak,
            s(:array,
              s(:str, "-rweakref")),
            s(:str, ""),
            s(:dstr,
              s(:str, "      a = Object.new\n"),
              s(:str, "      150_000.times { WeakRef.new(a) }\n")),
            s(:lvar, :bug10537),
            s(:hash,
              s(:pair,
                s(:sym, :timeout),
                s(:int, 60)))))))))
