s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "unicode_normalize/normalize")),
  s(:class,
    s(:const, nil, :TestUnicodeNormalize),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :UNICODE_VERSION,
        s(:const,
          s(:const, nil, :UnicodeNormalize), :UNICODE_VERSION)),
      s(:casgn, nil, :NormTest,
        s(:send,
          s(:const, nil, :Struct), :new,
          s(:sym, :source),
          s(:sym, :NFC),
          s(:sym, :NFD),
          s(:sym, :NFKC),
          s(:sym, :NFKD),
          s(:sym, :line))),
      s(:def, :read_tests,
        s(:args),
        s(:block,
          s(:send,
            s(:block,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:const, nil, :IO), :readlines,
                            s(:send,
                              s(:const, nil, :File), :expand_path,
                              s(:dstr,
                                s(:str, "../enc/unicode/data/"),
                                s(:begin,
                                  s(:const, nil, :UNICODE_VERSION)),
                                s(:str, "/NormalizationTest.txt")),
                              s(:send, nil, :__dir__)),
                            s(:hash,
                              s(:pair,
                                s(:sym, :encoding),
                                s(:str, "utf-8")))), :tap),
                        s(:args,
                          s(:arg, :lines)),
                        s(:send, nil, :assert_include,
                          s(:send,
                            s(:lvar, :lines), :[],
                            s(:int, 0)),
                          s(:dstr,
                            s(:str, "NormalizationTest-"),
                            s(:begin,
                              s(:const, nil, :UNICODE_VERSION)),
                            s(:str, ".txt")))), :collect), :with_index),
                  s(:args,
                    s(:arg, :linedata),
                    s(:arg, :linenumber)),
                  s(:array,
                    s(:lvar, :linedata),
                    s(:lvar, :linenumber))), :reject),
              s(:args,
                s(:arg, :line)),
              s(:send,
                s(:send,
                  s(:lvar, :line), :[],
                  s(:int, 0)), :=~,
                s(:regexp,
                  s(:str, "^[\\\#@]"),
                  s(:regopt)))), :collect),
          s(:args,
            s(:arg, :line)),
          s(:send,
            s(:const, nil, :NormTest), :new,
            s(:splat,
              s(:begin,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :line), :[],
                            s(:int, 0)), :split,
                          s(:str, ";")), :take,
                        s(:int, 5)), :collect),
                    s(:args,
                      s(:arg, :code_string)),
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :code_string), :split,
                            s(:regexp,
                              s(:str, "\\s"),
                              s(:regopt))), :collect),
                        s(:args,
                          s(:arg, :cp)),
                        s(:send,
                          s(:lvar, :cp), :to_i,
                          s(:int, 16))), :pack,
                      s(:str, "U*"))), :+,
                  s(:array,
                    s(:send,
                      s(:send,
                        s(:lvar, :line), :[],
                        s(:int, 1)), :+,
                      s(:int, 1))))))))),
      s(:def, :to_codepoints,
        s(:args,
          s(:arg, :string)),
        s(:block,
          s(:send,
            s(:send,
              s(:lvar, :string), :codepoints), :collect),
          s(:args,
            s(:arg, :cp)),
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :cp), :to_s,
                s(:int, 16)), :upcase), :rjust,
            s(:int, 4),
            s(:str, "0")))),
      s(:def, :setup,
        s(:args),
        s(:rescue,
          s(:or_asgn,
            s(:cvasgn, :@@tests),
            s(:send, nil, :read_tests)),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const, nil, :Errno), :ENOENT)),
            s(:lvasgn, :e),
            s(:begin,
              s(:or_asgn,
                s(:cvasgn, :@@tests),
                s(:array)),
              s(:send, nil, :skip,
                s(:send,
                  s(:lvar, :e), :message)))), nil)),
      s(:defs,
        s(:self), :generate_test_normalize,
        s(:args,
          s(:arg, :target),
          s(:arg, :normalization),
          s(:arg, :source),
          s(:arg, :prechecked)),
        s(:block,
          s(:send, nil, :define_method,
            s(:dstr,
              s(:str, "test_normalize_to_"),
              s(:begin,
                s(:lvar, :target)),
              s(:str, "_from_"),
              s(:begin,
                s(:lvar, :source)),
              s(:str, "_with_"),
              s(:begin,
                s(:lvar, :normalization)))),
          s(:args),
          s(:begin,
            s(:lvasgn, :expected,
              s(:lvasgn, :actual,
                s(:lvasgn, :test,
                  s(:nil)))),
            s(:lvasgn, :mesg,
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :to_codepoints,
                      s(:lvar, :expected))),
                  s(:str, " expected but was "),
                  s(:begin,
                    s(:send, nil, :to_codepoints,
                      s(:lvar, :actual))),
                  s(:str, " on line "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :test), :[],
                      s(:sym, :line))),
                  s(:str, " ("),
                  s(:begin,
                    s(:lvar, :normalization)),
                  s(:str, ")")))),
            s(:block,
              s(:send,
                s(:cvar, :@@tests), :each),
              s(:args,
                s(:arg, :t)),
              s(:begin,
                s(:lvasgn, :test,
                  s(:lvar, :t)),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:lvar, :prechecked), :nil?),
                    s(:send,
                      s(:send,
                        s(:lvar, :test), :[],
                        s(:lvar, :prechecked)), :==,
                      s(:send,
                        s(:lvar, :test), :[],
                        s(:lvar, :source)))),
                  s(:begin,
                    s(:lvasgn, :expected,
                      s(:send,
                        s(:lvar, :test), :[],
                        s(:lvar, :target))),
                    s(:lvasgn, :actual,
                      s(:send,
                        s(:send,
                          s(:lvar, :test), :[],
                          s(:lvar, :source)), :unicode_normalize,
                        s(:lvar, :normalization))),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :expected),
                      s(:lvar, :actual),
                      s(:lvar, :mesg))), nil)))))),
      s(:send, nil, :generate_test_normalize,
        s(:sym, :NFC),
        s(:sym, :nfc),
        s(:sym, :source),
        s(:nil)),
      s(:send, nil, :generate_test_normalize,
        s(:sym, :NFC),
        s(:sym, :nfc),
        s(:sym, :NFC),
        s(:sym, :source)),
      s(:send, nil, :generate_test_normalize,
        s(:sym, :NFC),
        s(:sym, :nfc),
        s(:sym, :NFD),
        s(:sym, :source)),
      s(:send, nil, :generate_test_normalize,
        s(:sym, :NFKC),
        s(:sym, :nfc),
        s(:sym, :NFKC),
        s(:nil)),
      s(:send, nil, :generate_test_normalize,
        s(:sym, :NFKC),
        s(:sym, :nfc),
        s(:sym, :NFKD),
        s(:sym, :NFKC)),
      s(:send, nil, :generate_test_normalize,
        s(:sym, :NFD),
        s(:sym, :nfd),
        s(:sym, :source),
        s(:nil)),
      s(:send, nil, :generate_test_normalize,
        s(:sym, :NFD),
        s(:sym, :nfd),
        s(:sym, :NFC),
        s(:sym, :source)),
      s(:send, nil, :generate_test_normalize,
        s(:sym, :NFD),
        s(:sym, :nfd),
        s(:sym, :NFD),
        s(:sym, :source)),
      s(:send, nil, :generate_test_normalize,
        s(:sym, :NFKD),
        s(:sym, :nfd),
        s(:sym, :NFKC),
        s(:nil)),
      s(:send, nil, :generate_test_normalize,
        s(:sym, :NFKD),
        s(:sym, :nfd),
        s(:sym, :NFKD),
        s(:sym, :NFKC)),
      s(:send, nil, :generate_test_normalize,
        s(:sym, :NFKC),
        s(:sym, :nfkc),
        s(:sym, :source),
        s(:nil)),
      s(:send, nil, :generate_test_normalize,
        s(:sym, :NFKC),
        s(:sym, :nfkc),
        s(:sym, :NFC),
        s(:sym, :source)),
      s(:send, nil, :generate_test_normalize,
        s(:sym, :NFKC),
        s(:sym, :nfkc),
        s(:sym, :NFD),
        s(:sym, :source)),
      s(:send, nil, :generate_test_normalize,
        s(:sym, :NFKC),
        s(:sym, :nfkc),
        s(:sym, :NFKC),
        s(:sym, :NFC)),
      s(:send, nil, :generate_test_normalize,
        s(:sym, :NFKC),
        s(:sym, :nfkc),
        s(:sym, :NFKD),
        s(:sym, :NFD)),
      s(:send, nil, :generate_test_normalize,
        s(:sym, :NFKD),
        s(:sym, :nfkd),
        s(:sym, :source),
        s(:nil)),
      s(:send, nil, :generate_test_normalize,
        s(:sym, :NFKD),
        s(:sym, :nfkd),
        s(:sym, :NFC),
        s(:sym, :source)),
      s(:send, nil, :generate_test_normalize,
        s(:sym, :NFKD),
        s(:sym, :nfkd),
        s(:sym, :NFD),
        s(:sym, :source)),
      s(:send, nil, :generate_test_normalize,
        s(:sym, :NFKD),
        s(:sym, :nfkd),
        s(:sym, :NFKC),
        s(:sym, :NFC)),
      s(:send, nil, :generate_test_normalize,
        s(:sym, :NFKD),
        s(:sym, :nfkd),
        s(:sym, :NFKD),
        s(:sym, :NFD)),
      s(:defs,
        s(:self), :generate_test_check_true,
        s(:args,
          s(:arg, :source),
          s(:arg, :normalization)),
        s(:block,
          s(:send, nil, :define_method,
            s(:dstr,
              s(:str, "test_check_true_"),
              s(:begin,
                s(:lvar, :source)),
              s(:str, "_as_"),
              s(:begin,
                s(:lvar, :normalization)))),
          s(:args),
          s(:begin,
            s(:lvasgn, :test,
              s(:nil)),
            s(:lvasgn, :mesg,
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :to_codepoints,
                      s(:send,
                        s(:lvar, :test), :[],
                        s(:lvar, :source)))),
                  s(:str, " should check as "),
                  s(:begin,
                    s(:lvar, :normalization)),
                  s(:str, " but does not on line "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :test), :[],
                      s(:sym, :line)))))),
            s(:block,
              s(:send,
                s(:cvar, :@@tests), :each),
              s(:args,
                s(:arg, :t)),
              s(:begin,
                s(:lvasgn, :test,
                  s(:lvar, :t)),
                s(:lvasgn, :actual,
                  s(:send,
                    s(:send,
                      s(:lvar, :test), :[],
                      s(:lvar, :source)), :unicode_normalized?,
                    s(:lvar, :normalization))),
                s(:send, nil, :assert_equal,
                  s(:true),
                  s(:lvar, :actual),
                  s(:lvar, :mesg))))))),
      s(:defs,
        s(:self), :generate_test_check_false,
        s(:args,
          s(:arg, :source),
          s(:arg, :compare),
          s(:arg, :normalization)),
        s(:block,
          s(:send, nil, :define_method,
            s(:dstr,
              s(:str, "test_check_false_"),
              s(:begin,
                s(:lvar, :source)),
              s(:str, "_as_"),
              s(:begin,
                s(:lvar, :normalization)))),
          s(:args),
          s(:begin,
            s(:lvasgn, :test,
              s(:nil)),
            s(:lvasgn, :mesg,
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :to_codepoints,
                      s(:send,
                        s(:lvar, :test), :[],
                        s(:lvar, :source)))),
                  s(:str, " should not check as "),
                  s(:begin,
                    s(:lvar, :normalization)),
                  s(:str, " but does on line "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :test), :[],
                      s(:sym, :line)))))),
            s(:block,
              s(:send,
                s(:cvar, :@@tests), :each),
              s(:args,
                s(:arg, :t)),
              s(:begin,
                s(:lvasgn, :test,
                  s(:lvar, :t)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :test), :[],
                      s(:lvar, :source)), :!=,
                    s(:send,
                      s(:lvar, :test), :[],
                      s(:lvar, :compare))),
                  s(:begin,
                    s(:lvasgn, :actual,
                      s(:send,
                        s(:send,
                          s(:lvar, :test), :[],
                          s(:lvar, :source)), :unicode_normalized?,
                        s(:lvar, :normalization))),
                    s(:send, nil, :assert_equal,
                      s(:false),
                      s(:lvar, :actual),
                      s(:lvar, :mesg))), nil)))))),
      s(:send, nil, :generate_test_check_true,
        s(:sym, :NFC),
        s(:sym, :nfc)),
      s(:send, nil, :generate_test_check_true,
        s(:sym, :NFD),
        s(:sym, :nfd)),
      s(:send, nil, :generate_test_check_true,
        s(:sym, :NFKC),
        s(:sym, :nfc)),
      s(:send, nil, :generate_test_check_true,
        s(:sym, :NFKC),
        s(:sym, :nfkc)),
      s(:send, nil, :generate_test_check_true,
        s(:sym, :NFKD),
        s(:sym, :nfd)),
      s(:send, nil, :generate_test_check_true,
        s(:sym, :NFKD),
        s(:sym, :nfkd)),
      s(:send, nil, :generate_test_check_false,
        s(:sym, :source),
        s(:sym, :NFD),
        s(:sym, :nfd)),
      s(:send, nil, :generate_test_check_false,
        s(:sym, :NFC),
        s(:sym, :NFD),
        s(:sym, :nfd)),
      s(:send, nil, :generate_test_check_false,
        s(:sym, :NFKC),
        s(:sym, :NFKD),
        s(:sym, :nfd)),
      s(:send, nil, :generate_test_check_false,
        s(:sym, :source),
        s(:sym, :NFC),
        s(:sym, :nfc)),
      s(:send, nil, :generate_test_check_false,
        s(:sym, :NFD),
        s(:sym, :NFC),
        s(:sym, :nfc)),
      s(:send, nil, :generate_test_check_false,
        s(:sym, :NFKD),
        s(:sym, :NFKC),
        s(:sym, :nfc)),
      s(:send, nil, :generate_test_check_false,
        s(:sym, :source),
        s(:sym, :NFKD),
        s(:sym, :nfkd)),
      s(:send, nil, :generate_test_check_false,
        s(:sym, :NFC),
        s(:sym, :NFKD),
        s(:sym, :nfkd)),
      s(:send, nil, :generate_test_check_false,
        s(:sym, :NFD),
        s(:sym, :NFKD),
        s(:sym, :nfkd)),
      s(:send, nil, :generate_test_check_false,
        s(:sym, :NFKC),
        s(:sym, :NFKD),
        s(:sym, :nfkd)),
      s(:send, nil, :generate_test_check_false,
        s(:sym, :source),
        s(:sym, :NFKC),
        s(:sym, :nfkc)),
      s(:send, nil, :generate_test_check_false,
        s(:sym, :NFC),
        s(:sym, :NFKC),
        s(:sym, :nfkc)),
      s(:send, nil, :generate_test_check_false,
        s(:sym, :NFD),
        s(:sym, :NFKC),
        s(:sym, :nfkc)),
      s(:send, nil, :generate_test_check_false,
        s(:sym, :NFKD),
        s(:sym, :NFKC),
        s(:sym, :nfkc)),
      s(:def, :test_non_UTF_8,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "Ḋ"), :encode,
              s(:str, "UTF-16BE")),
            s(:send,
              s(:send,
                s(:str, "Ḋ"), :encode,
                s(:str, "UTF-16BE")), :unicode_normalize,
              s(:sym, :nfc))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:str, "Ḋ"), :encode,
                s(:str, "UTF-16BE")), :unicode_normalized?,
              s(:sym, :nfc))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send,
                s(:str, "Ḋ"), :encode,
                s(:str, "UTF-16BE")), :unicode_normalized?,
              s(:sym, :nfc))))),
      s(:def, :test_singleton_with_accents,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "Ķ"),
          s(:send,
            s(:str, "Ķ"), :unicode_normalize,
            s(:sym, :nfc)))),
      s(:def, :test_partial_jamo_compose,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "각"),
          s(:send,
            s(:str, "각"), :unicode_normalize,
            s(:sym, :nfc)))),
      s(:def, :test_partial_jamo_decompose,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "각"),
          s(:send,
            s(:str, "각"), :unicode_normalize,
            s(:sym, :nfd)))),
      s(:def, :test_hangul_plus_accents,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "가̣̀"),
            s(:send,
              s(:str, "가̣̀"), :unicode_normalize,
              s(:sym, :nfc))),
          s(:send, nil, :assert_equal,
            s(:str, "가̣̀"),
            s(:send,
              s(:str, "가̣̀"), :unicode_normalize,
              s(:sym, :nfc))),
          s(:send, nil, :assert_equal,
            s(:str, "가̣̀"),
            s(:send,
              s(:str, "가̣̀"), :unicode_normalize,
              s(:sym, :nfd))),
          s(:send, nil, :assert_equal,
            s(:str, "가̣̀"),
            s(:send,
              s(:str, "가̣̀"), :unicode_normalize,
              s(:sym, :nfd))))),
      s(:def, :test_raise_exception_for_non_unicode_encoding,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :CompatibilityError)),
            s(:args),
            s(:send,
              s(:send,
                s(:str, "abc"), :force_encoding,
                s(:str, "ISO-8859-1")), :unicode_normalize)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :CompatibilityError)),
            s(:args),
            s(:send,
              s(:send,
                s(:str, "abc"), :force_encoding,
                s(:str, "ISO-8859-1")), :unicode_normalize!)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :CompatibilityError)),
            s(:args),
            s(:send,
              s(:send,
                s(:str, "abc"), :force_encoding,
                s(:str, "ISO-8859-1")), :unicode_normalized?)))),
      s(:def, :test_us_ascii,
        s(:args),
        s(:begin,
          s(:lvasgn, :ascii_string,
            s(:send,
              s(:str, "abc"), :encode,
              s(:str, "US-ASCII"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :ascii_string),
            s(:send,
              s(:lvar, :ascii_string), :unicode_normalize)),
          s(:send, nil, :assert_equal,
            s(:lvar, :ascii_string),
            s(:send,
              s(:lvar, :ascii_string), :unicode_normalize,
              s(:sym, :nfd))),
          s(:send, nil, :assert_equal,
            s(:lvar, :ascii_string),
            s(:send,
              s(:lvar, :ascii_string), :unicode_normalize,
              s(:sym, :nfkc))),
          s(:send, nil, :assert_equal,
            s(:lvar, :ascii_string),
            s(:send,
              s(:lvar, :ascii_string), :unicode_normalize,
              s(:sym, :nfkd))),
          s(:send, nil, :assert_equal,
            s(:lvar, :ascii_string),
            s(:send,
              s(:lvar, :ascii_string), :unicode_normalize!)),
          s(:send, nil, :assert_equal,
            s(:lvar, :ascii_string),
            s(:send,
              s(:lvar, :ascii_string), :unicode_normalize!,
              s(:sym, :nfd))),
          s(:send, nil, :assert_equal,
            s(:lvar, :ascii_string),
            s(:send,
              s(:lvar, :ascii_string), :unicode_normalize!,
              s(:sym, :nfkc))),
          s(:send, nil, :assert_equal,
            s(:lvar, :ascii_string),
            s(:send,
              s(:lvar, :ascii_string), :unicode_normalize!,
              s(:sym, :nfkd))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :ascii_string), :unicode_normalized?)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :ascii_string), :unicode_normalized?,
              s(:sym, :nfd))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :ascii_string), :unicode_normalized?,
              s(:sym, :nfkc))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :ascii_string), :unicode_normalized?,
              s(:sym, :nfkd))))))))
