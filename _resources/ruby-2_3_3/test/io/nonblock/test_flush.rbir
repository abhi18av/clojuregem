s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "timeout")),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "io/nonblock")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:send,
      s(:const, nil, :IO), :method_defined?,
      s(:sym, :nonblock)),
    s(:class,
      s(:const, nil, :TestIONonblock),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :test_flush,
          s(:args),
          s(:begin,
            s(:block,
              s(:send,
                s(:const, nil, :IO), :pipe),
              s(:args,
                s(:arg, :r),
                s(:arg, :w)),
              s(:if,
                s(:send, nil, :flush_test,
                  s(:lvar, :r),
                  s(:lvar, :w)),
                s(:return), nil)),
            s(:send, nil, :require,
              s(:str, "socket")),
            s(:block,
              s(:send,
                s(:const, nil, :Socket), :pair,
                s(:sym, :INET),
                s(:sym, :STREAM)),
              s(:args,
                s(:arg, :s1),
                s(:arg, :s2)),
              s(:if,
                s(:send, nil, :flush_test,
                  s(:lvar, :s1),
                  s(:lvar, :s2)),
                s(:return), nil)),
            s(:send, nil, :skip,
              s(:str, "nonblocking IO did not work")))),
        s(:def, :flush_test,
          s(:args,
            s(:arg, :r),
            s(:arg, :w)),
          s(:begin,
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:lvar, :w), :nonblock=,
                  s(:true)),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Errno), :EBADF)), nil,
                  s(:return,
                    s(:false))), nil)),
            s(:send,
              s(:lvar, :w), :sync=,
              s(:false)),
            s(:send,
              s(:lvar, :w), :<<,
              s(:str, "b")),
            s(:send,
              s(:lvar, :w), :flush),
            s(:send,
              s(:lvar, :w), :<<,
              s(:send,
                s(:str, "a"), :*,
                s(:int, 4096))),
            s(:lvasgn, :result,
              s(:str, "")),
            s(:block,
              s(:send,
                s(:const, nil, :Timeout), :timeout,
                s(:int, 10)),
              s(:args),
              s(:begin,
                s(:lvasgn, :t0,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Thread), :pass),
                      s(:send,
                        s(:lvar, :w), :close)))),
                s(:lvasgn, :t,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:while,
                      s(:begin,
                        s(:send,
                          s(:const, nil, :Thread), :pass),
                        s(:lvasgn, :s,
                          s(:send,
                            s(:lvar, :r), :read,
                            s(:int, 4096)))),
                      s(:send,
                        s(:lvar, :result), :<<,
                        s(:lvar, :s))))),
                s(:kwbegin,
                  s(:rescue,
                    s(:send,
                      s(:lvar, :w), :flush),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Errno), :EBADF),
                        s(:const, nil, :IOError)), nil, nil), nil)),
                s(:block,
                  s(:send, nil, :assert_nothing_raised),
                  s(:args),
                  s(:send,
                    s(:lvar, :t), :join)),
                s(:send,
                  s(:lvar, :t0), :join))),
            s(:send, nil, :assert_equal,
              s(:int, 4097),
              s(:send,
                s(:lvar, :result), :size)),
            s(:true))))), nil))
