s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :require,
          s(:str, "io/console")),
        s(:send, nil, :require,
          s(:str, "test/unit")),
        s(:send, nil, :require,
          s(:str, "pty"))),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:and,
      s(:defined?,
        s(:const, nil, :PTY)),
      s(:defined?,
        s(:send,
          s(:const, nil, :IO), :console))),
    s(:class,
      s(:const, nil, :TestIO_Console),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:casgn, nil, :Bug6116,
          s(:str, "[ruby-dev:45309]")),
        s(:def, :test_raw,
          s(:args),
          s(:block,
            s(:send, nil, :helper),
            s(:args,
              s(:arg, :m),
              s(:arg, :s)),
            s(:begin,
              s(:send,
                s(:lvar, :s), :print,
                s(:str, "abc\n")),
              s(:send, nil, :assert_equal,
                s(:str, "abc\r\n"),
                s(:send,
                  s(:lvar, :m), :gets)),
              s(:send, nil, :assert_send,
                s(:array,
                  s(:lvar, :s),
                  s(:sym, :echo?))),
              s(:block,
                s(:send,
                  s(:lvar, :s), :raw),
                s(:args),
                s(:begin,
                  s(:send, nil, :assert_not_send,
                    s(:array,
                      s(:lvar, :s),
                      s(:sym, :echo?)),
                    s(:const, nil, :Bug6116)),
                  s(:send,
                    s(:lvar, :s), :print,
                    s(:str, "def\n")),
                  s(:send, nil, :assert_equal,
                    s(:str, "def\n"),
                    s(:send,
                      s(:lvar, :m), :gets)))),
              s(:send, nil, :assert_send,
                s(:array,
                  s(:lvar, :s),
                  s(:sym, :echo?))),
              s(:send,
                s(:lvar, :s), :print,
                s(:str, "ghi\n")),
              s(:send, nil, :assert_equal,
                s(:str, "ghi\r\n"),
                s(:send,
                  s(:lvar, :m), :gets))))),
        s(:def, :test_raw_minchar,
          s(:args),
          s(:block,
            s(:send, nil, :helper),
            s(:args,
              s(:arg, :m),
              s(:arg, :s)),
            s(:begin,
              s(:lvasgn, :len,
                s(:int, 0)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:nil),
                  s(:int, 0)),
                s(:array,
                  s(:send,
                    s(:lvar, :s), :getch,
                    s(:hash,
                      s(:pair,
                        s(:sym, :min),
                        s(:int, 0)))),
                  s(:lvar, :len))),
              s(:lvasgn, :main,
                s(:send,
                  s(:const, nil, :Thread), :current)),
              s(:lvasgn, :go,
                s(:false)),
              s(:lvasgn, :th,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :start),
                  s(:args),
                  s(:begin,
                    s(:op_asgn,
                      s(:lvasgn, :len), :+,
                      s(:int, 1)),
                    s(:send,
                      s(:lvar, :m), :print,
                      s(:str, "a")),
                    s(:send,
                      s(:lvar, :m), :flush),
                    s(:until,
                      s(:and,
                        s(:lvar, :go),
                        s(:send,
                          s(:lvar, :main), :stop?)),
                      s(:send, nil, :sleep,
                        s(:float, 0.01))),
                    s(:op_asgn,
                      s(:lvasgn, :len), :+,
                      s(:int, 10)),
                    s(:send,
                      s(:lvar, :m), :print,
                      s(:str, "1234567890")),
                    s(:send,
                      s(:lvar, :m), :flush)))),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:array,
                        s(:str, "a"),
                        s(:int, 1)),
                      s(:array,
                        s(:send,
                          s(:lvar, :s), :getch,
                          s(:hash,
                            s(:pair,
                              s(:sym, :min),
                              s(:int, 1)))),
                        s(:lvar, :len))),
                    s(:lvasgn, :go,
                      s(:true)),
                    s(:send, nil, :assert_equal,
                      s(:array,
                        s(:str, "1"),
                        s(:int, 11)),
                      s(:array,
                        s(:send,
                          s(:lvar, :s), :getch),
                        s(:lvar, :len)))),
                  s(:send,
                    s(:lvar, :th), :join)))))),
        s(:def, :test_raw_timeout,
          s(:args),
          s(:block,
            s(:send, nil, :helper),
            s(:args,
              s(:arg, :m),
              s(:arg, :s)),
            s(:begin,
              s(:lvasgn, :len,
                s(:int, 0)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:nil),
                  s(:int, 0)),
                s(:array,
                  s(:send,
                    s(:lvar, :s), :getch,
                    s(:hash,
                      s(:pair,
                        s(:sym, :min),
                        s(:int, 0)),
                      s(:pair,
                        s(:sym, :time),
                        s(:float, 0.1)))),
                  s(:lvar, :len))),
              s(:lvasgn, :main,
                s(:send,
                  s(:const, nil, :Thread), :current)),
              s(:lvasgn, :th,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :start),
                  s(:args),
                  s(:begin,
                    s(:until,
                      s(:send,
                        s(:lvar, :main), :stop?),
                      s(:send, nil, :sleep,
                        s(:float, 0.01))),
                    s(:op_asgn,
                      s(:lvasgn, :len), :+,
                      s(:int, 2)),
                    s(:send,
                      s(:lvar, :m), :print,
                      s(:str, "ab"))))),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:array,
                        s(:str, "a"),
                        s(:int, 2)),
                      s(:array,
                        s(:send,
                          s(:lvar, :s), :getch,
                          s(:hash,
                            s(:pair,
                              s(:sym, :min),
                              s(:int, 1)),
                            s(:pair,
                              s(:sym, :time),
                              s(:int, 1)))),
                        s(:lvar, :len))),
                    s(:send, nil, :assert_equal,
                      s(:array,
                        s(:str, "b"),
                        s(:int, 2)),
                      s(:array,
                        s(:send,
                          s(:lvar, :s), :getch,
                          s(:hash,
                            s(:pair,
                              s(:sym, :time),
                              s(:int, 1)))),
                        s(:lvar, :len)))),
                  s(:send,
                    s(:lvar, :th), :join)))))),
        s(:def, :test_raw!,
          s(:args),
          s(:block,
            s(:send, nil, :helper),
            s(:args,
              s(:arg, :m),
              s(:arg, :s)),
            s(:begin,
              s(:send,
                s(:lvar, :s), :raw!),
              s(:send,
                s(:lvar, :s), :print,
                s(:str, "foo\n")),
              s(:send, nil, :assert_equal,
                s(:str, "foo\n"),
                s(:send,
                  s(:lvar, :m), :gets))))),
        s(:def, :test_cooked,
          s(:args),
          s(:block,
            s(:send, nil, :helper),
            s(:args,
              s(:arg, :m),
              s(:arg, :s)),
            s(:begin,
              s(:send, nil, :assert_send,
                s(:array,
                  s(:lvar, :s),
                  s(:sym, :echo?))),
              s(:block,
                s(:send,
                  s(:lvar, :s), :raw),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :print,
                    s(:str, "abc\n")),
                  s(:send, nil, :assert_equal,
                    s(:str, "abc\n"),
                    s(:send,
                      s(:lvar, :m), :gets)),
                  s(:send, nil, :assert_not_send,
                    s(:array,
                      s(:lvar, :s),
                      s(:sym, :echo?)),
                    s(:const, nil, :Bug6116)),
                  s(:block,
                    s(:send,
                      s(:lvar, :s), :cooked),
                    s(:args),
                    s(:begin,
                      s(:send, nil, :assert_send,
                        s(:array,
                          s(:lvar, :s),
                          s(:sym, :echo?))),
                      s(:send,
                        s(:lvar, :s), :print,
                        s(:str, "def\n")),
                      s(:send, nil, :assert_equal,
                        s(:str, "def\r\n"),
                        s(:send,
                          s(:lvar, :m), :gets)))),
                  s(:send, nil, :assert_not_send,
                    s(:array,
                      s(:lvar, :s),
                      s(:sym, :echo?)),
                    s(:const, nil, :Bug6116)))),
              s(:send, nil, :assert_send,
                s(:array,
                  s(:lvar, :s),
                  s(:sym, :echo?))),
              s(:send,
                s(:lvar, :s), :print,
                s(:str, "ghi\n")),
              s(:send, nil, :assert_equal,
                s(:str, "ghi\r\n"),
                s(:send,
                  s(:lvar, :m), :gets))))),
        s(:def, :test_echo,
          s(:args),
          s(:block,
            s(:send, nil, :helper),
            s(:args,
              s(:arg, :m),
              s(:arg, :s)),
            s(:begin,
              s(:send, nil, :assert_send,
                s(:array,
                  s(:lvar, :s),
                  s(:sym, :echo?))),
              s(:send,
                s(:lvar, :m), :print,
                s(:str, "a")),
              s(:send, nil, :assert_equal,
                s(:str, "a"),
                s(:send,
                  s(:lvar, :m), :readpartial,
                  s(:int, 10)))))),
        s(:def, :test_noecho,
          s(:args),
          s(:block,
            s(:send, nil, :helper),
            s(:args,
              s(:arg, :m),
              s(:arg, :s)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :s), :noecho),
                s(:args),
                s(:begin,
                  s(:send, nil, :assert_not_send,
                    s(:array,
                      s(:lvar, :s),
                      s(:sym, :echo?))),
                  s(:send,
                    s(:lvar, :m), :print,
                    s(:str, "a")),
                  s(:send, nil, :sleep,
                    s(:float, 0.1)))),
              s(:send,
                s(:lvar, :m), :print,
                s(:str, "b")),
              s(:send, nil, :assert_equal,
                s(:str, "b"),
                s(:send,
                  s(:lvar, :m), :readpartial,
                  s(:int, 10)))))),
        s(:def, :test_noecho2,
          s(:args),
          s(:block,
            s(:send, nil, :helper),
            s(:args,
              s(:arg, :m),
              s(:arg, :s)),
            s(:begin,
              s(:send, nil, :assert_send,
                s(:array,
                  s(:lvar, :s),
                  s(:sym, :echo?))),
              s(:send,
                s(:lvar, :m), :print,
                s(:str, "a\n")),
              s(:send, nil, :sleep,
                s(:float, 0.1)),
              s(:send,
                s(:lvar, :s), :print,
                s(:str, "b\n")),
              s(:send, nil, :sleep,
                s(:float, 0.1)),
              s(:send, nil, :assert_equal,
                s(:str, "a\r\nb\r\n"),
                s(:send,
                  s(:lvar, :m), :readpartial,
                  s(:int, 10))),
              s(:send, nil, :assert_equal,
                s(:str, "a\n"),
                s(:send,
                  s(:lvar, :s), :readpartial,
                  s(:int, 10))),
              s(:block,
                s(:send,
                  s(:lvar, :s), :noecho),
                s(:args),
                s(:begin,
                  s(:send, nil, :assert_not_send,
                    s(:array,
                      s(:lvar, :s),
                      s(:sym, :echo?))),
                  s(:send,
                    s(:lvar, :m), :print,
                    s(:str, "a\n")),
                  s(:send,
                    s(:lvar, :s), :print,
                    s(:str, "b\n")),
                  s(:send, nil, :assert_equal,
                    s(:str, "b\r\n"),
                    s(:send,
                      s(:lvar, :m), :readpartial,
                      s(:int, 10))),
                  s(:send, nil, :assert_equal,
                    s(:str, "a\n"),
                    s(:send,
                      s(:lvar, :s), :readpartial,
                      s(:int, 10))))),
              s(:send, nil, :assert_send,
                s(:array,
                  s(:lvar, :s),
                  s(:sym, :echo?))),
              s(:send,
                s(:lvar, :m), :print,
                s(:str, "a\n")),
              s(:send, nil, :sleep,
                s(:float, 0.1)),
              s(:send,
                s(:lvar, :s), :print,
                s(:str, "b\n")),
              s(:send, nil, :sleep,
                s(:float, 0.1)),
              s(:send, nil, :assert_equal,
                s(:str, "a\r\nb\r\n"),
                s(:send,
                  s(:lvar, :m), :readpartial,
                  s(:int, 10))),
              s(:send, nil, :assert_equal,
                s(:str, "a\n"),
                s(:send,
                  s(:lvar, :s), :readpartial,
                  s(:int, 10)))))),
        s(:def, :test_setecho,
          s(:args),
          s(:block,
            s(:send, nil, :helper),
            s(:args,
              s(:arg, :m),
              s(:arg, :s)),
            s(:begin,
              s(:send, nil, :assert_send,
                s(:array,
                  s(:lvar, :s),
                  s(:sym, :echo?))),
              s(:send,
                s(:lvar, :s), :echo=,
                s(:false)),
              s(:send,
                s(:lvar, :m), :print,
                s(:str, "a")),
              s(:send, nil, :sleep,
                s(:float, 0.1)),
              s(:send,
                s(:lvar, :s), :echo=,
                s(:true)),
              s(:send,
                s(:lvar, :m), :print,
                s(:str, "b")),
              s(:send, nil, :assert_equal,
                s(:str, "b"),
                s(:send,
                  s(:lvar, :m), :readpartial,
                  s(:int, 10)))))),
        s(:def, :test_setecho2,
          s(:args),
          s(:block,
            s(:send, nil, :helper),
            s(:args,
              s(:arg, :m),
              s(:arg, :s)),
            s(:begin,
              s(:send, nil, :assert_send,
                s(:array,
                  s(:lvar, :s),
                  s(:sym, :echo?))),
              s(:send,
                s(:lvar, :m), :print,
                s(:str, "a\n")),
              s(:send, nil, :sleep,
                s(:float, 0.1)),
              s(:send,
                s(:lvar, :s), :print,
                s(:str, "b\n")),
              s(:send, nil, :sleep,
                s(:float, 0.1)),
              s(:send, nil, :assert_equal,
                s(:str, "a\r\nb\r\n"),
                s(:send,
                  s(:lvar, :m), :readpartial,
                  s(:int, 10))),
              s(:send, nil, :assert_equal,
                s(:str, "a\n"),
                s(:send,
                  s(:lvar, :s), :readpartial,
                  s(:int, 10))),
              s(:send,
                s(:lvar, :s), :echo=,
                s(:false)),
              s(:send, nil, :assert_not_send,
                s(:array,
                  s(:lvar, :s),
                  s(:sym, :echo?))),
              s(:send,
                s(:lvar, :m), :print,
                s(:str, "a\n")),
              s(:send,
                s(:lvar, :s), :print,
                s(:str, "b\n")),
              s(:send, nil, :assert_equal,
                s(:str, "b\r\n"),
                s(:send,
                  s(:lvar, :m), :readpartial,
                  s(:int, 10))),
              s(:send, nil, :assert_equal,
                s(:str, "a\n"),
                s(:send,
                  s(:lvar, :s), :readpartial,
                  s(:int, 10))),
              s(:send,
                s(:lvar, :s), :echo=,
                s(:true)),
              s(:send, nil, :assert_send,
                s(:array,
                  s(:lvar, :s),
                  s(:sym, :echo?))),
              s(:send,
                s(:lvar, :m), :print,
                s(:str, "a\n")),
              s(:send, nil, :sleep,
                s(:float, 0.1)),
              s(:send,
                s(:lvar, :s), :print,
                s(:str, "b\n")),
              s(:send, nil, :sleep,
                s(:float, 0.1)),
              s(:send, nil, :assert_equal,
                s(:str, "a\r\nb\r\n"),
                s(:send,
                  s(:lvar, :m), :readpartial,
                  s(:int, 10))),
              s(:send, nil, :assert_equal,
                s(:str, "a\n"),
                s(:send,
                  s(:lvar, :s), :readpartial,
                  s(:int, 10)))))),
        s(:def, :test_getpass,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:const, nil, :IO), :method_defined?,
                s(:str, "getpass")), nil,
              s(:send, nil, :skip)),
            s(:block,
              s(:send, nil, :run_pty,
                s(:str, "p IO.console.getpass('> ')")),
              s(:args,
                s(:arg, :r),
                s(:arg, :w)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:str, "> "),
                  s(:send,
                    s(:lvar, :r), :readpartial,
                    s(:int, 10))),
                s(:send,
                  s(:lvar, :w), :print,
                  s(:str, "asdf\n")),
                s(:send, nil, :sleep,
                  s(:int, 1)),
                s(:send, nil, :assert_equal,
                  s(:str, "\r\n"),
                  s(:send,
                    s(:lvar, :r), :gets)),
                s(:send, nil, :assert_equal,
                  s(:str, "\"asdf\""),
                  s(:send,
                    s(:send,
                      s(:lvar, :r), :gets), :chomp)))))),
        s(:def, :test_iflush,
          s(:args),
          s(:block,
            s(:send, nil, :helper),
            s(:args,
              s(:arg, :m),
              s(:arg, :s)),
            s(:begin,
              s(:send,
                s(:lvar, :m), :print,
                s(:str, "a")),
              s(:send,
                s(:lvar, :s), :iflush),
              s(:send,
                s(:lvar, :m), :print,
                s(:str, "b\n")),
              s(:send, nil, :assert_equal,
                s(:str, "b\n"),
                s(:send,
                  s(:lvar, :s), :readpartial,
                  s(:int, 10)))))),
        s(:def, :test_oflush,
          s(:args),
          s(:block,
            s(:send, nil, :helper),
            s(:args,
              s(:arg, :m),
              s(:arg, :s)),
            s(:begin,
              s(:send,
                s(:lvar, :s), :print,
                s(:str, "a")),
              s(:send,
                s(:lvar, :s), :oflush),
              s(:send,
                s(:lvar, :s), :print,
                s(:str, "b")),
              s(:send, nil, :assert_include,
                s(:array,
                  s(:str, "b"),
                  s(:str, "ab")),
                s(:send,
                  s(:lvar, :m), :readpartial,
                  s(:int, 10)))))),
        s(:def, :test_ioflush,
          s(:args),
          s(:block,
            s(:send, nil, :helper),
            s(:args,
              s(:arg, :m),
              s(:arg, :s)),
            s(:begin,
              s(:send,
                s(:lvar, :m), :print,
                s(:str, "a")),
              s(:send,
                s(:lvar, :s), :ioflush),
              s(:send,
                s(:lvar, :m), :print,
                s(:str, "b\n")),
              s(:send, nil, :assert_equal,
                s(:str, "b\n"),
                s(:send,
                  s(:lvar, :s), :readpartial,
                  s(:int, 10)))))),
        s(:def, :test_ioflush2,
          s(:args),
          s(:block,
            s(:send, nil, :helper),
            s(:args,
              s(:arg, :m),
              s(:arg, :s)),
            s(:begin,
              s(:send,
                s(:lvar, :s), :print,
                s(:str, "a")),
              s(:send,
                s(:lvar, :s), :ioflush),
              s(:send,
                s(:lvar, :s), :print,
                s(:str, "b")),
              s(:send, nil, :assert_include,
                s(:array,
                  s(:str, "b"),
                  s(:str, "ab")),
                s(:send,
                  s(:lvar, :m), :readpartial,
                  s(:int, 10)))))),
        s(:def, :test_winsize,
          s(:args),
          s(:block,
            s(:send, nil, :helper),
            s(:args,
              s(:arg, :m),
              s(:arg, :s)),
            s(:kwbegin,
              s(:rescue,
                s(:send, nil, :assert_equal,
                  s(:array,
                    s(:int, 0),
                    s(:int, 0)),
                  s(:send,
                    s(:lvar, :s), :winsize)),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Errno), :EINVAL)), nil, nil), nil)))),
        s(:if,
          s(:send,
            s(:const, nil, :IO), :console),
          s(:begin,
            s(:def, :test_close,
              s(:args),
              s(:ensure,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:const, nil, :IO), :console), :close),
                  s(:send, nil, :assert_kind_of,
                    s(:const, nil, :IO),
                    s(:send,
                      s(:const, nil, :IO), :console)),
                  s(:block,
                    s(:send, nil, :assert_nothing_raised,
                      s(:const, nil, :IOError)),
                    s(:args),
                    s(:send,
                      s(:send,
                        s(:const, nil, :IO), :console), :fileno)),
                  s(:send,
                    s(:const, nil, :IO), :console,
                    s(:sym, :close)),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:const, nil, :IO), :console,
                      s(:sym, :tty?)))),
                s(:send,
                  s(:const, nil, :IO), :console,
                  s(:sym, :close)))),
            s(:def, :test_sync,
              s(:args),
              s(:ensure,
                s(:send, nil, :assert,
                  s(:send,
                    s(:send,
                      s(:const, nil, :IO), :console), :sync),
                  s(:str, "console should be unbuffered")),
                s(:send,
                  s(:const, nil, :IO), :console,
                  s(:sym, :close))))),
          s(:begin,
            s(:def, :test_close,
              s(:args),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:array,
                    s(:str, "true")),
                  s(:send, nil, :run_pty,
                    s(:str, "IO.console.close; p IO.console.fileno >= 0"))),
                s(:send, nil, :assert_equal,
                  s(:array,
                    s(:str, "true")),
                  s(:send, nil, :run_pty,
                    s(:str, "IO.console(:close); p IO.console(:tty?)"))))),
            s(:def, :test_sync,
              s(:args),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "true")),
                s(:send, nil, :run_pty,
                  s(:str, "p IO.console.sync")))))),
        s(:send, nil, :private),
        s(:def, :helper,
          s(:args),
          s(:ensure,
            s(:rescue,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :m),
                  s(:lvasgn, :s)),
                s(:send,
                  s(:const, nil, :PTY), :open)),
              s(:resbody,
                s(:array,
                  s(:const, nil, :RuntimeError)), nil,
                s(:send, nil, :skip,
                  s(:gvar, :$!))),
              s(:yield,
                s(:lvar, :m),
                s(:lvar, :s))),
            s(:begin,
              s(:if,
                s(:lvar, :m),
                s(:send,
                  s(:lvar, :m), :close), nil),
              s(:if,
                s(:lvar, :s),
                s(:send,
                  s(:lvar, :s), :close), nil)))),
        s(:def, :run_pty,
          s(:args,
            s(:arg, :src),
            s(:optarg, :n,
              s(:int, 1))),
          s(:ensure,
            s(:rescue,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :r),
                  s(:lvasgn, :w),
                  s(:lvasgn, :pid)),
                s(:send,
                  s(:const, nil, :PTY), :spawn,
                  s(:send,
                    s(:const, nil, :EnvUtil), :rubybin),
                  s(:str, "-rio/console"),
                  s(:str, "-e"),
                  s(:lvar, :src))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :RuntimeError)), nil,
                s(:send, nil, :skip,
                  s(:gvar, :$!))),
              s(:if,
                s(:send, nil, :block_given?),
                s(:yield,
                  s(:lvar, :r),
                  s(:lvar, :w),
                  s(:lvar, :pid)),
                s(:begin,
                  s(:lvasgn, :result,
                    s(:array)),
                  s(:block,
                    s(:send,
                      s(:lvar, :n), :times),
                    s(:args),
                    s(:send,
                      s(:lvar, :result), :<<,
                      s(:send,
                        s(:send,
                          s(:lvar, :r), :gets), :chomp))),
                  s(:lvar, :result)))),
            s(:begin,
              s(:if,
                s(:lvar, :r),
                s(:send,
                  s(:lvar, :r), :close), nil),
              s(:if,
                s(:lvar, :w),
                s(:send,
                  s(:lvar, :w), :close), nil),
              s(:if,
                s(:lvar, :pid),
                s(:send,
                  s(:const, nil, :Process), :wait,
                  s(:lvar, :pid)), nil)))))), nil),
  s(:if,
    s(:defined?,
      s(:send,
        s(:const, nil, :IO), :console)),
    s(:class,
      s(:const, nil, :TestIO_Console),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:case, nil,
          s(:when,
            s(:send,
              s(:const, nil, :Process), :respond_to?,
              s(:sym, :daemon)),
            s(:lvasgn, :noctty,
              s(:array,
                s(:send,
                  s(:const, nil, :EnvUtil), :rubybin),
                s(:str, "-e"),
                s(:str, "Process.daemon(true)")))),
          s(:when,
            s(:send,
              s(:send,
                s(:begin,
                  s(:lvasgn, :rubyw,
                    s(:send,
                      s(:const,
                        s(:const, nil, :RbConfig), :CONFIG), :[],
                      s(:str, "RUBYW_INSTALL_NAME")))), :empty?), :!),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :dir),
                  s(:lvasgn, :base)),
                s(:send,
                  s(:const, nil, :File), :split,
                  s(:send,
                    s(:const, nil, :EnvUtil), :rubybin))),
              s(:lvasgn, :noctty,
                s(:array,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:lvar, :dir),
                    s(:send,
                      s(:lvar, :base), :sub,
                      s(:regexp,
                        s(:str, "ruby"),
                        s(:regopt)),
                      s(:lvar, :rubyw))))))), nil),
        s(:if,
          s(:lvar, :noctty),
          s(:begin,
            s(:send, nil, :require,
              s(:str, "tempfile")),
            s(:casgn, nil, :NOCTTY,
              s(:lvar, :noctty)),
            s(:def, :test_noctty,
              s(:args),
              s(:ensure,
                s(:begin,
                  s(:lvasgn, :t,
                    s(:send,
                      s(:const, nil, :Tempfile), :new,
                      s(:str, "noctty_out"))),
                  s(:send,
                    s(:lvar, :t), :close),
                  s(:lvasgn, :t2,
                    s(:send,
                      s(:const, nil, :Tempfile), :new,
                      s(:str, "noctty_run"))),
                  s(:send,
                    s(:lvar, :t2), :close),
                  s(:lvasgn, :cmd,
                    s(:array,
                      s(:splat,
                        s(:send,
                          s(:const, nil, :NOCTTY), :[],
                          s(:irange,
                            s(:int, 1),
                            s(:int, -1)))),
                      s(:str, "-e"),
                      s(:str, "open(ARGV[0], \"w\") {|f|"),
                      s(:str, "-e"),
                      s(:str, "STDOUT.reopen(f)"),
                      s(:str, "-e"),
                      s(:str, "STDERR.reopen(f)"),
                      s(:str, "-e"),
                      s(:str, "require \"io/console\""),
                      s(:str, "-e"),
                      s(:str, "f.puts IO.console.inspect"),
                      s(:str, "-e"),
                      s(:str, "f.flush"),
                      s(:str, "-e"),
                      s(:str, "File.unlink(ARGV[1])"),
                      s(:str, "-e"),
                      s(:str, "}"),
                      s(:str, "--"),
                      s(:send,
                        s(:lvar, :t), :path),
                      s(:send,
                        s(:lvar, :t2), :path))),
                  s(:send, nil, :assert_ruby_status,
                    s(:lvar, :cmd),
                    s(:hash,
                      s(:pair,
                        s(:sym, :rubybin),
                        s(:send,
                          s(:const, nil, :NOCTTY), :[],
                          s(:int, 0))))),
                  s(:block,
                    s(:send,
                      s(:int, 30), :times),
                    s(:args),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:const, nil, :File), :exist?,
                          s(:send,
                            s(:lvar, :t2), :path)), nil,
                        s(:break)),
                      s(:send, nil, :sleep,
                        s(:float, 0.1)))),
                  s(:send,
                    s(:lvar, :t), :open),
                  s(:send, nil, :assert_equal,
                    s(:str, "nil"),
                    s(:send,
                      s(:send,
                        s(:lvar, :t), :gets,
                        s(:nil)), :chomp))),
                s(:begin,
                  s(:if,
                    s(:and,
                      s(:lvar, :t),
                      s(:send,
                        s(:send,
                          s(:lvar, :t), :closed?), :!)),
                    s(:send,
                      s(:lvar, :t), :close!), nil),
                  s(:send,
                    s(:lvar, :t2), :close!))))), nil))), nil),
  s(:class,
    s(:const, nil, :TestIO_Console),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:def, :test_stringio_getch,
      s(:args),
      s(:begin,
        s(:send, nil, :assert_separately,
          s(:array,
            s(:str, "--disable=gems"),
            s(:str, "-rstringio"),
            s(:str, "-rio/console")),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "      assert_operator(StringIO, :method_defined?, :getch)\n"),
            s(:str, "    "))),
        s(:send, nil, :assert_separately,
          s(:array,
            s(:str, "--disable=gems"),
            s(:str, "-rio/console"),
            s(:str, "-rstringio")),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "      assert_operator(StringIO, :method_defined?, :getch)\n"),
            s(:str, "    "))),
        s(:send, nil, :assert_separately,
          s(:array,
            s(:str, "--disable=gems"),
            s(:str, "-rstringio")),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "      assert_not_operator(StringIO, :method_defined?, :getch)\n"),
            s(:str, "    ")))))))
