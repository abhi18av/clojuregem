s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "open3")),
  s(:class,
    s(:const, nil, :TestOpen3),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :RUBY,
        s(:send,
          s(:const, nil, :EnvUtil), :rubybin)),
      s(:def, :test_exit_status,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :Open3), :popen3,
              s(:const, nil, :RUBY),
              s(:str, "-e"),
              s(:str, "exit true")),
            s(:args,
              s(:arg, :i),
              s(:arg, :o),
              s(:arg, :e),
              s(:arg, :t)),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:send,
                  s(:lvar, :t), :value), :success?))),
          s(:block,
            s(:send,
              s(:const, nil, :Open3), :popen3,
              s(:const, nil, :RUBY),
              s(:str, "-e"),
              s(:str, "exit false")),
            s(:args,
              s(:arg, :i),
              s(:arg, :o),
              s(:arg, :e),
              s(:arg, :t)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:send,
                  s(:lvar, :t), :value), :success?))))),
      s(:def, :test_stdin,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :Open3), :popen3,
              s(:const, nil, :RUBY),
              s(:str, "-e"),
              s(:str, "exit STDIN.gets.chomp == \"t\"")),
            s(:args,
              s(:arg, :i),
              s(:arg, :o),
              s(:arg, :e),
              s(:arg, :t)),
            s(:begin,
              s(:send,
                s(:lvar, :i), :puts,
                s(:str, "t")),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:send,
                    s(:lvar, :t), :value), :success?)))),
          s(:block,
            s(:send,
              s(:const, nil, :Open3), :popen3,
              s(:const, nil, :RUBY),
              s(:str, "-e"),
              s(:str, "exit STDIN.gets.chomp == \"t\"")),
            s(:args,
              s(:arg, :i),
              s(:arg, :o),
              s(:arg, :e),
              s(:arg, :t)),
            s(:begin,
              s(:send,
                s(:lvar, :i), :puts,
                s(:str, "f")),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:send,
                    s(:lvar, :t), :value), :success?)))))),
      s(:def, :test_stdout,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Open3), :popen3,
            s(:const, nil, :RUBY),
            s(:str, "-e"),
            s(:str, "STDOUT.print \"foo\"")),
          s(:args,
            s(:arg, :i),
            s(:arg, :o),
            s(:arg, :e),
            s(:arg, :t)),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:lvar, :o), :read)))),
      s(:def, :test_stderr,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Open3), :popen3,
            s(:const, nil, :RUBY),
            s(:str, "-e"),
            s(:str, "STDERR.print \"bar\"")),
          s(:args,
            s(:arg, :i),
            s(:arg, :o),
            s(:arg, :e),
            s(:arg, :t)),
          s(:send, nil, :assert_equal,
            s(:str, "bar"),
            s(:send,
              s(:lvar, :e), :read)))),
      s(:def, :test_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:block,
              s(:send,
                s(:const, nil, :Open3), :popen3,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "STDOUT.print STDIN.read")),
              s(:args,
                s(:arg, :i),
                s(:arg, :o),
                s(:arg, :e),
                s(:arg, :t)),
              s(:begin,
                s(:send,
                  s(:lvar, :i), :print,
                  s(:str, "baz")),
                s(:send,
                  s(:lvar, :i), :close),
                s(:send, nil, :assert_equal,
                  s(:str, "baz"),
                  s(:send,
                    s(:lvar, :o), :read)),
                s(:str, "qux")))),
          s(:send, nil, :assert_equal,
            s(:str, "qux"),
            s(:lvar, :r)))),
      s(:def, :test_noblock,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :i),
                s(:lvasgn, :o),
                s(:lvasgn, :e),
                s(:lvasgn, :t)),
              s(:send,
                s(:const, nil, :Open3), :popen3,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "STDOUT.print STDIN.read"))),
            s(:send,
              s(:lvar, :i), :print,
              s(:str, "baz")),
            s(:send,
              s(:lvar, :i), :close),
            s(:send, nil, :assert_equal,
              s(:str, "baz"),
              s(:send,
                s(:lvar, :o), :read))),
          s(:begin,
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :i), :closed?), :!),
              s(:send,
                s(:lvar, :i), :close), nil),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :o), :closed?), :!),
              s(:send,
                s(:lvar, :o), :close), nil),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :e), :closed?), :!),
              s(:send,
                s(:lvar, :e), :close), nil),
            s(:send,
              s(:lvar, :t), :join)))),
      s(:def, :test_commandline,
        s(:args),
        s(:begin,
          s(:lvasgn, :commandline,
            s(:str, "echo quux\n")),
          s(:block,
            s(:send,
              s(:const, nil, :Open3), :popen3,
              s(:lvar, :commandline)),
            s(:args,
              s(:arg, :i),
              s(:arg, :o),
              s(:arg, :e),
              s(:arg, :t)),
            s(:send, nil, :assert_equal,
              s(:str, "quux\n"),
              s(:send,
                s(:lvar, :o), :read))))),
      s(:def, :test_pid,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Open3), :popen3,
            s(:const, nil, :RUBY),
            s(:str, "-e"),
            s(:str, "print $$")),
          s(:args,
            s(:arg, :i),
            s(:arg, :o),
            s(:arg, :e),
            s(:arg, :t)),
          s(:begin,
            s(:lvasgn, :pid,
              s(:send,
                s(:send,
                  s(:lvar, :o), :read), :to_i)),
            s(:send, nil, :assert_equal,
              s(:lvar, :pid),
              s(:send,
                s(:lvar, :t), :[],
                s(:sym, :pid))),
            s(:send, nil, :assert_equal,
              s(:lvar, :pid),
              s(:send,
                s(:lvar, :t), :pid))))),
      s(:def, :test_env,
        s(:args),
        s(:lvasgn, :result,
          s(:block,
            s(:send,
              s(:const, nil, :Open3), :popen3,
              s(:hash,
                s(:pair,
                  s(:str, "A"),
                  s(:str, "B")),
                s(:pair,
                  s(:str, "C"),
                  s(:str, "D"))),
              s(:const, nil, :RUBY),
              s(:dstr,
                s(:str, "-e"),
                s(:str, "p ENV[\"A\"]"))),
            s(:args,
              s(:arg, :i),
              s(:arg, :out),
              s(:arg, :err),
              s(:arg, :thr)),
            s(:begin,
              s(:lvasgn, :output,
                s(:send,
                  s(:lvar, :out), :read)),
              s(:send, nil, :assert_equal,
                s(:str, "\"B\"\n"),
                s(:lvar, :output)))))),
      s(:def, :test_numeric_file_descriptor2,
        s(:args),
        s(:block,
          s(:send, nil, :with_pipe),
          s(:args,
            s(:arg, :r),
            s(:arg, :w)),
          s(:block,
            s(:send,
              s(:const, nil, :Open3), :popen2,
              s(:const, nil, :RUBY),
              s(:str, "-e"),
              s(:str, "STDERR.puts \"foo\""),
              s(:hash,
                s(:pair,
                  s(:int, 2),
                  s(:lvar, :w)))),
            s(:args,
              s(:arg, :i),
              s(:arg, :o),
              s(:arg, :t)),
            s(:send, nil, :assert_equal,
              s(:str, "foo\n"),
              s(:send,
                s(:lvar, :r), :gets))))),
      s(:def, :test_numeric_file_descriptor3,
        s(:args),
        s(:begin,
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "mswin|mingw"),
                s(:regopt)),
              s(:const, nil, :RUBY_PLATFORM)),
            s(:send, nil, :skip,
              s(:str, "passing FDs bigger than 2 is not supported on Windows")), nil),
          s(:block,
            s(:send, nil, :with_pipe),
            s(:args,
              s(:arg, :r),
              s(:arg, :w)),
            s(:block,
              s(:send,
                s(:const, nil, :Open3), :popen3,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "IO.open(3).puts \"foo\""),
                s(:hash,
                  s(:pair,
                    s(:int, 3),
                    s(:lvar, :w)))),
              s(:args,
                s(:arg, :i),
                s(:arg, :o),
                s(:arg, :e),
                s(:arg, :t)),
              s(:send, nil, :assert_equal,
                s(:str, "foo\n"),
                s(:send,
                  s(:lvar, :r), :gets),
                s(:str, "[GH-808] [ruby-core:67347] [Bug #10699]")))))),
      s(:def, :with_pipe,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :r),
                s(:lvasgn, :w)),
              s(:send,
                s(:const, nil, :IO), :pipe)),
            s(:yield,
              s(:lvar, :r),
              s(:lvar, :w))),
          s(:begin,
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :r), :closed?), :!),
              s(:send,
                s(:lvar, :r), :close), nil),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :w), :closed?), :!),
              s(:send,
                s(:lvar, :w), :close), nil)))),
      s(:def, :with_reopen,
        s(:args,
          s(:arg, :io),
          s(:arg, :arg)),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :old,
              s(:send,
                s(:lvar, :io), :dup)),
            s(:send,
              s(:lvar, :io), :reopen,
              s(:lvar, :arg)),
            s(:yield,
              s(:lvar, :old))),
          s(:begin,
            s(:send,
              s(:lvar, :io), :reopen,
              s(:lvar, :old)),
            s(:if,
              s(:and,
                s(:lvar, :old),
                s(:send,
                  s(:send,
                    s(:lvar, :old), :closed?), :!)),
              s(:send,
                s(:lvar, :old), :close), nil)))),
      s(:def, :test_popen2,
        s(:args),
        s(:block,
          s(:send, nil, :with_pipe),
          s(:args,
            s(:arg, :r),
            s(:arg, :w)),
          s(:block,
            s(:send, nil, :with_reopen,
              s(:const, nil, :STDERR),
              s(:lvar, :w)),
            s(:args,
              s(:arg, :old)),
            s(:begin,
              s(:send,
                s(:lvar, :w), :close),
              s(:block,
                s(:send,
                  s(:const, nil, :Open3), :popen2,
                  s(:const, nil, :RUBY),
                  s(:str, "-e"),
                  s(:str, "s=STDIN.read; STDOUT.print s+\"o\"; STDERR.print s+\"e\"")),
                s(:args,
                  s(:arg, :i),
                  s(:arg, :o),
                  s(:arg, :t)),
                s(:begin,
                  s(:send, nil, :assert_kind_of,
                    s(:const, nil, :Thread),
                    s(:lvar, :t)),
                  s(:send,
                    s(:lvar, :i), :print,
                    s(:str, "z")),
                  s(:send,
                    s(:lvar, :i), :close),
                  s(:send,
                    s(:const, nil, :STDERR), :reopen,
                    s(:lvar, :old)),
                  s(:send, nil, :assert_equal,
                    s(:str, "zo"),
                    s(:send,
                      s(:lvar, :o), :read)),
                  s(:send, nil, :assert_equal,
                    s(:str, "ze"),
                    s(:send,
                      s(:lvar, :r), :read)))))))),
      s(:def, :test_popen2e,
        s(:args),
        s(:block,
          s(:send, nil, :with_pipe),
          s(:args,
            s(:arg, :r),
            s(:arg, :w)),
          s(:block,
            s(:send, nil, :with_reopen,
              s(:const, nil, :STDERR),
              s(:lvar, :w)),
            s(:args,
              s(:arg, :old)),
            s(:begin,
              s(:send,
                s(:lvar, :w), :close),
              s(:block,
                s(:send,
                  s(:const, nil, :Open3), :popen2e,
                  s(:const, nil, :RUBY),
                  s(:str, "-e"),
                  s(:str, "s=STDIN.read; STDOUT.print s+\"o\"; STDOUT.flush; STDERR.print s+\"e\"")),
                s(:args,
                  s(:arg, :i),
                  s(:arg, :o),
                  s(:arg, :t)),
                s(:begin,
                  s(:send, nil, :assert_kind_of,
                    s(:const, nil, :Thread),
                    s(:lvar, :t)),
                  s(:send,
                    s(:lvar, :i), :print,
                    s(:str, "y")),
                  s(:send,
                    s(:lvar, :i), :close),
                  s(:send,
                    s(:const, nil, :STDERR), :reopen,
                    s(:lvar, :old)),
                  s(:send, nil, :assert_equal,
                    s(:str, "yoye"),
                    s(:send,
                      s(:lvar, :o), :read)),
                  s(:send, nil, :assert_equal,
                    s(:str, ""),
                    s(:send,
                      s(:lvar, :r), :read)))))))),
      s(:def, :test_capture3,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :o),
              s(:lvasgn, :e),
              s(:lvasgn, :s)),
            s(:send,
              s(:const, nil, :Open3), :capture3,
              s(:const, nil, :RUBY),
              s(:str, "-e"),
              s(:str, "i=STDIN.read; print i+\"o\"; STDOUT.flush; STDERR.print i+\"e\""),
              s(:hash,
                s(:pair,
                  s(:sym, :stdin_data),
                  s(:str, "i"))))),
          s(:send, nil, :assert_equal,
            s(:str, "io"),
            s(:lvar, :o)),
          s(:send, nil, :assert_equal,
            s(:str, "ie"),
            s(:lvar, :e)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :s), :success?)))),
      s(:def, :test_capture3_flip,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :o),
              s(:lvasgn, :e),
              s(:lvasgn, :s)),
            s(:send,
              s(:const, nil, :Open3), :capture3,
              s(:const, nil, :RUBY),
              s(:str, "-e"),
              s(:str, "STDOUT.sync=true; 1000.times { print \"o\"*1000; STDERR.print \"e\"*1000 }"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "o"), :*,
              s(:int, 1000000)),
            s(:lvar, :o)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "e"), :*,
              s(:int, 1000000)),
            s(:lvar, :e)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :s), :success?)))),
      s(:def, :test_capture2,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :o),
              s(:lvasgn, :s)),
            s(:send,
              s(:const, nil, :Open3), :capture2,
              s(:const, nil, :RUBY),
              s(:str, "-e"),
              s(:str, "i=STDIN.read; print i+\"o\""),
              s(:hash,
                s(:pair,
                  s(:sym, :stdin_data),
                  s(:str, "i"))))),
          s(:send, nil, :assert_equal,
            s(:str, "io"),
            s(:lvar, :o)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :s), :success?)))),
      s(:def, :test_capture2e,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :oe),
              s(:lvasgn, :s)),
            s(:send,
              s(:const, nil, :Open3), :capture2e,
              s(:const, nil, :RUBY),
              s(:str, "-e"),
              s(:str, "i=STDIN.read; print i+\"o\"; STDOUT.flush; STDERR.print i+\"e\""),
              s(:hash,
                s(:pair,
                  s(:sym, :stdin_data),
                  s(:str, "i"))))),
          s(:send, nil, :assert_equal,
            s(:str, "ioie"),
            s(:lvar, :oe)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :s), :success?)))),
      s(:def, :test_capture3_stdin_data,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :o),
              s(:lvasgn, :e),
              s(:lvasgn, :s)),
            s(:send,
              s(:const, nil, :Open3), :capture3,
              s(:const, nil, :RUBY),
              s(:str, "-e"),
              s(:str, ""),
              s(:hash,
                s(:pair,
                  s(:sym, :stdin_data),
                  s(:send,
                    s(:str, "z"), :*,
                    s(:begin,
                      s(:send,
                        s(:int, 1024), :*,
                        s(:int, 1024)))))))),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:lvar, :o)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:lvar, :e)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :s), :success?)))),
      s(:def, :test_capture2_stdin_data,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :o),
              s(:lvasgn, :s)),
            s(:send,
              s(:const, nil, :Open3), :capture2,
              s(:const, nil, :RUBY),
              s(:str, "-e"),
              s(:str, ""),
              s(:hash,
                s(:pair,
                  s(:sym, :stdin_data),
                  s(:send,
                    s(:str, "z"), :*,
                    s(:begin,
                      s(:send,
                        s(:int, 1024), :*,
                        s(:int, 1024)))))))),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:lvar, :o)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :s), :success?)))),
      s(:def, :test_capture2e_stdin_data,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :oe),
              s(:lvasgn, :s)),
            s(:send,
              s(:const, nil, :Open3), :capture2e,
              s(:const, nil, :RUBY),
              s(:str, "-e"),
              s(:str, ""),
              s(:hash,
                s(:pair,
                  s(:sym, :stdin_data),
                  s(:send,
                    s(:str, "z"), :*,
                    s(:begin,
                      s(:send,
                        s(:int, 1024), :*,
                        s(:int, 1024)))))))),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:lvar, :oe)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :s), :success?)))),
      s(:def, :test_pipeline_rw,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Open3), :pipeline_rw,
            s(:array,
              s(:const, nil, :RUBY),
              s(:str, "-e"),
              s(:str, "print STDIN.read + \"1\"")),
            s(:array,
              s(:const, nil, :RUBY),
              s(:str, "-e"),
              s(:str, "print STDIN.read + \"2\""))),
          s(:args,
            s(:arg, :i),
            s(:arg, :o),
            s(:arg, :ts)),
          s(:begin,
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :IO),
              s(:lvar, :i)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :IO),
              s(:lvar, :o)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Array),
              s(:lvar, :ts)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :ts), :length)),
            s(:block,
              s(:send,
                s(:lvar, :ts), :each),
              s(:args,
                s(:arg, :t)),
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :Thread),
                s(:lvar, :t))),
            s(:send,
              s(:lvar, :i), :print,
              s(:str, "0")),
            s(:send,
              s(:lvar, :i), :close),
            s(:send, nil, :assert_equal,
              s(:str, "012"),
              s(:send,
                s(:lvar, :o), :read)),
            s(:block,
              s(:send,
                s(:lvar, :ts), :each),
              s(:args,
                s(:arg, :t)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :t), :value), :success?)))))),
      s(:def, :test_pipeline_r,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Open3), :pipeline_r,
            s(:array,
              s(:const, nil, :RUBY),
              s(:str, "-e"),
              s(:str, "print \"1\"")),
            s(:array,
              s(:const, nil, :RUBY),
              s(:str, "-e"),
              s(:str, "print STDIN.read + \"2\""))),
          s(:args,
            s(:arg, :o),
            s(:arg, :ts)),
          s(:begin,
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :IO),
              s(:lvar, :o)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Array),
              s(:lvar, :ts)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :ts), :length)),
            s(:block,
              s(:send,
                s(:lvar, :ts), :each),
              s(:args,
                s(:arg, :t)),
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :Thread),
                s(:lvar, :t))),
            s(:send, nil, :assert_equal,
              s(:str, "12"),
              s(:send,
                s(:lvar, :o), :read)),
            s(:block,
              s(:send,
                s(:lvar, :ts), :each),
              s(:args,
                s(:arg, :t)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :t), :value), :success?)))))),
      s(:def, :test_pipeline_w,
        s(:args),
        s(:begin,
          s(:lvasgn, :command,
            s(:array,
              s(:const, nil, :RUBY),
              s(:str, "-e"),
              s(:str, "s=STDIN.read; print s[1..-1]; exit s[0] == ?t"))),
          s(:lvasgn, :str,
            s(:str, "ttftff")),
          s(:block,
            s(:send,
              s(:const, nil, :Open3), :pipeline_w,
              s(:splat,
                s(:send,
                  s(:array,
                    s(:lvar, :command)), :*,
                  s(:send,
                    s(:lvar, :str), :length)))),
            s(:args,
              s(:arg, :i),
              s(:arg, :ts)),
            s(:begin,
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :IO),
                s(:lvar, :i)),
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :Array),
                s(:lvar, :ts)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :str), :length),
                s(:send,
                  s(:lvar, :ts), :length)),
              s(:block,
                s(:send,
                  s(:lvar, :ts), :each),
                s(:args,
                  s(:arg, :t)),
                s(:send, nil, :assert_kind_of,
                  s(:const, nil, :Thread),
                  s(:lvar, :t))),
              s(:send,
                s(:lvar, :i), :print,
                s(:lvar, :str)),
              s(:send,
                s(:lvar, :i), :close),
              s(:block,
                s(:send,
                  s(:lvar, :ts), :each_with_index),
                s(:args,
                  s(:arg, :t),
                  s(:arg, :ii)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:send,
                      s(:lvar, :str), :[],
                      s(:lvar, :ii)), :==,
                    s(:str, "t")),
                  s(:send,
                    s(:send,
                      s(:lvar, :t), :value), :success?))))))),
      s(:def, :test_pipeline_start,
        s(:args),
        s(:begin,
          s(:lvasgn, :command,
            s(:array,
              s(:const, nil, :RUBY),
              s(:str, "-e"),
              s(:str, "s=STDIN.read; print s[1..-1]; exit s[0] == ?t"))),
          s(:lvasgn, :str,
            s(:str, "ttftff")),
          s(:block,
            s(:send,
              s(:const, nil, :Open3), :pipeline_start,
              s(:array,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "print ARGV[0]"),
                s(:lvar, :str)),
              s(:splat,
                s(:begin,
                  s(:send,
                    s(:array,
                      s(:lvar, :command)), :*,
                    s(:send,
                      s(:lvar, :str), :length))))),
            s(:args,
              s(:arg, :ts)),
            s(:begin,
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :Array),
                s(:lvar, :ts)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:lvar, :str), :length), :+,
                  s(:int, 1)),
                s(:send,
                  s(:lvar, :ts), :length)),
              s(:block,
                s(:send,
                  s(:lvar, :ts), :each),
                s(:args,
                  s(:arg, :t)),
                s(:send, nil, :assert_kind_of,
                  s(:const, nil, :Thread),
                  s(:lvar, :t))),
              s(:block,
                s(:send,
                  s(:lvar, :ts), :each_with_index),
                s(:args,
                  s(:arg, :t),
                  s(:arg, :i)),
                s(:if,
                  s(:send,
                    s(:lvar, :i), :==,
                    s(:int, 0)),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:send,
                        s(:lvar, :t), :value), :success?)),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:send,
                        s(:lvar, :str), :[],
                        s(:send,
                          s(:lvar, :i), :-,
                          s(:int, 1))), :==,
                      s(:str, "t")),
                    s(:send,
                      s(:send,
                        s(:lvar, :t), :value), :success?)))))))),
      s(:def, :test_pipeline_start_noblock,
        s(:args),
        s(:begin,
          s(:lvasgn, :ts,
            s(:send,
              s(:const, nil, :Open3), :pipeline_start,
              s(:array,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "")))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Array),
            s(:lvar, :ts)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :ts), :length)),
          s(:block,
            s(:send,
              s(:lvar, :ts), :each),
            s(:args,
              s(:arg, :t)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Thread),
              s(:lvar, :t))),
          s(:lvasgn, :t,
            s(:send,
              s(:lvar, :ts), :[],
              s(:int, 0))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :t), :value), :success?)))),
      s(:def, :test_pipeline,
        s(:args),
        s(:begin,
          s(:lvasgn, :command,
            s(:array,
              s(:const, nil, :RUBY),
              s(:str, "-e"),
              s(:str, "s=STDIN.read; print s[1..-1]; exit s[0] == ?t"))),
          s(:lvasgn, :str,
            s(:str, "ttftff")),
          s(:lvasgn, :ss,
            s(:send,
              s(:const, nil, :Open3), :pipeline,
              s(:array,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "print ARGV[0]"),
                s(:lvar, :str)),
              s(:splat,
                s(:begin,
                  s(:send,
                    s(:array,
                      s(:lvar, :command)), :*,
                    s(:send,
                      s(:lvar, :str), :length)))))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Array),
            s(:lvar, :ss)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :str), :length), :+,
              s(:int, 1)),
            s(:send,
              s(:lvar, :ss), :length)),
          s(:block,
            s(:send,
              s(:lvar, :ss), :each),
            s(:args,
              s(:arg, :s)),
            s(:send, nil, :assert_kind_of,
              s(:const,
                s(:const, nil, :Process), :Status),
              s(:lvar, :s))),
          s(:block,
            s(:send,
              s(:lvar, :ss), :each_with_index),
            s(:args,
              s(:arg, :s),
              s(:arg, :i)),
            s(:if,
              s(:send,
                s(:lvar, :i), :==,
                s(:int, 0)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :s), :success?)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:lvar, :str), :[],
                    s(:send,
                      s(:lvar, :i), :-,
                      s(:int, 1))), :==,
                  s(:str, "t")),
                s(:send,
                  s(:lvar, :s), :success?)))))))))
