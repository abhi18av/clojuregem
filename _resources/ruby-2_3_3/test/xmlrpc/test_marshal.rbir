s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "xmlrpc/marshal")),
  s(:module,
    s(:const, nil, :TestXMLRPC),
    s(:class,
      s(:const, nil, :Test_Marshal),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:class,
          s(:const, nil, :Person), nil,
          s(:begin,
            s(:send, nil, :include,
              s(:const,
                s(:const, nil, :XMLRPC), :Marshallable)),
            s(:send, nil, :attr_reader,
              s(:sym, :name)),
            s(:def, :initialize,
              s(:args,
                s(:arg, :name)),
              s(:ivasgn, :@name,
                s(:lvar, :name))))),
        s(:def, :test1_dump_response,
          s(:args),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :XMLRPC), :Marshal), :dump_response,
              s(:str, "arg")))),
        s(:def, :test1_dump_call,
          s(:args),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :XMLRPC), :Marshal), :dump_call,
              s(:str, "methodName"),
              s(:str, "arg")))),
        s(:def, :test2_dump_load_response,
          s(:args),
          s(:begin,
            s(:lvasgn, :value,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3),
                s(:hash,
                  s(:pair,
                    s(:str, "test"),
                    s(:true))),
                s(:float, 3.4))),
            s(:lvasgn, :res,
              s(:send,
                s(:const,
                  s(:const, nil, :XMLRPC), :Marshal), :dump_response,
                s(:lvar, :value))),
            s(:send, nil, :assert_equal,
              s(:lvar, :value),
              s(:send,
                s(:const,
                  s(:const, nil, :XMLRPC), :Marshal), :load_response,
                s(:lvar, :res))))),
        s(:def, :test2_dump_load_call,
          s(:args),
          s(:begin,
            s(:lvasgn, :methodName,
              s(:str, "testMethod")),
            s(:lvasgn, :value,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3),
                s(:hash,
                  s(:pair,
                    s(:str, "test"),
                    s(:true))),
                s(:float, 3.4))),
            s(:lvasgn, :exp,
              s(:array,
                s(:lvar, :methodName),
                s(:array,
                  s(:lvar, :value),
                  s(:lvar, :value)))),
            s(:lvasgn, :res,
              s(:send,
                s(:const,
                  s(:const, nil, :XMLRPC), :Marshal), :dump_call,
                s(:lvar, :methodName),
                s(:lvar, :value),
                s(:lvar, :value))),
            s(:send, nil, :assert_equal,
              s(:lvar, :exp),
              s(:send,
                s(:const,
                  s(:const, nil, :XMLRPC), :Marshal), :load_call,
                s(:lvar, :res))))),
        s(:def, :test_parser_values,
          s(:args),
          s(:begin,
            s(:lvasgn, :v1,
              s(:array,
                s(:int, 1),
                s(:int, -7778),
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 31))), :-@),
                s(:send,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 31)), :-,
                  s(:int, 1)),
                s(:float, 1.0),
                s(:float, 0.0),
                s(:float, -333.0),
                s(:float, 2343434343.0),
                s(:false),
                s(:true),
                s(:true),
                s(:false),
                s(:str, "Hallo"),
                s(:str, "with < and >"),
                s(:str, ""))),
            s(:lvasgn, :v2,
              s(:array,
                s(:array,
                  s(:lvar, :v1),
                  s(:lvar, :v1),
                  s(:lvar, :v1)),
                s(:hash,
                  s(:pair,
                    s(:str, "a"),
                    s(:lvar, :v1))))),
            s(:lvasgn, :v3,
              s(:array,
                s(:send,
                  s(:const,
                    s(:const, nil, :XMLRPC), :Base64), :new,
                  s(:send,
                    s(:str, "\u0001"), :*,
                    s(:int, 1000))),
                s(:sym, :aSymbol),
                s(:sym, :anotherSym))),
            s(:lvasgn, :v3_exp,
              s(:array,
                s(:send,
                  s(:str, "\u0001"), :*,
                  s(:int, 1000)),
                s(:str, "aSymbol"),
                s(:str, "anotherSym"))),
            s(:lvasgn, :person,
              s(:send,
                s(:const, nil, :Person), :new,
                s(:str, "Michael"))),
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :XMLRPC), :XMLParser), :each_installed_parser),
              s(:args,
                s(:arg, :parser)),
              s(:begin,
                s(:lvasgn, :m,
                  s(:send,
                    s(:const,
                      s(:const, nil, :XMLRPC), :Marshal), :new,
                    s(:lvar, :parser))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :v1),
                  s(:send,
                    s(:lvar, :m), :load_response,
                    s(:send,
                      s(:lvar, :m), :dump_response,
                      s(:lvar, :v1)))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :v2),
                  s(:send,
                    s(:lvar, :m), :load_response,
                    s(:send,
                      s(:lvar, :m), :dump_response,
                      s(:lvar, :v2)))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :v3_exp),
                  s(:send,
                    s(:lvar, :m), :load_response,
                    s(:send,
                      s(:lvar, :m), :dump_response,
                      s(:lvar, :v3)))),
                s(:lvasgn, :pers,
                  s(:send,
                    s(:lvar, :m), :load_response,
                    s(:send,
                      s(:lvar, :m), :dump_response,
                      s(:lvar, :person)))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:lvar, :pers), :is_a?,
                    s(:const, nil, :Person))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:send,
                      s(:lvar, :person), :name), :==,
                    s(:send,
                      s(:lvar, :pers), :name))))))),
        s(:def, :test_parser_invalid_values,
          s(:args),
          s(:begin,
            s(:lvasgn, :values,
              s(:array,
                s(:send,
                  s(:int, -1), :-,
                  s(:begin,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 31)))),
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 31)),
                s(:const,
                  s(:const, nil, :Float), :INFINITY),
                s(:send,
                  s(:const,
                    s(:const, nil, :Float), :INFINITY), :-@),
                s(:const,
                  s(:const, nil, :Float), :NAN))),
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :XMLRPC), :XMLParser), :each_installed_parser),
              s(:args,
                s(:arg, :parser)),
              s(:begin,
                s(:lvasgn, :m,
                  s(:send,
                    s(:const,
                      s(:const, nil, :XMLRPC), :Marshal), :new,
                    s(:lvar, :parser))),
                s(:block,
                  s(:send,
                    s(:lvar, :values), :each),
                  s(:args,
                    s(:arg, :v)),
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:const, nil, :RuntimeError),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :v)),
                        s(:str, " shouldn't be dumped, but dumped"))),
                    s(:args),
                    s(:send,
                      s(:lvar, :m), :dump_response,
                      s(:lvar, :v)))))))),
        s(:def, :test_no_params_tag,
          s(:args),
          s(:begin,
            s(:lvasgn, :expect,
              s(:str, "<?xml version=\"1.0\" ?><methodCall><methodName>myMethod</methodName><params/></methodCall>\n")),
            s(:lvasgn, :str,
              s(:send,
                s(:const,
                  s(:const, nil, :XMLRPC), :Marshal), :dump_call,
                s(:str, "myMethod"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expect),
              s(:lvar, :str))))))))
