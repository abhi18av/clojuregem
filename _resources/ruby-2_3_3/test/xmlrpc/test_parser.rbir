s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "xmlrpc/datetime")),
  s(:send, nil, :require,
    s(:str, "xmlrpc/parser")),
  s(:send, nil, :require,
    s(:str, "yaml")),
  s(:module,
    s(:const, nil, :TestXMLRPC),
    s(:begin,
      s(:module,
        s(:const, nil, :GenericParserTest),
        s(:begin,
          s(:def, :datafile,
            s(:args,
              s(:arg, :base)),
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:str, "(string)")),
              s(:str, "data"),
              s(:lvar, :base))),
          s(:def, :load_data,
            s(:args,
              s(:arg, :name)),
            s(:array,
              s(:send,
                s(:const, nil, :File), :read,
                s(:send,
                  s(:send, nil, :datafile,
                    s(:lvar, :name)), :+,
                  s(:str, ".xml"))),
              s(:send,
                s(:const, nil, :YAML), :load,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:send,
                    s(:send, nil, :datafile,
                      s(:lvar, :name)), :+,
                    s(:str, ".expected")))))),
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@xml1),
                  s(:ivasgn, :@expected1)),
                s(:send, nil, :load_data,
                  s(:str, "xml1"))),
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@xml2),
                  s(:ivasgn, :@expected2)),
                s(:send, nil, :load_data,
                  s(:str, "bug_covert"))),
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@xml3),
                  s(:ivasgn, :@expected3)),
                s(:send, nil, :load_data,
                  s(:str, "bug_bool"))),
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@xml4),
                  s(:ivasgn, :@expected4)),
                s(:send, nil, :load_data,
                  s(:str, "value"))),
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@cdata_xml),
                  s(:ivasgn, :@cdata_expected)),
                s(:send, nil, :load_data,
                  s(:str, "bug_cdata"))),
              s(:ivasgn, :@datetime_xml,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:send, nil, :datafile,
                    s(:str, "datetime_iso8601.xml")))),
              s(:ivasgn, :@datetime_expected,
                s(:send,
                  s(:const,
                    s(:const, nil, :XMLRPC), :DateTime), :new,
                  s(:int, 2004),
                  s(:int, 11),
                  s(:int, 5),
                  s(:int, 1),
                  s(:int, 15),
                  s(:int, 23))),
              s(:ivasgn, :@fault_doc,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:send, nil, :datafile,
                    s(:str, "fault.xml")))))),
          s(:def, :test_parseMethodResponse1,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:ivar, :@expected1),
              s(:send,
                s(:ivar, :@p), :parseMethodResponse,
                s(:ivar, :@xml1)))),
          s(:def, :test_parseMethodResponse2,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:ivar, :@expected2),
              s(:send,
                s(:ivar, :@p), :parseMethodResponse,
                s(:ivar, :@xml2)))),
          s(:def, :test_parseMethodResponse3,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:ivar, :@expected3),
              s(:send,
                s(:ivar, :@p), :parseMethodResponse,
                s(:ivar, :@xml3)))),
          s(:def, :test_cdata,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:ivar, :@cdata_expected),
              s(:send,
                s(:ivar, :@p), :parseMethodResponse,
                s(:ivar, :@cdata_xml)))),
          s(:def, :test_dateTime,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:ivar, :@datetime_expected),
              s(:send,
                s(:send,
                  s(:ivar, :@p), :parseMethodResponse,
                  s(:ivar, :@datetime_xml)), :[],
                s(:int, 1)))),
          s(:def, :test_parseMethodCall,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:ivar, :@expected4),
              s(:send,
                s(:ivar, :@p), :parseMethodCall,
                s(:ivar, :@xml4)))),
          s(:def, :test_fault,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :flag),
                  s(:lvasgn, :fault)),
                s(:send,
                  s(:ivar, :@p), :parseMethodResponse,
                  s(:ivar, :@fault_doc))),
              s(:send, nil, :assert_equal,
                s(:lvar, :flag),
                s(:false)),
              s(:if,
                s(:send,
                  s(:lvar, :fault), :is_a?,
                  s(:const,
                    s(:const, nil, :XMLRPC), :FaultException)), nil,
                s(:send, nil, :assert,
                  s(:false),
                  s(:str, "must be an instance of class XMLRPC::FaultException"))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :fault), :faultCode),
                s(:int, 4)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :fault), :faultString),
                s(:str, "an error message")))),
          s(:def, :test_fault_message,
            s(:args),
            s(:begin,
              s(:lvasgn, :fault,
                s(:send,
                  s(:const,
                    s(:const, nil, :XMLRPC), :FaultException), :new,
                  s(:int, 1234),
                  s(:str, "an error message"))),
              s(:send, nil, :assert_equal,
                s(:str, "an error message"),
                s(:send,
                  s(:lvar, :fault), :to_s)),
              s(:send, nil, :assert_equal,
                s(:str, "#<XMLRPC::FaultException: an error message>"),
                s(:send,
                  s(:lvar, :fault), :inspect)))))),
      s(:block,
        s(:send,
          s(:const,
            s(:const, nil, :XMLRPC), :XMLParser), :each_installed_parser),
        s(:args,
          s(:arg, :parser)),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:lvar, :parser), :class)),
          s(:lvasgn, :name,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :klass), :to_s), :split,
                s(:str, "::")), :last)),
          s(:send, nil, :eval,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "    class Test_"),
              s(:begin,
                s(:lvar, :name)),
              s(:str, " < Test::Unit::TestCase\n"),
              s(:str, "      include GenericParserTest\n"),
              s(:str, "\n"),
              s(:str, "      def setup\n"),
              s(:str, "        super\n"),
              s(:str, "        @p = "),
              s(:begin,
                s(:lvar, :klass)),
              s(:str, ".new\n"),
              s(:str, "      end\n"),
              s(:str, "    end\n"),
              s(:str, "  "))))))))
