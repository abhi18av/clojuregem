s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "webrick")),
  s(:send, nil, :require_relative,
    s(:str, "webrick_testing")),
  s(:send, nil, :require,
    s(:str, "xmlrpc/server")),
  s(:send, nil, :require,
    s(:str, "xmlrpc/client")),
  s(:send, nil, :require,
    s(:str, "logger")),
  s(:module,
    s(:const, nil, :TestXMLRPC),
    s(:class,
      s(:const, nil, :Test_Webrick),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :WEBrick_Testing)),
        s(:def, :create_servlet,
          s(:args,
            s(:arg, :server)),
          s(:begin,
            s(:lvasgn, :s,
              s(:send,
                s(:const,
                  s(:const, nil, :XMLRPC), :WEBrickServlet), :new)),
            s(:lvasgn, :basic_auth,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :WEBrick), :HTTPAuth), :BasicAuth), :new,
                s(:hash,
                  s(:pair,
                    s(:sym, :Realm),
                    s(:str, "auth")),
                  s(:pair,
                    s(:sym, :UserDB),
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :WEBrick), :HTTPAuth), :Htpasswd), :new,
                      s(:send,
                        s(:const, nil, :File), :expand_path,
                        s(:str, "./htpasswd"),
                        s(:send,
                          s(:const, nil, :File), :dirname,
                          s(:str, "(string)"))))),
                  s(:pair,
                    s(:sym, :Logger),
                    s(:send,
                      s(:lvar, :server), :logger))))),
            s(:block,
              s(:send,
                s(:sclass,
                  s(:lvar, :s),
                  s(:self)), :send,
                s(:sym, :define_method),
                s(:sym, :service)),
              s(:args,
                s(:arg, :req),
                s(:arg, :res)),
              s(:begin,
                s(:send,
                  s(:lvar, :basic_auth), :authenticate,
                  s(:lvar, :req),
                  s(:lvar, :res)),
                s(:super,
                  s(:lvar, :req),
                  s(:lvar, :res)))),
            s(:block,
              s(:send,
                s(:lvar, :s), :add_handler,
                s(:str, "test.add")),
              s(:args,
                s(:arg, :a),
                s(:arg, :b)),
              s(:send,
                s(:lvar, :a), :+,
                s(:lvar, :b))),
            s(:block,
              s(:send,
                s(:lvar, :s), :add_handler,
                s(:str, "test.div")),
              s(:args,
                s(:arg, :a),
                s(:arg, :b)),
              s(:if,
                s(:send,
                  s(:lvar, :b), :==,
                  s(:int, 0)),
                s(:send, nil, :raise,
                  s(:send,
                    s(:const,
                      s(:const, nil, :XMLRPC), :FaultException), :new,
                    s(:int, 1),
                    s(:str, "division by zero"))),
                s(:send,
                  s(:lvar, :a), :/,
                  s(:lvar, :b)))),
            s(:block,
              s(:send,
                s(:lvar, :s), :set_default_handler),
              s(:args,
                s(:arg, :name),
                s(:restarg, :args)),
              s(:send, nil, :raise,
                s(:send,
                  s(:const,
                    s(:const, nil, :XMLRPC), :FaultException), :new,
                  s(:int, -99),
                  s(:send,
                    s(:dstr,
                      s(:str, "Method "),
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, " missing")), :+,
                    s(:str, " or wrong number of parameters!"))))),
            s(:send,
              s(:lvar, :s), :add_introspection),
            s(:return,
              s(:lvar, :s)))),
        s(:def, :setup_http_server_option,
          s(:args,
            s(:arg, :use_ssl)),
          s(:begin,
            s(:lvasgn, :option,
              s(:hash,
                s(:pair,
                  s(:sym, :BindAddress),
                  s(:str, "localhost")),
                s(:pair,
                  s(:sym, :Port),
                  s(:int, 0)),
                s(:pair,
                  s(:sym, :SSLEnable),
                  s(:lvar, :use_ssl)))),
            s(:if,
              s(:lvar, :use_ssl),
              s(:begin,
                s(:send, nil, :require,
                  s(:str, "webrick/https")),
                s(:send,
                  s(:lvar, :option), :update,
                  s(:hash,
                    s(:pair,
                      s(:sym, :SSLVerifyClient),
                      s(:const,
                        s(:const,
                          s(:const,
                            s(:cbase), :OpenSSL), :SSL), :VERIFY_NONE)),
                    s(:pair,
                      s(:sym, :SSLCertName),
                      s(:array))))), nil),
            s(:lvar, :option))),
        s(:def, :test_client_server,
          s(:args),
          s(:block,
            s(:send,
              s(:array,
                s(:false)), :each),
            s(:args,
              s(:arg, :use_ssl)),
            s(:begin,
              s(:lvasgn, :option,
                s(:send, nil, :setup_http_server_option,
                  s(:lvar, :use_ssl))),
              s(:block,
                s(:send, nil, :with_server,
                  s(:lvar, :option),
                  s(:send, nil, :method,
                    s(:sym, :create_servlet))),
                s(:args,
                  s(:arg, :addr)),
                s(:begin,
                  s(:ivasgn, :@s,
                    s(:send,
                      s(:const,
                        s(:const, nil, :XMLRPC), :Client), :new3,
                      s(:hash,
                        s(:pair,
                          s(:sym, :host),
                          s(:send,
                            s(:lvar, :addr), :ip_address)),
                        s(:pair,
                          s(:sym, :port),
                          s(:send,
                            s(:lvar, :addr), :ip_port)),
                        s(:pair,
                          s(:sym, :use_ssl),
                          s(:lvar, :use_ssl))))),
                  s(:send,
                    s(:ivar, :@s), :user=,
                    s(:str, "admin")),
                  s(:send,
                    s(:ivar, :@s), :password=,
                    s(:str, "admin")),
                  s(:block,
                    s(:send, nil, :silent),
                    s(:args),
                    s(:send, nil, :do_test)),
                  s(:send,
                    s(:send,
                      s(:ivar, :@s), :http), :finish),
                  s(:ivasgn, :@s,
                    s(:send,
                      s(:const,
                        s(:const, nil, :XMLRPC), :Client), :new3,
                      s(:hash,
                        s(:pair,
                          s(:sym, :host),
                          s(:send,
                            s(:lvar, :addr), :ip_address)),
                        s(:pair,
                          s(:sym, :port),
                          s(:send,
                            s(:lvar, :addr), :ip_port)),
                        s(:pair,
                          s(:sym, :use_ssl),
                          s(:lvar, :use_ssl))))),
                  s(:send,
                    s(:ivar, :@s), :user=,
                    s(:str, "01234567890123456789012345678901234567890123456789012345678901234567890123456789")),
                  s(:send,
                    s(:ivar, :@s), :password=,
                    s(:str, "guest")),
                  s(:block,
                    s(:send, nil, :silent),
                    s(:args),
                    s(:send, nil, :do_test)),
                  s(:send,
                    s(:send,
                      s(:ivar, :@s), :http), :finish)))))),
        s(:def, :silent,
          s(:args),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :back),
                    s(:gvasgn, :$VERBOSE)),
                  s(:array,
                    s(:gvar, :$VERBOSE),
                    s(:nil))),
                s(:yield)),
              s(:gvasgn, :$VERBOSE,
                s(:lvar, :back))))),
        s(:def, :do_test,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:int, 9),
              s(:send,
                s(:ivar, :@s), :call,
                s(:str, "test.add"),
                s(:int, 4),
                s(:int, 5))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :XMLRPC), :FaultException)),
              s(:args),
              s(:send,
                s(:ivar, :@s), :call,
                s(:str, "test.div"),
                s(:int, 1),
                s(:int, 0))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :ok),
                s(:lvasgn, :param)),
              s(:send,
                s(:ivar, :@s), :call2,
                s(:str, "test.div"),
                s(:int, 1),
                s(:int, 0))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:lvar, :ok)),
            s(:send, nil, :assert_instance_of,
              s(:const,
                s(:const, nil, :XMLRPC), :FaultException),
              s(:lvar, :param)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :param), :faultCode)),
            s(:send, nil, :assert_equal,
              s(:str, "division by zero"),
              s(:send,
                s(:lvar, :param), :faultString)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :ok),
                s(:lvasgn, :param)),
              s(:send,
                s(:ivar, :@s), :call2,
                s(:str, "test.div"),
                s(:int, 10),
                s(:int, 5))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :ok)),
            s(:send, nil, :assert_equal,
              s(:lvar, :param),
              s(:int, 2)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "test.add"),
                s(:str, "test.div"),
                s(:str, "system.listMethods"),
                s(:str, "system.methodSignature"),
                s(:str, "system.methodHelp")),
              s(:send,
                s(:ivar, :@s), :call,
                s(:str, "system.listMethods"))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :ok),
                s(:lvasgn, :param)),
              s(:send,
                s(:ivar, :@s), :call2,
                s(:str, "test.nonexisting"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:lvar, :ok)),
            s(:send, nil, :assert_equal,
              s(:int, -99),
              s(:send,
                s(:lvar, :param), :faultCode)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :ok),
                s(:lvasgn, :param)),
              s(:send,
                s(:ivar, :@s), :call2,
                s(:str, "test.add"),
                s(:int, 1),
                s(:int, 2),
                s(:int, 3))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:lvar, :ok)),
            s(:send, nil, :assert_equal,
              s(:int, -99),
              s(:send,
                s(:lvar, :param), :faultCode)),
            s(:send, nil, :assert_equal,
              s(:str, "あいうえおかきくけこ"),
              s(:send,
                s(:ivar, :@s), :call,
                s(:str, "test.add"),
                s(:str, "あいうえお"),
                s(:str, "かきくけこ")))))))))
