s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "xmlrpc/client")),
  s(:send, nil, :require,
    s(:str, "net/http")),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "openssl")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:module,
    s(:const, nil, :XMLRPC),
    s(:class,
      s(:const, nil, :ClientTest),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:module,
          s(:const, nil, :Fake),
          s(:begin,
            s(:class,
              s(:const, nil, :HTTP),
              s(:const,
                s(:const, nil, :Net), :HTTP),
              s(:begin,
                s(:sclass,
                  s(:self),
                  s(:def, :new,
                    s(:args,
                      s(:restarg, :args),
                      s(:blockarg, :block)),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Class), :method,
                            s(:sym, :new)), :unbind), :bind,
                        s(:self)), :call,
                      s(:splat,
                        s(:lvar, :args)),
                      s(:block_pass,
                        s(:lvar, :block))))),
                s(:def, :initialize,
                  s(:args,
                    s(:optarg, :responses,
                      s(:hash))),
                  s(:begin,
                    s(:super,
                      s(:str, "127.0.0.1")),
                    s(:ivasgn, :@started,
                      s(:false)),
                    s(:ivasgn, :@responses,
                      s(:lvar, :responses)))),
                s(:def, :started?,
                  s(:args),
                  s(:ivar, :@started)),
                s(:def, :start,
                  s(:args),
                  s(:begin,
                    s(:ivasgn, :@started,
                      s(:true)),
                    s(:if,
                      s(:send, nil, :block_given?),
                      s(:kwbegin,
                        s(:ensure,
                          s(:return,
                            s(:yield,
                              s(:self))),
                          s(:ivasgn, :@started,
                            s(:false)))), nil),
                    s(:self))),
                s(:def, :request_post,
                  s(:args,
                    s(:arg, :path),
                    s(:arg, :request),
                    s(:arg, :headers)),
                  s(:send,
                    s(:send,
                      s(:ivar, :@responses), :[],
                      s(:lvar, :path)), :shift)))),
            s(:class,
              s(:const, nil, :Client),
              s(:const,
                s(:const, nil, :XMLRPC), :Client),
              s(:begin,
                s(:send, nil, :attr_reader,
                  s(:sym, :args),
                  s(:sym, :http)),
                s(:def, :initialize,
                  s(:args,
                    s(:restarg, :args)),
                  s(:begin,
                    s(:ivasgn, :@args,
                      s(:lvar, :args)),
                    s(:zsuper))),
                s(:send, nil, :private),
                s(:def, :net_http,
                  s(:args,
                    s(:arg, :host),
                    s(:arg, :port),
                    s(:arg, :proxy_host),
                    s(:arg, :proxy_port)),
                  s(:send,
                    s(:const, nil, :HTTP), :new)))),
            s(:class,
              s(:const, nil, :Response), nil,
              s(:defs,
                s(:self), :new,
                s(:args,
                  s(:arg, :body),
                  s(:optarg, :fields,
                    s(:array)),
                  s(:optarg, :status,
                    s(:str, "200"))),
                s(:begin,
                  s(:lvasgn, :klass,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Class), :new,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Net), :HTTPResponse), :CODE_TO_OBJ), :[],
                          s(:lvar, :status))),
                      s(:args),
                      s(:def, :initialize,
                        s(:args,
                          s(:restarg, :args)),
                        s(:begin,
                          s(:zsuper),
                          s(:ivasgn, :@read,
                            s(:true)))))),
                  s(:lvasgn, :resp,
                    s(:send,
                      s(:lvar, :klass), :new,
                      s(:str, "1.1"),
                      s(:lvar, :status),
                      s(:str, "OK"))),
                  s(:send,
                    s(:lvar, :resp), :body=,
                    s(:lvar, :body)),
                  s(:block,
                    s(:send,
                      s(:lvar, :fields), :each),
                    s(:args,
                      s(:arg, :k),
                      s(:arg, :v)),
                    s(:send,
                      s(:lvar, :resp), :add_field,
                      s(:lvar, :k),
                      s(:lvar, :v))),
                  s(:lvar, :resp)))))),
        s(:def, :test_new2_host_path_port,
          s(:args),
          s(:begin,
            s(:lvasgn, :client,
              s(:send,
                s(:const,
                  s(:const, nil, :Fake), :Client), :new2,
                s(:str, "http://example.org/foo"))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :host),
                s(:lvasgn, :path),
                s(:lvasgn, :port),
                s(:splat,
                  s(:lvasgn, :rest))),
              s(:send,
                s(:lvar, :client), :args)),
            s(:send, nil, :assert_equal,
              s(:str, "example.org"),
              s(:lvar, :host)),
            s(:send, nil, :assert_equal,
              s(:str, "/foo"),
              s(:lvar, :path)),
            s(:send, nil, :assert_equal,
              s(:int, 80),
              s(:lvar, :port)),
            s(:block,
              s(:send,
                s(:lvar, :rest), :each),
              s(:args,
                s(:arg, :x)),
              s(:send, nil, :refute,
                s(:lvar, :x))))),
        s(:def, :test_new2_custom_port,
          s(:args),
          s(:begin,
            s(:lvasgn, :client,
              s(:send,
                s(:const,
                  s(:const, nil, :Fake), :Client), :new2,
                s(:str, "http://example.org:1234/foo"))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :host),
                s(:lvasgn, :path),
                s(:lvasgn, :port),
                s(:splat,
                  s(:lvasgn, :rest))),
              s(:send,
                s(:lvar, :client), :args)),
            s(:send, nil, :assert_equal,
              s(:str, "example.org"),
              s(:lvar, :host)),
            s(:send, nil, :assert_equal,
              s(:str, "/foo"),
              s(:lvar, :path)),
            s(:send, nil, :assert_equal,
              s(:int, 1234),
              s(:lvar, :port)),
            s(:block,
              s(:send,
                s(:lvar, :rest), :each),
              s(:args,
                s(:arg, :x)),
              s(:send, nil, :refute,
                s(:lvar, :x))))),
        s(:if,
          s(:defined?,
            s(:const, nil, :OpenSSL)),
          s(:def, :test_new2_ssl,
            s(:args),
            s(:begin,
              s(:lvasgn, :client,
                s(:send,
                  s(:const,
                    s(:const, nil, :Fake), :Client), :new2,
                  s(:str, "https://example.org/foo"))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :host),
                  s(:lvasgn, :path),
                  s(:lvasgn, :port),
                  s(:lvasgn, :proxy_host),
                  s(:lvasgn, :proxy_port),
                  s(:lvasgn, :user),
                  s(:lvasgn, :password),
                  s(:lvasgn, :use_ssl),
                  s(:lvasgn, :timeout)),
                s(:send,
                  s(:lvar, :client), :args)),
              s(:send, nil, :assert_equal,
                s(:str, "example.org"),
                s(:lvar, :host)),
              s(:send, nil, :assert_equal,
                s(:str, "/foo"),
                s(:lvar, :path)),
              s(:send, nil, :assert_equal,
                s(:int, 443),
                s(:lvar, :port)),
              s(:send, nil, :assert,
                s(:lvar, :use_ssl)),
              s(:send, nil, :refute,
                s(:lvar, :proxy_host)),
              s(:send, nil, :refute,
                s(:lvar, :proxy_port)),
              s(:send, nil, :refute,
                s(:lvar, :user)),
              s(:send, nil, :refute,
                s(:lvar, :password)),
              s(:send, nil, :refute,
                s(:lvar, :timeout)))), nil),
        s(:if,
          s(:defined?,
            s(:const, nil, :OpenSSL)),
          s(:def, :test_new2_ssl_custom_port,
            s(:args),
            s(:begin,
              s(:lvasgn, :client,
                s(:send,
                  s(:const,
                    s(:const, nil, :Fake), :Client), :new2,
                  s(:str, "https://example.org:1234/foo"))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :host),
                  s(:lvasgn, :path),
                  s(:lvasgn, :port),
                  s(:lvasgn, :proxy_host),
                  s(:lvasgn, :proxy_port),
                  s(:lvasgn, :user),
                  s(:lvasgn, :password),
                  s(:lvasgn, :use_ssl),
                  s(:lvasgn, :timeout)),
                s(:send,
                  s(:lvar, :client), :args)),
              s(:send, nil, :assert_equal,
                s(:str, "example.org"),
                s(:lvar, :host)),
              s(:send, nil, :assert_equal,
                s(:str, "/foo"),
                s(:lvar, :path)),
              s(:send, nil, :assert_equal,
                s(:int, 1234),
                s(:lvar, :port)),
              s(:send, nil, :assert,
                s(:lvar, :use_ssl)),
              s(:send, nil, :refute,
                s(:lvar, :proxy_host)),
              s(:send, nil, :refute,
                s(:lvar, :proxy_port)),
              s(:send, nil, :refute,
                s(:lvar, :user)),
              s(:send, nil, :refute,
                s(:lvar, :password)),
              s(:send, nil, :refute,
                s(:lvar, :timeout)))), nil),
        s(:def, :test_new2_user_password,
          s(:args),
          s(:begin,
            s(:lvasgn, :client,
              s(:send,
                s(:const,
                  s(:const, nil, :Fake), :Client), :new2,
                s(:str, "http://aaron:tenderlove@example.org/foo"))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :host),
                s(:lvasgn, :path),
                s(:lvasgn, :port),
                s(:lvasgn, :proxy_host),
                s(:lvasgn, :proxy_port),
                s(:lvasgn, :user),
                s(:lvasgn, :password),
                s(:lvasgn, :use_ssl),
                s(:lvasgn, :timeout)),
              s(:send,
                s(:lvar, :client), :args)),
            s(:block,
              s(:send,
                s(:array,
                  s(:lvar, :host),
                  s(:lvar, :path),
                  s(:lvar, :port)), :each),
              s(:args,
                s(:arg, :x)),
              s(:send, nil, :assert,
                s(:lvar, :x))),
            s(:send, nil, :assert_equal,
              s(:str, "aaron"),
              s(:lvar, :user)),
            s(:send, nil, :assert_equal,
              s(:str, "tenderlove"),
              s(:lvar, :password)),
            s(:block,
              s(:send,
                s(:array,
                  s(:lvar, :proxy_host),
                  s(:lvar, :proxy_port),
                  s(:lvar, :use_ssl),
                  s(:lvar, :timeout)), :each),
              s(:args,
                s(:arg, :x)),
              s(:send, nil, :refute,
                s(:lvar, :x))))),
        s(:def, :test_new2_proxy_host,
          s(:args),
          s(:begin,
            s(:lvasgn, :client,
              s(:send,
                s(:const,
                  s(:const, nil, :Fake), :Client), :new2,
                s(:str, "http://example.org/foo"),
                s(:str, "example.com"))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :host),
                s(:lvasgn, :path),
                s(:lvasgn, :port),
                s(:lvasgn, :proxy_host),
                s(:lvasgn, :proxy_port),
                s(:lvasgn, :user),
                s(:lvasgn, :password),
                s(:lvasgn, :use_ssl),
                s(:lvasgn, :timeout)),
              s(:send,
                s(:lvar, :client), :args)),
            s(:block,
              s(:send,
                s(:array,
                  s(:lvar, :host),
                  s(:lvar, :path),
                  s(:lvar, :port)), :each),
              s(:args,
                s(:arg, :x)),
              s(:send, nil, :assert,
                s(:lvar, :x))),
            s(:send, nil, :assert_equal,
              s(:str, "example.com"),
              s(:lvar, :proxy_host)),
            s(:block,
              s(:send,
                s(:array,
                  s(:lvar, :user),
                  s(:lvar, :password),
                  s(:lvar, :proxy_port),
                  s(:lvar, :use_ssl),
                  s(:lvar, :timeout)), :each),
              s(:args,
                s(:arg, :x)),
              s(:send, nil, :refute,
                s(:lvar, :x))))),
        s(:def, :test_new2_proxy_port,
          s(:args),
          s(:begin,
            s(:lvasgn, :client,
              s(:send,
                s(:const,
                  s(:const, nil, :Fake), :Client), :new2,
                s(:str, "http://example.org/foo"),
                s(:str, "example.com:1234"))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :host),
                s(:lvasgn, :path),
                s(:lvasgn, :port),
                s(:lvasgn, :proxy_host),
                s(:lvasgn, :proxy_port),
                s(:lvasgn, :user),
                s(:lvasgn, :password),
                s(:lvasgn, :use_ssl),
                s(:lvasgn, :timeout)),
              s(:send,
                s(:lvar, :client), :args)),
            s(:block,
              s(:send,
                s(:array,
                  s(:lvar, :host),
                  s(:lvar, :path),
                  s(:lvar, :port)), :each),
              s(:args,
                s(:arg, :x)),
              s(:send, nil, :assert,
                s(:lvar, :x))),
            s(:send, nil, :assert_equal,
              s(:str, "example.com"),
              s(:lvar, :proxy_host)),
            s(:send, nil, :assert_equal,
              s(:int, 1234),
              s(:lvar, :proxy_port)),
            s(:block,
              s(:send,
                s(:array,
                  s(:lvar, :user),
                  s(:lvar, :password),
                  s(:lvar, :use_ssl),
                  s(:lvar, :timeout)), :each),
              s(:args,
                s(:arg, :x)),
              s(:send, nil, :refute,
                s(:lvar, :x))))),
        s(:def, :test_new2_no_path,
          s(:args),
          s(:begin,
            s(:lvasgn, :client,
              s(:send,
                s(:const,
                  s(:const, nil, :Fake), :Client), :new2,
                s(:str, "http://example.org"))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :host),
                s(:lvasgn, :path),
                s(:lvasgn, :port),
                s(:splat,
                  s(:lvasgn, :rest))),
              s(:send,
                s(:lvar, :client), :args)),
            s(:send, nil, :assert_equal,
              s(:str, "example.org"),
              s(:lvar, :host)),
            s(:send, nil, :assert_nil,
              s(:lvar, :path)),
            s(:send, nil, :assert,
              s(:lvar, :port)),
            s(:block,
              s(:send,
                s(:lvar, :rest), :each),
              s(:args,
                s(:arg, :x)),
              s(:send, nil, :refute,
                s(:lvar, :x))))),
        s(:def, :test_new2_slash_path,
          s(:args),
          s(:begin,
            s(:lvasgn, :client,
              s(:send,
                s(:const,
                  s(:const, nil, :Fake), :Client), :new2,
                s(:str, "http://example.org/"))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :host),
                s(:lvasgn, :path),
                s(:lvasgn, :port),
                s(:splat,
                  s(:lvasgn, :rest))),
              s(:send,
                s(:lvar, :client), :args)),
            s(:send, nil, :assert_equal,
              s(:str, "example.org"),
              s(:lvar, :host)),
            s(:send, nil, :assert_equal,
              s(:str, "/"),
              s(:lvar, :path)),
            s(:send, nil, :assert,
              s(:lvar, :port)),
            s(:block,
              s(:send,
                s(:lvar, :rest), :each),
              s(:args,
                s(:arg, :x)),
              s(:send, nil, :refute,
                s(:lvar, :x))))),
        s(:def, :test_new2_bad_protocol,
          s(:args),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :XMLRPC), :Client), :new2,
              s(:str, "ftp://example.org")))),
        s(:def, :test_new2_bad_uri,
          s(:args),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :XMLRPC), :Client), :new2,
              s(:str, ":::::")))),
        s(:def, :test_new2_path_with_query,
          s(:args),
          s(:begin,
            s(:lvasgn, :client,
              s(:send,
                s(:const,
                  s(:const, nil, :Fake), :Client), :new2,
                s(:str, "http://example.org/foo?bar=baz"))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :host),
                s(:lvasgn, :path),
                s(:lvasgn, :port),
                s(:splat,
                  s(:lvasgn, :rest))),
              s(:send,
                s(:lvar, :client), :args)),
            s(:send, nil, :assert_equal,
              s(:str, "example.org"),
              s(:lvar, :host)),
            s(:send, nil, :assert_equal,
              s(:str, "/foo?bar=baz"),
              s(:lvar, :path)),
            s(:send, nil, :assert,
              s(:lvar, :port)),
            s(:block,
              s(:send,
                s(:lvar, :rest), :each),
              s(:args,
                s(:arg, :x)),
              s(:send, nil, :refute,
                s(:lvar, :x))))),
        s(:def, :test_request,
          s(:args),
          s(:begin,
            s(:lvasgn, :fh,
              s(:send, nil, :read,
                s(:str, "blog.xml"))),
            s(:lvasgn, :responses,
              s(:hash,
                s(:pair,
                  s(:str, "/foo"),
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Fake), :Response), :new,
                      s(:lvar, :fh),
                      s(:array,
                        s(:array,
                          s(:str, "Content-Type"),
                          s(:str, "text/xml")))))))),
            s(:lvasgn, :client,
              s(:send,
                s(:send, nil, :fake_client,
                  s(:lvar, :responses)), :new2,
                s(:str, "http://example.org/foo"))),
            s(:lvasgn, :resp,
              s(:send,
                s(:lvar, :client), :call,
                s(:str, "wp.getUsersBlogs"),
                s(:str, "tlo"),
                s(:str, "omg"))),
            s(:lvasgn, :expected,
              s(:array,
                s(:hash,
                  s(:pair,
                    s(:str, "isAdmin"),
                    s(:true)),
                  s(:pair,
                    s(:str, "url"),
                    s(:str, "http://tenderlovemaking.com/")),
                  s(:pair,
                    s(:str, "blogid"),
                    s(:str, "1")),
                  s(:pair,
                    s(:str, "blogName"),
                    s(:str, "Tender Lovemaking")),
                  s(:pair,
                    s(:str, "xmlrpc"),
                    s(:str, "http://tenderlovemaking.com/xmlrpc.php"))))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:lvar, :resp)))),
        s(:def, :test_async_request,
          s(:args),
          s(:begin,
            s(:lvasgn, :fh,
              s(:send, nil, :read,
                s(:str, "blog.xml"))),
            s(:lvasgn, :responses,
              s(:hash,
                s(:pair,
                  s(:str, "/foo"),
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Fake), :Response), :new,
                      s(:lvar, :fh),
                      s(:array,
                        s(:array,
                          s(:str, "Content-Type"),
                          s(:str, "text/xml")))))))),
            s(:lvasgn, :client,
              s(:send,
                s(:send, nil, :fake_client,
                  s(:lvar, :responses)), :new2,
                s(:str, "http://example.org/foo"))),
            s(:lvasgn, :resp,
              s(:send,
                s(:lvar, :client), :call_async,
                s(:str, "wp.getUsersBlogs"),
                s(:str, "tlo"),
                s(:str, "omg"))),
            s(:lvasgn, :expected,
              s(:array,
                s(:hash,
                  s(:pair,
                    s(:str, "isAdmin"),
                    s(:true)),
                  s(:pair,
                    s(:str, "url"),
                    s(:str, "http://tenderlovemaking.com/")),
                  s(:pair,
                    s(:str, "blogid"),
                    s(:str, "1")),
                  s(:pair,
                    s(:str, "blogName"),
                    s(:str, "Tender Lovemaking")),
                  s(:pair,
                    s(:str, "xmlrpc"),
                    s(:str, "http://tenderlovemaking.com/xmlrpc.php"))))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:lvar, :resp)))),
        s(:def, :test_bad_content_type,
          s(:args),
          s(:begin,
            s(:lvasgn, :fh,
              s(:send, nil, :read,
                s(:str, "blog.xml"))),
            s(:lvasgn, :responses,
              s(:hash,
                s(:pair,
                  s(:str, "/foo"),
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Fake), :Response), :new,
                      s(:lvar, :fh)))))),
            s(:lvasgn, :client,
              s(:send,
                s(:send, nil, :fake_client,
                  s(:lvar, :responses)), :new2,
                s(:str, "http://example.org/foo"))),
            s(:lvasgn, :resp,
              s(:send,
                s(:lvar, :client), :call,
                s(:str, "wp.getUsersBlogs"),
                s(:str, "tlo"),
                s(:str, "omg"))),
            s(:lvasgn, :expected,
              s(:array,
                s(:hash,
                  s(:pair,
                    s(:str, "isAdmin"),
                    s(:true)),
                  s(:pair,
                    s(:str, "url"),
                    s(:str, "http://tenderlovemaking.com/")),
                  s(:pair,
                    s(:str, "blogid"),
                    s(:str, "1")),
                  s(:pair,
                    s(:str, "blogName"),
                    s(:str, "Tender Lovemaking")),
                  s(:pair,
                    s(:str, "xmlrpc"),
                    s(:str, "http://tenderlovemaking.com/xmlrpc.php"))))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:lvar, :resp)))),
        s(:def, :test_i8_tag,
          s(:args),
          s(:begin,
            s(:lvasgn, :fh,
              s(:send,
                s(:send, nil, :read,
                  s(:str, "blog.xml")), :gsub,
                s(:regexp,
                  s(:str, "string"),
                  s(:regopt)),
                s(:str, "i8"))),
            s(:lvasgn, :responses,
              s(:hash,
                s(:pair,
                  s(:str, "/foo"),
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Fake), :Response), :new,
                      s(:lvar, :fh)))))),
            s(:lvasgn, :client,
              s(:send,
                s(:send, nil, :fake_client,
                  s(:lvar, :responses)), :new2,
                s(:str, "http://example.org/foo"))),
            s(:lvasgn, :resp,
              s(:send,
                s(:lvar, :client), :call,
                s(:str, "wp.getUsersBlogs"),
                s(:str, "tlo"),
                s(:str, "omg"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:lvar, :resp), :first), :[],
                s(:str, "blogid"))))),
        s(:def, :test_cookie_simple,
          s(:args),
          s(:begin,
            s(:lvasgn, :client,
              s(:send,
                s(:const,
                  s(:const, nil, :Fake), :Client), :new2,
                s(:str, "http://example.org/cookie"))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :client), :cookie)),
            s(:send,
              s(:lvar, :client), :send,
              s(:sym, :parse_set_cookies),
              s(:array,
                s(:str, "param1=value1"),
                s(:str, "param2=value2"))),
            s(:send, nil, :assert_equal,
              s(:str, "param1=value1; param2=value2"),
              s(:send,
                s(:lvar, :client), :cookie)))),
        s(:def, :test_cookie_override,
          s(:args),
          s(:begin,
            s(:lvasgn, :client,
              s(:send,
                s(:const,
                  s(:const, nil, :Fake), :Client), :new2,
                s(:str, "http://example.org/cookie"))),
            s(:send,
              s(:lvar, :client), :send,
              s(:sym, :parse_set_cookies),
              s(:array,
                s(:str, "param1=value1"),
                s(:str, "param2=value2"),
                s(:str, "param1=value3"))),
            s(:send, nil, :assert_equal,
              s(:str, "param2=value2; param1=value3"),
              s(:send,
                s(:lvar, :client), :cookie)))),
        s(:send, nil, :private),
        s(:def, :read,
          s(:args,
            s(:arg, :filename)),
          s(:send,
            s(:const, nil, :File), :read,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:str, "(string)"),
                s(:str, ".."),
                s(:str, "data"),
                s(:lvar, :filename))))),
        s(:def, :fake_client,
          s(:args,
            s(:arg, :responses)),
          s(:block,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const,
                s(:const, nil, :Fake), :Client)),
            s(:args),
            s(:block,
              s(:send, nil, :define_method,
                s(:sym, :net_http)),
              s(:args,
                s(:restarg, :_)),
              s(:send,
                s(:const,
                  s(:const, nil, :Fake), :HTTP), :new,
                s(:lvar, :responses)))))))))
