s(:begin,
  s(:send, nil, :require,
    s(:str, "monitor")),
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestMonitor),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:ivasgn, :@monitor,
          s(:send,
            s(:const, nil, :Monitor), :new))),
      s(:def, :test_enter,
        s(:args),
        s(:begin,
          s(:lvasgn, :ary,
            s(:array)),
          s(:lvasgn, :queue,
            s(:send,
              s(:const, nil, :Queue), :new)),
          s(:lvasgn, :th,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:send,
                  s(:lvar, :queue), :pop),
                s(:send,
                  s(:ivar, :@monitor), :enter),
                s(:for,
                  s(:lvasgn, :i),
                  s(:irange,
                    s(:int, 6),
                    s(:int, 10)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :ary), :push,
                      s(:lvar, :i)),
                    s(:send,
                      s(:const, nil, :Thread), :pass))),
                s(:send,
                  s(:ivar, :@monitor), :exit)))),
          s(:lvasgn, :th2,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:send,
                  s(:ivar, :@monitor), :enter),
                s(:send,
                  s(:lvar, :queue), :enq,
                  s(:nil)),
                s(:for,
                  s(:lvasgn, :i),
                  s(:irange,
                    s(:int, 1),
                    s(:int, 5)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :ary), :push,
                      s(:lvar, :i)),
                    s(:send,
                      s(:const, nil, :Thread), :pass))),
                s(:send,
                  s(:ivar, :@monitor), :exit)))),
          s(:send, nil, :assert_join_threads,
            s(:array,
              s(:lvar, :th),
              s(:lvar, :th2))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1),
                  s(:int, 10))), :to_a),
            s(:lvar, :ary)))),
      s(:def, :test_enter_second_after_killed_thread,
        s(:args),
        s(:begin,
          s(:lvasgn, :th,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:send,
                  s(:ivar, :@monitor), :enter),
                s(:send,
                  s(:send,
                    s(:const, nil, :Thread), :current), :kill),
                s(:send,
                  s(:ivar, :@monitor), :exit)))),
          s(:send,
            s(:lvar, :th), :join),
          s(:send,
            s(:ivar, :@monitor), :enter),
          s(:send,
            s(:ivar, :@monitor), :exit),
          s(:lvasgn, :th2,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:send,
                  s(:ivar, :@monitor), :enter),
                s(:send,
                  s(:ivar, :@monitor), :exit)))),
          s(:send, nil, :assert_join_threads,
            s(:array,
              s(:lvar, :th),
              s(:lvar, :th2))))),
      s(:def, :test_synchronize,
        s(:args),
        s(:begin,
          s(:lvasgn, :ary,
            s(:array)),
          s(:lvasgn, :queue,
            s(:send,
              s(:const, nil, :Queue), :new)),
          s(:lvasgn, :th,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:send,
                  s(:lvar, :queue), :pop),
                s(:block,
                  s(:send,
                    s(:ivar, :@monitor), :synchronize),
                  s(:args),
                  s(:for,
                    s(:lvasgn, :i),
                    s(:irange,
                      s(:int, 6),
                      s(:int, 10)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :ary), :push,
                        s(:lvar, :i)),
                      s(:send,
                        s(:const, nil, :Thread), :pass))))))),
          s(:lvasgn, :th2,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:block,
                s(:send,
                  s(:ivar, :@monitor), :synchronize),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:lvar, :queue), :enq,
                    s(:nil)),
                  s(:for,
                    s(:lvasgn, :i),
                    s(:irange,
                      s(:int, 1),
                      s(:int, 5)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :ary), :push,
                        s(:lvar, :i)),
                      s(:send,
                        s(:const, nil, :Thread), :pass))))))),
          s(:send, nil, :assert_join_threads,
            s(:array,
              s(:lvar, :th),
              s(:lvar, :th2))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1),
                  s(:int, 10))), :to_a),
            s(:lvar, :ary)))),
      s(:def, :test_killed_thread_in_synchronize,
        s(:args),
        s(:begin,
          s(:lvasgn, :ary,
            s(:array)),
          s(:lvasgn, :queue,
            s(:send,
              s(:const, nil, :Queue), :new)),
          s(:lvasgn, :t1,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:send,
                  s(:lvar, :queue), :pop),
                s(:block,
                  s(:send,
                    s(:ivar, :@monitor), :synchronize),
                  s(:args),
                  s(:send,
                    s(:lvar, :ary), :<<,
                    s(:sym, :t1)))))),
          s(:lvasgn, :t2,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:send,
                  s(:lvar, :queue), :pop),
                s(:block,
                  s(:send,
                    s(:ivar, :@monitor), :synchronize),
                  s(:args),
                  s(:send,
                    s(:lvar, :ary), :<<,
                    s(:sym, :t2)))))),
          s(:lvasgn, :t3,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:ivar, :@monitor), :synchronize),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:lvar, :queue), :enq,
                      s(:nil)),
                    s(:send,
                      s(:lvar, :queue), :enq,
                      s(:nil)),
                    s(:send, nil, :assert_equal,
                      s(:array),
                      s(:lvar, :ary)),
                    s(:send,
                      s(:lvar, :t1), :kill),
                    s(:send,
                      s(:lvar, :t2), :kill),
                    s(:send,
                      s(:lvar, :ary), :<<,
                      s(:sym, :main)))),
                s(:send, nil, :assert_equal,
                  s(:array,
                    s(:sym, :main)),
                  s(:lvar, :ary))))),
          s(:send, nil, :assert_join_threads,
            s(:array,
              s(:lvar, :t1),
              s(:lvar, :t2),
              s(:lvar, :t3))))),
      s(:def, :test_try_enter,
        s(:args),
        s(:begin,
          s(:lvasgn, :queue1,
            s(:send,
              s(:const, nil, :Queue), :new)),
          s(:lvasgn, :queue2,
            s(:send,
              s(:const, nil, :Queue), :new)),
          s(:lvasgn, :th,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:send,
                  s(:lvar, :queue1), :deq),
                s(:send,
                  s(:ivar, :@monitor), :enter),
                s(:send,
                  s(:lvar, :queue2), :enq,
                  s(:nil)),
                s(:send,
                  s(:lvar, :queue1), :deq),
                s(:send,
                  s(:ivar, :@monitor), :exit),
                s(:send,
                  s(:lvar, :queue2), :enq,
                  s(:nil))))),
          s(:lvasgn, :th2,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:true),
                  s(:send,
                    s(:ivar, :@monitor), :try_enter)),
                s(:send,
                  s(:ivar, :@monitor), :exit),
                s(:send,
                  s(:lvar, :queue1), :enq,
                  s(:nil)),
                s(:send,
                  s(:lvar, :queue2), :deq),
                s(:send, nil, :assert_equal,
                  s(:false),
                  s(:send,
                    s(:ivar, :@monitor), :try_enter)),
                s(:send,
                  s(:lvar, :queue1), :enq,
                  s(:nil)),
                s(:send,
                  s(:lvar, :queue2), :deq),
                s(:send, nil, :assert_equal,
                  s(:true),
                  s(:send,
                    s(:ivar, :@monitor), :try_enter))))),
          s(:send, nil, :assert_join_threads,
            s(:array,
              s(:lvar, :th),
              s(:lvar, :th2))))),
      s(:def, :test_try_enter_second_after_killed_thread,
        s(:args),
        s(:begin,
          s(:lvasgn, :th,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:true),
                  s(:send,
                    s(:ivar, :@monitor), :try_enter)),
                s(:send,
                  s(:send,
                    s(:const, nil, :Thread), :current), :kill),
                s(:send,
                  s(:ivar, :@monitor), :exit)))),
          s(:send,
            s(:lvar, :th), :join),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@monitor), :try_enter)),
          s(:send,
            s(:ivar, :@monitor), :exit),
          s(:lvasgn, :th2,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:true),
                  s(:send,
                    s(:ivar, :@monitor), :try_enter)),
                s(:send,
                  s(:ivar, :@monitor), :exit)))),
          s(:send, nil, :assert_join_threads,
            s(:array,
              s(:lvar, :th),
              s(:lvar, :th2))))),
      s(:def, :test_cond,
        s(:args),
        s(:begin,
          s(:lvasgn, :cond,
            s(:send,
              s(:ivar, :@monitor), :new_cond)),
          s(:lvasgn, :a,
            s(:str, "foo")),
          s(:lvasgn, :queue1,
            s(:send,
              s(:const, nil, :Queue), :new)),
          s(:lvasgn, :th,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:send,
                  s(:lvar, :queue1), :deq),
                s(:block,
                  s(:send,
                    s(:ivar, :@monitor), :synchronize),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :a,
                      s(:str, "bar")),
                    s(:send,
                      s(:lvar, :cond), :signal)))))),
          s(:lvasgn, :th2,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:block,
                s(:send,
                  s(:ivar, :@monitor), :synchronize),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:lvar, :queue1), :enq,
                    s(:nil)),
                  s(:send, nil, :assert_equal,
                    s(:str, "foo"),
                    s(:lvar, :a)),
                  s(:lvasgn, :result1,
                    s(:send,
                      s(:lvar, :cond), :wait)),
                  s(:send, nil, :assert_equal,
                    s(:true),
                    s(:lvar, :result1)),
                  s(:send, nil, :assert_equal,
                    s(:str, "bar"),
                    s(:lvar, :a)))))),
          s(:send, nil, :assert_join_threads,
            s(:array,
              s(:lvar, :th),
              s(:lvar, :th2))))),
      s(:def, :test_timedwait,
        s(:args),
        s(:begin,
          s(:lvasgn, :cond,
            s(:send,
              s(:ivar, :@monitor), :new_cond)),
          s(:lvasgn, :b,
            s(:str, "foo")),
          s(:lvasgn, :queue2,
            s(:send,
              s(:const, nil, :Queue), :new)),
          s(:lvasgn, :th,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:send,
                  s(:lvar, :queue2), :deq),
                s(:block,
                  s(:send,
                    s(:ivar, :@monitor), :synchronize),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :b,
                      s(:str, "bar")),
                    s(:send,
                      s(:lvar, :cond), :signal)))))),
          s(:lvasgn, :th2,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:block,
                s(:send,
                  s(:ivar, :@monitor), :synchronize),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:lvar, :queue2), :enq,
                    s(:nil)),
                  s(:send, nil, :assert_equal,
                    s(:str, "foo"),
                    s(:lvar, :b)),
                  s(:lvasgn, :result2,
                    s(:send,
                      s(:lvar, :cond), :wait,
                      s(:float, 0.1))),
                  s(:send, nil, :assert_equal,
                    s(:true),
                    s(:lvar, :result2)),
                  s(:send, nil, :assert_equal,
                    s(:str, "bar"),
                    s(:lvar, :b)))))),
          s(:send, nil, :assert_join_threads,
            s(:array,
              s(:lvar, :th),
              s(:lvar, :th2))),
          s(:lvasgn, :c,
            s(:str, "foo")),
          s(:lvasgn, :queue3,
            s(:send,
              s(:const, nil, :Queue), :new)),
          s(:lvasgn, :th,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:send,
                  s(:lvar, :queue3), :deq),
                s(:block,
                  s(:send,
                    s(:ivar, :@monitor), :synchronize),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :c,
                      s(:str, "bar")),
                    s(:send,
                      s(:lvar, :cond), :signal)))))),
          s(:lvasgn, :th2,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:block,
                s(:send,
                  s(:ivar, :@monitor), :synchronize),
                s(:args),
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:str, "foo"),
                    s(:lvar, :c)),
                  s(:lvasgn, :result3,
                    s(:send,
                      s(:lvar, :cond), :wait,
                      s(:float, 0.1))),
                  s(:send, nil, :assert_equal,
                    s(:true),
                    s(:lvar, :result3)),
                  s(:send, nil, :assert_equal,
                    s(:str, "foo"),
                    s(:lvar, :c)),
                  s(:send,
                    s(:lvar, :queue3), :enq,
                    s(:nil)),
                  s(:lvasgn, :result4,
                    s(:send,
                      s(:lvar, :cond), :wait)),
                  s(:send, nil, :assert_equal,
                    s(:true),
                    s(:lvar, :result4)),
                  s(:send, nil, :assert_equal,
                    s(:str, "bar"),
                    s(:lvar, :c)))))),
          s(:send, nil, :assert_join_threads,
            s(:array,
              s(:lvar, :th),
              s(:lvar, :th2))))))))
