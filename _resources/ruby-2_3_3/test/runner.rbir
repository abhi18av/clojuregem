s(:begin,
  s(:send, nil, :require,
    s(:str, "rbconfig")),
  s(:lvasgn, :src_testdir,
    s(:send,
      s(:const, nil, :File), :dirname,
      s(:send,
        s(:const, nil, :File), :realpath,
        s(:str, "(string)")))),
  s(:send,
    s(:gvar, :$LOAD_PATH), :<<,
    s(:lvar, :src_testdir)),
  s(:send,
    s(:gvar, :$LOAD_PATH), :unshift,
    s(:dstr,
      s(:begin,
        s(:lvar, :src_testdir)),
      s(:str, "/lib"))),
  s(:block,
    s(:send,
      s(:block,
        s(:send,
          s(:send,
            s(:const, nil, :Dir), :glob,
            s(:dstr,
              s(:begin,
                s(:lvar, :src_testdir)),
              s(:str, "/../gems/*/*.gemspec"))), :reject),
        s(:args,
          s(:arg, :f)),
        s(:send,
          s(:lvar, :f), :=~,
          s(:regexp,
            s(:str, "minitest|test-unit|power_assert"),
            s(:regopt)))), :map),
    s(:args,
      s(:arg, :f)),
    s(:send,
      s(:gvar, :$LOAD_PATH), :unshift,
      s(:send,
        s(:const, nil, :File), :join,
        s(:send,
          s(:const, nil, :File), :dirname,
          s(:lvar, :f)),
        s(:str, "lib")))),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:module,
    s(:const, nil, :Gem), nil),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:const,
      s(:const,
        s(:const, nil, :MiniTest), :Unit), :TestCase),
    s(:cvasgn, :@@project_dir,
      s(:send,
        s(:const, nil, :File), :dirname,
        s(:send,
          s(:gvar, :$LOAD_PATH), :last)))),
  s(:send,
    s(:const, nil, :ENV), :[]=,
    s(:str, "GEM_SKIP"),
    s(:send,
      s(:const, nil, :ENV), :[]=,
      s(:str, "GEM_HOME"),
      s(:send,
        s(:const, nil, :ENV), :[]=,
        s(:str, "GEM_PATH"),
        s(:send,
          s(:str, ""), :freeze)))),
  s(:if,
    s(:send,
      s(:const, nil, :ENV), :has_key?,
      s(:str, "RUBY_TEST_ALL_PROFILE")),
    s(:send, nil, :require_relative,
      s(:str, "lib/profile_test_all")), nil),
  s(:send, nil, :require_relative,
    s(:str, "lib/tracepointchecker")),
  s(:send, nil, :require_relative,
    s(:str, "lib/zombie_hunter")),
  s(:send, nil, :require_relative,
    s(:str, "lib/iseq_loader_checker")),
  s(:if,
    s(:send,
      s(:const, nil, :ENV), :[],
      s(:str, "COVERAGE")),
    s(:begin,
      s(:block,
        s(:send,
          s(:array,
            s(:str, "doclie"),
            s(:str, "simplecov-html"),
            s(:str, "simplecov")), :each),
        s(:args,
          s(:arg, :f)),
        s(:send,
          s(:gvar, :$LOAD_PATH), :unshift,
          s(:dstr,
            s(:begin,
              s(:lvar, :src_testdir)),
            s(:str, "/../coverage/"),
            s(:begin,
              s(:lvar, :f)),
            s(:str, "/lib")))),
      s(:send, nil, :require,
        s(:str, "simplecov")),
      s(:block,
        s(:send,
          s(:const, nil, :SimpleCov), :start),
        s(:args),
        s(:send, nil, :add_filter,
          s(:str, "/test/")))), nil),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :exit,
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :Test), :Unit), :AutoRunner), :run,
          s(:true),
          s(:lvar, :src_testdir))),
      s(:resbody,
        s(:array,
          s(:const, nil, :NoMemoryError)), nil,
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:str, "/proc/meminfo")),
            s(:send, nil, :system,
              s(:str, "cat /proc/meminfo")), nil),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:str, "/bin/ps")),
            s(:send, nil, :system,
              s(:str, "ps x -opid,args,%cpu,%mem,nlwp,rss,vsz,wchan,stat,start,time,etime,blocked,caught,ignored,pending,f")), nil),
          s(:send, nil, :raise))), nil)))
