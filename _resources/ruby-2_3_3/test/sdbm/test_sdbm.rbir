s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "tmpdir")),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "sdbm")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:defined?,
      s(:const, nil, :SDBM)),
    s(:class,
      s(:const, nil, :TestSDBM),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:ivasgn, :@tmpdir,
              s(:send,
                s(:const, nil, :Dir), :mktmpdir,
                s(:str, "tmptest_sdbm"))),
            s(:ivasgn, :@prefix,
              s(:dstr,
                s(:str, "tmptest_sdbm_"),
                s(:begin,
                  s(:gvar, :$$)))),
            s(:ivasgn, :@path,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@tmpdir)),
                s(:str, "/"),
                s(:begin,
                  s(:ivar, :@prefix)),
                s(:str, "_"))),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :SDBM),
              s(:ivasgn, :@sdbm,
                s(:send,
                  s(:const, nil, :SDBM), :new,
                  s(:ivar, :@path)))))),
        s(:def, :teardown,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_nil,
              s(:send,
                s(:ivar, :@sdbm), :close)),
            s(:block,
              s(:send,
                s(:const, nil, :ObjectSpace), :each_object,
                s(:const, nil, :SDBM)),
              s(:args,
                s(:arg, :obj)),
              s(:if,
                s(:send,
                  s(:lvar, :obj), :closed?), nil,
                s(:send,
                  s(:lvar, :obj), :close))),
            s(:send,
              s(:const, nil, :FileUtils), :remove_entry_secure,
              s(:ivar, :@tmpdir)))),
        s(:def, :check_size,
          s(:args,
            s(:arg, :expect),
            s(:optarg, :sdbm,
              s(:ivar, :@sdbm))),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:lvar, :expect),
              s(:send,
                s(:lvar, :sdbm), :size)),
            s(:lvasgn, :n,
              s(:int, 0)),
            s(:block,
              s(:send,
                s(:lvar, :sdbm), :each),
              s(:args),
              s(:op_asgn,
                s(:lvasgn, :n), :+,
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expect),
              s(:lvar, :n)),
            s(:if,
              s(:send,
                s(:lvar, :expect), :==,
                s(:int, 0)),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :sdbm), :empty?)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :sdbm), :empty?))))),
        s(:def, :test_version,
          s(:args),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :SDBM), :const_defined?,
                s(:sym, :VERSION)), :!))),
        s(:def, :test_s_new_has_no_block,
          s(:args),
          s(:begin,
            s(:lvasgn, :foo,
              s(:true)),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :SDBM),
              s(:lvasgn, :sdbm,
                s(:block,
                  s(:send,
                    s(:const, nil, :SDBM), :new,
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@tmpdir)),
                      s(:str, "/"),
                      s(:begin,
                        s(:ivar, :@prefix)))),
                  s(:args),
                  s(:lvasgn, :foo,
                    s(:false))))),
            s(:send, nil, :assert_equal,
              s(:lvar, :foo),
              s(:true)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :sdbm), :close)))),
        s(:def, :test_s_open_no_create,
          s(:args),
          s(:ensure,
            s(:send, nil, :assert_nil,
              s(:lvasgn, :sdbm,
                s(:send,
                  s(:const, nil, :SDBM), :open,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@tmpdir)),
                    s(:str, "/"),
                    s(:begin,
                      s(:ivar, :@prefix))),
                  s(:nil)))),
            s(:if,
              s(:lvar, :sdbm),
              s(:send,
                s(:lvar, :sdbm), :close), nil))),
        s(:def, :test_s_open_with_block,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:block,
              s(:send,
                s(:const, nil, :SDBM), :open,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@tmpdir)),
                  s(:str, "/"),
                  s(:begin,
                    s(:ivar, :@prefix)))),
              s(:args),
              s(:sym, :foo)),
            s(:sym, :foo))),
        s(:def, :open_db_child,
          s(:args,
            s(:arg, :dbname),
            s(:restarg, :opts)),
          s(:begin,
            s(:lvasgn, :opts,
              s(:send,
                s(:send,
                  s(:array,
                    s(:int, 420),
                    s(:splat,
                      s(:lvar, :opts))), :map,
                  s(:block_pass,
                    s(:sym, :inspect))), :join,
                s(:str, ", "))),
            s(:lvasgn, :args,
              s(:array,
                s(:send,
                  s(:const, nil, :EnvUtil), :rubybin),
                s(:str, "-rsdbm"),
                s(:dstr,
                  s(:str, "    STDOUT.sync = true\n"),
                  s(:str, "    gdbm = SDBM.open(ARGV.shift, "),
                  s(:begin,
                    s(:lvar, :opts)),
                  s(:str, ")\n"),
                  s(:str, "    puts sdbm.class\n"),
                  s(:str, "    gets\n")),
                s(:lvar, :dbname))),
            s(:block,
              s(:send,
                s(:const, nil, :IO), :popen,
                s(:lvar, :args),
                s(:str, "r+")),
              s(:args,
                s(:arg, :f)),
              s(:begin,
                s(:lvasgn, :dbclass,
                  s(:send,
                    s(:lvar, :f), :gets)),
                s(:send, nil, :assert_equal,
                  s(:str, "SDBM"),
                  s(:send,
                    s(:lvar, :dbclass), :chomp)),
                s(:yield))))),
        s(:if,
          s(:defined?,
            s(:const,
              s(:const, nil, :SDBM), :NOLOCK)),
          s(:def, :test_s_open_nolock,
            s(:args),
            s(:begin,
              s(:lvasgn, :dbname,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@tmpdir)),
                  s(:str, "/"),
                  s(:begin,
                    s(:ivar, :@prefix)))),
              s(:block,
                s(:send, nil, :open_db_child,
                  s(:lvar, :dbname),
                  s(:const,
                    s(:const, nil, :SDBM), :NOLOCK)),
                s(:args),
                s(:block,
                  s(:send, nil, :assert_no_exception,
                    s(:const,
                      s(:const, nil, :Errno), :EWOULDBLOCK),
                    s(:const,
                      s(:const, nil, :Errno), :EAGAIN),
                    s(:const,
                      s(:const, nil, :Errno), :EACCES)),
                  s(:args),
                  s(:block,
                    s(:send,
                      s(:const, nil, :SDBM), :open,
                      s(:lvar, :dbname),
                      s(:int, 420)),
                    s(:args,
                      s(:arg, :sdbm)),
                    s(:send, nil, :assert_instance_of,
                      s(:const, nil, :SDBM),
                      s(:lvar, :sdbm))))),
              s(:if,
                s(:gvar, :$DEBUG),
                s(:send, nil, :p,
                  s(:send,
                    s(:const, nil, :Dir), :glob,
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@tmpdir)),
                      s(:str, "/"),
                      s(:begin,
                        s(:ivar, :@prefix)),
                      s(:str, "*")))), nil),
              s(:block,
                s(:send, nil, :open_db_child,
                  s(:lvar, :dbname)),
                s(:args),
                s(:block,
                  s(:send, nil, :assert_no_exception,
                    s(:const,
                      s(:const, nil, :Errno), :EWOULDBLOCK),
                    s(:const,
                      s(:const, nil, :Errno), :EAGAIN),
                    s(:const,
                      s(:const, nil, :Errno), :EACCES)),
                  s(:args),
                  s(:block,
                    s(:send,
                      s(:const, nil, :SDBM), :open,
                      s(:lvar, :dbname),
                      s(:int, 420),
                      s(:const,
                        s(:const, nil, :SDBM), :NOLOCK)),
                    s(:args,
                      s(:arg, :sdbm)),
                    s(:send, nil, :assert_instance_of,
                      s(:const, nil, :SDBM),
                      s(:lvar, :sdbm))))))), nil),
        s(:def, :test_s_open_error,
          s(:args),
          s(:begin,
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "mswin|mingw"),
                  s(:regopt)),
                s(:const, nil, :RUBY_PLATFORM)),
              s(:send, nil, :skip,
                s(:str, "doesn't support to avoid read access by owner on Windows")), nil),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :SDBM),
              s(:lvasgn, :sdbm,
                s(:send,
                  s(:const, nil, :SDBM), :open,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@tmpdir)),
                    s(:str, "/"),
                    s(:begin,
                      s(:ivar, :@prefix))),
                  s(:int, 0)))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :Errno), :EACCES)),
              s(:args),
              s(:send,
                s(:const, nil, :SDBM), :open,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@tmpdir)),
                  s(:str, "/"),
                  s(:begin,
                    s(:ivar, :@prefix))),
                s(:int, 0))),
            s(:send,
              s(:lvar, :sdbm), :close))),
        s(:def, :test_close,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :SDBM),
              s(:lvasgn, :sdbm,
                s(:send,
                  s(:const, nil, :SDBM), :open,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@tmpdir)),
                    s(:str, "/"),
                    s(:begin,
                      s(:ivar, :@prefix)))))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :sdbm), :close)),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :SDBMError)),
              s(:args),
              s(:send,
                s(:lvar, :sdbm), :close)))),
        s(:def, :test_aref,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:ivar, :@sdbm), :[]=,
                s(:str, "foo"),
                s(:str, "bar"))),
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:ivar, :@sdbm), :[],
                s(:str, "foo"))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:ivar, :@sdbm), :[],
                s(:str, "bar"))))),
        s(:def, :test_fetch,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:ivar, :@sdbm), :[]=,
                s(:str, "foo"),
                s(:str, "bar"))),
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:ivar, :@sdbm), :fetch,
                s(:str, "foo"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :IndexError)),
              s(:args),
              s(:send,
                s(:ivar, :@sdbm), :fetch,
                s(:str, "bar"))),
            s(:send, nil, :assert_equal,
              s(:str, "baz"),
              s(:send,
                s(:ivar, :@sdbm), :fetch,
                s(:str, "bar"),
                s(:str, "baz"))),
            s(:send, nil, :assert_equal,
              s(:str, "foobar"),
              s(:block,
                s(:send,
                  s(:ivar, :@sdbm), :fetch,
                  s(:str, "bar")),
                s(:args,
                  s(:arg, :key)),
                s(:send,
                  s(:str, "foo"), :+,
                  s(:lvar, :key)))))),
        s(:def, :test_aset,
          s(:args),
          s(:begin,
            s(:lvasgn, :num,
              s(:int, 0)),
            s(:block,
              s(:send,
                s(:int, 2), :times),
              s(:args,
                s(:arg, :i)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:str, "foo"),
                  s(:send,
                    s(:ivar, :@sdbm), :[]=,
                    s(:str, "foo"),
                    s(:str, "foo"))),
                s(:send, nil, :assert_equal,
                  s(:str, "foo"),
                  s(:send,
                    s(:ivar, :@sdbm), :[],
                    s(:str, "foo"))),
                s(:send, nil, :assert_equal,
                  s(:str, "bar"),
                  s(:send,
                    s(:ivar, :@sdbm), :[]=,
                    s(:str, "foo"),
                    s(:str, "bar"))),
                s(:send, nil, :assert_equal,
                  s(:str, "bar"),
                  s(:send,
                    s(:ivar, :@sdbm), :[],
                    s(:str, "foo"))),
                s(:if,
                  s(:send,
                    s(:lvar, :i), :==,
                    s(:int, 0)),
                  s(:op_asgn,
                    s(:lvasgn, :num), :+,
                    s(:int, 1)), nil),
                s(:send, nil, :assert_equal,
                  s(:lvar, :num),
                  s(:send,
                    s(:ivar, :@sdbm), :size)),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:send,
                    s(:ivar, :@sdbm), :[]=,
                    s(:str, "bar"),
                    s(:str, ""))),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:send,
                    s(:ivar, :@sdbm), :[],
                    s(:str, "bar"))),
                s(:if,
                  s(:send,
                    s(:lvar, :i), :==,
                    s(:int, 0)),
                  s(:op_asgn,
                    s(:lvasgn, :num), :+,
                    s(:int, 1)), nil),
                s(:send, nil, :assert_equal,
                  s(:lvar, :num),
                  s(:send,
                    s(:ivar, :@sdbm), :size)),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:send,
                    s(:ivar, :@sdbm), :[]=,
                    s(:str, ""),
                    s(:str, ""))),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:send,
                    s(:ivar, :@sdbm), :[],
                    s(:str, ""))),
                s(:if,
                  s(:send,
                    s(:lvar, :i), :==,
                    s(:int, 0)),
                  s(:op_asgn,
                    s(:lvasgn, :num), :+,
                    s(:int, 1)), nil),
                s(:send, nil, :assert_equal,
                  s(:lvar, :num),
                  s(:send,
                    s(:ivar, :@sdbm), :size)),
                s(:send, nil, :assert_equal,
                  s(:str, "200"),
                  s(:send,
                    s(:ivar, :@sdbm), :[]=,
                    s(:str, "100"),
                    s(:str, "200"))),
                s(:send, nil, :assert_equal,
                  s(:str, "200"),
                  s(:send,
                    s(:ivar, :@sdbm), :[],
                    s(:str, "100"))),
                s(:if,
                  s(:send,
                    s(:lvar, :i), :==,
                    s(:int, 0)),
                  s(:op_asgn,
                    s(:lvasgn, :num), :+,
                    s(:int, 1)), nil),
                s(:send, nil, :assert_equal,
                  s(:lvar, :num),
                  s(:send,
                    s(:ivar, :@sdbm), :size)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:str, "y"), :*,
                    s(:int, 100)),
                  s(:send,
                    s(:ivar, :@sdbm), :[]=,
                    s(:send,
                      s(:str, "x"), :*,
                      s(:int, 100)),
                    s(:send,
                      s(:str, "y"), :*,
                      s(:int, 100)))),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:str, "y"), :*,
                    s(:int, 100)),
                  s(:send,
                    s(:ivar, :@sdbm), :[],
                    s(:send,
                      s(:str, "x"), :*,
                      s(:int, 100)))),
                s(:if,
                  s(:send,
                    s(:lvar, :i), :==,
                    s(:int, 0)),
                  s(:op_asgn,
                    s(:lvasgn, :num), :+,
                    s(:int, 1)), nil),
                s(:send, nil, :assert_equal,
                  s(:lvar, :num),
                  s(:send,
                    s(:ivar, :@sdbm), :size)))))),
        s(:def, :test_key,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:ivar, :@sdbm), :[]=,
                s(:str, "foo"),
                s(:str, "bar"))),
            s(:send, nil, :assert_equal,
              s(:str, "foo"),
              s(:send,
                s(:ivar, :@sdbm), :key,
                s(:str, "bar"))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:ivar, :@sdbm), :[],
                s(:str, "bar"))))),
        s(:def, :test_values_at,
          s(:args),
          s(:begin,
            s(:lvasgn, :keys,
              s(:array,
                s(:str, "foo"),
                s(:str, "bar"),
                s(:str, "baz"))),
            s(:lvasgn, :values,
              s(:array,
                s(:str, "FOO"),
                s(:str, "BAR"),
                s(:str, "BAZ"))),
            s(:masgn,
              s(:mlhs,
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 0))),
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 1))),
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 2)))),
              s(:lvar, :values)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :values), :reverse),
              s(:send,
                s(:ivar, :@sdbm), :values_at,
                s(:splat,
                  s(:send,
                    s(:lvar, :keys), :reverse)))))),
        s(:def, :test_select_with_block,
          s(:args),
          s(:begin,
            s(:lvasgn, :keys,
              s(:array,
                s(:str, "foo"),
                s(:str, "bar"),
                s(:str, "baz"))),
            s(:lvasgn, :values,
              s(:array,
                s(:str, "FOO"),
                s(:str, "BAR"),
                s(:str, "BAZ"))),
            s(:masgn,
              s(:mlhs,
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 0))),
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 1))),
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 2)))),
              s(:lvar, :values)),
            s(:lvasgn, :ret,
              s(:block,
                s(:send,
                  s(:ivar, :@sdbm), :select),
                s(:args,
                  s(:arg, :k),
                  s(:arg, :v)),
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:lvar, :k), :upcase),
                    s(:lvar, :v)),
                  s(:send,
                    s(:lvar, :k), :!=,
                    s(:str, "bar"))))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:str, "baz"),
                  s(:str, "BAZ")),
                s(:array,
                  s(:str, "foo"),
                  s(:str, "FOO"))),
              s(:send,
                s(:lvar, :ret), :sort)))),
        s(:def, :test_length,
          s(:args),
          s(:begin,
            s(:lvasgn, :num,
              s(:int, 10)),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:ivar, :@sdbm), :size)),
            s(:block,
              s(:send,
                s(:lvar, :num), :times),
              s(:args,
                s(:arg, :i)),
              s(:begin,
                s(:lvasgn, :i,
                  s(:send,
                    s(:lvar, :i), :to_s)),
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:lvar, :i),
                  s(:lvar, :i)))),
            s(:send, nil, :assert_equal,
              s(:lvar, :num),
              s(:send,
                s(:ivar, :@sdbm), :size)),
            s(:send,
              s(:ivar, :@sdbm), :shift),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :num), :-,
                s(:int, 1)),
              s(:send,
                s(:ivar, :@sdbm), :size)))),
        s(:def, :test_empty?,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:ivar, :@sdbm), :empty?)),
            s(:send,
              s(:ivar, :@sdbm), :[]=,
              s(:str, "foo"),
              s(:str, "FOO")),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:ivar, :@sdbm), :empty?)))),
        s(:def, :test_each_pair,
          s(:args),
          s(:begin,
            s(:lvasgn, :n,
              s(:int, 0)),
            s(:block,
              s(:send,
                s(:ivar, :@sdbm), :each_pair),
              s(:args),
              s(:op_asgn,
                s(:lvasgn, :n), :+,
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:lvar, :n)),
            s(:lvasgn, :keys,
              s(:array,
                s(:str, "foo"),
                s(:str, "bar"),
                s(:str, "baz"))),
            s(:lvasgn, :values,
              s(:array,
                s(:str, "FOO"),
                s(:str, "BAR"),
                s(:str, "BAZ"))),
            s(:masgn,
              s(:mlhs,
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 0))),
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 1))),
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 2)))),
              s(:lvar, :values)),
            s(:lvasgn, :n,
              s(:int, 0)),
            s(:lvasgn, :ret,
              s(:block,
                s(:send,
                  s(:ivar, :@sdbm), :each_pair),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :val)),
                s(:begin,
                  s(:send, nil, :assert_not_nil,
                    s(:lvasgn, :i,
                      s(:send,
                        s(:lvar, :keys), :index,
                        s(:lvar, :key)))),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :val),
                    s(:send,
                      s(:lvar, :values), :[],
                      s(:lvar, :i))),
                  s(:op_asgn,
                    s(:lvasgn, :n), :+,
                    s(:int, 1))))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :keys), :size),
              s(:lvar, :n)),
            s(:send, nil, :assert_equal,
              s(:ivar, :@sdbm),
              s(:lvar, :ret)))),
        s(:def, :test_each_value,
          s(:args),
          s(:begin,
            s(:lvasgn, :n,
              s(:int, 0)),
            s(:block,
              s(:send,
                s(:ivar, :@sdbm), :each_value),
              s(:args),
              s(:op_asgn,
                s(:lvasgn, :n), :+,
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:lvar, :n)),
            s(:lvasgn, :keys,
              s(:array,
                s(:str, "foo"),
                s(:str, "bar"),
                s(:str, "baz"))),
            s(:lvasgn, :values,
              s(:array,
                s(:str, "FOO"),
                s(:str, "BAR"),
                s(:str, "BAZ"))),
            s(:masgn,
              s(:mlhs,
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 0))),
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 1))),
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 2)))),
              s(:lvar, :values)),
            s(:lvasgn, :n,
              s(:int, 0)),
            s(:lvasgn, :ret,
              s(:block,
                s(:send,
                  s(:ivar, :@sdbm), :each_value),
                s(:args,
                  s(:arg, :val)),
                s(:begin,
                  s(:send, nil, :assert_not_nil,
                    s(:lvasgn, :key,
                      s(:send,
                        s(:ivar, :@sdbm), :key,
                        s(:lvar, :val)))),
                  s(:send, nil, :assert_not_nil,
                    s(:lvasgn, :i,
                      s(:send,
                        s(:lvar, :keys), :index,
                        s(:lvar, :key)))),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :val),
                    s(:send,
                      s(:lvar, :values), :[],
                      s(:lvar, :i))),
                  s(:op_asgn,
                    s(:lvasgn, :n), :+,
                    s(:int, 1))))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :keys), :size),
              s(:lvar, :n)),
            s(:send, nil, :assert_equal,
              s(:ivar, :@sdbm),
              s(:lvar, :ret)))),
        s(:def, :test_each_key,
          s(:args),
          s(:begin,
            s(:lvasgn, :n,
              s(:int, 0)),
            s(:block,
              s(:send,
                s(:ivar, :@sdbm), :each_key),
              s(:args),
              s(:op_asgn,
                s(:lvasgn, :n), :+,
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:lvar, :n)),
            s(:lvasgn, :keys,
              s(:array,
                s(:str, "foo"),
                s(:str, "bar"),
                s(:str, "baz"))),
            s(:lvasgn, :values,
              s(:array,
                s(:str, "FOO"),
                s(:str, "BAR"),
                s(:str, "BAZ"))),
            s(:masgn,
              s(:mlhs,
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 0))),
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 1))),
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 2)))),
              s(:lvar, :values)),
            s(:lvasgn, :n,
              s(:int, 0)),
            s(:lvasgn, :ret,
              s(:block,
                s(:send,
                  s(:ivar, :@sdbm), :each_key),
                s(:args,
                  s(:arg, :key)),
                s(:begin,
                  s(:send, nil, :assert_not_nil,
                    s(:lvasgn, :i,
                      s(:send,
                        s(:lvar, :keys), :index,
                        s(:lvar, :key)))),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:ivar, :@sdbm), :[],
                      s(:lvar, :key)),
                    s(:send,
                      s(:lvar, :values), :[],
                      s(:lvar, :i))),
                  s(:op_asgn,
                    s(:lvasgn, :n), :+,
                    s(:int, 1))))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :keys), :size),
              s(:lvar, :n)),
            s(:send, nil, :assert_equal,
              s(:ivar, :@sdbm),
              s(:lvar, :ret)))),
        s(:def, :test_keys,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:ivar, :@sdbm), :keys)),
            s(:lvasgn, :keys,
              s(:array,
                s(:str, "foo"),
                s(:str, "bar"),
                s(:str, "baz"))),
            s(:lvasgn, :values,
              s(:array,
                s(:str, "FOO"),
                s(:str, "BAR"),
                s(:str, "BAZ"))),
            s(:masgn,
              s(:mlhs,
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 0))),
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 1))),
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 2)))),
              s(:lvar, :values)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :keys), :sort),
              s(:send,
                s(:send,
                  s(:ivar, :@sdbm), :keys), :sort)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :values), :sort),
              s(:send,
                s(:send,
                  s(:ivar, :@sdbm), :values), :sort)))),
        s(:def, :test_values,
          s(:args),
          s(:send, nil, :test_keys)),
        s(:def, :test_shift,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_nil,
              s(:send,
                s(:ivar, :@sdbm), :shift)),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:ivar, :@sdbm), :size)),
            s(:lvasgn, :keys,
              s(:array,
                s(:str, "foo"),
                s(:str, "bar"),
                s(:str, "baz"))),
            s(:lvasgn, :values,
              s(:array,
                s(:str, "FOO"),
                s(:str, "BAR"),
                s(:str, "BAZ"))),
            s(:masgn,
              s(:mlhs,
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 0))),
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 1))),
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 2)))),
              s(:lvar, :values)),
            s(:lvasgn, :ret_keys,
              s(:array)),
            s(:lvasgn, :ret_values,
              s(:array)),
            s(:while,
              s(:lvasgn, :ret,
                s(:send,
                  s(:ivar, :@sdbm), :shift)),
              s(:begin,
                s(:send,
                  s(:lvar, :ret_keys), :push,
                  s(:send,
                    s(:lvar, :ret), :[],
                    s(:int, 0))),
                s(:send,
                  s(:lvar, :ret_values), :push,
                  s(:send,
                    s(:lvar, :ret), :[],
                    s(:int, 1))),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:send,
                      s(:lvar, :keys), :size), :-,
                    s(:send,
                      s(:lvar, :ret_keys), :size)),
                  s(:send,
                    s(:ivar, :@sdbm), :size)))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :keys), :sort),
              s(:send,
                s(:lvar, :ret_keys), :sort)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :values), :sort),
              s(:send,
                s(:lvar, :ret_values), :sort)))),
        s(:def, :test_delete,
          s(:args),
          s(:begin,
            s(:lvasgn, :keys,
              s(:array,
                s(:str, "foo"),
                s(:str, "bar"),
                s(:str, "baz"))),
            s(:lvasgn, :values,
              s(:array,
                s(:str, "FOO"),
                s(:str, "BAR"),
                s(:str, "BAZ"))),
            s(:lvasgn, :key,
              s(:send,
                s(:lvar, :keys), :[],
                s(:int, 1))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:ivar, :@sdbm), :delete,
                s(:lvar, :key))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:ivar, :@sdbm), :size)),
            s(:masgn,
              s(:mlhs,
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 0))),
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 1))),
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:int, 2)))),
              s(:lvar, :values)),
            s(:send, nil, :assert_equal,
              s(:str, "BAR"),
              s(:send,
                s(:ivar, :@sdbm), :delete,
                s(:lvar, :key))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:ivar, :@sdbm), :[],
                s(:lvar, :key))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:ivar, :@sdbm), :size)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:ivar, :@sdbm), :delete,
                s(:lvar, :key))))),
        s(:def, :test_delete_with_block,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:str, "no called block")),
            s(:send,
              s(:ivar, :@sdbm), :[]=,
              s(:lvar, :key),
              s(:str, "foo")),
            s(:send, nil, :assert_equal,
              s(:str, "foo"),
              s(:block,
                s(:send,
                  s(:ivar, :@sdbm), :delete,
                  s(:lvar, :key)),
                s(:args,
                  s(:arg, :k)),
                s(:begin,
                  s(:send,
                    s(:lvar, :k), :replace,
                    s(:str, "called block")),
                  s(:sym, :blockval)))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:ivar, :@sdbm), :size)),
            s(:lvasgn, :key,
              s(:str, "no called block")),
            s(:send, nil, :assert_equal,
              s(:sym, :blockval),
              s(:block,
                s(:send,
                  s(:ivar, :@sdbm), :delete,
                  s(:lvar, :key)),
                s(:args,
                  s(:arg, :k)),
                s(:begin,
                  s(:send,
                    s(:lvar, :k), :replace,
                    s(:str, "called block")),
                  s(:sym, :blockval)))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:ivar, :@sdbm), :size)))),
        s(:def, :test_delete_if,
          s(:args),
          s(:begin,
            s(:lvasgn, :v,
              s(:str, "0")),
            s(:block,
              s(:send,
                s(:int, 100), :times),
              s(:args),
              s(:begin,
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:lvar, :v),
                  s(:lvar, :v)),
                s(:lvasgn, :v,
                  s(:send,
                    s(:lvar, :v), :next)))),
            s(:lvasgn, :ret,
              s(:block,
                s(:send,
                  s(:ivar, :@sdbm), :delete_if),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :val)),
                s(:send,
                  s(:send,
                    s(:lvar, :key), :to_i), :<,
                  s(:int, 50)))),
            s(:send, nil, :assert_equal,
              s(:ivar, :@sdbm),
              s(:lvar, :ret)),
            s(:send, nil, :check_size,
              s(:int, 50),
              s(:ivar, :@sdbm)),
            s(:lvasgn, :ret,
              s(:block,
                s(:send,
                  s(:ivar, :@sdbm), :delete_if),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :val)),
                s(:send,
                  s(:send,
                    s(:lvar, :key), :to_i), :>=,
                  s(:int, 50)))),
            s(:send, nil, :assert_equal,
              s(:ivar, :@sdbm),
              s(:lvar, :ret)),
            s(:send, nil, :check_size,
              s(:int, 0),
              s(:ivar, :@sdbm)),
            s(:lvasgn, :v,
              s(:str, "0")),
            s(:block,
              s(:send,
                s(:int, 100), :times),
              s(:args),
              s(:begin,
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:lvar, :v),
                  s(:lvar, :v)),
                s(:lvasgn, :v,
                  s(:send,
                    s(:lvar, :v), :next)))),
            s(:send, nil, :check_size,
              s(:int, 100),
              s(:ivar, :@sdbm)),
            s(:lvasgn, :n,
              s(:int, 0)),
            s(:block,
              s(:send,
                s(:ivar, :@sdbm), :delete_if),
              s(:args,
                s(:arg, :key),
                s(:arg, :val)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :n), :>,
                    s(:int, 50)),
                  s(:break), nil),
                s(:op_asgn,
                  s(:lvasgn, :n), :+,
                  s(:int, 1)),
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:int, 51),
              s(:lvar, :n)),
            s(:send, nil, :check_size,
              s(:int, 49),
              s(:ivar, :@sdbm)),
            s(:send,
              s(:ivar, :@sdbm), :clear),
            s(:lvasgn, :v,
              s(:str, "0")),
            s(:block,
              s(:send,
                s(:int, 100), :times),
              s(:args),
              s(:begin,
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:lvar, :v),
                  s(:lvar, :v)),
                s(:lvasgn, :v,
                  s(:send,
                    s(:lvar, :v), :next)))),
            s(:send, nil, :check_size,
              s(:int, 100),
              s(:ivar, :@sdbm)),
            s(:lvasgn, :n,
              s(:int, 0)),
            s(:kwbegin,
              s(:rescue,
                s(:block,
                  s(:send,
                    s(:ivar, :@sdbm), :delete_if),
                  s(:args,
                    s(:arg, :key),
                    s(:arg, :val)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :n), :>,
                        s(:int, 50)),
                      s(:send, nil, :raise,
                        s(:str, "runtime error")), nil),
                    s(:op_asgn,
                      s(:lvasgn, :n), :+,
                      s(:int, 1)),
                    s(:true))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :RuntimeError)), nil, nil), nil)),
            s(:send, nil, :assert_equal,
              s(:int, 51),
              s(:lvar, :n)),
            s(:send, nil, :check_size,
              s(:int, 49),
              s(:ivar, :@sdbm)))),
        s(:def, :test_reject,
          s(:args),
          s(:begin,
            s(:lvasgn, :v,
              s(:str, "0")),
            s(:block,
              s(:send,
                s(:int, 100), :times),
              s(:args),
              s(:begin,
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:lvar, :v),
                  s(:lvar, :v)),
                s(:lvasgn, :v,
                  s(:send,
                    s(:lvar, :v), :next)))),
            s(:lvasgn, :hash,
              s(:block,
                s(:send,
                  s(:ivar, :@sdbm), :reject),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :val)),
                s(:send,
                  s(:send,
                    s(:lvar, :key), :to_i), :<,
                  s(:int, 50)))),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :Hash),
              s(:lvar, :hash)),
            s(:send, nil, :assert_equal,
              s(:int, 100),
              s(:send,
                s(:ivar, :@sdbm), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 50),
              s(:send,
                s(:lvar, :hash), :size)),
            s(:block,
              s(:send,
                s(:lvar, :hash), :each_pair),
              s(:args,
                s(:arg, :key),
                s(:arg, :val)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:false),
                  s(:send,
                    s(:send,
                      s(:lvar, :key), :to_i), :<,
                    s(:int, 50))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :key),
                  s(:lvar, :val)))),
            s(:lvasgn, :hash,
              s(:block,
                s(:send,
                  s(:ivar, :@sdbm), :reject),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :val)),
                s(:send,
                  s(:send,
                    s(:lvar, :key), :to_i), :<,
                  s(:int, 100)))),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :Hash),
              s(:lvar, :hash)),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:lvar, :hash), :empty?)))),
        s(:def, :test_clear,
          s(:args),
          s(:begin,
            s(:lvasgn, :v,
              s(:str, "1")),
            s(:block,
              s(:send,
                s(:int, 100), :times),
              s(:args),
              s(:begin,
                s(:lvasgn, :v,
                  s(:send,
                    s(:lvar, :v), :next)),
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:lvar, :v),
                  s(:lvar, :v)))),
            s(:send, nil, :assert_equal,
              s(:ivar, :@sdbm),
              s(:send,
                s(:ivar, :@sdbm), :clear)),
            s(:lvasgn, :i,
              s(:int, 0)),
            s(:block,
              s(:send,
                s(:ivar, :@sdbm), :each),
              s(:args),
              s(:op_asgn,
                s(:lvasgn, :i), :+,
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@sdbm), :size),
              s(:lvar, :i)),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:lvar, :i)))),
        s(:def, :test_invert,
          s(:args),
          s(:begin,
            s(:lvasgn, :v,
              s(:str, "0")),
            s(:block,
              s(:send,
                s(:int, 100), :times),
              s(:args),
              s(:begin,
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:lvar, :v),
                  s(:lvar, :v)),
                s(:lvasgn, :v,
                  s(:send,
                    s(:lvar, :v), :next)))),
            s(:lvasgn, :hash,
              s(:send,
                s(:ivar, :@sdbm), :invert)),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :Hash),
              s(:lvar, :hash)),
            s(:send, nil, :assert_equal,
              s(:int, 100),
              s(:send,
                s(:lvar, :hash), :size)),
            s(:block,
              s(:send,
                s(:lvar, :hash), :each_pair),
              s(:args,
                s(:arg, :key),
                s(:arg, :val)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :key), :to_i),
                s(:send,
                  s(:lvar, :val), :to_i))))),
        s(:def, :test_update,
          s(:args),
          s(:begin,
            s(:lvasgn, :hash,
              s(:hash)),
            s(:lvasgn, :v,
              s(:str, "0")),
            s(:block,
              s(:send,
                s(:int, 100), :times),
              s(:args),
              s(:begin,
                s(:lvasgn, :v,
                  s(:send,
                    s(:lvar, :v), :next)),
                s(:send,
                  s(:lvar, :hash), :[]=,
                  s(:lvar, :v),
                  s(:lvar, :v)))),
            s(:send,
              s(:ivar, :@sdbm), :[]=,
              s(:str, "101"),
              s(:str, "101")),
            s(:send,
              s(:ivar, :@sdbm), :update,
              s(:lvar, :hash)),
            s(:send, nil, :assert_equal,
              s(:int, 101),
              s(:send,
                s(:ivar, :@sdbm), :size)),
            s(:block,
              s(:send,
                s(:ivar, :@sdbm), :each_pair),
              s(:args,
                s(:arg, :key),
                s(:arg, :val)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :key), :to_i),
                s(:send,
                  s(:lvar, :val), :to_i))))),
        s(:def, :test_replace,
          s(:args),
          s(:begin,
            s(:lvasgn, :hash,
              s(:hash)),
            s(:lvasgn, :v,
              s(:str, "0")),
            s(:block,
              s(:send,
                s(:int, 100), :times),
              s(:args),
              s(:begin,
                s(:lvasgn, :v,
                  s(:send,
                    s(:lvar, :v), :next)),
                s(:send,
                  s(:lvar, :hash), :[]=,
                  s(:lvar, :v),
                  s(:lvar, :v)))),
            s(:send,
              s(:ivar, :@sdbm), :[]=,
              s(:str, "101"),
              s(:str, "101")),
            s(:send,
              s(:ivar, :@sdbm), :replace,
              s(:lvar, :hash)),
            s(:send, nil, :assert_equal,
              s(:int, 100),
              s(:send,
                s(:ivar, :@sdbm), :size)),
            s(:block,
              s(:send,
                s(:ivar, :@sdbm), :each_pair),
              s(:args,
                s(:arg, :key),
                s(:arg, :val)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :key), :to_i),
                s(:send,
                  s(:lvar, :val), :to_i))))),
        s(:def, :test_haskey?,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:ivar, :@sdbm), :[]=,
                s(:str, "foo"),
                s(:str, "bar"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:ivar, :@sdbm), :has_key?,
                s(:str, "foo"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:ivar, :@sdbm), :has_key?,
                s(:str, "bar"))))),
        s(:def, :test_has_value?,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:ivar, :@sdbm), :[]=,
                s(:str, "foo"),
                s(:str, "bar"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:ivar, :@sdbm), :has_value?,
                s(:str, "bar"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:ivar, :@sdbm), :has_value?,
                s(:str, "foo"))))),
        s(:def, :test_to_a,
          s(:args),
          s(:begin,
            s(:lvasgn, :v,
              s(:str, "0")),
            s(:block,
              s(:send,
                s(:int, 100), :times),
              s(:args),
              s(:begin,
                s(:lvasgn, :v,
                  s(:send,
                    s(:lvar, :v), :next)),
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:lvar, :v),
                  s(:lvar, :v)))),
            s(:lvasgn, :ary,
              s(:send,
                s(:ivar, :@sdbm), :to_a)),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :Array),
              s(:lvar, :ary)),
            s(:send, nil, :assert_equal,
              s(:int, 100),
              s(:send,
                s(:lvar, :ary), :size)),
            s(:block,
              s(:send,
                s(:lvar, :ary), :each),
              s(:args,
                s(:arg, :key),
                s(:arg, :val)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :key), :to_i),
                s(:send,
                  s(:lvar, :val), :to_i))))),
        s(:def, :test_to_hash,
          s(:args),
          s(:begin,
            s(:lvasgn, :v,
              s(:str, "0")),
            s(:block,
              s(:send,
                s(:int, 100), :times),
              s(:args),
              s(:begin,
                s(:lvasgn, :v,
                  s(:send,
                    s(:lvar, :v), :next)),
                s(:send,
                  s(:ivar, :@sdbm), :[]=,
                  s(:lvar, :v),
                  s(:lvar, :v)))),
            s(:lvasgn, :hash,
              s(:send,
                s(:ivar, :@sdbm), :to_hash)),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :Hash),
              s(:lvar, :hash)),
            s(:send, nil, :assert_equal,
              s(:int, 100),
              s(:send,
                s(:lvar, :hash), :size)),
            s(:block,
              s(:send,
                s(:lvar, :hash), :each),
              s(:args,
                s(:arg, :key),
                s(:arg, :val)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :key), :to_i),
                s(:send,
                  s(:lvar, :val), :to_i))))),
        s(:def, :test_closed,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:ivar, :@sdbm), :closed?)),
            s(:send,
              s(:ivar, :@sdbm), :close),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:ivar, :@sdbm), :closed?)),
            s(:ivasgn, :@sdbm,
              s(:send,
                s(:const, nil, :SDBM), :new,
                s(:ivar, :@path))))),
        s(:def, :test_readonly,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@sdbm), :[]=,
              s(:str, "bar"),
              s(:str, "baz")),
            s(:send,
              s(:ivar, :@sdbm), :close),
            s(:send,
              s(:const, nil, :File), :chmod,
              s(:int, 292),
              s(:send,
                s(:ivar, :@path), :+,
                s(:str, ".dir"))),
            s(:send,
              s(:const, nil, :File), :chmod,
              s(:int, 292),
              s(:send,
                s(:ivar, :@path), :+,
                s(:str, ".pag"))),
            s(:ivasgn, :@sdbm,
              s(:send,
                s(:const, nil, :SDBM), :new,
                s(:ivar, :@path))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :SDBMError)),
              s(:args),
              s(:send,
                s(:ivar, :@sdbm), :[]=,
                s(:str, "bar"),
                s(:str, "foo"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :SDBMError)),
              s(:args),
              s(:send,
                s(:ivar, :@sdbm), :delete,
                s(:str, "bar"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :SDBMError)),
              s(:args),
              s(:block,
                s(:send,
                  s(:ivar, :@sdbm), :delete_if),
                s(:args),
                s(:true))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :SDBMError)),
              s(:args),
              s(:send,
                s(:ivar, :@sdbm), :clear)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:ivar, :@sdbm), :store,
                s(:str, "bar"),
                s(:nil))))),
        s(:def, :test_update2,
          s(:args),
          s(:begin,
            s(:lvasgn, :obj,
              s(:send,
                s(:const, nil, :Object), :new)),
            s(:defs,
              s(:lvar, :obj), :each_pair,
              s(:args),
              s(:yield,
                s(:array))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:ivar, :@sdbm), :update,
                s(:lvar, :obj))))))), nil))
