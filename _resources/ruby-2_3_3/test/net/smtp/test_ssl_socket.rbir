s(:begin,
  s(:send, nil, :require,
    s(:str, "net/smtp")),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:if,
    s(:defined?,
      s(:const, nil, :OpenSSL)),
    s(:module,
      s(:const, nil, :Net),
      s(:class,
        s(:const, nil, :TestSSLSocket),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:class,
            s(:const, nil, :MySMTP),
            s(:const, nil, :SMTP),
            s(:begin,
              s(:send, nil, :attr_accessor,
                s(:sym, :fake_tcp),
                s(:sym, :fake_ssl)),
              s(:def, :tcp_socket,
                s(:args,
                  s(:arg, :address),
                  s(:arg, :port)),
                s(:send, nil, :fake_tcp)),
              s(:def, :ssl_socket,
                s(:args,
                  s(:arg, :socket),
                  s(:arg, :context)),
                s(:send, nil, :fake_ssl)))),
          s(:send, nil, :require,
            s(:str, "stringio")),
          s(:class,
            s(:const, nil, :SSLSocket),
            s(:const, nil, :StringIO),
            s(:begin,
              s(:send, nil, :attr_accessor,
                s(:sym, :sync_close),
                s(:sym, :connected),
                s(:sym, :closed)),
              s(:def, :initialize,
                s(:args,
                  s(:restarg, :args)),
                s(:begin,
                  s(:ivasgn, :@connected,
                    s(:false)),
                  s(:ivasgn, :@closed,
                    s(:true)),
                  s(:zsuper))),
              s(:def, :connect,
                s(:args),
                s(:begin,
                  s(:send,
                    s(:self), :connected=,
                    s(:true)),
                  s(:send,
                    s(:self), :closed=,
                    s(:false)))),
              s(:def, :close,
                s(:args),
                s(:send,
                  s(:self), :closed=,
                  s(:true))),
              s(:def, :post_connection_check,
                s(:args,
                  s(:arg, :omg)), nil))),
          s(:def, :test_ssl_socket_close_on_post_connection_check_fail,
            s(:args),
            s(:begin,
              s(:lvasgn, :tcp_socket,
                s(:send,
                  s(:const, nil, :StringIO), :new,
                  s(:send, nil, :success_response))),
              s(:lvasgn, :ssl_socket,
                s(:send,
                  s(:send,
                    s(:const, nil, :SSLSocket), :new), :extend,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Module), :new),
                    s(:args),
                    s(:def, :post_connection_check,
                      s(:args,
                        s(:arg, :omg)),
                      s(:send, nil, :raise,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :SSLError),
                        s(:str, "hostname was not match with the server certificate")))))),
              s(:lvasgn, :connection,
                s(:send,
                  s(:const, nil, :MySMTP), :new,
                  s(:str, "localhost"),
                  s(:int, 25))),
              s(:send,
                s(:lvar, :connection), :enable_starttls_auto),
              s(:send,
                s(:lvar, :connection), :fake_tcp=,
                s(:lvar, :tcp_socket)),
              s(:send,
                s(:lvar, :connection), :fake_ssl=,
                s(:lvar, :ssl_socket)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLError)),
                s(:args),
                s(:send,
                  s(:lvar, :connection), :start)),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :ssl_socket), :closed)))),
          s(:def, :test_ssl_socket_open_on_post_connection_check_success,
            s(:args),
            s(:begin,
              s(:lvasgn, :tcp_socket,
                s(:send,
                  s(:const, nil, :StringIO), :new,
                  s(:send, nil, :success_response))),
              s(:lvasgn, :ssl_socket,
                s(:send,
                  s(:const, nil, :SSLSocket), :new,
                  s(:send, nil, :success_response))),
              s(:lvasgn, :connection,
                s(:send,
                  s(:const, nil, :MySMTP), :new,
                  s(:str, "localhost"),
                  s(:int, 25))),
              s(:send,
                s(:lvar, :connection), :enable_starttls_auto),
              s(:send,
                s(:lvar, :connection), :fake_tcp=,
                s(:lvar, :tcp_socket)),
              s(:send,
                s(:lvar, :connection), :fake_ssl=,
                s(:lvar, :ssl_socket)),
              s(:send,
                s(:lvar, :connection), :start),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :ssl_socket), :closed)))),
          s(:def, :success_response,
            s(:args),
            s(:send,
              s(:send,
                s(:array,
                  s(:str, "220 smtp.example.com ESMTP Postfix"),
                  s(:str, "250-ubuntu-desktop"),
                  s(:str, "250-PIPELINING"),
                  s(:str, "250-SIZE 10240000"),
                  s(:str, "250-VRFY"),
                  s(:str, "250-ETRN"),
                  s(:str, "250-STARTTLS"),
                  s(:str, "250-ENHANCEDSTATUSCODES"),
                  s(:str, "250-8BITMIME"),
                  s(:str, "250 DSN"),
                  s(:str, "220 2.0.0 Ready to start TLS")), :join,
                s(:str, "\r\n")), :+,
              s(:str, "\r\n")))))), nil))
