s(:begin,
  s(:send, nil, :require,
    s(:str, "net/smtp")),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:module,
    s(:const, nil, :Net),
    s(:class,
      s(:const, nil, :SMTP), nil,
      s(:class,
        s(:const, nil, :TestResponse),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :test_capabilities,
            s(:args),
            s(:begin,
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :Response), :parse,
                  s(:str, "250-ubuntu-desktop\n250-PIPELINING\n250-SIZE 10240000\n250-VRFY\n250-ETRN\n250-STARTTLS\n250-ENHANCEDSTATUSCODES\n250 DSN\n"))),
              s(:lvasgn, :capabilities,
                s(:send,
                  s(:lvar, :res), :capabilities)),
              s(:block,
                s(:send,
                  s(:array,
                    s(:str, "PIPELINING"),
                    s(:str, "SIZE"),
                    s(:str, "VRFY"),
                    s(:str, "STARTTLS"),
                    s(:str, "ENHANCEDSTATUSCODES"),
                    s(:str, "DSN")), :each),
                s(:args,
                  s(:arg, :str)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:lvar, :capabilities), :key?,
                    s(:lvar, :str)),
                  s(:lvar, :str))))),
          s(:def, :test_capabilities_default,
            s(:args),
            s(:begin,
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :Response), :parse,
                  s(:str, "250-ubuntu-desktop\n250-PIPELINING\n250 DSN\n"))),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:send,
                  s(:send,
                    s(:lvar, :res), :capabilities), :[],
                  s(:str, "PIPELINING"))))),
          s(:def, :test_capabilities_value,
            s(:args),
            s(:begin,
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :Response), :parse,
                  s(:str, "250-ubuntu-desktop\n250-SIZE 1234\n250 DSN\n"))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "1234")),
                s(:send,
                  s(:send,
                    s(:lvar, :res), :capabilities), :[],
                  s(:str, "SIZE"))))),
          s(:def, :test_capabilities_multi,
            s(:args),
            s(:begin,
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :Response), :parse,
                  s(:str, "250-ubuntu-desktop\n250-SIZE 1 2 3\n250 DSN\n"))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "1"),
                  s(:str, "2"),
                  s(:str, "3")),
                s(:send,
                  s(:send,
                    s(:lvar, :res), :capabilities), :[],
                  s(:str, "SIZE"))))),
          s(:def, :test_bad_string,
            s(:args),
            s(:begin,
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :Response), :parse,
                  s(:str, "badstring"))),
              s(:send, nil, :assert_equal,
                s(:hash),
                s(:send,
                  s(:lvar, :res), :capabilities)))),
          s(:def, :test_success?,
            s(:args),
            s(:begin,
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :Response), :parse,
                  s(:str, "250-ubuntu-desktop\n250-SIZE 1 2 3\n250 DSN\n"))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :res), :success?)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :res), :continue?), :!)))),
          s(:def, :test_continue?,
            s(:args),
            s(:begin,
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :Response), :parse,
                  s(:str, "3yz-ubuntu-desktop\n250-SIZE 1 2 3\n250 DSN\n"))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :res), :success?), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :res), :continue?)))),
          s(:def, :test_status_type_char,
            s(:args),
            s(:begin,
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :Response), :parse,
                  s(:str, "3yz-ubuntu-desktop\n250-SIZE 1 2 3\n250 DSN\n"))),
              s(:send, nil, :assert_equal,
                s(:str, "3"),
                s(:send,
                  s(:lvar, :res), :status_type_char)),
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :Response), :parse,
                  s(:str, "250-ubuntu-desktop\n250-SIZE 1 2 3\n250 DSN\n"))),
              s(:send, nil, :assert_equal,
                s(:str, "2"),
                s(:send,
                  s(:lvar, :res), :status_type_char)))),
          s(:def, :test_message,
            s(:args),
            s(:begin,
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :Response), :parse,
                  s(:str, "250-ubuntu-desktop\n250-SIZE 1 2 3\n250 DSN\n"))),
              s(:send, nil, :assert_equal,
                s(:str, "250-ubuntu-desktop\n"),
                s(:send,
                  s(:lvar, :res), :message)))),
          s(:def, :test_server_busy_exception,
            s(:args),
            s(:begin,
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :Response), :parse,
                  s(:str, "400 omg busy"))),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Net), :SMTPServerBusy),
                s(:send,
                  s(:lvar, :res), :exception_class)),
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :Response), :parse,
                  s(:str, "410 omg busy"))),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Net), :SMTPServerBusy),
                s(:send,
                  s(:lvar, :res), :exception_class)))),
          s(:def, :test_syntax_error_exception,
            s(:args),
            s(:begin,
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :Response), :parse,
                  s(:str, "500 omg syntax error"))),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Net), :SMTPSyntaxError),
                s(:send,
                  s(:lvar, :res), :exception_class)),
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :Response), :parse,
                  s(:str, "501 omg syntax error"))),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Net), :SMTPSyntaxError),
                s(:send,
                  s(:lvar, :res), :exception_class)))),
          s(:def, :test_authentication_exception,
            s(:args),
            s(:begin,
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :Response), :parse,
                  s(:str, "530 omg auth error"))),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Net), :SMTPAuthenticationError),
                s(:send,
                  s(:lvar, :res), :exception_class)),
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :Response), :parse,
                  s(:str, "531 omg auth error"))),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Net), :SMTPAuthenticationError),
                s(:send,
                  s(:lvar, :res), :exception_class)))),
          s(:def, :test_fatal_error,
            s(:args),
            s(:begin,
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :Response), :parse,
                  s(:str, "510 omg fatal error"))),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Net), :SMTPFatalError),
                s(:send,
                  s(:lvar, :res), :exception_class)),
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :Response), :parse,
                  s(:str, "511 omg fatal error"))),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Net), :SMTPFatalError),
                s(:send,
                  s(:lvar, :res), :exception_class)))),
          s(:def, :test_default_exception,
            s(:args),
            s(:begin,
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :Response), :parse,
                  s(:str, "250 omg fatal error"))),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Net), :SMTPUnknownError),
                s(:send,
                  s(:lvar, :res), :exception_class)))))))))
