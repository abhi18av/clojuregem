s(:begin,
  s(:send, nil, :require,
    s(:str, "net/http")),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :HTTPResponsesTest),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:def, :test_status_code_classes,
      s(:args),
      s(:block,
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :Net), :HTTPResponse), :CODE_TO_OBJ), :each_pair),
        s(:args,
          s(:arg, :code),
          s(:arg, :klass)),
        s(:begin,
          s(:case,
            s(:lvar, :code),
            s(:when,
              s(:regexp,
                s(:str, "\\A1\\d\\d\\z"),
                s(:regopt)),
              s(:lvasgn, :group,
                s(:const,
                  s(:const, nil, :Net), :HTTPInformation))),
            s(:when,
              s(:regexp,
                s(:str, "\\A2\\d\\d\\z"),
                s(:regopt)),
              s(:lvasgn, :group,
                s(:const,
                  s(:const, nil, :Net), :HTTPSuccess))),
            s(:when,
              s(:regexp,
                s(:str, "\\A3\\d\\d\\z"),
                s(:regopt)),
              s(:lvasgn, :group,
                s(:const,
                  s(:const, nil, :Net), :HTTPRedirection))),
            s(:when,
              s(:regexp,
                s(:str, "\\A4\\d\\d\\z"),
                s(:regopt)),
              s(:lvasgn, :group,
                s(:const,
                  s(:const, nil, :Net), :HTTPClientError))),
            s(:when,
              s(:regexp,
                s(:str, "\\A5\\d\\d\\z"),
                s(:regopt)),
              s(:lvasgn, :group,
                s(:const,
                  s(:const, nil, :Net), :HTTPServerError))),
            s(:send, nil, :flunk,
              s(:dstr,
                s(:str, "Unknown HTTP status code: "),
                s(:begin,
                  s(:lvar, :code)),
                s(:str, " => "),
                s(:begin,
                  s(:send,
                    s(:lvar, :klass), :name))))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :klass), :<,
              s(:lvar, :group)),
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:str, " ("),
              s(:begin,
                s(:lvar, :code)),
              s(:str, ") must inherit from "),
              s(:begin,
                s(:send,
                  s(:lvar, :group), :name)))))))))
