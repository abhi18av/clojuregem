s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :require,
          s(:str, "net/https")),
        s(:send, nil, :require,
          s(:str, "stringio")),
        s(:send, nil, :require,
          s(:str, "timeout")),
        s(:send, nil, :require,
          s(:send,
            s(:const, nil, :File), :expand_path,
            s(:str, "../../openssl/utils"),
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:str, "(string)")))),
        s(:send, nil, :require,
          s(:send,
            s(:const, nil, :File), :expand_path,
            s(:str, "utils"),
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:str, "(string)"))))),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :TestUtils)),
    s(:class,
      s(:const, nil, :TestNetHTTPS),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :TestNetHTTPUtils)),
        s(:lvasgn, :subject,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :X509), :Name), :parse,
            s(:str, "/DC=org/DC=ruby-lang/CN=localhost"))),
        s(:lvasgn, :exts,
          s(:array,
            s(:array,
              s(:str, "keyUsage"),
              s(:str, "keyEncipherment,digitalSignature"),
              s(:true)))),
        s(:lvasgn, :key,
          s(:const,
            s(:const,
              s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_RSA1024)),
        s(:lvasgn, :cert,
          s(:send,
            s(:const,
              s(:const, nil, :OpenSSL), :TestUtils), :issue_cert,
            s(:lvar, :subject),
            s(:lvar, :key),
            s(:int, 1),
            s(:send,
              s(:const, nil, :Time), :now),
            s(:send,
              s(:send,
                s(:const, nil, :Time), :now), :+,
              s(:int, 3600)),
            s(:lvar, :exts),
            s(:nil),
            s(:nil),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :Digest), :SHA1), :new))),
        s(:casgn, nil, :CONFIG,
          s(:hash,
            s(:pair,
              s(:str, "host"),
              s(:str, "127.0.0.1")),
            s(:pair,
              s(:str, "proxy_host"),
              s(:nil)),
            s(:pair,
              s(:str, "proxy_port"),
              s(:nil)),
            s(:pair,
              s(:str, "ssl_enable"),
              s(:true)),
            s(:pair,
              s(:str, "ssl_certificate"),
              s(:lvar, :cert)),
            s(:pair,
              s(:str, "ssl_private_key"),
              s(:lvar, :key)))),
        s(:def, :test_get,
          s(:args),
          s(:rescue,
            s(:begin,
              s(:lvasgn, :http,
                s(:send,
                  s(:const,
                    s(:const, nil, :Net), :HTTP), :new,
                  s(:str, "localhost"),
                  s(:send, nil, :config,
                    s(:str, "port")))),
              s(:send,
                s(:lvar, :http), :use_ssl=,
                s(:true)),
              s(:send,
                s(:lvar, :http), :verify_callback=,
                s(:block,
                  s(:send,
                    s(:const, nil, :Proc), :new),
                  s(:args,
                    s(:arg, :preverify_ok),
                    s(:arg, :store_ctx)),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :store_ctx), :current_cert), :to_der), :==,
                    s(:send,
                      s(:send, nil, :config,
                        s(:str, "ssl_certificate")), :to_der)))),
              s(:block,
                s(:send,
                  s(:lvar, :http), :request_get,
                  s(:str, "/")),
                s(:args,
                  s(:arg, :res)),
                s(:send, nil, :assert_equal,
                  s(:gvar, :$test_net_http_data),
                  s(:send,
                    s(:lvar, :res), :body)))),
            s(:resbody,
              s(:array,
                s(:const, nil, :SystemCallError)), nil,
              s(:send, nil, :skip,
                s(:gvar, :$!))), nil)),
        s(:def, :test_post,
          s(:args),
          s(:rescue,
            s(:begin,
              s(:lvasgn, :http,
                s(:send,
                  s(:const,
                    s(:const, nil, :Net), :HTTP), :new,
                  s(:str, "localhost"),
                  s(:send, nil, :config,
                    s(:str, "port")))),
              s(:send,
                s(:lvar, :http), :use_ssl=,
                s(:true)),
              s(:send,
                s(:lvar, :http), :verify_callback=,
                s(:block,
                  s(:send,
                    s(:const, nil, :Proc), :new),
                  s(:args,
                    s(:arg, :preverify_ok),
                    s(:arg, :store_ctx)),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :store_ctx), :current_cert), :to_der), :==,
                    s(:send,
                      s(:send, nil, :config,
                        s(:str, "ssl_certificate")), :to_der)))),
              s(:lvasgn, :data,
                s(:send,
                  s(:send, nil, :config,
                    s(:str, "ssl_private_key")), :to_der)),
              s(:block,
                s(:send,
                  s(:lvar, :http), :request_post,
                  s(:str, "/"),
                  s(:lvar, :data),
                  s(:hash,
                    s(:pair,
                      s(:str, "content-type"),
                      s(:str, "application/x-www-form-urlencoded")))),
                s(:args,
                  s(:arg, :res)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :data),
                  s(:send,
                    s(:lvar, :res), :body)))),
            s(:resbody,
              s(:array,
                s(:const, nil, :SystemCallError)), nil,
              s(:send, nil, :skip,
                s(:gvar, :$!))), nil)),
        s(:def, :test_session_reuse,
          s(:args),
          s(:rescue,
            s(:begin,
              s(:lvasgn, :http,
                s(:send,
                  s(:const,
                    s(:const, nil, :Net), :HTTP), :new,
                  s(:str, "localhost"),
                  s(:send, nil, :config,
                    s(:str, "port")))),
              s(:send,
                s(:lvar, :http), :use_ssl=,
                s(:true)),
              s(:send,
                s(:lvar, :http), :verify_callback=,
                s(:block,
                  s(:send,
                    s(:const, nil, :Proc), :new),
                  s(:args,
                    s(:arg, :preverify_ok),
                    s(:arg, :store_ctx)),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :store_ctx), :current_cert), :to_der), :==,
                    s(:send,
                      s(:send, nil, :config,
                        s(:str, "ssl_certificate")), :to_der)))),
              s(:send,
                s(:lvar, :http), :start),
              s(:send,
                s(:lvar, :http), :get,
                s(:str, "/")),
              s(:send,
                s(:lvar, :http), :finish),
              s(:send,
                s(:lvar, :http), :start),
              s(:send,
                s(:lvar, :http), :get,
                s(:str, "/")),
              s(:send,
                s(:lvar, :http), :finish),
              s(:lvasgn, :sid,
                s(:send,
                  s(:send,
                    s(:lvar, :http), :instance_variable_get,
                    s(:sym, :@ssl_session)), :id)),
              s(:send,
                s(:lvar, :http), :start),
              s(:send,
                s(:lvar, :http), :get,
                s(:str, "/")),
              s(:lvasgn, :socket,
                s(:send,
                  s(:send,
                    s(:lvar, :http), :instance_variable_get,
                    s(:sym, :@socket)), :io)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :socket), :session_reused?)),
              s(:send, nil, :assert_equal,
                s(:lvar, :sid),
                s(:send,
                  s(:send,
                    s(:lvar, :http), :instance_variable_get,
                    s(:sym, :@ssl_session)), :id)),
              s(:send,
                s(:lvar, :http), :finish)),
            s(:resbody,
              s(:array,
                s(:const, nil, :SystemCallError)), nil,
              s(:send, nil, :skip,
                s(:gvar, :$!))), nil)),
        s(:def, :test_session_reuse_but_expire,
          s(:args),
          s(:rescue,
            s(:begin,
              s(:lvasgn, :http,
                s(:send,
                  s(:const,
                    s(:const, nil, :Net), :HTTP), :new,
                  s(:str, "localhost"),
                  s(:send, nil, :config,
                    s(:str, "port")))),
              s(:send,
                s(:lvar, :http), :use_ssl=,
                s(:true)),
              s(:send,
                s(:lvar, :http), :verify_callback=,
                s(:block,
                  s(:send,
                    s(:const, nil, :Proc), :new),
                  s(:args,
                    s(:arg, :preverify_ok),
                    s(:arg, :store_ctx)),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :store_ctx), :current_cert), :to_der), :==,
                    s(:send,
                      s(:send, nil, :config,
                        s(:str, "ssl_certificate")), :to_der)))),
              s(:send,
                s(:lvar, :http), :ssl_timeout=,
                s(:int, -1)),
              s(:send,
                s(:lvar, :http), :start),
              s(:send,
                s(:lvar, :http), :get,
                s(:str, "/")),
              s(:send,
                s(:lvar, :http), :finish),
              s(:lvasgn, :sid,
                s(:send,
                  s(:send,
                    s(:lvar, :http), :instance_variable_get,
                    s(:sym, :@ssl_session)), :id)),
              s(:send,
                s(:lvar, :http), :start),
              s(:send,
                s(:lvar, :http), :get,
                s(:str, "/")),
              s(:lvasgn, :socket,
                s(:send,
                  s(:send,
                    s(:lvar, :http), :instance_variable_get,
                    s(:sym, :@socket)), :io)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :socket), :session_reused?)),
              s(:send, nil, :assert_not_equal,
                s(:lvar, :sid),
                s(:send,
                  s(:send,
                    s(:lvar, :http), :instance_variable_get,
                    s(:sym, :@ssl_session)), :id)),
              s(:send,
                s(:lvar, :http), :finish)),
            s(:resbody,
              s(:array,
                s(:const, nil, :SystemCallError)), nil,
              s(:send, nil, :skip,
                s(:gvar, :$!))), nil)),
        s(:if,
          s(:send,
            s(:const, nil, :ENV), :[],
            s(:str, "RUBY_OPENSSL_TEST_ALL")),
          s(:def, :test_verify,
            s(:args),
            s(:begin,
              s(:lvasgn, :http,
                s(:send,
                  s(:const,
                    s(:const, nil, :Net), :HTTP), :new,
                  s(:str, "ssl.netlab.jp"),
                  s(:int, 443))),
              s(:send,
                s(:lvar, :http), :use_ssl=,
                s(:true)),
              s(:send, nil, :assert,
                s(:begin,
                  s(:rescue,
                    s(:block,
                      s(:send,
                        s(:lvar, :http), :request_head,
                        s(:str, "/")),
                      s(:args,
                        s(:arg, :res)), nil),
                    s(:resbody, nil, nil,
                      s(:false)), nil)),
                s(:str, "The system may not have default CA certificate store.")))), nil),
        s(:def, :test_verify_none,
          s(:args),
          s(:rescue,
            s(:begin,
              s(:lvasgn, :http,
                s(:send,
                  s(:const,
                    s(:const, nil, :Net), :HTTP), :new,
                  s(:str, "localhost"),
                  s(:send, nil, :config,
                    s(:str, "port")))),
              s(:send,
                s(:lvar, :http), :use_ssl=,
                s(:true)),
              s(:send,
                s(:lvar, :http), :verify_mode=,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE)),
              s(:block,
                s(:send,
                  s(:lvar, :http), :request_get,
                  s(:str, "/")),
                s(:args,
                  s(:arg, :res)),
                s(:send, nil, :assert_equal,
                  s(:gvar, :$test_net_http_data),
                  s(:send,
                    s(:lvar, :res), :body)))),
            s(:resbody,
              s(:array,
                s(:const, nil, :SystemCallError)), nil,
              s(:send, nil, :skip,
                s(:gvar, :$!))), nil)),
        s(:def, :test_certificate_verify_failure,
          s(:args),
          s(:begin,
            s(:lvasgn, :http,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :new,
                s(:str, "localhost"),
                s(:send, nil, :config,
                  s(:str, "port")))),
            s(:send,
              s(:lvar, :http), :use_ssl=,
              s(:true)),
            s(:lvasgn, :ex,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLError)),
                s(:args),
                s(:kwbegin,
                  s(:rescue,
                    s(:block,
                      s(:send,
                        s(:lvar, :http), :request_get,
                        s(:str, "/")),
                      s(:args,
                        s(:arg, :res)), nil),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :SystemCallError)), nil,
                      s(:send, nil, :skip,
                        s(:gvar, :$!))), nil)))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "certificate verify failed"),
                s(:regopt)),
              s(:send,
                s(:lvar, :ex), :message)),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "mswin|mingw"),
                  s(:regopt)),
                s(:const, nil, :RUBY_PLATFORM)), nil,
              s(:ivasgn, :@log_tester,
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args,
                    s(:arg, :log)),
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:int, 1),
                      s(:send,
                        s(:lvar, :log), :length)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "ERROR OpenSSL::SSL::SSLError:"),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :log), :[],
                        s(:int, 0))))))))),
        s(:def, :test_identity_verify_failure,
          s(:args),
          s(:begin,
            s(:lvasgn, :http,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :new,
                s(:str, "127.0.0.1"),
                s(:send, nil, :config,
                  s(:str, "port")))),
            s(:send,
              s(:lvar, :http), :use_ssl=,
              s(:true)),
            s(:send,
              s(:lvar, :http), :verify_callback=,
              s(:block,
                s(:send,
                  s(:const, nil, :Proc), :new),
                s(:args,
                  s(:arg, :preverify_ok),
                  s(:arg, :store_ctx)),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :store_ctx), :current_cert), :to_der), :==,
                  s(:send,
                    s(:send, nil, :config,
                      s(:str, "ssl_certificate")), :to_der)))),
            s(:lvasgn, :ex,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :SSLError)),
                s(:args),
                s(:block,
                  s(:send,
                    s(:lvar, :http), :request_get,
                    s(:str, "/")),
                  s(:args,
                    s(:arg, :res)), nil))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "hostname \\\"127.0.0.1\\\" does not match"),
                s(:regopt)),
              s(:send,
                s(:lvar, :ex), :message)))),
        s(:def, :test_timeout_during_SSL_handshake,
          s(:args),
          s(:begin,
            s(:lvasgn, :bug4246,
              s(:str, "expected the SSL connection to have timed out but have not. [ruby-core:34203]")),
            s(:block,
              s(:send,
                s(:const, nil, :TCPServer), :open,
                s(:str, "localhost"),
                s(:int, 0)),
              s(:args,
                s(:arg, :server)),
              s(:begin,
                s(:lvasgn, :port,
                  s(:send,
                    s(:send,
                      s(:lvar, :server), :addr), :[],
                    s(:int, 1))),
                s(:lvasgn, :conn,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Net), :HTTP), :new,
                    s(:str, "localhost"),
                    s(:lvar, :port))),
                s(:send,
                  s(:lvar, :conn), :use_ssl=,
                  s(:true)),
                s(:send,
                  s(:lvar, :conn), :read_timeout=,
                  s(:float, 0.01)),
                s(:send,
                  s(:lvar, :conn), :open_timeout=,
                  s(:float, 0.01)),
                s(:lvasgn, :th,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :Net), :OpenTimeout)),
                      s(:args),
                      s(:send,
                        s(:lvar, :conn), :get,
                        s(:str, "/"))))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:lvar, :th), :join,
                    s(:int, 10)),
                  s(:lvar, :bug4246)))))))), nil))
