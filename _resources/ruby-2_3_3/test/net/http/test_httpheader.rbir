s(:begin,
  s(:send, nil, :require,
    s(:str, "net/http")),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :HTTPHeaderTest),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:class,
        s(:const, nil, :C), nil,
        s(:begin,
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :Net), :HTTPHeader)),
          s(:def, :initialize,
            s(:args),
            s(:send, nil, :initialize_http_header,
              s(:hash))),
          s(:send, nil, :attr_accessor,
            s(:sym, :body)))),
      s(:def, :setup,
        s(:args),
        s(:ivasgn, :@c,
          s(:send,
            s(:const, nil, :C), :new))),
      s(:def, :test_size,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@c), :size)),
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "a"),
            s(:str, "a")),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@c), :size)),
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "b"),
            s(:str, "b")),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@c), :size)),
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "b"),
            s(:str, "b")),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@c), :size)),
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "c"),
            s(:str, "c")),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:ivar, :@c), :size)))),
      s(:def, :test_ASET,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "My-Header"),
            s(:str, "test string")),
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "my-Header"),
            s(:str, "test string")),
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "My-header"),
            s(:str, "test string")),
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "my-header"),
            s(:str, "test string")),
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "MY-HEADER"),
            s(:str, "test string")),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@c), :size)),
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "AaA"),
            s(:str, "aaa")),
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "aaA"),
            s(:str, "aaa")),
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "AAa"),
            s(:str, "aaa")),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@c), :length)))),
      s(:def, :test_AREF,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "My-Header"),
            s(:str, "test string")),
          s(:send, nil, :assert_equal,
            s(:str, "test string"),
            s(:send,
              s(:ivar, :@c), :[],
              s(:str, "my-header"))),
          s(:send, nil, :assert_equal,
            s(:str, "test string"),
            s(:send,
              s(:ivar, :@c), :[],
              s(:str, "MY-header"))),
          s(:send, nil, :assert_equal,
            s(:str, "test string"),
            s(:send,
              s(:ivar, :@c), :[],
              s(:str, "my-HEADER"))),
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "Next-Header"),
            s(:str, "next string")),
          s(:send, nil, :assert_equal,
            s(:str, "next string"),
            s(:send,
              s(:ivar, :@c), :[],
              s(:str, "next-header"))))),
      s(:def, :test_add_field,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :add_field,
            s(:str, "My-Header"),
            s(:str, "a")),
          s(:send, nil, :assert_equal,
            s(:str, "a"),
            s(:send,
              s(:ivar, :@c), :[],
              s(:str, "My-Header"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a")),
            s(:send,
              s(:ivar, :@c), :get_fields,
              s(:str, "My-Header"))),
          s(:send,
            s(:ivar, :@c), :add_field,
            s(:str, "My-Header"),
            s(:str, "b")),
          s(:send, nil, :assert_equal,
            s(:str, "a, b"),
            s(:send,
              s(:ivar, :@c), :[],
              s(:str, "My-Header"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a"),
              s(:str, "b")),
            s(:send,
              s(:ivar, :@c), :get_fields,
              s(:str, "My-Header"))),
          s(:send,
            s(:ivar, :@c), :add_field,
            s(:str, "My-Header"),
            s(:str, "c")),
          s(:send, nil, :assert_equal,
            s(:str, "a, b, c"),
            s(:send,
              s(:ivar, :@c), :[],
              s(:str, "My-Header"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a"),
              s(:str, "b"),
              s(:str, "c")),
            s(:send,
              s(:ivar, :@c), :get_fields,
              s(:str, "My-Header"))),
          s(:send,
            s(:ivar, :@c), :add_field,
            s(:str, "My-Header"),
            s(:str, "d, d")),
          s(:send, nil, :assert_equal,
            s(:str, "a, b, c, d, d"),
            s(:send,
              s(:ivar, :@c), :[],
              s(:str, "My-Header"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a"),
              s(:str, "b"),
              s(:str, "c"),
              s(:str, "d, d")),
            s(:send,
              s(:ivar, :@c), :get_fields,
              s(:str, "My-Header"))))),
      s(:def, :test_get_fields,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "My-Header"),
            s(:str, "test string")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "test string")),
            s(:send,
              s(:ivar, :@c), :get_fields,
              s(:str, "my-header"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "test string")),
            s(:send,
              s(:ivar, :@c), :get_fields,
              s(:str, "My-header"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "test string")),
            s(:send,
              s(:ivar, :@c), :get_fields,
              s(:str, "my-Header"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@c), :get_fields,
              s(:str, "not-found"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@c), :get_fields,
              s(:str, "Not-Found"))),
          s(:send,
            s(:send,
              s(:ivar, :@c), :get_fields,
              s(:str, "my-header")), :push,
            s(:str, "junk")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "test string")),
            s(:send,
              s(:ivar, :@c), :get_fields,
              s(:str, "my-header"))),
          s(:send,
            s(:send,
              s(:ivar, :@c), :get_fields,
              s(:str, "my-header")), :clear),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "test string")),
            s(:send,
              s(:ivar, :@c), :get_fields,
              s(:str, "my-header"))))),
      s(:def, :test_delete,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "My-Header"),
            s(:str, "test")),
          s(:send, nil, :assert_equal,
            s(:str, "test"),
            s(:send,
              s(:ivar, :@c), :[],
              s(:str, "My-Header"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@c), :[],
              s(:str, "not-found"))),
          s(:send,
            s(:ivar, :@c), :delete,
            s(:str, "My-Header")),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@c), :[],
              s(:str, "My-Header"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@c), :[],
              s(:str, "not-found"))),
          s(:send,
            s(:ivar, :@c), :delete,
            s(:str, "My-Header")),
          s(:send,
            s(:ivar, :@c), :delete,
            s(:str, "My-Header")),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@c), :[],
              s(:str, "My-Header"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@c), :[],
              s(:str, "not-found"))))),
      s(:def, :test_each,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "My-Header"),
            s(:str, "test")),
          s(:block,
            s(:send,
              s(:ivar, :@c), :each),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, "my-header"),
                s(:lvar, :k)),
              s(:send, nil, :assert_equal,
                s(:str, "test"),
                s(:lvar, :v)))),
          s(:block,
            s(:send,
              s(:ivar, :@c), :each),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, "my-header"),
                s(:lvar, :k)),
              s(:send, nil, :assert_equal,
                s(:str, "test"),
                s(:lvar, :v)))))),
      s(:def, :test_each_key,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "My-Header"),
            s(:str, "test")),
          s(:block,
            s(:send,
              s(:ivar, :@c), :each_key),
            s(:args,
              s(:arg, :k)),
            s(:send, nil, :assert_equal,
              s(:str, "my-header"),
              s(:lvar, :k))),
          s(:block,
            s(:send,
              s(:ivar, :@c), :each_key),
            s(:args,
              s(:arg, :k)),
            s(:send, nil, :assert_equal,
              s(:str, "my-header"),
              s(:lvar, :k))))),
      s(:def, :test_each_value,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "My-Header"),
            s(:str, "test")),
          s(:block,
            s(:send,
              s(:ivar, :@c), :each_value),
            s(:args,
              s(:arg, :v)),
            s(:send, nil, :assert_equal,
              s(:str, "test"),
              s(:lvar, :v))),
          s(:block,
            s(:send,
              s(:ivar, :@c), :each_value),
            s(:args,
              s(:arg, :v)),
            s(:send, nil, :assert_equal,
              s(:str, "test"),
              s(:lvar, :v))))),
      s(:def, :test_canonical_each,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "my-header"),
            s(:array,
              s(:str, "a"),
              s(:str, "b"))),
          s(:block,
            s(:send,
              s(:ivar, :@c), :canonical_each),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, "My-Header"),
                s(:lvar, :k)),
              s(:send, nil, :assert_equal,
                s(:str, "a, b"),
                s(:lvar, :v)))))),
      s(:def, :test_each_capitalized,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "my-header"),
            s(:array,
              s(:str, "a"),
              s(:str, "b"))),
          s(:block,
            s(:send,
              s(:ivar, :@c), :each_capitalized),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, "My-Header"),
                s(:lvar, :k)),
              s(:send, nil, :assert_equal,
                s(:str, "a, b"),
                s(:lvar, :v)))))),
      s(:def, :test_each_capitalized_with_symbol,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:sym, :my_header),
            s(:array,
              s(:str, "a"),
              s(:str, "b"))),
          s(:block,
            s(:send,
              s(:ivar, :@c), :each_capitalized),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, "My_header"),
                s(:lvar, :k)),
              s(:send, nil, :assert_equal,
                s(:str, "a, b"),
                s(:lvar, :v)))))),
      s(:def, :test_key?,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "My-Header"),
            s(:str, "test")),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@c), :key?,
              s(:str, "My-Header"))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@c), :key?,
              s(:str, "my-header"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@c), :key?,
              s(:str, "Not-Found"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@c), :key?,
              s(:str, "not-found"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@c), :key?,
              s(:str, ""))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@c), :key?,
              s(:send,
                s(:str, "x"), :*,
                s(:int, 1024)))))),
      s(:def, :test_to_hash,
        s(:args), nil),
      s(:def, :test_range,
        s(:args),
        s(:begin,
          s(:send, nil, :try_range,
            s(:array,
              s(:irange,
                s(:int, 1),
                s(:int, 5))),
            s(:str, "1-5")),
          s(:send, nil, :try_invalid_range,
            s(:str, "5-1")),
          s(:send, nil, :try_range,
            s(:array,
              s(:irange,
                s(:int, 234),
                s(:int, 567))),
            s(:str, "234-567")),
          s(:send, nil, :try_range,
            s(:array,
              s(:irange,
                s(:int, -5),
                s(:int, -1))),
            s(:str, "-5")),
          s(:send, nil, :try_invalid_range,
            s(:str, "-0")),
          s(:send, nil, :try_range,
            s(:array,
              s(:irange,
                s(:int, 1),
                s(:int, -1))),
            s(:str, "1-")),
          s(:send, nil, :try_range,
            s(:array,
              s(:irange,
                s(:int, 0),
                s(:int, 0)),
              s(:irange,
                s(:int, -1),
                s(:int, -1))),
            s(:str, "0-0,-1")),
          s(:send, nil, :try_range,
            s(:array,
              s(:irange,
                s(:int, 1),
                s(:int, 2)),
              s(:irange,
                s(:int, 3),
                s(:int, 4))),
            s(:str, "1-2,3-4")),
          s(:send, nil, :try_range,
            s(:array,
              s(:irange,
                s(:int, 1),
                s(:int, 2)),
              s(:irange,
                s(:int, 3),
                s(:int, 4))),
            s(:str, "1-2 , 3-4")),
          s(:send, nil, :try_range,
            s(:array,
              s(:irange,
                s(:int, 1),
                s(:int, 2)),
              s(:irange,
                s(:int, 1),
                s(:int, 4))),
            s(:str, "1-2,1-4")),
          s(:send, nil, :try_invalid_range,
            s(:str, "invalid")),
          s(:send, nil, :try_invalid_range,
            s(:str, " 12-")),
          s(:send, nil, :try_invalid_range,
            s(:str, "12- ")),
          s(:send, nil, :try_invalid_range,
            s(:str, "123-abc")),
          s(:send, nil, :try_invalid_range,
            s(:str, "abc-123")))),
      s(:def, :try_range,
        s(:args,
          s(:arg, :r),
          s(:arg, :s)),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "range"),
            s(:dstr,
              s(:str, "bytes="),
              s(:begin,
                s(:lvar, :s)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :r),
            s(:send,
              s(:ivar, :@c), :range)))),
      s(:def, :try_invalid_range,
        s(:args,
          s(:arg, :s)),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "range"),
            s(:dstr,
              s(:str, "bytes="),
              s(:begin,
                s(:lvar, :s)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :HTTPHeaderSyntaxError),
              s(:lvar, :s)),
            s(:args),
            s(:send,
              s(:ivar, :@c), :range)))),
      s(:def, :test_range=,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :range=,
            s(:irange,
              s(:int, 0),
              s(:int, 499))),
          s(:send, nil, :assert_equal,
            s(:str, "bytes=0-499"),
            s(:send,
              s(:ivar, :@c), :[],
              s(:str, "range"))),
          s(:send,
            s(:ivar, :@c), :range=,
            s(:erange,
              s(:int, 0),
              s(:int, 500))),
          s(:send, nil, :assert_equal,
            s(:str, "bytes=0-499"),
            s(:send,
              s(:ivar, :@c), :[],
              s(:str, "range"))),
          s(:send,
            s(:ivar, :@c), :range=,
            s(:int, 300)),
          s(:send, nil, :assert_equal,
            s(:str, "bytes=0-299"),
            s(:send,
              s(:ivar, :@c), :[],
              s(:str, "range"))),
          s(:send,
            s(:ivar, :@c), :range=,
            s(:int, -400)),
          s(:send, nil, :assert_equal,
            s(:str, "bytes=-400"),
            s(:send,
              s(:ivar, :@c), :[],
              s(:str, "range"))),
          s(:send,
            s(:ivar, :@c), :set_range,
            s(:int, 0),
            s(:int, 500)),
          s(:send, nil, :assert_equal,
            s(:str, "bytes=0-499"),
            s(:send,
              s(:ivar, :@c), :[],
              s(:str, "range"))))),
      s(:def, :test_content_range,
        s(:args), nil),
      s(:def, :test_range_length,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "Content-Range"),
            s(:str, "bytes 0-499/1000")),
          s(:send, nil, :assert_equal,
            s(:int, 500),
            s(:send,
              s(:ivar, :@c), :range_length)),
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "Content-Range"),
            s(:str, "bytes 1-500/1000")),
          s(:send, nil, :assert_equal,
            s(:int, 500),
            s(:send,
              s(:ivar, :@c), :range_length)),
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "Content-Range"),
            s(:str, "bytes 1-1/1000")),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@c), :range_length)))),
      s(:def, :test_chunked?,
        s(:args),
        s(:begin,
          s(:send, nil, :try_chunked,
            s(:true),
            s(:str, "chunked")),
          s(:send, nil, :try_chunked,
            s(:true),
            s(:str, "  chunked  ")),
          s(:send, nil, :try_chunked,
            s(:true),
            s(:str, "(OK)chunked")),
          s(:send, nil, :try_chunked,
            s(:false),
            s(:str, "not-chunked")),
          s(:send, nil, :try_chunked,
            s(:false),
            s(:str, "chunked-but-not-chunked")))),
      s(:def, :try_chunked,
        s(:args,
          s(:arg, :bool),
          s(:arg, :str)),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "transfer-encoding"),
            s(:lvar, :str)),
          s(:send, nil, :assert_equal,
            s(:lvar, :bool),
            s(:send,
              s(:ivar, :@c), :chunked?)))),
      s(:def, :test_content_length,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :delete,
            s(:str, "content-length")),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@c), :[],
              s(:str, "content-length"))),
          s(:send, nil, :try_content_length,
            s(:int, 500),
            s(:str, "500")),
          s(:send, nil, :try_content_length,
            s(:int, 1000000000000),
            s(:str, "1000000000000")),
          s(:send, nil, :try_content_length,
            s(:int, 123),
            s(:str, "  123")),
          s(:send, nil, :try_content_length,
            s(:int, 1),
            s(:str, "1 23")),
          s(:send, nil, :try_content_length,
            s(:int, 500),
            s(:str, "(OK)500")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :HTTPHeaderSyntaxError),
              s(:str, "here is no digit, but")),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@c), :[]=,
                s(:str, "content-length"),
                s(:str, "no digit")),
              s(:send,
                s(:ivar, :@c), :content_length))))),
      s(:def, :try_content_length,
        s(:args,
          s(:arg, :len),
          s(:arg, :str)),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :[]=,
            s(:str, "content-length"),
            s(:lvar, :str)),
          s(:send, nil, :assert_equal,
            s(:lvar, :len),
            s(:send,
              s(:ivar, :@c), :content_length)))),
      s(:def, :test_content_length=,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :content_length=,
            s(:int, 0)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@c), :content_length)),
          s(:send,
            s(:ivar, :@c), :content_length=,
            s(:int, 1)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@c), :content_length)),
          s(:send,
            s(:ivar, :@c), :content_length=,
            s(:int, 999)),
          s(:send, nil, :assert_equal,
            s(:int, 999),
            s(:send,
              s(:ivar, :@c), :content_length)),
          s(:send,
            s(:ivar, :@c), :content_length=,
            s(:int, 10000000000000)),
          s(:send, nil, :assert_equal,
            s(:int, 10000000000000),
            s(:send,
              s(:ivar, :@c), :content_length)))),
      s(:def, :test_content_type,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@c), :content_type)),
          s(:send,
            s(:ivar, :@c), :content_type=,
            s(:str, "text/html")),
          s(:send, nil, :assert_equal,
            s(:str, "text/html"),
            s(:send,
              s(:ivar, :@c), :content_type)),
          s(:send,
            s(:ivar, :@c), :content_type=,
            s(:str, "application/pdf")),
          s(:send, nil, :assert_equal,
            s(:str, "application/pdf"),
            s(:send,
              s(:ivar, :@c), :content_type)),
          s(:send,
            s(:ivar, :@c), :set_content_type,
            s(:str, "text/html"),
            s(:hash,
              s(:pair,
                s(:str, "charset"),
                s(:str, "iso-2022-jp")))),
          s(:send, nil, :assert_equal,
            s(:str, "text/html"),
            s(:send,
              s(:ivar, :@c), :content_type)),
          s(:send,
            s(:ivar, :@c), :content_type=,
            s(:str, "text")),
          s(:send, nil, :assert_equal,
            s(:str, "text"),
            s(:send,
              s(:ivar, :@c), :content_type)))),
      s(:def, :test_main_type,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@c), :main_type)),
          s(:send,
            s(:ivar, :@c), :content_type=,
            s(:str, "text/html")),
          s(:send, nil, :assert_equal,
            s(:str, "text"),
            s(:send,
              s(:ivar, :@c), :main_type)),
          s(:send,
            s(:ivar, :@c), :content_type=,
            s(:str, "application/pdf")),
          s(:send, nil, :assert_equal,
            s(:str, "application"),
            s(:send,
              s(:ivar, :@c), :main_type)),
          s(:send,
            s(:ivar, :@c), :set_content_type,
            s(:str, "text/html"),
            s(:hash,
              s(:pair,
                s(:str, "charset"),
                s(:str, "iso-2022-jp")))),
          s(:send, nil, :assert_equal,
            s(:str, "text"),
            s(:send,
              s(:ivar, :@c), :main_type)),
          s(:send,
            s(:ivar, :@c), :content_type=,
            s(:str, "text")),
          s(:send, nil, :assert_equal,
            s(:str, "text"),
            s(:send,
              s(:ivar, :@c), :main_type)))),
      s(:def, :test_sub_type,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@c), :sub_type)),
          s(:send,
            s(:ivar, :@c), :content_type=,
            s(:str, "text/html")),
          s(:send, nil, :assert_equal,
            s(:str, "html"),
            s(:send,
              s(:ivar, :@c), :sub_type)),
          s(:send,
            s(:ivar, :@c), :content_type=,
            s(:str, "application/pdf")),
          s(:send, nil, :assert_equal,
            s(:str, "pdf"),
            s(:send,
              s(:ivar, :@c), :sub_type)),
          s(:send,
            s(:ivar, :@c), :set_content_type,
            s(:str, "text/html"),
            s(:hash,
              s(:pair,
                s(:str, "charset"),
                s(:str, "iso-2022-jp")))),
          s(:send, nil, :assert_equal,
            s(:str, "html"),
            s(:send,
              s(:ivar, :@c), :sub_type)),
          s(:send,
            s(:ivar, :@c), :content_type=,
            s(:str, "text")),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@c), :sub_type)))),
      s(:def, :test_type_params,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:send,
              s(:ivar, :@c), :type_params)),
          s(:send,
            s(:ivar, :@c), :content_type=,
            s(:str, "text/html")),
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:send,
              s(:ivar, :@c), :type_params)),
          s(:send,
            s(:ivar, :@c), :content_type=,
            s(:str, "application/pdf")),
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:send,
              s(:ivar, :@c), :type_params)),
          s(:send,
            s(:ivar, :@c), :set_content_type,
            s(:str, "text/html"),
            s(:hash,
              s(:pair,
                s(:str, "charset"),
                s(:str, "iso-2022-jp")))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "charset"),
                s(:str, "iso-2022-jp"))),
            s(:send,
              s(:ivar, :@c), :type_params)),
          s(:send,
            s(:ivar, :@c), :content_type=,
            s(:str, "text")),
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:send,
              s(:ivar, :@c), :type_params)))),
      s(:def, :test_set_content_type,
        s(:args), nil),
      s(:def, :test_form_data=,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :form_data=,
            s(:hash,
              s(:pair,
                s(:str, "cmd"),
                s(:str, "search")),
              s(:pair,
                s(:str, "q"),
                s(:str, "ruby")),
              s(:pair,
                s(:str, "max"),
                s(:str, "50")))),
          s(:send, nil, :assert_equal,
            s(:str, "application/x-www-form-urlencoded"),
            s(:send,
              s(:ivar, :@c), :content_type)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cmd=search"),
              s(:str, "max=50"),
              s(:str, "q=ruby")),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@c), :body), :split,
                s(:str, "&")), :sort)))),
      s(:def, :test_set_form_data,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :set_form_data,
            s(:hash,
              s(:pair,
                s(:str, "cmd"),
                s(:str, "search")),
              s(:pair,
                s(:str, "q"),
                s(:str, "ruby")),
              s(:pair,
                s(:str, "max"),
                s(:str, "50")))),
          s(:send, nil, :assert_equal,
            s(:str, "application/x-www-form-urlencoded"),
            s(:send,
              s(:ivar, :@c), :content_type)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cmd=search"),
              s(:str, "max=50"),
              s(:str, "q=ruby")),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@c), :body), :split,
                s(:str, "&")), :sort)),
          s(:send,
            s(:ivar, :@c), :set_form_data,
            s(:hash,
              s(:pair,
                s(:str, "cmd"),
                s(:str, "search")),
              s(:pair,
                s(:str, "q"),
                s(:str, "ruby")),
              s(:pair,
                s(:str, "max"),
                s(:int, 50)))),
          s(:send, nil, :assert_equal,
            s(:str, "application/x-www-form-urlencoded"),
            s(:send,
              s(:ivar, :@c), :content_type)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cmd=search"),
              s(:str, "max=50"),
              s(:str, "q=ruby")),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@c), :body), :split,
                s(:str, "&")), :sort)),
          s(:send,
            s(:ivar, :@c), :set_form_data,
            s(:hash,
              s(:pair,
                s(:str, "cmd"),
                s(:str, "search")),
              s(:pair,
                s(:str, "q"),
                s(:str, "ruby")),
              s(:pair,
                s(:str, "max"),
                s(:str, "50"))),
            s(:str, ";")),
          s(:send, nil, :assert_equal,
            s(:str, "application/x-www-form-urlencoded"),
            s(:send,
              s(:ivar, :@c), :content_type)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cmd=search"),
              s(:str, "max=50"),
              s(:str, "q=ruby")),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@c), :body), :split,
                s(:str, ";")), :sort)))),
      s(:def, :test_basic_auth,
        s(:args), nil),
      s(:def, :test_proxy_basic_auth,
        s(:args), nil))))
