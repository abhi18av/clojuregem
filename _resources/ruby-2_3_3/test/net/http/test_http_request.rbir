s(:begin,
  s(:send, nil, :require,
    s(:str, "net/http")),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:class,
    s(:const, nil, :HTTPRequestTest),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_initialize_GET,
        s(:args),
        s(:begin,
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :Get), :new,
              s(:str, "/"))),
          s(:send, nil, :assert_equal,
            s(:str, "GET"),
            s(:send,
              s(:lvar, :req), :method)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :req), :request_body_permitted?)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :req), :response_body_permitted?)),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:str, "accept"),
                s(:array,
                  s(:str, "*/*"))),
              s(:pair,
                s(:str, "user-agent"),
                s(:array,
                  s(:str, "Ruby"))))),
          s(:if,
            s(:const,
              s(:const,
                s(:const, nil, :Net), :HTTP), :HAVE_ZLIB),
            s(:send,
              s(:lvar, :expected), :[]=,
              s(:str, "accept-encoding"),
              s(:array,
                s(:str, "gzip;q=1.0,deflate;q=0.6,identity;q=0.3"))), nil),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :req), :to_hash)))),
      s(:def, :test_initialize_GET_range,
        s(:args),
        s(:begin,
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :Get), :new,
              s(:str, "/"),
              s(:hash,
                s(:pair,
                  s(:str, "Range"),
                  s(:str, "bytes=0-9"))))),
          s(:send, nil, :assert_equal,
            s(:str, "GET"),
            s(:send,
              s(:lvar, :req), :method)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :req), :request_body_permitted?)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :req), :response_body_permitted?)),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:str, "accept"),
                s(:array,
                  s(:str, "*/*"))),
              s(:pair,
                s(:str, "user-agent"),
                s(:array,
                  s(:str, "Ruby"))),
              s(:pair,
                s(:str, "range"),
                s(:array,
                  s(:str, "bytes=0-9"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :req), :to_hash)))),
      s(:def, :test_initialize_HEAD,
        s(:args),
        s(:begin,
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :Head), :new,
              s(:str, "/"))),
          s(:send, nil, :assert_equal,
            s(:str, "HEAD"),
            s(:send,
              s(:lvar, :req), :method)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :req), :request_body_permitted?)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :req), :response_body_permitted?)),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:str, "accept"),
                s(:array,
                  s(:str, "*/*"))),
              s(:pair,
                s(:str, "user-agent"),
                s(:array,
                  s(:str, "Ruby"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :req), :to_hash)))),
      s(:if,
        s(:const,
          s(:const,
            s(:const, nil, :Net), :HTTP), :HAVE_ZLIB),
        s(:def, :test_initialize_accept_encoding,
          s(:args),
          s(:begin,
            s(:lvasgn, :req1,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Net), :HTTP), :Get), :new,
                s(:str, "/"))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :req1), :decode_content),
              s(:str, "Bug #7831 - automatically decode content")),
            s(:lvasgn, :req2,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Net), :HTTP), :Get), :new,
                s(:str, "/"),
                s(:hash,
                  s(:pair,
                    s(:str, "accept-encoding"),
                    s(:str, "identity"))))),
            s(:send, nil, :refute,
              s(:send,
                s(:lvar, :req2), :decode_content),
              s(:str, "Bug #7381 - do not decode content if the user overrides")))), nil),
      s(:if,
        s(:const,
          s(:const,
            s(:const, nil, :Net), :HTTP), :HAVE_ZLIB),
        s(:def, :test_header_set,
          s(:args),
          s(:begin,
            s(:lvasgn, :req,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Net), :HTTP), :Get), :new,
                s(:str, "/"))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :req), :decode_content),
              s(:str, "Bug #7831 - automatically decode content")),
            s(:send,
              s(:lvar, :req), :[]=,
              s(:str, "accept-encoding"),
              s(:str, "identity")),
            s(:send, nil, :refute,
              s(:send,
                s(:lvar, :req), :decode_content),
              s(:str, "Bug #7831 - do not decode content if the user overrides")))), nil))))
