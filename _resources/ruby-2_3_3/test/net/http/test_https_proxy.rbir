s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "net/https")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:if,
    s(:defined?,
      s(:const, nil, :OpenSSL)),
    s(:class,
      s(:const, nil, :HTTPSProxyTest),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:def, :test_https_proxy_authentication,
        s(:args),
        s(:begin,
          s(:kwbegin,
            s(:rescue,
              s(:const, nil, :OpenSSL),
              s(:resbody,
                s(:array,
                  s(:const, nil, :LoadError)), nil,
                s(:send, nil, :skip,
                  s(:str, "autoload problem. see [ruby-dev:45021][Bug #5786]"))), nil)),
          s(:block,
            s(:send,
              s(:const, nil, :TCPServer), :open,
              s(:str, "127.0.0.1"),
              s(:int, 0)),
            s(:args,
              s(:arg, :serv)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :_),
                  s(:lvasgn, :port),
                  s(:lvasgn, :_),
                  s(:lvasgn, :_)),
                s(:send,
                  s(:lvar, :serv), :addr)),
              s(:lvasgn, :client_thread,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :proxy,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :HTTP), :Proxy,
                        s(:str, "127.0.0.1"),
                        s(:lvar, :port),
                        s(:str, "user"),
                        s(:str, "password"))),
                    s(:lvasgn, :http,
                      s(:send,
                        s(:lvar, :proxy), :new,
                        s(:str, "foo.example.org"),
                        s(:int, 8000))),
                    s(:send,
                      s(:lvar, :http), :use_ssl=,
                      s(:true)),
                    s(:send,
                      s(:lvar, :http), :verify_mode=,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE)),
                    s(:kwbegin,
                      s(:rescue,
                        s(:send,
                          s(:lvar, :http), :start),
                        s(:resbody,
                          s(:array,
                            s(:const, nil, :EOFError)), nil, nil), nil))))),
              s(:lvasgn, :server_thread,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :sock,
                      s(:send,
                        s(:lvar, :serv), :accept)),
                    s(:kwbegin,
                      s(:ensure,
                        s(:begin,
                          s(:lvasgn, :proxy_request,
                            s(:send,
                              s(:lvar, :sock), :gets,
                              s(:str, "\r\n\r\n"))),
                          s(:send, nil, :assert_equal,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:str, "CONNECT foo.example.org:8000 HTTP/1.1\r\n"), :+,
                                  s(:str, "Host: foo.example.org:8000\r\n")), :+,
                                s(:str, "Proxy-Authorization: Basic dXNlcjpwYXNzd29yZA==\r\n")), :+,
                              s(:str, "\r\n")),
                            s(:lvar, :proxy_request),
                            s(:str, "[ruby-dev:25673]"))),
                        s(:send,
                          s(:lvar, :sock), :close)))))),
              s(:send, nil, :assert_join_threads,
                s(:array,
                  s(:lvar, :client_thread),
                  s(:lvar, :server_thread)))))))), nil))
