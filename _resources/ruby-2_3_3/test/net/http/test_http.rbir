s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "net/http")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:send, nil, :require_relative,
    s(:str, "utils")),
  s(:class,
    s(:const, nil, :TestNetHTTP),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_class_Proxy,
        s(:args),
        s(:begin,
          s(:lvasgn, :no_proxy_class,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :HTTP), :Proxy,
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Net), :HTTP),
            s(:lvar, :no_proxy_class)),
          s(:lvasgn, :proxy_class,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :HTTP), :Proxy,
              s(:str, "proxy.example"),
              s(:int, 8000),
              s(:str, "user"),
              s(:str, "pass"))),
          s(:send, nil, :refute_equal,
            s(:const,
              s(:const, nil, :Net), :HTTP),
            s(:lvar, :proxy_class)),
          s(:send, nil, :assert_operator,
            s(:lvar, :proxy_class),
            s(:sym, :<),
            s(:const,
              s(:const, nil, :Net), :HTTP)),
          s(:send, nil, :assert_equal,
            s(:str, "proxy.example"),
            s(:send,
              s(:lvar, :proxy_class), :proxy_address)),
          s(:send, nil, :assert_equal,
            s(:int, 8000),
            s(:send,
              s(:lvar, :proxy_class), :proxy_port)),
          s(:send, nil, :assert_equal,
            s(:str, "user"),
            s(:send,
              s(:lvar, :proxy_class), :proxy_user)),
          s(:send, nil, :assert_equal,
            s(:str, "pass"),
            s(:send,
              s(:lvar, :proxy_class), :proxy_pass)),
          s(:lvasgn, :http,
            s(:send,
              s(:lvar, :proxy_class), :new,
              s(:str, "hostname.example"))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :http), :proxy_from_env?)),
          s(:lvasgn, :proxy_class,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :HTTP), :Proxy,
              s(:str, "proxy.example"))),
          s(:send, nil, :assert_equal,
            s(:str, "proxy.example"),
            s(:send,
              s(:lvar, :proxy_class), :proxy_address)),
          s(:send, nil, :assert_equal,
            s(:int, 80),
            s(:send,
              s(:lvar, :proxy_class), :proxy_port)))),
      s(:def, :test_class_Proxy_from_ENV,
        s(:args),
        s(:block,
          s(:send, nil, :clean_http_proxy_env),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "http_proxy"),
              s(:str, "http://proxy.example:8000")),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "http_proxy_user"),
              s(:str, "user")),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "http_proxy_pass"),
              s(:str, "pass")),
            s(:lvasgn, :proxy_class,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :Proxy,
                s(:sym, :ENV))),
            s(:send, nil, :refute_equal,
              s(:const,
                s(:const, nil, :Net), :HTTP),
              s(:lvar, :proxy_class)),
            s(:send, nil, :assert_operator,
              s(:lvar, :proxy_class),
              s(:sym, :<),
              s(:const,
                s(:const, nil, :Net), :HTTP)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :proxy_class), :proxy_address)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :proxy_class), :proxy_user)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :proxy_class), :proxy_pass)),
            s(:send, nil, :refute_equal,
              s(:int, 8000),
              s(:send,
                s(:lvar, :proxy_class), :proxy_port)),
            s(:lvasgn, :http,
              s(:send,
                s(:lvar, :proxy_class), :new,
                s(:str, "hostname.example"))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :http), :proxy_from_env?))))),
      s(:def, :test_edit_path,
        s(:args),
        s(:begin,
          s(:lvasgn, :http,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :HTTP), :new,
              s(:str, "hostname.example"),
              s(:nil),
              s(:nil))),
          s(:lvasgn, :edited,
            s(:send,
              s(:lvar, :http), :send,
              s(:sym, :edit_path),
              s(:str, "/path"))),
          s(:send, nil, :assert_equal,
            s(:str, "/path"),
            s(:lvar, :edited)),
          s(:send,
            s(:lvar, :http), :use_ssl=,
            s(:true)),
          s(:lvasgn, :edited,
            s(:send,
              s(:lvar, :http), :send,
              s(:sym, :edit_path),
              s(:str, "/path"))),
          s(:send, nil, :assert_equal,
            s(:str, "/path"),
            s(:lvar, :edited)))),
      s(:def, :test_edit_path_proxy,
        s(:args),
        s(:begin,
          s(:lvasgn, :http,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :HTTP), :new,
              s(:str, "hostname.example"),
              s(:nil),
              s(:str, "proxy.example"))),
          s(:lvasgn, :edited,
            s(:send,
              s(:lvar, :http), :send,
              s(:sym, :edit_path),
              s(:str, "/path"))),
          s(:send, nil, :assert_equal,
            s(:str, "http://hostname.example/path"),
            s(:lvar, :edited)),
          s(:send,
            s(:lvar, :http), :use_ssl=,
            s(:true)),
          s(:lvasgn, :edited,
            s(:send,
              s(:lvar, :http), :send,
              s(:sym, :edit_path),
              s(:str, "/path"))),
          s(:send, nil, :assert_equal,
            s(:str, "/path"),
            s(:lvar, :edited)))),
      s(:def, :test_proxy_address,
        s(:args),
        s(:block,
          s(:send, nil, :clean_http_proxy_env),
          s(:args),
          s(:begin,
            s(:lvasgn, :http,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :new,
                s(:str, "hostname.example"),
                s(:nil),
                s(:str, "proxy.example"))),
            s(:send, nil, :assert_equal,
              s(:str, "proxy.example"),
              s(:send,
                s(:lvar, :http), :proxy_address)),
            s(:lvasgn, :http,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :new,
                s(:str, "hostname.example"),
                s(:nil))),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :http), :proxy_address))))),
      s(:def, :test_proxy_from_env_ENV,
        s(:args),
        s(:block,
          s(:send, nil, :clean_http_proxy_env),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "http_proxy"),
              s(:str, "http://proxy.example:8000")),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :proxy_class?)),
            s(:lvasgn, :http,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :new,
                s(:str, "hostname.example"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:lvar, :http), :proxy_from_env?))))),
      s(:def, :test_proxy_address_ENV,
        s(:args),
        s(:block,
          s(:send, nil, :clean_http_proxy_env),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "http_proxy"),
              s(:str, "http://proxy.example:8000")),
            s(:lvasgn, :http,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :new,
                s(:str, "hostname.example"))),
            s(:send, nil, :assert_equal,
              s(:str, "proxy.example"),
              s(:send,
                s(:lvar, :http), :proxy_address))))),
      s(:def, :test_proxy_eh_no_proxy,
        s(:args),
        s(:block,
          s(:send, nil, :clean_http_proxy_env),
          s(:args),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :new,
                s(:str, "hostname.example"),
                s(:nil),
                s(:nil)), :proxy?)))),
      s(:def, :test_proxy_eh_ENV,
        s(:args),
        s(:block,
          s(:send, nil, :clean_http_proxy_env),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "http_proxy"),
              s(:str, "http://proxy.example:8000")),
            s(:lvasgn, :http,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :new,
                s(:str, "hostname.example"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:lvar, :http), :proxy?))))),
      s(:def, :test_proxy_eh_ENV_none_set,
        s(:args),
        s(:block,
          s(:send, nil, :clean_http_proxy_env),
          s(:args),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :new,
                s(:str, "hostname.example")), :proxy?)))),
      s(:def, :test_proxy_eh_ENV_no_proxy,
        s(:args),
        s(:block,
          s(:send, nil, :clean_http_proxy_env),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "http_proxy"),
              s(:str, "http://proxy.example:8000")),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "no_proxy"),
              s(:str, "hostname.example")),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Net), :HTTP), :new,
                  s(:str, "hostname.example")), :proxy?))))),
      s(:def, :test_proxy_port,
        s(:args),
        s(:block,
          s(:send, nil, :clean_http_proxy_env),
          s(:args),
          s(:begin,
            s(:lvasgn, :http,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :new,
                s(:str, "example"),
                s(:nil),
                s(:str, "proxy.example"))),
            s(:send, nil, :assert_equal,
              s(:str, "proxy.example"),
              s(:send,
                s(:lvar, :http), :proxy_address)),
            s(:send, nil, :assert_equal,
              s(:int, 80),
              s(:send,
                s(:lvar, :http), :proxy_port)),
            s(:lvasgn, :http,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :new,
                s(:str, "example"),
                s(:nil),
                s(:str, "proxy.example"),
                s(:int, 8000))),
            s(:send, nil, :assert_equal,
              s(:int, 8000),
              s(:send,
                s(:lvar, :http), :proxy_port)),
            s(:lvasgn, :http,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :new,
                s(:str, "example"),
                s(:nil))),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :http), :proxy_port))))),
      s(:def, :test_proxy_port_ENV,
        s(:args),
        s(:block,
          s(:send, nil, :clean_http_proxy_env),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "http_proxy"),
              s(:str, "http://proxy.example:8000")),
            s(:lvasgn, :http,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :new,
                s(:str, "hostname.example"))),
            s(:send, nil, :assert_equal,
              s(:int, 8000),
              s(:send,
                s(:lvar, :http), :proxy_port))))),
      s(:def, :test_newobj,
        s(:args),
        s(:block,
          s(:send, nil, :clean_http_proxy_env),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "http_proxy"),
              s(:str, "http://proxy.example:8000")),
            s(:lvasgn, :http,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :newobj,
                s(:str, "hostname.example"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :http), :proxy?))))),
      s(:def, :clean_http_proxy_env,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :orig,
              s(:hash,
                s(:pair,
                  s(:str, "http_proxy"),
                  s(:send,
                    s(:const, nil, :ENV), :[],
                    s(:str, "http_proxy"))),
                s(:pair,
                  s(:str, "http_proxy_user"),
                  s(:send,
                    s(:const, nil, :ENV), :[],
                    s(:str, "http_proxy_user"))),
                s(:pair,
                  s(:str, "http_proxy_pass"),
                  s(:send,
                    s(:const, nil, :ENV), :[],
                    s(:str, "http_proxy_pass"))),
                s(:pair,
                  s(:str, "no_proxy"),
                  s(:send,
                    s(:const, nil, :ENV), :[],
                    s(:str, "no_proxy"))))),
            s(:block,
              s(:send,
                s(:lvar, :orig), :each_key),
              s(:args,
                s(:arg, :key)),
              s(:send,
                s(:const, nil, :ENV), :delete,
                s(:lvar, :key))),
            s(:yield)),
          s(:block,
            s(:send,
              s(:lvar, :orig), :each),
            s(:args,
              s(:arg, :key),
              s(:arg, :value)),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:lvar, :key),
              s(:lvar, :value))))),
      s(:def, :test_failure_message_includes_failed_domain_and_port,
        s(:args),
        s(:begin,
          s(:lvasgn, :host,
            s(:send,
              s(:send,
                s(:const, nil, :Struct), :new,
                s(:sym, :to_s)), :new,
              s(:str, "<example>"))),
          s(:lvasgn, :port,
            s(:int, 2119)),
          s(:defs,
            s(:lvar, :host), :to_str,
            s(:args),
            s(:send, nil, :raise,
              s(:const, nil, :SocketError),
              s(:str, "open failure"))),
          s(:lvasgn, :uri,
            s(:send,
              s(:send,
                s(:const, nil, :Struct), :new,
                s(:sym, :scheme),
                s(:sym, :hostname),
                s(:sym, :port)), :new,
              s(:str, "http"),
              s(:lvar, :host),
              s(:lvar, :port))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :SocketError),
              s(:regexp,
                s(:begin,
                  s(:lvar, :host)),
                s(:str, ":"),
                s(:begin,
                  s(:lvar, :port)),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :Net), :HTTP), :get,
              s(:lvar, :uri))))))),
  s(:module,
    s(:const, nil, :TestNetHTTP_version_1_1_methods),
    s(:begin,
      s(:def, :test_s_get,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:gvar, :$test_net_http_data),
          s(:send,
            s(:const,
              s(:const, nil, :Net), :HTTP), :get,
            s(:send, nil, :config,
              s(:str, "host")),
            s(:str, "/"),
            s(:send, nil, :config,
              s(:str, "port"))))),
      s(:def, :test_head,
        s(:args),
        s(:block,
          s(:send, nil, :start),
          s(:args,
            s(:arg, :http)),
          s(:begin,
            s(:lvasgn, :res,
              s(:send,
                s(:lvar, :http), :head,
                s(:str, "/"))),
            s(:send, nil, :assert_kind_of,
              s(:const,
                s(:const, nil, :Net), :HTTPResponse),
              s(:lvar, :res)),
            s(:send, nil, :assert_equal,
              s(:gvar, :$test_net_http_data_type),
              s(:send,
                s(:lvar, :res), :[],
                s(:str, "Content-Type"))),
            s(:if,
              s(:send,
                s(:self), :is_a?,
                s(:const, nil, :TestNetHTTP_v1_2_chunked)), nil,
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:gvar, :$test_net_http_data), :size),
                s(:send,
                  s(:send,
                    s(:lvar, :res), :[],
                    s(:str, "Content-Length")), :to_i)))))),
      s(:def, :test_get,
        s(:args),
        s(:block,
          s(:send, nil, :start),
          s(:args,
            s(:arg, :http)),
          s(:begin,
            s(:send, nil, :_test_get__get,
              s(:lvar, :http)),
            s(:send, nil, :_test_get__iter,
              s(:lvar, :http)),
            s(:send, nil, :_test_get__chunked,
              s(:lvar, :http))))),
      s(:def, :_test_get__get,
        s(:args,
          s(:arg, :http)),
        s(:begin,
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :http), :get,
              s(:str, "/"))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :Net), :HTTPResponse),
            s(:lvar, :res)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :String),
            s(:send,
              s(:lvar, :res), :body)),
          s(:if,
            s(:send,
              s(:self), :is_a?,
              s(:const, nil, :TestNetHTTP_v1_2_chunked)), nil,
            s(:begin,
              s(:send, nil, :assert_not_nil,
                s(:send,
                  s(:lvar, :res), :[],
                  s(:str, "content-length"))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:gvar, :$test_net_http_data), :size),
                s(:send,
                  s(:send,
                    s(:lvar, :res), :[],
                    s(:str, "content-length")), :to_i)))),
          s(:send, nil, :assert_equal,
            s(:gvar, :$test_net_http_data_type),
            s(:send,
              s(:lvar, :res), :[],
              s(:str, "Content-Type"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:gvar, :$test_net_http_data), :size),
            s(:send,
              s(:send,
                s(:lvar, :res), :body), :size)),
          s(:send, nil, :assert_equal,
            s(:gvar, :$test_net_http_data),
            s(:send,
              s(:lvar, :res), :body)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:lvar, :http), :get,
              s(:str, "/"),
              s(:send,
                s(:hash,
                  s(:pair,
                    s(:str, "User-Agent"),
                    s(:str, "test"))), :freeze))),
          s(:if,
            s(:const,
              s(:const,
                s(:const, nil, :Net), :HTTP), :HAVE_ZLIB),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :res), :decode_content),
              s(:str, "[Bug #7924]")), nil))),
      s(:def, :_test_get__iter,
        s(:args,
          s(:arg, :http)),
        s(:begin,
          s(:lvasgn, :buf,
            s(:str, "")),
          s(:lvasgn, :res,
            s(:block,
              s(:send,
                s(:lvar, :http), :get,
                s(:str, "/")),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :buf), :<<,
                s(:lvar, :s)))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :Net), :HTTPResponse),
            s(:lvar, :res)),
          s(:if,
            s(:send,
              s(:self), :is_a?,
              s(:const, nil, :TestNetHTTP_v1_2_chunked)), nil,
            s(:begin,
              s(:send, nil, :assert_not_nil,
                s(:send,
                  s(:lvar, :res), :[],
                  s(:str, "content-length"))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:gvar, :$test_net_http_data), :size),
                s(:send,
                  s(:send,
                    s(:lvar, :res), :[],
                    s(:str, "content-length")), :to_i)))),
          s(:send, nil, :assert_equal,
            s(:gvar, :$test_net_http_data_type),
            s(:send,
              s(:lvar, :res), :[],
              s(:str, "Content-Type"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:gvar, :$test_net_http_data), :size),
            s(:send,
              s(:lvar, :buf), :size)),
          s(:send, nil, :assert_equal,
            s(:gvar, :$test_net_http_data),
            s(:lvar, :buf)))),
      s(:def, :_test_get__chunked,
        s(:args,
          s(:arg, :http)),
        s(:begin,
          s(:lvasgn, :buf,
            s(:str, "")),
          s(:lvasgn, :res,
            s(:block,
              s(:send,
                s(:lvar, :http), :get,
                s(:str, "/")),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :buf), :<<,
                s(:lvar, :s)))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :Net), :HTTPResponse),
            s(:lvar, :res)),
          s(:if,
            s(:send,
              s(:self), :is_a?,
              s(:const, nil, :TestNetHTTP_v1_2_chunked)), nil,
            s(:begin,
              s(:send, nil, :assert_not_nil,
                s(:send,
                  s(:lvar, :res), :[],
                  s(:str, "content-length"))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:gvar, :$test_net_http_data), :size),
                s(:send,
                  s(:send,
                    s(:lvar, :res), :[],
                    s(:str, "content-length")), :to_i)))),
          s(:send, nil, :assert_equal,
            s(:gvar, :$test_net_http_data_type),
            s(:send,
              s(:lvar, :res), :[],
              s(:str, "Content-Type"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:gvar, :$test_net_http_data), :size),
            s(:send,
              s(:lvar, :buf), :size)),
          s(:send, nil, :assert_equal,
            s(:gvar, :$test_net_http_data),
            s(:lvar, :buf)))),
      s(:def, :test_get__break,
        s(:args),
        s(:begin,
          s(:lvasgn, :i,
            s(:int, 0)),
          s(:block,
            s(:send, nil, :start),
            s(:args,
              s(:arg, :http)),
            s(:block,
              s(:send,
                s(:lvar, :http), :get,
                s(:str, "/")),
              s(:args,
                s(:arg, :str)),
              s(:begin,
                s(:op_asgn,
                  s(:lvasgn, :i), :+,
                  s(:int, 1)),
                s(:break)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:lvar, :i)),
          s(:ivasgn, :@log_tester,
            s(:nil)))),
      s(:def, :test_get__implicit_start,
        s(:args),
        s(:begin,
          s(:lvasgn, :res,
            s(:send,
              s(:send, nil, :new), :get,
              s(:str, "/"))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :Net), :HTTPResponse),
            s(:lvar, :res)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :String),
            s(:send,
              s(:lvar, :res), :body)),
          s(:if,
            s(:send,
              s(:self), :is_a?,
              s(:const, nil, :TestNetHTTP_v1_2_chunked)), nil,
            s(:send, nil, :assert_not_nil,
              s(:send,
                s(:lvar, :res), :[],
                s(:str, "content-length")))),
          s(:send, nil, :assert_equal,
            s(:gvar, :$test_net_http_data_type),
            s(:send,
              s(:lvar, :res), :[],
              s(:str, "Content-Type"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:gvar, :$test_net_http_data), :size),
            s(:send,
              s(:send,
                s(:lvar, :res), :body), :size)),
          s(:send, nil, :assert_equal,
            s(:gvar, :$test_net_http_data),
            s(:send,
              s(:lvar, :res), :body)))),
      s(:def, :test_get__crlf,
        s(:args),
        s(:block,
          s(:send, nil, :start),
          s(:args,
            s(:arg, :http)),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:lvar, :http), :get,
                s(:str, "\r"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:lvar, :http), :get,
                s(:str, "\n")))))),
      s(:def, :test_get2,
        s(:args),
        s(:block,
          s(:send, nil, :start),
          s(:args,
            s(:arg, :http)),
          s(:block,
            s(:send,
              s(:lvar, :http), :get2,
              s(:str, "/")),
            s(:args,
              s(:arg, :res)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:const, nil, :EnvUtil), :suppress_warning),
                s(:args),
                s(:begin,
                  s(:send, nil, :assert_kind_of,
                    s(:const,
                      s(:const, nil, :Net), :HTTPResponse),
                    s(:lvar, :res)),
                  s(:send, nil, :assert_kind_of,
                    s(:const,
                      s(:const, nil, :Net), :HTTPResponse),
                    s(:send,
                      s(:lvar, :res), :header)))),
              s(:if,
                s(:send,
                  s(:self), :is_a?,
                  s(:const, nil, :TestNetHTTP_v1_2_chunked)), nil,
                s(:send, nil, :assert_not_nil,
                  s(:send,
                    s(:lvar, :res), :[],
                    s(:str, "content-length")))),
              s(:send, nil, :assert_equal,
                s(:gvar, :$test_net_http_data_type),
                s(:send,
                  s(:lvar, :res), :[],
                  s(:str, "Content-Type"))),
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :String),
                s(:send,
                  s(:lvar, :res), :body)),
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :String),
                s(:send,
                  s(:lvar, :res), :entity)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:gvar, :$test_net_http_data), :size),
                s(:send,
                  s(:send,
                    s(:lvar, :res), :body), :size)),
              s(:send, nil, :assert_equal,
                s(:gvar, :$test_net_http_data),
                s(:send,
                  s(:lvar, :res), :body)),
              s(:send, nil, :assert_equal,
                s(:gvar, :$test_net_http_data),
                s(:send,
                  s(:lvar, :res), :entity)))))),
      s(:def, :test_post,
        s(:args),
        s(:block,
          s(:send, nil, :start),
          s(:args,
            s(:arg, :http)),
          s(:begin,
            s(:send, nil, :_test_post__base,
              s(:lvar, :http)),
            s(:send, nil, :_test_post__file,
              s(:lvar, :http)),
            s(:send, nil, :_test_post__no_data,
              s(:lvar, :http))))),
      s(:def, :_test_post__base,
        s(:args,
          s(:arg, :http)),
        s(:begin,
          s(:lvasgn, :uheader,
            s(:hash)),
          s(:send,
            s(:lvar, :uheader), :[]=,
            s(:str, "Accept"),
            s(:str, "application/octet-stream")),
          s(:send,
            s(:lvar, :uheader), :[]=,
            s(:str, "Content-Type"),
            s(:str, "application/x-www-form-urlencoded")),
          s(:lvasgn, :data,
            s(:str, "post data")),
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :http), :post,
              s(:str, "/"),
              s(:lvar, :data),
              s(:lvar, :uheader))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :Net), :HTTPResponse),
            s(:lvar, :res)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :String),
            s(:send,
              s(:lvar, :res), :body)),
          s(:send, nil, :assert_equal,
            s(:lvar, :data),
            s(:send,
              s(:lvar, :res), :body)),
          s(:send, nil, :assert_equal,
            s(:lvar, :data),
            s(:send,
              s(:lvar, :res), :entity)))),
      s(:def, :_test_post__file,
        s(:args,
          s(:arg, :http)),
        s(:begin,
          s(:lvasgn, :data,
            s(:str, "post data")),
          s(:lvasgn, :f,
            s(:send,
              s(:const, nil, :StringIO), :new)),
          s(:send,
            s(:lvar, :http), :post,
            s(:str, "/"),
            s(:lvar, :data),
            s(:hash,
              s(:pair,
                s(:str, "content-type"),
                s(:str, "application/x-www-form-urlencoded"))),
            s(:lvar, :f)),
          s(:send, nil, :assert_equal,
            s(:lvar, :data),
            s(:send,
              s(:lvar, :f), :string)))),
      s(:def, :_test_post__no_data,
        s(:args,
          s(:arg, :http)),
        s(:if,
          s(:send,
            s(:self), :is_a?,
            s(:const, nil, :TestNetHTTP_v1_2_chunked)), nil,
          s(:block,
            s(:send,
              s(:const, nil, :EnvUtil), :suppress_warning),
            s(:args),
            s(:begin,
              s(:lvasgn, :data,
                s(:nil)),
              s(:lvasgn, :res,
                s(:send,
                  s(:lvar, :http), :post,
                  s(:str, "/"),
                  s(:lvar, :data))),
              s(:send, nil, :assert_not_equal,
                s(:str, "411"),
                s(:send,
                  s(:lvar, :res), :code)))))),
      s(:def, :test_s_post_form,
        s(:args),
        s(:begin,
          s(:lvasgn, :url,
            s(:dstr,
              s(:str, "http://"),
              s(:begin,
                s(:send, nil, :config,
                  s(:str, "host"))),
              s(:str, ":"),
              s(:begin,
                s(:send, nil, :config,
                  s(:str, "port"))),
              s(:str, "/"))),
          s(:lvasgn, :res,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :HTTP), :post_form,
              s(:send,
                s(:const, nil, :URI), :parse,
                s(:lvar, :url)),
              s(:hash,
                s(:pair,
                  s(:str, "a"),
                  s(:str, "x"))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a=x")),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :res), :body), :split,
                s(:regexp,
                  s(:str, "[;&]"),
                  s(:regopt))), :sort)),
          s(:lvasgn, :res,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :HTTP), :post_form,
              s(:send,
                s(:const, nil, :URI), :parse,
                s(:lvar, :url)),
              s(:hash,
                s(:pair,
                  s(:str, "a"),
                  s(:str, "x")),
                s(:pair,
                  s(:str, "b"),
                  s(:str, "y"))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a=x"),
              s(:str, "b=y")),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :res), :body), :split,
                s(:regexp,
                  s(:str, "[;&]"),
                  s(:regopt))), :sort)),
          s(:lvasgn, :res,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :HTTP), :post_form,
              s(:send,
                s(:const, nil, :URI), :parse,
                s(:lvar, :url)),
              s(:hash,
                s(:pair,
                  s(:str, "a"),
                  s(:array,
                    s(:str, "x1"),
                    s(:str, "x2"))),
                s(:pair,
                  s(:str, "b"),
                  s(:str, "y"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :url),
            s(:send,
              s(:lvar, :res), :[],
              s(:str, "X-request-uri"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a=x1"),
              s(:str, "a=x2"),
              s(:str, "b=y")),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :res), :body), :split,
                s(:regexp,
                  s(:str, "[;&]"),
                  s(:regopt))), :sort)),
          s(:lvasgn, :res,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :HTTP), :post_form,
              s(:send,
                s(:const, nil, :URI), :parse,
                s(:send,
                  s(:lvar, :url), :+,
                  s(:str, "?a=x"))),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, "y"))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :url), :+,
              s(:str, "?a=x")),
            s(:send,
              s(:lvar, :res), :[],
              s(:str, "X-request-uri"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "b=y")),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :res), :body), :split,
                s(:regexp,
                  s(:str, "[;&]"),
                  s(:regopt))), :sort)))),
      s(:def, :test_patch,
        s(:args),
        s(:block,
          s(:send, nil, :start),
          s(:args,
            s(:arg, :http)),
          s(:send, nil, :_test_patch__base,
            s(:lvar, :http)))),
      s(:def, :_test_patch__base,
        s(:args,
          s(:arg, :http)),
        s(:begin,
          s(:lvasgn, :uheader,
            s(:hash)),
          s(:send,
            s(:lvar, :uheader), :[]=,
            s(:str, "Accept"),
            s(:str, "application/octet-stream")),
          s(:send,
            s(:lvar, :uheader), :[]=,
            s(:str, "Content-Type"),
            s(:str, "application/x-www-form-urlencoded")),
          s(:lvasgn, :data,
            s(:str, "patch data")),
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :http), :patch,
              s(:str, "/"),
              s(:lvar, :data),
              s(:lvar, :uheader))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :Net), :HTTPResponse),
            s(:lvar, :res)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :String),
            s(:send,
              s(:lvar, :res), :body)),
          s(:send, nil, :assert_equal,
            s(:lvar, :data),
            s(:send,
              s(:lvar, :res), :body)),
          s(:send, nil, :assert_equal,
            s(:lvar, :data),
            s(:send,
              s(:lvar, :res), :entity)))),
      s(:def, :test_timeout_during_HTTP_session,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :bug4246,
              s(:str, "expected the HTTP session to have timed out but have not. c.f. [ruby-core:34203]")),
            s(:lvasgn, :th,
              s(:nil)),
            s(:block,
              s(:send,
                s(:const, nil, :TCPServer), :open,
                s(:str, "localhost"),
                s(:int, 0)),
              s(:args,
                s(:arg, :server)),
              s(:begin,
                s(:lvasgn, :port,
                  s(:send,
                    s(:send,
                      s(:lvar, :server), :addr), :[],
                    s(:int, 1))),
                s(:lvasgn, :conn,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Net), :HTTP), :new,
                    s(:str, "localhost"),
                    s(:lvar, :port))),
                s(:send,
                  s(:lvar, :conn), :read_timeout=,
                  s(:float, 0.01)),
                s(:send,
                  s(:lvar, :conn), :open_timeout=,
                  s(:float, 0.1)),
                s(:lvasgn, :th,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :Net), :ReadTimeout)),
                      s(:args),
                      s(:send,
                        s(:lvar, :conn), :get,
                        s(:str, "/"))))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:lvar, :th), :join,
                    s(:int, 10)),
                  s(:lvar, :bug4246))))),
          s(:begin,
            s(:send,
              s(:lvar, :th), :kill),
            s(:send,
              s(:lvar, :th), :join)))))),
  s(:module,
    s(:const, nil, :TestNetHTTP_version_1_2_methods),
    s(:begin,
      s(:def, :test_request,
        s(:args),
        s(:block,
          s(:send, nil, :start),
          s(:args,
            s(:arg, :http)),
          s(:begin,
            s(:send, nil, :_test_request__GET,
              s(:lvar, :http)),
            s(:send, nil, :_test_request__accept_encoding,
              s(:lvar, :http)),
            s(:send, nil, :_test_request__file,
              s(:lvar, :http)),
            s(:send, nil, :_test_request__HEAD,
              s(:lvar, :http)),
            s(:send, nil, :_test_request__POST,
              s(:lvar, :http)),
            s(:send, nil, :_test_request__stream_body,
              s(:lvar, :http)),
            s(:send, nil, :_test_request__uri,
              s(:lvar, :http)),
            s(:send, nil, :_test_request__uri_host,
              s(:lvar, :http))))),
      s(:def, :_test_request__GET,
        s(:args,
          s(:arg, :http)),
        s(:begin,
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :Get), :new,
              s(:str, "/"))),
          s(:block,
            s(:send,
              s(:lvar, :http), :request,
              s(:lvar, :req)),
            s(:args,
              s(:arg, :res)),
            s(:begin,
              s(:send, nil, :assert_kind_of,
                s(:const,
                  s(:const, nil, :Net), :HTTPResponse),
                s(:lvar, :res)),
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :String),
                s(:send,
                  s(:lvar, :res), :body)),
              s(:if,
                s(:send,
                  s(:self), :is_a?,
                  s(:const, nil, :TestNetHTTP_v1_2_chunked)), nil,
                s(:begin,
                  s(:send, nil, :assert_not_nil,
                    s(:send,
                      s(:lvar, :res), :[],
                      s(:str, "content-length"))),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:gvar, :$test_net_http_data), :size),
                    s(:send,
                      s(:send,
                        s(:lvar, :res), :[],
                        s(:str, "content-length")), :to_i)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:gvar, :$test_net_http_data), :size),
                s(:send,
                  s(:send,
                    s(:lvar, :res), :body), :size)),
              s(:send, nil, :assert_equal,
                s(:gvar, :$test_net_http_data),
                s(:send,
                  s(:lvar, :res), :body)),
              s(:if,
                s(:const,
                  s(:const,
                    s(:const, nil, :Net), :HTTP), :HAVE_ZLIB),
                s(:send, nil, :assert,
                  s(:send,
                    s(:lvar, :res), :decode_content),
                  s(:str, "Bug #7831")), nil))))),
      s(:def, :_test_request__accept_encoding,
        s(:args,
          s(:arg, :http)),
        s(:begin,
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :Get), :new,
              s(:str, "/"),
              s(:hash,
                s(:pair,
                  s(:str, "accept-encoding"),
                  s(:str, "deflate"))))),
          s(:block,
            s(:send,
              s(:lvar, :http), :request,
              s(:lvar, :req)),
            s(:args,
              s(:arg, :res)),
            s(:begin,
              s(:send, nil, :assert_kind_of,
                s(:const,
                  s(:const, nil, :Net), :HTTPResponse),
                s(:lvar, :res)),
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :String),
                s(:send,
                  s(:lvar, :res), :body)),
              s(:if,
                s(:send,
                  s(:self), :is_a?,
                  s(:const, nil, :TestNetHTTP_v1_2_chunked)), nil,
                s(:begin,
                  s(:send, nil, :assert_not_nil,
                    s(:send,
                      s(:lvar, :res), :[],
                      s(:str, "content-length"))),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:gvar, :$test_net_http_data), :size),
                    s(:send,
                      s(:send,
                        s(:lvar, :res), :[],
                        s(:str, "content-length")), :to_i)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:gvar, :$test_net_http_data), :size),
                s(:send,
                  s(:send,
                    s(:lvar, :res), :body), :size)),
              s(:send, nil, :assert_equal,
                s(:gvar, :$test_net_http_data),
                s(:send,
                  s(:lvar, :res), :body)),
              s(:if,
                s(:const,
                  s(:const,
                    s(:const, nil, :Net), :HTTP), :HAVE_ZLIB),
                s(:send, nil, :refute,
                  s(:send,
                    s(:lvar, :res), :decode_content),
                  s(:str, "Bug #7831")), nil))))),
      s(:def, :_test_request__file,
        s(:args,
          s(:arg, :http)),
        s(:begin,
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :Get), :new,
              s(:str, "/"))),
          s(:block,
            s(:send,
              s(:lvar, :http), :request,
              s(:lvar, :req)),
            s(:args,
              s(:arg, :res)),
            s(:begin,
              s(:send, nil, :assert_kind_of,
                s(:const,
                  s(:const, nil, :Net), :HTTPResponse),
                s(:lvar, :res)),
              s(:if,
                s(:send,
                  s(:self), :is_a?,
                  s(:const, nil, :TestNetHTTP_v1_2_chunked)), nil,
                s(:begin,
                  s(:send, nil, :assert_not_nil,
                    s(:send,
                      s(:lvar, :res), :[],
                      s(:str, "content-length"))),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:gvar, :$test_net_http_data), :size),
                    s(:send,
                      s(:send,
                        s(:lvar, :res), :[],
                        s(:str, "content-length")), :to_i)))),
              s(:lvasgn, :f,
                s(:send,
                  s(:const, nil, :StringIO), :new,
                  s(:send,
                    s(:str, ""), :force_encoding,
                    s(:str, "ASCII-8BIT")))),
              s(:send,
                s(:lvar, :res), :read_body,
                s(:lvar, :f)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:gvar, :$test_net_http_data), :bytesize),
                s(:send,
                  s(:send,
                    s(:lvar, :f), :string), :bytesize)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:gvar, :$test_net_http_data), :encoding),
                s(:send,
                  s(:send,
                    s(:lvar, :f), :string), :encoding)),
              s(:send, nil, :assert_equal,
                s(:gvar, :$test_net_http_data),
                s(:send,
                  s(:lvar, :f), :string)))))),
      s(:def, :_test_request__range,
        s(:args,
          s(:arg, :http)),
        s(:begin,
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :Get), :new,
              s(:str, "/"))),
          s(:send,
            s(:lvar, :req), :[]=,
            s(:str, "range"),
            s(:str, "bytes=0-5")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:gvar, :$test_net_http_data), :[],
              s(:int, 0),
              s(:int, 6)),
            s(:send,
              s(:send,
                s(:lvar, :http), :request,
                s(:lvar, :req)), :body)))),
      s(:def, :_test_request__HEAD,
        s(:args,
          s(:arg, :http)),
        s(:begin,
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :Head), :new,
              s(:str, "/"))),
          s(:block,
            s(:send,
              s(:lvar, :http), :request,
              s(:lvar, :req)),
            s(:args,
              s(:arg, :res)),
            s(:begin,
              s(:send, nil, :assert_kind_of,
                s(:const,
                  s(:const, nil, :Net), :HTTPResponse),
                s(:lvar, :res)),
              s(:if,
                s(:send,
                  s(:self), :is_a?,
                  s(:const, nil, :TestNetHTTP_v1_2_chunked)), nil,
                s(:begin,
                  s(:send, nil, :assert_not_nil,
                    s(:send,
                      s(:lvar, :res), :[],
                      s(:str, "content-length"))),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:gvar, :$test_net_http_data), :size),
                    s(:send,
                      s(:send,
                        s(:lvar, :res), :[],
                        s(:str, "content-length")), :to_i)))),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:lvar, :res), :body)))))),
      s(:def, :_test_request__POST,
        s(:args,
          s(:arg, :http)),
        s(:begin,
          s(:lvasgn, :data,
            s(:str, "post data")),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :Post), :new,
              s(:str, "/"))),
          s(:send,
            s(:lvar, :req), :[]=,
            s(:str, "Accept"),
            s(:gvar, :$test_net_http_data_type)),
          s(:send,
            s(:lvar, :req), :[]=,
            s(:str, "Content-Type"),
            s(:str, "application/x-www-form-urlencoded")),
          s(:block,
            s(:send,
              s(:lvar, :http), :request,
              s(:lvar, :req),
              s(:lvar, :data)),
            s(:args,
              s(:arg, :res)),
            s(:begin,
              s(:send, nil, :assert_kind_of,
                s(:const,
                  s(:const, nil, :Net), :HTTPResponse),
                s(:lvar, :res)),
              s(:if,
                s(:send,
                  s(:self), :is_a?,
                  s(:const, nil, :TestNetHTTP_v1_2_chunked)), nil,
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :data), :size),
                  s(:send,
                    s(:send,
                      s(:lvar, :res), :[],
                      s(:str, "content-length")), :to_i))),
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :String),
                s(:send,
                  s(:lvar, :res), :body)),
              s(:send, nil, :assert_equal,
                s(:lvar, :data),
                s(:send,
                  s(:lvar, :res), :body)))))),
      s(:def, :_test_request__stream_body,
        s(:args,
          s(:arg, :http)),
        s(:begin,
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :Post), :new,
              s(:str, "/"))),
          s(:lvasgn, :data,
            s(:gvar, :$test_net_http_data)),
          s(:send,
            s(:lvar, :req), :content_length=,
            s(:send,
              s(:lvar, :data), :size)),
          s(:send,
            s(:lvar, :req), :[]=,
            s(:str, "Content-Type"),
            s(:str, "application/x-www-form-urlencoded")),
          s(:send,
            s(:lvar, :req), :body_stream=,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:lvar, :data))),
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :http), :request,
              s(:lvar, :req))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :Net), :HTTPResponse),
            s(:lvar, :res)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :String),
            s(:send,
              s(:lvar, :res), :body)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :data), :size),
            s(:send,
              s(:send,
                s(:lvar, :res), :body), :size)),
          s(:send, nil, :assert_equal,
            s(:lvar, :data),
            s(:send,
              s(:lvar, :res), :body)))),
      s(:def, :_test_request__path,
        s(:args,
          s(:arg, :http)),
        s(:begin,
          s(:lvasgn, :uri,
            s(:send, nil, :URI,
              s(:str, "https://hostname.example/"))),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :Get), :new,
              s(:str, "/"))),
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :http), :request,
              s(:lvar, :req))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :URI), :Generic),
            s(:send,
              s(:lvar, :req), :uri)),
          s(:send, nil, :refute_equal,
            s(:lvar, :uri),
            s(:send,
              s(:lvar, :req), :uri)),
          s(:send, nil, :assert_equal,
            s(:lvar, :uri),
            s(:send,
              s(:lvar, :res), :uri)),
          s(:send, nil, :refute_same,
            s(:lvar, :uri),
            s(:send,
              s(:lvar, :req), :uri)),
          s(:send, nil, :refute_same,
            s(:send,
              s(:lvar, :req), :uri),
            s(:send,
              s(:lvar, :res), :uri)))),
      s(:def, :_test_request__uri,
        s(:args,
          s(:arg, :http)),
        s(:begin,
          s(:lvasgn, :uri,
            s(:send, nil, :URI,
              s(:str, "https://hostname.example/"))),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :Get), :new,
              s(:lvar, :uri))),
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :http), :request,
              s(:lvar, :req))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :URI), :Generic),
            s(:send,
              s(:lvar, :req), :uri)),
          s(:send, nil, :refute_equal,
            s(:lvar, :uri),
            s(:send,
              s(:lvar, :req), :uri)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :req), :uri),
            s(:send,
              s(:lvar, :res), :uri)),
          s(:send, nil, :refute_same,
            s(:lvar, :uri),
            s(:send,
              s(:lvar, :req), :uri)),
          s(:send, nil, :refute_same,
            s(:send,
              s(:lvar, :req), :uri),
            s(:send,
              s(:lvar, :res), :uri)))),
      s(:def, :_test_request__uri_host,
        s(:args,
          s(:arg, :http)),
        s(:begin,
          s(:lvasgn, :uri,
            s(:send, nil, :URI,
              s(:str, "http://other.example/"))),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :Get), :new,
              s(:lvar, :uri))),
          s(:send,
            s(:lvar, :req), :[]=,
            s(:str, "host"),
            s(:str, "hostname.example")),
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :http), :request,
              s(:lvar, :req))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :URI), :Generic),
            s(:send,
              s(:lvar, :req), :uri)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :URI,
              s(:dstr,
                s(:str, "http://hostname.example:"),
                s(:begin,
                  s(:send,
                    s(:lvar, :http), :port)))),
            s(:send,
              s(:lvar, :res), :uri)))),
      s(:def, :test_send_request,
        s(:args),
        s(:block,
          s(:send, nil, :start),
          s(:args,
            s(:arg, :http)),
          s(:begin,
            s(:send, nil, :_test_send_request__GET,
              s(:lvar, :http)),
            s(:send, nil, :_test_send_request__HEAD,
              s(:lvar, :http)),
            s(:send, nil, :_test_send_request__POST,
              s(:lvar, :http))))),
      s(:def, :_test_send_request__GET,
        s(:args,
          s(:arg, :http)),
        s(:begin,
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :http), :send_request,
              s(:str, "GET"),
              s(:str, "/"))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :Net), :HTTPResponse),
            s(:lvar, :res)),
          s(:if,
            s(:send,
              s(:self), :is_a?,
              s(:const, nil, :TestNetHTTP_v1_2_chunked)), nil,
            s(:send, nil, :assert_equal,
              s(:send,
                s(:gvar, :$test_net_http_data), :size),
              s(:send,
                s(:send,
                  s(:lvar, :res), :[],
                  s(:str, "content-length")), :to_i))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :String),
            s(:send,
              s(:lvar, :res), :body)),
          s(:send, nil, :assert_equal,
            s(:gvar, :$test_net_http_data),
            s(:send,
              s(:lvar, :res), :body)))),
      s(:def, :_test_send_request__HEAD,
        s(:args,
          s(:arg, :http)),
        s(:begin,
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :http), :send_request,
              s(:str, "HEAD"),
              s(:str, "/"))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :Net), :HTTPResponse),
            s(:lvar, :res)),
          s(:if,
            s(:send,
              s(:self), :is_a?,
              s(:const, nil, :TestNetHTTP_v1_2_chunked)), nil,
            s(:begin,
              s(:send, nil, :assert_not_nil,
                s(:send,
                  s(:lvar, :res), :[],
                  s(:str, "content-length"))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:gvar, :$test_net_http_data), :size),
                s(:send,
                  s(:send,
                    s(:lvar, :res), :[],
                    s(:str, "content-length")), :to_i)))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :res), :body)))),
      s(:def, :_test_send_request__POST,
        s(:args,
          s(:arg, :http)),
        s(:begin,
          s(:lvasgn, :data,
            s(:str, "aaabbb cc ddddddddddd lkjoiu4j3qlkuoa")),
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :http), :send_request,
              s(:str, "POST"),
              s(:str, "/"),
              s(:lvar, :data),
              s(:hash,
                s(:pair,
                  s(:str, "content-type"),
                  s(:str, "application/x-www-form-urlencoded"))))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :Net), :HTTPResponse),
            s(:lvar, :res)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :String),
            s(:send,
              s(:lvar, :res), :body)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :data), :size),
            s(:send,
              s(:send,
                s(:lvar, :res), :body), :size)),
          s(:send, nil, :assert_equal,
            s(:lvar, :data),
            s(:send,
              s(:lvar, :res), :body)))),
      s(:def, :test_set_form,
        s(:args),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "tempfile")),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:str, "ruby-test")),
            s(:args,
              s(:arg, :file)),
            s(:begin,
              s(:send,
                s(:lvar, :file), :<<,
                s(:str, "データ")),
              s(:lvasgn, :data,
                s(:array,
                  s(:array,
                    s(:str, "name"),
                    s(:str, "Gonbei Nanashi")),
                  s(:array,
                    s(:str, "name"),
                    s(:str, "名無しの権兵衛")),
                  s(:array,
                    s(:str, "s\"i\\o"),
                    s(:send,
                      s(:const, nil, :StringIO), :new,
                      s(:str, "あい亜鉛"))),
                  s(:array,
                    s(:str, "file"),
                    s(:lvar, :file),
                    s(:hash,
                      s(:pair,
                        s(:sym, :filename),
                        s(:str, "ruby-test")))))),
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "--<boundary>\n"),
                    s(:str, "Content-Disposition: form-data; name=\"name\"\n"),
                    s(:str, "\n"),
                    s(:str, "Gonbei Nanashi\n"),
                    s(:str, "--<boundary>\n"),
                    s(:str, "Content-Disposition: form-data; name=\"name\"\n"),
                    s(:str, "\n"),
                    s(:str, "名無しの権兵衛\n"),
                    s(:str, "--<boundary>\n"),
                    s(:str, "Content-Disposition: form-data; name=\"s\\\"i\\\\o\"\n"),
                    s(:str, "\n"),
                    s(:str, "あい亜鉛\n"),
                    s(:str, "--<boundary>\n"),
                    s(:str, "Content-Disposition: form-data; name=\"file\"; filename=\"ruby-test\"\n"),
                    s(:str, "Content-Type: application/octet-stream\n"),
                    s(:str, "\n"),
                    s(:str, "データ\n"),
                    s(:str, "--<boundary>--\n")), :gsub,
                  s(:regexp,
                    s(:str, "\\n"),
                    s(:regopt)),
                  s(:str, "\r\n"))),
              s(:block,
                s(:send, nil, :start),
                s(:args,
                  s(:arg, :http)),
                s(:begin,
                  s(:send, nil, :_test_set_form_urlencoded,
                    s(:lvar, :http),
                    s(:block,
                      s(:send,
                        s(:lvar, :data), :reject),
                      s(:args,
                        s(:arg, :k),
                        s(:arg, :v)),
                      s(:send,
                        s(:send,
                          s(:lvar, :v), :is_a?,
                          s(:const, nil, :String)), :!))),
                  s(:send, nil, :_test_set_form_multipart,
                    s(:lvar, :http),
                    s(:false),
                    s(:lvar, :data),
                    s(:lvar, :expected)),
                  s(:send, nil, :_test_set_form_multipart,
                    s(:lvar, :http),
                    s(:true),
                    s(:lvar, :data),
                    s(:lvar, :expected)))))))),
      s(:def, :_test_set_form_urlencoded,
        s(:args,
          s(:arg, :http),
          s(:arg, :data)),
        s(:begin,
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :Post), :new,
              s(:str, "/"))),
          s(:send,
            s(:lvar, :req), :set_form,
            s(:lvar, :data)),
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :http), :request,
              s(:lvar, :req))),
          s(:send, nil, :assert_equal,
            s(:str, "name=Gonbei+Nanashi&name=%E5%90%8D%E7%84%A1%E3%81%97%E3%81%AE%E6%A8%A9%E5%85%B5%E8%A1%9B"),
            s(:send,
              s(:lvar, :res), :body)))),
      s(:def, :_test_set_form_multipart,
        s(:args,
          s(:arg, :http),
          s(:arg, :chunked_p),
          s(:arg, :data),
          s(:arg, :expected)),
        s(:begin,
          s(:block,
            s(:send,
              s(:lvar, :data), :each),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:rescue,
              s(:send,
                s(:lvar, :v), :rewind),
              s(:resbody, nil, nil,
                s(:nil)), nil)),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :Post), :new,
              s(:str, "/"))),
          s(:send,
            s(:lvar, :req), :set_form,
            s(:lvar, :data),
            s(:str, "multipart/form-data")),
          s(:if,
            s(:lvar, :chunked_p),
            s(:send,
              s(:lvar, :req), :[]=,
              s(:str, "Transfer-Encoding"),
              s(:str, "chunked")), nil),
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :http), :request,
              s(:lvar, :req))),
          s(:lvasgn, :body,
            s(:send,
              s(:lvar, :res), :body)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A--(?<boundary>\\S+)"),
              s(:regopt)),
            s(:lvar, :body)),
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "\\A--(?<boundary>\\S+)"),
              s(:regopt)),
            s(:lvar, :body)),
          s(:lvasgn, :expected,
            s(:send,
              s(:lvar, :expected), :gsub,
              s(:regexp,
                s(:str, "<boundary>"),
                s(:regopt)),
              s(:lvar, :boundary))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :body)))),
      s(:def, :test_set_form_with_file,
        s(:args),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "tempfile")),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:str, "ruby-test")),
            s(:args,
              s(:arg, :file)),
            s(:begin,
              s(:send,
                s(:lvar, :file), :binmode),
              s(:send,
                s(:lvar, :file), :<<,
                s(:gvar, :$test_net_http_data)),
              s(:lvasgn, :filename,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:send,
                    s(:lvar, :file), :to_path))),
              s(:lvasgn, :data,
                s(:array,
                  s(:array,
                    s(:str, "file"),
                    s(:lvar, :file)))),
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "--<boundary>\n"),
                    s(:str, "Content-Disposition: form-data; name=\"file\"; filename=\"<filename>\"\n"),
                    s(:str, "Content-Type: application/octet-stream\n"),
                    s(:str, "\n"),
                    s(:str, "<data>\n"),
                    s(:str, "--<boundary>--\n")), :gsub,
                  s(:regexp,
                    s(:str, "\\n"),
                    s(:regopt)),
                  s(:str, "\r\n"))),
              s(:send,
                s(:lvar, :expected), :sub!,
                s(:regexp,
                  s(:str, "<filename>"),
                  s(:regopt)),
                s(:lvar, :filename)),
              s(:send,
                s(:lvar, :expected), :sub!,
                s(:regexp,
                  s(:str, "<data>"),
                  s(:regopt)),
                s(:gvar, :$test_net_http_data)),
              s(:block,
                s(:send, nil, :start),
                s(:args,
                  s(:arg, :http)),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:lvar, :data), :each),
                    s(:args,
                      s(:arg, :k),
                      s(:arg, :v)),
                    s(:rescue,
                      s(:send,
                        s(:lvar, :v), :rewind),
                      s(:resbody, nil, nil,
                        s(:nil)), nil)),
                  s(:lvasgn, :req,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Net), :HTTP), :Post), :new,
                      s(:str, "/"))),
                  s(:send,
                    s(:lvar, :req), :set_form,
                    s(:lvar, :data),
                    s(:str, "multipart/form-data")),
                  s(:lvasgn, :res,
                    s(:send,
                      s(:lvar, :http), :request,
                      s(:lvar, :req))),
                  s(:lvasgn, :body,
                    s(:send,
                      s(:lvar, :res), :body)),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :header),
                      s(:lvasgn, :_)),
                    s(:send,
                      s(:lvar, :body), :split,
                      s(:regexp,
                        s(:str, "\\r\\n\\r\\n"),
                        s(:regopt)),
                      s(:int, 2))),
                  s(:send, nil, :assert_match,
                    s(:regexp,
                      s(:str, "\\A--(?<boundary>\\S+)"),
                      s(:regopt)),
                    s(:lvar, :body)),
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "\\A--(?<boundary>\\S+)"),
                      s(:regopt)),
                    s(:lvar, :body)),
                  s(:lvasgn, :expected,
                    s(:send,
                      s(:lvar, :expected), :gsub,
                      s(:regexp,
                        s(:str, "<boundary>"),
                        s(:regopt)),
                      s(:lvar, :boundary))),
                  s(:send, nil, :assert_match,
                    s(:regexp,
                      s(:str, "^--(?<boundary>\\S+)\\r\\n"),
                      s(:regopt)),
                    s(:lvar, :header)),
                  s(:send, nil, :assert_match,
                    s(:regexp,
                      s(:str, "^Content-Disposition: form-data; name=\"file\"; filename=\""),
                      s(:begin,
                        s(:lvar, :filename)),
                      s(:str, "\"\\r\\n"),
                      s(:regopt)),
                    s(:lvar, :header)),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :expected),
                    s(:lvar, :body)),
                  s(:block,
                    s(:send,
                      s(:lvar, :data), :each),
                    s(:args,
                      s(:arg, :k),
                      s(:arg, :v)),
                    s(:rescue,
                      s(:send,
                        s(:lvar, :v), :rewind),
                      s(:resbody, nil, nil,
                        s(:nil)), nil)),
                  s(:send,
                    s(:lvar, :req), :[]=,
                    s(:str, "Transfer-Encoding"),
                    s(:str, "chunked")),
                  s(:lvasgn, :res,
                    s(:send,
                      s(:lvar, :http), :request,
                      s(:lvar, :req))))))))))),
  s(:class,
    s(:const, nil, :TestNetHTTP_v1_2),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :CONFIG,
        s(:hash,
          s(:pair,
            s(:str, "host"),
            s(:str, "127.0.0.1")),
          s(:pair,
            s(:str, "proxy_host"),
            s(:nil)),
          s(:pair,
            s(:str, "proxy_port"),
            s(:nil)))),
      s(:send, nil, :include,
        s(:const, nil, :TestNetHTTPUtils)),
      s(:send, nil, :include,
        s(:const, nil, :TestNetHTTP_version_1_1_methods)),
      s(:send, nil, :include,
        s(:const, nil, :TestNetHTTP_version_1_2_methods)),
      s(:def, :new,
        s(:args),
        s(:begin,
          s(:send,
            s(:const,
              s(:const, nil, :Net), :HTTP), :version_1_2),
          s(:zsuper))))),
  s(:class,
    s(:const, nil, :TestNetHTTP_v1_2_chunked),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :CONFIG,
        s(:hash,
          s(:pair,
            s(:str, "host"),
            s(:str, "127.0.0.1")),
          s(:pair,
            s(:str, "proxy_host"),
            s(:nil)),
          s(:pair,
            s(:str, "proxy_port"),
            s(:nil)),
          s(:pair,
            s(:str, "chunked"),
            s(:true)))),
      s(:send, nil, :include,
        s(:const, nil, :TestNetHTTPUtils)),
      s(:send, nil, :include,
        s(:const, nil, :TestNetHTTP_version_1_1_methods)),
      s(:send, nil, :include,
        s(:const, nil, :TestNetHTTP_version_1_2_methods)),
      s(:def, :new,
        s(:args),
        s(:begin,
          s(:send,
            s(:const,
              s(:const, nil, :Net), :HTTP), :version_1_2),
          s(:zsuper))),
      s(:def, :test_chunked_break,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised,
            s(:str, "[ruby-core:29229]")),
          s(:args),
          s(:block,
            s(:send, nil, :start),
            s(:args,
              s(:arg, :http)),
            s(:block,
              s(:send,
                s(:lvar, :http), :request_get,
                s(:str, "/")),
              s(:args,
                s(:arg, :res)),
              s(:block,
                s(:send,
                  s(:lvar, :res), :read_body),
                s(:args,
                  s(:arg, :chunk)),
                s(:break)))))))),
  s(:class,
    s(:const, nil, :TestNetHTTPContinue),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :CONFIG,
        s(:hash,
          s(:pair,
            s(:str, "host"),
            s(:str, "127.0.0.1")),
          s(:pair,
            s(:str, "proxy_host"),
            s(:nil)),
          s(:pair,
            s(:str, "proxy_port"),
            s(:nil)),
          s(:pair,
            s(:str, "chunked"),
            s(:true)))),
      s(:send, nil, :include,
        s(:const, nil, :TestNetHTTPUtils)),
      s(:def, :logfile,
        s(:args),
        s(:ivasgn, :@debug,
          s(:send,
            s(:const, nil, :StringIO), :new,
            s(:str, "")))),
      s(:def, :mount_proc,
        s(:args,
          s(:blockarg, :block)),
        s(:send,
          s(:ivar, :@server), :mount,
          s(:str, "/continue"),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPServlet), :ProcHandler), :new,
            s(:send,
              s(:lvar, :block), :to_proc)))),
      s(:def, :test_expect_continue,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :mount_proc),
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:begin,
              s(:send,
                s(:lvar, :req), :continue),
              s(:send,
                s(:lvar, :res), :body=,
                s(:send,
                  s(:send,
                    s(:lvar, :req), :query), :[],
                  s(:str, "body"))))),
          s(:block,
            s(:send, nil, :start),
            s(:args,
              s(:arg, :http)),
            s(:begin,
              s(:lvasgn, :uheader,
                s(:hash,
                  s(:pair,
                    s(:str, "content-type"),
                    s(:str, "application/x-www-form-urlencoded")),
                  s(:pair,
                    s(:str, "expect"),
                    s(:str, "100-continue")))),
              s(:send,
                s(:lvar, :http), :continue_timeout=,
                s(:float, 0.2)),
              s(:block,
                s(:send,
                  s(:lvar, :http), :request_post,
                  s(:str, "/continue"),
                  s(:str, "body=BODY"),
                  s(:lvar, :uheader)),
                s(:args,
                  s(:arg, :res)),
                s(:send, nil, :assert_equal,
                  s(:str, "BODY"),
                  s(:send,
                    s(:lvar, :res), :read_body))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Expect: 100-continue"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@debug), :string)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "HTTP/1.1 100 continue"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@debug), :string)))),
      s(:def, :test_expect_continue_timeout,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :mount_proc),
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:begin,
              s(:send, nil, :sleep,
                s(:float, 0.2)),
              s(:send,
                s(:lvar, :req), :continue),
              s(:send,
                s(:lvar, :res), :body=,
                s(:send,
                  s(:send,
                    s(:lvar, :req), :query), :[],
                  s(:str, "body"))))),
          s(:block,
            s(:send, nil, :start),
            s(:args,
              s(:arg, :http)),
            s(:begin,
              s(:lvasgn, :uheader,
                s(:hash,
                  s(:pair,
                    s(:str, "content-type"),
                    s(:str, "application/x-www-form-urlencoded")),
                  s(:pair,
                    s(:str, "expect"),
                    s(:str, "100-continue")))),
              s(:send,
                s(:lvar, :http), :continue_timeout=,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:lvar, :http), :request_post,
                  s(:str, "/continue"),
                  s(:str, "body=BODY"),
                  s(:lvar, :uheader)),
                s(:args,
                  s(:arg, :res)),
                s(:send, nil, :assert_equal,
                  s(:str, "BODY"),
                  s(:send,
                    s(:lvar, :res), :read_body))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Expect: 100-continue"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@debug), :string)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "HTTP/1.1 100 continue"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@debug), :string)))),
      s(:def, :test_expect_continue_error,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :mount_proc),
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:begin,
              s(:send,
                s(:lvar, :res), :status=,
                s(:int, 501)),
              s(:send,
                s(:lvar, :res), :body=,
                s(:send,
                  s(:send,
                    s(:lvar, :req), :query), :[],
                  s(:str, "body"))))),
          s(:block,
            s(:send, nil, :start),
            s(:args,
              s(:arg, :http)),
            s(:begin,
              s(:lvasgn, :uheader,
                s(:hash,
                  s(:pair,
                    s(:str, "content-type"),
                    s(:str, "application/x-www-form-urlencoded")),
                  s(:pair,
                    s(:str, "expect"),
                    s(:str, "100-continue")))),
              s(:send,
                s(:lvar, :http), :continue_timeout=,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:lvar, :http), :request_post,
                  s(:str, "/continue"),
                  s(:str, "body=ERROR"),
                  s(:lvar, :uheader)),
                s(:args,
                  s(:arg, :res)),
                s(:send, nil, :assert_equal,
                  s(:str, "ERROR"),
                  s(:send,
                    s(:lvar, :res), :read_body))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Expect: 100-continue"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@debug), :string)),
          s(:send, nil, :assert_not_match,
            s(:regexp,
              s(:str, "HTTP/1.1 100 continue"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@debug), :string)))),
      s(:def, :test_expect_continue_error_before_body,
        s(:args),
        s(:begin,
          s(:ivasgn, :@log_tester,
            s(:nil)),
          s(:block,
            s(:send, nil, :mount_proc),
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:send, nil, :raise,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :HTTPStatus), :Forbidden))),
          s(:block,
            s(:send, nil, :start),
            s(:args,
              s(:arg, :http)),
            s(:begin,
              s(:lvasgn, :uheader,
                s(:hash,
                  s(:pair,
                    s(:str, "content-length"),
                    s(:str, "5")),
                  s(:pair,
                    s(:str, "expect"),
                    s(:str, "100-continue")))),
              s(:send,
                s(:lvar, :http), :continue_timeout=,
                s(:int, 1)),
              s(:block,
                s(:send,
                  s(:lvar, :http), :request_post,
                  s(:str, "/continue"),
                  s(:str, "data"),
                  s(:lvar, :uheader)),
                s(:args,
                  s(:arg, :res)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :res), :code),
                  s(:str, "403"))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Expect: 100-continue"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@debug), :string)),
          s(:send, nil, :assert_not_match,
            s(:regexp,
              s(:str, "HTTP/1.1 100 continue"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@debug), :string)))),
      s(:def, :test_expect_continue_error_while_waiting,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :mount_proc),
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:begin,
              s(:send,
                s(:lvar, :res), :status=,
                s(:int, 501)),
              s(:send,
                s(:lvar, :res), :body=,
                s(:send,
                  s(:send,
                    s(:lvar, :req), :query), :[],
                  s(:str, "body"))))),
          s(:block,
            s(:send, nil, :start),
            s(:args,
              s(:arg, :http)),
            s(:begin,
              s(:lvasgn, :uheader,
                s(:hash,
                  s(:pair,
                    s(:str, "content-type"),
                    s(:str, "application/x-www-form-urlencoded")),
                  s(:pair,
                    s(:str, "expect"),
                    s(:str, "100-continue")))),
              s(:send,
                s(:lvar, :http), :continue_timeout=,
                s(:float, 0.5)),
              s(:block,
                s(:send,
                  s(:lvar, :http), :request_post,
                  s(:str, "/continue"),
                  s(:str, "body=ERROR"),
                  s(:lvar, :uheader)),
                s(:args,
                  s(:arg, :res)),
                s(:send, nil, :assert_equal,
                  s(:str, "ERROR"),
                  s(:send,
                    s(:lvar, :res), :read_body))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Expect: 100-continue"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@debug), :string)),
          s(:send, nil, :assert_not_match,
            s(:regexp,
              s(:str, "HTTP/1.1 100 continue"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@debug), :string)))))),
  s(:class,
    s(:const, nil, :TestNetHTTPSwitchingProtocols),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :CONFIG,
        s(:hash,
          s(:pair,
            s(:str, "host"),
            s(:str, "127.0.0.1")),
          s(:pair,
            s(:str, "proxy_host"),
            s(:nil)),
          s(:pair,
            s(:str, "proxy_port"),
            s(:nil)),
          s(:pair,
            s(:str, "chunked"),
            s(:true)))),
      s(:send, nil, :include,
        s(:const, nil, :TestNetHTTPUtils)),
      s(:def, :logfile,
        s(:args),
        s(:ivasgn, :@debug,
          s(:send,
            s(:const, nil, :StringIO), :new,
            s(:str, "")))),
      s(:def, :mount_proc,
        s(:args,
          s(:blockarg, :block)),
        s(:send,
          s(:ivar, :@server), :mount,
          s(:str, "/continue"),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPServlet), :ProcHandler), :new,
            s(:send,
              s(:lvar, :block), :to_proc)))),
      s(:def, :test_info,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :mount_proc),
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:begin,
              s(:send,
                s(:send,
                  s(:lvar, :req), :instance_variable_get,
                  s(:sym, :@socket)), :<<,
                s(:str, "HTTP/1.1 101 Switching Protocols\r\n\r\n")),
              s(:send,
                s(:lvar, :res), :body=,
                s(:send,
                  s(:send,
                    s(:lvar, :req), :query), :[],
                  s(:str, "body"))))),
          s(:block,
            s(:send, nil, :start),
            s(:args,
              s(:arg, :http)),
            s(:begin,
              s(:send,
                s(:lvar, :http), :continue_timeout=,
                s(:float, 0.2)),
              s(:block,
                s(:send,
                  s(:lvar, :http), :request_post,
                  s(:str, "/continue"),
                  s(:str, "body=BODY")),
                s(:args,
                  s(:arg, :res)),
                s(:send, nil, :assert_equal,
                  s(:str, "BODY"),
                  s(:send,
                    s(:lvar, :res), :read_body))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "HTTP/1.1 101 Switching Protocols"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@debug), :string)))))),
  s(:class,
    s(:const, nil, :TestNetHTTPKeepAlive),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :CONFIG,
        s(:hash,
          s(:pair,
            s(:str, "host"),
            s(:str, "127.0.0.1")),
          s(:pair,
            s(:str, "proxy_host"),
            s(:nil)),
          s(:pair,
            s(:str, "proxy_port"),
            s(:nil)),
          s(:pair,
            s(:str, "RequestTimeout"),
            s(:int, 1)))),
      s(:send, nil, :include,
        s(:const, nil, :TestNetHTTPUtils)),
      s(:def, :test_keep_alive_get_auto_reconnect,
        s(:args),
        s(:block,
          s(:send, nil, :start),
          s(:args,
            s(:arg, :http)),
          s(:begin,
            s(:lvasgn, :res,
              s(:send,
                s(:lvar, :http), :get,
                s(:str, "/"))),
            s(:send,
              s(:lvar, :http), :keep_alive_timeout=,
              s(:int, 1)),
            s(:send, nil, :assert_kind_of,
              s(:const,
                s(:const, nil, :Net), :HTTPResponse),
              s(:lvar, :res)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :String),
              s(:send,
                s(:lvar, :res), :body)),
            s(:send, nil, :sleep,
              s(:float, 1.5)),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:lvasgn, :res,
                s(:send,
                  s(:lvar, :http), :get,
                  s(:str, "/")))),
            s(:send, nil, :assert_kind_of,
              s(:const,
                s(:const, nil, :Net), :HTTPResponse),
              s(:lvar, :res)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :String),
              s(:send,
                s(:lvar, :res), :body))))),
      s(:def, :test_server_closed_connection_auto_reconnect,
        s(:args),
        s(:block,
          s(:send, nil, :start),
          s(:args,
            s(:arg, :http)),
          s(:begin,
            s(:lvasgn, :res,
              s(:send,
                s(:lvar, :http), :get,
                s(:str, "/"))),
            s(:send,
              s(:lvar, :http), :keep_alive_timeout=,
              s(:int, 5)),
            s(:send, nil, :assert_kind_of,
              s(:const,
                s(:const, nil, :Net), :HTTPResponse),
              s(:lvar, :res)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :String),
              s(:send,
                s(:lvar, :res), :body)),
            s(:send, nil, :sleep,
              s(:float, 1.5)),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:lvasgn, :res,
                s(:send,
                  s(:lvar, :http), :post,
                  s(:str, "/"),
                  s(:str, "query=foo"),
                  s(:hash,
                    s(:pair,
                      s(:str, "content-type"),
                      s(:str, "application/x-www-form-urlencoded")))))),
            s(:send, nil, :assert_kind_of,
              s(:const,
                s(:const, nil, :Net), :HTTPResponse),
              s(:lvar, :res)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :String),
              s(:send,
                s(:lvar, :res), :body))))),
      s(:def, :test_keep_alive_get_auto_retry,
        s(:args),
        s(:block,
          s(:send, nil, :start),
          s(:args,
            s(:arg, :http)),
          s(:begin,
            s(:lvasgn, :res,
              s(:send,
                s(:lvar, :http), :get,
                s(:str, "/"))),
            s(:send,
              s(:lvar, :http), :keep_alive_timeout=,
              s(:int, 5)),
            s(:send, nil, :assert_kind_of,
              s(:const,
                s(:const, nil, :Net), :HTTPResponse),
              s(:lvar, :res)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :String),
              s(:send,
                s(:lvar, :res), :body)),
            s(:send, nil, :sleep,
              s(:float, 1.5)),
            s(:lvasgn, :res,
              s(:send,
                s(:lvar, :http), :get,
                s(:str, "/"))),
            s(:send, nil, :assert_kind_of,
              s(:const,
                s(:const, nil, :Net), :HTTPResponse),
              s(:lvar, :res)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :String),
              s(:send,
                s(:lvar, :res), :body))))),
      s(:def, :test_keep_alive_server_close,
        s(:args),
        s(:begin,
          s(:defs,
            s(:ivar, :@server), :run,
            s(:args,
              s(:arg, :sock)),
            s(:send,
              s(:lvar, :sock), :close)),
          s(:block,
            s(:send, nil, :start),
            s(:args,
              s(:arg, :http)),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :EOFError),
                s(:const,
                  s(:const, nil, :Errno), :ECONNRESET),
                s(:const, nil, :IOError)),
              s(:args),
              s(:send,
                s(:lvar, :http), :get,
                s(:str, "/")))))))),
  s(:class,
    s(:const, nil, :TestNetHTTPLocalBind),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :CONFIG,
        s(:hash,
          s(:pair,
            s(:str, "host"),
            s(:str, "localhost")),
          s(:pair,
            s(:str, "proxy_host"),
            s(:nil)),
          s(:pair,
            s(:str, "proxy_port"),
            s(:nil)))),
      s(:send, nil, :include,
        s(:const, nil, :TestNetHTTPUtils)),
      s(:def, :test_bind_to_local_host,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:ivar, :@server), :mount_proc,
              s(:str, "/show_ip")),
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:send,
              s(:lvar, :res), :body=,
              s(:send,
                s(:lvar, :req), :remote_ip))),
          s(:lvasgn, :http,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :HTTP), :new,
              s(:send, nil, :config,
                s(:str, "host")),
              s(:send, nil, :config,
                s(:str, "port")))),
          s(:send,
            s(:lvar, :http), :local_host=,
            s(:send,
              s(:send,
                s(:const, nil, :Addrinfo), :tcp,
                s(:send, nil, :config,
                  s(:str, "host")),
                s(:send, nil, :config,
                  s(:str, "port"))), :ip_address)),
          s(:send, nil, :assert_not_nil,
            s(:send,
              s(:lvar, :http), :local_host)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :http), :local_port)),
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :http), :get,
              s(:str, "/show_ip"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :http), :local_host),
            s(:send,
              s(:lvar, :res), :body)))),
      s(:def, :test_bind_to_local_port,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:ivar, :@server), :mount_proc,
              s(:str, "/show_port")),
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:send,
              s(:lvar, :res), :body=,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :req), :peeraddr), :[],
                  s(:int, 1)), :to_s))),
          s(:lvasgn, :http,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :HTTP), :new,
              s(:send, nil, :config,
                s(:str, "host")),
              s(:send, nil, :config,
                s(:str, "port")))),
          s(:send,
            s(:lvar, :http), :local_host=,
            s(:send,
              s(:send,
                s(:const, nil, :Addrinfo), :tcp,
                s(:send, nil, :config,
                  s(:str, "host")),
                s(:send, nil, :config,
                  s(:str, "port"))), :ip_address)),
          s(:send,
            s(:lvar, :http), :local_port=,
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Addrinfo), :tcp,
                  s(:send, nil, :config,
                    s(:str, "host")),
                  s(:int, 0)), :bind),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :s), :local_address), :ip_port), :to_s))),
          s(:send, nil, :assert_not_nil,
            s(:send,
              s(:lvar, :http), :local_host)),
          s(:send, nil, :assert_not_nil,
            s(:send,
              s(:lvar, :http), :local_port)),
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :http), :get,
              s(:str, "/show_port"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :http), :local_port),
            s(:send,
              s(:lvar, :res), :body)))))))
