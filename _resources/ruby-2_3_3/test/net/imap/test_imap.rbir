s(:begin,
  s(:send, nil, :require,
    s(:str, "net/imap")),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :IMAPTest),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :CA_FILE,
        s(:send,
          s(:const, nil, :File), :expand_path,
          s(:str, "cacert.pem"),
          s(:send,
            s(:const, nil, :File), :dirname,
            s(:str, "(string)")))),
      s(:casgn, nil, :SERVER_KEY,
        s(:send,
          s(:const, nil, :File), :expand_path,
          s(:str, "server.key"),
          s(:send,
            s(:const, nil, :File), :dirname,
            s(:str, "(string)")))),
      s(:casgn, nil, :SERVER_CERT,
        s(:send,
          s(:const, nil, :File), :expand_path,
          s(:str, "server.crt"),
          s(:send,
            s(:const, nil, :File), :dirname,
            s(:str, "(string)")))),
      s(:casgn, nil, :SERVER_ADDR,
        s(:str, "127.0.0.1")),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@do_not_reverse_lookup,
            s(:send,
              s(:const, nil, :Socket), :do_not_reverse_lookup)),
          s(:send,
            s(:const, nil, :Socket), :do_not_reverse_lookup=,
            s(:true)),
          s(:ivasgn, :@threads,
            s(:array)))),
      s(:def, :teardown,
        s(:args),
        s(:ensure,
          s(:if,
            s(:send,
              s(:send,
                s(:ivar, :@threads), :empty?), :!),
            s(:send, nil, :assert_join_threads,
              s(:ivar, :@threads)), nil),
          s(:send,
            s(:const, nil, :Socket), :do_not_reverse_lookup=,
            s(:ivar, :@do_not_reverse_lookup)))),
      s(:def, :test_encode_utf7,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:const,
                s(:const, nil, :Net), :IMAP), :encode_utf7,
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "&-"),
            s(:send,
              s(:const,
                s(:const, nil, :Net), :IMAP), :encode_utf7,
              s(:str, "&"))),
          s(:lvasgn, :utf8,
            s(:send,
              s(:send,
                s(:str, "ＡＢＣ"), :dup), :force_encoding,
              s(:str, "UTF-8"))),
          s(:lvasgn, :s,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :IMAP), :encode_utf7,
              s(:lvar, :utf8))),
          s(:send, nil, :assert_equal,
            s(:str, "&,yH,Iv8j-"),
            s(:lvar, :s)),
          s(:lvasgn, :s,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :IMAP), :encode_utf7,
              s(:send,
                s(:dstr,
                  s(:str, "foo&"),
                  s(:begin,
                    s(:lvar, :utf8)),
                  s(:str, "-bar")), :encode,
                s(:str, "EUC-JP")))),
          s(:send, nil, :assert_equal,
            s(:str, "foo&-&,yH,Iv8j--bar"),
            s(:lvar, :s)),
          s(:lvasgn, :utf8,
            s(:send,
              s(:send,
                s(:str, "あ&"), :dup), :force_encoding,
              s(:str, "UTF-8"))),
          s(:lvasgn, :s,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :IMAP), :encode_utf7,
              s(:lvar, :utf8))),
          s(:send, nil, :assert_equal,
            s(:str, "&MEI-&-"),
            s(:lvar, :s)),
          s(:lvasgn, :s,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :IMAP), :encode_utf7,
              s(:send,
                s(:lvar, :utf8), :encode,
                s(:str, "EUC-JP")))),
          s(:send, nil, :assert_equal,
            s(:str, "&MEI-&-"),
            s(:lvar, :s)))),
      s(:def, :test_decode_utf7,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "&"),
            s(:send,
              s(:const,
                s(:const, nil, :Net), :IMAP), :decode_utf7,
              s(:str, "&-"))),
          s(:send, nil, :assert_equal,
            s(:str, "&-"),
            s(:send,
              s(:const,
                s(:const, nil, :Net), :IMAP), :decode_utf7,
              s(:str, "&--"))),
          s(:lvasgn, :s,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :IMAP), :decode_utf7,
              s(:str, "&,yH,Iv8j-"))),
          s(:lvasgn, :utf8,
            s(:send,
              s(:send,
                s(:str, "ＡＢＣ"), :dup), :force_encoding,
              s(:str, "UTF-8"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :utf8),
            s(:lvar, :s)))),
      s(:def, :test_format_date,
        s(:args),
        s(:begin,
          s(:lvasgn, :time,
            s(:send,
              s(:const, nil, :Time), :mktime,
              s(:int, 2009),
              s(:int, 7),
              s(:int, 24))),
          s(:lvasgn, :s,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :IMAP), :format_date,
              s(:lvar, :time))),
          s(:send, nil, :assert_equal,
            s(:str, "24-Jul-2009"),
            s(:lvar, :s)))),
      s(:def, :test_format_datetime,
        s(:args),
        s(:begin,
          s(:lvasgn, :time,
            s(:send,
              s(:const, nil, :Time), :mktime,
              s(:int, 2009),
              s(:int, 7),
              s(:int, 24),
              s(:int, 1),
              s(:int, 23),
              s(:int, 45))),
          s(:lvasgn, :s,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :IMAP), :format_datetime,
              s(:lvar, :time))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A24-Jul-2009 01:23 [+\\-]\\d{4}\\z"),
              s(:regopt)),
            s(:lvar, :s)))),
      s(:if,
        s(:defined?,
          s(:const,
            s(:const,
              s(:const, nil, :OpenSSL), :SSL), :SSLError)),
        s(:begin,
          s(:def, :test_imaps_unknown_ca,
            s(:args),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :SSLError)),
              s(:args),
              s(:block,
                s(:send, nil, :imaps_test),
                s(:args,
                  s(:arg, :port)),
                s(:kwbegin,
                  s(:rescue,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Net), :IMAP), :new,
                      s(:str, "localhost"),
                      s(:hash,
                        s(:pair,
                          s(:sym, :port),
                          s(:lvar, :port)),
                        s(:pair,
                          s(:sym, :ssl),
                          s(:true)))),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :SystemCallError)), nil,
                      s(:send, nil, :skip,
                        s(:gvar, :$!))), nil))))),
          s(:def, :test_imaps_with_ca_file,
            s(:args),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:block,
                s(:send, nil, :imaps_test),
                s(:args,
                  s(:arg, :port)),
                s(:kwbegin,
                  s(:rescue,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Net), :IMAP), :new,
                      s(:str, "localhost"),
                      s(:hash,
                        s(:pair,
                          s(:sym, :port),
                          s(:lvar, :port)),
                        s(:pair,
                          s(:sym, :ssl),
                          s(:hash,
                            s(:pair,
                              s(:sym, :ca_file),
                              s(:const, nil, :CA_FILE)))))),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :SystemCallError)), nil,
                      s(:send, nil, :skip,
                        s(:gvar, :$!))), nil))))),
          s(:def, :test_imaps_verify_none,
            s(:args),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:block,
                s(:send, nil, :imaps_test),
                s(:args,
                  s(:arg, :port)),
                s(:send,
                  s(:const,
                    s(:const, nil, :Net), :IMAP), :new,
                  s(:const, nil, :SERVER_ADDR),
                  s(:hash,
                    s(:pair,
                      s(:sym, :port),
                      s(:lvar, :port)),
                    s(:pair,
                      s(:sym, :ssl),
                      s(:hash,
                        s(:pair,
                          s(:sym, :verify_mode),
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE))))))))),
          s(:def, :test_imaps_post_connection_check,
            s(:args),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :SSLError)),
              s(:args),
              s(:block,
                s(:send, nil, :imaps_test),
                s(:args,
                  s(:arg, :port)),
                s(:send,
                  s(:const,
                    s(:const, nil, :Net), :IMAP), :new,
                  s(:const, nil, :SERVER_ADDR),
                  s(:hash,
                    s(:pair,
                      s(:sym, :port),
                      s(:lvar, :port)),
                    s(:pair,
                      s(:sym, :ssl),
                      s(:hash,
                        s(:pair,
                          s(:sym, :ca_file),
                          s(:const, nil, :CA_FILE)))))))))), nil),
      s(:if,
        s(:defined?,
          s(:const,
            s(:const, nil, :OpenSSL), :SSL)),
        s(:def, :test_starttls,
          s(:args),
          s(:ensure,
            s(:rescue,
              s(:begin,
                s(:lvasgn, :imap,
                  s(:nil)),
                s(:block,
                  s(:send, nil, :starttls_test),
                  s(:args,
                    s(:arg, :port)),
                  s(:begin,
                    s(:lvasgn, :imap,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :IMAP), :new,
                        s(:str, "localhost"),
                        s(:hash,
                          s(:pair,
                            s(:sym, :port),
                            s(:lvar, :port))))),
                    s(:send,
                      s(:lvar, :imap), :starttls,
                      s(:hash,
                        s(:pair,
                          s(:sym, :ca_file),
                          s(:const, nil, :CA_FILE)))),
                    s(:lvar, :imap)))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :SystemCallError)), nil,
                s(:send, nil, :skip,
                  s(:gvar, :$!))), nil),
            s(:if,
              s(:and,
                s(:lvar, :imap),
                s(:send,
                  s(:send,
                    s(:lvar, :imap), :disconnected?), :!)),
              s(:send,
                s(:lvar, :imap), :disconnect), nil))), nil),
      s(:def, :test_unexpected_eof,
        s(:args),
        s(:begin,
          s(:lvasgn, :server,
            s(:send, nil, :create_tcp_server)),
          s(:lvasgn, :port,
            s(:send,
              s(:send,
                s(:lvar, :server), :addr), :[],
              s(:int, 1))),
          s(:send,
            s(:ivar, :@threads), :<<,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:lvasgn, :sock,
                  s(:send,
                    s(:lvar, :server), :accept)),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* OK test server\r\n")),
                      s(:send,
                        s(:lvar, :sock), :gets)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :sock), :close),
                      s(:send,
                        s(:lvar, :server), :close))))))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :imap,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Net), :IMAP), :new,
                    s(:const, nil, :SERVER_ADDR),
                    s(:hash,
                      s(:pair,
                        s(:sym, :port),
                        s(:lvar, :port))))),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :EOFError)),
                  s(:args),
                  s(:send,
                    s(:lvar, :imap), :logout))),
              s(:if,
                s(:lvar, :imap),
                s(:send,
                  s(:lvar, :imap), :disconnect), nil))))),
      s(:def, :test_idle,
        s(:args),
        s(:begin,
          s(:lvasgn, :server,
            s(:send, nil, :create_tcp_server)),
          s(:lvasgn, :port,
            s(:send,
              s(:send,
                s(:lvar, :server), :addr), :[],
              s(:int, 1))),
          s(:lvasgn, :requests,
            s(:array)),
          s(:send,
            s(:ivar, :@threads), :<<,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:lvasgn, :sock,
                  s(:send,
                    s(:lvar, :server), :accept)),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* OK test server\r\n")),
                      s(:send,
                        s(:lvar, :requests), :push,
                        s(:send,
                          s(:lvar, :sock), :gets)),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "+ idling\r\n")),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* 3 EXISTS\r\n")),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* 2 EXPUNGE\r\n")),
                      s(:send,
                        s(:lvar, :requests), :push,
                        s(:send,
                          s(:lvar, :sock), :gets)),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "RUBY0001 OK IDLE terminated\r\n")),
                      s(:send,
                        s(:lvar, :sock), :gets),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* BYE terminating connection\r\n")),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "RUBY0002 OK LOGOUT completed\r\n"))),
                    s(:begin,
                      s(:send,
                        s(:lvar, :sock), :close),
                      s(:send,
                        s(:lvar, :server), :close))))))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :imap,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Net), :IMAP), :new,
                    s(:const, nil, :SERVER_ADDR),
                    s(:hash,
                      s(:pair,
                        s(:sym, :port),
                        s(:lvar, :port))))),
                s(:lvasgn, :responses,
                  s(:array)),
                s(:block,
                  s(:send,
                    s(:lvar, :imap), :idle),
                  s(:args,
                    s(:arg, :res)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :responses), :push,
                      s(:lvar, :res)),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :res), :name), :==,
                        s(:str, "EXPUNGE")),
                      s(:send,
                        s(:lvar, :imap), :idle_done), nil))),
                s(:send, nil, :assert_equal,
                  s(:int, 3),
                  s(:send,
                    s(:lvar, :responses), :length)),
                s(:send, nil, :assert_instance_of,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Net), :IMAP), :ContinuationRequest),
                  s(:send,
                    s(:lvar, :responses), :[],
                    s(:int, 0))),
                s(:send, nil, :assert_equal,
                  s(:str, "EXISTS"),
                  s(:send,
                    s(:send,
                      s(:lvar, :responses), :[],
                      s(:int, 1)), :name)),
                s(:send, nil, :assert_equal,
                  s(:int, 3),
                  s(:send,
                    s(:send,
                      s(:lvar, :responses), :[],
                      s(:int, 1)), :data)),
                s(:send, nil, :assert_equal,
                  s(:str, "EXPUNGE"),
                  s(:send,
                    s(:send,
                      s(:lvar, :responses), :[],
                      s(:int, 2)), :name)),
                s(:send, nil, :assert_equal,
                  s(:int, 2),
                  s(:send,
                    s(:send,
                      s(:lvar, :responses), :[],
                      s(:int, 2)), :data)),
                s(:send, nil, :assert_equal,
                  s(:int, 2),
                  s(:send,
                    s(:lvar, :requests), :length)),
                s(:send, nil, :assert_equal,
                  s(:str, "RUBY0001 IDLE\r\n"),
                  s(:send,
                    s(:lvar, :requests), :[],
                    s(:int, 0))),
                s(:send, nil, :assert_equal,
                  s(:str, "DONE\r\n"),
                  s(:send,
                    s(:lvar, :requests), :[],
                    s(:int, 1))),
                s(:send,
                  s(:lvar, :imap), :logout)),
              s(:if,
                s(:lvar, :imap),
                s(:send,
                  s(:lvar, :imap), :disconnect), nil))))),
      s(:def, :test_exception_during_idle,
        s(:args),
        s(:begin,
          s(:lvasgn, :server,
            s(:send, nil, :create_tcp_server)),
          s(:lvasgn, :port,
            s(:send,
              s(:send,
                s(:lvar, :server), :addr), :[],
              s(:int, 1))),
          s(:lvasgn, :requests,
            s(:array)),
          s(:send,
            s(:ivar, :@threads), :<<,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:lvasgn, :sock,
                  s(:send,
                    s(:lvar, :server), :accept)),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* OK test server\r\n")),
                      s(:send,
                        s(:lvar, :requests), :push,
                        s(:send,
                          s(:lvar, :sock), :gets)),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "+ idling\r\n")),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* 3 EXISTS\r\n")),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* 2 EXPUNGE\r\n")),
                      s(:send,
                        s(:lvar, :requests), :push,
                        s(:send,
                          s(:lvar, :sock), :gets)),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "RUBY0001 OK IDLE terminated\r\n")),
                      s(:send,
                        s(:lvar, :sock), :gets),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* BYE terminating connection\r\n")),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "RUBY0002 OK LOGOUT completed\r\n"))),
                    s(:begin,
                      s(:send,
                        s(:lvar, :sock), :close),
                      s(:send,
                        s(:lvar, :server), :close))))))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :imap,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Net), :IMAP), :new,
                    s(:const, nil, :SERVER_ADDR),
                    s(:hash,
                      s(:pair,
                        s(:sym, :port),
                        s(:lvar, :port))))),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:lvasgn, :th,
                        s(:send,
                          s(:const, nil, :Thread), :current)),
                      s(:lvasgn, :m,
                        s(:send,
                          s(:const, nil, :Monitor), :new)),
                      s(:lvasgn, :in_idle,
                        s(:false)),
                      s(:lvasgn, :exception_raised,
                        s(:false)),
                      s(:lvasgn, :c,
                        s(:send,
                          s(:lvar, :m), :new_cond)),
                      s(:send,
                        s(:ivar, :@threads), :<<,
                        s(:block,
                          s(:send,
                            s(:const, nil, :Thread), :start),
                          s(:args),
                          s(:begin,
                            s(:block,
                              s(:send,
                                s(:lvar, :m), :synchronize),
                              s(:args),
                              s(:until,
                                s(:lvar, :in_idle),
                                s(:send,
                                  s(:lvar, :c), :wait,
                                  s(:float, 0.1)))),
                            s(:send,
                              s(:lvar, :th), :raise,
                              s(:const, nil, :Interrupt)),
                            s(:lvasgn, :exception_raised,
                              s(:true))))),
                      s(:block,
                        s(:send,
                          s(:lvar, :imap), :idle),
                        s(:args,
                          s(:arg, :res)),
                        s(:block,
                          s(:send,
                            s(:lvar, :m), :synchronize),
                          s(:args),
                          s(:begin,
                            s(:lvasgn, :in_idle,
                              s(:true)),
                            s(:send,
                              s(:lvar, :c), :signal),
                            s(:until,
                              s(:lvar, :exception_raised),
                              s(:send,
                                s(:lvar, :c), :wait,
                                s(:float, 0.1))))))),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :Interrupt)), nil, nil), nil)),
                s(:send, nil, :assert_equal,
                  s(:int, 2),
                  s(:send,
                    s(:lvar, :requests), :length)),
                s(:send, nil, :assert_equal,
                  s(:str, "RUBY0001 IDLE\r\n"),
                  s(:send,
                    s(:lvar, :requests), :[],
                    s(:int, 0))),
                s(:send, nil, :assert_equal,
                  s(:str, "DONE\r\n"),
                  s(:send,
                    s(:lvar, :requests), :[],
                    s(:int, 1))),
                s(:send,
                  s(:lvar, :imap), :logout)),
              s(:if,
                s(:lvar, :imap),
                s(:send,
                  s(:lvar, :imap), :disconnect), nil))))),
      s(:def, :test_idle_done_not_during_idle,
        s(:args),
        s(:begin,
          s(:lvasgn, :server,
            s(:send, nil, :create_tcp_server)),
          s(:lvasgn, :port,
            s(:send,
              s(:send,
                s(:lvar, :server), :addr), :[],
              s(:int, 1))),
          s(:send,
            s(:ivar, :@threads), :<<,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:lvasgn, :sock,
                  s(:send,
                    s(:lvar, :server), :accept)),
                s(:kwbegin,
                  s(:ensure,
                    s(:send,
                      s(:lvar, :sock), :print,
                      s(:str, "* OK test server\r\n")),
                    s(:begin,
                      s(:send,
                        s(:lvar, :sock), :close),
                      s(:send,
                        s(:lvar, :server), :close))))))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :imap,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Net), :IMAP), :new,
                    s(:const, nil, :SERVER_ADDR),
                    s(:hash,
                      s(:pair,
                        s(:sym, :port),
                        s(:lvar, :port))))),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Net), :IMAP), :Error)),
                  s(:args),
                  s(:send,
                    s(:lvar, :imap), :idle_done))),
              s(:if,
                s(:lvar, :imap),
                s(:send,
                  s(:lvar, :imap), :disconnect), nil))))),
      s(:def, :test_idle_timeout,
        s(:args),
        s(:begin,
          s(:lvasgn, :server,
            s(:send, nil, :create_tcp_server)),
          s(:lvasgn, :port,
            s(:send,
              s(:send,
                s(:lvar, :server), :addr), :[],
              s(:int, 1))),
          s(:lvasgn, :requests,
            s(:array)),
          s(:send,
            s(:ivar, :@threads), :<<,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:lvasgn, :sock,
                  s(:send,
                    s(:lvar, :server), :accept)),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* OK test server\r\n")),
                      s(:send,
                        s(:lvar, :requests), :push,
                        s(:send,
                          s(:lvar, :sock), :gets)),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "+ idling\r\n")),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* 3 EXISTS\r\n")),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* 2 EXPUNGE\r\n")),
                      s(:send,
                        s(:lvar, :requests), :push,
                        s(:send,
                          s(:lvar, :sock), :gets)),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "RUBY0001 OK IDLE terminated\r\n")),
                      s(:send,
                        s(:lvar, :sock), :gets),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* BYE terminating connection\r\n")),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "RUBY0002 OK LOGOUT completed\r\n"))),
                    s(:begin,
                      s(:send,
                        s(:lvar, :sock), :close),
                      s(:send,
                        s(:lvar, :server), :close))))))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :imap,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Net), :IMAP), :new,
                    s(:const, nil, :SERVER_ADDR),
                    s(:hash,
                      s(:pair,
                        s(:sym, :port),
                        s(:lvar, :port))))),
                s(:lvasgn, :responses,
                  s(:array)),
                s(:send,
                  s(:const, nil, :Thread), :pass),
                s(:block,
                  s(:send,
                    s(:lvar, :imap), :idle,
                    s(:float, 0.2)),
                  s(:args,
                    s(:arg, :res)),
                  s(:send,
                    s(:lvar, :responses), :push,
                    s(:lvar, :res))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :responses), :length), :>,
                    s(:int, 0)),
                  s(:begin,
                    s(:send, nil, :assert_instance_of,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Net), :IMAP), :ContinuationRequest),
                      s(:send,
                        s(:lvar, :responses), :[],
                        s(:int, 0))),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :responses), :length), :>,
                        s(:int, 1)),
                      s(:begin,
                        s(:send, nil, :assert_equal,
                          s(:str, "EXISTS"),
                          s(:send,
                            s(:send,
                              s(:lvar, :responses), :[],
                              s(:int, 1)), :name)),
                        s(:send, nil, :assert_equal,
                          s(:int, 3),
                          s(:send,
                            s(:send,
                              s(:lvar, :responses), :[],
                              s(:int, 1)), :data)),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :responses), :length), :>,
                            s(:int, 2)),
                          s(:begin,
                            s(:send, nil, :assert_equal,
                              s(:str, "EXPUNGE"),
                              s(:send,
                                s(:send,
                                  s(:lvar, :responses), :[],
                                  s(:int, 2)), :name)),
                            s(:send, nil, :assert_equal,
                              s(:int, 2),
                              s(:send,
                                s(:send,
                                  s(:lvar, :responses), :[],
                                  s(:int, 2)), :data))), nil)), nil)), nil),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :requests), :length), :>,
                    s(:int, 0)),
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:str, "RUBY0001 IDLE\r\n"),
                      s(:send,
                        s(:lvar, :requests), :[],
                        s(:int, 0))),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :requests), :length), :>,
                        s(:int, 1)),
                      s(:send, nil, :assert_equal,
                        s(:str, "DONE\r\n"),
                        s(:send,
                          s(:lvar, :requests), :[],
                          s(:int, 1))), nil)), nil),
                s(:send,
                  s(:lvar, :imap), :logout)),
              s(:if,
                s(:lvar, :imap),
                s(:send,
                  s(:lvar, :imap), :disconnect), nil))))),
      s(:def, :test_unexpected_bye,
        s(:args),
        s(:begin,
          s(:lvasgn, :server,
            s(:send, nil, :create_tcp_server)),
          s(:lvasgn, :port,
            s(:send,
              s(:send,
                s(:lvar, :server), :addr), :[],
              s(:int, 1))),
          s(:send,
            s(:ivar, :@threads), :<<,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:lvasgn, :sock,
                  s(:send,
                    s(:lvar, :server), :accept)),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* OK Gimap ready for requests from 75.101.246.151 33if2752585qyk.26\r\n")),
                      s(:send,
                        s(:lvar, :sock), :gets),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* BYE System Error 33if2752585qyk.26\r\n"))),
                    s(:begin,
                      s(:send,
                        s(:lvar, :sock), :close),
                      s(:send,
                        s(:lvar, :server), :close))))))),
          s(:kwbegin,
            s(:lvasgn, :imap,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :new,
                s(:const, nil, :SERVER_ADDR),
                s(:hash,
                  s(:pair,
                    s(:sym, :port),
                    s(:lvar, :port))))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const,
                    s(:const, nil, :Net), :IMAP), :ByeResponseError)),
              s(:args),
              s(:send,
                s(:lvar, :imap), :login,
                s(:str, "user"),
                s(:str, "password")))))),
      s(:def, :test_exception_during_shutdown,
        s(:args),
        s(:begin,
          s(:lvasgn, :server,
            s(:send, nil, :create_tcp_server)),
          s(:lvasgn, :port,
            s(:send,
              s(:send,
                s(:lvar, :server), :addr), :[],
              s(:int, 1))),
          s(:send,
            s(:ivar, :@threads), :<<,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:lvasgn, :sock,
                  s(:send,
                    s(:lvar, :server), :accept)),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* OK test server\r\n")),
                      s(:send,
                        s(:lvar, :sock), :gets),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* BYE terminating connection\r\n")),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "RUBY0001 OK LOGOUT completed\r\n"))),
                    s(:begin,
                      s(:send,
                        s(:lvar, :sock), :close),
                      s(:send,
                        s(:lvar, :server), :close))))))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :imap,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Net), :IMAP), :new,
                    s(:const, nil, :SERVER_ADDR),
                    s(:hash,
                      s(:pair,
                        s(:sym, :port),
                        s(:lvar, :port))))),
                s(:block,
                  s(:send,
                    s(:lvar, :imap), :instance_eval),
                  s(:args),
                  s(:defs,
                    s(:ivar, :@sock), :shutdown,
                    s(:args,
                      s(:restarg, :args)),
                    s(:ensure,
                      s(:zsuper),
                      s(:send, nil, :raise,
                        s(:str, "error"))))),
                s(:send,
                  s(:lvar, :imap), :logout)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :RuntimeError)),
                s(:args),
                s(:send,
                  s(:lvar, :imap), :disconnect)))))),
      s(:def, :test_connection_closed_during_idle,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :server,
              s(:send, nil, :create_tcp_server)),
            s(:lvasgn, :port,
              s(:send,
                s(:send,
                  s(:lvar, :server), :addr), :[],
                s(:int, 1))),
            s(:lvasgn, :requests,
              s(:array)),
            s(:lvasgn, :sock,
              s(:nil)),
            s(:lvasgn, :threads,
              s(:array)),
            s(:send,
              s(:lvar, :threads), :<<,
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :start),
                s(:args),
                s(:kwbegin,
                  s(:ensure,
                    s(:rescue,
                      s(:begin,
                        s(:lvasgn, :sock,
                          s(:send,
                            s(:lvar, :server), :accept)),
                        s(:send,
                          s(:lvar, :sock), :print,
                          s(:str, "* OK test server\r\n")),
                        s(:send,
                          s(:lvar, :requests), :push,
                          s(:send,
                            s(:lvar, :sock), :gets)),
                        s(:send,
                          s(:lvar, :sock), :print,
                          s(:str, "+ idling\r\n"))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :IOError)), nil, nil), nil),
                    s(:send,
                      s(:lvar, :server), :close))))),
            s(:send,
              s(:lvar, :threads), :<<,
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :start),
                s(:args),
                s(:begin,
                  s(:lvasgn, :imap,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Net), :IMAP), :new,
                      s(:const, nil, :SERVER_ADDR),
                      s(:hash,
                        s(:pair,
                          s(:sym, :port),
                          s(:lvar, :port))))),
                  s(:kwbegin,
                    s(:ensure,
                      s(:begin,
                        s(:lvasgn, :m,
                          s(:send,
                            s(:const, nil, :Monitor), :new)),
                        s(:lvasgn, :in_idle,
                          s(:false)),
                        s(:lvasgn, :exception_raised,
                          s(:false)),
                        s(:lvasgn, :c,
                          s(:send,
                            s(:lvar, :m), :new_cond)),
                        s(:send,
                          s(:lvar, :threads), :<<,
                          s(:block,
                            s(:send,
                              s(:const, nil, :Thread), :start),
                            s(:args),
                            s(:begin,
                              s(:block,
                                s(:send,
                                  s(:lvar, :m), :synchronize),
                                s(:args),
                                s(:until,
                                  s(:lvar, :in_idle),
                                  s(:send,
                                    s(:lvar, :c), :wait,
                                    s(:float, 0.1)))),
                              s(:send,
                                s(:lvar, :sock), :close),
                              s(:lvasgn, :exception_raised,
                                s(:true))))),
                        s(:block,
                          s(:send, nil, :assert_raise,
                            s(:const,
                              s(:const,
                                s(:const, nil, :Net), :IMAP), :Error)),
                          s(:args),
                          s(:block,
                            s(:send,
                              s(:lvar, :imap), :idle),
                            s(:args,
                              s(:arg, :res)),
                            s(:block,
                              s(:send,
                                s(:lvar, :m), :synchronize),
                              s(:args),
                              s(:begin,
                                s(:lvasgn, :in_idle,
                                  s(:true)),
                                s(:send,
                                  s(:lvar, :c), :signal),
                                s(:until,
                                  s(:lvar, :exception_raised),
                                  s(:send,
                                    s(:lvar, :c), :wait,
                                    s(:float, 0.1))))))),
                        s(:send, nil, :assert_equal,
                          s(:int, 1),
                          s(:send,
                            s(:lvar, :requests), :length)),
                        s(:send, nil, :assert_equal,
                          s(:str, "RUBY0001 IDLE\r\n"),
                          s(:send,
                            s(:lvar, :requests), :[],
                            s(:int, 0)))),
                      s(:if,
                        s(:lvar, :imap),
                        s(:send,
                          s(:lvar, :imap), :disconnect), nil)))))),
            s(:send, nil, :assert_join_threads,
              s(:lvar, :threads))),
          s(:if,
            s(:and,
              s(:lvar, :sock),
              s(:send,
                s(:send,
                  s(:lvar, :sock), :closed?), :!)),
            s(:send,
              s(:lvar, :sock), :close), nil))),
      s(:def, :test_connection_closed_without_greeting,
        s(:args),
        s(:begin,
          s(:lvasgn, :server,
            s(:send, nil, :create_tcp_server)),
          s(:lvasgn, :port,
            s(:send,
              s(:send,
                s(:lvar, :server), :addr), :[],
              s(:int, 1))),
          s(:send,
            s(:ivar, :@threads), :<<,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :sock,
                      s(:send,
                        s(:lvar, :server), :accept)),
                    s(:send,
                      s(:lvar, :sock), :close)),
                  s(:send,
                    s(:lvar, :server), :close))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :Error)),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :Net), :IMAP), :new,
              s(:const, nil, :SERVER_ADDR),
              s(:hash,
                s(:pair,
                  s(:sym, :port),
                  s(:lvar, :port))))))),
      s(:def, :test_default_port,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 143),
            s(:send,
              s(:const,
                s(:const, nil, :Net), :IMAP), :default_port)),
          s(:send, nil, :assert_equal,
            s(:int, 143),
            s(:send,
              s(:const,
                s(:const, nil, :Net), :IMAP), :default_imap_port)),
          s(:send, nil, :assert_equal,
            s(:int, 993),
            s(:send,
              s(:const,
                s(:const, nil, :Net), :IMAP), :default_tls_port)),
          s(:send, nil, :assert_equal,
            s(:int, 993),
            s(:send,
              s(:const,
                s(:const, nil, :Net), :IMAP), :default_ssl_port)),
          s(:send, nil, :assert_equal,
            s(:int, 993),
            s(:send,
              s(:const,
                s(:const, nil, :Net), :IMAP), :default_imaps_port)))),
      s(:def, :test_send_invalid_number,
        s(:args),
        s(:begin,
          s(:lvasgn, :server,
            s(:send, nil, :create_tcp_server)),
          s(:lvasgn, :port,
            s(:send,
              s(:send,
                s(:lvar, :server), :addr), :[],
              s(:int, 1))),
          s(:send,
            s(:ivar, :@threads), :<<,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:lvasgn, :sock,
                  s(:send,
                    s(:lvar, :server), :accept)),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* OK test server\r\n")),
                      s(:send,
                        s(:lvar, :sock), :gets),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "RUBY0001 OK TEST completed\r\n")),
                      s(:send,
                        s(:lvar, :sock), :gets),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "RUBY0002 OK TEST completed\r\n")),
                      s(:send,
                        s(:lvar, :sock), :gets),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "RUBY0003 OK TEST completed\r\n")),
                      s(:send,
                        s(:lvar, :sock), :gets),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "RUBY0004 OK TEST completed\r\n")),
                      s(:send,
                        s(:lvar, :sock), :gets),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* BYE terminating connection\r\n")),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "RUBY0005 OK LOGOUT completed\r\n"))),
                    s(:begin,
                      s(:send,
                        s(:lvar, :sock), :close),
                      s(:send,
                        s(:lvar, :server), :close))))))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :imap,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Net), :IMAP), :new,
                    s(:const, nil, :SERVER_ADDR),
                    s(:hash,
                      s(:pair,
                        s(:sym, :port),
                        s(:lvar, :port))))),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Net), :IMAP), :DataFormatError)),
                  s(:args),
                  s(:send,
                    s(:lvar, :imap), :send,
                    s(:sym, :send_command),
                    s(:str, "TEST"),
                    s(:int, -1))),
                s(:send,
                  s(:lvar, :imap), :send,
                  s(:sym, :send_command),
                  s(:str, "TEST"),
                  s(:int, 0)),
                s(:send,
                  s(:lvar, :imap), :send,
                  s(:sym, :send_command),
                  s(:str, "TEST"),
                  s(:int, 4294967295)),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Net), :IMAP), :DataFormatError)),
                  s(:args),
                  s(:send,
                    s(:lvar, :imap), :send,
                    s(:sym, :send_command),
                    s(:str, "TEST"),
                    s(:int, 4294967296))),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Net), :IMAP), :DataFormatError)),
                  s(:args),
                  s(:send,
                    s(:lvar, :imap), :send,
                    s(:sym, :send_command),
                    s(:str, "TEST"),
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Net), :IMAP), :MessageSet), :new,
                      s(:int, -1)))),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Net), :IMAP), :DataFormatError)),
                  s(:args),
                  s(:send,
                    s(:lvar, :imap), :send,
                    s(:sym, :send_command),
                    s(:str, "TEST"),
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Net), :IMAP), :MessageSet), :new,
                      s(:int, 0)))),
                s(:send,
                  s(:lvar, :imap), :send,
                  s(:sym, :send_command),
                  s(:str, "TEST"),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Net), :IMAP), :MessageSet), :new,
                    s(:int, 1))),
                s(:send,
                  s(:lvar, :imap), :send,
                  s(:sym, :send_command),
                  s(:str, "TEST"),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Net), :IMAP), :MessageSet), :new,
                    s(:int, 4294967295))),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Net), :IMAP), :DataFormatError)),
                  s(:args),
                  s(:send,
                    s(:lvar, :imap), :send,
                    s(:sym, :send_command),
                    s(:str, "TEST"),
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Net), :IMAP), :MessageSet), :new,
                      s(:int, 4294967296)))),
                s(:send,
                  s(:lvar, :imap), :logout)),
              s(:send,
                s(:lvar, :imap), :disconnect))))),
      s(:send, nil, :private),
      s(:def, :imaps_test,
        s(:args),
        s(:begin,
          s(:lvasgn, :server,
            s(:send, nil, :create_tcp_server)),
          s(:lvasgn, :port,
            s(:send,
              s(:send,
                s(:lvar, :server), :addr), :[],
              s(:int, 1))),
          s(:lvasgn, :ctx,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
          s(:send,
            s(:lvar, :ctx), :ca_file=,
            s(:const, nil, :CA_FILE)),
          s(:send,
            s(:lvar, :ctx), :key=,
            s(:block,
              s(:send,
                s(:const, nil, :File), :open,
                s(:const, nil, :SERVER_KEY)),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                s(:lvar, :f)))),
          s(:send,
            s(:lvar, :ctx), :cert=,
            s(:block,
              s(:send,
                s(:const, nil, :File), :open,
                s(:const, nil, :SERVER_CERT)),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
                s(:lvar, :f)))),
          s(:lvasgn, :ssl_server,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :SSLServer), :new,
              s(:lvar, :server),
              s(:lvar, :ctx))),
          s(:lvasgn, :ths,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:lvasgn, :sock,
                      s(:send,
                        s(:lvar, :ssl_server), :accept)),
                    s(:kwbegin,
                      s(:ensure,
                        s(:begin,
                          s(:send,
                            s(:lvar, :sock), :print,
                            s(:str, "* OK test server\r\n")),
                          s(:send,
                            s(:lvar, :sock), :gets),
                          s(:send,
                            s(:lvar, :sock), :print,
                            s(:str, "* BYE terminating connection\r\n")),
                          s(:send,
                            s(:lvar, :sock), :print,
                            s(:str, "RUBY0001 OK LOGOUT completed\r\n"))),
                        s(:send,
                          s(:lvar, :sock), :close)))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :Errno), :EPIPE),
                      s(:const,
                        s(:const, nil, :Errno), :ECONNRESET),
                      s(:const,
                        s(:const, nil, :Errno), :ECONNABORTED)), nil, nil), nil)))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :imap,
                      s(:yield,
                        s(:lvar, :port))),
                    s(:send,
                      s(:lvar, :imap), :logout)),
                  s(:if,
                    s(:lvar, :imap),
                    s(:send,
                      s(:lvar, :imap), :disconnect), nil))),
              s(:begin,
                s(:send,
                  s(:lvar, :ssl_server), :close),
                s(:send,
                  s(:lvar, :ths), :join)))))),
      s(:def, :starttls_test,
        s(:args),
        s(:begin,
          s(:lvasgn, :server,
            s(:send, nil, :create_tcp_server)),
          s(:lvasgn, :port,
            s(:send,
              s(:send,
                s(:lvar, :server), :addr), :[],
              s(:int, 1))),
          s(:send,
            s(:ivar, :@threads), :<<,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:lvasgn, :sock,
                  s(:send,
                    s(:lvar, :server), :accept)),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* OK test server\r\n")),
                      s(:send,
                        s(:lvar, :sock), :gets),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "RUBY0001 OK completed\r\n")),
                      s(:lvasgn, :ctx,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                      s(:send,
                        s(:lvar, :ctx), :ca_file=,
                        s(:const, nil, :CA_FILE)),
                      s(:send,
                        s(:lvar, :ctx), :key=,
                        s(:block,
                          s(:send,
                            s(:const, nil, :File), :open,
                            s(:const, nil, :SERVER_KEY)),
                          s(:args,
                            s(:arg, :f)),
                          s(:send,
                            s(:const,
                              s(:const,
                                s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                            s(:lvar, :f)))),
                      s(:send,
                        s(:lvar, :ctx), :cert=,
                        s(:block,
                          s(:send,
                            s(:const, nil, :File), :open,
                            s(:const, nil, :SERVER_CERT)),
                          s(:args,
                            s(:arg, :f)),
                          s(:send,
                            s(:const,
                              s(:const,
                                s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
                            s(:lvar, :f)))),
                      s(:lvasgn, :sock,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                          s(:lvar, :sock),
                          s(:lvar, :ctx))),
                      s(:send,
                        s(:lvar, :sock), :sync_close=,
                        s(:true)),
                      s(:send,
                        s(:lvar, :sock), :accept),
                      s(:send,
                        s(:lvar, :sock), :gets),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "* BYE terminating connection\r\n")),
                      s(:send,
                        s(:lvar, :sock), :print,
                        s(:str, "RUBY0002 OK LOGOUT completed\r\n"))),
                    s(:begin,
                      s(:send,
                        s(:lvar, :sock), :close),
                      s(:send,
                        s(:lvar, :server), :close))))))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :imap,
                  s(:yield,
                    s(:lvar, :port))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :imap), :disconnected?), :!),
                  s(:send,
                    s(:lvar, :imap), :logout), nil)),
              s(:if,
                s(:and,
                  s(:lvar, :imap),
                  s(:send,
                    s(:send,
                      s(:lvar, :imap), :disconnected?), :!)),
                s(:send,
                  s(:lvar, :imap), :disconnect), nil))))),
      s(:def, :create_tcp_server,
        s(:args),
        s(:return,
          s(:send,
            s(:const, nil, :TCPServer), :new,
            s(:const, nil, :SERVER_ADDR),
            s(:int, 0)))))))
