s(:begin,
  s(:send, nil, :require,
    s(:str, "net/imap")),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :IMAPResponseParserTest),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@do_not_reverse_lookup,
            s(:send,
              s(:const, nil, :Socket), :do_not_reverse_lookup)),
          s(:send,
            s(:const, nil, :Socket), :do_not_reverse_lookup=,
            s(:true)),
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :IMAP), :respond_to?,
              s(:sym, :max_flag_count)),
            s(:begin,
              s(:ivasgn, :@max_flag_count,
                s(:send,
                  s(:const,
                    s(:const, nil, :Net), :IMAP), :max_flag_count)),
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :max_flag_count=,
                s(:int, 3))), nil))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :Socket), :do_not_reverse_lookup=,
            s(:ivar, :@do_not_reverse_lookup)),
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :IMAP), :respond_to?,
              s(:sym, :max_flag_count)),
            s(:send,
              s(:const,
                s(:const, nil, :Net), :IMAP), :max_flag_count=,
              s(:ivar, :@max_flag_count)), nil))),
      s(:def, :test_flag_list_safe,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :ResponseParser), :new)),
          s(:lvasgn, :response,
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args),
                s(:begin,
                  s(:gvasgn, :$SAFE,
                    s(:int, 1)),
                  s(:send,
                    s(:lvar, :parser), :parse,
                    s(:send,
                      s(:send,
                        s(:str, "* LIST (\\HasChildren) \".\" \"INBOX\"\n"), :gsub,
                        s(:regexp,
                          s(:str, "\\n"),
                          s(:regopt)),
                        s(:str, "\r\n")), :taint)))), :call)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :Haschildren)),
            s(:send,
              s(:send,
                s(:lvar, :response), :data), :attr)))),
      s(:def, :test_flag_list_too_many_flags,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :ResponseParser), :new)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:block,
              s(:send,
                s(:int, 3), :times),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:lvar, :parser), :parse,
                s(:send,
                  s(:send,
                    s(:dstr,
                      s(:str, "* LIST (\\Foo"),
                      s(:begin,
                        s(:lvar, :i)),
                      s(:str, ") \".\" \"INBOX\"\n")), :gsub,
                    s(:regexp,
                      s(:str, "\\n"),
                      s(:regopt)),
                    s(:str, "\r\n")), :taint)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :FlagCountError)),
            s(:args),
            s(:send,
              s(:lvar, :parser), :parse,
              s(:send,
                s(:send,
                  s(:str, "* LIST (\\Foo3) \".\" \"INBOX\"\n"), :gsub,
                  s(:regexp,
                    s(:str, "\\n"),
                    s(:regopt)),
                  s(:str, "\r\n")), :taint))))),
      s(:def, :test_flag_list_many_same_flags,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :ResponseParser), :new)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:block,
              s(:send,
                s(:int, 100), :times),
              s(:args),
              s(:send,
                s(:lvar, :parser), :parse,
                s(:send,
                  s(:send,
                    s(:str, "* LIST (\\Foo) \".\" \"INBOX\"\n"), :gsub,
                    s(:regexp,
                      s(:str, "\\n"),
                      s(:regopt)),
                    s(:str, "\r\n")), :taint)))))),
      s(:def, :test_flag_xlist_inbox,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :ResponseParser), :new)),
          s(:lvasgn, :response,
            s(:send,
              s(:lvar, :parser), :parse,
              s(:send,
                s(:send,
                  s(:str, "* XLIST (\\Inbox) \".\" \"INBOX\"\n"), :gsub,
                  s(:regexp,
                    s(:str, "\\n"),
                    s(:regopt)),
                  s(:str, "\r\n")), :taint))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :Inbox)),
            s(:send,
              s(:send,
                s(:lvar, :response), :data), :attr)))),
      s(:def, :test_resp_text_code,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :ResponseParser), :new)),
          s(:lvasgn, :response,
            s(:send,
              s(:lvar, :parser), :parse,
              s(:send,
                s(:send,
                  s(:str, "* OK [CLOSED] Previous mailbox closed.\n"), :gsub,
                  s(:regexp,
                    s(:str, "\\n"),
                    s(:regopt)),
                  s(:str, "\r\n")), :taint))),
          s(:send, nil, :assert_equal,
            s(:str, "CLOSED"),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :response), :data), :code), :name)))),
      s(:def, :test_search_response,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :ResponseParser), :new)),
          s(:lvasgn, :response,
            s(:send,
              s(:lvar, :parser), :parse,
              s(:send,
                s(:send,
                  s(:str, "* SEARCH\n"), :gsub,
                  s(:regexp,
                    s(:str, "\\n"),
                    s(:regopt)),
                  s(:str, "\r\n")), :taint))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :response), :data)),
          s(:lvasgn, :response,
            s(:send,
              s(:lvar, :parser), :parse,
              s(:send,
                s(:send,
                  s(:str, "* SEARCH 1\n"), :gsub,
                  s(:regexp,
                    s(:str, "\\n"),
                    s(:regopt)),
                  s(:str, "\r\n")), :taint))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:lvar, :response), :data)),
          s(:lvasgn, :response,
            s(:send,
              s(:lvar, :parser), :parse,
              s(:send,
                s(:send,
                  s(:str, "* SEARCH 1 2 3\n"), :gsub,
                  s(:regexp,
                    s(:str, "\\n"),
                    s(:regopt)),
                  s(:str, "\r\n")), :taint))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:send,
              s(:lvar, :response), :data)))),
      s(:def, :test_search_response_of_yahoo,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :ResponseParser), :new)),
          s(:lvasgn, :response,
            s(:send,
              s(:lvar, :parser), :parse,
              s(:send,
                s(:send,
                  s(:str, "* SEARCH 1 \n"), :gsub,
                  s(:regexp,
                    s(:str, "\\n"),
                    s(:regopt)),
                  s(:str, "\r\n")), :taint))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:lvar, :response), :data)),
          s(:lvasgn, :response,
            s(:send,
              s(:lvar, :parser), :parse,
              s(:send,
                s(:send,
                  s(:str, "* SEARCH 1 2 3 \n"), :gsub,
                  s(:regexp,
                    s(:str, "\\n"),
                    s(:regopt)),
                  s(:str, "\r\n")), :taint))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:send,
              s(:lvar, :response), :data)))),
      s(:def, :test_msg_att_extra_space,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :ResponseParser), :new)),
          s(:lvasgn, :response,
            s(:send,
              s(:lvar, :parser), :parse,
              s(:send,
                s(:send,
                  s(:str, "* 1 FETCH (UID 92285)\n"), :gsub,
                  s(:regexp,
                    s(:str, "\\n"),
                    s(:regopt)),
                  s(:str, "\r\n")), :taint))),
          s(:send, nil, :assert_equal,
            s(:int, 92285),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :response), :data), :attr), :[],
              s(:str, "UID"))),
          s(:lvasgn, :response,
            s(:send,
              s(:lvar, :parser), :parse,
              s(:send,
                s(:send,
                  s(:str, "* 1 FETCH (UID 92285 )\n"), :gsub,
                  s(:regexp,
                    s(:str, "\\n"),
                    s(:regopt)),
                  s(:str, "\r\n")), :taint))),
          s(:send, nil, :assert_equal,
            s(:int, 92285),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :response), :data), :attr), :[],
              s(:str, "UID"))))),
      s(:def, :test_msg_att_parse_error,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :ResponseParser), :new)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const,
                    s(:const, nil, :Net), :IMAP), :ResponseParseError)),
              s(:args),
              s(:send,
                s(:lvar, :parser), :parse,
                s(:send,
                  s(:send,
                    s(:str, "* 123 FETCH (UNKNOWN 92285)\n"), :gsub,
                    s(:regexp,
                      s(:str, "\\n"),
                      s(:regopt)),
                    s(:str, "\r\n")), :taint)))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, " for \\{123\\}"),
              s(:regopt)),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_msg_att_rfc822_text,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :ResponseParser), :new)),
          s(:lvasgn, :response,
            s(:send,
              s(:lvar, :parser), :parse,
              s(:send,
                s(:send,
                  s(:dstr,
                    s(:str, "* 123 FETCH (RFC822 {5}\n"),
                    s(:str, "foo\n"),
                    s(:str, ")\n")), :gsub,
                  s(:regexp,
                    s(:str, "\\n"),
                    s(:regopt)),
                  s(:str, "\r\n")), :taint))),
          s(:send, nil, :assert_equal,
            s(:str, "foo\r\n"),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :response), :data), :attr), :[],
              s(:str, "RFC822"))),
          s(:lvasgn, :response,
            s(:send,
              s(:lvar, :parser), :parse,
              s(:send,
                s(:send,
                  s(:dstr,
                    s(:str, "* 123 FETCH (RFC822[] {5}\n"),
                    s(:str, "foo\n"),
                    s(:str, ")\n")), :gsub,
                  s(:regexp,
                    s(:str, "\\n"),
                    s(:regopt)),
                  s(:str, "\r\n")), :taint))),
          s(:send, nil, :assert_equal,
            s(:str, "foo\r\n"),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :response), :data), :attr), :[],
              s(:str, "RFC822"))))),
      s(:def, :test_body_type_attachment,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :ResponseParser), :new)),
          s(:lvasgn, :response,
            s(:send,
              s(:lvar, :parser), :parse,
              s(:send,
                s(:send,
                  s(:str, "* 980 FETCH (UID 2862 BODYSTRUCTURE (((\"TEXT\" \"PLAIN\" (\"CHARSET\" \"iso-8859-1\") NIL NIL \"7BIT\" 416 21 NIL NIL NIL)(\"TEXT\" \"HTML\" (\"CHARSET\" \"iso-8859-1\") NIL NIL \"7BIT\" 1493 32 NIL NIL NIL) \"ALTERNATIVE\" (\"BOUNDARY\" \"Boundary_(ID_IaecgfnXwG5bn3x8lIeGIQ)\") NIL NIL)(\"MESSAGE\" \"RFC822\" (\"NAME\" \"Fw_ ____ _____ ____.eml\") NIL NIL \"7BIT\" 1980088 NIL (\"ATTACHMENT\" (\"FILENAME\" \"Fw_ ____ _____ ____.eml\")) NIL) \"MIXED\" (\"BOUNDARY\" \"Boundary_(ID_eDdLc/j0mBIzIlR191pHjA)\") NIL NIL))\n"), :gsub,
                  s(:regexp,
                    s(:str, "\\n"),
                    s(:regopt)),
                  s(:str, "\r\n")), :taint))),
          s(:send, nil, :assert_equal,
            s(:str, "Fw_ ____ _____ ____.eml"),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :response), :data), :attr), :[],
                        s(:str, "BODYSTRUCTURE")), :parts), :[],
                    s(:int, 1)), :body), :param), :[],
              s(:str, "FILENAME"))))),
      s(:def, :assert_parseable,
        s(:args,
          s(:arg, :s)),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :ResponseParser), :new)),
          s(:send,
            s(:lvar, :parser), :parse,
            s(:send,
              s(:send,
                s(:lvar, :s), :gsub,
                s(:regexp,
                  s(:str, "\\n"),
                  s(:regopt)),
                s(:str, "\r\n")), :taint)))),
      s(:def, :test_msg_delivery_status,
        s(:args),
        s(:send, nil, :assert_parseable,
          s(:str, "* 4902 FETCH (BODY ((\"MESSAGE\" \"DELIVERY-STATUS\" NIL NIL NIL \"7BIT\" 324) \"REPORT\"))\n"))),
      s(:def, :test_msg_with_message_rfc822_attachment,
        s(:args),
        s(:send, nil, :assert_parseable,
          s(:str, "* 5441 FETCH (BODY (((\"TEXT\" \"PLAIN\" (\"CHARSET\" \"iso-8859-1\") NIL NIL \"QUOTED-PRINTABLE\" 69 1)(\"TEXT\" \"HTML\" (\"CHARSET\" \"iso-8859-1\") NIL NIL \"QUOTED-PRINTABLE\" 455 12) \"ALTERNATIVE\")(\"MESSAGE\" \"RFC822\" (\"NAME\" \"ATT00026.eml\") NIL NIL \"7BIT\" 4079755) \"MIXED\"))\n"))),
      s(:def, :test_msg_body_mixed,
        s(:args),
        s(:send, nil, :assert_parseable,
          s(:str, "* 1038 FETCH (BODY (\"MIXED\"))\n"))),
      s(:def, :test_msg_delivery_status_with_extra_data,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :ResponseParser), :new)),
          s(:lvasgn, :response,
            s(:send,
              s(:lvar, :parser), :parse,
              s(:send,
                s(:send,
                  s(:dstr,
                    s(:str, "* 29021 FETCH (RFC822.SIZE 3162 UID 113622 RFC822.HEADER {1155}\n"),
                    s(:str, "Return-path: <>\n"),
                    s(:str, "Envelope-to: info@xxxxxxxx.si\n"),
                    s(:str, "Delivery-date: Tue, 26 Mar 2013 12:42:58 +0100\n"),
                    s(:str, "Received: from mail by xxxx.xxxxxxxxxxx.net with spam-scanned (Exim 4.76)\n"),
                    s(:str, "\tid 1UKSHI-000Cwl-AR\n"),
                    s(:str, "\tfor info@xxxxxxxx.si; Tue, 26 Mar 2013 12:42:58 +0100\n"),
                    s(:str, "X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on xxxx.xxxxxxxxxxx.net\n"),
                    s(:str, "X-Spam-Level: **\n"),
                    s(:str, "X-Spam-Status: No, score=2.1 required=7.0 tests=DKIM_ADSP_NXDOMAIN,RDNS_NONE\n"),
                    s(:str, "\tautolearn=no version=3.3.1\n"),
                    s(:str, "Received: from [xx.xxx.xxx.xx] (port=56890 helo=xxxxxx.localdomain)\n"),
                    s(:str, "\tby xxxx.xxxxxxxxxxx.net with esmtp (Exim 4.76)\n"),
                    s(:str, "\tid 1UKSHI-000Cwi-9j\n"),
                    s(:str, "\tfor info@xxxxxxxx.si; Tue, 26 Mar 2013 12:42:56 +0100\n"),
                    s(:str, "Received: by xxxxxx.localdomain (Postfix)\n"),
                    s(:str, "\tid 72725BEA64A; Tue, 26 Mar 2013 12:42:55 +0100 (CET)\n"),
                    s(:str, "Date: Tue, 26 Mar 2013 12:42:55 +0100 (CET)\n"),
                    s(:str, "From: MAILER-DAEMON@xxxxxx.localdomain (Mail Delivery System)\n"),
                    s(:str, "Subject: Undelivered Mail Returned to Sender\n"),
                    s(:str, "To: info@xxxxxxxx.si\n"),
                    s(:str, "Auto-Submitted: auto-replied\n"),
                    s(:str, "MIME-Version: 1.0\n"),
                    s(:str, "Content-Type: multipart/report; report-type=delivery-status;\n"),
                    s(:str, "\tboundary=\"27797BEA649.1364298175/xxxxxx.localdomain\"\n"),
                    s(:str, "Message-Id: <20130326114255.72725BEA64A@xxxxxx.localdomain>\n"),
                    s(:str, "\n"),
                    s(:str, " BODYSTRUCTURE ((\"text\" \"plain\" (\"charset\" \"us-ascii\") NIL \"Notification\" \"7bit\" 510 14 NIL NIL NIL NIL)(\"message\" \"delivery-status\" NIL NIL \"Delivery report\" \"7bit\" 410 NIL NIL NIL NIL)(\"text\" \"rfc822-headers\" (\"charset\" \"us-ascii\") NIL \"Undelivered Message Headers\" \"7bit\" 612 15 NIL NIL NIL NIL) \"report\" (\"report-type\" \"delivery-status\" \"boundary\" \"27797BEA649.1364298175/xxxxxx.localdomain\") NIL NIL NIL))\n")), :gsub,
                  s(:regexp,
                    s(:str, "\\n"),
                    s(:regopt)),
                  s(:str, "\r\n")), :taint))),
          s(:lvasgn, :delivery_status,
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :response), :data), :attr), :[],
                  s(:str, "BODYSTRUCTURE")), :parts), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "MESSAGE"),
            s(:send,
              s(:lvar, :delivery_status), :media_type)),
          s(:send, nil, :assert_equal,
            s(:str, "DELIVERY-STATUS"),
            s(:send,
              s(:lvar, :delivery_status), :subtype)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :delivery_status), :param)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :delivery_status), :content_id)),
          s(:send, nil, :assert_equal,
            s(:str, "Delivery report"),
            s(:send,
              s(:lvar, :delivery_status), :description)),
          s(:send, nil, :assert_equal,
            s(:str, "7BIT"),
            s(:send,
              s(:lvar, :delivery_status), :encoding)),
          s(:send, nil, :assert_equal,
            s(:int, 410),
            s(:send,
              s(:lvar, :delivery_status), :size)))),
      s(:def, :test_acl,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :ResponseParser), :new)),
          s(:lvasgn, :response,
            s(:send,
              s(:lvar, :parser), :parse,
              s(:send,
                s(:send,
                  s(:str, "* ACL \"INBOX/share\" \"imshare2copy1366146467@xxxxxxxxxxxxxxxxxx.com\" lrswickxteda\n"), :gsub,
                  s(:regexp,
                    s(:str, "\\n"),
                    s(:regopt)),
                  s(:str, "\r\n")), :taint))),
          s(:send, nil, :assert_equal,
            s(:str, "ACL"),
            s(:send,
              s(:lvar, :response), :name)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:lvar, :response), :data), :length)),
          s(:send, nil, :assert_equal,
            s(:str, "INBOX/share"),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :response), :data), :[],
                s(:int, 0)), :mailbox)),
          s(:send, nil, :assert_equal,
            s(:str, "imshare2copy1366146467@xxxxxxxxxxxxxxxxxx.com"),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :response), :data), :[],
                s(:int, 0)), :user)),
          s(:send, nil, :assert_equal,
            s(:str, "lrswickxteda"),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :response), :data), :[],
                s(:int, 0)), :rights)))),
      s(:def, :test_capability,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :ResponseParser), :new)),
          s(:lvasgn, :response,
            s(:send,
              s(:lvar, :parser), :parse,
              s(:str, "* CAPABILITY st11p00mm-iscream009 1Q49 XAPPLEPUSHSERVICE IMAP4 IMAP4rev1 SASL-IR AUTH=ATOKEN AUTH=PLAIN\r\n"))),
          s(:send, nil, :assert_equal,
            s(:str, "CAPABILITY"),
            s(:send,
              s(:lvar, :response), :name)),
          s(:send, nil, :assert_equal,
            s(:str, "AUTH=PLAIN"),
            s(:send,
              s(:send,
                s(:lvar, :response), :data), :last)),
          s(:lvasgn, :response,
            s(:send,
              s(:lvar, :parser), :parse,
              s(:str, "* CAPABILITY st11p00mm-iscream009 1Q49 XAPPLEPUSHSERVICE IMAP4 IMAP4rev1 SASL-IR AUTH=ATOKEN AUTH=PLAIN \r\n"))),
          s(:send, nil, :assert_equal,
            s(:str, "CAPABILITY"),
            s(:send,
              s(:lvar, :response), :name)),
          s(:send, nil, :assert_equal,
            s(:str, "AUTH=PLAIN"),
            s(:send,
              s(:send,
                s(:lvar, :response), :data), :last)))),
      s(:def, :test_mixed_boundry,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :ResponseParser), :new)),
          s(:lvasgn, :response,
            s(:send,
              s(:lvar, :parser), :parse,
              s(:dstr,
                s(:str, "* 2688 FETCH (UID 179161 BODYSTRUCTURE ("),
                s(:str, "(\"TEXT\" \"PLAIN\" (\"CHARSET\" \"iso-8859-1\") NIL NIL \"QUOTED-PRINTABLE\" 200 4 NIL NIL NIL)"),
                s(:str, "(\"MESSAGE\" \"DELIVERY-STATUS\" NIL NIL NIL \"7BIT\" 318 NIL NIL NIL)"),
                s(:str, "(\"MESSAGE\" \"RFC822\" NIL NIL NIL \"7BIT\" 2177"),
                s(:str, " (\"Tue, 11 May 2010 18:28:16 -0400\" \"Re: Welcome letter\" ("),
                s(:str, "(\"David\" NIL \"info\" \"xxxxxxxx.si\")) "),
                s(:str, "((\"David\" NIL \"info\" \"xxxxxxxx.si\")) "),
                s(:str, "((\"David\" NIL \"info\" \"xxxxxxxx.si\")) "),
                s(:str, "((\"Doretha\" NIL \"doretha.info\" \"xxxxxxxx.si\")) "),
                s(:str, "NIL NIL "),
                s(:str, "\"<AC1D15E06EA82F47BDE18E851CC32F330717704E@localdomain>\" "),
                s(:str, "\"<AANLkTikKMev1I73L2E7XLjRs67IHrEkb23f7ZPmD4S_9@localdomain>\")"),
                s(:str, " (\"MIXED\" (\"BOUNDARY\" \"000e0cd29212e3e06a0486590ae2\") NIL NIL)"),
                s(:str, " 37 NIL NIL NIL)"),
                s(:str, " \"REPORT\" (\"BOUNDARY\" \"16DuG.4XbaNOvCi.9ggvq.8Ipnyp3\" \"REPORT-TYPE\" \"delivery-status\") NIL NIL))\r\n")))),
          s(:lvasgn, :empty_part,
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :response), :data), :attr), :[],
                  s(:str, "BODYSTRUCTURE")), :parts), :[],
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :empty_part), :lines),
            s(:int, 37)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :empty_part), :body), :media_type),
            s(:str, "MULTIPART")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :empty_part), :body), :subtype),
            s(:str, "MIXED")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :empty_part), :body), :param), :[],
              s(:str, "BOUNDARY")),
            s(:str, "000e0cd29212e3e06a0486590ae2")))),
      s(:def, :test_search_modseq,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :ResponseParser), :new)),
          s(:lvasgn, :response,
            s(:send,
              s(:lvar, :parser), :parse,
              s(:str, "* SEARCH 87216 87221 (MODSEQ 7667567)\r\n"))),
          s(:send, nil, :assert_equal,
            s(:str, "SEARCH"),
            s(:send,
              s(:lvar, :response), :name)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 87216),
              s(:int, 87221)),
            s(:send,
              s(:lvar, :response), :data)))),
      s(:def, :test_body_ext_mpart_without_lang,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :IMAP), :ResponseParser), :new)),
          s(:lvasgn, :response,
            s(:send,
              s(:lvar, :parser), :parse,
              s(:str, "* 4 FETCH (BODY (((\"text\" \"plain\" (\"charset\" \"utf-8\") NIL NIL \"7bit\" 257 9 NIL NIL NIL NIL)(\"text\" \"html\" (\"charset\" \"utf-8\") NIL NIL \"quoted-printable\" 655 9 NIL NIL NIL NIL) \"alternative\" (\"boundary\" \"001a1137a5047848dd05157ddaa1\") NIL)(\"application\" \"pdf\" (\"name\" \"test.xml\" \"x-apple-part-url\" \"9D00D9A2-98AB-4EFB-85BA-FB255F8BF3D7\") NIL NIL \"base64\" 4383638 NIL (\"attachment\" (\"filename\" \"test.xml\")) NIL NIL) \"mixed\" (\"boundary\" \"001a1137a5047848e405157ddaa3\") NIL))\r\n"))),
          s(:send, nil, :assert_equal,
            s(:str, "FETCH"),
            s(:send,
              s(:lvar, :response), :name)),
          s(:lvasgn, :body,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :response), :data), :attr), :[],
              s(:str, "BODY"))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :body), :parts), :[],
                s(:int, 0)), :disposition)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :body), :parts), :[],
                s(:int, 0)), :language)),
          s(:send, nil, :assert_equal,
            s(:str, "ATTACHMENT"),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :body), :parts), :[],
                  s(:int, 1)), :disposition), :dsp_type)),
          s(:send, nil, :assert_equal,
            s(:str, "test.xml"),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :body), :parts), :[],
                    s(:int, 1)), :disposition), :param), :[],
              s(:str, "FILENAME"))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :body), :parts), :[],
                s(:int, 1)), :language)))))))
