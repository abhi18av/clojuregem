s(:begin,
  s(:send, nil, :require,
    s(:str, "net/ftp")),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "ostruct")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:class,
    s(:const, nil, :BufferedSocketTest),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_gets_empty,
        s(:args),
        s(:begin,
          s(:lvasgn, :sock,
            s(:send, nil, :create_buffered_socket,
              s(:str, ""))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :sock), :gets)))),
      s(:def, :test_gets_one_line,
        s(:args),
        s(:begin,
          s(:lvasgn, :sock,
            s(:send, nil, :create_buffered_socket,
              s(:str, "foo\n"))),
          s(:send, nil, :assert_equal,
            s(:str, "foo\n"),
            s(:send,
              s(:lvar, :sock), :gets)))),
      s(:def, :test_gets_one_line_without_term,
        s(:args),
        s(:begin,
          s(:lvasgn, :sock,
            s(:send, nil, :create_buffered_socket,
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:lvar, :sock), :gets)))),
      s(:def, :test_gets_two_lines,
        s(:args),
        s(:begin,
          s(:lvasgn, :sock,
            s(:send, nil, :create_buffered_socket,
              s(:str, "foo\nbar\n"))),
          s(:send, nil, :assert_equal,
            s(:str, "foo\n"),
            s(:send,
              s(:lvar, :sock), :gets)),
          s(:send, nil, :assert_equal,
            s(:str, "bar\n"),
            s(:send,
              s(:lvar, :sock), :gets)))),
      s(:def, :test_gets_two_lines_without_term,
        s(:args),
        s(:begin,
          s(:lvasgn, :sock,
            s(:send, nil, :create_buffered_socket,
              s(:str, "foo\nbar"))),
          s(:send, nil, :assert_equal,
            s(:str, "foo\n"),
            s(:send,
              s(:lvar, :sock), :gets)),
          s(:send, nil, :assert_equal,
            s(:str, "bar"),
            s(:send,
              s(:lvar, :sock), :gets)))),
      s(:send, nil, :private),
      s(:def, :create_buffered_socket,
        s(:args,
          s(:arg, :s)),
        s(:begin,
          s(:lvasgn, :io,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:lvar, :s))),
          s(:return,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :FTP), :BufferedSocket), :new,
              s(:lvar, :io))))))))
