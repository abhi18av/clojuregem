s(:begin,
  s(:send, nil, :require,
    s(:str, "net/ftp")),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "ostruct")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:class,
    s(:const, nil, :FTPTest),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :SERVER_ADDR,
        s(:str, "127.0.0.1")),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@thread,
            s(:nil)),
          s(:ivasgn, :@default_passive,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :FTP), :default_passive)),
          s(:send,
            s(:const,
              s(:const, nil, :Net), :FTP), :default_passive=,
            s(:false)))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:send,
            s(:const,
              s(:const, nil, :Net), :FTP), :default_passive=,
            s(:ivar, :@default_passive)),
          s(:if,
            s(:ivar, :@thread),
            s(:send,
              s(:ivar, :@thread), :join), nil))),
      s(:def, :test_not_connected,
        s(:args),
        s(:begin,
          s(:lvasgn, :ftp,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :FTP), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPConnectionError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :quit)))),
      s(:def, :test_closed_when_not_connected,
        s(:args),
        s(:begin,
          s(:lvasgn, :ftp,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :FTP), :new)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :ftp), :closed?)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const,
                s(:const, nil, :Net), :FTPConnectionError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :close)))),
      s(:def, :test_connect_fail,
        s(:args),
        s(:begin,
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:send,
                s(:lvar, :sock), :print,
                s(:str, "421 Service not available, closing control connection.\r\n")))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :ftp,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Net), :FTP), :new)),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const, nil, :Net), :FTPTempError)),
                  s(:args),
                  s(:send,
                    s(:lvar, :ftp), :connect,
                    s(:const, nil, :SERVER_ADDR),
                    s(:send,
                      s(:lvar, :server), :port)))),
              s(:begin,
                s(:if,
                  s(:lvar, :ftp),
                  s(:send,
                    s(:lvar, :ftp), :close), nil),
                s(:send,
                  s(:lvar, :server), :close)))))),
      s(:def, :test_parse227,
        s(:args),
        s(:begin,
          s(:lvasgn, :ftp,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :FTP), :new)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :host),
              s(:lvasgn, :port)),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse227),
              s(:str, "227 Entering Passive Mode (192,168,0,1,12,34)"))),
          s(:send, nil, :assert_equal,
            s(:str, "192.168.0.1"),
            s(:lvar, :host)),
          s(:send, nil, :assert_equal,
            s(:int, 3106),
            s(:lvar, :port)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPReplyError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse227),
              s(:str, "500 Syntax error"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPProtoError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse227),
              s(:str, "227 Entering Passive Mode"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPProtoError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse227),
              s(:str, "227 Entering Passive Mode (192,168,0,1,12,34,56)"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPProtoError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse227),
              s(:str, "227 Entering Passive Mode (192,168,0,1)"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPProtoError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse227),
              s(:str, "227 ) foo bar ("))))),
      s(:def, :test_parse228,
        s(:args),
        s(:begin,
          s(:lvasgn, :ftp,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :FTP), :new)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :host),
              s(:lvasgn, :port)),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse228),
              s(:str, "228 Entering Long Passive Mode (4,4,192,168,0,1,2,12,34)"))),
          s(:send, nil, :assert_equal,
            s(:str, "192.168.0.1"),
            s(:lvar, :host)),
          s(:send, nil, :assert_equal,
            s(:int, 3106),
            s(:lvar, :port)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :host),
              s(:lvasgn, :port)),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse228),
              s(:str, "228 Entering Long Passive Mode (6,16,16,128,0,0,0,0,0,0,0,8,8,0,32,12,65,122,2,12,34)"))),
          s(:send, nil, :assert_equal,
            s(:str, "1080:0000:0000:0000:0008:0800:200c:417a"),
            s(:lvar, :host)),
          s(:send, nil, :assert_equal,
            s(:int, 3106),
            s(:lvar, :port)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPReplyError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse228),
              s(:str, "500 Syntax error"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPProtoError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse228),
              s(:str, "228 Entering Passive Mode"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPProtoError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse228),
              s(:str, "228 Entering Long Passive Mode (6,4,192,168,0,1,2,12,34)"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPProtoError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse228),
              s(:str, "228 Entering Long Passive Mode (4,4,192,168,0,1,3,12,34,56)"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPProtoError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse228),
              s(:str, "228 Entering Long Passive Mode (4,16,16,128,0,0,0,0,0,0,0,8,8,0,32,12,65,122,2,12,34)"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPProtoError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse228),
              s(:str, "228 Entering Long Passive Mode (6,16,16,128,0,0,0,0,0,0,0,8,8,0,32,12,65,122,3,12,34,56)"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPProtoError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse228),
              s(:str, "228 Entering Long Passive Mode (6,16,16,128,0,0,0,0,0,0,0,8,8,0,32,12,65,122,2,12,34,56)"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPProtoError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse227),
              s(:str, "227 ) foo bar ("))))),
      s(:def, :test_parse229,
        s(:args),
        s(:begin,
          s(:lvasgn, :ftp,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :FTP), :new)),
          s(:lvasgn, :sock,
            s(:send,
              s(:const, nil, :OpenStruct), :new)),
          s(:send,
            s(:lvar, :sock), :peeraddr=,
            s(:array,
              s(:nil),
              s(:nil),
              s(:nil),
              s(:str, "1080:0000:0000:0000:0008:0800:200c:417a"))),
          s(:send,
            s(:lvar, :ftp), :instance_variable_set,
            s(:sym, :@sock),
            s(:lvar, :sock)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :host),
              s(:lvasgn, :port)),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse229),
              s(:str, "229 Entering Passive Mode (|||3106|)"))),
          s(:send, nil, :assert_equal,
            s(:str, "1080:0000:0000:0000:0008:0800:200c:417a"),
            s(:lvar, :host)),
          s(:send, nil, :assert_equal,
            s(:int, 3106),
            s(:lvar, :port)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :host),
              s(:lvasgn, :port)),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse229),
              s(:str, "229 Entering Passive Mode (!!!3106!)"))),
          s(:send, nil, :assert_equal,
            s(:str, "1080:0000:0000:0000:0008:0800:200c:417a"),
            s(:lvar, :host)),
          s(:send, nil, :assert_equal,
            s(:int, 3106),
            s(:lvar, :port)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :host),
              s(:lvasgn, :port)),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse229),
              s(:str, "229 Entering Passive Mode (~~~3106~)"))),
          s(:send, nil, :assert_equal,
            s(:str, "1080:0000:0000:0000:0008:0800:200c:417a"),
            s(:lvar, :host)),
          s(:send, nil, :assert_equal,
            s(:int, 3106),
            s(:lvar, :port)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPReplyError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse229),
              s(:str, "500 Syntax error"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPProtoError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse229),
              s(:str, "229 Entering Passive Mode"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPProtoError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse229),
              s(:str, "229 Entering Passive Mode (|!!3106!)"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPProtoError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse229),
              s(:str, "229 Entering Passive Mode (   3106 )"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPProtoError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse229),
              s(:str, "229 Entering Passive Mode (\u007F\u007F\u007F3106\u007F)"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPProtoError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse229),
              s(:str, "229 ) foo bar ("))))),
      s(:def, :test_parse_pasv_port,
        s(:args),
        s(:begin,
          s(:lvasgn, :ftp,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :FTP), :new)),
          s(:send, nil, :assert_equal,
            s(:int, 12),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse_pasv_port),
              s(:str, "12"))),
          s(:send, nil, :assert_equal,
            s(:int, 3106),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse_pasv_port),
              s(:str, "12,34"))),
          s(:send, nil, :assert_equal,
            s(:int, 795192),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse_pasv_port),
              s(:str, "12,34,56"))),
          s(:send, nil, :assert_equal,
            s(:int, 203569230),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse_pasv_port),
              s(:str, "12,34,56,78"))))),
      s(:def, :test_login,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_login_fail1,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "502 Command not implemented.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :Net), :FTPPermError)),
                      s(:args),
                      s(:send,
                        s(:lvar, :ftp), :login))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_login_fail2,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "530 Not logged in.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :Net), :FTPPermError)),
                      s(:args),
                      s(:send,
                        s(:lvar, :ftp), :login))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :_test_open_timeout_exceeded,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server,
                s(:float, 0.2)),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :open_timeout=,
                      s(:float, 0.1)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :Net), :OpenTimeout)),
                      s(:args),
                      s(:send,
                        s(:lvar, :ftp), :login)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_read_timeout_exceeded,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send, nil, :sleep,
                  s(:float, 0.1)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send, nil, :sleep,
                  s(:float, 0.3)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send, nil, :sleep,
                  s(:float, 0.1)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :read_timeout=,
                      s(:float, 0.2)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :Net), :ReadTimeout)),
                      s(:args),
                      s(:send,
                        s(:lvar, :ftp), :login)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_read_timeout_not_exceeded,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send, nil, :sleep,
                  s(:float, 0.1)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send, nil, :sleep,
                  s(:float, 0.1)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send, nil, :sleep,
                  s(:float, 0.1)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :read_timeout=,
                      s(:float, 0.2)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:begin,
                    s(:send,
                      s(:lvar, :ftp), :close),
                    s(:send, nil, :assert_equal,
                      s(:float, 0.2),
                      s(:send,
                        s(:lvar, :ftp), :read_timeout))))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_list_read_timeout_exceeded,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :list_lines,
            s(:array,
              s(:str, "-rw-r--r--    1 0        0               0 Mar 30 11:22 foo.txt"),
              s(:str, "-rw-r--r--    1 0        0               0 Mar 30 11:22 bar.txt"),
              s(:str, "-rw-r--r--    1 0        0               0 Mar 30 11:22 baz.txt"))),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to ASCII mode.\r\n")),
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:lvar, :line)),
                s(:lvasgn, :port_args,
                  s(:send,
                    s(:send,
                      s(:lvar, :line), :slice,
                      s(:regexp,
                        s(:str, "\\APORT (.*)"),
                        s(:regopt)),
                      s(:int, 1)), :split,
                    s(:regexp,
                      s(:str, ","),
                      s(:regopt)))),
                s(:lvasgn, :host,
                  s(:send,
                    s(:send,
                      s(:lvar, :port_args), :[],
                      s(:int, 0),
                      s(:int, 4)), :join,
                    s(:str, "."))),
                s(:lvasgn, :port,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :port_args), :[],
                          s(:int, 4),
                          s(:int, 2)), :map,
                        s(:block_pass,
                          s(:sym, :to_i))), :inject),
                    s(:args,
                      s(:arg, :x),
                      s(:arg, :y)),
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :x), :<<,
                          s(:int, 8))), :+,
                      s(:lvar, :y)))),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 PORT command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "150 Here comes the directory listing.\r\n")),
                s(:kwbegin,
                  s(:ensure,
                    s(:rescue,
                      s(:begin,
                        s(:lvasgn, :conn,
                          s(:send,
                            s(:const, nil, :TCPSocket), :new,
                            s(:lvar, :host),
                            s(:lvar, :port))),
                        s(:block,
                          s(:send,
                            s(:lvar, :list_lines), :each_with_index),
                          s(:args,
                            s(:arg, :l),
                            s(:arg, :i)),
                          s(:begin,
                            s(:if,
                              s(:send,
                                s(:lvar, :i), :==,
                                s(:int, 1)),
                              s(:send, nil, :sleep,
                                s(:float, 0.5)),
                              s(:send, nil, :sleep,
                                s(:float, 0.1))),
                            s(:send,
                              s(:lvar, :conn), :print,
                              s(:lvar, :l),
                              s(:str, "\r\n"))))),
                      s(:resbody,
                        s(:array,
                          s(:const,
                            s(:const, nil, :Errno), :EPIPE)), nil, nil), nil),
                    s(:begin,
                      s(:send, nil, :assert_nil,
                        s(:gvar, :$!)),
                      s(:send,
                        s(:lvar, :conn), :close)))),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "226 Directory send OK.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :read_timeout=,
                      s(:float, 0.2)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :Net), :ReadTimeout)),
                      s(:args),
                      s(:send,
                        s(:lvar, :ftp), :list)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE A\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APORT "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "LIST\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_list_read_timeout_not_exceeded,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :list_lines,
            s(:array,
              s(:str, "-rw-r--r--    1 0        0               0 Mar 30 11:22 foo.txt"),
              s(:str, "-rw-r--r--    1 0        0               0 Mar 30 11:22 bar.txt"),
              s(:str, "-rw-r--r--    1 0        0               0 Mar 30 11:22 baz.txt"))),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to ASCII mode.\r\n")),
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:lvar, :line)),
                s(:lvasgn, :port_args,
                  s(:send,
                    s(:send,
                      s(:lvar, :line), :slice,
                      s(:regexp,
                        s(:str, "\\APORT (.*)"),
                        s(:regopt)),
                      s(:int, 1)), :split,
                    s(:regexp,
                      s(:str, ","),
                      s(:regopt)))),
                s(:lvasgn, :host,
                  s(:send,
                    s(:send,
                      s(:lvar, :port_args), :[],
                      s(:int, 0),
                      s(:int, 4)), :join,
                    s(:str, "."))),
                s(:lvasgn, :port,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :port_args), :[],
                          s(:int, 4),
                          s(:int, 2)), :map,
                        s(:block_pass,
                          s(:sym, :to_i))), :inject),
                    s(:args,
                      s(:arg, :x),
                      s(:arg, :y)),
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :x), :<<,
                          s(:int, 8))), :+,
                      s(:lvar, :y)))),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 PORT command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "150 Here comes the directory listing.\r\n")),
                s(:lvasgn, :conn,
                  s(:send,
                    s(:const, nil, :TCPSocket), :new,
                    s(:lvar, :host),
                    s(:lvar, :port))),
                s(:block,
                  s(:send,
                    s(:lvar, :list_lines), :each),
                  s(:args,
                    s(:arg, :l)),
                  s(:begin,
                    s(:send, nil, :sleep,
                      s(:float, 0.1)),
                    s(:send,
                      s(:lvar, :conn), :print,
                      s(:lvar, :l),
                      s(:str, "\r\n")))),
                s(:send,
                  s(:lvar, :conn), :close),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "226 Directory send OK.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :read_timeout=,
                      s(:float, 0.2)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :list_lines),
                      s(:send,
                        s(:lvar, :ftp), :list)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE A\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APORT "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "LIST\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_list_fail,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to ASCII mode.\r\n")),
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:lvar, :line)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 PORT command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "553 Requested action not taken.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :read_timeout=,
                      s(:float, 0.2)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :Net), :FTPPermError)),
                      s(:args),
                      s(:send,
                        s(:lvar, :ftp), :list)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE A\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APORT "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "LIST\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_open_data_port_fail_no_leak,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to ASCII mode.\r\n")),
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:lvar, :line)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "421 Service not available, closing control connection.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :read_timeout=,
                      s(:float, 0.2)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :Net), :FTPTempError)),
                      s(:args),
                      s(:send,
                        s(:lvar, :ftp), :list)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE A\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APORT "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_retrbinary_read_timeout_exceeded,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :binary_data,
            s(:send,
              s(:send,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:begin,
                        s(:irange,
                          s(:int, 0),
                          s(:int, 255))), :map),
                    s(:args,
                      s(:arg, :i)),
                    s(:send,
                      s(:lvar, :i), :chr)), :join), :*,
                s(:int, 4)), :*,
              s(:int, 3))),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:lvar, :line)),
                s(:lvasgn, :port_args,
                  s(:send,
                    s(:send,
                      s(:lvar, :line), :slice,
                      s(:regexp,
                        s(:str, "\\APORT (.*)"),
                        s(:regopt)),
                      s(:int, 1)), :split,
                    s(:regexp,
                      s(:str, ","),
                      s(:regopt)))),
                s(:lvasgn, :host,
                  s(:send,
                    s(:send,
                      s(:lvar, :port_args), :[],
                      s(:int, 0),
                      s(:int, 4)), :join,
                    s(:str, "."))),
                s(:lvasgn, :port,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :port_args), :[],
                          s(:int, 4),
                          s(:int, 2)), :map,
                        s(:block_pass,
                          s(:sym, :to_i))), :inject),
                    s(:args,
                      s(:arg, :x),
                      s(:arg, :y)),
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :x), :<<,
                          s(:int, 8))), :+,
                      s(:lvar, :y)))),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 PORT command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:dstr,
                    s(:str, "150 Opening BINARY mode data connection for foo ("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :binary_data), :size)),
                    s(:str, " bytes)\r\n"))),
                s(:lvasgn, :conn,
                  s(:send,
                    s(:const, nil, :TCPSocket), :new,
                    s(:lvar, :host),
                    s(:lvar, :port))),
                s(:send, nil, :sleep,
                  s(:float, 0.1)),
                s(:send,
                  s(:lvar, :conn), :print,
                  s(:send,
                    s(:lvar, :binary_data), :[],
                    s(:int, 0),
                    s(:int, 1024))),
                s(:send, nil, :sleep,
                  s(:float, 0.5)),
                s(:rescue,
                  s(:send,
                    s(:lvar, :conn), :print,
                    s(:send,
                      s(:lvar, :binary_data), :[],
                      s(:int, 1024),
                      s(:int, 1024))),
                  s(:resbody, nil, nil,
                    s(:nil)), nil),
                s(:send,
                  s(:lvar, :conn), :close),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "226 Transfer complete.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :read_timeout=,
                      s(:float, 0.2)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:lvasgn, :buf,
                      s(:send,
                        s(:const, nil, :String), :new)),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :Net), :ReadTimeout)),
                      s(:args),
                      s(:block,
                        s(:send,
                          s(:lvar, :ftp), :retrbinary,
                          s(:str, "RETR foo"),
                          s(:int, 1024)),
                        s(:args,
                          s(:arg, :s)),
                        s(:send,
                          s(:lvar, :buf), :<<,
                          s(:lvar, :s)))),
                    s(:send, nil, :assert_equal,
                      s(:int, 1024),
                      s(:send,
                        s(:lvar, :buf), :bytesize)),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:lvar, :binary_data), :[],
                        s(:int, 0),
                        s(:int, 1024)),
                      s(:lvar, :buf)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APORT "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "RETR foo\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:send,
                      s(:lvar, :ftp), :closed?), nil,
                    s(:send,
                      s(:lvar, :ftp), :close)))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_retrbinary_read_timeout_not_exceeded,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :binary_data,
            s(:send,
              s(:send,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:begin,
                        s(:irange,
                          s(:int, 0),
                          s(:int, 255))), :map),
                    s(:args,
                      s(:arg, :i)),
                    s(:send,
                      s(:lvar, :i), :chr)), :join), :*,
                s(:int, 4)), :*,
              s(:int, 3))),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:lvar, :line)),
                s(:lvasgn, :port_args,
                  s(:send,
                    s(:send,
                      s(:lvar, :line), :slice,
                      s(:regexp,
                        s(:str, "\\APORT (.*)"),
                        s(:regopt)),
                      s(:int, 1)), :split,
                    s(:regexp,
                      s(:str, ","),
                      s(:regopt)))),
                s(:lvasgn, :host,
                  s(:send,
                    s(:send,
                      s(:lvar, :port_args), :[],
                      s(:int, 0),
                      s(:int, 4)), :join,
                    s(:str, "."))),
                s(:lvasgn, :port,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :port_args), :[],
                          s(:int, 4),
                          s(:int, 2)), :map,
                        s(:block_pass,
                          s(:sym, :to_i))), :inject),
                    s(:args,
                      s(:arg, :x),
                      s(:arg, :y)),
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :x), :<<,
                          s(:int, 8))), :+,
                      s(:lvar, :y)))),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 PORT command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:dstr,
                    s(:str, "150 Opening BINARY mode data connection for foo ("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :binary_data), :size)),
                    s(:str, " bytes)\r\n"))),
                s(:lvasgn, :conn,
                  s(:send,
                    s(:const, nil, :TCPSocket), :new,
                    s(:lvar, :host),
                    s(:lvar, :port))),
                s(:block,
                  s(:send,
                    s(:lvar, :binary_data), :scan,
                    s(:regexp,
                      s(:str, ".{1,1024}"),
                      s(:regopt, :m, :n))),
                  s(:args,
                    s(:arg, :s)),
                  s(:begin,
                    s(:send, nil, :sleep,
                      s(:float, 0.1)),
                    s(:send,
                      s(:lvar, :conn), :print,
                      s(:lvar, :s)))),
                s(:send,
                  s(:lvar, :conn), :shutdown,
                  s(:const,
                    s(:const, nil, :Socket), :SHUT_WR)),
                s(:send,
                  s(:lvar, :conn), :read),
                s(:send,
                  s(:lvar, :conn), :close),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "226 Transfer complete.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :read_timeout=,
                      s(:float, 0.2)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:lvasgn, :buf,
                      s(:send,
                        s(:const, nil, :String), :new)),
                    s(:block,
                      s(:send,
                        s(:lvar, :ftp), :retrbinary,
                        s(:str, "RETR foo"),
                        s(:int, 1024)),
                      s(:args,
                        s(:arg, :s)),
                      s(:send,
                        s(:lvar, :buf), :<<,
                        s(:lvar, :s))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:lvar, :binary_data), :bytesize),
                      s(:send,
                        s(:lvar, :buf), :bytesize)),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :binary_data),
                      s(:lvar, :buf)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APORT "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "RETR foo\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_retrbinary_fail,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:lvar, :line)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 PORT command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "550 Requested action not taken.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :read_timeout=,
                      s(:float, 0.2)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :Net), :FTPPermError)),
                      s(:args),
                      s(:send,
                        s(:lvar, :ftp), :retrbinary,
                        s(:str, "RETR foo"),
                        s(:int, 1024))),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APORT "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "RETR foo\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_getbinaryfile,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :binary_data,
            s(:send,
              s(:send,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:begin,
                        s(:irange,
                          s(:int, 0),
                          s(:int, 255))), :map),
                    s(:args,
                      s(:arg, :i)),
                    s(:send,
                      s(:lvar, :i), :chr)), :join), :*,
                s(:int, 4)), :*,
              s(:int, 3))),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:lvar, :line)),
                s(:lvasgn, :port_args,
                  s(:send,
                    s(:send,
                      s(:lvar, :line), :slice,
                      s(:regexp,
                        s(:str, "\\APORT (.*)"),
                        s(:regopt)),
                      s(:int, 1)), :split,
                    s(:regexp,
                      s(:str, ","),
                      s(:regopt)))),
                s(:lvasgn, :host,
                  s(:send,
                    s(:send,
                      s(:lvar, :port_args), :[],
                      s(:int, 0),
                      s(:int, 4)), :join,
                    s(:str, "."))),
                s(:lvasgn, :port,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :port_args), :[],
                          s(:int, 4),
                          s(:int, 2)), :map,
                        s(:block_pass,
                          s(:sym, :to_i))), :inject),
                    s(:args,
                      s(:arg, :x),
                      s(:arg, :y)),
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :x), :<<,
                          s(:int, 8))), :+,
                      s(:lvar, :y)))),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 PORT command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:dstr,
                    s(:str, "150 Opening BINARY mode data connection for foo ("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :binary_data), :size)),
                    s(:str, " bytes)\r\n"))),
                s(:lvasgn, :conn,
                  s(:send,
                    s(:const, nil, :TCPSocket), :new,
                    s(:lvar, :host),
                    s(:lvar, :port))),
                s(:block,
                  s(:send,
                    s(:lvar, :binary_data), :scan,
                    s(:regexp,
                      s(:str, ".{1,1024}"),
                      s(:regopt, :m, :n))),
                  s(:args,
                    s(:arg, :s)),
                  s(:send,
                    s(:lvar, :conn), :print,
                    s(:lvar, :s))),
                s(:send,
                  s(:lvar, :conn), :shutdown,
                  s(:const,
                    s(:const, nil, :Socket), :SHUT_WR)),
                s(:send,
                  s(:lvar, :conn), :read),
                s(:send,
                  s(:lvar, :conn), :close),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "226 Transfer complete.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :read_timeout=,
                      s(:float, 0.2)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:lvasgn, :buf,
                      s(:send,
                        s(:lvar, :ftp), :getbinaryfile,
                        s(:str, "foo"),
                        s(:nil))),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :binary_data),
                      s(:lvar, :buf)),
                    s(:send, nil, :assert_equal,
                      s(:const,
                        s(:const, nil, :Encoding), :ASCII_8BIT),
                      s(:send,
                        s(:lvar, :buf), :encoding)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APORT "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "RETR foo\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_getbinaryfile_empty,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :binary_data,
            s(:str, "")),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:lvar, :line)),
                s(:lvasgn, :port_args,
                  s(:send,
                    s(:send,
                      s(:lvar, :line), :slice,
                      s(:regexp,
                        s(:str, "\\APORT (.*)"),
                        s(:regopt)),
                      s(:int, 1)), :split,
                    s(:regexp,
                      s(:str, ","),
                      s(:regopt)))),
                s(:lvasgn, :host,
                  s(:send,
                    s(:send,
                      s(:lvar, :port_args), :[],
                      s(:int, 0),
                      s(:int, 4)), :join,
                    s(:str, "."))),
                s(:lvasgn, :port,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :port_args), :[],
                          s(:int, 4),
                          s(:int, 2)), :map,
                        s(:block_pass,
                          s(:sym, :to_i))), :inject),
                    s(:args,
                      s(:arg, :x),
                      s(:arg, :y)),
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :x), :<<,
                          s(:int, 8))), :+,
                      s(:lvar, :y)))),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 PORT command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:dstr,
                    s(:str, "150 Opening BINARY mode data connection for foo ("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :binary_data), :size)),
                    s(:str, " bytes)\r\n"))),
                s(:lvasgn, :conn,
                  s(:send,
                    s(:const, nil, :TCPSocket), :new,
                    s(:lvar, :host),
                    s(:lvar, :port))),
                s(:send,
                  s(:lvar, :conn), :shutdown,
                  s(:const,
                    s(:const, nil, :Socket), :SHUT_WR)),
                s(:send,
                  s(:lvar, :conn), :read),
                s(:send,
                  s(:lvar, :conn), :close),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "226 Transfer complete.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :read_timeout=,
                      s(:float, 0.2)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:lvasgn, :buf,
                      s(:send,
                        s(:lvar, :ftp), :getbinaryfile,
                        s(:str, "foo"),
                        s(:nil))),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :binary_data),
                      s(:lvar, :buf)),
                    s(:send, nil, :assert_equal,
                      s(:const,
                        s(:const, nil, :Encoding), :ASCII_8BIT),
                      s(:send,
                        s(:lvar, :buf), :encoding)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APORT "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "RETR foo\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_getbinaryfile_with_filename_and_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :binary_data,
            s(:send,
              s(:send,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:begin,
                        s(:irange,
                          s(:int, 0),
                          s(:int, 255))), :map),
                    s(:args,
                      s(:arg, :i)),
                    s(:send,
                      s(:lvar, :i), :chr)), :join), :*,
                s(:int, 4)), :*,
              s(:int, 3))),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:lvar, :line)),
                s(:lvasgn, :port_args,
                  s(:send,
                    s(:send,
                      s(:lvar, :line), :slice,
                      s(:regexp,
                        s(:str, "\\APORT (.*)"),
                        s(:regopt)),
                      s(:int, 1)), :split,
                    s(:regexp,
                      s(:str, ","),
                      s(:regopt)))),
                s(:lvasgn, :host,
                  s(:send,
                    s(:send,
                      s(:lvar, :port_args), :[],
                      s(:int, 0),
                      s(:int, 4)), :join,
                    s(:str, "."))),
                s(:lvasgn, :port,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :port_args), :[],
                          s(:int, 4),
                          s(:int, 2)), :map,
                        s(:block_pass,
                          s(:sym, :to_i))), :inject),
                    s(:args,
                      s(:arg, :x),
                      s(:arg, :y)),
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :x), :<<,
                          s(:int, 8))), :+,
                      s(:lvar, :y)))),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 PORT command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:dstr,
                    s(:str, "150 Opening BINARY mode data connection for foo ("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :binary_data), :size)),
                    s(:str, " bytes)\r\n"))),
                s(:lvasgn, :conn,
                  s(:send,
                    s(:const, nil, :TCPSocket), :new,
                    s(:lvar, :host),
                    s(:lvar, :port))),
                s(:block,
                  s(:send,
                    s(:lvar, :binary_data), :scan,
                    s(:regexp,
                      s(:str, ".{1,1024}"),
                      s(:regopt, :m, :n))),
                  s(:args,
                    s(:arg, :s)),
                  s(:send,
                    s(:lvar, :conn), :print,
                    s(:lvar, :s))),
                s(:send,
                  s(:lvar, :conn), :shutdown,
                  s(:const,
                    s(:const, nil, :Socket), :SHUT_WR)),
                s(:send,
                  s(:lvar, :conn), :read),
                s(:send,
                  s(:lvar, :conn), :close),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "226 Transfer complete.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :read_timeout=,
                      s(:float, 0.2)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:block,
                      s(:send,
                        s(:const, nil, :Tempfile), :create,
                        s(:str, "foo"),
                        s(:hash,
                          s(:pair,
                            s(:sym, :external_encoding),
                            s(:str, "ASCII-8BIT")))),
                      s(:args,
                        s(:arg, :f)),
                      s(:begin,
                        s(:send,
                          s(:lvar, :f), :binmode),
                        s(:lvasgn, :buf,
                          s(:send,
                            s(:const, nil, :String), :new)),
                        s(:lvasgn, :res,
                          s(:block,
                            s(:send,
                              s(:lvar, :ftp), :getbinaryfile,
                              s(:str, "foo"),
                              s(:send,
                                s(:lvar, :f), :path)),
                            s(:args,
                              s(:arg, :s)),
                            s(:send,
                              s(:lvar, :buf), :<<,
                              s(:lvar, :s)))),
                        s(:send, nil, :assert_equal,
                          s(:nil),
                          s(:lvar, :res)),
                        s(:send, nil, :assert_equal,
                          s(:lvar, :binary_data),
                          s(:lvar, :buf)),
                        s(:send, nil, :assert_equal,
                          s(:const,
                            s(:const, nil, :Encoding), :ASCII_8BIT),
                          s(:send,
                            s(:lvar, :buf), :encoding)),
                        s(:send, nil, :assert_equal,
                          s(:lvar, :binary_data),
                          s(:send,
                            s(:lvar, :f), :read)))),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APORT "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "RETR foo\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_storbinary,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :binary_data,
            s(:send,
              s(:send,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:begin,
                        s(:irange,
                          s(:int, 0),
                          s(:int, 255))), :map),
                    s(:args,
                      s(:arg, :i)),
                    s(:send,
                      s(:lvar, :i), :chr)), :join), :*,
                s(:int, 4)), :*,
              s(:int, 3))),
          s(:lvasgn, :stored_data,
            s(:nil)),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:lvar, :line)),
                s(:lvasgn, :port_args,
                  s(:send,
                    s(:send,
                      s(:lvar, :line), :slice,
                      s(:regexp,
                        s(:str, "\\APORT (.*)"),
                        s(:regopt)),
                      s(:int, 1)), :split,
                    s(:regexp,
                      s(:str, ","),
                      s(:regopt)))),
                s(:lvasgn, :host,
                  s(:send,
                    s(:send,
                      s(:lvar, :port_args), :[],
                      s(:int, 0),
                      s(:int, 4)), :join,
                    s(:str, "."))),
                s(:lvasgn, :port,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :port_args), :[],
                          s(:int, 4),
                          s(:int, 2)), :map,
                        s(:block_pass,
                          s(:sym, :to_i))), :inject),
                    s(:args,
                      s(:arg, :x),
                      s(:arg, :y)),
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :x), :<<,
                          s(:int, 8))), :+,
                      s(:lvar, :y)))),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 PORT command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "150 Opening BINARY mode data connection for foo\r\n")),
                s(:lvasgn, :conn,
                  s(:send,
                    s(:const, nil, :TCPSocket), :new,
                    s(:lvar, :host),
                    s(:lvar, :port))),
                s(:lvasgn, :stored_data,
                  s(:send,
                    s(:lvar, :conn), :read)),
                s(:send,
                  s(:lvar, :conn), :close),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "226 Transfer complete.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :read_timeout=,
                      s(:float, 0.2)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send,
                      s(:lvar, :ftp), :storbinary,
                      s(:str, "STOR foo"),
                      s(:send,
                        s(:const, nil, :StringIO), :new,
                        s(:lvar, :binary_data)),
                      s(:int, 1024)),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :binary_data),
                      s(:lvar, :stored_data)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APORT "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "STOR foo\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_storbinary_fail,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :binary_data,
            s(:send,
              s(:send,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:begin,
                        s(:irange,
                          s(:int, 0),
                          s(:int, 255))), :map),
                    s(:args,
                      s(:arg, :i)),
                    s(:send,
                      s(:lvar, :i), :chr)), :join), :*,
                s(:int, 4)), :*,
              s(:int, 3))),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:lvar, :line)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 PORT command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "452 Requested file action aborted.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :read_timeout=,
                      s(:float, 0.2)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :Net), :FTPTempError)),
                      s(:args),
                      s(:send,
                        s(:lvar, :ftp), :storbinary,
                        s(:str, "STOR foo"),
                        s(:send,
                          s(:const, nil, :StringIO), :new,
                          s(:lvar, :binary_data)),
                        s(:int, 1024))),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APORT "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "STOR foo\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_retrlines,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :text_data,
            s(:send,
              s(:dstr,
                s(:str, "foo\n"),
                s(:str, "bar\n"),
                s(:str, "baz\n")), :gsub,
              s(:regexp,
                s(:str, "\\n"),
                s(:regopt)),
              s(:str, "\r\n"))),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to ASCII mode.\r\n")),
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:lvar, :line)),
                s(:lvasgn, :port_args,
                  s(:send,
                    s(:send,
                      s(:lvar, :line), :slice,
                      s(:regexp,
                        s(:str, "\\APORT (.*)"),
                        s(:regopt)),
                      s(:int, 1)), :split,
                    s(:regexp,
                      s(:str, ","),
                      s(:regopt)))),
                s(:lvasgn, :host,
                  s(:send,
                    s(:send,
                      s(:lvar, :port_args), :[],
                      s(:int, 0),
                      s(:int, 4)), :join,
                    s(:str, "."))),
                s(:lvasgn, :port,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :port_args), :[],
                          s(:int, 4),
                          s(:int, 2)), :map,
                        s(:block_pass,
                          s(:sym, :to_i))), :inject),
                    s(:args,
                      s(:arg, :x),
                      s(:arg, :y)),
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :x), :<<,
                          s(:int, 8))), :+,
                      s(:lvar, :y)))),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 PORT command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:dstr,
                    s(:str, "150 Opening TEXT mode data connection for foo ("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :text_data), :size)),
                    s(:str, " bytes)\r\n"))),
                s(:lvasgn, :conn,
                  s(:send,
                    s(:const, nil, :TCPSocket), :new,
                    s(:lvar, :host),
                    s(:lvar, :port))),
                s(:block,
                  s(:send,
                    s(:lvar, :text_data), :each_line),
                  s(:args,
                    s(:arg, :line)),
                  s(:send,
                    s(:lvar, :conn), :print,
                    s(:lvar, :line))),
                s(:send,
                  s(:lvar, :conn), :shutdown,
                  s(:const,
                    s(:const, nil, :Socket), :SHUT_WR)),
                s(:send,
                  s(:lvar, :conn), :read),
                s(:send,
                  s(:lvar, :conn), :close),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "226 Transfer complete.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:lvasgn, :buf,
                      s(:send,
                        s(:const, nil, :String), :new)),
                    s(:block,
                      s(:send,
                        s(:lvar, :ftp), :retrlines,
                        s(:str, "RETR foo")),
                      s(:args,
                        s(:arg, :line)),
                      s(:send,
                        s(:lvar, :buf), :<<,
                        s(:send,
                          s(:lvar, :line), :+,
                          s(:str, "\r\n")))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:lvar, :text_data), :bytesize),
                      s(:send,
                        s(:lvar, :buf), :bytesize)),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :text_data),
                      s(:lvar, :buf)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE A\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APORT "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "RETR foo\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_gettextfile,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :text_data,
            s(:send,
              s(:dstr,
                s(:str, "foo\n"),
                s(:str, "bar\n"),
                s(:str, "baz\n")), :gsub,
              s(:regexp,
                s(:str, "\\n"),
                s(:regopt)),
              s(:str, "\r\n"))),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to ASCII mode.\r\n")),
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:lvar, :line)),
                s(:lvasgn, :port_args,
                  s(:send,
                    s(:send,
                      s(:lvar, :line), :slice,
                      s(:regexp,
                        s(:str, "\\APORT (.*)"),
                        s(:regopt)),
                      s(:int, 1)), :split,
                    s(:regexp,
                      s(:str, ","),
                      s(:regopt)))),
                s(:lvasgn, :host,
                  s(:send,
                    s(:send,
                      s(:lvar, :port_args), :[],
                      s(:int, 0),
                      s(:int, 4)), :join,
                    s(:str, "."))),
                s(:lvasgn, :port,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :port_args), :[],
                          s(:int, 4),
                          s(:int, 2)), :map,
                        s(:block_pass,
                          s(:sym, :to_i))), :inject),
                    s(:args,
                      s(:arg, :x),
                      s(:arg, :y)),
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :x), :<<,
                          s(:int, 8))), :+,
                      s(:lvar, :y)))),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 PORT command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:dstr,
                    s(:str, "150 Opening TEXT mode data connection for foo ("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :text_data), :size)),
                    s(:str, " bytes)\r\n"))),
                s(:lvasgn, :conn,
                  s(:send,
                    s(:const, nil, :TCPSocket), :new,
                    s(:lvar, :host),
                    s(:lvar, :port))),
                s(:block,
                  s(:send,
                    s(:lvar, :text_data), :each_line),
                  s(:args,
                    s(:arg, :line)),
                  s(:send,
                    s(:lvar, :conn), :print,
                    s(:lvar, :line))),
                s(:send,
                  s(:lvar, :conn), :shutdown,
                  s(:const,
                    s(:const, nil, :Socket), :SHUT_WR)),
                s(:send,
                  s(:lvar, :conn), :read),
                s(:send,
                  s(:lvar, :conn), :close),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "226 Transfer complete.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:lvasgn, :buf,
                      s(:send,
                        s(:lvar, :ftp), :gettextfile,
                        s(:str, "foo"),
                        s(:nil))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:lvar, :text_data), :gsub,
                        s(:regexp,
                          s(:str, "\\r\\n"),
                          s(:regopt)),
                        s(:str, "\n")),
                      s(:lvar, :buf)),
                    s(:send, nil, :assert_equal,
                      s(:const,
                        s(:const, nil, :Encoding), :ASCII_8BIT),
                      s(:send,
                        s(:lvar, :buf), :encoding)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE A\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APORT "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "RETR foo\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_gettextfile_with_filename_and_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :text_data,
            s(:send,
              s(:dstr,
                s(:str, "foo\n"),
                s(:str, "bar\n"),
                s(:str, "baz\n")), :gsub,
              s(:regexp,
                s(:str, "\\n"),
                s(:regopt)),
              s(:str, "\r\n"))),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to ASCII mode.\r\n")),
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:lvar, :line)),
                s(:lvasgn, :port_args,
                  s(:send,
                    s(:send,
                      s(:lvar, :line), :slice,
                      s(:regexp,
                        s(:str, "\\APORT (.*)"),
                        s(:regopt)),
                      s(:int, 1)), :split,
                    s(:regexp,
                      s(:str, ","),
                      s(:regopt)))),
                s(:lvasgn, :host,
                  s(:send,
                    s(:send,
                      s(:lvar, :port_args), :[],
                      s(:int, 0),
                      s(:int, 4)), :join,
                    s(:str, "."))),
                s(:lvasgn, :port,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :port_args), :[],
                          s(:int, 4),
                          s(:int, 2)), :map,
                        s(:block_pass,
                          s(:sym, :to_i))), :inject),
                    s(:args,
                      s(:arg, :x),
                      s(:arg, :y)),
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :x), :<<,
                          s(:int, 8))), :+,
                      s(:lvar, :y)))),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 PORT command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:dstr,
                    s(:str, "150 Opening TEXT mode data connection for foo ("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :text_data), :size)),
                    s(:str, " bytes)\r\n"))),
                s(:lvasgn, :conn,
                  s(:send,
                    s(:const, nil, :TCPSocket), :new,
                    s(:lvar, :host),
                    s(:lvar, :port))),
                s(:block,
                  s(:send,
                    s(:lvar, :text_data), :each_line),
                  s(:args,
                    s(:arg, :line)),
                  s(:send,
                    s(:lvar, :conn), :print,
                    s(:lvar, :line))),
                s(:send,
                  s(:lvar, :conn), :shutdown,
                  s(:const,
                    s(:const, nil, :Socket), :SHUT_WR)),
                s(:send,
                  s(:lvar, :conn), :read),
                s(:send,
                  s(:lvar, :conn), :close),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "226 Transfer complete.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:block,
                      s(:send,
                        s(:const, nil, :Tempfile), :create,
                        s(:str, "foo"),
                        s(:hash,
                          s(:pair,
                            s(:sym, :external_encoding),
                            s(:str, "ascii-8bit")))),
                      s(:args,
                        s(:arg, :f)),
                      s(:begin,
                        s(:lvasgn, :buf,
                          s(:send,
                            s(:const, nil, :String), :new)),
                        s(:lvasgn, :res,
                          s(:block,
                            s(:send,
                              s(:lvar, :ftp), :gettextfile,
                              s(:str, "foo"),
                              s(:send,
                                s(:lvar, :f), :path)),
                            s(:args,
                              s(:arg, :s)),
                            s(:send,
                              s(:send,
                                s(:lvar, :buf), :<<,
                                s(:lvar, :s)), :<<,
                              s(:str, "\n")))),
                        s(:send, nil, :assert_equal,
                          s(:nil),
                          s(:lvar, :res)),
                        s(:send, nil, :assert_equal,
                          s(:send,
                            s(:lvar, :text_data), :gsub,
                            s(:regexp,
                              s(:str, "\\r\\n"),
                              s(:regopt)),
                            s(:str, "\n")),
                          s(:lvar, :buf)),
                        s(:send, nil, :assert_equal,
                          s(:const,
                            s(:const, nil, :Encoding), :ASCII_8BIT),
                          s(:send,
                            s(:lvar, :buf), :encoding)),
                        s(:send, nil, :assert_equal,
                          s(:lvar, :buf),
                          s(:send,
                            s(:lvar, :f), :read)))),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE A\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APORT "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "RETR foo\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_getbinaryfile_in_list,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :binary_data,
            s(:send,
              s(:block,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 0),
                      s(:int, 255))), :map),
                s(:args,
                  s(:arg, :i)),
                s(:send,
                  s(:lvar, :i), :chr)), :join)),
          s(:lvasgn, :list_lines,
            s(:array,
              s(:str, "-rw-r--r--    1 0        0               0 Mar 30 11:22 foo.txt"),
              s(:str, "-rw-r--r--    1 0        0               0 Mar 30 11:22 bar.txt"),
              s(:str, "-rw-r--r--    1 0        0               0 Mar 30 11:22 baz.bin"))),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to ASCII mode.\r\n")),
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:lvar, :line)),
                s(:lvasgn, :port_args,
                  s(:send,
                    s(:send,
                      s(:lvar, :line), :slice,
                      s(:regexp,
                        s(:str, "\\APORT (.*)"),
                        s(:regopt)),
                      s(:int, 1)), :split,
                    s(:regexp,
                      s(:str, ","),
                      s(:regopt)))),
                s(:lvasgn, :host,
                  s(:send,
                    s(:send,
                      s(:lvar, :port_args), :[],
                      s(:int, 0),
                      s(:int, 4)), :join,
                    s(:str, "."))),
                s(:lvasgn, :port,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :port_args), :[],
                          s(:int, 4),
                          s(:int, 2)), :map,
                        s(:block_pass,
                          s(:sym, :to_i))), :inject),
                    s(:args,
                      s(:arg, :x),
                      s(:arg, :y)),
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :x), :<<,
                          s(:int, 8))), :+,
                      s(:lvar, :y)))),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 PORT command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "150 Here comes the directory listing.\r\n")),
                s(:lvasgn, :conn,
                  s(:send,
                    s(:const, nil, :TCPSocket), :new,
                    s(:lvar, :host),
                    s(:lvar, :port))),
                s(:block,
                  s(:send,
                    s(:lvar, :list_lines), :each_with_index),
                  s(:args,
                    s(:arg, :l),
                    s(:arg, :i)),
                  s(:send,
                    s(:lvar, :conn), :print,
                    s(:lvar, :l),
                    s(:str, "\r\n"))),
                s(:send,
                  s(:lvar, :conn), :close),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "226 Directory send OK.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:lvar, :line)),
                s(:lvasgn, :port_args,
                  s(:send,
                    s(:send,
                      s(:lvar, :line), :slice,
                      s(:regexp,
                        s(:str, "\\APORT (.*)"),
                        s(:regopt)),
                      s(:int, 1)), :split,
                    s(:regexp,
                      s(:str, ","),
                      s(:regopt)))),
                s(:lvasgn, :host,
                  s(:send,
                    s(:send,
                      s(:lvar, :port_args), :[],
                      s(:int, 0),
                      s(:int, 4)), :join,
                    s(:str, "."))),
                s(:lvasgn, :port,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :port_args), :[],
                          s(:int, 4),
                          s(:int, 2)), :map,
                        s(:block_pass,
                          s(:sym, :to_i))), :inject),
                    s(:args,
                      s(:arg, :x),
                      s(:arg, :y)),
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :x), :<<,
                          s(:int, 8))), :+,
                      s(:lvar, :y)))),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 PORT command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:dstr,
                    s(:str, "150 Opening BINARY mode data connection for foo ("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :binary_data), :size)),
                    s(:str, " bytes)\r\n"))),
                s(:lvasgn, :conn,
                  s(:send,
                    s(:const, nil, :TCPSocket), :new,
                    s(:lvar, :host),
                    s(:lvar, :port))),
                s(:send,
                  s(:lvar, :conn), :print,
                  s(:lvar, :binary_data)),
                s(:send,
                  s(:lvar, :conn), :close),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "226 Transfer complete.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:block,
                      s(:send,
                        s(:lvar, :ftp), :list),
                      s(:args,
                        s(:arg, :line)),
                      s(:begin,
                        s(:lvasgn, :file,
                          s(:send,
                            s(:lvar, :line), :slice,
                            s(:regexp,
                              s(:str, "(\\S*\\.bin)\\z"),
                              s(:regopt)))),
                        s(:if,
                          s(:lvar, :file),
                          s(:begin,
                            s(:lvasgn, :data,
                              s(:send,
                                s(:lvar, :ftp), :getbinaryfile,
                                s(:lvar, :file),
                                s(:nil))),
                            s(:send, nil, :assert_equal,
                              s(:lvar, :binary_data),
                              s(:lvar, :data))), nil))),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE A\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APORT "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "LIST\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APORT "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "RETR baz.bin\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_abort,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "225 No transfer to ABOR.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send,
                      s(:lvar, :ftp), :abort),
                    s(:send, nil, :assert_equal,
                      s(:str, "ABOR\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_status,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "211 End of status\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :read_timeout=,
                      s(:float, 0.2)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send,
                      s(:lvar, :ftp), :status),
                    s(:send, nil, :assert_equal,
                      s(:str, "STAT\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_pathnames,
        s(:args),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "pathname")),
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server,
                s(:float, 0.2)),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "257 'foo' directory created.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "250 CWD command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "250 CWD command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "250 RMD command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "213 test.txt  Fri, 11 Jan 2013 11:20:41 -0500.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "213 test.txt  16.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "350 File exists, ready for destination name\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "250 RNTO command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "250 DELE command successful.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :dir,
                      s(:send,
                        s(:const, nil, :Pathname), :new,
                        s(:str, "foo"))),
                    s(:lvasgn, :file,
                      s(:send,
                        s(:const, nil, :Pathname), :new,
                        s(:str, "test.txt"))),
                    s(:lvasgn, :file2,
                      s(:send,
                        s(:const, nil, :Pathname), :new,
                        s(:str, "test2.txt"))),
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send,
                      s(:lvar, :ftp), :mkdir,
                      s(:lvar, :dir)),
                    s(:send,
                      s(:lvar, :ftp), :chdir,
                      s(:lvar, :dir)),
                    s(:send,
                      s(:lvar, :ftp), :chdir,
                      s(:str, "..")),
                    s(:send,
                      s(:lvar, :ftp), :rmdir,
                      s(:lvar, :dir)),
                    s(:send,
                      s(:lvar, :ftp), :mdtm,
                      s(:lvar, :file)),
                    s(:send,
                      s(:lvar, :ftp), :size,
                      s(:lvar, :file)),
                    s(:send,
                      s(:lvar, :ftp), :rename,
                      s(:lvar, :file),
                      s(:lvar, :file2)),
                    s(:send,
                      s(:lvar, :ftp), :delete,
                      s(:lvar, :file)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\ATYPE "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AMKD "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\ACWD "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\ACDUP"),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\ARMD "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AMDTM "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\ASIZE "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\ARNFR "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\ARNTO "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\ADELE "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_getmultiline,
        s(:args),
        s(:begin,
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "123- foo\r\n")),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "bar\r\n")),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, " 123 baz\r\n")),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "123 quux\r\n")),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "123 foo\r\n")),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "foo\r\n")),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send, nil, :assert_equal,
                      s(:str, "123- foo\nbar\n 123 baz\n123 quux\n"),
                      s(:send,
                        s(:lvar, :ftp), :send,
                        s(:sym, :getmultiline))),
                    s(:send, nil, :assert_equal,
                      s(:str, "123 foo\n"),
                      s(:send,
                        s(:lvar, :ftp), :send,
                        s(:sym, :getmultiline))),
                    s(:send, nil, :assert_equal,
                      s(:str, "foo\n"),
                      s(:send,
                        s(:lvar, :ftp), :send,
                        s(:sym, :getmultiline))),
                    s(:send, nil, :assert_equal,
                      s(:str, "\n"),
                      s(:send,
                        s(:lvar, :ftp), :send,
                        s(:sym, :getmultiline)))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_size,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "213 12345\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send, nil, :assert_equal,
                      s(:int, 12345),
                      s(:send,
                        s(:lvar, :ftp), :size,
                        s(:str, "foo.txt"))),
                    s(:send, nil, :assert_match,
                      s(:str, "SIZE foo.txt\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_mdtm,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "213 20150910161739\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send, nil, :assert_equal,
                      s(:str, "20150910161739"),
                      s(:send,
                        s(:lvar, :ftp), :mdtm,
                        s(:str, "foo.txt"))),
                    s(:send, nil, :assert_match,
                      s(:str, "MDTM foo.txt\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_mtime,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "213 20150910161739\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "213 20150910161739\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "213 20150910161739.123456\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "213 20150910161739.123\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "213 20150910161739.123456789\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "213 2015091016173\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:const, nil, :Time), :utc,
                        s(:int, 2015),
                        s(:int, 9),
                        s(:int, 10),
                        s(:int, 16),
                        s(:int, 17),
                        s(:int, 39)),
                      s(:send,
                        s(:lvar, :ftp), :mtime,
                        s(:str, "foo.txt"))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:const, nil, :Time), :local,
                        s(:int, 2015),
                        s(:int, 9),
                        s(:int, 10),
                        s(:int, 16),
                        s(:int, 17),
                        s(:int, 39)),
                      s(:send,
                        s(:lvar, :ftp), :mtime,
                        s(:str, "foo.txt"),
                        s(:true))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:const, nil, :Time), :utc,
                        s(:int, 2015),
                        s(:int, 9),
                        s(:int, 10),
                        s(:int, 16),
                        s(:int, 17),
                        s(:int, 39),
                        s(:int, 123456)),
                      s(:send,
                        s(:lvar, :ftp), :mtime,
                        s(:str, "bar.txt"))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:const, nil, :Time), :utc,
                        s(:int, 2015),
                        s(:int, 9),
                        s(:int, 10),
                        s(:int, 16),
                        s(:int, 17),
                        s(:int, 39),
                        s(:int, 123000)),
                      s(:send,
                        s(:lvar, :ftp), :mtime,
                        s(:str, "bar.txt"))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:const, nil, :Time), :utc,
                        s(:int, 2015),
                        s(:int, 9),
                        s(:int, 10),
                        s(:int, 16),
                        s(:int, 17),
                        s(:int, 39),
                        s(:send, nil, :Rational,
                          s(:int, 123456789),
                          s(:int, 1000))),
                      s(:send,
                        s(:lvar, :ftp), :mtime,
                        s(:str, "bar.txt"))),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :Net), :FTPProtoError)),
                      s(:args),
                      s(:send,
                        s(:lvar, :ftp), :mtime,
                        s(:str, "quux.txt"))),
                    s(:send, nil, :assert_match,
                      s(:str, "MDTM foo.txt\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:str, "MDTM foo.txt\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:str, "MDTM bar.txt\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:str, "MDTM bar.txt\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:str, "MDTM bar.txt\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:str, "MDTM quux.txt\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_system,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "215 UNIX Type: L8\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send, nil, :assert_equal,
                      s(:str, "UNIX Type: L8"),
                      s(:send,
                        s(:lvar, :ftp), :system)),
                    s(:send, nil, :assert_match,
                      s(:str, "SYST\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_mlst,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "250- Listing foo\r\n")),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, " Type=file;Unique=FC00U1E554A;Size=1234567;Modify=20131220035929;Perm=r;Unix.mode=0644;Unix.owner=122;Unix.group=0;Unix.ctime=20131220120140;Unix.atime=20131220131139; /foo\r\n")),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "250 End\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "250 Malformed response\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "250- Listing foo\r\n")),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "\r\n")),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "250 End\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "250- Listing foo\r\n")),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, " abc /foo\r\n")),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "250 End\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:lvasgn, :entry,
                      s(:send,
                        s(:lvar, :ftp), :mlst,
                        s(:str, "foo"))),
                    s(:send, nil, :assert_equal,
                      s(:str, "/foo"),
                      s(:send,
                        s(:lvar, :entry), :pathname)),
                    s(:send, nil, :assert_equal,
                      s(:str, "file"),
                      s(:send,
                        s(:send,
                          s(:lvar, :entry), :facts), :[],
                        s(:str, "type"))),
                    s(:send, nil, :assert_equal,
                      s(:str, "FC00U1E554A"),
                      s(:send,
                        s(:send,
                          s(:lvar, :entry), :facts), :[],
                        s(:str, "unique"))),
                    s(:send, nil, :assert_equal,
                      s(:int, 1234567),
                      s(:send,
                        s(:send,
                          s(:lvar, :entry), :facts), :[],
                        s(:str, "size"))),
                    s(:send, nil, :assert_equal,
                      s(:str, "r"),
                      s(:send,
                        s(:send,
                          s(:lvar, :entry), :facts), :[],
                        s(:str, "perm"))),
                    s(:send, nil, :assert_equal,
                      s(:int, 420),
                      s(:send,
                        s(:send,
                          s(:lvar, :entry), :facts), :[],
                        s(:str, "unix.mode"))),
                    s(:send, nil, :assert_equal,
                      s(:int, 122),
                      s(:send,
                        s(:send,
                          s(:lvar, :entry), :facts), :[],
                        s(:str, "unix.owner"))),
                    s(:send, nil, :assert_equal,
                      s(:int, 0),
                      s(:send,
                        s(:send,
                          s(:lvar, :entry), :facts), :[],
                        s(:str, "unix.group"))),
                    s(:lvasgn, :modify,
                      s(:send,
                        s(:send,
                          s(:lvar, :entry), :facts), :[],
                        s(:str, "modify"))),
                    s(:send, nil, :assert_equal,
                      s(:int, 2013),
                      s(:send,
                        s(:lvar, :modify), :year)),
                    s(:send, nil, :assert_equal,
                      s(:int, 12),
                      s(:send,
                        s(:lvar, :modify), :month)),
                    s(:send, nil, :assert_equal,
                      s(:int, 20),
                      s(:send,
                        s(:lvar, :modify), :day)),
                    s(:send, nil, :assert_equal,
                      s(:int, 3),
                      s(:send,
                        s(:lvar, :modify), :hour)),
                    s(:send, nil, :assert_equal,
                      s(:int, 59),
                      s(:send,
                        s(:lvar, :modify), :min)),
                    s(:send, nil, :assert_equal,
                      s(:int, 29),
                      s(:send,
                        s(:lvar, :modify), :sec)),
                    s(:send, nil, :assert_equal,
                      s(:true),
                      s(:send,
                        s(:lvar, :modify), :utc?)),
                    s(:lvasgn, :ctime,
                      s(:send,
                        s(:send,
                          s(:lvar, :entry), :facts), :[],
                        s(:str, "unix.ctime"))),
                    s(:send, nil, :assert_equal,
                      s(:int, 12),
                      s(:send,
                        s(:lvar, :ctime), :hour)),
                    s(:send, nil, :assert_equal,
                      s(:int, 1),
                      s(:send,
                        s(:lvar, :ctime), :min)),
                    s(:send, nil, :assert_equal,
                      s(:int, 40),
                      s(:send,
                        s(:lvar, :ctime), :sec)),
                    s(:lvasgn, :atime,
                      s(:send,
                        s(:send,
                          s(:lvar, :entry), :facts), :[],
                        s(:str, "unix.atime"))),
                    s(:send, nil, :assert_equal,
                      s(:int, 13),
                      s(:send,
                        s(:lvar, :atime), :hour)),
                    s(:send, nil, :assert_equal,
                      s(:int, 11),
                      s(:send,
                        s(:lvar, :atime), :min)),
                    s(:send, nil, :assert_equal,
                      s(:int, 39),
                      s(:send,
                        s(:lvar, :atime), :sec)),
                    s(:send, nil, :assert_match,
                      s(:str, "MLST foo\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :Net), :FTPProtoError)),
                      s(:args),
                      s(:send,
                        s(:lvar, :ftp), :mlst,
                        s(:str, "foo"))),
                    s(:send, nil, :assert_match,
                      s(:str, "MLST foo\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :Net), :FTPProtoError)),
                      s(:args),
                      s(:send,
                        s(:lvar, :ftp), :mlst,
                        s(:str, "foo"))),
                    s(:send, nil, :assert_match,
                      s(:str, "MLST foo\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:lvasgn, :entry,
                      s(:send,
                        s(:lvar, :ftp), :mlst,
                        s(:str, "foo"))),
                    s(:send, nil, :assert_equal,
                      s(:str, "/foo"),
                      s(:send,
                        s(:lvar, :entry), :pathname)),
                    s(:send, nil, :assert_match,
                      s(:str, "MLST foo\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_mlsd,
        s(:args),
        s(:begin,
          s(:lvasgn, :commands,
            s(:array)),
          s(:lvasgn, :entry_lines,
            s(:array,
              s(:str, "Type=file;Unique=FC00U1E554A;Size=1234567;Modify=20131220035929.123456;Perm=r; foo bar"),
              s(:str, "Type=cdir;Unique=FC00U1E554B;Modify=20131220035929;Perm=flcdmpe; ."),
              s(:str, "Type=pdir;Unique=FC00U1E554C;Modify=20131220035929;Perm=flcdmpe; .."))),
          s(:lvasgn, :server,
            s(:block,
              s(:send, nil, :create_ftp_server),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "220 (test_ftp).\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "331 Please specify the password.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "230 Login successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to ASCII mode.\r\n")),
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:lvar, :line)),
                s(:lvasgn, :port_args,
                  s(:send,
                    s(:send,
                      s(:lvar, :line), :slice,
                      s(:regexp,
                        s(:str, "\\APORT (.*)"),
                        s(:regopt)),
                      s(:int, 1)), :split,
                    s(:regexp,
                      s(:str, ","),
                      s(:regopt)))),
                s(:lvasgn, :host,
                  s(:send,
                    s(:send,
                      s(:lvar, :port_args), :[],
                      s(:int, 0),
                      s(:int, 4)), :join,
                    s(:str, "."))),
                s(:lvasgn, :port,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :port_args), :[],
                          s(:int, 4),
                          s(:int, 2)), :map,
                        s(:block_pass,
                          s(:sym, :to_i))), :inject),
                    s(:args,
                      s(:arg, :x),
                      s(:arg, :y)),
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :x), :<<,
                          s(:int, 8))), :+,
                      s(:lvar, :y)))),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 PORT command successful.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "150 Here comes the directory listing.\r\n")),
                s(:kwbegin,
                  s(:ensure,
                    s(:rescue,
                      s(:begin,
                        s(:lvasgn, :conn,
                          s(:send,
                            s(:const, nil, :TCPSocket), :new,
                            s(:lvar, :host),
                            s(:lvar, :port))),
                        s(:block,
                          s(:send,
                            s(:lvar, :entry_lines), :each),
                          s(:args,
                            s(:arg, :line)),
                          s(:send,
                            s(:lvar, :conn), :print,
                            s(:lvar, :line),
                            s(:str, "\r\n")))),
                      s(:resbody,
                        s(:array,
                          s(:const,
                            s(:const, nil, :Errno), :EPIPE)), nil, nil), nil),
                    s(:begin,
                      s(:send, nil, :assert_nil,
                        s(:gvar, :$!)),
                      s(:send,
                        s(:lvar, :conn), :close)))),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "226 Directory send OK.\r\n")),
                s(:send,
                  s(:lvar, :commands), :push,
                  s(:send,
                    s(:lvar, :sock), :gets)),
                s(:send,
                  s(:lvar, :sock), :print,
                  s(:str, "200 Switching to Binary mode.\r\n"))))),
          s(:kwbegin,
            s(:ensure,
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ftp,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :FTP), :new)),
                    s(:send,
                      s(:lvar, :ftp), :connect,
                      s(:const, nil, :SERVER_ADDR),
                      s(:send,
                        s(:lvar, :server), :port)),
                    s(:send,
                      s(:lvar, :ftp), :login),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\AUSER "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APASS "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:lvasgn, :entries,
                      s(:send,
                        s(:lvar, :ftp), :mlsd,
                        s(:str, "/"))),
                    s(:send, nil, :assert_equal,
                      s(:int, 3),
                      s(:send,
                        s(:lvar, :entries), :size)),
                    s(:send, nil, :assert_equal,
                      s(:str, "foo bar"),
                      s(:send,
                        s(:send,
                          s(:lvar, :entries), :[],
                          s(:int, 0)), :pathname)),
                    s(:send, nil, :assert_equal,
                      s(:str, "."),
                      s(:send,
                        s(:send,
                          s(:lvar, :entries), :[],
                          s(:int, 1)), :pathname)),
                    s(:send, nil, :assert_equal,
                      s(:str, ".."),
                      s(:send,
                        s(:send,
                          s(:lvar, :entries), :[],
                          s(:int, 2)), :pathname)),
                    s(:send, nil, :assert_equal,
                      s(:str, "file"),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :entries), :[],
                            s(:int, 0)), :facts), :[],
                        s(:str, "type"))),
                    s(:send, nil, :assert_equal,
                      s(:str, "cdir"),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :entries), :[],
                            s(:int, 1)), :facts), :[],
                        s(:str, "type"))),
                    s(:send, nil, :assert_equal,
                      s(:str, "pdir"),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :entries), :[],
                            s(:int, 2)), :facts), :[],
                        s(:str, "type"))),
                    s(:send, nil, :assert_equal,
                      s(:str, "flcdmpe"),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :entries), :[],
                            s(:int, 1)), :facts), :[],
                        s(:str, "perm"))),
                    s(:lvasgn, :modify,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :entries), :[],
                            s(:int, 0)), :facts), :[],
                        s(:str, "modify"))),
                    s(:send, nil, :assert_equal,
                      s(:int, 2013),
                      s(:send,
                        s(:lvar, :modify), :year)),
                    s(:send, nil, :assert_equal,
                      s(:int, 12),
                      s(:send,
                        s(:lvar, :modify), :month)),
                    s(:send, nil, :assert_equal,
                      s(:int, 20),
                      s(:send,
                        s(:lvar, :modify), :day)),
                    s(:send, nil, :assert_equal,
                      s(:int, 3),
                      s(:send,
                        s(:lvar, :modify), :hour)),
                    s(:send, nil, :assert_equal,
                      s(:int, 59),
                      s(:send,
                        s(:lvar, :modify), :min)),
                    s(:send, nil, :assert_equal,
                      s(:int, 29),
                      s(:send,
                        s(:lvar, :modify), :sec)),
                    s(:send, nil, :assert_equal,
                      s(:int, 123456),
                      s(:send,
                        s(:lvar, :modify), :usec)),
                    s(:send, nil, :assert_equal,
                      s(:true),
                      s(:send,
                        s(:lvar, :modify), :utc?)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE A\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "\\APORT "),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_match,
                      s(:str, "MLSD /\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:str, "TYPE I\r\n"),
                      s(:send,
                        s(:lvar, :commands), :shift)),
                    s(:send, nil, :assert_equal,
                      s(:nil),
                      s(:send,
                        s(:lvar, :commands), :shift))),
                  s(:if,
                    s(:lvar, :ftp),
                    s(:send,
                      s(:lvar, :ftp), :close), nil))),
              s(:send,
                s(:lvar, :server), :close))))),
      s(:def, :test_parse257,
        s(:args),
        s(:begin,
          s(:lvasgn, :ftp,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :FTP), :new)),
          s(:send, nil, :assert_equal,
            s(:str, "/foo/bar"),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse257),
              s(:str, "257 \"/foo/bar\" directory created"))),
          s(:send, nil, :assert_equal,
            s(:str, "/foo/bar\"baz"),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse257),
              s(:str, "257 \"/foo/bar\"\"baz\" directory created"))),
          s(:send, nil, :assert_equal,
            s(:str, "/foo/x\"y\"z"),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse257),
              s(:str, "257 \"/foo/x\"\"y\"\"z\" directory created"))),
          s(:send, nil, :assert_equal,
            s(:str, "/foo/bar"),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse257),
              s(:str, "257 \"/foo/bar\" \"comment\""))),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse257),
              s(:str, "257 \"\" directory created"))),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse257),
              s(:str, "257 directory created"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Net), :FTPReplyError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :parse257),
              s(:str, "500 Syntax error"))))),
      s(:def, :test_putline_reject_crlf,
        s(:args),
        s(:begin,
          s(:lvasgn, :ftp,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :FTP), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :putline),
              s(:str, "\r"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :ftp), :send,
              s(:sym, :putline),
              s(:str, "\n"))))),
      s(:send, nil, :private),
      s(:def, :create_ftp_server,
        s(:args,
          s(:optarg, :sleep_time,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :server,
            s(:send,
              s(:const, nil, :TCPServer), :new,
              s(:const, nil, :SERVER_ADDR),
              s(:int, 0))),
          s(:ivasgn, :@thread,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:if,
                  s(:lvar, :sleep_time),
                  s(:send, nil, :sleep,
                    s(:lvar, :sleep_time)), nil),
                s(:lvasgn, :sock,
                  s(:send,
                    s(:lvar, :server), :accept)),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:send,
                        s(:lvar, :sock), :setsockopt,
                        s(:const,
                          s(:const, nil, :Socket), :SOL_SOCKET),
                        s(:const,
                          s(:const, nil, :Socket), :SO_OOBINLINE),
                        s(:int, 1)),
                      s(:yield,
                        s(:lvar, :sock)),
                      s(:send,
                        s(:lvar, :sock), :shutdown,
                        s(:const,
                          s(:const, nil, :Socket), :SHUT_WR)),
                      s(:if,
                        s(:send,
                          s(:lvar, :sock), :eof?), nil,
                        s(:send,
                          s(:lvar, :sock), :read))),
                    s(:send,
                      s(:lvar, :sock), :close)))))),
          s(:defs,
            s(:lvar, :server), :port,
            s(:args),
            s(:send,
              s(:send, nil, :addr), :[],
              s(:int, 1))),
          s(:return,
            s(:lvar, :server)))))))
