s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "cgi")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:send, nil, :require_relative,
    s(:str, "update_env")),
  s(:class,
    s(:const, nil, :CGITagHelperTest),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :UpdateEnv)),
      s(:def, :setup,
        s(:args),
        s(:ivasgn, :@environ,
          s(:hash))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :ENV), :update,
            s(:ivar, :@environ)),
          s(:gvasgn, :$stdout,
            s(:const, nil, :STDOUT)))),
      s(:def, :test_cgi_tag_helper_html3,
        s(:args),
        s(:begin,
          s(:send, nil, :update_env,
            s(:hash,
              s(:pair,
                s(:str, "REQUEST_METHOD"),
                s(:str, "GET")))),
          s(:lvasgn, :cgi,
            s(:send,
              s(:const, nil, :CGI), :new,
              s(:str, "html3"))),
          s(:send, nil, :assert_equal,
            s(:str, "<A HREF=\"\"></A>"),
            s(:send,
              s(:lvar, :cgi), :a)),
          s(:send, nil, :assert_equal,
            s(:str, "<A HREF=\"bar\"></A>"),
            s(:send,
              s(:lvar, :cgi), :a,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<A HREF=\"\">foo</A>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :a),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<A HREF=\"bar\">foo</A>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :a,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<TT></TT>"),
            s(:send,
              s(:lvar, :cgi), :tt)),
          s(:send, nil, :assert_equal,
            s(:str, "<TT></TT>"),
            s(:send,
              s(:lvar, :cgi), :tt,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<TT>foo</TT>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :tt),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<TT>foo</TT>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :tt,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<I></I>"),
            s(:send,
              s(:lvar, :cgi), :i)),
          s(:send, nil, :assert_equal,
            s(:str, "<I></I>"),
            s(:send,
              s(:lvar, :cgi), :i,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<I>foo</I>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :i),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<I>foo</I>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :i,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<B></B>"),
            s(:send,
              s(:lvar, :cgi), :b)),
          s(:send, nil, :assert_equal,
            s(:str, "<B></B>"),
            s(:send,
              s(:lvar, :cgi), :b,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<B>foo</B>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :b),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<B>foo</B>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :b,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<U></U>"),
            s(:send,
              s(:lvar, :cgi), :u)),
          s(:send, nil, :assert_equal,
            s(:str, "<U></U>"),
            s(:send,
              s(:lvar, :cgi), :u,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<U>foo</U>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :u),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<U>foo</U>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :u,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<STRIKE></STRIKE>"),
            s(:send,
              s(:lvar, :cgi), :strike)),
          s(:send, nil, :assert_equal,
            s(:str, "<STRIKE></STRIKE>"),
            s(:send,
              s(:lvar, :cgi), :strike,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<STRIKE>foo</STRIKE>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :strike),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<STRIKE>foo</STRIKE>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :strike,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<BIG></BIG>"),
            s(:send,
              s(:lvar, :cgi), :big)),
          s(:send, nil, :assert_equal,
            s(:str, "<BIG></BIG>"),
            s(:send,
              s(:lvar, :cgi), :big,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<BIG>foo</BIG>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :big),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<BIG>foo</BIG>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :big,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<SMALL></SMALL>"),
            s(:send,
              s(:lvar, :cgi), :small)),
          s(:send, nil, :assert_equal,
            s(:str, "<SMALL></SMALL>"),
            s(:send,
              s(:lvar, :cgi), :small,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<SMALL>foo</SMALL>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :small),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<SMALL>foo</SMALL>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :small,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<SUB></SUB>"),
            s(:send,
              s(:lvar, :cgi), :sub)),
          s(:send, nil, :assert_equal,
            s(:str, "<SUB></SUB>"),
            s(:send,
              s(:lvar, :cgi), :sub,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<SUB>foo</SUB>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :sub),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<SUB>foo</SUB>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :sub,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<SUP></SUP>"),
            s(:send,
              s(:lvar, :cgi), :sup)),
          s(:send, nil, :assert_equal,
            s(:str, "<SUP></SUP>"),
            s(:send,
              s(:lvar, :cgi), :sup,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<SUP>foo</SUP>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :sup),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<SUP>foo</SUP>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :sup,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<EM></EM>"),
            s(:send,
              s(:lvar, :cgi), :em)),
          s(:send, nil, :assert_equal,
            s(:str, "<EM></EM>"),
            s(:send,
              s(:lvar, :cgi), :em,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<EM>foo</EM>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :em),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<EM>foo</EM>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :em,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<STRONG></STRONG>"),
            s(:send,
              s(:lvar, :cgi), :strong)),
          s(:send, nil, :assert_equal,
            s(:str, "<STRONG></STRONG>"),
            s(:send,
              s(:lvar, :cgi), :strong,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<STRONG>foo</STRONG>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :strong),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<STRONG>foo</STRONG>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :strong,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<DFN></DFN>"),
            s(:send,
              s(:lvar, :cgi), :dfn)),
          s(:send, nil, :assert_equal,
            s(:str, "<DFN></DFN>"),
            s(:send,
              s(:lvar, :cgi), :dfn,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<DFN>foo</DFN>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :dfn),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<DFN>foo</DFN>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :dfn,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<CODE></CODE>"),
            s(:send,
              s(:lvar, :cgi), :code)),
          s(:send, nil, :assert_equal,
            s(:str, "<CODE></CODE>"),
            s(:send,
              s(:lvar, :cgi), :code,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<CODE>foo</CODE>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :code),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<CODE>foo</CODE>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :code,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<SAMP></SAMP>"),
            s(:send,
              s(:lvar, :cgi), :samp)),
          s(:send, nil, :assert_equal,
            s(:str, "<SAMP></SAMP>"),
            s(:send,
              s(:lvar, :cgi), :samp,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<SAMP>foo</SAMP>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :samp),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<SAMP>foo</SAMP>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :samp,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<KBD></KBD>"),
            s(:send,
              s(:lvar, :cgi), :kbd)),
          s(:send, nil, :assert_equal,
            s(:str, "<KBD></KBD>"),
            s(:send,
              s(:lvar, :cgi), :kbd,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<KBD>foo</KBD>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :kbd),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<KBD>foo</KBD>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :kbd,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<VAR></VAR>"),
            s(:send,
              s(:lvar, :cgi), :var)),
          s(:send, nil, :assert_equal,
            s(:str, "<VAR></VAR>"),
            s(:send,
              s(:lvar, :cgi), :var,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<VAR>foo</VAR>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :var),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<VAR>foo</VAR>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :var,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<CITE></CITE>"),
            s(:send,
              s(:lvar, :cgi), :cite)),
          s(:send, nil, :assert_equal,
            s(:str, "<CITE></CITE>"),
            s(:send,
              s(:lvar, :cgi), :cite,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<CITE>foo</CITE>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :cite),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<CITE>foo</CITE>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :cite,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<FONT></FONT>"),
            s(:send,
              s(:lvar, :cgi), :font)),
          s(:send, nil, :assert_equal,
            s(:str, "<FONT></FONT>"),
            s(:send,
              s(:lvar, :cgi), :font,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<FONT>foo</FONT>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :font),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<FONT>foo</FONT>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :font,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<ADDRESS></ADDRESS>"),
            s(:send,
              s(:lvar, :cgi), :address)),
          s(:send, nil, :assert_equal,
            s(:str, "<ADDRESS></ADDRESS>"),
            s(:send,
              s(:lvar, :cgi), :address,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<ADDRESS>foo</ADDRESS>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :address),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<ADDRESS>foo</ADDRESS>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :address,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<DIV></DIV>"),
            s(:send,
              s(:lvar, :cgi), :div)),
          s(:send, nil, :assert_equal,
            s(:str, "<DIV></DIV>"),
            s(:send,
              s(:lvar, :cgi), :div,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<DIV>foo</DIV>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :div),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<DIV>foo</DIV>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :div,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<CENTER></CENTER>"),
            s(:send,
              s(:lvar, :cgi), :center)),
          s(:send, nil, :assert_equal,
            s(:str, "<CENTER></CENTER>"),
            s(:send,
              s(:lvar, :cgi), :center,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<CENTER>foo</CENTER>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :center),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<CENTER>foo</CENTER>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :center,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<MAP></MAP>"),
            s(:send,
              s(:lvar, :cgi), :map)),
          s(:send, nil, :assert_equal,
            s(:str, "<MAP></MAP>"),
            s(:send,
              s(:lvar, :cgi), :map,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<MAP>foo</MAP>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :map),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<MAP>foo</MAP>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :map,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<APPLET></APPLET>"),
            s(:send,
              s(:lvar, :cgi), :applet)),
          s(:send, nil, :assert_equal,
            s(:str, "<APPLET></APPLET>"),
            s(:send,
              s(:lvar, :cgi), :applet,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<APPLET>foo</APPLET>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :applet),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<APPLET>foo</APPLET>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :applet,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<PRE></PRE>"),
            s(:send,
              s(:lvar, :cgi), :pre)),
          s(:send, nil, :assert_equal,
            s(:str, "<PRE></PRE>"),
            s(:send,
              s(:lvar, :cgi), :pre,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<PRE>foo</PRE>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :pre),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<PRE>foo</PRE>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :pre,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<XMP></XMP>"),
            s(:send,
              s(:lvar, :cgi), :xmp)),
          s(:send, nil, :assert_equal,
            s(:str, "<XMP></XMP>"),
            s(:send,
              s(:lvar, :cgi), :xmp,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<XMP>foo</XMP>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :xmp),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<XMP>foo</XMP>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :xmp,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<LISTING></LISTING>"),
            s(:send,
              s(:lvar, :cgi), :listing)),
          s(:send, nil, :assert_equal,
            s(:str, "<LISTING></LISTING>"),
            s(:send,
              s(:lvar, :cgi), :listing,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<LISTING>foo</LISTING>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :listing),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<LISTING>foo</LISTING>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :listing,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<DL></DL>"),
            s(:send,
              s(:lvar, :cgi), :dl)),
          s(:send, nil, :assert_equal,
            s(:str, "<DL></DL>"),
            s(:send,
              s(:lvar, :cgi), :dl,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<DL>foo</DL>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :dl),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<DL>foo</DL>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :dl,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<OL></OL>"),
            s(:send,
              s(:lvar, :cgi), :ol)),
          s(:send, nil, :assert_equal,
            s(:str, "<OL></OL>"),
            s(:send,
              s(:lvar, :cgi), :ol,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<OL>foo</OL>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :ol),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<OL>foo</OL>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :ol,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<UL></UL>"),
            s(:send,
              s(:lvar, :cgi), :ul)),
          s(:send, nil, :assert_equal,
            s(:str, "<UL></UL>"),
            s(:send,
              s(:lvar, :cgi), :ul,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<UL>foo</UL>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :ul),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<UL>foo</UL>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :ul,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<DIR></DIR>"),
            s(:send,
              s(:lvar, :cgi), :dir)),
          s(:send, nil, :assert_equal,
            s(:str, "<DIR></DIR>"),
            s(:send,
              s(:lvar, :cgi), :dir,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<DIR>foo</DIR>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :dir),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<DIR>foo</DIR>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :dir,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<MENU></MENU>"),
            s(:send,
              s(:lvar, :cgi), :menu)),
          s(:send, nil, :assert_equal,
            s(:str, "<MENU></MENU>"),
            s(:send,
              s(:lvar, :cgi), :menu,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<MENU>foo</MENU>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :menu),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<MENU>foo</MENU>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :menu,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<SELECT></SELECT>"),
            s(:send,
              s(:lvar, :cgi), :select)),
          s(:send, nil, :assert_equal,
            s(:str, "<SELECT></SELECT>"),
            s(:send,
              s(:lvar, :cgi), :select,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<SELECT>foo</SELECT>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :select),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<SELECT>foo</SELECT>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :select,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<TABLE></TABLE>"),
            s(:send,
              s(:lvar, :cgi), :table)),
          s(:send, nil, :assert_equal,
            s(:str, "<TABLE></TABLE>"),
            s(:send,
              s(:lvar, :cgi), :table,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<TABLE>foo</TABLE>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :table),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<TABLE>foo</TABLE>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :table,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<TITLE></TITLE>"),
            s(:send,
              s(:lvar, :cgi), :title)),
          s(:send, nil, :assert_equal,
            s(:str, "<TITLE></TITLE>"),
            s(:send,
              s(:lvar, :cgi), :title,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<TITLE>foo</TITLE>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :title),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<TITLE>foo</TITLE>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :title,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<STYLE></STYLE>"),
            s(:send,
              s(:lvar, :cgi), :style)),
          s(:send, nil, :assert_equal,
            s(:str, "<STYLE></STYLE>"),
            s(:send,
              s(:lvar, :cgi), :style,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<STYLE>foo</STYLE>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :style),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<STYLE>foo</STYLE>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :style,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<SCRIPT></SCRIPT>"),
            s(:send,
              s(:lvar, :cgi), :script)),
          s(:send, nil, :assert_equal,
            s(:str, "<SCRIPT></SCRIPT>"),
            s(:send,
              s(:lvar, :cgi), :script,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<SCRIPT>foo</SCRIPT>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :script),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<SCRIPT>foo</SCRIPT>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :script,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<H1></H1>"),
            s(:send,
              s(:lvar, :cgi), :h1)),
          s(:send, nil, :assert_equal,
            s(:str, "<H1></H1>"),
            s(:send,
              s(:lvar, :cgi), :h1,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<H1>foo</H1>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :h1),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<H1>foo</H1>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :h1,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<H2></H2>"),
            s(:send,
              s(:lvar, :cgi), :h2)),
          s(:send, nil, :assert_equal,
            s(:str, "<H2></H2>"),
            s(:send,
              s(:lvar, :cgi), :h2,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<H2>foo</H2>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :h2),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<H2>foo</H2>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :h2,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<H3></H3>"),
            s(:send,
              s(:lvar, :cgi), :h3)),
          s(:send, nil, :assert_equal,
            s(:str, "<H3></H3>"),
            s(:send,
              s(:lvar, :cgi), :h3,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<H3>foo</H3>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :h3),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<H3>foo</H3>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :h3,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<H4></H4>"),
            s(:send,
              s(:lvar, :cgi), :h4)),
          s(:send, nil, :assert_equal,
            s(:str, "<H4></H4>"),
            s(:send,
              s(:lvar, :cgi), :h4,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<H4>foo</H4>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :h4),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<H4>foo</H4>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :h4,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<H5></H5>"),
            s(:send,
              s(:lvar, :cgi), :h5)),
          s(:send, nil, :assert_equal,
            s(:str, "<H5></H5>"),
            s(:send,
              s(:lvar, :cgi), :h5,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<H5>foo</H5>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :h5),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<H5>foo</H5>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :h5,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<H6></H6>"),
            s(:send,
              s(:lvar, :cgi), :h6)),
          s(:send, nil, :assert_equal,
            s(:str, "<H6></H6>"),
            s(:send,
              s(:lvar, :cgi), :h6,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<H6>foo</H6>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :h6),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<H6>foo</H6>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :h6,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<TEXTAREA .*></TEXTAREA>$"),
              s(:regopt)),
            s(:send,
              s(:lvar, :cgi), :textarea)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "COLS=\"70\""),
              s(:regopt)),
            s(:send,
              s(:lvar, :cgi), :textarea)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "ROWS=\"10\""),
              s(:regopt)),
            s(:send,
              s(:lvar, :cgi), :textarea)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "NAME=\"\""),
              s(:regopt)),
            s(:send,
              s(:lvar, :cgi), :textarea)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<TEXTAREA .*></TEXTAREA>$"),
              s(:regopt)),
            s(:send,
              s(:lvar, :cgi), :textarea,
              s(:str, "bar"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "COLS=\"70\""),
              s(:regopt)),
            s(:send,
              s(:lvar, :cgi), :textarea,
              s(:str, "bar"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "ROWS=\"10\""),
              s(:regopt)),
            s(:send,
              s(:lvar, :cgi), :textarea,
              s(:str, "bar"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "NAME=\"bar\""),
              s(:regopt)),
            s(:send,
              s(:lvar, :cgi), :textarea,
              s(:str, "bar"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<TEXTAREA .*>foo</TEXTAREA>$"),
              s(:regopt)),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :textarea),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "COLS=\"70\""),
              s(:regopt)),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :textarea),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "ROWS=\"10\""),
              s(:regopt)),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :textarea),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "NAME=\"\""),
              s(:regopt)),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :textarea),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<TEXTAREA .*>foo</TEXTAREA>$"),
              s(:regopt)),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :textarea,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "COLS=\"70\""),
              s(:regopt)),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :textarea,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "ROWS=\"10\""),
              s(:regopt)),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :textarea,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "NAME=\"bar\""),
              s(:regopt)),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :textarea,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<FORM .*></FORM>$"),
              s(:regopt)),
            s(:send,
              s(:lvar, :cgi), :form)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "METHOD=\"post\""),
              s(:regopt)),
            s(:send,
              s(:lvar, :cgi), :form)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "ENCTYPE=\"application/x-www-form-urlencoded\""),
              s(:regopt)),
            s(:send,
              s(:lvar, :cgi), :form)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<FORM .*></FORM>$"),
              s(:regopt)),
            s(:send,
              s(:lvar, :cgi), :form,
              s(:str, "bar"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "METHOD=\"bar\""),
              s(:regopt)),
            s(:send,
              s(:lvar, :cgi), :form,
              s(:str, "bar"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "ENCTYPE=\"application/x-www-form-urlencoded\""),
              s(:regopt)),
            s(:send,
              s(:lvar, :cgi), :form,
              s(:str, "bar"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<FORM .*>foo</FORM>$"),
              s(:regopt)),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :form),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "METHOD=\"post\""),
              s(:regopt)),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :form),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "ENCTYPE=\"application/x-www-form-urlencoded\""),
              s(:regopt)),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :form),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<FORM .*>foo</FORM>$"),
              s(:regopt)),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :form,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "METHOD=\"bar\""),
              s(:regopt)),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :form,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "ENCTYPE=\"application/x-www-form-urlencoded\""),
              s(:regopt)),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :form,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<BLOCKQUOTE></BLOCKQUOTE>"),
            s(:send,
              s(:lvar, :cgi), :blockquote)),
          s(:send, nil, :assert_equal,
            s(:str, "<BLOCKQUOTE CITE=\"bar\"></BLOCKQUOTE>"),
            s(:send,
              s(:lvar, :cgi), :blockquote,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<BLOCKQUOTE>foo</BLOCKQUOTE>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :blockquote),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<BLOCKQUOTE CITE=\"bar\">foo</BLOCKQUOTE>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :blockquote,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<CAPTION></CAPTION>"),
            s(:send,
              s(:lvar, :cgi), :caption)),
          s(:send, nil, :assert_equal,
            s(:str, "<CAPTION ALIGN=\"bar\"></CAPTION>"),
            s(:send,
              s(:lvar, :cgi), :caption,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<CAPTION>foo</CAPTION>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :caption),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<CAPTION ALIGN=\"bar\">foo</CAPTION>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :caption,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<IMG SRC=\"\" ALT=\"\">"),
            s(:send,
              s(:lvar, :cgi), :img)),
          s(:send, nil, :assert_equal,
            s(:str, "<IMG SRC=\"bar\" ALT=\"\">"),
            s(:send,
              s(:lvar, :cgi), :img,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<IMG SRC=\"\" ALT=\"\">"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :img),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<IMG SRC=\"bar\" ALT=\"\">"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :img,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<BASE HREF=\"\">"),
            s(:send,
              s(:lvar, :cgi), :base)),
          s(:send, nil, :assert_equal,
            s(:str, "<BASE HREF=\"bar\">"),
            s(:send,
              s(:lvar, :cgi), :base,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<BASE HREF=\"\">"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :base),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<BASE HREF=\"bar\">"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :base,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<BASEFONT>"),
            s(:send,
              s(:lvar, :cgi), :basefont)),
          s(:send, nil, :assert_equal,
            s(:str, "<BASEFONT>"),
            s(:send,
              s(:lvar, :cgi), :basefont,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<BASEFONT>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :basefont),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<BASEFONT>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :basefont,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<BR>"),
            s(:send,
              s(:lvar, :cgi), :br)),
          s(:send, nil, :assert_equal,
            s(:str, "<BR>"),
            s(:send,
              s(:lvar, :cgi), :br,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<BR>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :br),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<BR>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :br,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<AREA>"),
            s(:send,
              s(:lvar, :cgi), :area)),
          s(:send, nil, :assert_equal,
            s(:str, "<AREA>"),
            s(:send,
              s(:lvar, :cgi), :area,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<AREA>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :area),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<AREA>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :area,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<LINK>"),
            s(:send,
              s(:lvar, :cgi), :link)),
          s(:send, nil, :assert_equal,
            s(:str, "<LINK>"),
            s(:send,
              s(:lvar, :cgi), :link,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<LINK>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :link),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<LINK>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :link,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<PARAM>"),
            s(:send,
              s(:lvar, :cgi), :param)),
          s(:send, nil, :assert_equal,
            s(:str, "<PARAM>"),
            s(:send,
              s(:lvar, :cgi), :param,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<PARAM>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :param),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<PARAM>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :param,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<HR>"),
            s(:send,
              s(:lvar, :cgi), :hr)),
          s(:send, nil, :assert_equal,
            s(:str, "<HR>"),
            s(:send,
              s(:lvar, :cgi), :hr,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<HR>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :hr),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<HR>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :hr,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<INPUT>"),
            s(:send,
              s(:lvar, :cgi), :input)),
          s(:send, nil, :assert_equal,
            s(:str, "<INPUT>"),
            s(:send,
              s(:lvar, :cgi), :input,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<INPUT>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :input),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<INPUT>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :input,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<ISINDEX>"),
            s(:send,
              s(:lvar, :cgi), :isindex)),
          s(:send, nil, :assert_equal,
            s(:str, "<ISINDEX>"),
            s(:send,
              s(:lvar, :cgi), :isindex,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<ISINDEX>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :isindex),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<ISINDEX>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :isindex,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<META>"),
            s(:send,
              s(:lvar, :cgi), :meta)),
          s(:send, nil, :assert_equal,
            s(:str, "<META>"),
            s(:send,
              s(:lvar, :cgi), :meta,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "<META>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :meta),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<META>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :meta,
                s(:str, "bar")),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"><HTML>"),
            s(:send,
              s(:lvar, :cgi), :html)),
          s(:send, nil, :assert_equal,
            s(:str, "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"><HTML>foo</HTML>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :html),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<HEAD>"),
            s(:send,
              s(:lvar, :cgi), :head)),
          s(:send, nil, :assert_equal,
            s(:str, "<HEAD>foo</HEAD>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :head),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<BODY>"),
            s(:send,
              s(:lvar, :cgi), :body)),
          s(:send, nil, :assert_equal,
            s(:str, "<BODY>foo</BODY>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :body),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<P>"),
            s(:send,
              s(:lvar, :cgi), :p)),
          s(:send, nil, :assert_equal,
            s(:str, "<P>foo</P>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :p),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<PLAINTEXT>"),
            s(:send,
              s(:lvar, :cgi), :plaintext)),
          s(:send, nil, :assert_equal,
            s(:str, "<PLAINTEXT>foo</PLAINTEXT>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :plaintext),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<DT>"),
            s(:send,
              s(:lvar, :cgi), :dt)),
          s(:send, nil, :assert_equal,
            s(:str, "<DT>foo</DT>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :dt),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<DD>"),
            s(:send,
              s(:lvar, :cgi), :dd)),
          s(:send, nil, :assert_equal,
            s(:str, "<DD>foo</DD>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :dd),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<LI>"),
            s(:send,
              s(:lvar, :cgi), :li)),
          s(:send, nil, :assert_equal,
            s(:str, "<LI>foo</LI>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :li),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<OPTION>"),
            s(:send,
              s(:lvar, :cgi), :option)),
          s(:send, nil, :assert_equal,
            s(:str, "<OPTION>foo</OPTION>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :option),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<TR>"),
            s(:send,
              s(:lvar, :cgi), :tr)),
          s(:send, nil, :assert_equal,
            s(:str, "<TR>foo</TR>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :tr),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<TH>"),
            s(:send,
              s(:lvar, :cgi), :th)),
          s(:send, nil, :assert_equal,
            s(:str, "<TH>foo</TH>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :th),
              s(:args),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "<TD>"),
            s(:send,
              s(:lvar, :cgi), :td)),
          s(:send, nil, :assert_equal,
            s(:str, "<TD>foo</TD>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :td),
              s(:args),
              s(:str, "foo"))),
          s(:lvasgn, :str,
            s(:send,
              s(:lvar, :cgi), :checkbox_group,
              s(:str, "foo"),
              s(:array,
                s(:str, "aa"),
                s(:str, "bb")),
              s(:array,
                s(:str, "cc"),
                s(:str, "dd")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<INPUT .*VALUE=\"aa\".*>bb<INPUT .*VALUE=\"cc\".*>dd$"),
              s(:regopt)),
            s(:lvar, :str)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<INPUT .*TYPE=\"checkbox\".*>bb<INPUT .*TYPE=\"checkbox\".*>dd$"),
              s(:regopt)),
            s(:lvar, :str)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<INPUT .*NAME=\"foo\".*>bb<INPUT .*NAME=\"foo\".*>dd$"),
              s(:regopt)),
            s(:lvar, :str)),
          s(:lvasgn, :str,
            s(:send,
              s(:lvar, :cgi), :radio_group,
              s(:str, "foo"),
              s(:array,
                s(:str, "aa"),
                s(:str, "bb")),
              s(:array,
                s(:str, "cc"),
                s(:str, "dd")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<INPUT .*VALUE=\"aa\".*>bb<INPUT .*VALUE=\"cc\".*>dd$"),
              s(:regopt)),
            s(:lvar, :str)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<INPUT .*TYPE=\"radio\".*>bb<INPUT .*TYPE=\"radio\".*>dd$"),
              s(:regopt)),
            s(:lvar, :str)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<INPUT .*NAME=\"foo\".*>bb<INPUT .*NAME=\"foo\".*>dd$"),
              s(:regopt)),
            s(:lvar, :str)),
          s(:lvasgn, :str,
            s(:send,
              s(:lvar, :cgi), :checkbox_group,
              s(:str, "foo"),
              s(:array,
                s(:str, "aa"),
                s(:str, "bb")),
              s(:array,
                s(:str, "cc"),
                s(:str, "dd"),
                s(:true)))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<INPUT .*VALUE=\"aa\".*>bb<INPUT .*VALUE=\"cc\".*>dd$"),
              s(:regopt)),
            s(:lvar, :str)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<INPUT .*TYPE=\"checkbox\".*>bb<INPUT .*TYPE=\"checkbox\".*>dd$"),
              s(:regopt)),
            s(:lvar, :str)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<INPUT .*NAME=\"foo\".*>bb<INPUT .*NAME=\"foo\".*>dd$"),
              s(:regopt)),
            s(:lvar, :str)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<INPUT .*>bb<INPUT .*CHECKED.*>dd$"),
              s(:regopt)),
            s(:lvar, :str)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "<INPUT .*TYPE=\"text\".*>"),
              s(:regopt)),
            s(:send,
              s(:lvar, :cgi), :text_field,
              s(:hash,
                s(:pair,
                  s(:sym, :name),
                  s(:str, "name")),
                s(:pair,
                  s(:sym, :value),
                  s(:str, "value"))))),
          s(:lvasgn, :str,
            s(:send,
              s(:lvar, :cgi), :radio_group,
              s(:str, "foo"),
              s(:array,
                s(:str, "aa"),
                s(:str, "bb")),
              s(:array,
                s(:str, "cc"),
                s(:str, "dd"),
                s(:false)))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<INPUT .*VALUE=\"aa\".*>bb<INPUT .*VALUE=\"cc\".*>dd$"),
              s(:regopt)),
            s(:lvar, :str)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<INPUT .*TYPE=\"radio\".*>bb<INPUT .*TYPE=\"radio\".*>dd$"),
              s(:regopt)),
            s(:lvar, :str)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^<INPUT .*NAME=\"foo\".*>bb<INPUT .*NAME=\"foo\".*>dd$"),
              s(:regopt)),
            s(:lvar, :str)))),
      s(:def, :test_cgi_tag_helper_html5,
        s(:args),
        s(:begin,
          s(:send, nil, :update_env,
            s(:hash,
              s(:pair,
                s(:str, "REQUEST_METHOD"),
                s(:str, "GET")))),
          s(:lvasgn, :cgi,
            s(:send,
              s(:const, nil, :CGI), :new,
              s(:str, "html5"))),
          s(:send, nil, :assert_equal,
            s(:str, "<HEADER></HEADER>"),
            s(:send,
              s(:lvar, :cgi), :header)),
          s(:send, nil, :assert_equal,
            s(:str, "<FOOTER></FOOTER>"),
            s(:send,
              s(:lvar, :cgi), :footer)),
          s(:send, nil, :assert_equal,
            s(:str, "<ARTICLE></ARTICLE>"),
            s(:send,
              s(:lvar, :cgi), :article)),
          s(:send, nil, :assert_equal,
            s(:str, "<SECTION></SECTION>"),
            s(:send,
              s(:lvar, :cgi), :section)),
          s(:send, nil, :assert_equal,
            s(:str, "<!DOCTYPE HTML><HTML BLA=\"TEST\"></HTML>"),
            s(:block,
              s(:send,
                s(:lvar, :cgi), :html,
                s(:hash,
                  s(:pair,
                    s(:str, "BLA"),
                    s(:str, "TEST")))),
              s(:args), nil)))))))
