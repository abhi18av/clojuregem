s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "cgi")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:send, nil, :require_relative,
    s(:str, "update_env")),
  s(:class,
    s(:const, nil, :MultiPart), nil,
    s(:begin,
      s(:def, :initialize,
        s(:args,
          s(:optarg, :boundary,
            s(:nil))),
        s(:begin,
          s(:ivasgn, :@boundary,
            s(:or,
              s(:lvar, :boundary),
              s(:send, nil, :create_boundary))),
          s(:ivasgn, :@buf,
            s(:str, "")),
          s(:if,
            s(:defined?,
              s(:const,
                s(:cbase), :Encoding)),
            s(:send,
              s(:ivar, :@buf), :force_encoding,
              s(:const,
                s(:const,
                  s(:cbase), :Encoding), :ASCII_8BIT)), nil))),
      s(:send, nil, :attr_reader,
        s(:sym, :boundary)),
      s(:def, :append,
        s(:args,
          s(:arg, :name),
          s(:arg, :value),
          s(:optarg, :filename,
            s(:nil)),
          s(:optarg, :content_type,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:and,
              s(:lvar, :filename),
              s(:send,
                s(:lvar, :content_type), :nil?)),
            s(:lvasgn, :content_type,
              s(:send, nil, :detect_content_type,
                s(:lvar, :filename))), nil),
          s(:lvasgn, :s,
            s(:if,
              s(:lvar, :filename),
              s(:dstr,
                s(:str, "; filename=\""),
                s(:begin,
                  s(:lvar, :filename)),
                s(:str, "\"")),
              s(:str, ""))),
          s(:lvasgn, :buf,
            s(:ivar, :@buf)),
          s(:send,
            s(:lvar, :buf), :<<,
            s(:dstr,
              s(:str, "--"),
              s(:begin,
                s(:send, nil, :boundary)),
              s(:str, "\r\n"))),
          s(:send,
            s(:lvar, :buf), :<<,
            s(:dstr,
              s(:str, "Content-Disposition: form-data: name=\""),
              s(:begin,
                s(:lvar, :name)),
              s(:str, "\""),
              s(:begin,
                s(:lvar, :s)),
              s(:str, "\r\n"))),
          s(:if,
            s(:lvar, :content_type),
            s(:send,
              s(:lvar, :buf), :<<,
              s(:dstr,
                s(:str, "Content-Type: "),
                s(:begin,
                  s(:lvar, :content_type)),
                s(:str, "\r\n"))), nil),
          s(:send,
            s(:lvar, :buf), :<<,
            s(:str, "\r\n")),
          s(:send,
            s(:lvar, :buf), :<<,
            s(:send,
              s(:lvar, :value), :b)),
          s(:send,
            s(:lvar, :buf), :<<,
            s(:str, "\r\n")),
          s(:return,
            s(:self)))),
      s(:def, :close,
        s(:args),
        s(:begin,
          s(:lvasgn, :buf,
            s(:ivar, :@buf)),
          s(:ivasgn, :@buf,
            s(:str, "")),
          s(:return,
            s(:send,
              s(:lvar, :buf), :<<,
              s(:dstr,
                s(:str, "--"),
                s(:begin,
                  s(:send, nil, :boundary)),
                s(:str, "--\r\n")))))),
      s(:def, :create_boundary,
        s(:args),
        s(:return,
          s(:dstr,
            s(:str, "--boundary"),
            s(:begin,
              s(:send,
                s(:send,
                  s(:send, nil, :rand), :to_s), :[],
                s(:irange,
                  s(:int, 2),
                  s(:int, -1))))))),
      s(:def, :detect_content_type,
        s(:args,
          s(:arg, :filename)),
        s(:begin,
          s(:send,
            s(:lvar, :filename), :=~,
            s(:regexp,
              s(:str, "\\.(\\w+)\\z"),
              s(:regopt))),
          s(:return,
            s(:or,
              s(:send,
                s(:const, nil, :MIME_TYPES), :[],
                s(:nth_ref, 1)),
              s(:str, "application/octet-stream"))))),
      s(:casgn, nil, :MIME_TYPES,
        s(:hash,
          s(:pair,
            s(:str, "gif"),
            s(:str, "image/gif")),
          s(:pair,
            s(:str, "jpg"),
            s(:str, "image/jpeg")),
          s(:pair,
            s(:str, "jpeg"),
            s(:str, "image/jpeg")),
          s(:pair,
            s(:str, "png"),
            s(:str, "image/png")),
          s(:pair,
            s(:str, "bmp"),
            s(:str, "image/bmp")),
          s(:pair,
            s(:str, "tif"),
            s(:str, "image/tiff")),
          s(:pair,
            s(:str, "tiff"),
            s(:str, "image/tiff")),
          s(:pair,
            s(:str, "htm"),
            s(:str, "text/html")),
          s(:pair,
            s(:str, "html"),
            s(:str, "text/html")),
          s(:pair,
            s(:str, "xml"),
            s(:str, "text/xml")),
          s(:pair,
            s(:str, "txt"),
            s(:str, "text/plain")),
          s(:pair,
            s(:str, "text"),
            s(:str, "text/plain")),
          s(:pair,
            s(:str, "css"),
            s(:str, "text/css")),
          s(:pair,
            s(:str, "mpg"),
            s(:str, "video/mpeg")),
          s(:pair,
            s(:str, "mpeg"),
            s(:str, "video/mpeg")),
          s(:pair,
            s(:str, "mov"),
            s(:str, "video/quicktime")),
          s(:pair,
            s(:str, "avi"),
            s(:str, "video/x-msvideo")),
          s(:pair,
            s(:str, "mp3"),
            s(:str, "audio/mpeg")),
          s(:pair,
            s(:str, "mid"),
            s(:str, "audio/midi")),
          s(:pair,
            s(:str, "wav"),
            s(:str, "audio/x-wav")),
          s(:pair,
            s(:str, "zip"),
            s(:str, "application/zip")),
          s(:pair,
            s(:str, "gz"),
            s(:str, "application/gzip")),
          s(:pair,
            s(:str, "bz2"),
            s(:str, "application/bzip2")),
          s(:pair,
            s(:str, "rtf"),
            s(:str, "application/rtf")),
          s(:pair,
            s(:str, "pdf"),
            s(:str, "application/pdf")),
          s(:pair,
            s(:str, "ps"),
            s(:str, "application/postscript")),
          s(:pair,
            s(:str, "js"),
            s(:str, "application/x-javascript")),
          s(:pair,
            s(:str, "xls"),
            s(:str, "application/vnd.ms-excel")),
          s(:pair,
            s(:str, "doc"),
            s(:str, "application/msword")),
          s(:pair,
            s(:str, "ppt"),
            s(:str, "application/vnd.ms-powerpoint")))))),
  s(:class,
    s(:const, nil, :CGIMultipartTest),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :UpdateEnv)),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@environ,
            s(:hash)),
          s(:send, nil, :update_env,
            s(:hash,
              s(:pair,
                s(:str, "REQUEST_METHOD"),
                s(:str, "POST")),
              s(:pair,
                s(:str, "CONTENT_TYPE"),
                s(:nil)),
              s(:pair,
                s(:str, "CONTENT_LENGTH"),
                s(:nil)))),
          s(:ivasgn, :@tempfiles,
            s(:array)))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :ENV), :update,
            s(:ivar, :@environ)),
          s(:if,
            s(:send,
              s(:gvar, :$stdin), :is_a?,
              s(:const, nil, :Tempfile)),
            s(:send,
              s(:gvar, :$stdin), :close), nil),
          s(:gvasgn, :$stdin,
            s(:const, nil, :STDIN)),
          s(:block,
            s(:send,
              s(:ivar, :@tempfiles), :each),
            s(:args,
              s(:arg, :t)),
            s(:send,
              s(:lvar, :t), :close!)))),
      s(:def, :_prepare,
        s(:args,
          s(:arg, :data)),
        s(:begin,
          s(:lvasgn, :multipart,
            s(:send,
              s(:const, nil, :MultiPart), :new,
              s(:if,
                s(:defined?,
                  s(:ivar, :@boundary)),
                s(:ivar, :@boundary),
                s(:nil)))),
          s(:block,
            s(:send,
              s(:lvar, :data), :each),
            s(:args,
              s(:arg, :hash)),
            s(:send,
              s(:lvar, :multipart), :append,
              s(:send,
                s(:lvar, :hash), :[],
                s(:sym, :name)),
              s(:send,
                s(:lvar, :hash), :[],
                s(:sym, :value)),
              s(:send,
                s(:lvar, :hash), :[],
                s(:sym, :filename)))),
          s(:lvasgn, :input,
            s(:send,
              s(:lvar, :multipart), :close)),
          s(:if,
            s(:send, nil, :block_given?),
            s(:lvasgn, :input,
              s(:yield,
                s(:lvar, :input))), nil),
          s(:or_asgn,
            s(:ivasgn, :@boundary),
            s(:send,
              s(:lvar, :multipart), :boundary)),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "CONTENT_TYPE"),
            s(:dstr,
              s(:str, "multipart/form-data; boundary="),
              s(:begin,
                s(:ivar, :@boundary)))),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "CONTENT_LENGTH"),
            s(:send,
              s(:send,
                s(:lvar, :input), :length), :to_s)),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "REQUEST_METHOD"),
            s(:str, "POST")),
          s(:lvasgn, :tmpfile,
            s(:send,
              s(:const, nil, :Tempfile), :new,
              s(:str, "test_cgi_multipart"))),
          s(:send,
            s(:ivar, :@tempfiles), :<<,
            s(:lvar, :tmpfile)),
          s(:send,
            s(:lvar, :tmpfile), :binmode),
          s(:send,
            s(:lvar, :tmpfile), :<<,
            s(:lvar, :input)),
          s(:send,
            s(:lvar, :tmpfile), :rewind),
          s(:gvasgn, :$stdin,
            s(:lvar, :tmpfile)))),
      s(:def, :_test_multipart,
        s(:args,
          s(:optarg, :cgi_options,
            s(:hash))),
        s(:ensure,
          s(:begin,
            s(:block,
              s(:send,
                s(:send, nil, :caller,
                  s(:int, 0)), :find),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :=~,
                s(:regexp,
                  s(:str, "in `test_(.*?)'"),
                  s(:regopt)))),
            s(:send, nil, :_prepare,
              s(:ivar, :@data)),
            s(:lvasgn, :options,
              s(:hash,
                s(:pair,
                  s(:sym, :accept_charset),
                  s(:str, "UTF-8")))),
            s(:send,
              s(:lvar, :options), :merge!,
              s(:lvar, :cgi_options)),
            s(:lvasgn, :cgi,
              s(:send,
                s(:const, nil, :CGI), :new,
                s(:lvar, :options))),
            s(:lvasgn, :expected_names,
              s(:send,
                s(:block,
                  s(:send,
                    s(:ivar, :@data), :collect),
                  s(:args,
                    s(:arg, :hash)),
                  s(:send,
                    s(:lvar, :hash), :[],
                    s(:sym, :name))), :sort)),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected_names),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :cgi), :params), :keys), :sort)),
            s(:lvasgn, :threshold,
              s(:send,
                s(:int, 1024), :*,
                s(:int, 10))),
            s(:block,
              s(:send,
                s(:ivar, :@data), :each),
              s(:args,
                s(:arg, :hash)),
              s(:begin,
                s(:lvasgn, :name,
                  s(:send,
                    s(:lvar, :hash), :[],
                    s(:sym, :name))),
                s(:lvasgn, :expected,
                  s(:send,
                    s(:lvar, :hash), :[],
                    s(:sym, :value))),
                s(:if,
                  s(:send,
                    s(:lvar, :hash), :[],
                    s(:sym, :filename)),
                  s(:begin,
                    s(:lvasgn, :expected_class,
                      s(:or,
                        s(:ivar, :@expected_class),
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:lvar, :hash), :[],
                                  s(:sym, :value)), :length), :<,
                              s(:lvar, :threshold)),
                            s(:const, nil, :StringIO),
                            s(:const, nil, :Tempfile))))),
                    s(:send, nil, :assert,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :cgi), :files), :keys), :member?,
                        s(:send,
                          s(:lvar, :hash), :[],
                          s(:sym, :name))))),
                  s(:begin,
                    s(:lvasgn, :expected_class,
                      s(:const, nil, :String)),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :expected),
                      s(:send,
                        s(:lvar, :cgi), :[],
                        s(:lvar, :name))),
                    s(:send, nil, :assert_equal,
                      s(:false),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :cgi), :files), :keys), :member?,
                        s(:send,
                          s(:lvar, :hash), :[],
                          s(:sym, :name)))))),
                s(:send, nil, :assert_kind_of,
                  s(:lvar, :expected_class),
                  s(:send,
                    s(:lvar, :cgi), :[],
                    s(:lvar, :name))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :expected),
                  s(:send,
                    s(:send,
                      s(:lvar, :cgi), :[],
                      s(:lvar, :name)), :read)),
                s(:send, nil, :assert_equal,
                  s(:or,
                    s(:send,
                      s(:lvar, :hash), :[],
                      s(:sym, :filename)),
                    s(:str, "")),
                  s(:send,
                    s(:send,
                      s(:lvar, :cgi), :[],
                      s(:lvar, :name)), :original_filename)),
                s(:send, nil, :assert_equal,
                  s(:or,
                    s(:send,
                      s(:lvar, :hash), :[],
                      s(:sym, :content_type)),
                    s(:str, "")),
                  s(:send,
                    s(:send,
                      s(:lvar, :cgi), :[],
                      s(:lvar, :name)), :content_type))))),
          s(:if,
            s(:lvar, :cgi),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :cgi), :params), :each),
              s(:args,
                s(:arg, :name),
                s(:arg, :vals)),
              s(:block,
                s(:send,
                  s(:lvar, :vals), :each),
                s(:args,
                  s(:arg, :val)),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:lvar, :val), :kind_of?,
                      s(:const, nil, :Tempfile)),
                    s(:send,
                      s(:lvar, :val), :path)),
                  s(:send,
                    s(:lvar, :val), :close!), nil))), nil))),
      s(:def, :_read,
        s(:args,
          s(:arg, :basename)),
        s(:begin,
          s(:lvasgn, :filename,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:str, "(string)")),
              s(:str, "testdata"),
              s(:lvar, :basename))),
          s(:lvasgn, :s,
            s(:block,
              s(:send,
                s(:const, nil, :File), :open,
                s(:lvar, :filename),
                s(:str, "rb")),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:lvar, :f), :read))),
          s(:return,
            s(:lvar, :s)))),
      s(:def, :test_cgi_multipart_stringio,
        s(:args),
        s(:begin,
          s(:ivasgn, :@boundary,
            s(:str, "----WebKitFormBoundaryAAfvAII+YL9102cX")),
          s(:ivasgn, :@data,
            s(:array,
              s(:hash,
                s(:pair,
                  s(:sym, :name),
                  s(:str, "hidden1")),
                s(:pair,
                  s(:sym, :value),
                  s(:str, "foobar"))),
              s(:hash,
                s(:pair,
                  s(:sym, :name),
                  s(:str, "text1")),
                s(:pair,
                  s(:sym, :value),
                  s(:str, "あいうえお"))),
              s(:hash,
                s(:pair,
                  s(:sym, :name),
                  s(:str, "file1")),
                s(:pair,
                  s(:sym, :value),
                  s(:send, nil, :_read,
                    s(:str, "file1.html"))),
                s(:pair,
                  s(:sym, :filename),
                  s(:str, "file1.html")),
                s(:pair,
                  s(:sym, :content_type),
                  s(:str, "text/html"))),
              s(:hash,
                s(:pair,
                  s(:sym, :name),
                  s(:str, "image1")),
                s(:pair,
                  s(:sym, :value),
                  s(:send, nil, :_read,
                    s(:str, "small.png"))),
                s(:pair,
                  s(:sym, :filename),
                  s(:str, "small.png")),
                s(:pair,
                  s(:sym, :content_type),
                  s(:str, "image/png"))))),
          s(:if,
            s(:defined?,
              s(:const,
                s(:cbase), :Encoding)),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@data), :[],
                  s(:int, 1)), :[],
                s(:sym, :value)), :force_encoding,
              s(:const,
                s(:const,
                  s(:cbase), :Encoding), :UTF_8)), nil),
          s(:ivasgn, :@expected_class,
            s(:const, nil, :StringIO)),
          s(:send, nil, :_test_multipart))),
      s(:def, :test_cgi_multipart_tempfile,
        s(:args),
        s(:begin,
          s(:ivasgn, :@boundary,
            s(:str, "----WebKitFormBoundaryAAfvAII+YL9102cX")),
          s(:ivasgn, :@data,
            s(:array,
              s(:hash,
                s(:pair,
                  s(:sym, :name),
                  s(:str, "hidden1")),
                s(:pair,
                  s(:sym, :value),
                  s(:str, "foobar"))),
              s(:hash,
                s(:pair,
                  s(:sym, :name),
                  s(:str, "text1")),
                s(:pair,
                  s(:sym, :value),
                  s(:str, "あいうえお"))),
              s(:hash,
                s(:pair,
                  s(:sym, :name),
                  s(:str, "file1")),
                s(:pair,
                  s(:sym, :value),
                  s(:send, nil, :_read,
                    s(:str, "file1.html"))),
                s(:pair,
                  s(:sym, :filename),
                  s(:str, "file1.html")),
                s(:pair,
                  s(:sym, :content_type),
                  s(:str, "text/html"))),
              s(:hash,
                s(:pair,
                  s(:sym, :name),
                  s(:str, "image1")),
                s(:pair,
                  s(:sym, :value),
                  s(:send, nil, :_read,
                    s(:str, "large.png"))),
                s(:pair,
                  s(:sym, :filename),
                  s(:str, "large.png")),
                s(:pair,
                  s(:sym, :content_type),
                  s(:str, "image/png"))))),
          s(:if,
            s(:defined?,
              s(:const,
                s(:cbase), :Encoding)),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@data), :[],
                  s(:int, 1)), :[],
                s(:sym, :value)), :force_encoding,
              s(:const,
                s(:const,
                  s(:cbase), :Encoding), :UTF_8)), nil),
          s(:ivasgn, :@expected_class,
            s(:const, nil, :Tempfile)),
          s(:send, nil, :_test_multipart))),
      s(:def, :_set_const,
        s(:args,
          s(:arg, :klass),
          s(:arg, :name),
          s(:arg, :value)),
        s(:begin,
          s(:lvasgn, :old,
            s(:nil)),
          s(:block,
            s(:send,
              s(:lvar, :klass), :class_eval),
            s(:args),
            s(:begin,
              s(:lvasgn, :old,
                s(:send, nil, :const_get,
                  s(:lvar, :name))),
              s(:send, nil, :remove_const,
                s(:lvar, :name)),
              s(:send, nil, :const_set,
                s(:lvar, :name),
                s(:lvar, :value)))),
          s(:return,
            s(:lvar, :old)))),
      s(:def, :test_cgi_multipart_maxmultipartlength,
        s(:args),
        s(:begin,
          s(:ivasgn, :@data,
            s(:array,
              s(:hash,
                s(:pair,
                  s(:sym, :name),
                  s(:str, "image1")),
                s(:pair,
                  s(:sym, :value),
                  s(:send, nil, :_read,
                    s(:str, "large.png"))),
                s(:pair,
                  s(:sym, :filename),
                  s(:str, "large.png")),
                s(:pair,
                  s(:sym, :content_type),
                  s(:str, "image/png"))))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :ex,
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:const, nil, :StandardError)),
                    s(:args),
                    s(:send, nil, :_test_multipart,
                      s(:hash,
                        s(:pair,
                          s(:sym, :max_multipart_length),
                          s(:send,
                            s(:int, 2), :*,
                            s(:int, 1024))))))),
                s(:send, nil, :assert_equal,
                  s(:str, "too large multipart data."),
                  s(:send,
                    s(:lvar, :ex), :message))), nil)))),
      s(:def, :test_cgi_multipart_maxmultipartlength_lambda,
        s(:args),
        s(:begin,
          s(:ivasgn, :@data,
            s(:array,
              s(:hash,
                s(:pair,
                  s(:sym, :name),
                  s(:str, "image1")),
                s(:pair,
                  s(:sym, :value),
                  s(:send, nil, :_read,
                    s(:str, "large.png"))),
                s(:pair,
                  s(:sym, :filename),
                  s(:str, "large.png")),
                s(:pair,
                  s(:sym, :content_type),
                  s(:str, "image/png"))))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :ex,
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:const, nil, :StandardError)),
                    s(:args),
                    s(:send, nil, :_test_multipart,
                      s(:hash,
                        s(:pair,
                          s(:sym, :max_multipart_length),
                          s(:block,
                            s(:send, nil, :lambda),
                            s(:args),
                            s(:send,
                              s(:int, 2), :*,
                              s(:int, 1024)))))))),
                s(:send, nil, :assert_equal,
                  s(:str, "too large multipart data."),
                  s(:send,
                    s(:lvar, :ex), :message))), nil)))),
      s(:if,
        s(:send,
          s(:const, nil, :CGI), :const_defined?,
          s(:sym, :MAX_MULTIPART_COUNT)),
        s(:def, :test_cgi_multipart_maxmultipartcount,
          s(:args),
          s(:begin,
            s(:ivasgn, :@data,
              s(:array,
                s(:hash,
                  s(:pair,
                    s(:sym, :name),
                    s(:str, "file1")),
                  s(:pair,
                    s(:sym, :value),
                    s(:send, nil, :_read,
                      s(:str, "file1.html"))),
                  s(:pair,
                    s(:sym, :filename),
                    s(:str, "file1.html")),
                  s(:pair,
                    s(:sym, :content_type),
                    s(:str, "text/html"))))),
            s(:lvasgn, :item,
              s(:send,
                s(:ivar, :@data), :first)),
            s(:block,
              s(:send,
                s(:int, 500), :times),
              s(:args),
              s(:send,
                s(:ivar, :@data), :<<,
                s(:lvar, :item))),
            s(:kwbegin,
              s(:ensure,
                s(:begin,
                  s(:lvasgn, :ex,
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const, nil, :StandardError)),
                      s(:args),
                      s(:send, nil, :_test_multipart))),
                  s(:send, nil, :assert_equal,
                    s(:str, "too many parameters."),
                    s(:send,
                      s(:lvar, :ex), :message))), nil)))), nil),
      s(:def, :test_cgi_multipart_badbody,
        s(:args),
        s(:begin,
          s(:ivasgn, :@data,
            s(:array,
              s(:hash,
                s(:pair,
                  s(:sym, :name),
                  s(:str, "file1")),
                s(:pair,
                  s(:sym, :value),
                  s(:send, nil, :_read,
                    s(:str, "file1.html"))),
                s(:pair,
                  s(:sym, :filename),
                  s(:str, "file1.html")),
                s(:pair,
                  s(:sym, :content_type),
                  s(:str, "text/html"))))),
          s(:block,
            s(:send, nil, :_prepare,
              s(:ivar, :@data)),
            s(:args,
              s(:arg, :input)),
            s(:begin,
              s(:lvasgn, :input2,
                s(:send,
                  s(:lvar, :input), :sub,
                  s(:regexp,
                    s(:str, "--(\\r\\n)?\\z"),
                    s(:regopt)),
                  s(:str, "\r\n"))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :input2), :!=,
                  s(:lvar, :input))),
              s(:lvar, :input2))),
          s(:lvasgn, :ex,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :EOFError)),
              s(:args),
              s(:send,
                s(:const, nil, :CGI), :new,
                s(:hash,
                  s(:pair,
                    s(:sym, :accept_charset),
                    s(:str, "UTF-8")))))),
          s(:send, nil, :assert_equal,
            s(:str, "bad content body"),
            s(:send,
              s(:lvar, :ex), :message)),
          s(:block,
            s(:send, nil, :_prepare,
              s(:ivar, :@data)),
            s(:args,
              s(:arg, :input)),
            s(:begin,
              s(:lvasgn, :input2,
                s(:send,
                  s(:lvar, :input), :sub,
                  s(:regexp,
                    s(:str, "--(\\r\\n)?\\z"),
                    s(:regopt)),
                  s(:str, ""))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :input2), :!=,
                  s(:lvar, :input))),
              s(:lvar, :input2))),
          s(:lvasgn, :ex,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :EOFError)),
              s(:args),
              s(:send,
                s(:const, nil, :CGI), :new,
                s(:hash,
                  s(:pair,
                    s(:sym, :accept_charset),
                    s(:str, "UTF-8")))))),
          s(:send, nil, :assert_equal,
            s(:str, "bad content body"),
            s(:send,
              s(:lvar, :ex), :message)))),
      s(:def, :test_cgi_multipart_quoteboundary,
        s(:args),
        s(:begin,
          s(:ivasgn, :@boundary,
            s(:str, "(.|\\n)*")),
          s(:ivasgn, :@data,
            s(:array,
              s(:hash,
                s(:pair,
                  s(:sym, :name),
                  s(:str, "hidden1")),
                s(:pair,
                  s(:sym, :value),
                  s(:str, "foobar"))),
              s(:hash,
                s(:pair,
                  s(:sym, :name),
                  s(:str, "text1")),
                s(:pair,
                  s(:sym, :value),
                  s(:str, "あいうえお"))),
              s(:hash,
                s(:pair,
                  s(:sym, :name),
                  s(:str, "file1")),
                s(:pair,
                  s(:sym, :value),
                  s(:send, nil, :_read,
                    s(:str, "file1.html"))),
                s(:pair,
                  s(:sym, :filename),
                  s(:str, "file1.html")),
                s(:pair,
                  s(:sym, :content_type),
                  s(:str, "text/html"))),
              s(:hash,
                s(:pair,
                  s(:sym, :name),
                  s(:str, "image1")),
                s(:pair,
                  s(:sym, :value),
                  s(:send, nil, :_read,
                    s(:str, "small.png"))),
                s(:pair,
                  s(:sym, :filename),
                  s(:str, "small.png")),
                s(:pair,
                  s(:sym, :content_type),
                  s(:str, "image/png"))))),
          s(:send,
            s(:send,
              s(:send,
                s(:ivar, :@data), :[],
                s(:int, 1)), :[],
              s(:sym, :value)), :force_encoding,
            s(:str, "UTF-8")),
          s(:send, nil, :_prepare,
            s(:ivar, :@data)),
          s(:lvasgn, :cgi,
            s(:send,
              s(:const, nil, :CGI), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :accept_charset),
                  s(:str, "UTF-8"))))),
          s(:send, nil, :assert_equal,
            s(:str, "file1.html"),
            s(:send,
              s(:send,
                s(:lvar, :cgi), :[],
                s(:str, "file1")), :original_filename)))),
      s(:def, :test_cgi_multipart_boundary_10240,
        s(:args),
        s(:begin,
          s(:ivasgn, :@boundary,
            s(:str, "AaB03x")),
          s(:ivasgn, :@data,
            s(:array,
              s(:hash,
                s(:pair,
                  s(:sym, :name),
                  s(:str, "file")),
                s(:pair,
                  s(:sym, :value),
                  s(:send,
                    s(:str, "b"), :*,
                    s(:int, 10134))),
                s(:pair,
                  s(:sym, :filename),
                  s(:str, "file.txt")),
                s(:pair,
                  s(:sym, :content_type),
                  s(:str, "text/plain"))),
              s(:hash,
                s(:pair,
                  s(:sym, :name),
                  s(:str, "foo")),
                s(:pair,
                  s(:sym, :value),
                  s(:str, "bar"))))),
          s(:send, nil, :_prepare,
            s(:ivar, :@data)),
          s(:lvasgn, :cgi,
            s(:send,
              s(:const, nil, :CGI), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :accept_charset),
                  s(:str, "UTF-8"))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :cgi), :[],
              s(:str, "foo")),
            s(:str, "bar")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :cgi), :[],
                s(:str, "file")), :read),
            s(:send,
              s(:str, "b"), :*,
              s(:int, 10134))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :cgi), :[],
                s(:str, "file")), :kind_of?,
              s(:const, nil, :Tempfile)),
            s(:send,
              s(:send,
                s(:lvar, :cgi), :[],
                s(:str, "file")), :close!), nil))),
      s(:def, :test_cgi_multipart_without_tempfile,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array),
          s(:dstr,
            s(:str, "      require 'cgi'\n"),
            s(:str, "      require 'stringio'\n"),
            s(:str, "      ENV['REQUEST_METHOD'] = 'POST'\n"),
            s(:str, "      ENV['CONTENT_TYPE'] = 'multipart/form-data; boundary=foobar1234'\n"),
            s(:str, "      body = <<-BODY\n"),
            s(:str, "--foobar1234\n"),
            s(:str, "Content-Disposition: form-data: name=\\\"name1\\\"\n"),
            s(:str, "\n"),
            s(:str, "value1\n"),
            s(:str, "--foobar1234\n"),
            s(:str, "Content-Disposition: form-data: name=\\\"file1\\\"; filename=\\\"file1.html\\\"\n"),
            s(:str, "Content-Type: text/html\n"),
            s(:str, "\n"),
            s(:str, "<html>\n"),
            s(:str, "<body><p>Hello</p></body>\n"),
            s(:str, "</html>\n"),
            s(:str, "\n"),
            s(:str, "--foobar1234--\n"),
            s(:str, "BODY\n"),
            s(:str, "      body.gsub!(/\\n/, \"\\r\\n\")\n"),
            s(:str, "      ENV['CONTENT_LENGTH'] = body.size.to_s\n"),
            s(:str, "      $stdin = StringIO.new(body)\n"),
            s(:str, "      CGI.new\n")))),
      s(:if,
        s(:send,
          s(:const, nil, :ENV), :[],
          s(:str, "TEST")),
        s(:block,
          s(:send,
            s(:send,
              s(:self), :instance_methods), :each),
          s(:args,
            s(:arg, :method)),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :method), :=~,
                s(:regexp,
                  s(:str, "^test_(.*)"),
                  s(:regopt))),
              s(:send,
                s(:nth_ref, 1), :!=,
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:str, "TEST")))),
            s(:send, nil, :private,
              s(:lvar, :method)), nil)), nil))))
