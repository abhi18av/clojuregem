s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "helper")),
  s(:module,
    s(:const, nil, :Psych),
    s(:class,
      s(:const, nil, :TestMergeKeys),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:class,
          s(:const, nil, :Product), nil,
          s(:send, nil, :attr_reader,
            s(:sym, :bar))),
        s(:def, :test_merge_key_with_bare_hash,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:dstr,
                  s(:str, "map:\n"),
                  s(:str, "  <<:\n"),
                  s(:str, "    hello: world\n")))),
            s(:lvasgn, :hash,
              s(:hash,
                s(:pair,
                  s(:str, "map"),
                  s(:hash,
                    s(:pair,
                      s(:str, "hello"),
                      s(:str, "world")))))),
            s(:send, nil, :assert_equal,
              s(:lvar, :hash),
              s(:lvar, :doc)))),
        s(:def, :test_roundtrip_with_chevron_key,
          s(:args),
          s(:begin,
            s(:lvasgn, :h,
              s(:hash)),
            s(:lvasgn, :v,
              s(:hash,
                s(:pair,
                  s(:str, "a"),
                  s(:lvar, :h)),
                s(:pair,
                  s(:str, "<<"),
                  s(:lvar, :h)))),
            s(:send, nil, :assert_cycle,
              s(:lvar, :v)))),
        s(:def, :test_explicit_string,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:dstr,
                  s(:str, "a: &me { hello: world }\n"),
                  s(:str, "b: { !!str '<<': *me }\n")))),
            s(:lvasgn, :expected,
              s(:hash,
                s(:pair,
                  s(:str, "a"),
                  s(:hash,
                    s(:pair,
                      s(:str, "hello"),
                      s(:str, "world")))),
                s(:pair,
                  s(:str, "b"),
                  s(:hash,
                    s(:pair,
                      s(:str, "<<"),
                      s(:hash,
                        s(:pair,
                          s(:str, "hello"),
                          s(:str, "world")))))))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:lvar, :doc)))),
        s(:def, :test_mergekey_with_object,
          s(:args),
          s(:begin,
            s(:lvasgn, :s,
              s(:dstr,
                s(:str, "foo: &foo\n"),
                s(:str, "  bar: 10\n"),
                s(:str, "product:\n"),
                s(:str, "  !ruby/object:"),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Product), :name)),
                s(:str, "\n"),
                s(:str, "  <<: *foo\n"))),
            s(:lvasgn, :hash,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:lvar, :s))),
            s(:send, nil, :assert_equal,
              s(:hash,
                s(:pair,
                  s(:str, "bar"),
                  s(:int, 10))),
              s(:send,
                s(:lvar, :hash), :[],
                s(:str, "foo"))),
            s(:lvasgn, :product,
              s(:send,
                s(:lvar, :hash), :[],
                s(:str, "product"))),
            s(:send, nil, :assert_equal,
              s(:int, 10),
              s(:send,
                s(:lvar, :product), :bar)))),
        s(:def, :test_merge_nil,
          s(:args),
          s(:begin,
            s(:lvasgn, :yaml,
              s(:dstr,
                s(:str, "defaults: &defaults\n"),
                s(:str, "development:\n"),
                s(:str, "  <<: *defaults\n"))),
            s(:send, nil, :assert_equal,
              s(:hash,
                s(:pair,
                  s(:str, "<<"),
                  s(:nil))),
              s(:send,
                s(:send,
                  s(:const, nil, :Psych), :load,
                  s(:lvar, :yaml)), :[],
                s(:str, "development"))))),
        s(:def, :test_merge_array,
          s(:args),
          s(:begin,
            s(:lvasgn, :yaml,
              s(:dstr,
                s(:str, "foo: &hello\n"),
                s(:str, "- 1\n"),
                s(:str, "baz:\n"),
                s(:str, "  <<: *hello\n"))),
            s(:send, nil, :assert_equal,
              s(:hash,
                s(:pair,
                  s(:str, "<<"),
                  s(:array,
                    s(:int, 1)))),
              s(:send,
                s(:send,
                  s(:const, nil, :Psych), :load,
                  s(:lvar, :yaml)), :[],
                s(:str, "baz"))))),
        s(:def, :test_merge_is_not_partial,
          s(:args),
          s(:begin,
            s(:lvasgn, :yaml,
              s(:dstr,
                s(:str, "default: &default\n"),
                s(:str, "  hello: world\n"),
                s(:str, "foo: &hello\n"),
                s(:str, "- 1\n"),
                s(:str, "baz:\n"),
                s(:str, "  <<: [*hello, *default]\n"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:lvar, :yaml))),
            s(:send, nil, :refute,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :[],
                  s(:str, "baz")), :key?,
                s(:str, "hello"))),
            s(:send, nil, :assert_equal,
              s(:hash,
                s(:pair,
                  s(:str, "<<"),
                  s(:array,
                    s(:array,
                      s(:int, 1)),
                    s(:hash,
                      s(:pair,
                        s(:str, "hello"),
                        s(:str, "world")))))),
              s(:send,
                s(:send,
                  s(:const, nil, :Psych), :load,
                  s(:lvar, :yaml)), :[],
                s(:str, "baz"))))),
        s(:def, :test_merge_seq_nil,
          s(:args),
          s(:begin,
            s(:lvasgn, :yaml,
              s(:dstr,
                s(:str, "foo: &hello\n"),
                s(:str, "baz:\n"),
                s(:str, "  <<: [*hello]\n"))),
            s(:send, nil, :assert_equal,
              s(:hash,
                s(:pair,
                  s(:str, "<<"),
                  s(:array,
                    s(:nil)))),
              s(:send,
                s(:send,
                  s(:const, nil, :Psych), :load,
                  s(:lvar, :yaml)), :[],
                s(:str, "baz"))))),
        s(:def, :test_bad_seq_merge,
          s(:args),
          s(:begin,
            s(:lvasgn, :yaml,
              s(:dstr,
                s(:str, "defaults: &defaults [1, 2, 3]\n"),
                s(:str, "development:\n"),
                s(:str, "  <<: *defaults\n"))),
            s(:send, nil, :assert_equal,
              s(:hash,
                s(:pair,
                  s(:str, "<<"),
                  s(:array,
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3)))),
              s(:send,
                s(:send,
                  s(:const, nil, :Psych), :load,
                  s(:lvar, :yaml)), :[],
                s(:str, "development"))))),
        s(:def, :test_missing_merge_key,
          s(:args),
          s(:begin,
            s(:lvasgn, :yaml,
              s(:dstr,
                s(:str, "bar:\n"),
                s(:str, "  << : *foo\n"))),
            s(:lvasgn, :exp,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :Psych), :BadAlias)),
                s(:args),
                s(:send,
                  s(:const, nil, :Psych), :load,
                  s(:lvar, :yaml)))),
            s(:send, nil, :assert_match,
              s(:str, "foo"),
              s(:send,
                s(:lvar, :exp), :message)))),
        s(:def, :test_merge_key,
          s(:args),
          s(:begin,
            s(:lvasgn, :yaml,
              s(:dstr,
                s(:str, "foo: &foo\n"),
                s(:str, "  hello: world\n"),
                s(:str, "bar:\n"),
                s(:str, "  << : *foo\n"),
                s(:str, "  baz: boo\n"))),
            s(:lvasgn, :hash,
              s(:hash,
                s(:pair,
                  s(:str, "foo"),
                  s(:hash,
                    s(:pair,
                      s(:str, "hello"),
                      s(:str, "world")))),
                s(:pair,
                  s(:str, "bar"),
                  s(:hash,
                    s(:pair,
                      s(:str, "hello"),
                      s(:str, "world")),
                    s(:pair,
                      s(:str, "baz"),
                      s(:str, "boo")))))),
            s(:send, nil, :assert_equal,
              s(:lvar, :hash),
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:lvar, :yaml))))),
        s(:def, :test_multiple_maps,
          s(:args),
          s(:begin,
            s(:lvasgn, :yaml,
              s(:dstr,
                s(:str, "---\n"),
                s(:str, "- &CENTER { x: 1, y: 2 }\n"),
                s(:str, "- &LEFT { x: 0, y: 2 }\n"),
                s(:str, "- &BIG { r: 10 }\n"),
                s(:str, "- &SMALL { r: 1 }\n"),
                s(:str, "\n"),
                s(:str, "# All the following maps are equal:\n"),
                s(:str, "\n"),
                s(:str, "- # Merge multiple maps\n"),
                s(:str, "  << : [ *CENTER, *BIG ]\n"),
                s(:str, "  label: center/big\n"))),
            s(:lvasgn, :hash,
              s(:hash,
                s(:pair,
                  s(:str, "x"),
                  s(:int, 1)),
                s(:pair,
                  s(:str, "y"),
                  s(:int, 2)),
                s(:pair,
                  s(:str, "r"),
                  s(:int, 10)),
                s(:pair,
                  s(:str, "label"),
                  s(:str, "center/big")))),
            s(:send, nil, :assert_equal,
              s(:lvar, :hash),
              s(:send,
                s(:send,
                  s(:const, nil, :Psych), :load,
                  s(:lvar, :yaml)), :[],
                s(:int, 4))))),
        s(:def, :test_override,
          s(:args),
          s(:begin,
            s(:lvasgn, :yaml,
              s(:dstr,
                s(:str, "---\n"),
                s(:str, "- &CENTER { x: 1, y: 2 }\n"),
                s(:str, "- &LEFT { x: 0, y: 2 }\n"),
                s(:str, "- &BIG { r: 10 }\n"),
                s(:str, "- &SMALL { r: 1 }\n"),
                s(:str, "\n"),
                s(:str, "# All the following maps are equal:\n"),
                s(:str, "\n"),
                s(:str, "- # Override\n"),
                s(:str, "  << : [ *BIG, *LEFT, *SMALL ]\n"),
                s(:str, "  x: 1\n"),
                s(:str, "  label: center/big\n"))),
            s(:lvasgn, :hash,
              s(:hash,
                s(:pair,
                  s(:str, "x"),
                  s(:int, 1)),
                s(:pair,
                  s(:str, "y"),
                  s(:int, 2)),
                s(:pair,
                  s(:str, "r"),
                  s(:int, 10)),
                s(:pair,
                  s(:str, "label"),
                  s(:str, "center/big")))),
            s(:send, nil, :assert_equal,
              s(:lvar, :hash),
              s(:send,
                s(:send,
                  s(:const, nil, :Psych), :load,
                  s(:lvar, :yaml)), :[],
                s(:int, 4)))))))))
