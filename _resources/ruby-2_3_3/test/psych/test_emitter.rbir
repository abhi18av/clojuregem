s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "helper")),
  s(:module,
    s(:const, nil, :Psych),
    s(:class,
      s(:const, nil, :TestEmitter),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:zsuper),
            s(:ivasgn, :@out,
              s(:send,
                s(:const, nil, :StringIO), :new,
                s(:str, ""))),
            s(:ivasgn, :@emitter,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Emitter), :new,
                s(:ivar, :@out))))),
        s(:def, :test_line_width,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@emitter), :line_width=,
              s(:int, 10)),
            s(:send, nil, :assert_equal,
              s(:int, 10),
              s(:send,
                s(:ivar, :@emitter), :line_width)))),
        s(:def, :test_set_canonical,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@emitter), :canonical=,
              s(:true)),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:ivar, :@emitter), :canonical)),
            s(:send,
              s(:ivar, :@emitter), :canonical=,
              s(:false)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:ivar, :@emitter), :canonical)))),
        s(:def, :test_indentation_set,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:ivar, :@emitter), :indentation)),
            s(:send,
              s(:ivar, :@emitter), :indentation=,
              s(:int, 5)),
            s(:send, nil, :assert_equal,
              s(:int, 5),
              s(:send,
                s(:ivar, :@emitter), :indentation)))),
        s(:def, :test_emit_utf_8,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@emitter), :start_stream,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Psych), :Nodes), :Stream), :UTF8)),
            s(:send,
              s(:ivar, :@emitter), :start_document,
              s(:array),
              s(:array),
              s(:false)),
            s(:send,
              s(:ivar, :@emitter), :scalar,
              s(:str, "日本語"),
              s(:nil),
              s(:nil),
              s(:false),
              s(:true),
              s(:int, 1)),
            s(:send,
              s(:ivar, :@emitter), :end_document,
              s(:true)),
            s(:send,
              s(:ivar, :@emitter), :end_stream),
            s(:send, nil, :assert_match,
              s(:str, "日本語"),
              s(:send,
                s(:ivar, :@out), :string)))),
        s(:def, :test_start_stream_arg_error,
          s(:args),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:ivar, :@emitter), :start_stream,
              s(:str, "asdfasdf")))),
        s(:def, :test_start_doc_arg_error,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@emitter), :start_stream,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Psych), :Nodes), :Stream), :UTF8)),
            s(:block,
              s(:send,
                s(:array,
                  s(:array,
                    s(:nil),
                    s(:array),
                    s(:false)),
                  s(:array,
                    s(:array,
                      s(:nil),
                      s(:nil)),
                    s(:array),
                    s(:false)),
                  s(:array,
                    s(:array),
                    s(:str, "foo"),
                    s(:false)),
                  s(:array,
                    s(:array),
                    s(:array,
                      s(:str, "foo")),
                    s(:false)),
                  s(:array,
                    s(:array),
                    s(:array,
                      s(:nil),
                      s(:nil)),
                    s(:false)),
                  s(:array,
                    s(:array,
                      s(:int, 1),
                      s(:int, 1)),
                    s(:array,
                      s(:array,
                        s(:nil),
                        s(:str, "tag:TALOS"))),
                    s(:int, 0))), :each),
              s(:args,
                s(:arg, :args)),
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const, nil, :TypeError)),
                s(:args),
                s(:send,
                  s(:ivar, :@emitter), :start_document,
                  s(:splat,
                    s(:lvar, :args))))))),
        s(:def, :test_scalar_arg_error,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@emitter), :start_stream,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Psych), :Nodes), :Stream), :UTF8)),
            s(:send,
              s(:ivar, :@emitter), :start_document,
              s(:array),
              s(:array),
              s(:false)),
            s(:block,
              s(:send,
                s(:array,
                  s(:array,
                    s(:sym, :foo),
                    s(:nil),
                    s(:nil),
                    s(:false),
                    s(:true),
                    s(:int, 1)),
                  s(:array,
                    s(:str, "foo"),
                    s(:send,
                      s(:const, nil, :Object), :new),
                    s(:nil),
                    s(:false),
                    s(:true),
                    s(:int, 1)),
                  s(:array,
                    s(:str, "foo"),
                    s(:nil),
                    s(:send,
                      s(:const, nil, :Object), :new),
                    s(:false),
                    s(:true),
                    s(:int, 1)),
                  s(:array,
                    s(:str, "foo"),
                    s(:nil),
                    s(:nil),
                    s(:false),
                    s(:true),
                    s(:sym, :foo)),
                  s(:array,
                    s(:nil),
                    s(:nil),
                    s(:nil),
                    s(:false),
                    s(:true),
                    s(:int, 1))), :each),
              s(:args,
                s(:arg, :args)),
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const, nil, :TypeError)),
                s(:args),
                s(:send,
                  s(:ivar, :@emitter), :scalar,
                  s(:splat,
                    s(:lvar, :args))))))),
        s(:def, :test_start_sequence_arg_error,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@emitter), :start_stream,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Psych), :Nodes), :Stream), :UTF8)),
            s(:send,
              s(:ivar, :@emitter), :start_document,
              s(:array),
              s(:array),
              s(:false)),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :TypeError)),
              s(:args),
              s(:send,
                s(:ivar, :@emitter), :start_sequence,
                s(:nil),
                s(:send,
                  s(:const, nil, :Object), :new),
                s(:true),
                s(:int, 1))),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :TypeError)),
              s(:args),
              s(:send,
                s(:ivar, :@emitter), :start_sequence,
                s(:nil),
                s(:nil),
                s(:true),
                s(:sym, :foo))))),
        s(:def, :test_resizing_tags,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@emitter), :start_stream,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Psych), :Nodes), :Stream), :UTF8)),
            s(:lvasgn, :tags,
              s(:array)),
            s(:lvasgn, :version,
              s(:array,
                s(:int, 1),
                s(:int, 1))),
            s(:lvasgn, :obj,
              s(:send,
                s(:const, nil, :Object), :new)),
            s(:send,
              s(:lvar, :obj), :instance_variable_set,
              s(:sym, :@tags),
              s(:lvar, :tags)),
            s(:defs,
              s(:lvar, :obj), :to_str,
              s(:args),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:int, 1),
                        s(:int, 10))), :map),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:ivar, :@tags), :push,
                    s(:array,
                      s(:str, "AAAA"),
                      s(:str, "BBBB")))),
                s(:return,
                  s(:str, "x")))),
            s(:send,
              s(:lvar, :tags), :push,
              s(:array,
                s(:lvar, :obj),
                s(:str, "tag:TALOS"))),
            s(:send,
              s(:ivar, :@emitter), :start_document,
              s(:lvar, :version),
              s(:lvar, :tags),
              s(:int, 0)),
            s(:send, nil, :assert,
              s(:true))))))))
