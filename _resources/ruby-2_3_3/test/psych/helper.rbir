s(:begin,
  s(:send, nil, :require,
    s(:str, "minitest/autorun")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:send, nil, :require,
    s(:str, "date")),
  s(:send, nil, :require,
    s(:str, "psych")),
  s(:module,
    s(:const, nil, :Psych),
    s(:begin,
      s(:lvasgn, :superclass,
        s(:if,
          s(:defined?,
            s(:const,
              s(:const, nil, :Minitest), :Test)),
          s(:const,
            s(:const, nil, :Minitest), :Test),
          s(:const,
            s(:const,
              s(:const, nil, :MiniTest), :Unit), :TestCase))),
      s(:class,
        s(:const, nil, :TestCase),
        s(:lvar, :superclass),
        s(:begin,
          s(:defs,
            s(:self), :suppress_warning,
            s(:args),
            s(:ensure,
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :verbose),
                    s(:gvasgn, :$VERBOSE)),
                  s(:array,
                    s(:gvar, :$VERBOSE),
                    s(:nil))),
                s(:yield)),
              s(:gvasgn, :$VERBOSE,
                s(:lvar, :verbose)))),
          s(:def, :with_default_external,
            s(:args,
              s(:arg, :enc)),
            s(:ensure,
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :verbose),
                    s(:gvasgn, :$VERBOSE)),
                  s(:array,
                    s(:gvar, :$VERBOSE),
                    s(:nil))),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :origenc),
                    s(:send,
                      s(:const, nil, :Encoding), :default_external=)),
                  s(:array,
                    s(:send,
                      s(:const, nil, :Encoding), :default_external),
                    s(:lvar, :enc))),
                s(:gvasgn, :$VERBOSE,
                  s(:lvar, :verbose)),
                s(:yield)),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :verbose),
                    s(:gvasgn, :$VERBOSE)),
                  s(:array,
                    s(:gvar, :$VERBOSE),
                    s(:nil))),
                s(:send,
                  s(:const, nil, :Encoding), :default_external=,
                  s(:lvar, :origenc)),
                s(:gvasgn, :$VERBOSE,
                  s(:lvar, :verbose))))),
          s(:def, :with_default_internal,
            s(:args,
              s(:arg, :enc)),
            s(:ensure,
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :verbose),
                    s(:gvasgn, :$VERBOSE)),
                  s(:array,
                    s(:gvar, :$VERBOSE),
                    s(:nil))),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :origenc),
                    s(:send,
                      s(:const, nil, :Encoding), :default_internal=)),
                  s(:array,
                    s(:send,
                      s(:const, nil, :Encoding), :default_internal),
                    s(:lvar, :enc))),
                s(:gvasgn, :$VERBOSE,
                  s(:lvar, :verbose)),
                s(:yield)),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :verbose),
                    s(:gvasgn, :$VERBOSE)),
                  s(:array,
                    s(:gvar, :$VERBOSE),
                    s(:nil))),
                s(:send,
                  s(:const, nil, :Encoding), :default_internal=,
                  s(:lvar, :origenc)),
                s(:gvasgn, :$VERBOSE,
                  s(:lvar, :verbose))))),
          s(:def, :assert_to_yaml,
            s(:args,
              s(:arg, :obj),
              s(:arg, :yaml)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:lvar, :obj),
                s(:send,
                  s(:const, nil, :Psych), :load,
                  s(:lvar, :yaml))),
              s(:send, nil, :assert_equal,
                s(:lvar, :obj),
                s(:send,
                  s(:send,
                    s(:const, nil, :Psych), :parse,
                    s(:lvar, :yaml)), :transform)),
              s(:send, nil, :assert_equal,
                s(:lvar, :obj),
                s(:send,
                  s(:const, nil, :Psych), :load,
                  s(:send,
                    s(:lvar, :obj), :psych_to_yaml))),
              s(:send, nil, :assert_equal,
                s(:lvar, :obj),
                s(:send,
                  s(:send,
                    s(:const, nil, :Psych), :parse,
                    s(:send,
                      s(:lvar, :obj), :psych_to_yaml)), :transform)),
              s(:send, nil, :assert_equal,
                s(:lvar, :obj),
                s(:send,
                  s(:const, nil, :Psych), :load,
                  s(:send,
                    s(:lvar, :obj), :psych_to_yaml,
                    s(:hash,
                      s(:pair,
                        s(:sym, :UseVersion),
                        s(:true)),
                      s(:pair,
                        s(:sym, :UseHeader),
                        s(:true)),
                      s(:pair,
                        s(:sym, :SortKeys),
                        s(:true)))))))),
          s(:def, :assert_parse_only,
            s(:args,
              s(:arg, :obj),
              s(:arg, :yaml)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:lvar, :obj),
                s(:send,
                  s(:const, nil, :Psych), :load,
                  s(:lvar, :yaml))),
              s(:send, nil, :assert_equal,
                s(:lvar, :obj),
                s(:send,
                  s(:send,
                    s(:const, nil, :Psych), :parse,
                    s(:lvar, :yaml)), :transform)))),
          s(:def, :assert_cycle,
            s(:args,
              s(:arg, :obj)),
            s(:begin,
              s(:lvasgn, :v,
                s(:send,
                  s(:const,
                    s(:const, nil, :Visitors), :YAMLTree), :create)),
              s(:send,
                s(:lvar, :v), :<<,
                s(:lvar, :obj)),
              s(:send, nil, :assert_equal,
                s(:lvar, :obj),
                s(:send,
                  s(:const, nil, :Psych), :load,
                  s(:send,
                    s(:send,
                      s(:lvar, :v), :tree), :yaml))),
              s(:send, nil, :assert_equal,
                s(:lvar, :obj),
                s(:send,
                  s(:const, nil, :Psych), :load,
                  s(:send,
                    s(:const, nil, :Psych), :dump,
                    s(:lvar, :obj)))),
              s(:send, nil, :assert_equal,
                s(:lvar, :obj),
                s(:send,
                  s(:const, nil, :Psych), :load,
                  s(:send,
                    s(:lvar, :obj), :psych_to_yaml))))),
          s(:def, :mktime,
            s(:args,
              s(:arg, :year),
              s(:arg, :mon),
              s(:arg, :day),
              s(:arg, :hour),
              s(:arg, :min),
              s(:arg, :sec),
              s(:arg, :usec),
              s(:optarg, :zone,
                s(:str, "Z"))),
            s(:begin,
              s(:lvasgn, :usec,
                s(:send,
                  s(:send, nil, :Rational,
                    s(:send,
                      s(:lvar, :usec), :to_s)), :*,
                  s(:int, 1000000))),
              s(:lvasgn, :val,
                s(:send,
                  s(:const, nil, :Time), :utc,
                  s(:send,
                    s(:lvar, :year), :to_i),
                  s(:send,
                    s(:lvar, :mon), :to_i),
                  s(:send,
                    s(:lvar, :day), :to_i),
                  s(:send,
                    s(:lvar, :hour), :to_i),
                  s(:send,
                    s(:lvar, :min), :to_i),
                  s(:send,
                    s(:lvar, :sec), :to_i),
                  s(:lvar, :usec))),
              s(:if,
                s(:send,
                  s(:lvar, :zone), :!=,
                  s(:str, "Z")),
                s(:begin,
                  s(:lvasgn, :hour,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :zone), :[],
                          s(:int, 0),
                          s(:int, 3)), :to_i), :*,
                      s(:int, 3600))),
                  s(:lvasgn, :min,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :zone), :[],
                          s(:int, 3),
                          s(:int, 2)), :to_i), :*,
                      s(:int, 60))),
                  s(:lvasgn, :ofs,
                    s(:begin,
                      s(:send,
                        s(:lvar, :hour), :+,
                        s(:lvar, :min)))),
                  s(:lvasgn, :val,
                    s(:send,
                      s(:const, nil, :Time), :at,
                      s(:send,
                        s(:send,
                          s(:lvar, :val), :tv_sec), :-,
                        s(:lvar, :ofs)),
                      s(:send,
                        s(:send,
                          s(:lvar, :val), :tv_nsec), :/,
                        s(:float, 1000.0))))), nil),
              s(:return,
                s(:lvar, :val)))))))),
  s(:if,
    s(:send,
      s(:const, nil, :Tempfile), :respond_to?,
      s(:sym, :create)), nil,
    s(:defs,
      s(:const, nil, :Tempfile), :create,
      s(:args,
        s(:arg, :basename),
        s(:restarg, :rest)),
      s(:begin,
        s(:lvasgn, :tmpfile,
          s(:nil)),
        s(:block,
          s(:send,
            s(:const,
              s(:const, nil, :Dir), :Tmpname), :create,
            s(:lvar, :basename),
            s(:splat,
              s(:lvar, :rest))),
          s(:args,
            s(:arg, :tmpname),
            s(:arg, :n),
            s(:arg, :opts)),
          s(:begin,
            s(:lvasgn, :mode,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :File), :RDWR), :|,
                  s(:const,
                    s(:const, nil, :File), :CREAT)), :|,
                s(:const,
                  s(:const, nil, :File), :EXCL))),
            s(:lvasgn, :perm,
              s(:int, 384)),
            s(:if,
              s(:lvar, :opts),
              s(:begin,
                s(:op_asgn,
                  s(:lvasgn, :mode), :|,
                  s(:or,
                    s(:send,
                      s(:lvar, :opts), :delete,
                      s(:sym, :mode)),
                    s(:int, 0))),
                s(:send,
                  s(:lvar, :opts), :[]=,
                  s(:sym, :perm),
                  s(:lvar, :perm)),
                s(:lvasgn, :perm,
                  s(:nil))),
              s(:lvasgn, :opts,
                s(:lvar, :perm))),
            s(:lvasgn, :tmpfile,
              s(:send,
                s(:const, nil, :File), :open,
                s(:lvar, :tmpname),
                s(:lvar, :mode),
                s(:lvar, :opts))))),
        s(:if,
          s(:send, nil, :block_given?),
          s(:kwbegin,
            s(:ensure,
              s(:yield,
                s(:lvar, :tmpfile)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :tmpfile), :closed?), :!),
                  s(:send,
                    s(:lvar, :tmpfile), :close), nil),
                s(:send,
                  s(:const, nil, :File), :unlink,
                  s(:lvar, :tmpfile))))),
          s(:lvar, :tmpfile))))))
