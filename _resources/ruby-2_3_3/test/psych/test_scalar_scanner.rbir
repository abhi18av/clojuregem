s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "helper")),
  s(:send, nil, :require,
    s(:str, "date")),
  s(:module,
    s(:const, nil, :Psych),
    s(:class,
      s(:const, nil, :TestScalarScanner),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:send, nil, :attr_reader,
          s(:sym, :ss)),
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:zsuper),
            s(:ivasgn, :@ss,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :ScalarScanner), :new,
                s(:send,
                  s(:const, nil, :ClassLoader), :new))))),
        s(:def, :test_scan_time,
          s(:args),
          s(:block,
            s(:send,
              s(:hash,
                s(:pair,
                  s(:str, "2001-12-15T02:59:43.1Z"),
                  s(:send,
                    s(:const, nil, :Time), :utc,
                    s(:int, 2001),
                    s(:int, 12),
                    s(:int, 15),
                    s(:int, 2),
                    s(:int, 59),
                    s(:int, 43),
                    s(:int, 100000))),
                s(:pair,
                  s(:str, "2001-12-14t21:59:43.10-05:00"),
                  s(:send,
                    s(:const, nil, :Time), :utc,
                    s(:int, 2001),
                    s(:int, 12),
                    s(:int, 15),
                    s(:int, 2),
                    s(:int, 59),
                    s(:int, 43),
                    s(:int, 100000))),
                s(:pair,
                  s(:str, "2001-12-14 21:59:43.10 -5"),
                  s(:send,
                    s(:const, nil, :Time), :utc,
                    s(:int, 2001),
                    s(:int, 12),
                    s(:int, 15),
                    s(:int, 2),
                    s(:int, 59),
                    s(:int, 43),
                    s(:int, 100000))),
                s(:pair,
                  s(:str, "2001-12-15 2:59:43.10"),
                  s(:send,
                    s(:const, nil, :Time), :utc,
                    s(:int, 2001),
                    s(:int, 12),
                    s(:int, 15),
                    s(:int, 2),
                    s(:int, 59),
                    s(:int, 43),
                    s(:int, 100000))),
                s(:pair,
                  s(:str, "2011-02-24 11:17:06 -0800"),
                  s(:send,
                    s(:const, nil, :Time), :utc,
                    s(:int, 2011),
                    s(:int, 2),
                    s(:int, 24),
                    s(:int, 19),
                    s(:int, 17),
                    s(:int, 6)))), :each),
            s(:args,
              s(:arg, :time_str),
              s(:arg, :time)),
            s(:send, nil, :assert_equal,
              s(:lvar, :time),
              s(:send,
                s(:ivar, :@ss), :tokenize,
                s(:lvar, :time_str))))),
        s(:def, :test_scan_bad_time,
          s(:args),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "2001-12-15T02:59:73.1Z"),
                s(:str, "2001-12-14t90:59:43.10-05:00"),
                s(:str, "2001-92-14 21:59:43.10 -5"),
                s(:str, "2001-12-15 92:59:43.10"),
                s(:str, "2011-02-24 81:17:06 -0800")), :each),
            s(:args,
              s(:arg, :time_str)),
            s(:send, nil, :assert_equal,
              s(:lvar, :time_str),
              s(:send,
                s(:ivar, :@ss), :tokenize,
                s(:lvar, :time_str))))),
        s(:def, :test_scan_bad_dates,
          s(:args),
          s(:begin,
            s(:lvasgn, :x,
              s(:str, "2000-15-01")),
            s(:send, nil, :assert_equal,
              s(:lvar, :x),
              s(:send,
                s(:ivar, :@ss), :tokenize,
                s(:lvar, :x))),
            s(:lvasgn, :x,
              s(:str, "2000-10-51")),
            s(:send, nil, :assert_equal,
              s(:lvar, :x),
              s(:send,
                s(:ivar, :@ss), :tokenize,
                s(:lvar, :x))),
            s(:lvasgn, :x,
              s(:str, "2000-10-32")),
            s(:send, nil, :assert_equal,
              s(:lvar, :x),
              s(:send,
                s(:ivar, :@ss), :tokenize,
                s(:lvar, :x))))),
        s(:def, :test_scan_good_edge_date,
          s(:args),
          s(:begin,
            s(:lvasgn, :x,
              s(:str, "2000-1-31")),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :Date), :strptime,
                s(:lvar, :x),
                s(:str, "%Y-%m-%d")),
              s(:send,
                s(:ivar, :@ss), :tokenize,
                s(:lvar, :x))))),
        s(:def, :test_scan_bad_edge_date,
          s(:args),
          s(:begin,
            s(:lvasgn, :x,
              s(:str, "2000-11-31")),
            s(:send, nil, :assert_equal,
              s(:lvar, :x),
              s(:send,
                s(:ivar, :@ss), :tokenize,
                s(:lvar, :x))))),
        s(:def, :test_scan_date,
          s(:args),
          s(:begin,
            s(:lvasgn, :date,
              s(:str, "1980-12-16")),
            s(:lvasgn, :token,
              s(:send,
                s(:ivar, :@ss), :tokenize,
                s(:lvar, :date))),
            s(:send, nil, :assert_equal,
              s(:int, 1980),
              s(:send,
                s(:lvar, :token), :year)),
            s(:send, nil, :assert_equal,
              s(:int, 12),
              s(:send,
                s(:lvar, :token), :month)),
            s(:send, nil, :assert_equal,
              s(:int, 16),
              s(:send,
                s(:lvar, :token), :day)))),
        s(:def, :test_scan_inf,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 1), :/,
              s(:float, 0.0)),
            s(:send,
              s(:send, nil, :ss), :tokenize,
              s(:str, ".inf")))),
        s(:def, :test_scan_minus_inf,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, -1), :/,
              s(:float, 0.0)),
            s(:send,
              s(:send, nil, :ss), :tokenize,
              s(:str, "-.inf")))),
        s(:def, :test_scan_nan,
          s(:args),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:send, nil, :ss), :tokenize,
                s(:str, ".nan")), :nan?))),
        s(:def, :test_scan_null,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:send, nil, :ss), :tokenize,
                s(:str, "null"))),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:send, nil, :ss), :tokenize,
                s(:str, "~"))),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:send, nil, :ss), :tokenize,
                s(:str, ""))))),
        s(:def, :test_scan_symbol,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:send, nil, :ss), :tokenize,
              s(:str, ":foo")))),
        s(:def, :test_scan_sexagesimal_float,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:float, 685230.15),
            s(:send,
              s(:send, nil, :ss), :tokenize,
              s(:str, "190:20:30.15")))),
        s(:def, :test_scan_sexagesimal_int,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:int, 685230),
            s(:send,
              s(:send, nil, :ss), :tokenize,
              s(:str, "190:20:30")))),
        s(:def, :test_scan_float,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:float, 1.2),
            s(:send,
              s(:send, nil, :ss), :tokenize,
              s(:str, "1.2")))),
        s(:def, :test_scan_true,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send, nil, :ss), :tokenize,
              s(:str, "true")))),
        s(:def, :test_scan_strings_starting_with_underscores,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:str, "_100"),
            s(:send,
              s(:send, nil, :ss), :tokenize,
              s(:str, "_100"))))))))
