s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "helper")),
  s(:module,
    s(:const, nil, :Psych),
    s(:class,
      s(:const, nil, :TestHash),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:class,
          s(:const, nil, :X),
          s(:const, nil, :Hash), nil),
        s(:class,
          s(:const, nil, :HashWithCustomInit),
          s(:const, nil, :Hash),
          s(:begin,
            s(:send, nil, :attr_reader,
              s(:sym, :obj)),
            s(:def, :initialize,
              s(:args,
                s(:arg, :obj)),
              s(:ivasgn, :@obj,
                s(:lvar, :obj))))),
        s(:class,
          s(:const, nil, :HashWithCustomInitNoIvar),
          s(:const, nil, :Hash),
          s(:def, :initialize,
            s(:args,
              s(:arg, :obj)), nil)),
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:zsuper),
            s(:ivasgn, :@hash,
              s(:hash,
                s(:pair,
                  s(:sym, :a),
                  s(:str, "b")))))),
        s(:def, :test_referenced_hash_with_ivar,
          s(:args),
          s(:begin,
            s(:lvasgn, :a,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3),
                s(:int, 4),
                s(:int, 5))),
            s(:lvasgn, :t1,
              s(:array,
                s(:send,
                  s(:const, nil, :HashWithCustomInit), :new,
                  s(:lvar, :a)))),
            s(:send,
              s(:lvar, :t1), :<<,
              s(:send,
                s(:lvar, :t1), :first)),
            s(:send, nil, :assert_cycle,
              s(:lvar, :t1)))),
        s(:def, :test_custom_initialized,
          s(:args),
          s(:begin,
            s(:lvasgn, :a,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3),
                s(:int, 4),
                s(:int, 5))),
            s(:lvasgn, :t1,
              s(:send,
                s(:const, nil, :HashWithCustomInit), :new,
                s(:lvar, :a))),
            s(:lvasgn, :t2,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:lvar, :t1)))),
            s(:send, nil, :assert_equal,
              s(:lvar, :t1),
              s(:lvar, :t2)),
            s(:send, nil, :assert_cycle,
              s(:lvar, :t1)))),
        s(:def, :test_custom_initialize_no_ivar,
          s(:args),
          s(:begin,
            s(:lvasgn, :t1,
              s(:send,
                s(:const, nil, :HashWithCustomInitNoIvar), :new,
                s(:nil))),
            s(:lvasgn, :t2,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:lvar, :t1)))),
            s(:send, nil, :assert_equal,
              s(:lvar, :t1),
              s(:lvar, :t2)),
            s(:send, nil, :assert_cycle,
              s(:lvar, :t1)))),
        s(:def, :test_hash_subclass_with_ivars,
          s(:args),
          s(:begin,
            s(:lvasgn, :x,
              s(:send,
                s(:const, nil, :X), :new)),
            s(:send,
              s(:lvar, :x), :[]=,
              s(:sym, :a),
              s(:str, "b")),
            s(:send,
              s(:lvar, :x), :instance_variable_set,
              s(:sym, :@foo),
              s(:str, "bar")),
            s(:lvasgn, :dup,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:lvar, :x)))),
            s(:send, nil, :assert_cycle,
              s(:lvar, :x)),
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:lvar, :dup), :instance_variable_get,
                s(:sym, :@foo))),
            s(:send, nil, :assert_equal,
              s(:const, nil, :X),
              s(:send,
                s(:lvar, :dup), :class)))),
        s(:def, :test_load_with_class_syck_compatibility,
          s(:args),
          s(:begin,
            s(:lvasgn, :hash,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:str, "--- !ruby/object:Hash\n:user_id: 7\n:username: Lucas\n"))),
            s(:send, nil, :assert_equal,
              s(:hash,
                s(:pair,
                  s(:sym, :user_id),
                  s(:int, 7)),
                s(:pair,
                  s(:sym, :username),
                  s(:str, "Lucas"))),
              s(:lvar, :hash)))),
        s(:def, :test_empty_subclass,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_match,
              s(:dstr,
                s(:str, "!ruby/hash:"),
                s(:begin,
                  s(:const, nil, :X))),
              s(:send,
                s(:const, nil, :Psych), :dump,
                s(:send,
                  s(:const, nil, :X), :new))),
            s(:lvasgn, :x,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:send,
                    s(:const, nil, :X), :new)))),
            s(:send, nil, :assert_equal,
              s(:const, nil, :X),
              s(:send,
                s(:lvar, :x), :class)))),
        s(:def, :test_map,
          s(:args),
          s(:begin,
            s(:lvasgn, :x,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:dstr,
                  s(:str, "--- !map:"),
                  s(:begin,
                    s(:const, nil, :X)),
                  s(:str, " { }\n")))),
            s(:send, nil, :assert_equal,
              s(:const, nil, :X),
              s(:send,
                s(:lvar, :x), :class)))),
        s(:def, :test_self_referential,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@hash), :[]=,
              s(:str, "self"),
              s(:ivar, :@hash)),
            s(:send, nil, :assert_cycle,
              s(:ivar, :@hash)))),
        s(:def, :test_cycles,
          s(:args),
          s(:send, nil, :assert_cycle,
            s(:ivar, :@hash))),
        s(:def, :test_ref_append,
          s(:args),
          s(:begin,
            s(:lvasgn, :hash,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:dstr,
                  s(:str, "---\n"),
                  s(:str, "foo: &foo\n"),
                  s(:str, "  hello: world\n"),
                  s(:str, "bar:\n"),
                  s(:str, "  <<: *foo\n")))),
            s(:send, nil, :assert_equal,
              s(:hash,
                s(:pair,
                  s(:str, "foo"),
                  s(:hash,
                    s(:pair,
                      s(:str, "hello"),
                      s(:str, "world")))),
                s(:pair,
                  s(:str, "bar"),
                  s(:hash,
                    s(:pair,
                      s(:str, "hello"),
                      s(:str, "world"))))),
              s(:lvar, :hash))))))))
