s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "helper")),
  s(:module,
    s(:const, nil, :Psych),
    s(:class,
      s(:const, nil, :TestParser),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:class,
          s(:const, nil, :EventCatcher),
          s(:const, nil, :Handler),
          s(:begin,
            s(:send, nil, :attr_accessor,
              s(:sym, :parser)),
            s(:send, nil, :attr_reader,
              s(:sym, :calls),
              s(:sym, :marks)),
            s(:def, :initialize,
              s(:args),
              s(:begin,
                s(:ivasgn, :@parser,
                  s(:nil)),
                s(:ivasgn, :@calls,
                  s(:array)),
                s(:ivasgn, :@marks,
                  s(:array)))),
            s(:block,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Handler), :instance_methods,
                      s(:true)), :-,
                    s(:send,
                      s(:const, nil, :Object), :instance_methods))), :each),
              s(:args,
                s(:arg, :m)),
              s(:send, nil, :class_eval,
                s(:dstr,
                  s(:str, "\n"),
                  s(:str, "          def "),
                  s(:begin,
                    s(:lvar, :m)),
                  s(:str, " *args\n"),
                  s(:str, "            super\n"),
                  s(:str, "            @marks << @parser.mark if @parser\n"),
                  s(:str, "            @calls << [:"),
                  s(:begin,
                    s(:lvar, :m)),
                  s(:str, ", args]\n"),
                  s(:str, "          end\n"),
                  s(:str, "        ")))))),
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:zsuper),
            s(:ivasgn, :@handler,
              s(:send,
                s(:const, nil, :EventCatcher), :new)),
            s(:ivasgn, :@parser,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Parser), :new,
                s(:ivar, :@handler))),
            s(:send,
              s(:ivar, :@handler), :parser=,
              s(:ivar, :@parser)))),
        s(:def, :test_ast_roundtrip,
          s(:args),
          s(:begin,
            s(:lvasgn, :parser,
              s(:send,
                s(:const, nil, :Psych), :parser)),
            s(:send,
              s(:lvar, :parser), :parse,
              s(:str, "null")),
            s(:lvasgn, :ast,
              s(:send,
                s(:send,
                  s(:lvar, :parser), :handler), :root)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "^null"),
                s(:regopt)),
              s(:send,
                s(:lvar, :ast), :yaml)))),
        s(:def, :test_exception_memory_leak,
          s(:args),
          s(:begin,
            s(:lvasgn, :yaml,
              s(:dstr,
                s(:str, "%YAML 1.1\n"),
                s(:str, "%TAG ! tag:tenderlovemaking.com,2009:\n"),
                s(:str, "--- &ponies\n"),
                s(:str, "- first element\n"),
                s(:str, "- *ponies\n"),
                s(:str, "- foo: bar\n"),
                s(:str, "...\n"))),
            s(:block,
              s(:send,
                s(:array,
                  s(:sym, :start_stream),
                  s(:sym, :start_document),
                  s(:sym, :end_document),
                  s(:sym, :alias),
                  s(:sym, :scalar),
                  s(:sym, :start_sequence),
                  s(:sym, :end_sequence),
                  s(:sym, :start_mapping),
                  s(:sym, :end_mapping),
                  s(:sym, :end_stream)), :each),
              s(:args,
                s(:arg, :method)),
              s(:begin,
                s(:lvasgn, :klass,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Class), :new,
                      s(:const,
                        s(:const, nil, :Psych), :Handler)),
                    s(:args),
                    s(:block,
                      s(:send, nil, :define_method,
                        s(:lvar, :method)),
                      s(:args,
                        s(:restarg, :args)),
                      s(:send, nil, :raise)))),
                s(:lvasgn, :parser,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Psych), :Parser), :new,
                    s(:send,
                      s(:lvar, :klass), :new))),
                s(:block,
                  s(:send,
                    s(:int, 2), :times),
                  s(:args),
                  s(:block,
                    s(:send, nil, :assert_raises,
                      s(:const, nil, :RuntimeError),
                      s(:send,
                        s(:lvar, :method), :to_s)),
                    s(:args),
                    s(:send,
                      s(:lvar, :parser), :parse,
                      s(:lvar, :yaml)))))))),
        s(:def, :test_multiparse,
          s(:args),
          s(:block,
            s(:send,
              s(:int, 3), :times),
            s(:args),
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "--- foo")))),
        s(:def, :test_filename,
          s(:args),
          s(:begin,
            s(:lvasgn, :ex,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :Psych), :SyntaxError)),
                s(:args),
                s(:send,
                  s(:ivar, :@parser), :parse,
                  s(:str, "--- `"),
                  s(:str, "omg!")))),
            s(:send, nil, :assert_match,
              s(:str, "omg!"),
              s(:send,
                s(:lvar, :ex), :message)))),
        s(:def, :test_line_numbers,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:send,
                  s(:ivar, :@parser), :mark), :line)),
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "---\n- hello\n- world")),
            s(:lvasgn, :line_calls,
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@handler), :marks), :map,
                  s(:block_pass,
                    s(:sym, :line))), :zip,
                s(:send,
                  s(:send,
                    s(:ivar, :@handler), :calls), :map,
                  s(:block_pass,
                    s(:sym, :first))))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:int, 0),
                  s(:sym, :start_stream)),
                s(:array,
                  s(:int, 0),
                  s(:sym, :start_document)),
                s(:array,
                  s(:int, 1),
                  s(:sym, :start_sequence)),
                s(:array,
                  s(:int, 2),
                  s(:sym, :scalar)),
                s(:array,
                  s(:int, 3),
                  s(:sym, :scalar)),
                s(:array,
                  s(:int, 3),
                  s(:sym, :end_sequence)),
                s(:array,
                  s(:int, 3),
                  s(:sym, :end_document)),
                s(:array,
                  s(:int, 3),
                  s(:sym, :end_stream))),
              s(:lvar, :line_calls)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send,
                  s(:ivar, :@parser), :mark), :line)))),
        s(:def, :test_column_numbers,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:send,
                  s(:ivar, :@parser), :mark), :column)),
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "---\n- hello\n- world")),
            s(:lvasgn, :col_calls,
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@handler), :marks), :map,
                  s(:block_pass,
                    s(:sym, :column))), :zip,
                s(:send,
                  s(:send,
                    s(:ivar, :@handler), :calls), :map,
                  s(:block_pass,
                    s(:sym, :first))))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:int, 0),
                  s(:sym, :start_stream)),
                s(:array,
                  s(:int, 3),
                  s(:sym, :start_document)),
                s(:array,
                  s(:int, 1),
                  s(:sym, :start_sequence)),
                s(:array,
                  s(:int, 0),
                  s(:sym, :scalar)),
                s(:array,
                  s(:int, 0),
                  s(:sym, :scalar)),
                s(:array,
                  s(:int, 0),
                  s(:sym, :end_sequence)),
                s(:array,
                  s(:int, 0),
                  s(:sym, :end_document)),
                s(:array,
                  s(:int, 0),
                  s(:sym, :end_stream))),
              s(:lvar, :col_calls)),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:send,
                  s(:ivar, :@parser), :mark), :column)))),
        s(:def, :test_index_numbers,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:send,
                  s(:ivar, :@parser), :mark), :index)),
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "---\n- hello\n- world")),
            s(:lvasgn, :idx_calls,
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@handler), :marks), :map,
                  s(:block_pass,
                    s(:sym, :index))), :zip,
                s(:send,
                  s(:send,
                    s(:ivar, :@handler), :calls), :map,
                  s(:block_pass,
                    s(:sym, :first))))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:int, 0),
                  s(:sym, :start_stream)),
                s(:array,
                  s(:int, 3),
                  s(:sym, :start_document)),
                s(:array,
                  s(:int, 5),
                  s(:sym, :start_sequence)),
                s(:array,
                  s(:int, 12),
                  s(:sym, :scalar)),
                s(:array,
                  s(:int, 19),
                  s(:sym, :scalar)),
                s(:array,
                  s(:int, 19),
                  s(:sym, :end_sequence)),
                s(:array,
                  s(:int, 19),
                  s(:sym, :end_document)),
                s(:array,
                  s(:int, 19),
                  s(:sym, :end_stream))),
              s(:lvar, :idx_calls)),
            s(:send, nil, :assert_equal,
              s(:int, 19),
              s(:send,
                s(:send,
                  s(:ivar, :@parser), :mark), :index)))),
        s(:def, :test_bom,
          s(:args),
          s(:begin,
            s(:lvasgn, :tadpole,
              s(:str, "おたまじゃくし")),
            s(:lvasgn, :yml,
              s(:send,
                s(:dstr,
                  s(:str, "﻿"),
                  s(:begin,
                    s(:lvar, :tadpole))), :encode,
                s(:str, "UTF-16LE"))),
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :yml)),
            s(:send, nil, :assert_equal,
              s(:lvar, :tadpole),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:ivar, :@parser), :handler), :calls), :[],
                    s(:int, 2)), :[],
                  s(:int, 1)), :first)))),
        s(:def, :test_external_encoding,
          s(:args),
          s(:begin,
            s(:lvasgn, :tadpole,
              s(:str, "おたまじゃくし")),
            s(:send,
              s(:ivar, :@parser), :external_encoding=,
              s(:const,
                s(:const,
                  s(:const, nil, :Psych), :Parser), :UTF16LE)),
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:send,
                s(:lvar, :tadpole), :encode,
                s(:str, "UTF-16LE"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :tadpole),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:ivar, :@parser), :handler), :calls), :[],
                    s(:int, 2)), :[],
                  s(:int, 1)), :first)))),
        s(:def, :test_bogus_io,
          s(:args),
          s(:begin,
            s(:lvasgn, :o,
              s(:send,
                s(:const, nil, :Object), :new)),
            s(:defs,
              s(:lvar, :o), :external_encoding,
              s(:args),
              s(:nil)),
            s(:defs,
              s(:lvar, :o), :read,
              s(:args,
                s(:arg, :len)),
              s(:self)),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :TypeError)),
              s(:args),
              s(:send,
                s(:ivar, :@parser), :parse,
                s(:lvar, :o))))),
        s(:def, :test_parse_io,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:send,
                s(:const, nil, :StringIO), :new,
                s(:str, "--- a"))),
            s(:send, nil, :assert_called,
              s(:sym, :start_stream)),
            s(:send, nil, :assert_called,
              s(:sym, :scalar)),
            s(:send, nil, :assert_called,
              s(:sym, :end_stream)))),
        s(:def, :test_syntax_error,
          s(:args),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const, nil, :Psych), :SyntaxError)),
            s(:args),
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "---\n\"foo\"\n\"bar\"\n")))),
        s(:def, :test_syntax_error_twice,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Psych), :SyntaxError)),
              s(:args),
              s(:send,
                s(:ivar, :@parser), :parse,
                s(:str, "---\n\"foo\"\n\"bar\"\n"))),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Psych), :SyntaxError)),
              s(:args),
              s(:send,
                s(:ivar, :@parser), :parse,
                s(:str, "---\n\"foo\"\n\"bar\"\n"))))),
        s(:def, :test_syntax_error_has_path_for_string,
          s(:args),
          s(:begin,
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :Psych), :SyntaxError)),
                s(:args),
                s(:send,
                  s(:ivar, :@parser), :parse,
                  s(:str, "---\n\"foo\"\n\"bar\"\n")))),
            s(:send, nil, :assert_match,
              s(:str, "(<unknown>):"),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_syntax_error_has_path_for_io,
          s(:args),
          s(:begin,
            s(:lvasgn, :io,
              s(:send,
                s(:const, nil, :StringIO), :new,
                s(:str, "---\n\"foo\"\n\"bar\"\n"))),
            s(:defs,
              s(:lvar, :io), :path,
              s(:args),
              s(:str, "hello!")),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :Psych), :SyntaxError)),
                s(:args),
                s(:send,
                  s(:ivar, :@parser), :parse,
                  s(:lvar, :io)))),
            s(:send, nil, :assert_match,
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:send,
                    s(:lvar, :io), :path)),
                s(:str, "):")),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_mapping_end,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "---\n!!map { key: value }")),
            s(:send, nil, :assert_called,
              s(:sym, :end_mapping)))),
        s(:def, :test_mapping_tag,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "---\n!!map { key: value }")),
            s(:send, nil, :assert_called,
              s(:sym, :start_mapping),
              s(:array,
                s(:str, "tag:yaml.org,2002:map"),
                s(:false),
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Mapping), :FLOW))))),
        s(:def, :test_mapping_anchor,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "---\n&A { key: value }")),
            s(:send, nil, :assert_called,
              s(:sym, :start_mapping),
              s(:array,
                s(:str, "A"),
                s(:true),
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Mapping), :FLOW))))),
        s(:def, :test_mapping_block,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "---\n  key: value")),
            s(:send, nil, :assert_called,
              s(:sym, :start_mapping),
              s(:array,
                s(:true),
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Mapping), :BLOCK))))),
        s(:def, :test_mapping_start,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "---\n{ key: value }")),
            s(:send, nil, :assert_called,
              s(:sym, :start_mapping)),
            s(:send, nil, :assert_called,
              s(:sym, :start_mapping),
              s(:array,
                s(:true),
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Mapping), :FLOW))))),
        s(:def, :test_sequence_end,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "---\n&A [1, 2]")),
            s(:send, nil, :assert_called,
              s(:sym, :end_sequence)))),
        s(:def, :test_sequence_start_anchor,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "---\n&A [1, 2]")),
            s(:send, nil, :assert_called,
              s(:sym, :start_sequence),
              s(:array,
                s(:str, "A"),
                s(:true),
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Sequence), :FLOW))))),
        s(:def, :test_sequence_start_tag,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "---\n!!seq [1, 2]")),
            s(:send, nil, :assert_called,
              s(:sym, :start_sequence),
              s(:array,
                s(:str, "tag:yaml.org,2002:seq"),
                s(:false),
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Sequence), :FLOW))))),
        s(:def, :test_sequence_start_flow,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "---\n[1, 2]")),
            s(:send, nil, :assert_called,
              s(:sym, :start_sequence),
              s(:array,
                s(:true),
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Sequence), :FLOW))))),
        s(:def, :test_sequence_start_block,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "---\n  - 1\n  - 2")),
            s(:send, nil, :assert_called,
              s(:sym, :start_sequence),
              s(:array,
                s(:true),
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Sequence), :BLOCK))))),
        s(:def, :test_literal_scalar,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:dstr,
                s(:str, "%YAML 1.1\n"),
                s(:str, "---\n"),
                s(:str, "\"literal\n\n        \ttext\n\"\n"))),
            s(:send, nil, :assert_called,
              s(:sym, :scalar),
              s(:array,
                s(:str, "literal text "),
                s(:false),
                s(:true),
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :DOUBLE_QUOTED))))),
        s(:def, :test_scalar,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "--- foo\n")),
            s(:send, nil, :assert_called,
              s(:sym, :scalar),
              s(:array,
                s(:str, "foo"),
                s(:true),
                s(:false),
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :PLAIN))))),
        s(:def, :test_scalar_with_tag,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "---\n!!str foo\n")),
            s(:send, nil, :assert_called,
              s(:sym, :scalar),
              s(:array,
                s(:str, "foo"),
                s(:str, "tag:yaml.org,2002:str"),
                s(:false),
                s(:false),
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :PLAIN))))),
        s(:def, :test_scalar_with_anchor,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "---\n&A foo\n")),
            s(:send, nil, :assert_called,
              s(:sym, :scalar),
              s(:array,
                s(:str, "foo"),
                s(:str, "A"),
                s(:true),
                s(:false),
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :PLAIN))))),
        s(:def, :test_scalar_plain_implicit,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "---\n&A foo\n")),
            s(:send, nil, :assert_called,
              s(:sym, :scalar),
              s(:array,
                s(:str, "foo"),
                s(:str, "A"),
                s(:true),
                s(:false),
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :PLAIN))))),
        s(:def, :test_alias,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:dstr,
                s(:str, "%YAML 1.1\n"),
                s(:str, "---\n"),
                s(:str, "!!seq [\n"),
                s(:str, "  !!str \"Without properties\",\n"),
                s(:str, "  &A !!str \"Anchored\",\n"),
                s(:str, "  !!str \"Tagged\",\n"),
                s(:str, "  *A,\n"),
                s(:str, "  !!str \"\",\n"),
                s(:str, "]\n"))),
            s(:send, nil, :assert_called,
              s(:sym, :alias),
              s(:array,
                s(:str, "A"))))),
        s(:def, :test_end_stream,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "--- foo\n")),
            s(:send, nil, :assert_called,
              s(:sym, :end_stream)))),
        s(:def, :test_start_stream,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "--- foo\n")),
            s(:send, nil, :assert_called,
              s(:sym, :start_stream)))),
        s(:def, :test_end_document_implicit,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "\"foo\"\n")),
            s(:send, nil, :assert_called,
              s(:sym, :end_document),
              s(:array,
                s(:true))))),
        s(:def, :test_end_document_explicit,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "\"foo\"\n...")),
            s(:send, nil, :assert_called,
              s(:sym, :end_document),
              s(:array,
                s(:false))))),
        s(:def, :test_start_document_version,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "%YAML 1.1\n---\n\"foo\"\n")),
            s(:send, nil, :assert_called,
              s(:sym, :start_document),
              s(:array,
                s(:array,
                  s(:int, 1),
                  s(:int, 1)),
                s(:array),
                s(:false))))),
        s(:def, :test_start_document_tag,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "%TAG !yaml! tag:yaml.org,2002\n---\n!yaml!str \"foo\"\n")),
            s(:send, nil, :assert_called,
              s(:sym, :start_document),
              s(:array,
                s(:array),
                s(:array,
                  s(:array,
                    s(:str, "!yaml!"),
                    s(:str, "tag:yaml.org,2002"))),
                s(:false))))),
        s(:def, :assert_called,
          s(:args,
            s(:arg, :call),
            s(:optarg, :with,
              s(:nil)),
            s(:optarg, :parser,
              s(:ivar, :@parser))),
          s(:if,
            s(:lvar, :with),
            s(:begin,
              s(:lvasgn, :call,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :parser), :handler), :calls), :find),
                  s(:args,
                    s(:arg, :x)),
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :x), :first), :==,
                      s(:lvar, :call)),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :x), :last), :compact), :==,
                      s(:lvar, :with))))),
              s(:send, nil, :assert,
                s(:lvar, :call),
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:array,
                        s(:lvar, :call),
                        s(:lvar, :with)), :inspect)),
                  s(:str, " not in "),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :parser), :handler), :calls), :inspect))))),
            s(:send, nil, :assert,
              s(:block,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :parser), :handler), :calls), :any?),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:send,
                    s(:lvar, :x), :first), :==,
                  s(:lvar, :call))))))))))
