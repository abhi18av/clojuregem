s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "helper")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:class,
    s(:const, nil, :TestPsych),
    s(:const,
      s(:const, nil, :Psych), :TestCase),
    s(:begin,
      s(:def, :teardown,
        s(:args),
        s(:send,
          s(:send,
            s(:const, nil, :Psych), :domain_types), :clear)),
      s(:def, :test_line_width_invalid,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raises,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:send,
            s(:const, nil, :Psych), :dump,
            s(:str, "x"),
            s(:hash,
              s(:pair,
                s(:sym, :line_width),
                s(:int, -2)))))),
      s(:def, :test_line_width_no_limit,
        s(:args),
        s(:begin,
          s(:lvasgn, :data,
            s(:hash,
              s(:pair,
                s(:str, "a"),
                s(:send,
                  s(:str, "a b"), :*,
                  s(:int, 50))))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "---\na: "),
              s(:begin,
                s(:send,
                  s(:str, "a b"), :*,
                  s(:int, 50))),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:const, nil, :Psych), :dump,
              s(:lvar, :data),
              s(:hash,
                s(:pair,
                  s(:sym, :line_width),
                  s(:int, -1))))))),
      s(:def, :test_line_width_limit,
        s(:args),
        s(:begin,
          s(:lvasgn, :yml,
            s(:send,
              s(:const, nil, :Psych), :dump,
              s(:str, "123456 7"),
              s(:hash,
                s(:pair,
                  s(:sym, :line_width),
                  s(:int, 5))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^\\s*7"),
              s(:regopt)),
            s(:lvar, :yml)))),
      s(:def, :test_indent,
        s(:args),
        s(:begin,
          s(:lvasgn, :yml,
            s(:send,
              s(:const, nil, :Psych), :dump,
              s(:hash,
                s(:pair,
                  s(:sym, :a),
                  s(:hash,
                    s(:pair,
                      s(:str, "b"),
                      s(:str, "c"))))),
              s(:hash,
                s(:pair,
                  s(:sym, :indentation),
                  s(:int, 5))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^[ ]{5}b"),
              s(:regopt)),
            s(:lvar, :yml)))),
      s(:def, :test_canonical,
        s(:args),
        s(:begin,
          s(:lvasgn, :yml,
            s(:send,
              s(:const, nil, :Psych), :dump,
              s(:hash,
                s(:pair,
                  s(:sym, :a),
                  s(:hash,
                    s(:pair,
                      s(:str, "b"),
                      s(:str, "c"))))),
              s(:hash,
                s(:pair,
                  s(:sym, :canonical),
                  s(:true))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\? \"b"),
              s(:regopt)),
            s(:lvar, :yml)))),
      s(:def, :test_header,
        s(:args),
        s(:begin,
          s(:lvasgn, :yml,
            s(:send,
              s(:const, nil, :Psych), :dump,
              s(:hash,
                s(:pair,
                  s(:sym, :a),
                  s(:hash,
                    s(:pair,
                      s(:str, "b"),
                      s(:str, "c"))))),
              s(:hash,
                s(:pair,
                  s(:sym, :header),
                  s(:true))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "YAML"),
              s(:regopt)),
            s(:lvar, :yml)))),
      s(:def, :test_version_array,
        s(:args),
        s(:begin,
          s(:lvasgn, :yml,
            s(:send,
              s(:const, nil, :Psych), :dump,
              s(:hash,
                s(:pair,
                  s(:sym, :a),
                  s(:hash,
                    s(:pair,
                      s(:str, "b"),
                      s(:str, "c"))))),
              s(:hash,
                s(:pair,
                  s(:sym, :version),
                  s(:array,
                    s(:int, 1),
                    s(:int, 1)))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "1.1"),
              s(:regopt)),
            s(:lvar, :yml)))),
      s(:def, :test_version_string,
        s(:args),
        s(:begin,
          s(:lvasgn, :yml,
            s(:send,
              s(:const, nil, :Psych), :dump,
              s(:hash,
                s(:pair,
                  s(:sym, :a),
                  s(:hash,
                    s(:pair,
                      s(:str, "b"),
                      s(:str, "c"))))),
              s(:hash,
                s(:pair,
                  s(:sym, :version),
                  s(:str, "1.1"))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "1.1"),
              s(:regopt)),
            s(:lvar, :yml)))),
      s(:def, :test_version_bool,
        s(:args),
        s(:begin,
          s(:lvasgn, :yml,
            s(:send,
              s(:const, nil, :Psych), :dump,
              s(:hash,
                s(:pair,
                  s(:sym, :a),
                  s(:hash,
                    s(:pair,
                      s(:str, "b"),
                      s(:str, "c"))))),
              s(:hash,
                s(:pair,
                  s(:sym, :version),
                  s(:true))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "1.1"),
              s(:regopt)),
            s(:lvar, :yml)))),
      s(:def, :test_load_argument_error,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raises,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send,
            s(:const, nil, :Psych), :load,
            s(:nil)))),
      s(:def, :test_non_existing_class_on_deserialize,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:str, "--- !ruby/object:NonExistent\nfoo: 1")))),
          s(:send, nil, :assert_equal,
            s(:str, "undefined class/module NonExistent"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_dump_stream,
        s(:args),
        s(:begin,
          s(:lvasgn, :things,
            s(:array,
              s(:int, 22),
              s(:str, "foo \n"),
              s(:hash))),
          s(:lvasgn, :stream,
            s(:send,
              s(:const, nil, :Psych), :dump_stream,
              s(:splat,
                s(:lvar, :things)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :things),
            s(:send,
              s(:const, nil, :Psych), :load_stream,
              s(:lvar, :stream))))),
      s(:def, :test_dump_file,
        s(:args),
        s(:begin,
          s(:lvasgn, :hash,
            s(:hash,
              s(:pair,
                s(:str, "hello"),
                s(:str, "TGIF!")))),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:str, "fun.yml")),
            s(:args,
              s(:arg, :io)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:lvar, :io),
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:lvar, :hash),
                  s(:lvar, :io))),
              s(:send,
                s(:lvar, :io), :rewind),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:lvar, :hash)),
                s(:send,
                  s(:lvar, :io), :read)))))),
      s(:def, :test_dump_io,
        s(:args),
        s(:begin,
          s(:lvasgn, :hash,
            s(:hash,
              s(:pair,
                s(:str, "hello"),
                s(:str, "TGIF!")))),
          s(:lvasgn, :stringio,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:str, ""))),
          s(:send, nil, :assert_equal,
            s(:lvar, :stringio),
            s(:send,
              s(:const, nil, :Psych), :dump,
              s(:lvar, :hash),
              s(:lvar, :stringio))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Psych), :dump,
              s(:lvar, :hash)),
            s(:send,
              s(:lvar, :stringio), :string)))),
      s(:def, :test_simple,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "foo"),
          s(:send,
            s(:const, nil, :Psych), :load,
            s(:str, "--- foo\n")))),
      s(:def, :test_libyaml_version,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :Psych), :libyaml_version)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:const, nil, :Psych), :libyaml_version), :join,
              s(:str, ".")),
            s(:const,
              s(:const, nil, :Psych), :LIBYAML_VERSION)))),
      s(:def, :test_load_documents,
        s(:args),
        s(:begin,
          s(:lvasgn, :docs,
            s(:send,
              s(:const, nil, :Psych), :load_documents,
              s(:str, "--- foo\n...\n--- bar\n..."))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "foo"),
              s(:str, "bar")),
            s(:lvar, :docs)))),
      s(:def, :test_parse_stream,
        s(:args),
        s(:begin,
          s(:lvasgn, :docs,
            s(:send,
              s(:const, nil, :Psych), :parse_stream,
              s(:str, "--- foo\n...\n--- bar\n..."))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "foo"),
              s(:str, "bar")),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :docs), :children), :map),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :transform))))),
      s(:def, :test_add_builtin_type,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :got,
              s(:nil)),
            s(:block,
              s(:send,
                s(:const, nil, :Psych), :add_builtin_type,
                s(:str, "omap")),
              s(:args,
                s(:arg, :type),
                s(:arg, :val)),
              s(:lvasgn, :got,
                s(:lvar, :val))),
            s(:send,
              s(:const, nil, :Psych), :load,
              s(:str, "--- !!omap hello")),
            s(:send, nil, :assert_equal,
              s(:str, "hello"),
              s(:lvar, :got))),
          s(:send,
            s(:const, nil, :Psych), :remove_type,
            s(:str, "omap")))),
      s(:def, :test_domain_types,
        s(:args),
        s(:begin,
          s(:lvasgn, :got,
            s(:nil)),
          s(:block,
            s(:send,
              s(:const, nil, :Psych), :add_domain_type,
              s(:str, "foo.bar,2002"),
              s(:str, "foo")),
            s(:args,
              s(:arg, :type),
              s(:arg, :val)),
            s(:lvasgn, :got,
              s(:lvar, :val))),
          s(:send,
            s(:const, nil, :Psych), :load,
            s(:str, "--- !foo.bar,2002/foo hello")),
          s(:send, nil, :assert_equal,
            s(:str, "hello"),
            s(:lvar, :got)),
          s(:send,
            s(:const, nil, :Psych), :load,
            s(:str, "--- !foo.bar,2002/foo\n- hello\n- world")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "hello"),
              s(:str, "world")),
            s(:lvar, :got)),
          s(:send,
            s(:const, nil, :Psych), :load,
            s(:str, "--- !foo.bar,2002/foo\nhello: world")),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "hello"),
                s(:str, "world"))),
            s(:lvar, :got)))),
      s(:def, :test_load_file,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Tempfile), :create,
            s(:array,
              s(:str, "yikes"),
              s(:str, "yml"))),
          s(:args,
            s(:arg, :t)),
          s(:begin,
            s(:send,
              s(:lvar, :t), :binmode),
            s(:send,
              s(:lvar, :t), :write,
              s(:str, "--- hello world")),
            s(:send,
              s(:lvar, :t), :close),
            s(:send, nil, :assert_equal,
              s(:str, "hello world"),
              s(:send,
                s(:const, nil, :Psych), :load_file,
                s(:send,
                  s(:lvar, :t), :path)))))),
      s(:def, :test_load_file_with_fallback,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:array,
                s(:str, "empty"),
                s(:str, "yml")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Hash), :new),
            s(:send,
              s(:const, nil, :Psych), :load_file,
              s(:send,
                s(:lvar, :t), :path),
              s(:send,
                s(:const, nil, :Hash), :new))))),
      s(:def, :test_parse_file,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Tempfile), :create,
            s(:array,
              s(:str, "yikes"),
              s(:str, "yml"))),
          s(:args,
            s(:arg, :t)),
          s(:begin,
            s(:send,
              s(:lvar, :t), :binmode),
            s(:send,
              s(:lvar, :t), :write,
              s(:str, "--- hello world")),
            s(:send,
              s(:lvar, :t), :close),
            s(:send, nil, :assert_equal,
              s(:str, "hello world"),
              s(:send,
                s(:send,
                  s(:const, nil, :Psych), :parse_file,
                  s(:send,
                    s(:lvar, :t), :path)), :transform))))),
      s(:def, :test_degenerate_strings,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:const, nil, :Psych), :load,
              s(:str, "    "))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:const, nil, :Psych), :parse,
              s(:str, "   "))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:const, nil, :Psych), :load,
              s(:str, ""))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:const, nil, :Psych), :parse,
              s(:str, ""))))),
      s(:def, :test_callbacks,
        s(:args),
        s(:begin,
          s(:lvasgn, :types,
            s(:array)),
          s(:lvasgn, :appender,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:restarg, :args)),
              s(:send,
                s(:lvar, :types), :<<,
                s(:lvar, :args)))),
          s(:send,
            s(:const, nil, :Psych), :add_builtin_type,
            s(:str, "foo"),
            s(:block_pass,
              s(:lvar, :appender))),
          s(:send,
            s(:const, nil, :Psych), :add_domain_type,
            s(:str, "example.com,2002"),
            s(:str, "foo"),
            s(:block_pass,
              s(:lvar, :appender))),
          s(:send,
            s(:const, nil, :Psych), :load,
            s(:dstr,
              s(:str, "- !tag:yaml.org,2002:foo bar\n"),
              s(:str, "- !tag:example.com,2002:foo bar\n"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "tag:yaml.org,2002:foo"),
                s(:str, "bar")),
              s(:array,
                s(:str, "tag:example.com,2002:foo"),
                s(:str, "bar"))),
            s(:lvar, :types)))))))
