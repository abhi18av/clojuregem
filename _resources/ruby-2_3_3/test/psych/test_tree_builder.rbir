s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "helper")),
  s(:module,
    s(:const, nil, :Psych),
    s(:class,
      s(:const, nil, :TestTreeBuilder),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:zsuper),
            s(:ivasgn, :@parser,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Parser), :new,
                s(:send,
                  s(:const, nil, :TreeBuilder), :new))),
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:dstr,
                s(:str, "%YAML 1.1\n"),
                s(:str, "---\n"),
                s(:str, "- foo\n"),
                s(:str, "- {\n"),
                s(:str, "  bar : &A !!str baz,\n"),
                s(:str, "  boo : *A\n"),
                s(:str, "}\n"),
                s(:str, "- *A\n"))),
            s(:ivasgn, :@tree,
              s(:send,
                s(:send,
                  s(:ivar, :@parser), :handler), :root)))),
        s(:def, :test_stream,
          s(:args),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:const, nil, :Nodes), :Stream),
            s(:ivar, :@tree))),
        s(:def, :test_documents,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:ivar, :@tree), :children), :length)),
            s(:send, nil, :assert_instance_of,
              s(:const,
                s(:const, nil, :Nodes), :Document),
              s(:send,
                s(:send,
                  s(:ivar, :@tree), :children), :first)),
            s(:lvasgn, :doc,
              s(:send,
                s(:send,
                  s(:ivar, :@tree), :children), :first)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 1),
                s(:int, 1)),
              s(:send,
                s(:lvar, :doc), :version)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:lvar, :doc), :tag_directives)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :doc), :implicit)))),
        s(:def, :test_sequence,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:send,
                  s(:ivar, :@tree), :children), :first)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :children), :length)),
            s(:lvasgn, :seq,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :children), :first)),
            s(:send, nil, :assert_instance_of,
              s(:const,
                s(:const, nil, :Nodes), :Sequence),
              s(:lvar, :seq)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :seq), :anchor)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :seq), :tag)),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:lvar, :seq), :implicit)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :Nodes), :Sequence), :BLOCK),
              s(:send,
                s(:lvar, :seq), :style)))),
        s(:def, :test_scalar,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:send,
                  s(:ivar, :@tree), :children), :first)),
            s(:lvasgn, :seq,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :children), :first)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send,
                  s(:lvar, :seq), :children), :length)),
            s(:lvasgn, :scalar,
              s(:send,
                s(:send,
                  s(:lvar, :seq), :children), :first)),
            s(:send, nil, :assert_instance_of,
              s(:const,
                s(:const, nil, :Nodes), :Scalar),
              s(:lvar, :scalar)),
            s(:send, nil, :assert_equal,
              s(:str, "foo"),
              s(:send,
                s(:lvar, :scalar), :value)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :scalar), :anchor)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :scalar), :tag)),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:lvar, :scalar), :plain)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :scalar), :quoted)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :Nodes), :Scalar), :PLAIN),
              s(:send,
                s(:lvar, :scalar), :style)))),
        s(:def, :test_mapping,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:send,
                  s(:ivar, :@tree), :children), :first)),
            s(:lvasgn, :seq,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :children), :first)),
            s(:lvasgn, :map,
              s(:send,
                s(:send,
                  s(:lvar, :seq), :children), :[],
                s(:int, 1))),
            s(:send, nil, :assert_instance_of,
              s(:const,
                s(:const, nil, :Nodes), :Mapping),
              s(:lvar, :map)))),
        s(:def, :test_alias,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:send,
                  s(:ivar, :@tree), :children), :first)),
            s(:lvasgn, :seq,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :children), :first)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send,
                  s(:lvar, :seq), :children), :length)),
            s(:lvasgn, :al,
              s(:send,
                s(:send,
                  s(:lvar, :seq), :children), :[],
                s(:int, 2))),
            s(:send, nil, :assert_instance_of,
              s(:const,
                s(:const, nil, :Nodes), :Alias),
              s(:lvar, :al)),
            s(:send, nil, :assert_equal,
              s(:str, "A"),
              s(:send,
                s(:lvar, :al), :anchor))))))))
