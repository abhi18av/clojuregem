s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "helper")),
  s(:module,
    s(:const, nil, :Psych),
    s(:class,
      s(:const, nil, :TestDeprecated),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:def, :teardown,
          s(:args),
          s(:begin,
            s(:gvasgn, :$VERBOSE,
              s(:ivar, :@orig_verbose)),
            s(:send,
              s(:send,
                s(:const, nil, :Psych), :domain_types), :clear))),
        s(:class,
          s(:const, nil, :QuickEmitter), nil,
          s(:begin,
            s(:send, nil, :attr_reader,
              s(:sym, :name)),
            s(:send, nil, :attr_reader,
              s(:sym, :value)),
            s(:def, :initialize,
              s(:args),
              s(:begin,
                s(:ivasgn, :@name,
                  s(:str, "hello!!")),
                s(:ivasgn, :@value,
                  s(:str, "Friday!")))),
            s(:def, :to_yaml,
              s(:args,
                s(:optarg, :opts,
                  s(:hash))),
              s(:block,
                s(:send,
                  s(:const, nil, :Psych), :quick_emit,
                  s(:send, nil, :object_id),
                  s(:lvar, :opts)),
                s(:args,
                  s(:arg, :out)),
                s(:block,
                  s(:send,
                    s(:lvar, :out), :map,
                    s(:send, nil, :taguri),
                    s(:send, nil, :to_yaml_style)),
                  s(:args,
                    s(:arg, :map)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :map), :add,
                      s(:str, "name"),
                      s(:ivar, :@name)),
                    s(:send,
                      s(:lvar, :map), :add,
                      s(:str, "value"),
                      s(:nil)))))))),
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:ivasgn, :@qe,
              s(:send,
                s(:const, nil, :QuickEmitter), :new)),
            s(:masgn,
              s(:mlhs,
                s(:ivasgn, :@orig_verbose),
                s(:gvasgn, :$VERBOSE)),
              s(:array,
                s(:gvar, :$VERBOSE),
                s(:false))))),
        s(:def, :test_quick_emit,
          s(:args),
          s(:begin,
            s(:lvasgn, :qe2,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:ivar, :@qe), :to_yaml))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@qe), :name),
              s(:send,
                s(:lvar, :qe2), :name)),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :QuickEmitter),
              s(:lvar, :qe2)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :qe2), :value)))),
        s(:def, :test_recursive_quick_emit,
          s(:args),
          s(:begin,
            s(:lvasgn, :hash,
              s(:hash,
                s(:pair,
                  s(:sym, :qe),
                  s(:ivar, :@qe)))),
            s(:lvasgn, :hash2,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:lvar, :hash)))),
            s(:lvasgn, :qe,
              s(:send,
                s(:lvar, :hash2), :[],
                s(:sym, :qe))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@qe), :name),
              s(:send,
                s(:lvar, :qe), :name)),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :QuickEmitter),
              s(:lvar, :qe)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :qe), :value)))),
        s(:class,
          s(:const, nil, :QuickEmitterEncodeWith), nil,
          s(:begin,
            s(:send, nil, :attr_reader,
              s(:sym, :name)),
            s(:send, nil, :attr_reader,
              s(:sym, :value)),
            s(:def, :initialize,
              s(:args),
              s(:begin,
                s(:ivasgn, :@name,
                  s(:str, "hello!!")),
                s(:ivasgn, :@value,
                  s(:str, "Friday!")))),
            s(:def, :encode_with,
              s(:args,
                s(:arg, :coder)),
              s(:block,
                s(:send,
                  s(:lvar, :coder), :map),
                s(:args,
                  s(:arg, :map)),
                s(:begin,
                  s(:send,
                    s(:lvar, :map), :add,
                    s(:str, "name"),
                    s(:ivar, :@name)),
                  s(:send,
                    s(:lvar, :map), :add,
                    s(:str, "value"),
                    s(:nil))))),
            s(:def, :to_yaml,
              s(:args,
                s(:optarg, :opts,
                  s(:hash))),
              s(:send, nil, :raise)))),
        s(:def, :test_recursive_quick_emit_encode_with,
          s(:args),
          s(:begin,
            s(:lvasgn, :qeew,
              s(:send,
                s(:const, nil, :QuickEmitterEncodeWith), :new)),
            s(:lvasgn, :hash,
              s(:hash,
                s(:pair,
                  s(:sym, :qe),
                  s(:lvar, :qeew)))),
            s(:lvasgn, :hash2,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:lvar, :hash)))),
            s(:lvasgn, :qe,
              s(:send,
                s(:lvar, :hash2), :[],
                s(:sym, :qe))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :qeew), :name),
              s(:send,
                s(:lvar, :qe), :name)),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :QuickEmitterEncodeWith),
              s(:lvar, :qe)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :qe), :value)))),
        s(:class,
          s(:const, nil, :YamlInit), nil,
          s(:begin,
            s(:send, nil, :attr_reader,
              s(:sym, :name)),
            s(:send, nil, :attr_reader,
              s(:sym, :value)),
            s(:def, :initialize,
              s(:args),
              s(:begin,
                s(:ivasgn, :@name,
                  s(:str, "hello!!")),
                s(:ivasgn, :@value,
                  s(:str, "Friday!")))),
            s(:def, :yaml_initialize,
              s(:args,
                s(:arg, :tag),
                s(:arg, :vals)),
              s(:block,
                s(:send,
                  s(:lvar, :vals), :each),
                s(:args,
                  s(:arg, :ivar),
                  s(:arg, :val)),
                s(:send, nil, :instance_variable_set,
                  s(:dstr,
                    s(:str, "@"),
                    s(:begin,
                      s(:lvar, :ivar))),
                  s(:str, "TGIF!")))))),
        s(:def, :test_yaml_initialize,
          s(:args),
          s(:begin,
            s(:lvasgn, :hash,
              s(:hash,
                s(:pair,
                  s(:sym, :yi),
                  s(:send,
                    s(:const, nil, :YamlInit), :new)))),
            s(:lvasgn, :hash2,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:lvar, :hash)))),
            s(:lvasgn, :yi,
              s(:send,
                s(:lvar, :hash2), :[],
                s(:sym, :yi))),
            s(:send, nil, :assert_equal,
              s(:str, "TGIF!"),
              s(:send,
                s(:lvar, :yi), :name)),
            s(:send, nil, :assert_equal,
              s(:str, "TGIF!"),
              s(:send,
                s(:lvar, :yi), :value)),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :YamlInit),
              s(:lvar, :yi)))),
        s(:class,
          s(:const, nil, :YamlInitAndInitWith), nil,
          s(:begin,
            s(:send, nil, :attr_reader,
              s(:sym, :name)),
            s(:send, nil, :attr_reader,
              s(:sym, :value)),
            s(:def, :initialize,
              s(:args),
              s(:begin,
                s(:ivasgn, :@name,
                  s(:str, "shaners")),
                s(:ivasgn, :@value,
                  s(:str, "Friday!")))),
            s(:def, :init_with,
              s(:args,
                s(:arg, :coder)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :coder), :map), :each),
                s(:args,
                  s(:arg, :ivar),
                  s(:arg, :val)),
                s(:send, nil, :instance_variable_set,
                  s(:dstr,
                    s(:str, "@"),
                    s(:begin,
                      s(:lvar, :ivar))),
                  s(:str, "TGIF!")))),
            s(:def, :yaml_initialize,
              s(:args,
                s(:arg, :tag),
                s(:arg, :vals)),
              s(:send, nil, :raise)))),
        s(:def, :test_yaml_initialize_and_init_with,
          s(:args),
          s(:begin,
            s(:lvasgn, :hash,
              s(:hash,
                s(:pair,
                  s(:sym, :yi),
                  s(:send,
                    s(:const, nil, :YamlInitAndInitWith), :new)))),
            s(:lvasgn, :hash2,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:lvar, :hash)))),
            s(:lvasgn, :yi,
              s(:send,
                s(:lvar, :hash2), :[],
                s(:sym, :yi))),
            s(:send, nil, :assert_equal,
              s(:str, "TGIF!"),
              s(:send,
                s(:lvar, :yi), :name)),
            s(:send, nil, :assert_equal,
              s(:str, "TGIF!"),
              s(:send,
                s(:lvar, :yi), :value)),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :YamlInitAndInitWith),
              s(:lvar, :yi)))),
        s(:def, :test_coder_scalar,
          s(:args),
          s(:begin,
            s(:lvasgn, :coder,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Coder), :new,
                s(:str, "foo"))),
            s(:send,
              s(:lvar, :coder), :scalar,
              s(:str, "tag"),
              s(:str, "some string"),
              s(:sym, :plain)),
            s(:send, nil, :assert_equal,
              s(:str, "tag"),
              s(:send,
                s(:lvar, :coder), :tag)),
            s(:send, nil, :assert_equal,
              s(:str, "some string"),
              s(:send,
                s(:lvar, :coder), :scalar)),
            s(:send, nil, :assert_equal,
              s(:sym, :scalar),
              s(:send,
                s(:lvar, :coder), :type)))),
        s(:class,
          s(:const, nil, :YamlAs), nil,
          s(:block,
            s(:send,
              s(:const, nil, :TestCase), :suppress_warning),
            s(:args),
            s(:send, nil, :psych_yaml_as,
              s(:str, "helloworld")))),
        s(:def, :test_yaml_as,
          s(:args),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "helloworld"),
              s(:regopt)),
            s(:send,
              s(:const, nil, :Psych), :dump,
              s(:send,
                s(:const, nil, :YamlAs), :new)))),
        s(:def, :test_ruby_type,
          s(:args),
          s(:begin,
            s(:lvasgn, :types,
              s(:array)),
            s(:lvasgn, :appender,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:restarg, :args)),
                s(:send,
                  s(:lvar, :types), :<<,
                  s(:lvar, :args)))),
            s(:send,
              s(:const, nil, :Psych), :add_ruby_type,
              s(:str, "foo"),
              s(:block_pass,
                s(:lvar, :appender))),
            s(:send,
              s(:const, nil, :Psych), :load,
              s(:str, "- !ruby.yaml.org,2002/foo bar\n")),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:str, "tag:ruby.yaml.org,2002:foo"),
                  s(:str, "bar"))),
              s(:lvar, :types)))),
        s(:def, :test_detect_implicit,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:const, nil, :Psych), :detect_implicit,
                s(:nil))),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:const, nil, :Psych), :detect_implicit,
                s(:send,
                  s(:const, nil, :Object), :new))),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:const, nil, :Psych), :detect_implicit,
                s(:float, 1.2))),
            s(:send, nil, :assert_equal,
              s(:str, "null"),
              s(:send,
                s(:const, nil, :Psych), :detect_implicit,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:str, "string"),
              s(:send,
                s(:const, nil, :Psych), :detect_implicit,
                s(:str, "foo"))))),
        s(:def, :test_private_type,
          s(:args),
          s(:begin,
            s(:lvasgn, :types,
              s(:array)),
            s(:block,
              s(:send,
                s(:const, nil, :Psych), :add_private_type,
                s(:str, "foo")),
              s(:args,
                s(:restarg, :args)),
              s(:send,
                s(:lvar, :types), :<<,
                s(:lvar, :args))),
            s(:send,
              s(:const, nil, :Psych), :load,
              s(:str, "- !x-private:foo bar\n")),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:str, "x-private:foo"),
                  s(:str, "bar"))),
              s(:lvar, :types)))),
        s(:def, :test_tagurize,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_nil,
              s(:send,
                s(:const, nil, :Psych), :tagurize,
                s(:nil))),
            s(:send, nil, :assert_equal,
              s(:const, nil, :Psych),
              s(:send,
                s(:const, nil, :Psych), :tagurize,
                s(:const, nil, :Psych))),
            s(:send, nil, :assert_equal,
              s(:str, "tag:yaml.org,2002:foo"),
              s(:send,
                s(:const, nil, :Psych), :tagurize,
                s(:str, "foo"))))),
        s(:def, :test_read_type_class,
          s(:args),
          s(:begin,
            s(:lvasgn, :things,
              s(:send,
                s(:const, nil, :Psych), :read_type_class,
                s(:str, "tag:yaml.org,2002:int:Psych::TestDeprecated::QuickEmitter"),
                s(:const, nil, :Object))),
            s(:send, nil, :assert_equal,
              s(:str, "int"),
              s(:send,
                s(:lvar, :things), :first)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :Psych), :TestDeprecated), :QuickEmitter),
              s(:send,
                s(:lvar, :things), :last)))),
        s(:def, :test_read_type_class_no_class,
          s(:args),
          s(:begin,
            s(:lvasgn, :things,
              s(:send,
                s(:const, nil, :Psych), :read_type_class,
                s(:str, "tag:yaml.org,2002:int"),
                s(:const, nil, :Object))),
            s(:send, nil, :assert_equal,
              s(:str, "int"),
              s(:send,
                s(:lvar, :things), :first)),
            s(:send, nil, :assert_equal,
              s(:const, nil, :Object),
              s(:send,
                s(:lvar, :things), :last)))),
        s(:def, :test_object_maker,
          s(:args),
          s(:begin,
            s(:lvasgn, :thing,
              s(:send,
                s(:const, nil, :Psych), :object_maker,
                s(:const, nil, :Object),
                s(:hash,
                  s(:pair,
                    s(:str, "a"),
                    s(:str, "b")),
                  s(:pair,
                    s(:str, "c"),
                    s(:str, "d"))))),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :Object),
              s(:lvar, :thing)),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:lvar, :thing), :instance_variable_get,
                s(:sym, :@a))),
            s(:send, nil, :assert_equal,
              s(:str, "d"),
              s(:send,
                s(:lvar, :thing), :instance_variable_get,
                s(:sym, :@c)))))))))
