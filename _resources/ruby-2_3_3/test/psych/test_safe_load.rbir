s(:begin,
  s(:send, nil, :require,
    s(:str, "psych/helper")),
  s(:module,
    s(:const, nil, :Psych),
    s(:class,
      s(:const, nil, :TestSafeLoad),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:class,
          s(:const, nil, :Foo), nil, nil),
        s(:block,
          s(:send,
            s(:array,
              s(:int, 1),
              s(:float, 2.2),
              s(:hash),
              s(:array),
              s(:str, "foo")), :each),
          s(:args,
            s(:arg, :obj)),
          s(:block,
            s(:send, nil, :define_method,
              s(:dsym,
                s(:str, "test_basic_"),
                s(:begin,
                  s(:send,
                    s(:lvar, :obj), :class)))),
            s(:args),
            s(:send, nil, :assert_safe_cycle,
              s(:lvar, :obj)))),
        s(:def, :test_no_recursion,
          s(:args),
          s(:begin,
            s(:lvasgn, :x,
              s(:array)),
            s(:send,
              s(:lvar, :x), :<<,
              s(:lvar, :x)),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Psych), :BadAlias)),
              s(:args),
              s(:send,
                s(:const, nil, :Psych), :safe_load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:lvar, :x)))))),
        s(:def, :test_explicit_recursion,
          s(:args),
          s(:begin,
            s(:lvasgn, :x,
              s(:array)),
            s(:send,
              s(:lvar, :x), :<<,
              s(:lvar, :x)),
            s(:send, nil, :assert_equal,
              s(:lvar, :x),
              s(:send,
                s(:const, nil, :Psych), :safe_load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:lvar, :x)),
                s(:array),
                s(:array),
                s(:true))))),
        s(:def, :test_symbol_whitelist,
          s(:args),
          s(:begin,
            s(:lvasgn, :yml,
              s(:send,
                s(:const, nil, :Psych), :dump,
                s(:sym, :foo))),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Psych), :DisallowedClass)),
              s(:args),
              s(:send,
                s(:const, nil, :Psych), :safe_load,
                s(:lvar, :yml))),
            s(:send, nil, :assert_equal,
              s(:sym, :foo),
              s(:send,
                s(:const, nil, :Psych), :safe_load,
                s(:lvar, :yml),
                s(:array,
                  s(:const, nil, :Symbol)),
                s(:array,
                  s(:sym, :foo)))))),
        s(:def, :test_symbol,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Psych), :DisallowedClass)),
              s(:args),
              s(:send, nil, :assert_safe_cycle,
                s(:sym, :foo))),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Psych), :DisallowedClass)),
              s(:args),
              s(:send,
                s(:const, nil, :Psych), :safe_load,
                s(:str, "--- !ruby/symbol foo"),
                s(:array))),
            s(:send, nil, :assert_safe_cycle,
              s(:sym, :foo),
              s(:array,
                s(:const, nil, :Symbol))),
            s(:send, nil, :assert_safe_cycle,
              s(:sym, :foo),
              s(:array,
                s(:str, "Symbol"))),
            s(:send, nil, :assert_equal,
              s(:sym, :foo),
              s(:send,
                s(:const, nil, :Psych), :safe_load,
                s(:str, "--- !ruby/symbol foo"),
                s(:array,
                  s(:const, nil, :Symbol)))))),
        s(:def, :test_foo,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Psych), :DisallowedClass)),
              s(:args),
              s(:send,
                s(:const, nil, :Psych), :safe_load,
                s(:str, "--- !ruby/object:Foo {}"),
                s(:array,
                  s(:const, nil, :Foo)))),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Psych), :DisallowedClass)),
              s(:args),
              s(:send, nil, :assert_safe_cycle,
                s(:send,
                  s(:const, nil, :Foo), :new))),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Foo),
              s(:send,
                s(:const, nil, :Psych), :safe_load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:send,
                    s(:const, nil, :Foo), :new)),
                s(:array,
                  s(:const, nil, :Foo)))))),
        s(:casgn, nil, :X,
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :x))),
        s(:def, :test_struct_depends_on_sym,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_safe_cycle,
              s(:send,
                s(:const, nil, :X), :new),
              s(:array,
                s(:const, nil, :X),
                s(:const, nil, :Symbol))),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Psych), :DisallowedClass)),
              s(:args),
              s(:send, nil, :cycle,
                s(:send,
                  s(:const, nil, :X), :new),
                s(:array,
                  s(:const, nil, :X)))))),
        s(:def, :test_anon_struct,
          s(:args),
          s(:begin,
            s(:send, nil, :assert,
              s(:send,
                s(:const, nil, :Psych), :safe_load,
                s(:dstr,
                  s(:str, "--- !ruby/struct\n"),
                  s(:str, "  foo: bar\n")),
                s(:array,
                  s(:const, nil, :Struct),
                  s(:const, nil, :Symbol)))),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Psych), :DisallowedClass)),
              s(:args),
              s(:send,
                s(:const, nil, :Psych), :safe_load,
                s(:dstr,
                  s(:str, "--- !ruby/struct\n"),
                  s(:str, "  foo: bar\n")),
                s(:array,
                  s(:const, nil, :Struct)))),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Psych), :DisallowedClass)),
              s(:args),
              s(:send,
                s(:const, nil, :Psych), :safe_load,
                s(:dstr,
                  s(:str, "--- !ruby/struct\n"),
                  s(:str, "  foo: bar\n")),
                s(:array,
                  s(:const, nil, :Symbol)))))),
        s(:send, nil, :private),
        s(:def, :cycle,
          s(:args,
            s(:arg, :object),
            s(:optarg, :whitelist,
              s(:array))),
          s(:send,
            s(:const, nil, :Psych), :safe_load,
            s(:send,
              s(:const, nil, :Psych), :dump,
              s(:lvar, :object)),
            s(:lvar, :whitelist))),
        s(:def, :assert_safe_cycle,
          s(:args,
            s(:arg, :object),
            s(:optarg, :whitelist,
              s(:array))),
          s(:begin,
            s(:lvasgn, :other,
              s(:send, nil, :cycle,
                s(:lvar, :object),
                s(:lvar, :whitelist))),
            s(:send, nil, :assert_equal,
              s(:lvar, :object),
              s(:lvar, :other))))))))
