s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "helper")),
  s(:module,
    s(:const, nil, :Psych),
    s(:class,
      s(:const, nil, :TestToYamlProperties),
      s(:const,
        s(:const, nil, :Psych), :TestCase),
      s(:begin,
        s(:class,
          s(:const, nil, :Foo), nil,
          s(:begin,
            s(:send, nil, :attr_accessor,
              s(:sym, :a),
              s(:sym, :b),
              s(:sym, :c)),
            s(:def, :initialize,
              s(:args),
              s(:begin,
                s(:ivasgn, :@a,
                  s(:int, 1)),
                s(:ivasgn, :@b,
                  s(:int, 2)),
                s(:ivasgn, :@c,
                  s(:int, 3)))),
            s(:def, :to_yaml_properties,
              s(:args),
              s(:array,
                s(:sym, :@a),
                s(:sym, :@b))))),
        s(:def, :test_object_dump_yaml_properties,
          s(:args),
          s(:begin,
            s(:lvasgn, :foo,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:send,
                    s(:const, nil, :Foo), :new)))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :foo), :a)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :foo), :b)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :foo), :c)))),
        s(:class,
          s(:const, nil, :Bar),
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :foo),
            s(:sym, :bar)),
          s(:begin,
            s(:send, nil, :attr_reader,
              s(:sym, :baz)),
            s(:def, :initialize,
              s(:args,
                s(:restarg, :args)),
              s(:begin,
                s(:zsuper),
                s(:ivasgn, :@baz,
                  s(:str, "hello")))),
            s(:def, :to_yaml_properties,
              s(:args),
              s(:array)))),
        s(:def, :test_struct_dump_yaml_properties,
          s(:args),
          s(:begin,
            s(:lvasgn, :bar,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:send,
                    s(:const, nil, :Bar), :new,
                    s(:str, "a"),
                    s(:str, "b"))))),
            s(:send, nil, :assert_equal,
              s(:str, "a"),
              s(:send,
                s(:lvar, :bar), :foo)),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:lvar, :bar), :bar)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :bar), :baz)))),
        s(:def, :test_string_dump,
          s(:args),
          s(:begin,
            s(:lvasgn, :string,
              s(:str, "okonomiyaki")),
            s(:sclass,
              s(:lvar, :string),
              s(:def, :to_yaml_properties,
                s(:args),
                s(:array,
                  s(:sym, :@tastes)))),
            s(:send,
              s(:lvar, :string), :instance_variable_set,
              s(:sym, :@tastes),
              s(:str, "delicious")),
            s(:lvasgn, :v,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:lvar, :string)))),
            s(:send, nil, :assert_equal,
              s(:str, "delicious"),
              s(:send,
                s(:lvar, :v), :instance_variable_get,
                s(:sym, :@tastes))))),
        s(:def, :test_string_load_syck,
          s(:args),
          s(:begin,
            s(:lvasgn, :str,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:str, "--- !str \nstr: okonomiyaki\n:@tastes: delicious\n"))),
            s(:send, nil, :assert_equal,
              s(:str, "okonomiyaki"),
              s(:lvar, :str)),
            s(:send, nil, :assert_equal,
              s(:str, "delicious"),
              s(:send,
                s(:lvar, :str), :instance_variable_get,
                s(:sym, :@tastes)))))))))
