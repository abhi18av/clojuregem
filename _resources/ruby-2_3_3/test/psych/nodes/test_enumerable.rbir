s(:begin,
  s(:send, nil, :require,
    s(:str, "psych/helper")),
  s(:module,
    s(:const, nil, :Psych),
    s(:module,
      s(:const, nil, :Nodes),
      s(:class,
        s(:const, nil, :TestEnumerable),
        s(:const, nil, :TestCase),
        s(:begin,
          s(:def, :test_includes_enumerable,
            s(:args),
            s(:begin,
              s(:lvasgn, :yaml,
                s(:str, "--- hello")),
              s(:send, nil, :assert_equal,
                s(:int, 3),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Psych), :parse_stream,
                      s(:lvar, :yaml)), :to_a), :length)))),
          s(:def, :test_returns_enumerator,
            s(:args),
            s(:begin,
              s(:lvasgn, :yaml,
                s(:str, "--- hello")),
              s(:send, nil, :assert_equal,
                s(:int, 3),
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Psych), :parse_stream,
                          s(:lvar, :yaml)), :each), :map),
                    s(:args,
                      s(:arg, :x)),
                    s(:lvar, :x)), :length)))),
          s(:def, :test_scalar,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send, nil, :calls,
                  s(:str, "--- hello")), :length))),
          s(:def, :test_sequence,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:send,
                s(:send, nil, :calls,
                  s(:str, "---\n- hello")), :length))),
          s(:def, :test_mapping,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:int, 5),
              s(:send,
                s(:send, nil, :calls,
                  s(:str, "---\nhello: world")), :length))),
          s(:def, :test_alias,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:int, 5),
              s(:send,
                s(:send, nil, :calls,
                  s(:str, "--- &yay\n- foo\n- *yay\n")), :length))),
          s(:send, nil, :private),
          s(:def, :calls,
            s(:args,
              s(:arg, :yaml)),
            s(:begin,
              s(:lvasgn, :calls,
                s(:array)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :Psych), :parse_stream,
                    s(:lvar, :yaml)), :each),
                s(:args,
                  s(:arg, :node)),
                s(:send,
                  s(:lvar, :calls), :<<,
                  s(:lvar, :node))),
              s(:lvar, :calls))))))))
