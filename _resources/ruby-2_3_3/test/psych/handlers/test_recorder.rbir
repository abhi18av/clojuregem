s(:begin,
  s(:send, nil, :require,
    s(:str, "psych/helper")),
  s(:send, nil, :require,
    s(:str, "psych/handlers/recorder")),
  s(:module,
    s(:const, nil, :Psych),
    s(:module,
      s(:const, nil, :Handlers),
      s(:class,
        s(:const, nil, :TestRecorder),
        s(:const, nil, :TestCase),
        s(:def, :test_replay,
          s(:args),
          s(:begin,
            s(:lvasgn, :yaml,
              s(:str, "--- foo\n...\n")),
            s(:lvasgn, :output,
              s(:send,
                s(:const, nil, :StringIO), :new)),
            s(:lvasgn, :recorder,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Psych), :Handlers), :Recorder), :new)),
            s(:lvasgn, :parser,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Parser), :new,
                s(:lvar, :recorder))),
            s(:send,
              s(:lvar, :parser), :parse,
              s(:lvar, :yaml)),
            s(:send, nil, :assert_equal,
              s(:int, 5),
              s(:send,
                s(:send,
                  s(:lvar, :recorder), :events), :length)),
            s(:lvasgn, :emitter,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Emitter), :new,
                s(:lvar, :output))),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :recorder), :events), :each),
              s(:args,
                s(:arg, :m),
                s(:arg, :args)),
              s(:send,
                s(:lvar, :emitter), :send,
                s(:lvar, :m),
                s(:splat,
                  s(:lvar, :args)))),
            s(:send, nil, :assert_equal,
              s(:lvar, :yaml),
              s(:send,
                s(:lvar, :output), :string))))))))
