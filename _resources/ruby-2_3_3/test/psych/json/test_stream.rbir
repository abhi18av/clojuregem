s(:begin,
  s(:send, nil, :require,
    s(:str, "psych/helper")),
  s(:module,
    s(:const, nil, :Psych),
    s(:module,
      s(:const, nil, :JSON),
      s(:class,
        s(:const, nil, :TestStream),
        s(:const, nil, :TestCase),
        s(:begin,
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:ivasgn, :@io,
                s(:send,
                  s(:const, nil, :StringIO), :new)),
              s(:ivasgn, :@stream,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Psych), :JSON), :Stream), :new,
                  s(:ivar, :@io))),
              s(:send,
                s(:ivar, :@stream), :start))),
          s(:def, :test_explicit_documents,
            s(:args),
            s(:begin,
              s(:ivasgn, :@io,
                s(:send,
                  s(:const, nil, :StringIO), :new)),
              s(:ivasgn, :@stream,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Psych), :JSON), :Stream), :new,
                  s(:ivar, :@io))),
              s(:send,
                s(:ivar, :@stream), :start),
              s(:send,
                s(:ivar, :@stream), :push,
                s(:hash,
                  s(:pair,
                    s(:str, "foo"),
                    s(:str, "bar")))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:ivar, :@stream), :finished?), :!),
                s(:str, "stream not finished")),
              s(:send,
                s(:ivar, :@stream), :finish),
              s(:send, nil, :assert,
                s(:send,
                  s(:ivar, :@stream), :finished?),
                s(:str, "stream finished")),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "^---"),
                  s(:regopt)),
                s(:send,
                  s(:ivar, :@io), :string)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "\\.\\.\\.$"),
                  s(:regopt)),
                s(:send,
                  s(:ivar, :@io), :string)))),
          s(:def, :test_null,
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@stream), :push,
                s(:nil)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "^--- null"),
                  s(:regopt)),
                s(:send,
                  s(:ivar, :@io), :string)))),
          s(:def, :test_string,
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@stream), :push,
                s(:str, "foo")),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "([\"])foo\\1"),
                  s(:regopt)),
                s(:send,
                  s(:ivar, :@io), :string)))),
          s(:def, :test_symbol,
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@stream), :push,
                s(:sym, :foo)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "([\"])foo\\1"),
                  s(:regopt)),
                s(:send,
                  s(:ivar, :@io), :string)))),
          s(:def, :test_int,
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@stream), :push,
                s(:int, 10)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "^--- 10"),
                  s(:regopt)),
                s(:send,
                  s(:ivar, :@io), :string)))),
          s(:def, :test_float,
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@stream), :push,
                s(:float, 1.2)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "^--- 1.2"),
                  s(:regopt)),
                s(:send,
                  s(:ivar, :@io), :string)))),
          s(:def, :test_hash,
            s(:args),
            s(:begin,
              s(:lvasgn, :hash,
                s(:hash,
                  s(:pair,
                    s(:str, "one"),
                    s(:str, "two")))),
              s(:send,
                s(:ivar, :@stream), :push,
                s(:lvar, :hash)),
              s(:lvasgn, :json,
                s(:send,
                  s(:ivar, :@io), :string)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "}$"),
                  s(:regopt)),
                s(:lvar, :json)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "^--- \\{"),
                  s(:regopt)),
                s(:lvar, :json)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "[\"]one['\"]"),
                  s(:regopt)),
                s(:lvar, :json)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "[\"]two['\"]"),
                  s(:regopt)),
                s(:lvar, :json)))),
          s(:def, :test_list_to_json,
            s(:args),
            s(:begin,
              s(:lvasgn, :list,
                s(:array,
                  s(:str, "one"),
                  s(:str, "two"))),
              s(:send,
                s(:ivar, :@stream), :push,
                s(:lvar, :list)),
              s(:lvasgn, :json,
                s(:send,
                  s(:ivar, :@io), :string)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "\\]$"),
                  s(:regopt)),
                s(:lvar, :json)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "^--- \\["),
                  s(:regopt)),
                s(:lvar, :json)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "[\"]one[\"]"),
                  s(:regopt)),
                s(:lvar, :json)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "[\"]two[\"]"),
                  s(:regopt)),
                s(:lvar, :json)))),
          s(:class,
            s(:const, nil, :Foo), nil, nil),
          s(:def, :test_json_dump_exclude_tag,
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@stream), :<<,
                s(:send,
                  s(:const, nil, :Foo), :new)),
              s(:lvasgn, :json,
                s(:send,
                  s(:ivar, :@io), :string)),
              s(:send, nil, :refute_match,
                s(:str, "Foo"),
                s(:lvar, :json)))),
          s(:class,
            s(:const, nil, :Bar), nil,
            s(:def, :encode_with,
              s(:args,
                s(:arg, :coder)),
              s(:send,
                s(:lvar, :coder), :represent_seq,
                s(:str, "omg"),
                s(:array,
                  s(:str, "a"),
                  s(:str, "b"),
                  s(:str, "c"))))),
          s(:def, :test_json_list_dump_exclude_tag,
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@stream), :<<,
                s(:send,
                  s(:const, nil, :Bar), :new)),
              s(:lvasgn, :json,
                s(:send,
                  s(:ivar, :@io), :string)),
              s(:send, nil, :refute_match,
                s(:str, "omg"),
                s(:lvar, :json)))),
          s(:def, :test_time,
            s(:args),
            s(:begin,
              s(:lvasgn, :time,
                s(:send,
                  s(:const, nil, :Time), :utc,
                  s(:int, 2010),
                  s(:int, 10),
                  s(:int, 10))),
              s(:send,
                s(:ivar, :@stream), :push,
                s(:hash,
                  s(:pair,
                    s(:str, "a"),
                    s(:lvar, :time)))),
              s(:lvasgn, :json,
                s(:send,
                  s(:ivar, :@io), :string)),
              s(:send, nil, :assert_match,
                s(:str, "{\"a\": \"2010-10-10 00:00:00.000000000 Z\"}\n"),
                s(:lvar, :json)))),
          s(:def, :test_datetime,
            s(:args),
            s(:begin,
              s(:lvasgn, :time,
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :new,
                    s(:int, 2010),
                    s(:int, 10),
                    s(:int, 10)), :to_datetime)),
              s(:send,
                s(:ivar, :@stream), :push,
                s(:hash,
                  s(:pair,
                    s(:str, "a"),
                    s(:lvar, :time)))),
              s(:lvasgn, :json,
                s(:send,
                  s(:ivar, :@io), :string)),
              s(:send, nil, :assert_match,
                s(:dstr,
                  s(:str, "{\"a\": \""),
                  s(:begin,
                    s(:send,
                      s(:lvar, :time), :strftime,
                      s(:str, "%Y-%m-%d %H:%M:%S.%9N %:z"))),
                  s(:str, "\"}\n")),
                s(:lvar, :json)))))))))
