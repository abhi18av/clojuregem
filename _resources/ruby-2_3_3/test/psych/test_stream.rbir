s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "helper")),
  s(:module,
    s(:const, nil, :Psych),
    s(:class,
      s(:const, nil, :TestStream),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:def, :test_parse_partial,
          s(:args),
          s(:begin,
            s(:lvasgn, :rb,
              s(:send,
                s(:send,
                  s(:const, nil, :Psych), :parse,
                  s(:str, "--- foo\n...\n--- `")), :to_ruby)),
            s(:send, nil, :assert_equal,
              s(:str, "foo"),
              s(:lvar, :rb)))),
        s(:def, :test_load_partial,
          s(:args),
          s(:begin,
            s(:lvasgn, :rb,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:str, "--- foo\n...\n--- `"))),
            s(:send, nil, :assert_equal,
              s(:str, "foo"),
              s(:lvar, :rb)))),
        s(:def, :test_parse_stream_yields_documents,
          s(:args),
          s(:begin,
            s(:lvasgn, :list,
              s(:array)),
            s(:block,
              s(:send,
                s(:const, nil, :Psych), :parse_stream,
                s(:str, "--- foo\n...\n--- bar")),
              s(:args,
                s(:arg, :doc)),
              s(:send,
                s(:lvar, :list), :<<,
                s(:send,
                  s(:lvar, :doc), :to_ruby))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "foo"),
                s(:str, "bar")),
              s(:lvar, :list)))),
        s(:def, :test_parse_stream_break,
          s(:args),
          s(:begin,
            s(:lvasgn, :list,
              s(:array)),
            s(:block,
              s(:send,
                s(:const, nil, :Psych), :parse_stream,
                s(:str, "--- foo\n...\n--- `")),
              s(:args,
                s(:arg, :doc)),
              s(:begin,
                s(:send,
                  s(:lvar, :list), :<<,
                  s(:send,
                    s(:lvar, :doc), :to_ruby)),
                s(:break))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "foo")),
              s(:lvar, :list)))),
        s(:def, :test_load_stream_yields_documents,
          s(:args),
          s(:begin,
            s(:lvasgn, :list,
              s(:array)),
            s(:block,
              s(:send,
                s(:const, nil, :Psych), :load_stream,
                s(:str, "--- foo\n...\n--- bar")),
              s(:args,
                s(:arg, :ruby)),
              s(:send,
                s(:lvar, :list), :<<,
                s(:lvar, :ruby))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "foo"),
                s(:str, "bar")),
              s(:lvar, :list)))),
        s(:def, :test_load_stream_break,
          s(:args),
          s(:begin,
            s(:lvasgn, :list,
              s(:array)),
            s(:block,
              s(:send,
                s(:const, nil, :Psych), :load_stream,
                s(:str, "--- foo\n...\n--- `")),
              s(:args,
                s(:arg, :ruby)),
              s(:begin,
                s(:send,
                  s(:lvar, :list), :<<,
                  s(:lvar, :ruby)),
                s(:break))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "foo")),
              s(:lvar, :list)))),
        s(:def, :test_explicit_documents,
          s(:args),
          s(:begin,
            s(:lvasgn, :io,
              s(:send,
                s(:const, nil, :StringIO), :new)),
            s(:lvasgn, :stream,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Stream), :new,
                s(:lvar, :io))),
            s(:send,
              s(:lvar, :stream), :start),
            s(:send,
              s(:lvar, :stream), :push,
              s(:hash,
                s(:pair,
                  s(:str, "foo"),
                  s(:str, "bar")))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :stream), :finished?), :!),
              s(:str, "stream not finished")),
            s(:send,
              s(:lvar, :stream), :finish),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :stream), :finished?),
              s(:str, "stream finished")),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "^---"),
                s(:regopt)),
              s(:send,
                s(:lvar, :io), :string)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\.\\.\\.$"),
                s(:regopt)),
              s(:send,
                s(:lvar, :io), :string)))),
        s(:def, :test_start_takes_block,
          s(:args),
          s(:begin,
            s(:lvasgn, :io,
              s(:send,
                s(:const, nil, :StringIO), :new)),
            s(:lvasgn, :stream,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Stream), :new,
                s(:lvar, :io))),
            s(:block,
              s(:send,
                s(:lvar, :stream), :start),
              s(:args,
                s(:arg, :emitter)),
              s(:send,
                s(:lvar, :emitter), :push,
                s(:hash,
                  s(:pair,
                    s(:str, "foo"),
                    s(:str, "bar"))))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :stream), :finished?),
              s(:str, "stream finished")),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "^---"),
                s(:regopt)),
              s(:send,
                s(:lvar, :io), :string)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\.\\.\\.$"),
                s(:regopt)),
              s(:send,
                s(:lvar, :io), :string)))),
        s(:def, :test_no_backreferences,
          s(:args),
          s(:begin,
            s(:lvasgn, :io,
              s(:send,
                s(:const, nil, :StringIO), :new)),
            s(:lvasgn, :stream,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Stream), :new,
                s(:lvar, :io))),
            s(:block,
              s(:send,
                s(:lvar, :stream), :start),
              s(:args,
                s(:arg, :emitter)),
              s(:begin,
                s(:lvasgn, :x,
                  s(:hash,
                    s(:pair,
                      s(:str, "foo"),
                      s(:str, "bar")))),
                s(:send,
                  s(:lvar, :emitter), :push,
                  s(:lvar, :x)),
                s(:send,
                  s(:lvar, :emitter), :push,
                  s(:lvar, :x)))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :stream), :finished?),
              s(:str, "stream finished")),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "^---"),
                s(:regopt)),
              s(:send,
                s(:lvar, :io), :string)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\.\\.\\.$"),
                s(:regopt)),
              s(:send,
                s(:lvar, :io), :string)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :io), :string), :scan,
                  s(:str, "---")), :length)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :io), :string), :scan,
                  s(:str, "...")), :length)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :io), :string), :scan,
                  s(:str, "foo")), :length)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :io), :string), :scan,
                  s(:str, "bar")), :length))))))))
