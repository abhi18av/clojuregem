s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "helper")),
  s(:module,
    s(:const, nil, :Psych),
    s(:class,
      s(:const, nil, :TestCoder),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:class,
          s(:const, nil, :InitApi), nil,
          s(:begin,
            s(:send, nil, :attr_accessor,
              s(:sym, :implicit)),
            s(:send, nil, :attr_accessor,
              s(:sym, :style)),
            s(:send, nil, :attr_accessor,
              s(:sym, :tag)),
            s(:send, nil, :attr_accessor,
              s(:sym, :a),
              s(:sym, :b),
              s(:sym, :c)),
            s(:def, :initialize,
              s(:args),
              s(:begin,
                s(:ivasgn, :@a,
                  s(:int, 1)),
                s(:ivasgn, :@b,
                  s(:int, 2)),
                s(:ivasgn, :@c,
                  s(:int, 3)))),
            s(:def, :init_with,
              s(:args,
                s(:arg, :coder)),
              s(:begin,
                s(:ivasgn, :@a,
                  s(:send,
                    s(:lvar, :coder), :[],
                    s(:str, "aa"))),
                s(:ivasgn, :@b,
                  s(:send,
                    s(:lvar, :coder), :[],
                    s(:str, "bb"))),
                s(:ivasgn, :@implicit,
                  s(:send,
                    s(:lvar, :coder), :implicit)),
                s(:ivasgn, :@tag,
                  s(:send,
                    s(:lvar, :coder), :tag)),
                s(:ivasgn, :@style,
                  s(:send,
                    s(:lvar, :coder), :style)))),
            s(:def, :encode_with,
              s(:args,
                s(:arg, :coder)),
              s(:begin,
                s(:send,
                  s(:lvar, :coder), :[]=,
                  s(:str, "aa"),
                  s(:ivar, :@a)),
                s(:send,
                  s(:lvar, :coder), :[]=,
                  s(:str, "bb"),
                  s(:ivar, :@b)))))),
        s(:class,
          s(:const, nil, :TaggingCoder),
          s(:const, nil, :InitApi),
          s(:def, :encode_with,
            s(:args,
              s(:arg, :coder)),
            s(:begin,
              s(:zsuper),
              s(:send,
                s(:lvar, :coder), :tag=,
                s(:send,
                  s(:send,
                    s(:lvar, :coder), :tag), :sub,
                  s(:regexp,
                    s(:str, "!"),
                    s(:regopt)),
                  s(:str, "!hello"))),
              s(:send,
                s(:lvar, :coder), :implicit=,
                s(:false)),
              s(:send,
                s(:lvar, :coder), :style=,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Psych), :Nodes), :Mapping), :FLOW))))),
        s(:class,
          s(:const, nil, :ScalarCoder), nil,
          s(:def, :encode_with,
            s(:args,
              s(:arg, :coder)),
            s(:send,
              s(:lvar, :coder), :scalar=,
              s(:str, "foo")))),
        s(:class,
          s(:const, nil, :Represent), nil,
          s(:begin,
            s(:send, nil, :yaml_tag,
              s(:str, "foo")),
            s(:def, :encode_with,
              s(:args,
                s(:arg, :coder)),
              s(:send,
                s(:lvar, :coder), :represent_scalar,
                s(:str, "foo"),
                s(:str, "bar"))))),
        s(:class,
          s(:const, nil, :RepresentWithInit), nil,
          s(:begin,
            s(:send, nil, :yaml_tag,
              s(:send, nil, :name)),
            s(:send, nil, :attr_accessor,
              s(:sym, :str)),
            s(:def, :init_with,
              s(:args,
                s(:arg, :coder)),
              s(:ivasgn, :@str,
                s(:send,
                  s(:lvar, :coder), :scalar))),
            s(:def, :encode_with,
              s(:args,
                s(:arg, :coder)),
              s(:send,
                s(:lvar, :coder), :represent_scalar,
                s(:send,
                  s(:send,
                    s(:self), :class), :name),
                s(:str, "bar"))))),
        s(:class,
          s(:const, nil, :RepresentWithSeq), nil,
          s(:begin,
            s(:send, nil, :yaml_tag,
              s(:send, nil, :name)),
            s(:send, nil, :attr_accessor,
              s(:sym, :seq)),
            s(:def, :init_with,
              s(:args,
                s(:arg, :coder)),
              s(:ivasgn, :@seq,
                s(:send,
                  s(:lvar, :coder), :seq))),
            s(:def, :encode_with,
              s(:args,
                s(:arg, :coder)),
              s(:send,
                s(:lvar, :coder), :represent_seq,
                s(:send,
                  s(:send,
                    s(:self), :class), :name),
                s(:array,
                  s(:str, "foo"),
                  s(:str, "bar")))))),
        s(:class,
          s(:const, nil, :RepresentWithMap), nil,
          s(:begin,
            s(:send, nil, :yaml_tag,
              s(:send, nil, :name)),
            s(:send, nil, :attr_accessor,
              s(:sym, :map)),
            s(:def, :init_with,
              s(:args,
                s(:arg, :coder)),
              s(:ivasgn, :@map,
                s(:send,
                  s(:lvar, :coder), :map))),
            s(:def, :encode_with,
              s(:args,
                s(:arg, :coder)),
              s(:send,
                s(:lvar, :coder), :represent_map,
                s(:send,
                  s(:send,
                    s(:self), :class), :name),
                s(:hash,
                  s(:pair,
                    s(:str, "string"),
                    s(:str, "a")),
                  s(:pair,
                    s(:sym, :symbol),
                    s(:str, "b"))))))),
        s(:class,
          s(:const, nil, :RepresentWithObject), nil,
          s(:def, :encode_with,
            s(:args,
              s(:arg, :coder)),
            s(:send,
              s(:lvar, :coder), :represent_object,
              s(:send,
                s(:send,
                  s(:self), :class), :name),
              s(:int, 20)))),
        s(:class,
          s(:const, nil, :Referential), nil,
          s(:begin,
            s(:send, nil, :attr_reader,
              s(:sym, :a)),
            s(:def, :initialize,
              s(:args),
              s(:ivasgn, :@a,
                s(:self))),
            s(:def, :encode_with,
              s(:args,
                s(:arg, :c)),
              s(:send,
                s(:lvar, :c), :[]=,
                s(:str, "a"),
                s(:ivar, :@a))),
            s(:def, :init_with,
              s(:args,
                s(:arg, :c)),
              s(:ivasgn, :@a,
                s(:send,
                  s(:lvar, :c), :[],
                  s(:str, "a")))))),
        s(:def, :test_self_referential,
          s(:args),
          s(:begin,
            s(:lvasgn, :x,
              s(:send,
                s(:const, nil, :Referential), :new)),
            s(:lvasgn, :copy,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:lvar, :x)))),
            s(:send, nil, :assert_equal,
              s(:lvar, :copy),
              s(:send,
                s(:lvar, :copy), :a)))),
        s(:def, :test_represent_with_object,
          s(:args),
          s(:begin,
            s(:lvasgn, :thing,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:send,
                    s(:const, nil, :RepresentWithObject), :new)))),
            s(:send, nil, :assert_equal,
              s(:int, 20),
              s(:lvar, :thing)))),
        s(:def, :test_json_dump_exclude_tag,
          s(:args),
          s(:send, nil, :refute_match,
            s(:str, "TestCoder::InitApi"),
            s(:send,
              s(:const, nil, :Psych), :to_json,
              s(:send,
                s(:const, nil, :InitApi), :new)))),
        s(:def, :test_map_takes_block,
          s(:args),
          s(:begin,
            s(:lvasgn, :coder,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Coder), :new,
                s(:str, "foo"))),
            s(:lvasgn, :tag,
              s(:send,
                s(:lvar, :coder), :tag)),
            s(:lvasgn, :style,
              s(:send,
                s(:lvar, :coder), :style)),
            s(:block,
              s(:send,
                s(:lvar, :coder), :map),
              s(:args,
                s(:arg, :map)),
              s(:send,
                s(:lvar, :map), :add,
                s(:str, "foo"),
                s(:str, "bar"))),
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:lvar, :coder), :[],
                s(:str, "foo"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :tag),
              s(:send,
                s(:lvar, :coder), :tag)),
            s(:send, nil, :assert_equal,
              s(:lvar, :style),
              s(:send,
                s(:lvar, :coder), :style)))),
        s(:def, :test_map_with_tag,
          s(:args),
          s(:begin,
            s(:lvasgn, :coder,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Coder), :new,
                s(:str, "foo"))),
            s(:block,
              s(:send,
                s(:lvar, :coder), :map,
                s(:str, "hello")),
              s(:args,
                s(:arg, :map)),
              s(:send,
                s(:lvar, :map), :add,
                s(:str, "foo"),
                s(:str, "bar"))),
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:lvar, :coder), :[],
                s(:str, "foo"))),
            s(:send, nil, :assert_equal,
              s(:str, "hello"),
              s(:send,
                s(:lvar, :coder), :tag)))),
        s(:def, :test_map_with_tag_and_style,
          s(:args),
          s(:begin,
            s(:lvasgn, :coder,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Coder), :new,
                s(:str, "foo"))),
            s(:block,
              s(:send,
                s(:lvar, :coder), :map,
                s(:str, "hello"),
                s(:str, "world")),
              s(:args,
                s(:arg, :map)),
              s(:send,
                s(:lvar, :map), :add,
                s(:str, "foo"),
                s(:str, "bar"))),
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:lvar, :coder), :[],
                s(:str, "foo"))),
            s(:send, nil, :assert_equal,
              s(:str, "hello"),
              s(:send,
                s(:lvar, :coder), :tag)),
            s(:send, nil, :assert_equal,
              s(:str, "world"),
              s(:send,
                s(:lvar, :coder), :style)))),
        s(:def, :test_represent_map,
          s(:args),
          s(:begin,
            s(:lvasgn, :thing,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:send,
                    s(:const, nil, :RepresentWithMap), :new)))),
            s(:send, nil, :assert_equal,
              s(:hash,
                s(:pair,
                  s(:str, "string"),
                  s(:str, "a")),
                s(:pair,
                  s(:sym, :symbol),
                  s(:str, "b"))),
              s(:send,
                s(:lvar, :thing), :map)))),
        s(:def, :test_represent_sequence,
          s(:args),
          s(:begin,
            s(:lvasgn, :thing,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:send,
                    s(:const, nil, :RepresentWithSeq), :new)))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "foo"),
                s(:str, "bar")),
              s(:send,
                s(:lvar, :thing), :seq)))),
        s(:def, :test_represent_with_init,
          s(:args),
          s(:begin,
            s(:lvasgn, :thing,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:send,
                    s(:const, nil, :RepresentWithInit), :new)))),
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:lvar, :thing), :str)))),
        s(:def, :test_represent!,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "foo"),
                s(:regopt)),
              s(:send,
                s(:const, nil, :Psych), :dump,
                s(:send,
                  s(:const, nil, :Represent), :new))),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :Represent),
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:send,
                    s(:const, nil, :Represent), :new)))))),
        s(:def, :test_scalar_coder,
          s(:args),
          s(:begin,
            s(:lvasgn, :foo,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:send,
                    s(:const, nil, :ScalarCoder), :new)))),
            s(:send, nil, :assert_equal,
              s(:str, "foo"),
              s(:lvar, :foo)))),
        s(:def, :test_load_dumped_tagging,
          s(:args),
          s(:begin,
            s(:lvasgn, :foo,
              s(:send,
                s(:const, nil, :InitApi), :new)),
            s(:lvasgn, :bar,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:lvar, :foo)))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :bar), :implicit)),
            s(:send, nil, :assert_equal,
              s(:str, "!ruby/object:Psych::TestCoder::InitApi"),
              s(:send,
                s(:lvar, :bar), :tag)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Psych), :Nodes), :Mapping), :BLOCK),
              s(:send,
                s(:lvar, :bar), :style)))),
        s(:def, :test_dump_with_tag,
          s(:args),
          s(:begin,
            s(:lvasgn, :foo,
              s(:send,
                s(:const, nil, :TaggingCoder), :new)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "hello"),
                s(:regopt)),
              s(:send,
                s(:const, nil, :Psych), :dump,
                s(:lvar, :foo))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\{aa"),
                s(:regopt)),
              s(:send,
                s(:const, nil, :Psych), :dump,
                s(:lvar, :foo))))),
        s(:def, :test_dump_encode_with,
          s(:args),
          s(:begin,
            s(:lvasgn, :foo,
              s(:send,
                s(:const, nil, :InitApi), :new)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "aa"),
                s(:regopt)),
              s(:send,
                s(:const, nil, :Psych), :dump,
                s(:lvar, :foo))))),
        s(:def, :test_dump_init_with,
          s(:args),
          s(:begin,
            s(:lvasgn, :foo,
              s(:send,
                s(:const, nil, :InitApi), :new)),
            s(:lvasgn, :bar,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:lvar, :foo)))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :foo), :a),
              s(:send,
                s(:lvar, :bar), :a)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :foo), :b),
              s(:send,
                s(:lvar, :bar), :b)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :bar), :c))))))))
