s(:begin,
  s(:send, nil, :require,
    s(:str, "psych/helper")),
  s(:module,
    s(:const, nil, :Psych),
    s(:module,
      s(:const, nil, :Visitors),
      s(:class,
        s(:const, nil, :TestEmitter),
        s(:const, nil, :TestCase),
        s(:begin,
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:zsuper),
              s(:ivasgn, :@io,
                s(:send,
                  s(:const, nil, :StringIO), :new)),
              s(:ivasgn, :@visitor,
                s(:send,
                  s(:const,
                    s(:const, nil, :Visitors), :Emitter), :new,
                  s(:ivar, :@io))))),
          s(:def, :test_options,
            s(:args),
            s(:begin,
              s(:lvasgn, :io,
                s(:send,
                  s(:const, nil, :StringIO), :new)),
              s(:lvasgn, :visitor,
                s(:send,
                  s(:const,
                    s(:const, nil, :Visitors), :Emitter), :new,
                  s(:lvar, :io),
                  s(:hash,
                    s(:pair,
                      s(:sym, :indentation),
                      s(:int, 3))))),
              s(:lvasgn, :s,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Stream), :new)),
              s(:lvasgn, :doc,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Document), :new)),
              s(:lvasgn, :mapping,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Mapping), :new)),
              s(:lvasgn, :m2,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Mapping), :new)),
              s(:send,
                s(:send,
                  s(:lvar, :m2), :children), :<<,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :new,
                  s(:str, "a"))),
              s(:send,
                s(:send,
                  s(:lvar, :m2), :children), :<<,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :new,
                  s(:str, "b"))),
              s(:send,
                s(:send,
                  s(:lvar, :mapping), :children), :<<,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :new,
                  s(:str, "key"))),
              s(:send,
                s(:send,
                  s(:lvar, :mapping), :children), :<<,
                s(:lvar, :m2)),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :children), :<<,
                s(:lvar, :mapping)),
              s(:send,
                s(:send,
                  s(:lvar, :s), :children), :<<,
                s(:lvar, :doc)),
              s(:send,
                s(:lvar, :visitor), :accept,
                s(:lvar, :s)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "^[ ]{3}a"),
                  s(:regopt)),
                s(:send,
                  s(:lvar, :io), :string)))),
          s(:def, :test_stream,
            s(:args),
            s(:begin,
              s(:lvasgn, :s,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Stream), :new)),
              s(:send,
                s(:ivar, :@visitor), :accept,
                s(:lvar, :s)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:ivar, :@io), :string)))),
          s(:def, :test_document,
            s(:args),
            s(:begin,
              s(:lvasgn, :s,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Stream), :new)),
              s(:lvasgn, :doc,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Document), :new,
                  s(:array,
                    s(:int, 1),
                    s(:int, 1)))),
              s(:lvasgn, :scalar,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :new,
                  s(:str, "hello world"))),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :children), :<<,
                s(:lvar, :scalar)),
              s(:send,
                s(:send,
                  s(:lvar, :s), :children), :<<,
                s(:lvar, :doc)),
              s(:send,
                s(:ivar, :@visitor), :accept,
                s(:lvar, :s)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "1.1"),
                  s(:regopt)),
                s(:send,
                  s(:ivar, :@io), :string)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:ivar, :@io), :string),
                s(:send,
                  s(:lvar, :s), :yaml)))),
          s(:def, :test_document_implicit_end,
            s(:args),
            s(:begin,
              s(:lvasgn, :s,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Stream), :new)),
              s(:lvasgn, :doc,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Document), :new)),
              s(:lvasgn, :mapping,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Mapping), :new)),
              s(:send,
                s(:send,
                  s(:lvar, :mapping), :children), :<<,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :new,
                  s(:str, "key"))),
              s(:send,
                s(:send,
                  s(:lvar, :mapping), :children), :<<,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :new,
                  s(:str, "value"))),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :children), :<<,
                s(:lvar, :mapping)),
              s(:send,
                s(:send,
                  s(:lvar, :s), :children), :<<,
                s(:lvar, :doc)),
              s(:send,
                s(:ivar, :@visitor), :accept,
                s(:lvar, :s)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "key: value"),
                  s(:regopt)),
                s(:send,
                  s(:ivar, :@io), :string)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:ivar, :@io), :string),
                s(:send,
                  s(:lvar, :s), :yaml)),
              s(:send, nil, :assert,
                s(:send,
                  s(:regexp,
                    s(:str, "\\.\\.\\."),
                    s(:regopt)), :!~,
                  s(:send,
                    s(:lvar, :s), :yaml))))),
          s(:def, :test_scalar,
            s(:args),
            s(:begin,
              s(:lvasgn, :s,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Stream), :new)),
              s(:lvasgn, :doc,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Document), :new)),
              s(:lvasgn, :scalar,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :new,
                  s(:str, "hello world"))),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :children), :<<,
                s(:lvar, :scalar)),
              s(:send,
                s(:send,
                  s(:lvar, :s), :children), :<<,
                s(:lvar, :doc)),
              s(:send,
                s(:ivar, :@visitor), :accept,
                s(:lvar, :s)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "hello"),
                  s(:regopt)),
                s(:send,
                  s(:ivar, :@io), :string)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:ivar, :@io), :string),
                s(:send,
                  s(:lvar, :s), :yaml)))),
          s(:def, :test_scalar_with_tag,
            s(:args),
            s(:begin,
              s(:lvasgn, :s,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Stream), :new)),
              s(:lvasgn, :doc,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Document), :new)),
              s(:lvasgn, :scalar,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :new,
                  s(:str, "hello world"),
                  s(:nil),
                  s(:str, "!str"),
                  s(:false),
                  s(:false),
                  s(:int, 5))),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :children), :<<,
                s(:lvar, :scalar)),
              s(:send,
                s(:send,
                  s(:lvar, :s), :children), :<<,
                s(:lvar, :doc)),
              s(:send,
                s(:ivar, :@visitor), :accept,
                s(:lvar, :s)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "str"),
                  s(:regopt)),
                s(:send,
                  s(:ivar, :@io), :string)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "hello"),
                  s(:regopt)),
                s(:send,
                  s(:ivar, :@io), :string)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:ivar, :@io), :string),
                s(:send,
                  s(:lvar, :s), :yaml)))),
          s(:def, :test_sequence,
            s(:args),
            s(:begin,
              s(:lvasgn, :s,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Stream), :new)),
              s(:lvasgn, :doc,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Document), :new)),
              s(:lvasgn, :scalar,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :new,
                  s(:str, "hello world"))),
              s(:lvasgn, :seq,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Sequence), :new)),
              s(:send,
                s(:send,
                  s(:lvar, :seq), :children), :<<,
                s(:lvar, :scalar)),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :children), :<<,
                s(:lvar, :seq)),
              s(:send,
                s(:send,
                  s(:lvar, :s), :children), :<<,
                s(:lvar, :doc)),
              s(:send,
                s(:ivar, :@visitor), :accept,
                s(:lvar, :s)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "- hello"),
                  s(:regopt)),
                s(:send,
                  s(:ivar, :@io), :string)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:ivar, :@io), :string),
                s(:send,
                  s(:lvar, :s), :yaml)))),
          s(:def, :test_mapping,
            s(:args),
            s(:begin,
              s(:lvasgn, :s,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Stream), :new)),
              s(:lvasgn, :doc,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Document), :new)),
              s(:lvasgn, :mapping,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Mapping), :new)),
              s(:send,
                s(:send,
                  s(:lvar, :mapping), :children), :<<,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :new,
                  s(:str, "key"))),
              s(:send,
                s(:send,
                  s(:lvar, :mapping), :children), :<<,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :new,
                  s(:str, "value"))),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :children), :<<,
                s(:lvar, :mapping)),
              s(:send,
                s(:send,
                  s(:lvar, :s), :children), :<<,
                s(:lvar, :doc)),
              s(:send,
                s(:ivar, :@visitor), :accept,
                s(:lvar, :s)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "key: value"),
                  s(:regopt)),
                s(:send,
                  s(:ivar, :@io), :string)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:ivar, :@io), :string),
                s(:send,
                  s(:lvar, :s), :yaml)))),
          s(:def, :test_alias,
            s(:args),
            s(:begin,
              s(:lvasgn, :s,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Stream), :new)),
              s(:lvasgn, :doc,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Document), :new)),
              s(:lvasgn, :mapping,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Mapping), :new)),
              s(:send,
                s(:send,
                  s(:lvar, :mapping), :children), :<<,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :new,
                  s(:str, "key"),
                  s(:str, "A"))),
              s(:send,
                s(:send,
                  s(:lvar, :mapping), :children), :<<,
                s(:send,
                  s(:const,
                    s(:const, nil, :Nodes), :Alias), :new,
                  s(:str, "A"))),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :children), :<<,
                s(:lvar, :mapping)),
              s(:send,
                s(:send,
                  s(:lvar, :s), :children), :<<,
                s(:lvar, :doc)),
              s(:send,
                s(:ivar, :@visitor), :accept,
                s(:lvar, :s)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "&A key: \\*A"),
                  s(:regopt)),
                s(:send,
                  s(:ivar, :@io), :string)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:ivar, :@io), :string),
                s(:send,
                  s(:lvar, :s), :yaml)))))))))
