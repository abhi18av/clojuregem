s(:begin,
  s(:send, nil, :require,
    s(:str, "psych/helper")),
  s(:module,
    s(:const, nil, :Psych),
    s(:module,
      s(:const, nil, :Visitors),
      s(:class,
        s(:const, nil, :TestDepthFirst),
        s(:const, nil, :TestCase),
        s(:begin,
          s(:class,
            s(:const, nil, :Collector),
            s(:send,
              s(:const, nil, :Struct), :new,
              s(:sym, :calls)),
            s(:begin,
              s(:def, :initialize,
                s(:args,
                  s(:optarg, :calls,
                    s(:array))),
                s(:zsuper)),
              s(:def, :call,
                s(:args,
                  s(:arg, :obj)),
                s(:send,
                  s(:send, nil, :calls), :<<,
                  s(:lvar, :obj))))),
          s(:def, :test_scalar,
            s(:args),
            s(:begin,
              s(:lvasgn, :collector,
                s(:send,
                  s(:const, nil, :Collector), :new)),
              s(:lvasgn, :visitor,
                s(:send,
                  s(:const,
                    s(:const, nil, :Visitors), :DepthFirst), :new,
                  s(:lvar, :collector))),
              s(:send,
                s(:lvar, :visitor), :accept,
                s(:send,
                  s(:const, nil, :Psych), :parse_stream,
                  s(:str, "--- hello"))),
              s(:send, nil, :assert_equal,
                s(:int, 3),
                s(:send,
                  s(:send,
                    s(:lvar, :collector), :calls), :length)))),
          s(:def, :test_sequence,
            s(:args),
            s(:begin,
              s(:lvasgn, :collector,
                s(:send,
                  s(:const, nil, :Collector), :new)),
              s(:lvasgn, :visitor,
                s(:send,
                  s(:const,
                    s(:const, nil, :Visitors), :DepthFirst), :new,
                  s(:lvar, :collector))),
              s(:send,
                s(:lvar, :visitor), :accept,
                s(:send,
                  s(:const, nil, :Psych), :parse_stream,
                  s(:str, "---\n- hello"))),
              s(:send, nil, :assert_equal,
                s(:int, 4),
                s(:send,
                  s(:send,
                    s(:lvar, :collector), :calls), :length)))),
          s(:def, :test_mapping,
            s(:args),
            s(:begin,
              s(:lvasgn, :collector,
                s(:send,
                  s(:const, nil, :Collector), :new)),
              s(:lvasgn, :visitor,
                s(:send,
                  s(:const,
                    s(:const, nil, :Visitors), :DepthFirst), :new,
                  s(:lvar, :collector))),
              s(:send,
                s(:lvar, :visitor), :accept,
                s(:send,
                  s(:const, nil, :Psych), :parse_stream,
                  s(:str, "---\nhello: world"))),
              s(:send, nil, :assert_equal,
                s(:int, 5),
                s(:send,
                  s(:send,
                    s(:lvar, :collector), :calls), :length)))),
          s(:def, :test_alias,
            s(:args),
            s(:begin,
              s(:lvasgn, :collector,
                s(:send,
                  s(:const, nil, :Collector), :new)),
              s(:lvasgn, :visitor,
                s(:send,
                  s(:const,
                    s(:const, nil, :Visitors), :DepthFirst), :new,
                  s(:lvar, :collector))),
              s(:send,
                s(:lvar, :visitor), :accept,
                s(:send,
                  s(:const, nil, :Psych), :parse_stream,
                  s(:str, "--- &yay\n- foo\n- *yay\n"))),
              s(:send, nil, :assert_equal,
                s(:int, 5),
                s(:send,
                  s(:send,
                    s(:lvar, :collector), :calls), :length)))))))))
