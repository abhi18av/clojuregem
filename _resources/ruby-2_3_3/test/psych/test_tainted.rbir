s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "helper")),
  s(:module,
    s(:const, nil, :Psych),
    s(:begin,
      s(:class,
        s(:const, nil, :TestStringTainted),
        s(:const, nil, :TestCase),
        s(:begin,
          s(:class,
            s(:const, nil, :Tainted),
            s(:const, nil, :Handler),
            s(:begin,
              s(:send, nil, :attr_reader,
                s(:sym, :tc)),
              s(:def, :initialize,
                s(:args,
                  s(:arg, :tc)),
                s(:ivasgn, :@tc,
                  s(:lvar, :tc))),
              s(:def, :start_document,
                s(:args,
                  s(:arg, :version),
                  s(:arg, :tags),
                  s(:arg, :implicit)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :tags), :flatten), :each),
                  s(:args,
                    s(:arg, :tag)),
                  s(:send, nil, :assert_taintedness,
                    s(:lvar, :tag)))),
              s(:def, :alias,
                s(:args,
                  s(:arg, :name)),
                s(:send, nil, :assert_taintedness,
                  s(:lvar, :name))),
              s(:def, :scalar,
                s(:args,
                  s(:arg, :value),
                  s(:arg, :anchor),
                  s(:arg, :tag),
                  s(:arg, :plain),
                  s(:arg, :quoted),
                  s(:arg, :style)),
                s(:begin,
                  s(:send, nil, :assert_taintedness,
                    s(:lvar, :value)),
                  s(:if,
                    s(:lvar, :tag),
                    s(:send, nil, :assert_taintedness,
                      s(:lvar, :tag)), nil),
                  s(:if,
                    s(:lvar, :anchor),
                    s(:send, nil, :assert_taintedness,
                      s(:lvar, :anchor)), nil))),
              s(:def, :start_sequence,
                s(:args,
                  s(:arg, :anchor),
                  s(:arg, :tag),
                  s(:arg, :implicit),
                  s(:arg, :style)),
                s(:begin,
                  s(:if,
                    s(:lvar, :tag),
                    s(:send, nil, :assert_taintedness,
                      s(:lvar, :tag)), nil),
                  s(:if,
                    s(:lvar, :anchor),
                    s(:send, nil, :assert_taintedness,
                      s(:lvar, :anchor)), nil))),
              s(:def, :start_mapping,
                s(:args,
                  s(:arg, :anchor),
                  s(:arg, :tag),
                  s(:arg, :implicit),
                  s(:arg, :style)),
                s(:begin,
                  s(:if,
                    s(:lvar, :tag),
                    s(:send, nil, :assert_taintedness,
                      s(:lvar, :tag)), nil),
                  s(:if,
                    s(:lvar, :anchor),
                    s(:send, nil, :assert_taintedness,
                      s(:lvar, :anchor)), nil))),
              s(:def, :assert_taintedness,
                s(:args,
                  s(:arg, :thing),
                  s(:optarg, :message,
                    s(:dstr,
                      s(:str, "'"),
                      s(:begin,
                        s(:lvar, :thing)),
                      s(:str, "' should be tainted")))),
                s(:send,
                  s(:send, nil, :tc), :assert,
                  s(:send,
                    s(:lvar, :thing), :tainted?),
                  s(:lvar, :message))))),
          s(:class,
            s(:const, nil, :Untainted),
            s(:const, nil, :Tainted),
            s(:def, :assert_taintedness,
              s(:args,
                s(:arg, :thing),
                s(:optarg, :message,
                  s(:dstr,
                    s(:str, "'"),
                    s(:begin,
                      s(:lvar, :thing)),
                    s(:str, "' should not be tainted")))),
              s(:send,
                s(:send, nil, :tc), :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :thing), :tainted?), :!),
                s(:lvar, :message)))),
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:lvasgn, :handler,
                s(:send,
                  s(:const, nil, :Tainted), :new,
                  s(:self))),
              s(:ivasgn, :@parser,
                s(:send,
                  s(:const,
                    s(:const, nil, :Psych), :Parser), :new,
                  s(:lvar, :handler))))),
          s(:def, :test_tags_are_tainted,
            s(:args),
            s(:send, nil, :assert_taintedness,
              s(:str, "%TAG !yaml! tag:yaml.org,2002:\n---\n!yaml!str \"foo\""))),
          s(:def, :test_alias,
            s(:args),
            s(:send, nil, :assert_taintedness,
              s(:str, "--- &ponies\n- foo\n- *ponies"))),
          s(:def, :test_scalar,
            s(:args),
            s(:send, nil, :assert_taintedness,
              s(:str, "--- ponies"))),
          s(:def, :test_anchor,
            s(:args),
            s(:send, nil, :assert_taintedness,
              s(:str, "--- &hi ponies"))),
          s(:def, :test_scalar_tag,
            s(:args),
            s(:send, nil, :assert_taintedness,
              s(:str, "--- !str ponies"))),
          s(:def, :test_seq_start_tag,
            s(:args),
            s(:send, nil, :assert_taintedness,
              s(:str, "--- !!seq [ a ]"))),
          s(:def, :test_seq_start_anchor,
            s(:args),
            s(:send, nil, :assert_taintedness,
              s(:str, "--- &zomg [ a ]"))),
          s(:def, :test_seq_mapping_tag,
            s(:args),
            s(:send, nil, :assert_taintedness,
              s(:str, "--- !!map { a: b }"))),
          s(:def, :test_seq_mapping_anchor,
            s(:args),
            s(:send, nil, :assert_taintedness,
              s(:str, "--- &himom { a: b }"))),
          s(:def, :assert_taintedness,
            s(:args,
              s(:arg, :string)),
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:send,
                s(:lvar, :string), :taint))))),
      s(:class,
        s(:const, nil, :TestStringUntainted),
        s(:const, nil, :TestStringTainted),
        s(:begin,
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:lvasgn, :handler,
                s(:send,
                  s(:const, nil, :Untainted), :new,
                  s(:self))),
              s(:ivasgn, :@parser,
                s(:send,
                  s(:const,
                    s(:const, nil, :Psych), :Parser), :new,
                  s(:lvar, :handler))))),
          s(:def, :assert_taintedness,
            s(:args,
              s(:arg, :string)),
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :string))))),
      s(:class,
        s(:const, nil, :TestStringIOUntainted),
        s(:const, nil, :TestStringTainted),
        s(:begin,
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:lvasgn, :handler,
                s(:send,
                  s(:const, nil, :Untainted), :new,
                  s(:self))),
              s(:ivasgn, :@parser,
                s(:send,
                  s(:const,
                    s(:const, nil, :Psych), :Parser), :new,
                  s(:lvar, :handler))))),
          s(:def, :assert_taintedness,
            s(:args,
              s(:arg, :string)),
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:send,
                s(:const, nil, :StringIO), :new,
                s(:lvar, :string)))))),
      s(:class,
        s(:const, nil, :TestIOTainted),
        s(:const, nil, :TestStringTainted),
        s(:def, :assert_taintedness,
          s(:args,
            s(:arg, :string)),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:array,
                s(:str, "something"),
                s(:str, "yml"))),
            s(:args,
              s(:arg, :t)),
            s(:begin,
              s(:send,
                s(:lvar, :t), :binmode),
              s(:send,
                s(:lvar, :t), :write,
                s(:lvar, :string)),
              s(:send,
                s(:lvar, :t), :close),
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send,
                    s(:lvar, :t), :path),
                  s(:str, "r:bom|utf-8")),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:ivar, :@parser), :parse,
                  s(:lvar, :f))))))))))
