s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "helper")),
  s(:module,
    s(:const, nil, :Psych),
    s(:class,
      s(:const, nil, :TestEncoding),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:class,
          s(:const, nil, :EncodingCatcher),
          s(:const, nil, :Handler),
          s(:begin,
            s(:send, nil, :attr_reader,
              s(:sym, :strings)),
            s(:def, :initialize,
              s(:args),
              s(:ivasgn, :@strings,
                s(:array))),
            s(:block,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Handler), :instance_methods,
                      s(:true)), :-,
                    s(:send,
                      s(:const, nil, :Object), :instance_methods))), :each),
              s(:args,
                s(:arg, :m)),
              s(:send, nil, :class_eval,
                s(:dstr,
                  s(:str, "\n"),
                  s(:str, "          def "),
                  s(:begin,
                    s(:lvar, :m)),
                  s(:str, " *args\n"),
                  s(:str, "            @strings += args.flatten.find_all { |a|\n"),
                  s(:str, "              String === a\n"),
                  s(:str, "            }\n"),
                  s(:str, "          end\n"),
                  s(:str, "        ")))))),
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:zsuper),
            s(:ivasgn, :@buffer,
              s(:send,
                s(:const, nil, :StringIO), :new)),
            s(:ivasgn, :@handler,
              s(:send,
                s(:const, nil, :EncodingCatcher), :new)),
            s(:ivasgn, :@parser,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Parser), :new,
                s(:ivar, :@handler))),
            s(:ivasgn, :@utf8,
              s(:send,
                s(:const, nil, :Encoding), :find,
                s(:str, "UTF-8"))),
            s(:ivasgn, :@emitter,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Emitter), :new,
                s(:ivar, :@buffer))))),
        s(:def, :test_dump_load_encoding_object,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_cycle,
              s(:const,
                s(:const, nil, :Encoding), :US_ASCII)),
            s(:send, nil, :assert_cycle,
              s(:const,
                s(:const, nil, :Encoding), :UTF_8)))),
        s(:def, :test_transcode_shiftjis,
          s(:args),
          s(:begin,
            s(:lvasgn, :str,
              s(:str, "こんにちは！")),
            s(:lvasgn, :loaded,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:str, "--- こんにちは！"), :encode,
                  s(:str, "SHIFT_JIS")))),
            s(:send, nil, :assert_equal,
              s(:lvar, :str),
              s(:lvar, :loaded)))),
        s(:def, :test_transcode_utf16le,
          s(:args),
          s(:begin,
            s(:lvasgn, :str,
              s(:str, "こんにちは！")),
            s(:lvasgn, :loaded,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:str, "--- こんにちは！"), :encode,
                  s(:str, "UTF-16LE")))),
            s(:send, nil, :assert_equal,
              s(:lvar, :str),
              s(:lvar, :loaded)))),
        s(:def, :test_transcode_utf16be,
          s(:args),
          s(:begin,
            s(:lvasgn, :str,
              s(:str, "こんにちは！")),
            s(:lvasgn, :loaded,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:str, "--- こんにちは！"), :encode,
                  s(:str, "UTF-16BE")))),
            s(:send, nil, :assert_equal,
              s(:lvar, :str),
              s(:lvar, :loaded)))),
        s(:def, :test_io_shiftjis,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:array,
                s(:str, "shiftjis"),
                s(:str, "yml")),
              s(:hash,
                s(:pair,
                  s(:sym, :encoding),
                  s(:str, "SHIFT_JIS")))),
            s(:args,
              s(:arg, :t)),
            s(:begin,
              s(:send,
                s(:lvar, :t), :write,
                s(:str, "--- こんにちは！")),
              s(:send,
                s(:lvar, :t), :close),
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send,
                    s(:lvar, :t), :path),
                  s(:str, "r"),
                  s(:hash,
                    s(:pair,
                      s(:sym, :encoding),
                      s(:str, "SHIFT_JIS")))),
                s(:args,
                  s(:arg, :f)),
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const, nil, :Psych), :SyntaxError)),
                  s(:args),
                  s(:send,
                    s(:const, nil, :Psych), :load,
                    s(:lvar, :f))))))),
        s(:def, :test_io_utf16le,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:array,
                s(:str, "utf16le"),
                s(:str, "yml"))),
            s(:args,
              s(:arg, :t)),
            s(:begin,
              s(:send,
                s(:lvar, :t), :binmode),
              s(:send,
                s(:lvar, :t), :write,
                s(:send,
                  s(:str, "--- こんにちは！"), :encode,
                  s(:str, "UTF-16LE"))),
              s(:send,
                s(:lvar, :t), :close),
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send,
                    s(:lvar, :t), :path),
                  s(:str, "rb"),
                  s(:hash,
                    s(:pair,
                      s(:sym, :encoding),
                      s(:str, "UTF-16LE")))),
                s(:args,
                  s(:arg, :f)),
                s(:send, nil, :assert_equal,
                  s(:str, "こんにちは！"),
                  s(:send,
                    s(:const, nil, :Psych), :load,
                    s(:lvar, :f))))))),
        s(:def, :test_io_utf16be,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:array,
                s(:str, "utf16be"),
                s(:str, "yml"))),
            s(:args,
              s(:arg, :t)),
            s(:begin,
              s(:send,
                s(:lvar, :t), :binmode),
              s(:send,
                s(:lvar, :t), :write,
                s(:send,
                  s(:str, "--- こんにちは！"), :encode,
                  s(:str, "UTF-16BE"))),
              s(:send,
                s(:lvar, :t), :close),
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send,
                    s(:lvar, :t), :path),
                  s(:str, "rb"),
                  s(:hash,
                    s(:pair,
                      s(:sym, :encoding),
                      s(:str, "UTF-16BE")))),
                s(:args,
                  s(:arg, :f)),
                s(:send, nil, :assert_equal,
                  s(:str, "こんにちは！"),
                  s(:send,
                    s(:const, nil, :Psych), :load,
                    s(:lvar, :f))))))),
        s(:def, :test_io_utf8,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:array,
                s(:str, "utf8"),
                s(:str, "yml"))),
            s(:args,
              s(:arg, :t)),
            s(:begin,
              s(:send,
                s(:lvar, :t), :binmode),
              s(:send,
                s(:lvar, :t), :write,
                s(:send,
                  s(:str, "--- こんにちは！"), :encode,
                  s(:str, "UTF-8"))),
              s(:send,
                s(:lvar, :t), :close),
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send,
                    s(:lvar, :t), :path),
                  s(:str, "rb"),
                  s(:hash,
                    s(:pair,
                      s(:sym, :encoding),
                      s(:str, "UTF-8")))),
                s(:args,
                  s(:arg, :f)),
                s(:send, nil, :assert_equal,
                  s(:str, "こんにちは！"),
                  s(:send,
                    s(:const, nil, :Psych), :load,
                    s(:lvar, :f))))))),
        s(:def, :test_emit_alias,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@emitter), :start_stream,
              s(:const,
                s(:const,
                  s(:const, nil, :Psych), :Parser), :UTF8)),
            s(:send,
              s(:ivar, :@emitter), :start_document,
              s(:array),
              s(:array),
              s(:true)),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const, nil, :RuntimeError)),
                s(:args),
                s(:send,
                  s(:ivar, :@emitter), :alias,
                  s(:send,
                    s(:str, "ドラえもん"), :encode,
                    s(:str, "EUC-JP"))))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "alias value"),
                s(:regopt)),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_to_yaml_is_valid,
          s(:args),
          s(:block,
            s(:send, nil, :with_default_external,
              s(:const,
                s(:const, nil, :Encoding), :US_ASCII)),
            s(:args),
            s(:block,
              s(:send, nil, :with_default_internal,
                s(:nil)),
              s(:args),
              s(:begin,
                s(:lvasgn, :s,
                  s(:str, "こんにちは！")),
                s(:send, nil, :assert_equal,
                  s(:const,
                    s(:const, nil, :Encoding), :UTF_8),
                  s(:send,
                    s(:send,
                      s(:const, nil, :Psych), :dump,
                      s(:lvar, :s)), :encoding)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :s),
                  s(:send,
                    s(:const, nil, :Psych), :load,
                    s(:send,
                      s(:const, nil, :Psych), :dump,
                      s(:lvar, :s)))))))),
        s(:def, :test_start_mapping,
          s(:args),
          s(:begin,
            s(:lvasgn, :foo,
              s(:str, "foo")),
            s(:lvasgn, :bar,
              s(:str, "バー")),
            s(:send,
              s(:ivar, :@emitter), :start_stream,
              s(:const,
                s(:const,
                  s(:const, nil, :Psych), :Parser), :UTF8)),
            s(:send,
              s(:ivar, :@emitter), :start_document,
              s(:array),
              s(:array),
              s(:true)),
            s(:send,
              s(:ivar, :@emitter), :start_mapping,
              s(:send,
                s(:lvar, :foo), :encode,
                s(:str, "Shift_JIS")),
              s(:send,
                s(:lvar, :bar), :encode,
                s(:str, "UTF-16LE")),
              s(:false),
              s(:const,
                s(:const,
                  s(:const, nil, :Nodes), :Sequence), :ANY)),
            s(:send,
              s(:ivar, :@emitter), :end_mapping),
            s(:send,
              s(:ivar, :@emitter), :end_document,
              s(:false)),
            s(:send,
              s(:ivar, :@emitter), :end_stream),
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:send,
                s(:ivar, :@buffer), :string)),
            s(:send, nil, :assert_encodings,
              s(:ivar, :@utf8),
              s(:send,
                s(:ivar, :@handler), :strings)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:lvar, :foo),
                s(:lvar, :bar)),
              s(:send,
                s(:ivar, :@handler), :strings)))),
        s(:def, :test_start_sequence,
          s(:args),
          s(:begin,
            s(:lvasgn, :foo,
              s(:str, "foo")),
            s(:lvasgn, :bar,
              s(:str, "バー")),
            s(:send,
              s(:ivar, :@emitter), :start_stream,
              s(:const,
                s(:const,
                  s(:const, nil, :Psych), :Parser), :UTF8)),
            s(:send,
              s(:ivar, :@emitter), :start_document,
              s(:array),
              s(:array),
              s(:true)),
            s(:send,
              s(:ivar, :@emitter), :start_sequence,
              s(:send,
                s(:lvar, :foo), :encode,
                s(:str, "Shift_JIS")),
              s(:send,
                s(:lvar, :bar), :encode,
                s(:str, "UTF-16LE")),
              s(:false),
              s(:const,
                s(:const,
                  s(:const, nil, :Nodes), :Sequence), :ANY)),
            s(:send,
              s(:ivar, :@emitter), :end_sequence),
            s(:send,
              s(:ivar, :@emitter), :end_document,
              s(:false)),
            s(:send,
              s(:ivar, :@emitter), :end_stream),
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:send,
                s(:ivar, :@buffer), :string)),
            s(:send, nil, :assert_encodings,
              s(:ivar, :@utf8),
              s(:send,
                s(:ivar, :@handler), :strings)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:lvar, :foo),
                s(:lvar, :bar)),
              s(:send,
                s(:ivar, :@handler), :strings)))),
        s(:def, :test_doc_tag_encoding,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:str, "鍵")),
            s(:send,
              s(:ivar, :@emitter), :start_stream,
              s(:const,
                s(:const,
                  s(:const, nil, :Psych), :Parser), :UTF8)),
            s(:send,
              s(:ivar, :@emitter), :start_document,
              s(:array,
                s(:int, 1),
                s(:int, 1)),
              s(:array,
                s(:array,
                  s(:send,
                    s(:str, "!"), :encode,
                    s(:str, "EUC-JP")),
                  s(:send,
                    s(:lvar, :key), :encode,
                    s(:str, "EUC-JP")))),
              s(:true)),
            s(:send,
              s(:ivar, :@emitter), :scalar,
              s(:str, "foo"),
              s(:nil),
              s(:nil),
              s(:true),
              s(:false),
              s(:const,
                s(:const,
                  s(:const, nil, :Nodes), :Scalar), :ANY)),
            s(:send,
              s(:ivar, :@emitter), :end_document,
              s(:false)),
            s(:send,
              s(:ivar, :@emitter), :end_stream),
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:send,
                s(:ivar, :@buffer), :string)),
            s(:send, nil, :assert_encodings,
              s(:ivar, :@utf8),
              s(:send,
                s(:ivar, :@handler), :strings)),
            s(:send, nil, :assert_equal,
              s(:lvar, :key),
              s(:send,
                s(:send,
                  s(:ivar, :@handler), :strings), :[],
                s(:int, 1))))),
        s(:def, :test_emitter_encoding,
          s(:args),
          s(:begin,
            s(:lvasgn, :str,
              s(:str, "壁に耳あり、障子に目あり")),
            s(:lvasgn, :thing,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:send,
                    s(:lvar, :str), :encode,
                    s(:str, "EUC-JP"))))),
            s(:send, nil, :assert_equal,
              s(:lvar, :str),
              s(:lvar, :thing)))),
        s(:def, :test_default_internal,
          s(:args),
          s(:block,
            s(:send, nil, :with_default_internal,
              s(:const,
                s(:const, nil, :Encoding), :EUC_JP)),
            s(:args),
            s(:begin,
              s(:lvasgn, :str,
                s(:str, "壁に耳あり、障子に目あり")),
              s(:send, nil, :assert_equal,
                s(:ivar, :@utf8),
                s(:send,
                  s(:lvar, :str), :encoding)),
              s(:send,
                s(:ivar, :@parser), :parse,
                s(:lvar, :str)),
              s(:send, nil, :assert_encodings,
                s(:const,
                  s(:const, nil, :Encoding), :EUC_JP),
                s(:send,
                  s(:ivar, :@handler), :strings)),
              s(:send, nil, :assert_equal,
                s(:lvar, :str),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:ivar, :@handler), :strings), :first), :encode,
                  s(:str, "UTF-8")))))),
        s(:def, :test_scalar,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:str, "--- a")),
            s(:send, nil, :assert_encodings,
              s(:ivar, :@utf8),
              s(:send,
                s(:ivar, :@handler), :strings)))),
        s(:def, :test_alias,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:dstr,
                s(:str, "%YAML 1.1\n"),
                s(:str, "---\n"),
                s(:str, "!!seq [\n"),
                s(:str, "  !!str \"Without properties\",\n"),
                s(:str, "  &A !!str \"Anchored\",\n"),
                s(:str, "  !!str \"Tagged\",\n"),
                s(:str, "  *A,\n"),
                s(:str, "  !!str \"\",\n"),
                s(:str, "]\n"))),
            s(:send, nil, :assert_encodings,
              s(:ivar, :@utf8),
              s(:send,
                s(:ivar, :@handler), :strings)))),
        s(:def, :test_list_anchor,
          s(:args),
          s(:begin,
            s(:lvasgn, :list,
              s(:array,
                s(:str, "a"),
                s(:str, "b"))),
            s(:send,
              s(:lvar, :list), :<<,
              s(:lvar, :list)),
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:send,
                s(:const, nil, :Psych), :dump,
                s(:lvar, :list))),
            s(:send, nil, :assert_encodings,
              s(:ivar, :@utf8),
              s(:send,
                s(:ivar, :@handler), :strings)))),
        s(:def, :test_map_anchor,
          s(:args),
          s(:begin,
            s(:lvasgn, :h,
              s(:hash)),
            s(:send,
              s(:lvar, :h), :[]=,
              s(:str, "a"),
              s(:lvar, :h)),
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:send,
                s(:const, nil, :Psych), :dump,
                s(:lvar, :h))),
            s(:send, nil, :assert_encodings,
              s(:ivar, :@utf8),
              s(:send,
                s(:ivar, :@handler), :strings)))),
        s(:def, :test_map_tag,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:dstr,
                s(:str, "%YAML 1.1\n"),
                s(:str, "---\n"),
                s(:str, "!!map { a : b }\n"))),
            s(:send, nil, :assert_encodings,
              s(:ivar, :@utf8),
              s(:send,
                s(:ivar, :@handler), :strings)))),
        s(:def, :test_doc_tag,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:dstr,
                s(:str, "%YAML 1.1\n"),
                s(:str, "%TAG ! tag:tenderlovemaking.com,2009:\n"),
                s(:str, "--- !fun\n"))),
            s(:send, nil, :assert_encodings,
              s(:ivar, :@utf8),
              s(:send,
                s(:ivar, :@handler), :strings)))),
        s(:def, :test_dump_non_ascii_string_to_file,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:array,
                s(:str, "utf8"),
                s(:str, "yml")),
              s(:hash,
                s(:pair,
                  s(:sym, :encoding),
                  s(:str, "UTF-8")))),
            s(:args,
              s(:arg, :t)),
            s(:begin,
              s(:lvasgn, :h,
                s(:hash,
                  s(:pair,
                    s(:str, "one"),
                    s(:str, "いち")))),
              s(:send,
                s(:const, nil, :Psych), :dump,
                s(:lvar, :h),
                s(:lvar, :t)),
              s(:send,
                s(:lvar, :t), :close),
              s(:send, nil, :assert_equal,
                s(:lvar, :h),
                s(:send,
                  s(:const, nil, :Psych), :load_file,
                  s(:send,
                    s(:lvar, :t), :path)))))),
        s(:send, nil, :private),
        s(:def, :assert_encodings,
          s(:args,
            s(:arg, :encoding),
            s(:arg, :strings)),
          s(:block,
            s(:send,
              s(:lvar, :strings), :each),
            s(:args,
              s(:arg, :str)),
            s(:send, nil, :assert_equal,
              s(:lvar, :encoding),
              s(:send,
                s(:lvar, :str), :encoding),
              s(:lvar, :str))))))))
