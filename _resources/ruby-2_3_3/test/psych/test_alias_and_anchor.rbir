s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "helper")),
  s(:class,
    s(:const, nil, :ObjectWithInstanceVariables), nil,
    s(:send, nil, :attr_accessor,
      s(:sym, :var1),
      s(:sym, :var2))),
  s(:class,
    s(:const, nil, :SubStringWithInstanceVariables),
    s(:const, nil, :String),
    s(:send, nil, :attr_accessor,
      s(:sym, :var1))),
  s(:module,
    s(:const, nil, :Psych),
    s(:class,
      s(:const, nil, :TestAliasAndAnchor),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:def, :test_mri_compatibility,
          s(:args),
          s(:begin,
            s(:lvasgn, :yaml,
              s(:dstr,
                s(:str, "---\n"),
                s(:str, "- &id001 !ruby/object {}\n"),
                s(:str, "\n"),
                s(:str, "- *id001\n"),
                s(:str, "- *id001\n"))),
            s(:lvasgn, :result,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:lvar, :yaml))),
            s(:block,
              s(:send,
                s(:lvar, :result), :each),
              s(:args,
                s(:arg, :el)),
              s(:send, nil, :assert_same,
                s(:send,
                  s(:lvar, :result), :[],
                  s(:int, 0)),
                s(:lvar, :el))))),
        s(:def, :test_mri_compatibility_object_with_ivars,
          s(:args),
          s(:begin,
            s(:lvasgn, :yaml,
              s(:dstr,
                s(:str, "---\n"),
                s(:str, "- &id001 !ruby/object:ObjectWithInstanceVariables\n"),
                s(:str, "  var1: test1\n"),
                s(:str, "  var2: test2\n"),
                s(:str, "- *id001\n"),
                s(:str, "- *id001\n"))),
            s(:lvasgn, :result,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:lvar, :yaml))),
            s(:block,
              s(:send,
                s(:lvar, :result), :each),
              s(:args,
                s(:arg, :el)),
              s(:begin,
                s(:send, nil, :assert_same,
                  s(:send,
                    s(:lvar, :result), :[],
                    s(:int, 0)),
                  s(:lvar, :el)),
                s(:send, nil, :assert_equal,
                  s(:str, "test1"),
                  s(:send,
                    s(:lvar, :el), :var1)),
                s(:send, nil, :assert_equal,
                  s(:str, "test2"),
                  s(:send,
                    s(:lvar, :el), :var2)))))),
        s(:def, :test_mri_compatibility_substring_with_ivars,
          s(:args),
          s(:begin,
            s(:lvasgn, :yaml,
              s(:dstr,
                s(:str, "---\n"),
                s(:str, "- &id001 !str:SubStringWithInstanceVariables\n"),
                s(:str, "  str: test\n"),
                s(:str, "  \"@var1\": test\n"),
                s(:str, "- *id001\n"),
                s(:str, "- *id001\n"))),
            s(:lvasgn, :result,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:lvar, :yaml))),
            s(:block,
              s(:send,
                s(:lvar, :result), :each),
              s(:args,
                s(:arg, :el)),
              s(:begin,
                s(:send, nil, :assert_same,
                  s(:send,
                    s(:lvar, :result), :[],
                    s(:int, 0)),
                  s(:lvar, :el)),
                s(:send, nil, :assert_equal,
                  s(:str, "test"),
                  s(:send,
                    s(:lvar, :el), :var1)))))),
        s(:def, :test_anchor_alias_round_trip,
          s(:args),
          s(:begin,
            s(:lvasgn, :o,
              s(:send,
                s(:const, nil, :Object), :new)),
            s(:lvasgn, :original,
              s(:array,
                s(:lvar, :o),
                s(:lvar, :o),
                s(:lvar, :o))),
            s(:lvasgn, :yaml,
              s(:send,
                s(:const, nil, :Psych), :dump,
                s(:lvar, :original))),
            s(:lvasgn, :result,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:lvar, :yaml))),
            s(:block,
              s(:send,
                s(:lvar, :result), :each),
              s(:args,
                s(:arg, :el)),
              s(:send, nil, :assert_same,
                s(:send,
                  s(:lvar, :result), :[],
                  s(:int, 0)),
                s(:lvar, :el))))),
        s(:def, :test_anchor_alias_round_trip_object_with_ivars,
          s(:args),
          s(:begin,
            s(:lvasgn, :o,
              s(:send,
                s(:const, nil, :ObjectWithInstanceVariables), :new)),
            s(:send,
              s(:lvar, :o), :var1=,
              s(:str, "test1")),
            s(:send,
              s(:lvar, :o), :var2=,
              s(:str, "test2")),
            s(:lvasgn, :original,
              s(:array,
                s(:lvar, :o),
                s(:lvar, :o),
                s(:lvar, :o))),
            s(:lvasgn, :yaml,
              s(:send,
                s(:const, nil, :Psych), :dump,
                s(:lvar, :original))),
            s(:lvasgn, :result,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:lvar, :yaml))),
            s(:block,
              s(:send,
                s(:lvar, :result), :each),
              s(:args,
                s(:arg, :el)),
              s(:begin,
                s(:send, nil, :assert_same,
                  s(:send,
                    s(:lvar, :result), :[],
                    s(:int, 0)),
                  s(:lvar, :el)),
                s(:send, nil, :assert_equal,
                  s(:str, "test1"),
                  s(:send,
                    s(:lvar, :el), :var1)),
                s(:send, nil, :assert_equal,
                  s(:str, "test2"),
                  s(:send,
                    s(:lvar, :el), :var2)))))),
        s(:def, :test_anchor_alias_round_trip_substring_with_ivars,
          s(:args),
          s(:begin,
            s(:lvasgn, :o,
              s(:send,
                s(:const, nil, :SubStringWithInstanceVariables), :new)),
            s(:send,
              s(:lvar, :o), :var1=,
              s(:str, "test")),
            s(:lvasgn, :original,
              s(:array,
                s(:lvar, :o),
                s(:lvar, :o),
                s(:lvar, :o))),
            s(:lvasgn, :yaml,
              s(:send,
                s(:const, nil, :Psych), :dump,
                s(:lvar, :original))),
            s(:lvasgn, :result,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:lvar, :yaml))),
            s(:block,
              s(:send,
                s(:lvar, :result), :each),
              s(:args,
                s(:arg, :el)),
              s(:begin,
                s(:send, nil, :assert_same,
                  s(:send,
                    s(:lvar, :result), :[],
                    s(:int, 0)),
                  s(:lvar, :el)),
                s(:send, nil, :assert_equal,
                  s(:str, "test"),
                  s(:send,
                    s(:lvar, :el), :var1))))))))))
