s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "helper")),
  s(:module,
    s(:const, nil, :Psych),
    s(:class,
      s(:const, nil, :TestOmap),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:def, :test_parse_as_map,
          s(:args),
          s(:begin,
            s(:lvasgn, :o,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:str, "--- !!omap\na: 1\nb: 2"))),
            s(:send, nil, :assert_kind_of,
              s(:const,
                s(:const, nil, :Psych), :Omap),
              s(:lvar, :o)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :o), :[],
                s(:str, "a"))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :o), :[],
                s(:str, "b"))))),
        s(:def, :test_self_referential,
          s(:args),
          s(:begin,
            s(:lvasgn, :map,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Omap), :new)),
            s(:send,
              s(:lvar, :map), :[]=,
              s(:str, "foo"),
              s(:str, "bar")),
            s(:send,
              s(:lvar, :map), :[]=,
              s(:str, "self"),
              s(:lvar, :map)),
            s(:send, nil, :assert_equal,
              s(:lvar, :map),
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:lvar, :map)))))),
        s(:def, :test_keys,
          s(:args),
          s(:begin,
            s(:lvasgn, :map,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Omap), :new)),
            s(:send,
              s(:lvar, :map), :[]=,
              s(:str, "foo"),
              s(:str, "bar")),
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:lvar, :map), :[],
                s(:str, "foo"))))),
        s(:def, :test_order,
          s(:args),
          s(:begin,
            s(:lvasgn, :map,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Omap), :new)),
            s(:send,
              s(:lvar, :map), :[]=,
              s(:str, "a"),
              s(:str, "b")),
            s(:send,
              s(:lvar, :map), :[]=,
              s(:str, "b"),
              s(:str, "c")),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:str, "a"),
                  s(:str, "b")),
                s(:array,
                  s(:str, "b"),
                  s(:str, "c"))),
              s(:send,
                s(:lvar, :map), :to_a)))),
        s(:def, :test_square,
          s(:args),
          s(:begin,
            s(:lvasgn, :list,
              s(:array,
                s(:array,
                  s(:str, "a"),
                  s(:str, "b")),
                s(:array,
                  s(:str, "b"),
                  s(:str, "c")))),
            s(:lvasgn, :map,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Omap), :[],
                s(:splat,
                  s(:send,
                    s(:lvar, :list), :flatten)))),
            s(:send, nil, :assert_equal,
              s(:lvar, :list),
              s(:send,
                s(:lvar, :map), :to_a)),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:lvar, :map), :[],
                s(:str, "a"))),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:lvar, :map), :[],
                s(:str, "b"))))),
        s(:def, :test_dump,
          s(:args),
          s(:begin,
            s(:lvasgn, :map,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Omap), :[],
                s(:str, "a"),
                s(:str, "b"),
                s(:str, "c"),
                s(:str, "d"))),
            s(:lvasgn, :yaml,
              s(:send,
                s(:const, nil, :Psych), :dump,
                s(:lvar, :map))),
            s(:send, nil, :assert_match,
              s(:str, "!omap"),
              s(:lvar, :yaml)),
            s(:send, nil, :assert_match,
              s(:str, "- a: b"),
              s(:lvar, :yaml)),
            s(:send, nil, :assert_match,
              s(:str, "- c: d"),
              s(:lvar, :yaml)))),
        s(:def, :test_round_trip,
          s(:args),
          s(:begin,
            s(:lvasgn, :list,
              s(:array,
                s(:array,
                  s(:str, "a"),
                  s(:str, "b")),
                s(:array,
                  s(:str, "b"),
                  s(:str, "c")))),
            s(:lvasgn, :map,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Omap), :[],
                s(:splat,
                  s(:send,
                    s(:lvar, :list), :flatten)))),
            s(:send, nil, :assert_cycle,
              s(:lvar, :map)))),
        s(:def, :test_load,
          s(:args),
          s(:begin,
            s(:lvasgn, :list,
              s(:array,
                s(:array,
                  s(:str, "a"),
                  s(:str, "b")),
                s(:array,
                  s(:str, "c"),
                  s(:str, "d")))),
            s(:lvasgn, :map,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:dstr,
                  s(:str, "--- !omap\n"),
                  s(:str, "- a: b\n"),
                  s(:str, "- c: d\n")))),
            s(:send, nil, :assert_equal,
              s(:lvar, :list),
              s(:send,
                s(:lvar, :map), :to_a)))),
        s(:def, :test_load_shorthand,
          s(:args),
          s(:begin,
            s(:lvasgn, :list,
              s(:array,
                s(:array,
                  s(:str, "a"),
                  s(:str, "b")),
                s(:array,
                  s(:str, "c"),
                  s(:str, "d")))),
            s(:lvasgn, :map,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:dstr,
                  s(:str, "--- !!omap\n"),
                  s(:str, "- a: b\n"),
                  s(:str, "- c: d\n")))),
            s(:send, nil, :assert_equal,
              s(:lvar, :list),
              s(:send,
                s(:lvar, :map), :to_a))))))))
