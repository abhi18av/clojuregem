s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "helper")),
  s(:module,
    s(:const, nil, :Psych),
    s(:class,
      s(:const, nil, :TestException),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:class,
          s(:const, nil, :Wups),
          s(:const, nil, :Exception),
          s(:begin,
            s(:send, nil, :attr_reader,
              s(:sym, :foo),
              s(:sym, :bar)),
            s(:def, :initialize,
              s(:args,
                s(:restarg, :args)),
              s(:begin,
                s(:zsuper),
                s(:ivasgn, :@foo,
                  s(:int, 1)),
                s(:ivasgn, :@bar,
                  s(:int, 2)))))),
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:zsuper),
            s(:ivasgn, :@wups,
              s(:send,
                s(:const, nil, :Wups), :new)))),
        s(:def, :test_naming_exception,
          s(:args),
          s(:begin,
            s(:lvasgn, :err,
              s(:rescue,
                s(:send,
                  s(:const, nil, :String), :xxx),
                s(:resbody, nil, nil,
                  s(:gvar, :$!)), nil)),
            s(:lvasgn, :new_err,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:lvar, :err)))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :err), :message),
              s(:send,
                s(:lvar, :new_err), :message)))),
        s(:def, :test_load_takes_file,
          s(:args),
          s(:begin,
            s(:lvasgn, :ex,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :Psych), :SyntaxError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Psych), :load,
                  s(:str, "--- `")))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :ex), :file)),
            s(:lvasgn, :ex,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :Psych), :SyntaxError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Psych), :load,
                  s(:str, "--- `"),
                  s(:str, "meow")))),
            s(:send, nil, :assert_equal,
              s(:str, "meow"),
              s(:send,
                s(:lvar, :ex), :file)))),
        s(:def, :test_psych_parse_stream_takes_file,
          s(:args),
          s(:begin,
            s(:lvasgn, :ex,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :Psych), :SyntaxError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Psych), :parse_stream,
                  s(:str, "--- `")))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :ex), :file)),
            s(:send, nil, :assert_match,
              s(:str, "(<unknown>)"),
              s(:send,
                s(:lvar, :ex), :message)),
            s(:lvasgn, :ex,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :Psych), :SyntaxError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Psych), :parse_stream,
                  s(:str, "--- `"),
                  s(:str, "omg!")))),
            s(:send, nil, :assert_equal,
              s(:str, "omg!"),
              s(:send,
                s(:lvar, :ex), :file)),
            s(:send, nil, :assert_match,
              s(:str, "omg!"),
              s(:send,
                s(:lvar, :ex), :message)))),
        s(:def, :test_load_stream_takes_file,
          s(:args),
          s(:begin,
            s(:lvasgn, :ex,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :Psych), :SyntaxError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Psych), :load_stream,
                  s(:str, "--- `")))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :ex), :file)),
            s(:send, nil, :assert_match,
              s(:str, "(<unknown>)"),
              s(:send,
                s(:lvar, :ex), :message)),
            s(:lvasgn, :ex,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :Psych), :SyntaxError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Psych), :load_stream,
                  s(:str, "--- `"),
                  s(:str, "omg!")))),
            s(:send, nil, :assert_equal,
              s(:str, "omg!"),
              s(:send,
                s(:lvar, :ex), :file)))),
        s(:def, :test_parse_file_exception,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:array,
                s(:str, "parsefile"),
                s(:str, "yml"))),
            s(:args,
              s(:arg, :t)),
            s(:begin,
              s(:send,
                s(:lvar, :t), :binmode),
              s(:send,
                s(:lvar, :t), :write,
                s(:str, "--- `")),
              s(:send,
                s(:lvar, :t), :close),
              s(:lvasgn, :ex,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const, nil, :Psych), :SyntaxError)),
                  s(:args),
                  s(:send,
                    s(:const, nil, :Psych), :parse_file,
                    s(:send,
                      s(:lvar, :t), :path)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :t), :path),
                s(:send,
                  s(:lvar, :ex), :file))))),
        s(:def, :test_load_file_exception,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:array,
                s(:str, "loadfile"),
                s(:str, "yml"))),
            s(:args,
              s(:arg, :t)),
            s(:begin,
              s(:send,
                s(:lvar, :t), :binmode),
              s(:send,
                s(:lvar, :t), :write,
                s(:str, "--- `")),
              s(:send,
                s(:lvar, :t), :close),
              s(:lvasgn, :ex,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const, nil, :Psych), :SyntaxError)),
                  s(:args),
                  s(:send,
                    s(:const, nil, :Psych), :load_file,
                    s(:send,
                      s(:lvar, :t), :path)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :t), :path),
                s(:send,
                  s(:lvar, :ex), :file))))),
        s(:def, :test_psych_parse_takes_file,
          s(:args),
          s(:begin,
            s(:lvasgn, :ex,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :Psych), :SyntaxError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Psych), :parse,
                  s(:str, "--- `")))),
            s(:send, nil, :assert_match,
              s(:str, "(<unknown>)"),
              s(:send,
                s(:lvar, :ex), :message)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :ex), :file)),
            s(:lvasgn, :ex,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :Psych), :SyntaxError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Psych), :parse,
                  s(:str, "--- `"),
                  s(:str, "omg!")))),
            s(:send, nil, :assert_match,
              s(:str, "omg!"),
              s(:send,
                s(:lvar, :ex), :message)))),
        s(:def, :test_attributes,
          s(:args),
          s(:begin,
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :Psych), :SyntaxError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Psych), :load,
                  s(:str, "--- `foo")))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :e), :file)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :e), :line)),
            s(:send, nil, :assert_equal,
              s(:int, 5),
              s(:send,
                s(:lvar, :e), :column)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :e), :problem)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :e), :context)))),
        s(:def, :test_convert,
          s(:args),
          s(:begin,
            s(:lvasgn, :w,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:ivar, :@wups)))),
            s(:send, nil, :assert_equal,
              s(:ivar, :@wups),
              s(:lvar, :w)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :w), :foo)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :w), :bar)))),
        s(:def, :test_to_yaml_properties,
          s(:args),
          s(:begin,
            s(:sclass,
              s(:ivar, :@wups),
              s(:def, :to_yaml_properties,
                s(:args),
                s(:array,
                  s(:sym, :@foo)))),
            s(:lvasgn, :w,
              s(:send,
                s(:const, nil, :Psych), :load,
                s(:send,
                  s(:const, nil, :Psych), :dump,
                  s(:ivar, :@wups)))),
            s(:send, nil, :assert_equal,
              s(:ivar, :@wups),
              s(:lvar, :w)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :w), :foo)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :w), :bar)))),
        s(:def, :test_psych_syntax_error,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:array,
                s(:str, "parsefile"),
                s(:str, "yml"))),
            s(:args,
              s(:arg, :t)),
            s(:begin,
              s(:send,
                s(:lvar, :t), :binmode),
              s(:send,
                s(:lvar, :t), :write,
                s(:str, "--- `")),
              s(:send,
                s(:lvar, :t), :close),
              s(:kwbegin,
                s(:ensure,
                  s(:rescue,
                    s(:send,
                      s(:const, nil, :Psych), :parse_file,
                      s(:send,
                        s(:lvar, :t), :path)),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :StandardError)), nil,
                      s(:send, nil, :assert,
                        s(:true))), nil),
                  s(:begin,
                    s(:if,
                      s(:gvar, :$!), nil,
                      s(:return)),
                    s(:lvasgn, :ancestors,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:gvar, :$!), :class), :ancestors), :inspect)),
                    s(:send, nil, :flunk,
                      s(:dstr,
                        s(:str, "Psych::SyntaxError not rescued by StandardError: "),
                        s(:begin,
                          s(:lvar, :ancestors))))))))))))))
