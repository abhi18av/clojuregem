s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "drb/drb")),
  s(:send, nil, :require,
    s(:str, "drb/extservm")),
  s(:send, nil, :require,
    s(:str, "timeout")),
  s(:send, nil, :require,
    s(:str, "shellwords")),
  s(:module,
    s(:const, nil, :DRbTests),
    s(:begin,
      s(:class,
        s(:const, nil, :DRbService), nil,
        s(:begin,
          s(:cvasgn, :@@manager,
            s(:send,
              s(:const,
                s(:const, nil, :DRb), :ExtServManager), :new)),
          s(:cvasgn, :@@ruby,
            s(:send,
              s(:const, nil, :Shellwords), :escape,
              s(:send,
                s(:const, nil, :EnvUtil), :rubybin))),
          s(:if,
            s(:gvar, :$DEBUG),
            s(:op_asgn,
              s(:cvasgn, :@@ruby), :+,
              s(:str, " -d")), nil),
          s(:defs,
            s(:self), :add_service_command,
            s(:args,
              s(:arg, :nm)),
            s(:begin,
              s(:lvasgn, :dir,
                s(:send,
                  s(:const, nil, :File), :dirname,
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:str, "(string)")))),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :DRb), :ExtServManager), :command), :[]=,
                s(:lvar, :nm),
                s(:array,
                  s(:cvar, :@@ruby),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :dir)),
                    s(:str, "/"),
                    s(:begin,
                      s(:lvar, :nm))))))),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "ut_drb.rb"),
                s(:str, "ut_array.rb"),
                s(:str, "ut_port.rb"),
                s(:str, "ut_large.rb"),
                s(:str, "ut_safe1.rb"),
                s(:str, "ut_eval.rb"),
                s(:str, "ut_eq.rb")), :each),
            s(:args,
              s(:arg, :nm)),
            s(:send, nil, :add_service_command,
              s(:lvar, :nm))),
          s(:ivasgn, :@server,
            s(:cvasgn, :@@server,
              s(:send,
                s(:const,
                  s(:const, nil, :DRb), :DRbServer), :new,
                s(:str, "druby://localhost:0"),
                s(:cvar, :@@manager),
                s(:hash)))),
          s(:send,
            s(:cvar, :@@manager), :uri=,
            s(:send,
              s(:cvar, :@@server), :uri)),
          s(:defs,
            s(:self), :manager,
            s(:args),
            s(:cvar, :@@manager)),
          s(:defs,
            s(:self), :server,
            s(:args),
            s(:or,
              s(:ivar, :@server),
              s(:cvar, :@@server))),
          s(:defs,
            s(:self), :ext_service,
            s(:args,
              s(:arg, :name)),
            s(:block,
              s(:send,
                s(:const, nil, :Timeout), :timeout,
                s(:int, 100),
                s(:const, nil, :RuntimeError)),
              s(:args),
              s(:send,
                s(:send, nil, :manager), :service,
                s(:lvar, :name)))),
          s(:defs,
            s(:self), :finish,
            s(:args),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@server), :instance_variable_get,
                    s(:sym, :@grp)), :list), :each),
              s(:args,
                s(:arg, :th)),
              s(:send,
                s(:lvar, :th), :join))))),
      s(:class,
        s(:const, nil, :Onecky), nil,
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :DRbUndumped)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :n)),
            s(:ivasgn, :@num,
              s(:lvar, :n))),
          s(:def, :to_i,
            s(:args),
            s(:send,
              s(:ivar, :@num), :to_i)),
          s(:def, :sleep,
            s(:args,
              s(:arg, :n)),
            s(:begin,
              s(:send,
                s(:const, nil, :Kernel), :sleep,
                s(:lvar, :n)),
              s(:send, nil, :to_i))))),
      s(:class,
        s(:const, nil, :FailOnecky),
        s(:const, nil, :Onecky),
        s(:begin,
          s(:class,
            s(:const, nil, :OneckyError),
            s(:const, nil, :RuntimeError), nil),
          s(:def, :to_i,
            s(:args),
            s(:send, nil, :raise,
              s(:const, nil, :OneckyError),
              s(:send,
                s(:ivar, :@num), :to_s))))),
      s(:class,
        s(:const, nil, :XArray),
        s(:const, nil, :Array),
        s(:def, :initialize,
          s(:args,
            s(:arg, :ary)),
          s(:block,
            s(:send,
              s(:lvar, :ary), :each),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:self), :push,
              s(:lvar, :x))))),
      s(:module,
        s(:const, nil, :DRbBase),
        s(:begin,
          s(:def, :setup_service,
            s(:args,
              s(:arg, :service_name)),
            s(:begin,
              s(:ivasgn, :@service_name,
                s(:lvar, :service_name)),
              s(:ivasgn, :@ext,
                s(:send,
                  s(:const, nil, :DRbService), :ext_service,
                  s(:ivar, :@service_name))),
              s(:ivasgn, :@there,
                s(:send,
                  s(:ivar, :@ext), :front)))),
          s(:def, :teardown,
            s(:args),
            s(:begin,
              s(:if,
                s(:and,
                  s(:defined?,
                    s(:ivar, :@ext)),
                  s(:ivar, :@ext)),
                s(:send,
                  s(:ivar, :@ext), :stop_service), nil),
              s(:send,
                s(:send,
                  s(:const, nil, :DRbService), :manager), :unregist,
                s(:ivar, :@service_name)),
              s(:while,
                s(:begin,
                  s(:rescue,
                    s(:and,
                      s(:ivar, :@there),
                      s(:send,
                        s(:ivar, :@there), :to_s)),
                    s(:resbody, nil, nil,
                      s(:nil)), nil)), nil),
              s(:lvasgn, :signal,
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "mswin|mingw"),
                      s(:regopt)),
                    s(:const, nil, :RUBY_PLATFORM)),
                  s(:sym, :KILL),
                  s(:sym, :TERM))),
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :Thread), :list), :each),
                s(:args,
                  s(:arg, :th)),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:lvar, :th), :respond_to?,
                      s(:sym, :pid)),
                    s(:send,
                      s(:send,
                        s(:lvar, :th), :[],
                        s(:sym, :drb_service)), :==,
                      s(:ivar, :@service_name))),
                  s(:begin,
                    s(:block,
                      s(:send,
                        s(:int, 10), :times),
                      s(:args),
                      s(:kwbegin,
                        s(:rescue,
                          s(:begin,
                            s(:send,
                              s(:const, nil, :Process), :kill,
                              s(:lvar, :signal),
                              s(:send,
                                s(:lvar, :th), :pid)),
                            s(:break)),
                          s(:resbody,
                            s(:array,
                              s(:const,
                                s(:const, nil, :Errno), :ESRCH)), nil,
                            s(:break)),
                          s(:resbody,
                            s(:array,
                              s(:const,
                                s(:const, nil, :Errno), :EPERM)), nil,
                            s(:begin,
                              s(:send, nil, :sleep,
                                s(:float, 0.1)),
                              s(:retry))), nil))),
                    s(:send,
                      s(:lvar, :th), :join)), nil)))))),
      s(:module,
        s(:const, nil, :DRbCore),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :DRbBase)),
          s(:def, :test_00_DRbObject,
            s(:args),
            s(:begin,
              s(:lvasgn, :ro,
                s(:send,
                  s(:const, nil, :DRbObject), :new,
                  s(:nil),
                  s(:str, "druby://localhost:12345"))),
              s(:send, nil, :assert_equal,
                s(:str, "druby://localhost:12345"),
                s(:send,
                  s(:lvar, :ro), :__drburi)),
              s(:send, nil, :assert_equal,
                s(:nil),
                s(:send,
                  s(:lvar, :ro), :__drbref)),
              s(:lvasgn, :ro,
                s(:send,
                  s(:const, nil, :DRbObject), :new_with_uri,
                  s(:str, "druby://localhost:12345"))),
              s(:send, nil, :assert_equal,
                s(:str, "druby://localhost:12345"),
                s(:send,
                  s(:lvar, :ro), :__drburi)),
              s(:send, nil, :assert_equal,
                s(:nil),
                s(:send,
                  s(:lvar, :ro), :__drbref)),
              s(:lvasgn, :ro,
                s(:send,
                  s(:const, nil, :DRbObject), :new_with_uri,
                  s(:str, "druby://localhost:12345?foobar"))),
              s(:send, nil, :assert_equal,
                s(:str, "druby://localhost:12345"),
                s(:send,
                  s(:lvar, :ro), :__drburi)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const,
                    s(:const, nil, :DRb), :DRbURIOption), :new,
                  s(:str, "foobar")),
                s(:send,
                  s(:lvar, :ro), :__drbref)))),
          s(:def, :test_01,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, "hello"),
                s(:send,
                  s(:ivar, :@there), :hello)),
              s(:lvasgn, :onecky,
                s(:send,
                  s(:const, nil, :Onecky), :new,
                  s(:str, "3"))),
              s(:send, nil, :assert_equal,
                s(:int, 6),
                s(:send,
                  s(:ivar, :@there), :sample,
                  s(:lvar, :onecky),
                  s(:int, 1),
                  s(:int, 2))),
              s(:lvasgn, :ary,
                s(:send,
                  s(:ivar, :@there), :to_a)),
              s(:send, nil, :assert_kind_of,
                s(:const,
                  s(:const, nil, :DRb), :DRbObject),
                s(:lvar, :ary)),
              s(:send, nil, :assert,
                s(:send,
                  s(:ivar, :@there), :respond_to?,
                  s(:sym, :to_a),
                  s(:true))),
              s(:send, nil, :assert,
                s(:send,
                  s(:ivar, :@there), :respond_to?,
                  s(:sym, :eval),
                  s(:true))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:ivar, :@there), :respond_to?,
                    s(:sym, :eval),
                    s(:false)), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:ivar, :@there), :respond_to?,
                    s(:sym, :eval)), :!)))),
          s(:def, :test_01_02_loop,
            s(:args),
            s(:begin,
              s(:lvasgn, :onecky,
                s(:send,
                  s(:const, nil, :Onecky), :new,
                  s(:str, "3"))),
              s(:block,
                s(:send,
                  s(:int, 50), :times),
                s(:args),
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:int, 6),
                    s(:send,
                      s(:ivar, :@there), :sample,
                      s(:lvar, :onecky),
                      s(:int, 1),
                      s(:int, 2))),
                  s(:lvasgn, :ary,
                    s(:send,
                      s(:ivar, :@there), :to_a)),
                  s(:send, nil, :assert_kind_of,
                    s(:const,
                      s(:const, nil, :DRb), :DRbObject),
                    s(:lvar, :ary)))))),
          s(:def, :test_02_unknown,
            s(:args),
            s(:begin,
              s(:lvasgn, :obj,
                s(:send,
                  s(:ivar, :@there), :unknown_class)),
              s(:send, nil, :assert_kind_of,
                s(:const,
                  s(:const, nil, :DRb), :DRbUnknown),
                s(:lvar, :obj)),
              s(:send, nil, :assert_equal,
                s(:str, "DRbTests::Unknown2"),
                s(:send,
                  s(:lvar, :obj), :name)),
              s(:lvasgn, :obj,
                s(:send,
                  s(:ivar, :@there), :unknown_module)),
              s(:send, nil, :assert_kind_of,
                s(:const,
                  s(:const, nil, :DRb), :DRbUnknown),
                s(:lvar, :obj)),
              s(:send, nil, :assert_equal,
                s(:str, "DRbTests::DRbEx::"),
                s(:send,
                  s(:lvar, :obj), :name)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :DRb), :DRbUnknownError)),
                s(:args),
                s(:send,
                  s(:ivar, :@there), :unknown_error)),
              s(:lvasgn, :onecky,
                s(:send,
                  s(:const, nil, :FailOnecky), :new,
                  s(:str, "3"))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :FailOnecky), :OneckyError)),
                s(:args),
                s(:send,
                  s(:ivar, :@there), :sample,
                  s(:lvar, :onecky),
                  s(:int, 1),
                  s(:int, 2))))),
          s(:def, :test_03,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:int, 8),
                s(:send,
                  s(:ivar, :@there), :sum,
                  s(:int, 1),
                  s(:int, 1),
                  s(:int, 1),
                  s(:int, 1),
                  s(:int, 1),
                  s(:int, 1),
                  s(:int, 1),
                  s(:int, 1))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :DRb), :DRbConnError)),
                s(:args),
                s(:send,
                  s(:ivar, :@there), :sum,
                  s(:int, 1),
                  s(:int, 1),
                  s(:int, 1),
                  s(:int, 1),
                  s(:int, 1),
                  s(:int, 1),
                  s(:int, 1),
                  s(:int, 1),
                  s(:int, 1))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :DRb), :DRbConnError)),
                s(:args),
                s(:send,
                  s(:ivar, :@there), :sum,
                  s(:send,
                    s(:str, "1"), :*,
                    s(:int, 4096)))))),
          s(:def, :test_04,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_respond_to,
                s(:ivar, :@there),
                s(:str, "sum")),
              s(:send, nil, :assert,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:ivar, :@there), :respond_to?,
                      s(:str, "foobar"))), :!)))),
          s(:def, :test_05_eq,
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:send,
                  s(:send,
                    s(:ivar, :@there), :to_a), :[],
                  s(:int, 0))),
              s(:lvasgn, :b,
                s(:send,
                  s(:send,
                    s(:ivar, :@there), :to_a), :[],
                  s(:int, 0))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :object_id), :!=,
                  s(:send,
                    s(:lvar, :b), :object_id))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :a), :==,
                  s(:lvar, :b))),
              s(:send, nil, :assert_equal,
                s(:lvar, :a),
                s(:lvar, :b)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :a), :==,
                  s(:ivar, :@there))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :a), :hash),
                s(:send,
                  s(:lvar, :b), :hash)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :a), :hash),
                s(:send,
                  s(:ivar, :@there), :hash)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :a), :eql?,
                  s(:lvar, :b))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :a), :eql?,
                  s(:ivar, :@there))))),
          s(:def, :test_06_timeout,
            s(:args),
            s(:begin,
              s(:lvasgn, :ten,
                s(:send,
                  s(:const, nil, :Onecky), :new,
                  s(:int, 10))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :Timeout), :Error)),
                s(:args),
                s(:send,
                  s(:ivar, :@there), :do_timeout,
                  s(:lvar, :ten))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :Timeout), :Error)),
                s(:args),
                s(:send,
                  s(:ivar, :@there), :do_timeout,
                  s(:lvar, :ten))))),
          s(:def, :test_07_private_missing,
            s(:args),
            s(:begin,
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :NoMethodError)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@there), :method_missing,
                    s(:sym, :eval),
                    s(:str, "nil")))),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "^private method \\`eval\\'"),
                  s(:regopt)),
                s(:send,
                  s(:lvar, :e), :message)),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :NoMethodError)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@there), :call_private_method))),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "^private method \\`call_private_method\\'"),
                  s(:regopt)),
                s(:send,
                  s(:lvar, :e), :message)))),
          s(:def, :test_07_protected_missing,
            s(:args),
            s(:begin,
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :NoMethodError)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@there), :call_protected_method))),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "^protected method \\`call_protected_method\\'"),
                  s(:regopt)),
                s(:send,
                  s(:lvar, :e), :message)))),
          s(:def, :test_07_public_missing,
            s(:args),
            s(:begin,
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :NoMethodError)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@there), :method_missing,
                    s(:sym, :undefined_method_test)))),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "^undefined method \\`undefined_method_test\\'"),
                  s(:regopt)),
                s(:send,
                  s(:lvar, :e), :message)))),
          s(:def, :test_07_send_missing,
            s(:args),
            s(:begin,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :DRb), :DRbConnError)),
                s(:args),
                s(:send,
                  s(:ivar, :@there), :method_missing,
                  s(:sym, :__send__),
                  s(:sym, :to_s))),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:ivar, :@there), :missing)))),
          s(:def, :test_08_here,
            s(:args),
            s(:begin,
              s(:lvasgn, :ro,
                s(:send,
                  s(:const, nil, :DRbObject), :new,
                  s(:nil),
                  s(:send,
                    s(:const, nil, :DRb), :uri))),
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :String),
                s(:send,
                  s(:lvar, :ro), :to_s)),
              s(:lvasgn, :ro,
                s(:send,
                  s(:const, nil, :DRbObject), :new_with_uri,
                  s(:send,
                    s(:const, nil, :DRb), :uri))),
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :String),
                s(:send,
                  s(:lvar, :ro), :to_s)))),
          s(:def, :uri_concat_option,
            s(:args,
              s(:arg, :uri),
              s(:arg, :opt)),
            s(:dstr,
              s(:begin,
                s(:lvar, :uri)),
              s(:str, "?"),
              s(:begin,
                s(:lvar, :opt)))),
          s(:def, :test_09_option,
            s(:args),
            s(:begin,
              s(:lvasgn, :uri,
                s(:send, nil, :uri_concat_option,
                  s(:send,
                    s(:ivar, :@there), :__drburi),
                  s(:str, "foo"))),
              s(:lvasgn, :ro,
                s(:send,
                  s(:const, nil, :DRbObject), :new_with_uri,
                  s(:lvar, :uri))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :ro), :__drburi),
                s(:send,
                  s(:ivar, :@there), :__drburi)),
              s(:send, nil, :assert_equal,
                s(:int, 3),
                s(:send,
                  s(:lvar, :ro), :size)),
              s(:lvasgn, :uri,
                s(:send, nil, :uri_concat_option,
                  s(:send,
                    s(:ivar, :@there), :__drburi),
                  s(:str, ""))),
              s(:lvasgn, :ro,
                s(:send,
                  s(:const, nil, :DRbObject), :new_with_uri,
                  s(:lvar, :uri))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :ro), :__drburi),
                s(:send,
                  s(:ivar, :@there), :__drburi)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const,
                    s(:const, nil, :DRb), :DRbURIOption), :new,
                  s(:str, "")),
                s(:send,
                  s(:lvar, :ro), :__drbref)),
              s(:lvasgn, :uri,
                s(:send, nil, :uri_concat_option,
                  s(:send,
                    s(:ivar, :@there), :__drburi),
                  s(:str, "hello?world"))),
              s(:lvasgn, :ro,
                s(:send,
                  s(:const, nil, :DRbObject), :new_with_uri,
                  s(:lvar, :uri))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const,
                    s(:const, nil, :DRb), :DRbURIOption), :new,
                  s(:str, "hello?world")),
                s(:send,
                  s(:lvar, :ro), :__drbref)),
              s(:lvasgn, :uri,
                s(:send, nil, :uri_concat_option,
                  s(:send,
                    s(:ivar, :@there), :__drburi),
                  s(:str, "?hello?world"))),
              s(:lvasgn, :ro,
                s(:send,
                  s(:const, nil, :DRbObject), :new_with_uri,
                  s(:lvar, :uri))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const,
                    s(:const, nil, :DRb), :DRbURIOption), :new,
                  s(:str, "?hello?world")),
                s(:send,
                  s(:lvar, :ro), :__drbref)))),
          s(:def, :test_10_yield,
            s(:args),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@there), :simple_hash), :each),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:begin,
                s(:send, nil, :assert_kind_of,
                  s(:const, nil, :String),
                  s(:lvar, :k)),
                s(:send, nil, :assert_kind_of,
                  s(:const, nil, :Symbol),
                  s(:lvar, :v))))),
          s(:def, :test_10_yield_undumped,
            s(:args),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@there), :xarray2_hash), :each),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:begin,
                s(:send, nil, :assert_kind_of,
                  s(:const, nil, :String),
                  s(:lvar, :k)),
                s(:send, nil, :assert_kind_of,
                  s(:const, nil, :DRbObject),
                  s(:lvar, :v))))),
          s(:def, :test_11_remote_no_method_error,
            s(:args),
            s(:begin,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :DRb), :DRbRemoteError)),
                s(:args),
                s(:send,
                  s(:ivar, :@there), :remote_no_method_error)),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:ivar, :@there), :remote_no_method_error),
                  s(:resbody, nil, nil,
                    s(:begin,
                      s(:lvasgn, :error,
                        s(:gvar, :$!)),
                      s(:send, nil, :assert_match,
                        s(:regexp,
                          s(:str, "^undefined method .*\\(NoMethodError\\)"),
                          s(:regopt)),
                        s(:send,
                          s(:lvar, :error), :message)),
                      s(:send, nil, :assert_equal,
                        s(:str, "NoMethodError"),
                        s(:send,
                          s(:lvar, :error), :reason)))), nil)))))),
      s(:module,
        s(:const, nil, :DRbAry),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :DRbBase)),
          s(:def, :test_01,
            s(:args),
            s(:send, nil, :assert_kind_of,
              s(:const,
                s(:const, nil, :DRb), :DRbObject),
              s(:ivar, :@there))),
          s(:def, :test_02_collect,
            s(:args),
            s(:begin,
              s(:lvasgn, :ary,
                s(:block,
                  s(:send,
                    s(:ivar, :@there), :collect),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:lvar, :x), :+,
                    s(:lvar, :x)))),
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :Array),
                s(:lvar, :ary)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:int, 2),
                  s(:int, 4),
                  s(:str, "IIIIII"),
                  s(:int, 8),
                  s(:str, "fivefive"),
                  s(:int, 12)),
                s(:lvar, :ary)))),
          s(:def, :test_03_redo,
            s(:args),
            s(:begin,
              s(:lvasgn, :ary,
                s(:array)),
              s(:lvasgn, :count,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:ivar, :@there), :each),
                s(:args,
                  s(:arg, :x)),
                s(:begin,
                  s(:op_asgn,
                    s(:lvasgn, :count), :+,
                    s(:int, 1)),
                  s(:send,
                    s(:lvar, :ary), :push,
                    s(:lvar, :x)),
                  s(:if,
                    s(:send,
                      s(:lvar, :count), :==,
                      s(:int, 3)),
                    s(:redo), nil))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:int, 1),
                  s(:int, 2),
                  s(:str, "III"),
                  s(:str, "III"),
                  s(:int, 4),
                  s(:str, "five"),
                  s(:int, 6)),
                s(:lvar, :ary)))),
          s(:def, :test_05_break,
            s(:args),
            s(:begin,
              s(:lvasgn, :ary,
                s(:array)),
              s(:block,
                s(:send,
                  s(:ivar, :@there), :each),
                s(:args,
                  s(:arg, :x)),
                s(:begin,
                  s(:send,
                    s(:lvar, :ary), :push,
                    s(:lvar, :x)),
                  s(:if,
                    s(:send,
                      s(:lvar, :x), :==,
                      s(:int, 4)),
                    s(:break), nil))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:int, 1),
                  s(:int, 2),
                  s(:str, "III"),
                  s(:int, 4)),
                s(:lvar, :ary)))),
          s(:def, :test_06_next,
            s(:args),
            s(:begin,
              s(:lvasgn, :ary,
                s(:array)),
              s(:block,
                s(:send,
                  s(:ivar, :@there), :each),
                s(:args,
                  s(:arg, :x)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:const, nil, :String), :===,
                      s(:lvar, :x)),
                    s(:next), nil),
                  s(:send,
                    s(:lvar, :ary), :push,
                    s(:lvar, :x)))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 4),
                  s(:int, 6)),
                s(:lvar, :ary)))),
          s(:send, nil, :class_eval,
            s(:dstr,
              s(:str, "  def test_07_break_18\n"),
              s(:str, "    ary = []\n"),
              s(:str, "    result = @there.each do |x|\n"),
              s(:str, "      ary.push x\n"),
              s(:str, "      break(:done) if x == 4\n"),
              s(:str, "    end\n"),
              s(:str, "    assert_equal([1, 2, 'III', 4], ary)\n"),
              s(:str, "    assert_equal(:done, result)\n"),
              s(:str, "  end\n"))))))))
