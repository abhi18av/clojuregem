s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "set")),
  s(:class,
    s(:const, nil, :TC_Set),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:class,
        s(:const, nil, :Set2),
        s(:const, nil, :Set), nil),
      s(:def, :test_aref,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:begin,
              s(:send,
                s(:const, nil, :Set), :[]),
              s(:send,
                s(:const, nil, :Set), :[],
                s(:nil)),
              s(:send,
                s(:const, nil, :Set), :[],
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:const, nil, :Set), :[]), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:const, nil, :Set), :[],
                s(:nil)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:const, nil, :Set), :[],
                s(:array)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:const, nil, :Set), :[],
                s(:array,
                  s(:nil))), :size)),
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 2),
              s(:int, 4),
              s(:int, 6),
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :new,
              s(:array,
                s(:int, 2),
                s(:int, 4),
                s(:int, 6))),
            s(:lvar, :set)))),
      s(:def, :test_s_new,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:begin,
              s(:send,
                s(:const, nil, :Set), :new),
              s(:send,
                s(:const, nil, :Set), :new,
                s(:nil)),
              s(:send,
                s(:const, nil, :Set), :new,
                s(:array)),
              s(:send,
                s(:const, nil, :Set), :new,
                s(:array,
                  s(:int, 1),
                  s(:int, 2))),
              s(:send,
                s(:const, nil, :Set), :new,
                s(:irange,
                  s(:str, "a"),
                  s(:str, "c"))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :Set), :new,
              s(:false))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :Set), :new,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :Set), :new,
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:const, nil, :Set), :new), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:const, nil, :Set), :new,
                s(:nil)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:const, nil, :Set), :new,
                s(:array)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:const, nil, :Set), :new,
                s(:array,
                  s(:nil))), :size)),
          s(:lvasgn, :ary,
            s(:array,
              s(:int, 2),
              s(:int, 4),
              s(:int, 6),
              s(:int, 4))),
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :new,
              s(:lvar, :ary))),
          s(:send,
            s(:lvar, :ary), :clear),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :set), :empty?)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :set), :size)),
          s(:lvasgn, :ary,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:lvasgn, :s,
            s(:block,
              s(:send,
                s(:const, nil, :Set), :new,
                s(:lvar, :ary)),
              s(:args,
                s(:arg, :o)),
              s(:send,
                s(:lvar, :o), :*,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 4),
              s(:int, 6)),
            s(:send,
              s(:lvar, :s), :sort)))),
      s(:def, :test_clone,
        s(:args),
        s(:begin,
          s(:lvasgn, :set1,
            s(:send,
              s(:const, nil, :Set), :new)),
          s(:lvasgn, :set2,
            s(:send,
              s(:lvar, :set1), :clone)),
          s(:send,
            s(:lvar, :set1), :<<,
            s(:str, "abc")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :new),
            s(:lvar, :set2)))),
      s(:def, :test_dup,
        s(:args),
        s(:begin,
          s(:lvasgn, :set1,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :set2,
            s(:send,
              s(:lvar, :set1), :dup)),
          s(:send, nil, :assert_not_same,
            s(:lvar, :set1),
            s(:lvar, :set2)),
          s(:send, nil, :assert_equal,
            s(:lvar, :set1),
            s(:lvar, :set2)),
          s(:send,
            s(:lvar, :set1), :add,
            s(:int, 3)),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :set1),
            s(:lvar, :set2)))),
      s(:def, :test_size,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:const, nil, :Set), :[]), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:const, nil, :Set), :[],
                s(:int, 1),
                s(:int, 2)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:const, nil, :Set), :[],
                s(:int, 1),
                s(:int, 2),
                s(:int, 1)), :size)))),
      s(:def, :test_empty?,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:const, nil, :Set), :[]), :empty?)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send,
                s(:const, nil, :Set), :[],
                s(:int, 1),
                s(:int, 2)), :empty?)))),
      s(:def, :test_clear,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :ret,
            s(:send,
              s(:lvar, :set), :clear)),
          s(:send, nil, :assert_same,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :set), :empty?)))),
      s(:def, :test_replace,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :ret,
            s(:send,
              s(:lvar, :set), :replace,
              s(:irange,
                s(:str, "a"),
                s(:str, "c")))),
          s(:send, nil, :assert_same,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:str, "a"),
              s(:str, "b"),
              s(:str, "c")),
            s(:lvar, :set)),
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :set), :replace,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2)),
            s(:lvar, :set)))),
      s(:def, :test_to_a,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 2))),
          s(:lvasgn, :ary,
            s(:send,
              s(:lvar, :set), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:send,
              s(:lvar, :ary), :sort)))),
      s(:def, :test_flatten,
        s(:args),
        s(:begin,
          s(:lvasgn, :set1,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:send,
                s(:const, nil, :Set), :[],
                s(:int, 5),
                s(:send,
                  s(:const, nil, :Set), :[],
                  s(:int, 7),
                  s(:send,
                    s(:const, nil, :Set), :[],
                    s(:int, 0))),
                s(:send,
                  s(:const, nil, :Set), :[],
                  s(:int, 6),
                  s(:int, 2)),
                s(:int, 1)),
              s(:int, 3),
              s(:send,
                s(:const, nil, :Set), :[],
                s(:int, 3),
                s(:int, 4)))),
          s(:lvasgn, :set2,
            s(:send,
              s(:lvar, :set1), :flatten)),
          s(:lvasgn, :set3,
            s(:send,
              s(:const, nil, :Set), :new,
              s(:irange,
                s(:int, 0),
                s(:int, 7)))),
          s(:send, nil, :assert_not_same,
            s(:lvar, :set2),
            s(:lvar, :set1)),
          s(:send, nil, :assert_equal,
            s(:lvar, :set3),
            s(:lvar, :set2)),
          s(:lvasgn, :orig_set1,
            s(:lvar, :set1)),
          s(:send,
            s(:lvar, :set1), :flatten!),
          s(:send, nil, :assert_same,
            s(:lvar, :orig_set1),
            s(:lvar, :set1)),
          s(:send, nil, :assert_equal,
            s(:lvar, :set3),
            s(:lvar, :set1)),
          s(:lvasgn, :set1,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :set2,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:lvar, :set1),
              s(:send,
                s(:const, nil, :Set), :[],
                s(:lvar, :set1),
                s(:int, 4)),
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:lvar, :set2), :flatten!)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 4))),
            s(:lvar, :set2)),
          s(:lvasgn, :set2,
            s(:send,
              s(:const, nil, :Set), :[])),
          s(:lvasgn, :set1,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:lvar, :set2))),
          s(:send,
            s(:lvar, :set2), :add,
            s(:lvar, :set1)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :set1), :flatten!)),
          s(:lvasgn, :empty,
            s(:send,
              s(:const, nil, :Set), :[])),
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:send,
                s(:const, nil, :Set), :[],
                s(:lvar, :empty),
                s(:str, "a")),
              s(:send,
                s(:const, nil, :Set), :[],
                s(:lvar, :empty),
                s(:str, "b")))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:lvar, :set), :flatten)),
          s(:lvasgn, :set1,
            s(:send,
              s(:lvar, :empty), :merge,
              s(:send,
                s(:const, nil, :Set), :[],
                s(:str, "no_more"),
                s(:lvar, :set)))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:send,
                s(:const, nil, :Set), :new,
                s(:irange,
                  s(:int, 0),
                  s(:int, 31))), :flatten!)),
          s(:lvasgn, :x,
            s(:send,
              s(:send,
                s(:const, nil, :Set), :[],
                s(:send,
                  s(:const, nil, :Set), :[]),
                s(:send,
                  s(:const, nil, :Set), :[],
                  s(:int, 1),
                  s(:int, 2))), :flatten!)),
          s(:lvasgn, :y,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:lvar, :x),
            s(:lvar, :y)))),
      s(:def, :test_include?,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :set), :include?,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :set), :include?,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :set), :include?,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :set), :include?,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :set), :include?,
              s(:nil))),
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:str, "1"),
              s(:nil),
              s(:str, "2"),
              s(:nil),
              s(:str, "0"),
              s(:str, "1"),
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :set), :include?,
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :set), :include?,
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :set), :include?,
              s(:str, "1"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :set), :include?,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :set), :include?,
              s(:true))))),
      s(:def, :test_superset?,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :set), :superset?)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :set), :superset?,
              s(:int, 2))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :set), :superset?,
              s(:array,
                s(:int, 2)))),
          s(:block,
            s(:send,
              s(:array,
                s(:const, nil, :Set),
                s(:const, nil, :Set2)), :each),
            s(:args,
              s(:arg, :klass)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :set), :superset?,
                  s(:send,
                    s(:lvar, :klass), :[])),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :set), :superset?,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 2))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :set), :superset?,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :set), :superset?,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3),
                    s(:int, 4))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :set), :superset?,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 4))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :set), :>=,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :set), :>=,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 2))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:send,
                    s(:const, nil, :Set), :[]), :superset?,
                  s(:send,
                    s(:lvar, :klass), :[])),
                s(:send,
                  s(:lvar, :klass), :name)))))),
      s(:def, :test_proper_superset?,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :set), :proper_superset?)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :set), :proper_superset?,
              s(:int, 2))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :set), :proper_superset?,
              s(:array,
                s(:int, 2)))),
          s(:block,
            s(:send,
              s(:array,
                s(:const, nil, :Set),
                s(:const, nil, :Set2)), :each),
            s(:args,
              s(:arg, :klass)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :set), :proper_superset?,
                  s(:send,
                    s(:lvar, :klass), :[])),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :set), :proper_superset?,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 2))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :set), :proper_superset?,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :set), :proper_superset?,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3),
                    s(:int, 4))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :set), :proper_superset?,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 4))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :set), :>,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :set), :>,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 2))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:send,
                    s(:const, nil, :Set), :[]), :proper_superset?,
                  s(:send,
                    s(:lvar, :klass), :[])),
                s(:send,
                  s(:lvar, :klass), :name)))))),
      s(:def, :test_subset?,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :set), :subset?)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :set), :subset?,
              s(:int, 2))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :set), :subset?,
              s(:array,
                s(:int, 2)))),
          s(:block,
            s(:send,
              s(:array,
                s(:const, nil, :Set),
                s(:const, nil, :Set2)), :each),
            s(:args,
              s(:arg, :klass)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :set), :subset?,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3),
                    s(:int, 4))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :set), :subset?,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :set), :subset?,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 2))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :set), :subset?,
                  s(:send,
                    s(:lvar, :klass), :[])),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :set), :<=,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :set), :<=,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3),
                    s(:int, 4))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:send,
                    s(:const, nil, :Set), :[]), :subset?,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:send,
                    s(:const, nil, :Set), :[]), :subset?,
                  s(:send,
                    s(:lvar, :klass), :[])),
                s(:send,
                  s(:lvar, :klass), :name)))))),
      s(:def, :test_proper_subset?,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :set), :proper_subset?)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :set), :proper_subset?,
              s(:int, 2))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :set), :proper_subset?,
              s(:array,
                s(:int, 2)))),
          s(:block,
            s(:send,
              s(:array,
                s(:const, nil, :Set),
                s(:const, nil, :Set2)), :each),
            s(:args,
              s(:arg, :klass)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :set), :proper_subset?,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3),
                    s(:int, 4))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :set), :proper_subset?,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :set), :proper_subset?,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 2))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :set), :proper_subset?,
                  s(:send,
                    s(:lvar, :klass), :[])),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :set), :<,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :set), :<,
                  s(:send,
                    s(:lvar, :klass), :[],
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3),
                    s(:int, 4))),
                s(:send,
                  s(:lvar, :klass), :name)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:send,
                    s(:const, nil, :Set), :[]), :proper_subset?,
                  s(:send,
                    s(:lvar, :klass), :[])),
                s(:send,
                  s(:lvar, :klass), :name)))))),
      s(:def, :assert_intersect,
        s(:args,
          s(:arg, :expected),
          s(:arg, :set),
          s(:arg, :other)),
        s(:case,
          s(:lvar, :expected),
          s(:when,
            s(:true),
            s(:begin,
              s(:send, nil, :assert_send,
                s(:array,
                  s(:lvar, :set),
                  s(:sym, :intersect?),
                  s(:lvar, :other))),
              s(:send, nil, :assert_send,
                s(:array,
                  s(:lvar, :other),
                  s(:sym, :intersect?),
                  s(:lvar, :set))),
              s(:send, nil, :assert_not_send,
                s(:array,
                  s(:lvar, :set),
                  s(:sym, :disjoint?),
                  s(:lvar, :other))),
              s(:send, nil, :assert_not_send,
                s(:array,
                  s(:lvar, :other),
                  s(:sym, :disjoint?),
                  s(:lvar, :set))))),
          s(:when,
            s(:false),
            s(:begin,
              s(:send, nil, :assert_not_send,
                s(:array,
                  s(:lvar, :set),
                  s(:sym, :intersect?),
                  s(:lvar, :other))),
              s(:send, nil, :assert_not_send,
                s(:array,
                  s(:lvar, :other),
                  s(:sym, :intersect?),
                  s(:lvar, :set))),
              s(:send, nil, :assert_send,
                s(:array,
                  s(:lvar, :set),
                  s(:sym, :disjoint?),
                  s(:lvar, :other))),
              s(:send, nil, :assert_send,
                s(:array,
                  s(:lvar, :other),
                  s(:sym, :disjoint?),
                  s(:lvar, :set))))),
          s(:when,
            s(:const, nil, :Class),
            s(:begin,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:lvar, :expected)),
                s(:args),
                s(:send,
                  s(:lvar, :set), :intersect?,
                  s(:lvar, :other))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:lvar, :expected)),
                s(:args),
                s(:send,
                  s(:lvar, :set), :disjoint?,
                  s(:lvar, :other))))),
          s(:send, nil, :raise,
            s(:const, nil, :ArgumentError),
            s(:send,
              s(:str, "%s: unsupported expected value: %s"), :%,
              s(:array,
                s(:send, nil, :__method__),
                s(:send,
                  s(:lvar, :expected), :inspect)))))),
      s(:def, :test_intersect?,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 3),
              s(:int, 4),
              s(:int, 5))),
          s(:send, nil, :assert_intersect,
            s(:const, nil, :ArgumentError),
            s(:lvar, :set),
            s(:int, 3)),
          s(:send, nil, :assert_intersect,
            s(:const, nil, :ArgumentError),
            s(:lvar, :set),
            s(:array,
              s(:int, 2),
              s(:int, 4),
              s(:int, 6))),
          s(:send, nil, :assert_intersect,
            s(:true),
            s(:lvar, :set),
            s(:lvar, :set)),
          s(:send, nil, :assert_intersect,
            s(:true),
            s(:lvar, :set),
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 2),
              s(:int, 4))),
          s(:send, nil, :assert_intersect,
            s(:true),
            s(:lvar, :set),
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 5),
              s(:int, 6),
              s(:int, 7))),
          s(:send, nil, :assert_intersect,
            s(:true),
            s(:lvar, :set),
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 6),
              s(:int, 8),
              s(:int, 4))),
          s(:send, nil, :assert_intersect,
            s(:false),
            s(:lvar, :set),
            s(:send,
              s(:const, nil, :Set), :[])),
          s(:send, nil, :assert_intersect,
            s(:false),
            s(:lvar, :set),
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 0),
              s(:int, 2))),
          s(:send, nil, :assert_intersect,
            s(:false),
            s(:lvar, :set),
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 0),
              s(:int, 2),
              s(:int, 6))),
          s(:send, nil, :assert_intersect,
            s(:false),
            s(:lvar, :set),
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 0),
              s(:int, 2),
              s(:int, 6),
              s(:int, 8),
              s(:int, 10))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 3),
              s(:int, 4),
              s(:int, 5)),
            s(:lvar, :set)))),
      s(:def, :test_each,
        s(:args),
        s(:begin,
          s(:lvasgn, :ary,
            s(:array,
              s(:int, 1),
              s(:int, 3),
              s(:int, 5),
              s(:int, 7),
              s(:int, 10),
              s(:int, 20))),
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :new,
              s(:lvar, :ary))),
          s(:lvasgn, :ret,
            s(:block,
              s(:send,
                s(:lvar, :set), :each),
              s(:args,
                s(:arg, :o)), nil)),
          s(:send, nil, :assert_same,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :set), :each)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Enumerator),
            s(:lvar, :e)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :set), :each),
                s(:args,
                  s(:arg, :o)),
                s(:or,
                  s(:send,
                    s(:lvar, :ary), :delete,
                    s(:lvar, :o)),
                  s(:send, nil, :raise,
                    s(:dstr,
                      s(:str, "unexpected element: "),
                      s(:begin,
                        s(:lvar, :o)))))),
              s(:or,
                s(:send,
                  s(:lvar, :ary), :empty?),
                s(:send, nil, :raise,
                  s(:dstr,
                    s(:str, "forgotten elements: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :ary), :join,
                        s(:str, ", ")))))))),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:lvar, :e), :size)),
          s(:send,
            s(:lvar, :set), :<<,
            s(:int, 42)),
          s(:send, nil, :assert_equal,
            s(:int, 7),
            s(:send,
              s(:lvar, :e), :size)))),
      s(:def, :test_add,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:lvasgn, :ret,
            s(:send,
              s(:lvar, :set), :add,
              s(:int, 2))),
          s(:send, nil, :assert_same,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:lvar, :set)),
          s(:lvasgn, :ret,
            s(:send,
              s(:lvar, :set), :add?,
              s(:int, 2))),
          s(:send, nil, :assert_nil,
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:lvar, :set)),
          s(:lvasgn, :ret,
            s(:send,
              s(:lvar, :set), :add,
              s(:int, 4))),
          s(:send, nil, :assert_same,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4)),
            s(:lvar, :set)),
          s(:lvasgn, :ret,
            s(:send,
              s(:lvar, :set), :add?,
              s(:int, 5))),
          s(:send, nil, :assert_same,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 5)),
            s(:lvar, :set)))),
      s(:def, :test_delete,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:lvasgn, :ret,
            s(:send,
              s(:lvar, :set), :delete,
              s(:int, 4))),
          s(:send, nil, :assert_same,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:lvar, :set)),
          s(:lvasgn, :ret,
            s(:send,
              s(:lvar, :set), :delete?,
              s(:int, 4))),
          s(:send, nil, :assert_nil,
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:lvar, :set)),
          s(:lvasgn, :ret,
            s(:send,
              s(:lvar, :set), :delete,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 3)),
            s(:lvar, :set)),
          s(:lvasgn, :ret,
            s(:send,
              s(:lvar, :set), :delete?,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 3)),
            s(:lvar, :set)))),
      s(:def, :test_delete_if,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 10)))),
          s(:lvasgn, :ret,
            s(:block,
              s(:send,
                s(:lvar, :set), :delete_if),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:lvar, :i), :>,
                s(:int, 10)))),
          s(:send, nil, :assert_same,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 10))),
            s(:lvar, :set)),
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 10)))),
          s(:lvasgn, :ret,
            s(:block,
              s(:send,
                s(:lvar, :set), :delete_if),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:send,
                  s(:lvar, :i), :%,
                  s(:int, 3)), :==,
                s(:int, 0)))),
          s(:send, nil, :assert_same,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 4),
              s(:int, 5),
              s(:int, 7),
              s(:int, 8),
              s(:int, 10)),
            s(:lvar, :set)))),
      s(:def, :test_keep_if,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 10)))),
          s(:lvasgn, :ret,
            s(:block,
              s(:send,
                s(:lvar, :set), :keep_if),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:lvar, :i), :<=,
                s(:int, 10)))),
          s(:send, nil, :assert_same,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 10))),
            s(:lvar, :set)),
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 10)))),
          s(:lvasgn, :ret,
            s(:block,
              s(:send,
                s(:lvar, :set), :keep_if),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:send,
                  s(:lvar, :i), :%,
                  s(:int, 3)), :!=,
                s(:int, 0)))),
          s(:send, nil, :assert_same,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 4),
              s(:int, 5),
              s(:int, 7),
              s(:int, 8),
              s(:int, 10)),
            s(:lvar, :set)))),
      s(:def, :test_collect!,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:str, "a"),
              s(:str, "b"),
              s(:str, "c"),
              s(:irange,
                s(:int, -1),
                s(:int, 1)),
              s(:irange,
                s(:int, 2),
                s(:int, 4)))),
          s(:lvasgn, :ret,
            s(:block,
              s(:send,
                s(:lvar, :set), :collect!),
              s(:args,
                s(:arg, :i)),
              s(:case,
                s(:lvar, :i),
                s(:when,
                  s(:const, nil, :Numeric),
                  s(:send,
                    s(:lvar, :i), :*,
                    s(:int, 2))),
                s(:when,
                  s(:const, nil, :String),
                  s(:send,
                    s(:lvar, :i), :upcase)),
                s(:nil)))),
          s(:send, nil, :assert_same,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 2),
              s(:int, 4),
              s(:int, 6),
              s(:str, "A"),
              s(:str, "B"),
              s(:str, "C"),
              s(:nil)),
            s(:lvar, :set)))),
      s(:def, :test_reject!,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 10)))),
          s(:lvasgn, :ret,
            s(:block,
              s(:send,
                s(:lvar, :set), :reject!),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:lvar, :i), :>,
                s(:int, 10)))),
          s(:send, nil, :assert_nil,
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 10))),
            s(:lvar, :set)),
          s(:lvasgn, :ret,
            s(:block,
              s(:send,
                s(:lvar, :set), :reject!),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:send,
                  s(:lvar, :i), :%,
                  s(:int, 3)), :==,
                s(:int, 0)))),
          s(:send, nil, :assert_same,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 4),
              s(:int, 5),
              s(:int, 7),
              s(:int, 8),
              s(:int, 10)),
            s(:lvar, :set)))),
      s(:def, :test_merge,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:lvasgn, :ret,
            s(:send,
              s(:lvar, :set), :merge,
              s(:array,
                s(:int, 2),
                s(:int, 4),
                s(:int, 6)))),
          s(:send, nil, :assert_same,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 6)),
            s(:lvar, :set)))),
      s(:def, :test_subtract,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:lvasgn, :ret,
            s(:send,
              s(:lvar, :set), :subtract,
              s(:array,
                s(:int, 2),
                s(:int, 4),
                s(:int, 6)))),
          s(:send, nil, :assert_same,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 3)),
            s(:lvar, :set)))),
      s(:def, :test_plus,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:lvasgn, :ret,
            s(:send,
              s(:lvar, :set), :+,
              s(:array,
                s(:int, 2),
                s(:int, 4),
                s(:int, 6)))),
          s(:send, nil, :assert_not_same,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 6)),
            s(:lvar, :ret)))),
      s(:def, :test_minus,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:lvasgn, :ret,
            s(:send,
              s(:lvar, :set), :-,
              s(:array,
                s(:int, 2),
                s(:int, 4),
                s(:int, 6)))),
          s(:send, nil, :assert_not_same,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 3)),
            s(:lvar, :ret)))),
      s(:def, :test_and,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4))),
          s(:lvasgn, :ret,
            s(:send,
              s(:lvar, :set), :&,
              s(:array,
                s(:int, 2),
                s(:int, 4),
                s(:int, 6)))),
          s(:send, nil, :assert_not_same,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 2),
              s(:int, 4)),
            s(:lvar, :ret)))),
      s(:def, :test_xor,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4))),
          s(:lvasgn, :ret,
            s(:send,
              s(:lvar, :set), :^,
              s(:array,
                s(:int, 2),
                s(:int, 4),
                s(:int, 5),
                s(:int, 5)))),
          s(:send, nil, :assert_not_same,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 3),
              s(:int, 5)),
            s(:lvar, :ret)))),
      s(:def, :test_eq,
        s(:args),
        s(:begin,
          s(:lvasgn, :set1,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 2),
              s(:int, 3),
              s(:int, 1))),
          s(:lvasgn, :set2,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:lvar, :set1),
            s(:lvar, :set1)),
          s(:send, nil, :assert_equal,
            s(:lvar, :set1),
            s(:lvar, :set2)),
          s(:send, nil, :assert_not_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1)),
            s(:array,
              s(:int, 1))),
          s(:lvasgn, :set1,
            s(:send,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:const, nil, :Set)), :[],
              s(:str, "a"),
              s(:str, "b"))),
          s(:lvasgn, :set2,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:str, "a"),
              s(:str, "b"),
              s(:lvar, :set1))),
          s(:lvasgn, :set1,
            s(:send,
              s(:lvar, :set1), :add,
              s(:send,
                s(:lvar, :set1), :clone))),
          s(:send, nil, :assert_equal,
            s(:lvar, :set2),
            s(:send,
              s(:lvar, :set2), :clone)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :set1), :clone),
            s(:lvar, :set1)),
          s(:send, nil, :assert_not_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:send,
                s(:const, nil, :Exception), :new),
              s(:nil)),
            s(:send,
              s(:const, nil, :Set), :[],
              s(:send,
                s(:const, nil, :Exception), :new),
              s(:send,
                s(:const, nil, :Exception), :new)),
            s(:str, "[ruby-dev:26127]")))),
      s(:def, :test_classify,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 10)))),
          s(:lvasgn, :ret,
            s(:block,
              s(:send,
                s(:lvar, :set), :classify),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:lvar, :i), :%,
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :ret), :size)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Hash),
            s(:lvar, :ret)),
          s(:block,
            s(:send,
              s(:lvar, :ret), :each_value),
            s(:args,
              s(:arg, :value)),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :Set),
              s(:lvar, :value))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 3),
              s(:int, 6),
              s(:int, 9)),
            s(:send,
              s(:lvar, :ret), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 4),
              s(:int, 7),
              s(:int, 10)),
            s(:send,
              s(:lvar, :ret), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 2),
              s(:int, 5),
              s(:int, 8)),
            s(:send,
              s(:lvar, :ret), :[],
              s(:int, 2))))),
      s(:def, :test_divide,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 10)))),
          s(:lvasgn, :ret,
            s(:block,
              s(:send,
                s(:lvar, :set), :divide),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:lvar, :i), :%,
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :ret), :size)),
          s(:lvasgn, :n,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:lvar, :ret), :each),
            s(:args,
              s(:arg, :s)),
            s(:op_asgn,
              s(:lvasgn, :n), :+,
              s(:send,
                s(:lvar, :s), :size))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :set), :size),
            s(:lvar, :n)),
          s(:send, nil, :assert_equal,
            s(:lvar, :set),
            s(:send,
              s(:lvar, :ret), :flatten)),
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 7),
              s(:int, 10),
              s(:int, 5),
              s(:int, 11),
              s(:int, 1),
              s(:int, 3),
              s(:int, 4),
              s(:int, 9),
              s(:int, 0))),
          s(:lvasgn, :ret,
            s(:block,
              s(:send,
                s(:lvar, :set), :divide),
              s(:args,
                s(:arg, :a),
                s(:arg, :b)),
              s(:send,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :-,
                      s(:lvar, :b))), :abs), :==,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :ret), :size)),
          s(:lvasgn, :n,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:lvar, :ret), :each),
            s(:args,
              s(:arg, :s)),
            s(:op_asgn,
              s(:lvasgn, :n), :+,
              s(:send,
                s(:lvar, :s), :size))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :set), :size),
            s(:lvar, :n)),
          s(:send, nil, :assert_equal,
            s(:lvar, :set),
            s(:send,
              s(:lvar, :ret), :flatten)),
          s(:block,
            s(:send,
              s(:lvar, :ret), :each),
            s(:args,
              s(:arg, :s)),
            s(:if,
              s(:send,
                s(:lvar, :s), :include?,
                s(:int, 0)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :Set), :[],
                  s(:int, 0),
                  s(:int, 1)),
                s(:lvar, :s)),
              s(:if,
                s(:send,
                  s(:lvar, :s), :include?,
                  s(:int, 3)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:const, nil, :Set), :[],
                    s(:int, 3),
                    s(:int, 4),
                    s(:int, 5)),
                  s(:lvar, :s)),
                s(:if,
                  s(:send,
                    s(:lvar, :s), :include?,
                    s(:int, 7)),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:const, nil, :Set), :[],
                      s(:int, 7)),
                    s(:lvar, :s)),
                  s(:if,
                    s(:send,
                      s(:lvar, :s), :include?,
                      s(:int, 9)),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:const, nil, :Set), :[],
                        s(:int, 9),
                        s(:int, 10),
                        s(:int, 11)),
                      s(:lvar, :s)),
                    s(:send, nil, :raise,
                      s(:dstr,
                        s(:str, "unexpected group: "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :s), :inspect))))))))))),
      s(:def, :test_taintness,
        s(:args),
        s(:begin,
          s(:lvasgn, :orig,
            s(:lvasgn, :set,
              s(:send,
                s(:const, nil, :Set), :[],
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :set), :tainted?)),
          s(:send, nil, :assert_same,
            s(:lvar, :orig),
            s(:send,
              s(:lvar, :set), :taint)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :set), :tainted?)),
          s(:send, nil, :assert_same,
            s(:lvar, :orig),
            s(:send,
              s(:lvar, :set), :untaint)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :set), :tainted?)))),
      s(:def, :test_freeze,
        s(:args),
        s(:begin,
          s(:lvasgn, :orig,
            s(:lvasgn, :set,
              s(:send,
                s(:const, nil, :Set), :[],
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :set), :frozen?)),
          s(:send,
            s(:lvar, :set), :<<,
            s(:int, 4)),
          s(:send, nil, :assert_same,
            s(:lvar, :orig),
            s(:send,
              s(:lvar, :set), :freeze)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :set), :frozen?)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :set), :<<,
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :set), :size)))),
      s(:def, :test_freeze_dup,
        s(:args),
        s(:begin,
          s(:lvasgn, :set1,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:send,
            s(:lvar, :set1), :freeze),
          s(:lvasgn, :set2,
            s(:send,
              s(:lvar, :set1), :dup)),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :set2),
            s(:sym, :frozen?)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:lvar, :set2), :add,
              s(:int, 4))))),
      s(:def, :test_freeze_clone,
        s(:args),
        s(:begin,
          s(:lvasgn, :set1,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:send,
            s(:lvar, :set1), :freeze),
          s(:lvasgn, :set2,
            s(:send,
              s(:lvar, :set1), :clone)),
          s(:send, nil, :assert_predicate,
            s(:lvar, :set2),
            s(:sym, :frozen?)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :set2), :add,
              s(:int, 5))))),
      s(:def, :test_inspect,
        s(:args),
        s(:begin,
          s(:lvasgn, :set1,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "#<Set: {1}>"),
            s(:send,
              s(:lvar, :set1), :inspect)),
          s(:lvasgn, :set2,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:send,
                s(:const, nil, :Set), :[],
                s(:int, 0)),
              s(:int, 1),
              s(:int, 2),
              s(:lvar, :set1))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send,
                s(:lvar, :set2), :inspect), :include?,
              s(:str, "#<Set: {...}>"))),
          s(:send,
            s(:lvar, :set1), :add,
            s(:lvar, :set2)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:lvar, :set1), :inspect), :include?,
              s(:str, "#<Set: {...}>"))))))),
  s(:class,
    s(:const, nil, :TC_SortedSet),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_sortedset,
        s(:args),
        s(:begin,
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :SortedSet), :[],
              s(:int, 4),
              s(:int, 5),
              s(:int, 3),
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 5)),
            s(:send,
              s(:lvar, :s), :to_a)),
          s(:lvasgn, :prev,
            s(:nil)),
          s(:block,
            s(:send,
              s(:lvar, :s), :each),
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:if,
                s(:lvar, :prev),
                s(:send, nil, :assert,
                  s(:send,
                    s(:lvar, :prev), :<,
                    s(:lvar, :o))), nil),
              s(:lvasgn, :prev,
                s(:lvar, :o)))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :prev)),
          s(:block,
            s(:send,
              s(:lvar, :s), :map!),
            s(:args,
              s(:arg, :o)),
            s(:send,
              s(:int, -2), :*,
              s(:lvar, :o))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, -10),
              s(:int, -8),
              s(:int, -6),
              s(:int, -4),
              s(:int, -2)),
            s(:send,
              s(:lvar, :s), :to_a)),
          s(:lvasgn, :prev,
            s(:nil)),
          s(:lvasgn, :ret,
            s(:block,
              s(:send,
                s(:lvar, :s), :each),
              s(:args,
                s(:arg, :o)),
              s(:begin,
                s(:if,
                  s(:lvar, :prev),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:lvar, :prev), :<,
                      s(:lvar, :o))), nil),
                s(:lvasgn, :prev,
                  s(:lvar, :o))))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :prev)),
          s(:send, nil, :assert_same,
            s(:lvar, :s),
            s(:lvar, :ret)),
          s(:lvasgn, :s,
            s(:block,
              s(:send,
                s(:const, nil, :SortedSet), :new,
                s(:array,
                  s(:int, 2),
                  s(:int, 1),
                  s(:int, 3))),
              s(:args,
                s(:arg, :o)),
              s(:send,
                s(:lvar, :o), :*,
                s(:int, -2)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, -6),
              s(:int, -4),
              s(:int, -2)),
            s(:send,
              s(:lvar, :s), :to_a)),
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :SortedSet), :new,
              s(:array,
                s(:str, "one"),
                s(:str, "two"),
                s(:str, "three"),
                s(:str, "four")))),
          s(:lvasgn, :a,
            s(:array)),
          s(:lvasgn, :ret,
            s(:block,
              s(:send,
                s(:lvar, :s), :delete_if),
              s(:args,
                s(:arg, :o)),
              s(:begin,
                s(:send,
                  s(:lvar, :a), :<<,
                  s(:lvar, :o)),
                s(:send,
                  s(:lvar, :o), :start_with?,
                  s(:str, "t"))))),
          s(:send, nil, :assert_same,
            s(:lvar, :s),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "four"),
              s(:str, "one")),
            s(:send,
              s(:lvar, :s), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "four"),
              s(:str, "one"),
              s(:str, "three"),
              s(:str, "two")),
            s(:lvar, :a)),
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :SortedSet), :new,
              s(:array,
                s(:str, "one"),
                s(:str, "two"),
                s(:str, "three"),
                s(:str, "four")))),
          s(:lvasgn, :a,
            s(:array)),
          s(:lvasgn, :ret,
            s(:block,
              s(:send,
                s(:lvar, :s), :reject!),
              s(:args,
                s(:arg, :o)),
              s(:begin,
                s(:send,
                  s(:lvar, :a), :<<,
                  s(:lvar, :o)),
                s(:send,
                  s(:lvar, :o), :start_with?,
                  s(:str, "t"))))),
          s(:send, nil, :assert_same,
            s(:lvar, :s),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "four"),
              s(:str, "one")),
            s(:send,
              s(:lvar, :s), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "four"),
              s(:str, "one"),
              s(:str, "three"),
              s(:str, "two")),
            s(:lvar, :a)),
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :SortedSet), :new,
              s(:array,
                s(:str, "one"),
                s(:str, "two"),
                s(:str, "three"),
                s(:str, "four")))),
          s(:lvasgn, :a,
            s(:array)),
          s(:lvasgn, :ret,
            s(:block,
              s(:send,
                s(:lvar, :s), :reject!),
              s(:args,
                s(:arg, :o)),
              s(:begin,
                s(:send,
                  s(:lvar, :a), :<<,
                  s(:lvar, :o)),
                s(:false)))),
          s(:send, nil, :assert_same,
            s(:nil),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "four"),
              s(:str, "one"),
              s(:str, "three"),
              s(:str, "two")),
            s(:send,
              s(:lvar, :s), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "four"),
              s(:str, "one"),
              s(:str, "three"),
              s(:str, "two")),
            s(:lvar, :a)))),
      s(:def, :test_each,
        s(:args),
        s(:begin,
          s(:lvasgn, :ary,
            s(:array,
              s(:int, 1),
              s(:int, 3),
              s(:int, 5),
              s(:int, 7),
              s(:int, 10),
              s(:int, 20))),
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :SortedSet), :new,
              s(:lvar, :ary))),
          s(:lvasgn, :ret,
            s(:block,
              s(:send,
                s(:lvar, :set), :each),
              s(:args,
                s(:arg, :o)), nil)),
          s(:send, nil, :assert_same,
            s(:lvar, :set),
            s(:lvar, :ret)),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :set), :each)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Enumerator),
            s(:lvar, :e)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :set), :each),
                s(:args,
                  s(:arg, :o)),
                s(:or,
                  s(:send,
                    s(:lvar, :ary), :delete,
                    s(:lvar, :o)),
                  s(:send, nil, :raise,
                    s(:dstr,
                      s(:str, "unexpected element: "),
                      s(:begin,
                        s(:lvar, :o)))))),
              s(:or,
                s(:send,
                  s(:lvar, :ary), :empty?),
                s(:send, nil, :raise,
                  s(:dstr,
                    s(:str, "forgotten elements: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :ary), :join,
                        s(:str, ", ")))))))),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:lvar, :e), :size)),
          s(:send,
            s(:lvar, :set), :<<,
            s(:int, 42)),
          s(:send, nil, :assert_equal,
            s(:int, 7),
            s(:send,
              s(:lvar, :e), :size)))))),
  s(:class,
    s(:const, nil, :TC_Enumerable),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:def, :test_to_set,
      s(:args),
      s(:begin,
        s(:lvasgn, :ary,
          s(:array,
            s(:int, 2),
            s(:int, 5),
            s(:int, 4),
            s(:int, 3),
            s(:int, 2),
            s(:int, 1),
            s(:int, 3))),
        s(:lvasgn, :set,
          s(:send,
            s(:lvar, :ary), :to_set)),
        s(:send, nil, :assert_instance_of,
          s(:const, nil, :Set),
          s(:lvar, :set)),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:int, 1),
            s(:int, 2),
            s(:int, 3),
            s(:int, 4),
            s(:int, 5)),
          s(:send,
            s(:lvar, :set), :sort)),
        s(:lvasgn, :set,
          s(:block,
            s(:send,
              s(:lvar, :ary), :to_set),
            s(:args,
              s(:arg, :o)),
            s(:send,
              s(:lvar, :o), :*,
              s(:int, -2)))),
        s(:send, nil, :assert_instance_of,
          s(:const, nil, :Set),
          s(:lvar, :set)),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:int, -10),
            s(:int, -8),
            s(:int, -6),
            s(:int, -4),
            s(:int, -2)),
          s(:send,
            s(:lvar, :set), :sort)),
        s(:send, nil, :assert_same,
          s(:lvar, :set),
          s(:send,
            s(:lvar, :set), :to_set)),
        s(:send, nil, :assert_not_same,
          s(:lvar, :set),
          s(:block,
            s(:send,
              s(:lvar, :set), :to_set),
            s(:args,
              s(:arg, :o)),
            s(:lvar, :o))),
        s(:lvasgn, :set,
          s(:send,
            s(:lvar, :ary), :to_set,
            s(:const, nil, :SortedSet))),
        s(:send, nil, :assert_instance_of,
          s(:const, nil, :SortedSet),
          s(:lvar, :set)),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:int, 1),
            s(:int, 2),
            s(:int, 3),
            s(:int, 4),
            s(:int, 5)),
          s(:send,
            s(:lvar, :set), :to_a)),
        s(:lvasgn, :set,
          s(:block,
            s(:send,
              s(:lvar, :ary), :to_set,
              s(:const, nil, :SortedSet)),
            s(:args,
              s(:arg, :o)),
            s(:send,
              s(:lvar, :o), :*,
              s(:int, -2)))),
        s(:send, nil, :assert_instance_of,
          s(:const, nil, :SortedSet),
          s(:lvar, :set)),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:int, -10),
            s(:int, -8),
            s(:int, -6),
            s(:int, -4),
            s(:int, -2)),
          s(:send,
            s(:lvar, :set), :sort))))))
