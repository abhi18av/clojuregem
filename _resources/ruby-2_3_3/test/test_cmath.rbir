s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "cmath")),
  s(:class,
    s(:const, nil, :TestCMath),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_sqrt,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :CMath), :sqrt,
              s(:complex, (0+1i))),
            s(:send,
              s(:const, nil, :CMath), :sqrt,
              s(:complex, (0+1.0i))),
            s(:str, "[ruby-core:31672]")),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 2)),
            s(:send,
              s(:const, nil, :CMath), :sqrt,
              s(:float, -4.0))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 2)),
            s(:send,
              s(:const, nil, :CMath), :sqrt,
              s(:int, -4))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 2)),
            s(:send,
              s(:const, nil, :CMath), :sqrt,
              s(:send, nil, :Rational,
                s(:int, -4)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 3)),
            s(:send,
              s(:const, nil, :CMath), :sqrt,
              s(:float, -9.0))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 3)),
            s(:send,
              s(:const, nil, :CMath), :sqrt,
              s(:int, -9))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 3)),
            s(:send,
              s(:const, nil, :CMath), :sqrt,
              s(:send, nil, :Rational,
                s(:int, -9)))),
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:send,
                s(:float, 1.272019649514069), :+,
                s(:complex, (0+0.7861513777574233i)))),
            s(:send,
              s(:const, nil, :CMath), :sqrt,
              s(:send,
                s(:int, 1), :+,
                s(:complex, (0+2i))))),
          s(:send, nil, :assert_in_delta,
            s(:complex, (0+3.0i)),
            s(:send,
              s(:const, nil, :CMath), :sqrt,
              s(:int, -9))))),
      s(:def, :test_log,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:send,
                s(:float, 0.8047189562170503), :+,
                s(:complex, (0+1.1071487177940902i)))),
            s(:send,
              s(:const, nil, :CMath), :log,
              s(:send,
                s(:int, 1), :+,
                s(:complex, (0+2i))))),
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:send,
                s(:float, 0.7324867603589635), :+,
                s(:complex, (0+1.0077701926457872i)))),
            s(:send,
              s(:const, nil, :CMath), :log,
              s(:send,
                s(:int, 1), :+,
                s(:complex, (0+2i))),
              s(:int, 3))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:const,
                s(:const, nil, :Math), :PI), :*,
              s(:complex, (0+1i))),
            s(:send,
              s(:const, nil, :CMath), :log,
              s(:int, -1))),
          s(:send, nil, :assert_in_delta,
            s(:float, 3.0),
            s(:send,
              s(:const, nil, :CMath), :log,
              s(:int, 8),
              s(:int, 2))),
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:send,
                s(:float, 1.092840647090816), :-,
                s(:complex, (0+0.42078724841586035i)))),
            s(:send,
              s(:const, nil, :CMath), :log,
              s(:int, -8),
              s(:int, -2))))),
      s(:def, :test_trigonometric_functions,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:send,
                s(:const, nil, :CMath), :sinh,
                s(:int, 2)), :i),
            s(:send,
              s(:const, nil, :CMath), :sin,
              s(:complex, (0+2i)))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:const, nil, :CMath), :cosh,
              s(:int, 2)),
            s(:send,
              s(:const, nil, :CMath), :cos,
              s(:complex, (0+2i)))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:send,
                s(:const, nil, :CMath), :tanh,
                s(:int, 2)), :i),
            s(:send,
              s(:const, nil, :CMath), :tan,
              s(:complex, (0+2i)))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:send,
                s(:const, nil, :CMath), :sin,
                s(:int, 2)), :i),
            s(:send,
              s(:const, nil, :CMath), :sinh,
              s(:complex, (0+2i)))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:const, nil, :CMath), :cos,
              s(:int, 2)),
            s(:send,
              s(:const, nil, :CMath), :cosh,
              s(:complex, (0+2i)))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:send,
                s(:const, nil, :CMath), :tan,
                s(:int, 2)), :i),
            s(:send,
              s(:const, nil, :CMath), :tanh,
              s(:complex, (0+2i)))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:int, 1), :+,
              s(:complex, (0+1i))),
            s(:send,
              s(:const, nil, :CMath), :sin,
              s(:send,
                s(:const, nil, :CMath), :asin,
                s(:send,
                  s(:int, 1), :+,
                  s(:complex, (0+1i)))))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:int, 1), :+,
              s(:complex, (0+1i))),
            s(:send,
              s(:const, nil, :CMath), :cos,
              s(:send,
                s(:const, nil, :CMath), :acos,
                s(:send,
                  s(:int, 1), :+,
                  s(:complex, (0+1i)))))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:int, 1), :+,
              s(:complex, (0+1i))),
            s(:send,
              s(:const, nil, :CMath), :tan,
              s(:send,
                s(:const, nil, :CMath), :atan,
                s(:send,
                  s(:int, 1), :+,
                  s(:complex, (0+1i)))))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:int, 1), :+,
              s(:complex, (0+1i))),
            s(:send,
              s(:const, nil, :CMath), :sinh,
              s(:send,
                s(:const, nil, :CMath), :asinh,
                s(:send,
                  s(:int, 1), :+,
                  s(:complex, (0+1i)))))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:int, 1), :+,
              s(:complex, (0+1i))),
            s(:send,
              s(:const, nil, :CMath), :cosh,
              s(:send,
                s(:const, nil, :CMath), :acosh,
                s(:send,
                  s(:int, 1), :+,
                  s(:complex, (0+1i)))))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:int, 1), :+,
              s(:complex, (0+1i))),
            s(:send,
              s(:const, nil, :CMath), :tanh,
              s(:send,
                s(:const, nil, :CMath), :atanh,
                s(:send,
                  s(:int, 1), :+,
                  s(:complex, (0+1i)))))),
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:send,
                s(:float, 3.165778513216168), :+,
                s(:complex, (0+1.959601041421606i)))),
            s(:send,
              s(:const, nil, :CMath), :sin,
              s(:send,
                s(:int, 1), :+,
                s(:complex, (0+2i))))),
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:send,
                s(:float, 2.0327230070196656), :-,
                s(:complex, (0+3.0518977991517993i)))),
            s(:send,
              s(:const, nil, :CMath), :cos,
              s(:send,
                s(:int, 1), :+,
                s(:complex, (0+2i))))),
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:send,
                s(:float, 0.033812826079896774), :+,
                s(:complex, (0+1.0147936161466333i)))),
            s(:send,
              s(:const, nil, :CMath), :tan,
              s(:send,
                s(:int, 1), :+,
                s(:complex, (0+2i))))),
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:send,
                s(:float, -0.4890562590412937), :+,
                s(:complex, (0+1.4031192506220402i)))),
            s(:send,
              s(:const, nil, :CMath), :sinh,
              s(:send,
                s(:int, 1), :+,
                s(:complex, (0+2i))))),
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:send,
                s(:float, -0.64214812471552), :+,
                s(:complex, (0+1.0686074213827783i)))),
            s(:send,
              s(:const, nil, :CMath), :cosh,
              s(:send,
                s(:int, 1), :+,
                s(:complex, (0+2i))))),
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:send,
                s(:float, 1.16673625724092), :-,
                s(:complex, (0+0.2434582011857252i)))),
            s(:send,
              s(:const, nil, :CMath), :tanh,
              s(:send,
                s(:int, 1), :+,
                s(:complex, (0+2i))))),
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:send,
                s(:float, 0.4270785863924755), :+,
                s(:complex, (0+1.5285709194809973i)))),
            s(:send,
              s(:const, nil, :CMath), :asin,
              s(:send,
                s(:int, 1), :+,
                s(:complex, (0+2i))))),
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:send,
                s(:float, 1.1437177404024201), :-,
                s(:complex, (0+1.528570919480998i)))),
            s(:send,
              s(:const, nil, :CMath), :acos,
              s(:send,
                s(:int, 1), :+,
                s(:complex, (0+2i))))),
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:send,
                s(:float, 1.3389725222944933), :+,
                s(:complex, (0+0.4023594781085251i)))),
            s(:send,
              s(:const, nil, :CMath), :atan,
              s(:send,
                s(:int, 1), :+,
                s(:complex, (0+2i))))),
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:send,
                s(:float, 1.4693517443681852), :+,
                s(:complex, (0+1.0634400235777521i)))),
            s(:send,
              s(:const, nil, :CMath), :asinh,
              s(:send,
                s(:int, 1), :+,
                s(:complex, (0+2i))))),
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:send,
                s(:float, 1.528570919480998), :+,
                s(:complex, (0+1.1437177404024201i)))),
            s(:send,
              s(:const, nil, :CMath), :acosh,
              s(:send,
                s(:int, 1), :+,
                s(:complex, (0+2i))))),
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:send,
                s(:float, 0.17328679513998632), :+,
                s(:complex, (0+1.1780972450961722i)))),
            s(:send,
              s(:const, nil, :CMath), :atanh,
              s(:send,
                s(:int, 1), :+,
                s(:complex, (0+2i))))))),
      s(:def, :test_functions,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:send,
                s(:float, -1.1312043837568133), :+,
                s(:complex, (0+2.4717266720048183i)))),
            s(:send,
              s(:const, nil, :CMath), :exp,
              s(:send,
                s(:int, 1), :+,
                s(:complex, (0+2i))))),
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:int, -1)),
            s(:send,
              s(:const, nil, :CMath), :exp,
              s(:send,
                s(:const,
                  s(:const, nil, :Math), :PI), :i))),
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:send,
                s(:float, 1.1609640474436813), :+,
                s(:complex, (0+1.5972779646881081i)))),
            s(:send,
              s(:const, nil, :CMath), :log2,
              s(:send,
                s(:int, 1), :+,
                s(:complex, (0+2i))))),
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:send,
                s(:float, 0.3494850021680094), :+,
                s(:complex, (0+0.480828578784234i)))),
            s(:send,
              s(:const, nil, :CMath), :log10,
              s(:send,
                s(:int, 1), :+,
                s(:complex, (0+2i))))),
          s(:send, nil, :assert_in_delta,
            s(:begin,
              s(:send,
                s(:float, 1.3389725222944933), :+,
                s(:complex, (0+0.4023594781085251i)))),
            s(:send,
              s(:const, nil, :CMath), :atan2,
              s(:send,
                s(:int, 1), :+,
                s(:complex, (0+2i))),
              s(:int, 1))))),
      s(:def, :test_error_handling,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:str, "Numeric Number required")),
            s(:args),
            s(:send,
              s(:const, nil, :CMath), :acos,
              s(:str, "2"))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:str, "Numeric Number required")),
            s(:args),
            s(:send,
              s(:const, nil, :CMath), :log,
              s(:str, "2"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :CMath), :log,
              s(:int, 2),
              s(:str, "2"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:const, nil, :CMath), :log,
              s(:int, 2),
              s(:complex, (0+2i)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RangeError)),
            s(:args),
            s(:send,
              s(:const, nil, :CMath), :hypot,
              s(:complex, (0+2i)),
              s(:complex, (0+2i)))))),
      s(:def, :test_cbrt_returns_principal_value_of_cube_root,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:begin,
              s(:int, -8)), :**,
            s(:begin,
              s(:send,
                s(:float, 1.0), :/,
                s(:int, 3)))),
          s(:send,
            s(:const, nil, :CMath), :cbrt,
            s(:int, -8)),
          s(:str, "#3676"))))))
