s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "shellwords")),
  s(:class,
    s(:const, nil, :TestShellwords),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :Shellwords)),
      s(:def, :test_shellwords,
        s(:args),
        s(:begin,
          s(:lvasgn, :cmd1,
            s(:str, "ruby -i'.bak' -pe \"sub /foo/, '\\\\&bar'\" foobar\\ me.txt\n")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "ruby"),
              s(:str, "-i.bak"),
              s(:str, "-pe"),
              s(:str, "sub /foo/, '\\&bar'"),
              s(:str, "foobar me.txt")),
            s(:send, nil, :shellwords,
              s(:lvar, :cmd1))),
          s(:lvasgn, :cmd2,
            s(:str, "ruby my_prog.rb | less")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "ruby"),
              s(:str, "my_prog.rb"),
              s(:str, "|"),
              s(:str, "less")),
            s(:send, nil, :shellwords,
              s(:lvar, :cmd2))))),
      s(:def, :test_unmatched_double_quote,
        s(:args),
        s(:begin,
          s(:lvasgn, :bad_cmd,
            s(:str, "one two \"three")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :shellwords,
              s(:lvar, :bad_cmd))))),
      s(:def, :test_unmatched_single_quote,
        s(:args),
        s(:begin,
          s(:lvasgn, :bad_cmd,
            s(:str, "one two 'three")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :shellwords,
              s(:lvar, :bad_cmd))))),
      s(:def, :test_unmatched_quotes,
        s(:args),
        s(:begin,
          s(:lvasgn, :bad_cmd,
            s(:dstr,
              s(:str, "one '"),
              s(:str, "\""),
              s(:str, "\"\""),
              s(:str, ""))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :shellwords,
              s(:lvar, :bad_cmd))))),
      s(:def, :test_backslashes,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :cmdline),
              s(:lvasgn, :expected)),
            s(:block,
              s(:send,
                s(:array,
                  s(:str, "/a//b///c////d/////e/ \"/a//b///c////d/////e/ \"'/a//b///c////d/////e/ '/a//b///c////d/////e/ "),
                  s(:str, "a/b/c//d//e a/b/c//d//e /a//b///c////d/////e/ a/b/c//d//e ")), :map),
              s(:args,
                s(:arg, :str)),
              s(:send,
                s(:lvar, :str), :tr,
                s(:str, "/"),
                s(:str, "\\\\")))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :expected)),
            s(:send, nil, :shellwords,
              s(:lvar, :cmdline))))),
      s(:def, :test_stringification,
        s(:args),
        s(:begin,
          s(:lvasgn, :three,
            s(:send, nil, :shellescape,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:str, "3"),
            s(:lvar, :three)),
          s(:lvasgn, :joined,
            s(:send,
              s(:array,
                s(:str, "ps"),
                s(:str, "-p"),
                s(:gvar, :$$)), :shelljoin)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "ps -p "),
              s(:begin,
                s(:gvar, :$$))),
            s(:lvar, :joined)))),
      s(:def, :test_whitespace,
        s(:args),
        s(:begin,
          s(:lvasgn, :empty,
            s(:str, "")),
          s(:lvasgn, :space,
            s(:str, " ")),
          s(:lvasgn, :newline,
            s(:str, "\n")),
          s(:lvasgn, :tab,
            s(:str, "\t")),
          s(:lvasgn, :tokens,
            s(:array,
              s(:lvar, :empty),
              s(:lvar, :space),
              s(:send,
                s(:lvar, :space), :*,
                s(:int, 2)),
              s(:lvar, :newline),
              s(:send,
                s(:lvar, :newline), :*,
                s(:int, 2)),
              s(:lvar, :tab),
              s(:send,
                s(:lvar, :tab), :*,
                s(:int, 2)),
              s(:lvar, :empty),
              s(:send,
                s(:send,
                  s(:lvar, :space), :+,
                  s(:lvar, :newline)), :+,
                s(:lvar, :tab)),
              s(:lvar, :empty))),
          s(:block,
            s(:send,
              s(:lvar, :tokens), :each),
            s(:args,
              s(:arg, :token)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:lvar, :token)),
              s(:send,
                s(:send, nil, :shellescape,
                  s(:lvar, :token)), :shellsplit))),
          s(:send, nil, :assert_equal,
            s(:lvar, :tokens),
            s(:send,
              s(:send, nil, :shelljoin,
                s(:lvar, :tokens)), :shellsplit)))),
      s(:def, :test_frozenness,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:array,
                s(:send, nil, :shellescape,
                  s(:send,
                    s(:const, nil, :String), :new)),
                s(:send, nil, :shellescape,
                  s(:send,
                    s(:const, nil, :String), :new,
                    s(:str, "foo"))),
                s(:send, nil, :shellescape,
                  s(:send,
                    s(:str, ""), :freeze)),
                s(:send, nil, :shellescape,
                  s(:send,
                    s(:str, "\n"), :freeze)),
                s(:send, nil, :shellescape,
                  s(:send,
                    s(:str, "foo"), :freeze)),
                s(:send, nil, :shelljoin,
                  s(:array,
                    s(:send,
                      s(:str, "ps"), :freeze),
                    s(:send,
                      s(:str, "ax"), :freeze)))), :each),
            s(:args,
              s(:arg, :object)),
            s(:send, nil, :assert_not_predicate,
              s(:lvar, :object),
              s(:sym, :frozen?))),
          s(:block,
            s(:send,
              s(:array,
                s(:send, nil, :shellsplit,
                  s(:str, "ps")),
                s(:send, nil, :shellsplit,
                  s(:str, "ps ax"))), :each),
            s(:args,
              s(:arg, :array)),
            s(:block,
              s(:send,
                s(:lvar, :array), :each),
              s(:args,
                s(:arg, :arg)),
              s(:send, nil, :assert_not_predicate,
                s(:lvar, :arg),
                s(:sym, :frozen?),
                s(:send,
                  s(:lvar, :array), :inspect)))))),
      s(:def, :test_multibyte_characters,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "\\あ\\い"),
          s(:send,
            s(:str, "あい"), :shellescape))))))
