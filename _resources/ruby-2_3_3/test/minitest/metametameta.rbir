s(:begin,
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:send, nil, :require,
    s(:str, "minitest/autorun")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :MiniTest), :Unit), :TestCase), nil,
    s(:def, :clean,
      s(:args,
        s(:arg, :s)),
      s(:send,
        s(:lvar, :s), :gsub,
        s(:regexp,
          s(:str, "^ {6}"),
          s(:regopt)),
        s(:str, "")))),
  s(:class,
    s(:const, nil, :MetaMetaMetaTestCase),
    s(:const,
      s(:const,
        s(:const, nil, :MiniTest), :Unit), :TestCase),
    s(:begin,
      s(:def, :assert_report,
        s(:args,
          s(:arg, :expected),
          s(:optarg, :flags,
            s(:array,
              s(:str, "--seed"),
              s(:str, "42")))),
        s(:begin,
          s(:lvasgn, :header,
            s(:send, nil, :clean,
              s(:dstr,
                s(:str, "      Run options: "),
                s(:begin,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :flags), :map),
                      s(:args,
                        s(:arg, :s)),
                      s(:if,
                        s(:send,
                          s(:lvar, :s), :=~,
                          s(:regexp,
                            s(:str, "\\|"),
                            s(:regopt))),
                        s(:send,
                          s(:lvar, :s), :inspect),
                        s(:lvar, :s))), :join,
                    s(:str, " "))),
                s(:str, "\n"),
                s(:str, "\n"),
                s(:str, "      # Running tests:\n"),
                s(:str, "\n")))),
          s(:block,
            s(:send, nil, :with_output),
            s(:args),
            s(:send,
              s(:ivar, :@tu), :run,
              s(:lvar, :flags))),
          s(:lvasgn, :output,
            s(:send,
              s(:send,
                s(:ivar, :@output), :string), :dup)),
          s(:send,
            s(:lvar, :output), :sub!,
            s(:regexp,
              s(:str, "Finished tests in .*"),
              s(:regopt)),
            s(:str, "Finished tests in 0.00")),
          s(:send,
            s(:lvar, :output), :sub!,
            s(:regexp,
              s(:str, "Loaded suite .*"),
              s(:regopt)),
            s(:str, "Loaded suite blah")),
          s(:send,
            s(:lvar, :output), :gsub!,
            s(:regexp,
              s(:str, " = \\d+.\\d\\d s = "),
              s(:regopt)),
            s(:str, " = 0.00 s = ")),
          s(:send,
            s(:lvar, :output), :gsub!,
            s(:regexp,
              s(:str, "0x[A-Fa-f0-9]+"),
              s(:regopt)),
            s(:str, "0xXXX")),
          s(:if,
            s(:send, nil, :windows?),
            s(:begin,
              s(:send,
                s(:lvar, :output), :gsub!,
                s(:regexp,
                  s(:str, "\\[(?:[A-Za-z]:)?[^\\]:]+:\\d+\\]"),
                  s(:regopt)),
                s(:str, "[FILE:LINE]")),
              s(:send,
                s(:lvar, :output), :gsub!,
                s(:regexp,
                  s(:str, "^(\\s+)(?:[A-Za-z]:)?[^:]+:\\d+:in"),
                  s(:regopt)),
                s(:str, "\\1FILE:LINE:in"))),
            s(:begin,
              s(:send,
                s(:lvar, :output), :gsub!,
                s(:regexp,
                  s(:str, "\\[[^\\]:]+:\\d+\\]"),
                  s(:regopt)),
                s(:str, "[FILE:LINE]")),
              s(:send,
                s(:lvar, :output), :gsub!,
                s(:regexp,
                  s(:str, "^(\\s+)[^:]+:\\d+:in"),
                  s(:regopt)),
                s(:str, "\\1FILE:LINE:in")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :header), :+,
              s(:lvar, :expected)),
            s(:lvar, :output)))),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:send, nil, :srand,
            s(:int, 42)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :MiniTest), :Unit), :TestCase), :reset),
          s(:ivasgn, :@tu,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Unit), :new)),
          s(:send,
            s(:const,
              s(:const, nil, :MiniTest), :Unit), :runner=,
            s(:nil)))),
      s(:def, :teardown,
        s(:args),
        s(:zsuper)),
      s(:def, :with_output,
        s(:args),
        s(:block,
          s(:send, nil, :synchronize),
          s(:args),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :save,
                  s(:send,
                    s(:const,
                      s(:const, nil, :MiniTest), :Unit), :output)),
                s(:ivasgn, :@output,
                  s(:send,
                    s(:const, nil, :StringIO), :new,
                    s(:str, ""))),
                s(:send,
                  s(:const,
                    s(:const, nil, :MiniTest), :Unit), :output=,
                  s(:ivar, :@output)),
                s(:yield)),
              s(:send,
                s(:const,
                  s(:const, nil, :MiniTest), :Unit), :output=,
                s(:lvar, :save)))))))))
