s(:begin,
  s(:send, nil, :require,
    s(:str, "minitest/autorun")),
  s(:class,
    s(:const, nil, :TestMiniTestMock),
    s(:const,
      s(:const,
        s(:const, nil, :MiniTest), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@mock,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :MiniTest), :Mock), :new), :expect,
              s(:sym, :foo),
              s(:nil))),
          s(:send,
            s(:ivar, :@mock), :expect,
            s(:sym, :meaning_of_life),
            s(:int, 42)))),
      s(:def, :test_create_stub_method,
        s(:args),
        s(:send, nil, :assert_nil,
          s(:send,
            s(:ivar, :@mock), :foo))),
      s(:def, :test_allow_return_value_specification,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:int, 42),
          s(:send,
            s(:ivar, :@mock), :meaning_of_life))),
      s(:def, :test_blow_up_if_not_called,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@mock), :foo),
          s(:send, nil, :util_verify_bad,
            s(:str, "expected meaning_of_life() => 42, got []")))),
      s(:def, :test_not_blow_up_if_everything_called,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@mock), :foo),
          s(:send,
            s(:ivar, :@mock), :meaning_of_life),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@mock), :verify)))),
      s(:def, :test_allow_expectations_to_be_added_after_creation,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@mock), :expect,
            s(:sym, :bar),
            s(:true)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@mock), :bar)))),
      s(:def, :test_not_verify_if_new_expected_method_is_not_called,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@mock), :foo),
          s(:send,
            s(:ivar, :@mock), :meaning_of_life),
          s(:send,
            s(:ivar, :@mock), :expect,
            s(:sym, :bar),
            s(:true)),
          s(:send, nil, :util_verify_bad,
            s(:str, "expected bar() => true, got []")))),
      s(:def, :test_blow_up_on_wrong_number_of_arguments,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@mock), :foo),
          s(:send,
            s(:ivar, :@mock), :meaning_of_life),
          s(:send,
            s(:ivar, :@mock), :expect,
            s(:sym, :sum),
            s(:int, 3),
            s(:array,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:ivar, :@mock), :sum))),
          s(:send, nil, :assert_equal,
            s(:str, "mocked method :sum expects 2 arguments, got 0"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_return_mock_does_not_raise,
        s(:args),
        s(:begin,
          s(:lvasgn, :retval,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:lvasgn, :mock,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:send,
            s(:lvar, :mock), :expect,
            s(:sym, :foo),
            s(:lvar, :retval)),
          s(:send,
            s(:lvar, :mock), :foo),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :mock), :verify)))),
      s(:def, :test_mock_args_does_not_raise,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :maglev?),
            s(:send, nil, :skip,
              s(:str, "non-opaque use of ==")), nil),
          s(:lvasgn, :arg,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:lvasgn, :mock,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:send,
            s(:lvar, :mock), :expect,
            s(:sym, :foo),
            s(:nil),
            s(:array,
              s(:lvar, :arg))),
          s(:send,
            s(:lvar, :mock), :foo,
            s(:lvar, :arg)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :mock), :verify)))),
      s(:def, :test_blow_up_on_wrong_arguments,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@mock), :foo),
          s(:send,
            s(:ivar, :@mock), :meaning_of_life),
          s(:send,
            s(:ivar, :@mock), :expect,
            s(:sym, :sum),
            s(:int, 3),
            s(:array,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :MockExpectationError)),
              s(:args),
              s(:send,
                s(:ivar, :@mock), :sum,
                s(:int, 2),
                s(:int, 4)))),
          s(:lvasgn, :exp,
            s(:str, "mocked method :sum called with unexpected arguments [2, 4]")),
          s(:send, nil, :assert_equal,
            s(:lvar, :exp),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_expect_with_non_array_args,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:ivar, :@mock), :expect,
                s(:sym, :blah),
                s(:int, 3),
                s(:false)))),
          s(:send, nil, :assert_equal,
            s(:str, "args must be an array"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_respond_appropriately,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@mock), :respond_to?,
              s(:sym, :foo))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@mock), :respond_to?,
              s(:sym, :foo),
              s(:true))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@mock), :respond_to?,
              s(:str, "foo"))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@mock), :respond_to?,
                s(:sym, :bar)), :!)))),
      s(:def, :test_no_method_error_on_unexpected_methods,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :NoMethodError)),
              s(:args),
              s(:send,
                s(:ivar, :@mock), :bar))),
          s(:lvasgn, :expected,
            s(:str, "unmocked method :bar, expected one of [:foo, :meaning_of_life]")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_assign_per_mock_return_values,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:lvasgn, :b,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:send,
            s(:lvar, :a), :expect,
            s(:sym, :foo),
            s(:sym, :a)),
          s(:send,
            s(:lvar, :b), :expect,
            s(:sym, :foo),
            s(:sym, :b)),
          s(:send, nil, :assert_equal,
            s(:sym, :a),
            s(:send,
              s(:lvar, :a), :foo)),
          s(:send, nil, :assert_equal,
            s(:sym, :b),
            s(:send,
              s(:lvar, :b), :foo)))),
      s(:def, :test_do_not_create_stub_method_on_new_mocks,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:send,
            s(:lvar, :a), :expect,
            s(:sym, :foo),
            s(:sym, :a)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :MiniTest), :Mock), :new), :respond_to?,
                s(:sym, :foo)), :!)))),
      s(:def, :test_mock_is_a_blank_slate,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@mock), :expect,
            s(:sym, :kind_of?),
            s(:true),
            s(:array,
              s(:const, nil, :Fixnum))),
          s(:send,
            s(:ivar, :@mock), :expect,
            s(:sym, :==),
            s(:true),
            s(:array,
              s(:int, 1))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@mock), :kind_of?,
              s(:const, nil, :Fixnum)),
            s(:str, "didn't mock :kind_of?")),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@mock), :==,
              s(:int, 1)),
            s(:str, "didn't mock :==")))),
      s(:def, :test_verify_allows_called_args_to_be_loosely_specified,
        s(:args),
        s(:begin,
          s(:lvasgn, :mock,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:send,
            s(:lvar, :mock), :expect,
            s(:sym, :loose_expectation),
            s(:true),
            s(:array,
              s(:const, nil, :Integer))),
          s(:send,
            s(:lvar, :mock), :loose_expectation,
            s(:int, 1)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :mock), :verify)))),
      s(:def, :test_verify_raises_with_strict_args,
        s(:args),
        s(:begin,
          s(:lvasgn, :mock,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:send,
            s(:lvar, :mock), :expect,
            s(:sym, :strict_expectation),
            s(:true),
            s(:array,
              s(:int, 2))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :MockExpectationError)),
              s(:args),
              s(:send,
                s(:lvar, :mock), :strict_expectation,
                s(:int, 1)))),
          s(:lvasgn, :exp,
            s(:str, "mocked method :strict_expectation called with unexpected arguments [1]")),
          s(:send, nil, :assert_equal,
            s(:lvar, :exp),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_method_missing_empty,
        s(:args),
        s(:begin,
          s(:lvasgn, :mock,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:send,
            s(:lvar, :mock), :expect,
            s(:sym, :a),
            s(:nil)),
          s(:send,
            s(:lvar, :mock), :a),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :MockExpectationError)),
              s(:args),
              s(:send,
                s(:lvar, :mock), :a))),
          s(:send, nil, :assert_equal,
            s(:str, "No more expects available for :a: []"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_same_method_expects_are_verified_when_all_called,
        s(:args),
        s(:begin,
          s(:lvasgn, :mock,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:send,
            s(:lvar, :mock), :expect,
            s(:sym, :foo),
            s(:nil),
            s(:array,
              s(:sym, :bar))),
          s(:send,
            s(:lvar, :mock), :expect,
            s(:sym, :foo),
            s(:nil),
            s(:array,
              s(:sym, :baz))),
          s(:send,
            s(:lvar, :mock), :foo,
            s(:sym, :bar)),
          s(:send,
            s(:lvar, :mock), :foo,
            s(:sym, :baz)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :mock), :verify)))),
      s(:def, :test_same_method_expects_blow_up_when_not_all_called,
        s(:args),
        s(:begin,
          s(:lvasgn, :mock,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:send,
            s(:lvar, :mock), :expect,
            s(:sym, :foo),
            s(:nil),
            s(:array,
              s(:sym, :bar))),
          s(:send,
            s(:lvar, :mock), :expect,
            s(:sym, :foo),
            s(:nil),
            s(:array,
              s(:sym, :baz))),
          s(:send,
            s(:lvar, :mock), :foo,
            s(:sym, :bar)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :MockExpectationError)),
              s(:args),
              s(:send,
                s(:lvar, :mock), :verify))),
          s(:lvasgn, :exp,
            s(:str, "expected foo(:baz) => nil, got [foo(:bar) => nil]")),
          s(:send, nil, :assert_equal,
            s(:lvar, :exp),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_verify_passes_when_mock_block_returns_true,
        s(:args),
        s(:begin,
          s(:lvasgn, :mock,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:block,
            s(:send,
              s(:lvar, :mock), :expect,
              s(:sym, :foo),
              s(:nil)),
            s(:args),
            s(:true)),
          s(:send,
            s(:lvar, :mock), :foo),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :mock), :verify)))),
      s(:def, :test_mock_block_is_passed_function_params,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :arg1),
              s(:lvasgn, :arg2),
              s(:lvasgn, :arg3)),
            s(:array,
              s(:sym, :bar),
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:hash,
                s(:pair,
                  s(:sym, :a),
                  s(:str, "a"))))),
          s(:lvasgn, :mock,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:block,
            s(:send,
              s(:lvar, :mock), :expect,
              s(:sym, :foo),
              s(:nil)),
            s(:args,
              s(:arg, :a1),
              s(:arg, :a2),
              s(:arg, :a3)),
            s(:and,
              s(:and,
                s(:send,
                  s(:lvar, :a1), :==,
                  s(:lvar, :arg1)),
                s(:send,
                  s(:lvar, :a2), :==,
                  s(:lvar, :arg2))),
              s(:send,
                s(:lvar, :a3), :==,
                s(:lvar, :arg3)))),
          s(:send,
            s(:lvar, :mock), :foo,
            s(:lvar, :arg1),
            s(:lvar, :arg2),
            s(:lvar, :arg3)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :mock), :verify)))),
      s(:def, :test_verify_fails_when_mock_block_returns_false,
        s(:args),
        s(:begin,
          s(:lvasgn, :mock,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:block,
            s(:send,
              s(:lvar, :mock), :expect,
              s(:sym, :foo),
              s(:nil)),
            s(:args),
            s(:false)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :MockExpectationError)),
              s(:args),
              s(:send,
                s(:lvar, :mock), :foo))),
          s(:lvasgn, :exp,
            s(:str, "mocked method :foo failed block w/ []")),
          s(:send, nil, :assert_equal,
            s(:lvar, :exp),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_mock_block_throws_if_args_passed,
        s(:args),
        s(:begin,
          s(:lvasgn, :mock,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:block,
                s(:send,
                  s(:lvar, :mock), :expect,
                  s(:sym, :foo),
                  s(:nil),
                  s(:array,
                    s(:sym, :a),
                    s(:sym, :b),
                    s(:sym, :c))),
                s(:args),
                s(:true)))),
          s(:lvasgn, :exp,
            s(:str, "args ignored when block given")),
          s(:send, nil, :assert_equal,
            s(:lvar, :exp),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_mock_returns_retval_when_called_with_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :mock,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:block,
            s(:send,
              s(:lvar, :mock), :expect,
              s(:sym, :foo),
              s(:int, 32)),
            s(:args),
            s(:true)),
          s(:lvasgn, :rs,
            s(:send,
              s(:lvar, :mock), :foo)),
          s(:send, nil, :assert_equal,
            s(:lvar, :rs),
            s(:int, 32)))),
      s(:def, :util_verify_bad,
        s(:args,
          s(:arg, :exp)),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :MockExpectationError)),
              s(:args),
              s(:send,
                s(:ivar, :@mock), :verify))),
          s(:send, nil, :assert_equal,
            s(:lvar, :exp),
            s(:send,
              s(:lvar, :e), :message)))))),
  s(:send, nil, :require,
    s(:str, "minitest/metametameta")),
  s(:class,
    s(:const, nil, :TestMiniTestStub),
    s(:const,
      s(:const,
        s(:const, nil, :MiniTest), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :MiniTest), :Unit), :TestCase), :reset),
          s(:ivasgn, :@tc,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :MiniTest), :Unit), :TestCase), :new,
              s(:str, "fake tc"))),
          s(:ivasgn, :@assertion_count,
            s(:int, 1)))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:send, nil, :assert_equal,
            s(:ivar, :@assertion_count),
            s(:send,
              s(:ivar, :@tc), :_assertions)))),
      s(:class,
        s(:const, nil, :Time), nil,
        s(:defs,
          s(:self), :now,
          s(:args),
          s(:int, 24))),
      s(:def, :assert_stub,
        s(:args,
          s(:arg, :val_or_callable)),
        s(:begin,
          s(:op_asgn,
            s(:ivasgn, :@assertion_count), :+,
            s(:int, 1)),
          s(:lvasgn, :t,
            s(:send,
              s(:send,
                s(:const, nil, :Time), :now), :to_i)),
          s(:block,
            s(:send,
              s(:const, nil, :Time), :stub,
              s(:sym, :now),
              s(:lvar, :val_or_callable)),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :assert_equal,
              s(:int, 42),
              s(:send,
                s(:const, nil, :Time), :now))),
          s(:send,
            s(:ivar, :@tc), :assert_operator,
            s(:send,
              s(:send,
                s(:const, nil, :Time), :now), :to_i),
            s(:sym, :>=),
            s(:lvar, :t)))),
      s(:def, :test_stub_private_module_method,
        s(:args),
        s(:begin,
          s(:op_asgn,
            s(:ivasgn, :@assertion_count), :+,
            s(:int, 1)),
          s(:lvasgn, :t0,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:block,
            s(:send,
              s(:self), :stub,
              s(:sym, :sleep),
              s(:nil)),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :assert_nil,
              s(:send, nil, :sleep,
                s(:int, 10)))),
          s(:send,
            s(:ivar, :@tc), :assert_operator,
            s(:send,
              s(:send,
                s(:const, nil, :Time), :now), :-,
              s(:lvar, :t0)),
            s(:sym, :<=),
            s(:int, 1)))),
      s(:def, :test_stub_private_module_method_indirect,
        s(:args),
        s(:begin,
          s(:op_asgn,
            s(:ivasgn, :@assertion_count), :+,
            s(:int, 1)),
          s(:lvasgn, :slow_clapper,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new),
                s(:args),
                s(:def, :slow_clap,
                  s(:args),
                  s(:begin,
                    s(:send, nil, :sleep,
                      s(:int, 3)),
                    s(:sym, :clap)))), :new)),
          s(:block,
            s(:send,
              s(:lvar, :slow_clapper), :stub,
              s(:sym, :sleep),
              s(:nil)),
            s(:args,
              s(:arg, :fast_clapper)),
            s(:begin,
              s(:send,
                s(:ivar, :@tc), :assert_equal,
                s(:sym, :clap),
                s(:send,
                  s(:lvar, :fast_clapper), :slow_clap)),
              s(:send,
                s(:ivar, :@tc), :assert_equal,
                s(:sym, :clap),
                s(:send,
                  s(:lvar, :slow_clapper), :slow_clap)))))),
      s(:def, :test_stub_public_module_method,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Math), :stub,
            s(:sym, :log10),
            s(:float, 42.0)),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :assert_in_delta,
            s(:float, 42.0),
            s(:send,
              s(:const, nil, :Math), :log10,
              s(:int, 1000))))),
      s(:def, :test_stub_value,
        s(:args),
        s(:send, nil, :assert_stub,
          s(:int, 42))),
      s(:def, :test_stub_block,
        s(:args),
        s(:send, nil, :assert_stub,
          s(:block,
            s(:send, nil, :lambda),
            s(:args),
            s(:int, 42)))),
      s(:def, :test_stub_block_args,
        s(:args),
        s(:begin,
          s(:op_asgn,
            s(:ivasgn, :@assertion_count), :+,
            s(:int, 1)),
          s(:lvasgn, :t,
            s(:send,
              s(:send,
                s(:const, nil, :Time), :now), :to_i)),
          s(:block,
            s(:send,
              s(:const, nil, :Time), :stub,
              s(:sym, :now),
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :n)),
                s(:send,
                  s(:lvar, :n), :*,
                  s(:int, 2)))),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :assert_equal,
              s(:int, 42),
              s(:send,
                s(:const, nil, :Time), :now,
                s(:int, 21)))),
          s(:send,
            s(:ivar, :@tc), :assert_operator,
            s(:send,
              s(:send,
                s(:const, nil, :Time), :now), :to_i),
            s(:sym, :>=),
            s(:lvar, :t)))),
      s(:def, :test_stub_callable,
        s(:args),
        s(:begin,
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :obj), :call,
            s(:args),
            s(:int, 42)),
          s(:send, nil, :assert_stub,
            s(:lvar, :obj)))),
      s(:def, :test_stub_yield_self,
        s(:args),
        s(:begin,
          s(:lvasgn, :obj,
            s(:str, "foo")),
          s(:lvasgn, :val,
            s(:block,
              s(:send,
                s(:lvar, :obj), :stub,
                s(:sym, :to_s),
                s(:str, "bar")),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :to_s))),
          s(:send,
            s(:ivar, :@tc), :assert_equal,
            s(:str, "bar"),
            s(:lvar, :val)))),
      s(:def, :test_dynamic_method,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:lvasgn, :dynamic,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:defs,
                  s(:self), :respond_to?,
                  s(:args,
                    s(:arg, :meth)),
                  s(:send,
                    s(:lvar, :meth), :==,
                    s(:sym, :found))),
                s(:defs,
                  s(:self), :method_missing,
                  s(:args,
                    s(:arg, :meth),
                    s(:restarg, :args),
                    s(:blockarg, :block)),
                  s(:if,
                    s(:send,
                      s(:lvar, :meth), :==,
                      s(:sym, :found)),
                    s(:false),
                    s(:zsuper)))))),
          s(:lvasgn, :val,
            s(:block,
              s(:send,
                s(:lvar, :dynamic), :stub,
                s(:sym, :found),
                s(:true)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :found))),
          s(:send,
            s(:ivar, :@tc), :assert_equal,
            s(:true),
            s(:lvar, :val)),
          s(:send,
            s(:ivar, :@tc), :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :dynamic), :found)))))))
