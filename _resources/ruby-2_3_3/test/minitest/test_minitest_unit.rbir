s(:begin,
  s(:send, nil, :require,
    s(:str, "pathname")),
  s(:send, nil, :require,
    s(:str, "minitest/metametameta")),
  s(:module,
    s(:const, nil, :MyModule), nil),
  s(:class,
    s(:const, nil, :AnError),
    s(:const, nil, :StandardError),
    s(:send, nil, :include,
      s(:const, nil, :MyModule))),
  s(:class,
    s(:const, nil, :ImmutableString),
    s(:const, nil, :String),
    s(:def, :inspect,
      s(:args),
      s(:send,
        s(:zsuper), :freeze))),
  s(:class,
    s(:const, nil, :TestMiniTestUnit),
    s(:const, nil, :MetaMetaMetaTestCase),
    s(:begin,
      s(:lvasgn, :pwd,
        s(:send,
          s(:const, nil, :Pathname), :new,
          s(:send,
            s(:const, nil, :File), :expand_path,
            s(:send,
              s(:const, nil, :Dir), :pwd)))),
      s(:lvasgn, :basedir,
        s(:send,
          s(:send,
            s(:const, nil, :Pathname), :new,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:str, "lib/minitest"))), :+,
          s(:str, "mini"))),
      s(:lvasgn, :basedir,
        s(:send,
          s(:send,
            s(:lvar, :basedir), :relative_path_from,
            s(:lvar, :pwd)), :to_s)),
      s(:casgn, nil, :MINITEST_BASE_DIR,
        s(:if,
          s(:send,
            s(:lvar, :basedir), :[],
            s(:regexp,
              s(:str, "\\A\\."),
              s(:regopt))),
          s(:lvar, :basedir),
          s(:dstr,
            s(:str, "./"),
            s(:begin,
              s(:lvar, :basedir))))),
      s(:casgn, nil, :BT_MIDDLE,
        s(:array,
          s(:dstr,
            s(:begin,
              s(:const, nil, :MINITEST_BASE_DIR)),
            s(:str, "/test.rb:161:in `each'")),
          s(:dstr,
            s(:begin,
              s(:const, nil, :MINITEST_BASE_DIR)),
            s(:str, "/test.rb:158:in `each'")),
          s(:dstr,
            s(:begin,
              s(:const, nil, :MINITEST_BASE_DIR)),
            s(:str, "/test.rb:139:in `run'")),
          s(:dstr,
            s(:begin,
              s(:const, nil, :MINITEST_BASE_DIR)),
            s(:str, "/test.rb:106:in `run'")))),
      s(:def, :test_class_puke_with_assertion_failed,
        s(:args),
        s(:begin,
          s(:lvasgn, :exception,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Assertion), :new,
              s(:str, "Oh no!"))),
          s(:send,
            s(:lvar, :exception), :set_backtrace,
            s(:array,
              s(:str, "unhappy"))),
          s(:send, nil, :assert_equal,
            s(:str, "F"),
            s(:send,
              s(:ivar, :@tu), :puke,
              s(:str, "SomeClass"),
              s(:str, "method_name"),
              s(:lvar, :exception))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@tu), :failures)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^Failure.*Oh no!"),
              s(:regopt, :m)),
            s(:send,
              s(:send,
                s(:ivar, :@tu), :report), :first)),
          s(:send, nil, :assert_match,
            s(:str, "SomeClass#method_name [unhappy]"),
            s(:send,
              s(:send,
                s(:ivar, :@tu), :report), :first)))),
      s(:def, :test_class_puke_with_assertion_failed_and_long_backtrace,
        s(:args),
        s(:begin,
          s(:lvasgn, :bt,
            s(:begin,
              s(:send,
                s(:send,
                  s(:array,
                    s(:str, "test/test_some_class.rb:615:in `method_name'"),
                    s(:dstr,
                      s(:begin,
                        s(:const, nil, :MINITEST_BASE_DIR)),
                      s(:str, "/unit.rb:140:in `assert_raises'")),
                    s(:str, "test/test_some_class.rb:615:in `each'"),
                    s(:str, "test/test_some_class.rb:614:in `test_method_name'"),
                    s(:dstr,
                      s(:begin,
                        s(:const, nil, :MINITEST_BASE_DIR)),
                      s(:str, "/test.rb:165:in `__send__'"))), :+,
                  s(:const, nil, :BT_MIDDLE)), :+,
                s(:array,
                  s(:dstr,
                    s(:begin,
                      s(:const, nil, :MINITEST_BASE_DIR)),
                    s(:str, "/test.rb:29")))))),
          s(:lvasgn, :bt,
            s(:send, nil, :util_expand_bt,
              s(:lvar, :bt))),
          s(:lvasgn, :ex_location,
            s(:send,
              s(:send, nil, :util_expand_bt,
                s(:array,
                  s(:str, "test/test_some_class.rb:615"))), :first)),
          s(:lvasgn, :exception,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Assertion), :new,
              s(:str, "Oh no!"))),
          s(:send,
            s(:lvar, :exception), :set_backtrace,
            s(:lvar, :bt)),
          s(:send, nil, :assert_equal,
            s(:str, "F"),
            s(:send,
              s(:ivar, :@tu), :puke,
              s(:str, "TestSomeClass"),
              s(:str, "test_method_name"),
              s(:lvar, :exception))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@tu), :failures)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^Failure.*Oh no!"),
              s(:regopt, :m)),
            s(:send,
              s(:send,
                s(:ivar, :@tu), :report), :first)),
          s(:send, nil, :assert_match,
            s(:dstr,
              s(:str, "TestSomeClass#test_method_name ["),
              s(:begin,
                s(:lvar, :ex_location)),
              s(:str, "]")),
            s(:send,
              s(:send,
                s(:ivar, :@tu), :report), :first)))),
      s(:def, :test_class_puke_with_assertion_failed_and_user_defined_assertions,
        s(:args),
        s(:begin,
          s(:lvasgn, :bt,
            s(:begin,
              s(:send,
                s(:send,
                  s(:array,
                    s(:str, "lib/test/my/util.rb:16:in `another_method_name'"),
                    s(:dstr,
                      s(:begin,
                        s(:const, nil, :MINITEST_BASE_DIR)),
                      s(:str, "/unit.rb:140:in `assert_raises'")),
                    s(:str, "lib/test/my/util.rb:15:in `block in assert_something'"),
                    s(:str, "lib/test/my/util.rb:14:in `each'"),
                    s(:str, "lib/test/my/util.rb:14:in `assert_something'"),
                    s(:str, "test/test_some_class.rb:615:in `each'"),
                    s(:str, "test/test_some_class.rb:614:in `test_method_name'"),
                    s(:dstr,
                      s(:begin,
                        s(:const, nil, :MINITEST_BASE_DIR)),
                      s(:str, "/test.rb:165:in `__send__'"))), :+,
                  s(:const, nil, :BT_MIDDLE)), :+,
                s(:array,
                  s(:dstr,
                    s(:begin,
                      s(:const, nil, :MINITEST_BASE_DIR)),
                    s(:str, "/test.rb:29")))))),
          s(:lvasgn, :bt,
            s(:send, nil, :util_expand_bt,
              s(:lvar, :bt))),
          s(:lvasgn, :ex_location,
            s(:send,
              s(:send, nil, :util_expand_bt,
                s(:array,
                  s(:str, "test/test_some_class.rb:615"))), :first)),
          s(:lvasgn, :exception,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Assertion), :new,
              s(:str, "Oh no!"))),
          s(:send,
            s(:lvar, :exception), :set_backtrace,
            s(:lvar, :bt)),
          s(:send, nil, :assert_equal,
            s(:str, "F"),
            s(:send,
              s(:ivar, :@tu), :puke,
              s(:str, "TestSomeClass"),
              s(:str, "test_method_name"),
              s(:lvar, :exception))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@tu), :failures)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^Failure.*Oh no!"),
              s(:regopt, :m)),
            s(:send,
              s(:send,
                s(:ivar, :@tu), :report), :first)),
          s(:send, nil, :assert_match,
            s(:dstr,
              s(:str, "TestSomeClass#test_method_name ["),
              s(:begin,
                s(:lvar, :ex_location)),
              s(:str, "]")),
            s(:send,
              s(:send,
                s(:ivar, :@tu), :report), :first)))),
      s(:def, :test_class_puke_with_failure_and_flunk_in_backtrace,
        s(:args),
        s(:begin,
          s(:lvasgn, :exception,
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :MiniTest), :Unit), :TestCase), :new,
                    s(:str, "fake tc")), :flunk),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :MiniTest), :Assertion)),
                  s(:lvasgn, :failure),
                  s(:lvar, :failure)), nil))),
          s(:send, nil, :assert_equal,
            s(:str, "F"),
            s(:send,
              s(:ivar, :@tu), :puke,
              s(:str, "SomeClass"),
              s(:str, "method_name"),
              s(:lvar, :exception))),
          s(:send, nil, :refute,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@tu), :report), :any?),
              s(:args,
                s(:arg, :line)),
              s(:send,
                s(:lvar, :line), :=~,
                s(:regexp,
                  s(:str, "in .flunk"),
                  s(:regopt))))))),
      s(:def, :test_class_puke_with_flunk_and_user_defined_assertions,
        s(:args),
        s(:begin,
          s(:lvasgn, :bt,
            s(:begin,
              s(:send,
                s(:send,
                  s(:array,
                    s(:str, "lib/test/my/util.rb:16:in `flunk'"),
                    s(:dstr,
                      s(:begin,
                        s(:const, nil, :MINITEST_BASE_DIR)),
                      s(:str, "/unit.rb:140:in `assert_raises'")),
                    s(:str, "lib/test/my/util.rb:15:in `block in assert_something'"),
                    s(:str, "lib/test/my/util.rb:14:in `each'"),
                    s(:str, "lib/test/my/util.rb:14:in `assert_something'"),
                    s(:str, "test/test_some_class.rb:615:in `each'"),
                    s(:str, "test/test_some_class.rb:614:in `test_method_name'"),
                    s(:dstr,
                      s(:begin,
                        s(:const, nil, :MINITEST_BASE_DIR)),
                      s(:str, "/test.rb:165:in `__send__'"))), :+,
                  s(:const, nil, :BT_MIDDLE)), :+,
                s(:array,
                  s(:dstr,
                    s(:begin,
                      s(:const, nil, :MINITEST_BASE_DIR)),
                    s(:str, "/test.rb:29")))))),
          s(:lvasgn, :bt,
            s(:send, nil, :util_expand_bt,
              s(:lvar, :bt))),
          s(:lvasgn, :ex_location,
            s(:send,
              s(:send, nil, :util_expand_bt,
                s(:array,
                  s(:str, "test/test_some_class.rb:615"))), :first)),
          s(:lvasgn, :exception,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Assertion), :new,
              s(:str, "Oh no!"))),
          s(:send,
            s(:lvar, :exception), :set_backtrace,
            s(:lvar, :bt)),
          s(:send, nil, :assert_equal,
            s(:str, "F"),
            s(:send,
              s(:ivar, :@tu), :puke,
              s(:str, "TestSomeClass"),
              s(:str, "test_method_name"),
              s(:lvar, :exception))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@tu), :failures)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^Failure.*Oh no!"),
              s(:regopt, :m)),
            s(:send,
              s(:send,
                s(:ivar, :@tu), :report), :first)),
          s(:send, nil, :assert_match,
            s(:dstr,
              s(:str, "TestSomeClass#test_method_name ["),
              s(:begin,
                s(:lvar, :ex_location)),
              s(:str, "]")),
            s(:send,
              s(:send,
                s(:ivar, :@tu), :report), :first)))),
      s(:def, :test_class_puke_with_non_failure_exception,
        s(:args),
        s(:begin,
          s(:lvasgn, :exception,
            s(:send,
              s(:const, nil, :Exception), :new,
              s(:str, "Oh no again!"))),
          s(:send, nil, :assert_equal,
            s(:str, "E"),
            s(:send,
              s(:ivar, :@tu), :puke,
              s(:str, "SomeClass"),
              s(:str, "method_name"),
              s(:lvar, :exception))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@tu), :errors)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^Exception.*Oh no again!"),
              s(:regopt, :m)),
            s(:send,
              s(:send,
                s(:ivar, :@tu), :report), :first)))),
      s(:def, :test_filter_backtrace,
        s(:args),
        s(:begin,
          s(:lvasgn, :bt,
            s(:begin,
              s(:send,
                s(:send,
                  s(:array,
                    s(:str, "lib/autotest.rb:571:in `add_exception'"),
                    s(:str, "test/test_autotest.rb:62:in `test_add_exception'"),
                    s(:dstr,
                      s(:begin,
                        s(:const, nil, :MINITEST_BASE_DIR)),
                      s(:str, "/test.rb:165:in `__send__'"))), :+,
                  s(:const, nil, :BT_MIDDLE)), :+,
                s(:array,
                  s(:dstr,
                    s(:begin,
                      s(:const, nil, :MINITEST_BASE_DIR)),
                    s(:str, "/test.rb:29")),
                  s(:str, "test/test_autotest.rb:422"))))),
          s(:lvasgn, :bt,
            s(:send, nil, :util_expand_bt,
              s(:lvar, :bt))),
          s(:lvasgn, :ex,
            s(:array,
              s(:str, "lib/autotest.rb:571:in `add_exception'"),
              s(:str, "test/test_autotest.rb:62:in `test_add_exception'"))),
          s(:lvasgn, :ex,
            s(:send, nil, :util_expand_bt,
              s(:lvar, :ex))),
          s(:lvasgn, :fu,
            s(:send,
              s(:const, nil, :MiniTest), :filter_backtrace,
              s(:lvar, :bt))),
          s(:send, nil, :assert_equal,
            s(:lvar, :ex),
            s(:lvar, :fu)))),
      s(:def, :test_filter_backtrace_all_unit,
        s(:args),
        s(:begin,
          s(:lvasgn, :bt,
            s(:begin,
              s(:send,
                s(:send,
                  s(:array,
                    s(:dstr,
                      s(:begin,
                        s(:const, nil, :MINITEST_BASE_DIR)),
                      s(:str, "/test.rb:165:in `__send__'"))), :+,
                  s(:const, nil, :BT_MIDDLE)), :+,
                s(:array,
                  s(:dstr,
                    s(:begin,
                      s(:const, nil, :MINITEST_BASE_DIR)),
                    s(:str, "/test.rb:29")))))),
          s(:lvasgn, :ex,
            s(:send,
              s(:lvar, :bt), :clone)),
          s(:lvasgn, :fu,
            s(:send,
              s(:const, nil, :MiniTest), :filter_backtrace,
              s(:lvar, :bt))),
          s(:send, nil, :assert_equal,
            s(:lvar, :ex),
            s(:lvar, :fu)))),
      s(:def, :test_filter_backtrace_unit_starts,
        s(:args),
        s(:begin,
          s(:lvasgn, :bt,
            s(:begin,
              s(:send,
                s(:send,
                  s(:array,
                    s(:dstr,
                      s(:begin,
                        s(:const, nil, :MINITEST_BASE_DIR)),
                      s(:str, "/test.rb:165:in `__send__'"))), :+,
                  s(:const, nil, :BT_MIDDLE)), :+,
                s(:array,
                  s(:dstr,
                    s(:begin,
                      s(:const, nil, :MINITEST_BASE_DIR)),
                    s(:str, "/mini/test.rb:29")),
                  s(:str, "-e:1"))))),
          s(:lvasgn, :bt,
            s(:send, nil, :util_expand_bt,
              s(:lvar, :bt))),
          s(:lvasgn, :ex,
            s(:array,
              s(:str, "-e:1"))),
          s(:lvasgn, :fu,
            s(:send,
              s(:const, nil, :MiniTest), :filter_backtrace,
              s(:lvar, :bt))),
          s(:send, nil, :assert_equal,
            s(:lvar, :ex),
            s(:lvar, :fu)))),
      s(:def, :test_default_runner_is_minitest_unit,
        s(:args),
        s(:send, nil, :assert_instance_of,
          s(:const,
            s(:const, nil, :MiniTest), :Unit),
          s(:send,
            s(:const,
              s(:const, nil, :MiniTest), :Unit), :runner))),
      s(:def, :test_passed_eh_teardown_good,
        s(:args),
        s(:begin,
          s(:lvasgn, :test_class,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:const,
                  s(:const,
                    s(:const, nil, :MiniTest), :Unit), :TestCase)),
              s(:args),
              s(:begin,
                s(:def, :teardown,
                  s(:args),
                  s(:send, nil, :assert,
                    s(:true))),
                s(:def, :test_omg,
                  s(:args),
                  s(:send, nil, :assert,
                    s(:true)))))),
          s(:lvasgn, :test,
            s(:send,
              s(:lvar, :test_class), :new,
              s(:sym, :test_omg))),
          s(:send,
            s(:lvar, :test), :run,
            s(:ivar, :@tu)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :test), :passed?)))),
      s(:def, :test_passed_eh_teardown_skipped,
        s(:args),
        s(:begin,
          s(:lvasgn, :test_class,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:const,
                  s(:const,
                    s(:const, nil, :MiniTest), :Unit), :TestCase)),
              s(:args),
              s(:begin,
                s(:def, :teardown,
                  s(:args),
                  s(:send, nil, :assert,
                    s(:true))),
                s(:def, :test_omg,
                  s(:args),
                  s(:send, nil, :skip,
                    s(:str, "bork")))))),
          s(:lvasgn, :test,
            s(:send,
              s(:lvar, :test_class), :new,
              s(:sym, :test_omg))),
          s(:send,
            s(:lvar, :test), :run,
            s(:ivar, :@tu)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :test), :passed?)))),
      s(:def, :test_passed_eh_teardown_flunked,
        s(:args),
        s(:begin,
          s(:lvasgn, :test_class,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:const,
                  s(:const,
                    s(:const, nil, :MiniTest), :Unit), :TestCase)),
              s(:args),
              s(:begin,
                s(:def, :teardown,
                  s(:args),
                  s(:send, nil, :flunk)),
                s(:def, :test_omg,
                  s(:args),
                  s(:send, nil, :assert,
                    s(:true)))))),
          s(:lvasgn, :test,
            s(:send,
              s(:lvar, :test_class), :new,
              s(:sym, :test_omg))),
          s(:send,
            s(:lvar, :test), :run,
            s(:ivar, :@tu)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :test), :passed?)))),
      s(:def, :util_expand_bt,
        s(:args,
          s(:arg, :bt)),
        s(:block,
          s(:send,
            s(:lvar, :bt), :map),
          s(:args,
            s(:arg, :f)),
          s(:if,
            s(:begin,
              s(:send,
                s(:lvar, :f), :=~,
                s(:regexp,
                  s(:str, "^\\."),
                  s(:regopt)))),
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:lvar, :f)),
            s(:lvar, :f)))))),
  s(:class,
    s(:const, nil, :TestMiniTestUnitInherited),
    s(:const, nil, :MetaMetaMetaTestCase),
    s(:begin,
      s(:def, :with_overridden_include,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :class_eval),
              s(:args),
              s(:begin,
                s(:def, :inherited_with_hacks,
                  s(:args,
                    s(:arg, :klass)),
                  s(:send, nil, :throw,
                    s(:sym, :inherited_hook))),
                s(:alias,
                  s(:sym, :inherited_without_hacks),
                  s(:sym, :inherited)),
                s(:alias,
                  s(:sym, :inherited),
                  s(:sym, :inherited_with_hacks)),
                s(:alias,
                  s(:sym, :IGNORE_ME!),
                  s(:sym, :inherited)))),
            s(:yield)),
          s(:begin,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :class_eval),
              s(:args),
              s(:begin,
                s(:alias,
                  s(:sym, :inherited),
                  s(:sym, :inherited_without_hacks)),
                s(:send, nil, :undef_method,
                  s(:sym, :inherited_with_hacks)),
                s(:send, nil, :undef_method,
                  s(:sym, :inherited_without_hacks)))),
            s(:send, nil, :refute_respond_to,
              s(:const, nil, :Class),
              s(:sym, :inherited_with_hacks)),
            s(:send, nil, :refute_respond_to,
              s(:const, nil, :Class),
              s(:sym, :inherited_without_hacks))))),
      s(:def, :test_inherited_hook_plays_nice_with_others,
        s(:args),
        s(:block,
          s(:send, nil, :with_overridden_include),
          s(:args),
          s(:block,
            s(:send, nil, :assert_throws,
              s(:sym, :inherited_hook)),
            s(:args),
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :MiniTest), :Unit), :TestCase))))))),
  s(:class,
    s(:const, nil, :TestMiniTestRunner),
    s(:const, nil, :MetaMetaMetaTestCase),
    s(:begin,
      s(:def, :test_class_test_suites,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 0)),
          s(:lvasgn, :tc,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :MiniTest), :Unit), :TestCase))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :MiniTest), :Unit), :TestCase), :test_suites), :size)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :tc)),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :MiniTest), :Unit), :TestCase), :test_suites)))),
      s(:def, :test_run_test,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :MiniTest), :Unit), :TestCase)),
            s(:args),
            s(:begin,
              s(:send, nil, :attr_reader,
                s(:sym, :foo)),
              s(:def, :run_test,
                s(:args,
                  s(:arg, :name)),
                s(:begin,
                  s(:ivasgn, :@foo,
                    s(:str, "hi mom!")),
                  s(:zsuper),
                  s(:ivasgn, :@foo,
                    s(:str, "okay")))),
              s(:def, :test_something,
                s(:args),
                s(:send, nil, :assert_equal,
                  s(:str, "hi mom!"),
                  s(:send, nil, :foo))))),
          s(:lvasgn, :expected,
            s(:send, nil, :clean,
              s(:dstr,
                s(:str, "      .\n"),
                s(:str, "\n"),
                s(:str, "      Finished tests in 0.00\n"),
                s(:str, "\n"),
                s(:str, "      1 tests, 1 assertions, 0 failures, 0 errors, 0 skips\n")))),
          s(:send, nil, :assert_report,
            s(:lvar, :expected)))),
      s(:def, :test_run_error,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :MiniTest), :Unit), :TestCase)),
            s(:args),
            s(:begin,
              s(:def, :test_something,
                s(:args),
                s(:send, nil, :assert,
                  s(:true))),
              s(:def, :test_error,
                s(:args),
                s(:send, nil, :raise,
                  s(:str, "unhandled exception"))))),
          s(:lvasgn, :expected,
            s(:send, nil, :clean,
              s(:dstr,
                s(:str, "      E.\n"),
                s(:str, "\n"),
                s(:str, "      Finished tests in 0.00\n"),
                s(:str, "\n"),
                s(:str, "        1) Error:\n"),
                s(:str, "      #<Class:0xXXX>#test_error:\n"),
                s(:str, "      RuntimeError: unhandled exception\n"),
                s(:str, "          FILE:LINE:in `test_error'\n"),
                s(:str, "\n"),
                s(:str, "      2 tests, 1 assertions, 0 failures, 1 errors, 0 skips\n")))),
          s(:send, nil, :assert_report,
            s(:lvar, :expected)))),
      s(:def, :test_run_error_teardown,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :MiniTest), :Unit), :TestCase)),
            s(:args),
            s(:begin,
              s(:def, :test_something,
                s(:args),
                s(:send, nil, :assert,
                  s(:true))),
              s(:def, :teardown,
                s(:args),
                s(:send, nil, :raise,
                  s(:str, "unhandled exception"))))),
          s(:lvasgn, :expected,
            s(:send, nil, :clean,
              s(:dstr,
                s(:str, "      E\n"),
                s(:str, "\n"),
                s(:str, "      Finished tests in 0.00\n"),
                s(:str, "\n"),
                s(:str, "        1) Error:\n"),
                s(:str, "      #<Class:0xXXX>#test_something:\n"),
                s(:str, "      RuntimeError: unhandled exception\n"),
                s(:str, "          FILE:LINE:in `teardown'\n"),
                s(:str, "\n"),
                s(:str, "      1 tests, 1 assertions, 0 failures, 1 errors, 0 skips\n")))),
          s(:send, nil, :assert_report,
            s(:lvar, :expected)))),
      s(:def, :test_run_failing,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :MiniTest), :Unit), :TestCase)),
            s(:args),
            s(:begin,
              s(:def, :test_something,
                s(:args),
                s(:send, nil, :assert,
                  s(:true))),
              s(:def, :test_failure,
                s(:args),
                s(:send, nil, :assert,
                  s(:false))))),
          s(:lvasgn, :expected,
            s(:send, nil, :clean,
              s(:dstr,
                s(:str, "      F.\n"),
                s(:str, "\n"),
                s(:str, "      Finished tests in 0.00\n"),
                s(:str, "\n"),
                s(:str, "        1) Failure:\n"),
                s(:str, "      #<Class:0xXXX>#test_failure [FILE:LINE]:\n"),
                s(:str, "      Failed assertion, no message given.\n"),
                s(:str, "\n"),
                s(:str, "      2 tests, 2 assertions, 1 failures, 0 errors, 0 skips\n")))),
          s(:send, nil, :assert_report,
            s(:lvar, :expected)))),
      s(:def, :test_run_failing_filtered,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :MiniTest), :Unit), :TestCase)),
            s(:args),
            s(:begin,
              s(:def, :test_something,
                s(:args),
                s(:send, nil, :assert,
                  s(:true))),
              s(:def, :test_failure,
                s(:args),
                s(:send, nil, :assert,
                  s(:false))))),
          s(:lvasgn, :expected,
            s(:send, nil, :clean,
              s(:dstr,
                s(:str, "      .\n"),
                s(:str, "\n"),
                s(:str, "      Finished tests in 0.00\n"),
                s(:str, "\n"),
                s(:str, "      1 tests, 1 assertions, 0 failures, 0 errors, 0 skips\n")))),
          s(:send, nil, :assert_report,
            s(:lvar, :expected),
            s(:array,
              s(:str, "--name"),
              s(:str, "/some|thing/"),
              s(:str, "--seed"),
              s(:str, "42"))))),
      s(:def, :assert_filtering,
        s(:args,
          s(:arg, :name),
          s(:arg, :expected),
          s(:optarg, :a,
            s(:false))),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :args,
              s(:array,
                s(:str, "--name"),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :name))),
                s(:str, "--seed"),
                s(:str, "42"))),
            s(:lvasgn, :alpha,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const,
                    s(:const,
                      s(:const, nil, :MiniTest), :Unit), :TestCase)),
                s(:args),
                s(:block,
                  s(:send, nil, :define_method,
                    s(:sym, :test_something)),
                  s(:args),
                  s(:send, nil, :assert,
                    s(:lvar, :a))))),
            s(:send,
              s(:const, nil, :Object), :const_set,
              s(:sym, :Alpha),
              s(:lvar, :alpha)),
            s(:lvasgn, :beta,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const,
                    s(:const,
                      s(:const, nil, :MiniTest), :Unit), :TestCase)),
                s(:args),
                s(:block,
                  s(:send, nil, :define_method,
                    s(:sym, :test_something)),
                  s(:args),
                  s(:send, nil, :assert,
                    s(:true))))),
            s(:send,
              s(:const, nil, :Object), :const_set,
              s(:sym, :Beta),
              s(:lvar, :beta)),
            s(:send, nil, :assert_report,
              s(:lvar, :expected),
              s(:lvar, :args))),
          s(:begin,
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :remove_const),
              s(:sym, :Alpha)),
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :remove_const),
              s(:sym, :Beta))))),
      s(:def, :test_run_filtered_including_suite_name,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:send, nil, :clean,
              s(:dstr,
                s(:str, "      .\n"),
                s(:str, "\n"),
                s(:str, "      Finished tests in 0.00\n"),
                s(:str, "\n"),
                s(:str, "      1 tests, 1 assertions, 0 failures, 0 errors, 0 skips\n")))),
          s(:send, nil, :assert_filtering,
            s(:str, "/Beta#test_something/"),
            s(:lvar, :expected)))),
      s(:def, :test_run_filtered_including_suite_name_string,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:send, nil, :clean,
              s(:dstr,
                s(:str, "      .\n"),
                s(:str, "\n"),
                s(:str, "      Finished tests in 0.00\n"),
                s(:str, "\n"),
                s(:str, "      1 tests, 1 assertions, 0 failures, 0 errors, 0 skips\n")))),
          s(:send, nil, :assert_filtering,
            s(:str, "Beta#test_something"),
            s(:lvar, :expected)))),
      s(:def, :test_run_filtered_string_method_only,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:send, nil, :clean,
              s(:dstr,
                s(:str, "      ..\n"),
                s(:str, "\n"),
                s(:str, "      Finished tests in 0.00\n"),
                s(:str, "\n"),
                s(:str, "      2 tests, 2 assertions, 0 failures, 0 errors, 0 skips\n")))),
          s(:send, nil, :assert_filtering,
            s(:str, "test_something"),
            s(:lvar, :expected),
            s(:sym, :pass)))),
      s(:def, :test_run_passing,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :MiniTest), :Unit), :TestCase)),
            s(:args),
            s(:def, :test_something,
              s(:args),
              s(:send, nil, :assert,
                s(:true)))),
          s(:lvasgn, :expected,
            s(:send, nil, :clean,
              s(:dstr,
                s(:str, "      .\n"),
                s(:str, "\n"),
                s(:str, "      Finished tests in 0.00\n"),
                s(:str, "\n"),
                s(:str, "      1 tests, 1 assertions, 0 failures, 0 errors, 0 skips\n")))),
          s(:send, nil, :assert_report,
            s(:lvar, :expected)))),
      s(:def, :test_run_skip,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :MiniTest), :Unit), :TestCase)),
            s(:args),
            s(:begin,
              s(:def, :test_something,
                s(:args),
                s(:send, nil, :assert,
                  s(:true))),
              s(:def, :test_skip,
                s(:args),
                s(:send, nil, :skip,
                  s(:str, "not yet"))))),
          s(:lvasgn, :expected,
            s(:send, nil, :clean,
              s(:dstr,
                s(:str, "      S.\n"),
                s(:str, "\n"),
                s(:str, "      Finished tests in 0.00\n"),
                s(:str, "\n"),
                s(:str, "      2 tests, 1 assertions, 0 failures, 0 errors, 1 skips\n")))),
          s(:send, nil, :assert_report,
            s(:lvar, :expected)))),
      s(:def, :test_run_skip_verbose,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :MiniTest), :Unit), :TestCase)),
            s(:args),
            s(:begin,
              s(:def, :test_something,
                s(:args),
                s(:send, nil, :assert,
                  s(:true))),
              s(:def, :test_skip,
                s(:args),
                s(:send, nil, :skip,
                  s(:str, "not yet"))))),
          s(:lvasgn, :expected,
            s(:send, nil, :clean,
              s(:dstr,
                s(:str, "      #<Class:0xXXX>#test_skip = 0.00 s = S\n"),
                s(:str, "      #<Class:0xXXX>#test_something = 0.00 s = .\n"),
                s(:str, "\n"),
                s(:str, "\n"),
                s(:str, "      Finished tests in 0.00\n"),
                s(:str, "\n"),
                s(:str, "        1) Skipped:\n"),
                s(:str, "      #<Class:0xXXX>#test_skip [FILE:LINE]:\n"),
                s(:str, "      not yet\n"),
                s(:str, "\n"),
                s(:str, "      2 tests, 1 assertions, 0 failures, 0 errors, 1 skips\n")))),
          s(:send, nil, :assert_report,
            s(:lvar, :expected),
            s(:array,
              s(:str, "--seed"),
              s(:str, "42"),
              s(:str, "--verbose"))))),
      s(:def, :test_run_with_other_runner,
        s(:args),
        s(:begin,
          s(:send,
            s(:const,
              s(:const, nil, :MiniTest), :Unit), :runner=,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const,
                    s(:const, nil, :MiniTest), :Unit)),
                s(:args),
                s(:def, :_run_suite,
                  s(:args,
                    s(:arg, :suite),
                    s(:arg, :type)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :suite), :before_suite),
                    s(:super,
                      s(:lvar, :suite),
                      s(:lvar, :type))))), :new)),
          s(:block,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :MiniTest), :Unit), :TestCase)),
            s(:args),
            s(:begin,
              s(:defs,
                s(:self), :name,
                s(:args),
                s(:str, "wacky!")),
              s(:defs,
                s(:self), :before_suite,
                s(:args),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :MiniTest), :Unit), :output), :puts,
                    s(:dstr,
                      s(:str, "Running "),
                      s(:begin,
                        s(:send,
                          s(:self), :name)),
                      s(:str, " tests"))),
                  s(:cvasgn, :@@foo,
                    s(:int, 1)))),
              s(:def, :test_something,
                s(:args),
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:cvar, :@@foo))),
              s(:def, :test_something_else,
                s(:args),
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:cvar, :@@foo))))),
          s(:lvasgn, :expected,
            s(:send, nil, :clean,
              s(:dstr,
                s(:str, "      Running wacky! tests\n"),
                s(:str, "      ..\n"),
                s(:str, "\n"),
                s(:str, "      Finished tests in 0.00\n"),
                s(:str, "\n"),
                s(:str, "      2 tests, 2 assertions, 0 failures, 0 errors, 0 skips\n")))),
          s(:send, nil, :assert_report,
            s(:lvar, :expected)))),
      s(:send, nil, :require,
        s(:str, "monitor")),
      s(:class,
        s(:const, nil, :Latch), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:optarg, :count,
                s(:int, 1))),
            s(:begin,
              s(:ivasgn, :@count,
                s(:lvar, :count)),
              s(:ivasgn, :@lock,
                s(:send,
                  s(:const, nil, :Monitor), :new)),
              s(:ivasgn, :@cv,
                s(:send,
                  s(:ivar, :@lock), :new_cond)))),
          s(:def, :release,
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@lock), :synchronize),
              s(:args),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:ivar, :@count), :>,
                    s(:int, 0)),
                  s(:op_asgn,
                    s(:ivasgn, :@count), :-,
                    s(:int, 1)), nil),
                s(:if,
                  s(:send,
                    s(:ivar, :@count), :==,
                    s(:int, 0)),
                  s(:send,
                    s(:ivar, :@cv), :broadcast), nil)))),
          s(:def, :await,
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@lock), :synchronize),
              s(:args),
              s(:block,
                s(:send,
                  s(:ivar, :@cv), :wait_while),
                s(:args),
                s(:send,
                  s(:ivar, :@count), :>,
                  s(:int, 0))))))))),
  s(:class,
    s(:const, nil, :TestMiniTestUnitOrder),
    s(:const, nil, :MetaMetaMetaTestCase),
    s(:begin,
      s(:def, :test_before_setup,
        s(:args),
        s(:begin,
          s(:lvasgn, :call_order,
            s(:array)),
          s(:block,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :MiniTest), :Unit), :TestCase)),
            s(:args),
            s(:begin,
              s(:block,
                s(:send, nil, :define_method,
                  s(:sym, :setup)),
                s(:args),
                s(:begin,
                  s(:super),
                  s(:send,
                    s(:lvar, :call_order), :<<,
                    s(:sym, :setup)))),
              s(:block,
                s(:send, nil, :define_method,
                  s(:sym, :before_setup)),
                s(:args),
                s(:send,
                  s(:lvar, :call_order), :<<,
                  s(:sym, :before_setup))),
              s(:def, :test_omg,
                s(:args),
                s(:send, nil, :assert,
                  s(:true))))),
          s(:block,
            s(:send, nil, :with_output),
            s(:args),
            s(:send,
              s(:ivar, :@tu), :run,
              s(:array,
                s(:str, "--seed"),
                s(:str, "42")))),
          s(:lvasgn, :expected,
            s(:array,
              s(:sym, :before_setup),
              s(:sym, :setup))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :call_order)))),
      s(:def, :test_after_teardown,
        s(:args),
        s(:begin,
          s(:lvasgn, :call_order,
            s(:array)),
          s(:block,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :MiniTest), :Unit), :TestCase)),
            s(:args),
            s(:begin,
              s(:block,
                s(:send, nil, :define_method,
                  s(:sym, :teardown)),
                s(:args),
                s(:begin,
                  s(:super),
                  s(:send,
                    s(:lvar, :call_order), :<<,
                    s(:sym, :teardown)))),
              s(:block,
                s(:send, nil, :define_method,
                  s(:sym, :after_teardown)),
                s(:args),
                s(:send,
                  s(:lvar, :call_order), :<<,
                  s(:sym, :after_teardown))),
              s(:def, :test_omg,
                s(:args),
                s(:send, nil, :assert,
                  s(:true))))),
          s(:block,
            s(:send, nil, :with_output),
            s(:args),
            s(:send,
              s(:ivar, :@tu), :run,
              s(:array,
                s(:str, "--seed"),
                s(:str, "42")))),
          s(:lvasgn, :expected,
            s(:array,
              s(:sym, :teardown),
              s(:sym, :after_teardown))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :call_order)))),
      s(:def, :test_all_teardowns_are_guaranteed_to_run,
        s(:args),
        s(:begin,
          s(:lvasgn, :call_order,
            s(:array)),
          s(:block,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :MiniTest), :Unit), :TestCase)),
            s(:args),
            s(:begin,
              s(:block,
                s(:send, nil, :define_method,
                  s(:sym, :after_teardown)),
                s(:args),
                s(:begin,
                  s(:super),
                  s(:send,
                    s(:lvar, :call_order), :<<,
                    s(:sym, :after_teardown)),
                  s(:send, nil, :raise))),
              s(:block,
                s(:send, nil, :define_method,
                  s(:sym, :teardown)),
                s(:args),
                s(:begin,
                  s(:super),
                  s(:send,
                    s(:lvar, :call_order), :<<,
                    s(:sym, :teardown)),
                  s(:send, nil, :raise))),
              s(:block,
                s(:send, nil, :define_method,
                  s(:sym, :before_teardown)),
                s(:args),
                s(:begin,
                  s(:super),
                  s(:send,
                    s(:lvar, :call_order), :<<,
                    s(:sym, :before_teardown)),
                  s(:send, nil, :raise))),
              s(:def, :test_omg,
                s(:args),
                s(:send, nil, :assert,
                  s(:true))))),
          s(:block,
            s(:send, nil, :with_output),
            s(:args),
            s(:send,
              s(:ivar, :@tu), :run,
              s(:array,
                s(:str, "--seed"),
                s(:str, "42")))),
          s(:lvasgn, :expected,
            s(:array,
              s(:sym, :before_teardown),
              s(:sym, :teardown),
              s(:sym, :after_teardown))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :call_order)))),
      s(:def, :test_setup_and_teardown_survive_inheritance,
        s(:args),
        s(:begin,
          s(:lvasgn, :call_order,
            s(:array)),
          s(:lvasgn, :parent,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:const,
                  s(:const,
                    s(:const, nil, :MiniTest), :Unit), :TestCase)),
              s(:args),
              s(:begin,
                s(:block,
                  s(:send, nil, :define_method,
                    s(:sym, :setup)),
                  s(:args),
                  s(:send,
                    s(:lvar, :call_order), :<<,
                    s(:sym, :setup_method))),
                s(:block,
                  s(:send, nil, :define_method,
                    s(:sym, :teardown)),
                  s(:args),
                  s(:send,
                    s(:lvar, :call_order), :<<,
                    s(:sym, :teardown_method))),
                s(:block,
                  s(:send, nil, :define_method,
                    s(:sym, :test_something)),
                  s(:args),
                  s(:send,
                    s(:lvar, :call_order), :<<,
                    s(:sym, :test)))))),
          s(:lvasgn, :_,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :parent))),
          s(:block,
            s(:send, nil, :with_output),
            s(:args),
            s(:send,
              s(:ivar, :@tu), :run,
              s(:array,
                s(:str, "--seed"),
                s(:str, "42")))),
          s(:lvasgn, :expected,
            s(:send,
              s(:array,
                s(:sym, :setup_method),
                s(:sym, :test),
                s(:sym, :teardown_method)), :*,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :call_order)))))),
  s(:class,
    s(:const, nil, :TestMiniTestUnitTestCase),
    s(:const,
      s(:const,
        s(:const, nil, :MiniTest), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :RUBY18,
        s(:send,
          s(:defined?,
            s(:const, nil, :Encoding)), :!)),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :MiniTest), :Unit), :TestCase), :reset),
          s(:ivasgn, :@tc,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :MiniTest), :Unit), :TestCase), :new,
              s(:str, "fake tc"))),
          s(:ivasgn, :@zomg,
            s(:str, "zomg ponies!")),
          s(:ivasgn, :@assertion_count,
            s(:int, 1)))),
      s(:def, :teardown,
        s(:args),
        s(:if,
          s(:send,
            s(:ivar, :@tc), :passed?),
          s(:send, nil, :assert_equal,
            s(:ivar, :@assertion_count),
            s(:send,
              s(:ivar, :@tc), :_assertions),
            s(:dstr,
              s(:str, "expected "),
              s(:begin,
                s(:ivar, :@assertion_count)),
              s(:str, " assertions to be fired during the test, not "),
              s(:begin,
                s(:send,
                  s(:ivar, :@tc), :_assertions)))), nil)),
      s(:def, :non_verbose,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :orig_verbose,
              s(:gvar, :$VERBOSE)),
            s(:gvasgn, :$VERBOSE,
              s(:false)),
            s(:yield)),
          s(:gvasgn, :$VERBOSE,
            s(:lvar, :orig_verbose)))),
      s(:def, :test_assert,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:send,
            s(:ivar, :@tc), :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@tc), :assert,
              s(:true)),
            s(:str, "returns true on success")))),
      s(:def, :test_assert__triggered,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Failed assertion, no message given.")),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :assert,
            s(:false)))),
      s(:def, :test_assert__triggered_message,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:ivar, :@zomg)),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :assert,
            s(:false),
            s(:ivar, :@zomg)))),
      s(:def, :test_assert_empty,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:send,
            s(:ivar, :@tc), :assert_empty,
            s(:array)))),
      s(:def, :test_assert_empty_triggered,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:str, "Expected [1] to be empty.")),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :assert_empty,
              s(:array,
                s(:int, 1)))))),
      s(:def, :test_assert_equal,
        s(:args),
        s(:send,
          s(:ivar, :@tc), :assert_equal,
          s(:int, 1),
          s(:int, 1))),
      s(:def, :test_assert_equal_different_collection_array_hex_invisible,
        s(:args),
        s(:begin,
          s(:lvasgn, :object1,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :object2,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :msg,
            s(:send,
              s(:dstr,
                s(:str, "No visible difference in the Array#inspect output.\n"),
                s(:str, "           You should look at the implementation of #== on Array or its members.\n"),
                s(:str, "           [#<Object:0xXXXXXX>]")), :gsub,
              s(:regexp,
                s(:str, "^ +"),
                s(:regopt)),
              s(:str, ""))),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:lvar, :msg)),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :assert_equal,
              s(:array,
                s(:lvar, :object1)),
              s(:array,
                s(:lvar, :object2)))))),
      s(:def, :test_assert_equal_different_collection_hash_hex_invisible,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :h1),
              s(:lvasgn, :h2)),
            s(:array,
              s(:hash),
              s(:hash))),
          s(:send,
            s(:lvar, :h1), :[]=,
            s(:int, 1),
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send,
            s(:lvar, :h2), :[]=,
            s(:int, 1),
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :msg,
            s(:send,
              s(:dstr,
                s(:str, "No visible difference in the Hash#inspect output.\n"),
                s(:str, "           You should look at the implementation of #== on Hash or its members.\n"),
                s(:str, "           {1=>#<Object:0xXXXXXX>}")), :gsub,
              s(:regexp,
                s(:str, "^ +"),
                s(:regopt)),
              s(:str, ""))),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:lvar, :msg)),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :assert_equal,
              s(:lvar, :h1),
              s(:lvar, :h2))))),
      s(:def, :test_assert_equal_different_diff_deactivated,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :maglev?),
            s(:send, nil, :skip,
              s(:str, "https://github.com/MagLev/maglev/issues/209")), nil),
          s(:block,
            s(:send, nil, :without_diff),
            s(:args),
            s(:block,
              s(:send, nil, :util_assert_triggered,
                s(:send, nil, :util_msg,
                  s(:send,
                    s(:str, "haha"), :*,
                    s(:int, 10)),
                  s(:send,
                    s(:str, "blah"), :*,
                    s(:int, 10)))),
              s(:args),
              s(:begin,
                s(:lvasgn, :o1,
                  s(:send,
                    s(:str, "haha"), :*,
                    s(:int, 10))),
                s(:lvasgn, :o2,
                  s(:send,
                    s(:str, "blah"), :*,
                    s(:int, 10))),
                s(:send,
                  s(:ivar, :@tc), :assert_equal,
                  s(:lvar, :o1),
                  s(:lvar, :o2))))))),
      s(:def, :test_assert_equal_different_hex,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:def, :initialize,
                s(:args,
                  s(:arg, :s)),
                s(:ivasgn, :@name,
                  s(:lvar, :s))))),
          s(:lvasgn, :o1,
            s(:send,
              s(:lvar, :c), :new,
              s(:str, "a"))),
          s(:lvasgn, :o2,
            s(:send,
              s(:lvar, :c), :new,
              s(:str, "b"))),
          s(:lvasgn, :msg,
            s(:send,
              s(:dstr,
                s(:str, "--- expected\n"),
                s(:str, "           +++ actual\n"),
                s(:str, "           @@ -1 +1 @@\n"),
                s(:str, "           -#<#<Class:0xXXXXXX>:0xXXXXXX @name=\"a\">\n"),
                s(:str, "           +#<#<Class:0xXXXXXX>:0xXXXXXX @name=\"b\">\n"),
                s(:str, "           ")), :gsub,
              s(:regexp,
                s(:str, "^ +"),
                s(:regopt)),
              s(:str, ""))),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:lvar, :msg)),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :assert_equal,
              s(:lvar, :o1),
              s(:lvar, :o2))))),
      s(:def, :test_assert_equal_different_hex_invisible,
        s(:args),
        s(:begin,
          s(:lvasgn, :o1,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :o2,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :msg,
            s(:send,
              s(:dstr,
                s(:str, "No visible difference in the Object#inspect output.\n"),
                s(:str, "           You should look at the implementation of #== on Object or its members.\n"),
                s(:str, "           #<Object:0xXXXXXX>")), :gsub,
              s(:regexp,
                s(:str, "^ +"),
                s(:regopt)),
              s(:str, ""))),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:lvar, :msg)),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :assert_equal,
              s(:lvar, :o1),
              s(:lvar, :o2))))),
      s(:def, :test_assert_equal_different_long,
        s(:args),
        s(:begin,
          s(:lvasgn, :msg,
            s(:send,
              s(:dstr,
                s(:str, "--- expected\n"),
                s(:str, "           +++ actual\n"),
                s(:str, "           @@ -1 +1 @@\n"),
                s(:str, "           -\"hahahahahahahahahahahahahahahahahahahaha\"\n"),
                s(:str, "           +\"blahblahblahblahblahblahblahblahblahblah\"\n"),
                s(:str, "           ")), :gsub,
              s(:regexp,
                s(:str, "^ +"),
                s(:regopt)),
              s(:str, ""))),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:lvar, :msg)),
            s(:args),
            s(:begin,
              s(:lvasgn, :o1,
                s(:send,
                  s(:str, "haha"), :*,
                  s(:int, 10))),
              s(:lvasgn, :o2,
                s(:send,
                  s(:str, "blah"), :*,
                  s(:int, 10))),
              s(:send,
                s(:ivar, :@tc), :assert_equal,
                s(:lvar, :o1),
                s(:lvar, :o2)))))),
      s(:def, :test_assert_equal_different_long_invisible,
        s(:args),
        s(:begin,
          s(:lvasgn, :msg,
            s(:send,
              s(:dstr,
                s(:str, "No visible difference in the String#inspect output.\n"),
                s(:str, "           You should look at the implementation of #== on String or its members.\n"),
                s(:str, "           \"blahblahblahblahblahblahblahblahblahblah\"")), :gsub,
              s(:regexp,
                s(:str, "^ +"),
                s(:regopt)),
              s(:str, ""))),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:lvar, :msg)),
            s(:args),
            s(:begin,
              s(:lvasgn, :o1,
                s(:send,
                  s(:str, "blah"), :*,
                  s(:int, 10))),
              s(:lvasgn, :o2,
                s(:send,
                  s(:str, "blah"), :*,
                  s(:int, 10))),
              s(:defs,
                s(:lvar, :o1), :==,
                s(:args,
                  s(:arg, :o)),
                s(:false)),
              s(:send,
                s(:ivar, :@tc), :assert_equal,
                s(:lvar, :o1),
                s(:lvar, :o2)))))),
      s(:def, :test_assert_equal_different_long_msg,
        s(:args),
        s(:begin,
          s(:lvasgn, :msg,
            s(:send,
              s(:dstr,
                s(:str, "message.\n"),
                s(:str, "           --- expected\n"),
                s(:str, "           +++ actual\n"),
                s(:str, "           @@ -1 +1 @@\n"),
                s(:str, "           -\"hahahahahahahahahahahahahahahahahahahaha\"\n"),
                s(:str, "           +\"blahblahblahblahblahblahblahblahblahblah\"\n"),
                s(:str, "           ")), :gsub,
              s(:regexp,
                s(:str, "^ +"),
                s(:regopt)),
              s(:str, ""))),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:lvar, :msg)),
            s(:args),
            s(:begin,
              s(:lvasgn, :o1,
                s(:send,
                  s(:str, "haha"), :*,
                  s(:int, 10))),
              s(:lvasgn, :o2,
                s(:send,
                  s(:str, "blah"), :*,
                  s(:int, 10))),
              s(:send,
                s(:ivar, :@tc), :assert_equal,
                s(:lvar, :o1),
                s(:lvar, :o2),
                s(:str, "message")))))),
      s(:def, :test_assert_equal_different_short,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:send, nil, :util_msg,
              s(:int, 1),
              s(:int, 2))),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :assert_equal,
            s(:int, 1),
            s(:int, 2)))),
      s(:def, :test_assert_equal_different_short_msg,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:send, nil, :util_msg,
              s(:int, 1),
              s(:int, 2),
              s(:str, "message"))),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :assert_equal,
            s(:int, 1),
            s(:int, 2),
            s(:str, "message")))),
      s(:def, :test_assert_equal_different_short_multiline,
        s(:args),
        s(:begin,
          s(:lvasgn, :msg,
            s(:str, "--- expected\n+++ actual\n@@ -1,2 +1,2 @@\n \"a\n-b\"\n+c\"\n")),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:lvar, :msg)),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :assert_equal,
              s(:str, "a\nb"),
              s(:str, "a\nc"))))),
      s(:def, :test_assert_in_delta,
        s(:args),
        s(:send,
          s(:ivar, :@tc), :assert_in_delta,
          s(:float, 0.0),
          s(:send,
            s(:float, 1.0), :/,
            s(:int, 1000)),
          s(:float, 0.1))),
      s(:def, :test_delta_consistency,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@tc), :assert_in_delta,
            s(:int, 0),
            s(:int, 1),
            s(:int, 1)),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:str, "Expected |0 - 1| (1) to not be <= 1.")),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :refute_in_delta,
              s(:int, 0),
              s(:int, 1),
              s(:int, 1))))),
      s(:def, :test_assert_in_delta_triggered,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:if,
              s(:send, nil, :maglev?),
              s(:str, "9.999999xxxe-07"),
              s(:str, "1.0e-06"))),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:dstr,
                s(:str, "Expected |0.0 - 0.001| (0.001) to be <= "),
                s(:begin,
                  s(:lvar, :x)),
                s(:str, "."))),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :assert_in_delta,
              s(:float, 0.0),
              s(:send,
                s(:float, 1.0), :/,
                s(:int, 1000)),
              s(:float, 1.0e-06))))),
      s(:def, :test_assert_in_epsilon,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 10)),
          s(:send,
            s(:ivar, :@tc), :assert_in_epsilon,
            s(:int, 10000),
            s(:int, 9991)),
          s(:send,
            s(:ivar, :@tc), :assert_in_epsilon,
            s(:int, 9991),
            s(:int, 10000)),
          s(:send,
            s(:ivar, :@tc), :assert_in_epsilon,
            s(:float, 1.0),
            s(:float, 1.001)),
          s(:send,
            s(:ivar, :@tc), :assert_in_epsilon,
            s(:float, 1.001),
            s(:float, 1.0)),
          s(:send,
            s(:ivar, :@tc), :assert_in_epsilon,
            s(:int, 10000),
            s(:float, 9999.1),
            s(:float, 0.0001)),
          s(:send,
            s(:ivar, :@tc), :assert_in_epsilon,
            s(:float, 9999.1),
            s(:int, 10000),
            s(:float, 0.0001)),
          s(:send,
            s(:ivar, :@tc), :assert_in_epsilon,
            s(:float, 1.0),
            s(:float, 1.0001),
            s(:float, 0.0001)),
          s(:send,
            s(:ivar, :@tc), :assert_in_epsilon,
            s(:float, 1.0001),
            s(:float, 1.0),
            s(:float, 0.0001)),
          s(:send,
            s(:ivar, :@tc), :assert_in_epsilon,
            s(:int, -1),
            s(:int, -1)),
          s(:send,
            s(:ivar, :@tc), :assert_in_epsilon,
            s(:int, -10000),
            s(:int, -9991)))),
      s(:def, :test_epsilon_consistency,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@tc), :assert_in_epsilon,
            s(:float, 1.0),
            s(:float, 1.001)),
          s(:lvasgn, :msg,
            s(:str, "Expected |1.0 - 1.001| (0.000999xxx) to not be <= 0.001.")),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:lvar, :msg)),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :refute_in_epsilon,
              s(:float, 1.0),
              s(:float, 1.001))))),
      s(:def, :test_assert_in_epsilon_triggered,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Expected |10000 - 9990| (10) to be <= 9.99.")),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :assert_in_epsilon,
            s(:int, 10000),
            s(:int, 9990)))),
      s(:def, :test_assert_in_epsilon_triggered_negative_case,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:if,
              s(:begin,
                s(:and,
                  s(:const, nil, :RUBY18),
                  s(:send,
                    s(:send, nil, :maglev?), :!))),
              s(:str, "0.1"),
              s(:str, "0.100000xxx"))),
          s(:lvasgn, :y,
            s(:if,
              s(:send, nil, :maglev?),
              s(:str, "0.100000xxx"),
              s(:str, "0.1"))),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:dstr,
                s(:str, "Expected |-1.1 - -1| ("),
                s(:begin,
                  s(:lvar, :x)),
                s(:str, ") to be <= "),
                s(:begin,
                  s(:lvar, :y)),
                s(:str, "."))),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :assert_in_epsilon,
              s(:float, -1.1),
              s(:int, -1),
              s(:float, 0.1))))),
      s(:def, :test_assert_includes,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:send,
            s(:ivar, :@tc), :assert_includes,
            s(:array,
              s(:true)),
            s(:true)))),
      s(:def, :test_assert_includes_triggered,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 3)),
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:ivar, :@tc), :assert_raises,
                s(:const,
                  s(:const, nil, :MiniTest), :Assertion)),
              s(:args),
              s(:send,
                s(:ivar, :@tc), :assert_includes,
                s(:array,
                  s(:true)),
                s(:false)))),
          s(:lvasgn, :expected,
            s(:str, "Expected [true] to include false.")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_assert_instance_of,
        s(:args),
        s(:send,
          s(:ivar, :@tc), :assert_instance_of,
          s(:const, nil, :String),
          s(:str, "blah"))),
      s(:def, :test_assert_instance_of_triggered,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Expected \"blah\" to be an instance of Array, not String.")),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :assert_instance_of,
            s(:const, nil, :Array),
            s(:str, "blah")))),
      s(:def, :test_assert_kind_of,
        s(:args),
        s(:send,
          s(:ivar, :@tc), :assert_kind_of,
          s(:const, nil, :String),
          s(:str, "blah"))),
      s(:def, :test_assert_kind_of_triggered,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Expected \"blah\" to be a kind of Array, not String.")),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :assert_kind_of,
            s(:const, nil, :Array),
            s(:str, "blah")))),
      s(:def, :test_assert_match,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:send,
            s(:ivar, :@tc), :assert_match,
            s(:regexp,
              s(:str, "\\w+"),
              s(:regopt)),
            s(:str, "blah blah blah")))),
      s(:def, :test_assert_match_matcher_object,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:lvasgn, :pattern,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :pattern), :=~,
            s(:args,
              s(:arg, :other)),
            s(:true)),
          s(:send,
            s(:ivar, :@tc), :assert_match,
            s(:lvar, :pattern),
            s(:int, 5)))),
      s(:def, :test_assert_match_matchee_to_str,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :obj), :to_str,
            s(:args),
            s(:str, "blah")),
          s(:send,
            s(:ivar, :@tc), :assert_match,
            s(:str, "blah"),
            s(:lvar, :obj)))),
      s(:def, :test_assert_match_object_triggered,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:lvasgn, :pattern,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :pattern), :=~,
            s(:args,
              s(:arg, :other)),
            s(:false)),
          s(:defs,
            s(:lvar, :pattern), :inspect,
            s(:args),
            s(:str, "[Object]")),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:str, "Expected [Object] to match 5.")),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :assert_match,
              s(:lvar, :pattern),
              s(:int, 5))))),
      s(:def, :test_assert_match_triggered,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:str, "Expected /\\d+/ to match \"blah blah blah\".")),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :assert_match,
              s(:regexp,
                s(:str, "\\d+"),
                s(:regopt)),
              s(:str, "blah blah blah"))))),
      s(:def, :test_assert_nil,
        s(:args),
        s(:send,
          s(:ivar, :@tc), :assert_nil,
          s(:nil))),
      s(:def, :test_assert_nil_triggered,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Expected 42 to be nil.")),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :assert_nil,
            s(:int, 42)))),
      s(:def, :test_assert_operator,
        s(:args),
        s(:send,
          s(:ivar, :@tc), :assert_operator,
          s(:int, 2),
          s(:sym, :>),
          s(:int, 1))),
      s(:def, :test_assert_operator_bad_object,
        s(:args),
        s(:begin,
          s(:lvasgn, :bad,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :bad), :==,
            s(:args,
              s(:arg, :other)),
            s(:true)),
          s(:send,
            s(:ivar, :@tc), :assert_operator,
            s(:lvar, :bad),
            s(:sym, :equal?),
            s(:lvar, :bad)))),
      s(:def, :test_assert_operator_triggered,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Expected 2 to be < 1.")),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :assert_operator,
            s(:int, 2),
            s(:sym, :<),
            s(:int, 1)))),
      s(:def, :test_assert_output_both,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:block,
            s(:send,
              s(:ivar, :@tc), :assert_output,
              s(:str, "yay"),
              s(:str, "blah")),
            s(:args),
            s(:begin,
              s(:send, nil, :print,
                s(:str, "yay")),
              s(:send,
                s(:gvar, :$stderr), :print,
                s(:str, "blah")))))),
      s(:def, :test_assert_output_both_regexps,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 4)),
          s(:block,
            s(:send,
              s(:ivar, :@tc), :assert_output,
              s(:regexp,
                s(:str, "y.y"),
                s(:regopt)),
              s(:regexp,
                s(:str, "bl.h"),
                s(:regopt))),
            s(:args),
            s(:begin,
              s(:send, nil, :print,
                s(:str, "yay")),
              s(:send,
                s(:gvar, :$stderr), :print,
                s(:str, "blah")))))),
      s(:def, :test_assert_output_err,
        s(:args),
        s(:block,
          s(:send,
            s(:ivar, :@tc), :assert_output,
            s(:nil),
            s(:str, "blah")),
          s(:args),
          s(:send,
            s(:gvar, :$stderr), :print,
            s(:str, "blah")))),
      s(:def, :test_assert_output_neither,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:ivar, :@tc), :assert_output),
            s(:args), nil))),
      s(:def, :test_assert_output_out,
        s(:args),
        s(:block,
          s(:send,
            s(:ivar, :@tc), :assert_output,
            s(:str, "blah")),
          s(:args),
          s(:send, nil, :print,
            s(:str, "blah")))),
      s(:def, :test_assert_output_triggered_both,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:send, nil, :util_msg,
              s(:str, "blah"),
              s(:str, "blah blah"),
              s(:str, "In stderr"))),
          s(:args),
          s(:block,
            s(:send,
              s(:ivar, :@tc), :assert_output,
              s(:str, "yay"),
              s(:str, "blah")),
            s(:args),
            s(:begin,
              s(:send, nil, :print,
                s(:str, "boo")),
              s(:send,
                s(:gvar, :$stderr), :print,
                s(:str, "blah blah")))))),
      s(:def, :test_assert_output_triggered_err,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:send, nil, :util_msg,
              s(:str, "blah"),
              s(:str, "blah blah"),
              s(:str, "In stderr"))),
          s(:args),
          s(:block,
            s(:send,
              s(:ivar, :@tc), :assert_output,
              s(:nil),
              s(:str, "blah")),
            s(:args),
            s(:send,
              s(:gvar, :$stderr), :print,
              s(:str, "blah blah"))))),
      s(:def, :test_assert_output_triggered_out,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:send, nil, :util_msg,
              s(:str, "blah"),
              s(:str, "blah blah"),
              s(:str, "In stdout"))),
          s(:args),
          s(:block,
            s(:send,
              s(:ivar, :@tc), :assert_output,
              s(:str, "blah")),
            s(:args),
            s(:send, nil, :print,
              s(:str, "blah blah"))))),
      s(:def, :test_assert_predicate,
        s(:args),
        s(:send,
          s(:ivar, :@tc), :assert_predicate,
          s(:str, ""),
          s(:sym, :empty?))),
      s(:def, :test_assert_predicate_triggered,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Expected \"blah\" to be empty?.")),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :assert_predicate,
            s(:str, "blah"),
            s(:sym, :empty?)))),
      s(:def, :test_assert_raises,
        s(:args),
        s(:block,
          s(:send,
            s(:ivar, :@tc), :assert_raises,
            s(:const, nil, :RuntimeError)),
          s(:args),
          s(:send, nil, :raise,
            s(:str, "blah")))),
      s(:def, :test_assert_raises_module,
        s(:args),
        s(:block,
          s(:send,
            s(:ivar, :@tc), :assert_raises,
            s(:const, nil, :MyModule)),
          s(:args),
          s(:send, nil, :raise,
            s(:const, nil, :AnError)))),
      s(:def, :test_assert_raises_skip,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 0)),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:str, "skipped"),
              s(:const,
                s(:const, nil, :MiniTest), :Skip)),
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@tc), :assert_raises,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :raise,
                    s(:str, "blah")),
                  s(:resbody, nil, nil,
                    s(:send, nil, :skip,
                      s(:str, "skipped"))), nil)))))),
      s(:def, :test_assert_raises_triggered_different,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :MiniTest), :Assertion)),
              s(:args),
              s(:block,
                s(:send,
                  s(:ivar, :@tc), :assert_raises,
                  s(:const, nil, :RuntimeError)),
                s(:args),
                s(:send, nil, :raise,
                  s(:const, nil, :SyntaxError),
                  s(:str, "icky"))))),
          s(:lvasgn, :expected,
            s(:send, nil, :clean,
              s(:send,
                s(:dstr,
                  s(:str, "      [RuntimeError] exception expected, not\n"),
                  s(:str, "      Class: <SyntaxError>\n"),
                  s(:str, "      Message: <\"icky\">\n"),
                  s(:str, "      ---Backtrace---\n"),
                  s(:str, "      FILE:LINE:in `test_assert_raises_triggered_different'\n"),
                  s(:str, "      ---------------\n")), :chomp))),
          s(:lvasgn, :actual,
            s(:send,
              s(:send,
                s(:lvar, :e), :message), :gsub,
              s(:regexp,
                s(:str, "^.+:\\d+"),
                s(:regopt)),
              s(:str, "FILE:LINE"))),
          s(:if,
            s(:send,
              s(:const, nil, :RUBY_VERSION), :>=,
              s(:str, "1.9.0")),
            s(:send,
              s(:lvar, :actual), :gsub!,
              s(:regexp,
                s(:str, "block \\(\\d+ levels\\) in "),
                s(:regopt)),
              s(:str, "")), nil),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :actual)))),
      s(:def, :test_assert_raises_triggered_different_msg,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :MiniTest), :Assertion)),
              s(:args),
              s(:block,
                s(:send,
                  s(:ivar, :@tc), :assert_raises,
                  s(:const, nil, :RuntimeError),
                  s(:str, "XXX")),
                s(:args),
                s(:send, nil, :raise,
                  s(:const, nil, :SyntaxError),
                  s(:str, "icky"))))),
          s(:lvasgn, :expected,
            s(:send, nil, :clean,
              s(:dstr,
                s(:str, "      XXX.\n"),
                s(:str, "      [RuntimeError] exception expected, not\n"),
                s(:str, "      Class: <SyntaxError>\n"),
                s(:str, "      Message: <\"icky\">\n"),
                s(:str, "      ---Backtrace---\n"),
                s(:str, "      FILE:LINE:in `test_assert_raises_triggered_different_msg'\n"),
                s(:str, "      ---------------\n")))),
          s(:lvasgn, :actual,
            s(:send,
              s(:send,
                s(:lvar, :e), :message), :gsub,
              s(:regexp,
                s(:str, "^.+:\\d+"),
                s(:regopt)),
              s(:str, "FILE:LINE"))),
          s(:if,
            s(:send,
              s(:const, nil, :RUBY_VERSION), :>=,
              s(:str, "1.9.0")),
            s(:send,
              s(:lvar, :actual), :gsub!,
              s(:regexp,
                s(:str, "block \\(\\d+ levels\\) in "),
                s(:regopt)),
              s(:str, "")), nil),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :expected), :chomp),
            s(:lvar, :actual)))),
      s(:def, :test_assert_raises_triggered_none,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :MiniTest), :Assertion)),
              s(:args),
              s(:block,
                s(:send,
                  s(:ivar, :@tc), :assert_raises,
                  s(:const,
                    s(:const, nil, :MiniTest), :Assertion)),
                s(:args), nil))),
          s(:lvasgn, :expected,
            s(:str, "MiniTest::Assertion expected but nothing was raised.")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_assert_raises_triggered_none_msg,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :MiniTest), :Assertion)),
              s(:args),
              s(:block,
                s(:send,
                  s(:ivar, :@tc), :assert_raises,
                  s(:const,
                    s(:const, nil, :MiniTest), :Assertion),
                  s(:str, "XXX")),
                s(:args), nil))),
          s(:lvasgn, :expected,
            s(:str, "XXX.\nMiniTest::Assertion expected but nothing was raised.")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_assert_raises_triggered_subclass,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :MiniTest), :Assertion)),
              s(:args),
              s(:block,
                s(:send,
                  s(:ivar, :@tc), :assert_raises,
                  s(:const, nil, :StandardError)),
                s(:args),
                s(:send, nil, :raise,
                  s(:const, nil, :AnError))))),
          s(:lvasgn, :expected,
            s(:send, nil, :clean,
              s(:send,
                s(:dstr,
                  s(:str, "      [StandardError] exception expected, not\n"),
                  s(:str, "      Class: <AnError>\n"),
                  s(:str, "      Message: <\"AnError\">\n"),
                  s(:str, "      ---Backtrace---\n"),
                  s(:str, "      FILE:LINE:in `test_assert_raises_triggered_subclass'\n"),
                  s(:str, "      ---------------\n")), :chomp))),
          s(:lvasgn, :actual,
            s(:send,
              s(:send,
                s(:lvar, :e), :message), :gsub,
              s(:regexp,
                s(:str, "^.+:\\d+"),
                s(:regopt)),
              s(:str, "FILE:LINE"))),
          s(:if,
            s(:send,
              s(:const, nil, :RUBY_VERSION), :>=,
              s(:str, "1.9.0")),
            s(:send,
              s(:lvar, :actual), :gsub!,
              s(:regexp,
                s(:str, "block \\(\\d+ levels\\) in "),
                s(:regopt)),
              s(:str, "")), nil),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :actual)))),
      s(:def, :test_assert_respond_to,
        s(:args),
        s(:send,
          s(:ivar, :@tc), :assert_respond_to,
          s(:str, "blah"),
          s(:sym, :empty?))),
      s(:def, :test_assert_respond_to_triggered,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Expected \"blah\" (String) to respond to #rawr!.")),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :assert_respond_to,
            s(:str, "blah"),
            s(:sym, :rawr!)))),
      s(:def, :test_assert_same,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 3)),
          s(:lvasgn, :o,
            s(:str, "blah")),
          s(:send,
            s(:ivar, :@tc), :assert_same,
            s(:int, 1),
            s(:int, 1)),
          s(:send,
            s(:ivar, :@tc), :assert_same,
            s(:sym, :blah),
            s(:sym, :blah)),
          s(:send,
            s(:ivar, :@tc), :assert_same,
            s(:lvar, :o),
            s(:lvar, :o)))),
      s(:def, :test_assert_same_triggered,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:str, "Expected 2 (oid=N) to be the same as 1 (oid=N).")),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :assert_same,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :s1,
            s(:str, "blah")),
          s(:lvasgn, :s2,
            s(:str, "blah")),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:str, "Expected \"blah\" (oid=N) to be the same as \"blah\" (oid=N).")),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :assert_same,
              s(:lvar, :s1),
              s(:lvar, :s2))))),
      s(:def, :test_assert_send,
        s(:args),
        s(:send,
          s(:ivar, :@tc), :assert_send,
          s(:array,
            s(:int, 1),
            s(:sym, :<),
            s(:int, 2)))),
      s(:def, :test_assert_send_bad,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Expected 1.>(*[2]) to return true.")),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :assert_send,
            s(:array,
              s(:int, 1),
              s(:sym, :>),
              s(:int, 2))))),
      s(:def, :test_assert_silent,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:block,
            s(:send,
              s(:ivar, :@tc), :assert_silent),
            s(:args), nil))),
      s(:def, :test_assert_silent_triggered_err,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:send, nil, :util_msg,
              s(:str, ""),
              s(:str, "blah blah"),
              s(:str, "In stderr"))),
          s(:args),
          s(:block,
            s(:send,
              s(:ivar, :@tc), :assert_silent),
            s(:args),
            s(:send,
              s(:gvar, :$stderr), :print,
              s(:str, "blah blah"))))),
      s(:def, :test_assert_silent_triggered_out,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:send, nil, :util_msg,
                s(:str, ""),
                s(:str, "blah blah"),
                s(:str, "In stdout"))),
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@tc), :assert_silent),
              s(:args),
              s(:send, nil, :print,
                s(:str, "blah blah")))))),
      s(:def, :test_assert_throws,
        s(:args),
        s(:block,
          s(:send,
            s(:ivar, :@tc), :assert_throws,
            s(:sym, :blah)),
          s(:args),
          s(:send, nil, :throw,
            s(:sym, :blah)))),
      s(:def, :test_assert_throws_different,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Expected :blah to have been thrown, not :not_blah.")),
          s(:args),
          s(:block,
            s(:send,
              s(:ivar, :@tc), :assert_throws,
              s(:sym, :blah)),
            s(:args),
            s(:send, nil, :throw,
              s(:sym, :not_blah))))),
      s(:def, :test_assert_throws_unthrown,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Expected :blah to have been thrown.")),
          s(:args),
          s(:block,
            s(:send,
              s(:ivar, :@tc), :assert_throws,
              s(:sym, :blah)),
            s(:args), nil))),
      s(:def, :test_capture_io,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 0)),
          s(:block,
            s(:send, nil, :non_verbose),
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :out),
                  s(:lvasgn, :err)),
                s(:block,
                  s(:send, nil, :capture_io),
                  s(:args),
                  s(:begin,
                    s(:send, nil, :puts,
                      s(:str, "hi")),
                    s(:send,
                      s(:gvar, :$stderr), :puts,
                      s(:str, "bye!"))))),
              s(:send, nil, :assert_equal,
                s(:str, "hi\n"),
                s(:lvar, :out)),
              s(:send, nil, :assert_equal,
                s(:str, "bye!\n"),
                s(:lvar, :err)))))),
      s(:def, :test_capture_subprocess_io,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 0)),
          s(:block,
            s(:send, nil, :non_verbose),
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :out),
                  s(:lvasgn, :err)),
                s(:block,
                  s(:send, nil, :capture_subprocess_io),
                  s(:args),
                  s(:begin,
                    s(:send, nil, :system,
                      s(:str, "echo"),
                      s(:str, "hi")),
                    s(:send, nil, :system,
                      s(:str, "echo"),
                      s(:str, "bye!"),
                      s(:hash,
                        s(:pair,
                          s(:sym, :out),
                          s(:sym, :err))))))),
              s(:send, nil, :assert_equal,
                s(:str, "hi\n"),
                s(:lvar, :out)),
              s(:send, nil, :assert_equal,
                s(:str, "bye!\n"),
                s(:lvar, :err)))))),
      s(:def, :test_class_asserts_match_refutes,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 0)),
          s(:lvasgn, :methods,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Assertions), :public_instance_methods)),
          s(:if,
            s(:send,
              s(:const, nil, :Symbol), :===,
              s(:send,
                s(:lvar, :methods), :first)),
            s(:block,
              s(:send,
                s(:lvar, :methods), :map!),
              s(:args,
                s(:arg, :m)),
              s(:send,
                s(:lvar, :m), :to_s)), nil),
          s(:lvasgn, :ignores,
            s(:array,
              s(:str, "assert_output"),
              s(:str, "assert_raises"),
              s(:str, "assert_send"),
              s(:str, "assert_silent"),
              s(:str, "assert_throws"))),
          s(:op_asgn,
            s(:lvasgn, :ignores), :+,
            s(:array,
              s(:str, "assert_no_match"),
              s(:str, "assert_not_equal"),
              s(:str, "assert_not_nil"),
              s(:str, "assert_not_same"),
              s(:str, "assert_nothing_raised"),
              s(:str, "assert_nothing_thrown"),
              s(:str, "assert_raise"))),
          s(:lvasgn, :asserts,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :methods), :grep,
                  s(:regexp,
                    s(:str, "^assert"),
                    s(:regopt))), :sort), :-,
              s(:lvar, :ignores))),
          s(:lvasgn, :refutes,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :methods), :grep,
                  s(:regexp,
                    s(:str, "^refute"),
                    s(:regopt))), :sort), :-,
              s(:lvar, :ignores))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :refutes), :map),
                s(:args,
                  s(:arg, :n)),
                s(:send,
                  s(:lvar, :n), :sub,
                  s(:regexp,
                    s(:str, "^refute"),
                    s(:regopt)),
                  s(:str, "assert"))), :-,
              s(:lvar, :asserts))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :asserts), :map),
                s(:args,
                  s(:arg, :n)),
                s(:send,
                  s(:lvar, :n), :sub,
                  s(:regexp,
                    s(:str, "^assert"),
                    s(:regopt)),
                  s(:str, "refute"))), :-,
              s(:lvar, :refutes))))),
      s(:def, :test_flunk,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Epic Fail!")),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :flunk))),
      s(:def, :test_flunk_message,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:ivar, :@zomg)),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :flunk,
            s(:ivar, :@zomg)))),
      s(:def, :test_message,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 0)),
          s(:send, nil, :assert_equal,
            s(:str, "blah2."),
            s(:send,
              s(:block,
                s(:send,
                  s(:ivar, :@tc), :message),
                s(:args),
                s(:str, "blah2")), :call)),
          s(:send, nil, :assert_equal,
            s(:str, "blah2."),
            s(:send,
              s(:block,
                s(:send,
                  s(:ivar, :@tc), :message,
                  s(:str, "")),
                s(:args),
                s(:str, "blah2")), :call)),
          s(:send, nil, :assert_equal,
            s(:str, "blah1.\nblah2."),
            s(:send,
              s(:block,
                s(:send,
                  s(:ivar, :@tc), :message,
                  s(:sym, :blah1)),
                s(:args),
                s(:str, "blah2")), :call)),
          s(:send, nil, :assert_equal,
            s(:str, "blah1.\nblah2."),
            s(:send,
              s(:block,
                s(:send,
                  s(:ivar, :@tc), :message,
                  s(:str, "blah1")),
                s(:args),
                s(:str, "blah2")), :call)),
          s(:lvasgn, :message,
            s(:block,
              s(:send, nil, :proc),
              s(:args),
              s(:str, "blah1"))),
          s(:send, nil, :assert_equal,
            s(:str, "blah1.\nblah2."),
            s(:send,
              s(:block,
                s(:send,
                  s(:ivar, :@tc), :message,
                  s(:lvar, :message)),
                s(:args),
                s(:str, "blah2")), :call)),
          s(:lvasgn, :message,
            s(:block,
              s(:send,
                s(:ivar, :@tc), :message),
              s(:args),
              s(:str, "blah1"))),
          s(:send, nil, :assert_equal,
            s(:str, "blah1.\nblah2."),
            s(:send,
              s(:block,
                s(:send,
                  s(:ivar, :@tc), :message,
                  s(:lvar, :message)),
                s(:args),
                s(:str, "blah2")), :call)))),
      s(:def, :test_message_message,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "whoops.\nExpected: 1\n  Actual: 2")),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :assert_equal,
            s(:int, 1),
            s(:int, 2),
            s(:block,
              s(:send, nil, :message),
              s(:args),
              s(:str, "whoops"))))),
      s(:def, :test_message_lambda,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "whoops.\nExpected: 1\n  Actual: 2")),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :assert_equal,
            s(:int, 1),
            s(:int, 2),
            s(:block,
              s(:send, nil, :lambda),
              s(:args),
              s(:str, "whoops"))))),
      s(:def, :test_message_deferred,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:ivasgn, :@assertion_count),
              s(:lvasgn, :var)),
            s(:array,
              s(:int, 0),
              s(:nil))),
          s(:lvasgn, :msg,
            s(:block,
              s(:send, nil, :message),
              s(:args),
              s(:lvasgn, :var,
                s(:str, "blah")))),
          s(:send, nil, :assert_nil,
            s(:lvar, :var)),
          s(:send,
            s(:lvar, :msg), :call),
          s(:send, nil, :assert_equal,
            s(:str, "blah"),
            s(:lvar, :var)))),
      s(:def, :test_pass,
        s(:args),
        s(:send,
          s(:ivar, :@tc), :pass)),
      s(:def, :test_prints,
        s(:args),
        s(:begin,
          s(:lvasgn, :printer,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:send, nil, :extend,
                s(:const,
                  s(:const, nil, :MiniTest), :Assertions)))),
          s(:send,
            s(:ivar, :@tc), :assert_equal,
            s(:str, "\"test\""),
            s(:send,
              s(:lvar, :printer), :mu_pp,
              s(:send,
                s(:const, nil, :ImmutableString), :new,
                s(:str, "test")))))),
      s(:def, :test_refute,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:send,
            s(:ivar, :@tc), :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@tc), :refute,
              s(:false)),
            s(:str, "returns false on success")))),
      s(:def, :test_refute_empty,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:send,
            s(:ivar, :@tc), :refute_empty,
            s(:array,
              s(:int, 1))))),
      s(:def, :test_refute_empty_triggered,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:str, "Expected [] to not be empty.")),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :refute_empty,
              s(:array))))),
      s(:def, :test_refute_equal,
        s(:args),
        s(:send,
          s(:ivar, :@tc), :refute_equal,
          s(:str, "blah"),
          s(:str, "yay"))),
      s(:def, :test_refute_equal_triggered,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Expected \"blah\" to not be equal to \"blah\".")),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :refute_equal,
            s(:str, "blah"),
            s(:str, "blah")))),
      s(:def, :test_refute_in_delta,
        s(:args),
        s(:send,
          s(:ivar, :@tc), :refute_in_delta,
          s(:float, 0.0),
          s(:send,
            s(:float, 1.0), :/,
            s(:int, 1000)),
          s(:float, 1.0e-06))),
      s(:def, :test_refute_in_delta_triggered,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:if,
              s(:send, nil, :maglev?),
              s(:str, "0.100000xxx"),
              s(:str, "0.1"))),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:dstr,
                s(:str, "Expected |0.0 - 0.001| (0.001) to not be <= "),
                s(:begin,
                  s(:lvar, :x)),
                s(:str, "."))),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :refute_in_delta,
              s(:float, 0.0),
              s(:send,
                s(:float, 1.0), :/,
                s(:int, 1000)),
              s(:float, 0.1))))),
      s(:def, :test_refute_in_epsilon,
        s(:args),
        s(:send,
          s(:ivar, :@tc), :refute_in_epsilon,
          s(:int, 10000),
          s(:send,
            s(:int, 9990), :-,
            s(:int, 1)))),
      s(:def, :test_refute_in_epsilon_triggered,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Expected |10000 - 9990| (10) to not be <= 10.0.")),
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@tc), :refute_in_epsilon,
              s(:int, 10000),
              s(:int, 9990)),
            s(:send, nil, :fail)))),
      s(:def, :test_refute_includes,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:send,
            s(:ivar, :@tc), :refute_includes,
            s(:array,
              s(:true)),
            s(:false)))),
      s(:def, :test_refute_includes_triggered,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 3)),
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:ivar, :@tc), :assert_raises,
                s(:const,
                  s(:const, nil, :MiniTest), :Assertion)),
              s(:args),
              s(:send,
                s(:ivar, :@tc), :refute_includes,
                s(:array,
                  s(:true)),
                s(:true)))),
          s(:lvasgn, :expected,
            s(:str, "Expected [true] to not include true.")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_refute_instance_of,
        s(:args),
        s(:send,
          s(:ivar, :@tc), :refute_instance_of,
          s(:const, nil, :Array),
          s(:str, "blah"))),
      s(:def, :test_refute_instance_of_triggered,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Expected \"blah\" to not be an instance of String.")),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :refute_instance_of,
            s(:const, nil, :String),
            s(:str, "blah")))),
      s(:def, :test_refute_kind_of,
        s(:args),
        s(:send,
          s(:ivar, :@tc), :refute_kind_of,
          s(:const, nil, :Array),
          s(:str, "blah"))),
      s(:def, :test_refute_kind_of_triggered,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Expected \"blah\" to not be a kind of String.")),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :refute_kind_of,
            s(:const, nil, :String),
            s(:str, "blah")))),
      s(:def, :test_refute_match,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:send,
            s(:ivar, :@tc), :refute_match,
            s(:regexp,
              s(:str, "\\d+"),
              s(:regopt)),
            s(:str, "blah blah blah")))),
      s(:def, :test_refute_match_matcher_object,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:send,
            s(:ivar, :@tc), :refute_match,
            s(:send,
              s(:const, nil, :Object), :new),
            s(:int, 5)))),
      s(:def, :test_refute_match_object_triggered,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:lvasgn, :pattern,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :pattern), :=~,
            s(:args,
              s(:arg, :other)),
            s(:true)),
          s(:defs,
            s(:lvar, :pattern), :inspect,
            s(:args),
            s(:str, "[Object]")),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:str, "Expected [Object] to not match 5.")),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :refute_match,
              s(:lvar, :pattern),
              s(:int, 5))))),
      s(:def, :test_refute_match_triggered,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 2)),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:str, "Expected /\\w+/ to not match \"blah blah blah\".")),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :refute_match,
              s(:regexp,
                s(:str, "\\w+"),
                s(:regopt)),
              s(:str, "blah blah blah"))))),
      s(:def, :test_refute_nil,
        s(:args),
        s(:send,
          s(:ivar, :@tc), :refute_nil,
          s(:int, 42))),
      s(:def, :test_refute_nil_triggered,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Expected nil to not be nil.")),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :refute_nil,
            s(:nil)))),
      s(:def, :test_refute_predicate,
        s(:args),
        s(:send,
          s(:ivar, :@tc), :refute_predicate,
          s(:str, "42"),
          s(:sym, :empty?))),
      s(:def, :test_refute_predicate_triggered,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Expected \"\" to not be empty?.")),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :refute_predicate,
            s(:str, ""),
            s(:sym, :empty?)))),
      s(:def, :test_refute_operator,
        s(:args),
        s(:send,
          s(:ivar, :@tc), :refute_operator,
          s(:int, 2),
          s(:sym, :<),
          s(:int, 1))),
      s(:def, :test_refute_operator_bad_object,
        s(:args),
        s(:begin,
          s(:lvasgn, :bad,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :bad), :==,
            s(:args,
              s(:arg, :other)),
            s(:true)),
          s(:send,
            s(:ivar, :@tc), :refute_operator,
            s(:true),
            s(:sym, :equal?),
            s(:lvar, :bad)))),
      s(:def, :test_refute_operator_triggered,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Expected 2 to not be > 1.")),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :refute_operator,
            s(:int, 2),
            s(:sym, :>),
            s(:int, 1)))),
      s(:def, :test_refute_respond_to,
        s(:args),
        s(:send,
          s(:ivar, :@tc), :refute_respond_to,
          s(:str, "blah"),
          s(:sym, :rawr!))),
      s(:def, :test_refute_respond_to_triggered,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Expected \"blah\" to not respond to empty?.")),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :refute_respond_to,
            s(:str, "blah"),
            s(:sym, :empty?)))),
      s(:def, :test_refute_same,
        s(:args),
        s(:send,
          s(:ivar, :@tc), :refute_same,
          s(:int, 1),
          s(:int, 2))),
      s(:def, :test_refute_same_triggered,
        s(:args),
        s(:block,
          s(:send, nil, :util_assert_triggered,
            s(:str, "Expected 1 (oid=N) to not be the same as 1 (oid=N).")),
          s(:args),
          s(:send,
            s(:ivar, :@tc), :refute_same,
            s(:int, 1),
            s(:int, 1)))),
      s(:def, :test_skip,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 0)),
          s(:block,
            s(:send, nil, :util_assert_triggered,
              s(:str, "haha!"),
              s(:const,
                s(:const, nil, :MiniTest), :Skip)),
            s(:args),
            s(:send,
              s(:ivar, :@tc), :skip,
              s(:str, "haha!"))))),
      s(:def, :test_test_methods_random,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 0)),
          s(:lvasgn, :sample_test_case,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:const,
                  s(:const,
                    s(:const, nil, :MiniTest), :Unit), :TestCase)),
              s(:args),
              s(:begin,
                s(:defs,
                  s(:self), :test_order,
                  s(:args),
                  s(:sym, :random)),
                s(:def, :test_test1,
                  s(:args),
                  s(:send, nil, :assert,
                    s(:str, "does not matter"))),
                s(:def, :test_test2,
                  s(:args),
                  s(:send, nil, :assert,
                    s(:str, "does not matter"))),
                s(:def, :test_test3,
                  s(:args),
                  s(:send, nil, :assert,
                    s(:str, "does not matter")))))),
          s(:send, nil, :srand,
            s(:int, 42)),
          s(:lvasgn, :expected,
            s(:case, nil,
              s(:when,
                s(:send, nil, :maglev?),
                s(:array,
                  s(:str, "test_test2"),
                  s(:str, "test_test3"),
                  s(:str, "test_test1"))),
              s(:array,
                s(:str, "test_test2"),
                s(:str, "test_test1"),
                s(:str, "test_test3")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :sample_test_case), :test_methods)))),
      s(:def, :test_test_methods_sorted,
        s(:args),
        s(:begin,
          s(:ivasgn, :@assertion_count,
            s(:int, 0)),
          s(:lvasgn, :sample_test_case,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:const,
                  s(:const,
                    s(:const, nil, :MiniTest), :Unit), :TestCase)),
              s(:args),
              s(:begin,
                s(:defs,
                  s(:self), :test_order,
                  s(:args),
                  s(:sym, :sorted)),
                s(:def, :test_test3,
                  s(:args),
                  s(:send, nil, :assert,
                    s(:str, "does not matter"))),
                s(:def, :test_test2,
                  s(:args),
                  s(:send, nil, :assert,
                    s(:str, "does not matter"))),
                s(:def, :test_test1,
                  s(:args),
                  s(:send, nil, :assert,
                    s(:str, "does not matter")))))),
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "test_test1"),
              s(:str, "test_test2"),
              s(:str, "test_test3"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :sample_test_case), :test_methods)))),
      s(:def, :util_assert_triggered,
        s(:args,
          s(:arg, :expected),
          s(:optarg, :klass,
            s(:const,
              s(:const, nil, :MiniTest), :Assertion))),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:lvar, :klass)),
              s(:args),
              s(:yield))),
          s(:lvasgn, :msg,
            s(:send,
              s(:send,
                s(:lvar, :e), :message), :sub,
              s(:regexp,
                s(:str, "(---Backtrace---).*"),
                s(:regopt, :m)),
              s(:str, "\\1"))),
          s(:send,
            s(:lvar, :msg), :gsub!,
            s(:regexp,
              s(:str, "\\(oid=[-0-9]+\\)"),
              s(:regopt)),
            s(:str, "(oid=N)")),
          s(:send,
            s(:lvar, :msg), :gsub!,
            s(:regexp,
              s(:str, "(\\d\\.\\d{6})\\d+"),
              s(:regopt)),
            s(:str, "\\1xxx")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :msg)))),
      s(:def, :util_msg,
        s(:args,
          s(:arg, :exp),
          s(:arg, :act),
          s(:optarg, :msg,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :s,
            s(:dstr,
              s(:str, "Expected: "),
              s(:begin,
                s(:send,
                  s(:lvar, :exp), :inspect)),
              s(:str, "\n  Actual: "),
              s(:begin,
                s(:send,
                  s(:lvar, :act), :inspect)))),
          s(:if,
            s(:lvar, :msg),
            s(:lvasgn, :s,
              s(:dstr,
                s(:begin,
                  s(:lvar, :msg)),
                s(:str, ".\n"),
                s(:begin,
                  s(:lvar, :s)))), nil),
          s(:lvar, :s))),
      s(:def, :without_diff,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :old_diff,
              s(:send,
                s(:const,
                  s(:const, nil, :MiniTest), :Assertions), :diff)),
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Assertions), :diff=,
              s(:nil)),
            s(:yield)),
          s(:send,
            s(:const,
              s(:const, nil, :MiniTest), :Assertions), :diff=,
            s(:lvar, :old_diff)))))),
  s(:class,
    s(:const, nil, :TestMiniTestGuard),
    s(:const,
      s(:const,
        s(:const, nil, :MiniTest), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_mri_eh,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:self), :class), :mri?,
              s(:str, "ruby blah"))),
          s(:send, nil, :assert,
            s(:send,
              s(:self), :mri?,
              s(:str, "ruby blah"))))),
      s(:def, :test_jruby_eh,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:self), :class), :jruby?,
              s(:str, "java"))),
          s(:send, nil, :assert,
            s(:send,
              s(:self), :jruby?,
              s(:str, "java"))))),
      s(:def, :test_rubinius_eh,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:self), :class), :rubinius?,
              s(:str, "rbx"))),
          s(:send, nil, :assert,
            s(:send,
              s(:self), :rubinius?,
              s(:str, "rbx"))))),
      s(:def, :test_windows_eh,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:self), :class), :windows?,
              s(:str, "mswin"))),
          s(:send, nil, :assert,
            s(:send,
              s(:self), :windows?,
              s(:str, "mswin"))))))),
  s(:class,
    s(:const, nil, :TestMiniTestUnitRecording),
    s(:const, nil, :MetaMetaMetaTestCase),
    s(:begin,
      s(:def, :assert_run_record,
        s(:args,
          s(:restarg, :expected),
          s(:blockarg, :block)),
        s(:begin,
          s(:defs,
            s(:ivar, :@tu), :record,
            s(:args,
              s(:arg, :suite),
              s(:arg, :method),
              s(:arg, :assertions),
              s(:arg, :time),
              s(:arg, :error)),
            s(:send,
              s(:send,
                s(:send, nil, :recording), :[],
                s(:lvar, :method)), :<<,
              s(:lvar, :error))),
          s(:defs,
            s(:ivar, :@tu), :recording,
            s(:args),
            s(:or_asgn,
              s(:ivasgn, :@recording),
              s(:block,
                s(:send,
                  s(:const, nil, :Hash), :new),
                s(:args,
                  s(:arg, :h),
                  s(:arg, :k)),
                s(:send,
                  s(:lvar, :h), :[]=,
                  s(:lvar, :k),
                  s(:array))))),
          s(:send,
            s(:const,
              s(:const, nil, :MiniTest), :Unit), :runner=,
            s(:ivar, :@tu)),
          s(:send,
            s(:const, nil, :Class), :new,
            s(:const,
              s(:const,
                s(:const, nil, :MiniTest), :Unit), :TestCase),
            s(:block_pass,
              s(:lvar, :block))),
          s(:block,
            s(:send, nil, :with_output),
            s(:args),
            s(:send,
              s(:ivar, :@tu), :run)),
          s(:lvasgn, :recorded,
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@tu), :recording), :fetch,
                s(:str, "test_method")), :map,
              s(:block_pass,
                s(:sym, :class)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :recorded)))),
      s(:def, :test_record_passing,
        s(:args),
        s(:block,
          s(:send, nil, :assert_run_record,
            s(:const, nil, :NilClass)),
          s(:args),
          s(:def, :test_method,
            s(:args),
            s(:send, nil, :assert,
              s(:true))))),
      s(:def, :test_record_failing,
        s(:args),
        s(:block,
          s(:send, nil, :assert_run_record,
            s(:const,
              s(:const, nil, :MiniTest), :Assertion)),
          s(:args),
          s(:def, :test_method,
            s(:args),
            s(:send, nil, :assert,
              s(:false))))),
      s(:def, :test_record_error,
        s(:args),
        s(:block,
          s(:send, nil, :assert_run_record,
            s(:const, nil, :RuntimeError)),
          s(:args),
          s(:def, :test_method,
            s(:args),
            s(:send, nil, :raise,
              s(:str, "unhandled exception"))))),
      s(:def, :test_record_error_teardown,
        s(:args),
        s(:block,
          s(:send, nil, :assert_run_record,
            s(:const, nil, :NilClass),
            s(:const, nil, :RuntimeError)),
          s(:args),
          s(:begin,
            s(:def, :test_method,
              s(:args),
              s(:send, nil, :assert,
                s(:true))),
            s(:def, :teardown,
              s(:args),
              s(:send, nil, :raise,
                s(:str, "unhandled exception")))))),
      s(:def, :test_record_error_in_test_and_teardown,
        s(:args),
        s(:block,
          s(:send, nil, :assert_run_record,
            s(:const, nil, :AnError),
            s(:const, nil, :RuntimeError)),
          s(:args),
          s(:begin,
            s(:def, :test_method,
              s(:args),
              s(:send, nil, :raise,
                s(:const, nil, :AnError))),
            s(:def, :teardown,
              s(:args),
              s(:send, nil, :raise,
                s(:str, "unhandled exception")))))),
      s(:def, :test_record_skip,
        s(:args),
        s(:block,
          s(:send, nil, :assert_run_record,
            s(:const,
              s(:const, nil, :MiniTest), :Skip)),
          s(:args),
          s(:def, :test_method,
            s(:args),
            s(:send, nil, :skip,
              s(:str, "not yet"))))))))
