s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "base")),
  s(:if,
    s(:match_with_lvasgn,
      s(:regexp,
        s(:str, "darwin"),
        s(:regopt)),
      s(:const, nil, :RUBY_PLATFORM)),
    s(:class,
      s(:const, nil, :TestMkmf), nil,
      s(:class,
        s(:const, nil, :TestHaveFramework),
        s(:const, nil, :TestMkmf),
        s(:begin,
          s(:def, :create_framework,
            s(:args,
              s(:arg, :fw),
              s(:optarg, :hdrname,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :fw)),
                  s(:str, ".h")))),
            s(:block,
              s(:send,
                s(:const, nil, :Dir), :mktmpdir,
                s(:str, "frameworks")),
              s(:args,
                s(:arg, :dir)),
              s(:begin,
                s(:lvasgn, :fwdir,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :dir)),
                    s(:str, "/"),
                    s(:begin,
                      s(:lvar, :fw)),
                    s(:str, ".framework"))),
                s(:lvasgn, :hdrdir,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :fwdir)),
                    s(:str, "/Headers"))),
                s(:send,
                  s(:const, nil, :FileUtils), :mkdir_p,
                  s(:lvar, :hdrdir)),
                s(:send,
                  s(:const, nil, :File), :write,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :hdrdir)),
                    s(:str, "/"),
                    s(:begin,
                      s(:lvar, :hdrname))),
                  s(:str, "")),
                s(:lvasgn, :src,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :fwdir)),
                    s(:str, "/main.c"))),
                s(:send,
                  s(:const, nil, :File), :write,
                  s(:lvar, :src),
                  s(:dstr,
                    s(:str, "void "),
                    s(:begin,
                      s(:lvar, :fw)),
                    s(:str, "(void) {}"))),
                s(:lvasgn, :cmd,
                  s(:send,
                    s(:const, nil, :LINK_SO), :dup)),
                s(:send,
                  s(:const, nil, :RbConfig), :expand,
                  s(:lvar, :cmd),
                  s(:send,
                    s(:const,
                      s(:const, nil, :RbConfig), :CONFIG), :merge,
                    s(:hash,
                      s(:pair,
                        s(:str, "OBJS"),
                        s(:lvar, :src))))),
                s(:send,
                  s(:lvar, :cmd), :gsub!,
                  s(:str, "$@"),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :fwdir)),
                    s(:str, "/"),
                    s(:begin,
                      s(:lvar, :fw)))),
                s(:send,
                  s(:lvar, :cmd), :gsub!,
                  s(:regexp,
                    s(:str, " -bundle "),
                    s(:regopt)),
                  s(:str, " -dynamiclib ")),
                s(:send, nil, :assert,
                  s(:send, nil, :xsystem,
                    s(:lvar, :cmd)),
                  s(:const, nil, :MKMFLOG)),
                s(:send,
                  s(:send,
                    s(:gvar, :$INCFLAGS), :<<,
                    s(:str, " ")), :<<,
                  s(:send,
                    s(:dstr,
                      s(:str, "-F"),
                      s(:begin,
                        s(:lvar, :dir))), :quote)),
                s(:yield,
                  s(:lvar, :fw),
                  s(:lvar, :hdrname))))),
          s(:def, :test_single_framework,
            s(:args),
            s(:send, nil, :assert,
              s(:send, nil, :have_framework,
                s(:str, "Ruby")),
              s(:send, nil, :mkmflog,
                s(:str, "try as Objective-C")))),
          s(:def, :test_multi_frameworks,
            s(:args),
            s(:begin,
              s(:send, nil, :assert,
                s(:send, nil, :have_framework,
                  s(:str, "Ruby")),
                s(:send, nil, :mkmflog,
                  s(:str, "try as Objective-C"))),
              s(:block,
                s(:send, nil, :create_framework,
                  s(:str, "MkmfTest")),
                s(:args,
                  s(:arg, :fw)),
                s(:send, nil, :assert,
                  s(:send, nil, :have_framework,
                    s(:lvar, :fw)),
                  s(:const, nil, :MKMFLOG))))),
          s(:def, :test_empty_framework,
            s(:args),
            s(:block,
              s(:send, nil, :create_framework,
                s(:str, "MkmfTest")),
              s(:args,
                s(:arg, :fw)),
              s(:send, nil, :assert,
                s(:send, nil, :have_framework,
                  s(:lvar, :fw)),
                s(:const, nil, :MKMFLOG)))),
          s(:def, :test_different_name_header,
            s(:args),
            s(:begin,
              s(:lvasgn, :_bug8593,
                s(:str, "[ruby-core:55745] [Bug #8593]")),
              s(:block,
                s(:send, nil, :create_framework,
                  s(:str, "MkmfTest"),
                  s(:str, "test_mkmf.h")),
                s(:args,
                  s(:arg, :fw),
                  s(:arg, :hdrname)),
                s(:begin,
                  s(:send, nil, :assert,
                    s(:send,
                      s(:send, nil, :have_framework,
                        s(:lvar, :fw)), :!),
                    s(:const, nil, :MKMFLOG)),
                  s(:send, nil, :assert,
                    s(:send, nil, :have_framework,
                      s(:array,
                        s(:lvar, :fw),
                        s(:lvar, :hdrname))),
                    s(:const, nil, :MKMFLOG))))))))), nil))
