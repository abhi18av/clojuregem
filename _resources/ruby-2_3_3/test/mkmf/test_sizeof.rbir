s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "base")),
  s(:class,
    s(:const, nil, :TestMkmf), nil,
    s(:class,
      s(:const, nil, :TestSizeof),
      s(:const, nil, :TestMkmf),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:zsuper),
            s(:ivasgn, :@sizeof_short,
              s(:send,
                s(:send, nil, :config_value,
                  s(:str, "SIZEOF_SHORT")), :to_i)),
            s(:ivasgn, :@sizeof_int,
              s(:send,
                s(:send, nil, :config_value,
                  s(:str, "SIZEOF_INT")), :to_i)),
            s(:ivasgn, :@sizeof_long,
              s(:send,
                s(:send, nil, :config_value,
                  s(:str, "SIZEOF_LONG")), :to_i)),
            s(:ivasgn, :@sizeof_long_long,
              s(:send,
                s(:send, nil, :config_value,
                  s(:str, "SIZEOF_LONG_LONG")), :to_i)),
            s(:ivasgn, :@sizeof___int64,
              s(:send,
                s(:send, nil, :config_value,
                  s(:str, "SIZEOF___INT64")), :to_i)))),
        s(:def, :test_sizeof_builtin,
          s(:args),
          s(:begin,
            s(:block,
              s(:send,
                s(:array,
                  s(:str, "char"),
                  s(:str, "short"),
                  s(:str, "int"),
                  s(:str, "long"),
                  s(:str, "float"),
                  s(:str, "double"),
                  s(:str, "void*")), :each),
              s(:args,
                s(:arg, :type)),
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :Integer),
                s(:block,
                  s(:send, nil, :mkmf),
                  s(:args),
                  s(:send, nil, :check_sizeof,
                    s(:lvar, :type))),
                s(:const, nil, :MKMFLOG))),
            s(:send, nil, :assert_operator,
              s(:ivar, :@sizeof_short),
              s(:sym, :<=),
              s(:ivar, :@sizeof_int)),
            s(:send, nil, :assert_operator,
              s(:ivar, :@sizeof_int),
              s(:sym, :<=),
              s(:ivar, :@sizeof_long)),
            s(:if,
              s(:send,
                s(:ivar, :@sizeof_long_long), :zero?), nil,
              s(:send, nil, :assert_operator,
                s(:ivar, :@sizeof_long),
                s(:sym, :<=),
                s(:ivar, :@sizeof_long_long))),
            s(:if,
              s(:send,
                s(:ivar, :@sizeof___int64), :zero?), nil,
              s(:send, nil, :assert_equal,
                s(:int, 8),
                s(:ivar, :@sizeof___int64))))),
        s(:def, :test_sizeof_struct,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:block,
                s(:send, nil, :open,
                  s(:str, "confdefs.h"),
                  s(:str, "w")),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:lvar, :f), :puts,
                  s(:str, "typedef struct {char x;} test1_t;"))),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:block,
                  s(:send, nil, :mkmf),
                  s(:args),
                  s(:send, nil, :check_sizeof,
                    s(:str, "test1_t"),
                    s(:str, "confdefs.h"))),
                s(:const, nil, :MKMFLOG)),
              s(:block,
                s(:send, nil, :open,
                  s(:str, "confdefs.h"),
                  s(:str, "w")),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:lvar, :f), :puts,
                  s(:str, "typedef struct {char x, y;} test1_t;"))),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:block,
                  s(:send, nil, :mkmf),
                  s(:args),
                  s(:send, nil, :check_sizeof,
                    s(:str, "test1_t"),
                    s(:str, "confdefs.h"))),
                s(:const, nil, :MKMFLOG)),
              s(:block,
                s(:send, nil, :open,
                  s(:str, "confdefs.h"),
                  s(:str, "w")),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:lvar, :f), :puts,
                  s(:str, "typedef struct {int x;} test1_t;"))),
              s(:send, nil, :assert_equal,
                s(:ivar, :@sizeof_int),
                s(:block,
                  s(:send, nil, :mkmf),
                  s(:args),
                  s(:send, nil, :check_sizeof,
                    s(:str, "test1_t"),
                    s(:str, "confdefs.h"))),
                s(:const, nil, :MKMFLOG)),
              s(:block,
                s(:send, nil, :open,
                  s(:str, "confdefs.h"),
                  s(:str, "w")),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:lvar, :f), :puts,
                  s(:str, "typedef struct {int x, y;} test1_t;"))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:int, 2), :*,
                  s(:ivar, :@sizeof_int)),
                s(:block,
                  s(:send, nil, :mkmf),
                  s(:args),
                  s(:send, nil, :check_sizeof,
                    s(:str, "test1_t"),
                    s(:str, "confdefs.h"))),
                s(:const, nil, :MKMFLOG))),
            s(:send,
              s(:const, nil, :File), :unlink,
              s(:str, "confdefs.h"))))))))
