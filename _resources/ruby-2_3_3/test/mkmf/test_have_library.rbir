s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "base")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:class,
    s(:const, nil, :TestMkmf), nil,
    s(:class,
      s(:const, nil, :TestHaveLibrary),
      s(:const, nil, :TestMkmf),
      s(:begin,
        s(:casgn, nil, :LIBRARY_NAME,
          s(:str, "mkmftest")),
        s(:casgn, nil, :HEADER_NAME,
          s(:dstr,
            s(:begin,
              s(:const, nil, :LIBRARY_NAME)),
            s(:str, ".h"))),
        s(:casgn, nil, :FUNC_NAME,
          s(:str, "ruby_mkmftest_foo")),
        s(:casgn, nil, :ARPREFIX,
          s(:block,
            s(:send, nil, :config_string,
              s(:str, "LIBRUBY_A")),
            s(:args,
              s(:arg, :lib)),
            s(:send,
              s(:lvar, :lib), :[],
              s(:regexp,
                s(:str, "\\A\\w+"),
                s(:regopt))))),
        s(:def, :create_library,
          s(:args,
            s(:optarg, :libname,
              s(:const, nil, :LIBRARY_NAME))),
          s(:begin,
            s(:lvasgn, :lib,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :ARPREFIX)),
                s(:begin,
                  s(:lvar, :libname)),
                s(:str, "."),
                s(:begin,
                  s(:gvar, :$LIBEXT)))),
            s(:block,
              s(:send, nil, :open,
                s(:const, nil, :HEADER_NAME),
                s(:str, "w")),
              s(:args,
                s(:arg, :hdr)),
              s(:begin,
                s(:send,
                  s(:lvar, :hdr), :puts,
                  s(:dstr,
                    s(:str, "void "),
                    s(:begin,
                      s(:const, nil, :FUNC_NAME)),
                    s(:str, "(void);"))),
                s(:send,
                  s(:lvar, :hdr), :puts,
                  s(:dstr,
                    s(:str, "void "),
                    s(:begin,
                      s(:const, nil, :FUNC_NAME)),
                    s(:str, "_fake(void);"))))),
            s(:send, nil, :create_tmpsrc,
              s(:dstr,
                s(:dstr,
                  s(:str, "#include \""),
                  s(:begin,
                    s(:const, nil, :HEADER_NAME)),
                  s(:str, "\"\n")),
                s(:dstr,
                  s(:str, "void "),
                  s(:begin,
                    s(:const, nil, :FUNC_NAME)),
                  s(:str, "(void) {}")))),
            s(:send, nil, :assert,
              s(:send, nil, :xsystem,
                s(:send, nil, :cc_command)),
              s(:dstr,
                s(:str, "compile failed: "),
                s(:begin,
                  s(:send, nil, :cc_command)))),
            s(:lvasgn, :command,
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:const, nil, :CONFIG), :[],
                    s(:str, "AR"))),
                s(:str, " "),
                s(:begin,
                  s(:or,
                    s(:send, nil, :config_string,
                      s(:str, "ARFLAGS")),
                    s(:str, "cru "))),
                s(:begin,
                  s(:lvar, :lib)),
                s(:str, " "),
                s(:begin,
                  s(:const, nil, :CONFTEST)),
                s(:str, "."),
                s(:begin,
                  s(:gvar, :$OBJEXT)))),
            s(:send, nil, :assert,
              s(:send, nil, :xsystem,
                s(:lvar, :command)),
              s(:dstr,
                s(:str, "making library failed: "),
                s(:begin,
                  s(:lvar, :command)))),
            s(:send,
              s(:const, nil, :File), :unlink,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :CONFTEST)),
                s(:str, "."),
                s(:begin,
                  s(:gvar, :$OBJEXT)))),
            s(:block,
              s(:send, nil, :config_string,
                s(:str, "RANLIB")),
              s(:args,
                s(:arg, :ranlib)),
              s(:begin,
                s(:lvasgn, :command,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :ranlib)),
                    s(:str, " "),
                    s(:begin,
                      s(:lvar, :lib)))),
                s(:send, nil, :assert,
                  s(:send, nil, :xsystem,
                    s(:lvar, :command)),
                  s(:dstr,
                    s(:str, "ranlib failed: "),
                    s(:begin,
                      s(:lvar, :command)))))))),
        s(:def, :assert_have_library,
          s(:args,
            s(:restarg, :args)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send, nil, :have_library,
              s(:const, nil, :LIBRARY_NAME),
              s(:splat,
                s(:lvar, :args))),
            s(:const, nil, :MKMFLOG))),
        s(:def, :assert_not_have_library,
          s(:args,
            s(:restarg, :args)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send, nil, :have_library,
              s(:const, nil, :LIBRARY_NAME),
              s(:splat,
                s(:lvar, :args))),
            s(:const, nil, :MKMFLOG))),
        s(:def, :test_have_library,
          s(:args),
          s(:begin,
            s(:send, nil, :create_library),
            s(:send, nil, :assert_have_library))),
        s(:def, :test_have_library_with_name,
          s(:args),
          s(:begin,
            s(:send, nil, :create_library),
            s(:send, nil, :assert_have_library,
              s(:const, nil, :FUNC_NAME),
              s(:const, nil, :HEADER_NAME)))),
        s(:def, :test_not_have_library,
          s(:args),
          s(:send, nil, :assert_not_have_library)),
        s(:def, :test_not_have_library_with_name,
          s(:args),
          s(:begin,
            s(:send, nil, :create_library),
            s(:send, nil, :assert_not_have_library,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :FUNC_NAME)),
                s(:str, "_fake")),
              s(:const, nil, :HEADER_NAME))))))))
