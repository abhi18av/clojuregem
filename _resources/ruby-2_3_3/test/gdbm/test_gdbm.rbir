s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "gdbm")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:defined?,
      s(:const, nil, :GDBM)),
    s(:begin,
      s(:send, nil, :require,
        s(:str, "test/unit")),
      s(:send, nil, :require,
        s(:str, "tmpdir")),
      s(:send, nil, :require,
        s(:str, "fileutils")),
      s(:class,
        s(:const, nil, :TestGDBM_RDONLY),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:defs,
            s(:const, nil, :TestGDBM_RDONLY), :uname_s,
            s(:args),
            s(:begin,
              s(:send, nil, :require,
                s(:str, "rbconfig")),
              s(:case,
                s(:send,
                  s(:const,
                    s(:const, nil, :RbConfig), :CONFIG), :[],
                  s(:str, "target_os")),
                s(:when,
                  s(:str, "cygwin"),
                  s(:begin,
                    s(:send, nil, :require,
                      s(:str, "etc")),
                    s(:send,
                      s(:send,
                        s(:const, nil, :Etc), :uname), :[],
                      s(:sym, :sysname)))),
                s(:send,
                  s(:const,
                    s(:const, nil, :RbConfig), :CONFIG), :[],
                  s(:str, "target_os"))))),
          s(:casgn, nil, :SYSTEM,
            s(:send, nil, :uname_s)),
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:ivasgn, :@tmpdir,
                s(:send,
                  s(:const, nil, :Dir), :mktmpdir,
                  s(:str, "tmptest_gdbm"))),
              s(:ivasgn, :@prefix,
                s(:dstr,
                  s(:str, "tmptest_gdbm_"),
                  s(:begin,
                    s(:gvar, :$$)))),
              s(:ivasgn, :@path,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@tmpdir)),
                  s(:str, "/"),
                  s(:begin,
                    s(:ivar, :@prefix)),
                  s(:str, "_"))),
              s(:block,
                s(:send,
                  s(:const, nil, :GDBM), :open,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@tmpdir)),
                    s(:str, "/"),
                    s(:begin,
                      s(:ivar, :@prefix)),
                    s(:str, "_rdonly")),
                  s(:int, 256)),
                s(:args,
                  s(:arg, :gdbm)),
                s(:send,
                  s(:lvar, :gdbm), :[]=,
                  s(:str, "foo"),
                  s(:str, "FOO"))),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :GDBM),
                s(:ivasgn, :@gdbm_rdonly,
                  s(:send,
                    s(:const, nil, :GDBM), :new,
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@tmpdir)),
                      s(:str, "/"),
                      s(:begin,
                        s(:ivar, :@prefix)),
                      s(:str, "_rdonly")),
                    s(:nil)))))),
          s(:def, :teardown,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:ivar, :@gdbm_rdonly), :close)),
              s(:block,
                s(:send,
                  s(:const, nil, :ObjectSpace), :each_object,
                  s(:const, nil, :GDBM)),
                s(:args,
                  s(:arg, :obj)),
                s(:if,
                  s(:send,
                    s(:lvar, :obj), :closed?), nil,
                  s(:send,
                    s(:lvar, :obj), :close))),
              s(:send,
                s(:const, nil, :FileUtils), :remove_entry_secure,
                s(:ivar, :@tmpdir)))),
          s(:def, :test_delete_rdonly,
            s(:args),
            s(:if,
              s(:send,
                s(:regexp,
                  s(:str, "^CYGWIN_9"),
                  s(:regopt)), :!~,
                s(:const, nil, :SYSTEM)),
              s(:begin,
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :GDBMError)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@gdbm_rdonly), :delete,
                    s(:str, "foo"))),
                s(:send, nil, :assert_nil,
                  s(:send,
                    s(:ivar, :@gdbm_rdonly), :delete,
                    s(:str, "bar")))), nil)))),
      s(:class,
        s(:const, nil, :TestGDBM),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:casgn, nil, :SYSTEM,
            s(:const,
              s(:const, nil, :TestGDBM_RDONLY), :SYSTEM)),
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:ivasgn, :@tmpdir,
                s(:send,
                  s(:const, nil, :Dir), :mktmpdir,
                  s(:str, "tmptest_gdbm"))),
              s(:ivasgn, :@prefix,
                s(:dstr,
                  s(:str, "tmptest_gdbm_"),
                  s(:begin,
                    s(:gvar, :$$)))),
              s(:ivasgn, :@path,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@tmpdir)),
                  s(:str, "/"),
                  s(:begin,
                    s(:ivar, :@prefix)),
                  s(:str, "_"))),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :GDBM),
                s(:ivasgn, :@gdbm,
                  s(:send,
                    s(:const, nil, :GDBM), :new,
                    s(:ivar, :@path)))))),
          s(:def, :teardown,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:ivar, :@gdbm), :close)),
              s(:block,
                s(:send,
                  s(:const, nil, :ObjectSpace), :each_object,
                  s(:const, nil, :GDBM)),
                s(:args,
                  s(:arg, :obj)),
                s(:if,
                  s(:send,
                    s(:lvar, :obj), :closed?), nil,
                  s(:send,
                    s(:lvar, :obj), :close))),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:const, nil, :FileUtils), :remove_entry_secure,
                    s(:ivar, :@tmpdir)),
                  s(:resbody, nil, nil,
                    s(:send, nil, :system,
                      s(:str, "fuser"),
                      s(:splat,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Dir), :entries,
                            s(:ivar, :@tmpdir)), :grep,
                          s(:regexp,
                            s(:str, "\\A(?!\\.\\.?\\z)"),
                            s(:regopt)))),
                      s(:hash,
                        s(:pair,
                          s(:sym, :chdir),
                          s(:ivar, :@tmpdir))))),
                  s(:return))),
              s(:send,
                s(:const, nil, :FileUtils), :remove_entry_secure,
                s(:ivar, :@tmpdir)))),
          s(:def, :check_size,
            s(:args,
              s(:arg, :expect),
              s(:optarg, :gdbm,
                s(:ivar, :@gdbm))),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:lvar, :expect),
                s(:send,
                  s(:lvar, :gdbm), :size)),
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:lvar, :gdbm), :each),
                s(:args),
                s(:op_asgn,
                  s(:lvasgn, :n), :+,
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expect),
                s(:lvar, :n)),
              s(:if,
                s(:send,
                  s(:lvar, :expect), :==,
                  s(:int, 0)),
                s(:send, nil, :assert_equal,
                  s(:true),
                  s(:send,
                    s(:lvar, :gdbm), :empty?)),
                s(:send, nil, :assert_equal,
                  s(:false),
                  s(:send,
                    s(:lvar, :gdbm), :empty?))))),
          s(:def, :test_s_new_has_no_block,
            s(:args),
            s(:begin,
              s(:lvasgn, :foo,
                s(:true)),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :GDBM),
                s(:lvasgn, :gdbm,
                  s(:block,
                    s(:send,
                      s(:const, nil, :GDBM), :new,
                      s(:dstr,
                        s(:begin,
                          s(:ivar, :@tmpdir)),
                        s(:str, "/"),
                        s(:begin,
                          s(:ivar, :@prefix)))),
                    s(:args),
                    s(:lvasgn, :foo,
                      s(:false))))),
              s(:send, nil, :assert_equal,
                s(:lvar, :foo),
                s(:true)),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:lvar, :gdbm), :close)))),
          s(:def, :test_s_open_create_new,
            s(:args),
            s(:begin,
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "^CYGWIN_9"),
                    s(:regopt)),
                  s(:const, nil, :SYSTEM)),
                s(:return), nil),
              s(:lvasgn, :save_mask,
                s(:send,
                  s(:const, nil, :File), :umask,
                  s(:int, 0))),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:send, nil, :assert_instance_of,
                      s(:const, nil, :GDBM),
                      s(:lvasgn, :gdbm,
                        s(:send,
                          s(:const, nil, :GDBM), :open,
                          s(:dstr,
                            s(:begin,
                              s(:ivar, :@tmpdir)),
                            s(:str, "/"),
                            s(:begin,
                              s(:ivar, :@prefix)))))),
                    s(:send,
                      s(:lvar, :gdbm), :close),
                    s(:if,
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "mswin|mingw"),
                          s(:regopt)),
                        s(:const, nil, :RUBY_PLATFORM)), nil,
                      s(:send, nil, :assert_equal,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:const, nil, :File), :stat,
                              s(:dstr,
                                s(:begin,
                                  s(:ivar, :@tmpdir)),
                                s(:str, "/"),
                                s(:begin,
                                  s(:ivar, :@prefix)))), :mode), :&,
                          s(:int, 511)),
                        s(:int, 438))),
                    s(:send, nil, :assert_instance_of,
                      s(:const, nil, :GDBM),
                      s(:lvasgn, :gdbm,
                        s(:send,
                          s(:const, nil, :GDBM), :open,
                          s(:dstr,
                            s(:begin,
                              s(:ivar, :@tmpdir)),
                            s(:str, "/"),
                            s(:begin,
                              s(:ivar, :@prefix)),
                            s(:str, "2")),
                          s(:int, 420)))),
                    s(:send,
                      s(:lvar, :gdbm), :close),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:const, nil, :File), :stat,
                            s(:dstr,
                              s(:begin,
                                s(:ivar, :@tmpdir)),
                              s(:str, "/"),
                              s(:begin,
                                s(:ivar, :@prefix)),
                              s(:str, "2"))), :mode), :&,
                        s(:int, 511)),
                      s(:int, 420))),
                  s(:send,
                    s(:const, nil, :File), :umask,
                    s(:lvar, :save_mask)))))),
          s(:def, :test_s_open_no_create,
            s(:args),
            s(:ensure,
              s(:begin,
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "1\\.8\\.0"),
                      s(:regopt)),
                    s(:const,
                      s(:const, nil, :GDBM), :VERSION)),
                  s(:send, nil, :skip,
                    s(:str, "gdbm_open(GDBM_WRITER) is broken on libgdbm 1.8.0")), nil),
                s(:send, nil, :assert_nil,
                  s(:lvasgn, :gdbm,
                    s(:send,
                      s(:const, nil, :GDBM), :open,
                      s(:dstr,
                        s(:begin,
                          s(:ivar, :@tmpdir)),
                        s(:str, "/"),
                        s(:begin,
                          s(:ivar, :@prefix))),
                      s(:nil))))),
              s(:if,
                s(:lvar, :gdbm),
                s(:send,
                  s(:lvar, :gdbm), :close), nil))),
          s(:def, :test_s_open_3rd_arg,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :GDBM),
                s(:lvasgn, :gdbm,
                  s(:send,
                    s(:const, nil, :GDBM), :open,
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@tmpdir)),
                      s(:str, "/"),
                      s(:begin,
                        s(:ivar, :@prefix))),
                    s(:int, 420),
                    s(:const,
                      s(:const, nil, :GDBM), :FAST)))),
              s(:send,
                s(:lvar, :gdbm), :close),
              s(:if,
                s(:defined?,
                  s(:const,
                    s(:const, nil, :GDBM), :SYNC)),
                s(:begin,
                  s(:send, nil, :assert_instance_of,
                    s(:const, nil, :GDBM),
                    s(:lvasgn, :gdbm,
                      s(:send,
                        s(:const, nil, :GDBM), :open,
                        s(:dstr,
                          s(:begin,
                            s(:ivar, :@tmpdir)),
                          s(:str, "/"),
                          s(:begin,
                            s(:ivar, :@prefix))),
                        s(:int, 420),
                        s(:const,
                          s(:const, nil, :GDBM), :SYNC)))),
                  s(:send,
                    s(:lvar, :gdbm), :close)), nil),
              s(:if,
                s(:defined?,
                  s(:const,
                    s(:const, nil, :GDBM), :NOLOCK)),
                s(:begin,
                  s(:send, nil, :assert_instance_of,
                    s(:const, nil, :GDBM),
                    s(:lvasgn, :gdbm,
                      s(:send,
                        s(:const, nil, :GDBM), :open,
                        s(:dstr,
                          s(:begin,
                            s(:ivar, :@tmpdir)),
                          s(:str, "/"),
                          s(:begin,
                            s(:ivar, :@prefix))),
                        s(:int, 420),
                        s(:const,
                          s(:const, nil, :GDBM), :NOLOCK)))),
                  s(:send,
                    s(:lvar, :gdbm), :close)), nil))),
          s(:def, :test_s_open_with_block,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:block,
                s(:send,
                  s(:const, nil, :GDBM), :open,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@tmpdir)),
                    s(:str, "/"),
                    s(:begin,
                      s(:ivar, :@prefix)))),
                s(:args),
                s(:sym, :foo)),
              s(:sym, :foo))),
          s(:def, :open_db_child,
            s(:args,
              s(:arg, :dbname),
              s(:restarg, :opts)),
            s(:begin,
              s(:lvasgn, :opts,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:int, 420),
                      s(:splat,
                        s(:lvar, :opts))), :map,
                    s(:block_pass,
                      s(:sym, :inspect))), :join,
                  s(:str, ", "))),
              s(:lvasgn, :args,
                s(:array,
                  s(:send,
                    s(:const, nil, :EnvUtil), :rubybin),
                  s(:str, "-rgdbm"),
                  s(:str, "-e"),
                  s(:dstr,
                    s(:str, "      STDOUT.sync = true\n"),
                    s(:str, "      gdbm = GDBM.open(ARGV.shift, "),
                    s(:begin,
                      s(:lvar, :opts)),
                    s(:str, ")\n"),
                    s(:str, "      puts gdbm.class\n"),
                    s(:str, "      gets\n")),
                  s(:lvar, :dbname))),
              s(:block,
                s(:send,
                  s(:const, nil, :IO), :popen,
                  s(:lvar, :args),
                  s(:str, "r+")),
                s(:args,
                  s(:arg, :f)),
                s(:begin,
                  s(:lvasgn, :dbclass,
                    s(:send,
                      s(:lvar, :f), :gets)),
                  s(:send, nil, :assert_equal,
                    s(:str, "GDBM"),
                    s(:send,
                      s(:lvar, :dbclass), :chomp)),
                  s(:yield))))),
          s(:def, :test_s_open_lock,
            s(:args),
            s(:begin,
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "solaris|aix"),
                    s(:regopt)),
                  s(:const, nil, :RUBY_PLATFORM)),
                s(:send, nil, :skip,
                  s(:str, "GDBM.open would block when opening already locked gdbm file on platforms without flock and with lockf")), nil),
              s(:lvasgn, :dbname,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@tmpdir)),
                  s(:str, "/"),
                  s(:begin,
                    s(:ivar, :@prefix)))),
              s(:block,
                s(:send, nil, :open_db_child,
                  s(:lvar, :dbname)),
                s(:args),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const, nil, :Errno), :EWOULDBLOCK),
                    s(:const,
                      s(:const, nil, :Errno), :EAGAIN),
                    s(:const,
                      s(:const, nil, :Errno), :EACCES)),
                  s(:args),
                  s(:block,
                    s(:send,
                      s(:const, nil, :GDBM), :open,
                      s(:lvar, :dbname),
                      s(:int, 420)),
                    s(:args,
                      s(:arg, :gdbm)),
                    s(:send, nil, :assert_instance_of,
                      s(:const, nil, :GDBM),
                      s(:lvar, :gdbm))))))),
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :GDBM), :NOLOCK)),
            s(:def, :test_s_open_nolock,
              s(:args),
              s(:begin,
                s(:lvasgn, :dbname,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@tmpdir)),
                    s(:str, "/"),
                    s(:begin,
                      s(:ivar, :@prefix)))),
                s(:block,
                  s(:send, nil, :open_db_child,
                    s(:lvar, :dbname),
                    s(:const,
                      s(:const, nil, :GDBM), :NOLOCK)),
                  s(:args),
                  s(:block,
                    s(:send, nil, :assert_nothing_raised,
                      s(:const,
                        s(:const, nil, :Errno), :EWOULDBLOCK),
                      s(:const,
                        s(:const, nil, :Errno), :EAGAIN),
                      s(:const,
                        s(:const, nil, :Errno), :EACCES)),
                    s(:args),
                    s(:block,
                      s(:send,
                        s(:const, nil, :GDBM), :open,
                        s(:lvar, :dbname),
                        s(:int, 420)),
                      s(:args,
                        s(:arg, :gdbm2)),
                      s(:send, nil, :assert_instance_of,
                        s(:const, nil, :GDBM),
                        s(:lvar, :gdbm2))))),
                s(:if,
                  s(:gvar, :$DEBUG),
                  s(:send,
                    s(:const, nil, :STDERR), :puts,
                    s(:send,
                      s(:const, nil, :Dir), :glob,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :dbname)),
                        s(:str, "*")))), nil),
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "mswin|mingw"),
                      s(:regopt)),
                    s(:const, nil, :RUBY_PLATFORM)),
                  s(:return), nil),
                s(:block,
                  s(:send, nil, :open_db_child,
                    s(:lvar, :dbname)),
                  s(:args),
                  s(:block,
                    s(:send, nil, :assert_nothing_raised,
                      s(:const,
                        s(:const, nil, :Errno), :EWOULDBLOCK),
                      s(:const,
                        s(:const, nil, :Errno), :EAGAIN),
                      s(:const,
                        s(:const, nil, :Errno), :EACCES)),
                    s(:args),
                    s(:block,
                      s(:send,
                        s(:const, nil, :GDBM), :open,
                        s(:lvar, :dbname),
                        s(:int, 420),
                        s(:const,
                          s(:const, nil, :GDBM), :NOLOCK)),
                      s(:args,
                        s(:arg, :gdbm2)),
                      s(:send, nil, :assert_instance_of,
                        s(:const, nil, :GDBM),
                        s(:lvar, :gdbm2))))))), nil),
          s(:def, :test_s_open_error,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :GDBM),
                s(:lvasgn, :gdbm,
                  s(:send,
                    s(:const, nil, :GDBM), :open,
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@tmpdir)),
                      s(:str, "/"),
                      s(:begin,
                        s(:ivar, :@prefix))),
                    s(:int, 0)))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :Errno), :EACCES),
                  s(:const,
                    s(:const, nil, :Errno), :EWOULDBLOCK)),
                s(:args),
                s(:send,
                  s(:const, nil, :GDBM), :open,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@tmpdir)),
                    s(:str, "/"),
                    s(:begin,
                      s(:ivar, :@prefix))),
                  s(:int, 0))),
              s(:send,
                s(:lvar, :gdbm), :close))),
          s(:def, :test_close,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :GDBM),
                s(:lvasgn, :gdbm,
                  s(:send,
                    s(:const, nil, :GDBM), :open,
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@tmpdir)),
                      s(:str, "/"),
                      s(:begin,
                        s(:ivar, :@prefix)))))),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:lvar, :gdbm), :close)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :RuntimeError)),
                s(:args),
                s(:send,
                  s(:lvar, :gdbm), :close)))),
          s(:def, :test_aref,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, "bar"),
                s(:send,
                  s(:ivar, :@gdbm), :[]=,
                  s(:str, "foo"),
                  s(:str, "bar"))),
              s(:send, nil, :assert_equal,
                s(:str, "bar"),
                s(:send,
                  s(:ivar, :@gdbm), :[],
                  s(:str, "foo"))),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:ivar, :@gdbm), :[],
                  s(:str, "bar"))))),
          s(:def, :test_fetch,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, "bar"),
                s(:send,
                  s(:ivar, :@gdbm), :[]=,
                  s(:str, "foo"),
                  s(:str, "bar"))),
              s(:send, nil, :assert_equal,
                s(:str, "bar"),
                s(:send,
                  s(:ivar, :@gdbm), :fetch,
                  s(:str, "foo"))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :IndexError)),
                s(:args),
                s(:send,
                  s(:ivar, :@gdbm), :fetch,
                  s(:str, "bar"))),
              s(:send, nil, :assert_equal,
                s(:str, "baz"),
                s(:send,
                  s(:ivar, :@gdbm), :fetch,
                  s(:str, "bar"),
                  s(:str, "baz"))),
              s(:send, nil, :assert_equal,
                s(:str, "foobar"),
                s(:block,
                  s(:send,
                    s(:ivar, :@gdbm), :fetch,
                    s(:str, "bar")),
                  s(:args,
                    s(:arg, :key)),
                  s(:send,
                    s(:str, "foo"), :+,
                    s(:lvar, :key)))))),
          s(:def, :test_aset,
            s(:args),
            s(:begin,
              s(:lvasgn, :num,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:int, 2), :times),
                s(:args,
                  s(:arg, :i)),
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:str, "foo"),
                    s(:send,
                      s(:ivar, :@gdbm), :[]=,
                      s(:str, "foo"),
                      s(:str, "foo"))),
                  s(:send, nil, :assert_equal,
                    s(:str, "foo"),
                    s(:send,
                      s(:ivar, :@gdbm), :[],
                      s(:str, "foo"))),
                  s(:send, nil, :assert_equal,
                    s(:str, "bar"),
                    s(:send,
                      s(:ivar, :@gdbm), :[]=,
                      s(:str, "foo"),
                      s(:str, "bar"))),
                  s(:send, nil, :assert_equal,
                    s(:str, "bar"),
                    s(:send,
                      s(:ivar, :@gdbm), :[],
                      s(:str, "foo"))),
                  s(:if,
                    s(:send,
                      s(:lvar, :i), :==,
                      s(:int, 0)),
                    s(:op_asgn,
                      s(:lvasgn, :num), :+,
                      s(:int, 1)), nil),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :num),
                    s(:send,
                      s(:ivar, :@gdbm), :size)),
                  s(:send, nil, :assert_equal,
                    s(:str, ""),
                    s(:send,
                      s(:ivar, :@gdbm), :[]=,
                      s(:str, "bar"),
                      s(:str, ""))),
                  s(:send, nil, :assert_equal,
                    s(:str, ""),
                    s(:send,
                      s(:ivar, :@gdbm), :[],
                      s(:str, "bar"))),
                  s(:if,
                    s(:send,
                      s(:lvar, :i), :==,
                      s(:int, 0)),
                    s(:op_asgn,
                      s(:lvasgn, :num), :+,
                      s(:int, 1)), nil),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :num),
                    s(:send,
                      s(:ivar, :@gdbm), :size)),
                  s(:send, nil, :assert_equal,
                    s(:str, ""),
                    s(:send,
                      s(:ivar, :@gdbm), :[]=,
                      s(:str, ""),
                      s(:str, ""))),
                  s(:send, nil, :assert_equal,
                    s(:str, ""),
                    s(:send,
                      s(:ivar, :@gdbm), :[],
                      s(:str, ""))),
                  s(:if,
                    s(:send,
                      s(:lvar, :i), :==,
                      s(:int, 0)),
                    s(:op_asgn,
                      s(:lvasgn, :num), :+,
                      s(:int, 1)), nil),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :num),
                    s(:send,
                      s(:ivar, :@gdbm), :size)),
                  s(:send, nil, :assert_equal,
                    s(:str, "200"),
                    s(:send,
                      s(:ivar, :@gdbm), :[]=,
                      s(:str, "100"),
                      s(:str, "200"))),
                  s(:send, nil, :assert_equal,
                    s(:str, "200"),
                    s(:send,
                      s(:ivar, :@gdbm), :[],
                      s(:str, "100"))),
                  s(:if,
                    s(:send,
                      s(:lvar, :i), :==,
                      s(:int, 0)),
                    s(:op_asgn,
                      s(:lvasgn, :num), :+,
                      s(:int, 1)), nil),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :num),
                    s(:send,
                      s(:ivar, :@gdbm), :size)),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:str, "y"), :*,
                      s(:int, 100)),
                    s(:send,
                      s(:ivar, :@gdbm), :[]=,
                      s(:send,
                        s(:str, "x"), :*,
                        s(:int, 100)),
                      s(:send,
                        s(:str, "y"), :*,
                        s(:int, 100)))),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:str, "y"), :*,
                      s(:int, 100)),
                    s(:send,
                      s(:ivar, :@gdbm), :[],
                      s(:send,
                        s(:str, "x"), :*,
                        s(:int, 100)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :i), :==,
                      s(:int, 0)),
                    s(:op_asgn,
                      s(:lvasgn, :num), :+,
                      s(:int, 1)), nil),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :num),
                    s(:send,
                      s(:ivar, :@gdbm), :size)))))),
          s(:def, :test_key,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, "bar"),
                s(:send,
                  s(:ivar, :@gdbm), :[]=,
                  s(:str, "foo"),
                  s(:str, "bar"))),
              s(:send, nil, :assert_equal,
                s(:str, "foo"),
                s(:send,
                  s(:ivar, :@gdbm), :key,
                  s(:str, "bar"))),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:ivar, :@gdbm), :[],
                  s(:str, "bar"))))),
          s(:def, :test_values_at,
            s(:args),
            s(:begin,
              s(:lvasgn, :keys,
                s(:array,
                  s(:str, "foo"),
                  s(:str, "bar"),
                  s(:str, "baz"))),
              s(:lvasgn, :values,
                s(:array,
                  s(:str, "FOO"),
                  s(:str, "BAR"),
                  s(:str, "BAZ"))),
              s(:masgn,
                s(:mlhs,
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 1))),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 2)))),
                s(:lvar, :values)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :values), :reverse),
                s(:send,
                  s(:ivar, :@gdbm), :values_at,
                  s(:splat,
                    s(:send,
                      s(:lvar, :keys), :reverse)))))),
          s(:def, :test_select_with_block,
            s(:args),
            s(:begin,
              s(:lvasgn, :keys,
                s(:array,
                  s(:str, "foo"),
                  s(:str, "bar"),
                  s(:str, "baz"))),
              s(:lvasgn, :values,
                s(:array,
                  s(:str, "FOO"),
                  s(:str, "BAR"),
                  s(:str, "BAZ"))),
              s(:masgn,
                s(:mlhs,
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 1))),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 2)))),
                s(:lvar, :values)),
              s(:lvasgn, :ret,
                s(:block,
                  s(:send,
                    s(:ivar, :@gdbm), :select),
                  s(:args,
                    s(:arg, :k),
                    s(:arg, :v)),
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:lvar, :k), :upcase),
                      s(:lvar, :v)),
                    s(:send,
                      s(:lvar, :k), :!=,
                      s(:str, "bar"))))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:array,
                    s(:str, "baz"),
                    s(:str, "BAZ")),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "FOO"))),
                s(:send,
                  s(:lvar, :ret), :sort)))),
          s(:def, :test_length,
            s(:args),
            s(:begin,
              s(:lvasgn, :num,
                s(:int, 10)),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:ivar, :@gdbm), :size)),
              s(:block,
                s(:send,
                  s(:lvar, :num), :times),
                s(:args,
                  s(:arg, :i)),
                s(:begin,
                  s(:lvasgn, :i,
                    s(:send,
                      s(:lvar, :i), :to_s)),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:lvar, :i),
                    s(:lvar, :i)))),
              s(:send, nil, :assert_equal,
                s(:lvar, :num),
                s(:send,
                  s(:ivar, :@gdbm), :size)),
              s(:send,
                s(:ivar, :@gdbm), :shift),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :num), :-,
                  s(:int, 1)),
                s(:send,
                  s(:ivar, :@gdbm), :size)))),
          s(:def, :test_empty?,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:ivar, :@gdbm), :empty?)),
              s(:send,
                s(:ivar, :@gdbm), :[]=,
                s(:str, "foo"),
                s(:str, "FOO")),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:ivar, :@gdbm), :empty?)))),
          s(:def, :test_each_pair,
            s(:args),
            s(:begin,
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:ivar, :@gdbm), :each_pair),
                s(:args),
                s(:op_asgn,
                  s(:lvasgn, :n), :+,
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:lvar, :n)),
              s(:lvasgn, :keys,
                s(:array,
                  s(:str, "foo"),
                  s(:str, "bar"),
                  s(:str, "baz"))),
              s(:lvasgn, :values,
                s(:array,
                  s(:str, "FOO"),
                  s(:str, "BAR"),
                  s(:str, "BAZ"))),
              s(:masgn,
                s(:mlhs,
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 1))),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 2)))),
                s(:lvar, :values)),
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:lvasgn, :ret,
                s(:block,
                  s(:send,
                    s(:ivar, :@gdbm), :each_pair),
                  s(:args,
                    s(:arg, :key),
                    s(:arg, :val)),
                  s(:begin,
                    s(:send, nil, :assert_not_nil,
                      s(:lvasgn, :i,
                        s(:send,
                          s(:lvar, :keys), :index,
                          s(:lvar, :key)))),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :val),
                      s(:send,
                        s(:lvar, :values), :[],
                        s(:lvar, :i))),
                    s(:op_asgn,
                      s(:lvasgn, :n), :+,
                      s(:int, 1))))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :keys), :size),
                s(:lvar, :n)),
              s(:send, nil, :assert_equal,
                s(:ivar, :@gdbm),
                s(:lvar, :ret)))),
          s(:def, :test_each_value,
            s(:args),
            s(:begin,
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:ivar, :@gdbm), :each_value),
                s(:args),
                s(:op_asgn,
                  s(:lvasgn, :n), :+,
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:lvar, :n)),
              s(:lvasgn, :keys,
                s(:array,
                  s(:str, "foo"),
                  s(:str, "bar"),
                  s(:str, "baz"))),
              s(:lvasgn, :values,
                s(:array,
                  s(:str, "FOO"),
                  s(:str, "BAR"),
                  s(:str, "BAZ"))),
              s(:masgn,
                s(:mlhs,
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 1))),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 2)))),
                s(:lvar, :values)),
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:lvasgn, :ret,
                s(:block,
                  s(:send,
                    s(:ivar, :@gdbm), :each_value),
                  s(:args,
                    s(:arg, :val)),
                  s(:begin,
                    s(:send, nil, :assert_not_nil,
                      s(:lvasgn, :key,
                        s(:send,
                          s(:ivar, :@gdbm), :key,
                          s(:lvar, :val)))),
                    s(:send, nil, :assert_not_nil,
                      s(:lvasgn, :i,
                        s(:send,
                          s(:lvar, :keys), :index,
                          s(:lvar, :key)))),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :val),
                      s(:send,
                        s(:lvar, :values), :[],
                        s(:lvar, :i))),
                    s(:op_asgn,
                      s(:lvasgn, :n), :+,
                      s(:int, 1))))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :keys), :size),
                s(:lvar, :n)),
              s(:send, nil, :assert_equal,
                s(:ivar, :@gdbm),
                s(:lvar, :ret)))),
          s(:def, :test_each_key,
            s(:args),
            s(:begin,
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:ivar, :@gdbm), :each_key),
                s(:args),
                s(:op_asgn,
                  s(:lvasgn, :n), :+,
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:lvar, :n)),
              s(:lvasgn, :keys,
                s(:array,
                  s(:str, "foo"),
                  s(:str, "bar"),
                  s(:str, "baz"))),
              s(:lvasgn, :values,
                s(:array,
                  s(:str, "FOO"),
                  s(:str, "BAR"),
                  s(:str, "BAZ"))),
              s(:masgn,
                s(:mlhs,
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 1))),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 2)))),
                s(:lvar, :values)),
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:lvasgn, :ret,
                s(:block,
                  s(:send,
                    s(:ivar, :@gdbm), :each_key),
                  s(:args,
                    s(:arg, :key)),
                  s(:begin,
                    s(:send, nil, :assert_not_nil,
                      s(:lvasgn, :i,
                        s(:send,
                          s(:lvar, :keys), :index,
                          s(:lvar, :key)))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:ivar, :@gdbm), :[],
                        s(:lvar, :key)),
                      s(:send,
                        s(:lvar, :values), :[],
                        s(:lvar, :i))),
                    s(:op_asgn,
                      s(:lvasgn, :n), :+,
                      s(:int, 1))))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :keys), :size),
                s(:lvar, :n)),
              s(:send, nil, :assert_equal,
                s(:ivar, :@gdbm),
                s(:lvar, :ret)))),
          s(:def, :test_each_key_without_block,
            s(:args),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Enumerator),
              s(:send,
                s(:ivar, :@gdbm), :each_key))),
          s(:def, :test_keys,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:array),
                s(:send,
                  s(:ivar, :@gdbm), :keys)),
              s(:lvasgn, :keys,
                s(:array,
                  s(:str, "foo"),
                  s(:str, "bar"),
                  s(:str, "baz"))),
              s(:lvasgn, :values,
                s(:array,
                  s(:str, "FOO"),
                  s(:str, "BAR"),
                  s(:str, "BAZ"))),
              s(:masgn,
                s(:mlhs,
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 1))),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 2)))),
                s(:lvar, :values)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :keys), :sort),
                s(:send,
                  s(:send,
                    s(:ivar, :@gdbm), :keys), :sort)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :values), :sort),
                s(:send,
                  s(:send,
                    s(:ivar, :@gdbm), :values), :sort)))),
          s(:def, :test_values,
            s(:args),
            s(:send, nil, :test_keys)),
          s(:def, :test_shift,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:ivar, :@gdbm), :shift)),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:ivar, :@gdbm), :size)),
              s(:lvasgn, :keys,
                s(:array,
                  s(:str, "foo"),
                  s(:str, "bar"),
                  s(:str, "baz"))),
              s(:lvasgn, :values,
                s(:array,
                  s(:str, "FOO"),
                  s(:str, "BAR"),
                  s(:str, "BAZ"))),
              s(:masgn,
                s(:mlhs,
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 1))),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 2)))),
                s(:lvar, :values)),
              s(:lvasgn, :ret_keys,
                s(:array)),
              s(:lvasgn, :ret_values,
                s(:array)),
              s(:while,
                s(:lvasgn, :ret,
                  s(:send,
                    s(:ivar, :@gdbm), :shift)),
                s(:begin,
                  s(:send,
                    s(:lvar, :ret_keys), :push,
                    s(:send,
                      s(:lvar, :ret), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:lvar, :ret_values), :push,
                    s(:send,
                      s(:lvar, :ret), :[],
                      s(:int, 1))),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:send,
                        s(:lvar, :keys), :size), :-,
                      s(:send,
                        s(:lvar, :ret_keys), :size)),
                    s(:send,
                      s(:ivar, :@gdbm), :size)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :keys), :sort),
                s(:send,
                  s(:lvar, :ret_keys), :sort)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :values), :sort),
                s(:send,
                  s(:lvar, :ret_values), :sort)))),
          s(:def, :test_delete,
            s(:args),
            s(:begin,
              s(:lvasgn, :keys,
                s(:array,
                  s(:str, "foo"),
                  s(:str, "bar"),
                  s(:str, "baz"))),
              s(:lvasgn, :values,
                s(:array,
                  s(:str, "FOO"),
                  s(:str, "BAR"),
                  s(:str, "BAZ"))),
              s(:lvasgn, :key,
                s(:send,
                  s(:lvar, :keys), :[],
                  s(:int, 1))),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:ivar, :@gdbm), :delete,
                  s(:lvar, :key))),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:ivar, :@gdbm), :size)),
              s(:masgn,
                s(:mlhs,
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 1))),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 2)))),
                s(:lvar, :values)),
              s(:send, nil, :assert_equal,
                s(:str, "BAR"),
                s(:send,
                  s(:ivar, :@gdbm), :delete,
                  s(:lvar, :key))),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:ivar, :@gdbm), :[],
                  s(:lvar, :key))),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:ivar, :@gdbm), :size)),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:ivar, :@gdbm), :delete,
                  s(:lvar, :key))))),
          s(:def, :test_delete_with_block,
            s(:args),
            s(:begin,
              s(:lvasgn, :key,
                s(:str, "no called block")),
              s(:send,
                s(:ivar, :@gdbm), :[]=,
                s(:lvar, :key),
                s(:str, "foo")),
              s(:send, nil, :assert_equal,
                s(:str, "foo"),
                s(:block,
                  s(:send,
                    s(:ivar, :@gdbm), :delete,
                    s(:lvar, :key)),
                  s(:args,
                    s(:arg, :k)),
                  s(:send,
                    s(:lvar, :k), :replace,
                    s(:str, "called block")))),
              s(:send, nil, :assert_equal,
                s(:str, "no called block"),
                s(:lvar, :key)),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:ivar, :@gdbm), :size)),
              s(:lvasgn, :key,
                s(:str, "no called block")),
              s(:send, nil, :assert_equal,
                s(:sym, :blockval),
                s(:block,
                  s(:send,
                    s(:ivar, :@gdbm), :delete,
                    s(:lvar, :key)),
                  s(:args,
                    s(:arg, :k)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :k), :replace,
                      s(:str, "called block")),
                    s(:sym, :blockval)))),
              s(:send, nil, :assert_equal,
                s(:str, "called block"),
                s(:lvar, :key)),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:ivar, :@gdbm), :size)))),
          s(:def, :test_delete_if,
            s(:args),
            s(:begin,
              s(:lvasgn, :v,
                s(:str, "0")),
              s(:block,
                s(:send,
                  s(:int, 100), :times),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:lvar, :v),
                    s(:lvar, :v)),
                  s(:lvasgn, :v,
                    s(:send,
                      s(:lvar, :v), :next)))),
              s(:lvasgn, :ret,
                s(:block,
                  s(:send,
                    s(:ivar, :@gdbm), :delete_if),
                  s(:args,
                    s(:arg, :key),
                    s(:arg, :val)),
                  s(:send,
                    s(:send,
                      s(:lvar, :key), :to_i), :<,
                    s(:int, 50)))),
              s(:send, nil, :assert_equal,
                s(:ivar, :@gdbm),
                s(:lvar, :ret)),
              s(:send, nil, :check_size,
                s(:int, 50),
                s(:ivar, :@gdbm)),
              s(:lvasgn, :ret,
                s(:block,
                  s(:send,
                    s(:ivar, :@gdbm), :delete_if),
                  s(:args,
                    s(:arg, :key),
                    s(:arg, :val)),
                  s(:send,
                    s(:send,
                      s(:lvar, :key), :to_i), :>=,
                    s(:int, 50)))),
              s(:send, nil, :assert_equal,
                s(:ivar, :@gdbm),
                s(:lvar, :ret)),
              s(:send, nil, :check_size,
                s(:int, 0),
                s(:ivar, :@gdbm)),
              s(:lvasgn, :v,
                s(:str, "0")),
              s(:block,
                s(:send,
                  s(:int, 100), :times),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:lvar, :v),
                    s(:lvar, :v)),
                  s(:lvasgn, :v,
                    s(:send,
                      s(:lvar, :v), :next)))),
              s(:send, nil, :check_size,
                s(:int, 100),
                s(:ivar, :@gdbm)),
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:ivar, :@gdbm), :delete_if),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :val)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :n), :>,
                      s(:int, 50)),
                    s(:break), nil),
                  s(:op_asgn,
                    s(:lvasgn, :n), :+,
                    s(:int, 1)),
                  s(:true))),
              s(:send, nil, :assert_equal,
                s(:int, 51),
                s(:lvar, :n)),
              s(:send, nil, :check_size,
                s(:int, 49),
                s(:ivar, :@gdbm)),
              s(:send,
                s(:ivar, :@gdbm), :clear),
              s(:lvasgn, :v,
                s(:str, "0")),
              s(:block,
                s(:send,
                  s(:int, 100), :times),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:lvar, :v),
                    s(:lvar, :v)),
                  s(:lvasgn, :v,
                    s(:send,
                      s(:lvar, :v), :next)))),
              s(:send, nil, :check_size,
                s(:int, 100),
                s(:ivar, :@gdbm)),
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:kwbegin,
                s(:rescue,
                  s(:block,
                    s(:send,
                      s(:ivar, :@gdbm), :delete_if),
                    s(:args,
                      s(:arg, :key),
                      s(:arg, :val)),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :n), :>,
                          s(:int, 50)),
                        s(:send, nil, :raise,
                          s(:str, "runtime error")), nil),
                      s(:op_asgn,
                        s(:lvasgn, :n), :+,
                        s(:int, 1)),
                      s(:true))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :RuntimeError)), nil, nil), nil)),
              s(:send, nil, :assert_equal,
                s(:int, 51),
                s(:lvar, :n)),
              s(:send, nil, :check_size,
                s(:int, 49),
                s(:ivar, :@gdbm)))),
          s(:def, :test_reject,
            s(:args),
            s(:begin,
              s(:lvasgn, :v,
                s(:str, "0")),
              s(:block,
                s(:send,
                  s(:int, 100), :times),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:lvar, :v),
                    s(:lvar, :v)),
                  s(:lvasgn, :v,
                    s(:send,
                      s(:lvar, :v), :next)))),
              s(:lvasgn, :hash,
                s(:block,
                  s(:send,
                    s(:ivar, :@gdbm), :reject),
                  s(:args,
                    s(:arg, :key),
                    s(:arg, :val)),
                  s(:send,
                    s(:send,
                      s(:lvar, :key), :to_i), :<,
                    s(:int, 50)))),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :Hash),
                s(:lvar, :hash)),
              s(:send, nil, :assert_equal,
                s(:int, 100),
                s(:send,
                  s(:ivar, :@gdbm), :size)),
              s(:send, nil, :assert_equal,
                s(:int, 50),
                s(:send,
                  s(:lvar, :hash), :size)),
              s(:block,
                s(:send,
                  s(:lvar, :hash), :each_pair),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :val)),
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:false),
                    s(:send,
                      s(:send,
                        s(:lvar, :key), :to_i), :<,
                      s(:int, 50))),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :key),
                    s(:lvar, :val)))),
              s(:lvasgn, :hash,
                s(:block,
                  s(:send,
                    s(:ivar, :@gdbm), :reject),
                  s(:args,
                    s(:arg, :key),
                    s(:arg, :val)),
                  s(:send,
                    s(:send,
                      s(:lvar, :key), :to_i), :<,
                    s(:int, 100)))),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :Hash),
                s(:lvar, :hash)),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :hash), :empty?)))),
          s(:def, :test_clear,
            s(:args),
            s(:begin,
              s(:lvasgn, :v,
                s(:str, "1")),
              s(:block,
                s(:send,
                  s(:int, 100), :times),
                s(:args),
                s(:begin,
                  s(:lvasgn, :v,
                    s(:send,
                      s(:lvar, :v), :next)),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:lvar, :v),
                    s(:lvar, :v)))),
              s(:send, nil, :assert_equal,
                s(:ivar, :@gdbm),
                s(:send,
                  s(:ivar, :@gdbm), :clear)),
              s(:lvasgn, :i,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:ivar, :@gdbm), :each),
                s(:args),
                s(:op_asgn,
                  s(:lvasgn, :i), :+,
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:ivar, :@gdbm), :size),
                s(:lvar, :i)),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:lvar, :i)))),
          s(:def, :test_invert,
            s(:args),
            s(:begin,
              s(:lvasgn, :v,
                s(:str, "0")),
              s(:block,
                s(:send,
                  s(:int, 100), :times),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:lvar, :v),
                    s(:lvar, :v)),
                  s(:lvasgn, :v,
                    s(:send,
                      s(:lvar, :v), :next)))),
              s(:lvasgn, :hash,
                s(:send,
                  s(:ivar, :@gdbm), :invert)),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :Hash),
                s(:lvar, :hash)),
              s(:send, nil, :assert_equal,
                s(:int, 100),
                s(:send,
                  s(:lvar, :hash), :size)),
              s(:block,
                s(:send,
                  s(:lvar, :hash), :each_pair),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :val)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :key), :to_i),
                  s(:send,
                    s(:lvar, :val), :to_i))))),
          s(:def, :test_update,
            s(:args),
            s(:begin,
              s(:lvasgn, :hash,
                s(:hash)),
              s(:lvasgn, :v,
                s(:str, "0")),
              s(:block,
                s(:send,
                  s(:int, 100), :times),
                s(:args),
                s(:begin,
                  s(:lvasgn, :v,
                    s(:send,
                      s(:lvar, :v), :next)),
                  s(:send,
                    s(:lvar, :hash), :[]=,
                    s(:lvar, :v),
                    s(:lvar, :v)))),
              s(:send,
                s(:ivar, :@gdbm), :[]=,
                s(:str, "101"),
                s(:str, "101")),
              s(:send,
                s(:ivar, :@gdbm), :update,
                s(:lvar, :hash)),
              s(:send, nil, :assert_equal,
                s(:int, 101),
                s(:send,
                  s(:ivar, :@gdbm), :size)),
              s(:block,
                s(:send,
                  s(:ivar, :@gdbm), :each_pair),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :val)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :key), :to_i),
                  s(:send,
                    s(:lvar, :val), :to_i))))),
          s(:def, :test_replace,
            s(:args),
            s(:begin,
              s(:lvasgn, :hash,
                s(:hash)),
              s(:lvasgn, :v,
                s(:str, "0")),
              s(:block,
                s(:send,
                  s(:int, 100), :times),
                s(:args),
                s(:begin,
                  s(:lvasgn, :v,
                    s(:send,
                      s(:lvar, :v), :next)),
                  s(:send,
                    s(:lvar, :hash), :[]=,
                    s(:lvar, :v),
                    s(:lvar, :v)))),
              s(:send,
                s(:ivar, :@gdbm), :[]=,
                s(:str, "101"),
                s(:str, "101")),
              s(:send,
                s(:ivar, :@gdbm), :replace,
                s(:lvar, :hash)),
              s(:send, nil, :assert_equal,
                s(:int, 100),
                s(:send,
                  s(:ivar, :@gdbm), :size)),
              s(:block,
                s(:send,
                  s(:ivar, :@gdbm), :each_pair),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :val)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :key), :to_i),
                  s(:send,
                    s(:lvar, :val), :to_i))))),
          s(:def, :test_reorganize,
            s(:args),
            s(:begin,
              s(:lvasgn, :size1,
                s(:send,
                  s(:const, nil, :File), :size,
                  s(:ivar, :@path))),
              s(:lvasgn, :i,
                s(:str, "1")),
              s(:block,
                s(:send,
                  s(:int, 1000), :times),
                s(:args),
                s(:begin,
                  s(:lvasgn, :i,
                    s(:send,
                      s(:lvar, :i), :next)),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:lvar, :i),
                    s(:lvar, :i)))),
              s(:send,
                s(:ivar, :@gdbm), :clear),
              s(:send,
                s(:ivar, :@gdbm), :sync),
              s(:lvasgn, :size2,
                s(:send,
                  s(:const, nil, :File), :size,
                  s(:ivar, :@path))),
              s(:send,
                s(:ivar, :@gdbm), :reorganize),
              s(:send,
                s(:ivar, :@gdbm), :sync),
              s(:lvasgn, :size3,
                s(:send,
                  s(:const, nil, :File), :size,
                  s(:ivar, :@path))),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :size1), :<,
                  s(:lvar, :size2))),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :size3), :<,
                  s(:lvar, :size2))),
              s(:send, nil, :assert_equal,
                s(:lvar, :size1),
                s(:lvar, :size3)))),
          s(:def, :test_sync,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :GDBM),
                s(:lvasgn, :gdbm,
                  s(:send,
                    s(:const, nil, :GDBM), :open,
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@tmpdir)),
                      s(:str, "/"),
                      s(:begin,
                        s(:ivar, :@prefix))),
                    s(:int, 438),
                    s(:const,
                      s(:const, nil, :GDBM), :FAST)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :gdbm), :sync),
                s(:lvar, :gdbm)),
              s(:send,
                s(:lvar, :gdbm), :close),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :GDBM),
                s(:lvasgn, :gdbm,
                  s(:send,
                    s(:const, nil, :GDBM), :open,
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@tmpdir)),
                      s(:str, "/"),
                      s(:begin,
                        s(:ivar, :@prefix))),
                    s(:int, 438)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :gdbm), :sync),
                s(:lvar, :gdbm)),
              s(:send,
                s(:lvar, :gdbm), :close))),
          s(:def, :test_cachesize=,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@gdbm), :cachesize=,
                s(:int, 1024)),
              s(:int, 1024))),
          s(:def, :test_fastmode=,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@gdbm), :fastmode=,
                s(:true)),
              s(:true))),
          s(:def, :test_syncmode=,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@gdbm), :syncmode=,
                s(:true)),
              s(:true))),
          s(:def, :test_haskey?,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, "bar"),
                s(:send,
                  s(:ivar, :@gdbm), :[]=,
                  s(:str, "foo"),
                  s(:str, "bar"))),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:ivar, :@gdbm), :has_key?,
                  s(:str, "foo"))),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:ivar, :@gdbm), :has_key?,
                  s(:str, "bar"))))),
          s(:def, :test_has_value?,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, "bar"),
                s(:send,
                  s(:ivar, :@gdbm), :[]=,
                  s(:str, "foo"),
                  s(:str, "bar"))),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:ivar, :@gdbm), :has_value?,
                  s(:str, "bar"))),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:ivar, :@gdbm), :has_value?,
                  s(:str, "foo"))))),
          s(:def, :test_to_a,
            s(:args),
            s(:begin,
              s(:lvasgn, :v,
                s(:str, "0")),
              s(:block,
                s(:send,
                  s(:int, 100), :times),
                s(:args),
                s(:begin,
                  s(:lvasgn, :v,
                    s(:send,
                      s(:lvar, :v), :next)),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:lvar, :v),
                    s(:lvar, :v)))),
              s(:lvasgn, :ary,
                s(:send,
                  s(:ivar, :@gdbm), :to_a)),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :Array),
                s(:lvar, :ary)),
              s(:send, nil, :assert_equal,
                s(:int, 100),
                s(:send,
                  s(:lvar, :ary), :size)),
              s(:block,
                s(:send,
                  s(:lvar, :ary), :each),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :val)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :key), :to_i),
                  s(:send,
                    s(:lvar, :val), :to_i))))),
          s(:def, :test_to_hash,
            s(:args),
            s(:begin,
              s(:lvasgn, :v,
                s(:str, "0")),
              s(:block,
                s(:send,
                  s(:int, 100), :times),
                s(:args),
                s(:begin,
                  s(:lvasgn, :v,
                    s(:send,
                      s(:lvar, :v), :next)),
                  s(:send,
                    s(:ivar, :@gdbm), :[]=,
                    s(:lvar, :v),
                    s(:lvar, :v)))),
              s(:lvasgn, :hash,
                s(:send,
                  s(:ivar, :@gdbm), :to_hash)),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :Hash),
                s(:lvar, :hash)),
              s(:send, nil, :assert_equal,
                s(:int, 100),
                s(:send,
                  s(:lvar, :hash), :size)),
              s(:block,
                s(:send,
                  s(:lvar, :hash), :each),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :val)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :key), :to_i),
                  s(:send,
                    s(:lvar, :val), :to_i))))))),
      s(:class,
        s(:const, nil, :TestGDBM2),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :setup,
            s(:args),
            s(:ivasgn, :@tmproot,
              s(:send,
                s(:const, nil, :Dir), :mktmpdir,
                s(:str, "ruby-gdbm")))),
          s(:def, :teardown,
            s(:args),
            s(:if,
              s(:send,
                s(:const, nil, :File), :directory?,
                s(:ivar, :@tmproot)),
              s(:send,
                s(:const, nil, :FileUtils), :remove_entry_secure,
                s(:ivar, :@tmproot)), nil)),
          s(:def, :test_reader_open_notexist,
            s(:args),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :Errno), :ENOENT)),
              s(:args),
              s(:send,
                s(:const, nil, :GDBM), :open,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@tmproot)),
                  s(:str, "/a")),
                s(:int, 438),
                s(:const,
                  s(:const, nil, :GDBM), :READER)))),
          s(:def, :test_writer_open_notexist,
            s(:args),
            s(:begin,
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "1\\.8\\.0"),
                    s(:regopt)),
                  s(:const,
                    s(:const, nil, :GDBM), :VERSION)),
                s(:send, nil, :skip,
                  s(:str, "gdbm_open(GDBM_WRITER) is broken on libgdbm 1.8.0")), nil),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :Errno), :ENOENT)),
                s(:args),
                s(:send,
                  s(:const, nil, :GDBM), :open,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@tmproot)),
                    s(:str, "/a")),
                  s(:int, 438),
                  s(:const,
                    s(:const, nil, :GDBM), :WRITER))))),
          s(:def, :test_wrcreat_open_notexist,
            s(:args),
            s(:begin,
              s(:lvasgn, :v,
                s(:send,
                  s(:const, nil, :GDBM), :open,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@tmproot)),
                    s(:str, "/a")),
                  s(:int, 438),
                  s(:const,
                    s(:const, nil, :GDBM), :WRCREAT))),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :GDBM),
                s(:lvar, :v)),
              s(:send,
                s(:lvar, :v), :close))),
          s(:def, :test_newdb_open_notexist,
            s(:args),
            s(:begin,
              s(:lvasgn, :v,
                s(:send,
                  s(:const, nil, :GDBM), :open,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@tmproot)),
                    s(:str, "/a")),
                  s(:int, 438),
                  s(:const,
                    s(:const, nil, :GDBM), :NEWDB))),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :GDBM),
                s(:lvar, :v)),
              s(:send,
                s(:lvar, :v), :close))),
          s(:def, :test_reader_open,
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:const, nil, :GDBM), :open,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@tmproot)),
                    s(:str, "/a.dbm"))),
                s(:args), nil),
              s(:lvasgn, :v,
                s(:block,
                  s(:send,
                    s(:const, nil, :GDBM), :open,
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@tmproot)),
                      s(:str, "/a.dbm")),
                    s(:nil),
                    s(:const,
                      s(:const, nil, :GDBM), :READER)),
                  s(:args,
                    s(:arg, :d)),
                  s(:begin,
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const, nil, :GDBMError)),
                      s(:args),
                      s(:send,
                        s(:lvar, :d), :[]=,
                        s(:str, "k"),
                        s(:str, "v"))),
                    s(:true)))),
              s(:send, nil, :assert,
                s(:lvar, :v)))),
          s(:def, :test_newdb_open,
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:const, nil, :GDBM), :open,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@tmproot)),
                    s(:str, "/a.dbm"))),
                s(:args,
                  s(:arg, :dbm)),
                s(:send,
                  s(:lvar, :dbm), :[]=,
                  s(:str, "k"),
                  s(:str, "v"))),
              s(:lvasgn, :v,
                s(:block,
                  s(:send,
                    s(:const, nil, :GDBM), :open,
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@tmproot)),
                      s(:str, "/a.dbm")),
                    s(:nil),
                    s(:const,
                      s(:const, nil, :GDBM), :NEWDB)),
                  s(:args,
                    s(:arg, :d)),
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:int, 0),
                      s(:send,
                        s(:lvar, :d), :length)),
                    s(:send, nil, :assert_nil,
                      s(:send,
                        s(:lvar, :d), :[],
                        s(:str, "k"))),
                    s(:true)))),
              s(:send, nil, :assert,
                s(:lvar, :v)))),
          s(:def, :test_freeze,
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :GDBM), :open,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@tmproot)),
                  s(:str, "/a.dbm"))),
              s(:args,
                s(:arg, :d)),
              s(:begin,
                s(:send,
                  s(:lvar, :d), :freeze),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :RuntimeError)),
                  s(:args),
                  s(:send,
                    s(:lvar, :d), :[]=,
                    s(:str, "k"),
                    s(:str, "v"))))))))), nil))
