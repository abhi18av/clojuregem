s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "webrick/utils")),
  s(:class,
    s(:const, nil, :TestWEBrickUtils),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :assert_expired,
        s(:args,
          s(:arg, :m)),
        s(:block,
          s(:send,
            s(:const, nil, :Thread), :handle_interrupt,
            s(:hash,
              s(:pair,
                s(:const,
                  s(:const, nil, :Timeout), :Error),
                s(:sym, :never)),
              s(:pair,
                s(:const, nil, :EX),
                s(:sym, :never)))),
          s(:args),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:send,
                s(:const,
                  s(:lvar, :m), :TimeoutHandler), :instance), :instance_variable_get,
              s(:sym, :@timeout_info))))),
      s(:def, :assert_not_expired,
        s(:args,
          s(:arg, :m)),
        s(:block,
          s(:send,
            s(:const, nil, :Thread), :handle_interrupt,
            s(:hash,
              s(:pair,
                s(:const,
                  s(:const, nil, :Timeout), :Error),
                s(:sym, :never)),
              s(:pair,
                s(:const, nil, :EX),
                s(:sym, :never)))),
          s(:args),
          s(:send, nil, :assert_not_empty,
            s(:send,
              s(:send,
                s(:const,
                  s(:lvar, :m), :TimeoutHandler), :instance), :instance_variable_get,
              s(:sym, :@timeout_info))))),
      s(:casgn, nil, :EX,
        s(:send,
          s(:const, nil, :Class), :new,
          s(:const, nil, :StandardError))),
      s(:def, :test_no_timeout,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:const,
              s(:const, nil, :WEBrick), :Utils)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:block,
              s(:send,
                s(:lvar, :m), :timeout,
                s(:int, 10)),
              s(:args),
              s(:sym, :foo))),
          s(:send, nil, :assert_expired,
            s(:lvar, :m)))),
      s(:def, :test_nested_timeout_outer,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:const,
              s(:const, nil, :WEBrick), :Utils)),
          s(:lvasgn, :i,
            s(:int, 0)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Timeout), :Error)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :m), :timeout,
                s(:float, 0.2)),
              s(:args),
              s(:begin,
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const, nil, :Timeout), :Error)),
                  s(:args),
                  s(:block,
                    s(:send,
                      s(:lvar, :m), :timeout,
                      s(:float, 0.1)),
                    s(:args),
                    s(:begin,
                      s(:op_asgn,
                        s(:lvasgn, :i), :+,
                        s(:int, 1)),
                      s(:send, nil, :sleep)))),
                s(:send, nil, :assert_not_expired,
                  s(:lvar, :m)),
                s(:op_asgn,
                  s(:lvasgn, :i), :+,
                  s(:int, 1)),
                s(:send, nil, :sleep)))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:lvar, :i)),
          s(:send, nil, :assert_expired,
            s(:lvar, :m)))),
      s(:def, :test_timeout_default_execption,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:const,
              s(:const, nil, :WEBrick), :Utils)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Timeout), :Error)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :m), :timeout,
                s(:float, 0.01)),
              s(:args),
              s(:send, nil, :sleep))),
          s(:send, nil, :assert_expired,
            s(:lvar, :m)))),
      s(:def, :test_timeout_custom_exception,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:const,
              s(:const, nil, :WEBrick), :Utils)),
          s(:lvasgn, :ex,
            s(:const, nil, :EX)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:lvar, :ex)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :m), :timeout,
                s(:float, 0.01),
                s(:lvar, :ex)),
              s(:args),
              s(:send, nil, :sleep))),
          s(:send, nil, :assert_expired,
            s(:lvar, :m)))),
      s(:def, :test_nested_timeout_inner_custom_exception,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:const,
              s(:const, nil, :WEBrick), :Utils)),
          s(:lvasgn, :ex,
            s(:const, nil, :EX)),
          s(:lvasgn, :i,
            s(:int, 0)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:lvar, :ex)),
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :m), :timeout,
                  s(:int, 10)),
                s(:args),
                s(:block,
                  s(:send,
                    s(:lvar, :m), :timeout,
                    s(:float, 0.01),
                    s(:lvar, :ex)),
                  s(:args),
                  s(:begin,
                    s(:op_asgn,
                      s(:lvasgn, :i), :+,
                      s(:int, 1)),
                    s(:send, nil, :sleep)))),
              s(:send, nil, :sleep))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:lvar, :i)),
          s(:send, nil, :assert_expired,
            s(:lvar, :m)))),
      s(:def, :test_nested_timeout_outer_custom_exception,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:const,
              s(:const, nil, :WEBrick), :Utils)),
          s(:lvasgn, :ex,
            s(:const, nil, :EX)),
          s(:lvasgn, :i,
            s(:int, 0)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Timeout), :Error)),
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :m), :timeout,
                  s(:float, 0.01)),
                s(:args),
                s(:block,
                  s(:send,
                    s(:lvar, :m), :timeout,
                    s(:float, 1.0),
                    s(:lvar, :ex)),
                  s(:args),
                  s(:begin,
                    s(:op_asgn,
                      s(:lvasgn, :i), :+,
                      s(:int, 1)),
                    s(:send, nil, :sleep)))),
              s(:send, nil, :sleep))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:lvar, :i)),
          s(:send, nil, :assert_expired,
            s(:lvar, :m)))),
      s(:def, :test_create_listeners,
        s(:args),
        s(:begin,
          s(:lvasgn, :addr,
            s(:send, nil, :listener_address,
              s(:int, 0))),
          s(:lvasgn, :port,
            s(:send,
              s(:lvar, :addr), :slice!,
              s(:int, 1))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:lvar, :port),
            s(:str, "dynamically chosen port number")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "AF_INET"),
              s(:str, "127.0.0.1"),
              s(:str, "127.0.0.1")),
            s(:lvar, :addr)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "AF_INET"),
              s(:lvar, :port),
              s(:str, "127.0.0.1"),
              s(:str, "127.0.0.1")),
            s(:send, nil, :listener_address,
              s(:lvar, :port)),
            s(:str, "specific port number")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "AF_INET"),
              s(:lvar, :port),
              s(:str, "127.0.0.1"),
              s(:str, "127.0.0.1")),
            s(:send, nil, :listener_address,
              s(:send,
                s(:lvar, :port), :to_s)),
            s(:str, "specific port number string")))),
      s(:def, :listener_address,
        s(:args,
          s(:arg, :port)),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :listeners,
              s(:send,
                s(:const,
                  s(:const, nil, :WEBrick), :Utils), :create_listeners,
                s(:str, "127.0.0.1"),
                s(:lvar, :port))),
            s(:lvasgn, :srv,
              s(:send,
                s(:lvar, :listeners), :first)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :TCPServer),
              s(:lvar, :srv)),
            s(:send,
              s(:lvar, :srv), :addr)),
          s(:if,
            s(:lvar, :listeners),
            s(:send,
              s(:lvar, :listeners), :each,
              s(:block_pass,
                s(:sym, :close))), nil))))))
