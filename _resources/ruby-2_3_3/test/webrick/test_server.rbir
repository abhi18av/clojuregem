s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:send, nil, :require,
    s(:str, "webrick")),
  s(:send, nil, :require_relative,
    s(:str, "utils")),
  s(:class,
    s(:const, nil, :TestWEBrickServer),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:class,
        s(:const, nil, :Echo),
        s(:const,
          s(:const, nil, :WEBrick), :GenericServer),
        s(:def, :run,
          s(:args,
            s(:arg, :sock)),
          s(:while,
            s(:lvasgn, :line,
              s(:send,
                s(:lvar, :sock), :gets)),
            s(:send,
              s(:lvar, :sock), :<<,
              s(:lvar, :line))))),
      s(:def, :test_server,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :TestWEBrick), :start_server,
            s(:const, nil, :Echo)),
          s(:args,
            s(:arg, :server),
            s(:arg, :addr),
            s(:arg, :port),
            s(:arg, :log)),
          s(:block,
            s(:send,
              s(:const, nil, :TCPSocket), :open,
              s(:lvar, :addr),
              s(:lvar, :port)),
            s(:args,
              s(:arg, :sock)),
            s(:begin,
              s(:send,
                s(:lvar, :sock), :puts,
                s(:str, "foo")),
              s(:send, nil, :assert_equal,
                s(:str, "foo\n"),
                s(:send,
                  s(:lvar, :sock), :gets),
                s(:send,
                  s(:lvar, :log), :call)),
              s(:send,
                s(:lvar, :sock), :puts,
                s(:str, "bar")),
              s(:send, nil, :assert_equal,
                s(:str, "bar\n"),
                s(:send,
                  s(:lvar, :sock), :gets),
                s(:send,
                  s(:lvar, :log), :call)),
              s(:send,
                s(:lvar, :sock), :puts,
                s(:str, "baz")),
              s(:send, nil, :assert_equal,
                s(:str, "baz\n"),
                s(:send,
                  s(:lvar, :sock), :gets),
                s(:send,
                  s(:lvar, :log), :call)),
              s(:send,
                s(:lvar, :sock), :puts,
                s(:str, "qux")),
              s(:send, nil, :assert_equal,
                s(:str, "qux\n"),
                s(:send,
                  s(:lvar, :sock), :gets),
                s(:send,
                  s(:lvar, :log), :call)))))),
      s(:def, :test_start_exception,
        s(:args),
        s(:begin,
          s(:lvasgn, :stopped,
            s(:int, 0)),
          s(:lvasgn, :log,
            s(:array)),
          s(:lvasgn, :logger,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :Log), :new,
              s(:lvar, :log),
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :BasicLog), :WARN))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SignalException)),
            s(:args),
            s(:begin,
              s(:lvasgn, :listener,
                s(:send,
                  s(:const, nil, :Object), :new)),
              s(:defs,
                s(:lvar, :listener), :to_io,
                s(:args),
                s(:send, nil, :raise,
                  s(:const, nil, :SignalException),
                  s(:str, "SIGTERM"))),
              s(:defs,
                s(:lvar, :listener), :shutdown,
                s(:args), nil),
              s(:defs,
                s(:lvar, :listener), :close,
                s(:args), nil),
              s(:lvasgn, :server,
                s(:send,
                  s(:const,
                    s(:const, nil, :WEBrick), :HTTPServer), :new,
                  s(:hash,
                    s(:pair,
                      s(:sym, :BindAddress),
                      s(:str, "127.0.0.1")),
                    s(:pair,
                      s(:sym, :Port),
                      s(:int, 0)),
                    s(:pair,
                      s(:sym, :StopCallback),
                      s(:block,
                        s(:send,
                          s(:const, nil, :Proc), :new),
                        s(:args),
                        s(:op_asgn,
                          s(:lvasgn, :stopped), :+,
                          s(:int, 1)))),
                    s(:pair,
                      s(:sym, :Logger),
                      s(:lvar, :logger))))),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :server), :listeners), :[],
                  s(:int, 0)), :close),
              s(:send,
                s(:send,
                  s(:lvar, :server), :listeners), :[]=,
                s(:int, 0),
                s(:lvar, :listener)),
              s(:send,
                s(:lvar, :server), :start))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:lvar, :stopped)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :log), :length)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "FATAL SignalException: SIGTERM"),
              s(:regopt)),
            s(:send,
              s(:lvar, :log), :[],
              s(:int, 0))))),
      s(:def, :test_callbacks,
        s(:args),
        s(:begin,
          s(:lvasgn, :accepted,
            s(:lvasgn, :started,
              s(:lvasgn, :stopped,
                s(:int, 0)))),
          s(:lvasgn, :config,
            s(:hash,
              s(:pair,
                s(:sym, :AcceptCallback),
                s(:block,
                  s(:send,
                    s(:const, nil, :Proc), :new),
                  s(:args),
                  s(:op_asgn,
                    s(:lvasgn, :accepted), :+,
                    s(:int, 1)))),
              s(:pair,
                s(:sym, :StartCallback),
                s(:block,
                  s(:send,
                    s(:const, nil, :Proc), :new),
                  s(:args),
                  s(:op_asgn,
                    s(:lvasgn, :started), :+,
                    s(:int, 1)))),
              s(:pair,
                s(:sym, :StopCallback),
                s(:block,
                  s(:send,
                    s(:const, nil, :Proc), :new),
                  s(:args),
                  s(:op_asgn,
                    s(:lvasgn, :stopped), :+,
                    s(:int, 1)))))),
          s(:block,
            s(:send,
              s(:const, nil, :TestWEBrick), :start_server,
              s(:const, nil, :Echo),
              s(:lvar, :config)),
            s(:args,
              s(:arg, :server),
              s(:arg, :addr),
              s(:arg, :port),
              s(:arg, :log)),
            s(:begin,
              s(:while,
                s(:send,
                  s(:send,
                    s(:lvar, :server), :status), :!=,
                  s(:sym, :Running)),
                s(:true)),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:lvar, :started),
                s(:send,
                  s(:lvar, :log), :call)),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:lvar, :stopped),
                s(:send,
                  s(:lvar, :log), :call)),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:lvar, :accepted),
                s(:send,
                  s(:lvar, :log), :call)),
              s(:block,
                s(:send,
                  s(:const, nil, :TCPSocket), :open,
                  s(:lvar, :addr),
                  s(:lvar, :port)),
                s(:args,
                  s(:arg, :sock)),
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :sock), :<<,
                      s(:str, "foo\n"))), :gets)),
              s(:block,
                s(:send,
                  s(:const, nil, :TCPSocket), :open,
                  s(:lvar, :addr),
                  s(:lvar, :port)),
                s(:args,
                  s(:arg, :sock)),
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :sock), :<<,
                      s(:str, "foo\n"))), :gets)),
              s(:block,
                s(:send,
                  s(:const, nil, :TCPSocket), :open,
                  s(:lvar, :addr),
                  s(:lvar, :port)),
                s(:args,
                  s(:arg, :sock)),
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :sock), :<<,
                      s(:str, "foo\n"))), :gets)),
              s(:send, nil, :assert_equal,
                s(:int, 3),
                s(:lvar, :accepted),
                s(:send,
                  s(:lvar, :log), :call)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:lvar, :started)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:lvar, :stopped)))),
      s(:def, :test_daemon,
        s(:args),
        s(:kwbegin,
          s(:ensure,
            s(:rescue,
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :r),
                    s(:lvasgn, :w)),
                  s(:send,
                    s(:const, nil, :IO), :pipe)),
                s(:lvasgn, :pid1,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Process), :fork),
                    s(:args),
                    s(:begin,
                      s(:send,
                        s(:lvar, :r), :close),
                      s(:send,
                        s(:const,
                          s(:const, nil, :WEBrick), :Daemon), :start),
                      s(:send,
                        s(:lvar, :w), :puts,
                        s(:send,
                          s(:const, nil, :Process), :pid)),
                      s(:send, nil, :sleep,
                        s(:int, 10))))),
                s(:lvasgn, :pid2,
                  s(:send,
                    s(:send,
                      s(:lvar, :r), :gets), :to_i)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:const, nil, :Process), :kill,
                    s(:sym, :KILL),
                    s(:lvar, :pid2))),
                s(:send, nil, :assert_not_equal,
                  s(:lvar, :pid1),
                  s(:lvar, :pid2))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :NotImplementedError)), nil, nil), nil),
            s(:begin,
              s(:if,
                s(:lvar, :pid1),
                s(:send,
                  s(:const, nil, :Process), :wait,
                  s(:lvar, :pid1)), nil),
              s(:send,
                s(:lvar, :r), :close),
              s(:send,
                s(:lvar, :w), :close))))),
      s(:def, :test_restart_after_shutdown,
        s(:args),
        s(:begin,
          s(:lvasgn, :address,
            s(:str, "127.0.0.1")),
          s(:lvasgn, :port,
            s(:int, 0)),
          s(:lvasgn, :log,
            s(:array)),
          s(:lvasgn, :config,
            s(:hash,
              s(:pair,
                s(:sym, :BindAddress),
                s(:lvar, :address)),
              s(:pair,
                s(:sym, :Port),
                s(:lvar, :port)),
              s(:pair,
                s(:sym, :Logger),
                s(:send,
                  s(:const,
                    s(:const, nil, :WEBrick), :Log), :new,
                  s(:lvar, :log),
                  s(:const,
                    s(:const,
                      s(:const, nil, :WEBrick), :BasicLog), :WARN))))),
          s(:lvasgn, :server,
            s(:send,
              s(:const, nil, :Echo), :new,
              s(:lvar, :config))),
          s(:lvasgn, :client_proc,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :str)),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :ret,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :server), :listeners), :first), :connect_address), :connect),
                        s(:args,
                          s(:arg, :s)),
                        s(:begin,
                          s(:send,
                            s(:lvar, :s), :write,
                            s(:lvar, :str)),
                          s(:send,
                            s(:lvar, :s), :close_write),
                          s(:send,
                            s(:lvar, :s), :read)))),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :str),
                      s(:lvar, :ret))),
                  s(:send,
                    s(:lvar, :server), :shutdown))))),
          s(:lvasgn, :server_thread,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:send,
                s(:lvar, :server), :start))),
          s(:lvasgn, :client_thread,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:send,
                s(:lvar, :client_proc), :call,
                s(:str, "a")))),
          s(:send, nil, :assert_join_threads,
            s(:array,
              s(:lvar, :client_thread),
              s(:lvar, :server_thread))),
          s(:send,
            s(:lvar, :server), :listen,
            s(:lvar, :address),
            s(:lvar, :port)),
          s(:lvasgn, :server_thread,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:send,
                s(:lvar, :server), :start))),
          s(:lvasgn, :client_thread,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:send,
                s(:lvar, :client_proc), :call,
                s(:str, "b")))),
          s(:send, nil, :assert_join_threads,
            s(:array,
              s(:lvar, :client_thread),
              s(:lvar, :server_thread))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:lvar, :log)))),
      s(:def, :test_restart_after_stop,
        s(:args),
        s(:begin,
          s(:lvasgn, :log,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:sclass,
            s(:lvar, :log),
            s(:begin,
              s(:send, nil, :include,
                s(:const,
                  s(:const,
                    s(:const, nil, :Test), :Unit), :Assertions)),
              s(:def, :<<,
                s(:args,
                  s(:arg, :msg)),
                s(:send, nil, :flunk,
                  s(:dstr,
                    s(:str, "unexpected log: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :msg), :inspect))))))),
          s(:lvasgn, :client_thread,
            s(:nil)),
          s(:lvasgn, :wakeup,
            s(:block,
              s(:send, nil, :lambda),
              s(:args),
              s(:send,
                s(:lvar, :client_thread), :wakeup))),
          s(:lvasgn, :warn_flunk,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :Log), :new,
              s(:lvar, :log),
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :BasicLog), :WARN))),
          s(:lvasgn, :server,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPServer), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :StartCallback),
                  s(:lvar, :wakeup)),
                s(:pair,
                  s(:sym, :StopCallback),
                  s(:lvar, :wakeup)),
                s(:pair,
                  s(:sym, :BindAddress),
                  s(:str, "0.0.0.0")),
                s(:pair,
                  s(:sym, :Port),
                  s(:int, 0)),
                s(:pair,
                  s(:sym, :Logger),
                  s(:lvar, :warn_flunk))))),
          s(:block,
            s(:send,
              s(:int, 2), :times),
            s(:args),
            s(:begin,
              s(:lvasgn, :server_thread,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :start),
                  s(:args),
                  s(:send,
                    s(:lvar, :server), :start))),
              s(:lvasgn, :client_thread,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :start),
                  s(:args),
                  s(:begin,
                    s(:until,
                      s(:or,
                        s(:send,
                          s(:send,
                            s(:lvar, :server), :status), :==,
                          s(:sym, :Running)),
                        s(:send,
                          s(:send,
                            s(:lvar, :server_thread), :status), :!)),
                      s(:send, nil, :sleep,
                        s(:float, 0.1))),
                    s(:send,
                      s(:lvar, :server), :stop),
                    s(:until,
                      s(:or,
                        s(:send,
                          s(:send,
                            s(:lvar, :server), :status), :==,
                          s(:sym, :Stop)),
                        s(:send,
                          s(:send,
                            s(:lvar, :server_thread), :status), :!)),
                      s(:send, nil, :sleep,
                        s(:float, 0.1)))))),
              s(:send, nil, :assert_join_threads,
                s(:array,
                  s(:lvar, :client_thread),
                  s(:lvar, :server_thread))))))))))
