s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "net/http")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:send, nil, :require,
    s(:str, "webrick")),
  s(:send, nil, :require,
    s(:str, "webrick/httpauth/basicauth")),
  s(:send, nil, :require_relative,
    s(:str, "utils")),
  s(:class,
    s(:const, nil, :TestWEBrickHTTPAuth),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_basic_auth,
        s(:args),
        s(:begin,
          s(:lvasgn, :log_tester,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :log),
                s(:arg, :access_log)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:send,
                    s(:lvar, :log), :length)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "ERROR WEBrick::HTTPStatus::Unauthorized"),
                    s(:regopt)),
                  s(:send,
                    s(:lvar, :log), :[],
                    s(:int, 0)))))),
          s(:block,
            s(:send,
              s(:const, nil, :TestWEBrick), :start_httpserver,
              s(:hash),
              s(:lvar, :log_tester)),
            s(:args,
              s(:arg, :server),
              s(:arg, :addr),
              s(:arg, :port),
              s(:arg, :log)),
            s(:begin,
              s(:lvasgn, :realm,
                s(:str, "WEBrick's realm")),
              s(:lvasgn, :path,
                s(:str, "/basic_auth")),
              s(:block,
                s(:send,
                  s(:lvar, :server), :mount_proc,
                  s(:lvar, :path)),
                s(:args,
                  s(:arg, :req),
                  s(:arg, :res)),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:const,
                        s(:const, nil, :WEBrick), :HTTPAuth), :basic_auth,
                      s(:lvar, :req),
                      s(:lvar, :res),
                      s(:lvar, :realm)),
                    s(:args,
                      s(:arg, :user),
                      s(:arg, :pass)),
                    s(:and,
                      s(:send,
                        s(:lvar, :user), :==,
                        s(:str, "webrick")),
                      s(:send,
                        s(:lvar, :pass), :==,
                        s(:str, "supersecretpassword")))),
                  s(:send,
                    s(:lvar, :res), :body=,
                    s(:str, "hoge")))),
              s(:lvasgn, :http,
                s(:send,
                  s(:const,
                    s(:const, nil, :Net), :HTTP), :new,
                  s(:lvar, :addr),
                  s(:lvar, :port))),
              s(:lvasgn, :g,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Net), :HTTP), :Get), :new,
                  s(:lvar, :path))),
              s(:send,
                s(:lvar, :g), :basic_auth,
                s(:str, "webrick"),
                s(:str, "supersecretpassword")),
              s(:block,
                s(:send,
                  s(:lvar, :http), :request,
                  s(:lvar, :g)),
                s(:args,
                  s(:arg, :res)),
                s(:send, nil, :assert_equal,
                  s(:str, "hoge"),
                  s(:send,
                    s(:lvar, :res), :body),
                  s(:send,
                    s(:lvar, :log), :call))),
              s(:send,
                s(:lvar, :g), :basic_auth,
                s(:str, "webrick"),
                s(:str, "not super")),
              s(:block,
                s(:send,
                  s(:lvar, :http), :request,
                  s(:lvar, :g)),
                s(:args,
                  s(:arg, :res)),
                s(:send, nil, :assert_not_equal,
                  s(:str, "hoge"),
                  s(:send,
                    s(:lvar, :res), :body),
                  s(:send,
                    s(:lvar, :log), :call))))))),
      s(:def, :test_basic_auth2,
        s(:args),
        s(:begin,
          s(:lvasgn, :log_tester,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :log),
                s(:arg, :access_log)),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:lvar, :log), :reject!),
                  s(:args,
                    s(:arg, :line)),
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "\\A\\s*\\z"),
                      s(:regopt)),
                    s(:lvar, :line))),
                s(:lvasgn, :pats,
                  s(:array,
                    s(:regexp,
                      s(:str, "ERROR Basic WEBrick's realm: webrick: password unmatch\\."),
                      s(:regopt)),
                    s(:regexp,
                      s(:str, "ERROR WEBrick::HTTPStatus::Unauthorized"),
                      s(:regopt)))),
                s(:block,
                  s(:send,
                    s(:lvar, :pats), :each),
                  s(:args,
                    s(:arg, :pat)),
                  s(:begin,
                    s(:send, nil, :assert,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :log), :grep,
                            s(:lvar, :pat)), :empty?), :!),
                      s(:dstr,
                        s(:str, "webrick log doesn't have expected error: "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :pat), :inspect)))),
                    s(:block,
                      s(:send,
                        s(:lvar, :log), :reject!),
                      s(:args,
                        s(:arg, :line)),
                      s(:send,
                        s(:lvar, :pat), :=~,
                        s(:lvar, :line))))),
                s(:send, nil, :assert_equal,
                  s(:array),
                  s(:lvar, :log))))),
          s(:block,
            s(:send,
              s(:const, nil, :TestWEBrick), :start_httpserver,
              s(:hash),
              s(:lvar, :log_tester)),
            s(:args,
              s(:arg, :server),
              s(:arg, :addr),
              s(:arg, :port),
              s(:arg, :log)),
            s(:begin,
              s(:lvasgn, :realm,
                s(:str, "WEBrick's realm")),
              s(:lvasgn, :path,
                s(:str, "/basic_auth2")),
              s(:block,
                s(:send,
                  s(:const, nil, :Tempfile), :create,
                  s(:str, "test_webrick_auth")),
                s(:args,
                  s(:arg, :tmpfile)),
                s(:begin,
                  s(:send,
                    s(:lvar, :tmpfile), :close),
                  s(:lvasgn, :tmp_pass,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :WEBrick), :HTTPAuth), :Htpasswd), :new,
                      s(:send,
                        s(:lvar, :tmpfile), :path))),
                  s(:send,
                    s(:lvar, :tmp_pass), :set_passwd,
                    s(:lvar, :realm),
                    s(:str, "webrick"),
                    s(:str, "supersecretpassword")),
                  s(:send,
                    s(:lvar, :tmp_pass), :set_passwd,
                    s(:lvar, :realm),
                    s(:str, "foo"),
                    s(:str, "supersecretpassword")),
                  s(:send,
                    s(:lvar, :tmp_pass), :flush),
                  s(:lvasgn, :htpasswd,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :WEBrick), :HTTPAuth), :Htpasswd), :new,
                      s(:send,
                        s(:lvar, :tmpfile), :path))),
                  s(:lvasgn, :users,
                    s(:array)),
                  s(:block,
                    s(:send,
                      s(:lvar, :htpasswd), :each),
                    s(:args,
                      s(:arg, :user),
                      s(:arg, :pass)),
                    s(:send,
                      s(:lvar, :users), :<<,
                      s(:lvar, :user))),
                  s(:send, nil, :assert_equal,
                    s(:int, 2),
                    s(:send,
                      s(:lvar, :users), :size),
                    s(:send,
                      s(:lvar, :log), :call)),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:lvar, :users), :member?,
                      s(:str, "webrick")),
                    s(:send,
                      s(:lvar, :log), :call)),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:lvar, :users), :member?,
                      s(:str, "foo")),
                    s(:send,
                      s(:lvar, :log), :call)),
                  s(:block,
                    s(:send,
                      s(:lvar, :server), :mount_proc,
                      s(:lvar, :path)),
                    s(:args,
                      s(:arg, :req),
                      s(:arg, :res)),
                    s(:begin,
                      s(:lvasgn, :auth,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :WEBrick), :HTTPAuth), :BasicAuth), :new,
                          s(:hash,
                            s(:pair,
                              s(:sym, :Realm),
                              s(:lvar, :realm)),
                            s(:pair,
                              s(:sym, :UserDB),
                              s(:lvar, :htpasswd)),
                            s(:pair,
                              s(:sym, :Logger),
                              s(:send,
                                s(:lvar, :server), :logger))))),
                      s(:send,
                        s(:lvar, :auth), :authenticate,
                        s(:lvar, :req),
                        s(:lvar, :res)),
                      s(:send,
                        s(:lvar, :res), :body=,
                        s(:str, "hoge")))),
                  s(:lvasgn, :http,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Net), :HTTP), :new,
                      s(:lvar, :addr),
                      s(:lvar, :port))),
                  s(:lvasgn, :g,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Net), :HTTP), :Get), :new,
                      s(:lvar, :path))),
                  s(:send,
                    s(:lvar, :g), :basic_auth,
                    s(:str, "webrick"),
                    s(:str, "supersecretpassword")),
                  s(:block,
                    s(:send,
                      s(:lvar, :http), :request,
                      s(:lvar, :g)),
                    s(:args,
                      s(:arg, :res)),
                    s(:send, nil, :assert_equal,
                      s(:str, "hoge"),
                      s(:send,
                        s(:lvar, :res), :body),
                      s(:send,
                        s(:lvar, :log), :call))),
                  s(:send,
                    s(:lvar, :g), :basic_auth,
                    s(:str, "webrick"),
                    s(:str, "not super")),
                  s(:block,
                    s(:send,
                      s(:lvar, :http), :request,
                      s(:lvar, :g)),
                    s(:args,
                      s(:arg, :res)),
                    s(:send, nil, :assert_not_equal,
                      s(:str, "hoge"),
                      s(:send,
                        s(:lvar, :res), :body),
                      s(:send,
                        s(:lvar, :log), :call))))))))),
      s(:def, :test_basic_auth3,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:str, "test_webrick_auth")),
            s(:args,
              s(:arg, :tmpfile)),
            s(:begin,
              s(:send,
                s(:lvar, :tmpfile), :puts,
                s(:str, "webrick:{SHA}GJYFRpBbdchp595jlh3Bhfmgp8k=")),
              s(:send,
                s(:lvar, :tmpfile), :flush),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :NotImplementedError)),
                s(:args),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :WEBrick), :HTTPAuth), :Htpasswd), :new,
                  s(:send,
                    s(:lvar, :tmpfile), :path))))),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:str, "test_webrick_auth")),
            s(:args,
              s(:arg, :tmpfile)),
            s(:begin,
              s(:send,
                s(:lvar, :tmpfile), :puts,
                s(:str, "webrick:$apr1$IOVMD/..$rmnOSPXr0.wwrLPZHBQZy0")),
              s(:send,
                s(:lvar, :tmpfile), :flush),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :NotImplementedError)),
                s(:args),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :WEBrick), :HTTPAuth), :Htpasswd), :new,
                  s(:send,
                    s(:lvar, :tmpfile), :path))))))),
      s(:casgn, nil, :DIGESTRES_,
        s(:regexp,
          s(:str, "\n"),
          s(:str, "    ([a-zA-Z\\-]+)\n"),
          s(:str, "      [ \\t]*(?:\\r\\n[ \\t]*)*\n"),
          s(:str, "      =\n"),
          s(:str, "      [ \\t]*(?:\\r\\n[ \\t]*)*\n"),
          s(:str, "      (?:\n"),
          s(:str, "       \"((?:[^\"]+|\\\\[\\x00-\\x7F])*)\" |\n"),
          s(:str, "       ([!\\\#$%&'*+\\-.0-9A-Z^_`a-z|~]+)\n"),
          s(:str, "      )"),
          s(:regopt, :x))),
      s(:def, :test_digest_auth,
        s(:args),
        s(:begin,
          s(:lvasgn, :log_tester,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :log),
                s(:arg, :access_log)),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:lvar, :log), :reject!),
                  s(:args,
                    s(:arg, :line)),
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "\\A\\s*\\z"),
                      s(:regopt)),
                    s(:lvar, :line))),
                s(:lvasgn, :pats,
                  s(:array,
                    s(:regexp,
                      s(:str, "ERROR Digest WEBrick's realm: no credentials in the request\\."),
                      s(:regopt)),
                    s(:regexp,
                      s(:str, "ERROR WEBrick::HTTPStatus::Unauthorized"),
                      s(:regopt)),
                    s(:regexp,
                      s(:str, "ERROR Digest WEBrick's realm: webrick: digest unmatch\\."),
                      s(:regopt)))),
                s(:block,
                  s(:send,
                    s(:lvar, :pats), :each),
                  s(:args,
                    s(:arg, :pat)),
                  s(:begin,
                    s(:send, nil, :assert,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :log), :grep,
                            s(:lvar, :pat)), :empty?), :!),
                      s(:dstr,
                        s(:str, "webrick log doesn't have expected error: "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :pat), :inspect)))),
                    s(:block,
                      s(:send,
                        s(:lvar, :log), :reject!),
                      s(:args,
                        s(:arg, :line)),
                      s(:send,
                        s(:lvar, :pat), :=~,
                        s(:lvar, :line))))),
                s(:send, nil, :assert_equal,
                  s(:array),
                  s(:lvar, :log))))),
          s(:block,
            s(:send,
              s(:const, nil, :TestWEBrick), :start_httpserver,
              s(:hash),
              s(:lvar, :log_tester)),
            s(:args,
              s(:arg, :server),
              s(:arg, :addr),
              s(:arg, :port),
              s(:arg, :log)),
            s(:begin,
              s(:lvasgn, :realm,
                s(:str, "WEBrick's realm")),
              s(:lvasgn, :path,
                s(:str, "/digest_auth")),
              s(:block,
                s(:send,
                  s(:const, nil, :Tempfile), :create,
                  s(:str, "test_webrick_auth")),
                s(:args,
                  s(:arg, :tmpfile)),
                s(:begin,
                  s(:send,
                    s(:lvar, :tmpfile), :close),
                  s(:lvasgn, :tmp_pass,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :WEBrick), :HTTPAuth), :Htdigest), :new,
                      s(:send,
                        s(:lvar, :tmpfile), :path))),
                  s(:send,
                    s(:lvar, :tmp_pass), :set_passwd,
                    s(:lvar, :realm),
                    s(:str, "webrick"),
                    s(:str, "supersecretpassword")),
                  s(:send,
                    s(:lvar, :tmp_pass), :set_passwd,
                    s(:lvar, :realm),
                    s(:str, "foo"),
                    s(:str, "supersecretpassword")),
                  s(:send,
                    s(:lvar, :tmp_pass), :flush),
                  s(:lvasgn, :htdigest,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :WEBrick), :HTTPAuth), :Htdigest), :new,
                      s(:send,
                        s(:lvar, :tmpfile), :path))),
                  s(:lvasgn, :users,
                    s(:array)),
                  s(:block,
                    s(:send,
                      s(:lvar, :htdigest), :each),
                    s(:args,
                      s(:arg, :user),
                      s(:arg, :pass)),
                    s(:send,
                      s(:lvar, :users), :<<,
                      s(:lvar, :user))),
                  s(:send, nil, :assert_equal,
                    s(:int, 2),
                    s(:send,
                      s(:lvar, :users), :size),
                    s(:send,
                      s(:lvar, :log), :call)),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:lvar, :users), :member?,
                      s(:str, "webrick")),
                    s(:send,
                      s(:lvar, :log), :call)),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:lvar, :users), :member?,
                      s(:str, "foo")),
                    s(:send,
                      s(:lvar, :log), :call)),
                  s(:lvasgn, :auth,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :WEBrick), :HTTPAuth), :DigestAuth), :new,
                      s(:hash,
                        s(:pair,
                          s(:sym, :Realm),
                          s(:lvar, :realm)),
                        s(:pair,
                          s(:sym, :UserDB),
                          s(:lvar, :htdigest)),
                        s(:pair,
                          s(:sym, :Algorithm),
                          s(:str, "MD5")),
                        s(:pair,
                          s(:sym, :Logger),
                          s(:send,
                            s(:lvar, :server), :logger))))),
                  s(:block,
                    s(:send,
                      s(:lvar, :server), :mount_proc,
                      s(:lvar, :path)),
                    s(:args,
                      s(:arg, :req),
                      s(:arg, :res)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :auth), :authenticate,
                        s(:lvar, :req),
                        s(:lvar, :res)),
                      s(:send,
                        s(:lvar, :res), :body=,
                        s(:str, "hoge")))),
                  s(:block,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Net), :HTTP), :start,
                      s(:lvar, :addr),
                      s(:lvar, :port)),
                    s(:args,
                      s(:arg, :http)),
                    s(:begin,
                      s(:lvasgn, :g,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Net), :HTTP), :Get), :new,
                          s(:lvar, :path))),
                      s(:lvasgn, :params,
                        s(:hash)),
                      s(:block,
                        s(:send,
                          s(:lvar, :http), :request,
                          s(:lvar, :g)),
                        s(:args,
                          s(:arg, :res)),
                        s(:begin,
                          s(:send, nil, :assert_equal,
                            s(:str, "401"),
                            s(:send,
                              s(:lvar, :res), :code),
                            s(:send,
                              s(:lvar, :log), :call)),
                          s(:block,
                            s(:send,
                              s(:send,
                                s(:lvar, :res), :[],
                                s(:str, "www-authenticate")), :scan,
                              s(:const, nil, :DIGESTRES_)),
                            s(:args,
                              s(:arg, :key),
                              s(:arg, :quoted),
                              s(:arg, :token)),
                            s(:send,
                              s(:lvar, :params), :[]=,
                              s(:send,
                                s(:lvar, :key), :downcase),
                              s(:or,
                                s(:lvar, :token),
                                s(:send,
                                  s(:lvar, :quoted), :delete,
                                  s(:str, "\\"))))),
                          s(:send,
                            s(:lvar, :params), :[]=,
                            s(:str, "uri"),
                            s(:dstr,
                              s(:str, "http://"),
                              s(:begin,
                                s(:lvar, :addr)),
                              s(:str, ":"),
                              s(:begin,
                                s(:lvar, :port)),
                              s(:begin,
                                s(:lvar, :path)))))),
                      s(:send,
                        s(:lvar, :g), :[]=,
                        s(:str, "Authorization"),
                        s(:send, nil, :credentials_for_request,
                          s(:str, "webrick"),
                          s(:str, "supersecretpassword"),
                          s(:lvar, :params))),
                      s(:block,
                        s(:send,
                          s(:lvar, :http), :request,
                          s(:lvar, :g)),
                        s(:args,
                          s(:arg, :res)),
                        s(:send, nil, :assert_equal,
                          s(:str, "hoge"),
                          s(:send,
                            s(:lvar, :res), :body),
                          s(:send,
                            s(:lvar, :log), :call))),
                      s(:send,
                        s(:send,
                          s(:lvar, :params), :[],
                          s(:str, "algorithm")), :downcase!),
                      s(:send,
                        s(:lvar, :g), :[]=,
                        s(:str, "Authorization"),
                        s(:send, nil, :credentials_for_request,
                          s(:str, "webrick"),
                          s(:str, "supersecretpassword"),
                          s(:lvar, :params))),
                      s(:block,
                        s(:send,
                          s(:lvar, :http), :request,
                          s(:lvar, :g)),
                        s(:args,
                          s(:arg, :res)),
                        s(:send, nil, :assert_equal,
                          s(:str, "hoge"),
                          s(:send,
                            s(:lvar, :res), :body),
                          s(:send,
                            s(:lvar, :log), :call))),
                      s(:send,
                        s(:lvar, :g), :[]=,
                        s(:str, "Authorization"),
                        s(:send, nil, :credentials_for_request,
                          s(:str, "webrick"),
                          s(:str, "not super"),
                          s(:lvar, :params))),
                      s(:block,
                        s(:send,
                          s(:lvar, :http), :request,
                          s(:lvar, :g)),
                        s(:args,
                          s(:arg, :res)),
                        s(:send, nil, :assert_not_equal,
                          s(:str, "hoge"),
                          s(:send,
                            s(:lvar, :res), :body),
                          s(:send,
                            s(:lvar, :log), :call))))))))))),
      s(:send, nil, :private),
      s(:def, :credentials_for_request,
        s(:args,
          s(:arg, :user),
          s(:arg, :password),
          s(:arg, :params)),
        s(:begin,
          s(:lvasgn, :cnonce,
            s(:str, "hoge")),
          s(:lvasgn, :nonce_count,
            s(:int, 1)),
          s(:lvasgn, :ha1,
            s(:dstr,
              s(:begin,
                s(:lvar, :user)),
              s(:str, ":"),
              s(:begin,
                s(:send,
                  s(:lvar, :params), :[],
                  s(:str, "realm"))),
              s(:str, ":"),
              s(:begin,
                s(:lvar, :password)))),
          s(:lvasgn, :ha2,
            s(:dstr,
              s(:str, "GET:"),
              s(:begin,
                s(:send,
                  s(:lvar, :params), :[],
                  s(:str, "uri"))))),
          s(:lvasgn, :request_digest,
            s(:dstr,
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Digest), :MD5), :hexdigest,
                    s(:lvar, :ha1))),
                s(:str, ":")),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :params), :[],
                    s(:str, "nonce"))),
                s(:str, ":"),
                s(:begin,
                  s(:send,
                    s(:str, "%08x"), :%,
                    s(:lvar, :nonce_count))),
                s(:str, ":"),
                s(:begin,
                  s(:lvar, :cnonce)),
                s(:str, ":"),
                s(:begin,
                  s(:send,
                    s(:lvar, :params), :[],
                    s(:str, "qop"))),
                s(:str, ":")),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Digest), :MD5), :hexdigest,
                    s(:lvar, :ha2)))))),
          s(:dstr,
            s(:dstr,
              s(:str, "Digest username=\""),
              s(:begin,
                s(:lvar, :user)),
              s(:str, "\"")),
            s(:dstr,
              s(:str, ", realm=\""),
              s(:begin,
                s(:send,
                  s(:lvar, :params), :[],
                  s(:str, "realm"))),
              s(:str, "\"")),
            s(:dstr,
              s(:str, ", nonce=\""),
              s(:begin,
                s(:send,
                  s(:lvar, :params), :[],
                  s(:str, "nonce"))),
              s(:str, "\"")),
            s(:dstr,
              s(:str, ", uri=\""),
              s(:begin,
                s(:send,
                  s(:lvar, :params), :[],
                  s(:str, "uri"))),
              s(:str, "\"")),
            s(:dstr,
              s(:str, ", qop="),
              s(:begin,
                s(:send,
                  s(:lvar, :params), :[],
                  s(:str, "qop")))),
            s(:dstr,
              s(:str, ", nc="),
              s(:begin,
                s(:send,
                  s(:str, "%08x"), :%,
                  s(:lvar, :nonce_count)))),
            s(:dstr,
              s(:str, ", cnonce=\""),
              s(:begin,
                s(:lvar, :cnonce)),
              s(:str, "\"")),
            s(:dstr,
              s(:str, ", response=\""),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :Digest), :MD5), :hexdigest,
                  s(:lvar, :request_digest))),
              s(:str, "\"")),
            s(:dstr,
              s(:str, ", opaque=\""),
              s(:begin,
                s(:send,
                  s(:lvar, :params), :[],
                  s(:str, "opaque"))),
              s(:str, "\"")),
            s(:dstr,
              s(:str, ", algorithm="),
              s(:begin,
                s(:send,
                  s(:lvar, :params), :[],
                  s(:str, "algorithm"))))))))))
