s(:begin,
  s(:send, nil, :require,
    s(:str, "webrick")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestWEBrickHTTPRequest),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_simple_request,
        s(:args),
        s(:begin,
          s(:lvasgn, :msg,
            s(:str, "GET /\n")),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:send,
            s(:lvar, :req), :parse,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:lvar, :msg))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :req), :meta_vars)))),
      s(:def, :test_parse_09,
        s(:args),
        s(:begin,
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      GET /\n"),
              s(:str, "      foobar    # HTTP/0.9 request don't have header nor entity body.\n"))),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:send,
            s(:lvar, :req), :parse,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:send,
                s(:lvar, :msg), :gsub,
                s(:regexp,
                  s(:str, "^ {6}"),
                  s(:regopt)),
                s(:str, "")))),
          s(:send, nil, :assert_equal,
            s(:str, "GET"),
            s(:send,
              s(:lvar, :req), :request_method)),
          s(:send, nil, :assert_equal,
            s(:str, "/"),
            s(:send,
              s(:lvar, :req), :unparsed_uri)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPVersion), :new,
              s(:str, "0.9")),
            s(:send,
              s(:lvar, :req), :http_version)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP), :[],
              s(:sym, :ServerName)),
            s(:send,
              s(:lvar, :req), :host)),
          s(:send, nil, :assert_equal,
            s(:int, 80),
            s(:send,
              s(:lvar, :req), :port)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :req), :keep_alive?)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :req), :body)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :req), :query), :empty?)))),
      s(:def, :test_parse_10,
        s(:args),
        s(:begin,
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      GET / HTTP/1.0\n"),
              s(:str, "\n"))),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:send,
            s(:lvar, :req), :parse,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:send,
                s(:lvar, :msg), :gsub,
                s(:regexp,
                  s(:str, "^ {6}"),
                  s(:regopt)),
                s(:str, "")))),
          s(:send, nil, :assert_equal,
            s(:str, "GET"),
            s(:send,
              s(:lvar, :req), :request_method)),
          s(:send, nil, :assert_equal,
            s(:str, "/"),
            s(:send,
              s(:lvar, :req), :unparsed_uri)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPVersion), :new,
              s(:str, "1.0")),
            s(:send,
              s(:lvar, :req), :http_version)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP), :[],
              s(:sym, :ServerName)),
            s(:send,
              s(:lvar, :req), :host)),
          s(:send, nil, :assert_equal,
            s(:int, 80),
            s(:send,
              s(:lvar, :req), :port)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :req), :keep_alive?)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :req), :body)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :req), :query), :empty?)))),
      s(:def, :test_parse_11,
        s(:args),
        s(:begin,
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      GET /path HTTP/1.1\n"),
              s(:str, "\n"))),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:send,
            s(:lvar, :req), :parse,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:send,
                s(:lvar, :msg), :gsub,
                s(:regexp,
                  s(:str, "^ {6}"),
                  s(:regopt)),
                s(:str, "")))),
          s(:send, nil, :assert_equal,
            s(:str, "GET"),
            s(:send,
              s(:lvar, :req), :request_method)),
          s(:send, nil, :assert_equal,
            s(:str, "/path"),
            s(:send,
              s(:lvar, :req), :unparsed_uri)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:lvar, :req), :script_name)),
          s(:send, nil, :assert_equal,
            s(:str, "/path"),
            s(:send,
              s(:lvar, :req), :path_info)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPVersion), :new,
              s(:str, "1.1")),
            s(:send,
              s(:lvar, :req), :http_version)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP), :[],
              s(:sym, :ServerName)),
            s(:send,
              s(:lvar, :req), :host)),
          s(:send, nil, :assert_equal,
            s(:int, 80),
            s(:send,
              s(:lvar, :req), :port)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :req), :keep_alive?)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :req), :body)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :req), :query), :empty?)))),
      s(:def, :test_request_uri_too_large,
        s(:args),
        s(:begin,
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      GET /"),
              s(:begin,
                s(:send,
                  s(:str, "a"), :*,
                  s(:int, 2084))),
              s(:str, " HTTP/1.1\n"))),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :HTTPStatus), :RequestURITooLarge)),
            s(:args),
            s(:send,
              s(:lvar, :req), :parse,
              s(:send,
                s(:const, nil, :StringIO), :new,
                s(:send,
                  s(:lvar, :msg), :gsub,
                  s(:regexp,
                    s(:str, "^ {6}"),
                    s(:regopt)),
                  s(:str, ""))))))),
      s(:def, :test_parse_headers,
        s(:args),
        s(:begin,
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      GET /path HTTP/1.1\n"),
              s(:str, "      Host: test.ruby-lang.org:8080\n"),
              s(:str, "      Connection: close\n"),
              s(:str, "      Accept: text/*;q=0.3, text/html;q=0.7, text/html;level=1,\n"),
              s(:str, "              text/html;level=2;q=0.4, */*;q=0.5\n"),
              s(:str, "      Accept-Encoding: compress;q=0.5\n"),
              s(:str, "      Accept-Encoding: gzip;q=1.0, identity; q=0.4, *;q=0\n"),
              s(:str, "      Accept-Language: en;q=0.5, *; q=0\n"),
              s(:str, "      Accept-Language: ja\n"),
              s(:str, "      Content-Type: text/plain\n"),
              s(:str, "      Content-Length: 7\n"),
              s(:str, "      X-Empty-Header:\n"),
              s(:str, "\n"),
              s(:str, "      foobar\n"))),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:send,
            s(:lvar, :req), :parse,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:send,
                s(:lvar, :msg), :gsub,
                s(:regexp,
                  s(:str, "^ {6}"),
                  s(:regopt)),
                s(:str, "")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:str, "http://test.ruby-lang.org:8080/path")),
            s(:send,
              s(:lvar, :req), :request_uri)),
          s(:send, nil, :assert_equal,
            s(:str, "test.ruby-lang.org"),
            s(:send,
              s(:lvar, :req), :host)),
          s(:send, nil, :assert_equal,
            s(:int, 8080),
            s(:send,
              s(:lvar, :req), :port)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :req), :keep_alive?)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "text/html;level=1"),
              s(:str, "text/html"),
              s(:str, "*/*"),
              s(:str, "text/html;level=2"),
              s(:str, "text/*")),
            s(:send,
              s(:lvar, :req), :accept)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "gzip"),
              s(:str, "compress"),
              s(:str, "identity"),
              s(:str, "*")),
            s(:send,
              s(:lvar, :req), :accept_encoding)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "ja"),
              s(:str, "en"),
              s(:str, "*")),
            s(:send,
              s(:lvar, :req), :accept_language)),
          s(:send, nil, :assert_equal,
            s(:int, 7),
            s(:send,
              s(:lvar, :req), :content_length)),
          s(:send, nil, :assert_equal,
            s(:str, "text/plain"),
            s(:send,
              s(:lvar, :req), :content_type)),
          s(:send, nil, :assert_equal,
            s(:str, "foobar\n"),
            s(:send,
              s(:lvar, :req), :body)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:lvar, :req), :[],
              s(:str, "x-empty-header"))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :req), :[],
              s(:str, "x-no-header"))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :req), :query), :empty?)))),
      s(:def, :test_parse_header2,
        s(:args),
        s(:begin,
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      POST /foo/bar/../baz?q=a HTTP/1.0\n"),
              s(:str, "      Content-Length: 9\n"),
              s(:str, "      User-Agent:\n"),
              s(:str, "        FOO   BAR\n"),
              s(:str, "        BAZ\n"),
              s(:str, "\n"),
              s(:str, "      hogehoge\n"))),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:send,
            s(:lvar, :req), :parse,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:send,
                s(:lvar, :msg), :gsub,
                s(:regexp,
                  s(:str, "^ {6}"),
                  s(:regopt)),
                s(:str, "")))),
          s(:send, nil, :assert_equal,
            s(:str, "POST"),
            s(:send,
              s(:lvar, :req), :request_method)),
          s(:send, nil, :assert_equal,
            s(:str, "/foo/baz"),
            s(:send,
              s(:lvar, :req), :path)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:lvar, :req), :script_name)),
          s(:send, nil, :assert_equal,
            s(:str, "/foo/baz"),
            s(:send,
              s(:lvar, :req), :path_info)),
          s(:send, nil, :assert_equal,
            s(:str, "9"),
            s(:send,
              s(:lvar, :req), :[],
              s(:str, "content-length"))),
          s(:send, nil, :assert_equal,
            s(:str, "FOO BAR BAZ"),
            s(:send,
              s(:lvar, :req), :[],
              s(:str, "user-agent"))),
          s(:send, nil, :assert_equal,
            s(:str, "hogehoge\n"),
            s(:send,
              s(:lvar, :req), :body)))),
      s(:def, :test_parse_headers3,
        s(:args),
        s(:begin,
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      GET /path HTTP/1.1\n"),
              s(:str, "      Host: test.ruby-lang.org\n"),
              s(:str, "\n"))),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:send,
            s(:lvar, :req), :parse,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:send,
                s(:lvar, :msg), :gsub,
                s(:regexp,
                  s(:str, "^ {6}"),
                  s(:regopt)),
                s(:str, "")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:str, "http://test.ruby-lang.org/path")),
            s(:send,
              s(:lvar, :req), :request_uri)),
          s(:send, nil, :assert_equal,
            s(:str, "test.ruby-lang.org"),
            s(:send,
              s(:lvar, :req), :host)),
          s(:send, nil, :assert_equal,
            s(:int, 80),
            s(:send,
              s(:lvar, :req), :port)),
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      GET /path HTTP/1.1\n"),
              s(:str, "      Host: 192.168.1.1\n"),
              s(:str, "\n"))),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:send,
            s(:lvar, :req), :parse,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:send,
                s(:lvar, :msg), :gsub,
                s(:regexp,
                  s(:str, "^ {6}"),
                  s(:regopt)),
                s(:str, "")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:str, "http://192.168.1.1/path")),
            s(:send,
              s(:lvar, :req), :request_uri)),
          s(:send, nil, :assert_equal,
            s(:str, "192.168.1.1"),
            s(:send,
              s(:lvar, :req), :host)),
          s(:send, nil, :assert_equal,
            s(:int, 80),
            s(:send,
              s(:lvar, :req), :port)),
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      GET /path HTTP/1.1\n"),
              s(:str, "      Host: [fe80::208:dff:feef:98c7]\n"),
              s(:str, "\n"))),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:send,
            s(:lvar, :req), :parse,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:send,
                s(:lvar, :msg), :gsub,
                s(:regexp,
                  s(:str, "^ {6}"),
                  s(:regopt)),
                s(:str, "")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:str, "http://[fe80::208:dff:feef:98c7]/path")),
            s(:send,
              s(:lvar, :req), :request_uri)),
          s(:send, nil, :assert_equal,
            s(:str, "[fe80::208:dff:feef:98c7]"),
            s(:send,
              s(:lvar, :req), :host)),
          s(:send, nil, :assert_equal,
            s(:int, 80),
            s(:send,
              s(:lvar, :req), :port)),
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      GET /path HTTP/1.1\n"),
              s(:str, "      Host: 192.168.1.1:8080\n"),
              s(:str, "\n"))),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:send,
            s(:lvar, :req), :parse,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:send,
                s(:lvar, :msg), :gsub,
                s(:regexp,
                  s(:str, "^ {6}"),
                  s(:regopt)),
                s(:str, "")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:str, "http://192.168.1.1:8080/path")),
            s(:send,
              s(:lvar, :req), :request_uri)),
          s(:send, nil, :assert_equal,
            s(:str, "192.168.1.1"),
            s(:send,
              s(:lvar, :req), :host)),
          s(:send, nil, :assert_equal,
            s(:int, 8080),
            s(:send,
              s(:lvar, :req), :port)),
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      GET /path HTTP/1.1\n"),
              s(:str, "      Host: [fe80::208:dff:feef:98c7]:8080\n"),
              s(:str, "\n"))),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:send,
            s(:lvar, :req), :parse,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:send,
                s(:lvar, :msg), :gsub,
                s(:regexp,
                  s(:str, "^ {6}"),
                  s(:regopt)),
                s(:str, "")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:str, "http://[fe80::208:dff:feef:98c7]:8080/path")),
            s(:send,
              s(:lvar, :req), :request_uri)),
          s(:send, nil, :assert_equal,
            s(:str, "[fe80::208:dff:feef:98c7]"),
            s(:send,
              s(:lvar, :req), :host)),
          s(:send, nil, :assert_equal,
            s(:int, 8080),
            s(:send,
              s(:lvar, :req), :port)))),
      s(:def, :test_parse_get_params,
        s(:args),
        s(:begin,
          s(:lvasgn, :param,
            s(:str, "foo=1;foo=2;foo=3;bar=x")),
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      GET /path?"),
              s(:begin,
                s(:lvar, :param)),
              s(:str, " HTTP/1.1\n"),
              s(:str, "      Host: test.ruby-lang.org:8080\n"),
              s(:str, "\n"))),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:send,
            s(:lvar, :req), :parse,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:send,
                s(:lvar, :msg), :gsub,
                s(:regexp,
                  s(:str, "^ {6}"),
                  s(:regopt)),
                s(:str, "")))),
          s(:lvasgn, :query,
            s(:send,
              s(:lvar, :req), :query)),
          s(:send, nil, :assert_equal,
            s(:str, "1"),
            s(:send,
              s(:lvar, :query), :[],
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "1"),
              s(:str, "2"),
              s(:str, "3")),
            s(:send,
              s(:send,
                s(:lvar, :query), :[],
                s(:str, "foo")), :to_ary)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "1"),
              s(:str, "2"),
              s(:str, "3")),
            s(:send,
              s(:send,
                s(:lvar, :query), :[],
                s(:str, "foo")), :list)),
          s(:send, nil, :assert_equal,
            s(:str, "x"),
            s(:send,
              s(:lvar, :query), :[],
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "x")),
            s(:send,
              s(:send,
                s(:lvar, :query), :[],
                s(:str, "bar")), :list)))),
      s(:def, :test_parse_post_params,
        s(:args),
        s(:begin,
          s(:lvasgn, :param,
            s(:str, "foo=1;foo=2;foo=3;bar=x")),
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      POST /path?foo=x;foo=y;foo=z;bar=1 HTTP/1.1\n"),
              s(:str, "      Host: test.ruby-lang.org:8080\n"),
              s(:str, "      Content-Length: "),
              s(:begin,
                s(:send,
                  s(:lvar, :param), :size)),
              s(:str, "\n"),
              s(:str, "      Content-Type: application/x-www-form-urlencoded\n"),
              s(:str, "\n"),
              s(:str, "      "),
              s(:begin,
                s(:lvar, :param)),
              s(:str, "\n"))),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:send,
            s(:lvar, :req), :parse,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:send,
                s(:lvar, :msg), :gsub,
                s(:regexp,
                  s(:str, "^ {6}"),
                  s(:regopt)),
                s(:str, "")))),
          s(:lvasgn, :query,
            s(:send,
              s(:lvar, :req), :query)),
          s(:send, nil, :assert_equal,
            s(:str, "1"),
            s(:send,
              s(:lvar, :query), :[],
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "1"),
              s(:str, "2"),
              s(:str, "3")),
            s(:send,
              s(:send,
                s(:lvar, :query), :[],
                s(:str, "foo")), :to_ary)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "1"),
              s(:str, "2"),
              s(:str, "3")),
            s(:send,
              s(:send,
                s(:lvar, :query), :[],
                s(:str, "foo")), :list)),
          s(:send, nil, :assert_equal,
            s(:str, "x"),
            s(:send,
              s(:lvar, :query), :[],
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "x")),
            s(:send,
              s(:send,
                s(:lvar, :query), :[],
                s(:str, "bar")), :list)))),
      s(:def, :test_chunked,
        s(:args),
        s(:begin,
          s(:lvasgn, :crlf,
            s(:str, "\r\n")),
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      POST /path HTTP/1.1\n"),
              s(:str, "      Host: test.ruby-lang.org:8080\n"),
              s(:str, "      Transfer-Encoding: chunked\n"),
              s(:str, "\n"))),
          s(:send,
            s(:lvar, :msg), :gsub!,
            s(:regexp,
              s(:str, "^ {6}"),
              s(:regopt)),
            s(:str, "")),
          s(:block,
            s(:send, nil, :open,
              s(:str, "(string)")),
            s(:args,
              s(:arg, :io)),
            s(:while,
              s(:lvasgn, :chunk,
                s(:send,
                  s(:lvar, :io), :read,
                  s(:int, 100))),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :msg), :<<,
                    s(:send,
                      s(:send,
                        s(:lvar, :chunk), :size), :to_s,
                      s(:int, 16))), :<<,
                  s(:lvar, :crlf)),
                s(:send,
                  s(:send,
                    s(:lvar, :msg), :<<,
                    s(:lvar, :chunk)), :<<,
                  s(:lvar, :crlf))))),
          s(:send,
            s(:send,
              s(:lvar, :msg), :<<,
              s(:str, "0")), :<<,
            s(:lvar, :crlf)),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:send,
            s(:lvar, :req), :parse,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:lvar, :msg))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :File), :read,
              s(:str, "(string)")),
            s(:send,
              s(:lvar, :req), :body)))),
      s(:def, :test_forwarded,
        s(:args),
        s(:begin,
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      GET /foo HTTP/1.1\n"),
              s(:str, "      Host: localhost:10080\n"),
              s(:str, "      User-Agent: w3m/0.5.2\n"),
              s(:str, "      X-Forwarded-For: 123.123.123.123\n"),
              s(:str, "      X-Forwarded-Host: forward.example.com\n"),
              s(:str, "      X-Forwarded-Server: server.example.com\n"),
              s(:str, "      Connection: Keep-Alive\n"),
              s(:str, "\n"))),
          s(:send,
            s(:lvar, :msg), :gsub!,
            s(:regexp,
              s(:str, "^ {6}"),
              s(:regopt)),
            s(:str, "")),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:send,
            s(:lvar, :req), :parse,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:lvar, :msg))),
          s(:send, nil, :assert_equal,
            s(:str, "server.example.com"),
            s(:send,
              s(:lvar, :req), :server_name)),
          s(:send, nil, :assert_equal,
            s(:str, "http://forward.example.com/foo"),
            s(:send,
              s(:send,
                s(:lvar, :req), :request_uri), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "forward.example.com"),
            s(:send,
              s(:lvar, :req), :host)),
          s(:send, nil, :assert_equal,
            s(:int, 80),
            s(:send,
              s(:lvar, :req), :port)),
          s(:send, nil, :assert_equal,
            s(:str, "123.123.123.123"),
            s(:send,
              s(:lvar, :req), :remote_ip)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :req), :ssl?), :!)),
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      GET /foo HTTP/1.1\n"),
              s(:str, "      Host: localhost:10080\n"),
              s(:str, "      User-Agent: w3m/0.5.2\n"),
              s(:str, "      X-Forwarded-For: 192.168.1.10, 172.16.1.1, 123.123.123.123\n"),
              s(:str, "      X-Forwarded-Host: forward.example.com:8080\n"),
              s(:str, "      X-Forwarded-Server: server.example.com\n"),
              s(:str, "      Connection: Keep-Alive\n"),
              s(:str, "\n"))),
          s(:send,
            s(:lvar, :msg), :gsub!,
            s(:regexp,
              s(:str, "^ {6}"),
              s(:regopt)),
            s(:str, "")),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:send,
            s(:lvar, :req), :parse,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:lvar, :msg))),
          s(:send, nil, :assert_equal,
            s(:str, "server.example.com"),
            s(:send,
              s(:lvar, :req), :server_name)),
          s(:send, nil, :assert_equal,
            s(:str, "http://forward.example.com:8080/foo"),
            s(:send,
              s(:send,
                s(:lvar, :req), :request_uri), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "forward.example.com"),
            s(:send,
              s(:lvar, :req), :host)),
          s(:send, nil, :assert_equal,
            s(:int, 8080),
            s(:send,
              s(:lvar, :req), :port)),
          s(:send, nil, :assert_equal,
            s(:str, "123.123.123.123"),
            s(:send,
              s(:lvar, :req), :remote_ip)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :req), :ssl?), :!)),
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      GET /foo HTTP/1.1\n"),
              s(:str, "      Host: localhost:10080\n"),
              s(:str, "      Client-IP: 234.234.234.234\n"),
              s(:str, "      X-Forwarded-Proto: https\n"),
              s(:str, "      X-Forwarded-For: 192.168.1.10, 10.0.0.1, 123.123.123.123\n"),
              s(:str, "      X-Forwarded-Host: forward.example.com\n"),
              s(:str, "      X-Forwarded-Server: server.example.com\n"),
              s(:str, "      X-Requested-With: XMLHttpRequest\n"),
              s(:str, "      Connection: Keep-Alive\n"),
              s(:str, "\n"))),
          s(:send,
            s(:lvar, :msg), :gsub!,
            s(:regexp,
              s(:str, "^ {6}"),
              s(:regopt)),
            s(:str, "")),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:send,
            s(:lvar, :req), :parse,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:lvar, :msg))),
          s(:send, nil, :assert_equal,
            s(:str, "server.example.com"),
            s(:send,
              s(:lvar, :req), :server_name)),
          s(:send, nil, :assert_equal,
            s(:str, "https://forward.example.com/foo"),
            s(:send,
              s(:send,
                s(:lvar, :req), :request_uri), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "forward.example.com"),
            s(:send,
              s(:lvar, :req), :host)),
          s(:send, nil, :assert_equal,
            s(:int, 443),
            s(:send,
              s(:lvar, :req), :port)),
          s(:send, nil, :assert_equal,
            s(:str, "234.234.234.234"),
            s(:send,
              s(:lvar, :req), :remote_ip)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :req), :ssl?)),
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      GET /foo HTTP/1.1\n"),
              s(:str, "      Host: localhost:10080\n"),
              s(:str, "      Client-IP: 234.234.234.234\n"),
              s(:str, "      X-Forwarded-Proto: https\n"),
              s(:str, "      X-Forwarded-For: 192.168.1.10\n"),
              s(:str, "      X-Forwarded-Host: forward1.example.com:1234, forward2.example.com:5678\n"),
              s(:str, "      X-Forwarded-Server: server1.example.com, server2.example.com\n"),
              s(:str, "      X-Requested-With: XMLHttpRequest\n"),
              s(:str, "      Connection: Keep-Alive\n"),
              s(:str, "\n"))),
          s(:send,
            s(:lvar, :msg), :gsub!,
            s(:regexp,
              s(:str, "^ {6}"),
              s(:regopt)),
            s(:str, "")),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:send,
            s(:lvar, :req), :parse,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:lvar, :msg))),
          s(:send, nil, :assert_equal,
            s(:str, "server1.example.com"),
            s(:send,
              s(:lvar, :req), :server_name)),
          s(:send, nil, :assert_equal,
            s(:str, "https://forward1.example.com:1234/foo"),
            s(:send,
              s(:send,
                s(:lvar, :req), :request_uri), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "forward1.example.com"),
            s(:send,
              s(:lvar, :req), :host)),
          s(:send, nil, :assert_equal,
            s(:int, 1234),
            s(:send,
              s(:lvar, :req), :port)),
          s(:send, nil, :assert_equal,
            s(:str, "234.234.234.234"),
            s(:send,
              s(:lvar, :req), :remote_ip)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :req), :ssl?)))),
      s(:def, :test_continue_sent,
        s(:args),
        s(:begin,
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      POST /path HTTP/1.1\n"),
              s(:str, "      Expect: 100-continue\n"),
              s(:str, "\n"))),
          s(:send,
            s(:lvar, :msg), :gsub!,
            s(:regexp,
              s(:str, "^ {6}"),
              s(:regopt)),
            s(:str, "")),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:send,
            s(:lvar, :req), :parse,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:lvar, :msg))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :req), :[],
              s(:str, "expect"))),
          s(:lvasgn, :l,
            s(:send,
              s(:lvar, :msg), :size)),
          s(:send,
            s(:lvar, :req), :continue),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :l),
            s(:send,
              s(:lvar, :msg), :size)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "HTTP/1.1 100 continue\\r\\n\\r\\n\\z"),
              s(:regopt)),
            s(:lvar, :msg)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :req), :[],
                s(:str, "expect")), :!)))),
      s(:def, :test_continue_not_sent,
        s(:args),
        s(:begin,
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      POST /path HTTP/1.1\n"),
              s(:str, "\n"))),
          s(:send,
            s(:lvar, :msg), :gsub!,
            s(:regexp,
              s(:str, "^ {6}"),
              s(:regopt)),
            s(:str, "")),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :Config), :HTTP))),
          s(:send,
            s(:lvar, :req), :parse,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:lvar, :msg))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :req), :[],
                s(:str, "expect")), :!)),
          s(:lvasgn, :l,
            s(:send,
              s(:lvar, :msg), :size)),
          s(:send,
            s(:lvar, :req), :continue),
          s(:send, nil, :assert_equal,
            s(:lvar, :l),
            s(:send,
              s(:lvar, :msg), :size)))),
      s(:def, :test_bad_messages,
        s(:args),
        s(:begin,
          s(:lvasgn, :param,
            s(:str, "foo=1;foo=2;foo=3;bar=x")),
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      POST /path?foo=x;foo=y;foo=z;bar=1 HTTP/1.1\n"),
              s(:str, "      Host: test.ruby-lang.org:8080\n"),
              s(:str, "      Content-Type: application/x-www-form-urlencoded\n"),
              s(:str, "\n"),
              s(:str, "      "),
              s(:begin,
                s(:lvar, :param)),
              s(:str, "\n"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :HTTPStatus), :LengthRequired)),
            s(:args),
            s(:begin,
              s(:lvasgn, :req,
                s(:send,
                  s(:const,
                    s(:const, nil, :WEBrick), :HTTPRequest), :new,
                  s(:const,
                    s(:const,
                      s(:const, nil, :WEBrick), :Config), :HTTP))),
              s(:send,
                s(:lvar, :req), :parse,
                s(:send,
                  s(:const, nil, :StringIO), :new,
                  s(:send,
                    s(:lvar, :msg), :gsub,
                    s(:regexp,
                      s(:str, "^ {6}"),
                      s(:regopt)),
                    s(:str, "")))),
              s(:send,
                s(:lvar, :req), :body))),
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      POST /path?foo=x;foo=y;foo=z;bar=1 HTTP/1.1\n"),
              s(:str, "      Host: test.ruby-lang.org:8080\n"),
              s(:str, "      Content-Length: 100000\n"),
              s(:str, "\n"),
              s(:str, "      body is too short.\n"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :HTTPStatus), :BadRequest)),
            s(:args),
            s(:begin,
              s(:lvasgn, :req,
                s(:send,
                  s(:const,
                    s(:const, nil, :WEBrick), :HTTPRequest), :new,
                  s(:const,
                    s(:const,
                      s(:const, nil, :WEBrick), :Config), :HTTP))),
              s(:send,
                s(:lvar, :req), :parse,
                s(:send,
                  s(:const, nil, :StringIO), :new,
                  s(:send,
                    s(:lvar, :msg), :gsub,
                    s(:regexp,
                      s(:str, "^ {6}"),
                      s(:regopt)),
                    s(:str, "")))),
              s(:send,
                s(:lvar, :req), :body))),
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "      POST /path?foo=x;foo=y;foo=z;bar=1 HTTP/1.1\n"),
              s(:str, "      Host: test.ruby-lang.org:8080\n"),
              s(:str, "      Transfer-Encoding: foobar\n"),
              s(:str, "\n"),
              s(:str, "      body is too short.\n"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :HTTPStatus), :NotImplemented)),
            s(:args),
            s(:begin,
              s(:lvasgn, :req,
                s(:send,
                  s(:const,
                    s(:const, nil, :WEBrick), :HTTPRequest), :new,
                  s(:const,
                    s(:const,
                      s(:const, nil, :WEBrick), :Config), :HTTP))),
              s(:send,
                s(:lvar, :req), :parse,
                s(:send,
                  s(:const, nil, :StringIO), :new,
                  s(:send,
                    s(:lvar, :msg), :gsub,
                    s(:regexp,
                      s(:str, "^ {6}"),
                      s(:regopt)),
                    s(:str, "")))),
              s(:send,
                s(:lvar, :req), :body))))))))
