s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestBignum),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@verbose,
            s(:gvar, :$VERBOSE)),
          s(:gvasgn, :$VERBOSE,
            s(:nil)),
          s(:ivasgn, :@fmax,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :MAX), :to_i)),
          s(:ivasgn, :@fmax2,
            s(:send,
              s(:ivar, :@fmax), :*,
              s(:int, 2))),
          s(:ivasgn, :@big,
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 1), :<<,
                  s(:int, 63))), :-,
              s(:int, 1))))),
      s(:def, :teardown,
        s(:args),
        s(:gvasgn, :$VERBOSE,
          s(:ivar, :@verbose))),
      s(:def, :fact,
        s(:args,
          s(:arg, :n)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :n), :==,
              s(:int, 0)),
            s(:return,
              s(:int, 1)), nil),
          s(:lvasgn, :f,
            s(:int, 1)),
          s(:while,
            s(:send,
              s(:lvar, :n), :>,
              s(:int, 0)),
            s(:begin,
              s(:op_asgn,
                s(:lvasgn, :f), :*,
                s(:lvar, :n)),
              s(:op_asgn,
                s(:lvasgn, :n), :-,
                s(:int, 1)))),
          s(:return,
            s(:lvar, :f)))),
      s(:def, :test_bignum,
        s(:args),
        s(:begin,
          s(:gvasgn, :$x,
            s(:send, nil, :fact,
              s(:int, 40))),
          s(:send, nil, :assert_equal,
            s(:gvar, :$x),
            s(:gvar, :$x)),
          s(:send, nil, :assert_equal,
            s(:gvar, :$x),
            s(:send, nil, :fact,
              s(:int, 40))),
          s(:send, nil, :assert_operator,
            s(:gvar, :$x),
            s(:sym, :<),
            s(:send,
              s(:gvar, :$x), :+,
              s(:int, 2))),
          s(:send, nil, :assert_operator,
            s(:gvar, :$x),
            s(:sym, :>),
            s(:send,
              s(:gvar, :$x), :-,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 815915283247897734345611269596115894272000000000),
            s(:gvar, :$x)),
          s(:send, nil, :assert_not_equal,
            s(:int, 815915283247897734345611269596115894272000000001),
            s(:gvar, :$x)),
          s(:send, nil, :assert_equal,
            s(:int, 815915283247897734345611269596115894272000000001),
            s(:send,
              s(:gvar, :$x), :+,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 335367096786357081410764800000),
            s(:send,
              s(:gvar, :$x), :/,
              s(:send, nil, :fact,
                s(:int, 20)))),
          s(:gvasgn, :$x,
            s(:send,
              s(:gvar, :$x), :-@)),
          s(:send, nil, :assert_equal,
            s(:int, -815915283247897734345611269596115894272000000000),
            s(:gvar, :$x)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 2), :-,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)))),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 32)), :-,
                  s(:int, 2))), :-@)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)), :-,
              s(:int, 5)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 32)), :-,
                  s(:int, 3))), :-,
              s(:int, 2))),
          s(:for,
            s(:lvasgn, :i),
            s(:irange,
              s(:int, 1000),
              s(:int, 1014)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:int, 2), :**,
                s(:lvar, :i)),
              s(:send,
                s(:int, 1), :<<,
                s(:lvar, :i)))),
          s(:lvasgn, :n1,
            s(:send,
              s(:int, 1), :<<,
              s(:int, 1000))),
          s(:for,
            s(:lvasgn, :i),
            s(:irange,
              s(:int, 1000),
              s(:int, 1014)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:lvar, :n1),
                s(:send,
                  s(:int, 1), :<<,
                  s(:lvar, :i))),
              s(:op_asgn,
                s(:lvasgn, :n1), :*,
                s(:int, 2)))),
          s(:lvasgn, :n2,
            s(:lvar, :n1)),
          s(:for,
            s(:lvasgn, :i),
            s(:irange,
              s(:int, 1),
              s(:int, 10)),
            s(:begin,
              s(:lvasgn, :n1,
                s(:send,
                  s(:lvar, :n1), :/,
                  s(:int, 2))),
              s(:lvasgn, :n2,
                s(:send,
                  s(:lvar, :n2), :>>,
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:lvar, :n1),
                s(:lvar, :n2)))),
          s(:for,
            s(:lvasgn, :i),
            s(:irange,
              s(:int, 4000),
              s(:int, 4096)),
            s(:begin,
              s(:lvasgn, :n1,
                s(:send,
                  s(:int, 1), :<<,
                  s(:lvar, :i))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :n1), :-,
                  s(:int, 1)),
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :n1), :**,
                        s(:int, 2)), :-,
                      s(:int, 1))), :/,
                  s(:begin,
                    s(:send,
                      s(:lvar, :n1), :+,
                      s(:int, 1))))))))),
      s(:def, :test_calc,
        s(:args),
        s(:begin,
          s(:lvasgn, :b,
            s(:send,
              s(:int, 10), :**,
              s(:int, 80))),
          s(:lvasgn, :a,
            s(:send,
              s(:send,
                s(:lvar, :b), :*,
                s(:int, 9)), :+,
              s(:int, 7))),
          s(:send, nil, :assert_equal,
            s(:int, 7),
            s(:send,
              s(:lvar, :a), :modulo,
              s(:lvar, :b))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :b), :-@), :+,
              s(:int, 7)),
            s(:send,
              s(:lvar, :a), :modulo,
              s(:send,
                s(:lvar, :b), :-@))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :b), :+,
              s(:int, -7)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :a), :-@)), :modulo,
              s(:lvar, :b))),
          s(:send, nil, :assert_equal,
            s(:int, -7),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :a), :-@)), :modulo,
              s(:send,
                s(:lvar, :b), :-@))),
          s(:send, nil, :assert_equal,
            s(:int, 7),
            s(:send,
              s(:lvar, :a), :remainder,
              s(:lvar, :b))),
          s(:send, nil, :assert_equal,
            s(:int, 7),
            s(:send,
              s(:lvar, :a), :remainder,
              s(:send,
                s(:lvar, :b), :-@))),
          s(:send, nil, :assert_equal,
            s(:int, -7),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :a), :-@)), :remainder,
              s(:lvar, :b))),
          s(:send, nil, :assert_equal,
            s(:int, -7),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :a), :-@)), :remainder,
              s(:send,
                s(:lvar, :b), :-@))),
          s(:send, nil, :assert_equal,
            s(:int, 10000000000000000000100000000000000000000),
            s(:send,
              s(:send,
                s(:int, 10), :**,
                s(:int, 40)), :+,
              s(:send,
                s(:int, 10), :**,
                s(:int, 20)))),
          s(:send, nil, :assert_equal,
            s(:int, 100000000000000000000),
            s(:send,
              s(:send,
                s(:int, 10), :**,
                s(:int, 40)), :/,
              s(:send,
                s(:int, 10), :**,
                s(:int, 20)))),
          s(:lvasgn, :a,
            s(:int, 677330545177305025495135714080)),
          s(:lvasgn, :b,
            s(:int, 14269972710765292560)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :a), :%,
              s(:lvar, :b))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:lvar, :a), :-@), :%,
              s(:lvar, :b))))),
      s(:def, :shift_test,
        s(:args,
          s(:arg, :a)),
        s(:begin,
          s(:lvasgn, :b,
            s(:send,
              s(:lvar, :a), :/,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))))),
          s(:lvasgn, :c,
            s(:send,
              s(:lvar, :a), :>>,
              s(:int, 32))),
          s(:send, nil, :assert_equal,
            s(:lvar, :b),
            s(:lvar, :c)),
          s(:lvasgn, :b,
            s(:send,
              s(:lvar, :a), :*,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))))),
          s(:lvasgn, :c,
            s(:send,
              s(:lvar, :a), :<<,
              s(:int, 32))),
          s(:send, nil, :assert_equal,
            s(:lvar, :b),
            s(:lvar, :c)))),
      s(:def, :test_shift,
        s(:args),
        s(:begin,
          s(:send, nil, :shift_test,
            s(:int, -4518325415524767873)),
          s(:send, nil, :shift_test,
            s(:int, -295147905179352825855)))),
      s(:def, :test_to_s,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "fvvvvvvvvvvvv"),
            s(:send,
              s(:int, 18446744073709551615), :to_s,
              s(:int, 32)),
            s(:str, "[ruby-core:10686]")),
          s(:send, nil, :assert_equal,
            s(:str, "g000000000000"),
            s(:send,
              s(:int, 18446744073709551616), :to_s,
              s(:int, 32)),
            s(:str, "[ruby-core:10686]")),
          s(:send, nil, :assert_equal,
            s(:str, "3w5e11264sgsf"),
            s(:send,
              s(:int, 18446744073709551615), :to_s,
              s(:int, 36)),
            s(:str, "[ruby-core:10686]")),
          s(:send, nil, :assert_equal,
            s(:str, "3w5e11264sgsg"),
            s(:send,
              s(:int, 18446744073709551616), :to_s,
              s(:int, 36)),
            s(:str, "[ruby-core:10686]")),
          s(:send, nil, :assert_equal,
            s(:str, "nd075ib45k86f"),
            s(:send,
              s(:int, 18446744073709551615), :to_s,
              s(:int, 31)),
            s(:str, "[ruby-core:10686]")),
          s(:send, nil, :assert_equal,
            s(:str, "nd075ib45k86g"),
            s(:send,
              s(:int, 18446744073709551616), :to_s,
              s(:int, 31)),
            s(:str, "[ruby-core:10686]")),
          s(:send, nil, :assert_equal,
            s(:str, "1777777777777777777777"),
            s(:send,
              s(:int, 18446744073709551615), :to_s,
              s(:int, 8))),
          s(:send, nil, :assert_equal,
            s(:str, "-1777777777777777777777"),
            s(:send,
              s(:int, -18446744073709551615), :to_s,
              s(:int, 8))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A10{99}1\\z"),
              s(:regopt)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:int, 10), :**,
                    s(:int, 100)), :+,
                  s(:int, 1))), :to_s)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A10{900}9{100}\\z"),
              s(:regopt)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:int, 10), :**,
                    s(:int, 1000)), :+,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:int, 10), :**,
                        s(:int, 100)), :-,
                      s(:int, 1))))), :to_s)))),
      s(:lvasgn, :b,
        s(:send,
          s(:int, 2), :**,
          s(:int, 64))),
      s(:until,
        s(:send,
          s(:const, nil, :Bignum), :===,
          s(:lvar, :b)),
        s(:op_asgn,
          s(:lvasgn, :b), :*,
          s(:lvar, :b))),
      s(:casgn, nil, :T_ZERO,
        s(:send,
          s(:send,
            s(:lvar, :b), :coerce,
            s(:int, 0)), :first)),
      s(:casgn, nil, :T_ONE,
        s(:send,
          s(:send,
            s(:lvar, :b), :coerce,
            s(:int, 1)), :first)),
      s(:casgn, nil, :T_MONE,
        s(:send,
          s(:send,
            s(:lvar, :b), :coerce,
            s(:int, -1)), :first)),
      s(:casgn, nil, :T31,
        s(:send,
          s(:send,
            s(:lvar, :b), :coerce,
            s(:send,
              s(:int, 2), :**,
              s(:int, 31))), :first)),
      s(:casgn, nil, :T31P,
        s(:send,
          s(:send,
            s(:lvar, :b), :coerce,
            s(:send,
              s(:const, nil, :T31), :-,
              s(:int, 1))), :first)),
      s(:casgn, nil, :T32,
        s(:send,
          s(:send,
            s(:lvar, :b), :coerce,
            s(:send,
              s(:int, 2), :**,
              s(:int, 32))), :first)),
      s(:casgn, nil, :T32P,
        s(:send,
          s(:send,
            s(:lvar, :b), :coerce,
            s(:send,
              s(:const, nil, :T32), :-,
              s(:int, 1))), :first)),
      s(:casgn, nil, :T64,
        s(:send,
          s(:send,
            s(:lvar, :b), :coerce,
            s(:send,
              s(:int, 2), :**,
              s(:int, 64))), :first)),
      s(:casgn, nil, :T64P,
        s(:send,
          s(:send,
            s(:lvar, :b), :coerce,
            s(:send,
              s(:const, nil, :T64), :-,
              s(:int, 1))), :first)),
      s(:casgn, nil, :T1024,
        s(:send,
          s(:send,
            s(:lvar, :b), :coerce,
            s(:send,
              s(:int, 2), :**,
              s(:int, 1024))), :first)),
      s(:casgn, nil, :T1024P,
        s(:send,
          s(:send,
            s(:lvar, :b), :coerce,
            s(:send,
              s(:const, nil, :T1024), :-,
              s(:int, 1))), :first)),
      s(:lvasgn, :f,
        s(:lvar, :b)),
      s(:while,
        s(:send,
          s(:const, nil, :Bignum), :===,
          s(:send,
            s(:lvar, :f), :-,
            s(:int, 1))),
        s(:lvasgn, :f,
          s(:send,
            s(:lvar, :f), :>>,
            s(:int, 1)))),
      s(:casgn, nil, :FIXNUM_MAX,
        s(:send,
          s(:lvar, :f), :-,
          s(:int, 1))),
      s(:def, :test_prepare,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Bignum),
            s(:const, nil, :T_ZERO)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Bignum),
            s(:const, nil, :T_ONE)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Bignum),
            s(:const, nil, :T_MONE)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Bignum),
            s(:const, nil, :T31)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Bignum),
            s(:const, nil, :T31P)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Bignum),
            s(:const, nil, :T32)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Bignum),
            s(:const, nil, :T32P)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Bignum),
            s(:const, nil, :T64)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Bignum),
            s(:const, nil, :T64P)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Bignum),
            s(:const, nil, :T1024)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Bignum),
            s(:const, nil, :T1024P)))),
      s(:def, :test_big_2comp,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "-4294967296"),
            s(:send,
              s(:begin,
                s(:send,
                  s(:const, nil, :T32P), :~)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "..f00000000"),
            s(:send,
              s(:str, "%x"), :%,
              s(:send,
                s(:const, nil, :T32), :-@))))),
      s(:def, :test_int2inum,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const, nil, :T31P)),
            s(:send,
              s(:send,
                s(:array,
                  s(:const, nil, :T31P)), :pack,
                s(:str, "I")), :unpack,
              s(:str, "I"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const, nil, :T31P)),
            s(:send,
              s(:send,
                s(:array,
                  s(:const, nil, :T31P)), :pack,
                s(:str, "i")), :unpack,
              s(:str, "i"))))),
      s(:def, :test_quad_pack,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:send,
                s(:array,
                  s(:int, 1)), :pack,
                s(:str, "q")), :unpack,
              s(:str, "q"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:int, 1), :-@)),
            s(:send,
              s(:send,
                s(:array,
                  s(:send,
                    s(:int, 1), :-@)), :pack,
                s(:str, "q")), :unpack,
              s(:str, "q"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const, nil, :T31P)),
            s(:send,
              s(:send,
                s(:array,
                  s(:const, nil, :T31P)), :pack,
                s(:str, "q")), :unpack,
              s(:str, "q"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:const, nil, :T31P), :-@)),
            s(:send,
              s(:send,
                s(:array,
                  s(:send,
                    s(:const, nil, :T31P), :-@)), :pack,
                s(:str, "q")), :unpack,
              s(:str, "q"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const, nil, :T64P)),
            s(:send,
              s(:send,
                s(:array,
                  s(:const, nil, :T64P)), :pack,
                s(:str, "Q")), :unpack,
              s(:str, "Q"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0)),
            s(:send,
              s(:send,
                s(:array,
                  s(:const, nil, :T64)), :pack,
                s(:str, "Q")), :unpack,
              s(:str, "Q"))))),
      s(:def, :test_str_to_inum,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:str, " +1"), :to_i)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:str, " -1"), :to_i)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:str, "++1"), :to_i)),
          s(:send, nil, :assert_equal,
            s(:int, 73),
            s(:send,
              s(:str, "111"), :oct)),
          s(:send, nil, :assert_equal,
            s(:int, 273),
            s(:send,
              s(:str, "0x111"), :oct)),
          s(:send, nil, :assert_equal,
            s(:int, 7),
            s(:send,
              s(:str, "0b111"), :oct)),
          s(:send, nil, :assert_equal,
            s(:int, 73),
            s(:send,
              s(:str, "0o111"), :oct)),
          s(:send, nil, :assert_equal,
            s(:int, 111),
            s(:send,
              s(:str, "0d111"), :oct)),
          s(:send, nil, :assert_equal,
            s(:int, 73),
            s(:send,
              s(:str, "0111"), :oct)),
          s(:send, nil, :assert_equal,
            s(:int, 111),
            s(:send, nil, :Integer,
              s(:str, "111"))),
          s(:send, nil, :assert_equal,
            s(:int, 13),
            s(:send,
              s(:str, "111"), :to_i,
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:str, "111"), :to_i,
              s(:int, 37))),
          s(:send, nil, :assert_equal,
            s(:int, 1333),
            s(:send,
              s(:str, "111"), :to_i,
              s(:int, 36))),
          s(:send, nil, :assert_equal,
            s(:int, 1057),
            s(:send,
              s(:str, "111"), :to_i,
              s(:int, 32))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:str, "00a"), :to_i)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send, nil, :Integer,
              s(:str, "1 "))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Integer,
              s(:str, "1_"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Integer,
              s(:str, "1__"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Integer,
              s(:str, "1_0 x"))),
          s(:send, nil, :assert_equal,
            s(:const, nil, :T31P),
            s(:send,
              s(:str, "1111111111111111111111111111111"), :to_i,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:str, "0_2"), :to_i)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:str, "00_2"), :to_i)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:str, "00_02"), :to_i)))),
      s(:def, :test_to_s2,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :T31P), :to_s,
              s(:int, 37))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "9"), :*,
              s(:int, 32768)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:int, 10), :**,
                    s(:int, 32768)), :-,
                  s(:int, 1))), :to_s)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RangeError)),
            s(:args),
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:int, 1),
              s(:const, nil, :T64P))),
          s(:send, nil, :assert_equal,
            s(:str, "0"),
            s(:send,
              s(:const, nil, :T_ZERO), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "1"),
            s(:send,
              s(:const, nil, :T_ONE), :to_s)))),
      s(:def, :test_to_f,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :T31P), :to_f), :to_i)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 1024), :**,
                    s(:int, 1024))), :to_f), :to_i)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 50000))), :to_f), :infinite?)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:int, 2), :**,
                        s(:int, 50000))), :-@)), :to_f), :infinite?)))),
      s(:def, :test_cmp,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_operator,
            s(:const, nil, :T31P),
            s(:sym, :>),
            s(:int, 1)),
          s(:send, nil, :assert_operator,
            s(:const, nil, :T31P),
            s(:sym, :<),
            s(:float, 2147483648.0)),
          s(:send, nil, :assert_operator,
            s(:const, nil, :T31P),
            s(:sym, :<),
            s(:const, nil, :T64P)),
          s(:send, nil, :assert_operator,
            s(:const, nil, :T64P),
            s(:sym, :>),
            s(:const, nil, :T31P)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :T31P), :<,
              s(:str, "foo"))),
          s(:send, nil, :assert_operator,
            s(:const, nil, :T64),
            s(:sym, :<),
            s(:begin,
              s(:send,
                s(:float, 1.0), :/,
                s(:float, 0.0)))),
          s(:send, nil, :assert_not_operator,
            s(:const, nil, :T64),
            s(:sym, :>),
            s(:begin,
              s(:send,
                s(:float, 1.0), :/,
                s(:float, 0.0)))))),
      s(:def, :test_eq,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_equal,
            s(:const, nil, :T31P),
            s(:int, 1)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :T31P),
            s(:float, 2147483647.0)),
          s(:send, nil, :assert_not_equal,
            s(:const, nil, :T31P),
            s(:str, "foo")),
          s(:send, nil, :assert_not_equal,
            s(:send,
              s(:int, 2), :**,
              s(:int, 77889)),
            s(:begin,
              s(:send,
                s(:float, 1.0), :/,
                s(:float, 0.0))),
            s(:str, "[ruby-core:31603]")))),
      s(:def, :test_eql,
        s(:args),
        s(:send, nil, :assert_send,
          s(:array,
            s(:const, nil, :T31P),
            s(:sym, :eql?),
            s(:const, nil, :T31P)))),
      s(:def, :test_convert,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 255)),
            s(:send,
              s(:send,
                s(:array,
                  s(:const, nil, :T_MONE)), :pack,
                s(:str, "C")), :unpack,
              s(:str, "C"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0)),
            s(:send,
              s(:send,
                s(:array,
                  s(:const, nil, :T32)), :pack,
                s(:str, "C")), :unpack,
              s(:str, "C"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RangeError)),
            s(:args),
            s(:send,
              s(:int, 0), :to_s,
              s(:const, nil, :T32))))),
      s(:def, :test_sub,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :T31), :-@),
            s(:send,
              s(:const, nil, :T32), :-,
              s(:begin,
                s(:send,
                  s(:const, nil, :T32), :+,
                  s(:const, nil, :T31))))),
          s(:lvasgn, :x,
            s(:send,
              s(:int, 2), :**,
              s(:int, 100))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :x), :+,
                  s(:int, 2))), :-,
              s(:begin,
                s(:send,
                  s(:lvar, :x), :+,
                  s(:int, 1))))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :x), :+,
                  s(:int, 1))), :-,
              s(:begin,
                s(:send,
                  s(:lvar, :x), :+,
                  s(:int, 2))))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 100))), :-,
              s(:begin,
                s(:send,
                  s(:float, 2.0), :**,
                  s(:int, 100))))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :coerce,
            s(:args,
              s(:arg, :x)),
            s(:array,
              s(:lvar, :x),
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 100)), :+,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100)), :+,
                  s(:int, 1))), :-,
              s(:lvar, :o))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:const, nil, :T_ONE), :-,
              s(:int, 2))))),
      s(:def, :test_plus,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :T32), :to_f),
            s(:send,
              s(:const, nil, :T32P), :+,
              s(:float, 1.0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :T32), :+,
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:int, 1267651809154049016125877911552),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 100))), :+,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 80))))),
          s(:send, nil, :assert_equal,
            s(:int, 1267651809154049016125877911552),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 80))), :+,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 100))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 2), :**,
              s(:int, 101)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 100))), :+,
              s(:begin,
                s(:send,
                  s(:float, 2.0), :**,
                  s(:int, 100))))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :coerce,
            s(:args,
              s(:arg, :x)),
            s(:array,
              s(:lvar, :x),
              s(:send,
                s(:int, 2), :**,
                s(:int, 80)))),
          s(:send, nil, :assert_equal,
            s(:int, 1267651809154049016125877911552),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 100))), :+,
              s(:lvar, :o))))),
      s(:def, :test_minus,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :T32P), :to_f),
            s(:send,
              s(:const, nil, :T32), :-,
              s(:float, 1.0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :T32), :-,
              s(:str, "foo"))))),
      s(:def, :test_mul,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :T32), :to_f),
            s(:send,
              s(:const, nil, :T32), :*,
              s(:float, 1.0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :T32), :*,
              s(:str, "foo"))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :coerce,
            s(:args,
              s(:arg, :x)),
            s(:array,
              s(:lvar, :x),
              s(:send,
                s(:int, 2), :**,
                s(:int, 100)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 2), :**,
              s(:int, 180)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 80))), :*,
              s(:lvar, :o))))),
      s(:def, :test_positive_p,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_predicate,
            s(:const, nil, :T_ONE),
            s(:sym, :positive?)),
          s(:send, nil, :assert_not_predicate,
            s(:const, nil, :T_MONE),
            s(:sym, :positive?)),
          s(:send, nil, :assert_not_predicate,
            s(:const, nil, :T_ZERO),
            s(:sym, :positive?)))),
      s(:def, :test_negative_p,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_predicate,
            s(:const, nil, :T_ONE),
            s(:sym, :negative?)),
          s(:send, nil, :assert_predicate,
            s(:const, nil, :T_MONE),
            s(:sym, :negative?)),
          s(:send, nil, :assert_not_predicate,
            s(:const, nil, :T_ZERO),
            s(:sym, :negative?)))),
      s(:def, :test_mul_balance,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:int, 3), :**,
            s(:int, 7000)),
          s(:send,
            s(:begin,
              s(:send,
                s(:int, 3), :**,
                s(:int, 5000))), :*,
            s(:begin,
              s(:send,
                s(:int, 3), :**,
                s(:int, 2000)))))),
      s(:def, :test_mul_large_numbers,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:send,
                s(:array,
                  s(:str, "32580286268570032115047167942578356789222410206194227403993117616454027392"),
                  s(:str, "62501901985861926098797067562795526004375784403965882943322008991129440928"),
                  s(:str, "33855888840298794008677656280486901895499985197580043127115026675632969396"),
                  s(:str, "55040226415022070581995493731570435346323030715226718346725312551631168110"),
                  s(:str, "83966158581772380474470605428802018934282425947323171408377505151988776271"),
                  s(:str, "85865548747366001752375899635539662017095652855537225416899242508164949615"),
                  s(:str, "96848508410008685252121247181772953744297349638273854170932226446528911938"),
                  s(:str, "03430429031094465344063914822790537339912760237589085026016396616506014081"),
                  s(:str, "53557719631183538265614091691713138728177917059624255801026099255450058876"),
                  s(:str, "97412698978242128457751836011774504753020608663272925708049430557191193188"),
                  s(:str, "23212591809241860763625985763438355314593186083254640117460724730431447842"),
                  s(:str, "15432124830037389073162094304199742919767272162759192882136828372588787906"),
                  s(:str, "96027938532441670018954643423581446981760344524184231299785949158765352788"),
                  s(:str, "38452309862972527623669323263424418781899966895996672291193305401609553502"),
                  s(:str, "63893514163147729201340204483973131948541009975283778189609285614445485714"),
                  s(:str, "63843850089417416331356938086609682943037801440660232801570877143192251897"),
                  s(:str, "63026816485314923378023904237699794122181407920355722922555234540701118607"),
                  s(:str, "37971417665315821995516986204709574657462370947443531049033704997194647442"),
                  s(:str, "13711787319587466437795542850136751816475182349380345341647976135081955799"),
                  s(:str, "56787050815348701001765730577514591032367920292271016649813170789854524395"),
                  s(:str, "72571698998841196411826453893352760318867994518757872432266374568779920489"),
                  s(:str, "55597104558927387008506485038236352630863481679853742412042588244086070827"),
                  s(:str, "43705456833283086410967648483312972903432798923897357373793064381177468258"),
                  s(:str, "69131640408147806442422254638590386673344704147156793990832671592488742473"),
                  s(:str, "31524606724894164324227362735271650556732855509929890983919463699819116427")), :join), :to_i)),
          s(:lvasgn, :b,
            s(:send,
              s(:send,
                s(:array,
                  s(:str, "31519454770031243652776765515030872050264386564379909299874378289835540661"),
                  s(:str, "99756262835346828114038365624177182230027040172583473561802565238817167503"),
                  s(:str, "85144159132462819032164726177606533272071955542237648482852154879445654746"),
                  s(:str, "25061253606344846225905712926863168413666058602449408307586532461776530803"),
                  s(:str, "56810626880722653177544008166119272373179841889454920521993413902672848145"),
                  s(:str, "77974951972342194855267960390195830413354782136431833731467699250684103370"),
                  s(:str, "98571305167189174270854698169136844578685346745340041520068176478277580590"),
                  s(:str, "43810457765638903028049263788987034217272442328962400931269515791911786205"),
                  s(:str, "15357047519615932249418012945178659435259428163356223753159488306813844040"),
                  s(:str, "93609959555018799309373542926110109744437994067754004273450659607204900586"),
                  s(:str, "28878103661124568217617766580438460505513654179249613168352070584906185237"),
                  s(:str, "34829991855182473813233425492094534396541544295119674419522772382981982574"),
                  s(:str, "64708442087451070125274285088681225122475041996116377707892328889948526913"),
                  s(:str, "82239084041628877737628853240361038273348062246951097300286513836140601495"),
                  s(:str, "63604611754185656404194406869925540477185577643853560887894081047256701731"),
                  s(:str, "66884554460428760857958761948461476977864005799494946578017758268987123749"),
                  s(:str, "85937011490156431231903167442071541493304390639100774497107347884381581049"),
                  s(:str, "85451663323551635322518839895028929788021096587229364219084708576998525298"),
                  s(:str, "39594168681411529110089531428721005176467479027585291807482375043729783455"),
                  s(:str, "35827667428080449919778142400266842990117940984804919512360370451936835708"),
                  s(:str, "76338722049621773169385978521438867493162717866679193103745711403152099047"),
                  s(:str, "27294943901673885707639094215339506973982546487889199083181789561917985023"),
                  s(:str, "82368442718514694400160954955539704757794969665555505203532944598698824542"),
                  s(:str, "00599461848630034847211204029842422678421808487300084850702007663003230882"),
                  s(:str, "16645745324467830796203354080471008809087072562876681588151822072260738003")), :join), :to_i)),
          s(:lvasgn, :c,
            s(:send,
              s(:send,
                s(:array,
                  s(:str, "10269128594368631269792194698469828812223242061960065022209211719149714886"),
                  s(:str, "03494742299892841188636314745174778237781513956755034582435818316155459882"),
                  s(:str, "71422025990633195596790290038198841087091600598192959108790192789550336119"),
                  s(:str, "13849937951116346796903163312950010689963716629093190601532313463306463573"),
                  s(:str, "64436438673379454947908896258675634478867189655764364639888427350090856831"),
                  s(:str, "84369949421175534994092429682748078316130135651006102162888937624830856951"),
                  s(:str, "64818150356583421988135211585954838926347035741143424980258821170351244310"),
                  s(:str, "33072045488402539147707418016613224788469923473310249137422855065567940804"),
                  s(:str, "75231970365923936034328561426062696074717204901606475826224235014948198414"),
                  s(:str, "19979210494282212322919438926816203585575357874850252052656098969732107129"),
                  s(:str, "30639419804565653489687198910271702181183420960744232756057631336661646896"),
                  s(:str, "48734093497394719644969417287962767186599484579769717220518657324467736902"),
                  s(:str, "16947995288312851432262922140679347615046098863974141226499783975470926697"),
                  s(:str, "95970415188661518504275964397022973192968233221707696639386238428211541334"),
                  s(:str, "69925631385166494600401675904803418143232703594169525858261988389529181035"),
                  s(:str, "06048776134746377586210180203524132714354779486439559392942733781343640971"),
                  s(:str, "02430607931736785273011780813863748280091795277451796799961887248262211653"),
                  s(:str, "38966967509803488282644299584920109534552889962877144862747797551711984992"),
                  s(:str, "00726518175235286668236031649728858774545087668286506201943248842967749907"),
                  s(:str, "05345423019480534625965140632428736051632750698608916592720742728646191514"),
                  s(:str, "86268964807395494825321744802493138032936406889713953832376411900451422777"),
                  s(:str, "06372983421062172556566901346288286168790235741528630664513209619789835729"),
                  s(:str, "36999522461733403414326366959273556098219489572448083984779946889707480205"),
                  s(:str, "42459898495081687425132939473146331452400120169525968892769310016015870148"),
                  s(:str, "66821361032541586130017904207971120217385522074967066199941112154460026348"),
                  s(:str, "07223950375610474071278649031647998546085807777970592429037128484222394216"),
                  s(:str, "33776560239741740193444702279919018283324070210090106960567819910943036248"),
                  s(:str, "16660475627526085805165023447934326510232828674828006752369603151390527384"),
                  s(:str, "16810180735871644266726954590262010744712519045524839388305761859432443670"),
                  s(:str, "05188791334908140831469790180096209292338569623252372975043915954675335333"),
                  s(:str, "66614002146554533771788633057869340167604765688639181655208751680821446276"),
                  s(:str, "75871494160208888666798836473728725968253820774671626436794492530356258709"),
                  s(:str, "62318715778035246655925307167306434486713879511272648637608703497794724929"),
                  s(:str, "54912261106702913491290913962825303534484477936036071463820553314826894581"),
                  s(:str, "36951927032835690160443252405644718368516656317176848748544135126122940034"),
                  s(:str, "68454782581240953957381976073459570718038035358630417744490242611126043987"),
                  s(:str, "89191812971310096496208294948623403471433467614886863238916702384858514703"),
                  s(:str, "24327715474804343531844042107910755966152655912676456945146277848606406879"),
                  s(:str, "49724219295823540160221752189725460676360350860849986313532861445465771187"),
                  s(:str, "86822806696323658053947125253562001971534265078959827450518368635828010637"),
                  s(:str, "91977444206363529864361796188661941906329947840521598310396004328950804758"),
                  s(:str, "79728679236044038853668859284513594307352133390781441610395116807369310560"),
                  s(:str, "35193762565748328526426224069629084264376146174383444988110993194030351064"),
                  s(:str, "29660536743256949099972314033972121470913480844652490838985461134989129492"),
                  s(:str, "75577567064571716731774820127381261057956083604361635892088585967074514802"),
                  s(:str, "51958582645785905276289980534832170529946494815794770854644518463332458915"),
                  s(:str, "77572397432680871220602513555535017751714443325264019171753694163676670792"),
                  s(:str, "04353584782364068773777058727187323211012094819929720407636607815292764459"),
                  s(:str, "21851731257845562153822058534043916834839514338448582518847879059020959697"),
                  s(:str, "90538105704766415685100946308842788321400392381169436435078204622400475281")), :join), :to_i)),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:send,
              s(:lvar, :a), :*,
              s(:lvar, :b)),
            s(:str, "[ruby-core:48552]")))),
      s(:def, :test_divrem,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:int, 0),
          s(:send,
            s(:const, nil, :T32), :/,
            s(:const, nil, :T64)))),
      s(:def, :test_divide,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5490,
            s(:str, "[ruby-core:40429]")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ZeroDivisionError),
              s(:lvar, :bug5490)),
            s(:args),
            s(:send,
              s(:const, nil, :T1024), :/,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:const, nil, :T1024), :/,
              s(:float, 0.0)),
            s(:lvar, :bug5490)))),
      s(:def, :test_div,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :T32), :to_f),
            s(:send,
              s(:const, nil, :T32), :/,
              s(:float, 1.0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :T32), :/,
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:int, 536870912),
            s(:send,
              s(:int, 1073741825), :div,
              s(:float, 2.0)),
            s(:str, "[ruby-dev:34553]")),
          s(:lvasgn, :bug5490,
            s(:str, "[ruby-core:40429]")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ZeroDivisionError),
              s(:lvar, :bug5490)),
            s(:args),
            s(:send,
              s(:const, nil, :T1024), :div,
              s(:int, 0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ZeroDivisionError),
              s(:lvar, :bug5490)),
            s(:args),
            s(:send,
              s(:const, nil, :T1024), :div,
              s(:float, 0.0))))),
      s(:def, :test_idiv,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:int, 715827882),
          s(:send,
            s(:int, 1073741824), :div,
            s(:send, nil, :Rational,
              s(:int, 3),
              s(:int, 2))),
          s(:str, " [ruby-dev:34066]"))),
      s(:def, :test_modulo,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send,
            s(:const, nil, :T32), :%,
            s(:str, "foo")))),
      s(:def, :test_remainder,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:const, nil, :T32), :remainder,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :T32), :remainder,
              s(:str, "foo"))))),
      s(:def, :test_divmod,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const, nil, :T32),
              s(:int, 0)),
            s(:send,
              s(:const, nil, :T32), :divmod,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 0)),
            s(:send,
              s(:const, nil, :T32), :divmod,
              s(:const, nil, :T31))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :T32), :divmod,
              s(:str, "foo"))))),
      s(:def, :test_quo,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Float),
            s(:send,
              s(:const, nil, :T32), :quo,
              s(:float, 1.0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :T32), :to_f),
            s(:send,
              s(:const, nil, :T32), :quo,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :T32), :to_f),
            s(:send,
              s(:const, nil, :T32), :quo,
              s(:float, 1.0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :T32), :to_f),
            s(:send,
              s(:const, nil, :T32), :quo,
              s(:const, nil, :T_ONE))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :T32), :quo,
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 1024), :**,
              s(:int, 1024)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 1024), :**,
                  s(:int, 1024))), :quo,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 1024), :**,
                  s(:int, 1024))), :quo,
              s(:float, 1.0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:int, 1024), :**,
                s(:int, 1024)), :*,
              s(:int, 2)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:int, 1024), :**,
                    s(:int, 1024)), :*,
                  s(:int, 2))), :quo,
              s(:int, 1))),
          s(:lvasgn, :inf,
            s(:send,
              s(:int, 1), :/,
              s(:float, 0.0))),
          s(:lvasgn, :nan,
            s(:send,
              s(:lvar, :inf), :/,
              s(:lvar, :inf))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:int, 1024), :**,
                      s(:int, 1024)), :*,
                    s(:int, 2))), :quo,
                s(:lvar, :nan)),
              s(:sym, :nan?))))),
      s(:def, :test_pow,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:float, 1.0),
            s(:send,
              s(:const, nil, :T32), :**,
              s(:float, 0.0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:float, 1.0), :/,
              s(:const, nil, :T32)),
            s(:send,
              s(:const, nil, :T32), :**,
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:begin,
                s(:send,
                  s(:const, nil, :T32), :**,
                  s(:const, nil, :T32))), :infinite?)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:begin,
                s(:send,
                  s(:const, nil, :T32), :**,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:int, 2), :**,
                        s(:int, 30)), :-,
                      s(:int, 1))))), :infinite?)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError),
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :T32), :**,
              s(:str, "foo"))),
          s(:lvasgn, :feature3429,
            s(:str, "[ruby-core:30735]")),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Bignum),
            s(:begin,
              s(:send,
                s(:int, 2), :**,
                s(:int, 7830457))),
            s(:lvar, :feature3429)))),
      s(:def, :test_and,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:const, nil, :T32), :&,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :T32), :-@),
            s(:send,
              s(:begin,
                s(:send,
                  s(:const, nil, :T32), :-@)), :&,
              s(:begin,
                s(:send,
                  s(:const, nil, :T31), :-@)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:const, nil, :T32), :&,
              s(:const, nil, :T64))))),
      s(:def, :test_or,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :T32), :+,
              s(:int, 1)),
            s(:send,
              s(:const, nil, :T32), :|,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :T32), :+,
              s(:const, nil, :T31)),
            s(:send,
              s(:const, nil, :T32), :|,
              s(:const, nil, :T31))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :T31), :-@),
            s(:send,
              s(:begin,
                s(:send,
                  s(:const, nil, :T32), :-@)), :|,
              s(:begin,
                s(:send,
                  s(:const, nil, :T31), :-@)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :T64), :+,
              s(:const, nil, :T32)),
            s(:send,
              s(:const, nil, :T32), :|,
              s(:const, nil, :T64))),
          s(:send, nil, :assert_equal,
            s(:const, nil, :FIXNUM_MAX),
            s(:send,
              s(:const, nil, :T_ZERO), :|,
              s(:const, nil, :FIXNUM_MAX))))),
      s(:def, :test_xor,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :T32), :+,
              s(:int, 1)),
            s(:send,
              s(:const, nil, :T32), :^,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :T32), :+,
              s(:const, nil, :T31)),
            s(:send,
              s(:const, nil, :T32), :^,
              s(:const, nil, :T31))),
          s(:send, nil, :assert_equal,
            s(:const, nil, :T31),
            s(:send,
              s(:begin,
                s(:send,
                  s(:const, nil, :T32), :-@)), :^,
              s(:begin,
                s(:send,
                  s(:const, nil, :T31), :-@)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :T64), :+,
              s(:const, nil, :T32)),
            s(:send,
              s(:const, nil, :T32), :^,
              s(:const, nil, :T64))))),
      s(:class,
        s(:const, nil, :DummyNumeric),
        s(:const, nil, :Numeric),
        s(:def, :to_int,
          s(:args),
          s(:int, 1))),
      s(:def, :test_and_with_float,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send,
            s(:const, nil, :T1024), :&,
            s(:float, 1.5)))),
      s(:def, :test_and_with_rational,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError),
            s(:str, "#1792")),
          s(:args),
          s(:send,
            s(:const, nil, :T1024), :&,
            s(:send, nil, :Rational,
              s(:int, 3),
              s(:int, 2))))),
      s(:def, :test_and_with_nonintegral_numeric,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError),
            s(:str, "#1792")),
          s(:args),
          s(:send,
            s(:const, nil, :T1024), :&,
            s(:send,
              s(:const, nil, :DummyNumeric), :new)))),
      s(:def, :test_or_with_float,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send,
            s(:const, nil, :T1024), :|,
            s(:float, 1.5)))),
      s(:def, :test_or_with_rational,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError),
            s(:str, "#1792")),
          s(:args),
          s(:send,
            s(:const, nil, :T1024), :|,
            s(:send, nil, :Rational,
              s(:int, 3),
              s(:int, 2))))),
      s(:def, :test_or_with_nonintegral_numeric,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError),
            s(:str, "#1792")),
          s(:args),
          s(:send,
            s(:const, nil, :T1024), :|,
            s(:send,
              s(:const, nil, :DummyNumeric), :new)))),
      s(:def, :test_xor_with_float,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send,
            s(:const, nil, :T1024), :^,
            s(:float, 1.5)))),
      s(:def, :test_xor_with_rational,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError),
            s(:str, "#1792")),
          s(:args),
          s(:send,
            s(:const, nil, :T1024), :^,
            s(:send, nil, :Rational,
              s(:int, 3),
              s(:int, 2))))),
      s(:def, :test_xor_with_nonintegral_numeric,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError),
            s(:str, "#1792")),
          s(:args),
          s(:send,
            s(:const, nil, :T1024), :^,
            s(:send,
              s(:const, nil, :DummyNumeric), :new)))),
      s(:def, :test_shift2,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 2), :**,
              s(:int, 33)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))), :<<,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 2), :**,
              s(:int, 31)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))), :<<,
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 2), :**,
              s(:int, 33)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))), :<<,
              s(:float, 1.0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 2), :**,
              s(:int, 31)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))), :<<,
              s(:float, -1.0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 2), :**,
              s(:int, 33)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))), :<<,
              s(:const, nil, :T_ONE))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 2), :**,
              s(:int, 31)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))), :<<,
              s(:const, nil, :T_MONE))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 2), :**,
              s(:int, 31)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))), :>>,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 2), :**,
              s(:int, 33)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))), :>>,
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 2), :**,
              s(:int, 31)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))), :>>,
              s(:float, 1.0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 2), :**,
              s(:int, 33)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))), :>>,
              s(:float, -1.0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 2), :**,
              s(:int, 31)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))), :>>,
              s(:const, nil, :T_ONE))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 2), :**,
              s(:int, 33)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))), :>>,
              s(:const, nil, :T_MONE))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))), :>>,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 32))), :-@), :>>,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))), :>>,
              s(:int, 128))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 32))), :-@), :>>,
              s(:int, 128))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 31))), :>>,
              s(:int, 32))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 31))), :-@), :>>,
              s(:int, 32))))),
      s(:def, :test_shift_bigshift,
        s(:args),
        s(:begin,
          s(:lvasgn, :big,
            s(:send,
              s(:int, 2), :**,
              s(:int, 300))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:int, 2), :**,
                s(:int, 65538)), :/,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 65537)))),
            s(:send,
              s(:send,
                s(:int, 2), :**,
                s(:int, 65538)), :>>,
              s(:send,
                s(:send,
                  s(:lvar, :big), :coerce,
                  s(:int, 65537)), :first))))),
      s(:def, :test_aref,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))), :[],
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))), :[],
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 32))), :-@))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))), :[],
              s(:const, nil, :T_ZERO))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:begin,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 64))), :-@)), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 256)), :-@)), :[],
              s(:int, 256))))),
      s(:def, :test_hash,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised),
          s(:args),
          s(:send,
            s(:const, nil, :T31P), :hash))),
      s(:def, :test_coerce,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const, nil, :T64P),
              s(:const, nil, :T31P)),
            s(:send,
              s(:const, nil, :T31P), :coerce,
              s(:const, nil, :T64P))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :T31P), :coerce,
              s(:nil))),
          s(:lvasgn, :obj,
            s(:send,
              s(:send, nil, :eval,
                s(:str, "class C🗿; self; end")), :new)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "C\\u{1f5ff}"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:const, nil, :T31P), :coerce,
              s(:lvar, :obj))))),
      s(:def, :test_abs,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:const, nil, :T31P),
          s(:send,
            s(:begin,
              s(:send,
                s(:const, nil, :T31P), :-@)), :abs))),
      s(:def, :test_size,
        s(:args),
        s(:send, nil, :assert_kind_of,
          s(:const, nil, :Integer),
          s(:send,
            s(:const, nil, :T31P), :size))),
      s(:def, :test_odd,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 32)), :+,
                  s(:int, 1))), :odd?)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))), :odd?)))),
      s(:def, :test_even,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 32)), :+,
                  s(:int, 1))), :even?)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))), :even?)))),
      s(:def, :test_interrupt_during_to_s,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :Bignum), :GMP_VERSION)),
            s(:return), nil),
          s(:lvasgn, :time,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:lvasgn, :start_flag,
            s(:false)),
          s(:lvasgn, :end_flag,
            s(:false)),
          s(:lvasgn, :num,
            s(:begin,
              s(:send,
                s(:int, 65536), :**,
                s(:int, 65536)))),
          s(:lvasgn, :thread,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:begin,
                s(:lvasgn, :start_flag,
                  s(:true)),
                s(:send,
                  s(:lvar, :num), :to_s),
                s(:lvasgn, :end_flag,
                  s(:true))))),
          s(:until,
            s(:lvar, :start_flag),
            s(:send, nil, :sleep,
              s(:float, 0.001))),
          s(:send,
            s(:lvar, :thread), :raise),
          s(:rescue,
            s(:send,
              s(:lvar, :thread), :join),
            s(:resbody, nil, nil,
              s(:nil)), nil),
          s(:lvasgn, :time,
            s(:send,
              s(:send,
                s(:const, nil, :Time), :now), :-,
              s(:lvar, :time))),
          s(:if,
            s(:lvar, :end_flag),
            s(:send, nil, :skip,
              s(:str, "too fast cpu")), nil),
          s(:send, nil, :assert_operator,
            s(:lvar, :time),
            s(:sym, :<),
            s(:int, 10)))),
      s(:def, :test_interrupt_during_bigdivrem,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :Bignum), :GMP_VERSION)),
            s(:return), nil),
          s(:if,
            s(:send,
              s(:const, nil, :Process), :respond_to?,
              s(:sym, :kill)), nil,
            s(:return)),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :trace,
                  s(:array)),
                s(:lvasgn, :oldtrap,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Signal), :trap,
                      s(:sym, :INT)),
                    s(:args,
                      s(:arg, :sig)),
                    s(:send,
                      s(:lvar, :trace), :<<,
                      s(:sym, :int)))),
                s(:lvasgn, :a,
                  s(:send,
                    s(:int, 456), :**,
                    s(:int, 100))),
                s(:lvasgn, :b,
                  s(:send,
                    s(:int, 123), :**,
                    s(:int, 100))),
                s(:lvasgn, :c,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:int, 100), :times),
                  s(:args,
                    s(:arg, :n)),
                  s(:begin,
                    s(:op_asgn,
                      s(:lvasgn, :a), :**,
                      s(:int, 3)),
                    s(:op_asgn,
                      s(:lvasgn, :b), :**,
                      s(:int, 3)),
                    s(:send,
                      s(:lvar, :trace), :clear),
                    s(:lvasgn, :th,
                      s(:block,
                        s(:send,
                          s(:const, nil, :Thread), :new),
                        s(:args),
                        s(:begin,
                          s(:send, nil, :sleep,
                            s(:float, 0.1)),
                          s(:send,
                            s(:const, nil, :Process), :kill,
                            s(:sym, :INT),
                            s(:gvar, :$$)),
                          s(:send, nil, :sleep,
                            s(:float, 0.1)),
                          s(:send,
                            s(:const, nil, :Process), :kill,
                            s(:sym, :INT),
                            s(:gvar, :$$))))),
                    s(:lvasgn, :c,
                      s(:send,
                        s(:lvar, :a), :/,
                        s(:lvar, :b))),
                    s(:send,
                      s(:lvar, :trace), :<<,
                      s(:sym, :end)),
                    s(:send,
                      s(:lvar, :th), :join),
                    s(:if,
                      s(:send,
                        s(:lvar, :trace), :==,
                        s(:array,
                          s(:sym, :int),
                          s(:sym, :int),
                          s(:sym, :end))),
                      s(:begin,
                        s(:send, nil, :assert_equal,
                          s(:send,
                            s(:lvar, :a), :/,
                            s(:lvar, :b)),
                          s(:lvar, :c)),
                        s(:return)), nil))),
                s(:send, nil, :skip,
                  s(:str, "cannot create suitable test case"))),
              s(:if,
                s(:lvar, :oldtrap),
                s(:send,
                  s(:const, nil, :Signal), :trap,
                  s(:sym, :INT),
                  s(:lvar, :oldtrap)), nil))))),
      s(:def, :test_too_big_to_s,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:begin,
                s(:lvasgn, :big,
                  s(:send,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 31)), :-,
                    s(:int, 1)))), :is_a?,
              s(:const, nil, :Fixnum)),
            s(:return), nil),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :RangeError),
              s(:regexp,
                s(:str, "too big to convert"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 1), :<<,
                  s(:lvar, :big))), :to_s)))),
      s(:def, :test_fix_fdiv,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_equal,
            s(:int, 0),
            s(:send,
              s(:int, 1), :fdiv,
              s(:ivar, :@fmax2))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.5),
            s(:send,
              s(:send,
                s(:int, 1), :fdiv,
                s(:ivar, :@fmax2)), :*,
              s(:ivar, :@fmax)),
            s(:float, 0.01)))),
      s(:def, :test_big_fdiv,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@big), :fdiv,
              s(:ivar, :@big))),
          s(:send, nil, :assert_not_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@big), :fdiv,
              s(:ivar, :@fmax2))),
          s(:send, nil, :assert_not_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@fmax2), :fdiv,
              s(:ivar, :@big))),
          s(:send, nil, :assert_not_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@fmax2), :fdiv,
              s(:ivar, :@fmax2))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.5),
            s(:send,
              s(:ivar, :@fmax), :fdiv,
              s(:ivar, :@fmax2)),
            s(:float, 0.01)),
          s(:send, nil, :assert_in_delta,
            s(:float, 1.0),
            s(:send,
              s(:ivar, :@fmax2), :fdiv,
              s(:ivar, :@fmax2)),
            s(:float, 0.01)))),
      s(:def, :test_float_fdiv,
        s(:args),
        s(:begin,
          s(:lvasgn, :b,
            s(:send,
              s(:float, 1.0e+300), :to_i)),
          s(:send, nil, :assert_equal,
            s(:lvar, :b),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :b), :**,
                  s(:int, 2))), :fdiv,
              s(:lvar, :b))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:send,
                s(:ivar, :@big), :fdiv,
                s(:send,
                  s(:float, 0.0), :/,
                  s(:float, 0.0))),
              s(:sym, :nan?))),
          s(:send, nil, :assert_in_delta,
            s(:float, 1.0e+300),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 10), :**,
                  s(:int, 500))), :fdiv,
              s(:float, 1.0e+200)),
            s(:float, 1.0e+285)))),
      s(:def, :test_obj_fdiv,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :coerce,
            s(:args,
              s(:arg, :x)),
            s(:array,
              s(:lvar, :x),
              s(:send,
                s(:int, 2), :**,
                s(:int, 100)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 200))), :to_f),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 300))), :fdiv,
              s(:lvar, :o))))),
      s(:def, :test_singleton_method,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:begin,
            s(:lvasgn, :a,
              s(:send,
                s(:int, 1), :<<,
                s(:int, 64))),
            s(:defs,
              s(:lvar, :a), :foo,
              s(:args), nil)))),
      s(:def, :test_frozen,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:true),
          s(:send,
            s(:begin,
              s(:send,
                s(:int, 2), :**,
                s(:int, 100))), :frozen?))),
      s(:def, :test_bitwise_and_with_integer_mimic_object,
        s(:args),
        s(:begin,
          s(:defs,
            s(:lvasgn, :obj,
              s(:send,
                s(:const, nil, :Object), :new)), :to_int,
            s(:args),
            s(:int, 10)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError),
              s(:str, "[ruby-core:39491]")),
            s(:args),
            s(:send,
              s(:const, nil, :T1024), :&,
              s(:lvar, :obj))),
          s(:defs,
            s(:lvar, :obj), :coerce,
            s(:args,
              s(:arg, :other)),
            s(:array,
              s(:lvar, :other),
              s(:int, 10))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :T1024), :&,
              s(:int, 10)),
            s(:send,
              s(:const, nil, :T1024), :&,
              s(:lvar, :obj))))),
      s(:def, :test_bitwise_or_with_integer_mimic_object,
        s(:args),
        s(:begin,
          s(:defs,
            s(:lvasgn, :obj,
              s(:send,
                s(:const, nil, :Object), :new)), :to_int,
            s(:args),
            s(:int, 10)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError),
              s(:str, "[ruby-core:39491]")),
            s(:args),
            s(:send,
              s(:const, nil, :T1024), :|,
              s(:lvar, :obj))),
          s(:defs,
            s(:lvar, :obj), :coerce,
            s(:args,
              s(:arg, :other)),
            s(:array,
              s(:lvar, :other),
              s(:int, 10))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :T1024), :|,
              s(:int, 10)),
            s(:send,
              s(:const, nil, :T1024), :|,
              s(:lvar, :obj))))),
      s(:def, :test_bitwise_xor_with_integer_mimic_object,
        s(:args),
        s(:begin,
          s(:defs,
            s(:lvasgn, :obj,
              s(:send,
                s(:const, nil, :Object), :new)), :to_int,
            s(:args),
            s(:int, 10)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError),
              s(:str, "[ruby-core:39491]")),
            s(:args),
            s(:send,
              s(:const, nil, :T1024), :^,
              s(:lvar, :obj))),
          s(:defs,
            s(:lvar, :obj), :coerce,
            s(:args,
              s(:arg, :other)),
            s(:array,
              s(:lvar, :other),
              s(:int, 10))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :T1024), :^,
              s(:int, 10)),
            s(:send,
              s(:const, nil, :T1024), :^,
              s(:lvar, :obj))))))))
