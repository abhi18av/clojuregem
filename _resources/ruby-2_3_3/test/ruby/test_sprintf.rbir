s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestSprintf),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_positional,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "     00001"),
          s(:send, nil, :sprintf,
            s(:str, "%*1$.*2$3$d"),
            s(:int, 10),
            s(:int, 5),
            s(:int, 1)))),
      s(:def, :test_binary,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "0"),
            s(:send, nil, :sprintf,
              s(:str, "%b"),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "1"),
            s(:send, nil, :sprintf,
              s(:str, "%b"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "10"),
            s(:send, nil, :sprintf,
              s(:str, "%b"),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "..1"),
            s(:send, nil, :sprintf,
              s(:str, "%b"),
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:str, "   0"),
            s(:send, nil, :sprintf,
              s(:str, "%4b"),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "   1"),
            s(:send, nil, :sprintf,
              s(:str, "%4b"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "  10"),
            s(:send, nil, :sprintf,
              s(:str, "%4b"),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, " ..1"),
            s(:send, nil, :sprintf,
              s(:str, "%4b"),
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:str, "0000"),
            s(:send, nil, :sprintf,
              s(:str, "%04b"),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "0001"),
            s(:send, nil, :sprintf,
              s(:str, "%04b"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "0010"),
            s(:send, nil, :sprintf,
              s(:str, "%04b"),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "..11"),
            s(:send, nil, :sprintf,
              s(:str, "%04b"),
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:str, "0000"),
            s(:send, nil, :sprintf,
              s(:str, "%.4b"),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "0001"),
            s(:send, nil, :sprintf,
              s(:str, "%.4b"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "0010"),
            s(:send, nil, :sprintf,
              s(:str, "%.4b"),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "..11"),
            s(:send, nil, :sprintf,
              s(:str, "%.4b"),
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:str, "  0000"),
            s(:send, nil, :sprintf,
              s(:str, "%6.4b"),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "  0001"),
            s(:send, nil, :sprintf,
              s(:str, "%6.4b"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "  0010"),
            s(:send, nil, :sprintf,
              s(:str, "%6.4b"),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "  ..11"),
            s(:send, nil, :sprintf,
              s(:str, "%6.4b"),
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:str, "   0"),
            s(:send, nil, :sprintf,
              s(:str, "%#4b"),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, " 0b1"),
            s(:send, nil, :sprintf,
              s(:str, "%#4b"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "0b10"),
            s(:send, nil, :sprintf,
              s(:str, "%#4b"),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "0b..1"),
            s(:send, nil, :sprintf,
              s(:str, "%#4b"),
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:str, "0000"),
            s(:send, nil, :sprintf,
              s(:str, "%#04b"),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "0b01"),
            s(:send, nil, :sprintf,
              s(:str, "%#04b"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "0b10"),
            s(:send, nil, :sprintf,
              s(:str, "%#04b"),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "0b..1"),
            s(:send, nil, :sprintf,
              s(:str, "%#04b"),
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:str, "0000"),
            s(:send, nil, :sprintf,
              s(:str, "%#.4b"),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "0b0001"),
            s(:send, nil, :sprintf,
              s(:str, "%#.4b"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "0b0010"),
            s(:send, nil, :sprintf,
              s(:str, "%#.4b"),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "0b..11"),
            s(:send, nil, :sprintf,
              s(:str, "%#.4b"),
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:str, "  0000"),
            s(:send, nil, :sprintf,
              s(:str, "%#6.4b"),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "0b0001"),
            s(:send, nil, :sprintf,
              s(:str, "%#6.4b"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "0b0010"),
            s(:send, nil, :sprintf,
              s(:str, "%#6.4b"),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "0b..11"),
            s(:send, nil, :sprintf,
              s(:str, "%#6.4b"),
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:str, "+0"),
            s(:send, nil, :sprintf,
              s(:str, "%+b"),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "+1"),
            s(:send, nil, :sprintf,
              s(:str, "%+b"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "+10"),
            s(:send, nil, :sprintf,
              s(:str, "%+b"),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "-1"),
            s(:send, nil, :sprintf,
              s(:str, "%+b"),
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:str, "  +0"),
            s(:send, nil, :sprintf,
              s(:str, "%+4b"),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "  +1"),
            s(:send, nil, :sprintf,
              s(:str, "%+4b"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, " +10"),
            s(:send, nil, :sprintf,
              s(:str, "%+4b"),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "  -1"),
            s(:send, nil, :sprintf,
              s(:str, "%+4b"),
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:str, "+000"),
            s(:send, nil, :sprintf,
              s(:str, "%+04b"),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "+001"),
            s(:send, nil, :sprintf,
              s(:str, "%+04b"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "+010"),
            s(:send, nil, :sprintf,
              s(:str, "%+04b"),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "-001"),
            s(:send, nil, :sprintf,
              s(:str, "%+04b"),
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:str, "+0000"),
            s(:send, nil, :sprintf,
              s(:str, "%+.4b"),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "+0001"),
            s(:send, nil, :sprintf,
              s(:str, "%+.4b"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "+0010"),
            s(:send, nil, :sprintf,
              s(:str, "%+.4b"),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "-0001"),
            s(:send, nil, :sprintf,
              s(:str, "%+.4b"),
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:str, " +0000"),
            s(:send, nil, :sprintf,
              s(:str, "%+6.4b"),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, " +0001"),
            s(:send, nil, :sprintf,
              s(:str, "%+6.4b"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, " +0010"),
            s(:send, nil, :sprintf,
              s(:str, "%+6.4b"),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, " -0001"),
            s(:send, nil, :sprintf,
              s(:str, "%+6.4b"),
              s(:int, -1))))),
      s(:def, :test_nan,
        s(:args),
        s(:begin,
          s(:lvasgn, :nan,
            s(:send,
              s(:float, 0.0), :/,
              s(:float, 0.0))),
          s(:send, nil, :assert_equal,
            s(:str, "NaN"),
            s(:send, nil, :sprintf,
              s(:str, "%f"),
              s(:lvar, :nan))),
          s(:send, nil, :assert_equal,
            s(:str, "NaN"),
            s(:send, nil, :sprintf,
              s(:str, "%-f"),
              s(:lvar, :nan))),
          s(:send, nil, :assert_equal,
            s(:str, "+NaN"),
            s(:send, nil, :sprintf,
              s(:str, "%+f"),
              s(:lvar, :nan))),
          s(:send, nil, :assert_equal,
            s(:str, "     NaN"),
            s(:send, nil, :sprintf,
              s(:str, "%8f"),
              s(:lvar, :nan))),
          s(:send, nil, :assert_equal,
            s(:str, "NaN     "),
            s(:send, nil, :sprintf,
              s(:str, "%-8f"),
              s(:lvar, :nan))),
          s(:send, nil, :assert_equal,
            s(:str, "    +NaN"),
            s(:send, nil, :sprintf,
              s(:str, "%+8f"),
              s(:lvar, :nan))),
          s(:send, nil, :assert_equal,
            s(:str, "     NaN"),
            s(:send, nil, :sprintf,
              s(:str, "%08f"),
              s(:lvar, :nan))),
          s(:send, nil, :assert_equal,
            s(:str, "NaN     "),
            s(:send, nil, :sprintf,
              s(:str, "%-08f"),
              s(:lvar, :nan))),
          s(:send, nil, :assert_equal,
            s(:str, "    +NaN"),
            s(:send, nil, :sprintf,
              s(:str, "%+08f"),
              s(:lvar, :nan))),
          s(:send, nil, :assert_equal,
            s(:str, "     NaN"),
            s(:send, nil, :sprintf,
              s(:str, "% 8f"),
              s(:lvar, :nan))),
          s(:send, nil, :assert_equal,
            s(:str, " NaN    "),
            s(:send, nil, :sprintf,
              s(:str, "%- 8f"),
              s(:lvar, :nan))),
          s(:send, nil, :assert_equal,
            s(:str, "    +NaN"),
            s(:send, nil, :sprintf,
              s(:str, "%+ 8f"),
              s(:lvar, :nan))),
          s(:send, nil, :assert_equal,
            s(:str, "     NaN"),
            s(:send, nil, :sprintf,
              s(:str, "% 08f"),
              s(:lvar, :nan))),
          s(:send, nil, :assert_equal,
            s(:str, " NaN    "),
            s(:send, nil, :sprintf,
              s(:str, "%- 08f"),
              s(:lvar, :nan))),
          s(:send, nil, :assert_equal,
            s(:str, "    +NaN"),
            s(:send, nil, :sprintf,
              s(:str, "%+ 08f"),
              s(:lvar, :nan))))),
      s(:def, :test_inf,
        s(:args),
        s(:begin,
          s(:lvasgn, :inf,
            s(:send,
              s(:float, 1.0), :/,
              s(:float, 0.0))),
          s(:send, nil, :assert_equal,
            s(:str, "Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%f"),
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:str, "Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%-f"),
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:str, "+Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%+f"),
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:str, "     Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%8f"),
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:str, "Inf     "),
            s(:send, nil, :sprintf,
              s(:str, "%-8f"),
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:str, "    +Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%+8f"),
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:str, "     Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%08f"),
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:str, "Inf     "),
            s(:send, nil, :sprintf,
              s(:str, "%-08f"),
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:str, "    +Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%+08f"),
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:str, "     Inf"),
            s(:send, nil, :sprintf,
              s(:str, "% 8f"),
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:str, " Inf    "),
            s(:send, nil, :sprintf,
              s(:str, "%- 8f"),
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:str, "    +Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%+ 8f"),
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:str, "     Inf"),
            s(:send, nil, :sprintf,
              s(:str, "% 08f"),
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:str, " Inf    "),
            s(:send, nil, :sprintf,
              s(:str, "%- 08f"),
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:str, "    +Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%+ 08f"),
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:str, "-Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%f"),
              s(:send,
                s(:lvar, :inf), :-@))),
          s(:send, nil, :assert_equal,
            s(:str, "-Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%-f"),
              s(:send,
                s(:lvar, :inf), :-@))),
          s(:send, nil, :assert_equal,
            s(:str, "-Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%+f"),
              s(:send,
                s(:lvar, :inf), :-@))),
          s(:send, nil, :assert_equal,
            s(:str, "    -Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%8f"),
              s(:send,
                s(:lvar, :inf), :-@))),
          s(:send, nil, :assert_equal,
            s(:str, "-Inf    "),
            s(:send, nil, :sprintf,
              s(:str, "%-8f"),
              s(:send,
                s(:lvar, :inf), :-@))),
          s(:send, nil, :assert_equal,
            s(:str, "    -Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%+8f"),
              s(:send,
                s(:lvar, :inf), :-@))),
          s(:send, nil, :assert_equal,
            s(:str, "    -Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%08f"),
              s(:send,
                s(:lvar, :inf), :-@))),
          s(:send, nil, :assert_equal,
            s(:str, "-Inf    "),
            s(:send, nil, :sprintf,
              s(:str, "%-08f"),
              s(:send,
                s(:lvar, :inf), :-@))),
          s(:send, nil, :assert_equal,
            s(:str, "    -Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%+08f"),
              s(:send,
                s(:lvar, :inf), :-@))),
          s(:send, nil, :assert_equal,
            s(:str, "    -Inf"),
            s(:send, nil, :sprintf,
              s(:str, "% 8f"),
              s(:send,
                s(:lvar, :inf), :-@))),
          s(:send, nil, :assert_equal,
            s(:str, "-Inf    "),
            s(:send, nil, :sprintf,
              s(:str, "%- 8f"),
              s(:send,
                s(:lvar, :inf), :-@))),
          s(:send, nil, :assert_equal,
            s(:str, "    -Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%+ 8f"),
              s(:send,
                s(:lvar, :inf), :-@))),
          s(:send, nil, :assert_equal,
            s(:str, "    -Inf"),
            s(:send, nil, :sprintf,
              s(:str, "% 08f"),
              s(:send,
                s(:lvar, :inf), :-@))),
          s(:send, nil, :assert_equal,
            s(:str, "-Inf    "),
            s(:send, nil, :sprintf,
              s(:str, "%- 08f"),
              s(:send,
                s(:lvar, :inf), :-@))),
          s(:send, nil, :assert_equal,
            s(:str, "    -Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%+ 08f"),
              s(:send,
                s(:lvar, :inf), :-@))),
          s(:send, nil, :assert_equal,
            s(:str, "..f00000000"),
            s(:send, nil, :sprintf,
              s(:str, "%x"),
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@)),
            s(:str, "[ruby-dev:32351]")),
          s(:send, nil, :assert_equal,
            s(:str, "..101111111111111111111111111111111"),
            s(:send, nil, :sprintf,
              s(:str, "%b"),
              s(:int, -2147483649)),
            s(:str, "[ruby-dev:32365]")),
          s(:send, nil, :assert_equal,
            s(:str, " Inf"),
            s(:send, nil, :sprintf,
              s(:str, "% e"),
              s(:lvar, :inf)),
            s(:str, "[ruby-dev:34002]")))),
      s(:def, :test_bignum,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A10{120}\\.0+\\z"),
              s(:regopt)),
            s(:send, nil, :sprintf,
              s(:str, "%f"),
              s(:send,
                s(:int, 100), :**,
                s(:int, 60)))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A10{180}\\.0+\\z"),
              s(:regopt)),
            s(:send, nil, :sprintf,
              s(:str, "%f"),
              s(:send,
                s(:int, 1000), :**,
                s(:int, 60)))))),
      s(:def, :test_rational,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A0\\.10+\\z"),
              s(:regopt)),
            s(:send, nil, :sprintf,
              s(:str, "%.60f"),
              s(:rational, (1/10)))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A0\\.010+\\z"),
              s(:regopt)),
            s(:send, nil, :sprintf,
              s(:str, "%.60f"),
              s(:rational, (1/100)))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A0\\.0010+\\z"),
              s(:regopt)),
            s(:send, nil, :sprintf,
              s(:str, "%.60f"),
              s(:rational, (1/1000)))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A0\\.3+\\z"),
              s(:regopt)),
            s(:send, nil, :sprintf,
              s(:str, "%.60f"),
              s(:send,
                s(:int, 1), :/,
                s(:rational, (3/1))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A1\\.20+\\z"),
              s(:regopt)),
            s(:send, nil, :sprintf,
              s(:str, "%.60f"),
              s(:rational, (6/5)))),
          s(:block,
            s(:send,
              s(:int, 0), :upto,
              s(:int, 9)),
            s(:args,
              s(:arg, :len)),
            s(:block,
              s(:send,
                s(:int, -1), :upto,
                s(:int, 9)),
              s(:args,
                s(:arg, :prec)),
              s(:block,
                s(:send,
                  s(:array,
                    s(:str, ""),
                    s(:str, "+"),
                    s(:str, "-"),
                    s(:str, " "),
                    s(:str, "0"),
                    s(:str, "+0"),
                    s(:str, "-0"),
                    s(:str, " 0"),
                    s(:str, "+ "),
                    s(:str, "- "),
                    s(:str, "+ 0"),
                    s(:str, "- 0")), :each),
                s(:args,
                  s(:arg, :flags)),
                s(:begin,
                  s(:lvasgn, :fmt,
                    s(:dstr,
                      s(:str, "%"),
                      s(:begin,
                        s(:lvar, :flags)),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:lvar, :len), :>,
                            s(:int, 0)),
                          s(:lvar, :len),
                          s(:str, ""))),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:lvar, :prec), :>=,
                            s(:int, 0)),
                          s(:dstr,
                            s(:str, "."),
                            s(:begin,
                              s(:lvar, :prec))),
                          s(:str, ""))),
                      s(:str, "f"))),
                  s(:block,
                    s(:send,
                      s(:array,
                        s(:int, 0),
                        s(:float, 0.1),
                        s(:float, 0.01),
                        s(:float, 0.001),
                        s(:float, 1.001),
                        s(:float, 100.0),
                        s(:float, 100.001),
                        s(:float, 10000000000.0),
                        s(:float, 1.0e-11),
                        s(:send,
                          s(:int, 1), :/,
                          s(:rational, (3/1))),
                        s(:send,
                          s(:int, 2), :/,
                          s(:rational, (3/1))),
                        s(:rational, (6/5)),
                        s(:rational, (10/1))), :each),
                    s(:args,
                      s(:arg, :num)),
                    s(:begin,
                      s(:send, nil, :assert_equal,
                        s(:send, nil, :sprintf,
                          s(:lvar, :fmt),
                          s(:send,
                            s(:lvar, :num), :to_f)),
                        s(:send, nil, :sprintf,
                          s(:lvar, :fmt),
                          s(:send,
                            s(:lvar, :num), :to_r)),
                        s(:dstr,
                          s(:str, "sprintf("),
                          s(:begin,
                            s(:send,
                              s(:lvar, :fmt), :inspect)),
                          s(:str, ", "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :num), :inspect)),
                          s(:str, ".to_r)"))),
                      s(:if,
                        s(:send,
                          s(:lvar, :num), :>,
                          s(:int, 0)),
                        s(:send, nil, :assert_equal,
                          s(:send, nil, :sprintf,
                            s(:lvar, :fmt),
                            s(:send,
                              s(:send,
                                s(:lvar, :num), :to_f), :-@)),
                          s(:send, nil, :sprintf,
                            s(:lvar, :fmt),
                            s(:send,
                              s(:send,
                                s(:lvar, :num), :to_r), :-@)),
                          s(:dstr,
                            s(:str, "sprintf("),
                            s(:begin,
                              s(:send,
                                s(:lvar, :fmt), :inspect)),
                            s(:str, ", "),
                            s(:begin,
                              s(:send,
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :num), :-@)), :inspect)),
                            s(:str, ".to_r)"))), nil))))))),
          s(:lvasgn, :bug11766,
            s(:str, "[ruby-core:71806] [Bug #11766]")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:str, "x"), :*,
                s(:int, 10)), :+,
              s(:str, "     1.0")),
            s(:send, nil, :sprintf,
              s(:send,
                s(:send,
                  s(:str, "x"), :*,
                  s(:int, 10)), :+,
                s(:str, "%8.1f")),
              s(:rational, (1/1)))))),
      s(:def, :test_rational_precision,
        s(:args),
        s(:send, nil, :assert_match,
          s(:regexp,
            s(:str, "\\A0\\.\\d{600}\\z"),
            s(:regopt)),
          s(:send, nil, :sprintf,
            s(:str, "%.600f"),
            s(:send,
              s(:int, 600), :**,
              s(:send,
                s(:int, 60), :~))))),
      s(:def, :test_hash,
        s(:args),
        s(:begin,
          s(:lvasgn, :options,
            s(:hash,
              s(:pair,
                s(:sym, :capture),
                s(:regexp,
                  s(:str, "\\d+"),
                  s(:regopt))))),
          s(:send, nil, :assert_equal,
            s(:str, "with options {:capture=>/\\d+/}"),
            s(:send, nil, :sprintf,
              s(:send,
                s(:str, "with options %p"), :%,
                s(:lvar, :options)))))),
      s(:def, :test_invalid,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError),
                s(:str, "[ruby-core:11569]")),
              s(:args),
              s(:send, nil, :sprintf,
                s(:str, "%.**d"),
                s(:int, 5),
                s(:int, 10),
                s(:int, 1))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError),
                s(:str, "[ruby-core:11569]")),
              s(:args),
              s(:send, nil, :sprintf,
                s(:str, "%.5+05d"),
                s(:int, 5))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError),
                s(:str, "[ruby-core:11569]")),
              s(:args),
              s(:send, nil, :sprintf,
                s(:str, "%.5 5d"),
                s(:int, 5))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError),
                s(:str, "[ruby-core:11569]")),
              s(:args),
              s(:send, nil, :sprintf,
                s(:str, "%*1s"),
                s(:int, 5),
                s(:int, 1))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError),
                s(:str, "[ruby-core:11569]")),
              s(:args),
              s(:send, nil, :sprintf,
                s(:str, "%5+0d"),
                s(:int, 1))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError),
                s(:str, "[ruby-core:11569]")),
              s(:args),
              s(:send, nil, :sprintf,
                s(:str, "%5 0d"),
                s(:int, 1))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError),
                s(:str, "[ruby-core:11569]")),
              s(:args),
              s(:send, nil, :sprintf,
                s(:str, "%50+30+20+10+5d"),
                s(:int, 5))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError),
                s(:str, "[ruby-core:11569]")),
              s(:args),
              s(:send, nil, :sprintf,
                s(:str, "%50 30 20 10 5d"),
                s(:int, 5))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError),
                s(:str, "[ruby-core:11570]")),
              s(:args),
              s(:send, nil, :sprintf,
                s(:str, "%.*.*.*.*f"),
                s(:int, -1),
                s(:int, -1),
                s(:int, -1),
                s(:int, 5),
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:str, "%\u0000x hello"),
              s(:send, nil, :sprintf,
                s(:str, "%\u0000x hello")),
              s(:str, "[ruby-core:11571]")),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError),
                s(:str, "[ruby-core:11573]")),
              s(:args),
              s(:send, nil, :sprintf,
                s(:str, "%.25555555555555555555555555555555555555s"),
                s(:str, "hello"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send, nil, :sprintf,
                s(:str, "%\u0001"),
                s(:int, 1))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send, nil, :sprintf,
                s(:str, "%!"),
                s(:int, 1))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send, nil, :sprintf,
                s(:str, "%1$1$d"),
                s(:int, 1))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send, nil, :sprintf,
                s(:str, "%0%"))),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :ArgumentError),
                s(:regexp,
                  s(:str, "unnumbered\\(1\\) mixed with numbered"),
                  s(:regopt))),
              s(:args),
              s(:send, nil, :sprintf,
                s(:str, "%1$*d"),
                s(:int, 3))),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :ArgumentError),
                s(:regexp,
                  s(:str, "unnumbered\\(1\\) mixed with numbered"),
                  s(:regopt))),
              s(:args),
              s(:send, nil, :sprintf,
                s(:str, "%1$.*d"),
                s(:int, 3))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :verbose),
                s(:gvasgn, :$VERBOSE)),
              s(:array,
                s(:gvar, :$VERBOSE),
                s(:nil))),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:send, nil, :sprintf,
                s(:str, ""),
                s(:int, 1)))),
          s(:gvasgn, :$VERBOSE,
            s(:lvar, :verbose)))),
      s(:def, :test_float,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "36893488147419111424"),
            s(:send, nil, :sprintf,
              s(:str, "%20.0f"),
              s(:float, 3.689348814741911e+19))),
          s(:send, nil, :assert_equal,
            s(:str, " Inf"),
            s(:send, nil, :sprintf,
              s(:str, "% 0e"),
              s(:send,
                s(:float, 1.0), :/,
                s(:float, 0.0))),
            s(:str, "moved from btest/knownbug")),
          s(:send, nil, :assert_equal,
            s(:str, "       -0."),
            s(:send, nil, :sprintf,
              s(:str, "%#10.0f"),
              s(:float, -0.5)),
            s(:str, "[ruby-dev:42552]")))),
      s(:def, :test_float_hex,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "-0x0p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%a"),
              s(:float, -0.0))),
          s(:send, nil, :assert_equal,
            s(:str, "0x0p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%a"),
              s(:float, 0.0))),
          s(:send, nil, :assert_equal,
            s(:str, "0x1p-1"),
            s(:send, nil, :sprintf,
              s(:str, "%a"),
              s(:float, 0.5))),
          s(:send, nil, :assert_equal,
            s(:str, "0x1p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%a"),
              s(:float, 1.0))),
          s(:send, nil, :assert_equal,
            s(:str, "0x1p+1"),
            s(:send, nil, :sprintf,
              s(:str, "%a"),
              s(:float, 2.0))),
          s(:send, nil, :assert_equal,
            s(:str, "0x1p+10"),
            s(:send, nil, :sprintf,
              s(:str, "%a"),
              s(:int, 1024))),
          s(:send, nil, :assert_equal,
            s(:str, "0x1.23456p+789"),
            s(:send, nil, :sprintf,
              s(:str, "%a"),
              s(:float, 3.704450999893983e+237))),
          s(:send, nil, :assert_equal,
            s(:str, "0x1p-1074"),
            s(:send, nil, :sprintf,
              s(:str, "%a"),
              s(:float, 5.0e-324))),
          s(:send, nil, :assert_equal,
            s(:str, "Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%e"),
              s(:const,
                s(:const, nil, :Float), :INFINITY))),
          s(:send, nil, :assert_equal,
            s(:str, "Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%E"),
              s(:const,
                s(:const, nil, :Float), :INFINITY))),
          s(:send, nil, :assert_equal,
            s(:str, "NaN"),
            s(:send, nil, :sprintf,
              s(:str, "%e"),
              s(:const,
                s(:const, nil, :Float), :NAN))),
          s(:send, nil, :assert_equal,
            s(:str, "NaN"),
            s(:send, nil, :sprintf,
              s(:str, "%E"),
              s(:const,
                s(:const, nil, :Float), :NAN))),
          s(:send, nil, :assert_equal,
            s(:str, "   -0x1p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%10a"),
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:str, " -0x1.8p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%10a"),
              s(:float, -1.5))),
          s(:send, nil, :assert_equal,
            s(:str, " -0x1.4p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%10a"),
              s(:float, -1.25))),
          s(:send, nil, :assert_equal,
            s(:str, " -0x1.2p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%10a"),
              s(:float, -1.125))),
          s(:send, nil, :assert_equal,
            s(:str, " -0x1.1p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%10a"),
              s(:float, -1.0625))),
          s(:send, nil, :assert_equal,
            s(:str, "-0x1.08p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%10a"),
              s(:float, -1.03125))),
          s(:lvasgn, :bug3962,
            s(:str, "[ruby-core:32841]")),
          s(:send, nil, :assert_equal,
            s(:str, "-0x0001p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%010a"),
              s(:int, -1)),
            s(:lvar, :bug3962)),
          s(:send, nil, :assert_equal,
            s(:str, "-0x01.8p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%010a"),
              s(:float, -1.5)),
            s(:lvar, :bug3962)),
          s(:send, nil, :assert_equal,
            s(:str, "-0x01.4p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%010a"),
              s(:float, -1.25)),
            s(:lvar, :bug3962)),
          s(:send, nil, :assert_equal,
            s(:str, "-0x01.2p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%010a"),
              s(:float, -1.125)),
            s(:lvar, :bug3962)),
          s(:send, nil, :assert_equal,
            s(:str, "-0x01.1p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%010a"),
              s(:float, -1.0625)),
            s(:lvar, :bug3962)),
          s(:send, nil, :assert_equal,
            s(:str, "-0x1.08p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%010a"),
              s(:float, -1.03125)),
            s(:lvar, :bug3962)),
          s(:lvasgn, :bug3964,
            s(:str, "[ruby-core:32848]")),
          s(:send, nil, :assert_equal,
            s(:str, "0x000000000000000p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%020a"),
              s(:int, 0)),
            s(:lvar, :bug3964)),
          s(:send, nil, :assert_equal,
            s(:str, "0x000000000000001p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%020a"),
              s(:int, 1)),
            s(:lvar, :bug3964)),
          s(:send, nil, :assert_equal,
            s(:str, "-0x00000000000001p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%020a"),
              s(:int, -1)),
            s(:lvar, :bug3964)),
          s(:send, nil, :assert_equal,
            s(:str, "0x00000000000000.p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%#020a"),
              s(:int, 0)),
            s(:lvar, :bug3964)),
          s(:lvasgn, :bug3965,
            s(:str, "[ruby-dev:42431]")),
          s(:send, nil, :assert_equal,
            s(:str, "0x1.p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%#.0a"),
              s(:int, 1)),
            s(:lvar, :bug3965)),
          s(:send, nil, :assert_equal,
            s(:str, "0x00000000000000.p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%#020a"),
              s(:int, 0)),
            s(:lvar, :bug3965)),
          s(:send, nil, :assert_equal,
            s(:str, "0x0000.0000000000p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%#020.10a"),
              s(:int, 0)),
            s(:lvar, :bug3965)),
          s(:lvasgn, :bug3979,
            s(:str, "[ruby-dev:42453]")),
          s(:send, nil, :assert_equal,
            s(:str, "          0x0.000p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%20.3a"),
              s(:int, 0)),
            s(:lvar, :bug3979)),
          s(:send, nil, :assert_equal,
            s(:str, "          0x1.000p+0"),
            s(:send, nil, :sprintf,
              s(:str, "%20.3a"),
              s(:int, 1)),
            s(:lvar, :bug3979)))),
      s(:casgn, nil, :BSIZ,
        s(:int, 120)),
      s(:def, :test_skip,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:send,
              s(:str, " "), :*,
              s(:const, nil, :BSIZ)), :+,
            s(:str, "1")),
          s(:send, nil, :sprintf,
            s(:send,
              s(:send,
                s(:str, " "), :*,
                s(:const, nil, :BSIZ)), :+,
              s(:str, "%d")),
            s(:int, 1)))),
      s(:def, :test_char,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "a"),
            s(:send, nil, :sprintf,
              s(:str, "%c"),
              s(:int, 97))),
          s(:send, nil, :assert_equal,
            s(:str, "a"),
            s(:send, nil, :sprintf,
              s(:str, "%c"),
              s(:str, "a"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :sprintf,
              s(:str, "%c"),
              s(:send, nil, :sprintf,
                s(:str, "%c%c"),
                s(:str, "a"),
                s(:str, "a")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:str, " "), :*,
                s(:begin,
                  s(:send,
                    s(:const, nil, :BSIZ), :-,
                    s(:int, 1)))), :+,
              s(:str, "a")),
            s(:send, nil, :sprintf,
              s(:send,
                s(:send,
                  s(:str, " "), :*,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :BSIZ), :-,
                      s(:int, 1)))), :+,
                s(:str, "%c")),
              s(:str, "a"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:str, " "), :*,
                s(:begin,
                  s(:send,
                    s(:const, nil, :BSIZ), :-,
                    s(:int, 1)))), :+,
              s(:str, "a")),
            s(:send, nil, :sprintf,
              s(:send,
                s(:send,
                  s(:str, " "), :*,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :BSIZ), :-,
                      s(:int, 1)))), :+,
                s(:str, "%-1c")),
              s(:str, "a"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:str, " "), :*,
                s(:const, nil, :BSIZ)), :+,
              s(:str, "a")),
            s(:send, nil, :sprintf,
              s(:dstr,
                s(:str, "%"),
                s(:begin,
                  s(:send,
                    s(:const, nil, :BSIZ), :+,
                    s(:int, 1))),
                s(:str, "c")),
              s(:str, "a"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "a"), :+,
              s(:send,
                s(:str, " "), :*,
                s(:const, nil, :BSIZ))),
            s(:send, nil, :sprintf,
              s(:dstr,
                s(:str, "%-"),
                s(:begin,
                  s(:send,
                    s(:const, nil, :BSIZ), :+,
                    s(:int, 1))),
                s(:str, "c")),
              s(:str, "a"))))),
      s(:def, :test_string,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send, nil, :sprintf,
              s(:str, "%s"),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "fo"),
            s(:send, nil, :sprintf,
              s(:str, "%.2s"),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, " "), :*,
              s(:const, nil, :BSIZ)),
            s(:send, nil, :sprintf,
              s(:str, "%s"),
              s(:send,
                s(:str, " "), :*,
                s(:const, nil, :BSIZ)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:str, " "), :*,
                s(:begin,
                  s(:send,
                    s(:const, nil, :BSIZ), :-,
                    s(:int, 1)))), :+,
              s(:str, "foo")),
            s(:send, nil, :sprintf,
              s(:dstr,
                s(:str, "%"),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:const, nil, :BSIZ), :-,
                      s(:int, 1)), :+,
                    s(:int, 3))),
                s(:str, "s")),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:str, " "), :*,
                s(:const, nil, :BSIZ)), :+,
              s(:str, "foo")),
            s(:send, nil, :sprintf,
              s(:dstr,
                s(:str, "%"),
                s(:begin,
                  s(:send,
                    s(:const, nil, :BSIZ), :+,
                    s(:int, 3))),
                s(:str, "s")),
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "foo"), :+,
              s(:send,
                s(:str, " "), :*,
                s(:const, nil, :BSIZ))),
            s(:send, nil, :sprintf,
              s(:dstr,
                s(:str, "%-"),
                s(:begin,
                  s(:send,
                    s(:const, nil, :BSIZ), :+,
                    s(:int, 3))),
                s(:str, "s")),
              s(:str, "foo"))))),
      s(:def, :test_integer,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "01"),
            s(:send, nil, :sprintf,
              s(:str, "%#o"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "0x1"),
            s(:send, nil, :sprintf,
              s(:str, "%#x"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "0X1"),
            s(:send, nil, :sprintf,
              s(:str, "%#X"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "0b1"),
            s(:send, nil, :sprintf,
              s(:str, "%#b"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "0B1"),
            s(:send, nil, :sprintf,
              s(:str, "%#B"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "1"),
            s(:send, nil, :sprintf,
              s(:str, "%d"),
              s(:float, 1.0))),
          s(:send, nil, :assert_equal,
            s(:str, "4294967296"),
            s(:send, nil, :sprintf,
              s(:str, "%d"),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 32))), :to_f))),
          s(:send, nil, :assert_equal,
            s(:str, "-2147483648"),
            s(:send, nil, :sprintf,
              s(:str, "%d"),
              s(:send,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 31))), :to_f), :-@))),
          s(:send, nil, :assert_equal,
            s(:str, "18446744073709551616"),
            s(:send, nil, :sprintf,
              s(:str, "%d"),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 64))), :to_f))),
          s(:send, nil, :assert_equal,
            s(:str, "-9223372036854775808"),
            s(:send, nil, :sprintf,
              s(:str, "%d"),
              s(:send,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 63))), :to_f), :-@))),
          s(:send, nil, :assert_equal,
            s(:str, "1"),
            s(:send, nil, :sprintf,
              s(:str, "%d"),
              s(:str, "1"))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :to_int,
            s(:args),
            s(:int, 1)),
          s(:send, nil, :assert_equal,
            s(:str, "1"),
            s(:send, nil, :sprintf,
              s(:str, "%d"),
              s(:lvar, :o))),
          s(:send, nil, :assert_equal,
            s(:str, "+1"),
            s(:send, nil, :sprintf,
              s(:str, "%+d"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, " 1"),
            s(:send, nil, :sprintf,
              s(:str, "% d"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "..f"),
            s(:send, nil, :sprintf,
              s(:str, "%x"),
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:str, "..7"),
            s(:send, nil, :sprintf,
              s(:str, "%o"),
              s(:int, -1))),
          s(:lvasgn, :one,
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 32))), :coerce,
                s(:int, 1)), :first)),
          s(:lvasgn, :mone,
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 32))), :coerce,
                s(:int, -1)), :first)),
          s(:send, nil, :assert_equal,
            s(:str, "+1"),
            s(:send, nil, :sprintf,
              s(:str, "%+d"),
              s(:lvar, :one))),
          s(:send, nil, :assert_equal,
            s(:str, " 1"),
            s(:send, nil, :sprintf,
              s(:str, "% d"),
              s(:lvar, :one))),
          s(:send, nil, :assert_equal,
            s(:str, "..f"),
            s(:send, nil, :sprintf,
              s(:str, "%x"),
              s(:lvar, :mone))),
          s(:send, nil, :assert_equal,
            s(:str, "..7"),
            s(:send, nil, :sprintf,
              s(:str, "%o"),
              s(:lvar, :mone))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:str, " "), :*,
                s(:const, nil, :BSIZ)), :+,
              s(:str, "1")),
            s(:send, nil, :sprintf,
              s(:dstr,
                s(:str, "%"),
                s(:begin,
                  s(:send,
                    s(:const, nil, :BSIZ), :+,
                    s(:int, 1))),
                s(:str, "d")),
              s(:lvar, :one))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:str, " "), :*,
                s(:begin,
                  s(:send,
                    s(:const, nil, :BSIZ), :-,
                    s(:int, 1)))), :+,
              s(:str, "1")),
            s(:send, nil, :sprintf,
              s(:send,
                s(:send,
                  s(:str, " "), :*,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :BSIZ), :-,
                      s(:int, 1)))), :+,
                s(:str, "%d")),
              s(:int, 1))))),
      s(:def, :test_float2,
        s(:args),
        s(:begin,
          s(:lvasgn, :inf,
            s(:send,
              s(:float, 1.0), :/,
              s(:float, 0.0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:str, " "), :*,
                s(:const, nil, :BSIZ)), :+,
              s(:str, "Inf")),
            s(:send, nil, :sprintf,
              s(:dstr,
                s(:str, "%"),
                s(:begin,
                  s(:send,
                    s(:const, nil, :BSIZ), :+,
                    s(:int, 3))),
                s(:str, ".1f")),
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:str, "+Inf"),
            s(:send, nil, :sprintf,
              s(:str, "%+-f"),
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:str, " "), :*,
                s(:const, nil, :BSIZ)), :+,
              s(:str, "1.0")),
            s(:send, nil, :sprintf,
              s(:dstr,
                s(:str, "%"),
                s(:begin,
                  s(:send,
                    s(:const, nil, :BSIZ), :+,
                    s(:int, 3))),
                s(:str, ".1f")),
              s(:float, 1.0))))),
      s(:class,
        s(:const, nil, :T012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789), nil, nil),
      s(:def, :test_star,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "-1 "),
            s(:send, nil, :sprintf,
              s(:str, "%*d"),
              s(:int, -3),
              s(:int, -1))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:regexp,
                s(:str, "width too big"),
                s(:regopt))),
            s(:args),
            s(:send, nil, :sprintf,
              s(:str, "%*999999999999999999999999999999999999999999999999999999999999$d"),
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:regexp,
                s(:str, "prec too big"),
                s(:regopt))),
            s(:args),
            s(:send, nil, :sprintf,
              s(:str, "%.*999999999999999999999999999999999999999999999999999999999999$d"),
              s(:int, 1))))),
      s(:def, :test_escape,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:str, "%"), :*,
            s(:const, nil, :BSIZ)),
          s(:send, nil, :sprintf,
            s(:send,
              s(:str, "%%"), :*,
              s(:const, nil, :BSIZ))))),
      s(:def, :test_rb_sprintf,
        s(:args),
        s(:send, nil, :assert_match,
          s(:regexp,
            s(:str, "^#<TestSprintf::T012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789:0x[0-9a-f]+>$"),
            s(:regopt)),
          s(:send,
            s(:send,
              s(:const, nil, :T012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789), :new), :inspect))),
      s(:def, :test_negative_hex,
        s(:args),
        s(:begin,
          s(:lvasgn, :s1,
            s(:send, nil, :sprintf,
              s(:str, "%0x"),
              s(:int, -1073741824))),
          s(:lvasgn, :s2,
            s(:send, nil, :sprintf,
              s(:str, "%0x"),
              s(:int, -1073741825))),
          s(:lvasgn, :b1,
            s(:send,
              s(:begin,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "\\.\\."),
                    s(:regopt)),
                  s(:lvar, :s1))), :!=,
              s(:nil))),
          s(:lvasgn, :b2,
            s(:send,
              s(:begin,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "\\.\\."),
                    s(:regopt)),
                  s(:lvar, :s2))), :!=,
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:lvar, :b1),
            s(:lvar, :b2),
            s(:str, "[ruby-dev:33224]")))),
      s(:def, :test_named_untyped,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "value"),
            s(:send, nil, :sprintf,
              s(:str, "%<key>s"),
              s(:hash,
                s(:pair,
                  s(:sym, :key),
                  s(:str, "value"))))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:str, "named<key2> after numbered")),
            s(:args),
            s(:send, nil, :sprintf,
              s(:str, "%1$<key2>s"),
              s(:hash,
                s(:pair,
                  s(:sym, :key),
                  s(:str, "value"))))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:str, "named<key2> after unnumbered(2)")),
            s(:args),
            s(:send, nil, :sprintf,
              s(:str, "%s%s%<key2>s"),
              s(:str, "foo"),
              s(:str, "bar"),
              s(:hash,
                s(:pair,
                  s(:sym, :key),
                  s(:str, "value"))))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:str, "named<key2> after <key>")),
            s(:args),
            s(:send, nil, :sprintf,
              s(:str, "%<key><key2>s"),
              s(:hash,
                s(:pair,
                  s(:sym, :key),
                  s(:str, "value"))))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :KeyError),
              s(:str, "key<key> not found")),
            s(:args),
            s(:send, nil, :sprintf,
              s(:str, "%<key>s"),
              s(:hash))))),
      s(:def, :test_named_untyped_enc,
        s(:args),
        s(:begin,
          s(:lvasgn, :key,
            s(:str, "〒")),
          s(:block,
            s(:send,
              s(:array,
                s(:const,
                  s(:const, nil, :Encoding), :UTF_8),
                s(:const,
                  s(:const, nil, :Encoding), :EUC_JP)), :each),
            s(:args,
              s(:arg, :enc)),
            s(:begin,
              s(:lvasgn, :k,
                s(:send,
                  s(:lvar, :key), :encode,
                  s(:lvar, :enc))),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raise_with_message,
                    s(:const, nil, :ArgumentError),
                    s(:dstr,
                      s(:str, "named<"),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, "> after numbered"))),
                  s(:args),
                  s(:send, nil, :sprintf,
                    s(:dstr,
                      s(:str, "%1$<"),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, ">s")),
                    s(:hash,
                      s(:pair,
                        s(:sym, :key),
                        s(:str, "value")))))),
              s(:send, nil, :assert_equal,
                s(:lvar, :enc),
                s(:send,
                  s(:send,
                    s(:lvar, :e), :message), :encoding)),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raise_with_message,
                    s(:const, nil, :ArgumentError),
                    s(:dstr,
                      s(:str, "named<"),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, "> after unnumbered(2)"))),
                  s(:args),
                  s(:send, nil, :sprintf,
                    s(:dstr,
                      s(:str, "%s%s%<"),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, ">s")),
                    s(:str, "foo"),
                    s(:str, "bar"),
                    s(:hash,
                      s(:pair,
                        s(:sym, :key),
                        s(:str, "value")))))),
              s(:send, nil, :assert_equal,
                s(:lvar, :enc),
                s(:send,
                  s(:send,
                    s(:lvar, :e), :message), :encoding)),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raise_with_message,
                    s(:const, nil, :ArgumentError),
                    s(:dstr,
                      s(:str, "named<"),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, "> after <key>"))),
                  s(:args),
                  s(:send, nil, :sprintf,
                    s(:dstr,
                      s(:str, "%<key><"),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, ">s")),
                    s(:hash,
                      s(:pair,
                        s(:sym, :key),
                        s(:str, "value")))))),
              s(:send, nil, :assert_equal,
                s(:lvar, :enc),
                s(:send,
                  s(:send,
                    s(:lvar, :e), :message), :encoding)),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raise_with_message,
                    s(:const, nil, :ArgumentError),
                    s(:dstr,
                      s(:str, "named<key> after <"),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, ">"))),
                  s(:args),
                  s(:send, nil, :sprintf,
                    s(:dstr,
                      s(:str, "%<"),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, "><key>s")),
                    s(:hash,
                      s(:pair,
                        s(:send,
                          s(:lvar, :k), :to_sym),
                        s(:str, "value")))))),
              s(:send, nil, :assert_equal,
                s(:lvar, :enc),
                s(:send,
                  s(:send,
                    s(:lvar, :e), :message), :encoding)),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raise_with_message,
                    s(:const, nil, :KeyError),
                    s(:dstr,
                      s(:str, "key<"),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, "> not found"))),
                  s(:args),
                  s(:send, nil, :sprintf,
                    s(:dstr,
                      s(:str, "%<"),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, ">s")),
                    s(:hash)))),
              s(:send, nil, :assert_equal,
                s(:lvar, :enc),
                s(:send,
                  s(:send,
                    s(:lvar, :e), :message), :encoding)))))),
      s(:def, :test_named_typed,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "value"),
            s(:send, nil, :sprintf,
              s(:str, "%{key}"),
              s(:hash,
                s(:pair,
                  s(:sym, :key),
                  s(:str, "value"))))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:str, "named{key2} after numbered")),
            s(:args),
            s(:send, nil, :sprintf,
              s(:str, "%1${key2}"),
              s(:hash,
                s(:pair,
                  s(:sym, :key),
                  s(:str, "value"))))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:str, "named{key2} after unnumbered(2)")),
            s(:args),
            s(:send, nil, :sprintf,
              s(:str, "%s%s%{key2}"),
              s(:str, "foo"),
              s(:str, "bar"),
              s(:hash,
                s(:pair,
                  s(:sym, :key),
                  s(:str, "value"))))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:str, "named{key2} after <key>")),
            s(:args),
            s(:send, nil, :sprintf,
              s(:str, "%<key>{key2}"),
              s(:hash,
                s(:pair,
                  s(:sym, :key),
                  s(:str, "value"))))),
          s(:send, nil, :assert_equal,
            s(:str, "value{key2}"),
            s(:send, nil, :sprintf,
              s(:str, "%{key}{key2}"),
              s(:hash,
                s(:pair,
                  s(:sym, :key),
                  s(:str, "value"))))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :KeyError),
              s(:str, "key{key} not found")),
            s(:args),
            s(:send, nil, :sprintf,
              s(:str, "%{key}"),
              s(:hash))))),
      s(:def, :test_named_typed_enc,
        s(:args),
        s(:begin,
          s(:lvasgn, :key,
            s(:str, "〒")),
          s(:block,
            s(:send,
              s(:array,
                s(:const,
                  s(:const, nil, :Encoding), :UTF_8),
                s(:const,
                  s(:const, nil, :Encoding), :EUC_JP)), :each),
            s(:args,
              s(:arg, :enc)),
            s(:begin,
              s(:lvasgn, :k,
                s(:send,
                  s(:lvar, :key), :encode,
                  s(:lvar, :enc))),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raise_with_message,
                    s(:const, nil, :ArgumentError),
                    s(:dstr,
                      s(:str, "named{"),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, "} after numbered"))),
                  s(:args),
                  s(:send, nil, :sprintf,
                    s(:dstr,
                      s(:str, "%1${"),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, "}s")),
                    s(:hash,
                      s(:pair,
                        s(:sym, :key),
                        s(:str, "value")))))),
              s(:send, nil, :assert_equal,
                s(:lvar, :enc),
                s(:send,
                  s(:send,
                    s(:lvar, :e), :message), :encoding)),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raise_with_message,
                    s(:const, nil, :ArgumentError),
                    s(:dstr,
                      s(:str, "named{"),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, "} after unnumbered(2)"))),
                  s(:args),
                  s(:send, nil, :sprintf,
                    s(:dstr,
                      s(:str, "%s%s%{"),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, "}s")),
                    s(:str, "foo"),
                    s(:str, "bar"),
                    s(:hash,
                      s(:pair,
                        s(:sym, :key),
                        s(:str, "value")))))),
              s(:send, nil, :assert_equal,
                s(:lvar, :enc),
                s(:send,
                  s(:send,
                    s(:lvar, :e), :message), :encoding)),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raise_with_message,
                    s(:const, nil, :ArgumentError),
                    s(:dstr,
                      s(:str, "named{"),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, "} after <key>"))),
                  s(:args),
                  s(:send, nil, :sprintf,
                    s(:dstr,
                      s(:str, "%<key>{"),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, "}s")),
                    s(:hash,
                      s(:pair,
                        s(:sym, :key),
                        s(:str, "value")))))),
              s(:send, nil, :assert_equal,
                s(:lvar, :enc),
                s(:send,
                  s(:send,
                    s(:lvar, :e), :message), :encoding)),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raise_with_message,
                    s(:const, nil, :ArgumentError),
                    s(:dstr,
                      s(:str, "named{key} after <"),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, ">"))),
                  s(:args),
                  s(:send, nil, :sprintf,
                    s(:dstr,
                      s(:str, "%<"),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, ">{key}s")),
                    s(:hash,
                      s(:pair,
                        s(:send,
                          s(:lvar, :k), :to_sym),
                        s(:str, "value")))))),
              s(:send, nil, :assert_equal,
                s(:lvar, :enc),
                s(:send,
                  s(:send,
                    s(:lvar, :e), :message), :encoding)),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raise_with_message,
                    s(:const, nil, :KeyError),
                    s(:dstr,
                      s(:str, "key{"),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, "} not found"))),
                  s(:args),
                  s(:send, nil, :sprintf,
                    s(:dstr,
                      s(:str, "%{"),
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, "}")),
                    s(:hash)))),
              s(:send, nil, :assert_equal,
                s(:lvar, :enc),
                s(:send,
                  s(:send,
                    s(:lvar, :e), :message), :encoding)))))),
      s(:def, :test_named_default,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:const, nil, :Hash), :new,
              s(:str, "world"))),
          s(:send, nil, :assert_equal,
            s(:str, "hello world"),
            s(:send,
              s(:str, "hello %{location}"), :%,
              s(:lvar, :h))),
          s(:send, nil, :assert_equal,
            s(:str, "hello world"),
            s(:send,
              s(:str, "hello %<location>s"), :%,
              s(:lvar, :h))))),
      s(:def, :test_named_with_nil,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:hash,
              s(:pair,
                s(:sym, :key),
                s(:nil)),
              s(:pair,
                s(:sym, :key2),
                s(:str, "key2_val")))),
          s(:send, nil, :assert_equal,
            s(:str, "key is , key2 is key2_val"),
            s(:send,
              s(:str, "key is %{key}, key2 is %{key2}"), :%,
              s(:lvar, :h))))))))
