s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestUndef),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:class,
        s(:const, nil, :Undef0), nil,
        s(:begin,
          s(:def, :foo,
            s(:args),
            s(:str, "foo")),
          s(:undef,
            s(:sym, :foo)))),
      s(:class,
        s(:const, nil, :Undef1), nil,
        s(:def, :bar,
          s(:args),
          s(:str, "bar"))),
      s(:class,
        s(:const, nil, :Undef2),
        s(:const, nil, :Undef1),
        s(:undef,
          s(:sym, :bar))),
      s(:def, :test_undef,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :Undef0), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:lvar, :x), :foo)),
          s(:lvasgn, :y,
            s(:send,
              s(:const, nil, :Undef1), :new)),
          s(:send, nil, :assert_equal,
            s(:str, "bar"),
            s(:send,
              s(:lvar, :y), :bar)),
          s(:lvasgn, :z,
            s(:send,
              s(:const, nil, :Undef2), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:lvar, :z), :foo)))),
      s(:def, :test_special_const_undef,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:block,
            s(:send,
              s(:int, 1), :instance_eval),
            s(:args),
            s(:undef,
              s(:sym, :to_s))))))))
