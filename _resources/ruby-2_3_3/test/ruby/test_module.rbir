s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "pp")),
  s(:gvasgn, :$m0,
    s(:send,
      s(:const, nil, :Module), :nesting)),
  s(:class,
    s(:const, nil, :TestModule),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :_wrap_assertion,
        s(:args),
        s(:yield)),
      s(:def, :assert_method_defined?,
        s(:args,
          s(:arg, :klass),
          s(:arg, :mid),
          s(:optarg, :message,
            s(:str, ""))),
        s(:begin,
          s(:lvasgn, :message,
            s(:send, nil, :build_message,
              s(:lvar, :message),
              s(:dstr,
                s(:begin,
                  s(:lvar, :klass)),
                s(:str, "#"),
                s(:begin,
                  s(:lvar, :mid)),
                s(:str, " expected to be defined.")))),
          s(:block,
            s(:send, nil, :_wrap_assertion),
            s(:args),
            s(:or,
              s(:send,
                s(:lvar, :klass), :method_defined?,
                s(:lvar, :mid)),
              s(:send, nil, :raise,
                s(:const,
                  s(:const,
                    s(:const, nil, :Test), :Unit), :AssertionFailedError),
                s(:lvar, :message),
                s(:send, nil, :caller,
                  s(:int, 3))))))),
      s(:def, :assert_method_not_defined?,
        s(:args,
          s(:arg, :klass),
          s(:arg, :mid),
          s(:optarg, :message,
            s(:str, ""))),
        s(:begin,
          s(:lvasgn, :message,
            s(:send, nil, :build_message,
              s(:lvar, :message),
              s(:dstr,
                s(:begin,
                  s(:lvar, :klass)),
                s(:str, "#"),
                s(:begin,
                  s(:lvar, :mid)),
                s(:str, " expected to not be defined.")))),
          s(:block,
            s(:send, nil, :_wrap_assertion),
            s(:args),
            s(:and,
              s(:send,
                s(:lvar, :klass), :method_defined?,
                s(:lvar, :mid)),
              s(:send, nil, :raise,
                s(:const,
                  s(:const,
                    s(:const, nil, :Test), :Unit), :AssertionFailedError),
                s(:lvar, :message),
                s(:send, nil, :caller,
                  s(:int, 3))))))),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@verbose,
            s(:gvar, :$VERBOSE)),
          s(:gvasgn, :$VERBOSE,
            s(:nil)))),
      s(:def, :teardown,
        s(:args),
        s(:gvasgn, :$VERBOSE,
          s(:ivar, :@verbose))),
      s(:def, :test_LT_0,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:const, nil, :String), :<,
              s(:const, nil, :Object))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:const, nil, :Object), :<,
              s(:const, nil, :String))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:const, nil, :String), :<,
              s(:const, nil, :Array))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:const, nil, :Array), :<,
              s(:const, nil, :Enumerable))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:const, nil, :Enumerable), :<,
              s(:const, nil, :Array))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:const, nil, :Proc), :<,
              s(:const, nil, :Comparable))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:const, nil, :Comparable), :<,
              s(:const, nil, :Proc))))),
      s(:def, :test_GT_0,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:const, nil, :String), :>,
              s(:const, nil, :Object))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:const, nil, :Object), :>,
              s(:const, nil, :String))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:const, nil, :String), :>,
              s(:const, nil, :Array))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:const, nil, :Array), :>,
              s(:const, nil, :Enumerable))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:const, nil, :Enumerable), :>,
              s(:const, nil, :Array))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:const, nil, :Comparable), :>,
              s(:const, nil, :Proc))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:const, nil, :Proc), :>,
              s(:const, nil, :Comparable))))),
      s(:def, :test_CMP_0,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:begin,
              s(:send,
                s(:const, nil, :String), :<=>,
                s(:const, nil, :Object)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:begin,
              s(:send,
                s(:const, nil, :Object), :<=>,
                s(:const, nil, :String)))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:const, nil, :Array), :<=>,
              s(:const, nil, :String))))),
      s(:casgn, nil, :ExpectedException,
        s(:const, nil, :NoMethodError)),
      s(:module,
        s(:const, nil, :Mixin),
        s(:begin,
          s(:casgn, nil, :MIXIN,
            s(:int, 1)),
          s(:def, :mixin,
            s(:args), nil))),
      s(:module,
        s(:const, nil, :User),
        s(:begin,
          s(:casgn, nil, :USER,
            s(:int, 2)),
          s(:send, nil, :include,
            s(:const, nil, :Mixin)),
          s(:def, :user,
            s(:args), nil),
          s(:def, :user2,
            s(:args), nil),
          s(:send, nil, :protected,
            s(:sym, :user2)),
          s(:def, :user3,
            s(:args), nil),
          s(:send, nil, :private,
            s(:sym, :user3)))),
      s(:module,
        s(:const, nil, :Other),
        s(:def, :other,
          s(:args), nil)),
      s(:class,
        s(:const, nil, :AClass), nil,
        s(:begin,
          s(:defs,
            s(:const, nil, :AClass), :cm1,
            s(:args),
            s(:str, "cm1")),
          s(:defs,
            s(:const, nil, :AClass), :cm2,
            s(:args),
            s(:send,
              s(:send,
                s(:send, nil, :cm1), :+,
                s(:str, "cm2")), :+,
              s(:send, nil, :cm3))),
          s(:defs,
            s(:const, nil, :AClass), :cm3,
            s(:args),
            s(:str, "cm3")),
          s(:send, nil, :private_class_method,
            s(:sym, :cm1),
            s(:str, "cm3")),
          s(:def, :aClass,
            s(:args),
            s(:sym, :aClass)),
          s(:def, :aClass1,
            s(:args),
            s(:sym, :aClass1)),
          s(:def, :aClass2,
            s(:args),
            s(:sym, :aClass2)),
          s(:send, nil, :private,
            s(:sym, :aClass1)),
          s(:send, nil, :protected,
            s(:sym, :aClass2)))),
      s(:class,
        s(:const, nil, :BClass),
        s(:const, nil, :AClass),
        s(:begin,
          s(:def, :bClass1,
            s(:args),
            s(:sym, :bClass1)),
          s(:send, nil, :private),
          s(:def, :bClass2,
            s(:args),
            s(:sym, :bClass2)),
          s(:send, nil, :protected),
          s(:def, :bClass3,
            s(:args),
            s(:sym, :bClass3)))),
      s(:class,
        s(:const, nil, :CClass),
        s(:const, nil, :BClass),
        s(:defs,
          s(:self), :cClass,
          s(:args), nil)),
      s(:casgn, nil, :MyClass,
        s(:send,
          s(:const, nil, :AClass), :clone)),
      s(:class,
        s(:const, nil, :MyClass), nil,
        s(:send, nil, :public_class_method,
          s(:sym, :cm1))),
      s(:def, :test_CMP,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:const, nil, :Mixin), :<=>,
              s(:const, nil, :Mixin))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:const, nil, :User), :<=>,
              s(:const, nil, :Mixin))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:const, nil, :Mixin), :<=>,
              s(:const, nil, :User))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:const, nil, :Object), :<=>,
              s(:const, nil, :Object))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:const, nil, :String), :<=>,
              s(:const, nil, :Object))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:const, nil, :Object), :<=>,
              s(:const, nil, :String))))),
      s(:def, :test_GE,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_operator,
            s(:const, nil, :Mixin),
            s(:sym, :>=),
            s(:const, nil, :User)),
          s(:send, nil, :assert_operator,
            s(:const, nil, :Mixin),
            s(:sym, :>=),
            s(:const, nil, :Mixin)),
          s(:send, nil, :assert_not_operator,
            s(:const, nil, :User),
            s(:sym, :>=),
            s(:const, nil, :Mixin)),
          s(:send, nil, :assert_operator,
            s(:const, nil, :Object),
            s(:sym, :>=),
            s(:const, nil, :String)),
          s(:send, nil, :assert_operator,
            s(:const, nil, :String),
            s(:sym, :>=),
            s(:const, nil, :String)),
          s(:send, nil, :assert_not_operator,
            s(:const, nil, :String),
            s(:sym, :>=),
            s(:const, nil, :Object)))),
      s(:def, :test_GT,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_operator,
            s(:const, nil, :Mixin),
            s(:sym, :>),
            s(:const, nil, :User)),
          s(:send, nil, :assert_not_operator,
            s(:const, nil, :Mixin),
            s(:sym, :>),
            s(:const, nil, :Mixin)),
          s(:send, nil, :assert_not_operator,
            s(:const, nil, :User),
            s(:sym, :>),
            s(:const, nil, :Mixin)),
          s(:send, nil, :assert_operator,
            s(:const, nil, :Object),
            s(:sym, :>),
            s(:const, nil, :String)),
          s(:send, nil, :assert_not_operator,
            s(:const, nil, :String),
            s(:sym, :>),
            s(:const, nil, :String)),
          s(:send, nil, :assert_not_operator,
            s(:const, nil, :String),
            s(:sym, :>),
            s(:const, nil, :Object)))),
      s(:def, :test_LE,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_operator,
            s(:const, nil, :User),
            s(:sym, :<=),
            s(:const, nil, :Mixin)),
          s(:send, nil, :assert_operator,
            s(:const, nil, :Mixin),
            s(:sym, :<=),
            s(:const, nil, :Mixin)),
          s(:send, nil, :assert_not_operator,
            s(:const, nil, :Mixin),
            s(:sym, :<=),
            s(:const, nil, :User)),
          s(:send, nil, :assert_operator,
            s(:const, nil, :String),
            s(:sym, :<=),
            s(:const, nil, :Object)),
          s(:send, nil, :assert_operator,
            s(:const, nil, :String),
            s(:sym, :<=),
            s(:const, nil, :String)),
          s(:send, nil, :assert_not_operator,
            s(:const, nil, :Object),
            s(:sym, :<=),
            s(:const, nil, :String)))),
      s(:def, :test_LT,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_operator,
            s(:const, nil, :User),
            s(:sym, :<),
            s(:const, nil, :Mixin)),
          s(:send, nil, :assert_not_operator,
            s(:const, nil, :Mixin),
            s(:sym, :<),
            s(:const, nil, :Mixin)),
          s(:send, nil, :assert_not_operator,
            s(:const, nil, :Mixin),
            s(:sym, :<),
            s(:const, nil, :User)),
          s(:send, nil, :assert_operator,
            s(:const, nil, :String),
            s(:sym, :<),
            s(:const, nil, :Object)),
          s(:send, nil, :assert_not_operator,
            s(:const, nil, :String),
            s(:sym, :<),
            s(:const, nil, :String)),
          s(:send, nil, :assert_not_operator,
            s(:const, nil, :Object),
            s(:sym, :<),
            s(:const, nil, :String)))),
      s(:def, :test_VERY_EQUAL,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_operator,
            s(:const, nil, :Object),
            s(:sym, :===),
            s(:self)),
          s(:send, nil, :assert_operator,
            s(:const,
              s(:const,
                s(:const, nil, :Test), :Unit), :TestCase),
            s(:sym, :===),
            s(:self)),
          s(:send, nil, :assert_operator,
            s(:const, nil, :TestModule),
            s(:sym, :===),
            s(:self)),
          s(:send, nil, :assert_not_operator,
            s(:const, nil, :String),
            s(:sym, :===),
            s(:self)))),
      s(:def, :test_ancestors,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const, nil, :User),
              s(:const, nil, :Mixin)),
            s(:send,
              s(:const, nil, :User), :ancestors)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const, nil, :Mixin)),
            s(:send,
              s(:const, nil, :Mixin), :ancestors)),
          s(:lvasgn, :ancestors,
            s(:send,
              s(:const, nil, :Object), :ancestors)),
          s(:lvasgn, :mixins,
            s(:send,
              s(:lvar, :ancestors), :-,
              s(:array,
                s(:const, nil, :Object),
                s(:const, nil, :Kernel),
                s(:const, nil, :BasicObject)))),
          s(:if,
            s(:defined?,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :JSON), :Ext), :Generator), :GeneratorMethods), :String)),
            s(:send,
              s(:lvar, :mixins), :<<,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :JSON), :Ext), :Generator), :GeneratorMethods), :String)), nil),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const, nil, :Object),
              s(:const, nil, :Kernel),
              s(:const, nil, :BasicObject)),
            s(:send,
              s(:lvar, :ancestors), :-,
              s(:lvar, :mixins))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const, nil, :String),
              s(:const, nil, :Comparable),
              s(:const, nil, :Object),
              s(:const, nil, :Kernel),
              s(:const, nil, :BasicObject)),
            s(:send,
              s(:send,
                s(:const, nil, :String), :ancestors), :-,
              s(:lvar, :mixins))))),
      s(:casgn, nil, :CLASS_EVAL,
        s(:int, 2)),
      s(:cvasgn, :@@class_eval,
        s(:str, "b")),
      s(:def, :test_class_eval,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :Other), :class_eval,
            s(:str, "CLASS_EVAL = 1")),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:const,
              s(:const, nil, :Other), :CLASS_EVAL)),
          s(:send, nil, :assert_include,
            s(:send,
              s(:const, nil, :Other), :constants),
            s(:sym, :CLASS_EVAL)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:block,
              s(:send,
                s(:const, nil, :Other), :class_eval),
              s(:args),
              s(:const, nil, :CLASS_EVAL))),
          s(:send,
            s(:const, nil, :Other), :class_eval,
            s(:str, "@@class_eval = 'a'")),
          s(:send, nil, :assert_equal,
            s(:str, "a"),
            s(:send,
              s(:const, nil, :Other), :class_variable_get,
              s(:sym, :@@class_eval))),
          s(:send, nil, :assert_equal,
            s(:str, "b"),
            s(:block,
              s(:send,
                s(:const, nil, :Other), :class_eval),
              s(:args),
              s(:cvar, :@@class_eval))),
          s(:block,
            s(:send,
              s(:const, nil, :Other), :class_eval),
            s(:args),
            s(:begin,
              s(:send, nil, :module_function),
              s(:def, :class_eval_test,
                s(:args),
                s(:str, "foo")))),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:const, nil, :Other), :class_eval_test)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const, nil, :Other)),
            s(:block,
              s(:send,
                s(:const, nil, :Other), :class_eval),
              s(:args,
                s(:restarg, :args)),
              s(:lvar, :args))))),
      s(:def, :test_const_defined?,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_operator,
            s(:const, nil, :Math),
            s(:sym, :const_defined?),
            s(:sym, :PI)),
          s(:send, nil, :assert_operator,
            s(:const, nil, :Math),
            s(:sym, :const_defined?),
            s(:str, "PI")),
          s(:send, nil, :assert_not_operator,
            s(:const, nil, :Math),
            s(:sym, :const_defined?),
            s(:sym, :IP)),
          s(:send, nil, :assert_not_operator,
            s(:const, nil, :Math),
            s(:sym, :const_defined?),
            s(:str, "IP")))),
      s(:def, :each_bad_constants,
        s(:args,
          s(:arg, :m),
          s(:blockarg, :b)),
        s(:block,
          s(:send,
            s(:array,
              s(:str, "#<Class:0x7b8b718b>"),
              s(:str, ":Object"),
              s(:str, ""),
              s(:str, ":"),
              s(:array,
                s(:str, "String::"),
                s(:str, "[Bug #7573]")),
              s(:str, "あ"),
              s(:str, "Name?")), :each),
          s(:args,
            s(:arg, :name),
            s(:arg, :msg)),
          s(:begin,
            s(:lvasgn, :expected,
              s(:send,
                s(:str, "wrong constant name %s"), :%,
                s(:send, nil, :quote,
                  s(:lvar, :name)))),
            s(:lvasgn, :msg,
              s(:dstr,
                s(:begin,
                  s(:lvar, :msg)),
                s(:begin,
                  s(:if,
                    s(:lvar, :msg),
                    s(:str, ": "), nil)),
                s(:str, "wrong constant name "),
                s(:begin,
                  s(:send,
                    s(:lvar, :name), :dump)))),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :NameError),
                s(:lvar, :expected),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :msg)),
                  s(:str, " to "),
                  s(:begin,
                    s(:lvar, :m)))),
              s(:args),
              s(:yield,
                s(:lvar, :name)))))),
      s(:def, :test_bad_constants_get,
        s(:args),
        s(:block,
          s(:send, nil, :each_bad_constants,
            s(:str, "get")),
          s(:args,
            s(:arg, :name)),
          s(:send,
            s(:const, nil, :Object), :const_get,
            s(:lvar, :name)))),
      s(:def, :test_bad_constants_defined,
        s(:args),
        s(:block,
          s(:send, nil, :each_bad_constants,
            s(:str, "defined?")),
          s(:args,
            s(:arg, :name)),
          s(:send,
            s(:const, nil, :Object), :const_defined?,
            s(:lvar, :name)))),
      s(:def, :test_leading_colons,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:const, nil, :Object),
          s(:send,
            s(:const, nil, :AClass), :const_get,
            s(:str, "::Object")))),
      s(:def, :test_const_get,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Math), :PI),
            s(:send,
              s(:const, nil, :Math), :const_get,
              s(:str, "PI"))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Math), :PI),
            s(:send,
              s(:const, nil, :Math), :const_get,
              s(:sym, :PI))),
          s(:lvasgn, :n,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :n), :to_str,
            s(:args),
            s(:begin,
              s(:ivasgn, :@count,
                s(:if,
                  s(:defined?,
                    s(:ivar, :@count)),
                  s(:send,
                    s(:ivar, :@count), :+,
                    s(:int, 1)),
                  s(:int, 1))),
              s(:str, "PI"))),
          s(:defs,
            s(:lvar, :n), :count,
            s(:args),
            s(:ivar, :@count)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Math), :PI),
            s(:send,
              s(:const, nil, :Math), :const_get,
              s(:lvar, :n))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :n), :count)))),
      s(:def, :test_nested_get,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:const, nil, :Other),
            s(:send,
              s(:const, nil, :Object), :const_get,
              s(:send,
                s(:array,
                  s(:send,
                    s(:self), :class),
                  s(:const, nil, :Other)), :join,
                s(:str, "::")))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :User), :USER),
            s(:send,
              s(:send,
                s(:self), :class), :const_get,
              s(:send,
                s(:array,
                  s(:const, nil, :User),
                  s(:str, "USER")), :join,
                s(:str, "::")))))),
      s(:def, :test_nested_get_symbol,
        s(:args),
        s(:begin,
          s(:lvasgn, :const,
            s(:send,
              s(:send,
                s(:array,
                  s(:send,
                    s(:self), :class),
                  s(:const, nil, :Other)), :join,
                s(:str, "::")), :to_sym)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:const, nil, :Object), :const_get,
              s(:lvar, :const))),
          s(:lvasgn, :const,
            s(:send,
              s(:send,
                s(:array,
                  s(:const, nil, :User),
                  s(:str, "USER")), :join,
                s(:str, "::")), :to_sym)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:send,
                s(:self), :class), :const_get,
              s(:lvar, :const))))),
      s(:def, :test_nested_get_const_missing,
        s(:args),
        s(:begin,
          s(:lvasgn, :classes,
            s(:array)),
          s(:lvasgn, :klass,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:block,
                s(:send, nil, :define_singleton_method,
                  s(:sym, :const_missing)),
                s(:args,
                  s(:arg, :name)),
                s(:begin,
                  s(:send,
                    s(:lvar, :classes), :<<,
                    s(:lvar, :name)),
                  s(:lvar, :klass))))),
          s(:send,
            s(:lvar, :klass), :const_get,
            s(:str, "Foo::Bar::Baz")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :Foo),
              s(:sym, :Bar),
              s(:sym, :Baz)),
            s(:lvar, :classes)))),
      s(:def, :test_nested_get_bad_class,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send,
            s(:send,
              s(:self), :class), :const_get,
            s(:send,
              s(:array,
                s(:const, nil, :User),
                s(:str, "USER"),
                s(:str, "Foo")), :join,
              s(:str, "::"))))),
      s(:def, :test_nested_defined,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_send,
            s(:array,
              s(:const, nil, :Object),
              s(:sym, :const_defined?),
              s(:send,
                s(:array,
                  s(:send,
                    s(:send,
                      s(:self), :class), :name),
                  s(:str, "Other")), :join,
                s(:str, "::")))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:send,
                s(:self), :class),
              s(:sym, :const_defined?),
              s(:str, "User::USER"))),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:send,
                s(:self), :class),
              s(:sym, :const_defined?),
              s(:str, "User::Foo"))))),
      s(:def, :test_nested_defined_symbol,
        s(:args),
        s(:begin,
          s(:lvasgn, :const,
            s(:send,
              s(:send,
                s(:array,
                  s(:send,
                    s(:self), :class),
                  s(:const, nil, :Other)), :join,
                s(:str, "::")), :to_sym)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:lvar, :const))),
          s(:lvasgn, :const,
            s(:send,
              s(:send,
                s(:array,
                  s(:const, nil, :User),
                  s(:str, "USER")), :join,
                s(:str, "::")), :to_sym)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:send,
                s(:self), :class), :const_defined?,
              s(:lvar, :const))))),
      s(:def, :test_nested_defined_bad_class,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send,
            s(:send,
              s(:self), :class), :const_defined?,
            s(:str, "User::USER::Foo")))),
      s(:def, :test_const_set,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_operator,
            s(:const, nil, :Other),
            s(:sym, :const_defined?),
            s(:sym, :KOALA)),
          s(:send,
            s(:const, nil, :Other), :const_set,
            s(:sym, :KOALA),
            s(:int, 99)),
          s(:send, nil, :assert_operator,
            s(:const, nil, :Other),
            s(:sym, :const_defined?),
            s(:sym, :KOALA)),
          s(:send, nil, :assert_equal,
            s(:int, 99),
            s(:const,
              s(:const, nil, :Other), :KOALA)),
          s(:send,
            s(:const, nil, :Other), :const_set,
            s(:str, "WOMBAT"),
            s(:str, "Hi")),
          s(:send, nil, :assert_equal,
            s(:str, "Hi"),
            s(:const,
              s(:const, nil, :Other), :WOMBAT)),
          s(:lvasgn, :n,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :n), :to_str,
            s(:args),
            s(:begin,
              s(:ivasgn, :@count,
                s(:if,
                  s(:defined?,
                    s(:ivar, :@count)),
                  s(:send,
                    s(:ivar, :@count), :+,
                    s(:int, 1)),
                  s(:int, 1))),
              s(:str, "HOGE"))),
          s(:defs,
            s(:lvar, :n), :count,
            s(:args),
            s(:ivar, :@count)),
          s(:defs,
            s(:lvar, :n), :count=,
            s(:args,
              s(:arg, :v)),
            s(:ivasgn, :@count,
              s(:lvar, :v))),
          s(:send, nil, :assert_not_operator,
            s(:const, nil, :Other),
            s(:sym, :const_defined?),
            s(:sym, :HOGE)),
          s(:send,
            s(:const, nil, :Other), :const_set,
            s(:lvar, :n),
            s(:int, 999)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :n), :count)),
          s(:send,
            s(:lvar, :n), :count=,
            s(:int, 0)),
          s(:send, nil, :assert_equal,
            s(:int, 999),
            s(:send,
              s(:const, nil, :Other), :const_get,
              s(:lvar, :n))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :n), :count)),
          s(:send,
            s(:lvar, :n), :count=,
            s(:int, 0)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:const, nil, :Other), :const_defined?,
              s(:lvar, :n))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :n), :count)))),
      s(:def, :test_constants,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :MIXIN)),
            s(:send,
              s(:const, nil, :Mixin), :constants)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :MIXIN),
              s(:sym, :USER)),
            s(:send,
              s(:send,
                s(:const, nil, :User), :constants), :sort)))),
      s(:def, :test_self_initialize_copy,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9535,
            s(:str, "[ruby-dev:47989] [Bug #9535]")),
          s(:lvasgn, :m,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:begin,
                s(:def, :foo,
                  s(:args),
                  s(:sym, :ok)),
                s(:send, nil, :initialize_copy,
                  s(:self))))),
          s(:send, nil, :assert_equal,
            s(:sym, :ok),
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Object), :new), :extend,
                s(:lvar, :m)), :foo),
            s(:lvar, :bug9535)))),
      s(:def, :test_initialize_copy_empty,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9813,
            s(:str, "[ruby-dev:48182] [Bug #9813]")),
          s(:lvasgn, :m,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:begin,
                s(:def, :x,
                  s(:args), nil),
                s(:send, nil, :const_set,
                  s(:sym, :X),
                  s(:int, 1)),
                s(:ivasgn, :@x,
                  s(:int, 2))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :x)),
            s(:send,
              s(:lvar, :m), :instance_methods)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :@x)),
            s(:send,
              s(:lvar, :m), :instance_variables)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :X)),
            s(:send,
              s(:lvar, :m), :constants)),
          s(:block,
            s(:send,
              s(:lvar, :m), :module_eval),
            s(:args),
            s(:send, nil, :initialize_copy,
              s(:send,
                s(:const, nil, :Module), :new))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :m), :instance_methods),
            s(:lvar, :bug9813)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :m), :instance_variables),
            s(:lvar, :bug9813)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :m), :constants),
            s(:lvar, :bug9813)))),
      s(:def, :test_dup,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6454,
            s(:str, "[ruby-core:45132]")),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:send,
            s(:const, nil, :Other), :const_set,
            s(:sym, :BUG6454),
            s(:lvar, :a)),
          s(:lvasgn, :b,
            s(:send,
              s(:lvar, :a), :dup)),
          s(:send,
            s(:const, nil, :Other), :const_set,
            s(:sym, :BUG6454_dup),
            s(:lvar, :b)),
          s(:send, nil, :assert_equal,
            s(:str, "TestModule::Other::BUG6454_dup"),
            s(:send,
              s(:lvar, :b), :inspect),
            s(:lvar, :bug6454)))),
      s(:def, :test_dup_anonymous,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6454,
            s(:str, "[ruby-core:45132]")),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:lvasgn, :original,
            s(:send,
              s(:lvar, :a), :inspect)),
          s(:lvasgn, :b,
            s(:send,
              s(:lvar, :a), :dup)),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :original),
            s(:send,
              s(:lvar, :b), :inspect),
            s(:lvar, :bug6454)))),
      s(:def, :test_public_include,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised,
            s(:str, "#8846")),
          s(:args),
          s(:send,
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Module), :new), :include,
                s(:block,
                  s(:send,
                    s(:const, nil, :Module), :new),
                  s(:args),
                  s(:def, :foo,
                    s(:args), nil))), :instance_methods), :==,
            s(:array,
              s(:sym, :foo))))),
      s(:def, :test_include_toplevel,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array),
          s(:dstr,
            s(:str, "      Mod = Module.new {def foo; :include_foo end}\n"),
            s(:str, "      TOPLEVEL_BINDING.eval('include Mod')\n"),
            s(:str, "\n"),
            s(:str, "      assert_equal(:include_foo, TOPLEVEL_BINDING.eval('foo'))\n"),
            s(:str, "      assert_equal([Object, Mod], Object.ancestors.slice(0, 2))\n")))),
      s(:def, :test_included_modules,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:const, nil, :Mixin), :included_modules)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const, nil, :Mixin)),
            s(:send,
              s(:const, nil, :User), :included_modules)),
          s(:lvasgn, :mixins,
            s(:send,
              s(:send,
                s(:const, nil, :Object), :included_modules), :-,
              s(:array,
                s(:const, nil, :Kernel)))),
          s(:if,
            s(:defined?,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :JSON), :Ext), :Generator), :GeneratorMethods), :String)),
            s(:send,
              s(:lvar, :mixins), :<<,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :JSON), :Ext), :Generator), :GeneratorMethods), :String)), nil),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const, nil, :Kernel)),
            s(:send,
              s(:send,
                s(:const, nil, :Object), :included_modules), :-,
              s(:lvar, :mixins))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const, nil, :Comparable),
              s(:const, nil, :Kernel)),
            s(:send,
              s(:send,
                s(:const, nil, :String), :included_modules), :-,
              s(:lvar, :mixins))))),
      s(:def, :test_instance_methods,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :user),
              s(:sym, :user2)),
            s(:send,
              s(:const, nil, :User), :instance_methods,
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:sym, :user),
                s(:sym, :user2),
                s(:sym, :mixin)), :sort),
            s(:send,
              s(:send,
                s(:const, nil, :User), :instance_methods,
                s(:true)), :sort)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :mixin)),
            s(:send,
              s(:const, nil, :Mixin), :instance_methods)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :mixin)),
            s(:send,
              s(:const, nil, :Mixin), :instance_methods,
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :cClass)),
            s(:send,
              s(:begin,
                s(:sclass,
                  s(:const, nil, :CClass),
                  s(:self))), :instance_methods,
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:begin,
                s(:sclass,
                  s(:const, nil, :BClass),
                  s(:self))), :instance_methods,
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :cm2)),
            s(:send,
              s(:begin,
                s(:sclass,
                  s(:const, nil, :AClass),
                  s(:self))), :instance_methods,
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :aClass),
              s(:sym, :aClass2)),
            s(:send,
              s(:send,
                s(:const, nil, :AClass), :instance_methods,
                s(:false)), :sort)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :aClass),
              s(:sym, :aClass2)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :AClass), :instance_methods,
                    s(:true)), :-,
                  s(:send,
                    s(:const, nil, :Object), :instance_methods,
                    s(:true)))), :sort)))),
      s(:def, :test_method_defined?,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :User), :method_defined?,
                s(:sym, :wombat)), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :User), :method_defined?,
              s(:sym, :mixin))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :User), :method_defined?,
              s(:sym, :user))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :User), :method_defined?,
              s(:sym, :user2))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :User), :method_defined?,
                s(:sym, :user3)), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :User), :method_defined?,
                s(:str, "wombat")), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :User), :method_defined?,
              s(:str, "mixin"))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :User), :method_defined?,
              s(:str, "user"))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :User), :method_defined?,
              s(:str, "user2"))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :User), :method_defined?,
                s(:str, "user3")), :!)))),
      s(:def, :module_exec_aux,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Proc), :new),
          s(:args),
          s(:def, :dynamically_added_method_3,
            s(:args), nil))),
      s(:def, :module_exec_aux_2,
        s(:args,
          s(:blockarg, :block)),
        s(:send,
          s(:const, nil, :User), :module_exec,
          s(:block_pass,
            s(:lvar, :block)))),
      s(:def, :test_module_exec,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :User), :module_exec),
            s(:args),
            s(:def, :dynamically_added_method_1,
              s(:args), nil)),
          s(:send, nil, :assert_method_defined?,
            s(:const, nil, :User),
            s(:sym, :dynamically_added_method_1)),
          s(:lvasgn, :block,
            s(:block,
              s(:send,
                s(:const, nil, :Proc), :new),
              s(:args),
              s(:def, :dynamically_added_method_2,
                s(:args), nil))),
          s(:send,
            s(:const, nil, :User), :module_exec,
            s(:block_pass,
              s(:lvar, :block))),
          s(:send, nil, :assert_method_defined?,
            s(:const, nil, :User),
            s(:sym, :dynamically_added_method_2)),
          s(:send,
            s(:const, nil, :User), :module_exec,
            s(:block_pass,
              s(:send, nil, :module_exec_aux))),
          s(:send, nil, :assert_method_defined?,
            s(:const, nil, :User),
            s(:sym, :dynamically_added_method_3)),
          s(:block,
            s(:send, nil, :module_exec_aux_2),
            s(:args),
            s(:def, :dynamically_added_method_4,
              s(:args), nil)),
          s(:send, nil, :assert_method_defined?,
            s(:const, nil, :User),
            s(:sym, :dynamically_added_method_4)))),
      s(:def, :test_module_eval,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :User), :module_eval,
            s(:str, "MODULE_EVAL = 1")),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:const,
              s(:const, nil, :User), :MODULE_EVAL)),
          s(:send, nil, :assert_include,
            s(:send,
              s(:const, nil, :User), :constants),
            s(:sym, :MODULE_EVAL)),
          s(:send,
            s(:const, nil, :User), :instance_eval,
            s(:str, "remove_const(:MODULE_EVAL)")),
          s(:send, nil, :assert_not_include,
            s(:send,
              s(:const, nil, :User), :constants),
            s(:sym, :MODULE_EVAL)))),
      s(:def, :test_name,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "Fixnum"),
            s(:send,
              s(:const, nil, :Fixnum), :name)),
          s(:send, nil, :assert_equal,
            s(:str, "TestModule::Mixin"),
            s(:send,
              s(:const, nil, :Mixin), :name)),
          s(:send, nil, :assert_equal,
            s(:str, "TestModule::User"),
            s(:send,
              s(:const, nil, :User), :name)))),
      s(:def, :test_classpath,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:lvasgn, :n,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:send,
            s(:lvar, :m), :const_set,
            s(:sym, :N),
            s(:lvar, :n)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :m), :name)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :n), :name)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :N)),
            s(:send,
              s(:lvar, :m), :constants)),
          s(:send,
            s(:lvar, :m), :module_eval,
            s(:str, "module O end")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :N),
              s(:sym, :O)),
            s(:send,
              s(:lvar, :m), :constants)),
          s(:send,
            s(:lvar, :m), :module_eval,
            s(:str, "class C; end")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :N),
              s(:sym, :O),
              s(:sym, :C)),
            s(:send,
              s(:lvar, :m), :constants)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:const,
                s(:lvar, :m), :N), :name)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A#<Module:.*>::O\\z"),
              s(:regopt)),
            s(:send,
              s(:const,
                s(:lvar, :m), :O), :name)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A#<Module:.*>::C\\z"),
              s(:regopt)),
            s(:send,
              s(:const,
                s(:lvar, :m), :C), :name)),
          s(:send,
            s(:send,
              s(:self), :class), :const_set,
            s(:sym, :M),
            s(:lvar, :m)),
          s(:lvasgn, :prefix,
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :name), :+,
              s(:str, "::M::"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :prefix), :+,
              s(:str, "N")),
            s(:send,
              s(:send,
                s(:lvar, :m), :const_get,
                s(:sym, :N)), :name)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :prefix), :+,
              s(:str, "O")),
            s(:send,
              s(:send,
                s(:lvar, :m), :const_get,
                s(:sym, :O)), :name)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :prefix), :+,
              s(:str, "C")),
            s(:send,
              s(:send,
                s(:lvar, :m), :const_get,
                s(:sym, :C)), :name)))),
      s(:def, :test_private_class_method,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ExpectedException)),
            s(:args),
            s(:send,
              s(:const, nil, :AClass), :cm1)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ExpectedException)),
            s(:args),
            s(:send,
              s(:const, nil, :AClass), :cm3)),
          s(:send, nil, :assert_equal,
            s(:str, "cm1cm2cm3"),
            s(:send,
              s(:const, nil, :AClass), :cm2)))),
      s(:def, :test_private_instance_methods,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :aClass1)),
            s(:send,
              s(:const, nil, :AClass), :private_instance_methods,
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :bClass2)),
            s(:send,
              s(:const, nil, :BClass), :private_instance_methods,
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :aClass1),
              s(:sym, :bClass2)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :BClass), :private_instance_methods,
                    s(:true)), :-,
                  s(:send,
                    s(:const, nil, :Object), :private_instance_methods,
                    s(:true)))), :sort)))),
      s(:def, :test_protected_instance_methods,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :aClass2)),
            s(:send,
              s(:const, nil, :AClass), :protected_instance_methods)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :bClass3)),
            s(:send,
              s(:const, nil, :BClass), :protected_instance_methods,
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:sym, :bClass3),
                s(:sym, :aClass2)), :sort),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :BClass), :protected_instance_methods,
                    s(:true)), :-,
                  s(:send,
                    s(:const, nil, :Object), :protected_instance_methods,
                    s(:true)))), :sort)))),
      s(:def, :test_public_class_method,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "cm1"),
            s(:send,
              s(:const, nil, :MyClass), :cm1)),
          s(:send, nil, :assert_equal,
            s(:str, "cm1cm2cm3"),
            s(:send,
              s(:const, nil, :MyClass), :cm2)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ExpectedException)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "MyClass.cm3"))))),
      s(:def, :test_public_instance_methods,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :aClass)),
            s(:send,
              s(:const, nil, :AClass), :public_instance_methods,
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :bClass1)),
            s(:send,
              s(:const, nil, :BClass), :public_instance_methods,
              s(:false))))),
      s(:def, :test_s_constants,
        s(:args),
        s(:begin,
          s(:lvasgn, :c1,
            s(:send,
              s(:const, nil, :Module), :constants)),
          s(:send,
            s(:const, nil, :Object), :module_eval,
            s(:str, "WALTER = 99")),
          s(:lvasgn, :c2,
            s(:send,
              s(:const, nil, :Module), :constants)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :WALTER)),
            s(:send,
              s(:lvar, :c2), :-,
              s(:lvar, :c1))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:const, nil, :Module), :constants,
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:const, nil, :Module), :constants,
              s(:false))),
          s(:lvasgn, :src,
            s(:dstr,
              s(:str, "      ary = Module.constants\n"),
              s(:str, "      module M\n"),
              s(:str, "        WALTER = 99\n"),
              s(:str, "      end\n"),
              s(:str, "      class Module\n"),
              s(:str, "        include M\n"),
              s(:str, "      end\n"),
              s(:str, "      p Module.constants - ary, Module.constants(true), Module.constants(false)\n"))),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:lvar, :src),
            s(:array,
              s(:str, "[:M]"),
              s(:str, "[:WALTER]"),
              s(:str, "[]")),
            s(:array)),
          s(:lvasgn, :klass,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:send, nil, :const_set,
                s(:sym, :X),
                s(:int, 123)))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :klass), :class_eval),
                s(:args),
                s(:send,
                  s(:const, nil, :Module), :constants)), :include?,
              s(:sym, :X))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send,
                s(:const, nil, :Complex), :constants,
                s(:false)), :include?,
              s(:sym, :compatible))))),
      s(:module,
        s(:const, nil, :M1),
        s(:begin,
          s(:gvasgn, :$m1,
            s(:send,
              s(:const, nil, :Module), :nesting)),
          s(:module,
            s(:const, nil, :M2),
            s(:gvasgn, :$m2,
              s(:send,
                s(:const, nil, :Module), :nesting))))),
      s(:def, :test_s_nesting,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:gvar, :$m0)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const,
                s(:const, nil, :TestModule), :M1),
              s(:const, nil, :TestModule)),
            s(:gvar, :$m1)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const,
                s(:const,
                  s(:const, nil, :TestModule), :M1), :M2),
              s(:const,
                s(:const, nil, :TestModule), :M1),
              s(:const, nil, :TestModule)),
            s(:gvar, :$m2)))),
      s(:def, :test_s_new,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Module),
            s(:lvar, :m)))),
      s(:def, :test_freeze,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:begin,
                s(:defs,
                  s(:self), :baz,
                  s(:args), nil),
                s(:def, :bar,
                  s(:args), nil)))),
          s(:send,
            s(:lvar, :m), :freeze),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :m), :module_eval),
              s(:args),
              s(:def, :foo,
                s(:args), nil))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :m), :__send__,
              s(:sym, :private),
              s(:sym, :bar))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :m), :private_class_method,
              s(:sym, :baz))))),
      s(:def, :test_attr_obsoleted_flag,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send,
              s(:lvar, :c), :class_eval),
            s(:args),
            s(:begin,
              s(:def, :initialize,
                s(:args),
                s(:begin,
                  s(:ivasgn, :@foo,
                    s(:sym, :foo)),
                  s(:ivasgn, :@bar,
                    s(:sym, :bar)))),
              s(:send, nil, :attr,
                s(:sym, :foo),
                s(:true)),
              s(:send, nil, :attr,
                s(:sym, :bar),
                s(:false)))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :c), :new)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :o), :respond_to?,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :o), :respond_to?,
              s(:sym, :foo=))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :o), :respond_to?,
              s(:sym, :bar))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :o), :respond_to?,
              s(:sym, :bar=))))),
      s(:def, :test_const_get_evaled,
        s(:args),
        s(:begin,
          s(:lvasgn, :c1,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:lvasgn, :c2,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :c1))),
          s(:send, nil, :eval,
            s(:str, "c1::Foo = :foo")),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:const,
              s(:lvar, :c1), :Foo)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:const,
              s(:lvar, :c2), :Foo)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :c2), :const_get,
              s(:sym, :Foo))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c2), :const_get,
              s(:sym, :Foo),
              s(:false))),
          s(:send, nil, :eval,
            s(:str, "c1::Foo = :foo")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:const,
              s(:lvar, :c1), :Bar)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:const,
              s(:lvar, :c2), :Bar)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c2), :const_get,
              s(:sym, :Bar))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c2), :const_get,
              s(:sym, :Bar),
              s(:false))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c2), :const_get,
              s(:str, "Bar"),
              s(:false))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c2), :const_get,
              s(:str, "BaR11"),
              s(:false))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:const, nil, :Object), :const_get,
              s(:str, "BaR11"),
              s(:false))),
          s(:block,
            s(:send,
              s(:lvar, :c1), :instance_eval),
            s(:args),
            s(:def, :const_missing,
              s(:args,
                s(:arg, :x)),
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:sym, :Bar),
            s(:const,
              s(:lvar, :c1), :Bar)),
          s(:send, nil, :assert_equal,
            s(:sym, :Bar),
            s(:const,
              s(:lvar, :c2), :Bar)),
          s(:send, nil, :assert_equal,
            s(:sym, :Bar),
            s(:send,
              s(:lvar, :c2), :const_get,
              s(:sym, :Bar))),
          s(:send, nil, :assert_equal,
            s(:sym, :Bar),
            s(:send,
              s(:lvar, :c2), :const_get,
              s(:sym, :Bar),
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:sym, :Bar),
            s(:send,
              s(:lvar, :c2), :const_get,
              s(:str, "Bar"))),
          s(:send, nil, :assert_equal,
            s(:sym, :Bar),
            s(:send,
              s(:lvar, :c2), :const_get,
              s(:str, "Bar"),
              s(:false))),
          s(:lvasgn, :v,
            s(:send,
              s(:lvar, :c2), :const_get,
              s(:str, "Bar11"),
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "Bar11"), :to_sym),
            s(:lvar, :v)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c1), :const_get,
              s(:sym, :foo))))),
      s(:def, :test_const_set_invalid_name,
        s(:args),
        s(:begin,
          s(:lvasgn, :c1,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :NameError),
              s(:regexp,
                s(:str, "foo"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :c1), :const_set,
              s(:sym, :foo),
              s(:sym, :foo))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :NameError),
              s(:regexp,
                s(:str, "bar"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :c1), :const_set,
              s(:str, "bar"),
              s(:sym, :foo))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "1"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :c1), :const_set,
              s(:int, 1),
              s(:sym, :foo))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c1), :const_set,
              s(:str, "Xあ"),
              s(:sym, :foo))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c1), :const_set,
              s(:send,
                s(:str, "Xあ"), :encode,
                s(:str, "utf-16be")),
              s(:sym, :foo))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c1), :const_set,
              s(:send,
                s(:str, "Xあ"), :encode,
                s(:str, "utf-16le")),
              s(:sym, :foo))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c1), :const_set,
              s(:send,
                s(:str, "Xあ"), :encode,
                s(:str, "utf-32be")),
              s(:sym, :foo))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c1), :const_set,
              s(:send,
                s(:str, "Xあ"), :encode,
                s(:str, "utf-32le")),
              s(:sym, :foo))),
          s(:lvasgn, :cx,
            s(:send,
              s(:const, nil, :EnvUtil), :labeled_class,
              s(:str, "Xあ"))),
          s(:block,
            s(:send,
              s(:const, nil, :EnvUtil), :with_default_external,
              s(:const,
                s(:const, nil, :Encoding), :UTF_8)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :TypeError),
                s(:regexp,
                  s(:str, "X\\u{3042}"),
                  s(:regopt))),
              s(:args),
              s(:send,
                s(:lvar, :c1), :const_set,
                s(:lvar, :cx),
                s(:sym, :foo)))))),
      s(:def, :test_const_get_invalid_name,
        s(:args),
        s(:begin,
          s(:lvasgn, :c1,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c1), :const_get,
              s(:sym, :foo))),
          s(:lvasgn, :bug5084,
            s(:str, "[ruby-dev:44200]")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError),
              s(:lvar, :bug5084)),
            s(:args),
            s(:send,
              s(:lvar, :c1), :const_get,
              s(:int, 1))),
          s(:lvasgn, :bug7574,
            s(:str, "[ruby-dev:46749]")),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :NameError),
              s(:str, "wrong constant name \"String\\u0000\""),
              s(:lvar, :bug7574)),
            s(:args),
            s(:send,
              s(:const, nil, :Object), :const_get,
              s(:str, "String\u0000"))))),
      s(:def, :test_const_defined_invalid_name,
        s(:args),
        s(:begin,
          s(:lvasgn, :c1,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c1), :const_defined?,
              s(:sym, :foo))),
          s(:lvasgn, :bug5084,
            s(:str, "[ruby-dev:44200]")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError),
              s(:lvar, :bug5084)),
            s(:args),
            s(:send,
              s(:lvar, :c1), :const_defined?,
              s(:int, 1))),
          s(:lvasgn, :bug7574,
            s(:str, "[ruby-dev:46749]")),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :NameError),
              s(:str, "wrong constant name \"String\\u0000\""),
              s(:lvar, :bug7574)),
            s(:args),
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:str, "String\u0000"))))),
      s(:def, :test_const_get_no_inherited,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug3422,
            s(:str, "[ruby-core:30719]")),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "    BasicObject::A = 1\n"),
              s(:str, "    puts [true, false].map {|inh|\n"),
              s(:str, "      begin\n"),
              s(:str, "        Object.const_get(:A, inh)\n"),
              s(:str, "      rescue NameError => e\n"),
              s(:str, "        [e.class, e.name]\n"),
              s(:str, "      end\n"),
              s(:str, "    }\n")),
            s(:array,
              s(:str, "1"),
              s(:str, "NameError"),
              s(:str, "A")),
            s(:array),
            s(:lvar, :bug3422)))),
      s(:def, :test_const_get_inherited,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug3423,
            s(:str, "[ruby-core:30720]")),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "    module Foo; A = 1; end\n"),
              s(:str, "    class Object; include Foo; end\n"),
              s(:str, "    class Bar; include Foo; end\n"),
              s(:str, "\n"),
              s(:str, "    puts [Object, Bar].map {|klass|\n"),
              s(:str, "      begin\n"),
              s(:str, "        klass.const_get(:A, false)\n"),
              s(:str, "      rescue NameError => e\n"),
              s(:str, "        [e.class, e.name]\n"),
              s(:str, "      end\n"),
              s(:str, "    }\n")),
            s(:array,
              s(:str, "NameError"),
              s(:str, "A"),
              s(:str, "NameError"),
              s(:str, "A")),
            s(:array),
            s(:lvar, :bug3423)))),
      s(:def, :test_const_in_module,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug3423,
            s(:str, "[ruby-core:37698]")),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "    module LangModuleSpecInObject\n"),
              s(:str, "      module LangModuleTop\n"),
              s(:str, "      end\n"),
              s(:str, "    end\n"),
              s(:str, "    include LangModuleSpecInObject\n"),
              s(:str, "    module LangModuleTop\n"),
              s(:str, "    end\n"),
              s(:str, "    puts \"ok\" if LangModuleSpecInObject::LangModuleTop == LangModuleTop\n")),
            s(:array,
              s(:str, "ok")),
            s(:array),
            s(:lvar, :bug3423)),
          s(:lvasgn, :bug5264,
            s(:str, "[ruby-core:39227]")),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "    class A\n"),
              s(:str, "      class X; end\n"),
              s(:str, "    end\n"),
              s(:str, "    class B < A\n"),
              s(:str, "      module X; end\n"),
              s(:str, "    end\n")),
            s(:array),
            s(:array),
            s(:lvar, :bug5264)))),
      s(:def, :test_class_variable_get,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:send,
            s(:lvar, :c), :class_eval,
            s(:str, "@@foo = :foo")),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :c), :class_variable_get,
              s(:sym, :@@foo))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :class_variable_get,
              s(:sym, :@@bar))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :class_variable_get,
              s(:sym, :"@@"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :class_variable_get,
              s(:str, "@@"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :class_variable_get,
              s(:sym, :foo))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :class_variable_get,
              s(:str, "bar"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :class_variable_get,
              s(:int, 1))),
          s(:lvasgn, :n,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :n), :to_str,
            s(:args),
            s(:begin,
              s(:ivasgn, :@count,
                s(:if,
                  s(:defined?,
                    s(:ivar, :@count)),
                  s(:send,
                    s(:ivar, :@count), :+,
                    s(:int, 1)),
                  s(:int, 1))),
              s(:str, "@@foo"))),
          s(:defs,
            s(:lvar, :n), :count,
            s(:args),
            s(:ivar, :@count)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :c), :class_variable_get,
              s(:lvar, :n))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :n), :count)))),
      s(:def, :test_class_variable_set,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:send,
            s(:lvar, :c), :class_variable_set,
            s(:sym, :@@foo),
            s(:sym, :foo)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :c), :class_eval,
              s(:str, "@@foo"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :class_variable_set,
              s(:sym, :"@@"),
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :class_variable_set,
              s(:str, "@@"),
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :class_variable_set,
              s(:sym, :foo),
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :class_variable_set,
              s(:str, "bar"),
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :class_variable_set,
              s(:int, 1),
              s(:int, 1))),
          s(:lvasgn, :n,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :n), :to_str,
            s(:args),
            s(:begin,
              s(:ivasgn, :@count,
                s(:if,
                  s(:defined?,
                    s(:ivar, :@count)),
                  s(:send,
                    s(:ivar, :@count), :+,
                    s(:int, 1)),
                  s(:int, 1))),
              s(:str, "@@foo"))),
          s(:defs,
            s(:lvar, :n), :count,
            s(:args),
            s(:ivar, :@count)),
          s(:send,
            s(:lvar, :c), :class_variable_set,
            s(:lvar, :n),
            s(:sym, :bar)),
          s(:send, nil, :assert_equal,
            s(:sym, :bar),
            s(:send,
              s(:lvar, :c), :class_eval,
              s(:str, "@@foo"))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :n), :count)))),
      s(:def, :test_class_variable_defined,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:send,
            s(:lvar, :c), :class_eval,
            s(:str, "@@foo = :foo")),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :c), :class_variable_defined?,
              s(:sym, :@@foo))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :class_variable_defined?,
              s(:sym, :@@bar))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :class_variable_defined?,
              s(:sym, :"@@"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :class_variable_defined?,
              s(:str, "@@"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :class_variable_defined?,
              s(:sym, :foo))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :class_variable_defined?,
              s(:str, "bar"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :class_variable_defined?,
              s(:int, 1))),
          s(:lvasgn, :n,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :n), :to_str,
            s(:args),
            s(:begin,
              s(:ivasgn, :@count,
                s(:if,
                  s(:defined?,
                    s(:ivar, :@count)),
                  s(:send,
                    s(:ivar, :@count), :+,
                    s(:int, 1)),
                  s(:int, 1))),
              s(:str, "@@foo"))),
          s(:defs,
            s(:lvar, :n), :count,
            s(:args),
            s(:ivar, :@count)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :c), :class_variable_defined?,
              s(:lvar, :n))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :n), :count)))),
      s(:def, :test_remove_class_variable,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:send,
            s(:lvar, :c), :class_eval,
            s(:str, "@@foo = :foo")),
          s(:block,
            s(:send,
              s(:lvar, :c), :class_eval),
            s(:args),
            s(:send, nil, :remove_class_variable,
              s(:sym, :@@foo))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :class_variable_defined?,
              s(:sym, :@@foo))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :c), :class_eval),
              s(:args),
              s(:send, nil, :remove_class_variable,
                s(:sym, :@var)))))),
      s(:def, :test_export_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :m), :instance_eval),
              s(:args),
              s(:send, nil, :public,
                s(:sym, :foo)))))),
      s(:def, :test_attr,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "      $VERBOSE = true\n"),
              s(:str, "      c = Class.new\n"),
              s(:str, "      c.instance_eval do\n"),
              s(:str, "        private\n"),
              s(:str, "        attr_reader :foo\n"),
              s(:str, "      end\n"),
              s(:str, "      o = c.new\n"),
              s(:str, "      p(o.instance_eval { foo })\n")),
            s(:array,
              s(:str, "nil"))),
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :c), :instance_eval),
              s(:args),
              s(:send, nil, :attr_reader,
                s(:sym, :".")))))),
      s(:def, :test_undef,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :c), :instance_eval),
              s(:args),
              s(:send, nil, :undef_method,
                s(:sym, :foo)))),
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :m), :instance_eval),
              s(:args),
              s(:send, nil, :undef_method,
                s(:sym, :foo)))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:block,
              s(:send,
                s(:sclass,
                  s(:lvar, :o),
                  s(:self)), :instance_eval),
              s(:args),
              s(:send, nil, :undef_method,
                s(:sym, :foo)))),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "object_id"),
                s(:str, "__send__"),
                s(:str, "initialize")), :each),
            s(:args,
              s(:arg, :n)),
            s(:send, nil, :assert_in_out_err,
              s(:array),
              s(:dstr,
                s(:str, "        $VERBOSE = false\n"),
                s(:str, "        Class.new.instance_eval { undef_method(:"),
                s(:begin,
                  s(:lvar, :n)),
                s(:str, ") }\n")),
              s(:array),
              s(:regexp,
                s(:str, "warning: undefining `"),
                s(:begin,
                  s(:lvar, :n)),
                s(:str, "' may cause serious problems$"),
                s(:regopt)))))),
      s(:def, :test_alias,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :m), :class_eval),
              s(:args),
              s(:alias,
                s(:sym, :foo),
                s(:sym, :bar)))),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "      $VERBOSE = true\n"),
              s(:str, "      c = Class.new\n"),
              s(:str, "      c.class_eval do\n"),
              s(:str, "        def foo; 1; end\n"),
              s(:str, "        def bar; 2; end\n"),
              s(:str, "      end\n"),
              s(:str, "      c.class_eval { alias foo bar }\n"),
              s(:str, "      p c.new.foo\n")),
            s(:array,
              s(:str, "2")),
            s(:regexp,
              s(:str, "discarding old foo$"),
              s(:regopt))))),
      s(:def, :test_mod_constants,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:send,
            s(:lvar, :m), :const_set,
            s(:sym, :Foo),
            s(:sym, :foo)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :Foo)),
            s(:send,
              s(:lvar, :m), :constants,
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :Foo)),
            s(:send,
              s(:lvar, :m), :constants,
              s(:false))),
          s(:block,
            s(:send,
              s(:lvar, :m), :instance_eval),
            s(:args),
            s(:send, nil, :remove_const,
              s(:sym, :Foo))))),
      s(:class,
        s(:const, nil, :Bug9413), nil,
        s(:sclass,
          s(:self),
          s(:casgn, nil, :Foo,
            s(:sym, :foo)))),
      s(:def, :test_singleton_constants,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9413,
            s(:str, "[ruby-core:59763] [Bug #9413]")),
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Bug9413), :singleton_class)),
          s(:send, nil, :assert_include,
            s(:send,
              s(:lvar, :c), :constants,
              s(:true)),
            s(:sym, :Foo),
            s(:lvar, :bug9413)),
          s(:send, nil, :assert_include,
            s(:send,
              s(:lvar, :c), :constants,
              s(:false)),
            s(:sym, :Foo),
            s(:lvar, :bug9413)))),
      s(:def, :test_frozen_module,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:send,
            s(:lvar, :m), :freeze),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :m), :instance_eval),
              s(:args),
              s(:send, nil, :undef_method,
                s(:sym, :foo)))))),
      s(:def, :test_frozen_class,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:send,
            s(:lvar, :c), :freeze),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :c), :instance_eval),
              s(:args),
              s(:send, nil, :undef_method,
                s(:sym, :foo)))))),
      s(:def, :test_frozen_singleton_class,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass), :new)),
          s(:lvasgn, :c,
            s(:sclass,
              s(:lvar, :o),
              s(:self))),
          s(:send,
            s(:lvar, :c), :freeze),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :RuntimeError),
              s(:regexp,
                s(:str, "frozen"),
                s(:regopt))),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :c), :instance_eval),
              s(:args),
              s(:send, nil, :undef_method,
                s(:sym, :foo)))),
          s(:block,
            s(:send,
              s(:lvar, :klass), :class_eval),
            s(:args),
            s(:defs,
              s(:self), :foo,
              s(:args), nil)))),
      s(:def, :test_method_defined,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send,
              s(:lvar, :c), :class_eval),
            s(:args),
            s(:begin,
              s(:def, :foo,
                s(:args), nil),
              s(:def, :bar,
                s(:args), nil),
              s(:def, :baz,
                s(:args), nil),
              s(:send, nil, :public,
                s(:sym, :foo)),
              s(:send, nil, :protected,
                s(:sym, :bar)),
              s(:send, nil, :private,
                s(:sym, :baz)))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :c), :public_method_defined?,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :public_method_defined?,
              s(:sym, :bar))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :public_method_defined?,
              s(:sym, :baz))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :c), :public_method_defined?,
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :public_method_defined?,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :public_method_defined?,
              s(:str, "baz"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :protected_method_defined?,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :c), :protected_method_defined?,
              s(:sym, :bar))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :protected_method_defined?,
              s(:sym, :baz))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :protected_method_defined?,
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :c), :protected_method_defined?,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :protected_method_defined?,
              s(:str, "baz"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :private_method_defined?,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :private_method_defined?,
              s(:sym, :bar))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :c), :private_method_defined?,
              s(:sym, :baz))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :private_method_defined?,
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :private_method_defined?,
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :c), :private_method_defined?,
              s(:str, "baz"))))),
      s(:def, :test_top_public_private,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array),
          s(:dstr,
            s(:str, "      private\n"),
            s(:str, "      def foo; :foo; end\n"),
            s(:str, "      public\n"),
            s(:str, "      def bar; :bar; end\n"),
            s(:str, "      p self.private_methods.grep(/^foo$|^bar$/)\n"),
            s(:str, "      p self.methods.grep(/^foo$|^bar$/)\n")),
          s(:array,
            s(:str, "[:foo]"),
            s(:str, "[:bar]")),
          s(:array))),
      s(:def, :test_append_features,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:nil)),
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:block,
            s(:send,
              s(:lvar, :m), :module_eval),
            s(:args),
            s(:def, :foo,
              s(:args),
              s(:sym, :foo))),
          s(:block,
            s(:send,
              s(:sclass,
                s(:lvar, :m),
                s(:self)), :class_eval),
            s(:args),
            s(:block,
              s(:send, nil, :define_method,
                s(:sym, :append_features)),
              s(:args,
                s(:arg, :mod)),
              s(:begin,
                s(:lvasgn, :t,
                  s(:lvar, :mod)),
                s(:super,
                  s(:lvar, :mod))))),
          s(:lvasgn, :m2,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:block,
            s(:send,
              s(:lvar, :m2), :module_eval),
            s(:args),
            s(:send, nil, :include,
              s(:lvar, :m))),
          s(:send, nil, :assert_equal,
            s(:lvar, :m2),
            s(:lvar, :t)),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send,
            s(:lvar, :o), :extend,
            s(:lvar, :m2)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :o), :respond_to?,
              s(:sym, :foo))))),
      s(:def, :test_append_features_raise,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:block,
            s(:send,
              s(:lvar, :m), :module_eval),
            s(:args),
            s(:def, :foo,
              s(:args),
              s(:sym, :foo))),
          s(:block,
            s(:send,
              s(:sclass,
                s(:lvar, :m),
                s(:self)), :class_eval),
            s(:args),
            s(:block,
              s(:send, nil, :define_method,
                s(:sym, :append_features)),
              s(:args,
                s(:arg, :mod)),
              s(:send, nil, :raise))),
          s(:lvasgn, :m2,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :m2), :module_eval),
              s(:args),
              s(:send, nil, :include,
                s(:lvar, :m)))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send,
            s(:lvar, :o), :extend,
            s(:lvar, :m2)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :o), :respond_to?,
              s(:sym, :foo))))),
      s(:def, :test_append_features_type_error,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Module), :new), :instance_eval),
            s(:args),
            s(:send, nil, :append_features,
              s(:int, 1))))),
      s(:def, :test_included,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:block,
            s(:send,
              s(:lvar, :m), :module_eval),
            s(:args),
            s(:def, :foo,
              s(:args),
              s(:sym, :foo))),
          s(:block,
            s(:send,
              s(:sclass,
                s(:lvar, :m),
                s(:self)), :class_eval),
            s(:args),
            s(:block,
              s(:send, nil, :define_method,
                s(:sym, :included)),
              s(:args,
                s(:arg, :mod)),
              s(:send, nil, :raise))),
          s(:lvasgn, :m2,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :m2), :module_eval),
              s(:args),
              s(:send, nil, :include,
                s(:lvar, :m)))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send,
            s(:lvar, :o), :extend,
            s(:lvar, :m2)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :o), :respond_to?,
              s(:sym, :foo))))),
      s(:def, :test_cyclic_include,
        s(:args),
        s(:begin,
          s(:lvasgn, :m1,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:lvasgn, :m2,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:block,
            s(:send,
              s(:lvar, :m1), :instance_eval),
            s(:args),
            s(:send, nil, :include,
              s(:lvar, :m2))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :m2), :instance_eval),
              s(:args),
              s(:send, nil, :include,
                s(:lvar, :m1)))))),
      s(:def, :test_include_p,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:lvasgn, :c1,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send,
              s(:lvar, :c1), :instance_eval),
            s(:args),
            s(:send, nil, :include,
              s(:lvar, :m))),
          s(:lvasgn, :c2,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :c1))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :c1), :include?,
              s(:lvar, :m))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :c2), :include?,
              s(:lvar, :m))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :m), :include?,
              s(:lvar, :m))))),
      s(:def, :test_send,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :AClass), :new)),
          s(:send, nil, :assert_equal,
            s(:sym, :aClass),
            s(:send,
              s(:lvar, :a), :__send__,
              s(:sym, :aClass))),
          s(:send, nil, :assert_equal,
            s(:sym, :aClass1),
            s(:send,
              s(:lvar, :a), :__send__,
              s(:sym, :aClass1))),
          s(:send, nil, :assert_equal,
            s(:sym, :aClass2),
            s(:send,
              s(:lvar, :a), :__send__,
              s(:sym, :aClass2))),
          s(:lvasgn, :b,
            s(:send,
              s(:const, nil, :BClass), :new)),
          s(:send, nil, :assert_equal,
            s(:sym, :aClass),
            s(:send,
              s(:lvar, :b), :__send__,
              s(:sym, :aClass))),
          s(:send, nil, :assert_equal,
            s(:sym, :aClass1),
            s(:send,
              s(:lvar, :b), :__send__,
              s(:sym, :aClass1))),
          s(:send, nil, :assert_equal,
            s(:sym, :aClass2),
            s(:send,
              s(:lvar, :b), :__send__,
              s(:sym, :aClass2))),
          s(:send, nil, :assert_equal,
            s(:sym, :bClass1),
            s(:send,
              s(:lvar, :b), :__send__,
              s(:sym, :bClass1))),
          s(:send, nil, :assert_equal,
            s(:sym, :bClass2),
            s(:send,
              s(:lvar, :b), :__send__,
              s(:sym, :bClass2))),
          s(:send, nil, :assert_equal,
            s(:sym, :bClass3),
            s(:send,
              s(:lvar, :b), :__send__,
              s(:sym, :bClass3))))),
      s(:def, :test_nonascii_name,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :eval,
              s(:str, "class ::Cß; self; end"))),
          s(:send, nil, :assert_equal,
            s(:str, "Cß"),
            s(:send,
              s(:lvar, :c), :name),
            s(:str, "[ruby-core:24600]")),
          s(:lvasgn, :c,
            s(:send, nil, :eval,
              s(:str, "class Cß; self; end"))),
          s(:send, nil, :assert_equal,
            s(:str, "TestModule::Cß"),
            s(:send,
              s(:lvar, :c), :name),
            s(:str, "[ruby-core:24600]")),
          s(:lvasgn, :c,
            s(:send,
              s(:send,
                s(:const, nil, :Module), :new), :module_eval,
              s(:str, "class Xß < Module; self; end"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "::X\\u{df}:"),
              s(:regopt)),
            s(:send,
              s(:send,
                s(:lvar, :c), :new), :to_s)))),
      s(:def, :test_method_added,
        s(:args),
        s(:begin,
          s(:lvasgn, :memo,
            s(:array)),
          s(:lvasgn, :mod,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:begin,
                s(:lvasgn, :mod,
                  s(:self)),
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:sclass,
                        s(:self),
                        s(:self))), :class_eval),
                  s(:args),
                  s(:block,
                    s(:send, nil, :define_method,
                      s(:sym, :method_added)),
                    s(:args,
                      s(:arg, :sym)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :memo), :<<,
                        s(:lvar, :sym)),
                      s(:send,
                        s(:lvar, :memo), :<<,
                        s(:send,
                          s(:lvar, :mod), :instance_methods,
                          s(:false))),
                      s(:send,
                        s(:lvar, :memo), :<<,
                        s(:begin,
                          s(:rescue,
                            s(:send,
                              s(:lvar, :mod), :instance_method,
                              s(:lvar, :sym)),
                            s(:resbody, nil, nil,
                              s(:nil)), nil)))))),
                s(:def, :f,
                  s(:args), nil),
                s(:alias,
                  s(:sym, :g),
                  s(:sym, :f)),
                s(:send, nil, :attr_reader,
                  s(:sym, :a)),
                s(:send, nil, :attr_writer,
                  s(:sym, :a))))),
          s(:send, nil, :assert_equal,
            s(:sym, :f),
            s(:send,
              s(:lvar, :memo), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :f)),
            s(:send,
              s(:lvar, :memo), :shift),
            s(:str, "[ruby-core:25536]")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :mod), :instance_method,
              s(:sym, :f)),
            s(:send,
              s(:lvar, :memo), :shift)),
          s(:send, nil, :assert_equal,
            s(:sym, :g),
            s(:send,
              s(:lvar, :memo), :shift)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:sym, :f),
                s(:sym, :g)), :sort),
            s(:send,
              s(:send,
                s(:lvar, :memo), :shift), :sort)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :mod), :instance_method,
              s(:sym, :f)),
            s(:send,
              s(:lvar, :memo), :shift)),
          s(:send, nil, :assert_equal,
            s(:sym, :a),
            s(:send,
              s(:lvar, :memo), :shift)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:sym, :f),
                s(:sym, :g),
                s(:sym, :a)), :sort),
            s(:send,
              s(:send,
                s(:lvar, :memo), :shift), :sort)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :mod), :instance_method,
              s(:sym, :a)),
            s(:send,
              s(:lvar, :memo), :shift)),
          s(:send, nil, :assert_equal,
            s(:sym, :a=),
            s(:send,
              s(:lvar, :memo), :shift)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:sym, :f),
                s(:sym, :g),
                s(:sym, :a),
                s(:sym, :a=)), :sort),
            s(:send,
              s(:send,
                s(:lvar, :memo), :shift), :sort)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :mod), :instance_method,
              s(:sym, :a=)),
            s(:send,
              s(:lvar, :memo), :shift)))),
      s(:def, :test_method_undefined,
        s(:args),
        s(:begin,
          s(:lvasgn, :added,
            s(:array)),
          s(:lvasgn, :undefed,
            s(:array)),
          s(:lvasgn, :removed,
            s(:array)),
          s(:lvasgn, :mod,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:begin,
                s(:lvasgn, :mod,
                  s(:self)),
                s(:def, :f,
                  s(:args), nil),
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:sclass,
                        s(:self),
                        s(:self))), :class_eval),
                  s(:args),
                  s(:begin,
                    s(:block,
                      s(:send, nil, :define_method,
                        s(:sym, :method_added)),
                      s(:args,
                        s(:arg, :sym)),
                      s(:send,
                        s(:lvar, :added), :<<,
                        s(:lvar, :sym))),
                    s(:block,
                      s(:send, nil, :define_method,
                        s(:sym, :method_undefined)),
                      s(:args,
                        s(:arg, :sym)),
                      s(:send,
                        s(:lvar, :undefed), :<<,
                        s(:lvar, :sym))),
                    s(:block,
                      s(:send, nil, :define_method,
                        s(:sym, :method_removed)),
                      s(:args,
                        s(:arg, :sym)),
                      s(:send,
                        s(:lvar, :removed), :<<,
                        s(:lvar, :sym)))))))),
          s(:send, nil, :assert_method_defined?,
            s(:lvar, :mod),
            s(:sym, :f)),
          s(:block,
            s(:send,
              s(:lvar, :mod), :module_eval),
            s(:args),
            s(:undef,
              s(:sym, :f))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:lvar, :added)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :f)),
            s(:lvar, :undefed)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:lvar, :removed)))),
      s(:def, :test_method_removed,
        s(:args),
        s(:begin,
          s(:lvasgn, :added,
            s(:array)),
          s(:lvasgn, :undefed,
            s(:array)),
          s(:lvasgn, :removed,
            s(:array)),
          s(:lvasgn, :mod,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:begin,
                s(:lvasgn, :mod,
                  s(:self)),
                s(:def, :f,
                  s(:args), nil),
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:sclass,
                        s(:self),
                        s(:self))), :class_eval),
                  s(:args),
                  s(:begin,
                    s(:block,
                      s(:send, nil, :define_method,
                        s(:sym, :method_added)),
                      s(:args,
                        s(:arg, :sym)),
                      s(:send,
                        s(:lvar, :added), :<<,
                        s(:lvar, :sym))),
                    s(:block,
                      s(:send, nil, :define_method,
                        s(:sym, :method_undefined)),
                      s(:args,
                        s(:arg, :sym)),
                      s(:send,
                        s(:lvar, :undefed), :<<,
                        s(:lvar, :sym))),
                    s(:block,
                      s(:send, nil, :define_method,
                        s(:sym, :method_removed)),
                      s(:args,
                        s(:arg, :sym)),
                      s(:send,
                        s(:lvar, :removed), :<<,
                        s(:lvar, :sym)))))))),
          s(:send, nil, :assert_method_defined?,
            s(:lvar, :mod),
            s(:sym, :f)),
          s(:block,
            s(:send,
              s(:lvar, :mod), :module_eval),
            s(:args),
            s(:send, nil, :remove_method,
              s(:sym, :f))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:lvar, :added)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:lvar, :undefed)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :f)),
            s(:lvar, :removed)))),
      s(:def, :test_method_redefinition,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature2155,
            s(:str, "[ruby-dev:39400]")),
          s(:lvasgn, :line,
            s(:send,
              s(:int, 1228), :+,
              s(:int, 4))),
          s(:lvasgn, :stderr,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :verbose_warning),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :Module), :new),
                s(:args),
                s(:begin,
                  s(:def, :foo,
                    s(:args), nil),
                  s(:def, :foo,
                    s(:args), nil))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, ":"),
              s(:begin,
                s(:lvar, :line)),
              s(:str, ": warning: method redefined; discarding old foo"),
              s(:regopt)),
            s(:lvar, :stderr)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, ":"),
              s(:begin,
                s(:send,
                  s(:lvar, :line), :-,
                  s(:int, 1))),
              s(:str, ": warning: previous definition of foo"),
              s(:regopt)),
            s(:lvar, :stderr),
            s(:lvar, :feature2155)),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:begin,
                s(:def, :foo,
                  s(:args), nil),
                s(:alias,
                  s(:sym, :bar),
                  s(:sym, :foo)),
                s(:def, :foo,
                  s(:args), nil)))),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:begin,
                s(:def, :foo,
                  s(:args), nil),
                s(:alias,
                  s(:sym, :bar),
                  s(:sym, :foo)),
                s(:alias,
                  s(:sym, :bar),
                  s(:sym, :foo))))),
          s(:lvasgn, :line,
            s(:send,
              s(:int, 1254), :+,
              s(:int, 4))),
          s(:lvasgn, :stderr,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :verbose_warning),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :Module), :new),
                s(:args),
                s(:begin,
                  s(:block,
                    s(:send, nil, :define_method,
                      s(:sym, :foo)),
                    s(:args), nil),
                  s(:def, :foo,
                    s(:args), nil))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, ":"),
              s(:begin,
                s(:lvar, :line)),
              s(:str, ": warning: method redefined; discarding old foo"),
              s(:regopt)),
            s(:lvar, :stderr)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, ":"),
              s(:begin,
                s(:send,
                  s(:lvar, :line), :-,
                  s(:int, 1))),
              s(:str, ": warning: previous definition of foo"),
              s(:regopt)),
            s(:lvar, :stderr),
            s(:lvar, :feature2155)),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:begin,
                s(:block,
                  s(:send, nil, :define_method,
                    s(:sym, :foo)),
                  s(:args), nil),
                s(:alias,
                  s(:sym, :bar),
                  s(:sym, :foo)),
                s(:alias,
                  s(:sym, :bar),
                  s(:sym, :foo))))),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, ""),
              s(:str, "[ruby-dev:39397]")),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:begin,
                s(:send, nil, :module_function),
                s(:def, :foo,
                  s(:args), nil),
                s(:send, nil, :module_function,
                  s(:sym, :foo))))),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:begin,
                s(:def, :foo,
                  s(:args), nil),
                s(:undef,
                  s(:sym, :foo))))),
          s(:lvasgn, :stderr,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :verbose_warning),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :Module), :new),
                s(:args),
                s(:begin,
                  s(:def, :foo,
                    s(:args), nil),
                  s(:lvasgn, :mod,
                    s(:self)),
                  s(:lvasgn, :c,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Class), :new),
                      s(:args),
                      s(:send, nil, :include,
                        s(:lvar, :mod)))),
                  s(:send,
                    s(:send,
                      s(:lvar, :c), :new), :foo),
                  s(:def, :foo,
                    s(:args), nil))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, ": warning: method redefined; discarding old foo"),
              s(:regopt)),
            s(:lvar, :stderr)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, ": warning: previous definition of foo"),
              s(:regopt)),
            s(:lvar, :stderr)))),
      s(:def, :test_protected_singleton_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:lvasgn, :x,
            s(:send,
              s(:lvar, :klass), :new)),
          s(:sclass,
            s(:lvar, :x),
            s(:begin,
              s(:send, nil, :protected),
              s(:def, :foo,
                s(:args), nil))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:lvar, :x), :foo)),
          s(:block,
            s(:send,
              s(:lvar, :klass), :send,
              s(:sym, :define_method),
              s(:sym, :bar)),
            s(:args),
            s(:send,
              s(:lvar, :x), :foo)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:lvar, :x), :bar)),
          s(:lvasgn, :y,
            s(:send,
              s(:lvar, :klass), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:lvar, :y), :bar)))),
      s(:def, :test_uninitialized_toplevel_constant,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug3123,
            s(:str, "[ruby-dev:40951]")),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :NameError)),
              s(:args),
              s(:send, nil, :eval,
                s(:str, "Bug3123"),
                s(:const, nil, :TOPLEVEL_BINDING)))),
          s(:send, nil, :assert_not_match,
            s(:regexp,
              s(:str, "Object::"),
              s(:regopt)),
            s(:send,
              s(:lvar, :e), :message),
            s(:lvar, :bug3123)))),
      s(:def, :test_attr_inherited_visibility,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug3406,
            s(:str, "[ruby-core:30638]")),
          s(:lvasgn, :c,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new),
                s(:args),
                s(:begin,
                  s(:sclass,
                    s(:self),
                    s(:begin,
                      s(:send, nil, :private),
                      s(:def, :attr_accessor,
                        s(:args,
                          s(:restarg)),
                        s(:zsuper)))),
                  s(:send, nil, :attr_accessor,
                    s(:sym, :x)))), :new)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:lvar, :bug3406)),
            s(:args),
            s(:send,
              s(:lvar, :c), :x=,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :c), :x),
            s(:lvar, :bug3406)))),
      s(:def, :test_attr_writer_with_no_arguments,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8540,
            s(:str, "[ruby-core:55543]")),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:send, nil, :attr_writer,
                s(:sym, :foo)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError),
              s(:lvar, :bug8540)),
            s(:args),
            s(:send,
              s(:send,
                s(:lvar, :c), :new), :send,
              s(:sym, :foo=))))),
      s(:def, :test_private_constant,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:send,
            s(:lvar, :c), :const_set,
            s(:sym, :FOO),
            s(:str, "foo")),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:const,
              s(:lvar, :c), :FOO)),
          s(:send,
            s(:lvar, :c), :private_constant,
            s(:sym, :FOO)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:const,
              s(:lvar, :c), :FOO)),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:lvar, :c), :class_eval,
              s(:str, "FOO"))),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:lvar, :c), :const_get,
              s(:str, "FOO"))),
          s(:masgn,
            s(:mlhs,
              s(:gvasgn, :$VERBOSE),
              s(:lvasgn, :verbose)),
            s(:array,
              s(:nil),
              s(:gvar, :$VERBOSE))),
          s(:send,
            s(:lvar, :c), :const_set,
            s(:sym, :FOO),
            s(:str, "foo")),
          s(:gvasgn, :$VERBOSE,
            s(:lvar, :verbose)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:const,
              s(:lvar, :c), :FOO)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :NameError),
              s(:regexp,
                s(:begin,
                  s(:lvar, :c)),
                s(:str, "::FOO"),
                s(:regopt))),
            s(:args),
            s(:const,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:lvar, :c)), :FOO)))),
      s(:def, :test_private_constant2,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:send,
            s(:lvar, :c), :const_set,
            s(:sym, :FOO),
            s(:str, "foo")),
          s(:send,
            s(:lvar, :c), :const_set,
            s(:sym, :BAR),
            s(:str, "bar")),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:const,
              s(:lvar, :c), :FOO)),
          s(:send, nil, :assert_equal,
            s(:str, "bar"),
            s(:const,
              s(:lvar, :c), :BAR)),
          s(:send,
            s(:lvar, :c), :private_constant,
            s(:sym, :FOO),
            s(:sym, :BAR)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:const,
              s(:lvar, :c), :FOO)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:const,
              s(:lvar, :c), :BAR)),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:lvar, :c), :class_eval,
              s(:str, "FOO"))),
          s(:send, nil, :assert_equal,
            s(:str, "bar"),
            s(:send,
              s(:lvar, :c), :class_eval,
              s(:str, "BAR"))))),
      s(:def, :test_private_constant_with_no_args,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array),
          s(:dstr,
            s(:str, "      $-w = true\n"),
            s(:str, "      class X\n"),
            s(:str, "        private_constant\n"),
            s(:str, "      end\n")),
          s(:array),
          s(:array,
            s(:str, "-:3: warning: private_constant with no argument is just ignored")))),
      s(:class,
        s(:const, nil, :PrivateClass), nil, nil),
      s(:send, nil, :private_constant,
        s(:sym, :PrivateClass)),
      s(:def, :test_define_module_under_private_constant,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "class TestModule::PrivateClass; end"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "module TestModule::PrivateClass::TestModule; end"))),
          s(:send, nil, :eval,
            s(:str, "class PrivateClass; end")),
          s(:send, nil, :eval,
            s(:str, "module PrivateClass::TestModule; end")),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Module),
            s(:const,
              s(:const, nil, :PrivateClass), :TestModule)),
          s(:block,
            s(:send,
              s(:const, nil, :PrivateClass), :class_eval),
            s(:args),
            s(:send, nil, :remove_const,
              s(:sym, :TestModule))))),
      s(:def, :test_public_constant,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:send,
            s(:lvar, :c), :const_set,
            s(:sym, :FOO),
            s(:str, "foo")),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:const,
              s(:lvar, :c), :FOO)),
          s(:send,
            s(:lvar, :c), :private_constant,
            s(:sym, :FOO)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:const,
              s(:lvar, :c), :FOO)),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:lvar, :c), :class_eval,
              s(:str, "FOO"))),
          s(:send,
            s(:lvar, :c), :public_constant,
            s(:sym, :FOO)),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:const,
              s(:lvar, :c), :FOO)))),
      s(:def, :test_deprecate_constant,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:send,
            s(:lvar, :c), :const_set,
            s(:sym, :FOO),
            s(:str, "foo")),
          s(:send,
            s(:lvar, :c), :deprecate_constant,
            s(:sym, :FOO)),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:regexp,
                s(:str, "deprecated"),
                s(:regopt))),
            s(:args),
            s(:const,
              s(:lvar, :c), :FOO)),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:regexp,
                s(:begin,
                  s(:lvar, :c)),
                s(:str, "::FOO is deprecated"),
                s(:regopt))),
            s(:args),
            s(:const,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:lvar, :c)), :FOO)),
          s(:lvasgn, :bug12382,
            s(:str, "[ruby-core:75505] [Bug #12382]")),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:regexp,
                s(:str, "deprecated"),
                s(:regopt)),
              s(:lvar, :bug12382)),
            s(:args),
            s(:send,
              s(:lvar, :c), :class_eval,
              s(:str, "FOO"))))),
      s(:def, :test_constants_with_private_constant,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_include,
            s(:send,
              s(:const,
                s(:cbase), :TestModule), :constants),
            s(:sym, :PrivateClass)),
          s(:send, nil, :assert_not_include,
            s(:send,
              s(:const,
                s(:cbase), :TestModule), :constants,
              s(:true)),
            s(:sym, :PrivateClass)),
          s(:send, nil, :assert_not_include,
            s(:send,
              s(:const,
                s(:cbase), :TestModule), :constants,
              s(:false)),
            s(:sym, :PrivateClass)))),
      s(:def, :test_toplevel_private_constant,
        s(:args),
        s(:begin,
          s(:lvasgn, :src,
            s(:dstr,
              s(:str, "      class Object\n"),
              s(:str, "        private_constant :Object\n"),
              s(:str, "      end\n"),
              s(:str, "      p Object\n"),
              s(:str, "      begin\n"),
              s(:str, "        p ::Object\n"),
              s(:str, "      rescue\n"),
              s(:str, "        p :ok\n"),
              s(:str, "      end\n"))),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:lvar, :src),
            s(:array,
              s(:str, "Object"),
              s(:str, ":ok")),
            s(:array)))),
      s(:def, :test_private_constants_clear_inlinecache,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5702,
            s(:str, "[ruby-dev:44929]")),
          s(:lvasgn, :src,
            s(:dstr,
              s(:str, "    class A\n"),
              s(:str, "      C = :Const\n"),
              s(:str, "      def self.get_C\n"),
              s(:str, "        A::C\n"),
              s(:str, "      end\n"),
              s(:str, "      # fill cache\n"),
              s(:str, "      A.get_C\n"),
              s(:str, "      private_constant :C, :D rescue nil\n"),
              s(:str, "      begin\n"),
              s(:str, "        A.get_C\n"),
              s(:str, "      rescue NameError\n"),
              s(:str, "        puts \"A.get_C\"\n"),
              s(:str, "      end\n"),
              s(:str, "    end\n"))),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:lvar, :src),
            s(:array,
              s(:str, "A.get_C")),
            s(:array),
            s(:lvar, :bug5702)))),
      s(:def, :test_constant_lookup_in_method_defined_by_class_eval,
        s(:args),
        s(:begin,
          s(:lvasgn, :src,
            s(:dstr,
              s(:str, "      class A\n"),
              s(:str, "        B = 42\n"),
              s(:str, "      end\n"),
              s(:str, "\n"),
              s(:str, "      A.class_eval do\n"),
              s(:str, "        def self.f\n"),
              s(:str, "          B\n"),
              s(:str, "        end\n"),
              s(:str, "\n"),
              s(:str, "        def f\n"),
              s(:str, "          B\n"),
              s(:str, "        end\n"),
              s(:str, "      end\n"),
              s(:str, "\n"),
              s(:str, "      begin\n"),
              s(:str, "        A.f\n"),
              s(:str, "      rescue NameError\n"),
              s(:str, "        puts \"A.f\"\n"),
              s(:str, "      end\n"),
              s(:str, "      begin\n"),
              s(:str, "        A.new.f\n"),
              s(:str, "      rescue NameError\n"),
              s(:str, "        puts \"A.new.f\"\n"),
              s(:str, "      end\n"))),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:lvar, :src),
            s(:array,
              s(:str, "A.f"),
              s(:str, "A.new.f")),
            s(:array)))),
      s(:def, :test_constant_lookup_in_toplevel_class_eval,
        s(:args),
        s(:begin,
          s(:lvasgn, :src,
            s(:dstr,
              s(:str, "      module X\n"),
              s(:str, "        A = 123\n"),
              s(:str, "      end\n"),
              s(:str, "      begin\n"),
              s(:str, "        X.class_eval { A }\n"),
              s(:str, "      rescue NameError => e\n"),
              s(:str, "        puts e\n"),
              s(:str, "      end\n"))),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:lvar, :src),
            s(:array,
              s(:str, "uninitialized constant A")),
            s(:array)))),
      s(:def, :test_constant_lookup_in_module_in_class_eval,
        s(:args),
        s(:begin,
          s(:lvasgn, :src,
            s(:dstr,
              s(:str, "      class A\n"),
              s(:str, "        B = 42\n"),
              s(:str, "      end\n"),
              s(:str, "\n"),
              s(:str, "      A.class_eval do\n"),
              s(:str, "        module C\n"),
              s(:str, "          begin\n"),
              s(:str, "            B\n"),
              s(:str, "          rescue NameError\n"),
              s(:str, "            puts \"NameError\"\n"),
              s(:str, "          end\n"),
              s(:str, "        end\n"),
              s(:str, "      end\n"))),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:lvar, :src),
            s(:array,
              s(:str, "NameError")),
            s(:array)))),
      s(:module,
        s(:const, nil, :M0),
        s(:def, :m1,
          s(:args),
          s(:array,
            s(:sym, :M0)))),
      s(:module,
        s(:const, nil, :M1),
        s(:def, :m1,
          s(:args),
          s(:array,
            s(:sym, :M1),
            s(:splat,
              s(:zsuper))))),
      s(:module,
        s(:const, nil, :M2),
        s(:def, :m1,
          s(:args),
          s(:array,
            s(:sym, :M2),
            s(:splat,
              s(:zsuper))))),
      s(:casgn, nil, :M3,
        s(:block,
          s(:send,
            s(:const, nil, :Module), :new),
          s(:args),
          s(:def, :m1,
            s(:args),
            s(:array,
              s(:sym, :M3),
              s(:splat,
                s(:zsuper)))))),
      s(:module,
        s(:const, nil, :M4),
        s(:def, :m1,
          s(:args),
          s(:array,
            s(:sym, :M4),
            s(:splat,
              s(:zsuper))))),
      s(:class,
        s(:const, nil, :C), nil,
        s(:def, :m1,
          s(:args), nil)),
      s(:class,
        s(:const, nil, :C0),
        s(:const, nil, :C),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :M0)),
          s(:send, nil, :prepend,
            s(:const, nil, :M1)),
          s(:def, :m1,
            s(:args),
            s(:array,
              s(:sym, :C0),
              s(:splat,
                s(:zsuper)))))),
      s(:class,
        s(:const, nil, :C1),
        s(:const, nil, :C0),
        s(:begin,
          s(:send, nil, :prepend,
            s(:const, nil, :M2),
            s(:const, nil, :M3)),
          s(:send, nil, :include,
            s(:const, nil, :M4)),
          s(:def, :m1,
            s(:args),
            s(:array,
              s(:sym, :C1),
              s(:splat,
                s(:zsuper)))))),
      s(:def, :test_prepend,
        s(:args),
        s(:begin,
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :C0), :new)),
          s(:lvasgn, :expected,
            s(:array,
              s(:sym, :M1),
              s(:sym, :C0),
              s(:sym, :M0))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :obj), :m1)),
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :C1), :new)),
          s(:lvasgn, :expected,
            s(:array,
              s(:sym, :M2),
              s(:sym, :M3),
              s(:sym, :C1),
              s(:sym, :M4),
              s(:sym, :M1),
              s(:sym, :C0),
              s(:sym, :M0))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :obj), :m1)))),
      s(:def, :test_public_prepend,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised,
            s(:str, "#8846")),
          s(:args),
          s(:send,
            s(:send,
              s(:const, nil, :Class), :new), :prepend,
            s(:send,
              s(:const, nil, :Module), :new)))),
      s(:def, :test_prepend_inheritance,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6654,
            s(:str, "[ruby-core:45914]")),
          s(:lvasgn, :a,
            s(:send, nil, :labeled_module,
              s(:str, "a"))),
          s(:lvasgn, :b,
            s(:block,
              s(:send, nil, :labeled_module,
                s(:str, "b")),
              s(:args),
              s(:send, nil, :include,
                s(:lvar, :a)))),
          s(:lvasgn, :c,
            s(:block,
              s(:send, nil, :labeled_class,
                s(:str, "c")),
              s(:args),
              s(:send, nil, :prepend,
                s(:lvar, :b)))),
          s(:send, nil, :assert_operator,
            s(:lvar, :c),
            s(:sym, :<),
            s(:lvar, :b),
            s(:lvar, :bug6654)),
          s(:send, nil, :assert_operator,
            s(:lvar, :c),
            s(:sym, :<),
            s(:lvar, :a),
            s(:lvar, :bug6654)),
          s(:lvasgn, :bug8357,
            s(:str, "[ruby-core:54736] [Bug #8357]")),
          s(:lvasgn, :b,
            s(:block,
              s(:send, nil, :labeled_module,
                s(:str, "b")),
              s(:args),
              s(:send, nil, :prepend,
                s(:lvar, :a)))),
          s(:lvasgn, :c,
            s(:block,
              s(:send, nil, :labeled_class,
                s(:str, "c")),
              s(:args),
              s(:send, nil, :include,
                s(:lvar, :b)))),
          s(:send, nil, :assert_operator,
            s(:lvar, :c),
            s(:sym, :<),
            s(:lvar, :b),
            s(:lvar, :bug8357)),
          s(:send, nil, :assert_operator,
            s(:lvar, :c),
            s(:sym, :<),
            s(:lvar, :a),
            s(:lvar, :bug8357)),
          s(:lvasgn, :bug8357,
            s(:str, "[ruby-core:54742] [Bug #8357]")),
          s(:send, nil, :assert_kind_of,
            s(:lvar, :b),
            s(:send,
              s(:lvar, :c), :new),
            s(:lvar, :bug8357)))),
      s(:def, :test_prepend_instance_methods,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6655,
            s(:str, "[ruby-core:45915]")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Object), :instance_methods),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new),
                s(:args),
                s(:send, nil, :prepend,
                  s(:send,
                    s(:const, nil, :Module), :new))), :instance_methods),
            s(:lvar, :bug6655)))),
      s(:def, :test_prepend_singleton_methods,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :o), :singleton_class), :class_eval),
            s(:args),
            s(:send, nil, :prepend,
              s(:send,
                s(:const, nil, :Module), :new))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :o), :singleton_methods)))),
      s(:def, :test_prepend_remove_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:send, nil, :prepend,
                s(:block,
                  s(:send,
                    s(:const, nil, :Module), :new),
                  s(:args),
                  s(:def, :foo,
                    s(:args), nil))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :c), :class_eval),
              s(:args),
              s(:send, nil, :remove_method,
                s(:sym, :foo)))),
          s(:block,
            s(:send,
              s(:lvar, :c), :class_eval),
            s(:args),
            s(:def, :foo,
              s(:args), nil)),
          s(:lvasgn, :removed,
            s(:nil)),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :c), :singleton_class), :class_eval),
            s(:args),
            s(:block,
              s(:send, nil, :define_method,
                s(:sym, :method_removed)),
              s(:args,
                s(:arg, :id)),
              s(:lvasgn, :removed,
                s(:lvar, :id)))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :NoMethodError),
              s(:const, nil, :NameError),
              s(:str, "[Bug #7843]")),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :c), :class_eval),
              s(:args),
              s(:send, nil, :remove_method,
                s(:sym, :foo)))),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:lvar, :removed)))),
      s(:def, :test_prepend_class_ancestors,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6658,
            s(:str, "[ruby-core:45919]")),
          s(:lvasgn, :m,
            s(:send, nil, :labeled_module,
              s(:str, "m"))),
          s(:lvasgn, :c,
            s(:block,
              s(:send, nil, :labeled_class,
                s(:str, "c")),
              s(:args),
              s(:send, nil, :prepend,
                s(:lvar, :m)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :m),
              s(:lvar, :c)),
            s(:send,
              s(:send,
                s(:lvar, :c), :ancestors), :[],
              s(:int, 0),
              s(:int, 2)),
            s(:lvar, :bug6658)),
          s(:lvasgn, :bug6662,
            s(:str, "[ruby-dev:45868]")),
          s(:lvasgn, :c2,
            s(:send, nil, :labeled_class,
              s(:str, "c2"),
              s(:lvar, :c))),
          s(:lvasgn, :anc,
            s(:send,
              s(:lvar, :c2), :ancestors)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :c2),
              s(:lvar, :m),
              s(:lvar, :c),
              s(:const, nil, :Object)),
            s(:send,
              s(:lvar, :anc), :[],
              s(:irange,
                s(:int, 0),
                s(:send,
                  s(:lvar, :anc), :index,
                  s(:const, nil, :Object)))),
            s(:lvar, :bug6662)))),
      s(:def, :test_prepend_module_ancestors,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6659,
            s(:str, "[ruby-dev:45861]")),
          s(:lvasgn, :m0,
            s(:block,
              s(:send, nil, :labeled_module,
                s(:str, "m0")),
              s(:args),
              s(:def, :x,
                s(:args),
                s(:array,
                  s(:sym, :m0),
                  s(:splat,
                    s(:zsuper)))))),
          s(:lvasgn, :m1,
            s(:block,
              s(:send, nil, :labeled_module,
                s(:str, "m1")),
              s(:args),
              s(:begin,
                s(:def, :x,
                  s(:args),
                  s(:array,
                    s(:sym, :m1),
                    s(:splat,
                      s(:zsuper)))),
                s(:send, nil, :prepend,
                  s(:lvar, :m0))))),
          s(:lvasgn, :m2,
            s(:block,
              s(:send, nil, :labeled_module,
                s(:str, "m2")),
              s(:args),
              s(:begin,
                s(:def, :x,
                  s(:args),
                  s(:array,
                    s(:sym, :m2),
                    s(:splat,
                      s(:zsuper)))),
                s(:send, nil, :prepend,
                  s(:lvar, :m1))))),
          s(:lvasgn, :c0,
            s(:block,
              s(:send, nil, :labeled_class,
                s(:str, "c0")),
              s(:args),
              s(:def, :x,
                s(:args),
                s(:array,
                  s(:sym, :c0))))),
          s(:lvasgn, :c1,
            s(:block,
              s(:send, nil, :labeled_class,
                s(:str, "c1")),
              s(:args),
              s(:begin,
                s(:def, :x,
                  s(:args),
                  s(:array,
                    s(:sym, :c1))),
                s(:send, nil, :prepend,
                  s(:lvar, :m2))))),
          s(:lvasgn, :c2,
            s(:block,
              s(:send, nil, :labeled_class,
                s(:str, "c2"),
                s(:lvar, :c0)),
              s(:args),
              s(:begin,
                s(:def, :x,
                  s(:args),
                  s(:array,
                    s(:sym, :c2),
                    s(:splat,
                      s(:zsuper)))),
                s(:send, nil, :include,
                  s(:lvar, :m2))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :m0),
              s(:lvar, :m1)),
            s(:send,
              s(:lvar, :m1), :ancestors),
            s(:lvar, :bug6659)),
          s(:lvasgn, :bug6662,
            s(:str, "[ruby-dev:45868]")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :m0),
              s(:lvar, :m1),
              s(:lvar, :m2)),
            s(:send,
              s(:lvar, :m2), :ancestors),
            s(:lvar, :bug6662)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :m0),
              s(:lvar, :m1),
              s(:lvar, :m2),
              s(:lvar, :c1)),
            s(:send,
              s(:send,
                s(:lvar, :c1), :ancestors), :[],
              s(:int, 0),
              s(:int, 4)),
            s(:lvar, :bug6662)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :m0),
              s(:sym, :m1),
              s(:sym, :m2),
              s(:sym, :c1)),
            s(:send,
              s(:send,
                s(:lvar, :c1), :new), :x)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :c2),
              s(:lvar, :m0),
              s(:lvar, :m1),
              s(:lvar, :m2),
              s(:lvar, :c0)),
            s(:send,
              s(:send,
                s(:lvar, :c2), :ancestors), :[],
              s(:int, 0),
              s(:int, 5)),
            s(:lvar, :bug6662)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :c2),
              s(:sym, :m0),
              s(:sym, :m1),
              s(:sym, :m2),
              s(:sym, :c0)),
            s(:send,
              s(:send,
                s(:lvar, :c2), :new), :x)),
          s(:lvasgn, :m3,
            s(:block,
              s(:send, nil, :labeled_module,
                s(:str, "m3")),
              s(:args),
              s(:begin,
                s(:send, nil, :include,
                  s(:lvar, :m1)),
                s(:send, nil, :prepend,
                  s(:lvar, :m1))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :m3),
              s(:lvar, :m0),
              s(:lvar, :m1)),
            s(:send,
              s(:lvar, :m3), :ancestors)),
          s(:lvasgn, :m3,
            s(:block,
              s(:send, nil, :labeled_module,
                s(:str, "m3")),
              s(:args),
              s(:begin,
                s(:send, nil, :prepend,
                  s(:lvar, :m1)),
                s(:send, nil, :include,
                  s(:lvar, :m1))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :m0),
              s(:lvar, :m1),
              s(:lvar, :m3)),
            s(:send,
              s(:lvar, :m3), :ancestors)),
          s(:lvasgn, :m3,
            s(:block,
              s(:send, nil, :labeled_module,
                s(:str, "m3")),
              s(:args),
              s(:begin,
                s(:send, nil, :prepend,
                  s(:lvar, :m1)),
                s(:send, nil, :prepend,
                  s(:lvar, :m1))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :m0),
              s(:lvar, :m1),
              s(:lvar, :m3)),
            s(:send,
              s(:lvar, :m3), :ancestors)),
          s(:lvasgn, :m3,
            s(:block,
              s(:send, nil, :labeled_module,
                s(:str, "m3")),
              s(:args),
              s(:begin,
                s(:send, nil, :include,
                  s(:lvar, :m1)),
                s(:send, nil, :include,
                  s(:lvar, :m1))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :m3),
              s(:lvar, :m0),
              s(:lvar, :m1)),
            s(:send,
              s(:lvar, :m3), :ancestors)))),
      s(:def, :labeled_module,
        s(:args,
          s(:arg, :name),
          s(:blockarg, :block)),
        s(:send,
          s(:const, nil, :EnvUtil), :labeled_module,
          s(:lvar, :name),
          s(:block_pass,
            s(:lvar, :block)))),
      s(:def, :labeled_class,
        s(:args,
          s(:arg, :name),
          s(:optarg, :superclass,
            s(:const, nil, :Object)),
          s(:blockarg, :block)),
        s(:send,
          s(:const, nil, :EnvUtil), :labeled_class,
          s(:lvar, :name),
          s(:lvar, :superclass),
          s(:block_pass,
            s(:lvar, :block)))),
      s(:def, :test_prepend_instance_methods_false,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6660,
            s(:str, "[ruby-dev:45863]")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :m1)),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new),
                s(:args),
                s(:begin,
                  s(:send, nil, :prepend,
                    s(:send,
                      s(:const, nil, :Module), :new)),
                  s(:def, :m1,
                    s(:args), nil))), :instance_methods,
              s(:false)),
            s(:lvar, :bug6660)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :m1)),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Class), :new),
                    s(:args),
                    s(:def, :m2,
                      s(:args), nil))),
                s(:args),
                s(:begin,
                  s(:send, nil, :prepend,
                    s(:send,
                      s(:const, nil, :Module), :new)),
                  s(:def, :m1,
                    s(:args), nil))), :instance_methods,
              s(:false)),
            s(:lvar, :bug6660)))),
      s(:def, :test_cyclic_prepend,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7841,
            s(:str, "[ruby-core:52205] [Bug #7841]")),
          s(:lvasgn, :m1,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:lvasgn, :m2,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:block,
            s(:send,
              s(:lvar, :m1), :instance_eval),
            s(:args),
            s(:send, nil, :prepend,
              s(:lvar, :m2))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError),
              s(:lvar, :bug7841)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :m2), :instance_eval),
              s(:args),
              s(:send, nil, :prepend,
                s(:lvar, :m1)))))),
      s(:def, :test_prepend_optmethod,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7983,
            s(:str, "[ruby-dev:47124] [Bug #7983]")),
          s(:send, nil, :assert_separately,
            s(:array),
            s(:dstr,
              s(:str, "\n"),
              s(:str, "      module M\n"),
              s(:str, "        def /(other)\n"),
              s(:str, "          to_f / other\n"),
              s(:str, "        end\n"),
              s(:str, "      end\n"),
              s(:str, "      Fixnum.send(:prepend, M)\n"),
              s(:str, "      assert_equal(0.5, 1 / 2, \""),
              s(:begin,
                s(:lvar, :bug7983)),
              s(:str, "\")\n"),
              s(:str, "    "))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:int, 1), :/,
              s(:int, 2))))),
      s(:def, :test_redefine_optmethod_after_prepend,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug11826,
            s(:str, "[ruby-core:72188] [Bug #11826]")),
          s(:send, nil, :assert_separately,
            s(:array),
            s(:dstr,
              s(:str, "\n"),
              s(:str, "      module M\n"),
              s(:str, "      end\n"),
              s(:str, "      class Fixnum\n"),
              s(:str, "        prepend M\n"),
              s(:str, "        def /(other)\n"),
              s(:str, "          quo(other)\n"),
              s(:str, "        end\n"),
              s(:str, "      end\n"),
              s(:str, "      assert_equal(1 / 2r, 1 / 2, \""),
              s(:begin,
                s(:lvar, :bug11826)),
              s(:str, "\")\n"),
              s(:str, "    ")),
            s(:hash,
              s(:pair,
                s(:sym, :ignore_stderr),
                s(:true)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:int, 1), :/,
              s(:int, 2))))),
      s(:def, :test_override_optmethod_after_prepend,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug11836,
            s(:str, "[ruby-core:72226] [Bug #11836]")),
          s(:send, nil, :assert_separately,
            s(:array),
            s(:dstr,
              s(:str, "\n"),
              s(:str, "      module M\n"),
              s(:str, "      end\n"),
              s(:str, "      class Fixnum\n"),
              s(:str, "        prepend M\n"),
              s(:str, "      end\n"),
              s(:str, "      module M\n"),
              s(:str, "        def /(other)\n"),
              s(:str, "          quo(other)\n"),
              s(:str, "        end\n"),
              s(:str, "      end\n"),
              s(:str, "      assert_equal(1 / 2r, 1 / 2, \""),
              s(:begin,
                s(:lvar, :bug11836)),
              s(:str, "\")\n"),
              s(:str, "    ")),
            s(:hash,
              s(:pair,
                s(:sym, :ignore_stderr),
                s(:true)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:int, 1), :/,
              s(:int, 2))))),
      s(:def, :test_prepend_visibility,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8005,
            s(:str, "[ruby-core:53106] [Bug #8005]")),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:send, nil, :prepend,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Module), :new),
                    s(:args), nil)),
                s(:def, :foo,
                  s(:args), nil),
                s(:send, nil, :protected,
                  s(:sym, :foo))))),
          s(:lvasgn, :a,
            s(:send,
              s(:lvar, :c), :new)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :a),
            s(:array,
              s(:sym, :foo),
              s(:true)),
            s(:lvar, :bug8005)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :NoMethodError),
              s(:lvar, :bug8005)),
            s(:args),
            s(:send,
              s(:lvar, :a), :send,
              s(:sym, :foo))))),
      s(:def, :test_prepend_visibility_inherited,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8238,
            s(:str, "[ruby-core:54105] [Bug #8238]")),
          s(:send, nil, :assert_separately,
            s(:array),
            s(:dstr,
              s(:str, "      class A\n"),
              s(:str, "        def foo() A; end\n"),
              s(:str, "        private :foo\n"),
              s(:str, "      end\n"),
              s(:str, "      class B < A\n"),
              s(:str, "        public :foo\n"),
              s(:str, "        prepend Module.new\n"),
              s(:str, "      end\n"),
              s(:str, "      assert_equal(A, B.new.foo, \""),
              s(:begin,
                s(:lvar, :bug8238)),
              s(:str, "\")\n")),
            s(:hash,
              s(:pair,
                s(:sym, :timeout),
                s(:int, 20)))))),
      s(:def, :test_prepend_included_modules,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8025,
            s(:str, "[ruby-core:53158] [Bug #8025]")),
          s(:lvasgn, :mixin,
            s(:send, nil, :labeled_module,
              s(:str, "mixin"))),
          s(:lvasgn, :c,
            s(:block,
              s(:send, nil, :labeled_module,
                s(:str, "c")),
              s(:args),
              s(:send, nil, :prepend,
                s(:lvar, :mixin)))),
          s(:lvasgn, :im,
            s(:send,
              s(:lvar, :c), :included_modules)),
          s(:send, nil, :assert_not_include,
            s(:lvar, :im),
            s(:lvar, :c),
            s(:lvar, :bug8025)),
          s(:send, nil, :assert_include,
            s(:lvar, :im),
            s(:lvar, :mixin),
            s(:lvar, :bug8025)),
          s(:lvasgn, :c1,
            s(:block,
              s(:send, nil, :labeled_class,
                s(:str, "c1")),
              s(:args),
              s(:send, nil, :prepend,
                s(:lvar, :mixin)))),
          s(:lvasgn, :c2,
            s(:send, nil, :labeled_class,
              s(:str, "c2"),
              s(:lvar, :c1))),
          s(:lvasgn, :im,
            s(:send,
              s(:lvar, :c2), :included_modules)),
          s(:send, nil, :assert_not_include,
            s(:lvar, :im),
            s(:lvar, :c1),
            s(:lvar, :bug8025)),
          s(:send, nil, :assert_not_include,
            s(:lvar, :im),
            s(:lvar, :c2),
            s(:lvar, :bug8025)),
          s(:send, nil, :assert_include,
            s(:lvar, :im),
            s(:lvar, :mixin),
            s(:lvar, :bug8025)))),
      s(:def, :test_prepend_super_in_alias,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7842,
            s(:str, "[Bug #7842]")),
          s(:lvasgn, :p,
            s(:block,
              s(:send, nil, :labeled_module,
                s(:str, "P")),
              s(:args),
              s(:def, :m,
                s(:args),
                s(:send,
                  s(:str, "P"), :+,
                  s(:zsuper))))),
          s(:lvasgn, :a,
            s(:block,
              s(:send, nil, :labeled_class,
                s(:str, "A")),
              s(:args),
              s(:def, :m,
                s(:args),
                s(:str, "A")))),
          s(:lvasgn, :b,
            s(:block,
              s(:send, nil, :labeled_class,
                s(:str, "B"),
                s(:lvar, :a)),
              s(:args),
              s(:begin,
                s(:def, :m,
                  s(:args),
                  s(:send,
                    s(:str, "B"), :+,
                    s(:zsuper))),
                s(:alias,
                  s(:sym, :m2),
                  s(:sym, :m)),
                s(:send, nil, :prepend,
                  s(:lvar, :p)),
                s(:alias,
                  s(:sym, :m3),
                  s(:sym, :m))))),
          s(:send, nil, :assert_equal,
            s(:str, "BA"),
            s(:send,
              s(:send,
                s(:lvar, :b), :new), :m2),
            s(:lvar, :bug7842)),
          s(:send, nil, :assert_equal,
            s(:str, "PBA"),
            s(:send,
              s(:send,
                s(:lvar, :b), :new), :m3),
            s(:lvar, :bug7842)))),
      s(:def, :test_include_super_in_alias,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9236,
            s(:str, "[Bug #9236]")),
          s(:lvasgn, :fun,
            s(:block,
              s(:send, nil, :labeled_module,
                s(:str, "Fun")),
              s(:args),
              s(:def, :hello,
                s(:args),
                s(:send, nil, :orig_hello)))),
          s(:lvasgn, :m1,
            s(:block,
              s(:send, nil, :labeled_module,
                s(:str, "M1")),
              s(:args),
              s(:def, :hello,
                s(:args),
                s(:str, "hello!")))),
          s(:lvasgn, :m2,
            s(:block,
              s(:send, nil, :labeled_module,
                s(:str, "M2")),
              s(:args),
              s(:def, :hello,
                s(:args),
                s(:zsuper)))),
          s(:lvasgn, :foo,
            s(:block,
              s(:send, nil, :labeled_class,
                s(:str, "Foo")),
              s(:args),
              s(:begin,
                s(:send, nil, :include,
                  s(:lvar, :m1)),
                s(:send, nil, :include,
                  s(:lvar, :m2)),
                s(:alias,
                  s(:sym, :orig_hello),
                  s(:sym, :hello)),
                s(:send, nil, :include,
                  s(:lvar, :fun))))),
          s(:send, nil, :assert_equal,
            s(:str, "hello!"),
            s(:send,
              s(:send,
                s(:lvar, :foo), :new), :hello),
            s(:lvar, :bug9236)))),
      s(:def, :test_prepend_each_classes,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send, nil, :labeled_module,
              s(:str, "M"))),
          s(:lvasgn, :c1,
            s(:block,
              s(:send, nil, :labeled_class,
                s(:str, "C1")),
              s(:args),
              s(:send, nil, :prepend,
                s(:lvar, :m)))),
          s(:lvasgn, :c2,
            s(:block,
              s(:send, nil, :labeled_class,
                s(:str, "C2"),
                s(:lvar, :c1)),
              s(:args),
              s(:send, nil, :prepend,
                s(:lvar, :m)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :m),
              s(:lvar, :c2),
              s(:lvar, :m),
              s(:lvar, :c1)),
            s(:send,
              s(:send,
                s(:lvar, :c2), :ancestors), :[],
              s(:int, 0),
              s(:int, 4)),
            s(:str, "should be able to prepend each classes")))),
      s(:def, :test_prepend_no_duplication,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send, nil, :labeled_module,
              s(:str, "M"))),
          s(:lvasgn, :c,
            s(:block,
              s(:send, nil, :labeled_class,
                s(:str, "C")),
              s(:args),
              s(:begin,
                s(:send, nil, :prepend,
                  s(:lvar, :m)),
                s(:send, nil, :prepend,
                  s(:lvar, :m))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :m),
              s(:lvar, :c)),
            s(:send,
              s(:send,
                s(:lvar, :c), :ancestors), :[],
              s(:int, 0),
              s(:int, 2)),
            s(:str, "should never duplicate")))),
      s(:def, :test_prepend_in_superclass,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send, nil, :labeled_module,
              s(:str, "M"))),
          s(:lvasgn, :c1,
            s(:send, nil, :labeled_class,
              s(:str, "C1"))),
          s(:lvasgn, :c2,
            s(:block,
              s(:send, nil, :labeled_class,
                s(:str, "C2"),
                s(:lvar, :c1)),
              s(:args),
              s(:send, nil, :prepend,
                s(:lvar, :m)))),
          s(:block,
            s(:send,
              s(:lvar, :c1), :class_eval),
            s(:args),
            s(:send, nil, :prepend,
              s(:lvar, :m))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :m),
              s(:lvar, :c2),
              s(:lvar, :m),
              s(:lvar, :c1)),
            s(:send,
              s(:send,
                s(:lvar, :c2), :ancestors), :[],
              s(:int, 0),
              s(:int, 4)),
            s(:str, "should accesisble prepended module in superclass")))),
      s(:def, :test_prepend_call_super,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array),
          s(:dstr,
            s(:str, "      bug10847 = '[ruby-core:68093] [Bug #10847]'\n"),
            s(:str, "      module M; end\n"),
            s(:str, "      Float.prepend M\n"),
            s(:str, "      assert_nothing_raised(SystemStackError, bug10847) do\n"),
            s(:str, "        0.3.numerator\n"),
            s(:str, "      end\n")))),
      s(:def, :test_class_variables,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:send,
            s(:lvar, :m), :class_variable_set,
            s(:sym, :@@foo),
            s(:int, 1)),
          s(:lvasgn, :m2,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:send,
            s(:lvar, :m2), :send,
            s(:sym, :include),
            s(:lvar, :m)),
          s(:send,
            s(:lvar, :m2), :class_variable_set,
            s(:sym, :@@bar),
            s(:int, 2)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :@@foo)),
            s(:send,
              s(:lvar, :m), :class_variables)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :@@bar),
              s(:sym, :@@foo)),
            s(:send,
              s(:send,
                s(:lvar, :m2), :class_variables), :sort)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :@@bar),
              s(:sym, :@@foo)),
            s(:send,
              s(:send,
                s(:lvar, :m2), :class_variables,
                s(:true)), :sort)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :@@bar)),
            s(:send,
              s(:lvar, :m2), :class_variables,
              s(:false))))),
      s(:casgn, nil, :Bug6891,
        s(:str, "[ruby-core:47241]")),
      s(:def, :test_extend_module_with_protected_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :list,
            s(:array)),
          s(:lvasgn, :x,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:ivasgn, :@list,
                  s(:lvar, :list)),
                s(:send, nil, :extend,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Module), :new),
                    s(:args),
                    s(:begin,
                      s(:send, nil, :protected),
                      s(:def, :inherited,
                        s(:args,
                          s(:arg, :klass)),
                        s(:begin,
                          s(:send,
                            s(:ivar, :@list), :<<,
                            s(:str, "protected")),
                          s(:super,
                            s(:lvar, :klass))))))),
                s(:send, nil, :extend,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Module), :new),
                    s(:args),
                    s(:def, :inherited,
                      s(:args,
                        s(:arg, :klass)),
                      s(:begin,
                        s(:send,
                          s(:ivar, :@list), :<<,
                          s(:str, "public")),
                        s(:super,
                          s(:lvar, :klass))))))))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :NoMethodError),
              s(:const, nil, :Bug6891)),
            s(:args),
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "public"),
              s(:str, "protected")),
            s(:lvar, :list)))),
      s(:def, :test_extend_module_with_protected_bmethod,
        s(:args),
        s(:begin,
          s(:lvasgn, :list,
            s(:array)),
          s(:lvasgn, :x,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:send, nil, :extend,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Module), :new),
                    s(:args),
                    s(:begin,
                      s(:send, nil, :protected),
                      s(:block,
                        s(:send, nil, :define_method,
                          s(:sym, :inherited)),
                        s(:args,
                          s(:arg, :klass)),
                        s(:begin,
                          s(:send,
                            s(:lvar, :list), :<<,
                            s(:str, "protected")),
                          s(:super,
                            s(:lvar, :klass))))))),
                s(:send, nil, :extend,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Module), :new),
                    s(:args),
                    s(:block,
                      s(:send, nil, :define_method,
                        s(:sym, :inherited)),
                      s(:args,
                        s(:arg, :klass)),
                      s(:begin,
                        s(:send,
                          s(:lvar, :list), :<<,
                          s(:str, "public")),
                        s(:super,
                          s(:lvar, :klass))))))))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :NoMethodError),
              s(:const, nil, :Bug6891)),
            s(:args),
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "public"),
              s(:str, "protected")),
            s(:lvar, :list)))),
      s(:def, :test_invalid_attr,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:str, "foo?"),
              s(:str, "@foo"),
              s(:str, "@@foo"),
              s(:str, "$foo"),
              s(:str, "あ$")), :each),
          s(:args,
            s(:arg, :name)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :NameError),
              s(:regexp,
                s(:begin,
                  s(:send,
                    s(:const, nil, :Regexp), :quote,
                    s(:send, nil, :quote,
                      s(:lvar, :name)))),
                s(:regopt))),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:send, nil, :attr_accessor,
                s(:send,
                  s(:lvar, :name), :to_sym)))))),
      s(:send, nil, :private,
        s(:def, :quote,
          s(:args,
            s(:arg, :name)),
          s(:begin,
            s(:lvasgn, :encoding,
              s(:or,
                s(:send,
                  s(:const, nil, :Encoding), :default_internal),
                s(:send,
                  s(:const, nil, :Encoding), :default_external))),
            s(:if,
              s(:begin,
                s(:or,
                  s(:send,
                    s(:send,
                      s(:lvar, :name), :encoding), :==,
                    s(:lvar, :encoding)),
                  s(:send,
                    s(:lvar, :name), :ascii_only?))),
              s(:lvar, :name),
              s(:send,
                s(:lvar, :name), :inspect))))),
      s(:class,
        s(:const, nil, :AttrTest), nil,
        s(:begin,
          s(:sclass,
            s(:self),
            s(:send, nil, :attr_accessor,
              s(:sym, :cattr))),
          s(:send, nil, :attr_accessor,
            s(:sym, :iattr)),
          s(:def, :ivar,
            s(:args),
            s(:ivar, :@ivar)))),
      s(:def, :test_uninitialized_instance_variable,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :AttrTest), :new)),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:regexp,
                s(:str, "instance variable @ivar not initialized"),
                s(:regopt))),
            s(:args),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :a), :ivar))),
          s(:send,
            s(:lvar, :a), :instance_variable_set,
            s(:sym, :@ivar),
            s(:int, 42)),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:int, 42),
              s(:send,
                s(:lvar, :a), :ivar))),
          s(:lvasgn, :name,
            s(:str, "@変数")),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:regexp,
                s(:str, "instance variable "),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " not initialized"),
                s(:regopt))),
            s(:args),
            s(:begin,
              s(:lvasgn, :val,
                s(:block,
                  s(:send,
                    s(:const, nil, :EnvUtil), :with_default_external,
                    s(:const,
                      s(:const, nil, :Encoding), :UTF_8)),
                  s(:args),
                  s(:send,
                    s(:lvar, :a), :instance_eval,
                    s(:lvar, :name)))),
              s(:send, nil, :assert_nil,
                s(:lvar, :val)))))),
      s(:def, :test_uninitialized_attr,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :AttrTest), :new)),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :a), :iattr))),
          s(:send,
            s(:lvar, :a), :iattr=,
            s(:int, 42)),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:int, 42),
              s(:send,
                s(:lvar, :a), :iattr))))),
      s(:def, :test_uninitialized_attr_class,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:const, nil, :AttrTest), :cattr))),
          s(:send,
            s(:const, nil, :AttrTest), :cattr=,
            s(:int, 42)),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:int, 42),
              s(:send,
                s(:const, nil, :AttrTest), :cattr))))),
      s(:def, :test_uninitialized_attr_non_object,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const, nil, :Array)),
                s(:args),
                s(:send, nil, :attr_accessor,
                  s(:sym, :iattr))), :new)),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :a), :iattr))),
          s(:send,
            s(:lvar, :a), :iattr=,
            s(:int, 42)),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:int, 42),
              s(:send,
                s(:lvar, :a), :iattr))))),
      s(:def, :test_remove_const,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :m), :instance_eval),
              s(:args),
              s(:send, nil, :remove_const,
                s(:sym, :__FOO__)))))),
      s(:def, :test_private_top_methods,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_top_method_is_private,
            s(:sym, :include)),
          s(:send, nil, :assert_top_method_is_private,
            s(:sym, :public)),
          s(:send, nil, :assert_top_method_is_private,
            s(:sym, :private)),
          s(:send, nil, :assert_top_method_is_private,
            s(:sym, :define_method)))),
      s(:module,
        s(:const, nil, :PrivateConstantReopen),
        s(:begin,
          s(:casgn, nil, :PRIVATE_CONSTANT,
            s(:true)),
          s(:send, nil, :private_constant,
            s(:sym, :PRIVATE_CONSTANT)))),
      s(:def, :test_private_constant_reopen,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send, nil, :eval,
              s(:dstr,
                s(:str, "        module TestModule::PrivateConstantReopen::PRIVATE_CONSTANT\n"),
                s(:str, "        end\n")),
              s(:const, nil, :TOPLEVEL_BINDING))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send, nil, :eval,
              s(:dstr,
                s(:str, "        class TestModule::PrivateConstantReopen::PRIVATE_CONSTANT\n"),
                s(:str, "        end\n")),
              s(:const, nil, :TOPLEVEL_BINDING))))),
      s(:def, :test_frozen_visibility,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug11532,
            s(:str, "[ruby-core:70828] [Bug #11532]")),
          s(:lvasgn, :c,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new),
                s(:args),
                s(:send, nil, :const_set,
                  s(:sym, :A),
                  s(:int, 1))), :freeze)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :RuntimeError),
              s(:regexp,
                s(:str, "frozen class"),
                s(:regopt)),
              s(:lvar, :bug11532)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :c), :class_eval),
              s(:args),
              s(:send, nil, :private_constant,
                s(:sym, :A)))),
          s(:lvasgn, :c,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new),
                s(:args),
                s(:begin,
                  s(:send, nil, :const_set,
                    s(:sym, :A),
                    s(:int, 1)),
                  s(:send, nil, :private_constant,
                    s(:sym, :A)))), :freeze)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :RuntimeError),
              s(:regexp,
                s(:str, "frozen class"),
                s(:regopt)),
              s(:lvar, :bug11532)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :c), :class_eval),
              s(:args),
              s(:send, nil, :public_constant,
                s(:sym, :A)))),
          s(:lvasgn, :c,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new),
                s(:args),
                s(:send, nil, :const_set,
                  s(:sym, :A),
                  s(:int, 1))), :freeze)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :RuntimeError),
              s(:regexp,
                s(:str, "frozen class"),
                s(:regopt)),
              s(:lvar, :bug11532)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :c), :class_eval),
              s(:args),
              s(:send, nil, :deprecate_constant,
                s(:sym, :A)))))),
      s(:def, :test_singleton_class_ancestors,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature8035,
            s(:str, "[ruby-core:53171]")),
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:lvar, :obj), :singleton_class),
              s(:const, nil, :Object)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :obj), :singleton_class), :ancestors), :first,
              s(:int, 2)),
            s(:lvar, :feature8035)),
          s(:lvasgn, :mod,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:send,
            s(:lvar, :obj), :extend,
            s(:lvar, :mod)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:lvar, :obj), :singleton_class),
              s(:lvar, :mod),
              s(:const, nil, :Object)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :obj), :singleton_class), :ancestors), :first,
              s(:int, 3))),
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send,
            s(:send,
              s(:lvar, :obj), :singleton_class), :send,
            s(:sym, :prepend),
            s(:lvar, :mod)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :mod),
              s(:send,
                s(:lvar, :obj), :singleton_class),
              s(:const, nil, :Object)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :obj), :singleton_class), :ancestors), :first,
              s(:int, 3))))),
      s(:def, :test_visibility_by_public_class_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8284,
            s(:str, "[ruby-core:54404] [Bug #8284]")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:const, nil, :Object), :define_method)),
          s(:send,
            s(:send,
              s(:const, nil, :Module), :new), :public_class_method,
            s(:sym, :define_method)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError),
              s(:lvar, :bug8284)),
            s(:args),
            s(:send,
              s(:const, nil, :Object), :define_method)))),
      s(:def, :test_include_module_with_constants_does_not_invalidate_method_cache,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array),
          s(:dstr,
            s(:str, "      A = 123\n"),
            s(:str, "\n"),
            s(:str, "      class Foo\n"),
            s(:str, "        def self.a\n"),
            s(:str, "          A\n"),
            s(:str, "        end\n"),
            s(:str, "      end\n"),
            s(:str, "\n"),
            s(:str, "      module M\n"),
            s(:str, "        A = 456\n"),
            s(:str, "      end\n"),
            s(:str, "\n"),
            s(:str, "      puts Foo.a\n"),
            s(:str, "      starting = RubyVM.stat[:global_method_state]\n"),
            s(:str, "\n"),
            s(:str, "      Foo.send(:include, M)\n"),
            s(:str, "\n"),
            s(:str, "      ending = RubyVM.stat[:global_method_state]\n"),
            s(:str, "      puts Foo.a\n"),
            s(:str, "      puts starting == ending\n")),
          s(:array,
            s(:str, "123"),
            s(:str, "456"),
            s(:str, "true")),
          s(:array))),
      s(:def, :test_return_value_of_define_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :retvals,
            s(:array)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Class), :new), :class_eval),
            s(:args),
            s(:begin,
              s(:send,
                s(:lvar, :retvals), :<<,
                s(:block,
                  s(:send, nil, :define_method,
                    s(:sym, :foo)),
                  s(:args), nil)),
              s(:send,
                s(:lvar, :retvals), :<<,
                s(:send, nil, :define_method,
                  s(:sym, :bar),
                  s(:send, nil, :instance_method,
                    s(:sym, :foo)))))),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :retvals), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:sym, :bar),
            s(:send,
              s(:lvar, :retvals), :[],
              s(:int, 1))))),
      s(:def, :test_return_value_of_define_singleton_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :retvals,
            s(:array)),
          s(:block,
            s(:send,
              s(:const, nil, :Class), :new),
            s(:args),
            s(:begin,
              s(:send,
                s(:lvar, :retvals), :<<,
                s(:block,
                  s(:send, nil, :define_singleton_method,
                    s(:sym, :foo)),
                  s(:args), nil)),
              s(:send,
                s(:lvar, :retvals), :<<,
                s(:send, nil, :define_singleton_method,
                  s(:sym, :bar),
                  s(:send, nil, :method,
                    s(:sym, :foo)))))),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :retvals), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:sym, :bar),
            s(:send,
              s(:lvar, :retvals), :[],
              s(:int, 1))))),
      s(:def, :test_prepend_gc,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "      module Foo\n"),
            s(:str, "      end\n"),
            s(:str, "      class Object\n"),
            s(:str, "        prepend Foo\n"),
            s(:str, "      end\n"),
            s(:str, "      GC.start     # make created T_ICLASS old (or remembered shady)\n"),
            s(:str, "      class Object # add methods into T_ICLASS (need WB if it is old)\n"),
            s(:str, "        def foo; end\n"),
            s(:str, "        attr_reader :bar\n"),
            s(:str, "      end\n"),
            s(:str, "      1_000_000.times{''} # cause GC\n"),
            s(:str, "    ")))),
      s(:def, :test_inspect_segfault,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug_10282,
            s(:str, "[ruby-core:65214] [Bug #10282]")),
          s(:send, nil, :assert_separately,
            s(:array),
            s(:dstr,
              s(:str, "      module ShallowInspect\n"),
              s(:str, "        def shallow_inspect\n"),
              s(:str, "          \"foo\"\n"),
              s(:str, "        end\n"),
              s(:str, "      end\n"),
              s(:str, "\n"),
              s(:str, "      module InspectIsShallow\n"),
              s(:str, "        include ShallowInspect\n"),
              s(:str, "        alias_method :inspect, :shallow_inspect\n"),
              s(:str, "      end\n"),
              s(:str, "\n"),
              s(:str, "      class A\n"),
              s(:str, "      end\n"),
              s(:str, "\n"),
              s(:str, "      A.prepend InspectIsShallow\n"),
              s(:str, "\n"),
              s(:str, "      expect = \"#<Method: A(ShallowInspect)#inspect(shallow_inspect)>\"\n"),
              s(:str, "      assert_equal expect, A.new.method(:inspect).inspect, \""),
              s(:begin,
                s(:lvar, :bug_10282)),
              s(:str, "\"\n"))))),
      s(:def, :test_define_method_with_unbound_method,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:begin,
              s(:lvasgn, :cls,
                s(:block,
                  s(:send,
                    s(:const, nil, :Class), :new,
                    s(:const, nil, :String)),
                  s(:args),
                  s(:send, nil, :define_method,
                    s(:str, "foo"),
                    s(:send,
                      s(:const, nil, :String), :instance_method,
                      s(:sym, :to_s))))),
              s(:lvasgn, :obj,
                s(:send,
                  s(:lvar, :cls), :new,
                  s(:str, "bar"))),
              s(:send, nil, :assert_equal,
                s(:str, "bar"),
                s(:send,
                  s(:lvar, :obj), :foo)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:send, nil, :define_method,
                s(:str, "foo"),
                s(:send,
                  s(:const, nil, :String), :instance_method,
                  s(:sym, :to_s))))))),
      s(:def, :test_redefinition_mismatch,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:send,
            s(:lvar, :m), :module_eval,
            s(:str, "A = 1")),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "is not a module"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :m), :module_eval,
              s(:str, "module A; end"))),
          s(:lvasgn, :n,
            s(:str, "M🗿")),
          s(:send,
            s(:lvar, :m), :module_eval,
            s(:dstr,
              s(:begin,
                s(:lvar, :n)),
              s(:str, " = 42"))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:dstr,
                s(:begin,
                  s(:lvar, :n)),
                s(:str, " is not a module"))),
            s(:args),
            s(:send,
              s(:lvar, :m), :module_eval,
              s(:dstr,
                s(:str, "module "),
                s(:begin,
                  s(:lvar, :n)),
                s(:str, "; end")))),
          s(:send, nil, :assert_separately,
            s(:array),
            s(:dstr,
              s(:str, "      Etc = (class C🗿; self; end).new\n"),
              s(:str, "      assert_raise_with_message(TypeError, /C🗿/) {\n"),
              s(:str, "        require 'etc'\n"),
              s(:str, "      }\n"))))),
      s(:send, nil, :private),
      s(:def, :assert_top_method_is_private,
        s(:args,
          s(:arg, :method)),
        s(:send, nil, :assert_separately,
          s(:array),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "      methods = singleton_class.private_instance_methods(false)\n"),
            s(:str, "      assert_include(methods, :"),
            s(:begin,
              s(:lvar, :method)),
            s(:str, ", \":"),
            s(:begin,
              s(:lvar, :method)),
            s(:str, " should be private\")\n"),
            s(:str, "\n"),
            s(:str, "      assert_raise_with_message(NoMethodError, \"private method `"),
            s(:begin,
              s(:lvar, :method)),
            s(:str, "' called for main:Object\") {\n"),
            s(:str, "        self."),
            s(:begin,
              s(:lvar, :method)),
            s(:str, "\n"),
            s(:str, "      }\n"),
            s(:str, "    ")))))))
