s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestMethod),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@verbose,
            s(:gvar, :$VERBOSE)),
          s(:gvasgn, :$VERBOSE,
            s(:nil)))),
      s(:def, :teardown,
        s(:args),
        s(:gvasgn, :$VERBOSE,
          s(:ivar, :@verbose))),
      s(:def, :m0,
        s(:args), nil),
      s(:def, :m1,
        s(:args,
          s(:arg, :a)), nil),
      s(:def, :m2,
        s(:args,
          s(:arg, :a),
          s(:arg, :b)), nil),
      s(:def, :mo1,
        s(:args,
          s(:optarg, :a,
            s(:nil)),
          s(:blockarg, :b)), nil),
      s(:def, :mo2,
        s(:args,
          s(:arg, :a),
          s(:optarg, :b,
            s(:nil))), nil),
      s(:def, :mo3,
        s(:args,
          s(:restarg, :a)), nil),
      s(:def, :mo4,
        s(:args,
          s(:arg, :a),
          s(:restarg, :b),
          s(:blockarg, :c)), nil),
      s(:def, :mo5,
        s(:args,
          s(:arg, :a),
          s(:restarg, :b),
          s(:arg, :c)), nil),
      s(:def, :mo6,
        s(:args,
          s(:arg, :a),
          s(:restarg, :b),
          s(:arg, :c),
          s(:blockarg, :d)), nil),
      s(:def, :mo7,
        s(:args,
          s(:arg, :a),
          s(:optarg, :b,
            s(:nil)),
          s(:restarg, :c),
          s(:arg, :d),
          s(:blockarg, :e)), nil),
      s(:def, :ma1,
        s(:args,
          s(:mlhs,
            s(:arg, :a)),
          s(:blockarg, :b)),
        s(:and,
          s(:nil),
          s(:lvar, :a))),
      s(:def, :mk1,
        s(:args,
          s(:kwrestarg)), nil),
      s(:def, :mk2,
        s(:args,
          s(:kwrestarg, :o)),
        s(:and,
          s(:nil),
          s(:lvar, :o))),
      s(:def, :mk3,
        s(:args,
          s(:arg, :a),
          s(:kwrestarg, :o)),
        s(:and,
          s(:nil),
          s(:lvar, :o))),
      s(:def, :mk4,
        s(:args,
          s(:optarg, :a,
            s(:nil)),
          s(:kwrestarg, :o)),
        s(:and,
          s(:nil),
          s(:lvar, :o))),
      s(:def, :mk5,
        s(:args,
          s(:arg, :a),
          s(:optarg, :b,
            s(:nil)),
          s(:kwrestarg, :o)),
        s(:and,
          s(:nil),
          s(:lvar, :o))),
      s(:def, :mk6,
        s(:args,
          s(:arg, :a),
          s(:optarg, :b,
            s(:nil)),
          s(:arg, :c),
          s(:kwrestarg, :o)),
        s(:and,
          s(:nil),
          s(:lvar, :o))),
      s(:def, :mk7,
        s(:args,
          s(:arg, :a),
          s(:optarg, :b,
            s(:nil)),
          s(:restarg, :c),
          s(:arg, :d),
          s(:kwrestarg, :o)),
        s(:and,
          s(:nil),
          s(:lvar, :o))),
      s(:class,
        s(:const, nil, :Base), nil,
        s(:def, :foo,
          s(:args),
          s(:sym, :base))),
      s(:class,
        s(:const, nil, :Derived),
        s(:const, nil, :Base),
        s(:def, :foo,
          s(:args),
          s(:sym, :derived))),
      s(:class,
        s(:const, nil, :T), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args), nil),
          s(:def, :initialize_copy,
            s(:args,
              s(:restarg)),
            s(:zsuper)),
          s(:def, :initialize_clone,
            s(:args,
              s(:restarg)),
            s(:zsuper)),
          s(:def, :initialize_dup,
            s(:args,
              s(:restarg)),
            s(:zsuper)),
          s(:def, :respond_to_missing?,
            s(:args,
              s(:restarg)),
            s(:zsuper)),
          s(:def, :normal_method,
            s(:args), nil))),
      s(:module,
        s(:const, nil, :M),
        s(:begin,
          s(:def, :func,
            s(:args), nil),
          s(:send, nil, :module_function,
            s(:sym, :func)),
          s(:def, :meth,
            s(:args),
            s(:sym, :meth)))),
      s(:def, :mv1,
        s(:args), nil),
      s(:def, :mv2,
        s(:args), nil),
      s(:send, nil, :private,
        s(:sym, :mv2)),
      s(:def, :mv3,
        s(:args), nil),
      s(:send, nil, :protected,
        s(:sym, :mv3)),
      s(:class,
        s(:const, nil, :Visibility), nil,
        s(:begin,
          s(:def, :mv1,
            s(:args), nil),
          s(:def, :mv2,
            s(:args), nil),
          s(:send, nil, :private,
            s(:sym, :mv2)),
          s(:def, :mv3,
            s(:args), nil),
          s(:send, nil, :protected,
            s(:sym, :mv3)))),
      s(:def, :test_arity,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :m0)), :arity)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :m1)), :arity)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :m2)), :arity)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mo1)), :arity)),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mo2)), :arity)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mo3)), :arity)),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mo4)), :arity)),
          s(:send, nil, :assert_equal,
            s(:int, -3),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mo5)), :arity)),
          s(:send, nil, :assert_equal,
            s(:int, -3),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mo6)), :arity)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mk1)), :arity)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mk2)), :arity)),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mk3)), :arity)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mk4)), :arity)),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mk5)), :arity)),
          s(:send, nil, :assert_equal,
            s(:int, -3),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mk6)), :arity)),
          s(:send, nil, :assert_equal,
            s(:int, -3),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mk7)), :arity)))),
      s(:def, :test_arity_special,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:int, -1),
          s(:send,
            s(:send, nil, :method,
              s(:sym, :__send__)), :arity))),
      s(:def, :test_unbind,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:sym, :derived),
            s(:send,
              s(:send,
                s(:const, nil, :Derived), :new), :foo)),
          s(:lvasgn, :um,
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Derived), :new), :method,
                s(:sym, :foo)), :unbind)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :UnboundMethod),
            s(:lvar, :um)),
          s(:block,
            s(:send,
              s(:const, nil, :Derived), :class_eval),
            s(:args),
            s(:def, :foo,
              s(:args),
              s(:sym, :changed))),
          s(:send, nil, :assert_equal,
            s(:sym, :changed),
            s(:send,
              s(:send,
                s(:const, nil, :Derived), :new), :foo)),
          s(:send, nil, :assert_equal,
            s(:sym, :derived),
            s(:send,
              s(:send,
                s(:lvar, :um), :bind,
                s(:send,
                  s(:const, nil, :Derived), :new)), :call)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :um), :bind,
              s(:send,
                s(:const, nil, :Base), :new))))),
      s(:def, :test_callee,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:sym, :test_callee),
            s(:send, nil, :__method__)),
          s(:send, nil, :assert_equal,
            s(:sym, :m),
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:const, nil, :Class), :new),
                  s(:args),
                  s(:def, :m,
                    s(:args),
                    s(:send, nil, :__method__))), :new), :m)),
          s(:send, nil, :assert_equal,
            s(:sym, :m),
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:const, nil, :Class), :new),
                  s(:args),
                  s(:def, :m,
                    s(:args),
                    s(:block,
                      s(:send, nil, :tap),
                      s(:args),
                      s(:return,
                        s(:send, nil, :__method__))))), :new), :m)),
          s(:send, nil, :assert_equal,
            s(:sym, :m),
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:const, nil, :Class), :new),
                  s(:args),
                  s(:block,
                    s(:send, nil, :define_method,
                      s(:sym, :m)),
                    s(:args),
                    s(:send, nil, :__method__))), :new), :m)),
          s(:send, nil, :assert_equal,
            s(:sym, :m),
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:const, nil, :Class), :new),
                  s(:args),
                  s(:block,
                    s(:send, nil, :define_method,
                      s(:sym, :m)),
                    s(:args),
                    s(:block,
                      s(:send, nil, :tap),
                      s(:args),
                      s(:return,
                        s(:send, nil, :__method__))))), :new), :m)),
          s(:send, nil, :assert_nil,
            s(:send, nil, :eval,
              s(:str, "class TestCallee; __method__; end"))),
          s(:send, nil, :assert_equal,
            s(:sym, :test_callee),
            s(:send, nil, :__callee__)),
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:str, "method"),
                  s(:block,
                    s(:send,
                      s(:const, nil, :Class), :new),
                    s(:args),
                    s(:def, :m,
                      s(:args),
                      s(:send, nil, :__callee__)))),
                s(:array,
                  s(:str, "block"),
                  s(:block,
                    s(:send,
                      s(:const, nil, :Class), :new),
                    s(:args),
                    s(:def, :m,
                      s(:args),
                      s(:block,
                        s(:send, nil, :tap),
                        s(:args),
                        s(:return,
                          s(:send, nil, :__callee__)))))),
                s(:array,
                  s(:str, "define_method"),
                  s(:block,
                    s(:send,
                      s(:const, nil, :Class), :new),
                    s(:args),
                    s(:block,
                      s(:send, nil, :define_method,
                        s(:sym, :m)),
                      s(:args),
                      s(:send, nil, :__callee__)))),
                s(:array,
                  s(:str, "define_method block"),
                  s(:block,
                    s(:send,
                      s(:const, nil, :Class), :new),
                    s(:args),
                    s(:block,
                      s(:send, nil, :define_method,
                        s(:sym, :m)),
                      s(:args),
                      s(:block,
                        s(:send, nil, :tap),
                        s(:args),
                        s(:return,
                          s(:send, nil, :__callee__))))))), :each),
            s(:args,
              s(:arg, :mesg),
              s(:arg, :c)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :c), :class_eval),
                s(:args),
                s(:alias,
                  s(:sym, :m2),
                  s(:sym, :m))),
              s(:lvasgn, :o,
                s(:send,
                  s(:lvar, :c), :new)),
              s(:send, nil, :assert_equal,
                s(:sym, :m),
                s(:send,
                  s(:lvar, :o), :m),
                s(:lvar, :mesg)),
              s(:send, nil, :assert_equal,
                s(:sym, :m2),
                s(:send,
                  s(:lvar, :o), :m2),
                s(:lvar, :mesg)))),
          s(:send, nil, :assert_nil,
            s(:send, nil, :eval,
              s(:str, "class TestCallee; __callee__; end"))))),
      s(:def, :test_orphan_callee,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:def, :foo,
                  s(:args),
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args),
                    s(:send, nil, :__callee__))),
                s(:alias,
                  s(:sym, :alias_foo),
                  s(:sym, :foo))))),
          s(:send, nil, :assert_equal,
            s(:sym, :alias_foo),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :c), :new), :alias_foo), :call),
            s(:str, "[Bug #11046]")))),
      s(:def, :test_method_in_define_method_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug4606,
            s(:str, "[ruby-core:35386]")),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:block,
                s(:send,
                  s(:array,
                    s(:sym, :m1),
                    s(:sym, :m2)), :each),
                s(:args,
                  s(:arg, :m)),
                s(:block,
                  s(:send, nil, :define_method,
                    s(:lvar, :m)),
                  s(:args),
                  s(:send, nil, :__method__))))),
          s(:send, nil, :assert_equal,
            s(:sym, :m1),
            s(:send,
              s(:send,
                s(:lvar, :c), :new), :m1),
            s(:lvar, :bug4606)),
          s(:send, nil, :assert_equal,
            s(:sym, :m2),
            s(:send,
              s(:send,
                s(:lvar, :c), :new), :m2),
            s(:lvar, :bug4606)))),
      s(:def, :test_method_in_block_in_define_method_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug4606,
            s(:str, "[ruby-core:35386]")),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:block,
                s(:send,
                  s(:array,
                    s(:sym, :m1),
                    s(:sym, :m2)), :each),
                s(:args,
                  s(:arg, :m)),
                s(:block,
                  s(:send, nil, :define_method,
                    s(:lvar, :m)),
                  s(:args),
                  s(:block,
                    s(:send, nil, :tap),
                    s(:args),
                    s(:return,
                      s(:send, nil, :__method__))))))),
          s(:send, nil, :assert_equal,
            s(:sym, :m1),
            s(:send,
              s(:send,
                s(:lvar, :c), :new), :m1),
            s(:lvar, :bug4606)),
          s(:send, nil, :assert_equal,
            s(:sym, :m2),
            s(:send,
              s(:send,
                s(:lvar, :c), :new), :m2),
            s(:lvar, :bug4606)))),
      s(:def, :test_body,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :foo,
            s(:args), nil),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :RubyVM), :InstructionSequence), :disasm,
              s(:send,
                s(:lvar, :o), :method,
                s(:sym, :foo)))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :RubyVM), :InstructionSequence), :disasm,
              s(:send,
                s(:str, "x"), :method,
                s(:sym, :upcase)))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :RubyVM), :InstructionSequence), :disasm,
              s(:send,
                s(:send, nil, :method,
                  s(:sym, :to_s)), :to_proc))))),
      s(:def, :test_new,
        s(:args),
        s(:begin,
          s(:lvasgn, :c1,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send,
              s(:lvar, :c1), :class_eval),
            s(:args),
            s(:def, :foo,
              s(:args),
              s(:sym, :foo))),
          s(:lvasgn, :c2,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :c1))),
          s(:block,
            s(:send,
              s(:lvar, :c2), :class_eval),
            s(:args),
            s(:send, nil, :private,
              s(:sym, :foo))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :c2), :new)),
          s(:send,
            s(:lvar, :o), :extend,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :method,
              s(:sym, :bar))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :public_method,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:send,
                s(:lvar, :o), :method,
                s(:sym, :foo)), :call)))),
      s(:def, :test_eq,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:sclass,
            s(:lvar, :o),
            s(:begin,
              s(:def, :foo,
                s(:args), nil),
              s(:alias,
                s(:sym, :bar),
                s(:sym, :foo)),
              s(:def, :baz,
                s(:args), nil))),
          s(:send, nil, :assert_not_equal,
            s(:send,
              s(:lvar, :o), :method,
              s(:sym, :foo)),
            s(:nil)),
          s(:lvasgn, :m,
            s(:send,
              s(:lvar, :o), :method,
              s(:sym, :foo))),
          s(:defs,
            s(:lvar, :m), :foo,
            s(:args), nil),
          s(:send, nil, :assert_not_equal,
            s(:send,
              s(:lvar, :o), :method,
              s(:sym, :foo)),
            s(:lvar, :m)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :o), :method,
              s(:sym, :foo)),
            s(:send,
              s(:lvar, :o), :method,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :o), :method,
              s(:sym, :foo)),
            s(:send,
              s(:lvar, :o), :method,
              s(:sym, :bar))),
          s(:send, nil, :assert_not_equal,
            s(:send,
              s(:lvar, :o), :method,
              s(:sym, :foo)),
            s(:send,
              s(:lvar, :o), :method,
              s(:sym, :baz))))),
      s(:def, :test_hash,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :foo,
            s(:args), nil),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:send,
              s(:send,
                s(:lvar, :o), :method,
                s(:sym, :foo)), :hash)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:const, nil, :Array), :instance_method,
                s(:sym, :map)), :hash),
            s(:send,
              s(:send,
                s(:const, nil, :Array), :instance_method,
                s(:sym, :collect)), :hash)))),
      s(:def, :test_owner,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:def, :foo,
                s(:args), nil))),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:send,
              s(:send,
                s(:lvar, :c), :instance_method,
                s(:sym, :foo)), :owner)),
          s(:lvasgn, :c2,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :c))),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:send,
              s(:send,
                s(:lvar, :c2), :instance_method,
                s(:sym, :foo)), :owner)))),
      s(:def, :test_owner_missing,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:def, :respond_to_missing?,
                s(:args,
                  s(:arg, :name),
                  s(:arg, :bool)),
                s(:send,
                  s(:lvar, :name), :==,
                  s(:sym, :foo))))),
          s(:lvasgn, :c2,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :c))),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :c), :new), :method,
                s(:sym, :foo)), :owner)),
          s(:send, nil, :assert_equal,
            s(:lvar, :c2),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :c2), :new), :method,
                s(:sym, :foo)), :owner)))),
      s(:def, :test_receiver_name_owner,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :foo,
            s(:args), nil),
          s(:lvasgn, :m,
            s(:send,
              s(:lvar, :o), :method,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:lvar, :o),
            s(:send,
              s(:lvar, :m), :receiver)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :m), :name)),
          s(:send, nil, :assert_equal,
            s(:sclass,
              s(:lvar, :o),
              s(:self)),
            s(:send,
              s(:lvar, :m), :owner)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:send,
                s(:lvar, :m), :unbind), :name)),
          s(:send, nil, :assert_equal,
            s(:sclass,
              s(:lvar, :o),
              s(:self)),
            s(:send,
              s(:send,
                s(:lvar, :m), :unbind), :owner)),
          s(:sclass,
            s(:lvar, :o),
            s(:alias,
              s(:sym, :bar),
              s(:sym, :foo))),
          s(:lvasgn, :m,
            s(:send,
              s(:lvar, :o), :method,
              s(:sym, :bar))),
          s(:send, nil, :assert_equal,
            s(:sym, :bar),
            s(:send,
              s(:lvar, :m), :name)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :m), :original_name)))),
      s(:def, :test_instance_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send,
              s(:lvar, :c), :class_eval),
            s(:args),
            s(:begin,
              s(:def, :foo,
                s(:args),
                s(:sym, :foo)),
              s(:send, nil, :private,
                s(:sym, :foo)))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :c), :new)),
          s(:send,
            s(:send,
              s(:lvar, :o), :method,
              s(:sym, :foo)), :unbind),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :foo)),
          s(:send,
            s(:send,
              s(:lvar, :c), :instance_method,
              s(:sym, :foo)), :bind,
            s(:lvar, :o)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:block,
              s(:send,
                s(:lvar, :o), :instance_eval),
              s(:args),
              s(:send, nil, :foo))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :public_instance_method,
              s(:sym, :foo))),
          s(:defs,
            s(:lvar, :o), :bar,
            s(:args), nil),
          s(:lvasgn, :m,
            s(:send,
              s(:send,
                s(:lvar, :o), :method,
                s(:sym, :bar)), :unbind)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :m), :bind,
              s(:send,
                s(:const, nil, :Object), :new))),
          s(:block,
            s(:send,
              s(:const, nil, :EnvUtil), :with_default_external,
              s(:const,
                s(:const, nil, :Encoding), :UTF_8)),
            s(:args),
            s(:begin,
              s(:lvasgn, :cx,
                s(:send,
                  s(:const, nil, :EnvUtil), :labeled_class,
                  s(:str, "X🐱"))),
              s(:block,
                s(:send, nil, :assert_raise_with_message,
                  s(:const, nil, :TypeError),
                  s(:regexp,
                    s(:str, "X\\u{1f431}"),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:lvar, :o), :method,
                  s(:lvar, :cx))))))),
      s(:def, :test_bind_module_instance_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature4254,
            s(:str, "[ruby-core:34267]")),
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :M), :instance_method,
              s(:sym, :meth))),
          s(:send, nil, :assert_equal,
            s(:sym, :meth),
            s(:send,
              s(:send,
                s(:lvar, :m), :bind,
                s(:send,
                  s(:const, nil, :Object), :new)), :call),
            s(:lvar, :feature4254)))),
      s(:def, :test_define_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send,
              s(:lvar, :c), :class_eval),
            s(:args),
            s(:def, :foo,
              s(:args),
              s(:sym, :foo))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :c), :new)),
          s(:defs,
            s(:lvar, :o), :bar,
            s(:args),
            s(:sym, :bar)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :c), :class_eval),
              s(:args),
              s(:send, nil, :define_method,
                s(:sym, :foo),
                s(:sym, :foo)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :c), :class_eval),
              s(:args),
              s(:send, nil, :define_method))),
          s(:lvasgn, :c2,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :c))),
          s(:block,
            s(:send,
              s(:lvar, :c2), :class_eval),
            s(:args),
            s(:send, nil, :define_method,
              s(:sym, :baz),
              s(:send,
                s(:lvar, :o), :method,
                s(:sym, :foo)))),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:send,
                s(:lvar, :c2), :new), :baz)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Class), :new), :class_eval),
              s(:args),
              s(:send, nil, :define_method,
                s(:sym, :foo),
                s(:send,
                  s(:lvar, :o), :method,
                  s(:sym, :foo))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Class), :new), :class_eval),
              s(:args),
              s(:send, nil, :define_method,
                s(:sym, :bar),
                s(:send,
                  s(:lvar, :o), :method,
                  s(:sym, :bar))))),
          s(:block,
            s(:send,
              s(:const, nil, :EnvUtil), :with_default_external,
              s(:const,
                s(:const, nil, :Encoding), :UTF_8)),
            s(:args),
            s(:begin,
              s(:lvasgn, :cx,
                s(:send,
                  s(:const, nil, :EnvUtil), :labeled_class,
                  s(:str, "X🐱"))),
              s(:block,
                s(:send, nil, :assert_raise_with_message,
                  s(:const, nil, :TypeError),
                  s(:regexp,
                    s(:str, "X\\u{1F431}"),
                    s(:regopt))),
                s(:args),
                s(:block,
                  s(:send,
                    s(:const, nil, :Class), :new),
                  s(:args),
                  s(:block,
                    s(:send, nil, :define_method,
                      s(:lvar, :cx)),
                    s(:args), nil))))))),
      s(:def, :test_define_method_no_proc,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :foo,
            s(:args,
              s(:arg, :c)),
            s(:block,
              s(:send,
                s(:lvar, :c), :class_eval),
              s(:args),
              s(:send, nil, :define_method,
                s(:sym, :foo)))),
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :foo,
              s(:lvar, :c))),
          s(:lvasgn, :bug11283,
            s(:str, "[ruby-core:69655] [Bug #11283]")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError),
              s(:lvar, :bug11283)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :o), :foo,
                s(:lvar, :c)),
              s(:args),
              s(:sym, :foo))))),
      s(:def, :test_define_singleton_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send,
              s(:lvar, :o), :instance_eval),
            s(:args),
            s(:block,
              s(:send, nil, :define_singleton_method,
                s(:sym, :foo)),
              s(:args),
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :o), :foo)))),
      s(:def, :test_define_singleton_method_no_proc,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :o), :instance_eval),
              s(:args),
              s(:send, nil, :define_singleton_method,
                s(:sym, :bar)))),
          s(:lvasgn, :bug11283,
            s(:str, "[ruby-core:69655] [Bug #11283]")),
          s(:defs,
            s(:lvar, :o), :define,
            s(:args,
              s(:arg, :n)),
            s(:send, nil, :define_singleton_method,
              s(:lvar, :n))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :o), :define,
                s(:sym, :bar)),
              s(:args),
              s(:sym, :bar))))),
      s(:def, :test_define_method_invalid_arg,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Class), :new), :class_eval),
              s(:args),
              s(:send, nil, :define_method,
                s(:sym, :foo),
                s(:send,
                  s(:const, nil, :Object), :new)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Module), :new), :module_eval),
              s(:args),
              s(:send, nil, :define_method,
                s(:sym, :foo),
                s(:send,
                  s(:const, nil, :Base), :instance_method,
                  s(:sym, :foo))))))),
      s(:def, :test_define_singleton_method_with_extended_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8686,
            s(:str, "[ruby-core:56174]")),
          s(:lvasgn, :m,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:begin,
                s(:send, nil, :extend,
                  s(:self)),
                s(:def, :a,
                  s(:args),
                  s(:str, "a"))))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:lvar, :bug8686)),
            s(:args),
            s(:send,
              s(:lvar, :m), :define_singleton_method,
              s(:sym, :a),
              s(:send,
                s(:lvar, :m), :method,
                s(:sym, :a)))))),
      s(:def, :test_define_method_transplating,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature4254,
            s(:str, "[ruby-core:34267]")),
          s(:lvasgn, :m,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:send, nil, :define_method,
                s(:sym, :meth),
                s(:send,
                  s(:const, nil, :M), :instance_method,
                  s(:sym, :meth))))),
          s(:send, nil, :assert_equal,
            s(:sym, :meth),
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Object), :new), :extend,
                s(:lvar, :m)), :meth),
            s(:lvar, :feature4254)),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:send, nil, :define_method,
                s(:sym, :meth),
                s(:send,
                  s(:const, nil, :M), :instance_method,
                  s(:sym, :meth))))),
          s(:send, nil, :assert_equal,
            s(:sym, :meth),
            s(:send,
              s(:send,
                s(:lvar, :c), :new), :meth),
            s(:lvar, :feature4254)))),
      s(:def, :test_define_method_visibility,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:send, nil, :public),
                s(:block,
                  s(:send, nil, :define_method,
                    s(:sym, :foo)),
                  s(:args),
                  s(:sym, :foo)),
                s(:send, nil, :protected),
                s(:block,
                  s(:send, nil, :define_method,
                    s(:sym, :bar)),
                  s(:args),
                  s(:sym, :bar)),
                s(:send, nil, :private),
                s(:block,
                  s(:send, nil, :define_method,
                    s(:sym, :baz)),
                  s(:args),
                  s(:sym, :baz))))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :c), :public_method_defined?,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :public_method_defined?,
              s(:sym, :bar))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :public_method_defined?,
              s(:sym, :baz))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :protected_method_defined?,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :c), :protected_method_defined?,
              s(:sym, :bar))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :protected_method_defined?,
              s(:sym, :baz))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :private_method_defined?,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :private_method_defined?,
              s(:sym, :bar))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :c), :private_method_defined?,
              s(:sym, :baz))),
          s(:lvasgn, :m,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:begin,
                s(:send, nil, :module_function),
                s(:block,
                  s(:send, nil, :define_method,
                    s(:sym, :foo)),
                  s(:args),
                  s(:sym, :foo))))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :m), :respond_to?,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :m), :public_method_defined?,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :m), :protected_method_defined?,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :m), :private_method_defined?,
              s(:sym, :foo))))),
      s(:def, :test_define_method_in_private_scope,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9005,
            s(:str, "[ruby-core:57747] [Bug #9005]")),
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:sclass,
            s(:lvar, :c),
            s(:send, nil, :public,
              s(:sym, :define_method))),
          s(:send,
            s(:send,
              s(:const, nil, :TOPLEVEL_BINDING), :eval,
              s(:str, "proc{|c|c.define_method(:x) {|x|throw x}}")), :call,
            s(:lvar, :c)),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :c), :new)),
          s(:block,
            s(:send, nil, :assert_throw,
              s(:lvar, :bug9005)),
            s(:args),
            s(:send,
              s(:lvar, :o), :x,
              s(:lvar, :bug9005))))),
      s(:def, :test_singleton_define_method_in_private_scope,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9141,
            s(:str, "[ruby-core:58497] [Bug #9141]")),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:sclass,
            s(:lvar, :o),
            s(:send, nil, :public,
              s(:sym, :define_singleton_method))),
          s(:send,
            s(:send,
              s(:const, nil, :TOPLEVEL_BINDING), :eval,
              s(:str, "proc{|o|o.define_singleton_method(:x) {|x|throw x}}")), :call,
            s(:lvar, :o)),
          s(:block,
            s(:send, nil, :assert_throw,
              s(:lvar, :bug9141)),
            s(:args),
            s(:send,
              s(:lvar, :o), :x,
              s(:lvar, :bug9141))))),
      s(:def, :test_super_in_proc_from_define_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :c1,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:def, :m,
                s(:args),
                s(:sym, :m1)))),
          s(:lvasgn, :c2,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:lvar, :c1)),
              s(:args),
              s(:block,
                s(:send, nil, :define_method,
                  s(:sym, :m)),
                s(:args),
                s(:block,
                  s(:send,
                    s(:const, nil, :Proc), :new),
                  s(:args),
                  s(:super))))),
          s(:send, nil, :assert_equal,
            s(:sym, :m1),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :c2), :new), :m), :call),
            s(:str, "see [Bug #4881] and [Bug #3136]")))),
      s(:def, :test_clone,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :foo,
            s(:args),
            s(:sym, :foo)),
          s(:lvasgn, :m,
            s(:send,
              s(:lvar, :o), :method,
              s(:sym, :foo))),
          s(:defs,
            s(:lvar, :m), :bar,
            s(:args),
            s(:sym, :bar)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:send,
                s(:lvar, :m), :clone), :call)),
          s(:send, nil, :assert_equal,
            s(:sym, :bar),
            s(:send,
              s(:send,
                s(:lvar, :m), :clone), :bar)))),
      s(:def, :test_inspect,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :foo,
            s(:args), nil),
          s(:lvasgn, :m,
            s(:send,
              s(:lvar, :o), :method,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "#<Method: "),
              s(:begin,
                s(:send,
                  s(:lvar, :o), :inspect)),
              s(:str, ".foo>")),
            s(:send,
              s(:lvar, :m), :inspect)),
          s(:lvasgn, :m,
            s(:send,
              s(:lvar, :o), :method,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "#<UnboundMethod: "),
              s(:begin,
                s(:send,
                  s(:sclass,
                    s(:lvar, :o),
                    s(:self)), :inspect)),
              s(:str, "#foo>")),
            s(:send,
              s(:send,
                s(:lvar, :m), :unbind), :inspect)),
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send,
              s(:lvar, :c), :class_eval),
            s(:args),
            s(:def, :foo,
              s(:args), nil)),
          s(:lvasgn, :m,
            s(:send,
              s(:send,
                s(:lvar, :c), :new), :method,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "#<Method: "),
              s(:begin,
                s(:send,
                  s(:lvar, :c), :inspect)),
              s(:str, "#foo>")),
            s(:send,
              s(:lvar, :m), :inspect)),
          s(:lvasgn, :m,
            s(:send,
              s(:lvar, :c), :instance_method,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "#<UnboundMethod: "),
              s(:begin,
                s(:send,
                  s(:lvar, :c), :inspect)),
              s(:str, "#foo>")),
            s(:send,
              s(:lvar, :m), :inspect)),
          s(:lvasgn, :c2,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :c))),
          s(:block,
            s(:send,
              s(:lvar, :c2), :class_eval),
            s(:args),
            s(:send, nil, :private,
              s(:sym, :foo))),
          s(:lvasgn, :m2,
            s(:send,
              s(:send,
                s(:lvar, :c2), :new), :method,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "#<Method: "),
              s(:begin,
                s(:send,
                  s(:lvar, :c2), :inspect)),
              s(:str, "("),
              s(:begin,
                s(:send,
                  s(:lvar, :c), :inspect)),
              s(:str, ")#foo>")),
            s(:send,
              s(:lvar, :m2), :inspect)),
          s(:lvasgn, :bug7806,
            s(:str, "[ruby-core:52048] [Bug #7806]")),
          s(:lvasgn, :c3,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :c))),
          s(:block,
            s(:send,
              s(:lvar, :c3), :class_eval),
            s(:args),
            s(:alias,
              s(:sym, :bar),
              s(:sym, :foo))),
          s(:lvasgn, :m3,
            s(:send,
              s(:send,
                s(:lvar, :c3), :new), :method,
              s(:sym, :bar))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "#<Method: "),
              s(:begin,
                s(:send,
                  s(:lvar, :c3), :inspect)),
              s(:str, "("),
              s(:begin,
                s(:send,
                  s(:lvar, :c), :inspect)),
              s(:str, ")#bar(foo)>")),
            s(:send,
              s(:lvar, :m3), :inspect),
            s(:lvar, :bug7806)))),
      s(:def, :test_callee_top_level,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array),
          s(:str, "p __callee__"),
          s(:array,
            s(:str, "nil")),
          s(:array))),
      s(:def, :test_caller_top_level,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array),
          s(:str, "p caller"),
          s(:array,
            s(:str, "[]")),
          s(:array))),
      s(:def, :test_caller_negative_level,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:send, nil, :caller,
            s(:int, -1)))),
      s(:def, :test_attrset_ivar,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send,
              s(:lvar, :c), :class_eval),
            s(:args),
            s(:send, nil, :attr_accessor,
              s(:sym, :foo))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :c), :new)),
          s(:send,
            s(:send,
              s(:lvar, :o), :method,
              s(:sym, :foo=)), :call,
            s(:int, 42)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:lvar, :o), :foo)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send,
                s(:lvar, :o), :method,
                s(:sym, :foo=)), :call,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send,
                s(:lvar, :o), :method,
                s(:sym, :foo)), :call,
              s(:int, 1))))),
      s(:def, :test_default_accessibility,
        s(:args),
        s(:begin,
          s(:lvasgn, :tmethods,
            s(:send,
              s(:const, nil, :T), :public_instance_methods)),
          s(:send, nil, :assert_include,
            s(:lvar, :tmethods),
            s(:sym, :normal_method),
            s(:str, "normal methods are public by default")),
          s(:send, nil, :assert_not_include,
            s(:lvar, :tmethods),
            s(:sym, :initialize),
            s(:str, "#initialize is private")),
          s(:send, nil, :assert_not_include,
            s(:lvar, :tmethods),
            s(:sym, :initialize_copy),
            s(:str, "#initialize_copy is private")),
          s(:send, nil, :assert_not_include,
            s(:lvar, :tmethods),
            s(:sym, :initialize_clone),
            s(:str, "#initialize_clone is private")),
          s(:send, nil, :assert_not_include,
            s(:lvar, :tmethods),
            s(:sym, :initialize_dup),
            s(:str, "#initialize_dup is private")),
          s(:send, nil, :assert_not_include,
            s(:lvar, :tmethods),
            s(:sym, :respond_to_missing?),
            s(:str, "#respond_to_missing? is private")),
          s(:lvasgn, :mmethods,
            s(:send,
              s(:const, nil, :M), :public_instance_methods)),
          s(:send, nil, :assert_not_include,
            s(:lvar, :mmethods),
            s(:sym, :func),
            s(:str, "module methods are private by default")),
          s(:send, nil, :assert_include,
            s(:lvar, :mmethods),
            s(:sym, :meth),
            s(:str, "normal methods are public by default")))),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :pm0)),
        s(:args), nil),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :pm1)),
        s(:args,
          s(:arg, :a)), nil),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :pm2)),
        s(:args,
          s(:arg, :a),
          s(:arg, :b)), nil),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :pmo1)),
        s(:args,
          s(:optarg, :a,
            s(:nil)),
          s(:blockarg, :b)), nil),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :pmo2)),
        s(:args,
          s(:arg, :a),
          s(:optarg, :b,
            s(:nil))), nil),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :pmo3)),
        s(:args,
          s(:restarg, :a)), nil),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :pmo4)),
        s(:args,
          s(:arg, :a),
          s(:restarg, :b),
          s(:blockarg, :c)), nil),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :pmo5)),
        s(:args,
          s(:arg, :a),
          s(:restarg, :b),
          s(:arg, :c)), nil),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :pmo6)),
        s(:args,
          s(:arg, :a),
          s(:restarg, :b),
          s(:arg, :c),
          s(:blockarg, :d)), nil),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :pmo7)),
        s(:args,
          s(:arg, :a),
          s(:optarg, :b,
            s(:nil)),
          s(:restarg, :c),
          s(:arg, :d),
          s(:blockarg, :e)), nil),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :pma1)),
        s(:args,
          s(:mlhs,
            s(:arg, :a)),
          s(:blockarg, :b)),
        s(:and,
          s(:nil),
          s(:lvar, :a))),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :pmk1)),
        s(:args,
          s(:kwrestarg)), nil),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :pmk2)),
        s(:args,
          s(:kwrestarg, :o)), nil),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :pmk3)),
        s(:args,
          s(:arg, :a),
          s(:kwrestarg, :o)), nil),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :pmk4)),
        s(:args,
          s(:optarg, :a,
            s(:nil)),
          s(:kwrestarg, :o)), nil),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :pmk5)),
        s(:args,
          s(:arg, :a),
          s(:optarg, :b,
            s(:nil)),
          s(:kwrestarg, :o)), nil),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :pmk6)),
        s(:args,
          s(:arg, :a),
          s(:optarg, :b,
            s(:nil)),
          s(:arg, :c),
          s(:kwrestarg, :o)), nil),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :pmk7)),
        s(:args,
          s(:arg, :a),
          s(:optarg, :b,
            s(:nil)),
          s(:restarg, :c),
          s(:arg, :d),
          s(:kwrestarg, :o)), nil),
      s(:def, :test_bound_parameters,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :m0)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :m1)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :req),
                s(:sym, :b))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :m2)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :opt),
                s(:sym, :a)),
              s(:array,
                s(:sym, :block),
                s(:sym, :b))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mo1)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :opt),
                s(:sym, :b))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mo2)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :rest),
                s(:sym, :a))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mo3)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :rest),
                s(:sym, :b)),
              s(:array,
                s(:sym, :block),
                s(:sym, :c))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mo4)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :rest),
                s(:sym, :b)),
              s(:array,
                s(:sym, :req),
                s(:sym, :c))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mo5)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :rest),
                s(:sym, :b)),
              s(:array,
                s(:sym, :req),
                s(:sym, :c)),
              s(:array,
                s(:sym, :block),
                s(:sym, :d))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mo6)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :opt),
                s(:sym, :b)),
              s(:array,
                s(:sym, :rest),
                s(:sym, :c)),
              s(:array,
                s(:sym, :req),
                s(:sym, :d)),
              s(:array,
                s(:sym, :block),
                s(:sym, :e))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mo7)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req)),
              s(:array,
                s(:sym, :block),
                s(:sym, :b))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :ma1)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :keyrest))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mk1)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mk2)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mk3)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :opt),
                s(:sym, :a)),
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mk4)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :opt),
                s(:sym, :b)),
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mk5)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :opt),
                s(:sym, :b)),
              s(:array,
                s(:sym, :req),
                s(:sym, :c)),
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mk6)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :opt),
                s(:sym, :b)),
              s(:array,
                s(:sym, :rest),
                s(:sym, :c)),
              s(:array,
                s(:sym, :req),
                s(:sym, :d)),
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :mk7)), :parameters)))),
      s(:def, :test_unbound_parameters,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :m0)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :m1)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :req),
                s(:sym, :b))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :m2)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :opt),
                s(:sym, :a)),
              s(:array,
                s(:sym, :block),
                s(:sym, :b))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :mo1)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :opt),
                s(:sym, :b))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :mo2)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :rest),
                s(:sym, :a))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :mo3)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :rest),
                s(:sym, :b)),
              s(:array,
                s(:sym, :block),
                s(:sym, :c))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :mo4)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :rest),
                s(:sym, :b)),
              s(:array,
                s(:sym, :req),
                s(:sym, :c))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :mo5)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :rest),
                s(:sym, :b)),
              s(:array,
                s(:sym, :req),
                s(:sym, :c)),
              s(:array,
                s(:sym, :block),
                s(:sym, :d))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :mo6)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :opt),
                s(:sym, :b)),
              s(:array,
                s(:sym, :rest),
                s(:sym, :c)),
              s(:array,
                s(:sym, :req),
                s(:sym, :d)),
              s(:array,
                s(:sym, :block),
                s(:sym, :e))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :mo7)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req)),
              s(:array,
                s(:sym, :block),
                s(:sym, :b))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :ma1)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :keyrest))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :mk1)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :mk2)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :mk3)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :opt),
                s(:sym, :a)),
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :mk4)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :opt),
                s(:sym, :b)),
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :mk5)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :opt),
                s(:sym, :b)),
              s(:array,
                s(:sym, :req),
                s(:sym, :c)),
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :mk6)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :opt),
                s(:sym, :b)),
              s(:array,
                s(:sym, :rest),
                s(:sym, :c)),
              s(:array,
                s(:sym, :req),
                s(:sym, :d)),
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :mk7)), :parameters)))),
      s(:def, :test_bmethod_bound_parameters,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :pm0)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :pm1)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :req),
                s(:sym, :b))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :pm2)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :opt),
                s(:sym, :a)),
              s(:array,
                s(:sym, :block),
                s(:sym, :b))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :pmo1)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :opt),
                s(:sym, :b))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :pmo2)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :rest),
                s(:sym, :a))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :pmo3)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :rest),
                s(:sym, :b)),
              s(:array,
                s(:sym, :block),
                s(:sym, :c))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :pmo4)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :rest),
                s(:sym, :b)),
              s(:array,
                s(:sym, :req),
                s(:sym, :c))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :pmo5)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :rest),
                s(:sym, :b)),
              s(:array,
                s(:sym, :req),
                s(:sym, :c)),
              s(:array,
                s(:sym, :block),
                s(:sym, :d))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :pmo6)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :opt),
                s(:sym, :b)),
              s(:array,
                s(:sym, :rest),
                s(:sym, :c)),
              s(:array,
                s(:sym, :req),
                s(:sym, :d)),
              s(:array,
                s(:sym, :block),
                s(:sym, :e))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :pmo7)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req)),
              s(:array,
                s(:sym, :block),
                s(:sym, :b))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :pma1)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :keyrest))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :pmk1)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :pmk2)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :pmk3)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :opt),
                s(:sym, :a)),
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :pmk4)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :opt),
                s(:sym, :b)),
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :pmk5)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :opt),
                s(:sym, :b)),
              s(:array,
                s(:sym, :req),
                s(:sym, :c)),
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :pmk6)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :opt),
                s(:sym, :b)),
              s(:array,
                s(:sym, :rest),
                s(:sym, :c)),
              s(:array,
                s(:sym, :req),
                s(:sym, :d)),
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send, nil, :method,
                s(:sym, :pmk7)), :parameters)))),
      s(:def, :test_bmethod_unbound_parameters,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :pm0)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :pm1)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :req),
                s(:sym, :b))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :pm2)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :opt),
                s(:sym, :a)),
              s(:array,
                s(:sym, :block),
                s(:sym, :b))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :pmo1)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :opt),
                s(:sym, :b))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :pmo2)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :rest),
                s(:sym, :a))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :pmo3)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :rest),
                s(:sym, :b)),
              s(:array,
                s(:sym, :block),
                s(:sym, :c))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :pmo4)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :rest),
                s(:sym, :b)),
              s(:array,
                s(:sym, :req),
                s(:sym, :c))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :pmo5)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :rest),
                s(:sym, :b)),
              s(:array,
                s(:sym, :req),
                s(:sym, :c)),
              s(:array,
                s(:sym, :block),
                s(:sym, :d))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :pmo6)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :opt),
                s(:sym, :b)),
              s(:array,
                s(:sym, :rest),
                s(:sym, :c)),
              s(:array,
                s(:sym, :req),
                s(:sym, :d)),
              s(:array,
                s(:sym, :block),
                s(:sym, :e))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :pmo7)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req)),
              s(:array,
                s(:sym, :block),
                s(:sym, :b))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :pma1)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req)),
              s(:array,
                s(:sym, :block),
                s(:sym, :b))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :pma1)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :keyrest))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :pmk1)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :pmk2)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :pmk3)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :opt),
                s(:sym, :a)),
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :pmk4)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :opt),
                s(:sym, :b)),
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :pmk5)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :opt),
                s(:sym, :b)),
              s(:array,
                s(:sym, :req),
                s(:sym, :c)),
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :pmk6)), :parameters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :req),
                s(:sym, :a)),
              s(:array,
                s(:sym, :opt),
                s(:sym, :b)),
              s(:array,
                s(:sym, :rest),
                s(:sym, :c)),
              s(:array,
                s(:sym, :req),
                s(:sym, :d)),
              s(:array,
                s(:sym, :keyrest),
                s(:sym, :o))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :instance_method,
                s(:sym, :pmk7)), :parameters)))),
      s(:def, :test_public_method_with_zsuper_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send,
              s(:lvar, :c), :class_eval),
            s(:args),
            s(:begin,
              s(:def, :foo,
                s(:args),
                s(:sym, :ok)),
              s(:send, nil, :private,
                s(:sym, :foo)))),
          s(:lvasgn, :d,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :c))),
          s(:block,
            s(:send,
              s(:lvar, :d), :class_eval),
            s(:args),
            s(:send, nil, :public,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:sym, :ok),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :d), :new), :public_method,
                s(:sym, :foo)), :call)))),
      s(:def, :test_public_methods_with_extended,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:def, :m1,
                s(:args), nil))),
          s(:lvasgn, :a,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:def, :a,
                s(:args), nil))),
          s(:lvasgn, :bug,
            s(:str, "[ruby-dev:41553]")),
          s(:lvasgn, :obj,
            s(:send,
              s(:lvar, :a), :new)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :a)),
            s(:send,
              s(:lvar, :obj), :public_methods,
              s(:false)),
            s(:lvar, :bug)),
          s(:send,
            s(:lvar, :obj), :extend,
            s(:lvar, :m)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :m1),
              s(:sym, :a)),
            s(:send,
              s(:lvar, :obj), :public_methods,
              s(:false)),
            s(:lvar, :bug)))),
      s(:def, :test_visibility,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "method"),
            s(:defined?,
              s(:send, nil, :mv1))),
          s(:send, nil, :assert_equal,
            s(:str, "method"),
            s(:defined?,
              s(:send, nil, :mv2))),
          s(:send, nil, :assert_equal,
            s(:str, "method"),
            s(:defined?,
              s(:send, nil, :mv3))),
          s(:send, nil, :assert_equal,
            s(:str, "method"),
            s(:defined?,
              s(:send,
                s(:self), :mv1))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:defined?,
              s(:send,
                s(:self), :mv2))),
          s(:send, nil, :assert_equal,
            s(:str, "method"),
            s(:defined?,
              s(:send,
                s(:self), :mv3))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send, nil, :respond_to?,
              s(:sym, :mv1))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send, nil, :respond_to?,
              s(:sym, :mv2))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send, nil, :respond_to?,
              s(:sym, :mv3))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send, nil, :respond_to?,
              s(:sym, :mv1),
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send, nil, :respond_to?,
              s(:sym, :mv2),
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send, nil, :respond_to?,
              s(:sym, :mv3),
              s(:true))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send, nil, :mv1)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send, nil, :mv2)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send, nil, :mv3)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:self), :mv1)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:self), :mv2)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:self), :mv3)),
          s(:lvasgn, :v,
            s(:send,
              s(:const, nil, :Visibility), :new)),
          s(:send, nil, :assert_equal,
            s(:str, "method"),
            s(:defined?,
              s(:send,
                s(:lvar, :v), :mv1))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:defined?,
              s(:send,
                s(:lvar, :v), :mv2))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:defined?,
              s(:send,
                s(:lvar, :v), :mv3))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :v), :respond_to?,
              s(:sym, :mv1))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :v), :respond_to?,
              s(:sym, :mv2))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :v), :respond_to?,
              s(:sym, :mv3))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :v), :respond_to?,
              s(:sym, :mv1),
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :v), :respond_to?,
              s(:sym, :mv2),
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :v), :respond_to?,
              s(:sym, :mv3),
              s(:true))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:lvar, :v), :mv1)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:lvar, :v), :mv2)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:lvar, :v), :mv3)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:lvar, :v), :__send__,
              s(:sym, :mv1))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:lvar, :v), :__send__,
              s(:sym, :mv2))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:lvar, :v), :__send__,
              s(:sym, :mv3))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :v), :instance_eval),
              s(:args),
              s(:send, nil, :mv1))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :v), :instance_eval),
              s(:args),
              s(:send, nil, :mv2))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :v), :instance_eval),
              s(:args),
              s(:send, nil, :mv3))))),
      s(:def, :test_bound_method_entry,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6171,
            s(:str, "[ruby-core:43383]")),
          s(:send, nil, :assert_ruby_status,
            s(:array),
            s(:dstr,
              s(:str, "      class Bug6171\n"),
              s(:str, "        def initialize(target)\n"),
              s(:str, "          define_singleton_method(:reverse, target.method(:reverse).to_proc)\n"),
              s(:str, "        end\n"),
              s(:str, "      end\n"),
              s(:str, "      100.times {p = Bug6171.new('test'); 1000.times {p.reverse}}\n")),
            s(:lvar, :bug6171)))),
      s(:def, :test_unbound_method_proc_coerce,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Class), :new),
            s(:args),
            s(:send, nil, :define_method,
              s(:str, "foo"),
              s(:block_pass,
                s(:send,
                  s(:const, nil, :Object), :instance_method,
                  s(:sym, :to_s))))))),
      s(:def, :test___dir__,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :String),
            s(:send, nil, :__dir__)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:send,
                s(:const, nil, :File), :realpath,
                s(:str, "(string)"))),
            s(:send, nil, :__dir__)),
          s(:lvasgn, :bug8436,
            s(:str, "[ruby-core:55123] [Bug #8436]")),
          s(:send, nil, :assert_equal,
            s(:send, nil, :__dir__),
            s(:send, nil, :eval,
              s(:str, "__dir__"),
              s(:send, nil, :binding)),
            s(:lvar, :bug8436)),
          s(:lvasgn, :bug8662,
            s(:str, "[ruby-core:56099] [Bug #8662]")),
          s(:send, nil, :assert_equal,
            s(:str, "arbitrary"),
            s(:send, nil, :eval,
              s(:str, "__dir__"),
              s(:send, nil, :binding),
              s(:str, "arbitrary/file.rb")),
            s(:lvar, :bug8662)),
          s(:send, nil, :assert_equal,
            s(:str, "arbitrary"),
            s(:send,
              s(:send,
                s(:const, nil, :Object), :new), :instance_eval,
              s(:str, "__dir__"),
              s(:str, "arbitrary/file.rb")),
            s(:lvar, :bug8662)))),
      s(:def, :test_alias_owner,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7613,
            s(:str, "[ruby-core:51105]")),
          s(:lvasgn, :bug7993,
            s(:str, "[Bug #7993]")),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:def, :foo,
                  s(:args), nil),
                s(:send, nil, :prepend,
                  s(:send,
                    s(:const, nil, :Module), :new)),
                s(:send, nil, :attr_reader,
                  s(:sym, :zot))))),
          s(:lvasgn, :x,
            s(:send,
              s(:lvar, :c), :new)),
          s(:sclass,
            s(:lvar, :x),
            s(:alias,
              s(:sym, :bar),
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:send,
              s(:send,
                s(:lvar, :c), :instance_method,
                s(:sym, :foo)), :owner)),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:send,
              s(:send,
                s(:lvar, :x), :method,
                s(:sym, :foo)), :owner)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :x), :singleton_class),
            s(:send,
              s(:send,
                s(:lvar, :x), :method,
                s(:sym, :bar)), :owner)),
          s(:send, nil, :assert_not_equal,
            s(:send,
              s(:lvar, :x), :method,
              s(:sym, :foo)),
            s(:send,
              s(:lvar, :x), :method,
              s(:sym, :bar)),
            s(:lvar, :bug7613)),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:send,
              s(:send,
                s(:lvar, :x), :method,
                s(:sym, :zot)), :owner),
            s(:lvar, :bug7993)),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:send,
              s(:send,
                s(:lvar, :c), :instance_method,
                s(:sym, :zot)), :owner),
            s(:lvar, :bug7993)))),
      s(:def, :test_included,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:def, :foo,
                s(:args), nil))),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:def, :foo,
                  s(:args), nil),
                s(:send, nil, :include,
                  s(:lvar, :m))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:send,
              s(:send,
                s(:lvar, :c), :instance_method,
                s(:sym, :foo)), :owner)))),
      s(:def, :test_prepended,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7836,
            s(:str, "[ruby-core:52160] [Bug #7836]")),
          s(:lvasgn, :bug7988,
            s(:str, "[ruby-core:53038] [Bug #7988]")),
          s(:lvasgn, :m,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:def, :foo,
                s(:args), nil))),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:def, :foo,
                  s(:args), nil),
                s(:send, nil, :prepend,
                  s(:lvar, :m))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError),
              s(:lvar, :bug7988)),
            s(:args),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Module), :new),
                s(:args),
                s(:send, nil, :prepend,
                  s(:lvar, :m))), :instance_method,
              s(:sym, :bar))),
          s(:or,
            s(:or,
              s(:true),
              s(:lvar, :c)),
            s(:lvar, :bug7836)))),
      s(:def, :test_gced_bmethod,
        s(:args),
        s(:send, nil, :assert_normal_exit,
          s(:dstr,
            s(:str, "\n"),
            s(:str, "      require 'irb'\n"),
            s(:str, "      IRB::Irb.module_eval do\n"),
            s(:str, "        define_method(:eval_input) do\n"),
            s(:str, "          IRB::Irb.module_eval { alias_method :eval_input, :to_s }\n"),
            s(:str, "          GC.start\n"),
            s(:str, "          Kernel\n"),
            s(:str, "        end\n"),
            s(:str, "      end\n"),
            s(:str, "      IRB.start\n"),
            s(:str, "    ")),
          s(:str, "[Bug #7825]"))),
      s(:def, :test_singleton_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature8391,
            s(:str, "[ruby-core:54914] [Feature #8391]")),
          s(:lvasgn, :c1,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send,
              s(:lvar, :c1), :class_eval),
            s(:args),
            s(:def, :foo,
              s(:args),
              s(:sym, :foo))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :c1), :new)),
          s(:defs,
            s(:lvar, :o), :bar,
            s(:args),
            s(:sym, :bar)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :method,
              s(:sym, :foo))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError),
              s(:lvar, :feature8391)),
            s(:args),
            s(:send,
              s(:lvar, :o), :singleton_method,
              s(:sym, :foo))),
          s(:lvasgn, :m,
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:const, nil, :NameError),
                s(:lvar, :feature8391)),
              s(:args),
              s(:break,
                s(:send,
                  s(:lvar, :o), :singleton_method,
                  s(:sym, :bar))))),
          s(:send, nil, :assert_equal,
            s(:sym, :bar),
            s(:send,
              s(:lvar, :m), :call),
            s(:lvar, :feature8391)))),
      s(:casgn, nil, :Feature9783,
        s(:str, "[ruby-core:62212] [Feature #9783]")),
      s(:def, :assert_curry_three_args,
        s(:args,
          s(:arg, :m)),
        s(:begin,
          s(:lvasgn, :curried,
            s(:send,
              s(:lvar, :m), :curry)),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :curried), :call,
                  s(:int, 1)), :call,
                s(:int, 2)), :call,
              s(:int, 3)),
            s(:const, nil, :Feature9783)),
          s(:lvasgn, :curried,
            s(:send,
              s(:lvar, :m), :curry,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :curried), :call,
                  s(:int, 1)), :call,
                s(:int, 2)), :call,
              s(:int, 3)),
            s(:const, nil, :Feature9783)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:regexp,
                s(:str, "wrong number"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :m), :curry,
              s(:int, 2))))),
      s(:def, :test_curry_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:def, :three_args,
                s(:args,
                  s(:arg, :a),
                  s(:arg, :b),
                  s(:arg, :c)),
                s(:send,
                  s(:send,
                    s(:lvar, :a), :+,
                    s(:lvar, :b)), :+,
                  s(:lvar, :c))))),
          s(:send, nil, :assert_curry_three_args,
            s(:send,
              s(:send,
                s(:lvar, :c), :new), :method,
              s(:sym, :three_args))))),
      s(:def, :test_curry_from_proc,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:block,
                s(:send, nil, :define_method,
                  s(:sym, :three_args)),
                s(:args,
                  s(:arg, :a),
                  s(:arg, :b),
                  s(:arg, :c)),
                s(:send,
                  s(:send,
                    s(:lvar, :a), :+,
                    s(:lvar, :b)), :+,
                  s(:lvar, :c))))),
          s(:send, nil, :assert_curry_three_args,
            s(:send,
              s(:send,
                s(:lvar, :c), :new), :method,
              s(:sym, :three_args))))),
      s(:def, :assert_curry_var_args,
        s(:args,
          s(:arg, :m)),
        s(:begin,
          s(:lvasgn, :curried,
            s(:send,
              s(:lvar, :m), :curry,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :curried), :call,
                  s(:int, 1)), :call,
                s(:int, 2)), :call,
              s(:int, 3)),
            s(:const, nil, :Feature9783)),
          s(:lvasgn, :curried,
            s(:send,
              s(:lvar, :m), :curry,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:lvar, :curried), :call,
                s(:int, 1)), :call,
              s(:int, 2)),
            s(:const, nil, :Feature9783)),
          s(:lvasgn, :curried,
            s(:send,
              s(:lvar, :m), :curry,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:lvar, :curried), :call,
              s(:int, 1)),
            s(:const, nil, :Feature9783)))),
      s(:def, :test_curry_var_args,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:def, :var_args,
                s(:args,
                  s(:restarg, :args)),
                s(:lvar, :args)))),
          s(:send, nil, :assert_curry_var_args,
            s(:send,
              s(:send,
                s(:lvar, :c), :new), :method,
              s(:sym, :var_args))))),
      s(:def, :test_curry_from_proc_var_args,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:block,
                s(:send, nil, :define_method,
                  s(:sym, :var_args)),
                s(:args,
                  s(:restarg, :args)),
                s(:lvar, :args)))),
          s(:send, nil, :assert_curry_var_args,
            s(:send,
              s(:send,
                s(:lvar, :c), :new), :method,
              s(:sym, :var_args))))),
      s(:casgn, nil, :Feature9781,
        s(:str, "[ruby-core:62202] [Feature #9781]")),
      s(:def, :test_super_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Derived), :new)),
          s(:lvasgn, :m,
            s(:send,
              s(:send,
                s(:lvar, :o), :method,
                s(:sym, :foo)), :super_method)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :Base),
            s(:send,
              s(:lvar, :m), :owner),
            s(:const, nil, :Feature9781)),
          s(:send, nil, :assert_same,
            s(:lvar, :o),
            s(:send,
              s(:lvar, :m), :receiver),
            s(:const, nil, :Feature9781)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :m), :name),
            s(:const, nil, :Feature9781)),
          s(:lvasgn, :m,
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:const, nil, :NameError),
                s(:const, nil, :Feature9781)),
              s(:args),
              s(:break,
                s(:send,
                  s(:lvar, :m), :super_method)))),
          s(:send, nil, :assert_nil,
            s(:lvar, :m),
            s(:const, nil, :Feature9781)))),
      s(:def, :test_super_method_unbound,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Derived), :instance_method,
              s(:sym, :foo))),
          s(:lvasgn, :m,
            s(:send,
              s(:lvar, :m), :super_method)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Base), :instance_method,
              s(:sym, :foo)),
            s(:lvar, :m),
            s(:const, nil, :Feature9781)),
          s(:lvasgn, :m,
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:const, nil, :NameError),
                s(:const, nil, :Feature9781)),
              s(:args),
              s(:break,
                s(:send,
                  s(:lvar, :m), :super_method)))),
          s(:send, nil, :assert_nil,
            s(:lvar, :m),
            s(:const, nil, :Feature9781)),
          s(:lvasgn, :bug11419,
            s(:str, "[ruby-core:70254]")),
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Object), :instance_method,
              s(:sym, :tap))),
          s(:lvasgn, :m,
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:const, nil, :NameError),
                s(:lvar, :bug11419)),
              s(:args),
              s(:break,
                s(:send,
                  s(:lvar, :m), :super_method)))),
          s(:send, nil, :assert_nil,
            s(:lvar, :m),
            s(:lvar, :bug11419)))),
      s(:def, :test_super_method_module,
        s(:args),
        s(:begin,
          s(:lvasgn, :m1,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:def, :foo,
                s(:args), nil))),
          s(:lvasgn, :c1,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:const, nil, :Derived)),
              s(:args),
              s(:begin,
                s(:send, nil, :include,
                  s(:lvar, :m1)),
                s(:def, :foo,
                  s(:args), nil)))),
          s(:lvasgn, :m,
            s(:send,
              s(:lvar, :c1), :instance_method,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:lvar, :c1),
            s(:send,
              s(:lvar, :m), :owner),
            s(:const, nil, :Feature9781)),
          s(:lvasgn, :m,
            s(:send,
              s(:lvar, :m), :super_method)),
          s(:send, nil, :assert_equal,
            s(:lvar, :m1),
            s(:send,
              s(:lvar, :m), :owner),
            s(:const, nil, :Feature9781)),
          s(:lvasgn, :m,
            s(:send,
              s(:lvar, :m), :super_method)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :Derived),
            s(:send,
              s(:lvar, :m), :owner),
            s(:const, nil, :Feature9781)),
          s(:lvasgn, :m,
            s(:send,
              s(:lvar, :m), :super_method)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :Base),
            s(:send,
              s(:lvar, :m), :owner),
            s(:const, nil, :Feature9781)),
          s(:lvasgn, :m2,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:def, :foo,
                s(:args), nil))),
          s(:lvasgn, :o,
            s(:send,
              s(:send,
                s(:lvar, :c1), :new), :extend,
              s(:lvar, :m2))),
          s(:lvasgn, :m,
            s(:send,
              s(:lvar, :o), :method,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:lvar, :m2),
            s(:send,
              s(:lvar, :m), :owner),
            s(:const, nil, :Feature9781)),
          s(:lvasgn, :m,
            s(:send,
              s(:lvar, :m), :super_method)),
          s(:send, nil, :assert_equal,
            s(:lvar, :c1),
            s(:send,
              s(:lvar, :m), :owner),
            s(:const, nil, :Feature9781)),
          s(:send, nil, :assert_same,
            s(:lvar, :o),
            s(:send,
              s(:lvar, :m), :receiver),
            s(:const, nil, :Feature9781)))),
      s(:def, :test_super_method_removed,
        s(:args),
        s(:begin,
          s(:lvasgn, :c1,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:send, nil, :private,
                s(:def, :foo,
                  s(:args), nil)))),
          s(:lvasgn, :c2,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:lvar, :c1)),
              s(:args),
              s(:send, nil, :public,
                s(:sym, :foo)))),
          s(:lvasgn, :c3,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:lvar, :c2)),
              s(:args),
              s(:def, :foo,
                s(:args), nil))),
          s(:block,
            s(:send,
              s(:lvar, :c1), :class_eval),
            s(:args),
            s(:undef,
              s(:sym, :foo))),
          s(:lvasgn, :m,
            s(:send,
              s(:lvar, :c3), :instance_method,
              s(:sym, :foo))),
          s(:lvasgn, :m,
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:const, nil, :NameError),
                s(:const, nil, :Feature9781)),
              s(:args),
              s(:break,
                s(:send,
                  s(:lvar, :m), :super_method)))),
          s(:send, nil, :assert_nil,
            s(:lvar, :m),
            s(:const, nil, :Feature9781)))),
      s(:def, :test_prepended_public_zsuper,
        s(:args),
        s(:begin,
          s(:lvasgn, :mod,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :labeled_module,
                s(:str, "Mod")),
              s(:args),
              s(:send, nil, :private,
                s(:def, :foo,
                  s(:args),
                  s(:sym, :ok))))),
          s(:lvasgn, :mods,
            s(:array,
              s(:lvar, :mod))),
          s(:lvasgn, :obj,
            s(:send,
              s(:send,
                s(:const, nil, :Object), :new), :extend,
              s(:lvar, :mod))),
          s(:sclass,
            s(:lvar, :obj),
            s(:send, nil, :public,
              s(:sym, :foo))),
          s(:block,
            s(:send,
              s(:int, 2), :times),
            s(:args,
              s(:arg, :i)),
            s(:begin,
              s(:send,
                s(:lvar, :mods), :unshift,
                s(:lvasgn, :mod,
                  s(:block,
                    s(:send,
                      s(:const, nil, :EnvUtil), :labeled_module,
                      s(:dstr,
                        s(:str, "Mod"),
                        s(:begin,
                          s(:lvar, :i)))),
                    s(:args),
                    s(:def, :foo,
                      s(:args), nil)))),
              s(:send,
                s(:send,
                  s(:lvar, :obj), :singleton_class), :prepend,
                s(:lvar, :mod)))),
          s(:lvasgn, :m,
            s(:send,
              s(:lvar, :obj), :method,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:lvar, :mods),
            s(:block,
              s(:send,
                s(:lvar, :mods), :map),
              s(:args),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :m), :owner), :tap),
                s(:args),
                s(:lvasgn, :m,
                  s(:send,
                    s(:lvar, :m), :super_method))))),
          s(:send, nil, :assert_nil,
            s(:lvar, :m)))),
      s(:def, :rest_parameter,
        s(:args,
          s(:restarg, :rest)),
        s(:lvar, :rest)),
      s(:def, :test_splat_long_array,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:int, 10000000)),
          s(:send, nil, :assert_equal,
            s(:lvar, :n),
            s(:send,
              s(:send, nil, :rest_parameter,
                s(:splat,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:lvar, :n))))), :size),
            s(:str, "[Feature #10440]")))),
      s(:class,
        s(:const, nil, :C), nil,
        s(:begin,
          s(:casgn, nil, :D,
            s(:str, "Const_D")),
          s(:def, :foo,
            s(:args),
            s(:lvasgn, :a,
              s(:lvasgn, :b,
                s(:lvasgn, :c,
                  s(:int, 12345))))))),
      s(:def, :test_to_proc_binding,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug11012,
            s(:str, "[ruby-core:68673] [Bug #11012]")),
          s(:lvasgn, :b,
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :C), :new), :method,
                  s(:sym, :foo)), :to_proc), :binding)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :b), :local_variables)),
          s(:send, nil, :assert_equal,
            s(:str, "Const_D"),
            s(:send,
              s(:lvar, :b), :eval,
              s(:str, "D"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :b), :local_variable_get,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:int, 123),
            s(:send,
              s(:lvar, :b), :local_variable_set,
              s(:sym, :foo),
              s(:int, 123))),
          s(:send, nil, :assert_equal,
            s(:int, 123),
            s(:send,
              s(:lvar, :b), :local_variable_get,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:int, 456),
            s(:send,
              s(:lvar, :b), :local_variable_set,
              s(:sym, :bar),
              s(:int, 456))),
          s(:send, nil, :assert_equal,
            s(:int, 123),
            s(:send,
              s(:lvar, :b), :local_variable_get,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:int, 456),
            s(:send,
              s(:lvar, :b), :local_variable_get,
              s(:sym, :bar))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :bar),
              s(:sym, :foo)),
            s(:send,
              s(:send,
                s(:lvar, :b), :local_variables), :sort)))),
      s(:class,
        s(:const, nil, :MethodInMethodClass), nil,
        s(:begin,
          s(:def, :m1,
            s(:args),
            s(:begin,
              s(:def, :m2,
                s(:args), nil),
              s(:block,
                s(:send,
                  s(:send,
                    s(:self), :class), :send,
                  s(:sym, :define_method),
                  s(:sym, :m3)),
                s(:args), nil))),
          s(:send, nil, :private))),
      s(:def, :test_method_in_method_visibility_should_be_public,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:sym, :m1)), :sort),
            s(:send,
              s(:send,
                s(:const, nil, :MethodInMethodClass), :public_instance_methods,
                s(:false)), :sort)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array), :sort),
            s(:send,
              s(:send,
                s(:const, nil, :MethodInMethodClass), :private_instance_methods,
                s(:false)), :sort)),
          s(:send,
            s(:send,
              s(:const, nil, :MethodInMethodClass), :new), :m1),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:sym, :m1),
                s(:sym, :m2),
                s(:sym, :m3)), :sort),
            s(:send,
              s(:send,
                s(:const, nil, :MethodInMethodClass), :public_instance_methods,
                s(:false)), :sort)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array), :sort),
            s(:send,
              s(:send,
                s(:const, nil, :MethodInMethodClass), :private_instance_methods,
                s(:false)), :sort)))),
      s(:def, :test_define_method_with_symbol,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_normal_exit,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "      define_method(:foo, &:to_s)\n"),
              s(:str, "      define_method(:bar, :to_s.to_proc)\n"),
              s(:str, "    ")),
            s(:str, "[Bug #11850]")),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:send, nil, :define_method,
                  s(:sym, :foo),
                  s(:block_pass,
                    s(:sym, :to_s))),
                s(:send, nil, :define_method,
                  s(:sym, :bar),
                  s(:send,
                    s(:sym, :to_s), :to_proc))))),
          s(:lvasgn, :obj,
            s(:send,
              s(:lvar, :c), :new)),
          s(:send, nil, :assert_equal,
            s(:str, "1"),
            s(:send,
              s(:lvar, :obj), :foo,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "1"),
            s(:send,
              s(:lvar, :obj), :bar,
              s(:int, 1))))))))
