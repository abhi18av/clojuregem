s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:casgn, nil, :ConstTest,
    s(:int, 3)),
  s(:class,
    s(:const, nil, :Class), nil,
    s(:begin,
      s(:alias,
        s(:sym, :_remove_const),
        s(:sym, :remove_const)),
      s(:send, nil, :public,
        s(:sym, :_remove_const)))),
  s(:class,
    s(:const, nil, :TestBasicInstructions),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_immediates,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:begin,
              s(:send,
                s(:int, 1), :==,
                s(:int, 1))),
            s(:true)),
          s(:send, nil, :assert_equal,
            s(:begin,
              s(:send,
                s(:int, 1), :==,
                s(:int, 2))),
            s(:false)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array), :[],
              s(:int, 0)),
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "sym"), :intern),
            s(:sym, :sym)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "sym"), :intern),
            s(:sym, :sym)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 1234), :+,
              s(:int, 0)),
            s(:int, 1234)),
          s(:send, nil, :assert_equal,
            s(:int, 1234),
            s(:int, 1234)),
          s(:send, nil, :assert_equal,
            s(:int, 41),
            s(:int, 41)),
          s(:send, nil, :assert_equal,
            s(:int, 420),
            s(:int, 420)),
          s(:send, nil, :assert_equal,
            s(:int, 18),
            s(:int, 18)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 123456789012345678901234567890), :+,
              s(:int, 0)),
            s(:int, 123456789012345678901234567890)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:float, 1.234), :+,
              s(:float, 0.0)),
            s(:float, 1.234)))),
      s(:def, :test_self,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:self),
            s(:self)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:begin,
              s(:send,
                s(:self), :==,
                s(:false)))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:begin,
              s(:send,
                s(:self), :==,
                s(:nil)))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:begin,
              s(:send,
                s(:self), :==,
                s(:int, 0)))))),
      s(:def, :test_string,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:send,
              s(:str, "str"), :+,
              s(:str, "ing"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:str, "string")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:str, "string")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:str, "string")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:str, "string")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:str, "string")))),
      s(:def, :test_dstring,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "2"),
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:int, 1), :+,
                  s(:int, 1))))),
          s(:lvasgn, :s,
            s(:str, "OK")),
          s(:send, nil, :assert_equal,
            s(:str, "OK"),
            s(:dstr,
              s(:begin,
                s(:lvar, :s)))),
          s(:send, nil, :assert_equal,
            s(:str, "OKx"),
            s(:dstr,
              s(:begin,
                s(:lvar, :s)),
              s(:str, "x"))),
          s(:send, nil, :assert_equal,
            s(:str, "xOK"),
            s(:dstr,
              s(:str, "x"),
              s(:begin,
                s(:lvar, :s)))),
          s(:send, nil, :assert_equal,
            s(:str, "xOKx"),
            s(:dstr,
              s(:str, "x"),
              s(:begin,
                s(:lvar, :s)),
              s(:str, "x"))))),
      s(:def, :test_dsym,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:sym, :a3c),
            s(:dsym,
              s(:str, "a"),
              s(:begin,
                s(:send,
                  s(:int, 1), :+,
                  s(:int, 2))),
              s(:str, "c"))),
          s(:lvasgn, :s,
            s(:str, "sym")),
          s(:send, nil, :assert_equal,
            s(:sym, :sym),
            s(:dsym,
              s(:begin,
                s(:lvar, :s)))),
          s(:send, nil, :assert_equal,
            s(:sym, :sym),
            s(:dsym,
              s(:begin,
                s(:dstr,
                  s(:begin,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :s)))))))))),
      s(:def, :test_xstr,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "hoge"),
            s(:send,
              s(:xstr,
                s(:str, "echo hoge")), :chomp)),
          s(:send, nil, :assert_equal,
            s(:str, "3"),
            s(:send,
              s(:xstr,
                s(:str, "echo "),
                s(:begin,
                  s(:send,
                    s(:int, 1), :+,
                    s(:int, 2)))), :chomp)),
          s(:lvasgn, :hoge,
            s(:str, "huga")),
          s(:send, nil, :assert_equal,
            s(:str, "huga"),
            s(:send,
              s(:xstr,
                s(:str, "echo "),
                s(:begin,
                  s(:lvar, :hoge))), :chomp)))),
      s(:def, :test_regexp,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:regexp,
              s(:str, "test"),
              s(:regopt)),
            s(:regexp,
              s(:str, "test"),
              s(:regopt))),
          s(:send, nil, :assert_equal,
            s(:str, "test"),
            s(:send,
              s(:regexp,
                s(:str, "test"),
                s(:regopt)), :source)),
          s(:send, nil, :assert_equal,
            s(:str, "TEST"),
            s(:send,
              s(:regexp,
                s(:str, "TEST"),
                s(:regopt)), :source)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:begin,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "test"),
                      s(:regopt)),
                    s(:str, "test"))), :!), :!)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send,
                s(:begin,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "test"),
                      s(:regopt)),
                    s(:str, "does not match"))), :!), :!)),
          s(:lvasgn, :re,
            s(:regexp,
              s(:str, "test"),
              s(:regopt))),
          s(:send, nil, :assert_equal,
            s(:lvar, :re),
            s(:lvar, :re)),
          s(:send, nil, :assert_equal,
            s(:str, "test"),
            s(:send,
              s(:lvar, :re), :source)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:lvar, :re), :=~,
                    s(:str, "test"))), :!), :!)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:lvar, :re), :=~,
                    s(:str, "does not match"))), :!), :!)),
          s(:send, nil, :assert_equal,
            s(:regexp,
              s(:str, "x"),
              s(:begin,
                s(:send,
                  s(:int, 1), :+,
                  s(:int, 1))),
              s(:str, "x"),
              s(:regopt)),
            s(:regexp,
              s(:str, "x"),
              s(:begin,
                s(:send,
                  s(:int, 1), :+,
                  s(:int, 1))),
              s(:str, "x"),
              s(:regopt))),
          s(:lvasgn, :s,
            s(:str, "OK")),
          s(:send, nil, :assert_equal,
            s(:regexp,
              s(:str, "x"),
              s(:begin,
                s(:lvar, :s)),
              s(:str, "x"),
              s(:regopt)),
            s(:regexp,
              s(:str, "x"),
              s(:begin,
                s(:lvar, :s)),
              s(:str, "x"),
              s(:regopt))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:regexp,
                      s(:str, "x"),
                      s(:begin,
                        s(:lvar, :s)),
                      s(:str, "x"),
                      s(:regopt)), :=~,
                    s(:str, "xOKx"))), :!), :!)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:regexp,
                      s(:str, "x"),
                      s(:begin,
                        s(:lvar, :s)),
                      s(:str, "x"),
                      s(:regopt)), :=~,
                    s(:str, "does not match"))), :!), :!)),
          s(:lvasgn, :s,
            s(:str, "OK")),
          s(:lvasgn, :prev,
            s(:nil)),
          s(:block,
            s(:send,
              s(:int, 3), :times),
            s(:args),
            s(:begin,
              s(:lvasgn, :re,
                s(:regexp,
                  s(:begin,
                    s(:lvar, :s)),
                  s(:regopt, :o))),
              s(:if,
                s(:lvar, :prev),
                s(:send, nil, :assert_same,
                  s(:lvar, :prev),
                  s(:lvar, :re)), nil),
              s(:lvasgn, :prev,
                s(:lvar, :re)))))),
      s(:def, :test_array,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:array), :size)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 3),
              s(:int, 7),
              s(:int, 11)),
            s(:array,
              s(:send,
                s(:int, 1), :+,
                s(:int, 2)),
              s(:send,
                s(:int, 3), :+,
                s(:int, 4)),
              s(:send,
                s(:int, 5), :+,
                s(:int, 6)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1)),
              s(:array,
                s(:int, 2)),
              s(:array,
                s(:int, 3))),
            s(:array,
              s(:array,
                s(:int, 1)),
              s(:array,
                s(:int, 2)),
              s(:array,
                s(:int, 3)))),
          s(:lvasgn, :a,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :a), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :a), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :a), :[],
              s(:int, 2))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :a), :[],
              s(:int, 3))),
          s(:lvasgn, :a,
            s(:array,
              s(:str, "a"),
              s(:str, "b"),
              s(:str, "c"))),
          s(:send, nil, :assert_equal,
            s(:str, "a"),
            s(:send,
              s(:lvar, :a), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "b"),
            s(:send,
              s(:lvar, :a), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "c"),
            s(:send,
              s(:lvar, :a), :[],
              s(:int, 2))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :a), :[],
              s(:int, 3))))),
      s(:def, :test_hash,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:hash)),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:int, 1),
                s(:int, 2))),
            s(:hash,
              s(:pair,
                s(:int, 1),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:int, 1),
                s(:int, 2)),
              s(:pair,
                s(:int, 3),
                s(:int, 4))),
            s(:hash,
              s(:pair,
                s(:int, 1),
                s(:int, 2)),
              s(:pair,
                s(:int, 3),
                s(:int, 4)))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:int, 1),
                s(:int, 2)),
              s(:pair,
                s(:int, 3),
                s(:int, 4))),
            s(:hash,
              s(:pair,
                s(:int, 3),
                s(:int, 4)),
              s(:pair,
                s(:int, 1),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "key"),
                s(:str, "val"))),
            s(:hash,
              s(:pair,
                s(:str, "key"),
                s(:str, "val")))))),
      s(:def, :test_range,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:begin,
              s(:irange,
                s(:int, 1),
                s(:int, 3))),
            s(:begin,
              s(:irange,
                s(:int, 1),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:begin,
              s(:erange,
                s(:int, 1),
                s(:int, 3))),
            s(:begin,
              s(:erange,
                s(:int, 1),
                s(:int, 3)))),
          s(:send, nil, :assert_not_equal,
            s(:begin,
              s(:erange,
                s(:int, 1),
                s(:int, 3))),
            s(:begin,
              s(:irange,
                s(:int, 1),
                s(:int, 3)))),
          s(:send, nil, :assert_not_equal,
            s(:begin,
              s(:irange,
                s(:int, 1),
                s(:int, 3))),
            s(:begin,
              s(:erange,
                s(:int, 1),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:begin,
              s(:irange,
                s(:int, 1),
                s(:int, 3))),
            s(:begin,
              s(:irange,
                s(:int, 1),
                s(:send,
                  s(:int, 2), :+,
                  s(:int, 1))))),
          s(:send, nil, :assert_equal,
            s(:begin,
              s(:erange,
                s(:int, 1),
                s(:int, 3))),
            s(:begin,
              s(:erange,
                s(:int, 1),
                s(:send,
                  s(:int, 2), :+,
                  s(:int, 1))))),
          s(:send, nil, :assert_equal,
            s(:begin,
              s(:irange,
                s(:str, "a"),
                s(:str, "z"))),
            s(:begin,
              s(:irange,
                s(:str, "a"),
                s(:str, "z")))))),
      s(:def, :test_not,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:nil), :!)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:false), :!)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:true), :!)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:int, 3), :!)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 1), :+,
                  s(:int, 1))), :!)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send,
                s(:nil), :!), :!)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send,
                s(:false), :!), :!)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:true), :!), :!)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:int, 3), :!), :!)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 1), :+,
                    s(:int, 1))), :!), :!)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:begin,
              s(:send,
                s(:nil), :!))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:begin,
              s(:send,
                s(:false), :!))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:begin,
              s(:send,
                s(:true), :!))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:begin,
              s(:send,
                s(:int, 3), :!))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:begin,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 1), :+,
                    s(:int, 1))), :!))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:begin,
              s(:send,
                s(:send,
                  s(:nil), :!), :!))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:begin,
              s(:send,
                s(:send,
                  s(:false), :!), :!))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:begin,
              s(:send,
                s(:send,
                  s(:true), :!), :!))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:begin,
              s(:send,
                s(:send,
                  s(:int, 3), :!), :!))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:begin,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:int, 1), :+,
                      s(:int, 1))), :!), :!))))),
      s(:def, :test_local_variable,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:int, 7)),
          s(:send, nil, :assert_equal,
            s(:int, 7),
            s(:lvar, :a)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a),
            s(:lvar, :a)),
          s(:lvasgn, :b,
            s(:int, 17)),
          s(:send, nil, :assert_equal,
            s(:int, 7),
            s(:lvar, :a)),
          s(:send, nil, :assert_equal,
            s(:int, 17),
            s(:lvar, :b)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a),
            s(:lvar, :a)),
          s(:send, nil, :assert_equal,
            s(:lvar, :b),
            s(:lvar, :b)),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :a),
            s(:lvar, :b)),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :b),
            s(:lvar, :a)),
          s(:lvasgn, :a,
            s(:lvar, :b)),
          s(:send, nil, :assert_equal,
            s(:int, 17),
            s(:lvar, :a)),
          s(:send, nil, :assert_equal,
            s(:int, 17),
            s(:lvar, :b)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a),
            s(:lvar, :a)),
          s(:send, nil, :assert_equal,
            s(:lvar, :b),
            s(:lvar, :b)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a),
            s(:lvar, :b)),
          s(:send, nil, :assert_equal,
            s(:lvar, :b),
            s(:lvar, :a)),
          s(:lvasgn, :c,
            s(:int, 28)),
          s(:send, nil, :assert_equal,
            s(:int, 17),
            s(:lvar, :a)),
          s(:send, nil, :assert_equal,
            s(:int, 17),
            s(:lvar, :b)),
          s(:send, nil, :assert_equal,
            s(:int, 28),
            s(:lvar, :c)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a),
            s(:lvar, :a)),
          s(:send, nil, :assert_equal,
            s(:lvar, :b),
            s(:lvar, :b)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a),
            s(:lvar, :b)),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:lvar, :c)),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :a),
            s(:lvar, :c)),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :b),
            s(:lvar, :c)),
          s(:lvasgn, :a,
            s(:lvasgn, :b,
              s(:lvar, :c))),
          s(:send, nil, :assert_equal,
            s(:int, 28),
            s(:lvar, :a)),
          s(:send, nil, :assert_equal,
            s(:int, 28),
            s(:lvar, :b)),
          s(:send, nil, :assert_equal,
            s(:int, 28),
            s(:lvar, :c)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a),
            s(:lvar, :a)),
          s(:send, nil, :assert_equal,
            s(:lvar, :b),
            s(:lvar, :b)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a),
            s(:lvar, :b)),
          s(:send, nil, :assert_equal,
            s(:lvar, :b),
            s(:lvar, :a)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a),
            s(:lvar, :c)),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:lvar, :a)),
          s(:send, nil, :assert_equal,
            s(:lvar, :b),
            s(:lvar, :c)),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:lvar, :b)),
          s(:lvasgn, :a,
            s(:int, 1)),
          s(:lvasgn, :b,
            s(:int, 2)),
          s(:lvasgn, :c,
            s(:int, 3)),
          s(:send, nil, :set_lvar_in_another_method),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:lvar, :a)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:lvar, :b)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:lvar, :c)))),
      s(:def, :set_lvar_in_another_method,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send, nil, :a)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send, nil, :b)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send, nil, :c)),
          s(:lvasgn, :a,
            s(:str, "NOT OK")),
          s(:lvasgn, :b,
            s(:str, "NOT OK")),
          s(:lvasgn, :c,
            s(:str, "NOT OK")))),
      s(:class,
        s(:const, nil, :Const), nil,
        s(:begin,
          s(:gvasgn, :$Const,
            s(:self)),
          s(:casgn, nil, :C,
            s(:str, "Const::C")),
          s(:defs,
            s(:self), :c,
            s(:args),
            s(:const, nil, :C)),
          s(:def, :c,
            s(:args),
            s(:const, nil, :C)),
          s(:class,
            s(:const, nil, :A), nil,
            s(:begin,
              s(:casgn, nil, :C,
                s(:str, "Const::A::C")),
              s(:defs,
                s(:self), :c,
                s(:args),
                s(:const, nil, :C)),
              s(:def, :c,
                s(:args),
                s(:const, nil, :C)),
              s(:casgn, nil, :CC,
                s(:str, "Const::A::CC")),
              s(:defs,
                s(:self), :cc,
                s(:args),
                s(:const, nil, :CC)),
              s(:def, :cc,
                s(:args),
                s(:const, nil, :CC)),
              s(:class,
                s(:const, nil, :B), nil,
                s(:begin,
                  s(:casgn, nil, :C,
                    s(:str, "Const::A::B::C")),
                  s(:defs,
                    s(:self), :c,
                    s(:args),
                    s(:const, nil, :C)),
                  s(:def, :c,
                    s(:args),
                    s(:const, nil, :C)),
                  s(:defs,
                    s(:self), :cc,
                    s(:args),
                    s(:const, nil, :CC)),
                  s(:def, :cc,
                    s(:args),
                    s(:const, nil, :CC)))))),
          s(:class,
            s(:const, nil, :AA),
            s(:const, nil, :A),
            s(:begin,
              s(:defs,
                s(:self), :cc,
                s(:args),
                s(:const, nil, :CC)),
              s(:def, :cc,
                s(:args),
                s(:const, nil, :CC)))),
          s(:class,
            s(:const, nil, :AAA),
            s(:const, nil, :AA),
            s(:begin,
              s(:defs,
                s(:self), :cc,
                s(:args),
                s(:const, nil, :CC)),
              s(:def, :cc,
                s(:args),
                s(:const, nil, :CC)))))),
      s(:casgn, nil, :C,
        s(:int, 0)),
      s(:def, :test_const_path,
        s(:args),
        s(:begin,
          s(:send, nil, :do_test_const_path),
          s(:send, nil, :do_test_const_path),
          s(:send, nil, :do_test_const_path))),
      s(:def, :do_test_const_path,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:const, nil, :C)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:const, nil, :C)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:const,
              s(:cbase), :ConstTest)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:const,
              s(:cbase), :ConstTest)),
          s(:send, nil, :assert_equal,
            s(:gvar, :$Const),
            s(:const, nil, :Const)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::C"),
            s(:const,
              s(:const, nil, :Const), :C)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::C"),
            s(:const,
              s(:const, nil, :Const), :C)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::C"),
            s(:const,
              s(:const,
                s(:const, nil, :Const), :A), :C)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::C"),
            s(:const,
              s(:const,
                s(:const, nil, :Const), :A), :C)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::B::C"),
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :Const), :A), :B), :C)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::B::C"),
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :Const), :A), :B), :C)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Const), :A), :B), :_remove_const,
            s(:sym, :C)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::C"),
            s(:const,
              s(:const, nil, :Const), :C)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::C"),
            s(:const,
              s(:const,
                s(:const, nil, :Const), :A), :C)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :Const), :A), :B), :C)),
          s(:send,
            s(:const,
              s(:const, nil, :Const), :A), :_remove_const,
            s(:sym, :C)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::C"),
            s(:const,
              s(:const, nil, :Const), :C)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:const,
              s(:const,
                s(:const, nil, :Const), :A), :C)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :Const), :A), :B), :C)),
          s(:send,
            s(:const, nil, :Const), :_remove_const,
            s(:sym, :C)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:const,
              s(:const, nil, :Const), :C)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:const,
              s(:const,
                s(:const, nil, :Const), :A), :C)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :Const), :A), :B), :C)),
          s(:send,
            s(:const,
              s(:const, nil, :Const), :A), :const_set,
            s(:sym, :C),
            s(:str, "Const::A::C")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:const,
              s(:const, nil, :Const), :C)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::C"),
            s(:const,
              s(:const,
                s(:const, nil, :Const), :A), :C)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :Const), :A), :B), :C)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Const), :A), :B), :const_set,
            s(:sym, :C),
            s(:str, "Const::A::B::C")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:const,
              s(:const, nil, :Const), :C)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::C"),
            s(:const,
              s(:const,
                s(:const, nil, :Const), :A), :C)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::B::C"),
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :Const), :A), :B), :C)),
          s(:send,
            s(:const, nil, :Const), :const_set,
            s(:sym, :C),
            s(:str, "Const::C")),
          s(:send, nil, :assert_equal,
            s(:str, "Const::C"),
            s(:const,
              s(:const, nil, :Const), :C)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::C"),
            s(:const,
              s(:const,
                s(:const, nil, :Const), :A), :C)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::B::C"),
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :Const), :A), :B), :C)))),
      s(:def, :test_const_cref,
        s(:args),
        s(:begin,
          s(:send, nil, :do_test_const_cref),
          s(:send, nil, :do_test_const_cref),
          s(:send, nil, :do_test_const_cref))),
      s(:def, :do_test_const_cref,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "Const::C"),
              s(:send,
                s(:send,
                  s(:const, nil, :Const), :new), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::A::C"),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Const), :A), :new), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::A::B::C"),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Const), :A), :B), :new), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::C"),
              s(:send,
                s(:const, nil, :Const), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::A::C"),
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :A), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::A::B::C"),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Const), :A), :B), :c)),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Const), :A), :B), :_remove_const,
              s(:sym, :C)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::C"),
              s(:send,
                s(:const, nil, :Const), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::A::C"),
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :A), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::A::C"),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Const), :A), :B), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::C"),
              s(:send,
                s(:send,
                  s(:const, nil, :Const), :new), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::A::C"),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Const), :A), :new), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::A::C"),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Const), :A), :B), :new), :c)),
            s(:send,
              s(:const,
                s(:const, nil, :Const), :A), :_remove_const,
              s(:sym, :C)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::C"),
              s(:send,
                s(:const, nil, :Const), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::C"),
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :A), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::C"),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Const), :A), :B), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::C"),
              s(:send,
                s(:send,
                  s(:const, nil, :Const), :new), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::C"),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Const), :A), :new), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::C"),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Const), :A), :B), :new), :c)),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Const), :A), :B), :const_set,
              s(:sym, :C),
              s(:str, "Const::A::B::C")),
            s(:send, nil, :assert_equal,
              s(:str, "Const::C"),
              s(:send,
                s(:const, nil, :Const), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::C"),
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :A), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::A::B::C"),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Const), :A), :B), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::C"),
              s(:send,
                s(:send,
                  s(:const, nil, :Const), :new), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::C"),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Const), :A), :new), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::A::B::C"),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Const), :A), :B), :new), :c)),
            s(:send,
              s(:const,
                s(:const, nil, :Const), :A), :const_set,
              s(:sym, :C),
              s(:str, "Const::A::C")),
            s(:send, nil, :assert_equal,
              s(:str, "Const::C"),
              s(:send,
                s(:const, nil, :Const), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::A::C"),
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :A), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::A::B::C"),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Const), :A), :B), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::C"),
              s(:send,
                s(:send,
                  s(:const, nil, :Const), :new), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::A::C"),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Const), :A), :new), :c)),
            s(:send, nil, :assert_equal,
              s(:str, "Const::A::B::C"),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Const), :A), :B), :new), :c))),
          s(:begin,
            s(:if,
              s(:send,
                s(:const, nil, :Const), :const_defined?,
                s(:sym, :C)), nil,
              s(:send,
                s(:const, nil, :Const), :const_set,
                s(:sym, :C),
                s(:str, "Const::C"))),
            s(:if,
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :A), :const_defined?,
                s(:sym, :C)), nil,
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :A), :const_set,
                s(:sym, :C),
                s(:str, "Const::A::C"))),
            s(:if,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Const), :A), :B), :const_defined?,
                s(:sym, :C)), nil,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Const), :A), :B), :const_set,
                s(:sym, :C),
                s(:str, "Const::A::B::C")))))),
      s(:def, :test_const_inherit,
        s(:args),
        s(:begin,
          s(:send, nil, :do_test_const_inherit),
          s(:send, nil, :do_test_const_inherit),
          s(:send, nil, :do_test_const_inherit))),
      s(:def, :do_test_const_inherit,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::CC"),
            s(:send,
              s(:const,
                s(:const, nil, :Const), :A), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::CC"),
            s(:send,
              s(:const,
                s(:const, nil, :Const), :AA), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::CC"),
            s(:send,
              s(:const,
                s(:const, nil, :Const), :AAA), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::CC"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :A), :new), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::CC"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :AA), :new), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::CC"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :AAA), :new), :cc)),
          s(:send,
            s(:const,
              s(:const, nil, :Const), :AA), :const_set,
            s(:sym, :CC),
            s(:str, "Const::AA::CC")),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::CC"),
            s(:send,
              s(:const,
                s(:const, nil, :Const), :A), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::AA::CC"),
            s(:send,
              s(:const,
                s(:const, nil, :Const), :AA), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::AA::CC"),
            s(:send,
              s(:const,
                s(:const, nil, :Const), :AAA), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::CC"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :A), :new), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::AA::CC"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :AA), :new), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::AA::CC"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :AAA), :new), :cc)),
          s(:send,
            s(:const,
              s(:const, nil, :Const), :AAA), :const_set,
            s(:sym, :CC),
            s(:str, "Const::AAA::CC")),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::CC"),
            s(:send,
              s(:const,
                s(:const, nil, :Const), :A), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::AA::CC"),
            s(:send,
              s(:const,
                s(:const, nil, :Const), :AA), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::AAA::CC"),
            s(:send,
              s(:const,
                s(:const, nil, :Const), :AAA), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::CC"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :A), :new), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::AA::CC"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :AA), :new), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::AAA::CC"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :AAA), :new), :cc)),
          s(:send,
            s(:const,
              s(:const, nil, :Const), :AA), :_remove_const,
            s(:sym, :CC)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::CC"),
            s(:send,
              s(:const,
                s(:const, nil, :Const), :A), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::CC"),
            s(:send,
              s(:const,
                s(:const, nil, :Const), :AA), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::AAA::CC"),
            s(:send,
              s(:const,
                s(:const, nil, :Const), :AAA), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::CC"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :A), :new), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::CC"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :AA), :new), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::AAA::CC"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :AAA), :new), :cc)),
          s(:send,
            s(:const,
              s(:const, nil, :Const), :AAA), :_remove_const,
            s(:sym, :CC)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::CC"),
            s(:send,
              s(:const,
                s(:const, nil, :Const), :A), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::CC"),
            s(:send,
              s(:const,
                s(:const, nil, :Const), :AA), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::CC"),
            s(:send,
              s(:const,
                s(:const, nil, :Const), :AAA), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::CC"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :A), :new), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::CC"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :AA), :new), :cc)),
          s(:send, nil, :assert_equal,
            s(:str, "Const::A::CC"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Const), :AAA), :new), :cc)))),
      s(:def, :test_global_variable,
        s(:args),
        s(:begin,
          s(:gvasgn, :$gvar1,
            s(:int, 1)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:gvar, :$gvar1)),
          s(:gvasgn, :$gvar1,
            s(:int, 2)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:gvar, :$gvar1)),
          s(:gvasgn, :$gvar2,
            s(:int, 77)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:gvar, :$gvar1)),
          s(:send, nil, :assert_equal,
            s(:int, 77),
            s(:gvar, :$gvar2)),
          s(:gvasgn, :$gvar2,
            s(:gvar, :$gvar1)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:gvar, :$gvar1)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:gvar, :$gvar2)),
          s(:gvasgn, :$gvar1,
            s(:int, 1)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:gvar, :$gvar1)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:gvar, :$gvar2)),
          s(:send, nil, :set_gvar_in_another_method),
          s(:send, nil, :assert_equal,
            s(:str, "OK1"),
            s(:gvar, :$gvar1)),
          s(:send, nil, :assert_equal,
            s(:str, "OK2"),
            s(:gvar, :$gvar2)))),
      s(:def, :set_gvar_in_another_method,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:gvar, :$gvar1)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:gvar, :$gvar2)),
          s(:gvasgn, :$gvar1,
            s(:str, "OK1")),
          s(:gvasgn, :$gvar2,
            s(:str, "OK2")))),
      s(:class,
        s(:const, nil, :CVarA), nil,
        s(:begin,
          s(:cvasgn, :@@cv,
            s(:str, "CVarA@@cv")),
          s(:defs,
            s(:self), :cv,
            s(:args),
            s(:cvar, :@@cv)),
          s(:defs,
            s(:self), :cv=,
            s(:args,
              s(:arg, :v)),
            s(:cvasgn, :@@cv,
              s(:lvar, :v))),
          s(:sclass,
            s(:self),
            s(:def, :cv2,
              s(:args),
              s(:cvar, :@@cv))),
          s(:def, :cv,
            s(:args),
            s(:cvar, :@@cv)),
          s(:def, :cv=,
            s(:args,
              s(:arg, :v)),
            s(:cvasgn, :@@cv,
              s(:lvar, :v))))),
      s(:class,
        s(:const, nil, :CVarB),
        s(:const, nil, :CVarA),
        s(:begin,
          s(:defs,
            s(:self), :cvB,
            s(:args),
            s(:cvar, :@@cv)),
          s(:defs,
            s(:self), :cvB=,
            s(:args,
              s(:arg, :v)),
            s(:cvasgn, :@@cv,
              s(:lvar, :v))),
          s(:sclass,
            s(:self),
            s(:def, :cvB2,
              s(:args),
              s(:cvar, :@@cv))),
          s(:def, :cvB,
            s(:args),
            s(:cvar, :@@cv)),
          s(:def, :cvB=,
            s(:args,
              s(:arg, :v)),
            s(:cvasgn, :@@cv,
              s(:lvar, :v))))),
      s(:def, :test_class_variable,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "CVarA@@cv"),
            s(:send,
              s(:const, nil, :CVarA), :cv)),
          s(:send, nil, :assert_equal,
            s(:str, "CVarA@@cv"),
            s(:send,
              s(:const, nil, :CVarA), :cv2)),
          s(:send, nil, :assert_equal,
            s(:str, "CVarA@@cv"),
            s(:send,
              s(:send,
                s(:const, nil, :CVarA), :new), :cv)),
          s(:send,
            s(:const, nil, :CVarA), :cv=,
            s(:str, "singleton")),
          s(:send, nil, :assert_equal,
            s(:str, "singleton"),
            s(:send,
              s(:const, nil, :CVarA), :cv)),
          s(:send, nil, :assert_equal,
            s(:str, "singleton"),
            s(:send,
              s(:const, nil, :CVarA), :cv2)),
          s(:send, nil, :assert_equal,
            s(:str, "singleton"),
            s(:send,
              s(:send,
                s(:const, nil, :CVarA), :new), :cv)),
          s(:send,
            s(:send,
              s(:const, nil, :CVarA), :new), :cv=,
            s(:str, "instance")),
          s(:send, nil, :assert_equal,
            s(:str, "instance"),
            s(:send,
              s(:const, nil, :CVarA), :cv)),
          s(:send, nil, :assert_equal,
            s(:str, "instance"),
            s(:send,
              s(:const, nil, :CVarA), :cv2)),
          s(:send, nil, :assert_equal,
            s(:str, "instance"),
            s(:send,
              s(:send,
                s(:const, nil, :CVarA), :new), :cv)),
          s(:send,
            s(:const, nil, :CVarA), :cv=,
            s(:str, "CVarA@@cv")),
          s(:send,
            s(:const, nil, :CVarB), :cv=,
            s(:str, "B/singleton")),
          s(:send, nil, :assert_equal,
            s(:str, "B/singleton"),
            s(:send,
              s(:const, nil, :CVarB), :cv)),
          s(:send, nil, :assert_equal,
            s(:str, "B/singleton"),
            s(:send,
              s(:const, nil, :CVarB), :cv2)),
          s(:send, nil, :assert_equal,
            s(:str, "B/singleton"),
            s(:send,
              s(:send,
                s(:const, nil, :CVarB), :new), :cv)),
          s(:send, nil, :assert_equal,
            s(:str, "B/singleton"),
            s(:send,
              s(:const, nil, :CVarA), :cv)),
          s(:send, nil, :assert_equal,
            s(:str, "B/singleton"),
            s(:send,
              s(:const, nil, :CVarA), :cv2)),
          s(:send, nil, :assert_equal,
            s(:str, "B/singleton"),
            s(:send,
              s(:send,
                s(:const, nil, :CVarA), :new), :cv)),
          s(:send,
            s(:send,
              s(:const, nil, :CVarB), :new), :cv=,
            s(:str, "B/instance")),
          s(:send, nil, :assert_equal,
            s(:str, "B/instance"),
            s(:send,
              s(:const, nil, :CVarB), :cv)),
          s(:send, nil, :assert_equal,
            s(:str, "B/instance"),
            s(:send,
              s(:const, nil, :CVarB), :cv2)),
          s(:send, nil, :assert_equal,
            s(:str, "B/instance"),
            s(:send,
              s(:send,
                s(:const, nil, :CVarB), :new), :cv)),
          s(:send, nil, :assert_equal,
            s(:str, "B/instance"),
            s(:send,
              s(:const, nil, :CVarA), :cv)),
          s(:send, nil, :assert_equal,
            s(:str, "B/instance"),
            s(:send,
              s(:const, nil, :CVarA), :cv2)),
          s(:send, nil, :assert_equal,
            s(:str, "B/instance"),
            s(:send,
              s(:send,
                s(:const, nil, :CVarA), :new), :cv)),
          s(:send,
            s(:const, nil, :CVarA), :cv=,
            s(:str, "CVarA@@cv")),
          s(:send, nil, :assert_equal,
            s(:str, "CVarA@@cv"),
            s(:send,
              s(:const, nil, :CVarB), :cvB)),
          s(:send, nil, :assert_equal,
            s(:str, "CVarA@@cv"),
            s(:send,
              s(:const, nil, :CVarB), :cvB2)),
          s(:send, nil, :assert_equal,
            s(:str, "CVarA@@cv"),
            s(:send,
              s(:send,
                s(:const, nil, :CVarB), :new), :cvB)),
          s(:send,
            s(:const, nil, :CVarB), :cvB=,
            s(:str, "B/singleton")),
          s(:send, nil, :assert_equal,
            s(:str, "B/singleton"),
            s(:send,
              s(:const, nil, :CVarB), :cvB)),
          s(:send, nil, :assert_equal,
            s(:str, "B/singleton"),
            s(:send,
              s(:const, nil, :CVarB), :cvB2)),
          s(:send, nil, :assert_equal,
            s(:str, "B/singleton"),
            s(:send,
              s(:send,
                s(:const, nil, :CVarB), :new), :cvB)),
          s(:send, nil, :assert_equal,
            s(:str, "B/singleton"),
            s(:send,
              s(:const, nil, :CVarA), :cv)),
          s(:send, nil, :assert_equal,
            s(:str, "B/singleton"),
            s(:send,
              s(:const, nil, :CVarA), :cv2)),
          s(:send, nil, :assert_equal,
            s(:str, "B/singleton"),
            s(:send,
              s(:send,
                s(:const, nil, :CVarA), :new), :cv)),
          s(:send,
            s(:send,
              s(:const, nil, :CVarB), :new), :cvB=,
            s(:str, "B/instance")),
          s(:send, nil, :assert_equal,
            s(:str, "B/instance"),
            s(:send,
              s(:const, nil, :CVarB), :cvB)),
          s(:send, nil, :assert_equal,
            s(:str, "B/instance"),
            s(:send,
              s(:const, nil, :CVarB), :cvB2)),
          s(:send, nil, :assert_equal,
            s(:str, "B/instance"),
            s(:send,
              s(:send,
                s(:const, nil, :CVarB), :new), :cvB)),
          s(:send, nil, :assert_equal,
            s(:str, "B/instance"),
            s(:send,
              s(:const, nil, :CVarA), :cv)),
          s(:send, nil, :assert_equal,
            s(:str, "B/instance"),
            s(:send,
              s(:const, nil, :CVarA), :cv2)),
          s(:send, nil, :assert_equal,
            s(:str, "B/instance"),
            s(:send,
              s(:send,
                s(:const, nil, :CVarA), :new), :cv)),
          s(:send,
            s(:const, nil, :CVarA), :cv=,
            s(:str, "CVarA@@cv")),
          s(:send,
            s(:const, nil, :CVarB), :cvB=,
            s(:str, "CVarB@@cv")))),
      s(:class,
        s(:const, nil, :OP), nil,
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :x)),
          s(:send, nil, :attr_accessor,
            s(:sym, :foo)),
          s(:def, :x=,
            s(:args,
              s(:arg, :x)),
            s(:begin,
              s(:ivasgn, :@x,
                s(:lvar, :x)),
              s(:sym, :Bug1996))),
          s(:casgn, nil, :Bug1996,
            s(:str, "[ruby-dev:39163], [ruby-core:25143]")),
          s(:def, :[],
            s(:args,
              s(:arg, :i)),
            s(:ivar, :@x)),
          s(:def, :[]=,
            s(:args,
              s(:arg, :i),
              s(:arg, :x)),
            s(:begin,
              s(:ivasgn, :@x,
                s(:lvar, :x)),
              s(:sym, :Bug2050))),
          s(:casgn, nil, :Bug2050,
            s(:str, "[ruby-core:25387]")))),
      s(:def, :test_opassign2_1,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:or_asgn,
              s(:lvasgn, :x),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:and_asgn,
              s(:lvasgn, :x),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:or_asgn,
              s(:lvasgn, :x),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:and_asgn,
              s(:lvasgn, :x),
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:op_asgn,
              s(:lvasgn, :x), :+,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:op_asgn,
              s(:lvasgn, :x), :-,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:lvar, :x)))),
      s(:def, :test_opassign2_2,
        s(:args),
        s(:begin,
          s(:lvasgn, :y,
            s(:send,
              s(:const, nil, :OP), :new)),
          s(:send,
            s(:lvar, :y), :x=,
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:or_asgn,
              s(:send,
                s(:lvar, :y), :x),
              s(:int, 1)),
            s(:const,
              s(:const, nil, :OP), :Bug1996)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :y), :x)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:and_asgn,
              s(:send,
                s(:lvar, :y), :x),
              s(:int, 2)),
            s(:const,
              s(:const, nil, :OP), :Bug1996)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :y), :x)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:or_asgn,
              s(:send,
                s(:lvar, :y), :x),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :y), :x)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:and_asgn,
              s(:send,
                s(:lvar, :y), :x),
              s(:int, 4)),
            s(:const,
              s(:const, nil, :OP), :Bug1996)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :y), :x)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:op_asgn,
              s(:send,
                s(:lvar, :y), :x), :+,
              s(:int, 1)),
            s(:const,
              s(:const, nil, :OP), :Bug1996)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :y), :x)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:op_asgn,
              s(:send,
                s(:lvar, :y), :x), :-,
              s(:int, 1)),
            s(:const,
              s(:const, nil, :OP), :Bug1996)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :y), :x)))),
      s(:def, :test_opassign2_3,
        s(:args),
        s(:begin,
          s(:lvasgn, :z,
            s(:send,
              s(:const, nil, :OP), :new)),
          s(:send,
            s(:lvar, :z), :x=,
            s(:send,
              s(:const, nil, :OP), :new)),
          s(:send,
            s(:send,
              s(:lvar, :z), :x), :x=,
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:or_asgn,
              s(:send,
                s(:send,
                  s(:lvar, :z), :x), :x),
              s(:int, 1)),
            s(:const,
              s(:const, nil, :OP), :Bug1996)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:lvar, :z), :x), :x)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:and_asgn,
              s(:send,
                s(:send,
                  s(:lvar, :z), :x), :x),
              s(:int, 2)),
            s(:const,
              s(:const, nil, :OP), :Bug1996)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:lvar, :z), :x), :x)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:or_asgn,
              s(:send,
                s(:send,
                  s(:lvar, :z), :x), :x),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:lvar, :z), :x), :x)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:and_asgn,
              s(:send,
                s(:send,
                  s(:lvar, :z), :x), :x),
              s(:int, 4)),
            s(:const,
              s(:const, nil, :OP), :Bug1996)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:send,
                s(:lvar, :z), :x), :x)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:op_asgn,
              s(:send,
                s(:send,
                  s(:lvar, :z), :x), :x), :+,
              s(:int, 1)),
            s(:const,
              s(:const, nil, :OP), :Bug1996)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:send,
                s(:lvar, :z), :x), :x)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:op_asgn,
              s(:send,
                s(:send,
                  s(:lvar, :z), :x), :x), :-,
              s(:int, 1)),
            s(:const,
              s(:const, nil, :OP), :Bug1996)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:send,
                s(:lvar, :z), :x), :x)))),
      s(:def, :test_opassign1_1,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:array)),
          s(:send,
            s(:lvar, :a), :[]=,
            s(:int, 0),
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:or_asgn,
              s(:send,
                s(:lvar, :a), :[],
                s(:int, 0)),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :a), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:and_asgn,
              s(:send,
                s(:lvar, :a), :[],
                s(:int, 0)),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :a), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:or_asgn,
              s(:send,
                s(:lvar, :a), :[],
                s(:int, 0)),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :a), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:and_asgn,
              s(:send,
                s(:lvar, :a), :[],
                s(:int, 0)),
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :a), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:op_asgn,
              s(:send,
                s(:lvar, :a), :[],
                s(:int, 0)), :+,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :a), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:op_asgn,
              s(:send,
                s(:lvar, :a), :[],
                s(:int, 0)), :-,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :a), :[],
              s(:int, 0))))),
      s(:def, :test_opassign1_2,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :OP), :new)),
          s(:send,
            s(:lvar, :x), :[]=,
            s(:int, 0),
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:or_asgn,
              s(:send,
                s(:lvar, :x), :[],
                s(:int, 0)),
              s(:int, 1)),
            s(:const,
              s(:const, nil, :OP), :Bug2050)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:and_asgn,
              s(:send,
                s(:lvar, :x), :[],
                s(:int, 0)),
              s(:int, 2)),
            s(:const,
              s(:const, nil, :OP), :Bug2050)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :x), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:or_asgn,
              s(:send,
                s(:lvar, :x), :[],
                s(:int, 0)),
              s(:int, 3)),
            s(:const,
              s(:const, nil, :OP), :Bug2050)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :x), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:and_asgn,
              s(:send,
                s(:lvar, :x), :[],
                s(:int, 0)),
              s(:int, 4)),
            s(:const,
              s(:const, nil, :OP), :Bug2050)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :x), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:op_asgn,
              s(:send,
                s(:lvar, :x), :[],
                s(:int, 0)), :+,
              s(:int, 1)),
            s(:const,
              s(:const, nil, :OP), :Bug2050)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :x), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:op_asgn,
              s(:send,
                s(:lvar, :x), :[],
                s(:int, 0)), :-,
              s(:int, 1)),
            s(:const,
              s(:const, nil, :OP), :Bug2050)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :x), :[],
              s(:int, 0))))),
      s(:def, :test_send_opassign,
        s(:args),
        s(:begin,
          s(:if,
            s(:and,
              s(:defined?,
                s(:const, nil, :RUBY_ENGINE)),
              s(:send,
                s(:const, nil, :RUBY_ENGINE), :!=,
                s(:str, "ruby"))),
            s(:return), nil),
          s(:lvasgn, :bug7773,
            s(:str, "[ruby-core:51821]")),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :OP), :new)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:lvar, :x), :foo=,
              s(:int, 42)),
            s(:lvar, :bug7773)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:lvar, :x), :foo),
            s(:lvar, :bug7773)),
          s(:send, nil, :assert_equal,
            s(:int, -6),
            s(:send,
              s(:lvar, :x), :send,
              s(:sym, :foo=),
              s(:int, -6)),
            s(:lvar, :bug7773)),
          s(:send, nil, :assert_equal,
            s(:int, -6),
            s(:send,
              s(:lvar, :x), :foo),
            s(:lvar, :bug7773)),
          s(:send, nil, :assert_equal,
            s(:sym, :Bug1996),
            s(:send,
              s(:lvar, :x), :send,
              s(:sym, :x=),
              s(:sym, :case_when_setter_returns_other_value)),
            s(:lvar, :bug7773)),
          s(:send, nil, :assert_equal,
            s(:sym, :case_when_setter_returns_other_value),
            s(:send,
              s(:lvar, :x), :x),
            s(:lvar, :bug7773)))),
      s(:def, :test_backref,
        s(:args),
        s(:begin,
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "re"),
              s(:regopt)),
            s(:str, "not match")),
          s(:send, nil, :assert_nil,
            s(:gvar, :$~)),
          s(:send, nil, :assert_nil,
            s(:back_ref, :$`)),
          s(:send, nil, :assert_nil,
            s(:back_ref, :$&)),
          s(:send, nil, :assert_nil,
            s(:back_ref, :$')),
          s(:send, nil, :assert_nil,
            s(:back_ref, :$+)),
          s(:send, nil, :assert_nil,
            s(:nth_ref, 1)),
          s(:send, nil, :assert_nil,
            s(:nth_ref, 2)),
          s(:send, nil, :assert_nil,
            s(:nth_ref, 3)),
          s(:send, nil, :assert_nil,
            s(:nth_ref, 4)),
          s(:send, nil, :assert_nil,
            s(:nth_ref, 5)),
          s(:send, nil, :assert_nil,
            s(:nth_ref, 6)),
          s(:send, nil, :assert_nil,
            s(:nth_ref, 7)),
          s(:send, nil, :assert_nil,
            s(:nth_ref, 8)),
          s(:send, nil, :assert_nil,
            s(:nth_ref, 9)),
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "(a)(b)(c)(d)(e)(f)(g)(h)(i)"),
              s(:regopt)),
            s(:str, "xabcdefghiy")),
          s(:send, nil, :assert_not_nil,
            s(:gvar, :$~)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :MatchData),
            s(:gvar, :$~)),
          s(:send, nil, :assert_equal,
            s(:str, "abcdefghi"),
            s(:send,
              s(:gvar, :$~), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "a"),
            s(:send,
              s(:gvar, :$~), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "b"),
            s(:send,
              s(:gvar, :$~), :[],
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "c"),
            s(:send,
              s(:gvar, :$~), :[],
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:str, "d"),
            s(:send,
              s(:gvar, :$~), :[],
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:str, "e"),
            s(:send,
              s(:gvar, :$~), :[],
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:str, "f"),
            s(:send,
              s(:gvar, :$~), :[],
              s(:int, 6))),
          s(:send, nil, :assert_equal,
            s(:str, "g"),
            s(:send,
              s(:gvar, :$~), :[],
              s(:int, 7))),
          s(:send, nil, :assert_equal,
            s(:str, "h"),
            s(:send,
              s(:gvar, :$~), :[],
              s(:int, 8))),
          s(:send, nil, :assert_equal,
            s(:str, "i"),
            s(:send,
              s(:gvar, :$~), :[],
              s(:int, 9))),
          s(:send, nil, :assert_equal,
            s(:str, "x"),
            s(:back_ref, :$`)),
          s(:send, nil, :assert_equal,
            s(:str, "abcdefghi"),
            s(:back_ref, :$&)),
          s(:send, nil, :assert_equal,
            s(:str, "y"),
            s(:back_ref, :$')),
          s(:send, nil, :assert_equal,
            s(:str, "i"),
            s(:back_ref, :$+)),
          s(:send, nil, :assert_equal,
            s(:str, "a"),
            s(:nth_ref, 1)),
          s(:send, nil, :assert_equal,
            s(:str, "b"),
            s(:nth_ref, 2)),
          s(:send, nil, :assert_equal,
            s(:str, "c"),
            s(:nth_ref, 3)),
          s(:send, nil, :assert_equal,
            s(:str, "d"),
            s(:nth_ref, 4)),
          s(:send, nil, :assert_equal,
            s(:str, "e"),
            s(:nth_ref, 5)),
          s(:send, nil, :assert_equal,
            s(:str, "f"),
            s(:nth_ref, 6)),
          s(:send, nil, :assert_equal,
            s(:str, "g"),
            s(:nth_ref, 7)),
          s(:send, nil, :assert_equal,
            s(:str, "h"),
            s(:nth_ref, 8)),
          s(:send, nil, :assert_equal,
            s(:str, "i"),
            s(:nth_ref, 9)),
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "re"),
              s(:regopt)),
            s(:str, "not match")),
          s(:send, nil, :assert_nil,
            s(:gvar, :$~)),
          s(:send, nil, :assert_nil,
            s(:back_ref, :$`)),
          s(:send, nil, :assert_nil,
            s(:back_ref, :$&)),
          s(:send, nil, :assert_nil,
            s(:back_ref, :$')),
          s(:send, nil, :assert_nil,
            s(:back_ref, :$+)),
          s(:send, nil, :assert_nil,
            s(:nth_ref, 1)),
          s(:send, nil, :assert_nil,
            s(:nth_ref, 2)),
          s(:send, nil, :assert_nil,
            s(:nth_ref, 3)),
          s(:send, nil, :assert_nil,
            s(:nth_ref, 4)),
          s(:send, nil, :assert_nil,
            s(:nth_ref, 5)),
          s(:send, nil, :assert_nil,
            s(:nth_ref, 6)),
          s(:send, nil, :assert_nil,
            s(:nth_ref, 7)),
          s(:send, nil, :assert_nil,
            s(:nth_ref, 8)),
          s(:send, nil, :assert_nil,
            s(:nth_ref, 9)))),
      s(:def, :test_array_splat,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature1125,
            s(:str, "[ruby-core:21901]")),
          s(:lvasgn, :a,
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:array,
              s(:splat,
                s(:lvar, :a)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:array,
              s(:int, 1),
              s(:splat,
                s(:lvar, :a)))),
          s(:send, nil, :assert_not_same,
            s(:lvar, :a),
            s(:array,
              s(:splat,
                s(:lvar, :a))),
            s(:lvar, :feature1125)),
          s(:lvasgn, :a,
            s(:array,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2)),
            s(:array,
              s(:splat,
                s(:lvar, :a)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:array,
              s(:int, 1),
              s(:splat,
                s(:lvar, :a)))),
          s(:send, nil, :assert_not_same,
            s(:lvar, :a),
            s(:array,
              s(:splat,
                s(:lvar, :a))),
            s(:lvar, :feature1125)),
          s(:lvasgn, :a,
            s(:array,
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 3)),
            s(:array,
              s(:splat,
                s(:lvar, :a)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:array,
              s(:int, 1),
              s(:splat,
                s(:lvar, :a)))),
          s(:send, nil, :assert_not_same,
            s(:lvar, :a),
            s(:array,
              s(:splat,
                s(:lvar, :a))),
            s(:lvar, :feature1125)),
          s(:lvasgn, :a,
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:array,
              s(:splat,
                s(:lvar, :a)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:array,
              s(:int, 1),
              s(:splat,
                s(:lvar, :a)))))))))
