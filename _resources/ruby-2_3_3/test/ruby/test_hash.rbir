s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:block,
    s(:send,
      s(:const, nil, :EnvUtil), :suppress_warning),
    s(:args),
    s(:send, nil, :require,
      s(:str, "continuation"))),
  s(:class,
    s(:const, nil, :TestHash),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_hash,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 2),
                  s(:int, 4)),
                s(:pair,
                  s(:int, 3),
                  s(:int, 6))))),
          s(:lvasgn, :y,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 2),
                  s(:int, 4)),
                s(:pair,
                  s(:int, 3),
                  s(:int, 6))))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :x), :[],
              s(:int, 1))),
          s(:send, nil, :assert,
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:for,
                    s(:mlhs,
                      s(:lvasgn, :k),
                      s(:lvasgn, :v)),
                    s(:lvar, :y),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :k), :*,
                          s(:int, 2)), :!=,
                        s(:lvar, :v)),
                      s(:send, nil, :raise), nil)),
                  s(:true)),
                s(:resbody, nil, nil,
                  s(:false)), nil))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :x), :length)),
          s(:send, nil, :assert_send,
            s(:array,
              s(:lvar, :x),
              s(:sym, :has_key?),
              s(:int, 1))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:lvar, :x),
              s(:sym, :has_value?),
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 4),
              s(:int, 6)),
            s(:send,
              s(:lvar, :x), :values_at,
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:int, 1),
                s(:int, 2)),
              s(:pair,
                s(:int, 2),
                s(:int, 4)),
              s(:pair,
                s(:int, 3),
                s(:int, 6))),
            s(:lvar, :x)),
          s(:lvasgn, :z,
            s(:send,
              s(:send,
                s(:lvar, :y), :keys), :join,
              s(:str, ":"))),
          s(:send, nil, :assert_equal,
            s(:str, "1:2:3"),
            s(:lvar, :z)),
          s(:lvasgn, :z,
            s(:send,
              s(:send,
                s(:lvar, :y), :values), :join,
              s(:str, ":"))),
          s(:send, nil, :assert_equal,
            s(:str, "2:4:6"),
            s(:lvar, :z)),
          s(:send, nil, :assert_equal,
            s(:lvar, :x),
            s(:lvar, :y)),
          s(:send,
            s(:lvar, :y), :shift),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :y), :length)),
          s(:lvasgn, :z,
            s(:array,
              s(:int, 1),
              s(:int, 2))),
          s(:send,
            s(:lvar, :y), :[]=,
            s(:lvar, :z),
            s(:int, 256)),
          s(:send, nil, :assert_equal,
            s(:int, 256),
            s(:send,
              s(:lvar, :y), :[],
              s(:lvar, :z))),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :Hash), :new,
              s(:int, 0))),
          s(:send,
            s(:lvar, :x), :[]=,
            s(:int, 1),
            s(:int, 1)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :x), :[],
              s(:int, 2))),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :Hash), :new,
              s(:array))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :x), :[],
              s(:int, 22))),
          s(:send, nil, :assert_same,
            s(:send,
              s(:lvar, :x), :[],
              s(:int, 22)),
            s(:send,
              s(:lvar, :x), :[],
              s(:int, 22))),
          s(:lvasgn, :x,
            s(:block,
              s(:send,
                s(:const, nil, :Hash), :new),
              s(:args),
              s(:array))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :x), :[],
              s(:int, 22))),
          s(:send, nil, :assert_not_same,
            s(:send,
              s(:lvar, :x), :[],
              s(:int, 22)),
            s(:send,
              s(:lvar, :x), :[],
              s(:int, 22))),
          s(:lvasgn, :x,
            s(:block,
              s(:send,
                s(:const, nil, :Hash), :new),
              s(:args,
                s(:arg, :h),
                s(:arg, :kk)),
              s(:begin,
                s(:lvasgn, :z,
                  s(:lvar, :kk)),
                s(:send,
                  s(:lvar, :h), :[]=,
                  s(:lvar, :kk),
                  s(:send,
                    s(:lvar, :kk), :*,
                    s(:int, 2)))))),
          s(:lvasgn, :z,
            s(:int, 0)),
          s(:send, nil, :assert_equal,
            s(:int, 44),
            s(:send,
              s(:lvar, :x), :[],
              s(:int, 22))),
          s(:send, nil, :assert_equal,
            s(:int, 22),
            s(:lvar, :z)),
          s(:lvasgn, :z,
            s(:int, 0)),
          s(:send, nil, :assert_equal,
            s(:int, 44),
            s(:send,
              s(:lvar, :x), :[],
              s(:int, 22))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:lvar, :z)),
          s(:send,
            s(:lvar, :x), :default=,
            s(:int, 5)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :x), :[],
              s(:int, 23))),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :Hash), :new)),
          s(:defs,
            s(:lvar, :x), :default,
            s(:args,
              s(:arg, :k)),
            s(:begin,
              s(:gvasgn, :$z,
                s(:lvar, :k)),
              s(:send,
                s(:self), :[]=,
                s(:lvar, :k),
                s(:send,
                  s(:lvar, :k), :*,
                  s(:int, 2))))),
          s(:gvasgn, :$z,
            s(:int, 0)),
          s(:send, nil, :assert_equal,
            s(:int, 44),
            s(:send,
              s(:lvar, :x), :[],
              s(:int, 22))),
          s(:send, nil, :assert_equal,
            s(:int, 22),
            s(:gvar, :$z)),
          s(:gvasgn, :$z,
            s(:int, 0)),
          s(:send, nil, :assert_equal,
            s(:int, 44),
            s(:send,
              s(:lvar, :x), :[],
              s(:int, 22))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:gvar, :$z)))),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:or_asgn,
            s(:ivasgn, :@cls),
            s(:const, nil, :Hash)),
          s(:ivasgn, :@h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:str, "one")),
                s(:pair,
                  s(:int, 2),
                  s(:str, "two")),
                s(:pair,
                  s(:int, 3),
                  s(:str, "three")),
                s(:pair,
                  s(:self),
                  s(:str, "self")),
                s(:pair,
                  s(:true),
                  s(:str, "true")),
                s(:pair,
                  s(:nil),
                  s(:str, "nil")),
                s(:pair,
                  s(:str, "nil"),
                  s(:nil))))),
          s(:ivasgn, :@verbose,
            s(:gvar, :$VERBOSE)),
          s(:gvasgn, :$VERBOSE,
            s(:nil)))),
      s(:def, :teardown,
        s(:args),
        s(:gvasgn, :$VERBOSE,
          s(:ivar, :@verbose))),
      s(:def, :test_bad_initialize_copy,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const, nil, :Hash)),
                s(:args),
                s(:def, :initialize_copy,
                  s(:args,
                    s(:arg, :h)),
                  s(:super,
                    s(:send,
                      s(:const, nil, :Object), :new)))), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :h), :dup)))),
      s(:def, :test_clear_initialize_copy,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2))))),
          s(:block,
            s(:send,
              s(:lvar, :h), :instance_eval),
            s(:args),
            s(:send, nil, :initialize_copy,
              s(:hash))),
          s(:send, nil, :assert_empty,
            s(:lvar, :h)))),
      s(:def, :test_self_initialize_copy,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2))))),
          s(:block,
            s(:send,
              s(:lvar, :h), :instance_eval),
            s(:args),
            s(:send, nil, :initialize_copy,
              s(:lvar, :h))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 1))))),
      s(:def, :test_dup_will_rehash,
        s(:args),
        s(:begin,
          s(:lvasgn, :set1,
            s(:send,
              s(:ivar, :@cls), :[])),
          s(:lvasgn, :set2,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:lvar, :set1),
                  s(:true))))),
          s(:send,
            s(:lvar, :set1), :[]=,
            s(:lvar, :set1),
            s(:true)),
          s(:send, nil, :assert_equal,
            s(:lvar, :set2),
            s(:send,
              s(:lvar, :set2), :dup)))),
      s(:def, :test_s_AREF,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:str, "a"),
                  s(:int, 100)),
                s(:pair,
                  s(:str, "b"),
                  s(:int, 200))))),
          s(:send, nil, :assert_equal,
            s(:int, 100),
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "a"))),
          s(:send, nil, :assert_equal,
            s(:int, 200),
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "b"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "c"))),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:str, "a"),
                  s(:int, 100)),
                s(:pair,
                  s(:str, "b"),
                  s(:int, 200))))),
          s(:send, nil, :assert_equal,
            s(:int, 100),
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "a"))),
          s(:send, nil, :assert_equal,
            s(:int, 200),
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "b"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "c"))))),
      s(:def, :test_s_new,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :new)),
          s(:send, nil, :assert_instance_of,
            s(:ivar, :@cls),
            s(:lvar, :h)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :h), :default)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "spurious"))),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :new,
              s(:str, "default"))),
          s(:send, nil, :assert_instance_of,
            s(:ivar, :@cls),
            s(:lvar, :h)),
          s(:send, nil, :assert_equal,
            s(:str, "default"),
            s(:send,
              s(:lvar, :h), :default)),
          s(:send, nil, :assert_equal,
            s(:str, "default"),
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "spurious"))))),
      s(:def, :test_AREF,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:str, "one")),
                s(:pair,
                  s(:int, 2),
                  s(:str, "two")),
                s(:pair,
                  s(:int, 3),
                  s(:str, "three")),
                s(:pair,
                  s(:self),
                  s(:str, "self")),
                s(:pair,
                  s(:lvar, :t),
                  s(:str, "time")),
                s(:pair,
                  s(:nil),
                  s(:str, "nil")),
                s(:pair,
                  s(:str, "nil"),
                  s(:nil))))),
          s(:send, nil, :assert_equal,
            s(:str, "one"),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "two"),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "three"),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:str, "self"),
            s(:send,
              s(:lvar, :h), :[],
              s(:self))),
          s(:send, nil, :assert_equal,
            s(:str, "time"),
            s(:send,
              s(:lvar, :h), :[],
              s(:lvar, :t))),
          s(:send, nil, :assert_equal,
            s(:str, "nil"),
            s(:send,
              s(:lvar, :h), :[],
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "nil"))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "koala"))),
          s(:lvasgn, :h1,
            s(:send,
              s(:lvar, :h), :dup)),
          s(:send,
            s(:lvar, :h1), :default=,
            s(:sym, :default)),
          s(:send, nil, :assert_equal,
            s(:str, "one"),
            s(:send,
              s(:lvar, :h1), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "two"),
            s(:send,
              s(:lvar, :h1), :[],
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "three"),
            s(:send,
              s(:lvar, :h1), :[],
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:str, "self"),
            s(:send,
              s(:lvar, :h1), :[],
              s(:self))),
          s(:send, nil, :assert_equal,
            s(:str, "time"),
            s(:send,
              s(:lvar, :h1), :[],
              s(:lvar, :t))),
          s(:send, nil, :assert_equal,
            s(:str, "nil"),
            s(:send,
              s(:lvar, :h1), :[],
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :h1), :[],
              s(:str, "nil"))),
          s(:send, nil, :assert_equal,
            s(:sym, :default),
            s(:send,
              s(:lvar, :h1), :[],
              s(:str, "koala"))))),
      s(:def, :test_ASET,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :new)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:int, 1),
            s(:str, "one")),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:int, 2),
            s(:str, "two")),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:int, 3),
            s(:str, "three")),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:self),
            s(:str, "self")),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:lvar, :t),
            s(:str, "time")),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:nil),
            s(:str, "nil")),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:str, "nil"),
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:str, "one"),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "two"),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "three"),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:str, "self"),
            s(:send,
              s(:lvar, :h), :[],
              s(:self))),
          s(:send, nil, :assert_equal,
            s(:str, "time"),
            s(:send,
              s(:lvar, :h), :[],
              s(:lvar, :t))),
          s(:send, nil, :assert_equal,
            s(:str, "nil"),
            s(:send,
              s(:lvar, :h), :[],
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "nil"))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "koala"))),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:int, 1),
            s(:int, 1)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:nil),
            s(:int, 99)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:str, "nil"),
            s(:nil)),
          s(:lvasgn, :z,
            s(:array,
              s(:int, 1),
              s(:int, 2))),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:lvar, :z),
            s(:int, 256)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "two"),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "three"),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:str, "self"),
            s(:send,
              s(:lvar, :h), :[],
              s(:self))),
          s(:send, nil, :assert_equal,
            s(:str, "time"),
            s(:send,
              s(:lvar, :h), :[],
              s(:lvar, :t))),
          s(:send, nil, :assert_equal,
            s(:int, 99),
            s(:send,
              s(:lvar, :h), :[],
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "nil"))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "koala"))),
          s(:send, nil, :assert_equal,
            s(:int, 256),
            s(:send,
              s(:lvar, :h), :[],
              s(:lvar, :z))))),
      s(:def, :test_AREF_fstring_key,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:hash,
              s(:pair,
                s(:str, "abc"),
                s(:int, 1)))),
          s(:lvasgn, :before,
            s(:send,
              s(:const, nil, :GC), :stat,
              s(:sym, :total_allocated_objects))),
          s(:block,
            s(:send,
              s(:int, 5), :times),
            s(:args),
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "abc"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :before),
            s(:send,
              s(:const, nil, :GC), :stat,
              s(:sym, :total_allocated_objects))))),
      s(:def, :test_ASET_fstring_key,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :a),
              s(:lvasgn, :b)),
            s(:array,
              s(:hash),
              s(:hash))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :a), :[]=,
              s(:str, "abc"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :b), :[]=,
              s(:str, "abc"),
              s(:int, 1))),
          s(:send, nil, :assert_same,
            s(:send,
              s(:send,
                s(:lvar, :a), :keys), :[],
              s(:int, 0)),
            s(:send,
              s(:send,
                s(:lvar, :b), :keys), :[],
              s(:int, 0))))),
      s(:def, :test_NEWHASH_fstring_key,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:hash,
              s(:pair,
                s(:str, "ABC"),
                s(:sym, :t)))),
          s(:lvasgn, :b,
            s(:hash,
              s(:pair,
                s(:str, "ABC"),
                s(:sym, :t)))),
          s(:send, nil, :assert_same,
            s(:send,
              s(:send,
                s(:lvar, :a), :keys), :[],
              s(:int, 0)),
            s(:send,
              s(:send,
                s(:lvar, :b), :keys), :[],
              s(:int, 0))),
          s(:send, nil, :assert_same,
            s(:send,
              s(:str, "ABC"), :freeze),
            s(:send,
              s(:send,
                s(:lvar, :a), :keys), :[],
              s(:int, 0))))),
      s(:def, :test_EQUAL,
        s(:args),
        s(:begin,
          s(:lvasgn, :h1,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:str, "a"),
                  s(:int, 1)),
                s(:pair,
                  s(:str, "c"),
                  s(:int, 2))))),
          s(:lvasgn, :h2,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:str, "a"),
                  s(:int, 1)),
                s(:pair,
                  s(:str, "c"),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 7),
                  s(:int, 35))))),
          s(:lvasgn, :h3,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:str, "a"),
                  s(:int, 1)),
                s(:pair,
                  s(:str, "c"),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 7),
                  s(:int, 35))))),
          s(:lvasgn, :h4,
            s(:send,
              s(:ivar, :@cls), :[])),
          s(:send, nil, :assert_equal,
            s(:lvar, :h1),
            s(:lvar, :h1)),
          s(:send, nil, :assert_equal,
            s(:lvar, :h2),
            s(:lvar, :h2)),
          s(:send, nil, :assert_equal,
            s(:lvar, :h3),
            s(:lvar, :h3)),
          s(:send, nil, :assert_equal,
            s(:lvar, :h4),
            s(:lvar, :h4)),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :h1),
            s(:lvar, :h2)),
          s(:send, nil, :assert_equal,
            s(:lvar, :h2),
            s(:lvar, :h3)),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :h3),
            s(:lvar, :h4)))),
      s(:def, :test_clear,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_operator,
            s(:send,
              s(:ivar, :@h), :size),
            s(:sym, :>),
            s(:int, 0)),
          s(:send,
            s(:ivar, :@h), :clear),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@h), :size)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@h), :[],
              s(:int, 1))))),
      s(:def, :test_clone,
        s(:args),
        s(:for,
          s(:lvasgn, :taint),
          s(:array,
            s(:false),
            s(:true)),
          s(:for,
            s(:lvasgn, :frozen),
            s(:array,
              s(:false),
              s(:true)),
            s(:begin,
              s(:lvasgn, :a,
                s(:send,
                  s(:ivar, :@h), :clone)),
              s(:if,
                s(:lvar, :taint),
                s(:send,
                  s(:lvar, :a), :taint), nil),
              s(:if,
                s(:lvar, :frozen),
                s(:send,
                  s(:lvar, :a), :freeze), nil),
              s(:lvasgn, :b,
                s(:send,
                  s(:lvar, :a), :clone)),
              s(:send, nil, :assert_equal,
                s(:lvar, :a),
                s(:lvar, :b)),
              s(:send, nil, :assert_not_same,
                s(:lvar, :a),
                s(:lvar, :b)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :a), :frozen?),
                s(:send,
                  s(:lvar, :b), :frozen?)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :a), :tainted?),
                s(:send,
                  s(:lvar, :b), :tainted?)))))),
      s(:def, :test_default,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@h), :default)),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :new,
              s(:sym, :xyzzy))),
          s(:send, nil, :assert_equal,
            s(:sym, :xyzzy),
            s(:send,
              s(:lvar, :h), :default)))),
      s(:def, :test_default=,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@h), :default)),
          s(:send,
            s(:ivar, :@h), :default=,
            s(:sym, :xyzzy)),
          s(:send, nil, :assert_equal,
            s(:sym, :xyzzy),
            s(:send,
              s(:ivar, :@h), :default)))),
      s(:def, :test_delete,
        s(:args),
        s(:begin,
          s(:lvasgn, :h1,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:str, "one")),
                s(:pair,
                  s(:int, 2),
                  s(:str, "two")),
                s(:pair,
                  s(:true),
                  s(:str, "true"))))),
          s(:lvasgn, :h2,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:str, "one")),
                s(:pair,
                  s(:int, 2),
                  s(:str, "two"))))),
          s(:lvasgn, :h3,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 2),
                  s(:str, "two"))))),
          s(:send, nil, :assert_equal,
            s(:str, "true"),
            s(:send,
              s(:lvar, :h1), :delete,
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:lvar, :h2),
            s(:lvar, :h1)),
          s(:send, nil, :assert_equal,
            s(:str, "one"),
            s(:send,
              s(:lvar, :h1), :delete,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:lvar, :h3),
            s(:lvar, :h1)),
          s(:send, nil, :assert_equal,
            s(:str, "two"),
            s(:send,
              s(:lvar, :h1), :delete,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@cls), :[]),
            s(:lvar, :h1)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :h1), :delete,
              s(:int, 99))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@cls), :[]),
            s(:lvar, :h1)),
          s(:send, nil, :assert_equal,
            s(:str, "default 99"),
            s(:block,
              s(:send,
                s(:lvar, :h1), :delete,
                s(:int, 99)),
              s(:args,
                s(:arg, :i)),
              s(:dstr,
                s(:str, "default "),
                s(:begin,
                  s(:lvar, :i))))))),
      s(:def, :test_delete_if,
        s(:args),
        s(:begin,
          s(:lvasgn, :base,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:str, "one")),
                s(:pair,
                  s(:int, 2),
                  s(:false)),
                s(:pair,
                  s(:true),
                  s(:str, "true")),
                s(:pair,
                  s(:str, "cat"),
                  s(:int, 99))))),
          s(:lvasgn, :h1,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:str, "one")),
                s(:pair,
                  s(:int, 2),
                  s(:false)),
                s(:pair,
                  s(:true),
                  s(:str, "true"))))),
          s(:lvasgn, :h2,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 2),
                  s(:false)),
                s(:pair,
                  s(:str, "cat"),
                  s(:int, 99))))),
          s(:lvasgn, :h3,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 2),
                  s(:false))))),
          s(:lvasgn, :h,
            s(:send,
              s(:lvar, :base), :dup)),
          s(:send, nil, :assert_equal,
            s(:lvar, :h),
            s(:block,
              s(:send,
                s(:lvar, :h), :delete_if),
              s(:args),
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@cls), :[]),
            s(:block,
              s(:send,
                s(:lvar, :h), :delete_if),
              s(:args),
              s(:true))),
          s(:lvasgn, :h,
            s(:send,
              s(:lvar, :base), :dup)),
          s(:send, nil, :assert_equal,
            s(:lvar, :h1),
            s(:block,
              s(:send,
                s(:lvar, :h), :delete_if),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:lvar, :k), :instance_of?,
                s(:const, nil, :String)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :h1),
            s(:lvar, :h)),
          s(:lvasgn, :h,
            s(:send,
              s(:lvar, :base), :dup)),
          s(:send, nil, :assert_equal,
            s(:lvar, :h2),
            s(:block,
              s(:send,
                s(:lvar, :h), :delete_if),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:lvar, :v), :instance_of?,
                s(:const, nil, :String)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :h2),
            s(:lvar, :h)),
          s(:lvasgn, :h,
            s(:send,
              s(:lvar, :base), :dup)),
          s(:send, nil, :assert_equal,
            s(:lvar, :h3),
            s(:block,
              s(:send,
                s(:lvar, :h), :delete_if),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:lvar, :v))),
          s(:send, nil, :assert_equal,
            s(:lvar, :h3),
            s(:lvar, :h)),
          s(:lvasgn, :h,
            s(:send,
              s(:lvar, :base), :dup)),
          s(:lvasgn, :n,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:lvar, :h), :delete_if),
            s(:args,
              s(:restarg, :a)),
            s(:begin,
              s(:op_asgn,
                s(:lvasgn, :n), :+,
                s(:int, 1)),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:lvar, :a), :size)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :base), :[],
                  s(:send,
                    s(:lvar, :a), :[],
                    s(:int, 0))),
                s(:send,
                  s(:lvar, :a), :[],
                  s(:int, 1))),
              s(:send,
                s(:lvar, :h), :shift),
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :base), :size),
            s(:lvar, :n)))),
      s(:def, :test_keep_if,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 3),
                  s(:int, 4)),
                s(:pair,
                  s(:int, 5),
                  s(:int, 6))))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:int, 3),
                s(:int, 4)),
              s(:pair,
                s(:int, 5),
                s(:int, 6))),
            s(:block,
              s(:send,
                s(:lvar, :h), :keep_if),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:send,
                  s(:lvar, :k), :+,
                  s(:lvar, :v)), :>=,
                s(:int, 7)))),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 3),
                  s(:int, 4)),
                s(:pair,
                  s(:int, 5),
                  s(:int, 6))))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:int, 1),
                s(:int, 2)),
              s(:pair,
                s(:int, 3),
                s(:int, 4)),
              s(:pair,
                s(:int, 5),
                s(:int, 6))),
            s(:block,
              s(:send,
                s(:lvar, :h), :keep_if),
              s(:args),
              s(:true))))),
      s(:def, :test_dup,
        s(:args),
        s(:for,
          s(:lvasgn, :taint),
          s(:array,
            s(:false),
            s(:true)),
          s(:for,
            s(:lvasgn, :frozen),
            s(:array,
              s(:false),
              s(:true)),
            s(:begin,
              s(:lvasgn, :a,
                s(:send,
                  s(:ivar, :@h), :dup)),
              s(:if,
                s(:lvar, :taint),
                s(:send,
                  s(:lvar, :a), :taint), nil),
              s(:if,
                s(:lvar, :frozen),
                s(:send,
                  s(:lvar, :a), :freeze), nil),
              s(:lvasgn, :b,
                s(:send,
                  s(:lvar, :a), :dup)),
              s(:send, nil, :assert_equal,
                s(:lvar, :a),
                s(:lvar, :b)),
              s(:send, nil, :assert_not_same,
                s(:lvar, :a),
                s(:lvar, :b)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :b), :frozen?)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :a), :tainted?),
                s(:send,
                  s(:lvar, :b), :tainted?)))))),
      s(:def, :test_dup_equality,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:str, "k"),
                  s(:str, "v"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :h),
            s(:send,
              s(:lvar, :h), :dup)),
          s(:lvasgn, :h1,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:lvar, :h),
                  s(:int, 1))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :h1),
            s(:send,
              s(:lvar, :h1), :dup)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:int, 1),
            s(:int, 2)),
          s(:send, nil, :assert_equal,
            s(:lvar, :h1),
            s(:send,
              s(:lvar, :h1), :dup)))),
      s(:def, :test_each,
        s(:args),
        s(:begin,
          s(:lvasgn, :count,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[]), :each),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:send,
              s(:lvar, :count), :+,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:lvar, :count)),
          s(:lvasgn, :h,
            s(:ivar, :@h)),
          s(:block,
            s(:send,
              s(:lvar, :h), :each),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:send, nil, :assert_equal,
              s(:lvar, :v),
              s(:send,
                s(:lvar, :h), :delete,
                s(:lvar, :k)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@cls), :[]),
            s(:lvar, :h)),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[])),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:int, 1),
            s(:int, 1)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:int, 2),
            s(:int, 2)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 1)),
              s(:array,
                s(:int, 2),
                s(:int, 2))),
            s(:send,
              s(:send,
                s(:lvar, :h), :each), :to_a)))),
      s(:def, :test_each_key,
        s(:args),
        s(:begin,
          s(:lvasgn, :count,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[]), :each_key),
            s(:args,
              s(:arg, :k)),
            s(:send,
              s(:lvar, :count), :+,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:lvar, :count)),
          s(:lvasgn, :h,
            s(:ivar, :@h)),
          s(:block,
            s(:send,
              s(:lvar, :h), :each_key),
            s(:args,
              s(:arg, :k)),
            s(:send,
              s(:lvar, :h), :delete,
              s(:lvar, :k))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@cls), :[]),
            s(:lvar, :h)))),
      s(:def, :test_each_pair,
        s(:args),
        s(:begin,
          s(:lvasgn, :count,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[]), :each_pair),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:send,
              s(:lvar, :count), :+,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:lvar, :count)),
          s(:lvasgn, :h,
            s(:ivar, :@h)),
          s(:block,
            s(:send,
              s(:lvar, :h), :each_pair),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:send, nil, :assert_equal,
              s(:lvar, :v),
              s(:send,
                s(:lvar, :h), :delete,
                s(:lvar, :k)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@cls), :[]),
            s(:lvar, :h)))),
      s(:def, :test_each_value,
        s(:args),
        s(:begin,
          s(:lvasgn, :res,
            s(:array)),
          s(:block,
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[]), :each_value),
            s(:args,
              s(:arg, :v)),
            s(:send,
              s(:lvar, :res), :<<,
              s(:lvar, :v))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:array), :length)),
          s(:block,
            s(:send,
              s(:ivar, :@h), :each_value),
            s(:args,
              s(:arg, :v)),
            s(:send,
              s(:lvar, :res), :<<,
              s(:lvar, :v))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:array), :length)),
          s(:lvasgn, :expected,
            s(:array)),
          s(:block,
            s(:send,
              s(:ivar, :@h), :each),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:send,
              s(:lvar, :expected), :<<,
              s(:lvar, :v))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :expected), :-,
              s(:lvar, :res))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :res), :-,
              s(:lvar, :expected))))),
      s(:def, :test_empty?,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@cls), :[])),
          s(:send, nil, :assert_not_empty,
            s(:ivar, :@h)))),
      s(:def, :test_fetch,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "gumbygumby"),
            s(:block,
              s(:send,
                s(:ivar, :@h), :fetch,
                s(:str, "gumby")),
              s(:args,
                s(:arg, :k)),
              s(:send,
                s(:lvar, :k), :*,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:str, "pokey"),
            s(:send,
              s(:ivar, :@h), :fetch,
              s(:str, "gumby"),
              s(:str, "pokey"))),
          s(:send, nil, :assert_equal,
            s(:str, "one"),
            s(:send,
              s(:ivar, :@h), :fetch,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@h), :fetch,
              s(:str, "nil"))),
          s(:send, nil, :assert_equal,
            s(:str, "nil"),
            s(:send,
              s(:ivar, :@h), :fetch,
              s(:nil))))),
      s(:def, :test_fetch_error,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :KeyError)),
            s(:args),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[]), :fetch,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :KeyError)),
            s(:args),
            s(:send,
              s(:ivar, :@h), :fetch,
              s(:str, "gumby"))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :KeyError)),
              s(:args),
              s(:send,
                s(:ivar, :@h), :fetch,
                s(:send,
                  s(:str, "gumby"), :*,
                  s(:int, 20))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "key not found: \"gumbygumby"),
              s(:regopt)),
            s(:send,
              s(:lvar, :e), :message)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\.\\.\\.\\z"),
              s(:regopt)),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_key2?,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:send,
                s(:ivar, :@cls), :[]),
              s(:sym, :key?),
              s(:int, 1))),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:send,
                s(:ivar, :@cls), :[]),
              s(:sym, :key?),
              s(:nil))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:ivar, :@h),
              s(:sym, :key?),
              s(:nil))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:ivar, :@h),
              s(:sym, :key?),
              s(:int, 1))),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:ivar, :@h),
              s(:sym, :key?),
              s(:str, "gumby"))))),
      s(:def, :test_value?,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:send,
                s(:ivar, :@cls), :[]),
              s(:sym, :value?),
              s(:int, 1))),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:send,
                s(:ivar, :@cls), :[]),
              s(:sym, :value?),
              s(:nil))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:ivar, :@h),
              s(:sym, :value?),
              s(:str, "one"))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:ivar, :@h),
              s(:sym, :value?),
              s(:nil))),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:ivar, :@h),
              s(:sym, :value?),
              s(:str, "gumby"))))),
      s(:def, :test_include?,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:send,
                s(:ivar, :@cls), :[]),
              s(:sym, :include?),
              s(:int, 1))),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:send,
                s(:ivar, :@cls), :[]),
              s(:sym, :include?),
              s(:nil))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:ivar, :@h),
              s(:sym, :include?),
              s(:nil))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:ivar, :@h),
              s(:sym, :include?),
              s(:int, 1))),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:ivar, :@h),
              s(:sym, :include?),
              s(:str, "gumby"))))),
      s(:def, :test_key,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@h), :key,
              s(:str, "one"))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@h), :key,
              s(:str, "nil"))),
          s(:send, nil, :assert_equal,
            s(:str, "nil"),
            s(:send,
              s(:ivar, :@h), :key,
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@h), :key,
              s(:str, "gumby"))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[]), :key,
              s(:str, "gumby"))))),
      s(:def, :test_values_at,
        s(:args),
        s(:begin,
          s(:lvasgn, :res,
            s(:send,
              s(:ivar, :@h), :values_at,
              s(:str, "dog"),
              s(:str, "cat"),
              s(:str, "horse"))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :res), :length)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:nil),
              s(:nil),
              s(:nil)),
            s(:lvar, :res)),
          s(:lvasgn, :res,
            s(:send,
              s(:ivar, :@h), :values_at)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :res), :length)),
          s(:lvasgn, :res,
            s(:send,
              s(:ivar, :@h), :values_at,
              s(:int, 3),
              s(:int, 2),
              s(:int, 1),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :res), :length)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "three"),
              s(:str, "two"),
              s(:str, "one"),
              s(:str, "nil")),
            s(:lvar, :res)),
          s(:lvasgn, :res,
            s(:send,
              s(:ivar, :@h), :values_at,
              s(:int, 3),
              s(:int, 99),
              s(:int, 1),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :res), :length)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "three"),
              s(:nil),
              s(:str, "one"),
              s(:str, "nil")),
            s(:lvar, :res)))),
      s(:def, :test_fetch_values,
        s(:args),
        s(:begin,
          s(:lvasgn, :res,
            s(:send,
              s(:ivar, :@h), :fetch_values)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :res), :length)),
          s(:lvasgn, :res,
            s(:send,
              s(:ivar, :@h), :fetch_values,
              s(:int, 3),
              s(:int, 2),
              s(:int, 1),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :res), :length)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "three"),
              s(:str, "two"),
              s(:str, "one"),
              s(:str, "nil")),
            s(:lvar, :res)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :KeyError)),
            s(:args),
            s(:send,
              s(:ivar, :@h), :fetch_values,
              s(:int, 3),
              s(:str, "invalid"))),
          s(:lvasgn, :res,
            s(:block,
              s(:send,
                s(:ivar, :@h), :fetch_values,
                s(:int, 3),
                s(:str, "invalid")),
              s(:args,
                s(:arg, :k)),
              s(:send,
                s(:lvar, :k), :upcase))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "three"),
              s(:str, "INVALID")),
            s(:lvar, :res)))),
      s(:def, :test_invert,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@h), :invert)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "one"))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "true"))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "nil"))),
          s(:block,
            s(:send,
              s(:lvar, :h), :each),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:send, nil, :assert_send,
              s(:array,
                s(:ivar, :@h),
                s(:sym, :key?),
                s(:lvar, :v)))),
          s(:lvasgn, :h,
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[],
                s(:hash,
                  s(:pair,
                    s(:str, "a"),
                    s(:int, 1)),
                  s(:pair,
                    s(:str, "b"),
                    s(:int, 2)),
                  s(:pair,
                    s(:str, "c"),
                    s(:int, 1)))), :invert)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :h), :length)),
          s(:send, nil, :assert_include,
            s(:array,
              s(:str, "a"),
              s(:str, "c")),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "b"),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 2))))),
      s(:def, :test_key?,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:send,
                s(:ivar, :@cls), :[]),
              s(:sym, :key?),
              s(:int, 1))),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:send,
                s(:ivar, :@cls), :[]),
              s(:sym, :key?),
              s(:nil))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:ivar, :@h),
              s(:sym, :key?),
              s(:nil))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:ivar, :@h),
              s(:sym, :key?),
              s(:int, 1))),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:ivar, :@h),
              s(:sym, :key?),
              s(:str, "gumby"))))),
      s(:def, :test_keys,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[]), :keys)),
          s(:lvasgn, :keys,
            s(:send,
              s(:ivar, :@h), :keys)),
          s(:lvasgn, :expected,
            s(:array)),
          s(:block,
            s(:send,
              s(:ivar, :@h), :each),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:send,
              s(:lvar, :expected), :<<,
              s(:lvar, :k))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :keys), :-,
              s(:lvar, :expected))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :expected), :-,
              s(:lvar, :keys))))),
      s(:def, :test_length,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[]), :length)),
          s(:send, nil, :assert_equal,
            s(:int, 7),
            s(:send,
              s(:ivar, :@h), :length)))),
      s(:def, :test_member?,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:send,
                s(:ivar, :@cls), :[]),
              s(:sym, :member?),
              s(:int, 1))),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:send,
                s(:ivar, :@cls), :[]),
              s(:sym, :member?),
              s(:nil))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:ivar, :@h),
              s(:sym, :member?),
              s(:nil))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:ivar, :@h),
              s(:sym, :member?),
              s(:int, 1))),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:ivar, :@h),
              s(:sym, :member?),
              s(:str, "gumby"))))),
      s(:def, :test_rehash,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:array,
              s(:str, "a"),
              s(:str, "b"))),
          s(:lvasgn, :c,
            s(:array,
              s(:str, "c"),
              s(:str, "d"))),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:lvar, :a),
                  s(:int, 100)),
                s(:pair,
                  s(:lvar, :c),
                  s(:int, 300))))),
          s(:send, nil, :assert_equal,
            s(:int, 100),
            s(:send,
              s(:lvar, :h), :[],
              s(:lvar, :a))),
          s(:send,
            s(:lvar, :a), :[]=,
            s(:int, 0),
            s(:str, "z")),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :h), :[],
              s(:lvar, :a))),
          s(:send,
            s(:lvar, :h), :rehash),
          s(:send, nil, :assert_equal,
            s(:int, 100),
            s(:send,
              s(:lvar, :h), :[],
              s(:lvar, :a))))),
      s(:def, :test_reject,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:int, 3),
                s(:int, 4)),
              s(:pair,
                s(:int, 5),
                s(:int, 6))),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cls), :[],
                  s(:hash,
                    s(:pair,
                      s(:int, 1),
                      s(:int, 2)),
                    s(:pair,
                      s(:int, 3),
                      s(:int, 4)),
                    s(:pair,
                      s(:int, 5),
                      s(:int, 6)))), :reject),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:send,
                  s(:lvar, :k), :+,
                  s(:lvar, :v)), :<,
                s(:int, 7)))),
          s(:lvasgn, :base,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:str, "one")),
                s(:pair,
                  s(:int, 2),
                  s(:false)),
                s(:pair,
                  s(:true),
                  s(:str, "true")),
                s(:pair,
                  s(:str, "cat"),
                  s(:int, 99))))),
          s(:lvasgn, :h1,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:str, "one")),
                s(:pair,
                  s(:int, 2),
                  s(:false)),
                s(:pair,
                  s(:true),
                  s(:str, "true"))))),
          s(:lvasgn, :h2,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 2),
                  s(:false)),
                s(:pair,
                  s(:str, "cat"),
                  s(:int, 99))))),
          s(:lvasgn, :h3,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 2),
                  s(:false))))),
          s(:lvasgn, :h,
            s(:send,
              s(:lvar, :base), :dup)),
          s(:send, nil, :assert_equal,
            s(:lvar, :h),
            s(:block,
              s(:send,
                s(:lvar, :h), :reject),
              s(:args),
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@cls), :[]),
            s(:block,
              s(:send,
                s(:lvar, :h), :reject),
              s(:args),
              s(:true))),
          s(:lvasgn, :h,
            s(:send,
              s(:lvar, :base), :dup)),
          s(:send, nil, :assert_equal,
            s(:lvar, :h1),
            s(:block,
              s(:send,
                s(:lvar, :h), :reject),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:lvar, :k), :instance_of?,
                s(:const, nil, :String)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :h2),
            s(:block,
              s(:send,
                s(:lvar, :h), :reject),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:lvar, :v), :instance_of?,
                s(:const, nil, :String)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :h3),
            s(:block,
              s(:send,
                s(:lvar, :h), :reject),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:lvar, :v))),
          s(:send, nil, :assert_equal,
            s(:lvar, :base),
            s(:lvar, :h)),
          s(:send,
            s(:lvar, :h), :instance_variable_set,
            s(:sym, :@foo),
            s(:sym, :foo)),
          s(:send,
            s(:lvar, :h), :default=,
            s(:int, 42)),
          s(:send,
            s(:lvar, :h), :taint),
          s(:lvasgn, :h,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :suppress_warning),
              s(:args),
              s(:block,
                s(:send,
                  s(:lvar, :h), :reject),
                s(:args),
                s(:false)))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Hash),
            s(:lvar, :h)),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :h),
            s(:sym, :tainted?)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :h), :default)),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:lvar, :h),
              s(:sym, :instance_variable_defined?),
              s(:sym, :@foo))))),
      s(:def, :test_reject!,
        s(:args),
        s(:begin,
          s(:lvasgn, :base,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:str, "one")),
                s(:pair,
                  s(:int, 2),
                  s(:false)),
                s(:pair,
                  s(:true),
                  s(:str, "true")),
                s(:pair,
                  s(:str, "cat"),
                  s(:int, 99))))),
          s(:lvasgn, :h1,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:str, "one")),
                s(:pair,
                  s(:int, 2),
                  s(:false)),
                s(:pair,
                  s(:true),
                  s(:str, "true"))))),
          s(:lvasgn, :h2,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 2),
                  s(:false)),
                s(:pair,
                  s(:str, "cat"),
                  s(:int, 99))))),
          s(:lvasgn, :h3,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 2),
                  s(:false))))),
          s(:lvasgn, :h,
            s(:send,
              s(:lvar, :base), :dup)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:block,
              s(:send,
                s(:lvar, :h), :reject!),
              s(:args),
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@cls), :[]),
            s(:block,
              s(:send,
                s(:lvar, :h), :reject!),
              s(:args),
              s(:true))),
          s(:lvasgn, :h,
            s(:send,
              s(:lvar, :base), :dup)),
          s(:send, nil, :assert_equal,
            s(:lvar, :h1),
            s(:block,
              s(:send,
                s(:lvar, :h), :reject!),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:lvar, :k), :instance_of?,
                s(:const, nil, :String)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :h1),
            s(:lvar, :h)),
          s(:lvasgn, :h,
            s(:send,
              s(:lvar, :base), :dup)),
          s(:send, nil, :assert_equal,
            s(:lvar, :h2),
            s(:block,
              s(:send,
                s(:lvar, :h), :reject!),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:lvar, :v), :instance_of?,
                s(:const, nil, :String)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :h2),
            s(:lvar, :h)),
          s(:lvasgn, :h,
            s(:send,
              s(:lvar, :base), :dup)),
          s(:send, nil, :assert_equal,
            s(:lvar, :h3),
            s(:block,
              s(:send,
                s(:lvar, :h), :reject!),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:lvar, :v))),
          s(:send, nil, :assert_equal,
            s(:lvar, :h3),
            s(:lvar, :h)))),
      s(:def, :test_replace,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 3),
                  s(:int, 4))))),
          s(:lvasgn, :h1,
            s(:send,
              s(:lvar, :h), :replace,
              s(:send,
                s(:ivar, :@cls), :[],
                s(:hash,
                  s(:pair,
                    s(:int, 9),
                    s(:int, 8)),
                  s(:pair,
                    s(:int, 7),
                    s(:int, 6)))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :h),
            s(:lvar, :h1)),
          s(:send, nil, :assert_equal,
            s(:int, 8),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 9))),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 7))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 1))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 2))))),
      s(:def, :test_replace_bug9230,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[])),
          s(:send,
            s(:lvar, :h), :replace,
            s(:send,
              s(:ivar, :@cls), :[])),
          s(:send, nil, :assert_empty,
            s(:lvar, :h)),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[])),
          s(:send,
            s(:lvar, :h), :replace,
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[]), :compare_by_identity)),
          s(:send, nil, :assert_predicate,
            s(:lvar, :h),
            s(:sym, :compare_by_identity?)))),
      s(:def, :test_shift,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@h), :dup)),
          s(:block,
            s(:send,
              s(:send,
                s(:ivar, :@h), :length), :times),
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :k),
                  s(:lvasgn, :v)),
                s(:send,
                  s(:lvar, :h), :shift)),
              s(:send, nil, :assert_send,
                s(:array,
                  s(:ivar, :@h),
                  s(:sym, :key?),
                  s(:lvar, :k))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:ivar, :@h), :[],
                  s(:lvar, :k)),
                s(:lvar, :v)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :h), :length)))),
      s(:def, :test_size,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[]), :length)),
          s(:send, nil, :assert_equal,
            s(:int, 7),
            s(:send,
              s(:ivar, :@h), :length)))),
      s(:def, :test_sort,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[]), :sort)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:lvar, :h)),
          s(:lvasgn, :h,
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[],
                s(:hash,
                  s(:pair,
                    s(:int, 1),
                    s(:int, 1)),
                  s(:pair,
                    s(:int, 2),
                    s(:int, 1)))), :sort)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 1)),
              s(:array,
                s(:int, 2),
                s(:int, 1))),
            s(:lvar, :h)),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:str, "cat"),
                  s(:str, "feline")),
                s(:pair,
                  s(:str, "ass"),
                  s(:str, "asinine")),
                s(:pair,
                  s(:str, "bee"),
                  s(:str, "beeline"))))),
          s(:lvasgn, :h1,
            s(:send,
              s(:lvar, :h), :sort)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "ass"),
                s(:str, "asinine")),
              s(:array,
                s(:str, "bee"),
                s(:str, "beeline")),
              s(:array,
                s(:str, "cat"),
                s(:str, "feline"))),
            s(:lvar, :h1)))),
      s(:def, :test_store,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :new)),
          s(:send,
            s(:lvar, :h), :store,
            s(:int, 1),
            s(:str, "one")),
          s(:send,
            s(:lvar, :h), :store,
            s(:int, 2),
            s(:str, "two")),
          s(:send,
            s(:lvar, :h), :store,
            s(:int, 3),
            s(:str, "three")),
          s(:send,
            s(:lvar, :h), :store,
            s(:self),
            s(:str, "self")),
          s(:send,
            s(:lvar, :h), :store,
            s(:lvar, :t),
            s(:str, "time")),
          s(:send,
            s(:lvar, :h), :store,
            s(:nil),
            s(:str, "nil")),
          s(:send,
            s(:lvar, :h), :store,
            s(:str, "nil"),
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:str, "one"),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "two"),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "three"),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:str, "self"),
            s(:send,
              s(:lvar, :h), :[],
              s(:self))),
          s(:send, nil, :assert_equal,
            s(:str, "time"),
            s(:send,
              s(:lvar, :h), :[],
              s(:lvar, :t))),
          s(:send, nil, :assert_equal,
            s(:str, "nil"),
            s(:send,
              s(:lvar, :h), :[],
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "nil"))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "koala"))),
          s(:send,
            s(:lvar, :h), :store,
            s(:int, 1),
            s(:int, 1)),
          s(:send,
            s(:lvar, :h), :store,
            s(:nil),
            s(:int, 99)),
          s(:send,
            s(:lvar, :h), :store,
            s(:str, "nil"),
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "two"),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "three"),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:str, "self"),
            s(:send,
              s(:lvar, :h), :[],
              s(:self))),
          s(:send, nil, :assert_equal,
            s(:str, "time"),
            s(:send,
              s(:lvar, :h), :[],
              s(:lvar, :t))),
          s(:send, nil, :assert_equal,
            s(:int, 99),
            s(:send,
              s(:lvar, :h), :[],
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "nil"))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "koala"))))),
      s(:def, :test_to_a,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[]), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 2))),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[],
                s(:hash,
                  s(:pair,
                    s(:int, 1),
                    s(:int, 2)))), :to_a)),
          s(:lvasgn, :a,
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[],
                s(:hash,
                  s(:pair,
                    s(:int, 1),
                    s(:int, 2)),
                  s(:pair,
                    s(:int, 3),
                    s(:int, 4)),
                  s(:pair,
                    s(:int, 5),
                    s(:int, 6)))), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :a), :delete,
              s(:array,
                s(:int, 1),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 3),
              s(:int, 4)),
            s(:send,
              s(:lvar, :a), :delete,
              s(:array,
                s(:int, 3),
                s(:int, 4)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 5),
              s(:int, 6)),
            s(:send,
              s(:lvar, :a), :delete,
              s(:array,
                s(:int, 5),
                s(:int, 6)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :a), :length)),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 3),
                  s(:int, 4)),
                s(:pair,
                  s(:int, 5),
                  s(:int, 6))))),
          s(:send,
            s(:lvar, :h), :taint),
          s(:lvasgn, :a,
            s(:send,
              s(:lvar, :h), :to_a)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :a), :tainted?)))),
      s(:def, :test_to_hash,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@h), :to_hash)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@h),
            s(:lvar, :h)),
          s(:send, nil, :assert_instance_of,
            s(:ivar, :@cls),
            s(:lvar, :h)))),
      s(:def, :test_to_h,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@h), :to_h)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@h),
            s(:lvar, :h)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Hash),
            s(:lvar, :h)))),
      s(:def, :test_nil_to_h,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:nil), :to_h)),
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:lvar, :h)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :h), :default)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :h), :default_proc)))),
      s(:def, :test_to_s,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :h,
              s(:send,
                s(:ivar, :@cls), :[],
                s(:hash,
                  s(:pair,
                    s(:int, 1),
                    s(:int, 2)),
                  s(:pair,
                    s(:str, "cat"),
                    s(:str, "dog")),
                  s(:pair,
                    s(:float, 1.5),
                    s(:sym, :fred))))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :h), :inspect),
              s(:send,
                s(:lvar, :h), :to_s)),
            s(:gvasgn, :$,,
              s(:str, ":")),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :h), :inspect),
              s(:send,
                s(:lvar, :h), :to_s)),
            s(:lvasgn, :h,
              s(:send,
                s(:ivar, :@cls), :[])),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :h), :inspect),
              s(:send,
                s(:lvar, :h), :to_s))),
          s(:gvasgn, :$,,
            s(:nil)))),
      s(:def, :test_update,
        s(:args),
        s(:begin,
          s(:lvasgn, :h1,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 2),
                  s(:int, 3)),
                s(:pair,
                  s(:int, 3),
                  s(:int, 4))))),
          s(:lvasgn, :h2,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 2),
                  s(:str, "two")),
                s(:pair,
                  s(:int, 4),
                  s(:str, "four"))))),
          s(:lvasgn, :ha,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 2),
                  s(:str, "two")),
                s(:pair,
                  s(:int, 3),
                  s(:int, 4)),
                s(:pair,
                  s(:int, 4),
                  s(:str, "four"))))),
          s(:lvasgn, :hb,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 2),
                  s(:int, 3)),
                s(:pair,
                  s(:int, 3),
                  s(:int, 4)),
                s(:pair,
                  s(:int, 4),
                  s(:str, "four"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :ha),
            s(:send,
              s(:lvar, :h1), :update,
              s(:lvar, :h2))),
          s(:send, nil, :assert_equal,
            s(:lvar, :ha),
            s(:lvar, :h1)),
          s(:lvasgn, :h1,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 2),
                  s(:int, 3)),
                s(:pair,
                  s(:int, 3),
                  s(:int, 4))))),
          s(:lvasgn, :h2,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 2),
                  s(:str, "two")),
                s(:pair,
                  s(:int, 4),
                  s(:str, "four"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :hb),
            s(:send,
              s(:lvar, :h2), :update,
              s(:lvar, :h1))),
          s(:send, nil, :assert_equal,
            s(:lvar, :hb),
            s(:lvar, :h2)))),
      s(:def, :test_value2?,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:send,
                s(:ivar, :@cls), :[]),
              s(:sym, :value?),
              s(:int, 1))),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:send,
                s(:ivar, :@cls), :[]),
              s(:sym, :value?),
              s(:nil))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:ivar, :@h),
              s(:sym, :value?),
              s(:nil))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:ivar, :@h),
              s(:sym, :value?),
              s(:str, "one"))),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:ivar, :@h),
              s(:sym, :value?),
              s(:str, "gumby"))))),
      s(:def, :test_values,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[]), :values)),
          s(:lvasgn, :vals,
            s(:send,
              s(:ivar, :@h), :values)),
          s(:lvasgn, :expected,
            s(:array)),
          s(:block,
            s(:send,
              s(:ivar, :@h), :each),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:send,
              s(:lvar, :expected), :<<,
              s(:lvar, :v))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :vals), :-,
              s(:lvar, :expected))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :expected), :-,
              s(:lvar, :vals))))),
      s(:def, :test_intialize_wrong_arguments,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Hash), :new,
              s(:int, 0)),
            s(:args), nil))),
      s(:def, :test_create,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:int, 1),
                s(:int, 2)),
              s(:pair,
                s(:int, 3),
                s(:int, 4))),
            s(:send,
              s(:ivar, :@cls), :[],
              s(:array,
                s(:array,
                  s(:int, 1),
                  s(:int, 2)),
                s(:array,
                  s(:int, 3),
                  s(:int, 4))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :Hash), :[],
              s(:int, 0),
              s(:int, 1),
              s(:int, 2))),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:regexp,
                s(:str, "wrong element type Fixnum at 1 "),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:ivar, :@cls), :[],
              s(:array,
                s(:array,
                  s(:int, 1),
                  s(:int, 2)),
                s(:int, 3)))),
          s(:lvasgn, :bug5406,
            s(:str, "[ruby-core:39945]")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError),
              s(:lvar, :bug5406)),
            s(:args),
            s(:send,
              s(:ivar, :@cls), :[],
              s(:array,
                s(:array,
                  s(:int, 1),
                  s(:int, 2)),
                s(:array,
                  s(:int, 3),
                  s(:int, 4),
                  s(:int, 5))))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:int, 1),
                s(:int, 2)),
              s(:pair,
                s(:int, 3),
                s(:int, 4))),
            s(:send,
              s(:ivar, :@cls), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :to_hash,
            s(:args),
            s(:hash,
              s(:pair,
                s(:int, 1),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:int, 1),
                s(:int, 2))),
            s(:send,
              s(:ivar, :@cls), :[],
              s(:lvar, :o)),
            s(:str, "[ruby-dev:34555]")))),
      s(:def, :test_rehash2,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 3),
                  s(:int, 4))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :h), :dup),
            s(:send,
              s(:lvar, :h), :rehash)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :h), :each),
              s(:args),
              s(:send,
                s(:lvar, :h), :rehash))),
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[]), :rehash)))),
      s(:def, :test_fetch2,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:sym, :bar),
          s(:block,
            s(:send,
              s(:ivar, :@h), :fetch,
              s(:int, 0),
              s(:sym, :foo)),
            s(:args),
            s(:sym, :bar)))),
      s(:def, :test_default_proc,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:block,
              s(:send,
                s(:ivar, :@cls), :new),
              s(:args,
                s(:arg, :hh),
                s(:arg, :k)),
              s(:send,
                s(:send,
                  s(:lvar, :hh), :+,
                  s(:lvar, :k)), :+,
                s(:str, "baz")))),
          s(:send, nil, :assert_equal,
            s(:str, "foobarbaz"),
            s(:send,
              s(:send,
                s(:lvar, :h), :default_proc), :call,
              s(:str, "foo"),
              s(:str, "bar"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :h), :default_proc=,
              s(:nil))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :h), :default_proc)),
          s(:send,
            s(:lvar, :h), :default_proc=,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :_),
                s(:arg, :_)),
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :h), :[],
              s(:sym, :nope))),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[])),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :h), :default_proc)))),
      s(:def, :test_shift2,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:block,
              s(:send,
                s(:ivar, :@cls), :new),
              s(:args,
                s(:arg, :hh),
                s(:arg, :k)),
              s(:sym, :foo))),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:int, 1),
            s(:int, 2)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :h), :shift)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :h), :shift)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :h), :shift)),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :new,
              s(:sym, :foo))),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:int, 1),
            s(:int, 2)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :h), :shift)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :h), :shift)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :h), :shift)),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2))))),
          s(:block,
            s(:send,
              s(:lvar, :h), :each),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 1),
                s(:int, 2)),
              s(:send,
                s(:lvar, :h), :shift))))),
      s(:def, :test_shift_none,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:block,
              s(:send,
                s(:ivar, :@cls), :new),
              s(:args,
                s(:arg, :hh),
                s(:arg, :k)),
              s(:str, "foo"))),
          s(:defs,
            s(:lvar, :h), :default,
            s(:args,
              s(:optarg, :k,
                s(:nil))),
            s(:send,
              s(:zsuper), :upcase)),
          s(:send, nil, :assert_equal,
            s(:str, "FOO"),
            s(:send,
              s(:lvar, :h), :shift)))),
      s(:def, :test_reject_bang2,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:int, 1),
                s(:int, 2))),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cls), :[],
                  s(:hash,
                    s(:pair,
                      s(:int, 1),
                      s(:int, 2)),
                    s(:pair,
                      s(:int, 3),
                      s(:int, 4)))), :reject!),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:send,
                  s(:lvar, :k), :+,
                  s(:lvar, :v)), :==,
                s(:int, 7)))),
          s(:send, nil, :assert_nil,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cls), :[],
                  s(:hash,
                    s(:pair,
                      s(:int, 1),
                      s(:int, 2)),
                    s(:pair,
                      s(:int, 3),
                      s(:int, 4)))), :reject!),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:lvar, :k), :==,
                s(:int, 5)))),
          s(:send, nil, :assert_nil,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cls), :[]), :reject!),
              s(:args), nil)))),
      s(:def, :test_select,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:int, 3),
                s(:int, 4)),
              s(:pair,
                s(:int, 5),
                s(:int, 6))),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cls), :[],
                  s(:hash,
                    s(:pair,
                      s(:int, 1),
                      s(:int, 2)),
                    s(:pair,
                      s(:int, 3),
                      s(:int, 4)),
                    s(:pair,
                      s(:int, 5),
                      s(:int, 6)))), :select),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:send,
                  s(:lvar, :k), :+,
                  s(:lvar, :v)), :>=,
                s(:int, 7)))),
          s(:lvasgn, :base,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:str, "one")),
                s(:pair,
                  s(:str, "2"),
                  s(:false)),
                s(:pair,
                  s(:true),
                  s(:str, "true")),
                s(:pair,
                  s(:str, "cat"),
                  s(:int, 99))))),
          s(:lvasgn, :h1,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:str, "2"),
                  s(:false)),
                s(:pair,
                  s(:str, "cat"),
                  s(:int, 99))))),
          s(:lvasgn, :h2,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:str, "one")),
                s(:pair,
                  s(:true),
                  s(:str, "true"))))),
          s(:lvasgn, :h3,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:str, "one")),
                s(:pair,
                  s(:true),
                  s(:str, "true")),
                s(:pair,
                  s(:str, "cat"),
                  s(:int, 99))))),
          s(:lvasgn, :h,
            s(:send,
              s(:lvar, :base), :dup)),
          s(:send, nil, :assert_equal,
            s(:lvar, :h),
            s(:block,
              s(:send,
                s(:lvar, :h), :select),
              s(:args),
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@cls), :[]),
            s(:block,
              s(:send,
                s(:lvar, :h), :select),
              s(:args),
              s(:false))),
          s(:lvasgn, :h,
            s(:send,
              s(:lvar, :base), :dup)),
          s(:send, nil, :assert_equal,
            s(:lvar, :h1),
            s(:block,
              s(:send,
                s(:lvar, :h), :select),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:lvar, :k), :instance_of?,
                s(:const, nil, :String)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :h2),
            s(:block,
              s(:send,
                s(:lvar, :h), :select),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:lvar, :v), :instance_of?,
                s(:const, nil, :String)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :h3),
            s(:block,
              s(:send,
                s(:lvar, :h), :select),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:lvar, :v))),
          s(:send, nil, :assert_equal,
            s(:lvar, :base),
            s(:lvar, :h)),
          s(:send,
            s(:lvar, :h), :instance_variable_set,
            s(:sym, :@foo),
            s(:sym, :foo)),
          s(:send,
            s(:lvar, :h), :default=,
            s(:int, 42)),
          s(:send,
            s(:lvar, :h), :taint),
          s(:lvasgn, :h,
            s(:block,
              s(:send,
                s(:lvar, :h), :select),
              s(:args),
              s(:true))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Hash),
            s(:lvar, :h)),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :h),
            s(:sym, :tainted?)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :h), :default)),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:lvar, :h),
              s(:sym, :instance_variable_defined?),
              s(:sym, :@foo))))),
      s(:def, :test_select!,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 3),
                  s(:int, 4)),
                s(:pair,
                  s(:int, 5),
                  s(:int, 6))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :h),
            s(:block,
              s(:send,
                s(:lvar, :h), :select!),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:send,
                  s(:lvar, :k), :+,
                  s(:lvar, :v)), :>=,
                s(:int, 7)))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:int, 3),
                s(:int, 4)),
              s(:pair,
                s(:int, 5),
                s(:int, 6))),
            s(:lvar, :h)),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 3),
                  s(:int, 4)),
                s(:pair,
                  s(:int, 5),
                  s(:int, 6))))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:block,
              s(:send,
                s(:lvar, :h), :select!),
              s(:args),
              s(:true))))),
      s(:def, :test_clear2,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[],
                s(:hash,
                  s(:pair,
                    s(:int, 1),
                    s(:int, 2)),
                  s(:pair,
                    s(:int, 3),
                    s(:int, 4)),
                  s(:pair,
                    s(:int, 5),
                    s(:int, 6)))), :clear)),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 3),
                  s(:int, 4)),
                s(:pair,
                  s(:int, 5),
                  s(:int, 6))))),
          s(:block,
            s(:send,
              s(:lvar, :h), :each),
            s(:args),
            s(:send,
              s(:lvar, :h), :clear)),
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:lvar, :h)))),
      s(:def, :test_replace2,
        s(:args),
        s(:begin,
          s(:lvasgn, :h1,
            s(:block,
              s(:send,
                s(:ivar, :@cls), :new),
              s(:args),
              s(:sym, :foo))),
          s(:lvasgn, :h2,
            s(:send,
              s(:ivar, :@cls), :new)),
          s(:send,
            s(:lvar, :h2), :replace,
            s(:lvar, :h1)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :h2), :[],
              s(:int, 0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :h2), :replace)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :h2), :replace,
              s(:int, 1))),
          s(:send,
            s(:lvar, :h2), :freeze),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :h2), :replace)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :h2), :replace,
              s(:lvar, :h1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :h2), :replace,
              s(:int, 42))))),
      s(:def, :test_size2,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:int, 0),
          s(:send,
            s(:send,
              s(:ivar, :@cls), :[]), :size))),
      s(:def, :test_equal2,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@cls), :[])),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send,
            s(:lvar, :o), :instance_variable_set,
            s(:sym, :@cls),
            s(:ivar, :@cls)),
          s(:defs,
            s(:lvar, :o), :to_hash,
            s(:args),
            s(:send,
              s(:ivar, :@cls), :[])),
          s(:defs,
            s(:lvar, :o), :==,
            s(:args,
              s(:arg, :x)),
            s(:true)),
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:lvar, :o)),
          s(:defs,
            s(:lvar, :o), :==,
            s(:args,
              s(:arg, :x)),
            s(:false)),
          s(:send, nil, :assert_not_equal,
            s(:hash),
            s(:lvar, :o)),
          s(:lvasgn, :h1,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2))))),
          s(:lvasgn, :h2,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 3),
                  s(:int, 4))))),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :h1),
            s(:lvar, :h2)),
          s(:lvasgn, :h1,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2))))),
          s(:lvasgn, :h2,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 4))))),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :h1),
            s(:lvar, :h2)))),
      s(:def, :test_eql,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:send,
                s(:ivar, :@cls), :[]),
              s(:sym, :eql?),
              s(:int, 0))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send,
            s(:lvar, :o), :instance_variable_set,
            s(:sym, :@cls),
            s(:ivar, :@cls)),
          s(:defs,
            s(:lvar, :o), :to_hash,
            s(:args),
            s(:send,
              s(:ivar, :@cls), :[])),
          s(:defs,
            s(:lvar, :o), :eql?,
            s(:args,
              s(:arg, :x)),
            s(:true)),
          s(:send, nil, :assert_send,
            s(:array,
              s(:send,
                s(:ivar, :@cls), :[]),
              s(:sym, :eql?),
              s(:lvar, :o))),
          s(:defs,
            s(:lvar, :o), :eql?,
            s(:args,
              s(:arg, :x)),
            s(:false)),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:send,
                s(:ivar, :@cls), :[]),
              s(:sym, :eql?),
              s(:lvar, :o))))),
      s(:def, :test_hash2,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[]), :hash)),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2))))),
          s(:send,
            s(:lvar, :h), :shift),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:hash), :hash),
            s(:send,
              s(:lvar, :h), :hash),
            s(:str, "[ruby-core:38650]")),
          s(:lvasgn, :bug9231,
            s(:str, "[ruby-core:58993] [Bug #9231]")),
          s(:send, nil, :assert_not_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[]), :hash),
            s(:lvar, :bug9231)))),
      s(:def, :test_update2,
        s(:args),
        s(:begin,
          s(:lvasgn, :h1,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 3),
                  s(:int, 4))))),
          s(:lvasgn, :h2,
            s(:hash,
              s(:pair,
                s(:int, 1),
                s(:int, 3)),
              s(:pair,
                s(:int, 5),
                s(:int, 7)))),
          s(:block,
            s(:send,
              s(:lvar, :h1), :update,
              s(:lvar, :h2)),
            s(:args,
              s(:arg, :k),
              s(:arg, :v1),
              s(:arg, :v2)),
            s(:send,
              s(:send,
                s(:lvar, :k), :+,
                s(:lvar, :v1)), :+,
              s(:lvar, :v2))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:int, 1),
                s(:int, 6)),
              s(:pair,
                s(:int, 3),
                s(:int, 4)),
              s(:pair,
                s(:int, 5),
                s(:int, 7))),
            s(:lvar, :h1)))),
      s(:def, :test_merge,
        s(:args),
        s(:begin,
          s(:lvasgn, :h1,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 3),
                  s(:int, 4))))),
          s(:lvasgn, :h2,
            s(:hash,
              s(:pair,
                s(:int, 1),
                s(:int, 3)),
              s(:pair,
                s(:int, 5),
                s(:int, 7)))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:int, 1),
                s(:int, 3)),
              s(:pair,
                s(:int, 3),
                s(:int, 4)),
              s(:pair,
                s(:int, 5),
                s(:int, 7))),
            s(:send,
              s(:lvar, :h1), :merge,
              s(:lvar, :h2))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:int, 1),
                s(:int, 6)),
              s(:pair,
                s(:int, 3),
                s(:int, 4)),
              s(:pair,
                s(:int, 5),
                s(:int, 7))),
            s(:block,
              s(:send,
                s(:lvar, :h1), :merge,
                s(:lvar, :h2)),
              s(:args,
                s(:arg, :k),
                s(:arg, :v1),
                s(:arg, :v2)),
              s(:send,
                s(:send,
                  s(:lvar, :k), :+,
                  s(:lvar, :v1)), :+,
                s(:lvar, :v2)))))),
      s(:def, :test_assoc,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 3),
              s(:int, 4)),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[],
                s(:hash,
                  s(:pair,
                    s(:int, 1),
                    s(:int, 2)),
                  s(:pair,
                    s(:int, 3),
                    s(:int, 4)),
                  s(:pair,
                    s(:int, 5),
                    s(:int, 6)))), :assoc,
              s(:int, 3))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[],
                s(:hash,
                  s(:pair,
                    s(:int, 1),
                    s(:int, 2)),
                  s(:pair,
                    s(:int, 3),
                    s(:int, 4)),
                  s(:pair,
                    s(:int, 5),
                    s(:int, 6)))), :assoc,
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:float, 1.0),
              s(:int, 1)),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[],
                s(:hash,
                  s(:pair,
                    s(:float, 1.0),
                    s(:int, 1)))), :assoc,
              s(:int, 1))))),
      s(:def, :test_assoc_compare_by_identity,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[])),
          s(:send,
            s(:lvar, :h), :compare_by_identity),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:str, "a"),
            s(:int, 1)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:send,
              s(:str, "a"), :dup),
            s(:int, 2)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a"),
              s(:int, 1)),
            s(:send,
              s(:lvar, :h), :assoc,
              s(:str, "a"))))),
      s(:def, :test_rassoc,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 3),
              s(:int, 4)),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[],
                s(:hash,
                  s(:pair,
                    s(:int, 1),
                    s(:int, 2)),
                  s(:pair,
                    s(:int, 3),
                    s(:int, 4)),
                  s(:pair,
                    s(:int, 5),
                    s(:int, 6)))), :rassoc,
              s(:int, 4))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 3),
                  s(:int, 4)),
                s(:pair,
                  s(:int, 5),
                  s(:int, 6))), :rassoc,
              s(:int, 3))))),
      s(:def, :test_flatten,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1)),
              s(:array,
                s(:int, 2))),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[],
                s(:hash,
                  s(:pair,
                    s(:array,
                      s(:int, 1)),
                    s(:array,
                      s(:int, 2))))), :flatten)),
          s(:lvasgn, :a,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:str, "one")),
                s(:pair,
                  s(:int, 2),
                  s(:array,
                    s(:int, 2),
                    s(:str, "two"))),
                s(:pair,
                  s(:int, 3),
                  s(:array,
                    s(:int, 3),
                    s(:array,
                      s(:str, "three"))))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:str, "one"),
              s(:int, 2),
              s(:array,
                s(:int, 2),
                s(:str, "two")),
              s(:int, 3),
              s(:array,
                s(:int, 3),
                s(:array,
                  s(:str, "three")))),
            s(:send,
              s(:lvar, :a), :flatten)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:str, "one")),
              s(:array,
                s(:int, 2),
                s(:array,
                  s(:int, 2),
                  s(:str, "two"))),
              s(:array,
                s(:int, 3),
                s(:array,
                  s(:int, 3),
                  s(:array,
                    s(:str, "three"))))),
            s(:send,
              s(:lvar, :a), :flatten,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:str, "one"),
              s(:int, 2),
              s(:array,
                s(:int, 2),
                s(:str, "two")),
              s(:int, 3),
              s(:array,
                s(:int, 3),
                s(:array,
                  s(:str, "three")))),
            s(:send,
              s(:lvar, :a), :flatten,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:str, "one"),
              s(:int, 2),
              s(:int, 2),
              s(:str, "two"),
              s(:int, 3),
              s(:int, 3),
              s(:array,
                s(:str, "three"))),
            s(:send,
              s(:lvar, :a), :flatten,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:str, "one"),
              s(:int, 2),
              s(:int, 2),
              s(:str, "two"),
              s(:int, 3),
              s(:int, 3),
              s(:str, "three")),
            s(:send,
              s(:lvar, :a), :flatten,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:str, "one"),
              s(:int, 2),
              s(:int, 2),
              s(:str, "two"),
              s(:int, 3),
              s(:int, 3),
              s(:str, "three")),
            s(:send,
              s(:lvar, :a), :flatten,
              s(:int, -1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :a), :flatten,
              s(:const, nil, :Object))))),
      s(:def, :test_callcc,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2))))),
          s(:lvasgn, :c,
            s(:nil)),
          s(:lvasgn, :f,
            s(:false)),
          s(:block,
            s(:send,
              s(:lvar, :h), :each),
            s(:args),
            s(:block,
              s(:send, nil, :callcc),
              s(:args,
                s(:arg, :c2)),
              s(:lvasgn, :c,
                s(:lvar, :c2)))),
          s(:if,
            s(:lvar, :f), nil,
            s(:begin,
              s(:lvasgn, :f,
                s(:true)),
              s(:send,
                s(:lvar, :c), :call))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :h), :each),
              s(:args),
              s(:send,
                s(:lvar, :h), :rehash))),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2))))),
          s(:lvasgn, :c,
            s(:nil)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :h), :each),
                s(:args),
                s(:block,
                  s(:send, nil, :callcc),
                  s(:args,
                    s(:arg, :c2)),
                  s(:lvasgn, :c,
                    s(:lvar, :c2)))),
              s(:send,
                s(:lvar, :h), :clear),
              s(:send,
                s(:lvar, :c), :call))))),
      s(:def, :test_callcc_iter_level,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9105,
            s(:str, "[ruby-dev:47803] [Bug #9105]")),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 3),
                  s(:int, 4))))),
          s(:lvasgn, :c,
            s(:nil)),
          s(:lvasgn, :f,
            s(:false)),
          s(:block,
            s(:send,
              s(:lvar, :h), :each),
            s(:args),
            s(:block,
              s(:send, nil, :callcc),
              s(:args,
                s(:arg, :c2)),
              s(:lvasgn, :c,
                s(:lvar, :c2)))),
          s(:if,
            s(:lvar, :f), nil,
            s(:begin,
              s(:lvasgn, :f,
                s(:true)),
              s(:send,
                s(:lvar, :c), :call))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :RuntimeError),
              s(:lvar, :bug9105)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :h), :each),
              s(:args,
                s(:arg, :i),
                s(:arg, :j)),
              s(:begin,
                s(:send,
                  s(:lvar, :h), :delete,
                  s(:lvar, :i)),
                s(:send, nil, :assert_not_equal,
                  s(:false),
                  s(:lvar, :i),
                  s(:lvar, :bug9105))))))),
      s(:def, :test_callcc_escape,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9105,
            s(:str, "[ruby-dev:47803] [Bug #9105]")),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :RuntimeError),
              s(:lvar, :bug9105)),
            s(:args),
            s(:begin,
              s(:lvasgn, :h,
                s(:send,
                  s(:ivar, :@cls), :[])),
              s(:lvasgn, :cnt,
                s(:int, 0)),
              s(:lvasgn, :c,
                s(:block,
                  s(:send, nil, :callcc),
                  s(:args,
                    s(:arg, :cc)),
                  s(:lvar, :cc))),
              s(:send,
                s(:lvar, :h), :[]=,
                s(:lvar, :cnt),
                s(:true)),
              s(:block,
                s(:send,
                  s(:lvar, :h), :each),
                s(:args,
                  s(:arg, :i)),
                s(:begin,
                  s(:op_asgn,
                    s(:lvasgn, :cnt), :+,
                    s(:int, 1)),
                  s(:if,
                    s(:send,
                      s(:lvar, :cnt), :==,
                      s(:int, 1)),
                    s(:send,
                      s(:lvar, :c), :call), nil))))))),
      s(:def, :test_callcc_reenter,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9105,
            s(:str, "[ruby-dev:47803] [Bug #9105]")),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :RuntimeError),
              s(:lvar, :bug9105)),
            s(:args),
            s(:begin,
              s(:lvasgn, :h,
                s(:send,
                  s(:ivar, :@cls), :[],
                  s(:hash,
                    s(:pair,
                      s(:int, 1),
                      s(:int, 2)),
                    s(:pair,
                      s(:int, 3),
                      s(:int, 4))))),
              s(:lvasgn, :c,
                s(:nil)),
              s(:lvasgn, :f,
                s(:false)),
              s(:block,
                s(:send,
                  s(:lvar, :h), :each),
                s(:args,
                  s(:arg, :i)),
                s(:begin,
                  s(:if,
                    s(:lvar, :c), nil,
                    s(:block,
                      s(:send, nil, :callcc),
                      s(:args,
                        s(:arg, :c2)),
                      s(:lvasgn, :c,
                        s(:lvar, :c2)))),
                  s(:if,
                    s(:lvar, :f),
                    s(:send,
                      s(:lvar, :h), :delete,
                      s(:int, 1)), nil))),
              s(:if,
                s(:lvar, :f), nil,
                s(:begin,
                  s(:lvasgn, :f,
                    s(:true)),
                  s(:send,
                    s(:lvar, :c), :call))))))),
      s(:def, :test_threaded_iter_level,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9105,
            s(:str, "[ruby-dev:47807] [Bug #9105]")),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:int, 1),
                  s(:int, 2))))),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:int, 2), :times), :map),
                s(:args),
                s(:begin,
                  s(:lvasgn, :f,
                    s(:false)),
                  s(:lvasgn, :th,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Thread), :start),
                      s(:args),
                      s(:block,
                        s(:send,
                          s(:lvar, :h), :each),
                        s(:args),
                        s(:begin,
                          s(:lvasgn, :f,
                            s(:true)),
                          s(:send, nil, :sleep))))),
                  s(:until,
                    s(:lvar, :f),
                    s(:send,
                      s(:const, nil, :Thread), :pass)),
                  s(:until,
                    s(:send,
                      s(:lvar, :th), :stop?),
                    s(:send,
                      s(:const, nil, :Thread), :pass)),
                  s(:lvar, :th))), :each),
            s(:args,
              s(:arg, :th)),
            s(:begin,
              s(:send,
                s(:lvar, :th), :run),
              s(:send,
                s(:lvar, :th), :join))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :RuntimeError),
              s(:lvar, :bug9105)),
            s(:args),
            s(:send,
              s(:lvar, :h), :[]=,
              s(:int, 5),
              s(:int, 6))),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:lvar, :h), :[],
              s(:int, 5)),
            s(:lvar, :bug9105)))),
      s(:def, :test_compare_by_identity,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:str, "foo")),
          s(:send, nil, :assert_not_predicate,
            s(:send,
              s(:ivar, :@cls), :[]),
            s(:sym, :compare_by_identity?)),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:lvar, :a),
                  s(:str, "bar"))))),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :h),
            s(:sym, :compare_by_identity?)),
          s(:send,
            s(:lvar, :h), :compare_by_identity),
          s(:send, nil, :assert_predicate,
            s(:lvar, :h),
            s(:sym, :compare_by_identity?)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :h), :[],
              s(:str, "foo"))),
          s(:lvasgn, :bug8703,
            s(:str, "[ruby-core:56256] [Bug #8703] copied identhash")),
          s(:send,
            s(:lvar, :h), :clear),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:lvar, :h), :dup),
            s(:sym, :compare_by_identity?),
            s(:lvar, :bug8703)))),
      s(:def, :test_same_key,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9646,
            s(:str, "[ruby-dev:48047] [Bug #9646] Infinite loop at Hash#each")),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:lvasgn, :a,
                s(:array)),
              s(:int, 1))),
          s(:send,
            s(:lvar, :a), :<<,
            s(:int, 1)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:array),
            s(:int, 2)),
          s(:send,
            s(:lvar, :a), :clear),
          s(:lvasgn, :cnt,
            s(:int, 0)),
          s(:lvasgn, :r,
            s(:block,
              s(:send,
                s(:lvar, :h), :each),
              s(:args),
              s(:if,
                s(:send,
                  s(:begin,
                    s(:op_asgn,
                      s(:lvasgn, :cnt), :+,
                      s(:int, 1))), :>,
                  s(:int, 100)),
                s(:break,
                  s(:nil)), nil))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :r),
            s(:lvar, :bug9646)))),
      s(:class,
        s(:const, nil, :ObjWithHash), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :value),
              s(:arg, :hash)),
            s(:begin,
              s(:ivasgn, :@value,
                s(:lvar, :value)),
              s(:ivasgn, :@hash,
                s(:lvar, :hash)))),
          s(:send, nil, :attr_reader,
            s(:sym, :value),
            s(:sym, :hash)),
          s(:def, :eql?,
            s(:args,
              s(:arg, :other)),
            s(:send,
              s(:ivar, :@value), :==,
              s(:send,
                s(:lvar, :other), :value))))),
      s(:def, :test_hash_hash,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:hash,
                s(:pair,
                  s(:int, 0),
                  s(:int, 2)),
                s(:pair,
                  s(:int, 11),
                  s(:int, 1))), :hash),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[],
                s(:hash,
                  s(:pair,
                    s(:int, 11),
                    s(:int, 1)),
                  s(:pair,
                    s(:int, 0),
                    s(:int, 2)))), :hash)),
          s(:lvasgn, :o1,
            s(:send,
              s(:const, nil, :ObjWithHash), :new,
              s(:int, 0),
              s(:int, 1))),
          s(:lvasgn, :o2,
            s(:send,
              s(:const, nil, :ObjWithHash), :new,
              s(:int, 11),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:hash,
                s(:pair,
                  s(:lvar, :o1),
                  s(:int, 1)),
                s(:pair,
                  s(:lvar, :o2),
                  s(:int, 2))), :hash),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[],
                s(:hash,
                  s(:pair,
                    s(:lvar, :o2),
                    s(:int, 2)),
                  s(:pair,
                    s(:lvar, :o1),
                    s(:int, 1)))), :hash)))),
      s(:def, :test_hash_bignum_hash,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:int, 2), :<<,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 32), :-,
                    s(:int, 3))), :-,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:hash,
                s(:pair,
                  s(:lvar, :x),
                  s(:int, 1))), :hash),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[],
                s(:hash,
                  s(:pair,
                    s(:lvar, :x),
                    s(:int, 1)))), :hash)),
          s(:lvasgn, :x,
            s(:send,
              s(:int, 2), :<<,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 64), :-,
                    s(:int, 3))), :-,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:hash,
                s(:pair,
                  s(:lvar, :x),
                  s(:int, 1))), :hash),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[],
                s(:hash,
                  s(:pair,
                    s(:lvar, :x),
                    s(:int, 1)))), :hash)),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :hash,
            s(:args),
            s(:send,
              s(:int, 2), :<<,
              s(:int, 100))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:hash,
                s(:pair,
                  s(:lvar, :o),
                  s(:int, 1))), :hash),
            s(:send,
              s(:send,
                s(:ivar, :@cls), :[],
                s(:hash,
                  s(:pair,
                    s(:lvar, :o),
                    s(:int, 1)))), :hash)))),
      s(:def, :test_hash_poped,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised),
          s(:args),
          s(:send, nil, :eval,
            s(:str, "a = 1; @cls[a => a]; a")))),
      s(:def, :test_recursive_key,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[])),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:lvar, :h), :[]=,
              s(:lvar, :h),
              s(:sym, :foo))),
          s(:send,
            s(:lvar, :h), :rehash),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :h), :[],
              s(:lvar, :h))))),
      s(:def, :test_inverse_hash,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature4262,
            s(:str, "[ruby-core:34334]")),
          s(:block,
            s(:send,
              s(:array,
                s(:send,
                  s(:ivar, :@cls), :[],
                  s(:hash,
                    s(:pair,
                      s(:int, 1),
                      s(:int, 2)))),
                s(:send,
                  s(:ivar, :@cls), :[],
                  s(:hash,
                    s(:pair,
                      s(:int, 123),
                      s(:str, "abc"))))), :each),
            s(:args,
              s(:arg, :h)),
            s(:send, nil, :assert_not_equal,
              s(:send,
                s(:lvar, :h), :hash),
              s(:send,
                s(:send,
                  s(:lvar, :h), :invert), :hash),
              s(:lvar, :feature4262))))),
      s(:def, :test_recursive_hash_value_struct,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9151,
            s(:str, "[ruby-core:58567] [Bug #9151]")),
          s(:lvasgn, :s,
            s(:block,
              s(:send,
                s(:const, nil, :Struct), :new,
                s(:sym, :x)),
              s(:args),
              s(:def, :hash,
                s(:args),
                s(:send,
                  s(:array,
                    s(:send, nil, :x),
                    s(:str, "")), :hash)))),
          s(:lvasgn, :a,
            s(:send,
              s(:lvar, :s), :new)),
          s(:lvasgn, :b,
            s(:send,
              s(:lvar, :s), :new)),
          s(:send,
            s(:lvar, :a), :x=,
            s(:lvar, :b)),
          s(:send,
            s(:lvar, :b), :x=,
            s(:lvar, :a)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :SystemStackError),
              s(:lvar, :bug9151)),
            s(:args),
            s(:send,
              s(:lvar, :a), :hash)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :SystemStackError),
              s(:lvar, :bug9151)),
            s(:args),
            s(:send,
              s(:lvar, :b), :hash)),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[])),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:array,
              s(:lvar, :a),
              s(:str, "hello")),
            s(:int, 1)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :h), :size)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:array,
              s(:lvar, :b),
              s(:str, "world")),
            s(:int, 2)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :h), :size)),
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:lvar, :a),
                  s(:lvar, :obj))))),
          s(:send, nil, :assert_same,
            s(:lvar, :obj),
            s(:send,
              s(:lvar, :h), :[],
              s(:lvar, :b))))),
      s(:def, :test_recursive_hash_value_array,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[])),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:array,
              s(:array,
                s(:int, 1))),
            s(:int, 1)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :h), :size)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:array,
              s(:array,
                s(:int, 2))),
            s(:int, 1)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :h), :size)),
          s(:lvasgn, :a,
            s(:array)),
          s(:send,
            s(:lvar, :a), :<<,
            s(:lvar, :a)),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[])),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:array,
              s(:lvar, :a),
              s(:int, 1)),
            s(:int, 1)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :h), :size)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:array,
              s(:lvar, :a),
              s(:int, 2)),
            s(:int, 2)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :h), :size)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:array,
              s(:lvar, :a),
              s(:lvar, :a)),
            s(:int, 3)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :h), :size)),
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:lvar, :a),
                  s(:lvar, :obj))))),
          s(:send, nil, :assert_same,
            s(:lvar, :obj),
            s(:send,
              s(:lvar, :h), :[],
              s(:array,
                s(:array,
                  s(:lvar, :a))))))),
      s(:def, :test_recursive_hash_value_array_hash,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[])),
          s(:lvasgn, :rec,
            s(:array,
              s(:lvar, :h))),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:sym, :x),
            s(:lvar, :rec)),
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :h2,
            s(:hash,
              s(:pair,
                s(:lvar, :rec),
                s(:lvar, :obj)))),
          s(:block,
            s(:send,
              s(:array,
                s(:lvar, :h),
                s(:hash,
                  s(:pair,
                    s(:sym, :x),
                    s(:lvar, :rec)))), :each),
            s(:args,
              s(:arg, :k)),
            s(:begin,
              s(:lvasgn, :k,
                s(:array,
                  s(:lvar, :k))),
              s(:send, nil, :assert_same,
                s(:lvar, :obj),
                s(:send,
                  s(:lvar, :h2), :[],
                  s(:lvar, :k)),
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args),
                  s(:send,
                    s(:lvar, :k), :inspect))))))),
      s(:def, :test_recursive_hash_value_hash_array,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[])),
          s(:lvasgn, :rec,
            s(:array,
              s(:lvar, :h))),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:sym, :x),
            s(:lvar, :rec)),
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :h2,
            s(:hash,
              s(:pair,
                s(:lvar, :h),
                s(:lvar, :obj)))),
          s(:block,
            s(:send,
              s(:array,
                s(:lvar, :rec),
                s(:array,
                  s(:lvar, :h))), :each),
            s(:args,
              s(:arg, :k)),
            s(:begin,
              s(:lvasgn, :k,
                s(:hash,
                  s(:pair,
                    s(:sym, :x),
                    s(:lvar, :k)))),
              s(:send, nil, :assert_same,
                s(:lvar, :obj),
                s(:send,
                  s(:lvar, :h2), :[],
                  s(:lvar, :k)),
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args),
                  s(:send,
                    s(:lvar, :k), :inspect))))))),
      s(:def, :test_exception_in_rehash_memory_leak,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@cls), :==,
              s(:const, nil, :Hash)), nil,
            s(:return)),
          s(:lvasgn, :bug9187,
            s(:str, "[ruby-core:58728] [Bug #9187]")),
          s(:lvasgn, :prepare,
            s(:dstr,
              s(:str, "    class Foo\n"),
              s(:str, "      def initialize\n"),
              s(:str, "        @raise = false\n"),
              s(:str, "      end\n"),
              s(:str, "\n"),
              s(:str, "      def hash\n"),
              s(:str, "        raise if @raise\n"),
              s(:str, "        @raise = true\n"),
              s(:str, "        return 0\n"),
              s(:str, "      end\n"),
              s(:str, "    end\n"),
              s(:str, "    h = {Foo.new => true}\n"))),
          s(:lvasgn, :code,
            s(:dstr,
              s(:str, "    10_0000.times do\n"),
              s(:str, "      h.rehash rescue nil\n"),
              s(:str, "    end\n"),
              s(:str, "    GC.start\n"))),
          s(:send, nil, :assert_no_memory_leak,
            s(:array),
            s(:lvar, :prepare),
            s(:lvar, :code),
            s(:lvar, :bug9187)))),
      s(:def, :test_wrapper_of_special_const,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9381,
            s(:str, "[ruby-core:59638] [Bug #9381]")),
          s(:lvasgn, :wrapper,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:def, :initialize,
                  s(:args,
                    s(:arg, :obj)),
                  s(:ivasgn, :@obj,
                    s(:lvar, :obj))),
                s(:def, :hash,
                  s(:args),
                  s(:send,
                    s(:ivar, :@obj), :hash)),
                s(:def, :eql?,
                  s(:args,
                    s(:arg, :other)),
                  s(:send,
                    s(:ivar, :@obj), :eql?,
                    s(:lvar, :other)))))),
          s(:lvasgn, :bad,
            s(:block,
              s(:send,
                s(:array,
                  s(:int, 5),
                  s(:true),
                  s(:false),
                  s(:nil),
                  s(:float, 0.0),
                  s(:float, 1.72723e-77),
                  s(:sym, :foo),
                  s(:send,
                    s(:dstr,
                      s(:str, "dsym_"),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:self), :object_id), :to_s,
                          s(:int, 16))),
                      s(:str, "_"),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:const, nil, :Time), :now), :to_i), :to_s,
                          s(:int, 16)))), :to_sym)), :select),
              s(:args,
                s(:arg, :x)),
              s(:begin,
                s(:lvasgn, :hash,
                  s(:hash,
                    s(:pair,
                      s(:lvar, :x),
                      s(:lvar, :bug9381)))),
                s(:send,
                  s(:send,
                    s(:lvar, :hash), :[],
                    s(:send,
                      s(:lvar, :wrapper), :new,
                      s(:lvar, :x))), :!=,
                  s(:lvar, :bug9381))))),
          s(:send, nil, :assert_empty,
            s(:lvar, :bad),
            s(:lvar, :bug9381)))),
      s(:def, :test_label_syntax,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@cls), :==,
              s(:const, nil, :Hash)), nil,
            s(:return)),
          s(:lvasgn, :feature4935,
            s(:str, "[ruby-core:37553] [Feature #4935]")),
          s(:lvasgn, :x,
            s(:str, "world")),
          s(:lvasgn, :hash,
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:const, nil, :SyntaxError),
                s(:lvar, :feature4935)),
              s(:args),
              s(:break,
                s(:send, nil, :eval,
                  s(:str, "{foo: 1, \"foo-bar\": 2, \"hello-\#{x}\": 3, 'hello-\#{x}': 4, 'bar': {}}"))))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:sym, :foo),
                s(:int, 1)),
              s(:pair,
                s(:sym, :"foo-bar"),
                s(:int, 2)),
              s(:pair,
                s(:sym, :"hello-world"),
                s(:int, 3)),
              s(:pair,
                s(:sym, :"hello-\#{x}"),
                s(:int, 4)),
              s(:pair,
                s(:sym, :bar),
                s(:hash))),
            s(:lvar, :hash),
            s(:lvar, :feature4935)),
          s(:lvasgn, :x,
            s(:lvar, :x)))),
      s(:def, :test_dig,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cls), :[],
              s(:hash,
                s(:pair,
                  s(:sym, :a),
                  s(:send,
                    s(:ivar, :@cls), :[],
                    s(:hash,
                      s(:pair,
                        s(:sym, :b),
                        s(:array,
                          s(:int, 1),
                          s(:int, 2),
                          s(:int, 3)))))),
                s(:pair,
                  s(:sym, :c),
                  s(:int, 4))))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :h), :dig,
              s(:sym, :a),
              s(:sym, :b),
              s(:int, 0))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :h), :dig,
              s(:sym, :b),
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :h), :dig,
              s(:sym, :c),
              s(:int, 1))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :dig,
            s(:args,
              s(:restarg, :args)),
            s(:hash,
              s(:pair,
                s(:sym, :dug),
                s(:lvar, :args)))),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:sym, :d),
            s(:lvar, :o)),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:sym, :dug),
                s(:array,
                  s(:sym, :foo),
                  s(:sym, :bar)))),
            s(:send,
              s(:lvar, :h), :dig,
              s(:sym, :d),
              s(:sym, :foo),
              s(:sym, :bar))))),
      s(:def, :test_dig_with_respond_to,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug12030,
            s(:str, "[ruby-core:73556] [Bug #12030]")),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :respond_to?,
            s(:args,
              s(:restarg, :args)),
            s(:zsuper)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:hash,
                s(:pair,
                  s(:sym, :foo),
                  s(:lvar, :o))), :dig,
              s(:sym, :foo),
              s(:sym, :foo))))),
      s(:def, :test_cmp,
        s(:args),
        s(:begin,
          s(:lvasgn, :h1,
            s(:hash,
              s(:pair,
                s(:sym, :a),
                s(:int, 1)),
              s(:pair,
                s(:sym, :b),
                s(:int, 2)))),
          s(:lvasgn, :h2,
            s(:hash,
              s(:pair,
                s(:sym, :a),
                s(:int, 1)),
              s(:pair,
                s(:sym, :b),
                s(:int, 2)),
              s(:pair,
                s(:sym, :c),
                s(:int, 3)))),
          s(:send, nil, :assert_operator,
            s(:lvar, :h1),
            s(:sym, :<=),
            s(:lvar, :h1)),
          s(:send, nil, :assert_operator,
            s(:lvar, :h1),
            s(:sym, :<=),
            s(:lvar, :h2)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :h2),
            s(:sym, :<=),
            s(:lvar, :h1)),
          s(:send, nil, :assert_operator,
            s(:lvar, :h2),
            s(:sym, :<=),
            s(:lvar, :h2)),
          s(:send, nil, :assert_operator,
            s(:lvar, :h1),
            s(:sym, :>=),
            s(:lvar, :h1)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :h1),
            s(:sym, :>=),
            s(:lvar, :h2)),
          s(:send, nil, :assert_operator,
            s(:lvar, :h2),
            s(:sym, :>=),
            s(:lvar, :h1)),
          s(:send, nil, :assert_operator,
            s(:lvar, :h2),
            s(:sym, :>=),
            s(:lvar, :h2)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :h1),
            s(:sym, :<),
            s(:lvar, :h1)),
          s(:send, nil, :assert_operator,
            s(:lvar, :h1),
            s(:sym, :<),
            s(:lvar, :h2)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :h2),
            s(:sym, :<),
            s(:lvar, :h1)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :h2),
            s(:sym, :<),
            s(:lvar, :h2)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :h1),
            s(:sym, :>),
            s(:lvar, :h1)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :h1),
            s(:sym, :>),
            s(:lvar, :h2)),
          s(:send, nil, :assert_operator,
            s(:lvar, :h2),
            s(:sym, :>),
            s(:lvar, :h1)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :h2),
            s(:sym, :>),
            s(:lvar, :h2)))),
      s(:def, :test_cmp_samekeys,
        s(:args),
        s(:begin,
          s(:lvasgn, :h1,
            s(:hash,
              s(:pair,
                s(:sym, :a),
                s(:int, 1)))),
          s(:lvasgn, :h2,
            s(:hash,
              s(:pair,
                s(:sym, :a),
                s(:int, 2)))),
          s(:send, nil, :assert_operator,
            s(:lvar, :h1),
            s(:sym, :<=),
            s(:lvar, :h1)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :h1),
            s(:sym, :<=),
            s(:lvar, :h2)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :h2),
            s(:sym, :<=),
            s(:lvar, :h1)),
          s(:send, nil, :assert_operator,
            s(:lvar, :h2),
            s(:sym, :<=),
            s(:lvar, :h2)),
          s(:send, nil, :assert_operator,
            s(:lvar, :h1),
            s(:sym, :>=),
            s(:lvar, :h1)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :h1),
            s(:sym, :>=),
            s(:lvar, :h2)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :h2),
            s(:sym, :>=),
            s(:lvar, :h1)),
          s(:send, nil, :assert_operator,
            s(:lvar, :h2),
            s(:sym, :>=),
            s(:lvar, :h2)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :h1),
            s(:sym, :<),
            s(:lvar, :h1)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :h1),
            s(:sym, :<),
            s(:lvar, :h2)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :h2),
            s(:sym, :<),
            s(:lvar, :h1)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :h2),
            s(:sym, :<),
            s(:lvar, :h2)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :h1),
            s(:sym, :>),
            s(:lvar, :h1)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :h1),
            s(:sym, :>),
            s(:lvar, :h2)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :h2),
            s(:sym, :>),
            s(:lvar, :h1)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :h2),
            s(:sym, :>),
            s(:lvar, :h2)))),
      s(:def, :test_to_proc,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:hash,
              s(:pair,
                s(:int, 1),
                s(:int, 10)),
              s(:pair,
                s(:int, 2),
                s(:int, 20)),
              s(:pair,
                s(:int, 3),
                s(:int, 30)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 10),
              s(:int, 20),
              s(:int, 30)),
            s(:send,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)), :map,
              s(:block_pass,
                s(:lvar, :h)))))),
      s(:class,
        s(:const, nil, :TestSubHash),
        s(:const, nil, :TestHash),
        s(:begin,
          s(:class,
            s(:const, nil, :SubHash),
            s(:const, nil, :Hash),
            s(:def, :reject,
              s(:args,
                s(:restarg)),
              s(:zsuper))),
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:ivasgn, :@cls,
                s(:const, nil, :SubHash)),
              s(:zsuper))))))))
