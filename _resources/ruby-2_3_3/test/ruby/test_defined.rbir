s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestDefined),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:class,
        s(:const, nil, :Foo), nil,
        s(:begin,
          s(:def, :foo,
            s(:args),
            s(:send, nil, :p,
              s(:sym, :foo))),
          s(:send, nil, :protected,
            s(:sym, :foo)),
          s(:def, :bar,
            s(:args,
              s(:arg, :f)),
            s(:begin,
              s(:yield,
                s(:defined?,
                  s(:send,
                    s(:self), :foo))),
              s(:yield,
                s(:defined?,
                  s(:send,
                    s(:lvar, :f), :foo))))),
          s(:def, :baz,
            s(:args,
              s(:arg, :f)), nil),
          s(:send, nil, :attr_accessor,
            s(:sym, :attr)),
          s(:def, :attrasgn_test,
            s(:args),
            s(:yield,
              s(:defined?,
                s(:send,
                  s(:self), :attr=,
                  s(:int, 1))))))),
      s(:def, :defined_test,
        s(:args),
        s(:return,
          s(:send,
            s(:defined?,
              s(:yield)), :!))),
      s(:def, :test_defined,
        s(:args),
        s(:begin,
          s(:gvasgn, :$x,
            s(:nil)),
          s(:send, nil, :assert,
            s(:defined?,
              s(:gvar, :$x))),
          s(:send, nil, :assert_equal,
            s(:str, "global-variable"),
            s(:defined?,
              s(:gvar, :$x))),
          s(:send, nil, :assert_nil,
            s(:defined?,
              s(:send, nil, :foo))),
          s(:lvasgn, :foo,
            s(:int, 5)),
          s(:send, nil, :assert,
            s(:defined?,
              s(:lvar, :foo))),
          s(:send, nil, :assert,
            s(:defined?,
              s(:const, nil, :Array))),
          s(:send, nil, :assert,
            s(:defined?,
              s(:const,
                s(:cbase), :Array))),
          s(:send, nil, :assert,
            s(:defined?,
              s(:const,
                s(:const, nil, :File), :Constants))),
          s(:send, nil, :assert,
            s(:defined?,
              s(:send,
                s(:const, nil, :Object), :new))),
          s(:send, nil, :assert,
            s(:defined?,
              s(:send,
                s(:const, nil, :Object), :new))),
          s(:send, nil, :assert,
            s(:send,
              s(:defined?,
                s(:send,
                  s(:const, nil, :Object), :print)), :!)),
          s(:send, nil, :assert,
            s(:defined?,
              s(:send,
                s(:int, 1), :==,
                s(:int, 2)))),
          s(:lvasgn, :f,
            s(:send,
              s(:const, nil, :Foo), :new)),
          s(:send, nil, :assert_nil,
            s(:defined?,
              s(:send,
                s(:lvar, :f), :foo))),
          s(:block,
            s(:send,
              s(:lvar, :f), :bar,
              s(:lvar, :f)),
            s(:args,
              s(:arg, :v)),
            s(:send, nil, :assert,
              s(:lvar, :v))),
          s(:send, nil, :assert_nil,
            s(:defined?,
              s(:send,
                s(:lvar, :f), :quux))),
          s(:send, nil, :assert_nil,
            s(:defined?,
              s(:send,
                s(:lvar, :f), :baz,
                s(:send, nil, :x)))),
          s(:lvasgn, :x,
            s(:int, 0)),
          s(:send, nil, :assert,
            s(:defined?,
              s(:send,
                s(:lvar, :f), :baz,
                s(:lvar, :x)))),
          s(:send, nil, :assert_nil,
            s(:defined?,
              s(:send,
                s(:lvar, :f), :quux,
                s(:lvar, :x)))),
          s(:send, nil, :assert,
            s(:defined?,
              s(:send, nil, :print,
                s(:lvar, :x)))),
          s(:send, nil, :assert_nil,
            s(:defined?,
              s(:send, nil, :quux,
                s(:lvar, :x)))),
          s(:send, nil, :assert,
            s(:defined?,
              s(:send,
                s(:lvar, :f), :attr=,
                s(:int, 1)))),
          s(:block,
            s(:send,
              s(:lvar, :f), :attrasgn_test),
            s(:args,
              s(:arg, :v)),
            s(:send, nil, :assert,
              s(:lvar, :v))),
          s(:send, nil, :assert,
            s(:send, nil, :defined_test)),
          s(:send, nil, :assert,
            s(:send,
              s(:block,
                s(:send, nil, :defined_test),
                s(:args), nil), :!)),
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "a"),
              s(:regopt)),
            s(:str, "")),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:defined?,
              s(:back_ref, :$&))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:defined?,
              s(:back_ref, :$`))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:defined?,
              s(:back_ref, :$'))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:defined?,
              s(:back_ref, :$+))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:defined?,
              s(:nth_ref, 1))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:defined?,
              s(:nth_ref, 2))),
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "a"),
              s(:regopt)),
            s(:str, "a")),
          s(:send, nil, :assert_equal,
            s(:str, "global-variable"),
            s(:defined?,
              s(:back_ref, :$&))),
          s(:send, nil, :assert_equal,
            s(:str, "global-variable"),
            s(:defined?,
              s(:back_ref, :$`))),
          s(:send, nil, :assert_equal,
            s(:str, "global-variable"),
            s(:defined?,
              s(:back_ref, :$'))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:defined?,
              s(:back_ref, :$+))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:defined?,
              s(:nth_ref, 1))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:defined?,
              s(:nth_ref, 2))),
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "(a)"),
              s(:regopt)),
            s(:str, "a")),
          s(:send, nil, :assert_equal,
            s(:str, "global-variable"),
            s(:defined?,
              s(:back_ref, :$&))),
          s(:send, nil, :assert_equal,
            s(:str, "global-variable"),
            s(:defined?,
              s(:back_ref, :$`))),
          s(:send, nil, :assert_equal,
            s(:str, "global-variable"),
            s(:defined?,
              s(:back_ref, :$'))),
          s(:send, nil, :assert_equal,
            s(:str, "global-variable"),
            s(:defined?,
              s(:back_ref, :$+))),
          s(:send, nil, :assert_equal,
            s(:str, "global-variable"),
            s(:defined?,
              s(:nth_ref, 1))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:defined?,
              s(:nth_ref, 2))),
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "(a)b"),
              s(:regopt)),
            s(:str, "ab")),
          s(:send, nil, :assert_equal,
            s(:str, "global-variable"),
            s(:defined?,
              s(:back_ref, :$&))),
          s(:send, nil, :assert_equal,
            s(:str, "global-variable"),
            s(:defined?,
              s(:back_ref, :$`))),
          s(:send, nil, :assert_equal,
            s(:str, "global-variable"),
            s(:defined?,
              s(:back_ref, :$'))),
          s(:send, nil, :assert_equal,
            s(:str, "global-variable"),
            s(:defined?,
              s(:back_ref, :$+))),
          s(:send, nil, :assert_equal,
            s(:str, "global-variable"),
            s(:defined?,
              s(:nth_ref, 1))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:defined?,
              s(:nth_ref, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "nil"),
            s(:defined?,
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:str, "true"),
            s(:defined?,
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:str, "false"),
            s(:defined?,
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:str, "expression"),
            s(:defined?,
              s(:int, 1))),
          s(:lvasgn, :bug8224,
            s(:str, "[ruby-core:54024] [Bug #8224]")),
          s(:block,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1),
                  s(:int, 3))), :each),
            s(:args,
              s(:arg, :level)),
            s(:begin,
              s(:lvasgn, :expr,
                s(:send,
                  s(:send,
                    s(:str, "("), :*,
                    s(:lvar, :level)), :+,
                  s(:send,
                    s(:str, ")"), :*,
                    s(:lvar, :level)))),
              s(:send, nil, :assert_equal,
                s(:str, "nil"),
                s(:send, nil, :eval,
                  s(:dstr,
                    s(:str, "defined? "),
                    s(:begin,
                      s(:lvar, :expr)))),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :bug8224)),
                  s(:str, " defined? "),
                  s(:begin,
                    s(:lvar, :expr)))),
              s(:send, nil, :assert_equal,
                s(:str, "nil"),
                s(:send, nil, :eval,
                  s(:dstr,
                    s(:str, "defined?("),
                    s(:begin,
                      s(:lvar, :expr)),
                    s(:str, ")"))),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :bug8224)),
                  s(:str, " defined?("),
                  s(:begin,
                    s(:lvar, :expr)),
                  s(:str, ")"))))))),
      s(:def, :test_defined_impl_specific,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature7035,
            s(:str, "[ruby-core:47558]")),
          s(:send, nil, :assert_predicate,
            s(:defined?,
              s(:const, nil, :Foo)),
            s(:sym, :frozen?),
            s(:lvar, :feature7035)),
          s(:send, nil, :assert_same,
            s(:defined?,
              s(:const, nil, :Foo)),
            s(:defined?,
              s(:const, nil, :Array)),
            s(:lvar, :feature7035)))),
      s(:class,
        s(:const, nil, :TestAutoloadedSuperclass), nil,
        s(:send, nil, :autoload,
          s(:sym, :A),
          s(:str, "a"))),
      s(:class,
        s(:const, nil, :TestAutoloadedSubclass),
        s(:const, nil, :TestAutoloadedSuperclass),
        s(:def, :a?,
          s(:args),
          s(:defined?,
            s(:const, nil, :A)))),
      s(:def, :test_autoloaded_subclass,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug,
            s(:str, "[ruby-core:35509]")),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :TestAutoloadedSuperclass), :new)),
          s(:sclass,
            s(:lvar, :x),
            s(:def, :a?,
              s(:args),
              s(:defined?,
                s(:const, nil, :A)))),
          s(:send, nil, :assert_equal,
            s(:str, "constant"),
            s(:send,
              s(:lvar, :x), :a?),
            s(:lvar, :bug)),
          s(:send, nil, :assert_equal,
            s(:str, "constant"),
            s(:send,
              s(:send,
                s(:const, nil, :TestAutoloadedSubclass), :new), :a?),
            s(:lvar, :bug)))),
      s(:class,
        s(:const, nil, :TestAutoloadedNoload), nil,
        s(:begin,
          s(:send, nil, :autoload,
            s(:sym, :A),
            s(:str, "a")),
          s(:def, :a?,
            s(:args),
            s(:defined?,
              s(:const, nil, :A))),
          s(:def, :b?,
            s(:args),
            s(:defined?,
              s(:const,
                s(:const, nil, :A), :B))))),
      s(:def, :test_autoloaded_noload,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :loaded,
              s(:send,
                s(:gvar, :$"), :dup)),
            s(:send,
              s(:gvar, :$"), :clear),
            s(:lvasgn, :loadpath,
              s(:send,
                s(:gvar, :$:), :dup)),
            s(:send,
              s(:gvar, :$:), :clear),
            s(:lvasgn, :x,
              s(:send,
                s(:const, nil, :TestAutoloadedNoload), :new)),
            s(:send, nil, :assert_equal,
              s(:str, "constant"),
              s(:send,
                s(:lvar, :x), :a?)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :x), :b?)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:gvar, :$"))),
          s(:begin,
            s(:send,
              s(:gvar, :$"), :replace,
              s(:lvar, :loaded)),
            s(:send,
              s(:gvar, :$:), :replace,
              s(:lvar, :loadpath))))),
      s(:def, :test_exception,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5786,
            s(:str, "[ruby-dev:45021]")),
          s(:send, nil, :assert_nil,
            s(:defined?,
              s(:const,
                s(:send, nil, :raise,
                  s(:str, "[Bug#5786]")), :A)),
            s(:lvar, :bug5786)))),
      s(:def, :test_define_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6644,
            s(:str, "[ruby-core:45831]")),
          s(:lvasgn, :a,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:defs,
                s(:self), :def_f!,
                s(:args),
                s(:block,
                  s(:send,
                    s(:send, nil, :singleton_class), :send,
                    s(:sym, :define_method),
                    s(:sym, :f)),
                  s(:args),
                  s(:defined?,
                    s(:zsuper)))))),
          s(:lvasgn, :aa,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :a))),
          s(:send,
            s(:lvar, :a), :def_f!),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :a), :f)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :aa), :f)),
          s(:send,
            s(:lvar, :aa), :def_f!),
          s(:send, nil, :assert_equal,
            s(:str, "super"),
            s(:send,
              s(:lvar, :aa), :f),
            s(:lvar, :bug6644)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :a), :f),
            s(:lvar, :bug6644)))),
      s(:def, :test_super_in_included_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :c0,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:def, :m,
                s(:args), nil))),
          s(:lvasgn, :m1,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:def, :m,
                s(:args),
                s(:defined?,
                  s(:zsuper))))),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:lvar, :c0)),
              s(:args),
              s(:begin,
                s(:send, nil, :include,
                  s(:lvar, :m1)),
                s(:def, :m,
                  s(:args),
                  s(:zsuper))))),
          s(:send, nil, :assert_equal,
            s(:str, "super"),
            s(:send,
              s(:send,
                s(:lvar, :c), :new), :m)))),
      s(:def, :test_super_in_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8367,
            s(:str, "[ruby-core:54769] [Bug #8367]")),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:def, :x,
                s(:args), nil))),
          s(:lvasgn, :m,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:begin,
                s(:def, :b,
                  s(:args),
                  s(:yield)),
                s(:def, :x,
                  s(:args),
                  s(:block,
                    s(:send, nil, :b),
                    s(:args),
                    s(:return,
                      s(:defined?,
                        s(:zsuper)))))))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :c), :new)),
          s(:send,
            s(:lvar, :o), :extend,
            s(:lvar, :m)),
          s(:send, nil, :assert_equal,
            s(:str, "super"),
            s(:send,
              s(:lvar, :o), :x),
            s(:lvar, :bug8367)))),
      s(:def, :test_super_toplevel,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array),
          s(:str, "assert_nil(defined?(super))"))),
      s(:class,
        s(:const, nil, :ExampleRespondToMissing), nil,
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :called)),
          s(:def, :initialize,
            s(:args),
            s(:ivasgn, :@called,
              s(:false))),
          s(:def, :respond_to_missing?,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:ivasgn, :@called,
                s(:true)),
              s(:false))),
          s(:def, :existing_method,
            s(:args), nil),
          s(:def, :func_defined_existing_func,
            s(:args),
            s(:defined?,
              s(:send, nil, :existing_method))),
          s(:def, :func_defined_non_existing_func,
            s(:args),
            s(:defined?,
              s(:send, nil, :non_existing_method))))),
      s(:def, :test_method_by_respond_to_missing,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug_11211,
            s(:str, "[Bug #11211]")),
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :ExampleRespondToMissing), :new)),
          s(:send, nil, :assert_equal,
            s(:str, "method"),
            s(:defined?,
              s(:send,
                s(:lvar, :obj), :existing_method)),
            s(:lvar, :bug_11211)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :obj), :called),
            s(:lvar, :bug_11211)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:defined?,
              s(:send,
                s(:lvar, :obj), :non_existing_method)),
            s(:lvar, :bug_11211)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :obj), :called),
            s(:lvar, :bug_11211)),
          s(:lvasgn, :bug_11212,
            s(:str, "[Bug #11212]")),
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :ExampleRespondToMissing), :new)),
          s(:send, nil, :assert_equal,
            s(:str, "method"),
            s(:send,
              s(:lvar, :obj), :func_defined_existing_func),
            s(:lvar, :bug_11212)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :obj), :called),
            s(:lvar, :bug_11212)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :obj), :func_defined_non_existing_func),
            s(:lvar, :bug_11212)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :obj), :called),
            s(:lvar, :bug_11212)))))))
