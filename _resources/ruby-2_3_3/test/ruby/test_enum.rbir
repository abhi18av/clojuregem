s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:block,
    s(:send,
      s(:const, nil, :EnvUtil), :suppress_warning),
    s(:args),
    s(:send, nil, :require,
      s(:str, "continuation"))),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:class,
    s(:const, nil, :TestEnumerable),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@obj,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:sclass,
            s(:ivar, :@obj),
            s(:begin,
              s(:send, nil, :include,
                s(:const, nil, :Enumerable)),
              s(:def, :each,
                s(:args),
                s(:begin,
                  s(:yield,
                    s(:int, 1)),
                  s(:yield,
                    s(:int, 2)),
                  s(:yield,
                    s(:int, 3)),
                  s(:yield,
                    s(:int, 1)),
                  s(:yield,
                    s(:int, 2)),
                  s(:self))))),
          s(:ivasgn, :@empty,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:sclass,
            s(:ivar, :@empty),
            s(:begin,
              s(:send, nil, :attr_reader,
                s(:sym, :block)),
              s(:send, nil, :include,
                s(:const, nil, :Enumerable)),
              s(:def, :each,
                s(:args,
                  s(:blockarg, :block)),
                s(:begin,
                  s(:ivasgn, :@block,
                    s(:lvar, :block)),
                  s(:self))))),
          s(:ivasgn, :@verbose,
            s(:gvar, :$VERBOSE)),
          s(:gvasgn, :$VERBOSE,
            s(:nil)))),
      s(:def, :teardown,
        s(:args),
        s(:gvasgn, :$VERBOSE,
          s(:ivar, :@verbose))),
      s(:def, :test_grep_v,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 3)),
            s(:send,
              s(:ivar, :@obj), :grep_v,
              s(:irange,
                s(:int, 1),
                s(:int, 2)))),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:ivar, :@obj), :grep_v,
              s(:int, 2)),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 3),
              s(:int, 1)),
            s(:lvar, :a)),
          s(:lvasgn, :a,
            s(:array)),
          s(:lvasgn, :lambda,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:lvar, :a), :<<,
                s(:array,
                  s(:lvar, :x),
                  s(:lvar, :i))))),
          s(:send,
            s(:send,
              s(:ivar, :@obj), :each_with_index), :grep_v,
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:lvar, :x), :!=,
                s(:int, 2))),
            s(:block_pass,
              s(:lvar, :lambda))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 2),
                s(:int, 1)),
              s(:array,
                s(:int, 2),
                s(:int, 4))),
            s(:lvar, :a)))),
      s(:def, :test_grep,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:ivar, :@obj), :grep,
              s(:irange,
                s(:int, 1),
                s(:int, 2)))),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:ivar, :@obj), :grep,
              s(:int, 2)),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 2)),
            s(:lvar, :a)),
          s(:lvasgn, :bug5801,
            s(:str, "[ruby-dev:45041]")),
          s(:send,
            s(:ivar, :@empty), :grep,
            s(:regexp,
              s(:regopt))),
          s(:lvasgn, :block,
            s(:send,
              s(:ivar, :@empty), :block)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:lvar, :bug5801)),
            s(:args),
            s(:block,
              s(:send,
                s(:int, 100), :times),
              s(:args),
              s(:send,
                s(:lvar, :block), :call))),
          s(:lvasgn, :a,
            s(:array)),
          s(:lvasgn, :lambda,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:lvar, :a), :<<,
                s(:array,
                  s(:lvar, :x),
                  s(:lvar, :i))))),
          s(:send,
            s(:send,
              s(:ivar, :@obj), :each_with_index), :grep,
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:lvar, :x), :==,
                s(:int, 2))),
            s(:block_pass,
              s(:lvar, :lambda))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 2),
                s(:int, 1)),
              s(:array,
                s(:int, 2),
                s(:int, 4))),
            s(:lvar, :a)))),
      s(:def, :test_count,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:ivar, :@obj), :count)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@obj), :count,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :count),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:send,
                  s(:lvar, :x), :%,
                  s(:int, 2)), :==,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :count,
                s(:int, 1)),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:send,
                  s(:lvar, :x), :%,
                  s(:int, 2)), :==,
                s(:int, 1)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:ivar, :@obj), :count,
              s(:int, 0),
              s(:int, 1))),
          s(:if,
            s(:send,
              s(:const, nil, :RUBY_ENGINE), :==,
              s(:str, "ruby")),
            s(:begin,
              s(:lvasgn, :en,
                s(:block,
                  s(:send,
                    s(:const, nil, :Class), :new),
                  s(:args),
                  s(:begin,
                    s(:send, nil, :include,
                      s(:const, nil, :Enumerable)),
                    s(:alias,
                      s(:sym, :size),
                      s(:sym, :count)),
                    s(:def, :each,
                      s(:args),
                      s(:yield,
                        s(:int, 1)))))),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:send,
                    s(:lvar, :en), :new), :count),
                s(:str, "[ruby-core:24794]"))), nil))),
      s(:def, :test_find,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :find),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:send,
                  s(:lvar, :x), :%,
                  s(:int, 2)), :==,
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :find),
              s(:args,
                s(:arg, :x)),
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :find,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args),
                  s(:sym, :foo))),
              s(:args,
                s(:arg, :x)),
              s(:false))),
          s(:lvasgn, :cond,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:send,
                  s(:lvar, :x), :%,
                  s(:int, 2)), :==,
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 1)),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :find,
              s(:block_pass,
                s(:lvar, :cond)))))),
      s(:def, :test_find_index,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@obj), :find_index,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :find_index),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:send,
                  s(:lvar, :x), :%,
                  s(:int, 2)), :==,
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :find_index),
              s(:args,
                s(:arg, :x)),
              s(:false))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:ivar, :@obj), :find_index,
              s(:int, 0),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :find_index,
                s(:int, 2)),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :==,
                s(:int, 1)))))),
      s(:def, :test_find_all,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 3),
              s(:int, 1)),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :find_all),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:send,
                  s(:lvar, :x), :%,
                  s(:int, 2)), :==,
                s(:int, 1)))),
          s(:lvasgn, :cond,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:send,
                  s(:lvar, :x), :%,
                  s(:int, 2)), :==,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 0)),
              s(:array,
                s(:int, 3),
                s(:int, 2)),
              s(:array,
                s(:int, 1),
                s(:int, 3))),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :find_all,
              s(:block_pass,
                s(:lvar, :cond)))))),
      s(:def, :test_reject,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 3),
              s(:int, 2)),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :reject),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :<,
                s(:int, 2)))),
          s(:lvasgn, :cond,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:lvar, :x), :<,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 2),
                s(:int, 1)),
              s(:array,
                s(:int, 3),
                s(:int, 2)),
              s(:array,
                s(:int, 2),
                s(:int, 4))),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :reject,
              s(:block_pass,
                s(:lvar, :cond)))))),
      s(:def, :test_to_a,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:int, 1),
            s(:int, 2),
            s(:int, 3),
            s(:int, 1),
            s(:int, 2)),
          s(:send,
            s(:ivar, :@obj), :to_a))),
      s(:def, :test_to_a_size_symbol,
        s(:args),
        s(:begin,
          s(:lvasgn, :sym,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:sclass,
            s(:lvar, :sym),
            s(:begin,
              s(:send, nil, :include,
                s(:const, nil, :Enumerable)),
              s(:def, :each,
                s(:args),
                s(:self)),
              s(:def, :size,
                s(:args),
                s(:sym, :size)))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :sym), :to_a)))),
      s(:def, :test_to_a_size_infinity,
        s(:args),
        s(:begin,
          s(:lvasgn, :inf,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:sclass,
            s(:lvar, :inf),
            s(:begin,
              s(:send, nil, :include,
                s(:const, nil, :Enumerable)),
              s(:def, :each,
                s(:args),
                s(:self)),
              s(:def, :size,
                s(:args),
                s(:const,
                  s(:const, nil, :Float), :INFINITY)))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :inf), :to_a)))),
      s(:def, :test_to_h,
        s(:args),
        s(:begin,
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :obj), :each,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:yield,
                s(:splat,
                  s(:lvar, :args))),
              s(:yield,
                s(:array,
                  s(:sym, :key),
                  s(:sym, :value))),
              s(:yield,
                s(:sym, :other_key),
                s(:sym, :other_value)),
              s(:lvasgn, :kvp,
                s(:send,
                  s(:const, nil, :Object), :new)),
              s(:defs,
                s(:lvar, :kvp), :to_ary,
                s(:args),
                s(:array,
                  s(:sym, :obtained),
                  s(:sym, :via_to_ary))),
              s(:yield,
                s(:lvar, :kvp)))),
          s(:send,
            s(:lvar, :obj), :extend,
            s(:const, nil, :Enumerable)),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:sym, :hello),
                s(:sym, :world)),
              s(:pair,
                s(:sym, :key),
                s(:sym, :value)),
              s(:pair,
                s(:sym, :other_key),
                s(:sym, :other_value)),
              s(:pair,
                s(:sym, :obtained),
                s(:sym, :via_to_ary))),
            s(:send,
              s(:lvar, :obj), :to_h,
              s(:sym, :hello),
              s(:sym, :world))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :TypeError)),
              s(:args),
              s(:send,
                s(:lvar, :obj), :to_h,
                s(:sym, :not_an_array)))),
          s(:send, nil, :assert_equal,
            s(:str, "wrong element type Symbol (expected array)"),
            s(:send,
              s(:lvar, :e), :message)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:lvar, :obj), :to_h,
                s(:array,
                  s(:int, 1))))),
          s(:send, nil, :assert_equal,
            s(:str, "element has wrong array length (expected 2, was 1)"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_inject,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 12),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :inject),
              s(:args,
                s(:arg, :z),
                s(:arg, :x)),
              s(:send,
                s(:lvar, :z), :*,
                s(:lvar, :x)))),
          s(:send, nil, :assert_equal,
            s(:int, 48),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :inject),
              s(:args,
                s(:arg, :z),
                s(:arg, :x)),
              s(:send,
                s(:send,
                  s(:lvar, :z), :*,
                  s(:int, 2)), :+,
                s(:lvar, :x)))),
          s(:send, nil, :assert_equal,
            s(:int, 12),
            s(:send,
              s(:ivar, :@obj), :inject,
              s(:sym, :*))),
          s(:send, nil, :assert_equal,
            s(:int, 24),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :inject,
                s(:int, 2)),
              s(:args,
                s(:arg, :z),
                s(:arg, :x)),
              s(:send,
                s(:lvar, :z), :*,
                s(:lvar, :x)))),
          s(:send, nil, :assert_equal,
            s(:int, 24),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :inject,
                s(:int, 2),
                s(:sym, :*)),
              s(:args,
                s(:arg, :z),
                s(:arg, :x)),
              s(:send,
                s(:lvar, :z), :*,
                s(:lvar, :x)))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:block,
              s(:send,
                s(:ivar, :@empty), :inject),
              s(:args),
              s(:int, 9))))),
      s(:def, :test_partition,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 3),
                s(:int, 1)),
              s(:array,
                s(:int, 2),
                s(:int, 2))),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :partition),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:send,
                  s(:lvar, :x), :%,
                  s(:int, 2)), :==,
                s(:int, 1)))),
          s(:lvasgn, :cond,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:send,
                  s(:lvar, :x), :%,
                  s(:int, 2)), :==,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:array,
                  s(:int, 1),
                  s(:int, 0)),
                s(:array,
                  s(:int, 3),
                  s(:int, 2)),
                s(:array,
                  s(:int, 1),
                  s(:int, 3))),
              s(:array,
                s(:array,
                  s(:int, 2),
                  s(:int, 1)),
                s(:array,
                  s(:int, 2),
                  s(:int, 4)))),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :partition,
              s(:block_pass,
                s(:lvar, :cond)))))),
      s(:def, :test_group_by,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:hash,
              s(:pair,
                s(:int, 1),
                s(:array,
                  s(:int, 1),
                  s(:int, 1))),
              s(:pair,
                s(:int, 2),
                s(:array,
                  s(:int, 2),
                  s(:int, 2))),
              s(:pair,
                s(:int, 3),
                s(:array,
                  s(:int, 3))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :h),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :group_by),
              s(:args,
                s(:arg, :x)),
              s(:lvar, :x))),
          s(:lvasgn, :h,
            s(:hash,
              s(:pair,
                s(:int, 1),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 3)))),
              s(:pair,
                s(:int, 2),
                s(:array,
                  s(:array,
                    s(:int, 2),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 2),
                    s(:int, 4)))),
              s(:pair,
                s(:int, 3),
                s(:array,
                  s(:array,
                    s(:int, 3),
                    s(:int, 2)))))),
          s(:lvasgn, :cond,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:lvar, :h),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :group_by,
              s(:block_pass,
                s(:lvar, :cond)))))),
      s(:def, :test_first,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@obj), :first)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:send,
              s(:ivar, :@obj), :first,
              s(:int, 3))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@empty), :first)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@empty), :first,
              s(:int, 10))),
          s(:lvasgn, :bug5801,
            s(:str, "[ruby-dev:45041]")),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "      empty = Object.new\n"),
              s(:str, "      class << empty\n"),
              s(:str, "        attr_reader :block\n"),
              s(:str, "        include Enumerable\n"),
              s(:str, "        def each(&block)\n"),
              s(:str, "          @block = block\n"),
              s(:str, "          self\n"),
              s(:str, "        end\n"),
              s(:str, "      end\n"),
              s(:str, "      empty.first\n"),
              s(:str, "      empty.block.call\n")),
            s(:array),
            s(:regexp,
              s(:str, "unexpected break"),
              s(:regopt))))),
      s(:def, :test_sort,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 1),
              s(:int, 2),
              s(:int, 2),
              s(:int, 3)),
            s(:send,
              s(:ivar, :@obj), :sort)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 3),
              s(:int, 2),
              s(:int, 2),
              s(:int, 1),
              s(:int, 1)),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :sort),
              s(:args,
                s(:arg, :x),
                s(:arg, :y)),
              s(:send,
                s(:lvar, :y), :<=>,
                s(:lvar, :x)))))),
      s(:def, :test_sort_by,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 3),
              s(:int, 2),
              s(:int, 2),
              s(:int, 1),
              s(:int, 1)),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :sort_by),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :-@))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:int, 300))), :to_a), :reverse),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:int, 300))), :sort_by),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :-@))),
          s(:lvasgn, :cond,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:array,
                s(:send,
                  s(:lvar, :x), :-@),
                s(:lvar, :i)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 3),
                s(:int, 2)),
              s(:array,
                s(:int, 2),
                s(:int, 1)),
              s(:array,
                s(:int, 2),
                s(:int, 4)),
              s(:array,
                s(:int, 1),
                s(:int, 0)),
              s(:array,
                s(:int, 1),
                s(:int, 3))),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :sort_by,
              s(:block_pass,
                s(:lvar, :cond)))))),
      s(:def, :test_all,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:true),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :all?),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :<=,
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :all?),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :<,
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@obj), :all?)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:array,
                s(:true),
                s(:true),
                s(:false)), :all?)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:array), :all?)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@empty), :all?)))),
      s(:def, :test_any,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:true),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :any?),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :>=,
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :any?),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :>,
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@obj), :any?)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:array,
                s(:false),
                s(:false),
                s(:false)), :any?)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:array), :any?)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@empty), :any?)))),
      s(:def, :test_one,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:block,
              s(:send,
                s(:ivar, :@obj), :one?),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :==,
                s(:int, 3)))),
          s(:send, nil, :assert,
            s(:send,
              s(:begin,
                s(:block,
                  s(:send,
                    s(:ivar, :@obj), :one?),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:lvar, :x), :==,
                    s(:int, 1)))), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:begin,
                s(:block,
                  s(:send,
                    s(:ivar, :@obj), :one?),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:lvar, :x), :==,
                    s(:int, 4)))), :!)),
          s(:send, nil, :assert,
            s(:block,
              s(:send,
                s(:array,
                  s(:str, "ant"),
                  s(:str, "bear"),
                  s(:str, "cat")), :one?),
              s(:args,
                s(:arg, :word)),
              s(:send,
                s(:send,
                  s(:lvar, :word), :length), :==,
                s(:int, 4)))),
          s(:send, nil, :assert,
            s(:send,
              s(:begin,
                s(:block,
                  s(:send,
                    s(:array,
                      s(:str, "ant"),
                      s(:str, "bear"),
                      s(:str, "cat")), :one?),
                  s(:args,
                    s(:arg, :word)),
                  s(:send,
                    s(:send,
                      s(:lvar, :word), :length), :>,
                    s(:int, 4)))), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:begin,
                s(:block,
                  s(:send,
                    s(:array,
                      s(:str, "ant"),
                      s(:str, "bear"),
                      s(:str, "cat")), :one?),
                  s(:args,
                    s(:arg, :word)),
                  s(:send,
                    s(:send,
                      s(:lvar, :word), :length), :<,
                    s(:int, 4)))), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:begin,
                s(:send,
                  s(:array,
                    s(:nil),
                    s(:true),
                    s(:int, 99)), :one?)), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:array,
                s(:nil),
                s(:true),
                s(:false)), :one?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:array), :one?), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@empty), :one?), :!)))),
      s(:def, :test_none,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:block,
              s(:send,
                s(:ivar, :@obj), :none?),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :==,
                s(:int, 4)))),
          s(:send, nil, :assert,
            s(:send,
              s(:begin,
                s(:block,
                  s(:send,
                    s(:ivar, :@obj), :none?),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:lvar, :x), :==,
                    s(:int, 1)))), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:begin,
                s(:block,
                  s(:send,
                    s(:ivar, :@obj), :none?),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:lvar, :x), :==,
                    s(:int, 3)))), :!)),
          s(:send, nil, :assert,
            s(:block,
              s(:send,
                s(:array,
                  s(:str, "ant"),
                  s(:str, "bear"),
                  s(:str, "cat")), :none?),
              s(:args,
                s(:arg, :word)),
              s(:send,
                s(:send,
                  s(:lvar, :word), :length), :==,
                s(:int, 5)))),
          s(:send, nil, :assert,
            s(:send,
              s(:begin,
                s(:block,
                  s(:send,
                    s(:array,
                      s(:str, "ant"),
                      s(:str, "bear"),
                      s(:str, "cat")), :none?),
                  s(:args,
                    s(:arg, :word)),
                  s(:send,
                    s(:send,
                      s(:lvar, :word), :length), :>=,
                    s(:int, 4)))), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:array), :none?)),
          s(:send, nil, :assert,
            s(:send,
              s(:array,
                s(:nil)), :none?)),
          s(:send, nil, :assert,
            s(:send,
              s(:array,
                s(:nil),
                s(:false)), :none?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:array,
                  s(:nil),
                  s(:false),
                  s(:true)), :none?), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@empty), :none?)))),
      s(:def, :test_min,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@obj), :min)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :min),
              s(:args,
                s(:arg, :a),
                s(:arg, :b)),
              s(:send,
                s(:lvar, :b), :<=>,
                s(:lvar, :a)))),
          s(:lvasgn, :cond,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:mlhs,
                  s(:arg, :a),
                  s(:arg, :ia)),
                s(:mlhs,
                  s(:arg, :b),
                  s(:arg, :ib))),
              s(:or,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :b), :<=>,
                      s(:lvar, :a))), :nonzero?),
                s(:send,
                  s(:lvar, :ia), :<=>,
                  s(:lvar, :ib))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 3),
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :min,
              s(:block_pass,
                s(:lvar, :cond)))),
          s(:lvasgn, :ary,
            s(:array,
              s(:str, "albatross"),
              s(:str, "dog"),
              s(:str, "horse"))),
          s(:send, nil, :assert_equal,
            s(:str, "albatross"),
            s(:send,
              s(:lvar, :ary), :min)),
          s(:send, nil, :assert_equal,
            s(:str, "dog"),
            s(:block,
              s(:send,
                s(:lvar, :ary), :min),
              s(:args,
                s(:arg, :a),
                s(:arg, :b)),
              s(:send,
                s(:send,
                  s(:lvar, :a), :length), :<=>,
                s(:send,
                  s(:lvar, :b), :length)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:array,
                s(:int, 3),
                s(:int, 2),
                s(:int, 1)), :min)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "albatross"),
              s(:str, "dog")),
            s(:send,
              s(:lvar, :ary), :min,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "dog"),
              s(:str, "horse")),
            s(:block,
              s(:send,
                s(:lvar, :ary), :min,
                s(:int, 2)),
              s(:args,
                s(:arg, :a),
                s(:arg, :b)),
              s(:send,
                s(:send,
                  s(:lvar, :a), :length), :<=>,
                s(:send,
                  s(:lvar, :b), :length)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 13),
              s(:int, 14)),
            s(:send,
              s(:array,
                s(:int, 20),
                s(:int, 32),
                s(:int, 32),
                s(:int, 21),
                s(:int, 30),
                s(:int, 25),
                s(:int, 29),
                s(:int, 13),
                s(:int, 14)), :min,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 4),
              s(:int, 6),
              s(:int, 7)),
            s(:send,
              s(:array,
                s(:int, 2),
                s(:int, 4),
                s(:int, 8),
                s(:int, 6),
                s(:int, 7)), :min,
              s(:int, 4))))),
      s(:def, :test_max,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:ivar, :@obj), :max)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :max),
              s(:args,
                s(:arg, :a),
                s(:arg, :b)),
              s(:send,
                s(:lvar, :b), :<=>,
                s(:lvar, :a)))),
          s(:lvasgn, :cond,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:mlhs,
                  s(:arg, :a),
                  s(:arg, :ia)),
                s(:mlhs,
                  s(:arg, :b),
                  s(:arg, :ib))),
              s(:or,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :b), :<=>,
                      s(:lvar, :a))), :nonzero?),
                s(:send,
                  s(:lvar, :ia), :<=>,
                  s(:lvar, :ib))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 3)),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :max,
              s(:block_pass,
                s(:lvar, :cond)))),
          s(:lvasgn, :ary,
            s(:array,
              s(:str, "albatross"),
              s(:str, "dog"),
              s(:str, "horse"))),
          s(:send, nil, :assert_equal,
            s(:str, "horse"),
            s(:send,
              s(:lvar, :ary), :max)),
          s(:send, nil, :assert_equal,
            s(:str, "albatross"),
            s(:block,
              s(:send,
                s(:lvar, :ary), :max),
              s(:args,
                s(:arg, :a),
                s(:arg, :b)),
              s(:send,
                s(:send,
                  s(:lvar, :a), :length), :<=>,
                s(:send,
                  s(:lvar, :b), :length)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:block,
              s(:send,
                s(:array,
                  s(:int, 3),
                  s(:int, 2),
                  s(:int, 1)), :max),
              s(:args,
                s(:arg, :a),
                s(:arg, :b)),
              s(:send,
                s(:lvar, :b), :<=>,
                s(:lvar, :a)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "horse"),
              s(:str, "dog")),
            s(:send,
              s(:lvar, :ary), :max,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "albatross"),
              s(:str, "horse")),
            s(:block,
              s(:send,
                s(:lvar, :ary), :max,
                s(:int, 2)),
              s(:args,
                s(:arg, :a),
                s(:arg, :b)),
              s(:send,
                s(:send,
                  s(:lvar, :a), :length), :<=>,
                s(:send,
                  s(:lvar, :b), :length)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 3),
              s(:int, 2)),
            s(:send,
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 0),
                s(:int, 0),
                s(:int, 0),
                s(:int, 0),
                s(:int, 1),
                s(:int, 3),
                s(:int, 2)), :max,
              s(:int, 2))))),
      s(:def, :test_minmax,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 3)),
            s(:send,
              s(:ivar, :@obj), :minmax)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 3),
              s(:int, 1)),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :minmax),
              s(:args,
                s(:arg, :a),
                s(:arg, :b)),
              s(:send,
                s(:lvar, :b), :<=>,
                s(:lvar, :a)))),
          s(:lvasgn, :ary,
            s(:array,
              s(:str, "albatross"),
              s(:str, "dog"),
              s(:str, "horse"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "albatross"),
              s(:str, "horse")),
            s(:send,
              s(:lvar, :ary), :minmax)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "dog"),
              s(:str, "albatross")),
            s(:block,
              s(:send,
                s(:lvar, :ary), :minmax),
              s(:args,
                s(:arg, :a),
                s(:arg, :b)),
              s(:send,
                s(:send,
                  s(:lvar, :a), :length), :<=>,
                s(:send,
                  s(:lvar, :b), :length)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 3)),
            s(:send,
              s(:array,
                s(:int, 2),
                s(:int, 3),
                s(:int, 1)), :minmax)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 3),
              s(:int, 1)),
            s(:block,
              s(:send,
                s(:array,
                  s(:int, 2),
                  s(:int, 3),
                  s(:int, 1)), :minmax),
              s(:args,
                s(:arg, :a),
                s(:arg, :b)),
              s(:send,
                s(:lvar, :b), :<=>,
                s(:lvar, :a)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 3)),
            s(:send,
              s(:array,
                s(:int, 2),
                s(:int, 2),
                s(:int, 3),
                s(:int, 3),
                s(:int, 1),
                s(:int, 1)), :minmax)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:nil),
              s(:nil)),
            s(:send,
              s(:array), :minmax)))),
      s(:def, :test_min_by,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :min_by),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :-@))),
          s(:lvasgn, :cond,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:lvar, :x), :-@))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 3),
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :min_by,
              s(:block_pass,
                s(:lvar, :cond)))),
          s(:lvasgn, :a,
            s(:array,
              s(:str, "albatross"),
              s(:str, "dog"),
              s(:str, "horse"))),
          s(:send, nil, :assert_equal,
            s(:str, "dog"),
            s(:block,
              s(:send,
                s(:lvar, :a), :min_by),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :length))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:block,
              s(:send,
                s(:array,
                  s(:int, 2),
                  s(:int, 3),
                  s(:int, 1)), :min_by),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :-@))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "dog"),
              s(:str, "horse")),
            s(:block,
              s(:send,
                s(:lvar, :a), :min_by,
                s(:int, 2)),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :length))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 13),
              s(:int, 14)),
            s(:block,
              s(:send,
                s(:array,
                  s(:int, 20),
                  s(:int, 32),
                  s(:int, 32),
                  s(:int, 21),
                  s(:int, 30),
                  s(:int, 25),
                  s(:int, 29),
                  s(:int, 13),
                  s(:int, 14)), :min_by,
                s(:int, 2)),
              s(:args,
                s(:arg, :x)),
              s(:lvar, :x))))),
      s(:def, :test_max_by,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :max_by),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :-@))),
          s(:lvasgn, :cond,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:lvar, :x), :-@))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 0)),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :max_by,
              s(:block_pass,
                s(:lvar, :cond)))),
          s(:lvasgn, :a,
            s(:array,
              s(:str, "albatross"),
              s(:str, "dog"),
              s(:str, "horse"))),
          s(:send, nil, :assert_equal,
            s(:str, "albatross"),
            s(:block,
              s(:send,
                s(:lvar, :a), :max_by),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :length))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:block,
              s(:send,
                s(:array,
                  s(:int, 2),
                  s(:int, 3),
                  s(:int, 1)), :max_by),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :-@))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "albatross"),
              s(:str, "horse")),
            s(:block,
              s(:send,
                s(:lvar, :a), :max_by,
                s(:int, 2)),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :length))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 3),
              s(:int, 2)),
            s(:block,
              s(:send,
                s(:array,
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, 1),
                  s(:int, 3),
                  s(:int, 2)), :max_by,
                s(:int, 2)),
              s(:args,
                s(:arg, :x)),
              s(:lvar, :x))))),
      s(:def, :test_minmax_by,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 3),
              s(:int, 1)),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :minmax_by),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :-@))),
          s(:lvasgn, :cond,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:lvar, :x), :-@))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 3),
                s(:int, 2)),
              s(:array,
                s(:int, 1),
                s(:int, 0))),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :minmax_by,
              s(:block_pass,
                s(:lvar, :cond)))),
          s(:lvasgn, :a,
            s(:array,
              s(:str, "albatross"),
              s(:str, "dog"),
              s(:str, "horse"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "dog"),
              s(:str, "albatross")),
            s(:block,
              s(:send,
                s(:lvar, :a), :minmax_by),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :length))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 3),
              s(:int, 1)),
            s(:block,
              s(:send,
                s(:array,
                  s(:int, 2),
                  s(:int, 3),
                  s(:int, 1)), :minmax_by),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :-@))))),
      s(:def, :test_member,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@obj), :member?,
              s(:int, 1))),
          s(:send, nil, :assert,
            s(:send,
              s(:begin,
                s(:send,
                  s(:ivar, :@obj), :member?,
                  s(:int, 4))), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)), :member?,
              s(:int, 1))),
          s(:send, nil, :assert,
            s(:send,
              s(:begin,
                s(:send,
                  s(:array,
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3)), :member?,
                  s(:int, 4))), :!)))),
      s(:class,
        s(:const, nil, :Foo), nil,
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :Enumerable)),
          s(:def, :each,
            s(:args),
            s(:begin,
              s(:yield,
                s(:int, 1)),
              s(:yield,
                s(:int, 1),
                s(:int, 2)))))),
      s(:def, :test_each_with_index,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:ivar, :@obj), :each_with_index),
            s(:args,
              s(:arg, :x),
              s(:arg, :i)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:array,
                s(:lvar, :x),
                s(:lvar, :i)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 0)),
              s(:array,
                s(:int, 2),
                s(:int, 1)),
              s(:array,
                s(:int, 3),
                s(:int, 2)),
              s(:array,
                s(:int, 1),
                s(:int, 3)),
              s(:array,
                s(:int, 2),
                s(:int, 4))),
            s(:lvar, :a)),
          s(:lvasgn, :hash,
            s(:send,
              s(:const, nil, :Hash), :new)),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "cat"),
                s(:str, "dog"),
                s(:str, "wombat")), :each_with_index),
            s(:args,
              s(:arg, :item),
              s(:arg, :index)),
            s(:send,
              s(:lvar, :hash), :[]=,
              s(:lvar, :item),
              s(:lvar, :index))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "cat"),
                s(:int, 0)),
              s(:pair,
                s(:str, "wombat"),
                s(:int, 2)),
              s(:pair,
                s(:str, "dog"),
                s(:int, 1))),
            s(:lvar, :hash)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 0)),
              s(:array,
                s(:array,
                  s(:int, 1),
                  s(:int, 2)),
                s(:int, 1))),
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Foo), :new), :each_with_index), :to_a)))),
      s(:def, :test_each_with_object,
        s(:args),
        s(:begin,
          s(:lvasgn, :obj,
            s(:array,
              s(:int, 0),
              s(:int, 1))),
          s(:lvasgn, :ret,
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:int, 10))), :each_with_object,
                s(:lvar, :obj)),
              s(:args,
                s(:arg, :i),
                s(:arg, :memo)),
              s(:begin,
                s(:op_asgn,
                  s(:send,
                    s(:lvar, :memo), :[],
                    s(:int, 0)), :+,
                  s(:lvar, :i)),
                s(:op_asgn,
                  s(:send,
                    s(:lvar, :memo), :[],
                    s(:int, 1)), :*,
                  s(:lvar, :i))))),
          s(:send, nil, :assert_same,
            s(:lvar, :obj),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 55),
              s(:int, 3628800)),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:nil)),
              s(:array,
                s(:array,
                  s(:int, 1),
                  s(:int, 2)),
                s(:nil))),
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Foo), :new), :each_with_object,
                s(:nil)), :to_a)))),
      s(:def, :test_each_entry,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:send,
              s(:send,
                s(:array,
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3)), :each_entry), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:array,
                s(:int, 1),
                s(:int, 2))),
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Foo), :new), :each_entry), :to_a)),
          s(:lvasgn, :a,
            s(:array)),
          s(:lvasgn, :cond,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:lvar, :a), :<<,
                s(:lvar, :x)))),
          s(:send,
            s(:send,
              s(:ivar, :@obj), :each_with_index), :each_entry,
            s(:block_pass,
              s(:lvar, :cond))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 1),
              s(:int, 2)),
            s(:lvar, :a)))),
      s(:def, :test_each_slice,
        s(:args),
        s(:begin,
          s(:lvasgn, :ary,
            s(:array)),
          s(:block,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1),
                  s(:int, 10))), :each_slice,
              s(:int, 3)),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:lvar, :ary), :<<,
              s(:lvar, :a))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:int, 4),
                s(:int, 5),
                s(:int, 6)),
              s(:array,
                s(:int, 7),
                s(:int, 8),
                s(:int, 9)),
              s(:array,
                s(:int, 10))),
            s(:lvar, :ary)),
          s(:lvasgn, :bug9749,
            s(:str, "[ruby-core:62060] [Bug #9749]")),
          s(:send,
            s(:lvar, :ary), :clear),
          s(:send,
            s(:begin,
              s(:irange,
                s(:int, 1),
                s(:int, 10))), :each_slice,
            s(:int, 3),
            s(:block_pass,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a),
                  s(:restarg)),
                s(:send,
                  s(:lvar, :ary), :<<,
                  s(:lvar, :a))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:int, 4),
                s(:int, 5),
                s(:int, 6)),
              s(:array,
                s(:int, 7),
                s(:int, 8),
                s(:int, 9)),
              s(:array,
                s(:int, 10))),
            s(:lvar, :ary),
            s(:lvar, :bug9749)),
          s(:send,
            s(:lvar, :ary), :clear),
          s(:block,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1),
                  s(:int, 10))), :each_slice,
              s(:int, 10)),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:lvar, :ary), :<<,
              s(:lvar, :a))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3),
                s(:int, 4),
                s(:int, 5),
                s(:int, 6),
                s(:int, 7),
                s(:int, 8),
                s(:int, 9),
                s(:int, 10))),
            s(:lvar, :ary)),
          s(:send,
            s(:lvar, :ary), :clear),
          s(:block,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1),
                  s(:int, 10))), :each_slice,
              s(:int, 11)),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:lvar, :ary), :<<,
              s(:lvar, :a))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3),
                s(:int, 4),
                s(:int, 5),
                s(:int, 6),
                s(:int, 7),
                s(:int, 8),
                s(:int, 9),
                s(:int, 10))),
            s(:lvar, :ary)))),
      s(:def, :test_each_cons,
        s(:args),
        s(:begin,
          s(:lvasgn, :ary,
            s(:array)),
          s(:block,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1),
                  s(:int, 5))), :each_cons,
              s(:int, 3)),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:lvar, :ary), :<<,
              s(:lvar, :a))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:int, 2),
                s(:int, 3),
                s(:int, 4)),
              s(:array,
                s(:int, 3),
                s(:int, 4),
                s(:int, 5))),
            s(:lvar, :ary)),
          s(:lvasgn, :bug9749,
            s(:str, "[ruby-core:62060] [Bug #9749]")),
          s(:send,
            s(:lvar, :ary), :clear),
          s(:send,
            s(:begin,
              s(:irange,
                s(:int, 1),
                s(:int, 5))), :each_cons,
            s(:int, 3),
            s(:block_pass,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a),
                  s(:restarg)),
                s(:send,
                  s(:lvar, :ary), :<<,
                  s(:lvar, :a))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:int, 2),
                s(:int, 3),
                s(:int, 4)),
              s(:array,
                s(:int, 3),
                s(:int, 4),
                s(:int, 5))),
            s(:lvar, :ary),
            s(:lvar, :bug9749)),
          s(:send,
            s(:lvar, :ary), :clear),
          s(:block,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1),
                  s(:int, 5))), :each_cons,
              s(:int, 5)),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:lvar, :ary), :<<,
              s(:lvar, :a))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3),
                s(:int, 4),
                s(:int, 5))),
            s(:lvar, :ary)),
          s(:send,
            s(:lvar, :ary), :clear),
          s(:block,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1),
                  s(:int, 5))), :each_cons,
              s(:int, 6)),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:lvar, :ary), :<<,
              s(:lvar, :a))),
          s(:send, nil, :assert_empty,
            s(:lvar, :ary)))),
      s(:def, :test_zip,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 1)),
              s(:array,
                s(:int, 2),
                s(:int, 2)),
              s(:array,
                s(:int, 3),
                s(:int, 3)),
              s(:array,
                s(:int, 1),
                s(:int, 1)),
              s(:array,
                s(:int, 2),
                s(:int, 2))),
            s(:send,
              s(:ivar, :@obj), :zip,
              s(:ivar, :@obj))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "a"),
                s(:int, 1)),
              s(:array,
                s(:str, "b"),
                s(:int, 2)),
              s(:array,
                s(:str, "c"),
                s(:int, 3))),
            s(:send,
              s(:array,
                s(:str, "a"),
                s(:str, "b"),
                s(:str, "c")), :zip,
              s(:ivar, :@obj))),
          s(:lvasgn, :a,
            s(:array)),
          s(:lvasgn, :result,
            s(:block,
              s(:send,
                s(:ivar, :@obj), :zip,
                s(:array,
                  s(:sym, :a),
                  s(:sym, :b),
                  s(:sym, :c))),
              s(:args,
                s(:arg, :x),
                s(:arg, :y)),
              s(:send,
                s(:lvar, :a), :<<,
                s(:array,
                  s(:lvar, :x),
                  s(:lvar, :y))))),
          s(:send, nil, :assert_nil,
            s(:lvar, :result)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:sym, :a)),
              s(:array,
                s(:int, 2),
                s(:sym, :b)),
              s(:array,
                s(:int, 3),
                s(:sym, :c)),
              s(:array,
                s(:int, 1),
                s(:nil)),
              s(:array,
                s(:int, 2),
                s(:nil))),
            s(:lvar, :a)),
          s(:lvasgn, :a,
            s(:array)),
          s(:lvasgn, :cond,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:mlhs,
                  s(:arg, :x),
                  s(:arg, :i)),
                s(:arg, :y)),
              s(:send,
                s(:lvar, :a), :<<,
                s(:array,
                  s(:lvar, :x),
                  s(:lvar, :y),
                  s(:lvar, :i))))),
          s(:send,
            s(:send,
              s(:ivar, :@obj), :each_with_index), :zip,
            s(:array,
              s(:sym, :a),
              s(:sym, :b),
              s(:sym, :c)),
            s(:block_pass,
              s(:lvar, :cond))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:sym, :a),
                s(:int, 0)),
              s(:array,
                s(:int, 2),
                s(:sym, :b),
                s(:int, 1)),
              s(:array,
                s(:int, 3),
                s(:sym, :c),
                s(:int, 2)),
              s(:array,
                s(:int, 1),
                s(:nil),
                s(:int, 3)),
              s(:array,
                s(:int, 2),
                s(:nil),
                s(:int, 4))),
            s(:lvar, :a)),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:ivar, :@obj), :zip,
              s(:hash,
                s(:pair,
                  s(:sym, :a),
                  s(:str, "A")),
                s(:pair,
                  s(:sym, :b),
                  s(:str, "B")),
                s(:pair,
                  s(:sym, :c),
                  s(:str, "C")))),
            s(:args,
              s(:arg, :x),
              s(:arg, :y)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:array,
                s(:lvar, :x),
                s(:lvar, :y)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:array,
                  s(:sym, :a),
                  s(:str, "A"))),
              s(:array,
                s(:int, 2),
                s(:array,
                  s(:sym, :b),
                  s(:str, "B"))),
              s(:array,
                s(:int, 3),
                s(:array,
                  s(:sym, :c),
                  s(:str, "C"))),
              s(:array,
                s(:int, 1),
                s(:nil)),
              s(:array,
                s(:int, 2),
                s(:nil))),
            s(:lvar, :a)),
          s(:lvasgn, :ary,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :ary), :to_a,
            s(:args),
            s(:array,
              s(:int, 1),
              s(:int, 2))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:array,
                s(:str, "a"),
                s(:str, "b")), :zip,
              s(:lvar, :ary))),
          s(:defs,
            s(:lvar, :ary), :each,
            s(:args),
            s(:block,
              s(:send,
                s(:array,
                  s(:int, 3),
                  s(:int, 4)), :each),
              s(:args,
                s(:arg, :e)),
              s(:yield,
                s(:lvar, :e)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 3)),
              s(:array,
                s(:int, 2),
                s(:int, 4)),
              s(:array,
                s(:int, 3),
                s(:nil)),
              s(:array,
                s(:int, 1),
                s(:nil)),
              s(:array,
                s(:int, 2),
                s(:nil))),
            s(:send,
              s(:ivar, :@obj), :zip,
              s(:lvar, :ary))),
          s(:defs,
            s(:lvar, :ary), :to_ary,
            s(:args),
            s(:array,
              s(:int, 5),
              s(:int, 6))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 5)),
              s(:array,
                s(:int, 2),
                s(:int, 6)),
              s(:array,
                s(:int, 3),
                s(:nil)),
              s(:array,
                s(:int, 1),
                s(:nil)),
              s(:array,
                s(:int, 2),
                s(:nil))),
            s(:send,
              s(:ivar, :@obj), :zip,
              s(:lvar, :ary))),
          s(:lvasgn, :obj,
            s(:send,
              s(:send, nil, :eval,
                s(:str, "class C🗿; self; end")), :new)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "C\\u{1f5ff}"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1),
                  s(:int, 1))), :zip,
              s(:lvar, :obj))))),
      s(:def, :test_take,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:int, 1),
            s(:int, 2),
            s(:int, 3)),
          s(:send,
            s(:ivar, :@obj), :take,
            s(:int, 3)))),
      s(:def, :test_take_while,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :take_while),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :<=,
                s(:int, 2)))),
          s(:lvasgn, :cond,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:lvar, :x), :<=,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 0)),
              s(:array,
                s(:int, 2),
                s(:int, 1))),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :take_while,
              s(:block_pass,
                s(:lvar, :cond)))),
          s(:lvasgn, :bug5801,
            s(:str, "[ruby-dev:45040]")),
          s(:block,
            s(:send,
              s(:ivar, :@empty), :take_while),
            s(:args),
            s(:true)),
          s(:lvasgn, :block,
            s(:send,
              s(:ivar, :@empty), :block)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:lvar, :bug5801)),
            s(:args),
            s(:block,
              s(:send,
                s(:int, 100), :times),
              s(:args),
              s(:send,
                s(:lvar, :block), :call))))),
      s(:def, :test_drop,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:int, 3),
            s(:int, 1),
            s(:int, 2)),
          s(:send,
            s(:ivar, :@obj), :drop,
            s(:int, 2)))),
      s(:def, :test_drop_while,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 3),
              s(:int, 1),
              s(:int, 2)),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :drop_while),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :<=,
                s(:int, 2)))),
          s(:lvasgn, :cond,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:lvar, :x), :<=,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 3),
                s(:int, 2)),
              s(:array,
                s(:int, 1),
                s(:int, 3)),
              s(:array,
                s(:int, 2),
                s(:int, 4))),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :drop_while,
              s(:block_pass,
                s(:lvar, :cond)))))),
      s(:def, :test_cycle,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 1),
              s(:int, 2),
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :cycle), :take,
              s(:int, 10))),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:ivar, :@obj), :cycle,
              s(:int, 2)),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 1),
              s(:int, 2),
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 1),
              s(:int, 2)),
            s(:lvar, :a)),
          s(:lvasgn, :a,
            s(:array)),
          s(:lvasgn, :cond,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:lvar, :a), :<<,
                s(:lvar, :x)))),
          s(:send,
            s(:send,
              s(:ivar, :@obj), :each_with_index), :cycle,
            s(:int, 2),
            s(:block_pass,
              s(:lvar, :cond))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 1),
              s(:int, 2),
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 1),
              s(:int, 2)),
            s(:lvar, :a)))),
      s(:def, :test_callcc,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:begin,
              s(:lvasgn, :c,
                s(:nil)),
              s(:block,
                s(:send,
                  s(:ivar, :@obj), :sort_by),
                s(:args,
                  s(:arg, :x)),
                s(:begin,
                  s(:block,
                    s(:send, nil, :callcc),
                    s(:args,
                      s(:arg, :c2)),
                    s(:or_asgn,
                      s(:lvasgn, :c),
                      s(:lvar, :c2))),
                  s(:lvar, :x))),
              s(:send,
                s(:lvar, :c), :call))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:begin,
              s(:lvasgn, :c,
                s(:nil)),
              s(:lvasgn, :o,
                s(:send,
                  s(:const, nil, :Object), :new)),
              s(:block,
                s(:send,
                  s(:sclass,
                    s(:lvar, :o),
                    s(:self)), :class_eval),
                s(:args),
                s(:block,
                  s(:send, nil, :define_method,
                    s(:sym, :<=>)),
                  s(:args,
                    s(:arg, :x)),
                  s(:begin,
                    s(:block,
                      s(:send, nil, :callcc),
                      s(:args,
                        s(:arg, :c2)),
                      s(:or_asgn,
                        s(:lvasgn, :c),
                        s(:lvar, :c2))),
                    s(:int, 0)))),
              s(:block,
                s(:send,
                  s(:array,
                    s(:lvar, :o),
                    s(:lvar, :o)), :sort_by),
                s(:args,
                  s(:arg, :x)),
                s(:lvar, :x)),
              s(:send,
                s(:lvar, :c), :call))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:begin,
              s(:lvasgn, :c,
                s(:nil)),
              s(:lvasgn, :o,
                s(:send,
                  s(:const, nil, :Object), :new)),
              s(:block,
                s(:send,
                  s(:sclass,
                    s(:lvar, :o),
                    s(:self)), :class_eval),
                s(:args),
                s(:block,
                  s(:send, nil, :define_method,
                    s(:sym, :<=>)),
                  s(:args,
                    s(:arg, :x)),
                  s(:begin,
                    s(:block,
                      s(:send, nil, :callcc),
                      s(:args,
                        s(:arg, :c2)),
                      s(:or_asgn,
                        s(:lvasgn, :c),
                        s(:lvar, :c2))),
                    s(:int, 0)))),
              s(:block,
                s(:send,
                  s(:array,
                    s(:lvar, :o),
                    s(:lvar, :o),
                    s(:lvar, :o)), :sort_by),
                s(:args,
                  s(:arg, :x)),
                s(:lvar, :x)),
              s(:send,
                s(:lvar, :c), :call))))),
      s(:def, :test_reverse_each,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:int, 2),
            s(:int, 1),
            s(:int, 3),
            s(:int, 2),
            s(:int, 1)),
          s(:send,
            s(:send,
              s(:ivar, :@obj), :reverse_each), :to_a))),
      s(:def, :test_chunk,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:array), :chunk),
              s(:args,
                s(:arg, :elt)),
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :e), :to_a)),
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:ivar, :@obj), :chunk),
              s(:args,
                s(:arg, :elt)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :elt), :&,
                    s(:int, 2)), :==,
                  s(:int, 0)),
                s(:false),
                s(:true)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:false),
                s(:array,
                  s(:int, 1))),
              s(:array,
                s(:true),
                s(:array,
                  s(:int, 2),
                  s(:int, 3))),
              s(:array,
                s(:false),
                s(:array,
                  s(:int, 1))),
              s(:array,
                s(:true),
                s(:array,
                  s(:int, 2)))),
            s(:send,
              s(:lvar, :e), :to_a)),
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:ivar, :@obj), :chunk),
              s(:args,
                s(:arg, :elt)),
              s(:if,
                s(:send,
                  s(:lvar, :elt), :<,
                  s(:int, 3)),
                s(:sym, :_alone),
                s(:true)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :_alone),
                s(:array,
                  s(:int, 1))),
              s(:array,
                s(:sym, :_alone),
                s(:array,
                  s(:int, 2))),
              s(:array,
                s(:true),
                s(:array,
                  s(:int, 3))),
              s(:array,
                s(:sym, :_alone),
                s(:array,
                  s(:int, 1))),
              s(:array,
                s(:sym, :_alone),
                s(:array,
                  s(:int, 2)))),
            s(:send,
              s(:lvar, :e), :to_a)),
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:ivar, :@obj), :chunk),
              s(:args,
                s(:arg, :elt)),
              s(:if,
                s(:send,
                  s(:lvar, :elt), :==,
                  s(:int, 3)),
                s(:sym, :_separator),
                s(:true)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:true),
                s(:array,
                  s(:int, 1),
                  s(:int, 2))),
              s(:array,
                s(:true),
                s(:array,
                  s(:int, 1),
                  s(:int, 2)))),
            s(:send,
              s(:lvar, :e), :to_a)),
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:ivar, :@obj), :chunk),
              s(:args,
                s(:arg, :elt)),
              s(:if,
                s(:send,
                  s(:lvar, :elt), :==,
                  s(:int, 3)),
                s(:nil),
                s(:true)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:true),
                s(:array,
                  s(:int, 1),
                  s(:int, 2))),
              s(:array,
                s(:true),
                s(:array,
                  s(:int, 1),
                  s(:int, 2)))),
            s(:send,
              s(:lvar, :e), :to_a)),
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:ivar, :@obj), :chunk),
              s(:args,
                s(:arg, :elt)),
              s(:sym, :_foo))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :e), :to_a)))),
      s(:def, :test_slice_before,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:array), :slice_before),
              s(:args,
                s(:arg, :elt)),
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :e), :to_a)),
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:ivar, :@obj), :slice_before),
              s(:args,
                s(:arg, :elt)),
              s(:send,
                s(:lvar, :elt), :even?))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1)),
              s(:array,
                s(:int, 2),
                s(:int, 3),
                s(:int, 1)),
              s(:array,
                s(:int, 2))),
            s(:send,
              s(:lvar, :e), :to_a)),
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:ivar, :@obj), :slice_before),
              s(:args,
                s(:arg, :elt)),
              s(:send,
                s(:lvar, :elt), :odd?))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 2)),
              s(:array,
                s(:int, 3)),
              s(:array,
                s(:int, 1),
                s(:int, 2))),
            s(:send,
              s(:lvar, :e), :to_a)),
          s(:lvasgn, :ss,
            s(:array,
              s(:str, "abc"),
              s(:str, "defg"),
              s(:str, "h"),
              s(:str, "ijk"),
              s(:str, "l"),
              s(:str, "mno"),
              s(:str, "pqr"),
              s(:str, "st"),
              s(:str, "u"),
              s(:str, "vw"),
              s(:str, "xy"),
              s(:str, "z"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "abc"),
                s(:str, "defg"),
                s(:str, "h")),
              s(:array,
                s(:str, "ijk"),
                s(:str, "l")),
              s(:array,
                s(:str, "mno")),
              s(:array,
                s(:str, "pqr"),
                s(:str, "st"),
                s(:str, "u"),
                s(:str, "vw"),
                s(:str, "xy"),
                s(:str, "z"))),
            s(:send,
              s(:send,
                s(:lvar, :ss), :slice_before,
                s(:regexp,
                  s(:str, "\\A...\\z"),
                  s(:regopt))), :to_a)),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:send,
              s(:send,
                s(:lvar, :ss), :slice_before,
                s(:regexp,
                  s(:str, "\\A...\\z"),
                  s(:regopt))), :to_a)))),
      s(:def, :test_slice_after0,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:send,
            s(:array), :slice_after))),
      s(:def, :test_slice_after1,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:array), :slice_after),
              s(:args,
                s(:arg, :a)),
              s(:send, nil, :flunk,
                s(:str, "should not be called")))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :e), :to_a)),
          s(:lvasgn, :e,
            s(:send,
              s(:array,
                s(:int, 1),
                s(:int, 2)), :slice_after,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1)),
              s(:array,
                s(:int, 2))),
            s(:send,
              s(:lvar, :e), :to_a)),
          s(:lvasgn, :e,
            s(:send,
              s(:array,
                s(:int, 1),
                s(:int, 2)), :slice_after,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 2))),
            s(:send,
              s(:lvar, :e), :to_a)),
          s(:block,
            s(:send,
              s(:array,
                s(:true),
                s(:false)), :each),
            s(:args,
              s(:arg, :b)),
            s(:begin,
              s(:lvasgn, :block_results,
                s(:array,
                  s(:true),
                  s(:lvar, :b))),
              s(:lvasgn, :e,
                s(:block,
                  s(:send,
                    s(:array,
                      s(:int, 1),
                      s(:int, 2)), :slice_after),
                  s(:args,
                    s(:arg, :a)),
                  s(:send,
                    s(:lvar, :block_results), :shift))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:array,
                    s(:int, 1)),
                  s(:array,
                    s(:int, 2))),
                s(:send,
                  s(:lvar, :e), :to_a)),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:lvar, :block_results)),
              s(:lvasgn, :block_results,
                s(:array,
                  s(:false),
                  s(:lvar, :b))),
              s(:lvasgn, :e,
                s(:block,
                  s(:send,
                    s(:array,
                      s(:int, 1),
                      s(:int, 2)), :slice_after),
                  s(:args,
                    s(:arg, :a)),
                  s(:send,
                    s(:lvar, :block_results), :shift))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 2))),
                s(:send,
                  s(:lvar, :e), :to_a)),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:lvar, :block_results)))))),
      s(:def, :test_slice_after_both_pattern_and_block,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:block,
            s(:send,
              s(:array), :slice_after,
              s(:int, 1)),
            s(:args,
              s(:arg, :a)),
            s(:true)))),
      s(:def, :test_slice_after_continuation_lines,
        s(:args),
        s(:begin,
          s(:lvasgn, :lines,
            s(:array,
              s(:str, "foo\n"),
              s(:str, "bar\\\n"),
              s(:str, "baz\n"),
              s(:str, "\n"),
              s(:str, "qux\n"))),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :lines), :slice_after,
              s(:regexp,
                s(:str, "[^\\\\]\\n\\z"),
                s(:regopt)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "foo\n")),
              s(:array,
                s(:str, "bar\\\n"),
                s(:str, "baz\n")),
              s(:array,
                s(:str, "\n"),
                s(:str, "qux\n"))),
            s(:send,
              s(:lvar, :e), :to_a)))),
      s(:def, :test_slice_before_empty_line,
        s(:args),
        s(:begin,
          s(:lvasgn, :lines,
            s(:array,
              s(:str, "foo"),
              s(:str, ""),
              s(:str, "bar"))),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :lines), :slice_after,
              s(:regexp,
                s(:str, "\\A\\s*\\z"),
                s(:regopt)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "foo"),
                s(:str, "")),
              s(:array,
                s(:str, "bar"))),
            s(:send,
              s(:lvar, :e), :to_a)))),
      s(:def, :test_slice_when_0,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:array), :slice_when),
              s(:args,
                s(:arg, :a),
                s(:arg, :b)),
              s(:send, nil, :flunk,
                s(:str, "should not be called")))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :e), :to_a)))),
      s(:def, :test_slice_when_1,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:array,
                  s(:int, 1)), :slice_when),
              s(:args,
                s(:arg, :a),
                s(:arg, :b)),
              s(:send, nil, :flunk,
                s(:str, "should not be called")))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1))),
            s(:send,
              s(:lvar, :e), :to_a)))),
      s(:def, :test_slice_when_2,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:array,
                  s(:int, 1),
                  s(:int, 2)), :slice_when),
              s(:args,
                s(:arg, :a),
                s(:arg, :b)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:lvar, :a)),
                s(:send, nil, :assert_equal,
                  s(:int, 2),
                  s(:lvar, :b)),
                s(:true)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1)),
              s(:array,
                s(:int, 2))),
            s(:send,
              s(:lvar, :e), :to_a)),
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:array,
                  s(:int, 1),
                  s(:int, 2)), :slice_when),
              s(:args,
                s(:arg, :a),
                s(:arg, :b)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:lvar, :a)),
                s(:send, nil, :assert_equal,
                  s(:int, 2),
                  s(:lvar, :b)),
                s(:false)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 2))),
            s(:send,
              s(:lvar, :e), :to_a)))),
      s(:def, :test_slice_when_3,
        s(:args),
        s(:begin,
          s(:lvasgn, :block_invocations,
            s(:array,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a),
                  s(:arg, :b)),
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:int, 1),
                    s(:lvar, :a)),
                  s(:send, nil, :assert_equal,
                    s(:int, 2),
                    s(:lvar, :b)),
                  s(:true))),
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a),
                  s(:arg, :b)),
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:int, 2),
                    s(:lvar, :a)),
                  s(:send, nil, :assert_equal,
                    s(:int, 3),
                    s(:lvar, :b)),
                  s(:false))))),
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:array,
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3)), :slice_when),
              s(:args,
                s(:arg, :a),
                s(:arg, :b)),
              s(:send,
                s(:send,
                  s(:lvar, :block_invocations), :shift), :call,
                s(:lvar, :a),
                s(:lvar, :b)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1)),
              s(:array,
                s(:int, 2),
                s(:int, 3))),
            s(:send,
              s(:lvar, :e), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:lvar, :block_invocations)))),
      s(:def, :test_slice_when_noblock,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:send,
            s(:array), :slice_when))),
      s(:def, :test_slice_when_contiguously_increasing_integers,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:array,
                  s(:int, 1),
                  s(:int, 4),
                  s(:int, 9),
                  s(:int, 10),
                  s(:int, 11),
                  s(:int, 12),
                  s(:int, 15),
                  s(:int, 16),
                  s(:int, 19),
                  s(:int, 20),
                  s(:int, 21)), :slice_when),
              s(:args,
                s(:arg, :i),
                s(:arg, :j)),
              s(:send,
                s(:send,
                  s(:lvar, :i), :+,
                  s(:int, 1)), :!=,
                s(:lvar, :j)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1)),
              s(:array,
                s(:int, 4)),
              s(:array,
                s(:int, 9),
                s(:int, 10),
                s(:int, 11),
                s(:int, 12)),
              s(:array,
                s(:int, 15),
                s(:int, 16)),
              s(:array,
                s(:int, 19),
                s(:int, 20),
                s(:int, 21))),
            s(:send,
              s(:lvar, :e), :to_a)))),
      s(:def, :test_chunk_while_contiguously_increasing_integers,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:array,
                  s(:int, 1),
                  s(:int, 4),
                  s(:int, 9),
                  s(:int, 10),
                  s(:int, 11),
                  s(:int, 12),
                  s(:int, 15),
                  s(:int, 16),
                  s(:int, 19),
                  s(:int, 20),
                  s(:int, 21)), :chunk_while),
              s(:args,
                s(:arg, :i),
                s(:arg, :j)),
              s(:send,
                s(:send,
                  s(:lvar, :i), :+,
                  s(:int, 1)), :==,
                s(:lvar, :j)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1)),
              s(:array,
                s(:int, 4)),
              s(:array,
                s(:int, 9),
                s(:int, 10),
                s(:int, 11),
                s(:int, 12)),
              s(:array,
                s(:int, 15),
                s(:int, 16)),
              s(:array,
                s(:int, 19),
                s(:int, 20),
                s(:int, 21))),
            s(:send,
              s(:lvar, :e), :to_a)))),
      s(:def, :test_detect,
        s(:args),
        s(:begin,
          s(:ivasgn, :@obj,
            s(:begin,
              s(:irange,
                s(:str, "a"),
                s(:str, "z")))),
          s(:send, nil, :assert_equal,
            s(:str, "c"),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :detect),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :==,
                s(:str, "c")))),
          s(:lvasgn, :proc,
            s(:block,
              s(:send,
                s(:const, nil, :Proc), :new),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :==,
                s(:str, "c")))),
          s(:send, nil, :assert_equal,
            s(:str, "c"),
            s(:send,
              s(:ivar, :@obj), :detect,
              s(:block_pass,
                s(:lvar, :proc)))),
          s(:lvasgn, :lambda,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :==,
                s(:str, "c")))),
          s(:send, nil, :assert_equal,
            s(:str, "c"),
            s(:send,
              s(:ivar, :@obj), :detect,
              s(:block_pass,
                s(:lvar, :lambda)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c"),
              s(:int, 2)),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@obj), :each_with_index), :detect),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:lvar, :x), :==,
                s(:str, "c")))),
          s(:lvasgn, :proc2,
            s(:block,
              s(:send,
                s(:const, nil, :Proc), :new),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:lvar, :x), :==,
                s(:str, "c")))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c"),
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :detect,
              s(:block_pass,
                s(:lvar, :proc2)))),
          s(:lvasgn, :bug9605,
            s(:str, "[ruby-core:61340]")),
          s(:lvasgn, :lambda2,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:lvar, :x), :==,
                s(:str, "c")))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c"),
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :detect,
              s(:block_pass,
                s(:lvar, :lambda2)))))),
      s(:def, :test_select,
        s(:args),
        s(:begin,
          s(:ivasgn, :@obj,
            s(:begin,
              s(:irange,
                s(:str, "a"),
                s(:str, "z")))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c")),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :select),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :==,
                s(:str, "c")))),
          s(:lvasgn, :proc,
            s(:block,
              s(:send,
                s(:const, nil, :Proc), :new),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :==,
                s(:str, "c")))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c")),
            s(:send,
              s(:ivar, :@obj), :select,
              s(:block_pass,
                s(:lvar, :proc)))),
          s(:lvasgn, :lambda,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :==,
                s(:str, "c")))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c")),
            s(:send,
              s(:ivar, :@obj), :select,
              s(:block_pass,
                s(:lvar, :lambda)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "c"),
                s(:int, 2))),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@obj), :each_with_index), :select),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:lvar, :x), :==,
                s(:str, "c")))),
          s(:lvasgn, :proc2,
            s(:block,
              s(:send,
                s(:const, nil, :Proc), :new),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:lvar, :x), :==,
                s(:str, "c")))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "c"),
                s(:int, 2))),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :select,
              s(:block_pass,
                s(:lvar, :proc2)))),
          s(:lvasgn, :bug9605,
            s(:str, "[ruby-core:61340]")),
          s(:lvasgn, :lambda2,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:send,
                s(:lvar, :x), :==,
                s(:str, "c")))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "c"),
                s(:int, 2))),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :select,
              s(:block_pass,
                s(:lvar, :lambda2)))))),
      s(:def, :test_map,
        s(:args),
        s(:begin,
          s(:ivasgn, :@obj,
            s(:begin,
              s(:irange,
                s(:str, "a"),
                s(:str, "e")))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "A"),
              s(:str, "B"),
              s(:str, "C"),
              s(:str, "D"),
              s(:str, "E")),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :map),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :upcase))),
          s(:lvasgn, :proc,
            s(:block,
              s(:send,
                s(:const, nil, :Proc), :new),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :upcase))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "A"),
              s(:str, "B"),
              s(:str, "C"),
              s(:str, "D"),
              s(:str, "E")),
            s(:send,
              s(:ivar, :@obj), :map,
              s(:block_pass,
                s(:lvar, :proc)))),
          s(:lvasgn, :lambda,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :upcase))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "A"),
              s(:str, "B"),
              s(:str, "C"),
              s(:str, "D"),
              s(:str, "E")),
            s(:send,
              s(:ivar, :@obj), :map,
              s(:block_pass,
                s(:lvar, :lambda)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:int, 0)),
              s(:array,
                s(:str, "B"),
                s(:int, 1)),
              s(:array,
                s(:str, "C"),
                s(:int, 2)),
              s(:array,
                s(:str, "D"),
                s(:int, 3)),
              s(:array,
                s(:str, "E"),
                s(:int, 4))),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@obj), :each_with_index), :map),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:array,
                s(:send,
                  s(:lvar, :x), :upcase),
                s(:lvar, :i)))),
          s(:lvasgn, :proc2,
            s(:block,
              s(:send,
                s(:const, nil, :Proc), :new),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:array,
                s(:send,
                  s(:lvar, :x), :upcase),
                s(:lvar, :i)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:int, 0)),
              s(:array,
                s(:str, "B"),
                s(:int, 1)),
              s(:array,
                s(:str, "C"),
                s(:int, 2)),
              s(:array,
                s(:str, "D"),
                s(:int, 3)),
              s(:array,
                s(:str, "E"),
                s(:int, 4))),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :map,
              s(:block_pass,
                s(:lvar, :proc2)))),
          s(:lvasgn, :lambda2,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:array,
                s(:send,
                  s(:lvar, :x), :upcase),
                s(:lvar, :i)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:int, 0)),
              s(:array,
                s(:str, "B"),
                s(:int, 1)),
              s(:array,
                s(:str, "C"),
                s(:int, 2)),
              s(:array,
                s(:str, "D"),
                s(:int, 3)),
              s(:array,
                s(:str, "E"),
                s(:int, 4))),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :map,
              s(:block_pass,
                s(:lvar, :lambda2)))))),
      s(:def, :test_flat_map,
        s(:args),
        s(:begin,
          s(:ivasgn, :@obj,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 2)),
              s(:array,
                s(:int, 3),
                s(:int, 4)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 4),
              s(:int, 6),
              s(:int, 8)),
            s(:block,
              s(:send,
                s(:ivar, :@obj), :flat_map),
              s(:args,
                s(:arg, :i)),
              s(:block,
                s(:send,
                  s(:lvar, :i), :map),
                s(:args,
                  s(:arg, :j)),
                s(:send,
                  s(:lvar, :j), :*,
                  s(:int, 2))))),
          s(:lvasgn, :proc,
            s(:block,
              s(:send,
                s(:const, nil, :Proc), :new),
              s(:args,
                s(:arg, :i)),
              s(:block,
                s(:send,
                  s(:lvar, :i), :map),
                s(:args,
                  s(:arg, :j)),
                s(:send,
                  s(:lvar, :j), :*,
                  s(:int, 2))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 4),
              s(:int, 6),
              s(:int, 8)),
            s(:send,
              s(:ivar, :@obj), :flat_map,
              s(:block_pass,
                s(:lvar, :proc)))),
          s(:lvasgn, :lambda,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :i)),
              s(:block,
                s(:send,
                  s(:lvar, :i), :map),
                s(:args,
                  s(:arg, :j)),
                s(:send,
                  s(:lvar, :j), :*,
                  s(:int, 2))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 4),
              s(:int, 6),
              s(:int, 8)),
            s(:send,
              s(:ivar, :@obj), :flat_map,
              s(:block_pass,
                s(:lvar, :lambda)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 2)),
              s(:int, 0),
              s(:array,
                s(:int, 3),
                s(:int, 4)),
              s(:int, 1)),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@obj), :each_with_index), :flat_map),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:array,
                s(:lvar, :x),
                s(:lvar, :i)))),
          s(:lvasgn, :proc2,
            s(:block,
              s(:send,
                s(:const, nil, :Proc), :new),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:array,
                s(:lvar, :x),
                s(:lvar, :i)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 2)),
              s(:int, 0),
              s(:array,
                s(:int, 3),
                s(:int, 4)),
              s(:int, 1)),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :flat_map,
              s(:block_pass,
                s(:lvar, :proc2)))),
          s(:lvasgn, :lambda2,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:array,
                s(:lvar, :x),
                s(:lvar, :i)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 2)),
              s(:int, 0),
              s(:array,
                s(:int, 3),
                s(:int, 4)),
              s(:int, 1)),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_index), :flat_map,
              s(:block_pass,
                s(:lvar, :lambda2)))))))))
