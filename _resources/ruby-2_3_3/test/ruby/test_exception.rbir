s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:class,
    s(:const, nil, :TestException),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_exception_rescued,
        s(:args),
        s(:kwbegin,
          s(:rescue,
            s(:begin,
              s(:send, nil, :raise,
                s(:str, "this must be handled")),
              s(:send, nil, :assert,
                s(:false))),
            s(:resbody, nil, nil,
              s(:send, nil, :assert,
                s(:true))), nil))),
      s(:def, :test_exception_retry,
        s(:args),
        s(:begin,
          s(:lvasgn, :bad,
            s(:true)),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :raise,
                s(:str, "this must be handled no.2")),
              s(:resbody, nil, nil,
                s(:if,
                  s(:lvar, :bad),
                  s(:begin,
                    s(:lvasgn, :bad,
                      s(:false)),
                    s(:retry),
                    s(:send, nil, :assert,
                      s(:false))), nil)), nil)),
          s(:send, nil, :assert,
            s(:true)))),
      s(:def, :test_exception_in_rescue,
        s(:args),
        s(:begin,
          s(:lvasgn, :string,
            s(:str, "this must be handled no.3")),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :RuntimeError),
              s(:lvar, :string)),
            s(:args),
            s(:begin,
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :raise,
                    s(:str, "exception in rescue clause")),
                  s(:resbody, nil, nil,
                    s(:send, nil, :raise,
                      s(:lvar, :string))), nil)),
              s(:send, nil, :assert,
                s(:false)))))),
      s(:def, :test_exception_in_ensure,
        s(:args),
        s(:begin,
          s(:lvasgn, :string,
            s(:str, "exception in ensure clause")),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :RuntimeError),
              s(:lvar, :string)),
            s(:args),
            s(:begin,
              s(:kwbegin,
                s(:ensure,
                  s(:send, nil, :raise,
                    s(:str, "this must be handled no.4")),
                  s(:begin,
                    s(:send, nil, :assert_instance_of,
                      s(:const, nil, :RuntimeError),
                      s(:gvar, :$!)),
                    s(:send, nil, :assert_equal,
                      s(:str, "this must be handled no.4"),
                      s(:send,
                        s(:gvar, :$!), :message)),
                    s(:send, nil, :raise,
                      s(:str, "exception in ensure clause"))))),
              s(:send, nil, :assert,
                s(:false)))))),
      s(:def, :test_exception_ensure,
        s(:args),
        s(:begin,
          s(:lvasgn, :bad,
            s(:true)),
          s(:kwbegin,
            s(:rescue,
              s(:kwbegin,
                s(:ensure,
                  s(:send, nil, :raise,
                    s(:str, "this must be handled no.5")),
                  s(:lvasgn, :bad,
                    s(:false)))),
              s(:resbody, nil, nil, nil), nil)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :bad), :!)))),
      s(:def, :test_exception_ensure_2,
        s(:args),
        s(:begin,
          s(:lvasgn, :bad,
            s(:true)),
          s(:kwbegin,
            s(:rescue,
              s(:kwbegin,
                s(:ensure,
                  s(:send, nil, :raise,
                    s(:str, "this must be handled no.6")),
                  s(:lvasgn, :bad,
                    s(:false)))),
              s(:resbody, nil, nil, nil), nil)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :bad), :!)))),
      s(:def, :test_errinfo_in_debug,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9568,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :labeled_class,
                s(:str, "[ruby-core:61091] [Bug #9568]"),
                s(:const, nil, :RuntimeError)),
              s(:args),
              s(:def, :to_s,
                s(:args),
                s(:rescue,
                  s(:send, nil, :require,
                    s(:str, "\\0")),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :LoadError)), nil,
                    s(:send,
                      s(:send,
                        s(:self), :class), :to_s)), nil)))),
          s(:lvasgn, :err,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :verbose_warning),
              s(:args),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:lvar, :bug9568)),
                s(:args),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:gvasgn, :$DEBUG),
                      s(:lvasgn, :debug)),
                    s(:array,
                      s(:true),
                      s(:gvar, :$DEBUG))),
                  s(:kwbegin,
                    s(:ensure,
                      s(:send, nil, :raise,
                        s(:lvar, :bug9568)),
                      s(:gvasgn, :$DEBUG,
                        s(:lvar, :debug)))))))),
          s(:send, nil, :assert_include,
            s(:lvar, :err),
            s(:send,
              s(:lvar, :bug9568), :to_s)))),
      s(:def, :test_errinfo_encoding_in_debug,
        s(:args),
        s(:begin,
          s(:lvasgn, :exc,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:break,
                s(:send, nil, :class_eval,
                  s(:send,
                    s(:str, "class Cエラー < RuntimeError; self; end"), :encode,
                    s(:const,
                      s(:const, nil, :Encoding), :EUC_JP)))))),
          s(:send,
            s(:lvar, :exc), :inspect),
          s(:lvasgn, :err,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :verbose_warning),
              s(:args),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:lvar, :exc)),
                s(:args),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:gvasgn, :$DEBUG),
                      s(:lvasgn, :debug)),
                    s(:array,
                      s(:true),
                      s(:gvar, :$DEBUG))),
                  s(:kwbegin,
                    s(:ensure,
                      s(:send, nil, :raise,
                        s(:lvar, :exc)),
                      s(:gvasgn, :$DEBUG,
                        s(:lvar, :debug)))))))),
          s(:send, nil, :assert_include,
            s(:lvar, :err),
            s(:send,
              s(:lvar, :exc), :to_s)))),
      s(:def, :test_break_ensure,
        s(:args),
        s(:begin,
          s(:lvasgn, :bad,
            s(:true)),
          s(:while,
            s(:true),
            s(:kwbegin,
              s(:ensure,
                s(:break),
                s(:lvasgn, :bad,
                  s(:false))))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :bad), :!)))),
      s(:def, :test_catch_no_throw,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:sym, :foo),
          s(:block,
            s(:send, nil, :catch),
            s(:args),
            s(:sym, :foo)))),
      s(:def, :test_catch_throw,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:block,
              s(:send, nil, :catch,
                s(:sym, :foo)),
              s(:args),
              s(:begin,
                s(:block,
                  s(:send, nil, :loop),
                  s(:args),
                  s(:begin,
                    s(:block,
                      s(:send, nil, :loop),
                      s(:args),
                      s(:begin,
                        s(:send, nil, :throw,
                          s(:sym, :foo),
                          s(:true)),
                        s(:break))),
                    s(:send, nil, :assert,
                      s(:false),
                      s(:str, "should not reach here")))),
                s(:false)))),
          s(:send, nil, :assert,
            s(:lvar, :result)))),
      s(:def, :test_catch_throw_noarg,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised,
            s(:const, nil, :UncaughtThrowError)),
          s(:args),
          s(:begin,
            s(:lvasgn, :result,
              s(:block,
                s(:send, nil, :catch),
                s(:args,
                  s(:arg, :obj)),
                s(:begin,
                  s(:send, nil, :throw,
                    s(:lvar, :obj),
                    s(:sym, :ok)),
                  s(:send, nil, :assert,
                    s(:false),
                    s(:str, "should not reach here"))))),
            s(:send, nil, :assert_equal,
              s(:sym, :ok),
              s(:lvar, :result))))),
      s(:def, :test_uncaught_throw,
        s(:args),
        s(:begin,
          s(:lvasgn, :tag,
            s(:nil)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :UncaughtThrowError),
                s(:regexp,
                  s(:str, "uncaught throw"),
                  s(:regopt))),
              s(:args),
              s(:begin,
                s(:block,
                  s(:send, nil, :catch,
                    s(:str, "foo")),
                  s(:args,
                    s(:arg, :obj)),
                  s(:begin,
                    s(:lvasgn, :tag,
                      s(:send,
                        s(:lvar, :obj), :dup)),
                    s(:send, nil, :throw,
                      s(:lvar, :tag),
                      s(:sym, :ok)),
                    s(:send, nil, :assert,
                      s(:false),
                      s(:str, "should not reach here")))),
                s(:send, nil, :assert,
                  s(:false),
                  s(:str, "should not reach here"))))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :tag)),
          s(:send, nil, :assert_same,
            s(:lvar, :tag),
            s(:send,
              s(:lvar, :e), :tag)),
          s(:send, nil, :assert_equal,
            s(:sym, :ok),
            s(:send,
              s(:lvar, :e), :value)))),
      s(:def, :test_catch_throw_in_require,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7185,
            s(:str, "[ruby-dev:46234]")),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:array,
                s(:str, "dep"),
                s(:str, ".rb"))),
            s(:args,
              s(:arg, :t)),
            s(:begin,
              s(:send,
                s(:lvar, :t), :puts,
                s(:str, "throw :extdep, 42")),
              s(:send,
                s(:lvar, :t), :close),
              s(:send, nil, :assert_equal,
                s(:int, 42),
                s(:block,
                  s(:send, nil, :assert_throw,
                    s(:sym, :extdep),
                    s(:lvar, :bug7185)),
                  s(:args),
                  s(:send, nil, :require,
                    s(:send,
                      s(:lvar, :t), :path))),
                s(:lvar, :bug7185)))))),
      s(:def, :test_throw_false,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug12743,
            s(:str, "[ruby-core:77229] [Bug #12743]")),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :UncaughtThrowError),
                s(:regexp,
                  s(:str, "false"),
                  s(:regopt)),
                s(:lvar, :bug12743)),
              s(:args),
              s(:send,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :start),
                  s(:args),
                  s(:send, nil, :throw,
                    s(:false))), :join))),
          s(:send, nil, :assert_same,
            s(:false),
            s(:send,
              s(:lvar, :e), :tag),
            s(:lvar, :bug12743)))),
      s(:def, :test_else_no_exception,
        s(:args),
        s(:kwbegin,
          s(:rescue,
            s(:send, nil, :assert,
              s(:true)),
            s(:resbody, nil, nil,
              s(:send, nil, :assert,
                s(:false))),
            s(:send, nil, :assert,
              s(:true))))),
      s(:def, :test_else_raised,
        s(:args),
        s(:kwbegin,
          s(:rescue,
            s(:begin,
              s(:send, nil, :assert,
                s(:true)),
              s(:send, nil, :raise),
              s(:send, nil, :assert,
                s(:false))),
            s(:resbody, nil, nil,
              s(:send, nil, :assert,
                s(:true))),
            s(:send, nil, :assert,
              s(:false))))),
      s(:def, :test_else_nested_no_exception,
        s(:args),
        s(:kwbegin,
          s(:rescue,
            s(:begin,
              s(:send, nil, :assert,
                s(:true)),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :assert,
                    s(:true)),
                  s(:resbody, nil, nil,
                    s(:send, nil, :assert,
                      s(:false))),
                  s(:send, nil, :assert,
                    s(:true)))),
              s(:send, nil, :assert,
                s(:true))),
            s(:resbody, nil, nil,
              s(:send, nil, :assert,
                s(:false))),
            s(:send, nil, :assert,
              s(:true))))),
      s(:def, :test_else_nested_rescued,
        s(:args),
        s(:kwbegin,
          s(:rescue,
            s(:begin,
              s(:send, nil, :assert,
                s(:true)),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:send, nil, :assert,
                      s(:true)),
                    s(:send, nil, :raise),
                    s(:send, nil, :assert,
                      s(:false))),
                  s(:resbody, nil, nil,
                    s(:send, nil, :assert,
                      s(:true))),
                  s(:send, nil, :assert,
                    s(:false)))),
              s(:send, nil, :assert,
                s(:true))),
            s(:resbody, nil, nil,
              s(:send, nil, :assert,
                s(:false))),
            s(:send, nil, :assert,
              s(:true))))),
      s(:def, :test_else_nested_unrescued,
        s(:args),
        s(:kwbegin,
          s(:rescue,
            s(:begin,
              s(:send, nil, :assert,
                s(:true)),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :assert,
                    s(:true)),
                  s(:resbody, nil, nil,
                    s(:send, nil, :assert,
                      s(:false))),
                  s(:send, nil, :assert,
                    s(:true)))),
              s(:send, nil, :assert,
                s(:true)),
              s(:send, nil, :raise),
              s(:send, nil, :assert,
                s(:false))),
            s(:resbody, nil, nil,
              s(:send, nil, :assert,
                s(:true))),
            s(:send, nil, :assert,
              s(:false))))),
      s(:def, :test_else_nested_rescued_reraise,
        s(:args),
        s(:kwbegin,
          s(:rescue,
            s(:begin,
              s(:send, nil, :assert,
                s(:true)),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:send, nil, :assert,
                      s(:true)),
                    s(:send, nil, :raise),
                    s(:send, nil, :assert,
                      s(:false))),
                  s(:resbody, nil, nil,
                    s(:send, nil, :assert,
                      s(:true))),
                  s(:send, nil, :assert,
                    s(:false)))),
              s(:send, nil, :assert,
                s(:true)),
              s(:send, nil, :raise),
              s(:send, nil, :assert,
                s(:false))),
            s(:resbody, nil, nil,
              s(:send, nil, :assert,
                s(:true))),
            s(:send, nil, :assert,
              s(:false))))),
      s(:def, :test_raise_with_wrong_number_of_arguments,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :raise,
              s(:nil))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :raise,
              s(:int, 1),
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :raise,
              s(:int, 1),
              s(:int, 1),
              s(:int, 1),
              s(:int, 1))))),
      s(:def, :test_type_error_message_encoding,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :eval,
              s(:str, "Module.new do break class C䀲; self; end; end"))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :c), :new)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "C\\u{4032}"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:str, ""), :[],
              s(:lvar, :o))),
          s(:block,
            s(:send,
              s(:lvar, :c), :class_eval),
            s(:args),
            s(:def, :to_int,
              s(:args),
              s(:self))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "C\\u{4032}"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:str, ""), :[],
              s(:lvar, :o))),
          s(:block,
            s(:send,
              s(:lvar, :c), :class_eval),
            s(:args),
            s(:def, :to_a,
              s(:args),
              s(:self))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "C\\u{4032}"),
                s(:regopt))),
            s(:args),
            s(:array,
              s(:splat,
                s(:lvar, :o)))),
          s(:lvasgn, :obj,
            s(:send,
              s(:send, nil, :eval,
                s(:str, "class C🗿; self; end")), :new)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "C\\u{1f5ff}"),
                s(:regopt))),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:send, nil, :include,
                s(:lvar, :obj)))))),
      s(:def, :test_errat,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:str, "p $@"),
            s(:array,
              s(:str, "nil")),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:str, "$@ = 1"),
            s(:array),
            s(:regexp,
              s(:str, "\\$! not set \\(ArgumentError\\)$"),
              s(:regopt))),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "      begin\n"),
              s(:str, "        raise\n"),
              s(:str, "      rescue\n"),
              s(:str, "        $@ = 1\n"),
              s(:str, "      end\n")),
            s(:array),
            s(:regexp,
              s(:str, "backtrace must be Array of String \\(TypeError\\)$"),
              s(:regopt))),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "      begin\n"),
              s(:str, "        raise\n"),
              s(:str, "      rescue\n"),
              s(:str, "        $@ = 'foo'\n"),
              s(:str, "        raise\n"),
              s(:str, "      end\n")),
            s(:array),
            s(:regexp,
              s(:str, "^foo: unhandled exception$"),
              s(:regopt))),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "      begin\n"),
              s(:str, "        raise\n"),
              s(:str, "      rescue\n"),
              s(:str, "        $@ = %w(foo bar baz)\n"),
              s(:str, "        raise\n"),
              s(:str, "      end\n")),
            s(:array),
            s(:regexp,
              s(:str, "^foo: unhandled exception\\s+from bar\\s+from baz$"),
              s(:regopt))))),
      s(:def, :test_thread_signal_location,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :_),
              s(:lvasgn, :stderr),
              s(:lvasgn, :_)),
            s(:send,
              s(:const, nil, :EnvUtil), :invoke_ruby,
              s(:str, "--disable-gems -d"),
              s(:dstr,
                s(:str, "Thread.start do\n"),
                s(:str, "  begin\n"),
                s(:str, "    Process.kill(:INT, $$)\n"),
                s(:str, "  ensure\n"),
                s(:str, "    raise \"in ensure\"\n"),
                s(:str, "  end\n"),
                s(:str, "end.join\n")),
              s(:false),
              s(:true))),
          s(:send, nil, :assert_not_match,
            s(:regexp,
              s(:str, ":0"),
              s(:regopt)),
            s(:lvar, :stderr),
            s(:str, "[ruby-dev:39116]")))),
      s(:def, :test_errinfo,
        s(:args),
        s(:begin,
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:send, nil, :raise,
                  s(:str, "foo")),
                s(:send, nil, :assert,
                  s(:false))),
              s(:resbody, nil,
                s(:lvasgn, :e),
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:lvar, :e),
                    s(:gvar, :$!)),
                  s(:block,
                    s(:send,
                      s(:int, 1), :times),
                    s(:args),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :e),
                      s(:gvar, :$!))))), nil)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:gvar, :$!)))),
      s(:def, :test_inspect,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "#<Exception: Exception>"),
            s(:send,
              s(:send,
                s(:const, nil, :Exception), :new), :inspect)),
          s(:lvasgn, :e,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const, nil, :Exception))),
          s(:block,
            s(:send,
              s(:lvar, :e), :class_eval),
            s(:args),
            s(:def, :to_s,
              s(:args),
              s(:str, ""))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :e), :inspect),
            s(:send,
              s(:send,
                s(:lvar, :e), :new), :inspect)))),
      s(:def, :test_to_s,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:send,
              s(:const, nil, :StandardError), :new,
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:lvar, :e), :to_s)),
          s(:defs,
            s(:lvasgn, :s,
              s(:send,
                s(:const, nil, :Object), :new)), :to_s,
            s(:args),
            s(:str, "bar")),
          s(:lvasgn, :e,
            s(:send,
              s(:const, nil, :StandardError), :new,
              s(:lvar, :s))),
          s(:send, nil, :assert_equal,
            s(:str, "bar"),
            s(:send,
              s(:lvar, :e), :to_s)))),
      s(:def, :test_set_backtrace,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:send,
              s(:const, nil, :Exception), :new)),
          s(:send,
            s(:lvar, :e), :set_backtrace,
            s(:str, "foo")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "foo")),
            s(:send,
              s(:lvar, :e), :backtrace)),
          s(:send,
            s(:lvar, :e), :set_backtrace,
            s(:array,
              s(:str, "foo"),
              s(:str, "bar"),
              s(:str, "baz"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "foo"),
              s(:str, "bar"),
              s(:str, "baz")),
            s(:send,
              s(:lvar, :e), :backtrace)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :e), :set_backtrace,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :e), :set_backtrace,
              s(:array,
                s(:int, 1)))))),
      s(:def, :test_exit_success_p,
        s(:args),
        s(:begin,
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :exit),
              s(:resbody,
                s(:array,
                  s(:const, nil, :SystemExit)),
                s(:lvasgn, :e), nil), nil)),
          s(:send, nil, :assert_send,
            s(:array,
              s(:lvar, :e),
              s(:sym, :success?)),
            s(:str, "success by default")),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :exit,
                s(:true)),
              s(:resbody,
                s(:array,
                  s(:const, nil, :SystemExit)),
                s(:lvasgn, :e), nil), nil)),
          s(:send, nil, :assert_send,
            s(:array,
              s(:lvar, :e),
              s(:sym, :success?)),
            s(:str, "true means success")),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :exit,
                s(:false)),
              s(:resbody,
                s(:array,
                  s(:const, nil, :SystemExit)),
                s(:lvasgn, :e), nil), nil)),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:lvar, :e),
              s(:sym, :success?)),
            s(:str, "false means failure")),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :abort),
              s(:resbody,
                s(:array,
                  s(:const, nil, :SystemExit)),
                s(:lvasgn, :e), nil), nil)),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:lvar, :e),
              s(:sym, :success?)),
            s(:str, "abort means failure")))),
      s(:def, :test_nomethoderror,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug3237,
            s(:str, "[ruby-core:29948]")),
          s(:lvasgn, :str,
            s(:str, "☀")),
          s(:lvasgn, :id,
            s(:sym, :☄)),
          s(:block,
            s(:send,
              s(:const, nil, :EnvUtil), :with_default_external,
              s(:const,
                s(:const, nil, :Encoding), :UTF_8)),
            s(:args),
            s(:begin,
              s(:lvasgn, :msg,
                s(:dstr,
                  s(:str, "undefined method `"),
                  s(:begin,
                    s(:lvar, :id)),
                  s(:str, "' for "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :str), :inspect)),
                  s(:str, ":String"))),
              s(:block,
                s(:send, nil, :assert_raise_with_message,
                  s(:const, nil, :NoMethodError),
                  s(:lvar, :msg),
                  s(:lvar, :bug3237)),
                s(:args),
                s(:send,
                  s(:lvar, :str), :__send__,
                  s(:lvar, :id))))))),
      s(:def, :test_errno,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:const, nil, :Encoding), :find,
            s(:str, "locale")),
          s(:send,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Errno), :EINVAL), :new), :message), :encoding))),
      s(:def, :test_too_many_args_in_eval,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5720,
            s(:str, "[ruby-core:41520]")),
          s(:lvasgn, :arg_string,
            s(:send,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:int, 0),
                    s(:int, 140000))), :to_a), :join,
              s(:str, ", "))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SystemStackError),
              s(:lvar, :bug5720)),
            s(:args),
            s(:send, nil, :eval,
              s(:dstr,
                s(:str, "raise("),
                s(:begin,
                  s(:lvar, :arg_string)),
                s(:str, ")")))))),
      s(:def, :test_systemexit_new,
        s(:args),
        s(:begin,
          s(:lvasgn, :e0,
            s(:send,
              s(:const, nil, :SystemExit), :new)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :e0), :status)),
          s(:send, nil, :assert_equal,
            s(:str, "SystemExit"),
            s(:send,
              s(:lvar, :e0), :message)),
          s(:lvasgn, :ei,
            s(:send,
              s(:const, nil, :SystemExit), :new,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :ei), :status)),
          s(:send, nil, :assert_equal,
            s(:str, "SystemExit"),
            s(:send,
              s(:lvar, :ei), :message)),
          s(:lvasgn, :es,
            s(:send,
              s(:const, nil, :SystemExit), :new,
              s(:str, "msg"))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :es), :status)),
          s(:send, nil, :assert_equal,
            s(:str, "msg"),
            s(:send,
              s(:lvar, :es), :message)),
          s(:lvasgn, :eis,
            s(:send,
              s(:const, nil, :SystemExit), :new,
              s(:int, 7),
              s(:str, "msg"))),
          s(:send, nil, :assert_equal,
            s(:int, 7),
            s(:send,
              s(:lvar, :eis), :status)),
          s(:send, nil, :assert_equal,
            s(:str, "msg"),
            s(:send,
              s(:lvar, :eis), :message)),
          s(:lvasgn, :bug5728,
            s(:str, "[ruby-dev:44951]")),
          s(:lvasgn, :et,
            s(:send,
              s(:const, nil, :SystemExit), :new,
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :et), :success?),
            s(:lvar, :bug5728)),
          s(:send, nil, :assert_equal,
            s(:str, "SystemExit"),
            s(:send,
              s(:lvar, :et), :message),
            s(:lvar, :bug5728)),
          s(:lvasgn, :ef,
            s(:send,
              s(:const, nil, :SystemExit), :new,
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :ef), :success?),
            s(:lvar, :bug5728)),
          s(:send, nil, :assert_equal,
            s(:str, "SystemExit"),
            s(:send,
              s(:lvar, :ef), :message),
            s(:lvar, :bug5728)),
          s(:lvasgn, :ets,
            s(:send,
              s(:const, nil, :SystemExit), :new,
              s(:true),
              s(:str, "msg"))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :ets), :success?),
            s(:lvar, :bug5728)),
          s(:send, nil, :assert_equal,
            s(:str, "msg"),
            s(:send,
              s(:lvar, :ets), :message),
            s(:lvar, :bug5728)),
          s(:lvasgn, :efs,
            s(:send,
              s(:const, nil, :SystemExit), :new,
              s(:false),
              s(:str, "msg"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :efs), :success?),
            s(:lvar, :bug5728)),
          s(:send, nil, :assert_equal,
            s(:str, "msg"),
            s(:send,
              s(:lvar, :efs), :message),
            s(:lvar, :bug5728)))),
      s(:def, :test_exception_in_name_error_to_str,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5575,
            s(:str, "[ruby-core:41612]")),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:array,
                s(:str, "test_exception_in_name_error_to_str"),
                s(:str, ".rb"))),
            s(:args,
              s(:arg, :t)),
            s(:begin,
              s(:send,
                s(:lvar, :t), :puts,
                s(:dstr,
                  s(:str, "      begin\n"),
                  s(:str, "        BasicObject.new.inspect\n"),
                  s(:str, "      rescue\n"),
                  s(:str, "        $!.inspect\n"),
                  s(:str, "      end\n"))),
              s(:send,
                s(:lvar, :t), :close),
              s(:block,
                s(:send, nil, :assert_nothing_raised,
                  s(:const, nil, :NameError),
                  s(:lvar, :bug5575)),
                s(:args),
                s(:send, nil, :load,
                  s(:send,
                    s(:lvar, :t), :path))))))),
      s(:def, :test_equal,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5865,
            s(:str, "[ruby-core:41979]")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :RuntimeError), :new,
              s(:str, "a")),
            s(:send,
              s(:const, nil, :RuntimeError), :new,
              s(:str, "a")),
            s(:lvar, :bug5865)),
          s(:send, nil, :assert_not_equal,
            s(:send,
              s(:const, nil, :RuntimeError), :new,
              s(:str, "a")),
            s(:send,
              s(:const, nil, :StandardError), :new,
              s(:str, "a")),
            s(:lvar, :bug5865)))),
      s(:def, :test_exception_in_exception_equal,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5865,
            s(:str, "[ruby-core:41979]")),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:array,
                s(:str, "test_exception_in_exception_equal"),
                s(:str, ".rb"))),
            s(:args,
              s(:arg, :t)),
            s(:begin,
              s(:send,
                s(:lvar, :t), :puts,
                s(:dstr,
                  s(:str, "      o = Object.new\n"),
                  s(:str, "      def o.exception(arg)\n"),
                  s(:str, "      end\n"),
                  s(:str, "      _ = RuntimeError.new(\"a\") == o\n"))),
              s(:send,
                s(:lvar, :t), :close),
              s(:block,
                s(:send, nil, :assert_nothing_raised,
                  s(:const, nil, :ArgumentError),
                  s(:lvar, :bug5865)),
                s(:args),
                s(:send, nil, :load,
                  s(:send,
                    s(:lvar, :t), :path))))))),
      s(:casgn, nil, :Bug4438,
        s(:str, "[ruby-core:35364]")),
      s(:def, :test_rescue_single_argument,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError),
            s(:const, nil, :Bug4438)),
          s(:args),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :raise),
              s(:resbody,
                s(:array,
                  s(:int, 1)), nil, nil), nil)))),
      s(:def, :test_rescue_splat_argument,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError),
            s(:const, nil, :Bug4438)),
          s(:args),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :raise),
              s(:resbody,
                s(:array,
                  s(:splat,
                    s(:send, nil, :Array,
                      s(:int, 1)))), nil, nil), nil)))),
      s(:def, :test_to_s_taintness_propagation,
        s(:args),
        s(:begin,
          s(:for,
            s(:lvasgn, :exc),
            s(:array,
              s(:const, nil, :Exception),
              s(:const, nil, :NameError)),
            s(:begin,
              s(:lvasgn, :m,
                s(:str, "abcdefg")),
              s(:lvasgn, :e,
                s(:send,
                  s(:lvar, :exc), :new,
                  s(:lvar, :m))),
              s(:send,
                s(:lvar, :e), :taint),
              s(:lvasgn, :s,
                s(:send,
                  s(:lvar, :e), :to_s)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :m), :tainted?),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :exc)),
                  s(:str, "#to_s should not propagate taintness"))),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :s), :tainted?),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :exc)),
                  s(:str, "#to_s should not propagate taintness"))))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :to_str,
            s(:args),
            s(:str, "foo")),
          s(:send,
            s(:lvar, :o), :taint),
          s(:lvasgn, :e,
            s(:send,
              s(:const, nil, :NameError), :new,
              s(:lvar, :o))),
          s(:lvasgn, :s,
            s(:send,
              s(:lvar, :e), :to_s)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :s), :tainted?)))),
      s(:def, :m,
        s(:args),
        s(:begin,
          s(:send, nil, :m,
            s(:block_pass,
              s(:block,
                s(:send, nil, :lambda),
                s(:args),
                s(:return,
                  s(:int, 0))))),
          s(:int, 42))),
      s(:def, :test_stackoverflow,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature6216,
            s(:str, "[ruby-core:43794] [Feature #6216]")),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :SystemStackError),
                s(:lvar, :feature6216)),
              s(:args),
              s(:send, nil, :m))),
          s(:lvasgn, :level,
            s(:send,
              s(:send,
                s(:lvar, :e), :backtrace), :size)),
          s(:send, nil, :assert_operator,
            s(:lvar, :level),
            s(:sym, :>),
            s(:int, 10),
            s(:lvar, :feature6216)),
          s(:lvasgn, :feature6216,
            s(:str, "[ruby-core:63377] [Feature #6216]")),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :SystemStackError),
                s(:lvar, :feature6216)),
              s(:args),
              s(:send, nil, :raise,
                s(:lvar, :e)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :level),
            s(:send,
              s(:send,
                s(:lvar, :e), :backtrace), :size),
            s(:lvar, :feature6216)))),
      s(:def, :test_machine_stackoverflow,
        s(:args),
        s(:rescue,
          s(:begin,
            s(:lvasgn, :bug9109,
              s(:str, "[ruby-dev:47804] [Bug #9109]")),
            s(:send, nil, :assert_separately,
              s(:array,
                s(:str, "--disable-gem")),
              s(:dstr,
                s(:str, "    assert_raise(SystemStackError, "),
                s(:begin,
                  s(:send,
                    s(:lvar, :bug9109), :dump)),
                s(:str, ") {\n"),
                s(:str, "      h = {a: ->{h[:a].call}}\n"),
                s(:str, "      h[:a].call\n"),
                s(:str, "    }\n")))),
          s(:resbody,
            s(:array,
              s(:const, nil, :SystemStackError)), nil, nil), nil)),
      s(:def, :test_machine_stackoverflow_by_define_method,
        s(:args),
        s(:rescue,
          s(:begin,
            s(:lvasgn, :bug9454,
              s(:str, "[ruby-core:60113] [Bug #9454]")),
            s(:send, nil, :assert_separately,
              s(:array,
                s(:str, "--disable-gem")),
              s(:dstr,
                s(:str, "    assert_raise(SystemStackError, "),
                s(:begin,
                  s(:send,
                    s(:lvar, :bug9454), :dump)),
                s(:str, ") {\n"),
                s(:str, "      define_method(:foo) {self.foo}\n"),
                s(:str, "      self.foo\n"),
                s(:str, "    }\n")))),
          s(:resbody,
            s(:array,
              s(:const, nil, :SystemStackError)), nil, nil), nil)),
      s(:def, :test_cause,
        s(:args),
        s(:begin,
          s(:lvasgn, :msg,
            s(:str, "[Feature #8257]")),
          s(:lvasgn, :cause,
            s(:nil)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :StandardError)),
              s(:args),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :raise,
                    s(:lvar, :msg)),
                  s(:resbody, nil,
                    s(:lvasgn, :e),
                    s(:begin,
                      s(:lvasgn, :cause,
                        s(:send,
                          s(:lvar, :e), :cause)),
                      s(:send, nil, :raise,
                        s(:const, nil, :StandardError)))), nil)))),
          s(:send, nil, :assert_nil,
            s(:lvar, :cause),
            s(:lvar, :msg)),
          s(:lvasgn, :cause,
            s(:send,
              s(:lvar, :e), :cause)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :RuntimeError),
            s(:lvar, :cause),
            s(:lvar, :msg)),
          s(:send, nil, :assert_equal,
            s(:lvar, :msg),
            s(:send,
              s(:lvar, :cause), :message),
            s(:lvar, :msg)))),
      s(:def, :test_cause_reraised,
        s(:args),
        s(:begin,
          s(:lvasgn, :msg,
            s(:str, "[Feature #8257]")),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :RuntimeError)),
              s(:args),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :raise,
                    s(:lvar, :msg)),
                  s(:resbody, nil,
                    s(:lvasgn, :e),
                    s(:send, nil, :raise,
                      s(:lvar, :e))), nil)))),
          s(:send, nil, :assert_not_same,
            s(:lvar, :e),
            s(:send,
              s(:lvar, :e), :cause),
            s(:dstr,
              s(:begin,
                s(:lvar, :msg)),
              s(:str, ": should not be recursive"))))),
      s(:def, :test_cause_raised_in_rescue,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :RuntimeError),
                s(:str, "b")),
              s(:args),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :raise,
                    s(:str, "a")),
                  s(:resbody, nil,
                    s(:lvasgn, :a),
                    s(:kwbegin,
                      s(:rescue,
                        s(:send, nil, :raise,
                          s(:str, "b")),
                        s(:resbody, nil,
                          s(:lvasgn, :b),
                          s(:kwbegin,
                            s(:rescue,
                              s(:send, nil, :raise,
                                s(:str, "c")),
                              s(:resbody, nil, nil,
                                s(:send, nil, :raise,
                                  s(:lvar, :b))), nil))), nil))), nil)))),
          s(:send, nil, :assert_equal,
            s(:str, "a"),
            s(:send,
              s(:send,
                s(:lvar, :e), :cause), :message),
            s(:str, "cause should not be overwritten by reraise")))),
      s(:def, :test_cause_at_raised,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :RuntimeError),
                s(:str, "b")),
              s(:args),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :raise,
                    s(:str, "a")),
                  s(:resbody, nil,
                    s(:lvasgn, :a),
                    s(:begin,
                      s(:lvasgn, :b,
                        s(:send,
                          s(:const, nil, :RuntimeError), :new,
                          s(:str, "b"))),
                      s(:kwbegin,
                        s(:rescue,
                          s(:send, nil, :raise,
                            s(:str, "c")),
                          s(:resbody, nil, nil,
                            s(:send, nil, :raise,
                              s(:lvar, :b))), nil)))), nil)))),
          s(:send, nil, :assert_equal,
            s(:str, "c"),
            s(:send,
              s(:send,
                s(:lvar, :e), :cause), :message),
            s(:str, "cause should be the exception at raised")))),
      s(:def, :test_raise_with_cause,
        s(:args),
        s(:begin,
          s(:lvasgn, :msg,
            s(:str, "[Feature #8257]")),
          s(:lvasgn, :cause,
            s(:send,
              s(:const, nil, :ArgumentError), :new,
              s(:str, "foobar"))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :RuntimeError)),
              s(:args),
              s(:send, nil, :raise,
                s(:lvar, :msg),
                s(:hash,
                  s(:pair,
                    s(:sym, :cause),
                    s(:lvar, :cause)))))),
          s(:send, nil, :assert_same,
            s(:lvar, :cause),
            s(:send,
              s(:lvar, :e), :cause)))),
      s(:def, :test_cause_with_no_arguments,
        s(:args),
        s(:begin,
          s(:lvasgn, :cause,
            s(:send,
              s(:const, nil, :ArgumentError), :new,
              s(:str, "foobar"))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:regexp,
                s(:str, "with no arguments"),
                s(:regopt))),
            s(:args),
            s(:send, nil, :raise,
              s(:hash,
                s(:pair,
                  s(:sym, :cause),
                  s(:lvar, :cause))))))),
      s(:def, :test_raise_with_cause_in_rescue,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :RuntimeError),
                s(:str, "b")),
              s(:args),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :raise,
                    s(:str, "a")),
                  s(:resbody, nil,
                    s(:lvasgn, :a),
                    s(:kwbegin,
                      s(:rescue,
                        s(:send, nil, :raise,
                          s(:str, "b")),
                        s(:resbody, nil,
                          s(:lvasgn, :b),
                          s(:kwbegin,
                            s(:rescue,
                              s(:send, nil, :raise,
                                s(:str, "c")),
                              s(:resbody, nil, nil,
                                s(:send, nil, :raise,
                                  s(:lvar, :b),
                                  s(:hash,
                                    s(:pair,
                                      s(:sym, :cause),
                                      s(:send,
                                        s(:const, nil, :ArgumentError), :new,
                                        s(:str, "d")))))), nil))), nil))), nil)))),
          s(:send, nil, :assert_equal,
            s(:str, "d"),
            s(:send,
              s(:send,
                s(:lvar, :e), :cause), :message),
            s(:str, "cause option should be honored always")))),
      s(:def, :test_unknown_option,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug,
            s(:str, "[ruby-core:63203] [Feature #8257] should pass unknown options")),
          s(:lvasgn, :exc,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:const, nil, :RuntimeError)),
              s(:args),
              s(:begin,
                s(:send, nil, :attr_reader,
                  s(:sym, :arg)),
                s(:def, :initialize,
                  s(:args,
                    s(:optarg, :msg,
                      s(:nil))),
                  s(:begin,
                    s(:ivasgn, :@arg,
                      s(:lvar, :msg)),
                    s(:super,
                      s(:lvar, :msg))))))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:lvar, :exc),
                s(:lvar, :bug)),
              s(:args),
              s(:send, nil, :raise,
                s(:lvar, :exc),
                s(:hash,
                  s(:pair,
                    s(:str, "foo"),
                    s(:str, "bar")),
                  s(:pair,
                    s(:sym, :foo),
                    s(:str, "bar")))))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "foo"),
                s(:str, "bar")),
              s(:pair,
                s(:sym, :foo),
                s(:str, "bar"))),
            s(:send,
              s(:lvar, :e), :arg),
            s(:lvar, :bug)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:lvar, :exc),
                s(:lvar, :bug)),
              s(:args),
              s(:send, nil, :raise,
                s(:lvar, :exc),
                s(:hash,
                  s(:pair,
                    s(:str, "foo"),
                    s(:str, "bar")),
                  s(:pair,
                    s(:sym, :foo),
                    s(:str, "bar")),
                  s(:pair,
                    s(:sym, :cause),
                    s(:str, "zzz")))))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "foo"),
                s(:str, "bar")),
              s(:pair,
                s(:sym, :foo),
                s(:str, "bar"))),
            s(:send,
              s(:lvar, :e), :arg),
            s(:lvar, :bug)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:lvar, :exc),
                s(:lvar, :bug)),
              s(:args),
              s(:send, nil, :raise,
                s(:lvar, :exc),
                s(:hash)))),
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:send,
              s(:lvar, :e), :arg),
            s(:lvar, :bug)))),
      s(:def, :test_anonymous_message,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array),
          s(:str, "raise Class.new(RuntimeError), 'foo'"),
          s(:array),
          s(:regexp,
            s(:str, "foo\\n"),
            s(:regopt)))),
      s(:def, :test_name_error_info,
        s(:args),
        s(:begin,
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :BasicObject), :new)),
          s(:sclass,
            s(:lvar, :obj),
            s(:begin,
              s(:alias,
                s(:sym, :object_id),
                s(:sym, :__id__)),
              s(:def, :pretty_inspect,
                s(:args),
                s(:str, "`obj'")))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :NameError)),
              s(:args),
              s(:send,
                s(:lvar, :obj), :instance_eval,
                s(:str, "Object")))),
          s(:send, nil, :assert_equal,
            s(:sym, :Object),
            s(:send,
              s(:lvar, :e), :name)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :NameError)),
              s(:args),
              s(:const,
                s(:const, nil, :BasicObject), :X))),
          s(:send, nil, :assert_same,
            s(:const, nil, :BasicObject),
            s(:send,
              s(:lvar, :e), :receiver)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :NameError)),
              s(:args),
              s(:block,
                s(:send,
                  s(:lvar, :obj), :instance_eval),
                s(:args),
                s(:send, nil, :foo)))),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :e), :name)),
          s(:send, nil, :assert_same,
            s(:lvar, :obj),
            s(:send,
              s(:lvar, :e), :receiver)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :NoMethodError)),
              s(:args),
              s(:send,
                s(:lvar, :obj), :foo,
                s(:int, 1),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :e), :name)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :e), :args)),
          s(:send, nil, :assert_same,
            s(:lvar, :obj),
            s(:send,
              s(:lvar, :e), :receiver)),
          s(:defs,
            s(:lvar, :obj), :test,
            s(:args,
              s(:arg, :a),
              s(:optarg, :b,
                s(:nil)),
              s(:restarg, :c),
              s(:blockarg, :d)),
            s(:begin,
              s(:lvasgn, :e,
                s(:lvar, :a)),
              s(:block,
                s(:send,
                  s(:int, 1), :times),
                s(:args,
                  s(:arg, :f)),
                s(:lvasgn, :g,
                  s(:send, nil, :foo))))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :NameError)),
              s(:args),
              s(:send,
                s(:lvar, :obj), :test,
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :e), :name)),
          s(:send, nil, :assert_same,
            s(:lvar, :obj),
            s(:send,
              s(:lvar, :e), :receiver)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :a),
              s(:sym, :b),
              s(:sym, :c),
              s(:sym, :d),
              s(:sym, :e),
              s(:sym, :f),
              s(:sym, :g)),
            s(:send,
              s(:send,
                s(:lvar, :e), :local_variables), :sort)))),
      s(:def, :test_name_error_info_parent_iseq_mark,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array,
            s(:str, "-"),
            s(:send,
              s(:const, nil, :File), :join,
              s(:send, nil, :__dir__),
              s(:str, "bug-11928.rb"))),
          s(:str, "      -> {require ARGV[0]}.call\n"))),
      s(:def, :test_output_string_encoding,
        s(:args),
        s(:block,
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-Eutf-8:cp932")),
            s(:dstr,
              s(:str, "# coding: cp932\n"),
              s(:str, "$stderr = $stdout; raise \"\\x82\\xa0\""))),
          s(:args,
            s(:arg, :outs),
            s(:arg, :errs),
            s(:arg, :status)),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :outs), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :errs), :size)),
            s(:lvasgn, :err,
              s(:send,
                s(:send,
                  s(:lvar, :outs), :first), :force_encoding,
                s(:str, "utf-8"))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :err), :valid_encoding?),
              s(:str, "must be valid encoding")),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\u3042"),
                s(:regopt)),
              s(:lvar, :err))))),
      s(:def, :test_multibyte_and_newline,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug10727,
            s(:str, "[ruby-core:67473] [Bug #10727]")),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "      class E < StandardError\n"),
              s(:str, "        def initialize\n"),
              s(:str, "          super(\"\\u{306b 307b 3093 3054}\\n\\u{6539 884c}\")\n"),
              s(:str, "        end\n"),
              s(:str, "      end\n"),
              s(:str, "      raise E\n")),
            s(:array),
            s(:regexp,
              s(:str, "\\u{306b 307b 3093 3054} \\(E\\)\\n\\u{6539 884c}"),
              s(:regopt)),
            s(:lvar, :bug10727),
            s(:hash,
              s(:pair,
                s(:sym, :encoding),
                s(:str, "UTF-8")))))),
      s(:def, :test_method_missing_reason_clear,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug10969,
            s(:str, "[ruby-core:68515] [Bug #10969]")),
          s(:lvasgn, :a,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new),
                s(:args),
                s(:def, :method_missing,
                  s(:args,
                    s(:restarg)),
                  s(:zsuper))), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :a), :instance_eval,
              s(:str, "foo"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError),
              s(:lvar, :bug10969)),
            s(:args),
            s(:send,
              s(:lvar, :a), :public_send,
              s(:str, "bar"),
              s(:true))))),
      s(:def, :test_message_of_name_error,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise_with_message,
            s(:const, nil, :NameError),
            s(:regexp,
              s(:str, "\\Aundefined method `foo' for module `#<Module:.*>'$"),
              s(:regopt))),
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Module), :new),
            s(:args),
            s(:send, nil, :module_function,
              s(:sym, :foo))))),
      s(:def, :test_undefined_backtrace,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array),
          s(:dstr,
            s(:begin,
              s(:dstr)),
            s(:str, "\n"),
            s(:begin,
              s(:dstr,
                s(:str, "      class Exception\n"),
                s(:str, "        undef backtrace\n"),
                s(:str, "      end\n"),
                s(:str, "\n"),
                s(:str, "      assert_raise(RuntimeError) {\n"),
                s(:str, "        raise RuntimeError, \"hello\"\n"),
                s(:str, "      }\n")))))),
      s(:def, :test_redefined_backtrace,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array),
          s(:dstr,
            s(:begin,
              s(:dstr)),
            s(:str, "\n"),
            s(:begin,
              s(:dstr,
                s(:str, "      $exc = nil\n"),
                s(:str, "\n"),
                s(:str, "      class Exception\n"),
                s(:str, "        undef backtrace\n"),
                s(:str, "        def backtrace\n"),
                s(:str, "          $exc = self\n"),
                s(:str, "        end\n"),
                s(:str, "      end\n"),
                s(:str, "\n"),
                s(:str, "      e = assert_raise(RuntimeError) {\n"),
                s(:str, "        raise RuntimeError, \"hello\"\n"),
                s(:str, "      }\n"),
                s(:str, "      assert_same(e, $exc)\n")))))),
      s(:def, :test_wrong_backtrace,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array),
          s(:dstr,
            s(:begin,
              s(:dstr)),
            s(:str, "\n"),
            s(:begin,
              s(:dstr,
                s(:str, "      class Exception\n"),
                s(:str, "        undef backtrace\n"),
                s(:str, "        def backtrace(a)\n"),
                s(:str, "        end\n"),
                s(:str, "      end\n"),
                s(:str, "\n"),
                s(:str, "      assert_raise(RuntimeError) {\n"),
                s(:str, "        raise RuntimeError, \"hello\"\n"),
                s(:str, "      }\n")))))))))
