s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestEval),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:ivasgn, :@ivar,
        s(:int, 12)),
      s(:cvasgn, :@@cvar,
        s(:int, 13)),
      s(:gvasgn, :$gvar__eval,
        s(:int, 14)),
      s(:casgn, nil, :Const,
        s(:int, 15)),
      s(:def, :ruby,
        s(:args,
          s(:restarg, :args)),
        s(:ensure,
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :args), :empty?),
              s(:lvasgn, :args,
                s(:array,
                  s(:str, "-e"),
                  s(:str, "$>.write($<.read)"))), nil),
            s(:lvasgn, :ruby,
              s(:send,
                s(:const, nil, :EnvUtil), :rubybin)),
            s(:lvasgn, :f,
              s(:send,
                s(:const, nil, :IO), :popen,
                s(:send,
                  s(:array,
                    s(:lvar, :ruby)), :+,
                  s(:lvar, :args)),
                s(:str, "r+"))),
            s(:yield,
              s(:lvar, :f))),
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :f), :!),
              s(:send,
                s(:lvar, :f), :closed?)), nil,
            s(:send,
              s(:lvar, :f), :close)))),
      s(:def, :test_eval_basic,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send, nil, :eval,
              s(:str, "nil"))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send, nil, :eval,
              s(:str, "true"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send, nil, :eval,
              s(:str, "false"))),
          s(:send, nil, :assert_equal,
            s(:self),
            s(:send, nil, :eval,
              s(:str, "self"))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send, nil, :eval,
              s(:str, "1"))),
          s(:send, nil, :assert_equal,
            s(:sym, :sym),
            s(:send, nil, :eval,
              s(:str, ":sym"))),
          s(:send, nil, :assert_equal,
            s(:int, 11),
            s(:send, nil, :eval,
              s(:str, "11"))),
          s(:ivasgn, :@ivar,
            s(:int, 12)),
          s(:send, nil, :assert_equal,
            s(:int, 12),
            s(:send, nil, :eval,
              s(:str, "@ivar"))),
          s(:send, nil, :assert_equal,
            s(:int, 13),
            s(:send, nil, :eval,
              s(:str, "@@cvar"))),
          s(:send, nil, :assert_equal,
            s(:int, 14),
            s(:send, nil, :eval,
              s(:str, "$gvar__eval"))),
          s(:send, nil, :assert_equal,
            s(:int, 15),
            s(:send, nil, :eval,
              s(:str, "Const"))),
          s(:send, nil, :assert_equal,
            s(:int, 16),
            s(:send, nil, :eval,
              s(:str, "7 + 9"))),
          s(:send, nil, :assert_equal,
            s(:int, 17),
            s(:send, nil, :eval,
              s(:str, "17.to_i"))),
          s(:send, nil, :assert_equal,
            s(:str, "18"),
            s(:send, nil, :eval,
              s(:str, "\"18\""))),
          s(:send, nil, :assert_equal,
            s(:str, "19"),
            s(:send, nil, :eval,
              s(:str, "\"1\#{9}\""))),
          s(:block,
            s(:send,
              s(:int, 1), :times),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:int, 12),
                s(:send, nil, :eval,
                  s(:str, "@ivar"))),
              s(:send, nil, :assert_equal,
                s(:int, 13),
                s(:send, nil, :eval,
                  s(:str, "@@cvar"))),
              s(:send, nil, :assert_equal,
                s(:int, 14),
                s(:send, nil, :eval,
                  s(:str, "$gvar__eval"))),
              s(:send, nil, :assert_equal,
                s(:int, 15),
                s(:send, nil, :eval,
                  s(:str, "Const"))))))),
      s(:def, :test_eval_binding_basic,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send, nil, :eval,
              s(:str, "nil"),
              s(:send, nil, :binding))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send, nil, :eval,
              s(:str, "true"),
              s(:send, nil, :binding))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send, nil, :eval,
              s(:str, "false"),
              s(:send, nil, :binding))),
          s(:send, nil, :assert_equal,
            s(:self),
            s(:send, nil, :eval,
              s(:str, "self"),
              s(:send, nil, :binding))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send, nil, :eval,
              s(:str, "1"),
              s(:send, nil, :binding))),
          s(:send, nil, :assert_equal,
            s(:sym, :sym),
            s(:send, nil, :eval,
              s(:str, ":sym"),
              s(:send, nil, :binding))),
          s(:send, nil, :assert_equal,
            s(:int, 11),
            s(:send, nil, :eval,
              s(:str, "11"),
              s(:send, nil, :binding))),
          s(:ivasgn, :@ivar,
            s(:int, 12)),
          s(:send, nil, :assert_equal,
            s(:int, 12),
            s(:send, nil, :eval,
              s(:str, "@ivar"),
              s(:send, nil, :binding))),
          s(:send, nil, :assert_equal,
            s(:int, 13),
            s(:send, nil, :eval,
              s(:str, "@@cvar"),
              s(:send, nil, :binding))),
          s(:send, nil, :assert_equal,
            s(:int, 14),
            s(:send, nil, :eval,
              s(:str, "$gvar__eval"),
              s(:send, nil, :binding))),
          s(:send, nil, :assert_equal,
            s(:int, 15),
            s(:send, nil, :eval,
              s(:str, "Const"),
              s(:send, nil, :binding))),
          s(:send, nil, :assert_equal,
            s(:int, 16),
            s(:send, nil, :eval,
              s(:str, "7 + 9"),
              s(:send, nil, :binding))),
          s(:send, nil, :assert_equal,
            s(:int, 17),
            s(:send, nil, :eval,
              s(:str, "17.to_i"),
              s(:send, nil, :binding))),
          s(:send, nil, :assert_equal,
            s(:str, "18"),
            s(:send, nil, :eval,
              s(:str, "\"18\""),
              s(:send, nil, :binding))),
          s(:send, nil, :assert_equal,
            s(:str, "19"),
            s(:send, nil, :eval,
              s(:str, "\"1\#{9}\""),
              s(:send, nil, :binding))),
          s(:block,
            s(:send,
              s(:int, 1), :times),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:int, 12),
                s(:send, nil, :eval,
                  s(:str, "@ivar"))),
              s(:send, nil, :assert_equal,
                s(:int, 13),
                s(:send, nil, :eval,
                  s(:str, "@@cvar"))),
              s(:send, nil, :assert_equal,
                s(:int, 14),
                s(:send, nil, :eval,
                  s(:str, "$gvar__eval"))),
              s(:send, nil, :assert_equal,
                s(:int, 15),
                s(:send, nil, :eval,
                  s(:str, "Const"))))))),
      s(:def, :test_module_eval_string_basic,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:self), :class)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :c), :module_eval,
              s(:str, "nil"))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :c), :module_eval,
              s(:str, "true"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :module_eval,
              s(:str, "false"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:send,
              s(:lvar, :c), :module_eval,
              s(:str, "self"))),
          s(:send, nil, :assert_equal,
            s(:sym, :sym),
            s(:send,
              s(:lvar, :c), :module_eval,
              s(:str, ":sym"))),
          s(:send, nil, :assert_equal,
            s(:int, 11),
            s(:send,
              s(:lvar, :c), :module_eval,
              s(:str, "11"))),
          s(:ivasgn, :@ivar,
            s(:int, 12)),
          s(:send, nil, :assert_equal,
            s(:int, 12),
            s(:send,
              s(:lvar, :c), :module_eval,
              s(:str, "@ivar"))),
          s(:send, nil, :assert_equal,
            s(:int, 13),
            s(:send,
              s(:lvar, :c), :module_eval,
              s(:str, "@@cvar"))),
          s(:send, nil, :assert_equal,
            s(:int, 14),
            s(:send,
              s(:lvar, :c), :module_eval,
              s(:str, "$gvar__eval"))),
          s(:send, nil, :assert_equal,
            s(:int, 15),
            s(:send,
              s(:lvar, :c), :module_eval,
              s(:str, "Const"))),
          s(:send, nil, :assert_equal,
            s(:int, 16),
            s(:send,
              s(:lvar, :c), :module_eval,
              s(:str, "7 + 9"))),
          s(:send, nil, :assert_equal,
            s(:int, 17),
            s(:send,
              s(:lvar, :c), :module_eval,
              s(:str, "17.to_i"))),
          s(:send, nil, :assert_equal,
            s(:str, "18"),
            s(:send,
              s(:lvar, :c), :module_eval,
              s(:str, "\"18\""))),
          s(:send, nil, :assert_equal,
            s(:str, "19"),
            s(:send,
              s(:lvar, :c), :module_eval,
              s(:str, "\"1\#{9}\""))),
          s(:ivasgn, :@ivar,
            s(:int, 12)),
          s(:block,
            s(:send,
              s(:int, 1), :times),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:int, 12),
                s(:send,
                  s(:lvar, :c), :module_eval,
                  s(:str, "@ivar"))),
              s(:send, nil, :assert_equal,
                s(:int, 13),
                s(:send,
                  s(:lvar, :c), :module_eval,
                  s(:str, "@@cvar"))),
              s(:send, nil, :assert_equal,
                s(:int, 14),
                s(:send,
                  s(:lvar, :c), :module_eval,
                  s(:str, "$gvar__eval"))),
              s(:send, nil, :assert_equal,
                s(:int, 15),
                s(:send,
                  s(:lvar, :c), :module_eval,
                  s(:str, "Const"))))))),
      s(:def, :test_module_eval_block_basic,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:self), :class)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:block,
              s(:send,
                s(:lvar, :c), :module_eval),
              s(:args),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:block,
              s(:send,
                s(:lvar, :c), :module_eval),
              s(:args),
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:block,
              s(:send,
                s(:lvar, :c), :module_eval),
              s(:args),
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:block,
              s(:send,
                s(:lvar, :c), :module_eval),
              s(:args),
              s(:self))),
          s(:send, nil, :assert_equal,
            s(:sym, :sym),
            s(:block,
              s(:send,
                s(:lvar, :c), :module_eval),
              s(:args),
              s(:sym, :sym))),
          s(:send, nil, :assert_equal,
            s(:int, 11),
            s(:block,
              s(:send,
                s(:lvar, :c), :module_eval),
              s(:args),
              s(:int, 11))),
          s(:ivasgn, :@ivar,
            s(:int, 12)),
          s(:send, nil, :assert_equal,
            s(:int, 12),
            s(:block,
              s(:send,
                s(:lvar, :c), :module_eval),
              s(:args),
              s(:ivar, :@ivar))),
          s(:send, nil, :assert_equal,
            s(:int, 13),
            s(:block,
              s(:send,
                s(:lvar, :c), :module_eval),
              s(:args),
              s(:cvar, :@@cvar))),
          s(:send, nil, :assert_equal,
            s(:int, 14),
            s(:block,
              s(:send,
                s(:lvar, :c), :module_eval),
              s(:args),
              s(:gvar, :$gvar__eval))),
          s(:send, nil, :assert_equal,
            s(:int, 15),
            s(:block,
              s(:send,
                s(:lvar, :c), :module_eval),
              s(:args),
              s(:const, nil, :Const))),
          s(:send, nil, :assert_equal,
            s(:int, 16),
            s(:block,
              s(:send,
                s(:lvar, :c), :module_eval),
              s(:args),
              s(:send,
                s(:int, 7), :+,
                s(:int, 9)))),
          s(:send, nil, :assert_equal,
            s(:int, 17),
            s(:block,
              s(:send,
                s(:lvar, :c), :module_eval),
              s(:args),
              s(:send,
                s(:str, "17"), :to_i))),
          s(:send, nil, :assert_equal,
            s(:str, "18"),
            s(:block,
              s(:send,
                s(:lvar, :c), :module_eval),
              s(:args),
              s(:str, "18"))),
          s(:send, nil, :assert_equal,
            s(:str, "19"),
            s(:block,
              s(:send,
                s(:lvar, :c), :module_eval),
              s(:args),
              s(:dstr,
                s(:str, "1"),
                s(:begin,
                  s(:int, 9))))),
          s(:ivasgn, :@ivar,
            s(:int, 12)),
          s(:block,
            s(:send,
              s(:int, 1), :times),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:int, 12),
                s(:block,
                  s(:send,
                    s(:lvar, :c), :module_eval),
                  s(:args),
                  s(:ivar, :@ivar))),
              s(:send, nil, :assert_equal,
                s(:int, 13),
                s(:block,
                  s(:send,
                    s(:lvar, :c), :module_eval),
                  s(:args),
                  s(:cvar, :@@cvar))),
              s(:send, nil, :assert_equal,
                s(:int, 14),
                s(:block,
                  s(:send,
                    s(:lvar, :c), :module_eval),
                  s(:args),
                  s(:gvar, :$gvar__eval))),
              s(:send, nil, :assert_equal,
                s(:int, 15),
                s(:block,
                  s(:send,
                    s(:lvar, :c), :module_eval),
                  s(:args),
                  s(:const, nil, :Const))))))),
      s(:def, :test_module_eval_block_symbol,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "Math"),
          s(:send,
            s(:const, nil, :Math), :module_eval,
            s(:block_pass,
              s(:sym, :to_s))))),
      s(:def, :forall_TYPE,
        s(:args),
        s(:begin,
          s(:lvasgn, :objects,
            s(:array,
              s(:send,
                s(:const, nil, :Object), :new),
              s(:array),
              s(:nil),
              s(:true),
              s(:false))),
          s(:block,
            s(:send,
              s(:lvar, :objects), :each),
            s(:args,
              s(:arg, :obj)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :obj), :frozen?), nil,
                s(:send,
                  s(:lvar, :obj), :instance_variable_set,
                  s(:sym, :@ivar),
                  s(:int, 12))),
              s(:yield,
                s(:lvar, :obj)))))),
      s(:def, :test_instance_eval_string_basic,
        s(:args),
        s(:block,
          s(:send, nil, :forall_TYPE),
          s(:args,
            s(:arg, :o)),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :o), :instance_eval,
                s(:str, "nil"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:lvar, :o), :instance_eval,
                s(:str, "true"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :o), :instance_eval,
                s(:str, "false"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :o),
              s(:send,
                s(:lvar, :o), :instance_eval,
                s(:str, "self"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :o), :instance_eval,
                s(:str, "1"))),
            s(:send, nil, :assert_equal,
              s(:sym, :sym),
              s(:send,
                s(:lvar, :o), :instance_eval,
                s(:str, ":sym"))),
            s(:send, nil, :assert_equal,
              s(:int, 11),
              s(:send,
                s(:lvar, :o), :instance_eval,
                s(:str, "11"))),
            s(:if,
              s(:send,
                s(:lvar, :o), :frozen?), nil,
              s(:send, nil, :assert_equal,
                s(:int, 12),
                s(:send,
                  s(:lvar, :o), :instance_eval,
                  s(:str, "@ivar")))),
            s(:send, nil, :assert_equal,
              s(:int, 13),
              s(:send,
                s(:lvar, :o), :instance_eval,
                s(:str, "@@cvar"))),
            s(:send, nil, :assert_equal,
              s(:int, 14),
              s(:send,
                s(:lvar, :o), :instance_eval,
                s(:str, "$gvar__eval"))),
            s(:send, nil, :assert_equal,
              s(:int, 15),
              s(:send,
                s(:lvar, :o), :instance_eval,
                s(:str, "Const"))),
            s(:send, nil, :assert_equal,
              s(:int, 16),
              s(:send,
                s(:lvar, :o), :instance_eval,
                s(:str, "7 + 9"))),
            s(:send, nil, :assert_equal,
              s(:int, 17),
              s(:send,
                s(:lvar, :o), :instance_eval,
                s(:str, "17.to_i"))),
            s(:send, nil, :assert_equal,
              s(:str, "18"),
              s(:send,
                s(:lvar, :o), :instance_eval,
                s(:str, "\"18\""))),
            s(:send, nil, :assert_equal,
              s(:str, "19"),
              s(:send,
                s(:lvar, :o), :instance_eval,
                s(:str, "\"1\#{9}\""))),
            s(:block,
              s(:send,
                s(:int, 1), :times),
              s(:args),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :o), :frozen?), nil,
                  s(:send, nil, :assert_equal,
                    s(:int, 12),
                    s(:send,
                      s(:lvar, :o), :instance_eval,
                      s(:str, "@ivar")))),
                s(:send, nil, :assert_equal,
                  s(:int, 13),
                  s(:send,
                    s(:lvar, :o), :instance_eval,
                    s(:str, "@@cvar"))),
                s(:send, nil, :assert_equal,
                  s(:int, 14),
                  s(:send,
                    s(:lvar, :o), :instance_eval,
                    s(:str, "$gvar__eval"))),
                s(:send, nil, :assert_equal,
                  s(:int, 15),
                  s(:send,
                    s(:lvar, :o), :instance_eval,
                    s(:str, "Const")))))))),
      s(:def, :test_instance_eval_block_basic,
        s(:args),
        s(:block,
          s(:send, nil, :forall_TYPE),
          s(:args,
            s(:arg, :o)),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:block,
                s(:send,
                  s(:lvar, :o), :instance_eval),
                s(:args),
                s(:nil))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:block,
                s(:send,
                  s(:lvar, :o), :instance_eval),
                s(:args),
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:block,
                s(:send,
                  s(:lvar, :o), :instance_eval),
                s(:args),
                s(:false))),
            s(:send, nil, :assert_equal,
              s(:lvar, :o),
              s(:block,
                s(:send,
                  s(:lvar, :o), :instance_eval),
                s(:args),
                s(:self))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:block,
                s(:send,
                  s(:lvar, :o), :instance_eval),
                s(:args),
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:sym, :sym),
              s(:block,
                s(:send,
                  s(:lvar, :o), :instance_eval),
                s(:args),
                s(:sym, :sym))),
            s(:send, nil, :assert_equal,
              s(:int, 11),
              s(:block,
                s(:send,
                  s(:lvar, :o), :instance_eval),
                s(:args),
                s(:int, 11))),
            s(:if,
              s(:send,
                s(:lvar, :o), :frozen?), nil,
              s(:send, nil, :assert_equal,
                s(:int, 12),
                s(:block,
                  s(:send,
                    s(:lvar, :o), :instance_eval),
                  s(:args),
                  s(:ivar, :@ivar)))),
            s(:send, nil, :assert_equal,
              s(:int, 13),
              s(:block,
                s(:send,
                  s(:lvar, :o), :instance_eval),
                s(:args),
                s(:cvar, :@@cvar))),
            s(:send, nil, :assert_equal,
              s(:int, 14),
              s(:block,
                s(:send,
                  s(:lvar, :o), :instance_eval),
                s(:args),
                s(:gvar, :$gvar__eval))),
            s(:send, nil, :assert_equal,
              s(:int, 15),
              s(:block,
                s(:send,
                  s(:lvar, :o), :instance_eval),
                s(:args),
                s(:const, nil, :Const))),
            s(:send, nil, :assert_equal,
              s(:int, 16),
              s(:block,
                s(:send,
                  s(:lvar, :o), :instance_eval),
                s(:args),
                s(:send,
                  s(:int, 7), :+,
                  s(:int, 9)))),
            s(:send, nil, :assert_equal,
              s(:int, 17),
              s(:block,
                s(:send,
                  s(:lvar, :o), :instance_eval),
                s(:args),
                s(:send,
                  s(:int, 17), :to_i))),
            s(:send, nil, :assert_equal,
              s(:str, "18"),
              s(:block,
                s(:send,
                  s(:lvar, :o), :instance_eval),
                s(:args),
                s(:str, "18"))),
            s(:send, nil, :assert_equal,
              s(:str, "19"),
              s(:block,
                s(:send,
                  s(:lvar, :o), :instance_eval),
                s(:args),
                s(:dstr,
                  s(:str, "1"),
                  s(:begin,
                    s(:int, 9))))),
            s(:block,
              s(:send,
                s(:int, 1), :times),
              s(:args),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :o), :frozen?), nil,
                  s(:send, nil, :assert_equal,
                    s(:int, 12),
                    s(:block,
                      s(:send,
                        s(:lvar, :o), :instance_eval),
                      s(:args),
                      s(:ivar, :@ivar)))),
                s(:send, nil, :assert_equal,
                  s(:int, 13),
                  s(:block,
                    s(:send,
                      s(:lvar, :o), :instance_eval),
                    s(:args),
                    s(:cvar, :@@cvar))),
                s(:send, nil, :assert_equal,
                  s(:int, 14),
                  s(:block,
                    s(:send,
                      s(:lvar, :o), :instance_eval),
                    s(:args),
                    s(:gvar, :$gvar__eval))),
                s(:send, nil, :assert_equal,
                  s(:int, 15),
                  s(:block,
                    s(:send,
                      s(:lvar, :o), :instance_eval),
                    s(:args),
                    s(:const, nil, :Const)))))))),
      s(:def, :test_instance_eval_block_self,
        s(:args),
        s(:begin,
          s(:lvasgn, :pr,
            s(:block,
              s(:send, nil, :proc),
              s(:args),
              s(:self))),
          s(:send, nil, :assert_equal,
            s(:self),
            s(:send,
              s(:lvar, :pr), :call)),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send, nil, :assert_equal,
            s(:lvar, :o),
            s(:send,
              s(:lvar, :o), :instance_eval,
              s(:block_pass,
                s(:lvar, :pr)))),
          s(:send, nil, :assert_equal,
            s(:self),
            s(:send,
              s(:lvar, :pr), :call)))),
      s(:def, :test_instance_eval_block_symbol,
        s(:args),
        s(:block,
          s(:send, nil, :forall_TYPE),
          s(:args,
            s(:arg, :o)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :o), :to_s),
            s(:send,
              s(:lvar, :o), :instance_eval,
              s(:block_pass,
                s(:sym, :to_s)))))),
      s(:def, :test_instance_eval_cvar,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:send,
                s(:const, nil, :Object), :new),
              s(:array),
              s(:int, 7),
              s(:sym, :sym),
              s(:true),
              s(:false),
              s(:nil)), :each),
          s(:args,
            s(:arg, :obj)),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:int, 13),
              s(:send,
                s(:lvar, :obj), :instance_eval,
                s(:str, "@@cvar"))),
            s(:send, nil, :assert_equal,
              s(:int, 13),
              s(:block,
                s(:send,
                  s(:lvar, :obj), :instance_eval),
                s(:args),
                s(:cvar, :@@cvar)))))),
      s(:def, :test_instance_eval_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug2788,
            s(:str, "[ruby-core:28324]")),
          s(:block,
            s(:send,
              s(:array,
                s(:send,
                  s(:const, nil, :Object), :new),
                s(:array),
                s(:nil),
                s(:true),
                s(:false)), :each),
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:block,
                s(:send, nil, :assert_nothing_raised,
                  s(:const, nil, :TypeError),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :bug2788)),
                    s(:str, " ("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :o), :inspect)),
                    s(:str, ")"))),
                s(:args),
                s(:block,
                  s(:send,
                    s(:lvar, :o), :instance_eval),
                  s(:args),
                  s(:def, :defd_using_instance_eval,
                    s(:args),
                    s(:sym, :ok)))),
              s(:send, nil, :assert_equal,
                s(:sym, :ok),
                s(:send,
                  s(:lvar, :o), :defd_using_instance_eval)),
              s(:sclass,
                s(:lvar, :o),
                s(:send, nil, :remove_method,
                  s(:sym, :defd_using_instance_eval))))))),
      s(:def, :test_instance_eval_on_argf_singleton_class,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8188,
            s(:str, "[ruby-core:53839] [Bug #8188]")),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, ""),
              s(:lvar, :bug8188)),
            s(:args),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :ARGF), :singleton_class), :instance_eval),
              s(:args), nil)))),
      s(:class,
        s(:const, nil, :Foo), nil,
        s(:casgn, nil, :Bar,
          s(:int, 2))),
      s(:def, :test_instance_eval_const,
        s(:args),
        s(:begin,
          s(:lvasgn, :bar,
            s(:nil)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :NameError)),
            s(:args),
            s(:lvasgn, :bar,
              s(:send,
                s(:send,
                  s(:const, nil, :Foo), :new), :instance_eval,
                s(:str, "Bar")))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:lvar, :bar)))),
      s(:def, :make_test_binding,
        s(:args),
        s(:begin,
          s(:lvasgn, :local1,
            s(:str, "local1")),
          s(:send,
            s(:block,
              s(:send, nil, :lambda),
              s(:args),
              s(:begin,
                s(:lvasgn, :local2,
                  s(:str, "local2")),
                s(:return,
                  s(:send, nil, :binding)))), :call))),
      s(:def, :test_eval_orig,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_nil,
            s(:send, nil, :eval,
              s(:str, ""))),
          s(:lvasgn, :bad,
            s(:false)),
          s(:send, nil, :eval,
            s(:str, "while false; bad = true; print \"foo\\n\" end")),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :bad), :!)),
          s(:send, nil, :assert,
            s(:send, nil, :eval,
              s(:str, "TRUE"))),
          s(:send, nil, :assert,
            s(:send, nil, :eval,
              s(:str, "true"))),
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :eval,
                s(:str, "NIL")), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :eval,
                s(:str, "nil")), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :eval,
                s(:str, "FALSE")), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :eval,
                s(:str, "false")), :!)),
          s(:gvasgn, :$foo,
            s(:str, "assert(true)")),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :eval,
                s(:gvar, :$foo)),
              s(:resbody, nil, nil,
                s(:send, nil, :assert,
                  s(:false))), nil)),
          s(:send, nil, :assert_equal,
            s(:str, "assert(true)"),
            s(:send, nil, :eval,
              s(:str, "$foo"))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send, nil, :eval,
              s(:str, "true"))),
          s(:lvasgn, :i,
            s(:int, 5)),
          s(:send, nil, :assert,
            s(:send, nil, :eval,
              s(:str, "i == 5"))),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send, nil, :eval,
              s(:str, "i"))),
          s(:send, nil, :assert,
            s(:send, nil, :eval,
              s(:str, "defined? i"))),
          s(:lvasgn, :x,
            s(:send, nil, :make_test_binding)),
          s(:send, nil, :assert_equal,
            s(:str, "local1"),
            s(:send, nil, :eval,
              s(:str, "local1"),
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:str, "local2"),
            s(:send, nil, :eval,
              s(:str, "local2"),
              s(:lvar, :x))),
          s(:lvasgn, :bad,
            s(:true)),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :p,
                s(:send, nil, :eval,
                  s(:str, "local1"))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :NameError)), nil,
                s(:lvasgn, :bad,
                  s(:false))), nil)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :bad), :!)),
          s(:lvasgn, :x,
            s(:send,
              s(:send,
                s(:self), :class), :class_eval,
              s(:dstr,
                s(:str, "\n"),
                s(:str, "      module EvTest\n"),
                s(:str, "\tEVTEST1 = 25\n"),
                s(:str, "\tevtest2 = 125\n"),
                s(:str, "\tbinding\n"),
                s(:str, "      end\n"),
                s(:str, "    ")))),
          s(:send, nil, :assert_equal,
            s(:int, 25),
            s(:send, nil, :eval,
              s(:str, "EVTEST1"),
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:int, 125),
            s(:send, nil, :eval,
              s(:str, "evtest2"),
              s(:lvar, :x))),
          s(:lvasgn, :bad,
            s(:true)),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :eval,
                s(:str, "EVTEST1")),
              s(:resbody,
                s(:array,
                  s(:const, nil, :NameError)), nil,
                s(:lvasgn, :bad,
                  s(:false))), nil)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :bad), :!)),
          s(:if,
            s(:false),
            s(:begin,
              s(:lvasgn, :x,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args), nil)),
              s(:send, nil, :eval,
                s(:str, "i4 = 1"),
                s(:lvar, :x)),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send, nil, :eval,
                  s(:str, "i4"),
                  s(:lvar, :x))),
              s(:lvasgn, :x,
                s(:send,
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args),
                    s(:block,
                      s(:send, nil, :proc),
                      s(:args), nil)), :call)),
              s(:send, nil, :eval,
                s(:str, "i4 = 22"),
                s(:lvar, :x)),
              s(:send, nil, :assert_equal,
                s(:int, 22),
                s(:send, nil, :eval,
                  s(:str, "i4"),
                  s(:lvar, :x))),
              s(:lvasgn, :t,
                s(:array)),
              s(:lvasgn, :x,
                s(:send,
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args),
                    s(:block,
                      s(:send, nil, :proc),
                      s(:args), nil)), :call)),
              s(:send, nil, :eval,
                s(:str, "(0..9).each{|i5| t[i5] = proc{i5*2}}"),
                s(:lvar, :x)),
              s(:send, nil, :assert_equal,
                s(:int, 8),
                s(:send,
                  s(:send,
                    s(:lvar, :t), :[],
                    s(:int, 4)), :call))), nil),
          s(:lvasgn, :x,
            s(:send, nil, :binding)),
          s(:send, nil, :eval,
            s(:str, "i = 1"),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send, nil, :eval,
              s(:str, "i"),
              s(:lvar, :x))),
          s(:lvasgn, :x,
            s(:send,
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:send, nil, :binding)), :call)),
          s(:send, nil, :eval,
            s(:str, "i = 22"),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 22),
            s(:send, nil, :eval,
              s(:str, "i"),
              s(:lvar, :x))),
          s(:lvasgn, :t,
            s(:array)),
          s(:lvasgn, :x,
            s(:send,
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:send, nil, :binding)), :call)),
          s(:send, nil, :eval,
            s(:str, "(0..9).each{|i5| t[i5] = proc{i5*2}}"),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 8),
            s(:send,
              s(:send,
                s(:lvar, :t), :[],
                s(:int, 4)), :call)),
          s(:lvasgn, :x,
            s(:send,
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:send, nil, :binding)), :call)),
          s(:send, nil, :eval,
            s(:str, "for i6 in 1..1; j6=i6; end"),
            s(:lvar, :x)),
          s(:send, nil, :assert,
            s(:send, nil, :eval,
              s(:str, "defined? i6"),
              s(:lvar, :x))),
          s(:send, nil, :assert,
            s(:send, nil, :eval,
              s(:str, "defined? j6"),
              s(:lvar, :x))),
          s(:send,
            s(:block,
              s(:send, nil, :proc),
              s(:args),
              s(:begin,
                s(:lvasgn, :p,
                  s(:send, nil, :binding)),
                s(:send, nil, :eval,
                  s(:str, "foo11 = 1"),
                  s(:lvar, :p)),
                s(:lvasgn, :foo22,
                  s(:int, 5)),
                s(:send,
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args),
                    s(:lvasgn, :foo11,
                      s(:int, 22))), :call),
                s(:send,
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args),
                    s(:lvasgn, :foo22,
                      s(:int, 55))), :call),
                s(:send, nil, :assert_equal,
                  s(:send, nil, :eval,
                    s(:str, "foo22")),
                  s(:send, nil, :eval,
                    s(:str, "foo22"),
                    s(:lvar, :p))),
                s(:send, nil, :assert_equal,
                  s(:int, 55),
                  s(:send, nil, :eval,
                    s(:str, "foo22"))))), :call),
          s(:if,
            s(:false),
            s(:begin,
              s(:lvasgn, :p1,
                s(:send,
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :i7,
                        s(:int, 0)),
                      s(:block,
                        s(:send, nil, :proc),
                        s(:args),
                        s(:lvar, :i7)))), :call)),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:lvar, :p1), :call)),
              s(:send, nil, :eval,
                s(:str, "i7=5"),
                s(:lvar, :p1)),
              s(:send, nil, :assert_equal,
                s(:int, 5),
                s(:send,
                  s(:lvar, :p1), :call)),
              s(:send, nil, :assert,
                s(:send,
                  s(:defined?,
                    s(:send, nil, :i7)), :!))), nil),
          s(:if,
            s(:false),
            s(:begin,
              s(:lvasgn, :p1,
                s(:send,
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :i7,
                        s(:int, 0)),
                      s(:block,
                        s(:send, nil, :proc),
                        s(:args),
                        s(:lvar, :i7)))), :call)),
              s(:lvasgn, :i7,
                s(:nil)),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:lvar, :p1), :call)),
              s(:send, nil, :eval,
                s(:str, "i7=1"),
                s(:lvar, :p1)),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:lvar, :p1), :call)),
              s(:send, nil, :eval,
                s(:str, "i7=5"),
                s(:lvar, :p1)),
              s(:send, nil, :assert_equal,
                s(:int, 5),
                s(:send,
                  s(:lvar, :p1), :call)),
              s(:send, nil, :assert_nil,
                s(:lvar, :i7))), nil))),
      s(:def, :test_nil_instance_eval_cvar,
        s(:args),
        s(:begin,
          s(:defs,
            s(:nil), :test_binding,
            s(:args),
            s(:send, nil, :binding)),
          s(:lvasgn, :bb,
            s(:send, nil, :eval,
              s(:str, "nil.instance_eval \"binding\""),
              s(:send,
                s(:nil), :test_binding))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError),
              s(:str, "[ruby-dev:24103]")),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "@@a"),
              s(:lvar, :bb))),
          s(:sclass,
            s(:nil),
            s(:send, nil, :remove_method,
              s(:sym, :test_binding))))),
      s(:def, :test_fixnum_instance_eval_cvar,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :NameError),
            s(:str, "[ruby-dev:24213]")),
          s(:args),
          s(:send,
            s(:int, 1), :instance_eval,
            s(:str, "@@a")))),
      s(:def, :test_cvar_scope_with_instance_eval,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :Fixnum), :class_eval,
            s(:str, "@@test_cvar_scope_with_instance_eval = 1")),
          s(:cvasgn, :@@test_cvar_scope_with_instance_eval,
            s(:int, 4)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:int, 1), :instance_eval,
              s(:str, "@@test_cvar_scope_with_instance_eval")),
            s(:str, "[ruby-dev:24223]")),
          s(:send,
            s(:const, nil, :Fixnum), :__send__,
            s(:sym, :remove_class_variable),
            s(:sym, :@@test_cvar_scope_with_instance_eval)))),
      s(:def, :test_eval_and_define_method,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised,
            s(:str, "[ruby-dev:24228]")),
          s(:args),
          s(:begin,
            s(:def, :temporally_method_for_test_eval_and_define_method,
              s(:args,
                s(:blockarg, :block)),
              s(:block,
                s(:send, nil, :lambda),
                s(:args),
                s(:send,
                  s(:sclass,
                    s(:send,
                      s(:const, nil, :Object), :new),
                    s(:self)), :send,
                  s(:sym, :define_method),
                  s(:sym, :zzz),
                  s(:block_pass,
                    s(:lvar, :block))))),
            s(:lvasgn, :v,
              s(:send, nil, :eval,
                s(:str, "temporally_method_for_test_eval_and_define_method {}"))),
            s(:send,
              s(:hash), :[]=,
              s(:int, 0),
              s(:hash)),
            s(:send,
              s(:lvar, :v), :call)))),
      s(:def, :test_define_method_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :cc,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:block,
                s(:send, nil, :define_method,
                  s(:sym, :foo)),
                s(:args,
                  s(:blockarg, :block)),
                s(:if,
                  s(:lvar, :block),
                  s(:send,
                    s(:lvar, :block), :call), nil)))),
          s(:lvasgn, :c,
            s(:send,
              s(:lvar, :cc), :new)),
          s(:lvasgn, :x,
            s(:str, "ng")),
          s(:block,
            s(:send,
              s(:lvar, :c), :foo),
            s(:args),
            s(:lvasgn, :x,
              s(:str, "ok"))),
          s(:send, nil, :assert_equal,
            s(:str, "ok"),
            s(:lvar, :x)))),
      s(:def, :test_define_method_toplevel,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature6609,
            s(:str, "[ruby-core:45715]")),
          s(:lvasgn, :main,
            s(:send, nil, :eval,
              s(:str, "self"),
              s(:const, nil, :TOPLEVEL_BINDING))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :NoMethodError),
              s(:lvar, :feature6609)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :main), :instance_eval),
              s(:args),
              s(:block,
                s(:send, nil, :define_method,
                  s(:str, "feature6609_block")),
                s(:args),
                s(:lvar, :feature6609)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :feature6609),
            s(:send, nil, :feature6609_block)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :NoMethodError),
              s(:lvar, :feature6609)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :main), :instance_eval),
              s(:args),
              s(:send, nil, :define_method,
                s(:str, "feature6609_method"),
                s(:send,
                  s(:const, nil, :Object), :instance_method,
                  s(:sym, :feature6609_block))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :feature6609),
            s(:send, nil, :feature6609_method)))),
      s(:def, :test_eval_using_integer_as_binding,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send, nil, :eval,
            s(:str, ""),
            s(:int, 1)))),
      s(:def, :test_eval_raise,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :RuntimeError)),
          s(:args),
          s(:send, nil, :eval,
            s(:str, "raise ''")))),
      s(:def, :test_eval_with_toplevel_binding,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:str, "x = 0; eval('p x', TOPLEVEL_BINDING)")),
          s(:args,
            s(:arg, :f)),
          s(:begin,
            s(:send,
              s(:lvar, :f), :close_write),
            s(:send, nil, :assert_equal,
              s(:str, "0"),
              s(:send,
                s(:send,
                  s(:lvar, :f), :read), :chomp))))),
      s(:def, :test_eval_ascii_incompatible,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :eval,
              s(:send,
                s(:str, "__ENCODING__"), :encode,
                s(:str, "utf-16be")))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :eval,
              s(:send,
                s(:str, "__ENCODING__"), :encode,
                s(:str, "utf-16le")))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :eval,
              s(:send,
                s(:str, "__ENCODING__"), :encode,
                s(:str, "utf-32be")))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :eval,
              s(:send,
                s(:str, "__ENCODING__"), :encode,
                s(:str, "utf-32le")))))),
      s(:def, :test_instance_eval_method_proc,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug3860,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:def, :initialize,
                  s(:args,
                    s(:arg, :a)),
                  s(:ivasgn, :@a,
                    s(:lvar, :a))),
                s(:def, :get,
                  s(:args,
                    s(:restarg, :args)),
                  s(:ivar, :@a))))),
          s(:lvasgn, :foo,
            s(:send,
              s(:lvar, :bug3860), :new,
              s(:int, 1))),
          s(:lvasgn, :foo_pr,
            s(:send,
              s(:send,
                s(:lvar, :foo), :method,
                s(:sym, :get)), :to_proc)),
          s(:lvasgn, :result,
            s(:send,
              s(:lvar, :foo), :instance_eval,
              s(:block_pass,
                s(:lvar, :foo_pr)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:lvar, :result),
            s(:str, "Bug #3786, Bug #3860, [ruby-core:32501]")))),
      s(:def, :test_file_encoding,
        s(:args),
        s(:begin,
          s(:lvasgn, :fname,
            s(:send,
              s(:str, "あ"), :encode,
              s(:str, "euc-jp"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :fname),
            s(:send, nil, :eval,
              s(:str, "__FILE__"),
              s(:nil),
              s(:lvar, :fname),
              s(:int, 1))))),
      s(:def, :test_eval_location_fstring,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send,
            s(:lvar, :o), :instance_eval,
            s(:str, "def foo() end"),
            s(:str, "generated code")),
          s(:send,
            s(:lvar, :o), :instance_eval,
            s(:str, "def bar() end"),
            s(:str, "generated code")),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :a),
              s(:lvasgn, :b)),
            s(:array,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :o), :method,
                    s(:sym, :foo)), :source_location), :[],
                s(:int, 0)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :o), :method,
                    s(:sym, :bar)), :source_location), :[],
                s(:int, 0)))),
          s(:send, nil, :assert_same,
            s(:lvar, :a),
            s(:lvar, :b)))),
      s(:def, :test_gced_binding_block,
        s(:args),
        s(:send, nil, :assert_normal_exit,
          s(:dstr,
            s(:str, "\n"),
            s(:str, "      def m\n"),
            s(:str, "        binding\n"),
            s(:str, "      end\n"),
            s(:str, "      GC.stress = true\n"),
            s(:str, "      b = nil\n"),
            s(:str, "      tap do\n"),
            s(:str, "        b = m {}\n"),
            s(:str, "      end\n"),
            s(:str, "      0.times.to_a\n"),
            s(:str, "      b.eval('yield')\n"),
            s(:str, "    ")),
          s(:str, "[Bug #10368]"))))))
