s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestClass),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:class,
        s(:const, nil, :ClassOne), nil,
        s(:begin,
          s(:send, nil, :attr,
            s(:sym, :num_args)),
          s(:cvasgn, :@@subs,
            s(:array)),
          s(:def, :initialize,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:ivasgn, :@num_args,
                s(:send,
                  s(:lvar, :args), :size)),
              s(:ivasgn, :@args,
                s(:lvar, :args)))),
          s(:def, :[],
            s(:args,
              s(:arg, :n)),
            s(:send,
              s(:ivar, :@args), :[],
              s(:lvar, :n))),
          s(:defs,
            s(:const, nil, :ClassOne), :inherited,
            s(:args,
              s(:arg, :klass)),
            s(:send,
              s(:cvar, :@@subs), :push,
              s(:lvar, :klass))),
          s(:def, :subs,
            s(:args),
            s(:cvar, :@@subs)))),
      s(:class,
        s(:const, nil, :ClassTwo),
        s(:const, nil, :ClassOne), nil),
      s(:class,
        s(:const, nil, :ClassThree),
        s(:const, nil, :ClassOne), nil),
      s(:class,
        s(:const, nil, :ClassFour),
        s(:const, nil, :ClassThree), nil),
      s(:def, :test_s_inherited,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:const, nil, :ClassTwo),
            s(:const, nil, :ClassThree),
            s(:const, nil, :ClassFour)),
          s(:send,
            s(:send,
              s(:const, nil, :ClassOne), :new), :subs))),
      s(:def, :test_s_new,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:send, nil, :assert_same,
            s(:const, nil, :Class),
            s(:send,
              s(:lvar, :c), :class)),
          s(:send, nil, :assert_same,
            s(:const, nil, :Object),
            s(:send,
              s(:lvar, :c), :superclass)),
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const, nil, :Fixnum))),
          s(:send, nil, :assert_same,
            s(:const, nil, :Class),
            s(:send,
              s(:lvar, :c), :class)),
          s(:send, nil, :assert_same,
            s(:const, nil, :Fixnum),
            s(:send,
              s(:lvar, :c), :superclass)))),
      s(:def, :test_00_new_basic,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :ClassOne), :new)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :ClassOne),
            s(:send,
              s(:lvar, :a), :class)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :a), :num_args)),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :ClassOne), :new,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :a), :num_args)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :a), :[],
              s(:int, 0))))),
      s(:def, :test_01_new_inherited,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :ClassTwo), :new)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :ClassTwo),
            s(:send,
              s(:lvar, :a), :class)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :a), :num_args)),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :ClassTwo), :new,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :a), :num_args)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :a), :[],
              s(:int, 0))))),
      s(:def, :test_superclass,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:const, nil, :ClassOne),
            s(:send,
              s(:const, nil, :ClassTwo), :superclass)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :Object),
            s(:send,
              s(:send,
                s(:const, nil, :ClassTwo), :superclass), :superclass)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :BasicObject),
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :ClassTwo), :superclass), :superclass), :superclass)))),
      s(:def, :test_class_cmp,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Class), :new), :<=,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Class), :new), :>=,
              s(:int, 1))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:send,
                s(:const, nil, :Class), :new), :<=>,
              s(:int, 1))))),
      s(:def, :test_class_initialize,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Class), :new), :instance_eval),
            s(:args),
            s(:send, nil, :initialize)))),
      s(:def, :test_instanciate_singleton_class,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:sclass,
              s(:send,
                s(:const, nil, :Object), :new),
              s(:self))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :new)))),
      s(:def, :test_superclass_of_basicobject,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:nil),
          s(:send,
            s(:const, nil, :BasicObject), :superclass))),
      s(:def, :test_module_function,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Module), :instance_method,
                  s(:sym, :module_function)), :bind,
                s(:lvar, :c)), :call,
              s(:sym, :foo))))),
      s(:def, :test_extend_object,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Module), :instance_method,
                  s(:sym, :extend_object)), :bind,
                s(:lvar, :c)), :call,
              s(:send,
                s(:const, nil, :Object), :new))))),
      s(:def, :test_append_features,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Module), :instance_method,
                  s(:sym, :append_features)), :bind,
                s(:lvar, :c)), :call,
              s(:send,
                s(:const, nil, :Module), :new))))),
      s(:def, :test_prepend_features,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Module), :instance_method,
                  s(:sym, :prepend_features)), :bind,
                s(:lvar, :c)), :call,
              s(:send,
                s(:const, nil, :Module), :new))))),
      s(:def, :test_module_specific_methods,
        s(:args),
        s(:send, nil, :assert_empty,
          s(:send,
            s(:send,
              s(:const, nil, :Class), :private_instance_methods,
              s(:true)), :&,
            s(:array,
              s(:sym, :module_function),
              s(:sym, :extend_object),
              s(:sym, :append_features),
              s(:sym, :prepend_features))))),
      s(:def, :test_method_redefinition,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature2155,
            s(:str, "[ruby-dev:39400]")),
          s(:lvasgn, :line,
            s(:send,
              s(:int, 137), :+,
              s(:int, 4))),
          s(:lvasgn, :stderr,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :verbose_warning),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new),
                s(:args),
                s(:begin,
                  s(:def, :foo,
                    s(:args), nil),
                  s(:def, :foo,
                    s(:args), nil))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, ":"),
              s(:begin,
                s(:lvar, :line)),
              s(:str, ": warning: method redefined; discarding old foo"),
              s(:regopt)),
            s(:lvar, :stderr)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, ":"),
              s(:begin,
                s(:send,
                  s(:lvar, :line), :-,
                  s(:int, 1))),
              s(:str, ": warning: previous definition of foo"),
              s(:regopt)),
            s(:lvar, :stderr),
            s(:lvar, :feature2155)),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:def, :foo,
                  s(:args), nil),
                s(:alias,
                  s(:sym, :bar),
                  s(:sym, :foo)),
                s(:def, :foo,
                  s(:args), nil)))),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:def, :foo,
                  s(:args), nil),
                s(:alias,
                  s(:sym, :bar),
                  s(:sym, :foo)),
                s(:alias,
                  s(:sym, :bar),
                  s(:sym, :foo))))),
          s(:lvasgn, :line,
            s(:send,
              s(:int, 163), :+,
              s(:int, 4))),
          s(:lvasgn, :stderr,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :verbose_warning),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new),
                s(:args),
                s(:begin,
                  s(:block,
                    s(:send, nil, :define_method,
                      s(:sym, :foo)),
                    s(:args), nil),
                  s(:def, :foo,
                    s(:args), nil))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, ":"),
              s(:begin,
                s(:lvar, :line)),
              s(:str, ": warning: method redefined; discarding old foo"),
              s(:regopt)),
            s(:lvar, :stderr)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, ":"),
              s(:begin,
                s(:send,
                  s(:lvar, :line), :-,
                  s(:int, 1))),
              s(:str, ": warning: previous definition of foo"),
              s(:regopt)),
            s(:lvar, :stderr),
            s(:lvar, :feature2155)),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:block,
                  s(:send, nil, :define_method,
                    s(:sym, :foo)),
                  s(:args), nil),
                s(:alias,
                  s(:sym, :bar),
                  s(:sym, :foo)),
                s(:alias,
                  s(:sym, :bar),
                  s(:sym, :foo))))),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:def, :foo,
                  s(:args), nil),
                s(:undef,
                  s(:sym, :foo))))))),
      s(:def, :test_check_inheritable,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :Class), :new,
              s(:send,
                s(:const, nil, :Object), :new))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :c,
            s(:sclass,
              s(:lvar, :o),
              s(:self))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :c))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const, nil, :Class))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "class Foo < Class; end"))),
          s(:lvasgn, :m,
            s(:str, "M🗿")),
          s(:lvasgn, :o,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:break,
                s(:send, nil, :eval,
                  s(:dstr,
                    s(:str, "class "),
                    s(:begin,
                      s(:lvar, :m)),
                    s(:str, "; self; end.new")))))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:begin,
                  s(:lvar, :m)),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :o))))),
      s(:def, :test_initialize_copy,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :c), :instance_eval),
              s(:args),
              s(:send, nil, :initialize_copy,
                s(:int, 1)))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :c,
            s(:sclass,
              s(:lvar, :o),
              s(:self))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :dup)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :BasicObject), :dup)))),
      s(:def, :test_singleton_class,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:int, 1), :extend,
              s(:send,
                s(:const, nil, :Module), :new))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:float, 1.0), :extend,
              s(:send,
                s(:const, nil, :Module), :new))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:begin,
                s(:send,
                  s(:float, 2.0), :**,
                  s(:int, 1000))), :extend,
              s(:send,
                s(:const, nil, :Module), :new))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:sym, :foo), :extend,
              s(:send,
                s(:const, nil, :Module), :new))),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "      module Foo; def foo; :foo; end; end\n"),
              s(:str, "      false.extend(Foo)\n"),
              s(:str, "      true.extend(Foo)\n"),
              s(:str, "      p false.foo\n"),
              s(:str, "      p true.foo\n"),
              s(:str, "      p FalseClass.include?(Foo)\n"),
              s(:str, "      p TrueClass.include?(Foo)\n")),
            s(:array,
              s(:str, ":foo"),
              s(:str, ":foo"),
              s(:str, "true"),
              s(:str, "true")),
            s(:array)))),
      s(:def, :test_uninitialized,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Class), :allocate), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Class), :allocate), :superclass)),
          s(:lvasgn, :bug6863,
            s(:str, "[ruby-core:47148]")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError),
              s(:lvar, :bug6863)),
            s(:args),
            s(:send,
              s(:const, nil, :Class), :new,
              s(:send,
                s(:const, nil, :Class), :allocate))))),
      s(:def, :test_nonascii_name,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :eval,
              s(:str, "class ::Cß; self; end"))),
          s(:send, nil, :assert_equal,
            s(:str, "Cß"),
            s(:send,
              s(:lvar, :c), :name),
            s(:str, "[ruby-core:24600]")),
          s(:lvasgn, :c,
            s(:send, nil, :eval,
              s(:str, "class Cß; self; end"))),
          s(:send, nil, :assert_equal,
            s(:str, "TestClass::Cß"),
            s(:send,
              s(:lvar, :c), :name),
            s(:str, "[ruby-core:24600]")))),
      s(:def, :test_invalid_jump_from_class_definition,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SyntaxError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "class C; next; end"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SyntaxError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "class C; break; end"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SyntaxError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "class C; redo; end"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SyntaxError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "class C; retry; end"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SyntaxError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "class C; return; end"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SyntaxError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "class C; yield; end"))))),
      s(:def, :test_clone,
        s(:args),
        s(:begin,
          s(:lvasgn, :original,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:def, :foo,
                s(:args),
                s(:return,
                  s(:super))))),
          s(:lvasgn, :mod,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:def, :foo,
                s(:args),
                s(:return,
                  s(:str, "mod#foo"))))),
          s(:lvasgn, :copy,
            s(:send,
              s(:lvar, :original), :clone)),
          s(:send,
            s(:lvar, :copy), :send,
            s(:sym, :include),
            s(:lvar, :mod)),
          s(:send, nil, :assert_equal,
            s(:str, "mod#foo"),
            s(:send,
              s(:send,
                s(:lvar, :copy), :new), :foo)))),
      s(:def, :test_nested_class_removal,
        s(:args),
        s(:send, nil, :assert_normal_exit,
          s(:str, "File.__send__(:remove_const, :Stat); at_exit{File.stat(\".\")}; GC.start"))),
      s(:class,
        s(:const, nil, :PrivateClass), nil, nil),
      s(:send, nil, :private_constant,
        s(:sym, :PrivateClass)),
      s(:def, :test_redefine_private_class,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "class ::TestClass::PrivateClass; end"))),
          s(:send, nil, :eval,
            s(:dstr,
              s(:str, "      class ::TestClass\n"),
              s(:str, "        class PrivateClass\n"),
              s(:str, "          def foo; 42; end\n"),
              s(:str, "        end\n"),
              s(:str, "      end\n"))),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:send,
                s(:const, nil, :PrivateClass), :new), :foo)))),
      s(:casgn, nil, :StrClone,
        s(:send,
          s(:const, nil, :String), :clone)),
      s(:send,
        s(:const, nil, :Class), :new,
        s(:const, nil, :StrClone)),
      s(:def, :test_cloned_class,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5274,
            s(:send,
              s(:const, nil, :StrClone), :new,
              s(:str, "[ruby-dev:44460]"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :bug5274),
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:lvar, :bug5274)))))),
      s(:def, :test_cannot_reinitialize_class_with_initialize_copy,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array),
          s(:dstr,
            s(:str, "      class Class\n"),
            s(:str, "        def initialize_copy(*); super; end\n"),
            s(:str, "      end\n"),
            s(:str, "\n"),
            s(:str, "      class A; end\n"),
            s(:str, "      class B; end\n"),
            s(:str, "\n"),
            s(:str, "      A.send(:initialize_copy, Class.new(B)) rescue nil\n"),
            s(:str, "\n"),
            s(:str, "      p A.superclass\n")),
          s(:array,
            s(:str, "Object")),
          s(:array))),
      s(:module,
        s(:const, nil, :M),
        s(:begin,
          s(:casgn, nil, :C,
            s(:int, 1)),
          s(:defs,
            s(:self), :m,
            s(:args),
            s(:const, nil, :C)))),
      s(:def, :test_constant_access_from_method_in_cloned_module,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :M), :dup)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:const,
              s(:lvar, :m), :C)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :m), :m)))),
      s(:def, :test_invalid_superclass,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :eval,
              s(:dstr,
                s(:str, "        class C < nil\n"),
                s(:str, "        end\n")))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :eval,
              s(:dstr,
                s(:str, "        class C < false\n"),
                s(:str, "        end\n")))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :eval,
              s(:dstr,
                s(:str, "        class C < true\n"),
                s(:str, "        end\n")))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :eval,
              s(:dstr,
                s(:str, "        class C < 0\n"),
                s(:str, "        end\n")))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :eval,
              s(:dstr,
                s(:str, "        class C < \"\"\n"),
                s(:str, "        end\n")))),
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:lvasgn, :n,
            s(:str, "M🗿")),
          s(:lvasgn, :c,
            s(:send,
              s(:lvar, :m), :module_eval,
              s(:dstr,
                s(:str, "class "),
                s(:begin,
                  s(:lvar, :n)),
                s(:str, "; new; end")))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:begin,
                  s(:lvar, :n)),
                s(:regopt))),
            s(:args),
            s(:send, nil, :eval,
              s(:dstr,
                s(:str, "        class C < c\n"),
                s(:str, "        end\n")))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:begin,
                  s(:lvar, :n)),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :m), :module_eval,
              s(:dstr,
                s(:str, "class "),
                s(:begin,
                  s(:lvar, :n)),
                s(:str, " < Class.new; end")))))),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :test_invalid_reset_superclass)),
        s(:args),
        s(:begin,
          s(:class,
            s(:const, nil, :A), nil, nil),
          s(:class,
            s(:const, nil, :SuperclassCannotBeReset),
            s(:const, nil, :A), nil),
          s(:send, nil, :assert_equal,
            s(:const, nil, :A),
            s(:send,
              s(:const, nil, :SuperclassCannotBeReset), :superclass)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "superclass mismatch"),
                s(:regopt))),
            s(:args),
            s(:class,
              s(:const, nil, :SuperclassCannotBeReset),
              s(:const, nil, :String), nil)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "superclass mismatch"),
                s(:regopt)),
              s(:str, "[ruby-core:75446]")),
            s(:args),
            s(:class,
              s(:const, nil, :SuperclassCannotBeReset),
              s(:const, nil, :Object), nil)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :A),
            s(:send,
              s(:const, nil, :SuperclassCannotBeReset), :superclass)))),
      s(:def, :test_cloned_singleton_method_added,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5283,
            s(:str, "[ruby-dev:44477]")),
          s(:lvasgn, :added,
            s(:array)),
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :c), :singleton_class), :class_eval),
            s(:args),
            s(:begin,
              s(:block,
                s(:send, nil, :define_method,
                  s(:sym, :singleton_method_added)),
                s(:args,
                  s(:arg, :mid)),
                s(:send,
                  s(:lvar, :added), :<<,
                  s(:array,
                    s(:self),
                    s(:lvar, :mid)))),
              s(:def, :foo,
                s(:args),
                s(:sym, :foo)))),
          s(:send,
            s(:lvar, :added), :clear),
          s(:lvasgn, :d,
            s(:send,
              s(:lvar, :c), :clone)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :added), :grep,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :k)),
                s(:send,
                  s(:lvar, :c), :==,
                  s(:send,
                    s(:lvar, :k), :[],
                    s(:int, 0))))),
            s(:lvar, :bug5283)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :d), :foo)))),
      s(:def, :test_singleton_class_p,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature7609,
            s(:str, "[ruby-core:51087] [Feature #7609]")),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:self), :singleton_class),
            s(:sym, :singleton_class?),
            s(:lvar, :feature7609)),
          s(:send, nil, :assert_not_predicate,
            s(:send,
              s(:self), :class),
            s(:sym, :singleton_class?),
            s(:lvar, :feature7609)))),
      s(:def, :test_freeze_to_s,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised,
            s(:str, "[ruby-core:41858] [Bug #5828]")),
          s(:args),
          s(:send,
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Class), :new), :freeze), :clone), :to_s))),
      s(:def, :test_singleton_class_of_frozen_object,
        s(:args),
        s(:begin,
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :c,
            s(:send,
              s(:lvar, :obj), :singleton_class)),
          s(:send,
            s(:lvar, :obj), :freeze),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :RuntimeError),
              s(:regexp,
                s(:str, "frozen object"),
                s(:regopt))),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :c), :class_eval),
              s(:args),
              s(:def, :f,
                s(:args), nil))))),
      s(:def, :test_singleton_class_message,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:send,
                s(:const, nil, :Class), :new), :freeze)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :RuntimeError),
              s(:regexp,
                s(:str, "frozen Class"),
                s(:regopt))),
            s(:args),
            s(:defs,
              s(:lvar, :c), :f,
              s(:args), nil)))),
      s(:def, :test_singleton_class_should_has_own_namespace,
        s(:args),
        s(:begin,
          s(:lvasgn, :objs,
            s(:array)),
          s(:gvasgn, :$i,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:int, 2), :times),
            s(:args),
            s(:begin,
              s(:send,
                s(:lvar, :objs), :<<,
                s(:lvasgn, :obj,
                  s(:send,
                    s(:const, nil, :Object), :new))),
              s(:sclass,
                s(:lvar, :obj),
                s(:begin,
                  s(:casgn, nil, :CONST,
                    s(:begin,
                      s(:op_asgn,
                        s(:gvasgn, :$i), :+,
                        s(:int, 1)))),
                  s(:def, :foo,
                    s(:args),
                    s(:const, nil, :CONST)))))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:lvar, :objs), :[],
                s(:int, 0)), :foo),
            s(:str, "[Bug #10943]")),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:lvar, :objs), :[],
                s(:int, 1)), :foo),
            s(:str, "[Bug #10943]")),
          s(:lvasgn, :objs,
            s(:array)),
          s(:gvasgn, :$i,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:int, 2), :times),
            s(:args),
            s(:begin,
              s(:send,
                s(:lvar, :objs), :<<,
                s(:lvasgn, :obj,
                  s(:send,
                    s(:const, nil, :Object), :new))),
              s(:sclass,
                s(:lvar, :obj),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:int, 1), :times),
                    s(:args),
                    s(:casgn, nil, :CONST,
                      s(:begin,
                        s(:op_asgn,
                          s(:gvasgn, :$i), :+,
                          s(:int, 1))))),
                  s(:def, :foo,
                    s(:args),
                    s(:block,
                      s(:send,
                        s(:array,
                          s(:nil)), :map),
                      s(:args),
                      s(:const, nil, :CONST))))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:send,
                s(:lvar, :objs), :[],
                s(:int, 0)), :foo),
            s(:str, "[Bug #10943]")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:lvar, :objs), :[],
                s(:int, 1)), :foo),
            s(:str, "[Bug #10943]")),
          s(:lvasgn, :objs,
            s(:array)),
          s(:gvasgn, :$xs,
            s(:array)),
          s(:gvasgn, :$i,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:int, 2), :times),
            s(:args),
            s(:begin,
              s(:send,
                s(:lvar, :objs), :<<,
                s(:lvasgn, :obj,
                  s(:send,
                    s(:const, nil, :Object), :new))),
              s(:sclass,
                s(:lvar, :obj),
                s(:begin,
                  s(:casgn, nil, :CONST,
                    s(:begin,
                      s(:op_asgn,
                        s(:gvasgn, :$i), :+,
                        s(:int, 1)))),
                  s(:class,
                    s(:const, nil, :X), nil,
                    s(:begin,
                      s(:send,
                        s(:gvar, :$xs), :<<,
                        s(:self)),
                      s(:casgn, nil, :CONST,
                        s(:begin,
                          s(:op_asgn,
                            s(:gvasgn, :$i), :+,
                            s(:int, 1)))),
                      s(:def, :foo,
                        s(:args),
                        s(:const, nil, :CONST)))),
                  s(:def, :x,
                    s(:args),
                    s(:const, nil, :X)))))),
          s(:send, nil, :assert_not_equal,
            s(:send,
              s(:gvar, :$xs), :[],
              s(:int, 0)),
            s(:send,
              s(:gvar, :$xs), :[],
              s(:int, 1)),
            s(:str, "[Bug #10943]")),
          s(:send, nil, :assert_not_equal,
            s(:send,
              s(:send,
                s(:lvar, :objs), :[],
                s(:int, 0)), :x),
            s(:send,
              s(:send,
                s(:lvar, :objs), :[],
                s(:int, 1)), :x),
            s(:str, "[Bug #10943]")),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:const,
              s(:send,
                s(:gvar, :$xs), :[],
                s(:int, 0)), :CONST),
            s(:str, "[Bug #10943]")),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:send,
                  s(:gvar, :$xs), :[],
                  s(:int, 0)), :new), :foo),
            s(:str, "[Bug #10943]")),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:const,
              s(:send,
                s(:gvar, :$xs), :[],
                s(:int, 1)), :CONST),
            s(:str, "[Bug #10943]")),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:send,
                s(:send,
                  s(:gvar, :$xs), :[],
                  s(:int, 1)), :new), :foo),
            s(:str, "[Bug #10943]")),
          s(:lvasgn, :objs,
            s(:array)),
          s(:gvasgn, :$xs,
            s(:array)),
          s(:gvasgn, :$i,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:int, 2), :times),
            s(:args),
            s(:begin,
              s(:send,
                s(:lvar, :objs), :<<,
                s(:lvasgn, :obj,
                  s(:send,
                    s(:const, nil, :Object), :new))),
              s(:sclass,
                s(:lvar, :obj),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:int, 1), :times),
                    s(:args),
                    s(:casgn, nil, :CONST,
                      s(:begin,
                        s(:op_asgn,
                          s(:gvasgn, :$i), :+,
                          s(:int, 1))))),
                  s(:block,
                    s(:send,
                      s(:int, 1), :times),
                    s(:args),
                    s(:begin,
                      s(:class,
                        s(:const, nil, :X), nil,
                        s(:begin,
                          s(:send,
                            s(:gvar, :$xs), :<<,
                            s(:self)),
                          s(:casgn, nil, :CONST,
                            s(:begin,
                              s(:op_asgn,
                                s(:gvasgn, :$i), :+,
                                s(:int, 1)))),
                          s(:def, :foo,
                            s(:args),
                            s(:const, nil, :CONST)))),
                      s(:def, :x,
                        s(:args),
                        s(:const, nil, :X)))))))),
          s(:send, nil, :assert_not_equal,
            s(:send,
              s(:gvar, :$xs), :[],
              s(:int, 0)),
            s(:send,
              s(:gvar, :$xs), :[],
              s(:int, 1)),
            s(:str, "[Bug #10943]")),
          s(:send, nil, :assert_not_equal,
            s(:send,
              s(:send,
                s(:lvar, :objs), :[],
                s(:int, 0)), :x),
            s(:send,
              s(:send,
                s(:lvar, :objs), :[],
                s(:int, 1)), :x),
            s(:str, "[Bug #10943]")),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:const,
              s(:send,
                s(:gvar, :$xs), :[],
                s(:int, 0)), :CONST),
            s(:str, "[Bug #10943]")),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:send,
                  s(:gvar, :$xs), :[],
                  s(:int, 0)), :new), :foo),
            s(:str, "[Bug #10943]")),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:const,
              s(:send,
                s(:gvar, :$xs), :[],
                s(:int, 1)), :CONST),
            s(:str, "[Bug #10943]")),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:send,
                s(:send,
                  s(:gvar, :$xs), :[],
                  s(:int, 1)), :new), :foo),
            s(:str, "[Bug #10943]")),
          s(:lvasgn, :ms,
            s(:array)),
          s(:lvasgn, :ps,
            s(:gvasgn, :$test_singleton_class_shared_cref_ps,
              s(:array))),
          s(:block,
            s(:send,
              s(:int, 2), :times),
            s(:args),
            s(:send,
              s(:lvar, :ms), :<<,
              s(:block,
                s(:send,
                  s(:const, nil, :Module), :new),
                s(:args),
                s(:sclass,
                  s(:self),
                  s(:send,
                    s(:gvar, :$test_singleton_class_shared_cref_ps), :<<,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Proc), :new),
                      s(:args),
                      s(:def, :xyzzy,
                        s(:args),
                        s(:self)))))))),
          s(:block,
            s(:send,
              s(:lvar, :ps), :each),
            s(:args,
              s(:arg, :p)),
            s(:send,
              s(:lvar, :p), :call)),
          s(:block,
            s(:send,
              s(:lvar, :ms), :each),
            s(:args,
              s(:arg, :m)),
            s(:send, nil, :assert_equal,
              s(:lvar, :m),
              s(:send,
                s(:lvar, :m), :xyzzy),
              s(:str, "Bug #10871"))))),
      s(:def, :test_redefinition_mismatch,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:send,
            s(:lvar, :m), :module_eval,
            s(:str, "A = 1")),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "is not a class"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :m), :module_eval,
              s(:str, "class A; end"))),
          s(:lvasgn, :n,
            s(:str, "M🗿")),
          s(:send,
            s(:lvar, :m), :module_eval,
            s(:dstr,
              s(:begin,
                s(:lvar, :n)),
              s(:str, " = 42"))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:dstr,
                s(:begin,
                  s(:lvar, :n)),
                s(:str, " is not a class"))),
            s(:args),
            s(:send,
              s(:lvar, :m), :module_eval,
              s(:dstr,
                s(:str, "class "),
                s(:begin,
                  s(:lvar, :n)),
                s(:str, "; end")))),
          s(:send, nil, :assert_separately,
            s(:array),
            s(:dstr,
              s(:str, "      Date = (class C🗿; self; end).new\n"),
              s(:str, "      assert_raise_with_message(TypeError, /C🗿/) {\n"),
              s(:str, "        require 'date'\n"),
              s(:str, "      }\n"))))),
      s(:def, :test_should_not_expose_singleton_class_without_metaclass,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_normal_exit,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "      klass = Class.new(Array)\n"),
              s(:str, "      # The metaclass of +klass+ should handle #bla since it should inherit methods from meta:meta:Array\n"),
              s(:str, "      def (Array.singleton_class).bla; :bla; end\n"),
              s(:str, "      hidden = ObjectSpace.each_object(Class).find { |c| klass.is_a? c and c.inspect.include? klass.inspect }\n"),
              s(:str, "      raise unless hidden.nil?\n"),
              s(:str, "    ")),
            s(:str, "[Bug #11740]")),
          s(:send, nil, :assert_normal_exit,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "      klass = Class.new(Array)\n"),
              s(:str, "      klass.singleton_class\n"),
              s(:str, "      # The metaclass of +klass+ should handle #bla since it should inherit methods from meta:meta:Array\n"),
              s(:str, "      def (Array.singleton_class).bla; :bla; end\n"),
              s(:str, "      hidden = ObjectSpace.each_object(Class).find { |c| klass.is_a? c and c.inspect.include? klass.inspect }\n"),
              s(:str, "      raise if hidden.nil?\n"),
              s(:str, "    ")),
            s(:str, "[Bug #11740]")))))))
