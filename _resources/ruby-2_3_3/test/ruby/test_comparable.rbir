s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestComparable),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send,
            s(:ivar, :@o), :extend,
            s(:const, nil, :Comparable)))),
      s(:def, :cmp,
        s(:args,
          s(:arg, :b)),
        s(:block,
          s(:send,
            s(:sclass,
              s(:ivar, :@o),
              s(:self)), :class_eval),
          s(:args),
          s(:begin,
            s(:undef,
              s(:sym, :<=>)),
            s(:send, nil, :define_method,
              s(:sym, :<=>),
              s(:lvar, :b))))),
      s(:def, :test_equal,
        s(:args),
        s(:begin,
          s(:send, nil, :cmp,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@o), :==,
              s(:nil))),
          s(:send, nil, :cmp,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@o), :==,
              s(:nil))),
          s(:send, nil, :cmp,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@o), :==,
              s(:nil))),
          s(:send, nil, :cmp,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:send, nil, :raise,
                s(:const, nil, :NotImplementedError),
                s(:str, "Not a RuntimeError")))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NotImplementedError)),
            s(:args),
            s(:send,
              s(:ivar, :@o), :==,
              s(:nil))),
          s(:lvasgn, :bug7688,
            s(:dstr,
              s(:str, "Comparable#== should not silently rescue"),
              s(:str, "any Exception [ruby-core:51389] [Bug #7688]"))),
          s(:send, nil, :cmp,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:send, nil, :raise,
                s(:const, nil, :StandardError)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :StandardError),
              s(:lvar, :bug7688)),
            s(:args),
            s(:send,
              s(:ivar, :@o), :==,
              s(:nil))),
          s(:send, nil, :cmp,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:str, "bad value"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError),
              s(:lvar, :bug7688)),
            s(:args),
            s(:send,
              s(:ivar, :@o), :==,
              s(:nil))))),
      s(:def, :test_gt,
        s(:args),
        s(:begin,
          s(:send, nil, :cmp,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@o), :>,
              s(:nil))),
          s(:send, nil, :cmp,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@o), :>,
              s(:nil))),
          s(:send, nil, :cmp,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@o), :>,
              s(:nil))))),
      s(:def, :test_ge,
        s(:args),
        s(:begin,
          s(:send, nil, :cmp,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@o), :>=,
              s(:nil))),
          s(:send, nil, :cmp,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@o), :>=,
              s(:nil))),
          s(:send, nil, :cmp,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@o), :>=,
              s(:nil))))),
      s(:def, :test_lt,
        s(:args),
        s(:begin,
          s(:send, nil, :cmp,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@o), :<,
              s(:nil))),
          s(:send, nil, :cmp,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@o), :<,
              s(:nil))),
          s(:send, nil, :cmp,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@o), :<,
              s(:nil))))),
      s(:def, :test_le,
        s(:args),
        s(:begin,
          s(:send, nil, :cmp,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@o), :<=,
              s(:nil))),
          s(:send, nil, :cmp,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@o), :<=,
              s(:nil))),
          s(:send, nil, :cmp,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@o), :<=,
              s(:nil))))),
      s(:def, :test_between,
        s(:args),
        s(:begin,
          s(:send, nil, :cmp,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:int, 0), :<=>,
                s(:lvar, :x)))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@o), :between?,
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@o), :between?,
              s(:int, -2),
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@o), :between?,
              s(:int, -1),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@o), :between?,
              s(:int, 0),
              s(:int, 0))))),
      s(:def, :test_err,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:float, 1.0), :<,
              s(:nil))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:float, 1.0), :<,
              s(:send,
                s(:const, nil, :Object), :new))),
          s(:lvasgn, :e,
            s(:send,
              s(:const, nil, :EnvUtil), :labeled_class,
              s(:str, "Eエラー"))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:regexp,
                s(:str, "E\\u{30a8 30e9 30fc}"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:float, 1.0), :<,
              s(:send,
                s(:lvar, :e), :new))))),
      s(:def, :test_inversed_compare,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7870,
            s(:str, "[ruby-core:52305] [Bug #7870]")),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :SystemStackError),
              s(:lvar, :bug7870)),
            s(:args),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :new), :<=>,
                s(:str, "")))))),
      s(:def, :test_no_cmp,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9003,
            s(:str, "[ruby-core:57736] [Bug #9003]")),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :SystemStackError),
              s(:lvar, :bug9003)),
            s(:args),
            s(:send,
              s(:ivar, :@o), :<=>,
              s(:send,
                s(:ivar, :@o), :dup))))))))
