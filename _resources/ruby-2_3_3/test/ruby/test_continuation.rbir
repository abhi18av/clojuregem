s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:block,
    s(:send,
      s(:const, nil, :EnvUtil), :suppress_warning),
    s(:args),
    s(:send, nil, :require,
      s(:str, "continuation"))),
  s(:send, nil, :require,
    s(:str, "fiber")),
  s(:class,
    s(:const, nil, :TestContinuation),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_create,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:sym, :ok),
            s(:block,
              s(:send, nil, :callcc),
              s(:args),
              s(:sym, :ok))),
          s(:send, nil, :assert_equal,
            s(:sym, :ok),
            s(:block,
              s(:send, nil, :callcc),
              s(:args,
                s(:arg, :c)),
              s(:send,
                s(:lvar, :c), :call,
                s(:sym, :ok)))))),
      s(:def, :test_call,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:sym, :ok),
            s(:block,
              s(:send, nil, :callcc),
              s(:args,
                s(:arg, :c)),
              s(:send,
                s(:lvar, :c), :call,
                s(:sym, :ok)))),
          s(:lvasgn, :ary,
            s(:array)),
          s(:send,
            s(:lvar, :ary), :<<,
            s(:block,
              s(:send, nil, :callcc),
              s(:args,
                s(:arg, :c)),
              s(:begin,
                s(:ivasgn, :@cont,
                  s(:lvar, :c)),
                s(:sym, :a)))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :ary), :length), :<,
              s(:int, 3)),
            s(:send,
              s(:ivar, :@cont), :call,
              s(:sym, :b)), nil),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :a),
              s(:sym, :b),
              s(:sym, :b)),
            s(:lvar, :ary)))),
      s(:def, :test_check_localvars,
        s(:args),
        s(:begin,
          s(:lvasgn, :vv,
            s(:int, 0)),
          s(:ivasgn, :@v,
            s(:int, 0)),
          s(:ivasgn, :@ary,
            s(:array)),
          s(:block,
            s(:send,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)), :each),
            s(:args,
              s(:arg, :i)),
            s(:begin,
              s(:block,
                s(:send, nil, :callcc),
                s(:args,
                  s(:arg, :k)),
                s(:ivasgn, :@k,
                  s(:lvar, :k))),
              s(:op_asgn,
                s(:ivasgn, :@v), :+,
                s(:int, 1)),
              s(:op_asgn,
                s(:lvasgn, :vv), :+,
                s(:int, 1)))),
          s(:send,
            s(:ivar, :@ary), :<<,
            s(:array,
              s(:lvar, :vv),
              s(:ivar, :@v))),
          s(:if,
            s(:send,
              s(:ivar, :@v), :<,
              s(:int, 10)),
            s(:send,
              s(:ivar, :@k), :call), nil),
          s(:send, nil, :assert_equal,
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 3),
                    s(:int, 10))), :map),
              s(:args,
                s(:arg, :e)),
              s(:array,
                s(:lvar, :e),
                s(:lvar, :e))),
            s(:ivar, :@ary)))),
      s(:def, :test_error,
        s(:args),
        s(:begin,
          s(:lvasgn, :cont,
            s(:block,
              s(:send, nil, :callcc),
              s(:args,
                s(:arg, :c)),
              s(:lvar, :c))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :new),
                s(:args),
                s(:send,
                  s(:lvar, :cont), :call)), :join)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :LocalJumpError)),
            s(:args),
            s(:send, nil, :callcc)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:begin,
              s(:lvasgn, :c,
                s(:nil)),
              s(:send,
                s(:block,
                  s(:send,
                    s(:const, nil, :Fiber), :new),
                  s(:args),
                  s(:block,
                    s(:send, nil, :callcc),
                    s(:args,
                      s(:arg, :c2)),
                    s(:lvasgn, :c,
                      s(:lvar, :c2)))), :resume),
              s(:send,
                s(:lvar, :c), :call))))),
      s(:def, :test_ary_flatten,
        s(:args),
        s(:send, nil, :assert_normal_exit,
          s(:dstr,
            s(:str, "\n"),
            s(:str, "      require 'continuation'\n"),
            s(:str, "      n = 0\n"),
            s(:str, "      o = Object.new\n"),
            s(:str, "      def o.to_ary() callcc {|k| $k = k; [1,2,3]} end\n"),
            s(:str, "      [10,20,o,30,o,40].flatten.inspect\n"),
            s(:str, "      n += 1\n"),
            s(:str, "      $k.call if n < 100\n"),
            s(:str, "    ")),
          s(:str, "[ruby-dev:34798]"))),
      s(:def, :test_marshal_dump,
        s(:args),
        s(:send, nil, :assert_normal_exit,
          s(:dstr,
            s(:str, "\n"),
            s(:str, "      require 'continuation'\n"),
            s(:str, "      n = 0\n"),
            s(:str, "      o = Object.new\n"),
            s(:str, "      def o.marshal_dump() callcc {|k| $k = k };  \"fofof\" end\n"),
            s(:str, "      a = [1,2,3,o,4,5,6]\n"),
            s(:str, "      Marshal.dump(a).inspect\n"),
            s(:str, "      n += 1\n"),
            s(:str, "      $k.call if n < 100\n"),
            s(:str, "    ")),
          s(:str, "[ruby-dev:34802]"))),
      s(:def, :tracing_with_set_trace_func,
        s(:args),
        s(:begin,
          s(:lvasgn, :orig_thread,
            s(:send,
              s(:const, nil, :Thread), :current)),
          s(:lvasgn, :cont,
            s(:nil)),
          s(:lvasgn, :func,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:restarg, :args)),
              s(:if,
                s(:send,
                  s(:lvar, :orig_thread), :==,
                  s(:send,
                    s(:const, nil, :Thread), :current)),
                s(:if,
                  s(:lvar, :cont),
                  s(:begin,
                    s(:op_asgn,
                      s(:ivasgn, :@memo), :+,
                      s(:int, 1)),
                    s(:lvasgn, :c,
                      s(:lvar, :cont)),
                    s(:lvasgn, :cont,
                      s(:nil)),
                    s(:send,
                      s(:lvar, :c), :call,
                      s(:nil))), nil), nil))),
          s(:lvasgn, :cont,
            s(:block,
              s(:send, nil, :callcc),
              s(:args,
                s(:arg, :cc)),
              s(:lvar, :cc))),
          s(:if,
            s(:lvar, :cont),
            s(:send, nil, :set_trace_func,
              s(:lvar, :func)),
            s(:send, nil, :set_trace_func,
              s(:nil))))),
      s(:def, :test_tracing_with_set_trace_func,
        s(:args),
        s(:begin,
          s(:ivasgn, :@memo,
            s(:int, 0)),
          s(:send, nil, :tracing_with_set_trace_func),
          s(:send, nil, :tracing_with_set_trace_func),
          s(:send, nil, :tracing_with_set_trace_func),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:ivar, :@memo)))),
      s(:def, :tracing_with_thread_set_trace_func,
        s(:args),
        s(:begin,
          s(:lvasgn, :cont,
            s(:nil)),
          s(:lvasgn, :func,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:restarg, :args)),
              s(:if,
                s(:lvar, :cont),
                s(:begin,
                  s(:op_asgn,
                    s(:ivasgn, :@memo), :+,
                    s(:int, 1)),
                  s(:lvasgn, :c,
                    s(:lvar, :cont)),
                  s(:lvasgn, :cont,
                    s(:nil)),
                  s(:send,
                    s(:lvar, :c), :call,
                    s(:nil))), nil))),
          s(:lvasgn, :cont,
            s(:block,
              s(:send, nil, :callcc),
              s(:args,
                s(:arg, :cc)),
              s(:lvar, :cc))),
          s(:if,
            s(:lvar, :cont),
            s(:send,
              s(:send,
                s(:const, nil, :Thread), :current), :set_trace_func,
              s(:lvar, :func)),
            s(:send,
              s(:send,
                s(:const, nil, :Thread), :current), :set_trace_func,
              s(:nil))))),
      s(:def, :test_tracing_with_thread_set_trace_func,
        s(:args),
        s(:begin,
          s(:ivasgn, :@memo,
            s(:int, 0)),
          s(:send, nil, :tracing_with_thread_set_trace_func),
          s(:send, nil, :tracing_with_thread_set_trace_func),
          s(:send, nil, :tracing_with_thread_set_trace_func),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:ivar, :@memo)))))))
