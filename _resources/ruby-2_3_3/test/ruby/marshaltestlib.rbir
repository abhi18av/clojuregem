s(:module,
  s(:const, nil, :MarshalTestLib),
  s(:begin,
    s(:casgn, nil, :NegativeZero,
      s(:begin,
        s(:send,
          s(:float, -1.0), :/,
          s(:begin,
            s(:send,
              s(:float, 1.0), :/,
              s(:float, 0.0)))))),
    s(:module,
      s(:const, nil, :Mod1), nil),
    s(:module,
      s(:const, nil, :Mod2), nil),
    s(:def, :marshaltest,
      s(:args,
        s(:arg, :o1)),
      s(:begin,
        s(:lvasgn, :str,
          s(:send, nil, :encode,
            s(:lvar, :o1))),
        s(:if,
          s(:gvar, :$DEBUG),
          s(:send, nil, :print,
            s(:send,
              s(:lvar, :str), :dump),
            s(:str, "\n")), nil),
        s(:lvasgn, :o2,
          s(:send, nil, :decode,
            s(:lvar, :str))),
        s(:lvar, :o2))),
    s(:def, :marshal_equal,
      s(:args,
        s(:arg, :o1),
        s(:optarg, :msg,
          s(:nil))),
      s(:begin,
        s(:lvasgn, :msg,
          s(:if,
            s(:lvar, :msg),
            s(:send,
              s(:lvar, :msg), :+,
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:send,
                    s(:send, nil, :caller), :[],
                    s(:int, 0))),
                s(:str, ")"))),
            s(:send,
              s(:send, nil, :caller), :[],
              s(:int, 0)))),
        s(:lvasgn, :o2,
          s(:send, nil, :marshaltest,
            s(:lvar, :o1))),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:lvar, :o1), :class),
          s(:send,
            s(:lvar, :o2), :class),
          s(:lvar, :msg)),
        s(:lvasgn, :iv1,
          s(:send,
            s(:send,
              s(:lvar, :o1), :instance_variables), :sort)),
        s(:lvasgn, :iv2,
          s(:send,
            s(:send,
              s(:lvar, :o2), :instance_variables), :sort)),
        s(:send, nil, :assert_equal,
          s(:lvar, :iv1),
          s(:lvar, :iv2)),
        s(:lvasgn, :val1,
          s(:block,
            s(:send,
              s(:lvar, :iv1), :map),
            s(:args,
              s(:arg, :var)),
            s(:block,
              s(:send,
                s(:lvar, :o1), :instance_eval),
              s(:args),
              s(:send, nil, :eval,
                s(:send,
                  s(:lvar, :var), :to_s))))),
        s(:lvasgn, :val2,
          s(:block,
            s(:send,
              s(:lvar, :iv1), :map),
            s(:args,
              s(:arg, :var)),
            s(:block,
              s(:send,
                s(:lvar, :o2), :instance_eval),
              s(:args),
              s(:send, nil, :eval,
                s(:send,
                  s(:lvar, :var), :to_s))))),
        s(:send, nil, :assert_equal,
          s(:lvar, :val1),
          s(:lvar, :val2),
          s(:lvar, :msg)),
        s(:if,
          s(:send, nil, :block_given?),
          s(:send, nil, :assert_equal,
            s(:yield,
              s(:lvar, :o1)),
            s(:yield,
              s(:lvar, :o2)),
            s(:lvar, :msg)),
          s(:send, nil, :assert_equal,
            s(:lvar, :o1),
            s(:lvar, :o2),
            s(:lvar, :msg))))),
    s(:def, :marshal_equal_with_ancestry,
      s(:args,
        s(:arg, :o1),
        s(:optarg, :msg,
          s(:nil))),
      s(:block,
        s(:send, nil, :marshal_equal,
          s(:lvar, :o1),
          s(:lvar, :msg)),
        s(:args,
          s(:arg, :o)),
        s(:begin,
          s(:lvasgn, :ancestry,
            s(:send,
              s(:send,
                s(:lvar, :o), :singleton_class), :ancestors)),
          s(:send,
            s(:lvar, :ancestry), :[]=,
            s(:send,
              s(:lvar, :ancestry), :index,
              s(:send,
                s(:lvar, :o), :singleton_class)),
            s(:sym, :singleton_class)),
          s(:lvar, :ancestry)))),
    s(:class,
      s(:const, nil, :MyObject), nil,
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:arg, :v)),
          s(:ivasgn, :@v,
            s(:lvar, :v))),
        s(:send, nil, :attr_reader,
          s(:sym, :v)))),
    s(:def, :test_object,
      s(:args),
      s(:begin,
        s(:lvasgn, :o1,
          s(:send,
            s(:const, nil, :Object), :new)),
        s(:block,
          s(:send,
            s(:lvar, :o1), :instance_eval),
          s(:args),
          s(:ivasgn, :@iv,
            s(:int, 1))),
        s(:block,
          s(:send, nil, :marshal_equal,
            s(:lvar, :o1)),
          s(:args,
            s(:arg, :o)),
          s(:block,
            s(:send,
              s(:lvar, :o), :instance_eval),
            s(:args),
            s(:ivar, :@iv))))),
    s(:def, :test_object_subclass,
      s(:args),
      s(:block,
        s(:send, nil, :marshal_equal,
          s(:send,
            s(:const, nil, :MyObject), :new,
            s(:int, 2))),
        s(:args,
          s(:arg, :o)),
        s(:send,
          s(:lvar, :o), :v))),
    s(:def, :test_object_extend,
      s(:args),
      s(:begin,
        s(:lvasgn, :o1,
          s(:send,
            s(:const, nil, :Object), :new)),
        s(:send,
          s(:lvar, :o1), :extend,
          s(:const, nil, :Mod1)),
        s(:send, nil, :marshal_equal_with_ancestry,
          s(:lvar, :o1)),
        s(:send,
          s(:lvar, :o1), :extend,
          s(:const, nil, :Mod2)),
        s(:send, nil, :marshal_equal_with_ancestry,
          s(:lvar, :o1)))),
    s(:def, :test_object_subclass_extend,
      s(:args),
      s(:begin,
        s(:lvasgn, :o1,
          s(:send,
            s(:const, nil, :MyObject), :new,
            s(:int, 2))),
        s(:send,
          s(:lvar, :o1), :extend,
          s(:const, nil, :Mod1)),
        s(:send, nil, :marshal_equal_with_ancestry,
          s(:lvar, :o1)),
        s(:send,
          s(:lvar, :o1), :extend,
          s(:const, nil, :Mod2)),
        s(:send, nil, :marshal_equal_with_ancestry,
          s(:lvar, :o1)))),
    s(:def, :test_object_prepend,
      s(:args),
      s(:begin,
        s(:lvasgn, :bug8041,
          s(:str, "[ruby-core:53202] [Bug #8041]")),
        s(:lvasgn, :o1,
          s(:send,
            s(:const, nil, :MyObject), :new,
            s(:int, 42))),
        s(:block,
          s(:send,
            s(:send,
              s(:lvar, :o1), :singleton_class), :class_eval),
          s(:args),
          s(:send, nil, :prepend,
            s(:const, nil, :Mod1))),
        s(:block,
          s(:send, nil, :assert_nothing_raised,
            s(:const, nil, :ArgumentError),
            s(:lvar, :bug8041)),
          s(:args),
          s(:send, nil, :marshal_equal_with_ancestry,
            s(:lvar, :o1),
            s(:lvar, :bug8041))))),
    s(:class,
      s(:const, nil, :MyArray),
      s(:const, nil, :Array),
      s(:def, :initialize,
        s(:args,
          s(:arg, :v),
          s(:restarg, :args)),
        s(:begin,
          s(:super,
            s(:lvar, :args)),
          s(:ivasgn, :@v,
            s(:lvar, :v))))),
    s(:def, :test_array,
      s(:args),
      s(:begin,
        s(:send, nil, :marshal_equal,
          s(:int, 5)),
        s(:send, nil, :marshal_equal,
          s(:array,
            s(:int, 1),
            s(:int, 2),
            s(:int, 3))))),
    s(:def, :test_array_subclass,
      s(:args),
      s(:send, nil, :marshal_equal,
        s(:send,
          s(:const, nil, :MyArray), :new,
          s(:int, 0),
          s(:int, 1),
          s(:int, 2),
          s(:int, 3)))),
    s(:def, :test_array_ivar,
      s(:args),
      s(:begin,
        s(:lvasgn, :o1,
          s(:send,
            s(:const, nil, :Array), :new)),
        s(:block,
          s(:send,
            s(:lvar, :o1), :instance_eval),
          s(:args),
          s(:ivasgn, :@iv,
            s(:int, 1))),
        s(:block,
          s(:send, nil, :marshal_equal,
            s(:lvar, :o1)),
          s(:args,
            s(:arg, :o)),
          s(:block,
            s(:send,
              s(:lvar, :o), :instance_eval),
            s(:args),
            s(:ivar, :@iv))))),
    s(:class,
      s(:const, nil, :MyException),
      s(:const, nil, :Exception),
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:arg, :v),
            s(:restarg, :args)),
          s(:begin,
            s(:super,
              s(:splat,
                s(:lvar, :args))),
            s(:ivasgn, :@v,
              s(:lvar, :v)))),
        s(:send, nil, :attr_reader,
          s(:sym, :v)))),
    s(:def, :test_exception,
      s(:args),
      s(:begin,
        s(:block,
          s(:send, nil, :marshal_equal,
            s(:send,
              s(:const, nil, :Exception), :new,
              s(:str, "foo"))),
          s(:args,
            s(:arg, :o)),
          s(:send,
            s(:lvar, :o), :message)),
        s(:block,
          s(:send, nil, :marshal_equal,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :NoMethodError)),
              s(:args),
              s(:send, nil, :no_such_method))),
          s(:args,
            s(:arg, :o)),
          s(:send,
            s(:lvar, :o), :message)))),
    s(:def, :test_exception_subclass,
      s(:args),
      s(:block,
        s(:send, nil, :marshal_equal,
          s(:send,
            s(:const, nil, :MyException), :new,
            s(:int, 20),
            s(:str, "bar"))),
        s(:args,
          s(:arg, :o)),
        s(:array,
          s(:send,
            s(:lvar, :o), :message),
          s(:send,
            s(:lvar, :o), :v)))),
    s(:def, :test_false,
      s(:args),
      s(:send, nil, :marshal_equal,
        s(:false))),
    s(:class,
      s(:const, nil, :MyHash),
      s(:const, nil, :Hash),
      s(:def, :initialize,
        s(:args,
          s(:arg, :v),
          s(:restarg, :args)),
        s(:begin,
          s(:super,
            s(:splat,
              s(:lvar, :args))),
          s(:ivasgn, :@v,
            s(:lvar, :v))))),
    s(:def, :test_hash,
      s(:args),
      s(:send, nil, :marshal_equal,
        s(:hash,
          s(:pair,
            s(:int, 1),
            s(:int, 2)),
          s(:pair,
            s(:int, 3),
            s(:int, 4))))),
    s(:def, :test_hash_default,
      s(:args),
      s(:begin,
        s(:lvasgn, :h,
          s(:send,
            s(:const, nil, :Hash), :new,
            s(:sym, :default))),
        s(:send,
          s(:lvar, :h), :[]=,
          s(:int, 5),
          s(:int, 6)),
        s(:send, nil, :marshal_equal,
          s(:lvar, :h)))),
    s(:def, :test_hash_subclass,
      s(:args),
      s(:begin,
        s(:lvasgn, :h,
          s(:send,
            s(:const, nil, :MyHash), :new,
            s(:int, 7),
            s(:int, 8))),
        s(:send,
          s(:lvar, :h), :[]=,
          s(:int, 4),
          s(:int, 5)),
        s(:send, nil, :marshal_equal,
          s(:lvar, :h)))),
    s(:def, :test_hash_default_proc,
      s(:args),
      s(:begin,
        s(:lvasgn, :h,
          s(:block,
            s(:send,
              s(:const, nil, :Hash), :new),
            s(:args), nil)),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send, nil, :marshaltest,
            s(:lvar, :h))))),
    s(:def, :test_hash_ivar,
      s(:args),
      s(:begin,
        s(:lvasgn, :o1,
          s(:send,
            s(:const, nil, :Hash), :new)),
        s(:block,
          s(:send,
            s(:lvar, :o1), :instance_eval),
          s(:args),
          s(:ivasgn, :@iv,
            s(:int, 1))),
        s(:block,
          s(:send, nil, :marshal_equal,
            s(:lvar, :o1)),
          s(:args,
            s(:arg, :o)),
          s(:block,
            s(:send,
              s(:lvar, :o), :instance_eval),
            s(:args),
            s(:ivar, :@iv))))),
    s(:def, :test_hash_extend,
      s(:args),
      s(:begin,
        s(:lvasgn, :o1,
          s(:send,
            s(:const, nil, :Hash), :new)),
        s(:send,
          s(:lvar, :o1), :extend,
          s(:const, nil, :Mod1)),
        s(:send, nil, :marshal_equal_with_ancestry,
          s(:lvar, :o1)),
        s(:send,
          s(:lvar, :o1), :extend,
          s(:const, nil, :Mod2)),
        s(:send, nil, :marshal_equal_with_ancestry,
          s(:lvar, :o1)))),
    s(:def, :test_hash_subclass_extend,
      s(:args),
      s(:begin,
        s(:lvasgn, :o1,
          s(:send,
            s(:const, nil, :MyHash), :new,
            s(:int, 2))),
        s(:send,
          s(:lvar, :o1), :extend,
          s(:const, nil, :Mod1)),
        s(:send, nil, :marshal_equal_with_ancestry,
          s(:lvar, :o1)),
        s(:send,
          s(:lvar, :o1), :extend,
          s(:const, nil, :Mod2)),
        s(:send, nil, :marshal_equal_with_ancestry,
          s(:lvar, :o1)))),
    s(:def, :test_bignum,
      s(:args),
      s(:begin,
        s(:send, nil, :marshal_equal,
          s(:int, -4611686018427387905)),
        s(:send, nil, :marshal_equal,
          s(:int, -1073741825)),
        s(:send, nil, :marshal_equal,
          s(:int, 1073741824)),
        s(:send, nil, :marshal_equal,
          s(:int, 4611686018427387904)))),
    s(:def, :test_fixnum,
      s(:args),
      s(:begin,
        s(:send, nil, :marshal_equal,
          s(:int, -1073741824)),
        s(:send, nil, :marshal_equal,
          s(:int, -1073741823)),
        s(:send, nil, :marshal_equal,
          s(:int, -1)),
        s(:send, nil, :marshal_equal,
          s(:int, 0)),
        s(:send, nil, :marshal_equal,
          s(:int, 1)),
        s(:send, nil, :marshal_equal,
          s(:int, 1073741823)))),
    s(:def, :test_float,
      s(:args),
      s(:begin,
        s(:send, nil, :marshal_equal,
          s(:float, -1.0)),
        s(:send, nil, :marshal_equal,
          s(:float, 0.0)),
        s(:send, nil, :marshal_equal,
          s(:float, 1.0)))),
    s(:def, :test_float_inf_nan,
      s(:args),
      s(:begin,
        s(:send, nil, :marshal_equal,
          s(:send,
            s(:float, 1.0), :/,
            s(:float, 0.0))),
        s(:send, nil, :marshal_equal,
          s(:send,
            s(:float, -1.0), :/,
            s(:float, 0.0))),
        s(:block,
          s(:send, nil, :marshal_equal,
            s(:send,
              s(:float, 0.0), :/,
              s(:float, 0.0))),
          s(:args,
            s(:arg, :o)),
          s(:send,
            s(:lvar, :o), :nan?)),
        s(:block,
          s(:send, nil, :marshal_equal,
            s(:const, nil, :NegativeZero)),
          s(:args,
            s(:arg, :o)),
          s(:send,
            s(:float, 1.0), :/,
            s(:lvar, :o))))),
    s(:class,
      s(:const, nil, :MyRange),
      s(:const, nil, :Range),
      s(:def, :initialize,
        s(:args,
          s(:arg, :v),
          s(:restarg, :args)),
        s(:begin,
          s(:super,
            s(:splat,
              s(:lvar, :args))),
          s(:ivasgn, :@v,
            s(:lvar, :v))))),
    s(:def, :test_range,
      s(:args),
      s(:begin,
        s(:send, nil, :marshal_equal,
          s(:irange,
            s(:int, 1),
            s(:int, 2))),
        s(:send, nil, :marshal_equal,
          s(:erange,
            s(:int, 1),
            s(:int, 3))))),
    s(:def, :test_range_subclass,
      s(:args),
      s(:send, nil, :marshal_equal,
        s(:send,
          s(:const, nil, :MyRange), :new,
          s(:int, 4),
          s(:int, 5),
          s(:int, 8),
          s(:false)))),
    s(:class,
      s(:const, nil, :MyRegexp),
      s(:const, nil, :Regexp),
      s(:def, :initialize,
        s(:args,
          s(:arg, :v),
          s(:restarg, :args)),
        s(:begin,
          s(:super,
            s(:splat,
              s(:lvar, :args))),
          s(:ivasgn, :@v,
            s(:lvar, :v))))),
    s(:def, :test_regexp,
      s(:args),
      s(:begin,
        s(:send, nil, :marshal_equal,
          s(:regexp,
            s(:str, "a"),
            s(:regopt))),
        s(:send, nil, :marshal_equal,
          s(:regexp,
            s(:str, "A"),
            s(:regopt, :i))),
        s(:send, nil, :marshal_equal,
          s(:regexp,
            s(:str, "A"),
            s(:regopt, :m, :x))),
        s(:send, nil, :marshal_equal,
          s(:regexp,
            s(:str, "a\\u3042"),
            s(:regopt))),
        s(:send, nil, :marshal_equal,
          s(:regexp,
            s(:str, "aあ"),
            s(:regopt))),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:const, nil, :Regexp), :new,
            s(:send,
              s(:str, "あ"), :force_encoding,
              s(:str, "ASCII-8BIT"))),
          s(:send,
            s(:const, nil, :Marshal), :load,
            s(:str, "\u0004\b/\bあ\u0000"))),
        s(:send, nil, :assert_equal,
          s(:regexp,
            s(:str, "au3042"),
            s(:regopt)),
          s(:send,
            s(:const, nil, :Marshal), :load,
            s(:str, "\u0004\b/\fa\\u3042\u0000"))))),
    s(:def, :test_regexp_subclass,
      s(:args),
      s(:send, nil, :marshal_equal,
        s(:send,
          s(:const, nil, :MyRegexp), :new,
          s(:int, 10),
          s(:str, "a")))),
    s(:class,
      s(:const, nil, :MyString),
      s(:const, nil, :String),
      s(:def, :initialize,
        s(:args,
          s(:arg, :v),
          s(:restarg, :args)),
        s(:begin,
          s(:super,
            s(:splat,
              s(:lvar, :args))),
          s(:ivasgn, :@v,
            s(:lvar, :v))))),
    s(:def, :test_string,
      s(:args),
      s(:send, nil, :marshal_equal,
        s(:str, "abc"))),
    s(:def, :test_string_ivar,
      s(:args),
      s(:begin,
        s(:lvasgn, :o1,
          s(:str, "")),
        s(:block,
          s(:send,
            s(:lvar, :o1), :instance_eval),
          s(:args),
          s(:ivasgn, :@iv,
            s(:int, 1))),
        s(:block,
          s(:send, nil, :marshal_equal,
            s(:lvar, :o1)),
          s(:args,
            s(:arg, :o)),
          s(:block,
            s(:send,
              s(:lvar, :o), :instance_eval),
            s(:args),
            s(:ivar, :@iv))))),
    s(:def, :test_string_subclass,
      s(:args),
      s(:send, nil, :marshal_equal,
        s(:send,
          s(:const, nil, :MyString), :new,
          s(:int, 10),
          s(:str, "a")))),
    s(:def, :test_string_subclass_cycle,
      s(:args),
      s(:begin,
        s(:lvasgn, :str,
          s(:send,
            s(:const, nil, :MyString), :new,
            s(:int, 10),
            s(:str, "b"))),
        s(:block,
          s(:send,
            s(:lvar, :str), :instance_eval),
          s(:args),
          s(:ivasgn, :@v,
            s(:lvar, :str))),
        s(:block,
          s(:send, nil, :marshal_equal,
            s(:lvar, :str)),
          s(:args,
            s(:arg, :o)),
          s(:begin,
            s(:send, nil, :assert_same,
              s(:lvar, :o),
              s(:block,
                s(:send,
                  s(:lvar, :o), :instance_eval),
                s(:args),
                s(:ivar, :@v))),
            s(:block,
              s(:send,
                s(:lvar, :o), :instance_eval),
              s(:args),
              s(:ivar, :@v)))))),
    s(:def, :test_string_subclass_extend,
      s(:args),
      s(:begin,
        s(:lvasgn, :o,
          s(:str, "abc")),
        s(:send,
          s(:lvar, :o), :extend,
          s(:const, nil, :Mod1)),
        s(:lvasgn, :str,
          s(:send,
            s(:const, nil, :MyString), :new,
            s(:lvar, :o),
            s(:str, "c"))),
        s(:block,
          s(:send, nil, :marshal_equal,
            s(:lvar, :str)),
          s(:args,
            s(:arg, :v)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Mod1),
            s(:block,
              s(:send,
                s(:lvar, :v), :instance_eval),
              s(:args),
              s(:ivar, :@v)))))),
    s(:casgn, nil, :MyStruct,
      s(:send,
        s(:const, nil, :Struct), :new,
        s(:str, "MyStruct"),
        s(:sym, :a),
        s(:sym, :b))),
    s(:class,
      s(:const, nil, :MySubStruct),
      s(:const, nil, :MyStruct),
      s(:def, :initialize,
        s(:args,
          s(:arg, :v),
          s(:restarg, :args)),
        s(:begin,
          s(:super,
            s(:splat,
              s(:lvar, :args))),
          s(:ivasgn, :@v,
            s(:lvar, :v))))),
    s(:def, :test_struct,
      s(:args),
      s(:send, nil, :marshal_equal,
        s(:send,
          s(:const, nil, :MyStruct), :new,
          s(:int, 1),
          s(:int, 2)))),
    s(:def, :test_struct_subclass,
      s(:args),
      s(:send, nil, :marshal_equal,
        s(:send,
          s(:const, nil, :MySubStruct), :new,
          s(:int, 10),
          s(:int, 1),
          s(:int, 2)))),
    s(:def, :test_struct_ivar,
      s(:args),
      s(:begin,
        s(:lvasgn, :o1,
          s(:send,
            s(:const, nil, :MyStruct), :new)),
        s(:block,
          s(:send,
            s(:lvar, :o1), :instance_eval),
          s(:args),
          s(:ivasgn, :@iv,
            s(:int, 1))),
        s(:block,
          s(:send, nil, :marshal_equal,
            s(:lvar, :o1)),
          s(:args,
            s(:arg, :o)),
          s(:block,
            s(:send,
              s(:lvar, :o), :instance_eval),
            s(:args),
            s(:ivar, :@iv))))),
    s(:def, :test_struct_subclass_extend,
      s(:args),
      s(:begin,
        s(:lvasgn, :o1,
          s(:send,
            s(:const, nil, :MyStruct), :new)),
        s(:send,
          s(:lvar, :o1), :extend,
          s(:const, nil, :Mod1)),
        s(:send, nil, :marshal_equal_with_ancestry,
          s(:lvar, :o1)),
        s(:send,
          s(:lvar, :o1), :extend,
          s(:const, nil, :Mod2)),
        s(:send, nil, :marshal_equal_with_ancestry,
          s(:lvar, :o1)))),
    s(:def, :test_symbol,
      s(:args),
      s(:begin,
        s(:send, nil, :marshal_equal,
          s(:sym, :a)),
        s(:send, nil, :marshal_equal,
          s(:sym, :a?)),
        s(:send, nil, :marshal_equal,
          s(:sym, :a!)),
        s(:send, nil, :marshal_equal,
          s(:sym, :a=)),
        s(:send, nil, :marshal_equal,
          s(:sym, :|)),
        s(:send, nil, :marshal_equal,
          s(:sym, :^)),
        s(:send, nil, :marshal_equal,
          s(:sym, :&)),
        s(:send, nil, :marshal_equal,
          s(:sym, :<=>)),
        s(:send, nil, :marshal_equal,
          s(:sym, :==)),
        s(:send, nil, :marshal_equal,
          s(:sym, :===)),
        s(:send, nil, :marshal_equal,
          s(:sym, :=~)),
        s(:send, nil, :marshal_equal,
          s(:sym, :>)),
        s(:send, nil, :marshal_equal,
          s(:sym, :>=)),
        s(:send, nil, :marshal_equal,
          s(:sym, :<)),
        s(:send, nil, :marshal_equal,
          s(:sym, :<=)),
        s(:send, nil, :marshal_equal,
          s(:sym, :<<)),
        s(:send, nil, :marshal_equal,
          s(:sym, :>>)),
        s(:send, nil, :marshal_equal,
          s(:sym, :+)),
        s(:send, nil, :marshal_equal,
          s(:sym, :-)),
        s(:send, nil, :marshal_equal,
          s(:sym, :*)),
        s(:send, nil, :marshal_equal,
          s(:sym, :/)),
        s(:send, nil, :marshal_equal,
          s(:sym, :%)),
        s(:send, nil, :marshal_equal,
          s(:sym, :**)),
        s(:send, nil, :marshal_equal,
          s(:sym, :~)),
        s(:send, nil, :marshal_equal,
          s(:sym, :+@)),
        s(:send, nil, :marshal_equal,
          s(:sym, :-@)),
        s(:send, nil, :marshal_equal,
          s(:sym, :[])),
        s(:send, nil, :marshal_equal,
          s(:sym, :[]=)),
        s(:send, nil, :marshal_equal,
          s(:sym, :`)),
        s(:send, nil, :marshal_equal,
          s(:send,
            s(:str, "a b"), :intern)))),
    s(:class,
      s(:const, nil, :MyTime),
      s(:const, nil, :Time),
      s(:def, :initialize,
        s(:args,
          s(:arg, :v),
          s(:restarg, :args)),
        s(:begin,
          s(:super,
            s(:splat,
              s(:lvar, :args))),
          s(:ivasgn, :@v,
            s(:lvar, :v))))),
    s(:def, :test_time,
      s(:args),
      s(:block,
        s(:send,
          s(:int, 10), :times),
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:send, nil, :marshal_equal,
            s(:lvar, :t),
            s(:send,
              s(:send,
                s(:lvar, :t), :usec), :to_s))))),
    s(:def, :test_time_subclass,
      s(:args),
      s(:send, nil, :marshal_equal,
        s(:send,
          s(:const, nil, :MyTime), :new,
          s(:int, 10)))),
    s(:def, :test_time_ivar,
      s(:args),
      s(:begin,
        s(:lvasgn, :o1,
          s(:send,
            s(:const, nil, :Time), :now)),
        s(:block,
          s(:send,
            s(:lvar, :o1), :instance_eval),
          s(:args),
          s(:ivasgn, :@iv,
            s(:int, 1))),
        s(:block,
          s(:send, nil, :marshal_equal,
            s(:lvar, :o1)),
          s(:args,
            s(:arg, :o)),
          s(:block,
            s(:send,
              s(:lvar, :o), :instance_eval),
            s(:args),
            s(:ivar, :@iv))))),
    s(:def, :test_time_in_array,
      s(:args),
      s(:begin,
        s(:lvasgn, :t,
          s(:send,
            s(:const, nil, :Time), :now)),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:lvar, :t),
            s(:lvar, :t)),
          s(:send,
            s(:const, nil, :Marshal), :load,
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:array,
                s(:lvar, :t),
                s(:lvar, :t)))),
          s(:str, "[ruby-dev:34159]")))),
    s(:def, :test_true,
      s(:args),
      s(:send, nil, :marshal_equal,
        s(:true))),
    s(:def, :test_nil,
      s(:args),
      s(:send, nil, :marshal_equal,
        s(:nil))),
    s(:def, :test_share,
      s(:args),
      s(:begin,
        s(:lvasgn, :o,
          s(:array,
            s(:sym, :share))),
        s(:lvasgn, :o1,
          s(:array,
            s(:lvar, :o),
            s(:lvar, :o))),
        s(:lvasgn, :o2,
          s(:send, nil, :marshaltest,
            s(:lvar, :o1))),
        s(:send, nil, :assert_same,
          s(:send,
            s(:lvar, :o2), :first),
          s(:send,
            s(:lvar, :o2), :last)))),
    s(:class,
      s(:const, nil, :CyclicRange),
      s(:const, nil, :Range),
      s(:def, :<=>,
        s(:args,
          s(:arg, :other)),
        s(:true))),
    s(:def, :test_range_cyclic,
      s(:args),
      s(:begin,
        s(:if,
          s(:send,
            s(:const, nil, :CyclicRange), :respond_to?,
            s(:sym, :allocate)), nil,
          s(:return)),
        s(:lvasgn, :o1,
          s(:send,
            s(:const, nil, :CyclicRange), :allocate)),
        s(:block,
          s(:send,
            s(:lvar, :o1), :instance_eval),
          s(:args),
          s(:send, nil, :initialize,
            s(:lvar, :o1),
            s(:lvar, :o1))),
        s(:lvasgn, :o2,
          s(:send, nil, :marshaltest,
            s(:lvar, :o1))),
        s(:send, nil, :assert_same,
          s(:lvar, :o2),
          s(:send,
            s(:lvar, :o2), :begin)),
        s(:send, nil, :assert_same,
          s(:lvar, :o2),
          s(:send,
            s(:lvar, :o2), :end)))),
    s(:def, :test_singleton,
      s(:args),
      s(:begin,
        s(:lvasgn, :o,
          s(:send,
            s(:const, nil, :Object), :new)),
        s(:defs,
          s(:lvar, :o), :m,
          s(:args), nil),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send, nil, :marshaltest,
            s(:lvar, :o))),
        s(:lvasgn, :bug8043,
          s(:str, "[ruby-core:53206] [Bug #8043]")),
        s(:sclass,
          s(:lvar, :o),
          s(:send, nil, :prepend,
            s(:const, nil, :Mod1))),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError),
            s(:lvar, :bug8043)),
          s(:args),
          s(:send, nil, :marshaltest,
            s(:lvar, :o))),
        s(:lvasgn, :o,
          s(:send,
            s(:const, nil, :Object), :new)),
        s(:lvasgn, :c,
          s(:sclass,
            s(:lvar, :o),
            s(:begin,
              s(:ivasgn, :@v,
                s(:int, 1)),
              s(:class,
                s(:const, nil, :C), nil,
                s(:self))))),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send, nil, :marshaltest,
            s(:lvar, :o))),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send, nil, :marshaltest,
            s(:lvar, :c))),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send, nil, :marshaltest,
            s(:const, nil, :ARGF))),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send, nil, :marshaltest,
            s(:const, nil, :ENV))))),
    s(:def, :test_extend,
      s(:args),
      s(:begin,
        s(:lvasgn, :o,
          s(:send,
            s(:const, nil, :Object), :new)),
        s(:send,
          s(:lvar, :o), :extend,
          s(:const, nil, :Mod1)),
        s(:block,
          s(:send, nil, :marshal_equal,
            s(:lvar, :o)),
          s(:args,
            s(:arg, :obj)),
          s(:send,
            s(:lvar, :obj), :kind_of?,
            s(:const, nil, :Mod1))),
        s(:lvasgn, :o,
          s(:send,
            s(:const, nil, :Object), :new)),
        s(:send,
          s(:lvar, :o), :extend,
          s(:const, nil, :Mod1)),
        s(:send,
          s(:lvar, :o), :extend,
          s(:const, nil, :Mod2)),
        s(:send, nil, :marshal_equal_with_ancestry,
          s(:lvar, :o)),
        s(:lvasgn, :o,
          s(:send,
            s(:const, nil, :Object), :new)),
        s(:send,
          s(:lvar, :o), :extend,
          s(:send,
            s(:const, nil, :Module), :new)),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send, nil, :marshaltest,
            s(:lvar, :o))))),
    s(:def, :test_extend_string,
      s(:args),
      s(:begin,
        s(:lvasgn, :o,
          s(:str, "")),
        s(:send,
          s(:lvar, :o), :extend,
          s(:const, nil, :Mod1)),
        s(:block,
          s(:send, nil, :marshal_equal,
            s(:lvar, :o)),
          s(:args,
            s(:arg, :obj)),
          s(:send,
            s(:lvar, :obj), :kind_of?,
            s(:const, nil, :Mod1))),
        s(:lvasgn, :o,
          s(:str, "")),
        s(:send,
          s(:lvar, :o), :extend,
          s(:const, nil, :Mod1)),
        s(:send,
          s(:lvar, :o), :extend,
          s(:const, nil, :Mod2)),
        s(:send, nil, :marshal_equal_with_ancestry,
          s(:lvar, :o)),
        s(:lvasgn, :o,
          s(:str, "")),
        s(:send,
          s(:lvar, :o), :extend,
          s(:send,
            s(:const, nil, :Module), :new)),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send, nil, :marshaltest,
            s(:lvar, :o))))),
    s(:def, :test_anonymous,
      s(:args),
      s(:begin,
        s(:lvasgn, :c,
          s(:send,
            s(:const, nil, :Class), :new)),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send, nil, :marshaltest,
            s(:lvar, :c))),
        s(:lvasgn, :o,
          s(:send,
            s(:lvar, :c), :new)),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send, nil, :marshaltest,
            s(:lvar, :o))),
        s(:lvasgn, :m,
          s(:send,
            s(:const, nil, :Module), :new)),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send, nil, :marshaltest,
            s(:lvar, :m))))),
    s(:def, :test_string_empty,
      s(:args),
      s(:send, nil, :marshal_equal,
        s(:str, ""))),
    s(:def, :test_string_crlf,
      s(:args),
      s(:send, nil, :marshal_equal,
        s(:str, "\r\n"))),
    s(:def, :test_string_escape,
      s(:args),
      s(:send, nil, :marshal_equal,
        s(:str, "\u0000<;;>\u0001;;"))),
    s(:casgn, nil, :MyStruct2,
      s(:send,
        s(:const, nil, :Struct), :new,
        s(:sym, :a),
        s(:sym, :b))),
    s(:def, :test_struct_toplevel,
      s(:args),
      s(:begin,
        s(:lvasgn, :o,
          s(:send,
            s(:const, nil, :MyStruct2), :new,
            s(:int, 1),
            s(:int, 2))),
        s(:send, nil, :marshal_equal,
          s(:lvar, :o))))))
