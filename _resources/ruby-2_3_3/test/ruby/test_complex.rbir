s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :ComplexSub),
    s(:const, nil, :Complex), nil),
  s(:class,
    s(:const, nil, :Complex_Test),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_rationalize,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 1), :quo,
              s(:int, 3)),
            s(:send,
              s(:send, nil, :Complex,
                s(:send,
                  s(:int, 1), :/,
                  s(:float, 3.0)),
                s(:int, 0)), :rationalize),
            s(:str, "[ruby-core:38885]")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 1), :quo,
              s(:int, 5)),
            s(:send,
              s(:send, nil, :Complex,
                s(:float, 0.2),
                s(:int, 0)), :rationalize),
            s(:str, "[ruby-core:38885]")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 5), :quo,
              s(:int, 2)),
            s(:send,
              s(:send, nil, :Complex,
                s(:float, 2.5),
                s(:int, 0)), :rationalize,
              s(:int, 0)),
            s(:str, "[ruby-core:40667]")))),
      s(:def, :test_compsub,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :ComplexSub), :__send__,
              s(:sym, :convert),
              s(:int, 1))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Numeric),
            s(:lvar, :c)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :ComplexSub),
            s(:lvar, :c)),
          s(:lvasgn, :c2,
            s(:send,
              s(:lvar, :c), :+,
              s(:int, 1))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :ComplexSub),
            s(:lvar, :c2)),
          s(:lvasgn, :c2,
            s(:send,
              s(:lvar, :c), :-,
              s(:int, 1))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :ComplexSub),
            s(:lvar, :c2)),
          s(:lvasgn, :c3,
            s(:send,
              s(:lvar, :c), :-,
              s(:lvar, :c2))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :ComplexSub),
            s(:lvar, :c3)),
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:lvar, :c))),
          s(:lvasgn, :c5,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:lvar, :s))),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:lvar, :c5)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :ComplexSub),
            s(:lvar, :c5)),
          s(:lvasgn, :c1,
            s(:send, nil, :Complex,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :c1), :hash),
            s(:send,
              s(:lvar, :c), :hash),
            s(:str, "[ruby-dev:38850]")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:true),
              s(:true)),
            s(:array,
              s(:send,
                s(:lvar, :c), :eql?,
                s(:lvar, :c1)),
              s(:send,
                s(:lvar, :c1), :eql?,
                s(:lvar, :c)))))),
      s(:def, :test_eql_p,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 0))),
          s(:lvasgn, :c2,
            s(:send, nil, :Complex,
              s(:int, 0))),
          s(:lvasgn, :c3,
            s(:send, nil, :Complex,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :c), :eql?,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :eql?,
              s(:lvar, :c3))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :eql?,
              s(:int, 0))))),
      s(:def, :test_hash,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Fixnum),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 2)), :hash)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Fixnum),
            s(:send,
              s(:send, nil, :Complex,
                s(:float, 1.0),
                s(:float, 2.0)), :hash)),
          s(:lvasgn, :h,
            s(:hash)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:send, nil, :Complex,
              s(:int, 0)),
            s(:int, 0)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 1)),
            s(:int, 1)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 0)),
            s(:int, 2)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 1)),
            s(:int, 3)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :h), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :h), :[],
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 0)))),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 0)),
            s(:int, 9)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :h), :size)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:send, nil, :Complex,
              s(:float, 0.0),
              s(:float, 0.0)),
            s(:float, 9.0)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :h), :size)),
          s(:if,
            s(:and,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:float, 0.0), :/,
                    s(:int, 0))), :nan?),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:float, 0.0), :/,
                        s(:int, 0))), :eql?,
                    s(:send,
                      s(:float, 0.0), :/,
                      s(:int, 0)))), :!)),
            s(:begin,
              s(:lvasgn, :h,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:int, 3), :times),
                s(:args),
                s(:send,
                  s(:lvar, :h), :[]=,
                  s(:send, nil, :Complex,
                    s(:send,
                      s(:float, 0.0), :/,
                      s(:int, 0))),
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:int, 3),
                s(:send,
                  s(:lvar, :h), :size))), nil))),
      s(:def, :test_freeze,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 1))),
          s(:send,
            s(:lvar, :c), :freeze),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :c), :frozen?)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :String),
            s(:send,
              s(:lvar, :c), :to_s)))),
      s(:def, :test_conv,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 0)),
            s(:lvar, :c)),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)),
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)),
              s(:send,
                s(:int, 2), :**,
                s(:int, 32))),
            s(:lvar, :c)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)),
              s(:send,
                s(:int, 2), :**,
                s(:int, 32))),
            s(:array,
              s(:send,
                s(:lvar, :c), :real),
              s(:send,
                s(:lvar, :c), :imag))),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@),
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@),
              s(:send,
                s(:int, 2), :**,
                s(:int, 32))),
            s(:lvar, :c)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@),
              s(:send,
                s(:int, 2), :**,
                s(:int, 32))),
            s(:array,
              s(:send,
                s(:lvar, :c), :real),
              s(:send,
                s(:lvar, :c), :imag))),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)),
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)),
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@)),
            s(:lvar, :c)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)),
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@)),
            s(:array,
              s(:send,
                s(:lvar, :c), :real),
              s(:send,
                s(:lvar, :c), :imag))),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@),
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@),
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@)),
            s(:lvar, :c)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@),
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@)),
            s(:array,
              s(:send,
                s(:lvar, :c), :real),
              s(:send,
                s(:lvar, :c), :imag))),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 2)),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 4)),
            s(:lvar, :c)),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 2),
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 1)),
            s(:lvar, :c)),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 2)),
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, -1),
              s(:int, 3)),
            s(:lvar, :c)),
          s(:lvasgn, :c,
            s(:const,
              s(:const, nil, :Complex), :I)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 1)),
            s(:lvar, :c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 1)),
            s(:send, nil, :Complex,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 1)),
            s(:send, nil, :Complex,
              s(:str, "1"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 3.0),
              s(:float, 3.0)),
            s(:send, nil, :Complex,
              s(:str, "3.0"),
              s(:str, "3.0"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 1)),
            s(:send, nil, :Complex,
              s(:str, "3/3"),
              s(:str, "3/3"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :Complex,
              s(:nil))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :Complex,
              s(:send,
                s(:const, nil, :Object), :new))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Complex)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:if,
            s(:send,
              s(:begin,
                s(:send,
                  s(:float, 0.0), :/,
                  s(:int, 0))), :nan?),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:send, nil, :Complex,
                s(:send,
                  s(:float, 0.0), :/,
                  s(:int, 0)))), nil),
          s(:if,
            s(:send,
              s(:begin,
                s(:send,
                  s(:float, 1.0), :/,
                  s(:int, 0))), :infinite?),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:send, nil, :Complex,
                s(:send,
                  s(:float, 1.0), :/,
                  s(:int, 0)))), nil))),
      s(:def, :test_attr,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :c), :real)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :c), :imag)),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 4),
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :c), :real)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :c), :imag)),
          s(:if,
            s(:send,
              s(:send,
                s(:float, -0.0), :to_s), :==,
              s(:str, "-0.0")),
            s(:begin,
              s(:lvasgn, :c,
                s(:send, nil, :Complex,
                  s(:float, -0.0),
                  s(:float, -0.0))),
              s(:send, nil, :assert_equal,
                s(:str, "-0.0"),
                s(:send,
                  s(:send,
                    s(:lvar, :c), :real), :to_s)),
              s(:send, nil, :assert_equal,
                s(:str, "-0.0"),
                s(:send,
                  s(:send,
                    s(:lvar, :c), :imag), :to_s))), nil),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :c), :real)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :c), :imag)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :c), :imag),
            s(:send,
              s(:lvar, :c), :imaginary)),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 4),
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :c), :real)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :c), :imag)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :c), :imag),
            s(:send,
              s(:lvar, :c), :imaginary)),
          s(:if,
            s(:send,
              s(:send,
                s(:float, -0.0), :to_s), :==,
              s(:str, "-0.0")),
            s(:begin,
              s(:lvasgn, :c,
                s(:send, nil, :Complex,
                  s(:float, -0.0),
                  s(:float, -0.0))),
              s(:send, nil, :assert_equal,
                s(:str, "-0.0"),
                s(:send,
                  s(:send,
                    s(:lvar, :c), :real), :to_s)),
              s(:send, nil, :assert_equal,
                s(:str, "-0.0"),
                s(:send,
                  s(:send,
                    s(:lvar, :c), :imag), :to_s)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:lvar, :c), :imag), :to_s),
                s(:send,
                  s(:send,
                    s(:lvar, :c), :imaginary), :to_s))), nil),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :c), :real)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :c), :imag),
            s(:send,
              s(:lvar, :c), :imaginary)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :c), :imag)),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 4),
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :c), :real)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :c), :imag)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :c), :imag),
            s(:send,
              s(:lvar, :c), :imaginary)),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:float, -0.0),
              s(:float, -0.0))),
          s(:send, nil, :assert_equal,
            s(:str, "-0.0"),
            s(:send,
              s(:send,
                s(:lvar, :c), :real), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "-0.0"),
            s(:send,
              s(:send,
                s(:lvar, :c), :imag), :to_s)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :c), :imag), :to_s),
            s(:send,
              s(:send,
                s(:lvar, :c), :imaginary), :to_s)))),
      s(:def, :test_attr2,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :integer?)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :real?)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 0)), :zero?)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 0),
                s(:int, 0)), :zero?)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 0)), :zero?)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 0),
                s(:int, 1)), :zero?)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 1)), :zero?)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 0)), :nonzero?)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 0),
                s(:int, 0)), :nonzero?)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 0)),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 0)), :nonzero?)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 0),
                s(:int, 1)), :nonzero?)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 1)), :nonzero?)))),
      s(:def, :test_rect,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:const, nil, :Complex), :rectangular,
                s(:int, 1),
                s(:int, 2)), :rectangular)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:const, nil, :Complex), :rect,
                s(:int, 1),
                s(:int, 2)), :rect)))),
      s(:def, :test_polar,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:const, nil, :Complex), :polar,
                s(:int, 1),
                s(:int, 2)), :polar)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Complex), :polar,
              s(:float, 1.0),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Math), :PI), :*,
                  s(:int, 2)), :/,
                s(:int, 3))),
            s(:send,
              s(:const, nil, :Complex), :polar,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Math), :PI), :*,
                  s(:int, 2)), :/,
                s(:int, 3)))))),
      s(:def, :test_uplus,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1)), :+@)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, -1)),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, -1)), :+@)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 1)), :+@)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, -1),
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, -1),
                s(:int, 1)), :+@)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, -1)),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, -1)), :+@)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, -1),
              s(:int, -1)),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, -1),
                s(:int, -1)), :+@)),
          s(:if,
            s(:send,
              s(:send,
                s(:float, -0.0), :to_s), :==,
              s(:str, "-0.0")),
            s(:begin,
              s(:lvasgn, :c,
                s(:send,
                  s(:send, nil, :Complex,
                    s(:float, 0.0),
                    s(:float, 0.0)), :+@)),
              s(:send, nil, :assert_equal,
                s(:str, "0.0"),
                s(:send,
                  s(:send,
                    s(:lvar, :c), :real), :to_s)),
              s(:send, nil, :assert_equal,
                s(:str, "0.0"),
                s(:send,
                  s(:send,
                    s(:lvar, :c), :imag), :to_s)),
              s(:lvasgn, :c,
                s(:send,
                  s(:send, nil, :Complex,
                    s(:float, -0.0),
                    s(:float, -0.0)), :+@)),
              s(:send, nil, :assert_equal,
                s(:str, "-0.0"),
                s(:send,
                  s(:send,
                    s(:lvar, :c), :real), :to_s)),
              s(:send, nil, :assert_equal,
                s(:str, "-0.0"),
                s(:send,
                  s(:send,
                    s(:lvar, :c), :imag), :to_s))), nil))),
      s(:def, :test_negate,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, -1)),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1)), :-@)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, -1)), :-@)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, -1),
              s(:int, -1)),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 1)), :-@)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, -1)),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, -1),
                s(:int, 1)), :-@)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, -1),
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, -1)), :-@)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, -1),
                s(:int, -1)), :-@)),
          s(:if,
            s(:send,
              s(:send,
                s(:float, -0.0), :to_s), :==,
              s(:str, "-0.0")),
            s(:begin,
              s(:lvasgn, :c,
                s(:send,
                  s(:send, nil, :Complex,
                    s(:float, 0.0),
                    s(:float, 0.0)), :-@)),
              s(:send, nil, :assert_equal,
                s(:str, "-0.0"),
                s(:send,
                  s(:send,
                    s(:lvar, :c), :real), :to_s)),
              s(:send, nil, :assert_equal,
                s(:str, "-0.0"),
                s(:send,
                  s(:send,
                    s(:lvar, :c), :imag), :to_s)),
              s(:lvasgn, :c,
                s(:send,
                  s(:send, nil, :Complex,
                    s(:float, -0.0),
                    s(:float, -0.0)), :-@)),
              s(:send, nil, :assert_equal,
                s(:str, "0.0"),
                s(:send,
                  s(:send,
                    s(:lvar, :c), :real), :to_s)),
              s(:send, nil, :assert_equal,
                s(:str, "0.0"),
                s(:send,
                  s(:send,
                    s(:lvar, :c), :imag), :to_s))), nil))),
      s(:def, :test_add,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Complex,
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 3),
              s(:int, 5)),
            s(:send,
              s(:lvar, :c), :+,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 3),
              s(:int, 2)),
            s(:send,
              s(:lvar, :c), :+,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 3.0),
              s(:int, 2)),
            s(:send,
              s(:lvar, :c), :+,
              s(:float, 2.0))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 3),
                s(:int, 1)),
              s(:send, nil, :Rational,
                s(:int, 2))),
            s(:send,
              s(:lvar, :c), :+,
              s(:send, nil, :Rational,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 5),
                s(:int, 3)),
              s(:send, nil, :Rational,
                s(:int, 2))),
            s(:send,
              s(:lvar, :c), :+,
              s(:send, nil, :Rational,
                s(:int, 2),
                s(:int, 3)))))),
      s(:def, :test_sub,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Complex,
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, -1),
              s(:int, -1)),
            s(:send,
              s(:lvar, :c), :-,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, -1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :c), :-,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -1.0),
              s(:int, 2)),
            s(:send,
              s(:lvar, :c), :-,
              s(:float, 2.0))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, 1)),
              s(:send, nil, :Rational,
                s(:int, 2))),
            s(:send,
              s(:lvar, :c), :-,
              s(:send, nil, :Rational,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 3)),
              s(:send, nil, :Rational,
                s(:int, 2))),
            s(:send,
              s(:lvar, :c), :-,
              s(:send, nil, :Rational,
                s(:int, 2),
                s(:int, 3)))))),
      s(:def, :test_mul,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Complex,
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, -4),
              s(:int, 7)),
            s(:send,
              s(:lvar, :c), :*,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 2),
              s(:int, 4)),
            s(:send,
              s(:lvar, :c), :*,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 2.0),
              s(:float, 4.0)),
            s(:send,
              s(:lvar, :c), :*,
              s(:float, 2.0))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 2),
                s(:int, 1)),
              s(:send, nil, :Rational,
                s(:int, 4))),
            s(:send,
              s(:lvar, :c), :*,
              s(:send, nil, :Rational,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 2),
                s(:int, 3)),
              s(:send, nil, :Rational,
                s(:int, 4),
                s(:int, 3))),
            s(:send,
              s(:lvar, :c), :*,
              s(:send, nil, :Rational,
                s(:int, 2),
                s(:int, 3)))),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:const,
                s(:const, nil, :Float), :INFINITY),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:const,
                s(:const, nil, :Float), :INFINITY),
              s(:int, 0)),
            s(:send,
              s(:lvar, :c), :*,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:const,
                s(:const, nil, :Float), :INFINITY)),
            s(:send,
              s(:lvar, :c), :*,
              s(:send, nil, :Complex,
                s(:int, 0),
                s(:int, 1)))),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:const,
                s(:const, nil, :Float), :INFINITY))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:const,
                s(:const, nil, :Float), :INFINITY)),
            s(:send,
              s(:lvar, :c), :*,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send,
                s(:const,
                  s(:const, nil, :Float), :INFINITY), :-@),
              s(:int, 0)),
            s(:send,
              s(:lvar, :c), :*,
              s(:send, nil, :Complex,
                s(:int, 0),
                s(:int, 1)))))),
      s(:def, :test_div,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Complex,
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 8),
                s(:int, 13)),
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 13))),
            s(:send,
              s(:lvar, :c), :/,
              s(:lvar, :c2))),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:float, 1.0),
              s(:float, 2.0))),
          s(:lvasgn, :c2,
            s(:send, nil, :Complex,
              s(:float, 2.0),
              s(:float, 3.0))),
          s(:lvasgn, :r,
            s(:send,
              s(:lvar, :c), :/,
              s(:lvar, :c2))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.615),
            s(:send,
              s(:lvar, :r), :real),
            s(:float, 0.001)),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.076),
            s(:send,
              s(:lvar, :r), :imag),
            s(:float, 0.001)),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Complex,
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)),
              s(:int, 1)),
            s(:send,
              s(:lvar, :c), :/,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.5),
              s(:float, 1.0)),
            s(:send,
              s(:lvar, :c), :/,
              s(:float, 2.0))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)),
              s(:send, nil, :Rational,
                s(:int, 1))),
            s(:send,
              s(:lvar, :c), :/,
              s(:send, nil, :Rational,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 3),
                s(:int, 2)),
              s(:send, nil, :Rational,
                s(:int, 3))),
            s(:send,
              s(:lvar, :c), :/,
              s(:send, nil, :Rational,
                s(:int, 2),
                s(:int, 3)))))),
      s(:def, :test_quo,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Complex,
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 8),
                s(:int, 13)),
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 13))),
            s(:send,
              s(:lvar, :c), :quo,
              s(:lvar, :c2))),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:float, 1.0),
              s(:float, 2.0))),
          s(:lvasgn, :c2,
            s(:send, nil, :Complex,
              s(:float, 2.0),
              s(:float, 3.0))),
          s(:lvasgn, :r,
            s(:send,
              s(:lvar, :c), :quo,
              s(:lvar, :c2))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.615),
            s(:send,
              s(:lvar, :r), :real),
            s(:float, 0.001)),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.076),
            s(:send,
              s(:lvar, :r), :imag),
            s(:float, 0.001)),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Complex,
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)),
              s(:int, 1)),
            s(:send,
              s(:lvar, :c), :quo,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.5),
              s(:float, 1.0)),
            s(:send,
              s(:lvar, :c), :quo,
              s(:float, 2.0))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)),
              s(:send, nil, :Rational,
                s(:int, 1))),
            s(:send,
              s(:lvar, :c), :/,
              s(:send, nil, :Rational,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 3),
                s(:int, 2)),
              s(:send, nil, :Rational,
                s(:int, 3))),
            s(:send,
              s(:lvar, :c), :/,
              s(:send, nil, :Rational,
                s(:int, 2),
                s(:int, 3)))))),
      s(:def, :test_fdiv,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Complex,
              s(:int, 2),
              s(:int, 3))),
          s(:lvasgn, :r,
            s(:send,
              s(:lvar, :c), :fdiv,
              s(:lvar, :c2))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.615),
            s(:send,
              s(:lvar, :r), :real),
            s(:float, 0.001)),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.076),
            s(:send,
              s(:lvar, :r), :imag),
            s(:float, 0.001)),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:float, 1.0),
              s(:float, 2.0))),
          s(:lvasgn, :c2,
            s(:send, nil, :Complex,
              s(:float, 2.0),
              s(:float, 3.0))),
          s(:lvasgn, :r,
            s(:send,
              s(:lvar, :c), :fdiv,
              s(:lvar, :c2))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.615),
            s(:send,
              s(:lvar, :r), :real),
            s(:float, 0.001)),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.076),
            s(:send,
              s(:lvar, :r), :imag),
            s(:float, 0.001)),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Complex,
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.5),
              s(:float, 1.0)),
            s(:send,
              s(:lvar, :c), :fdiv,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.5),
              s(:float, 1.0)),
            s(:send,
              s(:lvar, :c), :fdiv,
              s(:float, 2.0))))),
      s(:def, :test_expt,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Complex,
              s(:int, 2),
              s(:int, 3))),
          s(:lvasgn, :r,
            s(:send,
              s(:lvar, :c), :**,
              s(:lvar, :c2))),
          s(:send, nil, :assert_in_delta,
            s(:float, -0.015),
            s(:send,
              s(:lvar, :r), :real),
            s(:float, 0.001)),
          s(:send, nil, :assert_in_delta,
            s(:float, -0.179),
            s(:send,
              s(:lvar, :r), :imag),
            s(:float, 0.001)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, -3),
              s(:int, 4)),
            s(:send,
              s(:lvar, :c), :**,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, -3),
                s(:int, 25)),
              s(:send, nil, :Rational,
                s(:int, -4),
                s(:int, 25))),
            s(:send,
              s(:lvar, :c), :**,
              s(:int, -2))),
          s(:lvasgn, :r,
            s(:send,
              s(:lvar, :c), :**,
              s(:float, 2.0))),
          s(:send, nil, :assert_in_delta,
            s(:float, -3.0),
            s(:send,
              s(:lvar, :r), :real),
            s(:float, 0.001)),
          s(:send, nil, :assert_in_delta,
            s(:float, 4.0),
            s(:send,
              s(:lvar, :r), :imag),
            s(:float, 0.001)),
          s(:lvasgn, :r,
            s(:send,
              s(:lvar, :c), :**,
              s(:float, -2.0))),
          s(:send, nil, :assert_in_delta,
            s(:float, -0.12),
            s(:send,
              s(:lvar, :r), :real),
            s(:float, 0.001)),
          s(:send, nil, :assert_in_delta,
            s(:float, -0.16),
            s(:send,
              s(:lvar, :r), :imag),
            s(:float, 0.001)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, -3),
              s(:int, 4)),
            s(:send,
              s(:lvar, :c), :**,
              s(:send, nil, :Rational,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, -3),
                s(:int, 25)),
              s(:send, nil, :Rational,
                s(:int, -4),
                s(:int, 25))),
            s(:send,
              s(:lvar, :c), :**,
              s(:send, nil, :Rational,
                s(:int, -2)))),
          s(:lvasgn, :r,
            s(:send,
              s(:lvar, :c), :**,
              s(:send, nil, :Rational,
                s(:int, 2),
                s(:int, 3)))),
          s(:send, nil, :assert_in_delta,
            s(:float, 1.264),
            s(:send,
              s(:lvar, :r), :real),
            s(:float, 0.001)),
          s(:send, nil, :assert_in_delta,
            s(:float, 1.15),
            s(:send,
              s(:lvar, :r), :imag),
            s(:float, 0.001)),
          s(:lvasgn, :r,
            s(:send,
              s(:lvar, :c), :**,
              s(:send, nil, :Rational,
                s(:int, -2),
                s(:int, 3)))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.432),
            s(:send,
              s(:lvar, :r), :real),
            s(:float, 0.001)),
          s(:send, nil, :assert_in_delta,
            s(:float, -0.393),
            s(:send,
              s(:lvar, :r), :imag),
            s(:float, 0.001)))),
      s(:def, :test_cmp,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:int, 1), :<=>,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 1)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 1)), :<=>,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 1)), :<=>,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 1)))))),
      s(:def, :test_eqeq,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 1)),
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, -1)),
            s(:send, nil, :Complex,
              s(:int, -1),
              s(:int, 0))),
          s(:send, nil, :assert_not_equal,
            s(:send, nil, :Complex,
              s(:int, 1)),
            s(:send, nil, :Complex,
              s(:int, 2),
              s(:int, 1))),
          s(:send, nil, :assert_operator,
            s(:send, nil, :Complex,
              s(:int, 2),
              s(:int, 1)),
            s(:sym, :!=),
            s(:send, nil, :Complex,
              s(:int, 1))),
          s(:send, nil, :assert_not_equal,
            s(:nil),
            s(:send, nil, :Complex,
              s(:int, 1))),
          s(:send, nil, :assert_not_equal,
            s(:str, ""),
            s(:send, nil, :Complex,
              s(:int, 1))),
          s(:lvasgn, :nan,
            s(:send,
              s(:float, 0.0), :/,
              s(:int, 0))),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :nan), :nan?),
              s(:send,
                s(:lvar, :nan), :!=,
                s(:lvar, :nan))),
            s(:begin,
              s(:send, nil, :assert_not_equal,
                s(:send, nil, :Complex,
                  s(:lvar, :nan),
                  s(:int, 0)),
                s(:send, nil, :Complex,
                  s(:lvar, :nan),
                  s(:int, 0))),
              s(:send, nil, :assert_not_equal,
                s(:send, nil, :Complex,
                  s(:int, 0),
                  s(:lvar, :nan)),
                s(:send, nil, :Complex,
                  s(:int, 0),
                  s(:lvar, :nan))),
              s(:send, nil, :assert_not_equal,
                s(:send, nil, :Complex,
                  s(:lvar, :nan),
                  s(:lvar, :nan)),
                s(:send, nil, :Complex,
                  s(:lvar, :nan),
                  s(:lvar, :nan)))), nil))),
      s(:def, :test_coerce,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :Complex,
                s(:int, 2)),
              s(:send, nil, :Complex,
                s(:int, 1))),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1)), :coerce,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :Complex,
                s(:float, 2.2)),
              s(:send, nil, :Complex,
                s(:int, 1))),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1)), :coerce,
              s(:float, 2.2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :Complex,
                s(:send, nil, :Rational,
                  s(:int, 2))),
              s(:send, nil, :Complex,
                s(:int, 1))),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1)), :coerce,
              s(:send, nil, :Rational,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :Complex,
                s(:int, 2)),
              s(:send, nil, :Complex,
                s(:int, 1))),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1)), :coerce,
              s(:send, nil, :Complex,
                s(:int, 2)))),
          s(:lvasgn, :obj,
            s(:send,
              s(:send, nil, :eval,
                s(:str, "class C🗿; self; end")), :new)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "C\\u{1f5ff}"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1)), :coerce,
              s(:lvar, :obj))))),
      s(:class,
        s(:const, nil, :ObjectX), nil,
        s(:begin,
          s(:def, :+,
            s(:args,
              s(:arg, :x)),
            s(:send, nil, :Rational,
              s(:int, 1))),
          s(:alias,
            s(:sym, :-),
            s(:sym, :+)),
          s(:alias,
            s(:sym, :*),
            s(:sym, :+)),
          s(:alias,
            s(:sym, :/),
            s(:sym, :+)),
          s(:alias,
            s(:sym, :quo),
            s(:sym, :+)),
          s(:alias,
            s(:sym, :**),
            s(:sym, :+)),
          s(:def, :coerce,
            s(:args,
              s(:arg, :x)),
            s(:array,
              s(:lvar, :x),
              s(:send, nil, :Complex,
                s(:int, 1)))))),
      s(:def, :test_coerce2,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :ObjectX), :new)),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "+"),
                s(:str, "-"),
                s(:str, "*"),
                s(:str, "/"),
                s(:str, "quo"),
                s(:str, "**")), :each),
            s(:args,
              s(:arg, :op)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Numeric),
              s(:send,
                s(:send, nil, :Complex,
                  s(:int, 1)), :__send__,
                s(:lvar, :op),
                s(:lvar, :x)))))),
      s(:def, :test_math,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_in_delta,
            s(:float, 2.236),
            s(:send,
              s(:lvar, :c), :abs),
            s(:float, 0.001)),
          s(:send, nil, :assert_in_delta,
            s(:float, 2.236),
            s(:send,
              s(:lvar, :c), :magnitude),
            s(:float, 0.001)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :c), :abs2)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :c), :abs),
            s(:send,
              s(:const, nil, :Math), :sqrt,
              s(:send,
                s(:lvar, :c), :*,
                s(:send,
                  s(:lvar, :c), :conj)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :c), :abs),
            s(:send,
              s(:const, nil, :Math), :sqrt,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :c), :real), :**,
                  s(:int, 2)), :+,
                s(:send,
                  s(:send,
                    s(:lvar, :c), :imag), :**,
                  s(:int, 2))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :c), :abs2),
            s(:send,
              s(:lvar, :c), :*,
              s(:send,
                s(:lvar, :c), :conj))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :c), :abs2),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :c), :real), :**,
                s(:int, 2)), :+,
              s(:send,
                s(:send,
                  s(:lvar, :c), :imag), :**,
                s(:int, 2)))),
          s(:send, nil, :assert_in_delta,
            s(:float, 1.107),
            s(:send,
              s(:lvar, :c), :arg),
            s(:float, 0.001)),
          s(:send, nil, :assert_in_delta,
            s(:float, 1.107),
            s(:send,
              s(:lvar, :c), :angle),
            s(:float, 0.001)),
          s(:send, nil, :assert_in_delta,
            s(:float, 1.107),
            s(:send,
              s(:lvar, :c), :phase),
            s(:float, 0.001)),
          s(:lvasgn, :r,
            s(:send,
              s(:lvar, :c), :polar)),
          s(:send, nil, :assert_in_delta,
            s(:float, 2.236),
            s(:send,
              s(:lvar, :r), :[],
              s(:int, 0)),
            s(:float, 0.001)),
          s(:send, nil, :assert_in_delta,
            s(:float, 1.107),
            s(:send,
              s(:lvar, :r), :[],
              s(:int, 1)),
            s(:float, 0.001)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, -2)),
            s(:send,
              s(:lvar, :c), :conjugate)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, -2)),
            s(:send,
              s(:lvar, :c), :conj)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :c), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :c), :denominator)))),
      s(:def, :test_to_s,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :String),
            s(:send,
              s(:lvar, :c), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "1+2i"),
            s(:send,
              s(:lvar, :c), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "0+2i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 0),
                s(:int, 2)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "0-2i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 0),
                s(:int, -2)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "1+2i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 2)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "-1+2i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, -1),
                s(:int, 2)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "-1-2i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, -1),
                s(:int, -2)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "1-2i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, -2)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "-1-2i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, -1),
                s(:int, -2)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "0+2.0i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 0),
                s(:float, 2.0)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "0-2.0i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 0),
                s(:float, -2.0)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "1.0+2.0i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:float, 1.0),
                s(:float, 2.0)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "-1.0+2.0i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:float, -1.0),
                s(:float, 2.0)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "-1.0-2.0i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:float, -1.0),
                s(:float, -2.0)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "1.0-2.0i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:float, 1.0),
                s(:float, -2.0)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "-1.0-2.0i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:float, -1.0),
                s(:float, -2.0)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "0+2/1i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 0),
                s(:send, nil, :Rational,
                  s(:int, 2))), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "0-2/1i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 0),
                s(:send, nil, :Rational,
                  s(:int, -2))), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "1+2/1i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:send, nil, :Rational,
                  s(:int, 2))), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "-1+2/1i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, -1),
                s(:send, nil, :Rational,
                  s(:int, 2))), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "-1-2/1i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, -1),
                s(:send, nil, :Rational,
                  s(:int, -2))), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "1-2/1i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:send, nil, :Rational,
                  s(:int, -2))), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "-1-2/1i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, -1),
                s(:send, nil, :Rational,
                  s(:int, -2))), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "0+2/3i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 0),
                s(:send, nil, :Rational,
                  s(:int, 2),
                  s(:int, 3))), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "0-2/3i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 0),
                s(:send, nil, :Rational,
                  s(:int, -2),
                  s(:int, 3))), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "1+2/3i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:send, nil, :Rational,
                  s(:int, 2),
                  s(:int, 3))), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "-1+2/3i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, -1),
                s(:send, nil, :Rational,
                  s(:int, 2),
                  s(:int, 3))), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "-1-2/3i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, -1),
                s(:send, nil, :Rational,
                  s(:int, -2),
                  s(:int, 3))), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "1-2/3i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:send, nil, :Rational,
                  s(:int, -2),
                  s(:int, 3))), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "-1-2/3i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, -1),
                s(:send, nil, :Rational,
                  s(:int, -2),
                  s(:int, 3))), :to_s)),
          s(:lvasgn, :nan,
            s(:send,
              s(:float, 0.0), :/,
              s(:int, 0))),
          s(:lvasgn, :inf,
            s(:send,
              s(:float, 1.0), :/,
              s(:int, 0))),
          s(:if,
            s(:send,
              s(:lvar, :nan), :nan?),
            s(:send, nil, :assert_equal,
              s(:str, "NaN+NaN*i"),
              s(:send,
                s(:send, nil, :Complex,
                  s(:lvar, :nan),
                  s(:lvar, :nan)), :to_s)), nil),
          s(:if,
            s(:send,
              s(:lvar, :inf), :infinite?),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, "Infinity+Infinity*i"),
                s(:send,
                  s(:send, nil, :Complex,
                    s(:lvar, :inf),
                    s(:lvar, :inf)), :to_s)),
              s(:send, nil, :assert_equal,
                s(:str, "Infinity-Infinity*i"),
                s(:send,
                  s(:send, nil, :Complex,
                    s(:lvar, :inf),
                    s(:send,
                      s(:lvar, :inf), :-@)), :to_s))), nil))),
      s(:def, :test_inspect,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :String),
            s(:send,
              s(:lvar, :c), :inspect)),
          s(:send, nil, :assert_equal,
            s(:str, "(1+2i)"),
            s(:send,
              s(:lvar, :c), :inspect)))),
      s(:def, :test_marshal,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 2))),
          s(:block,
            s(:send,
              s(:lvar, :c), :instance_eval),
            s(:args),
            s(:ivasgn, :@ivar,
              s(:int, 9))),
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:lvar, :c))),
          s(:lvasgn, :c2,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:lvar, :s))),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:lvar, :c2)),
          s(:send, nil, :assert_equal,
            s(:int, 9),
            s(:send,
              s(:lvar, :c2), :instance_variable_get,
              s(:sym, :@ivar))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Complex),
            s(:lvar, :c2)),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)),
              s(:send, nil, :Rational,
                s(:int, 2),
                s(:int, 3)))),
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:lvar, :c))),
          s(:lvasgn, :c2,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:lvar, :s))),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:lvar, :c2)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Complex),
            s(:lvar, :c2)),
          s(:lvasgn, :bug3656,
            s(:str, "[ruby-core:31622]")),
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 2))),
          s(:send,
            s(:lvar, :c), :freeze),
          s(:send, nil, :assert_predicate,
            s(:lvar, :c),
            s(:sym, :frozen?)),
          s(:lvasgn, :result,
            s(:rescue,
              s(:send,
                s(:lvar, :c), :marshal_load,
                s(:array,
                  s(:int, 2),
                  s(:int, 3))),
              s(:resbody, nil, nil,
                s(:sym, :fail)), nil)),
          s(:send, nil, :assert_equal,
            s(:sym, :fail),
            s(:lvar, :result),
            s(:lvar, :bug3656)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 2)),
            s(:lvar, :c)))),
      s(:def, :test_marshal_compatibility,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6625,
            s(:str, "[ruby-core:45775]")),
          s(:lvasgn, :dump,
            s(:str, "\u0004\bo:\fComplex\a:\n@reali\u0006:\v@imagei\a")),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:lvar, :bug6625)),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 2)),
              s(:send,
                s(:const, nil, :Marshal), :load,
                s(:lvar, :dump)),
              s(:lvar, :bug6625))))),
      s(:def, :test_parse,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5)),
            s(:send,
              s(:str, "5"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, -5)),
            s(:send,
              s(:str, "-5"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5),
              s(:int, 3)),
            s(:send,
              s(:str, "5+3i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, -5),
              s(:int, 3)),
            s(:send,
              s(:str, "-5+3i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5),
              s(:int, -3)),
            s(:send,
              s(:str, "5-3i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, -5),
              s(:int, -3)),
            s(:send,
              s(:str, "-5-3i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 3)),
            s(:send,
              s(:str, "3i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, -3)),
            s(:send,
              s(:str, "-3i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5),
              s(:int, 1)),
            s(:send,
              s(:str, "5+i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 1)),
            s(:send,
              s(:str, "i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 1)),
            s(:send,
              s(:str, "+i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, -1)),
            s(:send,
              s(:str, "-i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5),
              s(:int, 3)),
            s(:send,
              s(:str, "5+3I"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5),
              s(:int, 3)),
            s(:send,
              s(:str, "5+3j"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5),
              s(:int, 3)),
            s(:send,
              s(:str, "5+3J"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 3)),
            s(:send,
              s(:str, "3I"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 3)),
            s(:send,
              s(:str, "3j"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 3)),
            s(:send,
              s(:str, "3J"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 1)),
            s(:send,
              s(:str, "I"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 1)),
            s(:send,
              s(:str, "J"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5.0)),
            s(:send,
              s(:str, "5.0"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -5.0)),
            s(:send,
              s(:str, "-5.0"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5.0),
              s(:float, 3.0)),
            s(:send,
              s(:str, "5.0+3.0i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -5.0),
              s(:float, 3.0)),
            s(:send,
              s(:str, "-5.0+3.0i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5.0),
              s(:float, -3.0)),
            s(:send,
              s(:str, "5.0-3.0i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -5.0),
              s(:float, -3.0)),
            s(:send,
              s(:str, "-5.0-3.0i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.0),
              s(:float, 3.0)),
            s(:send,
              s(:str, "3.0i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.0),
              s(:float, -3.0)),
            s(:send,
              s(:str, "-3.0i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5.1)),
            s(:send,
              s(:str, "5.1"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -5.2)),
            s(:send,
              s(:str, "-5.2"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5.3),
              s(:float, 3.4)),
            s(:send,
              s(:str, "5.3+3.4i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -5.5),
              s(:float, 3.6)),
            s(:send,
              s(:str, "-5.5+3.6i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5.3),
              s(:float, -3.4)),
            s(:send,
              s(:str, "5.3-3.4i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -5.5),
              s(:float, -3.6)),
            s(:send,
              s(:str, "-5.5-3.6i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.0),
              s(:float, 3.1)),
            s(:send,
              s(:str, "3.1i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.0),
              s(:float, -3.2)),
            s(:send,
              s(:str, "-3.2i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5.0)),
            s(:send,
              s(:str, "5e0"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -5.0)),
            s(:send,
              s(:str, "-5e0"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5.0),
              s(:float, 3.0)),
            s(:send,
              s(:str, "5e0+3e0i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -5.0),
              s(:float, 3.0)),
            s(:send,
              s(:str, "-5e0+3e0i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5.0),
              s(:float, -3.0)),
            s(:send,
              s(:str, "5e0-3e0i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -5.0),
              s(:float, -3.0)),
            s(:send,
              s(:str, "-5e0-3e0i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.0),
              s(:float, 3.0)),
            s(:send,
              s(:str, "3e0i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.0),
              s(:float, -3.0)),
            s(:send,
              s(:str, "-3e0i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 50.0)),
            s(:send,
              s(:str, "5e1"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -500.0)),
            s(:send,
              s(:str, "-5e2"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5000.0),
              s(:float, 30000.0)),
            s(:send,
              s(:str, "5e003+3e4i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -500000.0),
              s(:float, 3000000.0)),
            s(:send,
              s(:str, "-5e5+3e006i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5000.0),
              s(:float, -30000.0)),
            s(:send,
              s(:str, "5e003-3e4i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -500000.0),
              s(:float, -3000000.0)),
            s(:send,
              s(:str, "-5e5-3e006i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.0),
              s(:float, 30.0)),
            s(:send,
              s(:str, "3e1i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.0),
              s(:float, -300.0)),
            s(:send,
              s(:str, "-3e2i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.33)),
            s(:send,
              s(:str, ".33"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.33)),
            s(:send,
              s(:str, "0.33"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -0.33)),
            s(:send,
              s(:str, "-.33"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -0.33)),
            s(:send,
              s(:str, "-0.33"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -0.33)),
            s(:send,
              s(:str, "-0.3_3"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Complex), :polar,
              s(:int, 10),
              s(:int, 10)),
            s(:send,
              s(:str, "10@10"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Complex), :polar,
              s(:int, -10),
              s(:int, -10)),
            s(:send,
              s(:str, "-10@-10"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Complex), :polar,
              s(:float, 10.5),
              s(:float, 10.5)),
            s(:send,
              s(:str, "10.5@10.5"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Complex), :polar,
              s(:float, -10.5),
              s(:float, -10.5)),
            s(:send,
              s(:str, "-10.5@-10.5"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5)),
            s(:send, nil, :Complex,
              s(:str, "5"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, -5)),
            s(:send, nil, :Complex,
              s(:str, "-5"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5),
              s(:int, 3)),
            s(:send, nil, :Complex,
              s(:str, "5+3i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, -5),
              s(:int, 3)),
            s(:send, nil, :Complex,
              s(:str, "-5+3i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5),
              s(:int, -3)),
            s(:send, nil, :Complex,
              s(:str, "5-3i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, -5),
              s(:int, -3)),
            s(:send, nil, :Complex,
              s(:str, "-5-3i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 3)),
            s(:send, nil, :Complex,
              s(:str, "3i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, -3)),
            s(:send, nil, :Complex,
              s(:str, "-3i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5),
              s(:int, 1)),
            s(:send, nil, :Complex,
              s(:str, "5+i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 1)),
            s(:send, nil, :Complex,
              s(:str, "i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 1)),
            s(:send, nil, :Complex,
              s(:str, "+i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, -1)),
            s(:send, nil, :Complex,
              s(:str, "-i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5),
              s(:int, 3)),
            s(:send, nil, :Complex,
              s(:str, "5+3I"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5),
              s(:int, 3)),
            s(:send, nil, :Complex,
              s(:str, "5+3j"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5),
              s(:int, 3)),
            s(:send, nil, :Complex,
              s(:str, "5+3J"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 3)),
            s(:send, nil, :Complex,
              s(:str, "3I"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 3)),
            s(:send, nil, :Complex,
              s(:str, "3j"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 3)),
            s(:send, nil, :Complex,
              s(:str, "3J"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 1)),
            s(:send, nil, :Complex,
              s(:str, "I"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0),
              s(:int, 1)),
            s(:send, nil, :Complex,
              s(:str, "J"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5.0)),
            s(:send, nil, :Complex,
              s(:str, "5.0"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -5.0)),
            s(:send, nil, :Complex,
              s(:str, "-5.0"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5.0),
              s(:float, 3.0)),
            s(:send, nil, :Complex,
              s(:str, "5.0+3.0i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -5.0),
              s(:float, 3.0)),
            s(:send, nil, :Complex,
              s(:str, "-5.0+3.0i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5.0),
              s(:float, -3.0)),
            s(:send, nil, :Complex,
              s(:str, "5.0-3.0i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -5.0),
              s(:float, -3.0)),
            s(:send, nil, :Complex,
              s(:str, "-5.0-3.0i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.0),
              s(:float, 3.0)),
            s(:send, nil, :Complex,
              s(:str, "3.0i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.0),
              s(:float, -3.0)),
            s(:send, nil, :Complex,
              s(:str, "-3.0i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5.1)),
            s(:send, nil, :Complex,
              s(:str, "5.1"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -5.2)),
            s(:send, nil, :Complex,
              s(:str, "-5.2"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5.3),
              s(:float, 3.4)),
            s(:send, nil, :Complex,
              s(:str, "5.3+3.4i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -5.5),
              s(:float, 3.6)),
            s(:send, nil, :Complex,
              s(:str, "-5.5+3.6i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5.3),
              s(:float, -3.4)),
            s(:send, nil, :Complex,
              s(:str, "5.3-3.4i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -5.5),
              s(:float, -3.6)),
            s(:send, nil, :Complex,
              s(:str, "-5.5-3.6i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.0),
              s(:float, 3.1)),
            s(:send, nil, :Complex,
              s(:str, "3.1i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.0),
              s(:float, -3.2)),
            s(:send, nil, :Complex,
              s(:str, "-3.2i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5.0)),
            s(:send, nil, :Complex,
              s(:str, "5e0"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -5.0)),
            s(:send, nil, :Complex,
              s(:str, "-5e0"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5.0),
              s(:float, 3.0)),
            s(:send, nil, :Complex,
              s(:str, "5e0+3e0i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -5.0),
              s(:float, 3.0)),
            s(:send, nil, :Complex,
              s(:str, "-5e0+3e0i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5.0),
              s(:float, -3.0)),
            s(:send, nil, :Complex,
              s(:str, "5e0-3e0i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -5.0),
              s(:float, -3.0)),
            s(:send, nil, :Complex,
              s(:str, "-5e0-3e0i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.0),
              s(:float, 3.0)),
            s(:send, nil, :Complex,
              s(:str, "3e0i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.0),
              s(:float, -3.0)),
            s(:send, nil, :Complex,
              s(:str, "-3e0i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 50.0)),
            s(:send, nil, :Complex,
              s(:str, "5e1"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -500.0)),
            s(:send, nil, :Complex,
              s(:str, "-5e2"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5000.0),
              s(:float, 30000.0)),
            s(:send, nil, :Complex,
              s(:str, "5e003+3e4i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -500000.0),
              s(:float, 3000000.0)),
            s(:send, nil, :Complex,
              s(:str, "-5e5+3e006i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 5000.0),
              s(:float, -30000.0)),
            s(:send, nil, :Complex,
              s(:str, "5e003-3e4i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -500000.0),
              s(:float, -3000000.0)),
            s(:send, nil, :Complex,
              s(:str, "-5e5-3e006i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.0),
              s(:float, 30.0)),
            s(:send, nil, :Complex,
              s(:str, "3e1i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.0),
              s(:float, -300.0)),
            s(:send, nil, :Complex,
              s(:str, "-3e2i"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.33)),
            s(:send, nil, :Complex,
              s(:str, ".33"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.33)),
            s(:send, nil, :Complex,
              s(:str, "0.33"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -0.33)),
            s(:send, nil, :Complex,
              s(:str, "-.33"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -0.33)),
            s(:send, nil, :Complex,
              s(:str, "-0.33"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, -0.33)),
            s(:send, nil, :Complex,
              s(:str, "-0.3_3"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Complex), :polar,
              s(:int, 10),
              s(:int, 10)),
            s(:send, nil, :Complex,
              s(:str, "10@10"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Complex), :polar,
              s(:int, -10),
              s(:int, -10)),
            s(:send, nil, :Complex,
              s(:str, "-10@-10"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Complex), :polar,
              s(:float, 10.5),
              s(:float, 10.5)),
            s(:send, nil, :Complex,
              s(:str, "10.5@10.5"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Complex), :polar,
              s(:float, -10.5),
              s(:float, -10.5)),
            s(:send, nil, :Complex,
              s(:str, "-10.5@-10.5"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0)),
            s(:send,
              s(:str, ""), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0)),
            s(:send,
              s(:str, " "), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5)),
            s(:send,
              s(:str, "\f\n\r\t\v5\u0000"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0)),
            s(:send,
              s(:str, "_"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 0)),
            s(:send,
              s(:str, "_5"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5)),
            s(:send,
              s(:str, "5_"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5)),
            s(:send,
              s(:str, "5x"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5)),
            s(:send,
              s(:str, "5+_3i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5)),
            s(:send,
              s(:str, "5+3_i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5),
              s(:int, 3)),
            s(:send,
              s(:str, "5+3i_"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 5),
              s(:int, 3)),
            s(:send,
              s(:str, "5+3ix"), :to_c)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Complex,
              s(:str, ""))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Complex,
              s(:str, "_"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Complex,
              s(:str, "\f\n\r\t\v5\u0000"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Complex,
              s(:str, "_5"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Complex,
              s(:str, "5_"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Complex,
              s(:str, "5x"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Complex,
              s(:str, "5+_3i"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Complex,
              s(:str, "5+3_i"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Complex,
              s(:str, "5+3i_"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Complex,
              s(:str, "5+3ix"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 5))),
            s(:send,
              s(:str, "1/5"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, 5))),
            s(:send,
              s(:str, "-1/5"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 5)),
              s(:int, 3)),
            s(:send,
              s(:str, "1/5+3i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 5)),
              s(:int, -3)),
            s(:send,
              s(:str, "1/5-3i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, 5)),
              s(:int, 3)),
            s(:send,
              s(:str, "-1/5+3i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, 5)),
              s(:int, -3)),
            s(:send,
              s(:str, "-1/5-3i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 5)),
              s(:send, nil, :Rational,
                s(:int, 3),
                s(:int, 2))),
            s(:send,
              s(:str, "1/5+3/2i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 5)),
              s(:send, nil, :Rational,
                s(:int, -3),
                s(:int, 2))),
            s(:send,
              s(:str, "1/5-3/2i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, 5)),
              s(:send, nil, :Rational,
                s(:int, 3),
                s(:int, 2))),
            s(:send,
              s(:str, "-1/5+3/2i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, 5)),
              s(:send, nil, :Rational,
                s(:int, -3),
                s(:int, 2))),
            s(:send,
              s(:str, "-1/5-3/2i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 5)),
              s(:send, nil, :Rational,
                s(:int, 3),
                s(:int, 2))),
            s(:send,
              s(:str, "1/5+3/2i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 5)),
              s(:send, nil, :Rational,
                s(:int, -3),
                s(:int, 2))),
            s(:send,
              s(:str, "1/5-3/2i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, 5)),
              s(:send, nil, :Rational,
                s(:int, 3),
                s(:int, 2))),
            s(:send,
              s(:str, "-1/5+3/2i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, 5)),
              s(:send, nil, :Rational,
                s(:int, -3),
                s(:int, 2))),
            s(:send,
              s(:str, "-1/5-3/2i"), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Complex), :polar,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 5)),
              s(:send, nil, :Rational,
                s(:int, 3),
                s(:int, 2))),
            s(:send, nil, :Complex,
              s(:str, "1/5@3/2"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Complex), :polar,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, 5)),
              s(:send, nil, :Rational,
                s(:int, -3),
                s(:int, 2))),
            s(:send, nil, :Complex,
              s(:str, "-1/5@-3/2"))))),
      s(:def, :test_respond,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :%))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :<))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :<=))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :<=>))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :>))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :>=))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :between?))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :div))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :divmod))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :floor))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :ceil))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :modulo))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :remainder))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :round))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :step))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :tunrcate))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :positive?))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :negative?))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :sign))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :quotient))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :quot))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :quotrem))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :gcd))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :lcm))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :respond_to?,
              s(:sym, :gcdlcm))))),
      s(:def, :test_to_i,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 3)), :to_i)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send, nil, :Integer,
              s(:send, nil, :Complex,
                s(:int, 3)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RangeError)),
            s(:args),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 3),
                s(:int, 2)), :to_i)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RangeError)),
            s(:args),
            s(:send, nil, :Integer,
              s(:send, nil, :Complex,
                s(:int, 3),
                s(:int, 2)))))),
      s(:def, :test_to_f,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:float, 3.0),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 3)), :to_f)),
          s(:send, nil, :assert_equal,
            s(:float, 3.0),
            s(:send, nil, :Float,
              s(:send, nil, :Complex,
                s(:int, 3)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RangeError)),
            s(:args),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 3),
                s(:int, 2)), :to_f)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RangeError)),
            s(:args),
            s(:send, nil, :Float,
              s(:send, nil, :Complex,
                s(:int, 3),
                s(:int, 2)))))),
      s(:def, :test_to_r,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 3)),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 3)), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 3)),
            s(:send, nil, :Rational,
              s(:send, nil, :Complex,
                s(:int, 3)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RangeError)),
            s(:args),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 3),
                s(:int, 2)), :to_r)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RangeError)),
            s(:args),
            s(:send, nil, :Rational,
              s(:send, nil, :Complex,
                s(:int, 3),
                s(:int, 2)))))),
      s(:def, :test_to_c,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:nil), :to_c)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:int, 0)),
            s(:array,
              s(:send,
                s(:lvar, :c), :real),
              s(:send,
                s(:lvar, :c), :imag))),
          s(:lvasgn, :c,
            s(:send,
              s(:int, 0), :to_c)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:int, 0)),
            s(:array,
              s(:send,
                s(:lvar, :c), :real),
              s(:send,
                s(:lvar, :c), :imag))),
          s(:lvasgn, :c,
            s(:send,
              s(:int, 1), :to_c)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 0)),
            s(:array,
              s(:send,
                s(:lvar, :c), :real),
              s(:send,
                s(:lvar, :c), :imag))),
          s(:lvasgn, :c,
            s(:send,
              s(:float, 1.1), :to_c)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:float, 1.1),
              s(:int, 0)),
            s(:array,
              s(:send,
                s(:lvar, :c), :real),
              s(:send,
                s(:lvar, :c), :imag))),
          s(:lvasgn, :c,
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)), :to_c)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)),
              s(:int, 0)),
            s(:array,
              s(:send,
                s(:lvar, :c), :real),
              s(:send,
                s(:lvar, :c), :imag))),
          s(:lvasgn, :c,
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 2)), :to_c)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:array,
              s(:send,
                s(:lvar, :c), :real),
              s(:send,
                s(:lvar, :c), :imag))),
          s(:if,
            s(:send,
              s(:begin,
                s(:send,
                  s(:float, 0.0), :/,
                  s(:int, 0))), :nan?),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:float, 0.0), :/,
                    s(:int, 0))), :to_c)), nil),
          s(:if,
            s(:send,
              s(:begin,
                s(:send,
                  s(:float, 1.0), :/,
                  s(:int, 0))), :infinite?),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:float, 1.0), :/,
                    s(:int, 0))), :to_c)), nil))),
      s(:def, :test_supp,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:int, 1), :real?)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:float, 1.1), :real?)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:int, 1), :real)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:int, 1), :imag)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:int, 1), :imaginary)),
          s(:send, nil, :assert_equal,
            s(:float, 1.1),
            s(:send,
              s(:float, 1.1), :real)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:float, 1.1), :imag)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:float, 1.1), :imaginary)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:int, 1), :magnitude)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:int, -1), :magnitude)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:float, 1.0), :magnitude)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:float, -1.0), :magnitude)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:int, 2), :abs2)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:int, -2), :abs2)),
          s(:send, nil, :assert_equal,
            s(:float, 4.0),
            s(:send,
              s(:float, 2.0), :abs2)),
          s(:send, nil, :assert_equal,
            s(:float, 4.0),
            s(:send,
              s(:float, -2.0), :abs2)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:int, 1), :arg)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:int, 1), :angle)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:int, 1), :phase)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:float, 1.0), :arg)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:float, 1.0), :angle)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:float, 1.0), :phase)),
          s(:if,
            s(:send,
              s(:begin,
                s(:send,
                  s(:float, 0.0), :/,
                  s(:int, 0))), :nan?),
            s(:begin,
              s(:lvasgn, :nan,
                s(:send,
                  s(:float, 0.0), :/,
                  s(:int, 0))),
              s(:send, nil, :assert_same,
                s(:lvar, :nan),
                s(:send,
                  s(:lvar, :nan), :arg)),
              s(:send, nil, :assert_same,
                s(:lvar, :nan),
                s(:send,
                  s(:lvar, :nan), :angle)),
              s(:send, nil, :assert_same,
                s(:lvar, :nan),
                s(:send,
                  s(:lvar, :nan), :phase))), nil),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Math), :PI),
            s(:send,
              s(:int, -1), :arg)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Math), :PI),
            s(:send,
              s(:int, -1), :angle)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Math), :PI),
            s(:send,
              s(:int, -1), :phase)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Math), :PI),
            s(:send,
              s(:float, -1.0), :arg)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Math), :PI),
            s(:send,
              s(:float, -1.0), :angle)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Math), :PI),
            s(:send,
              s(:float, -1.0), :phase)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 0)),
            s(:send,
              s(:int, 1), :rect)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, -1),
              s(:int, 0)),
            s(:send,
              s(:int, -1), :rect)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 0)),
            s(:send,
              s(:int, 1), :rectangular)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, -1),
              s(:int, 0)),
            s(:send,
              s(:int, -1), :rectangular)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:float, 1.0),
              s(:int, 0)),
            s(:send,
              s(:float, 1.0), :rect)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:float, -1.0),
              s(:int, 0)),
            s(:send,
              s(:float, -1.0), :rect)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:float, 1.0),
              s(:int, 0)),
            s(:send,
              s(:float, 1.0), :rectangular)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:float, -1.0),
              s(:int, 0)),
            s(:send,
              s(:float, -1.0), :rectangular)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 0)),
            s(:send,
              s(:int, 1), :polar)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:const,
                s(:const, nil, :Math), :PI)),
            s(:send,
              s(:int, -1), :polar)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:float, 1.0),
              s(:int, 0)),
            s(:send,
              s(:float, 1.0), :polar)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:float, 1.0),
              s(:const,
                s(:const, nil, :Math), :PI)),
            s(:send,
              s(:float, -1.0), :polar)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:int, 1), :conjugate)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:int, -1), :conjugate)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:int, 1), :conj)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:int, -1), :conj)),
          s(:send, nil, :assert_equal,
            s(:float, 1.1),
            s(:send,
              s(:float, 1.1), :conjugate)),
          s(:send, nil, :assert_equal,
            s(:float, -1.1),
            s(:send,
              s(:float, -1.1), :conjugate)),
          s(:send, nil, :assert_equal,
            s(:float, 1.1),
            s(:send,
              s(:float, 1.1), :conj)),
          s(:send, nil, :assert_equal,
            s(:float, -1.1),
            s(:send,
              s(:float, -1.1), :conj)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)),
              s(:send, nil, :Rational,
                s(:int, 1))),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 2)), :quo,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 0.5),
            s(:send,
              s(:int, 1), :fdiv,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 5000000000.0),
            s(:send,
              s(:int, 10000000000), :fdiv,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 0.5),
            s(:send,
              s(:float, 1.0), :fdiv,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 0.25),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)), :fdiv,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 0.5),
              s(:float, 1.0)),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 2)), :quo,
              s(:int, 2))))),
      s(:def, :test_ruby19,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:const, nil, :Complex), :new,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:const, nil, :Complex), :new!,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:const, nil, :Complex), :reduce,
              s(:int, 1))))),
      s(:def, :test_fixed_bug,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:int, 1)),
            s(:send,
              s(:int, 1), :**,
              s(:send, nil, :Complex,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:str, "-1.0-0.0i"),
            s(:send,
              s(:send, nil, :Complex,
                s(:float, -1.0),
                s(:float, -0.0)), :to_s)),
          s(:send, nil, :assert_in_delta,
            s(:const,
              s(:const, nil, :Math), :PI),
            s(:send,
              s(:send, nil, :Complex,
                s(:float, -0.0)), :arg),
            s(:float, 0.001)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:float, 2000.0),
              s(:float, 20000.0)),
            s(:send,
              s(:str, "2e3+2e4i"), :to_c)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Complex,
              s(:str, "--8i"))))),
      s(:def, :test_known_bug,
        s(:args), nil))))
