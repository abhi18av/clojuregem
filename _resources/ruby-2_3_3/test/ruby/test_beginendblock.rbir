s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestBeginEndBlock),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :DIR,
        s(:send,
          s(:const, nil, :File), :dirname,
          s(:send,
            s(:const, nil, :File), :expand_path,
            s(:str, "(string)")))),
      s(:def, :test_beginendblock,
        s(:args),
        s(:begin,
          s(:lvasgn, :target,
            s(:send,
              s(:const, nil, :File), :join,
              s(:const, nil, :DIR),
              s(:str, "beginmainend.rb"))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :target)),
            s(:str, ""),
            s(:array,
              s(:str, "b1"),
              s(:str, "b2-1"),
              s(:str, "b2"),
              s(:str, "main"),
              s(:str, "b3-1"),
              s(:str, "b3"),
              s(:str, "b4"),
              s(:str, "e1"),
              s(:str, "e1-1"),
              s(:str, "e4"),
              s(:str, "e4-2"),
              s(:str, "e4-1"),
              s(:str, "e4-1-1"),
              s(:str, "e3"),
              s(:str, "e2"))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-n"),
              s(:str, "-eBEGIN{p :begin}"),
              s(:str, "-eEND{p :end}")),
            s(:str, ""),
            s(:array,
              s(:str, ":begin"))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-p"),
              s(:str, "-eBEGIN{p :begin}"),
              s(:str, "-eEND{p :end}")),
            s(:str, ""),
            s(:array,
              s(:str, ":begin"))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-n"),
              s(:str, "-eBEGIN{p :begin}"),
              s(:str, "-eEND{p :end}")),
            s(:str, "foo\nbar\n"),
            s(:array,
              s(:str, ":begin"),
              s(:str, ":end"))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-p"),
              s(:str, "-eBEGIN{p :begin}"),
              s(:str, "-eEND{p :end}")),
            s(:str, "foo\nbar\n"),
            s(:array,
              s(:str, ":begin"),
              s(:str, "foo"),
              s(:str, "bar"),
              s(:str, ":end"))))),
      s(:def, :test_begininmethod,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :SyntaxError),
              s(:regexp,
                s(:str, "BEGIN is permitted only at toplevel"),
                s(:regopt))),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "def foo; BEGIN {}; end"))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :SyntaxError),
              s(:regexp,
                s(:str, "BEGIN is permitted only at toplevel"),
                s(:regopt))),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "eval(\"def foo; BEGIN {}; end\")"))))),
      s(:def, :test_begininclass,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise_with_message,
            s(:const, nil, :SyntaxError),
            s(:regexp,
              s(:str, "BEGIN is permitted only at toplevel"),
              s(:regopt))),
          s(:args),
          s(:send, nil, :eval,
            s(:str, "class TestBeginEndBlock; BEGIN {}; end")))),
      s(:def, :test_endblockwarn,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array),
          s(:dstr,
            s(:str, "      def end1\n"),
            s(:str, "        END {}\n"),
            s(:str, "      end\n")),
          s(:array),
          s(:array,
            s(:str, "-:2: warning: END in method; use at_exit")))),
      s(:def, :test_endblockwarn_in_eval,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array),
          s(:dstr,
            s(:str, "      eval <<-EOE\n"),
            s(:str, "        def end2\n"),
            s(:str, "          END {}\n"),
            s(:str, "        end\n"),
            s(:str, "      EOE\n")),
          s(:array),
          s(:array,
            s(:str, "(eval):2: warning: END in method; use at_exit")))),
      s(:def, :test_raise_in_at_exit,
        s(:args),
        s(:begin,
          s(:lvasgn, :args,
            s(:array,
              s(:str, "-e"),
              s(:str, "at_exit{raise %[SomethingBad]}"),
              s(:str, "-e"),
              s(:str, "raise %[SomethingElse]"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:sym, :*),
              s(:regexp,
                s(:str, "SomethingBad"),
                s(:regopt)),
              s(:sym, :*),
              s(:regexp,
                s(:str, "SomethingElse"),
                s(:regopt)),
              s(:sym, :*))),
          s(:lvasgn, :status,
            s(:send, nil, :assert_in_out_err,
              s(:lvar, :args),
              s(:str, ""),
              s(:array),
              s(:lvar, :expected),
              s(:str, "[ruby-core:9675]"))),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :status),
            s(:sym, :success?)))),
      s(:def, :test_exitcode_in_at_exit,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8501,
            s(:str, "[ruby-core:55365] [Bug #8501]")),
          s(:lvasgn, :args,
            s(:array,
              s(:str, "-e"),
              s(:str, "o = Object.new; def o.inspect; raise \"[Bug #8501]\"; end"),
              s(:str, "-e"),
              s(:str, "at_exit{o.nope}"))),
          s(:lvasgn, :status,
            s(:send, nil, :assert_in_out_err,
              s(:lvar, :args),
              s(:str, ""),
              s(:array),
              s(:regexp,
                s(:str, "undefined method `nope'"),
                s(:regopt)),
              s(:lvar, :bug8501))),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :status),
            s(:sym, :success?),
            s(:lvar, :bug8501)))),
      s(:def, :test_propagate_exit_code,
        s(:args),
        s(:begin,
          s(:lvasgn, :ruby,
            s(:send,
              s(:const, nil, :EnvUtil), :rubybin)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send, nil, :system,
              s(:lvar, :ruby),
              s(:str, "-e"),
              s(:str, "at_exit{exit 2}"))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:gvar, :$?), :exitstatus)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:gvar, :$?), :termsig)))),
      s(:def, :test_propagate_signaled,
        s(:args),
        s(:begin,
          s(:lvasgn, :status,
            s(:send, nil, :assert_in_out_err,
              s(:array),
              s(:dstr,
                s(:str, "      trap(:INT, \"DEFAULT\")\n"),
                s(:str, "      at_exit{Process.kill(:INT, $$)}\n")),
              s(:array),
              s(:regexp,
                s(:str, "Interrupt$"),
                s(:regopt)))),
          s(:rescue,
            s(:send,
              s(:const, nil, :Process), :kill,
              s(:int, 0),
              s(:int, 0)),
            s(:resbody, nil, nil,
              s(:return)), nil),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :status), :exitstatus)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:const, nil, :Signal), :list), :[],
              s(:str, "INT")),
            s(:send,
              s(:lvar, :status), :termsig)))),
      s(:def, :test_endblock_raise,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array),
          s(:dstr,
            s(:str, "      END {raise \"e1\"}; END {puts \"e2\"}\n"),
            s(:str, "      END {raise \"e3\"}; END {puts \"e4\"}\n"),
            s(:str, "      END {raise \"e5\"}; END {puts \"e6\"}\n")),
          s(:array,
            s(:str, "e6"),
            s(:str, "e4"),
            s(:str, "e2")),
          s(:array,
            s(:sym, :*),
            s(:regexp,
              s(:str, "e5"),
              s(:regopt)),
            s(:sym, :*),
            s(:regexp,
              s(:str, "e3"),
              s(:regopt)),
            s(:sym, :*),
            s(:regexp,
              s(:str, "e1"),
              s(:regopt)),
            s(:sym, :*)))),
      s(:def, :test_nested_at_exit,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "outer3"),
              s(:str, "outer2_begin"),
              s(:str, "outer2_end"),
              s(:str, "inner2"),
              s(:str, "outer1_begin"),
              s(:str, "outer1_end"),
              s(:str, "inner1"),
              s(:str, "outer0"))),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "      at_exit { puts :outer0 }\n"),
              s(:str, "      at_exit { puts :outer1_begin; at_exit { puts :inner1 }; puts :outer1_end }\n"),
              s(:str, "      at_exit { puts :outer2_begin; at_exit { puts :inner2 }; puts :outer2_end }\n"),
              s(:str, "      at_exit { puts :outer3 }\n")),
            s(:lvar, :expected),
            s(:array),
            s(:str, "[ruby-core:35237]")))),
      s(:def, :test_rescue_at_exit,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5218,
            s(:str, "[ruby-core:43173][Bug #5218]")),
          s(:lvasgn, :cmd,
            s(:array,
              s(:str, "raise 'X' rescue nil"),
              s(:str, "nil"),
              s(:str, "exit(42)"))),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "at_exit"),
                s(:str, "END")), :each),
            s(:args,
              s(:arg, :ex)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :out),
                  s(:lvasgn, :err),
                  s(:lvasgn, :status)),
                s(:send,
                  s(:const, nil, :EnvUtil), :invoke_ruby,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :cmd), :map),
                      s(:args,
                        s(:arg, :s)),
                      s(:array,
                        s(:str, "-e"),
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :ex)),
                          s(:str, " {"),
                          s(:begin,
                            s(:lvar, :s)),
                          s(:str, "}")))), :flatten),
                  s(:str, ""),
                  s(:true),
                  s(:true))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, ""),
                  s(:str, ""),
                  s(:int, 42)),
                s(:array,
                  s(:lvar, :out),
                  s(:lvar, :err),
                  s(:send,
                    s(:lvar, :status), :exitstatus)),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :bug5218)),
                  s(:str, ": "),
                  s(:begin,
                    s(:lvar, :ex)))))))),
      s(:def, :test_callcc_at_exit,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9110,
            s(:str, "[ruby-core:58329][Bug #9110]")),
          s(:lvasgn, :script,
            s(:dstr,
              s(:str, "require \"continuation\"\n"),
              s(:str, "c = nil\n"),
              s(:str, "at_exit { c.call }\n"),
              s(:str, "at_exit { callcc {|_c| c = _c } }\n"))),
          s(:send, nil, :assert_normal_exit,
            s(:lvar, :script),
            s(:lvar, :bug9110)))),
      s(:def, :test_errinfo_at_exit,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug12302,
            s(:str, "[ruby-core:75038] [Bug #12302]")),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "      at_exit do\n"),
              s(:str, "        puts \"1:\#{$!}\"\n"),
              s(:str, "      end\n"),
              s(:str, "\n"),
              s(:str, "      at_exit do\n"),
              s(:str, "        puts \"2:\#{$!}\"\n"),
              s(:str, "        raise 'x' rescue nil\n"),
              s(:str, "      end\n"),
              s(:str, "\n"),
              s(:str, "      at_exit do\n"),
              s(:str, "        exit\n"),
              s(:str, "      end\n")),
            s(:array,
              s(:str, "2:exit"),
              s(:str, "1:exit")),
            s(:array),
            s(:lvar, :bug12302)))))))
