s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestGc),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:class,
        s(:const, nil, :S), nil,
        s(:def, :initialize,
          s(:args,
            s(:arg, :a)),
          s(:ivasgn, :@a,
            s(:lvar, :a)))),
      s(:def, :test_gc,
        s(:args),
        s(:begin,
          s(:lvasgn, :prev_stress,
            s(:send,
              s(:const, nil, :GC), :stress)),
          s(:send,
            s(:const, nil, :GC), :stress=,
            s(:false)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:begin,
              s(:lvasgn, :tmp,
                s(:nil)),
              s(:block,
                s(:send,
                  s(:int, 1), :upto,
                  s(:int, 10000)),
                s(:args),
                s(:lvasgn, :tmp,
                  s(:array,
                    s(:int, 0),
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3),
                    s(:int, 4),
                    s(:int, 5),
                    s(:int, 6),
                    s(:int, 7),
                    s(:int, 8),
                    s(:int, 9)))))),
          s(:lvasgn, :l,
            s(:nil)),
          s(:block,
            s(:send,
              s(:int, 100000), :times),
            s(:args),
            s(:lvasgn, :l,
              s(:send,
                s(:const, nil, :S), :new,
                s(:lvar, :l)))),
          s(:send,
            s(:const, nil, :GC), :start),
          s(:send, nil, :assert,
            s(:true)),
          s(:lvasgn, :l,
            s(:array)),
          s(:block,
            s(:send,
              s(:int, 100000), :times),
            s(:args),
            s(:send,
              s(:lvar, :l), :push,
              s(:array,
                s(:lvar, :l)))),
          s(:send,
            s(:const, nil, :GC), :start),
          s(:send, nil, :assert,
            s(:true)),
          s(:send,
            s(:const, nil, :GC), :stress=,
            s(:lvar, :prev_stress)))),
      s(:def, :use_rgengc?,
        s(:args),
        s(:send,
          s(:const,
            s(:const, nil, :GC), :OPTS), :include?,
          s(:send,
            s(:str, "USE_RGENGC"), :freeze))),
      s(:def, :test_enable_disable,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send,
              s(:const, nil, :GC), :enable),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const, nil, :GC), :enable)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const, nil, :GC), :disable)),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const, nil, :GC), :disable)),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const, nil, :GC), :disable)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:const, nil, :GC), :start)),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const, nil, :GC), :enable)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const, nil, :GC), :enable))),
          s(:send,
            s(:const, nil, :GC), :enable))),
      s(:def, :test_start_full_mark,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :use_rgengc?), nil,
            s(:return)),
          s(:send,
            s(:const, nil, :GC), :start,
            s(:hash,
              s(:pair,
                s(:sym, :full_mark),
                s(:false)))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:const, nil, :GC), :latest_gc_info,
              s(:sym, :major_by))),
          s(:send,
            s(:const, nil, :GC), :start,
            s(:hash,
              s(:pair,
                s(:sym, :full_mark),
                s(:true)))),
          s(:send, nil, :assert_not_nil,
            s(:send,
              s(:const, nil, :GC), :latest_gc_info,
              s(:sym, :major_by))))),
      s(:def, :test_start_immediate_sweep,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :GC), :start,
            s(:hash,
              s(:pair,
                s(:sym, :immediate_sweep),
                s(:false)))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:const, nil, :GC), :latest_gc_info,
              s(:sym, :immediate_sweep))),
          s(:send,
            s(:const, nil, :GC), :start,
            s(:hash,
              s(:pair,
                s(:sym, :immediate_sweep),
                s(:true)))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:const, nil, :GC), :latest_gc_info,
              s(:sym, :immediate_sweep))))),
      s(:def, :test_count,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :GC), :count)),
          s(:send,
            s(:const, nil, :GC), :start),
          s(:send, nil, :assert_operator,
            s(:lvar, :c),
            s(:sym, :<),
            s(:send,
              s(:const, nil, :GC), :count)))),
      s(:def, :test_stat,
        s(:args),
        s(:begin,
          s(:lvasgn, :res,
            s(:send,
              s(:const, nil, :GC), :stat)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :res), :empty?)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:send,
              s(:lvar, :res), :[],
              s(:sym, :count))),
          s(:lvasgn, :arg,
            s(:send,
              s(:const, nil, :Hash), :new)),
          s(:lvasgn, :res,
            s(:send,
              s(:const, nil, :GC), :stat,
              s(:lvar, :arg))),
          s(:send, nil, :assert_equal,
            s(:lvar, :arg),
            s(:lvar, :res)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :res), :empty?)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:send,
              s(:lvar, :res), :[],
              s(:sym, :count))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :stat),
              s(:lvasgn, :count)),
            s(:array,
              s(:hash),
              s(:hash))),
          s(:send,
            s(:const, nil, :GC), :start),
          s(:send,
            s(:const, nil, :GC), :stat,
            s(:lvar, :stat)),
          s(:send,
            s(:const, nil, :ObjectSpace), :count_objects,
            s(:lvar, :count)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :count), :[],
                s(:sym, :TOTAL)), :-,
              s(:send,
                s(:lvar, :count), :[],
                s(:sym, :FREE))),
            s(:send,
              s(:lvar, :stat), :[],
              s(:sym, :heap_live_slots))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :count), :[],
              s(:sym, :FREE)),
            s(:send,
              s(:lvar, :stat), :[],
              s(:sym, :heap_free_slots))),
          s(:block,
            s(:send,
              s(:int, 1000), :times),
            s(:args),
            s(:send,
              s(:str, "a"), :+,
              s(:str, "b"))),
          s(:send,
            s(:const, nil, :GC), :stat,
            s(:lvar, :stat)),
          s(:send,
            s(:const, nil, :ObjectSpace), :count_objects,
            s(:lvar, :count)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :count), :[],
              s(:sym, :FREE)),
            s(:send,
              s(:lvar, :stat), :[],
              s(:sym, :heap_free_slots))))),
      s(:def, :test_stat_argument,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise_with_message,
            s(:const, nil, :ArgumentError),
            s(:regexp,
              s(:str, "\\u{30eb 30d3 30fc}"),
              s(:regopt))),
          s(:args),
          s(:send,
            s(:const, nil, :GC), :stat,
            s(:sym, :ルビー)))),
      s(:def, :test_stat_single,
        s(:args),
        s(:begin,
          s(:lvasgn, :stat,
            s(:send,
              s(:const, nil, :GC), :stat)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :stat), :[],
              s(:sym, :count)),
            s(:send,
              s(:const, nil, :GC), :stat,
              s(:sym, :count))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :GC), :stat,
              s(:sym, :invalid))))),
      s(:def, :test_stat_constraints,
        s(:args),
        s(:begin,
          s(:lvasgn, :stat,
            s(:send,
              s(:const, nil, :GC), :stat)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :stat), :[],
              s(:sym, :total_allocated_pages)),
            s(:send,
              s(:send,
                s(:lvar, :stat), :[],
                s(:sym, :heap_allocated_pages)), :+,
              s(:send,
                s(:lvar, :stat), :[],
                s(:sym, :total_freed_pages)))),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:lvar, :stat), :[],
              s(:sym, :heap_sorted_length)),
            s(:sym, :>=),
            s(:send,
              s(:send,
                s(:lvar, :stat), :[],
                s(:sym, :heap_eden_pages)), :+,
              s(:send,
                s(:lvar, :stat), :[],
                s(:sym, :heap_allocatable_pages))),
            s(:send,
              s(:str, "stat is: "), :+,
              s(:send,
                s(:lvar, :stat), :inspect))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :stat), :[],
              s(:sym, :heap_available_slots)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :stat), :[],
                  s(:sym, :heap_live_slots)), :+,
                s(:send,
                  s(:lvar, :stat), :[],
                  s(:sym, :heap_free_slots))), :+,
              s(:send,
                s(:lvar, :stat), :[],
                s(:sym, :heap_final_slots)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :stat), :[],
              s(:sym, :heap_live_slots)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :stat), :[],
                  s(:sym, :total_allocated_objects)), :-,
                s(:send,
                  s(:lvar, :stat), :[],
                  s(:sym, :total_freed_objects))), :-,
              s(:send,
                s(:lvar, :stat), :[],
                s(:sym, :heap_final_slots)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :stat), :[],
              s(:sym, :heap_allocated_pages)),
            s(:send,
              s(:send,
                s(:lvar, :stat), :[],
                s(:sym, :heap_eden_pages)), :+,
              s(:send,
                s(:lvar, :stat), :[],
                s(:sym, :heap_tomb_pages)))),
          s(:if,
            s(:send, nil, :use_rgengc?),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :stat), :[],
                s(:sym, :count)),
              s(:send,
                s(:send,
                  s(:lvar, :stat), :[],
                  s(:sym, :major_gc_count)), :+,
                s(:send,
                  s(:lvar, :stat), :[],
                  s(:sym, :minor_gc_count)))), nil))),
      s(:def, :test_latest_gc_info,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send, nil, :assert_separately,
              s(:array,
                s(:str, "--disable-gem")),
              s(:str, "(string)"),
              s(:int, 127),
              s(:dstr,
                s(:str, "    GC.start\n"),
                s(:str, "    count = GC.stat(:heap_free_slots) + GC.stat(:heap_allocatable_pages) * GC::INTERNAL_CONSTANTS[:HEAP_OBJ_LIMIT]\n"),
                s(:str, "    count.times{ \"a\" + \"b\" }\n"),
                s(:str, "    assert_equal :newobj, GC.latest_gc_info[:gc_by]\n"))),
            s(:send,
              s(:const, nil, :GC), :start),
            s(:if,
              s(:send, nil, :use_rgengc?),
              s(:send, nil, :assert_equal,
                s(:sym, :force),
                s(:send,
                  s(:send,
                    s(:const, nil, :GC), :latest_gc_info), :[],
                  s(:sym, :major_by))), nil),
            s(:send, nil, :assert_equal,
              s(:sym, :method),
              s(:send,
                s(:send,
                  s(:const, nil, :GC), :latest_gc_info), :[],
                s(:sym, :gc_by))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:send,
                  s(:const, nil, :GC), :latest_gc_info), :[],
                s(:sym, :immediate_sweep))),
            s(:send,
              s(:const, nil, :GC), :stress=,
              s(:true)),
            s(:send, nil, :assert_equal,
              s(:sym, :force),
              s(:send,
                s(:send,
                  s(:const, nil, :GC), :latest_gc_info), :[],
                s(:sym, :major_by)))),
          s(:send,
            s(:const, nil, :GC), :stress=,
            s(:false)))),
      s(:def, :test_latest_gc_info_argument,
        s(:args),
        s(:begin,
          s(:lvasgn, :info,
            s(:hash)),
          s(:send,
            s(:const, nil, :GC), :latest_gc_info,
            s(:lvar, :info)),
          s(:send, nil, :assert_not_empty,
            s(:lvar, :info)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :info), :[],
              s(:sym, :gc_by)),
            s(:send,
              s(:const, nil, :GC), :latest_gc_info,
              s(:sym, :gc_by))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :GC), :latest_gc_info,
              s(:sym, :invalid))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:regexp,
                s(:str, "\\u{30eb 30d3 30fc}"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:const, nil, :GC), :latest_gc_info,
              s(:sym, :ルビー))))),
      s(:def, :test_singleton_method,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array,
            s(:str, "--disable-gems")),
          s(:dstr,
            s(:str, "      GC.stress = true\n"),
            s(:str, "      10.times do\n"),
            s(:str, "        obj = Object.new\n"),
            s(:str, "        def obj.foo() end\n"),
            s(:str, "        def obj.bar() raise \"obj.foo is called, but this is obj.bar\" end\n"),
            s(:str, "        obj.foo\n"),
            s(:str, "      end\n")),
          s(:array),
          s(:array),
          s(:str, "[ruby-dev:42832]"))),
      s(:def, :test_singleton_method_added,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array,
            s(:str, "--disable-gems")),
          s(:dstr,
            s(:str, "      class BasicObject\n"),
            s(:str, "        undef singleton_method_added\n"),
            s(:str, "        def singleton_method_added(mid)\n"),
            s(:str, "          raise\n"),
            s(:str, "        end\n"),
            s(:str, "      end\n"),
            s(:str, "      b = proc {}\n"),
            s(:str, "      class << b; end\n"),
            s(:str, "      b.clone rescue nil\n"),
            s(:str, "      GC.start\n")),
          s(:array),
          s(:array),
          s(:str, "[ruby-dev:44436]"))),
      s(:def, :test_gc_parameter,
        s(:args),
        s(:begin,
          s(:lvasgn, :env,
            s(:hash,
              s(:pair,
                s(:str, "RUBY_GC_MALLOC_LIMIT"),
                s(:str, "60000000")),
              s(:pair,
                s(:str, "RUBY_GC_HEAP_INIT_SLOTS"),
                s(:str, "100000")))),
          s(:send, nil, :assert_normal_exit,
            s(:str, "exit"),
            s(:str, "[ruby-core:39777]"),
            s(:hash,
              s(:pair,
                s(:sym, :child_env),
                s(:lvar, :env)))),
          s(:lvasgn, :env,
            s(:hash,
              s(:pair,
                s(:str, "RUBYOPT"),
                s(:str, "")),
              s(:pair,
                s(:str, "RUBY_GC_HEAP_INIT_SLOTS"),
                s(:str, "100000")))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :env),
              s(:str, "-e"),
              s(:str, "exit")),
            s(:str, ""),
            s(:array),
            s(:array),
            s(:str, "[ruby-core:39795]")),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :env),
              s(:str, "-W0"),
              s(:str, "-e"),
              s(:str, "exit")),
            s(:str, ""),
            s(:array),
            s(:array),
            s(:str, "[ruby-core:39795]")),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :env),
              s(:str, "-W1"),
              s(:str, "-e"),
              s(:str, "exit")),
            s(:str, ""),
            s(:array),
            s(:array),
            s(:str, "[ruby-core:39795]")),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :env),
              s(:str, "-w"),
              s(:str, "-e"),
              s(:str, "exit")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "RUBY_GC_HEAP_INIT_SLOTS=100000"),
              s(:regopt)),
            s(:str, "[ruby-core:39795]")),
          s(:lvasgn, :env,
            s(:hash,
              s(:pair,
                s(:str, "RUBY_GC_HEAP_GROWTH_FACTOR"),
                s(:str, "2.0")),
              s(:pair,
                s(:str, "RUBY_GC_HEAP_GROWTH_MAX_SLOTS"),
                s(:str, "10000")))),
          s(:send, nil, :assert_normal_exit,
            s(:str, "exit"),
            s(:str, ""),
            s(:hash,
              s(:pair,
                s(:sym, :child_env),
                s(:lvar, :env)))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :env),
              s(:str, "-w"),
              s(:str, "-e"),
              s(:str, "exit")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "RUBY_GC_HEAP_GROWTH_FACTOR=2.0"),
              s(:regopt)),
            s(:str, "")),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :env),
              s(:str, "-w"),
              s(:str, "-e"),
              s(:str, "exit")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "RUBY_GC_HEAP_GROWTH_MAX_SLOTS=10000"),
              s(:regopt)),
            s(:str, "[ruby-core:57928]")),
          s(:lvasgn, :env,
            s(:hash,
              s(:pair,
                s(:str, "RUBY_GC_HEAP_INIT_SLOTS"),
                s(:str, "100000")),
              s(:pair,
                s(:str, "RUBY_GC_HEAP_FREE_SLOTS"),
                s(:str, "10000")),
              s(:pair,
                s(:str, "RUBY_GC_HEAP_OLDOBJECT_LIMIT_FACTOR"),
                s(:str, "0.9")))),
          s(:send, nil, :assert_normal_exit,
            s(:str, "exit"),
            s(:str, ""),
            s(:hash,
              s(:pair,
                s(:sym, :child_env),
                s(:lvar, :env)))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :env),
              s(:str, "-w"),
              s(:str, "-e"),
              s(:str, "exit")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "RUBY_GC_HEAP_OLDOBJECT_LIMIT_FACTOR=0\\.9"),
              s(:regopt)),
            s(:str, "")),
          s(:if,
            s(:send, nil, :use_rgengc?),
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:lvar, :env),
                s(:str, "-e"),
                s(:str, "1000_000.times{Object.new}; p(GC.stat[:minor_gc_count] < GC.stat[:major_gc_count])")),
              s(:str, ""),
              s(:array,
                s(:str, "true")),
              s(:regexp,
                s(:regopt)),
              s(:str, "")), nil),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:hash,
                s(:pair,
                  s(:str, "RUBY_FREE_MIN"),
                  s(:str, "100"))),
              s(:str, "-w"),
              s(:str, "-eexit")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "RUBY_FREE_MIN is obsolete. Use RUBY_GC_HEAP_FREE_SLOTS instead"),
              s(:regopt))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:hash,
                s(:pair,
                  s(:str, "RUBY_HEAP_MIN_SLOTS"),
                  s(:str, "100"))),
              s(:str, "-w"),
              s(:str, "-eexit")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "RUBY_HEAP_MIN_SLOTS is obsolete. Use RUBY_GC_HEAP_INIT_SLOTS instead"),
              s(:regopt))),
          s(:lvasgn, :env,
            s(:hash,
              s(:pair,
                s(:str, "RUBY_GC_MALLOC_LIMIT"),
                s(:str, "60000000")),
              s(:pair,
                s(:str, "RUBY_GC_MALLOC_LIMIT_MAX"),
                s(:str, "160000000")),
              s(:pair,
                s(:str, "RUBY_GC_MALLOC_LIMIT_GROWTH_FACTOR"),
                s(:str, "2.0")))),
          s(:send, nil, :assert_normal_exit,
            s(:str, "exit"),
            s(:str, ""),
            s(:hash,
              s(:pair,
                s(:sym, :child_env),
                s(:lvar, :env)))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :env),
              s(:str, "-w"),
              s(:str, "-e"),
              s(:str, "exit")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "RUBY_GC_MALLOC_LIMIT=6000000"),
              s(:regopt)),
            s(:str, "")),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :env),
              s(:str, "-w"),
              s(:str, "-e"),
              s(:str, "exit")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "RUBY_GC_MALLOC_LIMIT_MAX=16000000"),
              s(:regopt)),
            s(:str, "")),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :env),
              s(:str, "-w"),
              s(:str, "-e"),
              s(:str, "exit")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "RUBY_GC_MALLOC_LIMIT_GROWTH_FACTOR=2.0"),
              s(:regopt)),
            s(:str, "")),
          s(:if,
            s(:send, nil, :use_rgengc?),
            s(:begin,
              s(:lvasgn, :env,
                s(:hash,
                  s(:pair,
                    s(:str, "RUBY_GC_OLDMALLOC_LIMIT"),
                    s(:str, "60000000")),
                  s(:pair,
                    s(:str, "RUBY_GC_OLDMALLOC_LIMIT_MAX"),
                    s(:str, "160000000")),
                  s(:pair,
                    s(:str, "RUBY_GC_OLDMALLOC_LIMIT_GROWTH_FACTOR"),
                    s(:str, "2.0")))),
              s(:send, nil, :assert_normal_exit,
                s(:str, "exit"),
                s(:str, ""),
                s(:hash,
                  s(:pair,
                    s(:sym, :child_env),
                    s(:lvar, :env)))),
              s(:send, nil, :assert_in_out_err,
                s(:array,
                  s(:lvar, :env),
                  s(:str, "-w"),
                  s(:str, "-e"),
                  s(:str, "exit")),
                s(:str, ""),
                s(:array),
                s(:regexp,
                  s(:str, "RUBY_GC_OLDMALLOC_LIMIT=6000000"),
                  s(:regopt)),
                s(:str, "")),
              s(:send, nil, :assert_in_out_err,
                s(:array,
                  s(:lvar, :env),
                  s(:str, "-w"),
                  s(:str, "-e"),
                  s(:str, "exit")),
                s(:str, ""),
                s(:array),
                s(:regexp,
                  s(:str, "RUBY_GC_OLDMALLOC_LIMIT_MAX=16000000"),
                  s(:regopt)),
                s(:str, "")),
              s(:send, nil, :assert_in_out_err,
                s(:array,
                  s(:lvar, :env),
                  s(:str, "-w"),
                  s(:str, "-e"),
                  s(:str, "exit")),
                s(:str, ""),
                s(:array),
                s(:regexp,
                  s(:str, "RUBY_GC_OLDMALLOC_LIMIT_GROWTH_FACTOR=2.0"),
                  s(:regopt)),
                s(:str, ""))), nil))),
      s(:def, :test_profiler_enabled,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send,
              s(:const,
                s(:const, nil, :GC), :Profiler), :enable),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :GC), :Profiler), :enabled?)),
            s(:send,
              s(:const,
                s(:const, nil, :GC), :Profiler), :disable),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const,
                  s(:const, nil, :GC), :Profiler), :enabled?))),
          s(:send,
            s(:const,
              s(:const, nil, :GC), :Profiler), :disable))),
      s(:def, :test_profiler_clear,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array,
            s(:str, "--disable-gem")),
          s(:str, "(string)"),
          s(:int, 256),
          s(:dstr,
            s(:str, "    GC::Profiler.enable\n"),
            s(:str, "\n"),
            s(:str, "    GC.start\n"),
            s(:str, "    assert_equal(1, GC::Profiler.raw_data.size)\n"),
            s(:str, "    GC::Profiler.clear\n"),
            s(:str, "    assert_equal(0, GC::Profiler.raw_data.size)\n"),
            s(:str, "\n"),
            s(:str, "    200.times{ GC.start }\n"),
            s(:str, "    assert_equal(200, GC::Profiler.raw_data.size)\n"),
            s(:str, "    GC::Profiler.clear\n"),
            s(:str, "    assert_equal(0, GC::Profiler.raw_data.size)\n")),
          s(:hash,
            s(:pair,
              s(:sym, :timeout),
              s(:int, 30))))),
      s(:def, :test_profiler_total_time,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send,
              s(:const,
                s(:const, nil, :GC), :Profiler), :enable),
            s(:send,
              s(:const,
                s(:const, nil, :GC), :Profiler), :clear),
            s(:send,
              s(:const, nil, :GC), :start),
            s(:send, nil, :assert_operator,
              s(:send,
                s(:const,
                  s(:const, nil, :GC), :Profiler), :total_time),
              s(:sym, :>=),
              s(:int, 0))),
          s(:send,
            s(:const,
              s(:const, nil, :GC), :Profiler), :disable))),
      s(:def, :test_finalizing_main_thread,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array,
            s(:str, "--disable-gems")),
          s(:str, "      ObjectSpace.define_finalizer(Thread.main) { p 'finalize' }\n"),
          s(:array,
            s(:str, "\"finalize\"")),
          s(:array),
          s(:str, "[ruby-dev:46647]"))),
      s(:def, :test_expand_heap,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array,
            s(:str, "--disable-gem")),
          s(:str, "(string)"),
          s(:int, 288),
          s(:dstr,
            s(:str, "    GC.start\n"),
            s(:str, "    base_length = GC.stat[:heap_eden_pages]\n"),
            s(:str, "    (base_length * 500).times{ 'a' }\n"),
            s(:str, "    GC.start\n"),
            s(:str, "    assert_in_delta base_length, (v = GC.stat[:heap_eden_pages]), 2,\n"),
            s(:str, "           \"invalid heap expanding (base_length: \#{base_length}, GC.stat[:heap_eden_pages]: \#{v})\"\n"),
            s(:str, "\n"),
            s(:str, "    a = []\n"),
            s(:str, "    (base_length * 500).times{ a << 'a'; nil }\n"),
            s(:str, "    GC.start\n"),
            s(:str, "    assert_operator base_length, :<, GC.stat[:heap_eden_pages] + 1\n")))),
      s(:def, :test_gc_internals,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_nil,
            s(:send,
              s(:const,
                s(:const, nil, :GC), :INTERNAL_CONSTANTS), :[],
              s(:sym, :HEAP_OBJ_LIMIT))),
          s(:send, nil, :assert_not_nil,
            s(:send,
              s(:const,
                s(:const, nil, :GC), :INTERNAL_CONSTANTS), :[],
              s(:sym, :RVALUE_SIZE))))),
      s(:def, :test_sweep_in_finalizer,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9205,
            s(:str, "[ruby-core:58833] [Bug #9205]")),
          s(:block,
            s(:send,
              s(:int, 2), :times),
            s(:args),
            s(:send, nil, :assert_ruby_status,
              s(:array),
              s(:dstr,
                s(:str, "        raise_proc = proc do |id|\n"),
                s(:str, "          GC.start\n"),
                s(:str, "        end\n"),
                s(:str, "        1000.times do\n"),
                s(:str, "          ObjectSpace.define_finalizer(Object.new, raise_proc)\n"),
                s(:str, "        end\n")),
              s(:lvar, :bug9205),
              s(:hash,
                s(:pair,
                  s(:sym, :timeout),
                  s(:int, 60))))))),
      s(:def, :test_exception_in_finalizer,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9168,
            s(:str, "[ruby-core:58652] [Bug #9168]")),
          s(:send, nil, :assert_normal_exit,
            s(:dstr,
              s(:str, "      raise_proc = proc {raise}\n"),
              s(:str, "      10000.times do\n"),
              s(:str, "        ObjectSpace.define_finalizer(Object.new, raise_proc)\n"),
              s(:str, "        Thread.handle_interrupt(RuntimeError => :immediate) {break}\n"),
              s(:str, "        Thread.handle_interrupt(RuntimeError => :on_blocking) {break}\n"),
              s(:str, "        Thread.handle_interrupt(RuntimeError => :never) {break}\n"),
              s(:str, "      end\n")),
            s(:lvar, :bug9168),
            s(:hash,
              s(:pair,
                s(:sym, :encoding),
                s(:const,
                  s(:const, nil, :Encoding), :ASCII_8BIT)))))),
      s(:def, :test_interrupt_in_finalizer,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug10595,
            s(:str, "[ruby-core:66825] [Bug #10595]")),
          s(:lvasgn, :src,
            s(:dstr,
              s(:str, "      Signal.trap(:INT, 'DEFAULT')\n"),
              s(:str, "      pid = $$\n"),
              s(:str, "      Thread.start do\n"),
              s(:str, "        10.times {\n"),
              s(:str, "          sleep 0.1\n"),
              s(:str, "          Process.kill(\"INT\", pid) rescue break\n"),
              s(:str, "        }\n"),
              s(:str, "        if RUBY_PLATFORM.include?('solaris')\n"),
              s(:str, "          $stderr.puts `/usr/bin/psig \#{$$}`\n"),
              s(:str, "          $stderr.puts `/usr/bin/psig \#{Process.ppid}`\n"),
              s(:str, "        elsif File.exist?('/proc/self/status')\n"),
              s(:str, "          $stderr.puts IO.read('/proc/self/status')\n"),
              s(:str, "          $stderr.puts IO.read(\"/proc/\#{Process.ppid}/status\")\n"),
              s(:str, "        end\n"),
              s(:str, "      end\n"),
              s(:str, "      f = proc {1000.times {}}\n"),
              s(:str, "      loop do\n"),
              s(:str, "        ObjectSpace.define_finalizer(Object.new, f)\n"),
              s(:str, "      end\n"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err),
              s(:lvasgn, :status)),
            s(:block,
              s(:send, nil, :assert_in_out_err,
                s(:array,
                  s(:str, "-e"),
                  s(:lvar, :src)),
                s(:str, ""),
                s(:array),
                s(:array),
                s(:lvar, :bug10595),
                s(:hash,
                  s(:pair,
                    s(:sym, :signal),
                    s(:sym, :SEGV)))),
              s(:args,
                s(:restarg, :result)),
              s(:break,
                s(:lvar, :result)))),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "mswin|mingw"),
                s(:regopt)),
              s(:const, nil, :RUBY_PLATFORM)), nil,
            s(:send, nil, :assert_equal,
              s(:str, "INT"),
              s(:send,
                s(:const, nil, :Signal), :signame,
                s(:send,
                  s(:lvar, :status), :termsig)),
              s(:lvar, :bug10595))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Interrupt"),
              s(:regopt)),
            s(:send,
              s(:lvar, :err), :first),
            s(:block,
              s(:send, nil, :proc),
              s(:args),
              s(:send,
                s(:lvar, :err), :join,
                s(:str, "\n")))),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)))),
      s(:def, :test_verify_internal_consistency,
        s(:args),
        s(:send, nil, :assert_nil,
          s(:send,
            s(:const, nil, :GC), :verify_internal_consistency))),
      s(:def, :test_gc_stress_on_realloc,
        s(:args),
        s(:send, nil, :assert_normal_exit,
          s(:dstr,
            s(:str, "      class C\n"),
            s(:str, "        def initialize\n"),
            s(:str, "          @a = nil\n"),
            s(:str, "          @b = nil\n"),
            s(:str, "          @c = nil\n"),
            s(:str, "          @d = nil\n"),
            s(:str, "          @e = nil\n"),
            s(:str, "          @f = nil\n"),
            s(:str, "        end\n"),
            s(:str, "      end\n"),
            s(:str, "\n"),
            s(:str, "      GC.stress = true\n"),
            s(:str, "      C.new\n")),
          s(:str, "[Bug #9859]"))),
      s(:def, :test_gc_disabled_start,
        s(:args),
        s(:kwbegin,
          s(:ensure,
            s(:begin,
              s(:lvasgn, :disabled,
                s(:send,
                  s(:const, nil, :GC), :disable)),
              s(:lvasgn, :c,
                s(:send,
                  s(:const, nil, :GC), :count)),
              s(:send,
                s(:const, nil, :GC), :start),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:send,
                    s(:const, nil, :GC), :count), :-,
                  s(:lvar, :c)))),
            s(:if,
              s(:lvar, :disabled), nil,
              s(:send,
                s(:const, nil, :GC), :enable))))),
      s(:def, :test_vm_object,
        s(:args),
        s(:send, nil, :assert_normal_exit,
          s(:dstr,
            s(:str, "      ObjectSpace.each_object{|o| o.singleton_class rescue 0}\n"),
            s(:str, "      ObjectSpace.each_object{|o| case o when Module then o.instance_methods end}\n")),
          s(:str, "[Bug #12583]"))))))
