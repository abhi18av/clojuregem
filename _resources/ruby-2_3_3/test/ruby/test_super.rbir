s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestSuper),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:class,
        s(:const, nil, :Base), nil,
        s(:begin,
          s(:def, :single,
            s(:args,
              s(:arg, :a)),
            s(:lvar, :a)),
          s(:def, :double,
            s(:args,
              s(:arg, :a),
              s(:arg, :b)),
            s(:array,
              s(:lvar, :a),
              s(:lvar, :b))),
          s(:def, :array,
            s(:args,
              s(:restarg, :a)),
            s(:lvar, :a)),
          s(:def, :optional,
            s(:args,
              s(:optarg, :a,
                s(:int, 0))),
            s(:lvar, :a)),
          s(:def, :keyword,
            s(:args,
              s(:kwrestarg, :a)),
            s(:lvar, :a)))),
      s(:class,
        s(:const, nil, :Single1),
        s(:const, nil, :Base),
        s(:def, :single,
          s(:args,
            s(:restarg)),
          s(:zsuper))),
      s(:class,
        s(:const, nil, :Single2),
        s(:const, nil, :Base),
        s(:def, :single,
          s(:args,
            s(:arg, :a),
            s(:restarg)),
          s(:zsuper))),
      s(:class,
        s(:const, nil, :Double1),
        s(:const, nil, :Base),
        s(:def, :double,
          s(:args,
            s(:restarg)),
          s(:zsuper))),
      s(:class,
        s(:const, nil, :Double2),
        s(:const, nil, :Base),
        s(:def, :double,
          s(:args,
            s(:arg, :a),
            s(:restarg)),
          s(:zsuper))),
      s(:class,
        s(:const, nil, :Double3),
        s(:const, nil, :Base),
        s(:def, :double,
          s(:args,
            s(:arg, :a),
            s(:arg, :b),
            s(:restarg)),
          s(:zsuper))),
      s(:class,
        s(:const, nil, :Array1),
        s(:const, nil, :Base),
        s(:def, :array,
          s(:args,
            s(:restarg)),
          s(:zsuper))),
      s(:class,
        s(:const, nil, :Array2),
        s(:const, nil, :Base),
        s(:def, :array,
          s(:args,
            s(:arg, :a),
            s(:restarg)),
          s(:zsuper))),
      s(:class,
        s(:const, nil, :Array3),
        s(:const, nil, :Base),
        s(:def, :array,
          s(:args,
            s(:arg, :a),
            s(:arg, :b),
            s(:restarg)),
          s(:zsuper))),
      s(:class,
        s(:const, nil, :Array4),
        s(:const, nil, :Base),
        s(:def, :array,
          s(:args,
            s(:arg, :a),
            s(:arg, :b),
            s(:arg, :c),
            s(:restarg)),
          s(:zsuper))),
      s(:class,
        s(:const, nil, :Optional1),
        s(:const, nil, :Base),
        s(:def, :optional,
          s(:args,
            s(:optarg, :a,
              s(:int, 1))),
          s(:zsuper))),
      s(:class,
        s(:const, nil, :Optional2),
        s(:const, nil, :Base),
        s(:def, :optional,
          s(:args,
            s(:arg, :a),
            s(:optarg, :b,
              s(:int, 1))),
          s(:zsuper))),
      s(:class,
        s(:const, nil, :Optional3),
        s(:const, nil, :Base),
        s(:def, :single,
          s(:args,
            s(:optarg, :a,
              s(:int, 1))),
          s(:zsuper))),
      s(:class,
        s(:const, nil, :Optional4),
        s(:const, nil, :Base),
        s(:def, :array,
          s(:args,
            s(:optarg, :a,
              s(:int, 1)),
            s(:restarg)),
          s(:zsuper))),
      s(:class,
        s(:const, nil, :Optional5),
        s(:const, nil, :Base),
        s(:def, :array,
          s(:args,
            s(:optarg, :a,
              s(:int, 1)),
            s(:optarg, :b,
              s(:int, 2)),
            s(:restarg)),
          s(:zsuper))),
      s(:class,
        s(:const, nil, :Keyword1),
        s(:const, nil, :Base),
        s(:def, :keyword,
          s(:args,
            s(:kwoptarg, :foo,
              s(:str, "keyword1"))),
          s(:zsuper))),
      s(:class,
        s(:const, nil, :Keyword2),
        s(:const, nil, :Base),
        s(:def, :keyword,
          s(:args,
            s(:kwoptarg, :foo,
              s(:str, "keyword2"))),
          s(:begin,
            s(:lvasgn, :foo,
              s(:str, "changed1")),
            s(:lvasgn, :x,
              s(:zsuper)),
            s(:lvasgn, :foo,
              s(:str, "changed2")),
            s(:lvasgn, :y,
              s(:zsuper)),
            s(:array,
              s(:lvar, :x),
              s(:lvar, :y))))),
      s(:def, :test_single1,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:int, 1),
          s(:send,
            s(:send,
              s(:const, nil, :Single1), :new), :single,
            s(:int, 1)))),
      s(:def, :test_single2,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:int, 1),
          s(:send,
            s(:send,
              s(:const, nil, :Single2), :new), :single,
            s(:int, 1)))),
      s(:def, :test_double1,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:int, 1),
            s(:int, 2)),
          s(:send,
            s(:send,
              s(:const, nil, :Double1), :new), :double,
            s(:int, 1),
            s(:int, 2)))),
      s(:def, :test_double2,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:int, 1),
            s(:int, 2)),
          s(:send,
            s(:send,
              s(:const, nil, :Double2), :new), :double,
            s(:int, 1),
            s(:int, 2)))),
      s(:def, :test_double3,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:int, 1),
            s(:int, 2)),
          s(:send,
            s(:send,
              s(:const, nil, :Double3), :new), :double,
            s(:int, 1),
            s(:int, 2)))),
      s(:def, :test_array1,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:send,
                s(:const, nil, :Array1), :new), :array)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:send,
                s(:const, nil, :Array1), :new), :array,
              s(:int, 1))))),
      s(:def, :test_array2,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:send,
                s(:const, nil, :Array2), :new), :array,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:const, nil, :Array2), :new), :array,
              s(:int, 1),
              s(:int, 2))))),
      s(:def, :test_array3,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:const, nil, :Array3), :new), :array,
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:send,
              s(:send,
                s(:const, nil, :Array3), :new), :array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))))),
      s(:def, :test_array4,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:send,
              s(:send,
                s(:const, nil, :Array4), :new), :array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4)),
            s(:send,
              s(:send,
                s(:const, nil, :Array4), :new), :array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4))))),
      s(:def, :test_optional1,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 9),
            s(:send,
              s(:send,
                s(:const, nil, :Optional1), :new), :optional,
              s(:int, 9))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:const, nil, :Optional1), :new), :optional)))),
      s(:def, :test_optional2,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:int, 9),
              s(:send,
                s(:send,
                  s(:const, nil, :Optional2), :new), :optional,
                s(:int, 9)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:int, 9),
              s(:send,
                s(:send,
                  s(:const, nil, :Optional2), :new), :optional,
                s(:int, 9),
                s(:int, 2)))))),
      s(:def, :test_optional3,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 9),
            s(:send,
              s(:send,
                s(:const, nil, :Optional3), :new), :single,
              s(:int, 9))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:const, nil, :Optional3), :new), :single)))),
      s(:def, :test_optional4,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:send,
                s(:const, nil, :Optional4), :new), :array)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 9)),
            s(:send,
              s(:send,
                s(:const, nil, :Optional4), :new), :array,
              s(:int, 9))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 9),
              s(:int, 8)),
            s(:send,
              s(:send,
                s(:const, nil, :Optional4), :new), :array,
              s(:int, 9),
              s(:int, 8))))),
      s(:def, :test_optional5,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:const, nil, :Optional5), :new), :array)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 9),
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:const, nil, :Optional5), :new), :array,
              s(:int, 9))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 9),
              s(:int, 8)),
            s(:send,
              s(:send,
                s(:const, nil, :Optional5), :new), :array,
              s(:int, 9),
              s(:int, 8))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 9),
              s(:int, 8),
              s(:int, 7)),
            s(:send,
              s(:send,
                s(:const, nil, :Optional5), :new), :array,
              s(:int, 9),
              s(:int, 8),
              s(:int, 7))))),
      s(:def, :test_keyword1,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:sym, :foo),
                s(:str, "keyword1"))),
            s(:send,
              s(:send,
                s(:const, nil, :Keyword1), :new), :keyword)),
          s(:lvasgn, :bug8008,
            s(:str, "[ruby-core:53114] [Bug #8008]")),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:sym, :foo),
                s(:lvar, :bug8008))),
            s(:send,
              s(:send,
                s(:const, nil, :Keyword1), :new), :keyword,
              s(:hash,
                s(:pair,
                  s(:sym, :foo),
                  s(:lvar, :bug8008))))))),
      s(:def, :test_keyword2,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:hash,
              s(:pair,
                s(:sym, :foo),
                s(:str, "changed1"))),
            s(:hash,
              s(:pair,
                s(:sym, :foo),
                s(:str, "changed2")))),
          s(:send,
            s(:send,
              s(:const, nil, :Keyword2), :new), :keyword))),
      s(:class,
        s(:const, nil, :A), nil,
        s(:begin,
          s(:def, :tt,
            s(:args,
              s(:arg, :aa)),
            s(:str, "A#tt")),
          s(:def, :uu,
            s(:args,
              s(:arg, :a)),
            s(:sclass,
              s(:self),
              s(:block,
                s(:send, nil, :define_method,
                  s(:sym, :tt)),
                s(:args,
                  s(:arg, :sym)),
                s(:super,
                  s(:lvar, :sym))))))),
      s(:def, :test_define_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :A), :new)),
          s(:send,
            s(:lvar, :a), :uu,
            s(:int, 12)),
          s(:send, nil, :assert_equal,
            s(:str, "A#tt"),
            s(:send,
              s(:lvar, :a), :tt,
              s(:int, 12)),
            s(:str, "[ruby-core:3856]")),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :RuntimeError),
              s(:regexp,
                s(:str, "implicit argument passing of super from method defined by define_method"),
                s(:regopt)),
              s(:str, "[ruby-core:24244]")),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args),
                s(:send,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Class), :new),
                      s(:args),
                      s(:block,
                        s(:send, nil, :define_method,
                          s(:sym, :a)),
                        s(:args),
                        s(:zsuper))), :new), :a)), :call)))),
      s(:class,
        s(:const, nil, :SubSeq), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args),
            s(:begin,
              s(:ivasgn, :@first,
                s(:int, 11)),
              s(:or,
                s(:ivar, :@first),
                s(:send, nil, :fail)))),
          s(:def, :subseq,
            s(:args),
            s(:or,
              s(:ivar, :@first),
              s(:send, nil, :fail))))),
      s(:class,
        s(:const, nil, :Indexed), nil,
        s(:def, :subseq,
          s(:args),
          s(:send,
            s(:const, nil, :SubSeq), :new))),
      s(:casgn, nil, :Overlaid,
        s(:block,
          s(:send, nil, :proc),
          s(:args),
          s(:sclass,
            s(:self),
            s(:def, :subseq,
              s(:args),
              s(:send,
                s(:zsuper), :instance_eval,
                s(:block_pass,
                  s(:const, nil, :Overlaid))))))),
      s(:def, :test_overlaid,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:str, "[ruby-dev:40959]")),
            s(:args),
            s(:begin,
              s(:lvasgn, :overlaid,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args,
                    s(:arg, :obj)),
                  s(:defs,
                    s(:lvar, :obj), :reverse,
                    s(:args),
                    s(:zsuper)))),
              s(:send,
                s(:lvar, :overlaid), :call,
                s(:lvasgn, :str,
                  s(:str, "123"))),
              s(:send,
                s(:lvar, :overlaid), :call,
                s(:array,
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3))),
              s(:send,
                s(:lvar, :str), :reverse))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:str, "[ruby-core:27230]")),
            s(:args),
            s(:begin,
              s(:lvasgn, :mid,
                s(:send,
                  s(:const, nil, :Indexed), :new)),
              s(:send,
                s(:lvar, :mid), :instance_eval,
                s(:block_pass,
                  s(:const, nil, :Overlaid))),
              s(:send,
                s(:lvar, :mid), :subseq),
              s(:send,
                s(:lvar, :mid), :subseq))))),
      s(:module,
        s(:const, nil, :DoubleInclude),
        s(:begin,
          s(:class,
            s(:const, nil, :Base), nil,
            s(:def, :foo,
              s(:args),
              s(:array,
                s(:sym, :Base)))),
          s(:module,
            s(:const, nil, :Override),
            s(:def, :foo,
              s(:args),
              s(:send,
                s(:zsuper), :<<,
                s(:sym, :Override)))),
          s(:class,
            s(:const, nil, :A),
            s(:const, nil, :Base), nil),
          s(:class,
            s(:const, nil, :B),
            s(:const, nil, :A), nil),
          s(:send,
            s(:const, nil, :B), :send,
            s(:sym, :include),
            s(:const, nil, :Override)),
          s(:send,
            s(:const, nil, :A), :send,
            s(:sym, :include),
            s(:const, nil, :Override)))),
      s(:def, :test_double_include,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:sym, :Base),
            s(:sym, :Override),
            s(:sym, :Override)),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :DoubleInclude), :B), :new), :foo),
          s(:str, "[Bug #3351]"))),
      s(:module,
        s(:const, nil, :DoubleInclude2),
        s(:begin,
          s(:class,
            s(:const, nil, :Base), nil,
            s(:def, :foo,
              s(:args),
              s(:array,
                s(:sym, :Base)))),
          s(:module,
            s(:const, nil, :Override),
            s(:def, :foo,
              s(:args),
              s(:send,
                s(:zsuper), :<<,
                s(:sym, :Override)))),
          s(:class,
            s(:const, nil, :A),
            s(:const, nil, :Base),
            s(:def, :foo,
              s(:args),
              s(:send,
                s(:zsuper), :<<,
                s(:sym, :A)))),
          s(:class,
            s(:const, nil, :B),
            s(:const, nil, :A),
            s(:def, :foo,
              s(:args),
              s(:send,
                s(:zsuper), :<<,
                s(:sym, :B)))),
          s(:send,
            s(:const, nil, :B), :send,
            s(:sym, :include),
            s(:const, nil, :Override)),
          s(:send,
            s(:const, nil, :A), :send,
            s(:sym, :include),
            s(:const, nil, :Override)))),
      s(:def, :test_double_include2,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:sym, :Base),
            s(:sym, :Override),
            s(:sym, :A),
            s(:sym, :Override),
            s(:sym, :B)),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :DoubleInclude2), :B), :new), :foo))),
      s(:def, :test_super_in_instance_eval,
        s(:args),
        s(:begin,
          s(:lvasgn, :super_class,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :labeled_class,
                s(:str, "Superクラス")),
              s(:args),
              s(:def, :foo,
                s(:args),
                s(:return,
                  s(:array,
                    s(:sym, :super),
                    s(:self)))))),
          s(:lvasgn, :sub_class,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :labeled_class,
                s(:str, "Subクラス"),
                s(:lvar, :super_class)),
              s(:args),
              s(:def, :foo,
                s(:args),
                s(:begin,
                  s(:lvasgn, :x,
                    s(:send,
                      s(:const, nil, :Object), :new)),
                  s(:block,
                    s(:send,
                      s(:lvar, :x), :instance_eval),
                    s(:args),
                    s(:super)))))),
          s(:lvasgn, :obj,
            s(:send,
              s(:lvar, :sub_class), :new)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "Sub\\u{30af 30e9 30b9}"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :obj), :foo)))),
      s(:def, :test_super_in_instance_eval_with_define_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :super_class,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :labeled_class,
                s(:str, "Superクラス")),
              s(:args),
              s(:def, :foo,
                s(:args),
                s(:return,
                  s(:array,
                    s(:sym, :super),
                    s(:self)))))),
          s(:lvasgn, :sub_class,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :labeled_class,
                s(:str, "Subクラス"),
                s(:lvar, :super_class)),
              s(:args),
              s(:block,
                s(:send, nil, :define_method,
                  s(:sym, :foo)),
                s(:args),
                s(:begin,
                  s(:lvasgn, :x,
                    s(:send,
                      s(:const, nil, :Object), :new)),
                  s(:block,
                    s(:send,
                      s(:lvar, :x), :instance_eval),
                    s(:args),
                    s(:super)))))),
          s(:lvasgn, :obj,
            s(:send,
              s(:lvar, :sub_class), :new)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "Sub\\u{30af 30e9 30b9}"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :obj), :foo)))),
      s(:def, :test_super_in_orphan_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :super_class,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :labeled_class,
                s(:str, "Superクラス")),
              s(:args),
              s(:def, :foo,
                s(:args),
                s(:return,
                  s(:array,
                    s(:sym, :super),
                    s(:self)))))),
          s(:lvasgn, :sub_class,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :labeled_class,
                s(:str, "Subクラス"),
                s(:lvar, :super_class)),
              s(:args),
              s(:def, :foo,
                s(:args),
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args),
                  s(:super))))),
          s(:lvasgn, :obj,
            s(:send,
              s(:lvar, :sub_class), :new)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :super),
              s(:lvar, :obj)),
            s(:send,
              s(:send,
                s(:lvar, :obj), :foo), :call)))),
      s(:def, :test_super_in_orphan_block_with_instance_eval,
        s(:args),
        s(:begin,
          s(:lvasgn, :super_class,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :labeled_class,
                s(:str, "Superクラス")),
              s(:args),
              s(:def, :foo,
                s(:args),
                s(:return,
                  s(:array,
                    s(:sym, :super),
                    s(:self)))))),
          s(:lvasgn, :sub_class,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :labeled_class,
                s(:str, "Subクラス"),
                s(:lvar, :super_class)),
              s(:args),
              s(:def, :foo,
                s(:args),
                s(:begin,
                  s(:lvasgn, :x,
                    s(:send,
                      s(:const, nil, :Object), :new)),
                  s(:block,
                    s(:send,
                      s(:lvar, :x), :instance_eval),
                    s(:args),
                    s(:block,
                      s(:send, nil, :lambda),
                      s(:args),
                      s(:super))))))),
          s(:lvasgn, :obj,
            s(:send,
              s(:lvar, :sub_class), :new)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "Sub\\u{30af 30e9 30b9}"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:send,
                s(:lvar, :obj), :foo), :call)))),
      s(:def, :test_yielding_super,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:def, :yielder,
                s(:args),
                s(:yield)))),
          s(:lvasgn, :x,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:block,
                s(:send, nil, :define_singleton_method,
                  s(:sym, :hello)),
                s(:args),
                s(:str, "hi")))),
          s(:lvasgn, :y,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:lvar, :x)),
              s(:args),
              s(:block,
                s(:send, nil, :define_singleton_method,
                  s(:sym, :hello)),
                s(:args),
                s(:begin,
                  s(:lvasgn, :m,
                    s(:send,
                      s(:lvar, :a), :new)),
                  s(:block,
                    s(:send,
                      s(:lvar, :m), :yielder),
                    s(:args),
                    s(:super)))))),
          s(:send, nil, :assert_equal,
            s(:str, "hi"),
            s(:send,
              s(:lvar, :y), :hello)))),
      s(:def, :test_super_in_thread,
        s(:args),
        s(:begin,
          s(:lvasgn, :hoge,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:def, :bar,
                s(:args),
                s(:str, "hoge")))),
          s(:lvasgn, :foo,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:lvar, :hoge)),
              s(:args),
              s(:def, :bar,
                s(:args),
                s(:send,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Thread), :new),
                      s(:args),
                      s(:zsuper)), :join), :value)))),
          s(:send, nil, :assert_equal,
            s(:str, "hoge"),
            s(:send,
              s(:send,
                s(:lvar, :foo), :new), :bar)))),
      s(:def, :assert_super_in_block,
        s(:args,
          s(:arg, :type)),
        s(:begin,
          s(:lvasgn, :bug7064,
            s(:str, "[ruby-core:47680]")),
          s(:send, nil, :assert_normal_exit,
            s(:dstr,
              s(:begin,
                s(:lvar, :type)),
              s(:str, " {super}")),
            s(:lvar, :bug7064)))),
      s(:def, :test_super_in_at_exit,
        s(:args),
        s(:send, nil, :assert_super_in_block,
          s(:str, "at_exit"))),
      s(:def, :test_super_in_END,
        s(:args),
        s(:send, nil, :assert_super_in_block,
          s(:str, "END"))),
      s(:def, :test_super_in_BEGIN,
        s(:args),
        s(:send, nil, :assert_super_in_block,
          s(:str, "BEGIN"))),
      s(:class,
        s(:const, nil, :X), nil,
        s(:def, :foo,
          s(:args,
            s(:restarg, :args)),
          s(:lvar, :args))),
      s(:class,
        s(:const, nil, :Y),
        s(:const, nil, :X),
        s(:block,
          s(:send, nil, :define_method,
            s(:sym, :foo)),
          s(:args,
            s(:restarg, :args)),
          s(:super,
            s(:splat,
              s(:lvar, :args))))),
      s(:def, :test_super_splat,
        s(:args),
        s(:begin,
          s(:lvasgn, :y,
            s(:send,
              s(:const, nil, :Y), :new)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :y), :foo,
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:false)),
            s(:send,
              s(:lvar, :y), :foo,
              s(:int, 1),
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 5)),
            s(:send,
              s(:lvar, :y), :foo,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:false),
              s(:true)),
            s(:send,
              s(:lvar, :y), :foo,
              s(:false),
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:false),
              s(:false)),
            s(:send,
              s(:lvar, :y), :foo,
              s(:false),
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:false),
              s(:int, 5)),
            s(:send,
              s(:lvar, :y), :foo,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:false),
              s(:int, 5))))),
      s(:def, :test_missing_super,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new),
                s(:args),
                s(:def, :foo,
                  s(:args),
                  s(:zsuper))), :new)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :NoMethodError)),
              s(:args),
              s(:send,
                s(:lvar, :o), :foo))),
          s(:send, nil, :assert_same,
            s(:lvar, :o),
            s(:send,
              s(:lvar, :e), :receiver)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :e), :name)))),
      s(:def, :test_missing_super_in_method_module,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9315,
            s(:str, "[ruby-core:59358] [Bug #9315]")),
          s(:lvasgn, :a,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:def, :foo,
                s(:args),
                s(:zsuper)))),
          s(:lvasgn, :b,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:send, nil, :include,
                s(:lvar, :a)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError),
              s(:lvar, :bug9315)),
            s(:args),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :b), :new), :method,
                s(:sym, :foo)), :call)))),
      s(:def, :test_module_super_in_method_module,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9315,
            s(:str, "[ruby-core:59589] [Bug #9315]")),
          s(:lvasgn, :a,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:def, :foo,
                s(:args),
                s(:zsuper)))),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:def, :foo,
                s(:args),
                s(:sym, :ok)))),
          s(:lvasgn, :o,
            s(:send,
              s(:send,
                s(:lvar, :c), :new), :extend,
              s(:lvar, :a))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :NoMethodError),
              s(:lvar, :bug9315)),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:sym, :ok),
              s(:send,
                s(:send,
                  s(:lvar, :o), :method,
                  s(:sym, :foo)), :call),
              s(:lvar, :bug9315))))),
      s(:def, :test_missing_super_in_module_unbound_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9377,
            s(:str, "[ruby-core:59619] [Bug #9377]")),
          s(:lvasgn, :a,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:def, :foo,
                s(:args),
                s(:zsuper)))),
          s(:lvasgn, :m,
            s(:send,
              s(:send,
                s(:lvar, :a), :instance_method,
                s(:sym, :foo)), :bind,
              s(:send,
                s(:const, nil, :Object), :new))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError),
              s(:lvar, :bug9377)),
            s(:args),
            s(:send,
              s(:lvar, :m), :call)))),
      s(:def, :test_super_in_module_unbound_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9721,
            s(:str, "[ruby-core:61936] [Bug #9721]")),
          s(:lvasgn, :a,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:def, :foo,
                s(:args,
                  s(:arg, :result)),
                s(:send,
                  s(:lvar, :result), :<<,
                  s(:str, "A"))))),
          s(:lvasgn, :b,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:def, :foo,
                s(:args,
                  s(:arg, :result)),
                s(:begin,
                  s(:send,
                    s(:lvar, :result), :<<,
                    s(:str, "B")),
                  s(:zsuper))))),
          s(:lvasgn, :um,
            s(:send,
              s(:lvar, :b), :instance_method,
              s(:sym, :foo))),
          s(:lvasgn, :m,
            s(:send,
              s(:lvar, :um), :bind,
              s(:send,
                s(:send,
                  s(:const, nil, :Object), :new), :extend,
                s(:lvar, :a)))),
          s(:lvasgn, :result,
            s(:array)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :NoMethodError),
              s(:lvar, :bug9721)),
            s(:args),
            s(:send,
              s(:lvar, :m), :call,
              s(:lvar, :result))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "B"),
              s(:str, "A")),
            s(:lvar, :result),
            s(:lvar, :bug9721)),
          s(:lvasgn, :bug9740,
            s(:str, "[ruby-core:62017] [Bug #9740]")),
          s(:block,
            s(:send,
              s(:lvar, :b), :module_eval),
            s(:args),
            s(:block,
              s(:send, nil, :define_method,
                s(:sym, :foo)),
              s(:args,
                s(:arg, :result)),
              s(:send,
                s(:send,
                  s(:lvar, :um), :bind,
                  s(:self)), :call,
                s(:lvar, :result)))),
          s(:send,
            s(:lvar, :result), :clear),
          s(:lvasgn, :o,
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Object), :new), :extend,
                s(:lvar, :a)), :extend,
              s(:lvar, :b))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :NoMethodError),
              s(:const, nil, :SystemStackError),
              s(:lvar, :bug9740)),
            s(:args),
            s(:send,
              s(:lvar, :o), :foo,
              s(:lvar, :result))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "B"),
              s(:str, "A")),
            s(:lvar, :result),
            s(:lvar, :bug9721)))),
      s(:def, :test_from_eval,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug10263,
            s(:str, "[ruby-core:65122] [Bug #10263a]")),
          s(:lvasgn, :a,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:def, :foo,
                s(:args),
                s(:str, "A")))),
          s(:lvasgn, :b,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:lvar, :a)),
              s(:args),
              s(:def, :foo,
                s(:args),
                s(:send,
                  s(:send, nil, :binding), :eval,
                  s(:str, "super"))))),
          s(:send, nil, :assert_equal,
            s(:str, "A"),
            s(:send,
              s(:send,
                s(:lvar, :b), :new), :foo),
            s(:lvar, :bug10263)))),
      s(:def, :test_super_with_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:def, :foo,
                s(:args),
                s(:yield)))),
          s(:lvasgn, :b,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:lvar, :a)),
              s(:args),
              s(:def, :foo,
                s(:args),
                s(:block,
                  s(:zsuper),
                  s(:args),
                  s(:str, "b"))))),
          s(:send, nil, :assert_equal,
            s(:str, "b"),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :b), :new), :foo),
              s(:args),
              s(:str, "c"))))),
      s(:def, :test_public_zsuper_with_prepend,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug12876,
            s(:str, "[ruby-core:77784] [Bug #12876]")),
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :EnvUtil), :labeled_module,
              s(:str, "M"))),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :labeled_class,
                s(:str, "C")),
              s(:args),
              s(:begin,
                s(:send, nil, :prepend,
                  s(:lvar, :m)),
                s(:send, nil, :public,
                  s(:sym, :initialize))))),
          s(:lvasgn, :o,
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:const,
                  s(:const, nil, :Timeout), :Error),
                s(:lvar, :bug12876)),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :Timeout), :timeout,
                  s(:int, 3)),
                s(:args),
                s(:send,
                  s(:lvar, :c), :new)))),
          s(:send, nil, :assert_instance_of,
            s(:lvar, :c),
            s(:lvar, :o)),
          s(:block,
            s(:send,
              s(:lvar, :m), :module_eval),
            s(:args),
            s(:def, :initialize,
              s(:args),
              s(:send, nil, :raise,
                s(:str, "exception in M")))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :RuntimeError),
              s(:str, "exception in M")),
            s(:args),
            s(:send,
              s(:lvar, :c), :new)))))))
