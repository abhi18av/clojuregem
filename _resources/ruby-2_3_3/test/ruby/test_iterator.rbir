s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :Array), nil,
    s(:begin,
      s(:def, :iter_test1,
        s(:args),
        s(:block,
          s(:send,
            s(:block,
              s(:send, nil, :collect),
              s(:args,
                s(:arg, :e)),
              s(:array,
                s(:lvar, :e),
                s(:yield,
                  s(:lvar, :e)))), :sort),
          s(:args,
            s(:arg, :a),
            s(:arg, :b)),
          s(:send,
            s(:send,
              s(:lvar, :a), :[],
              s(:int, 1)), :<=>,
            s(:send,
              s(:lvar, :b), :[],
              s(:int, 1))))),
      s(:def, :iter_test2,
        s(:args),
        s(:begin,
          s(:lvasgn, :ary,
            s(:block,
              s(:send, nil, :collect),
              s(:args,
                s(:arg, :e)),
              s(:array,
                s(:lvar, :e),
                s(:yield,
                  s(:lvar, :e))))),
          s(:block,
            s(:send,
              s(:lvar, :ary), :sort),
            s(:args,
              s(:arg, :a),
              s(:arg, :b)),
            s(:send,
              s(:send,
                s(:lvar, :a), :[],
                s(:int, 1)), :<=>,
              s(:send,
                s(:lvar, :b), :[],
                s(:int, 1)))))))),
  s(:class,
    s(:const, nil, :TestIterator),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :ttt,
        s(:args),
        s(:send, nil, :assert,
          s(:send, nil, :iterator?))),
      s(:def, :test_iterator,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :iterator?), :!)),
          s(:block,
            s(:send, nil, :ttt),
            s(:args), nil),
          s(:send, nil, :assert,
            s(:send,
              s(:defined?,
                s(:yield)), :!)))),
      s(:def, :test_array,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4))),
          s(:lvasgn, :y,
            s(:array)),
          s(:for,
            s(:lvasgn, :i),
            s(:lvar, :x),
            s(:send,
              s(:lvar, :y), :push,
              s(:lvar, :i))),
          s(:send, nil, :assert_equal,
            s(:lvar, :x),
            s(:lvar, :y)))),
      s(:def, :tt,
        s(:args),
        s(:block,
          s(:send,
            s(:int, 1), :upto,
            s(:int, 10)),
          s(:args,
            s(:arg, :i)),
          s(:yield,
            s(:lvar, :i)))),
      s(:def, :tt2,
        s(:args,
          s(:arg, :dummy)),
        s(:yield,
          s(:int, 1))),
      s(:def, :tt3,
        s(:args,
          s(:blockarg, :block)),
        s(:send, nil, :tt2,
          s(:send, nil, :raise,
            s(:const, nil, :ArgumentError),
            s(:str, "")),
          s(:block_pass,
            s(:lvar, :block)))),
      s(:def, :test_nested_iterator,
        s(:args),
        s(:begin,
          s(:lvasgn, :i,
            s(:int, 0)),
          s(:block,
            s(:send, nil, :tt),
            s(:args,
              s(:arg, :j)),
            s(:if,
              s(:send,
                s(:lvar, :j), :==,
                s(:int, 5)),
              s(:break), nil)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:lvar, :i)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:block,
              s(:send, nil, :tt3),
              s(:args), nil)))),
      s(:def, :tt4,
        s(:args,
          s(:blockarg, :block)),
        s(:send, nil, :tt2,
          s(:send, nil, :raise,
            s(:const, nil, :ArgumentError),
            s(:str, "")),
          s(:block_pass,
            s(:lvar, :block)))),
      s(:def, :test_block_argument_without_paren,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:block,
            s(:send, nil, :tt4),
            s(:args), nil))),
      s(:def, :test_break,
        s(:args),
        s(:begin,
          s(:lvasgn, :done,
            s(:true)),
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:begin,
              s(:break),
              s(:lvasgn, :done,
                s(:false)))),
          s(:send, nil, :assert,
            s(:lvar, :done)),
          s(:lvasgn, :done,
            s(:false)),
          s(:lvasgn, :bad,
            s(:false)),
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:begin,
              s(:if,
                s(:lvar, :done),
                s(:break), nil),
              s(:lvasgn, :done,
                s(:true)),
              s(:next),
              s(:lvasgn, :bad,
                s(:true)))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :bad), :!)),
          s(:lvasgn, :done,
            s(:false)),
          s(:lvasgn, :bad,
            s(:false)),
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:begin,
              s(:if,
                s(:lvar, :done),
                s(:break), nil),
              s(:lvasgn, :done,
                s(:true)),
              s(:redo),
              s(:lvasgn, :bad,
                s(:true)))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :bad), :!)),
          s(:lvasgn, :x,
            s(:array)),
          s(:for,
            s(:lvasgn, :i),
            s(:irange,
              s(:int, 1),
              s(:int, 7)),
            s(:send,
              s(:lvar, :x), :push,
              s(:lvar, :i))),
          s(:send, nil, :assert_equal,
            s(:int, 7),
            s(:send,
              s(:lvar, :x), :size)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 5),
              s(:int, 6),
              s(:int, 7)),
            s(:lvar, :x)))),
      s(:def, :test_append_method_to_built_in_class,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 2)),
              s(:array,
                s(:int, 3),
                s(:int, 4)),
              s(:array,
                s(:int, 5),
                s(:int, 6)))),
          s(:send, nil, :assert_equal,
            s(:block,
              s(:send,
                s(:lvar, :x), :iter_test1),
              s(:args,
                s(:arg, :x)),
              s(:lvar, :x)),
            s(:block,
              s(:send,
                s(:lvar, :x), :iter_test2),
              s(:args,
                s(:arg, :x)),
              s(:lvar, :x))))),
      s(:class,
        s(:const, nil, :IterTest), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :e)),
            s(:ivasgn, :@body,
              s(:lvar, :e))),
          s(:def, :each0,
            s(:args,
              s(:blockarg, :block)),
            s(:send,
              s(:ivar, :@body), :each,
              s(:block_pass,
                s(:lvar, :block)))),
          s(:def, :each1,
            s(:args,
              s(:blockarg, :block)),
            s(:block,
              s(:send,
                s(:ivar, :@body), :each),
              s(:args,
                s(:restarg, :x)),
              s(:send,
                s(:lvar, :block), :call,
                s(:splat,
                  s(:lvar, :x))))),
          s(:def, :each2,
            s(:args,
              s(:blockarg, :block)),
            s(:block,
              s(:send,
                s(:ivar, :@body), :each),
              s(:args,
                s(:restarg, :x)),
              s(:send,
                s(:lvar, :block), :call,
                s(:lvar, :x)))),
          s(:def, :each3,
            s(:args,
              s(:blockarg, :block)),
            s(:block,
              s(:send,
                s(:ivar, :@body), :each),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :block), :call,
                s(:splat,
                  s(:lvar, :x))))),
          s(:def, :each4,
            s(:args,
              s(:blockarg, :block)),
            s(:block,
              s(:send,
                s(:ivar, :@body), :each),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :block), :call,
                s(:lvar, :x)))),
          s(:def, :each5,
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@body), :each),
              s(:args,
                s(:restarg, :x)),
              s(:yield,
                s(:splat,
                  s(:lvar, :x))))),
          s(:def, :each6,
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@body), :each),
              s(:args,
                s(:restarg, :x)),
              s(:yield,
                s(:lvar, :x)))),
          s(:def, :each7,
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@body), :each),
              s(:args,
                s(:arg, :x)),
              s(:yield,
                s(:splat,
                  s(:lvar, :x))))),
          s(:def, :each8,
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@body), :each),
              s(:args,
                s(:arg, :x)),
              s(:yield,
                s(:lvar, :x)))),
          s(:def, :f,
            s(:args,
              s(:arg, :a)),
            s(:lvar, :a)))),
      s(:def, :test_itertest,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :IterTest), :new,
                    s(:nil)), :method,
                  s(:sym, :f)), :to_proc), :call,
              s(:array,
                s(:int, 1)))),
          s(:lvasgn, :m,
            s(:send,
              s(:regexp,
                s(:str, "\\w+"),
                s(:regopt)), :match,
              s(:str, "abc"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :m)),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :IterTest), :new,
                    s(:nil)), :method,
                  s(:sym, :f)), :to_proc), :call,
              s(:array,
                s(:lvar, :m)))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :IterTest), :new,
                s(:array,
                  s(:int, 0))), :each0),
            s(:args,
              s(:arg, :x)),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:lvar, :x))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :IterTest), :new,
                s(:array,
                  s(:int, 1))), :each1),
            s(:args,
              s(:arg, :x)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:lvar, :x))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :IterTest), :new,
                s(:array,
                  s(:int, 2))), :each2),
            s(:args,
              s(:arg, :x)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 2)),
              s(:lvar, :x))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :IterTest), :new,
                s(:array,
                  s(:int, 4))), :each4),
            s(:args,
              s(:arg, :x)),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:lvar, :x))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :IterTest), :new,
                s(:array,
                  s(:int, 5))), :each5),
            s(:args,
              s(:arg, :x)),
            s(:send, nil, :assert_equal,
              s(:int, 5),
              s(:lvar, :x))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :IterTest), :new,
                s(:array,
                  s(:int, 6))), :each6),
            s(:args,
              s(:arg, :x)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 6)),
              s(:lvar, :x))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :IterTest), :new,
                s(:array,
                  s(:int, 8))), :each8),
            s(:args,
              s(:arg, :x)),
            s(:send, nil, :assert_equal,
              s(:int, 8),
              s(:lvar, :x))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :IterTest), :new,
                s(:array,
                  s(:array,
                    s(:int, 0)))), :each0),
            s(:args,
              s(:arg, :x)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 0)),
              s(:lvar, :x))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :IterTest), :new,
                s(:array,
                  s(:array,
                    s(:int, 1)))), :each1),
            s(:args,
              s(:arg, :x)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 1)),
              s(:lvar, :x))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :IterTest), :new,
                s(:array,
                  s(:array,
                    s(:int, 2)))), :each2),
            s(:args,
              s(:arg, :x)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:int, 2))),
              s(:lvar, :x))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :IterTest), :new,
                s(:array,
                  s(:array,
                    s(:int, 3)))), :each3),
            s(:args,
              s(:arg, :x)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:lvar, :x))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :IterTest), :new,
                s(:array,
                  s(:array,
                    s(:int, 4)))), :each4),
            s(:args,
              s(:arg, :x)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 4)),
              s(:lvar, :x))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :IterTest), :new,
                s(:array,
                  s(:array,
                    s(:int, 5)))), :each5),
            s(:args,
              s(:arg, :x)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 5)),
              s(:lvar, :x))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :IterTest), :new,
                s(:array,
                  s(:array,
                    s(:int, 6)))), :each6),
            s(:args,
              s(:arg, :x)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:int, 6))),
              s(:lvar, :x))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :IterTest), :new,
                s(:array,
                  s(:array,
                    s(:int, 7)))), :each7),
            s(:args,
              s(:arg, :x)),
            s(:send, nil, :assert_equal,
              s(:int, 7),
              s(:lvar, :x))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :IterTest), :new,
                s(:array,
                  s(:array,
                    s(:int, 8)))), :each8),
            s(:args,
              s(:arg, :x)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 8)),
              s(:lvar, :x))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :IterTest), :new,
                s(:array,
                  s(:array,
                    s(:int, 0),
                    s(:int, 0)))), :each0),
            s(:args,
              s(:restarg, :x)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:int, 0),
                  s(:int, 0))),
              s(:lvar, :x))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :IterTest), :new,
                s(:array,
                  s(:array,
                    s(:int, 8),
                    s(:int, 8)))), :each8),
            s(:args,
              s(:restarg, :x)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:int, 8),
                  s(:int, 8))),
              s(:lvar, :x))))),
      s(:def, :m,
        s(:args,
          s(:arg, :var)),
        s(:lvar, :var)),
      s(:def, :m1,
        s(:args),
        s(:send, nil, :m,
          s(:send, nil, :block_given?))),
      s(:def, :m2,
        s(:args),
        s(:send, nil, :m,
          s(:send, nil, :block_given?),
          s(:block_pass,
            s(:block,
              s(:send, nil, :proc),
              s(:args), nil)))),
      s(:def, :test_block_given,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:block,
              s(:send, nil, :m1),
              s(:args),
              s(:send, nil, :p,
                s(:str, "test")))),
          s(:send, nil, :assert,
            s(:block,
              s(:send, nil, :m2),
              s(:args),
              s(:send, nil, :p,
                s(:str, "test")))),
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :m1), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :m2), :!)))),
      s(:def, :m3,
        s(:args,
          s(:arg, :var),
          s(:blockarg, :block)),
        s(:send, nil, :m,
          s(:yield,
            s(:lvar, :var)),
          s(:block_pass,
            s(:lvar, :block)))),
      s(:def, :m4,
        s(:args,
          s(:blockarg, :block)),
        s(:send, nil, :m,
          s(:send, nil, :m1),
          s(:block_pass,
            s(:lvar, :block)))),
      s(:def, :test_block_passing,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :m4), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:block,
                s(:send, nil, :m4),
                s(:args), nil), :!)),
          s(:send, nil, :assert_equal,
            s(:int, 100),
            s(:block,
              s(:send, nil, :m3,
                s(:int, 10)),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :*,
                s(:lvar, :x)))))),
      s(:class,
        s(:const, nil, :C), nil,
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :Enumerable)),
          s(:def, :initialize,
            s(:args),
            s(:ivasgn, :@a,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)))),
          s(:def, :each,
            s(:args,
              s(:blockarg, :block)),
            s(:send,
              s(:ivar, :@a), :each,
              s(:block_pass,
                s(:lvar, :block)))))),
      s(:def, :test_collect,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:int, 1),
            s(:int, 2),
            s(:int, 3)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :C), :new), :collect),
            s(:args,
              s(:arg, :n)),
            s(:lvar, :n)))),
      s(:def, :test_proc,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Proc),
            s(:block,
              s(:send, nil, :lambda),
              s(:args), nil)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Proc),
            s(:block,
              s(:send,
                s(:const, nil, :Proc), :new),
              s(:args), nil)),
          s(:send,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :a)),
              s(:send, nil, :assert_equal,
                s(:lvar, :a),
                s(:int, 1))), :call,
            s(:int, 1)))),
      s(:def, :test_block,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :NilClass),
            s(:send, nil, :get_block)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Proc),
            s(:block,
              s(:send, nil, :get_block),
              s(:args), nil)))),
      s(:def, :test_argument,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args), nil), :call)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args), nil), :call,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a)), nil), :call,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a)), nil), :call)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a)), nil), :call,
              s(:int, 1),
              s(:int, 2))))),
      s(:def, :get_block,
        s(:args,
          s(:blockarg, :block)),
        s(:lvar, :block)),
      s(:def, :test_get_block,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Proc),
            s(:block,
              s(:send, nil, :get_block),
              s(:args), nil)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :get_block),
                s(:args), nil), :call)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :get_block),
                s(:args), nil), :call,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :get_block),
                s(:args,
                  s(:arg, :a)), nil), :call,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :get_block),
                s(:args,
                  s(:arg, :a)), nil), :call)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :get_block),
                s(:args,
                  s(:arg, :a)), nil), :call,
              s(:int, 1),
              s(:int, 2))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:send, nil, :get_block,
                s(:block_pass,
                  s(:block,
                    s(:send, nil, :lambda),
                    s(:args), nil))), :call)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send, nil, :get_block,
                s(:block_pass,
                  s(:block,
                    s(:send, nil, :lambda),
                    s(:args), nil))), :call,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:send, nil, :get_block,
                s(:block_pass,
                  s(:block,
                    s(:send, nil, :lambda),
                    s(:args,
                      s(:arg, :a)), nil))), :call,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send, nil, :get_block,
                s(:block_pass,
                  s(:block,
                    s(:send, nil, :lambda),
                    s(:args,
                      s(:arg, :a)), nil))), :call,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :block,
            s(:block,
              s(:send, nil, :get_block),
              s(:args),
              s(:int, 11))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Proc),
            s(:lvar, :block)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Proc),
            s(:send,
              s(:lvar, :block), :to_proc)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :block), :clone), :call),
            s(:int, 11)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Proc),
            s(:send, nil, :get_block,
              s(:block_pass,
                s(:lvar, :block)))),
          s(:lvasgn, :lmd,
            s(:block,
              s(:send, nil, :lambda),
              s(:args),
              s(:int, 44))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Proc),
            s(:lvar, :lmd)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Proc),
            s(:send,
              s(:lvar, :lmd), :to_proc)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :lmd), :clone), :call),
            s(:int, 44)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Proc),
            s(:send, nil, :get_block,
              s(:block_pass,
                s(:lvar, :lmd)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Proc), :new),
                s(:args,
                  s(:arg, :a)),
                s(:lvar, :a)), :call,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Proc), :new),
                s(:args,
                  s(:arg, :a)), nil), :call,
              s(:int, 1),
              s(:int, 2))))),
      s(:def, :return1_test,
        s(:args),
        s(:send,
          s(:send,
            s(:block,
              s(:send,
                s(:const, nil, :Proc), :new),
              s(:args),
              s(:return,
                s(:int, 55))), :call), :+,
          s(:int, 5))),
      s(:def, :test_return1,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:int, 55),
          s(:send, nil, :return1_test))),
      s(:def, :return2_test,
        s(:args),
        s(:send,
          s(:send,
            s(:block,
              s(:send, nil, :lambda),
              s(:args),
              s(:return,
                s(:int, 55))), :call), :+,
          s(:int, 5))),
      s(:def, :test_return2,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:int, 60),
          s(:send, nil, :return2_test))),
      s(:def, :proc_call,
        s(:args,
          s(:blockarg, :b)),
        s(:send,
          s(:lvar, :b), :call)),
      s(:def, :proc_yield,
        s(:args),
        s(:yield)),
      s(:def, :proc_return1,
        s(:args),
        s(:send,
          s(:block,
            s(:send, nil, :proc_call),
            s(:args),
            s(:return,
              s(:int, 42))), :+,
          s(:int, 1))),
      s(:def, :test_proc_return1,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:int, 42),
          s(:send, nil, :proc_return1))),
      s(:def, :proc_return2,
        s(:args),
        s(:send,
          s(:block,
            s(:send, nil, :proc_yield),
            s(:args),
            s(:return,
              s(:int, 42))), :+,
          s(:int, 1))),
      s(:def, :test_proc_return2,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:int, 42),
          s(:send, nil, :proc_return2))),
      s(:def, :test_ljump,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :LocalJumpError)),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :get_block),
                s(:args),
                s(:break)), :call)),
          s(:kwbegin,
            s(:rescue,
              s(:lvasgn, :val,
                s(:send,
                  s(:block,
                    s(:send, nil, :lambda),
                    s(:args),
                    s(:break,
                      s(:int, 11))), :call)),
              s(:resbody,
                s(:array,
                  s(:const, nil, :LocalJumpError)), nil,
                s(:send, nil, :assert,
                  s(:false),
                  s(:str, "LocalJumpError occurred from break in lambda"))),
              s(:send, nil, :assert_equal,
                s(:int, 11),
                s(:lvar, :val)))),
          s(:lvasgn, :block,
            s(:block,
              s(:send, nil, :get_block),
              s(:args),
              s(:int, 11))),
          s(:lvasgn, :lmd,
            s(:block,
              s(:send, nil, :lambda),
              s(:args),
              s(:int, 44))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :block), :arity)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :lmd), :arity)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args), nil), :arity)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a)), nil), :arity)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a)), nil), :arity)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a),
                  s(:arg, :b)), nil), :arity)))),
      s(:def, :marity_test,
        s(:args,
          s(:arg, :m)),
        s(:begin,
          s(:lvasgn, :mobj,
            s(:send, nil, :method,
              s(:lvar, :m))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :mobj), :arity),
            s(:send,
              s(:send,
                s(:lvar, :mobj), :to_proc), :arity)))),
      s(:def, :test_marity,
        s(:args),
        s(:begin,
          s(:send, nil, :marity_test,
            s(:sym, :assert)),
          s(:send, nil, :marity_test,
            s(:sym, :marity_test)),
          s(:send, nil, :marity_test,
            s(:sym, :p)),
          s(:send,
            s(:send, nil, :lambda,
              s(:block_pass,
                s(:send, nil, :method,
                  s(:sym, :assert)))), :call,
            s(:true)),
          s(:send,
            s(:send, nil, :lambda,
              s(:block_pass,
                s(:block,
                  s(:send, nil, :get_block),
                  s(:args,
                    s(:arg, :a),
                    s(:arg, :n)),
                  s(:send, nil, :assert,
                    s(:lvar, :a),
                    s(:lvar, :n))))), :call,
            s(:true),
            s(:str, "marity")))),
      s(:def, :foo,
        s(:args),
        s(:yield,
          s(:sym, :key),
          s(:sym, :value))),
      s(:def, :bar,
        s(:args,
          s(:blockarg, :blk)),
        s(:send,
          s(:lvar, :blk), :call,
          s(:sym, :key),
          s(:sym, :value))),
      s(:def, :test_yield_vs_call,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :foo),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:sym, :key),
                s(:sym, :value)),
              s(:array,
                s(:lvar, :k),
                s(:lvar, :v)))),
          s(:block,
            s(:send, nil, :bar),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:sym, :key),
                s(:sym, :value)),
              s(:array,
                s(:lvar, :k),
                s(:lvar, :v)))))),
      s(:class,
        s(:const, nil, :H), nil,
        s(:begin,
          s(:def, :each,
            s(:args),
            s(:yield,
              s(:array,
                s(:sym, :key),
                s(:sym, :value)))),
          s(:alias,
            s(:sym, :each_pair),
            s(:sym, :each)))),
      s(:def, :test_assoc_yield,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:hash,
                s(:pair,
                  s(:sym, :key),
                  s(:sym, :value))),
              s(:send,
                s(:const, nil, :H), :new)), :each),
          s(:args,
            s(:arg, :h)),
          s(:begin,
            s(:block,
              s(:send,
                s(:lvar, :h), :each),
              s(:args,
                s(:arg, :a)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:sym, :key),
                  s(:sym, :value)),
                s(:lvar, :a))),
            s(:block,
              s(:send,
                s(:lvar, :h), :each),
              s(:args,
                s(:arg, :a)),
              s(:send, nil, :assert_equal,
                s(:sym, :key),
                s(:lvar, :a))),
            s(:block,
              s(:send,
                s(:lvar, :h), :each),
              s(:args,
                s(:restarg, :a)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:array,
                    s(:sym, :key),
                    s(:sym, :value))),
                s(:lvar, :a))),
            s(:block,
              s(:send,
                s(:lvar, :h), :each),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:sym, :key),
                  s(:sym, :value)),
                s(:array,
                  s(:lvar, :k),
                  s(:lvar, :v)))),
            s(:block,
              s(:send,
                s(:lvar, :h), :each_pair),
              s(:args,
                s(:arg, :a)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:sym, :key),
                  s(:sym, :value)),
                s(:lvar, :a))),
            s(:block,
              s(:send,
                s(:lvar, :h), :each_pair),
              s(:args,
                s(:arg, :a)),
              s(:send, nil, :assert_equal,
                s(:sym, :key),
                s(:lvar, :a))),
            s(:block,
              s(:send,
                s(:lvar, :h), :each_pair),
              s(:args,
                s(:restarg, :a)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:array,
                    s(:sym, :key),
                    s(:sym, :value))),
                s(:lvar, :a))),
            s(:block,
              s(:send,
                s(:lvar, :h), :each_pair),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:sym, :key),
                  s(:sym, :value)),
                s(:array,
                  s(:lvar, :k),
                  s(:lvar, :v))))))),
      s(:class,
        s(:const, nil, :ITER_TEST1), nil,
        s(:def, :a,
          s(:args),
          s(:send, nil, :block_given?))),
      s(:class,
        s(:const, nil, :ITER_TEST2),
        s(:const, nil, :ITER_TEST1),
        s(:begin,
          s(:send, nil, :include,
            s(:const,
              s(:const,
                s(:const, nil, :Test), :Unit), :Assertions)),
          s(:def, :a,
            s(:args),
            s(:begin,
              s(:send, nil, :assert,
                s(:zsuper)),
              s(:zsuper))))),
      s(:def, :test_iter_test2,
        s(:args),
        s(:send, nil, :assert,
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :ITER_TEST2), :new), :a),
            s(:args), nil))),
      s(:class,
        s(:const, nil, :ITER_TEST3), nil,
        s(:def, :foo,
          s(:args,
            s(:arg, :x)),
          s(:begin,
            s(:if,
              s(:send, nil, :block_given?),
              s(:return,
                s(:yield)), nil),
            s(:lvar, :x)))),
      s(:class,
        s(:const, nil, :ITER_TEST4),
        s(:const, nil, :ITER_TEST3),
        s(:begin,
          s(:send, nil, :include,
            s(:const,
              s(:const,
                s(:const, nil, :Test), :Unit), :Assertions)),
          s(:def, :foo,
            s(:args,
              s(:arg, :x)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:zsuper),
                s(:yield)),
              s(:send, nil, :assert_equal,
                s(:lvar, :x),
                s(:super,
                  s(:lvar, :x),
                  s(:block_pass,
                    s(:nil)))))))),
      s(:def, :test_iter4,
        s(:args),
        s(:block,
          s(:send,
            s(:send,
              s(:const, nil, :ITER_TEST4), :new), :foo,
            s(:int, 44)),
          s(:args),
          s(:int, 55))),
      s(:def, :test_break__nested_loop1,
        s(:args),
        s(:block,
          s(:send, nil, :_test_break__nested_loop1),
          s(:args),
          s(:break))),
      s(:def, :_test_break__nested_loop1,
        s(:args),
        s(:begin,
          s(:while,
            s(:true),
            s(:yield)),
          s(:send, nil, :assert,
            s(:false),
            s(:str, "must not reach here")))),
      s(:def, :test_break__nested_loop2,
        s(:args),
        s(:block,
          s(:send, nil, :_test_break__nested_loop2),
          s(:args),
          s(:break))),
      s(:def, :_test_break__nested_loop2,
        s(:args),
        s(:begin,
          s(:until,
            s(:false),
            s(:yield)),
          s(:send, nil, :assert,
            s(:false),
            s(:str, "must not reach here")))),
      s(:def, :test_break__nested_loop3,
        s(:args),
        s(:block,
          s(:send, nil, :_test_break__nested_loop3),
          s(:args),
          s(:break))),
      s(:def, :_test_break__nested_loop3,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:yield)),
          s(:send, nil, :assert,
            s(:false),
            s(:str, "must not reach here")))),
      s(:def, :test_break_from_enum,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:block,
              s(:send,
                s(:array,
                  s(:str, "a")), :inject,
                s(:str, "ng")),
              s(:args,
                s(:arg, :x),
                s(:arg, :y)),
              s(:break,
                s(:str, "ok")))),
          s(:send, nil, :assert_equal,
            s(:str, "ok"),
            s(:lvar, :result)))),
      s(:def, :_test_return_trace_func,
        s(:args,
          s(:arg, :x)),
        s(:ensure,
          s(:begin,
            s(:send, nil, :set_trace_func,
              s(:block,
                s(:send, nil, :proc),
                s(:args), nil)),
            s(:block,
              s(:send,
                s(:array), :fetch,
                s(:int, 2)),
              s(:args),
              s(:return,
                s(:lvar, :x)))),
          s(:send, nil, :set_trace_func,
            s(:nil)))),
      s(:def, :test_return_trace_func,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :ok,
              s(:str, "returned gracefully")),
            s(:lvasgn, :result,
              s(:str, "skipped")),
            s(:lvasgn, :result,
              s(:send, nil, :_test_return_trace_func,
                s(:lvar, :ok)))),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:lvar, :ok),
              s(:lvar, :result)),
            s(:return)))),
      s(:class,
        s(:const, nil, :IterString),
        s(:const,
          s(:cbase), :String),
        s(:def, :===,
          s(:args,
            s(:arg, :other)),
          s(:if,
            s(:send,
              s(:send, nil, :block_given?), :!),
            s(:zsuper), nil))),
      s(:def, :test_block_given_within_iterator,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "b")),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "a"),
                s(:str, "b"),
                s(:str, "c")), :grep,
              s(:send,
                s(:const, nil, :IterString), :new,
                s(:str, "b"))),
            s(:args,
              s(:arg, :s)),
            s(:lvar, :s)))),
      s(:def, :test_enumerator,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:send,
                s(:array,
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3)), :each), :with_index),
            s(:args,
              s(:arg, :x),
              s(:arg, :i)),
            s(:send, nil, :assert_equal,
              s(:lvar, :x),
              s(:send,
                s(:lvar, :i), :+,
                s(:int, 1)))),
          s(:lvasgn, :e,
            s(:send,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)), :each)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :next)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :e), :next)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :e), :next)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :StopIteration)),
            s(:args),
            s(:send,
              s(:lvar, :e), :next)),
          s(:send,
            s(:lvar, :e), :rewind),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :next)),
          s(:send,
            s(:lvar, :e), :rewind),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:send,
              s(:lvar, :a), :push,
              s(:send,
                s(:lvar, :e), :next))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:lvar, :a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 8),
                s(:int, 1),
                s(:int, 10)),
              s(:array,
                s(:int, 6),
                s(:int, 2),
                s(:int, 11)),
              s(:array,
                s(:int, 4),
                s(:int, 3),
                s(:int, 12))),
            s(:send,
              s(:send,
                s(:array,
                  s(:int, 8),
                  s(:int, 6),
                  s(:int, 4)), :zip,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:int, 10))),
                s(:begin,
                  s(:irange,
                    s(:int, 10),
                    s(:int, 100)))), :to_a)))))))
