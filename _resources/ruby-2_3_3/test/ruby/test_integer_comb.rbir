s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestIntegerComb),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :VS,
        s(:array,
          s(:int, -6277101735386680763835789423207666416102355444464034512898),
          s(:int, -6277101735386680763835789423207666416102355444464034512897),
          s(:int, -6277101735386680763835789423207666416102355444464034512896),
          s(:int, -6277101735386680763835789423207666416102355444464034512895),
          s(:int, -79228162514264337593543950338),
          s(:int, -79228162514264337593543950337),
          s(:int, -79228162514264337593543950336),
          s(:int, -79228162514264337593543950335),
          s(:int, -18446744073709551618),
          s(:int, -18446744073709551617),
          s(:int, -18446744073709551616),
          s(:int, -18446744073709551615),
          s(:int, -4611686018427387906),
          s(:int, -4611686018427387905),
          s(:int, -4611686018427387904),
          s(:int, -4611686018427387903),
          s(:int, -4294967298),
          s(:int, -4294967297),
          s(:int, -4294967296),
          s(:int, -4294967295),
          s(:int, -3340214413),
          s(:int, -2147483650),
          s(:int, -2147483649),
          s(:int, -2147483648),
          s(:int, -2147483647),
          s(:int, -1380655685),
          s(:int, -1073741826),
          s(:int, -1073741825),
          s(:int, -1073741824),
          s(:int, -1073741823),
          s(:int, -65538),
          s(:int, -65537),
          s(:int, -65536),
          s(:int, -65535),
          s(:int, -33025),
          s(:int, -32770),
          s(:int, -32769),
          s(:int, -32768),
          s(:int, -32767),
          s(:int, -32513),
          s(:int, -65),
          s(:int, -64),
          s(:int, -63),
          s(:int, -62),
          s(:int, -33),
          s(:int, -32),
          s(:int, -31),
          s(:int, -30),
          s(:int, -3),
          s(:int, -2),
          s(:int, -1),
          s(:int, 0),
          s(:int, 1),
          s(:int, 2),
          s(:int, 3),
          s(:int, 30),
          s(:int, 31),
          s(:int, 32),
          s(:int, 33),
          s(:int, 62),
          s(:int, 63),
          s(:int, 64),
          s(:int, 65),
          s(:int, 32513),
          s(:int, 32766),
          s(:int, 32767),
          s(:int, 32768),
          s(:int, 32769),
          s(:int, 33025),
          s(:int, 65534),
          s(:int, 65535),
          s(:int, 65536),
          s(:int, 65537),
          s(:int, 1073741822),
          s(:int, 1073741823),
          s(:int, 1073741824),
          s(:int, 1073741825),
          s(:int, 1380655685),
          s(:int, 2147483646),
          s(:int, 2147483647),
          s(:int, 2147483648),
          s(:int, 2147483649),
          s(:int, 3340214413),
          s(:int, 4294967294),
          s(:int, 4294967295),
          s(:int, 4294967296),
          s(:int, 4294967297),
          s(:int, 4611686018427387902),
          s(:int, 4611686018427387903),
          s(:int, 4611686018427387904),
          s(:int, 4611686018427387905),
          s(:int, 18446744073709551614),
          s(:int, 18446744073709551615),
          s(:int, 18446744073709551616),
          s(:int, 18446744073709551617),
          s(:int, 79228162514264337593543950335),
          s(:int, 79228162514264337593543950336),
          s(:int, 79228162514264337593543950337),
          s(:int, 6277101735386680763835789423207666416102355444464034512895),
          s(:int, 6277101735386680763835789423207666416102355444464034512896),
          s(:int, 6277101735386680763835789423207666416102355444464034512897))),
      s(:lvasgn, :min,
        s(:int, -1)),
      s(:while,
        s(:send,
          s(:send,
            s(:lvar, :min), :class), :==,
          s(:const, nil, :Fixnum)),
        s(:op_asgn,
          s(:lvasgn, :min), :*,
          s(:int, 2))),
      s(:casgn, nil, :FIXNUM_MIN,
        s(:send,
          s(:lvar, :min), :/,
          s(:int, 2))),
      s(:lvasgn, :max,
        s(:int, 1)),
      s(:while,
        s(:send,
          s(:send,
            s(:begin,
              s(:send,
                s(:lvar, :max), :-,
                s(:int, 1))), :class), :==,
          s(:const, nil, :Fixnum)),
        s(:op_asgn,
          s(:lvasgn, :max), :*,
          s(:int, 2))),
      s(:casgn, nil, :FIXNUM_MAX,
        s(:send,
          s(:send,
            s(:lvar, :max), :/,
            s(:int, 2)), :-,
          s(:int, 1))),
      s(:def, :test_fixnum_range,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Bignum),
            s(:send,
              s(:const, nil, :FIXNUM_MIN), :-,
              s(:int, 1))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Fixnum),
            s(:const, nil, :FIXNUM_MIN)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Fixnum),
            s(:const, nil, :FIXNUM_MAX)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Bignum),
            s(:send,
              s(:const, nil, :FIXNUM_MAX), :+,
              s(:int, 1))))),
      s(:def, :check_class,
        s(:args,
          s(:arg, :n)),
        s(:if,
          s(:and,
            s(:send,
              s(:const, nil, :FIXNUM_MIN), :<=,
              s(:lvar, :n)),
            s(:send,
              s(:lvar, :n), :<=,
              s(:const, nil, :FIXNUM_MAX))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Fixnum),
            s(:lvar, :n)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Bignum),
            s(:lvar, :n)))),
      s(:def, :test_aref,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :VS), :each),
            s(:args,
              s(:arg, :a)),
            s(:block,
              s(:send,
                s(:int, 100), :times),
              s(:args,
                s(:arg, :i)),
              s(:send, nil, :assert_equal,
                s(:if,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:lvar, :a), :>>,
                        s(:lvar, :i))), :odd?),
                  s(:int, 1),
                  s(:int, 0)),
                s(:send,
                  s(:lvar, :a), :[],
                  s(:lvar, :i)),
                s(:dstr,
                  s(:str, "("),
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, ")["),
                  s(:begin,
                    s(:lvar, :i)),
                  s(:str, "]"))))),
          s(:block,
            s(:send,
              s(:const, nil, :VS), :each),
            s(:args,
              s(:arg, :a)),
            s(:block,
              s(:send,
                s(:const, nil, :VS), :each),
              s(:args,
                s(:arg, :b)),
              s(:begin,
                s(:lvasgn, :c,
                  s(:nil)),
                s(:block,
                  s(:send, nil, :assert_nothing_raised,
                    s(:dstr,
                      s(:str, "("),
                      s(:begin,
                        s(:lvar, :a)),
                      s(:str, ")["),
                      s(:begin,
                        s(:lvar, :b)),
                      s(:str, "]"))),
                  s(:args),
                  s(:lvasgn, :c,
                    s(:send,
                      s(:lvar, :a), :[],
                      s(:lvar, :b)))),
                s(:send, nil, :check_class,
                  s(:lvar, :c)),
                s(:if,
                  s(:send,
                    s(:lvar, :b), :<,
                    s(:int, 0)),
                  s(:send, nil, :assert_equal,
                    s(:int, 0),
                    s(:lvar, :c),
                    s(:dstr,
                      s(:str, "("),
                      s(:begin,
                        s(:lvar, :a)),
                      s(:str, ")["),
                      s(:begin,
                        s(:lvar, :b)),
                      s(:str, "]"))),
                  s(:send, nil, :assert_equal,
                    s(:if,
                      s(:send,
                        s(:begin,
                          s(:send,
                            s(:lvar, :a), :>>,
                            s(:lvar, :b))), :odd?),
                      s(:int, 1),
                      s(:int, 0)),
                    s(:lvar, :c),
                    s(:dstr,
                      s(:str, "("),
                      s(:begin,
                        s(:lvar, :a)),
                      s(:str, ")["),
                      s(:begin,
                        s(:lvar, :b)),
                      s(:str, "]"))))))))),
      s(:def, :test_plus,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :a)),
          s(:block,
            s(:send,
              s(:const, nil, :VS), :each),
            s(:args,
              s(:arg, :b)),
            s(:begin,
              s(:lvasgn, :c,
                s(:send,
                  s(:lvar, :a), :+,
                  s(:lvar, :b))),
              s(:send, nil, :check_class,
                s(:lvar, :c)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :b), :+,
                  s(:lvar, :a)),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " + "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:lvar, :a),
                s(:send,
                  s(:lvar, :c), :-,
                  s(:lvar, :b)),
                s(:dstr,
                  s(:str, "("),
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " + "),
                  s(:begin,
                    s(:lvar, :b)),
                  s(:str, ") - "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :-,
                    s(:send,
                      s(:lvar, :b), :~)), :-,
                  s(:int, 1)),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " + "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :^,
                      s(:lvar, :b))), :+,
                  s(:send,
                    s(:int, 2), :*,
                    s(:begin,
                      s(:send,
                        s(:lvar, :a), :&,
                        s(:lvar, :b))))),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " + "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :|,
                      s(:lvar, :b))), :+,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :&,
                      s(:lvar, :b)))),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " + "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:int, 2), :*,
                    s(:begin,
                      s(:send,
                        s(:lvar, :a), :|,
                        s(:lvar, :b)))), :-,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :^,
                      s(:lvar, :b)))),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " + "),
                  s(:begin,
                    s(:lvar, :b)))))))),
      s(:def, :test_minus,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :a)),
          s(:block,
            s(:send,
              s(:const, nil, :VS), :each),
            s(:args,
              s(:arg, :b)),
            s(:begin,
              s(:lvasgn, :c,
                s(:send,
                  s(:lvar, :a), :-,
                  s(:lvar, :b))),
              s(:send, nil, :check_class,
                s(:lvar, :c)),
              s(:send, nil, :assert_equal,
                s(:lvar, :a),
                s(:send,
                  s(:lvar, :c), :+,
                  s(:lvar, :b)),
                s(:dstr,
                  s(:str, "("),
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " - "),
                  s(:begin,
                    s(:lvar, :b)),
                  s(:str, ") + "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :b), :-@),
                s(:send,
                  s(:lvar, :c), :-,
                  s(:lvar, :a)),
                s(:dstr,
                  s(:str, "("),
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " - "),
                  s(:begin,
                    s(:lvar, :b)),
                  s(:str, ") - "),
                  s(:begin,
                    s(:lvar, :a)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :+,
                    s(:send,
                      s(:lvar, :b), :~)), :+,
                  s(:int, 1)),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " - "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :^,
                      s(:lvar, :b))), :-,
                  s(:send,
                    s(:int, 2), :*,
                    s(:begin,
                      s(:send,
                        s(:lvar, :b), :&,
                        s(:send,
                          s(:lvar, :a), :~))))),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " - "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :&,
                      s(:send,
                        s(:lvar, :b), :~))), :-,
                  s(:begin,
                    s(:send,
                      s(:lvar, :b), :&,
                      s(:send,
                        s(:lvar, :a), :~)))),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " - "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:int, 2), :*,
                    s(:begin,
                      s(:send,
                        s(:lvar, :a), :&,
                        s(:send,
                          s(:lvar, :b), :~)))), :-,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :^,
                      s(:lvar, :b)))),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " - "),
                  s(:begin,
                    s(:lvar, :b)))))))),
      s(:def, :test_mult,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :a)),
          s(:block,
            s(:send,
              s(:const, nil, :VS), :each),
            s(:args,
              s(:arg, :b)),
            s(:begin,
              s(:lvasgn, :c,
                s(:send,
                  s(:lvar, :a), :*,
                  s(:lvar, :b))),
              s(:send, nil, :check_class,
                s(:lvar, :c)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :b), :*,
                  s(:lvar, :a)),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " * "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :b), :send,
                  s(:sym, :*),
                  s(:lvar, :a)),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " * "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:if,
                s(:send,
                  s(:lvar, :a), :!=,
                  s(:int, 0)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :b),
                  s(:send,
                    s(:lvar, :c), :/,
                    s(:lvar, :a)),
                  s(:dstr,
                    s(:str, "("),
                    s(:begin,
                      s(:lvar, :a)),
                    s(:str, " * "),
                    s(:begin,
                      s(:lvar, :b)),
                    s(:str, ") / "),
                    s(:begin,
                      s(:lvar, :a)))), nil),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :abs), :*,
                  s(:send,
                    s(:lvar, :b), :abs)),
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :*,
                      s(:lvar, :b))), :abs),
                s(:dstr,
                  s(:str, "("),
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " * "),
                  s(:begin,
                    s(:lvar, :b)),
                  s(:str, ").abs"))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:begin,
                          s(:send,
                            s(:lvar, :a), :-,
                            s(:int, 100))), :*,
                        s(:begin,
                          s(:send,
                            s(:lvar, :b), :-,
                            s(:int, 100)))), :+,
                      s(:send,
                        s(:begin,
                          s(:send,
                            s(:lvar, :a), :-,
                            s(:int, 100))), :*,
                        s(:int, 100))), :+,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :b), :-,
                          s(:int, 100))), :*,
                      s(:int, 100))), :+,
                  s(:int, 10000)),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " * "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:begin,
                          s(:send,
                            s(:lvar, :a), :+,
                            s(:int, 100))), :*,
                        s(:begin,
                          s(:send,
                            s(:lvar, :b), :+,
                            s(:int, 100)))), :-,
                      s(:send,
                        s(:begin,
                          s(:send,
                            s(:lvar, :a), :+,
                            s(:int, 100))), :*,
                        s(:int, 100))), :-,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :b), :+,
                          s(:int, 100))), :*,
                      s(:int, 100))), :+,
                  s(:int, 10000)),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " * "),
                  s(:begin,
                    s(:lvar, :b)))))))),
      s(:def, :test_divmod,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :a)),
          s(:block,
            s(:send,
              s(:const, nil, :VS), :each),
            s(:args,
              s(:arg, :b)),
            s(:if,
              s(:send,
                s(:lvar, :b), :==,
                s(:int, 0)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :ZeroDivisionError)),
                s(:args),
                s(:send,
                  s(:lvar, :a), :divmod,
                  s(:lvar, :b))),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :q),
                    s(:lvasgn, :r)),
                  s(:send,
                    s(:lvar, :a), :divmod,
                    s(:lvar, :b))),
                s(:send, nil, :check_class,
                  s(:lvar, :q)),
                s(:send, nil, :check_class,
                  s(:lvar, :r)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :a),
                  s(:send,
                    s(:send,
                      s(:lvar, :b), :*,
                      s(:lvar, :q)), :+,
                    s(:lvar, :r))),
                s(:send, nil, :assert_operator,
                  s(:send,
                    s(:lvar, :r), :abs),
                  s(:sym, :<),
                  s(:send,
                    s(:lvar, :b), :abs)),
                s(:if,
                  s(:send,
                    s(:int, 0), :<,
                    s(:lvar, :b)),
                  s(:begin,
                    s(:send, nil, :assert_operator,
                      s(:lvar, :r),
                      s(:sym, :>=),
                      s(:int, 0)),
                    s(:send, nil, :assert_operator,
                      s(:lvar, :r),
                      s(:sym, :<),
                      s(:lvar, :b))),
                  s(:begin,
                    s(:send, nil, :assert_operator,
                      s(:lvar, :r),
                      s(:sym, :>),
                      s(:lvar, :b)),
                    s(:send, nil, :assert_operator,
                      s(:lvar, :r),
                      s(:sym, :<=),
                      s(:int, 0)))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :q),
                  s(:send,
                    s(:lvar, :a), :/,
                    s(:lvar, :b))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :q),
                  s(:send,
                    s(:lvar, :a), :div,
                    s(:lvar, :b))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :r),
                  s(:send,
                    s(:lvar, :a), :%,
                    s(:lvar, :b))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :r),
                  s(:send,
                    s(:lvar, :a), :modulo,
                    s(:lvar, :b)))))))),
      s(:def, :test_pow,
        s(:args),
        s(:begin,
          s(:lvasgn, :small_values,
            s(:block,
              s(:send,
                s(:const, nil, :VS), :find_all),
              s(:args,
                s(:arg, :v)),
              s(:and,
                s(:send,
                  s(:int, 0), :<=,
                  s(:lvar, :v)),
                s(:send,
                  s(:lvar, :v), :<,
                  s(:int, 1000))))),
          s(:block,
            s(:send,
              s(:const, nil, :VS), :each),
            s(:args,
              s(:arg, :a)),
            s(:block,
              s(:send,
                s(:lvar, :small_values), :each),
              s(:args,
                s(:arg, :b)),
              s(:begin,
                s(:lvasgn, :c,
                  s(:send,
                    s(:lvar, :a), :**,
                    s(:lvar, :b))),
                s(:send, nil, :check_class,
                  s(:lvar, :c)),
                s(:lvasgn, :d,
                  s(:int, 1)),
                s(:block,
                  s(:send,
                    s(:lvar, :b), :times),
                  s(:args),
                  s(:op_asgn,
                    s(:lvasgn, :d), :*,
                    s(:lvar, :a))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :d),
                  s(:lvar, :c),
                  s(:dstr,
                    s(:str, "("),
                    s(:begin,
                      s(:lvar, :a)),
                    s(:str, ") ** "),
                    s(:begin,
                      s(:lvar, :b)))),
                s(:if,
                  s(:send,
                    s(:lvar, :a), :!=,
                    s(:int, 0)),
                  s(:begin,
                    s(:lvasgn, :d,
                      s(:lvar, :c)),
                    s(:block,
                      s(:send,
                        s(:lvar, :b), :times),
                      s(:args),
                      s(:op_asgn,
                        s(:lvasgn, :d), :/,
                        s(:lvar, :a))),
                    s(:send, nil, :assert_equal,
                      s(:int, 1),
                      s(:lvar, :d),
                      s(:dstr,
                        s(:str, "(("),
                        s(:begin,
                          s(:lvar, :a)),
                        s(:str, ") ** "),
                        s(:begin,
                          s(:lvar, :b)),
                        s(:str, ") / "),
                        s(:begin,
                          s(:lvar, :a)),
                        s(:str, " / ...("),
                        s(:begin,
                          s(:lvar, :b)),
                        s(:str, " times)...")))), nil)))))),
      s(:def, :test_not,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :a), :~)),
            s(:send, nil, :check_class,
              s(:lvar, :b)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:int, -1), :^,
                s(:lvar, :a)),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "~"),
                s(:begin,
                  s(:lvar, :a)))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:lvar, :a), :-@), :-,
                s(:int, 1)),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "~"),
                s(:begin,
                  s(:lvar, :a)))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :a), :&,
                s(:lvar, :b)),
              s(:dstr,
                s(:begin,
                  s(:lvar, :a)),
                s(:str, " & ~"),
                s(:begin,
                  s(:lvar, :a)))),
            s(:send, nil, :assert_equal,
              s(:int, -1),
              s(:send,
                s(:lvar, :a), :|,
                s(:lvar, :b)),
              s(:dstr,
                s(:begin,
                  s(:lvar, :a)),
                s(:str, " | ~"),
                s(:begin,
                  s(:lvar, :a))))))),
      s(:def, :test_or,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :a)),
          s(:block,
            s(:send,
              s(:const, nil, :VS), :each),
            s(:args,
              s(:arg, :b)),
            s(:begin,
              s(:lvasgn, :c,
                s(:send,
                  s(:lvar, :a), :|,
                  s(:lvar, :b))),
              s(:send, nil, :check_class,
                s(:lvar, :c)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :b), :|,
                  s(:lvar, :a)),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " | "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :+,
                    s(:lvar, :b)), :-,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :&,
                      s(:lvar, :b)))),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " | "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :&,
                      s(:send,
                        s(:lvar, :b), :~))), :+,
                  s(:lvar, :b)),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " | "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:int, -1),
                s(:send,
                  s(:lvar, :c), :|,
                  s(:send,
                    s(:lvar, :a), :~)),
                s(:dstr,
                  s(:str, "("),
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " | "),
                  s(:begin,
                    s(:lvar, :b)),
                  s(:str, ") | ~"),
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, ")"))))))),
      s(:def, :test_and,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :a)),
          s(:block,
            s(:send,
              s(:const, nil, :VS), :each),
            s(:args,
              s(:arg, :b)),
            s(:begin,
              s(:lvasgn, :c,
                s(:send,
                  s(:lvar, :a), :&,
                  s(:lvar, :b))),
              s(:send, nil, :check_class,
                s(:lvar, :c)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :b), :&,
                  s(:lvar, :a)),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " & "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :+,
                    s(:lvar, :b)), :-,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :|,
                      s(:lvar, :b)))),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " & "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :a), :~), :|,
                      s(:lvar, :b))), :-,
                  s(:send,
                    s(:lvar, :a), :~)),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " & "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:lvar, :c), :&,
                  s(:send,
                    s(:lvar, :a), :~)),
                s(:dstr,
                  s(:str, "("),
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " & "),
                  s(:begin,
                    s(:lvar, :b)),
                  s(:str, ") & ~"),
                  s(:begin,
                    s(:lvar, :a)))))))),
      s(:def, :test_xor,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :a)),
          s(:block,
            s(:send,
              s(:const, nil, :VS), :each),
            s(:args,
              s(:arg, :b)),
            s(:begin,
              s(:lvasgn, :c,
                s(:send,
                  s(:lvar, :a), :^,
                  s(:lvar, :b))),
              s(:send, nil, :check_class,
                s(:lvar, :c)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :b), :^,
                  s(:lvar, :a)),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " ^ "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :|,
                      s(:lvar, :b))), :-,
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :&,
                      s(:lvar, :b)))),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " ^ "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:lvar, :b),
                s(:send,
                  s(:lvar, :c), :^,
                  s(:lvar, :a)),
                s(:dstr,
                  s(:str, "("),
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " ^ "),
                  s(:begin,
                    s(:lvar, :b)),
                  s(:str, ") ^ "),
                  s(:begin,
                    s(:lvar, :a)))))))),
      s(:def, :test_lshift,
        s(:args),
        s(:begin,
          s(:lvasgn, :small_values,
            s(:block,
              s(:send,
                s(:const, nil, :VS), :find_all),
              s(:args,
                s(:arg, :v)),
              s(:send,
                s(:lvar, :v), :<,
                s(:int, 8000)))),
          s(:block,
            s(:send,
              s(:const, nil, :VS), :each),
            s(:args,
              s(:arg, :a)),
            s(:block,
              s(:send,
                s(:lvar, :small_values), :each),
              s(:args,
                s(:arg, :b)),
              s(:begin,
                s(:lvasgn, :c,
                  s(:send,
                    s(:lvar, :a), :<<,
                    s(:lvar, :b))),
                s(:send, nil, :check_class,
                  s(:lvar, :c)),
                s(:if,
                  s(:send,
                    s(:int, 0), :<=,
                    s(:lvar, :b)),
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:lvar, :a),
                      s(:send,
                        s(:lvar, :c), :>>,
                        s(:lvar, :b)),
                      s(:dstr,
                        s(:str, "("),
                        s(:begin,
                          s(:lvar, :a)),
                        s(:str, " << "),
                        s(:begin,
                          s(:lvar, :b)),
                        s(:str, ") >> "),
                        s(:begin,
                          s(:lvar, :b)))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:lvar, :a), :*,
                        s(:send,
                          s(:int, 2), :**,
                          s(:lvar, :b))),
                      s(:lvar, :c),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :a)),
                        s(:str, " << "),
                        s(:begin,
                          s(:lvar, :b))))), nil),
                s(:block,
                  s(:send,
                    s(:int, 0), :upto,
                    s(:send,
                      s(:send,
                        s(:lvar, :c), :bit_length), :+,
                      s(:int, 10))),
                  s(:args,
                    s(:arg, :nth)),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:lvar, :a), :[],
                      s(:send,
                        s(:lvar, :nth), :-,
                        s(:lvar, :b))),
                    s(:send,
                      s(:lvar, :c), :[],
                      s(:lvar, :nth)),
                    s(:dstr,
                      s(:str, "("),
                      s(:begin,
                        s(:lvar, :a)),
                      s(:str, " << "),
                      s(:begin,
                        s(:lvar, :b)),
                      s(:str, ")["),
                      s(:begin,
                        s(:lvar, :nth)),
                      s(:str, "]"))))))))),
      s(:def, :test_rshift,
        s(:args),
        s(:begin,
          s(:lvasgn, :small_values,
            s(:block,
              s(:send,
                s(:const, nil, :VS), :find_all),
              s(:args,
                s(:arg, :v)),
              s(:send,
                s(:int, -8000), :<,
                s(:lvar, :v)))),
          s(:block,
            s(:send,
              s(:const, nil, :VS), :each),
            s(:args,
              s(:arg, :a)),
            s(:block,
              s(:send,
                s(:lvar, :small_values), :each),
              s(:args,
                s(:arg, :b)),
              s(:begin,
                s(:lvasgn, :c,
                  s(:send,
                    s(:lvar, :a), :>>,
                    s(:lvar, :b))),
                s(:send, nil, :check_class,
                  s(:lvar, :c)),
                s(:if,
                  s(:send,
                    s(:lvar, :b), :<=,
                    s(:int, 0)),
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:lvar, :a),
                      s(:send,
                        s(:lvar, :c), :<<,
                        s(:lvar, :b)),
                      s(:dstr,
                        s(:str, "("),
                        s(:begin,
                          s(:lvar, :a)),
                        s(:str, " >> "),
                        s(:begin,
                          s(:lvar, :b)),
                        s(:str, ") << "),
                        s(:begin,
                          s(:lvar, :b)))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:lvar, :a), :*,
                        s(:send,
                          s(:int, 2), :**,
                          s(:begin,
                            s(:send,
                              s(:lvar, :b), :-@)))),
                      s(:lvar, :c),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :a)),
                        s(:str, " >> "),
                        s(:begin,
                          s(:lvar, :b))))), nil),
                s(:block,
                  s(:send,
                    s(:int, 0), :upto,
                    s(:send,
                      s(:send,
                        s(:lvar, :c), :bit_length), :+,
                      s(:int, 10))),
                  s(:args,
                    s(:arg, :nth)),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:lvar, :a), :[],
                      s(:send,
                        s(:lvar, :nth), :+,
                        s(:lvar, :b))),
                    s(:send,
                      s(:lvar, :c), :[],
                      s(:lvar, :nth)),
                    s(:dstr,
                      s(:str, "("),
                      s(:begin,
                        s(:lvar, :a)),
                      s(:str, " >> "),
                      s(:begin,
                        s(:lvar, :b)),
                      s(:str, ")["),
                      s(:begin,
                        s(:lvar, :nth)),
                      s(:str, "]"))))))))),
      s(:def, :test_succ,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :a), :succ)),
            s(:send, nil, :check_class,
              s(:lvar, :b)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :a), :+,
                s(:int, 1)),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ").succ"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:send,
                s(:lvar, :b), :pred),
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ").succ.pred"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:send,
                s(:lvar, :b), :-,
                s(:int, 1)),
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ").succ - 1")))))),
      s(:def, :test_pred,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :a), :pred)),
            s(:send, nil, :check_class,
              s(:lvar, :b)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :a), :-,
                s(:int, 1)),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ").pred"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:send,
                s(:lvar, :b), :succ),
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ").pred.succ"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:send,
                s(:lvar, :b), :+,
                s(:int, 1)),
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ").pred + 1")))))),
      s(:def, :test_unary_plus,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :a), :+@)),
            s(:send, nil, :check_class,
              s(:lvar, :b)),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "+("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ")")))))),
      s(:def, :test_unary_minus,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :a), :-@)),
            s(:send, nil, :check_class,
              s(:lvar, :b)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:int, 0), :-,
                s(:lvar, :a)),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "-("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ")"))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:lvar, :a), :~), :+,
                s(:int, 1)),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "-("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ")"))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :a), :+,
                s(:lvar, :b)),
              s(:dstr,
                s(:begin,
                  s(:lvar, :a)),
                s(:str, "+(-("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, "))")))))),
      s(:def, :test_cmp,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each_with_index),
          s(:args,
            s(:arg, :a),
            s(:arg, :i)),
          s(:block,
            s(:send,
              s(:const, nil, :VS), :each_with_index),
            s(:args,
              s(:arg, :b),
              s(:arg, :j)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :i), :<=>,
                  s(:lvar, :j)),
                s(:send,
                  s(:lvar, :a), :<=>,
                  s(:lvar, :b)),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " <=> "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :i), :<,
                  s(:lvar, :j)),
                s(:send,
                  s(:lvar, :a), :<,
                  s(:lvar, :b)),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " < "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :i), :<=,
                  s(:lvar, :j)),
                s(:send,
                  s(:lvar, :a), :<=,
                  s(:lvar, :b)),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " <= "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :i), :>,
                  s(:lvar, :j)),
                s(:send,
                  s(:lvar, :a), :>,
                  s(:lvar, :b)),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " > "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :i), :>=,
                  s(:lvar, :j)),
                s(:send,
                  s(:lvar, :a), :>=,
                  s(:lvar, :b)),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " >= "),
                  s(:begin,
                    s(:lvar, :b)))))))),
      s(:def, :test_eq,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each_with_index),
          s(:args,
            s(:arg, :a),
            s(:arg, :i)),
          s(:block,
            s(:send,
              s(:const, nil, :VS), :each_with_index),
            s(:args,
              s(:arg, :b),
              s(:arg, :j)),
            s(:begin,
              s(:lvasgn, :c,
                s(:send,
                  s(:lvar, :a), :==,
                  s(:lvar, :b))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :b), :==,
                  s(:lvar, :a)),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " == "),
                  s(:begin,
                    s(:lvar, :b)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :i), :==,
                  s(:lvar, :j)),
                s(:lvar, :c),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, " == "),
                  s(:begin,
                    s(:lvar, :b)))))))),
      s(:def, :test_abs,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :a), :abs)),
            s(:send, nil, :check_class,
              s(:lvar, :b)),
            s(:if,
              s(:send,
                s(:lvar, :a), :<,
                s(:int, 0)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :a), :-@),
                s(:lvar, :b),
                s(:dstr,
                  s(:str, "("),
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, ").abs"))),
              s(:send, nil, :assert_equal,
                s(:lvar, :a),
                s(:lvar, :b),
                s(:dstr,
                  s(:str, "("),
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, ").abs"))))))),
      s(:def, :test_ceil,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :a), :ceil)),
            s(:send, nil, :check_class,
              s(:lvar, :b)),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ").ceil")))))),
      s(:def, :test_floor,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :a), :floor)),
            s(:send, nil, :check_class,
              s(:lvar, :b)),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ").floor")))))),
      s(:def, :test_round,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :a), :round)),
            s(:send, nil, :check_class,
              s(:lvar, :b)),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ").round")))))),
      s(:def, :test_truncate,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :a), :truncate)),
            s(:send, nil, :check_class,
              s(:lvar, :b)),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ").truncate")))))),
      s(:def, :test_remainder,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :a)),
          s(:block,
            s(:send,
              s(:const, nil, :VS), :each),
            s(:args,
              s(:arg, :b)),
            s(:if,
              s(:send,
                s(:lvar, :b), :==,
                s(:int, 0)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :ZeroDivisionError)),
                s(:args),
                s(:send,
                  s(:lvar, :a), :divmod,
                  s(:lvar, :b))),
              s(:begin,
                s(:lvasgn, :r,
                  s(:send,
                    s(:lvar, :a), :remainder,
                    s(:lvar, :b))),
                s(:send, nil, :check_class,
                  s(:lvar, :r)),
                s(:if,
                  s(:send,
                    s(:lvar, :a), :<,
                    s(:int, 0)),
                  s(:begin,
                    s(:send, nil, :assert_operator,
                      s(:send,
                        s(:send,
                          s(:lvar, :b), :abs), :-@),
                      s(:sym, :<),
                      s(:lvar, :r),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :a)),
                        s(:str, ".remainder("),
                        s(:begin,
                          s(:lvar, :b)),
                        s(:str, ")"))),
                    s(:send, nil, :assert_operator,
                      s(:int, 0),
                      s(:sym, :>=),
                      s(:lvar, :r),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :a)),
                        s(:str, ".remainder("),
                        s(:begin,
                          s(:lvar, :b)),
                        s(:str, ")")))),
                  s(:if,
                    s(:send,
                      s(:int, 0), :<,
                      s(:lvar, :a)),
                    s(:begin,
                      s(:send, nil, :assert_operator,
                        s(:int, 0),
                        s(:sym, :<=),
                        s(:lvar, :r),
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :a)),
                          s(:str, ".remainder("),
                          s(:begin,
                            s(:lvar, :b)),
                          s(:str, ")"))),
                      s(:send, nil, :assert_operator,
                        s(:send,
                          s(:lvar, :b), :abs),
                        s(:sym, :>),
                        s(:lvar, :r),
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :a)),
                          s(:str, ".remainder("),
                          s(:begin,
                            s(:lvar, :b)),
                          s(:str, ")")))),
                    s(:send, nil, :assert_equal,
                      s(:int, 0),
                      s(:lvar, :r),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :a)),
                        s(:str, ".remainder("),
                        s(:begin,
                          s(:lvar, :b)),
                        s(:str, ")")))))))))),
      s(:def, :test_zero_nonzero,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:lvasgn, :z,
              s(:send,
                s(:lvar, :a), :zero?)),
            s(:lvasgn, :n,
              s(:send,
                s(:lvar, :a), :nonzero?)),
            s(:if,
              s(:send,
                s(:lvar, :a), :==,
                s(:int, 0)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:true),
                  s(:lvar, :z),
                  s(:dstr,
                    s(:str, "("),
                    s(:begin,
                      s(:lvar, :a)),
                    s(:str, ").zero?"))),
                s(:send, nil, :assert_equal,
                  s(:nil),
                  s(:lvar, :n),
                  s(:dstr,
                    s(:str, "("),
                    s(:begin,
                      s(:lvar, :a)),
                    s(:str, ").nonzero?")))),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:false),
                  s(:lvar, :z),
                  s(:dstr,
                    s(:str, "("),
                    s(:begin,
                      s(:lvar, :a)),
                    s(:str, ").zero?"))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :a),
                  s(:lvar, :n),
                  s(:dstr,
                    s(:str, "("),
                    s(:begin,
                      s(:lvar, :a)),
                    s(:str, ").nonzero?"))),
                s(:send, nil, :check_class,
                  s(:lvar, :n)))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :z), :^,
                s(:lvar, :n)),
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ").zero? ^ ("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ").nonzero?")))))),
      s(:def, :test_even_odd,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:lvasgn, :e,
              s(:send,
                s(:lvar, :a), :even?)),
            s(:lvasgn, :o,
              s(:send,
                s(:lvar, :a), :odd?)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:lvar, :a), :%,
                    s(:int, 2))), :==,
                s(:int, 0)),
              s(:lvar, :e),
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ").even?"))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:lvar, :a), :%,
                    s(:int, 2))), :==,
                s(:int, 1)),
              s(:lvar, :o),
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ").odd"))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:lvar, :a), :&,
                    s(:int, 1))), :==,
                s(:int, 0)),
              s(:lvar, :e),
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ").even?"))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:lvar, :a), :&,
                    s(:int, 1))), :==,
                s(:int, 1)),
              s(:lvar, :o),
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ").odd"))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :e), :^,
                s(:lvar, :o)),
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ").even? ^ ("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ").odd?")))))),
      s(:def, :test_to_s,
        s(:args),
        s(:block,
          s(:send,
            s(:int, 2), :upto,
            s(:int, 36)),
          s(:args,
            s(:arg, :radix)),
          s(:block,
            s(:send,
              s(:const, nil, :VS), :each),
            s(:args,
              s(:arg, :a)),
            s(:begin,
              s(:lvasgn, :s,
                s(:send,
                  s(:lvar, :a), :to_s,
                  s(:lvar, :radix))),
              s(:lvasgn, :b,
                s(:send,
                  s(:lvar, :s), :to_i,
                  s(:lvar, :radix))),
              s(:send, nil, :assert_equal,
                s(:lvar, :a),
                s(:lvar, :b),
                s(:dstr,
                  s(:str, "("),
                  s(:begin,
                    s(:lvar, :a)),
                  s(:str, ").to_s("),
                  s(:begin,
                    s(:lvar, :radix)),
                  s(:str, ").to_i("),
                  s(:begin,
                    s(:lvar, :radix)),
                  s(:str, ")"))))))),
      s(:def, :test_printf_x,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :reverse_each),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:lvasgn, :s,
              s(:send, nil, :sprintf,
                s(:str, "%x"),
                s(:lvar, :a))),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A\\.\\."),
                  s(:regopt)),
                s(:lvar, :s)),
              s(:lvasgn, :b,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:back_ref, :$'), :tr,
                          s(:str, "0123456789abcdef"),
                          s(:str, "fedcba9876543210")), :to_i,
                        s(:int, 16)), :+,
                      s(:int, 1))), :-@)),
              s(:lvasgn, :b,
                s(:send,
                  s(:lvar, :s), :to_i,
                  s(:int, 16)))),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "sprintf('%x', "),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ") = "),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :inspect))))))),
      s(:def, :test_printf_x_sign,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :reverse_each),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:lvasgn, :s,
              s(:send, nil, :sprintf,
                s(:str, "%+x"),
                s(:lvar, :a))),
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :s), :to_i,
                s(:int, 16))),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "sprintf('%+x', "),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ") = "),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :inspect)))),
            s(:lvasgn, :s,
              s(:send, nil, :sprintf,
                s(:str, "% x"),
                s(:lvar, :a))),
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :s), :to_i,
                s(:int, 16))),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "sprintf('% x', "),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ") = "),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :inspect))))))),
      s(:def, :test_printf_o,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :reverse_each),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:lvasgn, :s,
              s(:send, nil, :sprintf,
                s(:str, "%o"),
                s(:lvar, :a))),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A\\.\\."),
                  s(:regopt)),
                s(:lvar, :s)),
              s(:lvasgn, :b,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:back_ref, :$'), :tr,
                          s(:str, "01234567"),
                          s(:str, "76543210")), :to_i,
                        s(:int, 8)), :+,
                      s(:int, 1))), :-@)),
              s(:lvasgn, :b,
                s(:send,
                  s(:lvar, :s), :to_i,
                  s(:int, 8)))),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "sprintf('%o', "),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ") = "),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :inspect))))))),
      s(:def, :test_printf_o_sign,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :reverse_each),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:lvasgn, :s,
              s(:send, nil, :sprintf,
                s(:str, "%+o"),
                s(:lvar, :a))),
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :s), :to_i,
                s(:int, 8))),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "sprintf('%+o', "),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ") = "),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :inspect)))),
            s(:lvasgn, :s,
              s(:send, nil, :sprintf,
                s(:str, "% o"),
                s(:lvar, :a))),
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :s), :to_i,
                s(:int, 8))),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "sprintf('% o', "),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ") = "),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :inspect))))))),
      s(:def, :test_printf_b,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :reverse_each),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:lvasgn, :s,
              s(:send, nil, :sprintf,
                s(:str, "%b"),
                s(:lvar, :a))),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A\\.\\."),
                  s(:regopt)),
                s(:lvar, :s)),
              s(:lvasgn, :b,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:back_ref, :$'), :tr,
                          s(:str, "01"),
                          s(:str, "10")), :to_i,
                        s(:int, 2)), :+,
                      s(:int, 1))), :-@)),
              s(:lvasgn, :b,
                s(:send,
                  s(:lvar, :s), :to_i,
                  s(:int, 2)))),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "sprintf('%b', "),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ") = "),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :inspect))))))),
      s(:def, :test_printf_b_sign,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :reverse_each),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:lvasgn, :s,
              s(:send, nil, :sprintf,
                s(:str, "%+b"),
                s(:lvar, :a))),
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :s), :to_i,
                s(:int, 2))),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "sprintf('%+b', "),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ") = "),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :inspect)))),
            s(:lvasgn, :s,
              s(:send, nil, :sprintf,
                s(:str, "% b"),
                s(:lvar, :a))),
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :s), :to_i,
                s(:int, 2))),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "sprintf('% b', "),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ") = "),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :inspect))))))),
      s(:def, :test_printf_diu,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :reverse_each),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:lvasgn, :s,
              s(:send, nil, :sprintf,
                s(:str, "%d"),
                s(:lvar, :a))),
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :s), :to_i)),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "sprintf('%d', "),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ") = "),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :inspect)))),
            s(:lvasgn, :s,
              s(:send, nil, :sprintf,
                s(:str, "%i"),
                s(:lvar, :a))),
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :s), :to_i)),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "sprintf('%i', "),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ") = "),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :inspect)))),
            s(:lvasgn, :s,
              s(:send, nil, :sprintf,
                s(:str, "%u"),
                s(:lvar, :a))),
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :s), :to_i)),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "sprintf('%u', "),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, ") = "),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :inspect))))))),
      s(:def, :test_marshal,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :reverse_each),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:lvasgn, :s,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:lvar, :a))),
            s(:lvasgn, :b,
              s(:send,
                s(:const, nil, :Marshal), :load,
                s(:lvar, :s))),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:dstr,
                s(:str, "Marshal.load(Marshal.dump("),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, "))")))))),
      s(:def, :test_pack,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:str, "c"),
              s(:str, "C"),
              s(:str, "s"),
              s(:str, "S"),
              s(:str, "s!"),
              s(:str, "S!"),
              s(:str, "i"),
              s(:str, "I"),
              s(:str, "i!"),
              s(:str, "I!"),
              s(:str, "l"),
              s(:str, "L"),
              s(:str, "l!"),
              s(:str, "L!"),
              s(:str, "q"),
              s(:str, "Q"),
              s(:str, "n"),
              s(:str, "N"),
              s(:str, "v"),
              s(:str, "V")), :each),
          s(:args,
            s(:arg, :template)),
          s(:begin,
            s(:lvasgn, :size,
              s(:send,
                s(:send,
                  s(:array,
                    s(:int, 0)), :pack,
                  s(:lvar, :template)), :size)),
            s(:lvasgn, :mask,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 1), :<<,
                    s(:begin,
                      s(:send,
                        s(:lvar, :size), :*,
                        s(:int, 8))))), :-,
                s(:int, 1))),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "[A-Znv]"),
                  s(:regopt)),
                s(:lvar, :template)),
              s(:begin,
                s(:lvasgn, :min,
                  s(:int, 0)),
                s(:lvasgn, :max,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:int, 1), :<<,
                        s(:begin,
                          s(:send,
                            s(:lvar, :size), :*,
                            s(:int, 8))))), :-,
                    s(:int, 1)))),
              s(:begin,
                s(:lvasgn, :min,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:int, 1), :<<,
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:lvar, :size), :*,
                              s(:int, 8)), :-,
                            s(:int, 1))))), :-@)),
                s(:lvasgn, :max,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:int, 1), :<<,
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:lvar, :size), :*,
                              s(:int, 8)), :-,
                            s(:int, 1))))), :-,
                    s(:int, 1))))),
            s(:block,
              s(:send,
                s(:const, nil, :VS), :reverse_each),
              s(:args,
                s(:arg, :a)),
              s(:begin,
                s(:lvasgn, :s,
                  s(:send,
                    s(:array,
                      s(:lvar, :a)), :pack,
                    s(:lvar, :template))),
                s(:lvasgn, :b,
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :unpack,
                      s(:lvar, :template)), :[],
                    s(:int, 0))),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:lvar, :min), :<=,
                      s(:lvar, :a)),
                    s(:send,
                      s(:lvar, :a), :<=,
                      s(:lvar, :max))),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :a),
                    s(:lvar, :b),
                    s(:dstr,
                      s(:str, "["),
                      s(:begin,
                        s(:lvar, :a)),
                      s(:str, "].pack("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :template), :dump)),
                      s(:str, ").unpack("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :template), :dump)),
                      s(:str, ")[0]"))), nil),
                s(:send, nil, :assert_operator,
                  s(:lvar, :min),
                  s(:sym, :<=),
                  s(:lvar, :b)),
                s(:send, nil, :assert_operator,
                  s(:lvar, :b),
                  s(:sym, :<=),
                  s(:lvar, :max)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :a), :&,
                    s(:lvar, :mask)),
                  s(:send,
                    s(:lvar, :b), :&,
                    s(:lvar, :mask)),
                  s(:dstr,
                    s(:str, "["),
                    s(:begin,
                      s(:lvar, :a)),
                    s(:str, "].pack("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :template), :dump)),
                    s(:str, ").unpack("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :template), :dump)),
                    s(:str, ")[0] & "),
                    s(:begin,
                      s(:lvar, :mask))))))))),
      s(:def, :test_pack_ber,
        s(:args),
        s(:begin,
          s(:lvasgn, :template,
            s(:str, "w")),
          s(:block,
            s(:send,
              s(:const, nil, :VS), :reverse_each),
            s(:args,
              s(:arg, :a)),
            s(:if,
              s(:send,
                s(:lvar, :a), :<,
                s(:int, 0)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :ArgumentError)),
                s(:args),
                s(:send,
                  s(:array,
                    s(:lvar, :a)), :pack,
                  s(:lvar, :template))),
              s(:begin,
                s(:lvasgn, :s,
                  s(:send,
                    s(:array,
                      s(:lvar, :a)), :pack,
                    s(:lvar, :template))),
                s(:lvasgn, :b,
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :unpack,
                      s(:lvar, :template)), :[],
                    s(:int, 0))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :a),
                  s(:lvar, :b),
                  s(:dstr,
                    s(:str, "["),
                    s(:begin,
                      s(:lvar, :a)),
                    s(:str, "].pack("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :template), :dump)),
                    s(:str, ").unpack("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :template), :dump)),
                    s(:str, ")")))))))),
      s(:def, :test_pack_utf8,
        s(:args),
        s(:begin,
          s(:lvasgn, :template,
            s(:str, "U")),
          s(:block,
            s(:send,
              s(:const, nil, :VS), :reverse_each),
            s(:args,
              s(:arg, :a)),
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :a), :<,
                  s(:int, 0)),
                s(:send,
                  s(:int, 2147483647), :<,
                  s(:lvar, :a))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :RangeError)),
                s(:args),
                s(:send,
                  s(:array,
                    s(:lvar, :a)), :pack,
                  s(:lvar, :template))),
              s(:begin,
                s(:lvasgn, :s,
                  s(:send,
                    s(:array,
                      s(:lvar, :a)), :pack,
                    s(:lvar, :template))),
                s(:lvasgn, :b,
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :unpack,
                      s(:lvar, :template)), :[],
                    s(:int, 0))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :a),
                  s(:lvar, :b),
                  s(:dstr,
                    s(:str, "["),
                    s(:begin,
                      s(:lvar, :a)),
                    s(:str, "].pack("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :template), :dump)),
                    s(:str, ").unpack("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :template), :dump)),
                    s(:str, ")")))))))))))
