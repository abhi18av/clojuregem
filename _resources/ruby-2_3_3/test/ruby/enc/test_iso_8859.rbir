s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestISO8859),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :ASSERTS,
        s(:dstr,
          s(:str, "\n"),
          s(:str, "    assert_match(/^(\\xdf)\\1$/i, \"\\xdf\\xdf\")\n"),
          s(:str, "    assert_match(/^(\\xdf)\\1$/i, \"ssss\")\n"),
          s(:str, "    # assert_match(/^(\\xdf)\\1$/i, \"\\xdfss\") # this must be bug...\n"),
          s(:str, "    assert_match(/^[\\xdfz]+$/i, \"sszzsszz\")\n"),
          s(:str, "    assert_match(/^SS$/i, \"\\xdf\")\n"),
          s(:str, "    assert_match(/^Ss$/i, \"\\xdf\")\n"),
          s(:str, "    ((0xc0..0xde).to_a - [0xd7]).each do |c|\n"),
          s(:str, "      c1 = c.chr(\"ENCODING\")\n"),
          s(:str, "      c2 = (c + 0x20).chr(\"ENCODING\")\n"),
          s(:str, "      assert_match(/^(\#{ c1 })\\1$/i, c2 + c1)\n"),
          s(:str, "      assert_match(/^(\#{ c2 })\\1$/i, c1 + c2)\n"),
          s(:str, "      assert_match(/^[\#{ c1 }]+$/i, c2 + c1)\n"),
          s(:str, "      assert_match(/^[\#{ c2 }]+$/i, c1 + c2)\n"),
          s(:str, "    end\n"),
          s(:str, "    assert_match(/^\\xff$/i, \"\\xff\")\n"),
          s(:str, "  "))),
      s(:def, :test_iso_8859_1,
        s(:args),
        s(:send, nil, :eval,
          s(:send,
            s(:str, "# encoding: iso8859-1\n"), :+,
            s(:send,
              s(:const, nil, :ASSERTS), :gsub,
              s(:regexp,
                s(:str, "ENCODING"),
                s(:regopt, :m)),
              s(:str, "iso8859-1"))))),
      s(:def, :test_iso_8859_2,
        s(:args),
        s(:send, nil, :eval,
          s(:send,
            s(:str, "# encoding: iso8859-2\n"), :+,
            s(:send,
              s(:const, nil, :ASSERTS), :gsub,
              s(:regexp,
                s(:str, "ENCODING"),
                s(:regopt, :m)),
              s(:str, "iso8859-2"))))),
      s(:def, :test_iso_8859_3,
        s(:args),
        s(:send, nil, :eval,
          s(:dstr,
            s(:str, "# encoding: iso8859-3\n"),
            s(:str, "      assert_match(/^(\\xdf)\\1$/i, \"\\xdf\\xdf\")\n"),
            s(:str, "      assert_match(/^(\\xdf)\\1$/i, \"ssss\")\n"),
            s(:str, "      assert_match(/^[\\xdfz]+$/i, \"sszzsszz\")\n"),
            s(:str, "      assert_match(/^SS$/i, \"\\xdf\")\n"),
            s(:str, "      assert_match(/^Ss$/i, \"\\xdf\")\n"),
            s(:str, "      [0xa1, 0xa6, *(0xa9..0xac), 0xaf].each do |c|\n"),
            s(:str, "        c1 = c.chr(\"iso8859-3\")\n"),
            s(:str, "        c2 = (c + 0x10).chr(\"iso8859-3\")\n"),
            s(:str, "        assert_match(/^(\#{ c1 })\\1$/i, c2 + c1)\n"),
            s(:str, "        assert_match(/^(\#{ c2 })\\1$/i, c1 + c2)\n"),
            s(:str, "        assert_match(/^[\#{ c1 }]+$/i, c2 + c1)\n"),
            s(:str, "        assert_match(/^[\#{ c2 }]+$/i, c1 + c2)\n"),
            s(:str, "      end\n"),
            s(:str, "      ([*(0xc0..0xde)] - [0xc3, 0xd0, 0xd7]).each do |c|\n"),
            s(:str, "        c1 = c.chr(\"iso8859-3\")\n"),
            s(:str, "        c2 = (c + 0x20).chr(\"iso8859-3\")\n"),
            s(:str, "        assert_match(/^(\#{ c1 })\\1$/i, c2 + c1)\n"),
            s(:str, "        assert_match(/^(\#{ c2 })\\1$/i, c1 + c2)\n"),
            s(:str, "        assert_match(/^[\#{ c1 }]+$/i, c2 + c1)\n"),
            s(:str, "        assert_match(/^[\#{ c2 }]+$/i, c1 + c2)\n"),
            s(:str, "      end\n"),
            s(:str, "    ")))),
      s(:def, :test_iso_8859_4,
        s(:args),
        s(:send, nil, :eval,
          s(:send,
            s(:str, "# encoding: iso8859-4\n"), :+,
            s(:send,
              s(:const, nil, :ASSERTS), :gsub,
              s(:regexp,
                s(:str, "ENCODING"),
                s(:regopt, :m)),
              s(:str, "iso8859-4"))))),
      s(:def, :test_iso_8859_5,
        s(:args),
        s(:send, nil, :eval,
          s(:dstr,
            s(:str, "# encoding: iso8859-5\n"),
            s(:str, "      (0xb0..0xcf).each do |c|\n"),
            s(:str, "        c1 = c.chr(\"iso8859-5\")\n"),
            s(:str, "        c2 = (c + 0x20).chr(\"iso8859-5\")\n"),
            s(:str, "        assert_match(/^(\#{ c1 })\\1$/i, c2 + c1)\n"),
            s(:str, "        assert_match(/^(\#{ c2 })\\1$/i, c1 + c2)\n"),
            s(:str, "        assert_match(/^[\#{ c1 }]+$/i, c2 + c1)\n"),
            s(:str, "        assert_match(/^[\#{ c2 }]+$/i, c1 + c2)\n"),
            s(:str, "      end\n"),
            s(:str, "      ((0xa1..0xaf).to_a - [0xad]).each do |c|\n"),
            s(:str, "        c1 = c.chr(\"iso8859-5\")\n"),
            s(:str, "        c2 = (c + 0x50).chr(\"iso8859-5\")\n"),
            s(:str, "        assert_match(/^(\#{ c1 })\\1$/i, c2 + c1)\n"),
            s(:str, "        assert_match(/^(\#{ c2 })\\1$/i, c1 + c2)\n"),
            s(:str, "        assert_match(/^[\#{ c1 }]+$/i, c2 + c1)\n"),
            s(:str, "        assert_match(/^[\#{ c2 }]+$/i, c1 + c2)\n"),
            s(:str, "      end\n"),
            s(:str, "    ")))),
      s(:def, :test_iso_8859_6,
        s(:args),
        s(:send, nil, :eval,
          s(:dstr,
            s(:str, "# encoding: iso8859-6\n"),
            s(:str, "      [0xa4, 0xac, 0xbb, 0xbf, *(0xc1..0xda), *(0xe0..0xf2)].each do |c|\n"),
            s(:str, "        c1 = c.chr(\"iso8859-6\")\n"),
            s(:str, "        assert_match(/^(\#{ c1 })\\1$/i, c1 * 2)\n"),
            s(:str, "      end\n"),
            s(:str, "    ")))),
      s(:def, :test_iso_8859_7,
        s(:args),
        s(:send, nil, :eval,
          s(:dstr,
            s(:str, "# encoding: iso8859-7\n"),
            s(:str, "      ((0xa0..0xfe).to_a - [0xae, 0xd2]).each do |c|\n"),
            s(:str, "        c1 = c.chr(\"iso8859-7\")\n"),
            s(:str, "        assert_match(/^(\#{ c1 })\\1$/i, c1 * 2)\n"),
            s(:str, "      end\n"),
            s(:str, "      ((0xc1..0xd9).to_a - [0xd2]).each do |c|\n"),
            s(:str, "        c1 = c.chr(\"iso8859-7\")\n"),
            s(:str, "        c2 = (c + 0x20).chr(\"iso8859-7\")\n"),
            s(:str, "        assert_match(/^(\#{ c1 })\\1$/i, c2 + c1)\n"),
            s(:str, "        assert_match(/^(\#{ c2 })\\1$/i, c1 + c2)\n"),
            s(:str, "        assert_match(/^[\#{ c1 }]+$/i, c2 + c1)\n"),
            s(:str, "        assert_match(/^[\#{ c2 }]+$/i, c1 + c2)\n"),
            s(:str, "      end\n"),
            s(:str, "    ")))),
      s(:def, :test_iso_8859_8,
        s(:args),
        s(:send, nil, :eval,
          s(:dstr,
            s(:str, "# encoding: iso8859-8\n"),
            s(:str, "      [0xa0, *(0xa2..0xbe), *(0xdf..0xfa), 0xfc, 0xfd].each do |c|\n"),
            s(:str, "        c1 = c.chr(\"iso8859-8\")\n"),
            s(:str, "        assert_match(/^(\#{ c1 })\\1$/i, c1 * 2)\n"),
            s(:str, "      end\n"),
            s(:str, "    ")))),
      s(:def, :test_iso_8859_9,
        s(:args),
        s(:send, nil, :eval,
          s(:dstr,
            s(:str, "# encoding: iso8859-9\n"),
            s(:str, "      assert_match(/^(\\xdf)\\1$/i, \"\\xdf\\xdf\")\n"),
            s(:str, "      assert_match(/^(\\xdf)\\1$/i, \"ssss\")\n"),
            s(:str, "      assert_match(/^[\\xdfz]+$/i, \"sszzsszz\")\n"),
            s(:str, "      assert_match(/^SS$/i, \"\\xdf\")\n"),
            s(:str, "      assert_match(/^Ss$/i, \"\\xdf\")\n"),
            s(:str, "      ([*(0xc0..0xdc)] - [0xd7]).each do |c|\n"),
            s(:str, "        c1 = c.chr(\"iso8859-9\")\n"),
            s(:str, "        c2 = (c + 0x20).chr(\"iso8859-9\")\n"),
            s(:str, "        assert_match(/^(\#{ c1 })\\1$/i, c2 + c1)\n"),
            s(:str, "        assert_match(/^(\#{ c2 })\\1$/i, c1 + c2)\n"),
            s(:str, "        assert_match(/^[\#{ c1 }]+$/i, c2 + c1)\n"),
            s(:str, "        assert_match(/^[\#{ c2 }]+$/i, c1 + c2)\n"),
            s(:str, "      end\n"),
            s(:str, "    ")))),
      s(:def, :test_iso_8859_10,
        s(:args),
        s(:send, nil, :eval,
          s(:send,
            s(:str, "# encoding: iso8859-10\n"), :+,
            s(:send,
              s(:const, nil, :ASSERTS), :gsub,
              s(:regexp,
                s(:str, "ENCODING"),
                s(:regopt, :m)),
              s(:str, "iso8859-10"))))),
      s(:def, :test_iso_8859_11,
        s(:args),
        s(:send, nil, :eval,
          s(:dstr,
            s(:str, "# encoding: iso8859-11\n"),
            s(:str, "      [*(0xa0..0xda), *(0xdf..0xfb)].each do |c|\n"),
            s(:str, "        c1 = c.chr(\"iso8859-11\")\n"),
            s(:str, "        assert_match(/^(\#{ c1 })\\1$/i, c1 * 2)\n"),
            s(:str, "      end\n"),
            s(:str, "    ")))),
      s(:def, :test_iso_8859_13,
        s(:args),
        s(:send, nil, :eval,
          s(:send,
            s(:str, "# encoding: iso8859-13\n"), :+,
            s(:send,
              s(:const, nil, :ASSERTS), :gsub,
              s(:regexp,
                s(:str, "ENCODING"),
                s(:regopt, :m)),
              s(:str, "iso8859-13"))))),
      s(:def, :test_iso_8859_14,
        s(:args),
        s(:send, nil, :eval,
          s(:send,
            s(:str, "# encoding: iso8859-14\n"), :+,
            s(:send,
              s(:const, nil, :ASSERTS), :gsub,
              s(:regexp,
                s(:str, "ENCODING"),
                s(:regopt, :m)),
              s(:str, "iso8859-14"))))),
      s(:def, :test_iso_8859_15,
        s(:args),
        s(:send, nil, :eval,
          s(:send,
            s(:str, "# encoding: iso8859-15\n"), :+,
            s(:send,
              s(:const, nil, :ASSERTS), :gsub,
              s(:regexp,
                s(:str, "ENCODING"),
                s(:regopt, :m)),
              s(:str, "iso8859-15"))))),
      s(:def, :test_iso_8859_16,
        s(:args),
        s(:send, nil, :eval,
          s(:send,
            s(:str, "# encoding: iso8859-16\n"), :+,
            s(:send,
              s(:const, nil, :ASSERTS), :gsub,
              s(:regexp,
                s(:str, "ENCODING"),
                s(:regopt, :m)),
              s(:str, "iso8859-16"))))))))
