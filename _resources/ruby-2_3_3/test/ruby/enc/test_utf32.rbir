s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestUTF32),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :encdump,
        s(:args,
          s(:arg, :str)),
        s(:begin,
          s(:lvasgn, :d,
            s(:send,
              s(:lvar, :str), :dump)),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "\\.force_encoding\\(\"[A-Za-z0-9.:_+-]*\"\\)\\z"),
                s(:regopt)),
              s(:lvar, :d)),
            s(:lvar, :d),
            s(:dstr,
              s(:begin,
                s(:lvar, :d)),
              s(:str, ".force_encoding("),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :str), :encoding), :name), :dump)),
              s(:str, ")"))))),
      s(:def, :assert_str_equal,
        s(:args,
          s(:arg, :expected),
          s(:arg, :actual),
          s(:optarg, :message,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :full_message,
            s(:send, nil, :build_message,
              s(:lvar, :message),
              s(:dstr,
                s(:begin,
                  s(:send, nil, :encdump,
                    s(:lvar, :expected))),
                s(:str, " expected but not equal to\n"),
                s(:begin,
                  s(:send, nil, :encdump,
                    s(:lvar, :actual))),
                s(:str, ".\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :actual),
            s(:lvar, :full_message)))),
      s(:def, :test_substr,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_str_equal,
            s(:send,
              s(:str, "abcdefgh"), :force_encoding,
              s(:str, "utf-32le")),
            s(:send,
              s(:send,
                s(:str, "abcdefgh"), :force_encoding,
                s(:str, "utf-32le")), :[],
              s(:int, 0),
              s(:int, 3))),
          s(:send, nil, :assert_str_equal,
            s(:send,
              s(:str, "abcdefgh"), :force_encoding,
              s(:str, "utf-32be")),
            s(:send,
              s(:send,
                s(:str, "abcdefgh"), :force_encoding,
                s(:str, "utf-32be")), :[],
              s(:int, 0),
              s(:int, 3))))),
      s(:def, :test_mbc_len,
        s(:args),
        s(:begin,
          s(:lvasgn, :al,
            s(:send,
              s(:send,
                s(:send,
                  s(:str, "abcdefghijkl"), :force_encoding,
                  s(:str, "utf-32le")), :each_char), :to_a)),
          s(:lvasgn, :ab,
            s(:send,
              s(:send,
                s(:send,
                  s(:str, "abcdefghijkl"), :force_encoding,
                  s(:str, "utf-32be")), :each_char), :to_a)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "abcd"), :force_encoding,
              s(:str, "utf-32le")),
            s(:send,
              s(:lvar, :al), :shift)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "efgh"), :force_encoding,
              s(:str, "utf-32le")),
            s(:send,
              s(:lvar, :al), :shift)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "ijkl"), :force_encoding,
              s(:str, "utf-32le")),
            s(:send,
              s(:lvar, :al), :shift)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "abcd"), :force_encoding,
              s(:str, "utf-32be")),
            s(:send,
              s(:lvar, :ab), :shift)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "efgh"), :force_encoding,
              s(:str, "utf-32be")),
            s(:send,
              s(:lvar, :ab), :shift)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "ijkl"), :force_encoding,
              s(:str, "utf-32be")),
            s(:send,
              s(:lvar, :ab), :shift)))),
      s(:def, :ascii_to_utf16le,
        s(:args,
          s(:arg, :s)),
        s(:send,
          s(:send,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :s), :unpack,
                    s(:str, "C*")), :map),
                s(:args,
                  s(:arg, :x)),
                s(:array,
                  s(:lvar, :x),
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, 0))), :flatten), :pack,
            s(:str, "C*")), :force_encoding,
          s(:str, "utf-32le"))),
      s(:def, :ascii_to_utf16be,
        s(:args,
          s(:arg, :s)),
        s(:send,
          s(:send,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :s), :unpack,
                    s(:str, "C*")), :map),
                s(:args,
                  s(:arg, :x)),
                s(:array,
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, 0),
                  s(:lvar, :x))), :flatten), :pack,
            s(:str, "C*")), :force_encoding,
          s(:str, "utf-32be"))),
      s(:def, :test_mbc_newline,
        s(:args),
        s(:begin,
          s(:lvasgn, :al,
            s(:send,
              s(:send,
                s(:send, nil, :ascii_to_utf16le,
                  s(:str, "foo\nbar\nbaz\n")), :lines), :to_a)),
          s(:lvasgn, :ab,
            s(:send,
              s(:send,
                s(:send, nil, :ascii_to_utf16be,
                  s(:str, "foo\nbar\nbaz\n")), :lines), :to_a)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :ascii_to_utf16le,
              s(:str, "foo\n")),
            s(:send,
              s(:lvar, :al), :shift)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :ascii_to_utf16le,
              s(:str, "bar\n")),
            s(:send,
              s(:lvar, :al), :shift)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :ascii_to_utf16le,
              s(:str, "baz\n")),
            s(:send,
              s(:lvar, :al), :shift)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :ascii_to_utf16be,
              s(:str, "foo\n")),
            s(:send,
              s(:lvar, :ab), :shift)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :ascii_to_utf16be,
              s(:str, "bar\n")),
            s(:send,
              s(:lvar, :ab), :shift)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :ascii_to_utf16be,
              s(:str, "baz\n")),
            s(:send,
              s(:lvar, :ab), :shift)),
          s(:lvasgn, :sl,
            s(:send,
              s(:str, "a\u0000"), :force_encoding,
              s(:str, "utf-32le"))),
          s(:lvasgn, :sb,
            s(:send,
              s(:str, "a\u0000"), :force_encoding,
              s(:str, "utf-32be"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :sl),
            s(:send,
              s(:lvar, :sl), :chomp)),
          s(:send, nil, :assert_equal,
            s(:lvar, :sb),
            s(:send,
              s(:lvar, :sb), :chomp)))),
      s(:def, :test_mbc_to_code,
        s(:args),
        s(:begin,
          s(:lvasgn, :sl,
            s(:send,
              s(:str, "a\u0000\u0000\u0000"), :force_encoding,
              s(:str, "utf-32le"))),
          s(:lvasgn, :sb,
            s(:send,
              s(:str, "\u0000\u0000\u0000a"), :force_encoding,
              s(:str, "utf-32be"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "a"), :ord),
            s(:send,
              s(:lvar, :sl), :ord)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "a"), :ord),
            s(:send,
              s(:lvar, :sb), :ord)))),
      s(:def, :utf8_to_utf32,
        s(:args,
          s(:arg, :s),
          s(:arg, :e)),
        s(:send,
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :s), :chars), :map),
            s(:args,
              s(:arg, :c)),
            s(:send,
              s(:send,
                s(:lvar, :c), :ord), :chr,
              s(:lvar, :e))), :join)),
      s(:def, :test_mbc_case_fold,
        s(:args),
        s(:begin,
          s(:lvasgn, :rl,
            s(:send,
              s(:const, nil, :Regexp), :new,
              s(:send, nil, :utf8_to_utf32,
                s(:str, "^(あ)(a)\\1\\2$"),
                s(:str, "utf-32le")),
              s(:str, "i"))),
          s(:lvasgn, :rb,
            s(:send,
              s(:const, nil, :Regexp), :new,
              s(:send, nil, :utf8_to_utf32,
                s(:str, "^(あ)(a)\\1\\2$"),
                s(:str, "utf-32be")),
              s(:str, "i"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Encoding), :find,
              s(:str, "utf-32le")),
            s(:send,
              s(:lvar, :rl), :encoding)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Encoding), :find,
              s(:str, "utf-32be")),
            s(:send,
              s(:lvar, :rb), :encoding)),
          s(:send, nil, :assert_match,
            s(:lvar, :rl),
            s(:send, nil, :utf8_to_utf32,
              s(:str, "あaあa"),
              s(:str, "utf-32le"))),
          s(:send, nil, :assert_match,
            s(:lvar, :rb),
            s(:send, nil, :utf8_to_utf32,
              s(:str, "あaあa"),
              s(:str, "utf-32be"))))),
      s(:def, :test_code_to_mbc,
        s(:args),
        s(:begin,
          s(:lvasgn, :sl,
            s(:send,
              s(:str, "a\u0000\u0000\u0000"), :force_encoding,
              s(:str, "utf-32le"))),
          s(:lvasgn, :sb,
            s(:send,
              s(:str, "\u0000\u0000\u0000a"), :force_encoding,
              s(:str, "utf-32be"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :sl),
            s(:send,
              s(:send,
                s(:str, "a"), :ord), :chr,
              s(:str, "utf-32le"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :sb),
            s(:send,
              s(:send,
                s(:str, "a"), :ord), :chr,
              s(:str, "utf-32be"))))))))
