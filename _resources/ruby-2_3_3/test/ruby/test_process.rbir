s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:send, nil, :require,
    s(:str, "timeout")),
  s(:send, nil, :require,
    s(:str, "io/wait")),
  s(:send, nil, :require,
    s(:str, "rbconfig")),
  s(:class,
    s(:const, nil, :TestProcess),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :RUBY,
        s(:send,
          s(:const, nil, :EnvUtil), :rubybin)),
      s(:def, :setup,
        s(:args),
        s(:send,
          s(:const, nil, :Process), :waitall)),
      s(:def, :teardown,
        s(:args),
        s(:send,
          s(:const, nil, :Process), :waitall)),
      s(:def, :windows?,
        s(:args),
        s(:send,
          s(:send,
            s(:self), :class), :windows?)),
      s(:defs,
        s(:self), :windows?,
        s(:args),
        s(:return,
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "mswin|mingw|bccwin"),
              s(:regopt)),
            s(:const, nil, :RUBY_PLATFORM)))),
      s(:def, :write_file,
        s(:args,
          s(:arg, :filename),
          s(:arg, :content)),
        s(:block,
          s(:send,
            s(:const, nil, :File), :open,
            s(:lvar, :filename),
            s(:str, "w")),
          s(:args,
            s(:arg, :f)),
          s(:send,
            s(:lvar, :f), :<<,
            s(:lvar, :content)))),
      s(:def, :with_tmpchdir,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Dir), :mktmpdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :File), :realpath,
                s(:lvar, :d))),
            s(:block,
              s(:send,
                s(:const, nil, :Dir), :chdir,
                s(:lvar, :d)),
              s(:args),
              s(:yield,
                s(:lvar, :d)))))),
      s(:def, :run_in_child,
        s(:args,
          s(:arg, :str)),
        s(:begin,
          s(:send, nil, :write_file,
            s(:str, "test-script"),
            s(:lvar, :str)),
          s(:send,
            s(:const, nil, :Process), :wait,
            s(:send, nil, :spawn,
              s(:const, nil, :RUBY),
              s(:str, "test-script"))),
          s(:gvar, :$?))),
      s(:def, :test_rlimit_availability,
        s(:args),
        s(:kwbegin,
          s(:rescue,
            s(:send,
              s(:const, nil, :Process), :getrlimit,
              s(:nil)),
            s(:resbody,
              s(:array,
                s(:const, nil, :NotImplementedError)), nil,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :NotImplementedError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Process), :setrlimit))),
            s(:resbody,
              s(:array,
                s(:const, nil, :TypeError)), nil,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :ArgumentError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Process), :setrlimit))), nil))),
      s(:def, :rlimit_exist?,
        s(:args),
        s(:rescue,
          s(:send,
            s(:const, nil, :Process), :getrlimit,
            s(:nil)),
          s(:resbody,
            s(:array,
              s(:const, nil, :NotImplementedError)), nil,
            s(:return,
              s(:false))),
          s(:resbody,
            s(:array,
              s(:const, nil, :TypeError)), nil,
            s(:return,
              s(:true))), nil)),
      s(:def, :test_rlimit_nofile,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :rlimit_exist?), nil,
            s(:return)),
          s(:block,
            s(:send, nil, :with_tmpchdir),
            s(:args),
            s(:begin,
              s(:send, nil, :write_file,
                s(:str, "s"),
                s(:dstr,
                  s(:str, "        # Too small RLIMIT_NOFILE, such as zero, causes problems.\n"),
                  s(:str, "        # [OpenBSD] Setting to zero freezes this test.\n"),
                  s(:str, "        # [GNU/Linux] EINVAL on poll().  EINVAL on ruby's internal poll() ruby with \"[ASYNC BUG] thread_timer: select\".\n"),
                  s(:str, "        pipes = IO.pipe\n"),
                  s(:str, "\tlimit = pipes.map {|io| io.fileno }.min\n"),
                  s(:str, "\tresult = 1\n"),
                  s(:str, "\tbegin\n"),
                  s(:str, "\t  Process.setrlimit(Process::RLIMIT_NOFILE, limit)\n"),
                  s(:str, "\trescue Errno::EINVAL\n"),
                  s(:str, "\t  result = 0\n"),
                  s(:str, "\tend\n"),
                  s(:str, "\tif result == 1\n"),
                  s(:str, "\t  begin\n"),
                  s(:str, "\t    IO.pipe\n"),
                  s(:str, "\t  rescue Errno::EMFILE\n"),
                  s(:str, "\t   result = 0\n"),
                  s(:str, "\t  end\n"),
                  s(:str, "\tend\n"),
                  s(:str, "\texit result\n"))),
              s(:lvasgn, :pid,
                s(:send, nil, :spawn,
                  s(:const, nil, :RUBY),
                  s(:str, "s"))),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:lvar, :pid)),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:gvar, :$?), :to_i),
                s(:dstr,
                  s(:begin,
                    s(:gvar, :$?)))))))),
      s(:def, :test_rlimit_name,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :rlimit_exist?), nil,
            s(:return)),
          s(:block,
            s(:send,
              s(:array,
                s(:sym, :AS),
                s(:str, "AS"),
                s(:sym, :CORE),
                s(:str, "CORE"),
                s(:sym, :CPU),
                s(:str, "CPU"),
                s(:sym, :DATA),
                s(:str, "DATA"),
                s(:sym, :FSIZE),
                s(:str, "FSIZE"),
                s(:sym, :MEMLOCK),
                s(:str, "MEMLOCK"),
                s(:sym, :MSGQUEUE),
                s(:str, "MSGQUEUE"),
                s(:sym, :NICE),
                s(:str, "NICE"),
                s(:sym, :NOFILE),
                s(:str, "NOFILE"),
                s(:sym, :NPROC),
                s(:str, "NPROC"),
                s(:sym, :RSS),
                s(:str, "RSS"),
                s(:sym, :RTPRIO),
                s(:str, "RTPRIO"),
                s(:sym, :RTTIME),
                s(:str, "RTTIME"),
                s(:sym, :SBSIZE),
                s(:str, "SBSIZE"),
                s(:sym, :SIGPENDING),
                s(:str, "SIGPENDING"),
                s(:sym, :STACK),
                s(:str, "STACK")), :each),
            s(:args,
              s(:arg, :name)),
            s(:if,
              s(:send,
                s(:const, nil, :Process), :const_defined?,
                s(:dstr,
                  s(:str, "RLIMIT_"),
                  s(:begin,
                    s(:lvar, :name)))),
              s(:block,
                s(:send, nil, :assert_nothing_raised),
                s(:args),
                s(:send,
                  s(:const, nil, :Process), :getrlimit,
                  s(:lvar, :name))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :ArgumentError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Process), :getrlimit,
                  s(:lvar, :name))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :Process), :getrlimit,
              s(:sym, :FOO))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :Process), :getrlimit,
              s(:str, "FOO"))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:regexp,
                s(:str, "\\u{30eb 30d3 30fc}"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:const, nil, :Process), :getrlimit,
              s(:str, "ルビー"))))),
      s(:def, :test_rlimit_value,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :rlimit_exist?), nil,
            s(:return)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :Process), :setrlimit,
              s(:sym, :FOO),
              s(:int, 0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :Process), :setrlimit,
              s(:sym, :CORE),
              s(:sym, :FOO))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:regexp,
                s(:str, "\\u{30eb 30d3 30fc}"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:const, nil, :Process), :setrlimit,
              s(:str, "ルビー"),
              s(:int, 0))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:regexp,
                s(:str, "\\u{30eb 30d3 30fc}"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:const, nil, :Process), :setrlimit,
              s(:sym, :CORE),
              s(:str, "ルビー"))),
          s(:block,
            s(:send, nil, :with_tmpchdir),
            s(:args),
            s(:begin,
              s(:lvasgn, :s,
                s(:send, nil, :run_in_child,
                  s(:dstr,
                    s(:str, "        cur, max = Process.getrlimit(:NOFILE)\n"),
                    s(:str, "        Process.setrlimit(:NOFILE, [max-10, cur].min)\n"),
                    s(:str, "        begin\n"),
                    s(:str, "          Process.setrlimit(:NOFILE, :INFINITY)\n"),
                    s(:str, "        rescue Errno::EPERM\n"),
                    s(:str, "          exit false\n"),
                    s(:str, "        end\n")))),
              s(:send, nil, :assert_not_predicate,
                s(:lvar, :s),
                s(:sym, :success?)),
              s(:lvasgn, :s,
                s(:send, nil, :run_in_child,
                  s(:dstr,
                    s(:str, "        cur, max = Process.getrlimit(:NOFILE)\n"),
                    s(:str, "        Process.setrlimit(:NOFILE, [max-10, cur].min)\n"),
                    s(:str, "        begin\n"),
                    s(:str, "          Process.setrlimit(:NOFILE, \"INFINITY\")\n"),
                    s(:str, "        rescue Errno::EPERM\n"),
                    s(:str, "          exit false\n"),
                    s(:str, "        end\n")))),
              s(:send, nil, :assert_not_predicate,
                s(:lvar, :s),
                s(:sym, :success?)))))),
      s(:casgn, nil, :TRUECOMMAND,
        s(:array,
          s(:const, nil, :RUBY),
          s(:str, "-e"),
          s(:str, ""))),
      s(:def, :test_execopts_opts,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:send,
                s(:const, nil, :Process), :spawn,
                s(:splat,
                  s(:const, nil, :TRUECOMMAND)),
                s(:hash)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:send,
                s(:const, nil, :Process), :spawn,
                s(:splat,
                  s(:const, nil, :TRUECOMMAND)),
                s(:hash,
                  s(:pair,
                    s(:sym, :foo),
                    s(:int, 100)))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:send,
                s(:const, nil, :Process), :spawn,
                s(:splat,
                  s(:const, nil, :TRUECOMMAND)),
                s(:hash,
                  s(:pair,
                    s(:const, nil, :Process),
                    s(:int, 100)))))))),
      s(:def, :test_execopts_pgroup,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :windows?),
            s(:send, nil, :skip,
              s(:str, "system(:pgroup) is not supported")), nil),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send, nil, :system,
              s(:splat,
                s(:const, nil, :TRUECOMMAND)),
              s(:hash,
                s(:pair,
                  s(:sym, :pgroup),
                  s(:false))))),
          s(:lvasgn, :io,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "print Process.getpgrp")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:const, nil, :Process), :getpgrp), :to_s),
            s(:send,
              s(:lvar, :io), :read)),
          s(:send,
            s(:lvar, :io), :close),
          s(:lvasgn, :io,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "print Process.getpgrp"),
                s(:hash,
                  s(:pair,
                    s(:sym, :pgroup),
                    s(:true)))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :io), :pid), :to_s),
            s(:send,
              s(:lvar, :io), :read)),
          s(:send,
            s(:lvar, :io), :close),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :system,
              s(:splat,
                s(:const, nil, :TRUECOMMAND)),
              s(:hash,
                s(:pair,
                  s(:sym, :pgroup),
                  s(:int, -1))))),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:const, nil, :RUBY),
                s(:str, "-egets")),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :Errno), :EPERM)),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:send, nil, :spawn,
                  s(:splat,
                    s(:const, nil, :TRUECOMMAND)),
                  s(:hash,
                    s(:pair,
                      s(:sym, :pgroup),
                      s(:send,
                        s(:lvar, :f), :pid))))))),
          s(:lvasgn, :io1,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "print Process.getpgrp"),
                s(:hash,
                  s(:pair,
                    s(:sym, :pgroup),
                    s(:true)))))),
          s(:lvasgn, :io2,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "print Process.getpgrp"),
                s(:hash,
                  s(:pair,
                    s(:sym, :pgroup),
                    s(:send,
                      s(:lvar, :io1), :pid)))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :io1), :pid), :to_s),
            s(:send,
              s(:lvar, :io1), :read)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :io1), :pid), :to_s),
            s(:send,
              s(:lvar, :io2), :read)),
          s(:send,
            s(:const, nil, :Process), :wait,
            s(:send,
              s(:lvar, :io1), :pid)),
          s(:send,
            s(:const, nil, :Process), :wait,
            s(:send,
              s(:lvar, :io2), :pid)),
          s(:send,
            s(:lvar, :io1), :close),
          s(:send,
            s(:lvar, :io2), :close))),
      s(:def, :test_execopts_rlimit,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :rlimit_exist?), nil,
            s(:return)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :system,
              s(:splat,
                s(:const, nil, :TRUECOMMAND)),
              s(:hash,
                s(:pair,
                  s(:sym, :rlimit_foo),
                  s(:int, 0))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :system,
              s(:splat,
                s(:const, nil, :TRUECOMMAND)),
              s(:hash,
                s(:pair,
                  s(:sym, :rlimit_NOFILE),
                  s(:int, 0))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :system,
              s(:splat,
                s(:const, nil, :TRUECOMMAND)),
              s(:hash,
                s(:pair,
                  s(:sym, :rlimit_nofile),
                  s(:array))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :system,
              s(:splat,
                s(:const, nil, :TRUECOMMAND)),
              s(:hash,
                s(:pair,
                  s(:sym, :rlimit_nofile),
                  s(:array,
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3)))))),
          s(:lvasgn, :max,
            s(:send,
              s(:send,
                s(:const, nil, :Process), :getrlimit,
                s(:sym, :CORE)), :last)),
          s(:lvasgn, :n,
            s(:lvar, :max)),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "p Process.getrlimit(:CORE)"),
                s(:hash,
                  s(:pair,
                    s(:sym, :rlimit_core),
                    s(:lvar, :n))))),
            s(:args,
              s(:arg, :io)),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "["),
                s(:begin,
                  s(:lvar, :n)),
                s(:str, ", "),
                s(:begin,
                  s(:lvar, :n)),
                s(:str, "]\n")),
              s(:send,
                s(:lvar, :io), :read))),
          s(:lvasgn, :n,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "p Process.getrlimit(:CORE)"),
                s(:hash,
                  s(:pair,
                    s(:sym, :rlimit_core),
                    s(:lvar, :n))))),
            s(:args,
              s(:arg, :io)),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "["),
                s(:begin,
                  s(:lvar, :n)),
                s(:str, ", "),
                s(:begin,
                  s(:lvar, :n)),
                s(:str, "]\n")),
              s(:send,
                s(:lvar, :io), :read))),
          s(:lvasgn, :n,
            s(:lvar, :max)),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "p Process.getrlimit(:CORE)"),
                s(:hash,
                  s(:pair,
                    s(:sym, :rlimit_core),
                    s(:array,
                      s(:lvar, :n)))))),
            s(:args,
              s(:arg, :io)),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "["),
                s(:begin,
                  s(:lvar, :n)),
                s(:str, ", "),
                s(:begin,
                  s(:lvar, :n)),
                s(:str, "]")),
              s(:send,
                s(:send,
                  s(:lvar, :io), :read), :chomp))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :m),
              s(:lvasgn, :n)),
            s(:array,
              s(:int, 0),
              s(:lvar, :max))),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "p Process.getrlimit(:CORE)"),
                s(:hash,
                  s(:pair,
                    s(:sym, :rlimit_core),
                    s(:array,
                      s(:lvar, :m),
                      s(:lvar, :n)))))),
            s(:args,
              s(:arg, :io)),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "["),
                s(:begin,
                  s(:lvar, :m)),
                s(:str, ", "),
                s(:begin,
                  s(:lvar, :n)),
                s(:str, "]")),
              s(:send,
                s(:send,
                  s(:lvar, :io), :read), :chomp))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :m),
              s(:lvasgn, :n)),
            s(:array,
              s(:int, 0),
              s(:int, 0))),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "p Process.getrlimit(:CORE)"),
                s(:hash,
                  s(:pair,
                    s(:sym, :rlimit_core),
                    s(:array,
                      s(:lvar, :m),
                      s(:lvar, :n)))))),
            s(:args,
              s(:arg, :io)),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "["),
                s(:begin,
                  s(:lvar, :m)),
                s(:str, ", "),
                s(:begin,
                  s(:lvar, :n)),
                s(:str, "]")),
              s(:send,
                s(:send,
                  s(:lvar, :io), :read), :chomp))),
          s(:lvasgn, :n,
            s(:lvar, :max)),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "p Process.getrlimit(:CORE), Process.getrlimit(:CPU)"),
                s(:hash,
                  s(:pair,
                    s(:sym, :rlimit_core),
                    s(:lvar, :n)),
                  s(:pair,
                    s(:sym, :rlimit_cpu),
                    s(:int, 3600))))),
            s(:args,
              s(:arg, :io)),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "["),
                s(:begin,
                  s(:lvar, :n)),
                s(:str, ", "),
                s(:begin,
                  s(:lvar, :n)),
                s(:str, "]\n[3600, 3600]")),
              s(:send,
                s(:send,
                  s(:lvar, :io), :read), :chomp))))),
      s(:casgn, nil, :MANDATORY_ENVS,
        s(:array,
          s(:str, "RUBYLIB"))),
      s(:case,
        s(:send,
          s(:const,
            s(:const, nil, :RbConfig), :CONFIG), :[],
          s(:str, "target_os")),
        s(:when,
          s(:regexp,
            s(:str, "linux"),
            s(:regopt)),
          s(:send,
            s(:const, nil, :MANDATORY_ENVS), :<<,
            s(:str, "LD_PRELOAD"))),
        s(:when,
          s(:regexp,
            s(:str, "mswin|mingw"),
            s(:regopt)),
          s(:send,
            s(:const, nil, :MANDATORY_ENVS), :concat,
            s(:array,
              s(:str, "HOME"),
              s(:str, "USER"),
              s(:str, "TMPDIR")))),
        s(:when,
          s(:regexp,
            s(:str, "darwin"),
            s(:regopt)),
          s(:send,
            s(:const, nil, :MANDATORY_ENVS), :concat,
            s(:send,
              s(:send,
                s(:const, nil, :ENV), :keys), :grep,
              s(:regexp,
                s(:str, "\\A__CF_"),
                s(:regopt))))), nil),
      s(:if,
        s(:lvasgn, :e,
          s(:send,
            s(:const,
              s(:const, nil, :RbConfig), :CONFIG), :[],
            s(:str, "LIBPATHENV"))),
        s(:send,
          s(:const, nil, :MANDATORY_ENVS), :<<,
          s(:lvar, :e)), nil),
      s(:casgn, nil, :PREENVARG,
        s(:array,
          s(:str, "-e"),
          s(:dstr,
            s(:str, "%w["),
            s(:begin,
              s(:send,
                s(:const, nil, :MANDATORY_ENVS), :join,
                s(:str, " "))),
            s(:str, "].each{|e|ENV.delete(e)}")))),
      s(:casgn, nil, :ENVARG,
        s(:array,
          s(:str, "-e"),
          s(:str, "ENV.each {|k,v| puts \"\#{k}=\#{v}\" }"))),
      s(:casgn, nil, :ENVCOMMAND,
        s(:send,
          s(:send,
            s(:array,
              s(:const, nil, :RUBY)), :concat,
            s(:const, nil, :PREENVARG)), :concat,
          s(:const, nil, :ENVARG))),
      s(:def, :test_execopts_env,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :system,
              s(:hash,
                s(:pair,
                  s(:str, "F=O"),
                  s(:str, "BAR"))),
              s(:splat,
                s(:const, nil, :TRUECOMMAND)))),
          s(:block,
            s(:send, nil, :with_tmpchdir),
            s(:args,
              s(:arg, :d)),
            s(:begin,
              s(:lvasgn, :prog,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :d)),
                  s(:str, "/notexist"))),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const, nil, :Errno), :ENOENT)),
                  s(:args),
                  s(:send,
                    s(:const, nil, :Process), :wait,
                    s(:send,
                      s(:const, nil, :Process), :spawn,
                      s(:hash,
                        s(:pair,
                          s(:str, "FOO"),
                          s(:str, "BAR"))),
                      s(:lvar, :prog))))),
              s(:send, nil, :assert_equal,
                s(:lvar, :prog),
                s(:send,
                  s(:send,
                    s(:lvar, :e), :message), :sub,
                  s(:regexp,
                    s(:str, ".* - "),
                    s(:regopt)),
                  s(:str, ""))),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const, nil, :Errno), :ENOENT)),
                  s(:args),
                  s(:send,
                    s(:const, nil, :Process), :wait,
                    s(:send,
                      s(:const, nil, :Process), :spawn,
                      s(:hash,
                        s(:pair,
                          s(:str, "FOO"),
                          s(:str, "BAR"))),
                      s(:array,
                        s(:lvar, :prog),
                        s(:str, "blar")))))),
              s(:send, nil, :assert_equal,
                s(:lvar, :prog),
                s(:send,
                  s(:send,
                    s(:lvar, :e), :message), :sub,
                  s(:regexp,
                    s(:str, ".* - "),
                    s(:regopt)),
                  s(:str, ""))))),
          s(:lvasgn, :h,
            s(:hash)),
          s(:lvasgn, :cmd,
            s(:array,
              s(:lvar, :h),
              s(:const, nil, :RUBY))),
          s(:block,
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :ENV), :keys), :+,
                  s(:const, nil, :MANDATORY_ENVS))), :each),
            s(:args,
              s(:arg, :k)),
            s(:case,
              s(:lvar, :k),
              s(:when,
                s(:regexp,
                  s(:str, "\\APATH\\z"),
                  s(:regopt, :i)), nil),
              s(:when,
                s(:splat,
                  s(:const, nil, :MANDATORY_ENVS)),
                s(:send,
                  s(:send,
                    s(:lvar, :cmd), :<<,
                    s(:str, "-e")), :<<,
                  s(:dstr,
                    s(:str, "ENV.delete('"),
                    s(:begin,
                      s(:lvar, :k)),
                    s(:str, "')")))),
              s(:send,
                s(:lvar, :h), :[]=,
                s(:lvar, :k),
                s(:nil)))),
          s(:send,
            s(:send,
              s(:lvar, :cmd), :<<,
              s(:str, "-e")), :<<,
            s(:str, "puts ENV.keys.map{|e|e.upcase}")),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:lvar, :cmd)),
            s(:args,
              s(:arg, :io)),
            s(:send, nil, :assert_equal,
              s(:str, "PATH\n"),
              s(:send,
                s(:lvar, :io), :read))),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:hash,
                  s(:pair,
                    s(:str, "FOO"),
                    s(:str, "BAR"))),
                s(:splat,
                  s(:const, nil, :ENVCOMMAND)))),
            s(:args,
              s(:arg, :io)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "^FOO=BAR$"),
                s(:regopt)),
              s(:send,
                s(:lvar, :io), :read))),
          s(:block,
            s(:send, nil, :with_tmpchdir),
            s(:args,
              s(:arg, :d)),
            s(:begin,
              s(:send, nil, :system,
                s(:hash,
                  s(:pair,
                    s(:str, "fofo"),
                    s(:str, "haha"))),
                s(:splat,
                  s(:const, nil, :ENVCOMMAND)),
                s(:hash,
                  s(:pair,
                    s(:const, nil, :STDOUT),
                    s(:str, "out")))),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "^fofo=haha$"),
                  s(:regopt)),
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :read,
                    s(:str, "out")), :chomp)))),
          s(:lvasgn, :old,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "hmm"))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:send,
                  s(:const, nil, :ENV), :[]=,
                  s(:str, "hmm"),
                  s(:str, "fufu")),
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:const, nil, :ENVCOMMAND)),
                  s(:args,
                    s(:arg, :io)),
                  s(:send, nil, :assert_match,
                    s(:regexp,
                      s(:str, "^hmm=fufu$"),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :io), :read))),
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:array,
                      s(:hash,
                        s(:pair,
                          s(:str, "hmm"),
                          s(:str, ""))),
                      s(:splat,
                        s(:const, nil, :ENVCOMMAND)))),
                  s(:args,
                    s(:arg, :io)),
                  s(:send, nil, :assert_match,
                    s(:regexp,
                      s(:str, "^hmm=$"),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :io), :read))),
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:array,
                      s(:hash,
                        s(:pair,
                          s(:str, "hmm"),
                          s(:nil))),
                      s(:splat,
                        s(:const, nil, :ENVCOMMAND)))),
                  s(:args,
                    s(:arg, :io)),
                  s(:send, nil, :assert_not_match,
                    s(:regexp,
                      s(:str, "^hmm="),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :io), :read))),
                s(:send,
                  s(:const, nil, :ENV), :[]=,
                  s(:str, "hmm"),
                  s(:str, "")),
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:const, nil, :ENVCOMMAND)),
                  s(:args,
                    s(:arg, :io)),
                  s(:send, nil, :assert_match,
                    s(:regexp,
                      s(:str, "^hmm=$"),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :io), :read))),
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:array,
                      s(:hash,
                        s(:pair,
                          s(:str, "hmm"),
                          s(:str, ""))),
                      s(:splat,
                        s(:const, nil, :ENVCOMMAND)))),
                  s(:args,
                    s(:arg, :io)),
                  s(:send, nil, :assert_match,
                    s(:regexp,
                      s(:str, "^hmm=$"),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :io), :read))),
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:array,
                      s(:hash,
                        s(:pair,
                          s(:str, "hmm"),
                          s(:nil))),
                      s(:splat,
                        s(:const, nil, :ENVCOMMAND)))),
                  s(:args,
                    s(:arg, :io)),
                  s(:send, nil, :assert_not_match,
                    s(:regexp,
                      s(:str, "^hmm="),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :io), :read))),
                s(:send,
                  s(:const, nil, :ENV), :[]=,
                  s(:str, "hmm"),
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:const, nil, :ENVCOMMAND)),
                  s(:args,
                    s(:arg, :io)),
                  s(:send, nil, :assert_not_match,
                    s(:regexp,
                      s(:str, "^hmm="),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :io), :read))),
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:array,
                      s(:hash,
                        s(:pair,
                          s(:str, "hmm"),
                          s(:str, ""))),
                      s(:splat,
                        s(:const, nil, :ENVCOMMAND)))),
                  s(:args,
                    s(:arg, :io)),
                  s(:send, nil, :assert_match,
                    s(:regexp,
                      s(:str, "^hmm=$"),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :io), :read))),
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:array,
                      s(:hash,
                        s(:pair,
                          s(:str, "hmm"),
                          s(:nil))),
                      s(:splat,
                        s(:const, nil, :ENVCOMMAND)))),
                  s(:args,
                    s(:arg, :io)),
                  s(:send, nil, :assert_not_match,
                    s(:regexp,
                      s(:str, "^hmm="),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :io), :read)))),
              s(:send,
                s(:const, nil, :ENV), :[]=,
                s(:str, "hmm"),
                s(:lvar, :old)))))),
      s(:def, :_test_execopts_env_popen,
        s(:args,
          s(:arg, :cmd)),
        s(:begin,
          s(:lvasgn, :message,
            s(:send,
              s(:lvar, :cmd), :inspect)),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:hash,
                s(:pair,
                  s(:str, "FOO"),
                  s(:str, "BAR"))),
              s(:lvar, :cmd)),
            s(:args,
              s(:arg, :io)),
            s(:send, nil, :assert_equal,
              s(:str, "FOO=BAR"),
              s(:send,
                s(:send,
                  s(:lvar, :io), :read), :[],
                s(:regexp,
                  s(:str, "^FOO=.*"),
                  s(:regopt))),
              s(:lvar, :message))),
          s(:lvasgn, :old,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "hmm"))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:send,
                  s(:const, nil, :ENV), :[]=,
                  s(:str, "hmm"),
                  s(:str, "fufu")),
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:lvar, :cmd)),
                  s(:args,
                    s(:arg, :io)),
                  s(:send, nil, :assert_match,
                    s(:regexp,
                      s(:str, "^hmm=fufu$"),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :io), :read),
                    s(:lvar, :message))),
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:hash,
                      s(:pair,
                        s(:str, "hmm"),
                        s(:str, ""))),
                    s(:lvar, :cmd)),
                  s(:args,
                    s(:arg, :io)),
                  s(:send, nil, :assert_match,
                    s(:regexp,
                      s(:str, "^hmm=$"),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :io), :read),
                    s(:lvar, :message))),
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:hash,
                      s(:pair,
                        s(:str, "hmm"),
                        s(:nil))),
                    s(:lvar, :cmd)),
                  s(:args,
                    s(:arg, :io)),
                  s(:send, nil, :assert_not_match,
                    s(:regexp,
                      s(:str, "^hmm="),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :io), :read),
                    s(:lvar, :message))),
                s(:send,
                  s(:const, nil, :ENV), :[]=,
                  s(:str, "hmm"),
                  s(:str, "")),
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:lvar, :cmd)),
                  s(:args,
                    s(:arg, :io)),
                  s(:send, nil, :assert_match,
                    s(:regexp,
                      s(:str, "^hmm=$"),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :io), :read),
                    s(:lvar, :message))),
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:hash,
                      s(:pair,
                        s(:str, "hmm"),
                        s(:str, ""))),
                    s(:lvar, :cmd)),
                  s(:args,
                    s(:arg, :io)),
                  s(:send, nil, :assert_match,
                    s(:regexp,
                      s(:str, "^hmm=$"),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :io), :read),
                    s(:lvar, :message))),
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:hash,
                      s(:pair,
                        s(:str, "hmm"),
                        s(:nil))),
                    s(:lvar, :cmd)),
                  s(:args,
                    s(:arg, :io)),
                  s(:send, nil, :assert_not_match,
                    s(:regexp,
                      s(:str, "^hmm="),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :io), :read),
                    s(:lvar, :message))),
                s(:send,
                  s(:const, nil, :ENV), :[]=,
                  s(:str, "hmm"),
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:lvar, :cmd)),
                  s(:args,
                    s(:arg, :io)),
                  s(:send, nil, :assert_not_match,
                    s(:regexp,
                      s(:str, "^hmm="),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :io), :read),
                    s(:lvar, :message))),
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:hash,
                      s(:pair,
                        s(:str, "hmm"),
                        s(:str, ""))),
                    s(:lvar, :cmd)),
                  s(:args,
                    s(:arg, :io)),
                  s(:send, nil, :assert_match,
                    s(:regexp,
                      s(:str, "^hmm=$"),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :io), :read),
                    s(:lvar, :message))),
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:hash,
                      s(:pair,
                        s(:str, "hmm"),
                        s(:nil))),
                    s(:lvar, :cmd)),
                  s(:args,
                    s(:arg, :io)),
                  s(:send, nil, :assert_not_match,
                    s(:regexp,
                      s(:str, "^hmm="),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :io), :read),
                    s(:lvar, :message)))),
              s(:send,
                s(:const, nil, :ENV), :[]=,
                s(:str, "hmm"),
                s(:lvar, :old)))))),
      s(:def, :test_execopts_env_popen_vector,
        s(:args),
        s(:send, nil, :_test_execopts_env_popen,
          s(:const, nil, :ENVCOMMAND))),
      s(:def, :test_execopts_env_popen_string,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:block,
              s(:send, nil, :open,
                s(:str, "test-script"),
                s(:str, "w")),
              s(:args,
                s(:arg, :f)),
              s(:block,
                s(:send,
                  s(:const, nil, :ENVCOMMAND), :each_with_index),
                s(:args,
                  s(:arg, :cmd),
                  s(:arg, :i)),
                s(:begin,
                  s(:if,
                    s(:or,
                      s(:send,
                        s(:lvar, :i), :zero?),
                      s(:send,
                        s(:lvar, :cmd), :==,
                        s(:str, "-e"))),
                    s(:next), nil),
                  s(:send,
                    s(:lvar, :f), :puts,
                    s(:lvar, :cmd))))),
            s(:send, nil, :_test_execopts_env_popen,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :RUBY)),
                s(:str, " test-script")))))),
      s(:def, :test_execopts_preserve_env_on_exec_failure,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send, nil, :write_file,
              s(:str, "s"),
              s(:dstr,
                s(:str, "        ENV[\"mgg\"] = nil\n"),
                s(:str, "        prog = \"./nonexistent\"\n"),
                s(:str, "        begin\n"),
                s(:str, "          Process.exec({\"mgg\" => \"mggoo\"}, [prog, prog])\n"),
                s(:str, "        rescue Errno::ENOENT\n"),
                s(:str, "        end\n"),
                s(:str, "        open('out', 'w') {|f|\n"),
                s(:str, "          f.print ENV[\"mgg\"].inspect\n"),
                s(:str, "        }\n"))),
            s(:send, nil, :system,
              s(:const, nil, :RUBY),
              s(:str, "s")),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:nil), :inspect),
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "out")),
              s(:str, "[ruby-core:44093] [ruby-trunk - Bug #6249]"))))),
      s(:def, :test_execopts_env_single_word,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:block,
              s(:send, nil, :open,
                s(:str, "test_execopts_env_single_word.rb"),
                s(:str, "w")),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:lvar, :f), :puts,
                s(:str, "print ENV['hgga']"))),
            s(:send, nil, :system,
              s(:hash,
                s(:pair,
                  s(:str, "hgga"),
                  s(:str, "ugu"))),
              s(:const, nil, :RUBY),
              s(:hash,
                s(:pair,
                  s(:sym, :in),
                  s(:str, "test_execopts_env_single_word.rb")),
                s(:pair,
                  s(:sym, :out),
                  s(:str, "test_execopts_env_single_word.out")))),
            s(:send, nil, :assert_equal,
              s(:str, "ugu"),
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "test_execopts_env_single_word.out")))))),
      s(:def, :test_execopts_unsetenv_others,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:hash)),
          s(:block,
            s(:send,
              s(:const, nil, :MANDATORY_ENVS), :each),
            s(:args,
              s(:arg, :k)),
            s(:and,
              s(:lvasgn, :e,
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:lvar, :k))),
              s(:send,
                s(:lvar, :h), :[]=,
                s(:lvar, :k),
                s(:lvar, :e)))),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:lvar, :h),
                s(:splat,
                  s(:const, nil, :ENVCOMMAND)),
                s(:hash,
                  s(:pair,
                    s(:sym, :unsetenv_others),
                    s(:true))))),
            s(:args,
              s(:arg, :io)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :io), :read))),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:send,
                  s(:lvar, :h), :merge,
                  s(:hash,
                    s(:pair,
                      s(:str, "A"),
                      s(:str, "B")))),
                s(:splat,
                  s(:const, nil, :ENVCOMMAND)),
                s(:hash,
                  s(:pair,
                    s(:sym, :unsetenv_others),
                    s(:true))))),
            s(:args,
              s(:arg, :io)),
            s(:send, nil, :assert_equal,
              s(:str, "A=B\n"),
              s(:send,
                s(:lvar, :io), :read))))),
      s(:casgn, nil, :PWD,
        s(:array,
          s(:const, nil, :RUBY),
          s(:str, "-e"),
          s(:str, "puts Dir.pwd"))),
      s(:def, :test_execopts_chdir,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:block,
              s(:send,
                s(:const, nil, :IO), :popen,
                s(:array,
                  s(:splat,
                    s(:const, nil, :PWD)),
                  s(:hash,
                    s(:pair,
                      s(:sym, :chdir),
                      s(:lvar, :d))))),
              s(:args,
                s(:arg, :io)),
              s(:send, nil, :assert_equal,
                s(:lvar, :d),
                s(:send,
                  s(:send,
                    s(:lvar, :io), :read), :chomp))),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const,
                  s(:const, nil, :Errno), :ENOENT),
                s(:regexp,
                  s(:str, "d/notexist"),
                  s(:regopt))),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:send,
                  s(:const, nil, :Process), :spawn,
                  s(:splat,
                    s(:const, nil, :PWD)),
                  s(:hash,
                    s(:pair,
                      s(:sym, :chdir),
                      s(:str, "d/notexist")))))),
            s(:lvasgn, :n,
              s(:str, "d/🍺")),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const,
                  s(:const, nil, :Errno), :ENOENT),
                s(:regexp,
                  s(:begin,
                    s(:lvar, :n)),
                  s(:regopt))),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:send,
                  s(:const, nil, :Process), :spawn,
                  s(:splat,
                    s(:const, nil, :PWD)),
                  s(:hash,
                    s(:pair,
                      s(:sym, :chdir),
                      s(:lvar, :n))))))))),
      s(:def, :test_execopts_open_chdir,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send,
              s(:const, nil, :Dir), :mkdir,
              s(:str, "foo")),
            s(:send, nil, :system,
              s(:splat,
                s(:const, nil, :PWD)),
              s(:hash,
                s(:pair,
                  s(:sym, :chdir),
                  s(:str, "foo")),
                s(:pair,
                  s(:sym, :out),
                  s(:str, "open_chdir_test")))),
            s(:send,
              s(:send, nil, :assert_file), :exist?,
              s(:str, "open_chdir_test")),
            s(:send,
              s(:send, nil, :assert_file), :not_exist?,
              s(:str, "foo/open_chdir_test")),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:begin,
                  s(:lvar, :d)),
                s(:str, "/foo")),
              s(:send,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:str, "open_chdir_test")), :chomp))))),
      s(:if,
        s(:or,
          s(:send, nil, :windows?),
          s(:send,
            s(:send,
              s(:const, nil, :Encoding), :find,
              s(:str, "locale")), :==,
            s(:const,
              s(:const, nil, :Encoding), :UTF_8))),
        s(:def, :test_execopts_open_chdir_m17n_path,
          s(:args),
          s(:block,
            s(:send, nil, :with_tmpchdir),
            s(:args,
              s(:arg, :d)),
            s(:begin,
              s(:send,
                s(:const, nil, :Dir), :mkdir,
                s(:str, "テスト")),
              s(:send, nil, :system,
                s(:splat,
                  s(:const, nil, :PWD)),
                s(:hash,
                  s(:pair,
                    s(:sym, :chdir),
                    s(:str, "テスト")),
                  s(:pair,
                    s(:sym, :out),
                    s(:str, "open_chdir_テスト")))),
              s(:send,
                s(:send, nil, :assert_file), :exist?,
                s(:str, "open_chdir_テスト")),
              s(:send,
                s(:send, nil, :assert_file), :not_exist?,
                s(:str, "テスト/open_chdir_テスト")),
              s(:send, nil, :assert_equal,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :d)),
                  s(:str, "/テスト")),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :read,
                      s(:str, "open_chdir_テスト")), :chomp), :encode,
                  s(:const,
                    s(:const, nil, :Encoding), :UTF_8)))))), nil),
      s(:def, :test_execopts_open_failure,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const,
                  s(:const, nil, :Errno), :ENOENT),
                s(:regexp,
                  s(:str, "d/notexist"),
                  s(:regopt))),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:send,
                  s(:const, nil, :Process), :spawn,
                  s(:splat,
                    s(:const, nil, :PWD)),
                  s(:hash,
                    s(:pair,
                      s(:sym, :in),
                      s(:str, "d/notexist")))))),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const,
                  s(:const, nil, :Errno), :ENOENT),
                s(:regexp,
                  s(:str, "d/notexist"),
                  s(:regopt))),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:send,
                  s(:const, nil, :Process), :spawn,
                  s(:splat,
                    s(:const, nil, :PWD)),
                  s(:hash,
                    s(:pair,
                      s(:sym, :out),
                      s(:str, "d/notexist")))))),
            s(:lvasgn, :n,
              s(:str, "d/🍺")),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const,
                  s(:const, nil, :Errno), :ENOENT),
                s(:regexp,
                  s(:begin,
                    s(:lvar, :n)),
                  s(:regopt))),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:send,
                  s(:const, nil, :Process), :spawn,
                  s(:splat,
                    s(:const, nil, :PWD)),
                  s(:hash,
                    s(:pair,
                      s(:sym, :in),
                      s(:lvar, :n)))))),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const,
                  s(:const, nil, :Errno), :ENOENT),
                s(:regexp,
                  s(:begin,
                    s(:lvar, :n)),
                  s(:regopt))),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:send,
                  s(:const, nil, :Process), :spawn,
                  s(:splat,
                    s(:const, nil, :PWD)),
                  s(:hash,
                    s(:pair,
                      s(:sym, :out),
                      s(:lvar, :n))))))))),
      s(:casgn, nil, :UMASK,
        s(:array,
          s(:const, nil, :RUBY),
          s(:str, "-e"),
          s(:str, "printf \"%04o\\n\", File.umask"))),
      s(:def, :test_execopts_umask,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :windows?),
            s(:send, nil, :skip,
              s(:str, "umask is not supported")), nil),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:splat,
                  s(:const, nil, :UMASK)),
                s(:hash,
                  s(:pair,
                    s(:sym, :umask),
                    s(:int, 0))))),
            s(:args,
              s(:arg, :io)),
            s(:send, nil, :assert_equal,
              s(:str, "0000"),
              s(:send,
                s(:send,
                  s(:lvar, :io), :read), :chomp))),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:splat,
                  s(:const, nil, :UMASK)),
                s(:hash,
                  s(:pair,
                    s(:sym, :umask),
                    s(:int, 511))))),
            s(:args,
              s(:arg, :io)),
            s(:send, nil, :assert_equal,
              s(:str, "0777"),
              s(:send,
                s(:send,
                  s(:lvar, :io), :read), :chomp))))),
      s(:def, :with_pipe,
        s(:args),
        s(:kwbegin,
          s(:ensure,
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :r),
                  s(:lvasgn, :w)),
                s(:send,
                  s(:const, nil, :IO), :pipe)),
              s(:yield,
                s(:lvar, :r),
                s(:lvar, :w))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :r), :closed?), nil,
                s(:send,
                  s(:lvar, :r), :close)),
              s(:if,
                s(:send,
                  s(:lvar, :w), :closed?), nil,
                s(:send,
                  s(:lvar, :w), :close)))))),
      s(:def, :with_pipes,
        s(:args,
          s(:arg, :n)),
        s(:begin,
          s(:lvasgn, :ary,
            s(:array)),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:block,
                  s(:send,
                    s(:lvar, :n), :times),
                  s(:args),
                  s(:send,
                    s(:lvar, :ary), :<<,
                    s(:send,
                      s(:const, nil, :IO), :pipe))),
                s(:yield,
                  s(:lvar, :ary))),
              s(:block,
                s(:send,
                  s(:lvar, :ary), :each),
                s(:args,
                  s(:arg, :r),
                  s(:arg, :w)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :r), :closed?), nil,
                    s(:send,
                      s(:lvar, :r), :close)),
                  s(:if,
                    s(:send,
                      s(:lvar, :w), :closed?), nil,
                    s(:send,
                      s(:lvar, :w), :close)))))))),
      s(:casgn, nil, :ECHO,
        s(:block,
          s(:send, nil, :lambda),
          s(:args,
            s(:arg, :arg)),
          s(:array,
            s(:const, nil, :RUBY),
            s(:str, "-e"),
            s(:dstr,
              s(:str, "puts "),
              s(:begin,
                s(:send,
                  s(:lvar, :arg), :dump)),
              s(:str, "; STDOUT.flush"))))),
      s(:casgn, nil, :SORT,
        s(:array,
          s(:const, nil, :RUBY),
          s(:str, "-e"),
          s(:str, "puts ARGF.readlines.sort"))),
      s(:casgn, nil, :CAT,
        s(:array,
          s(:const, nil, :RUBY),
          s(:str, "-e"),
          s(:str, "IO.copy_stream STDIN, STDOUT"))),
      s(:def, :test_execopts_redirect_fd,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:send,
                s(:const, nil, :Process), :spawn,
                s(:splat,
                  s(:send,
                    s(:const, nil, :ECHO), :[],
                    s(:str, "a"))),
                s(:hash,
                  s(:pair,
                    s(:const, nil, :STDOUT),
                    s(:array,
                      s(:str, "out"),
                      s(:send,
                        s(:send,
                          s(:const,
                            s(:const, nil, :File), :WRONLY), :|,
                          s(:const,
                            s(:const, nil, :File), :CREAT)), :|,
                        s(:const,
                          s(:const, nil, :File), :TRUNC)),
                      s(:int, 420)))))),
            s(:send, nil, :assert_equal,
              s(:str, "a"),
              s(:send,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:str, "out")), :chomp)),
            s(:if,
              s(:send, nil, :windows?),
              s(:block,
                s(:send, nil, :open,
                  s(:str, "out"),
                  s(:str, "a")),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:lvar, :f), :write,
                  s(:str, "0\n"))),
              s(:begin,
                s(:send,
                  s(:const, nil, :Process), :wait,
                  s(:send,
                    s(:const, nil, :Process), :spawn,
                    s(:splat,
                      s(:send,
                        s(:const, nil, :ECHO), :[],
                        s(:str, "0"))),
                    s(:hash,
                      s(:pair,
                        s(:const, nil, :STDOUT),
                        s(:array,
                          s(:str, "out"),
                          s(:send,
                            s(:send,
                              s(:const,
                                s(:const, nil, :File), :WRONLY), :|,
                              s(:const,
                                s(:const, nil, :File), :CREAT)), :|,
                            s(:const,
                              s(:const, nil, :File), :APPEND)),
                          s(:int, 420)))))),
                s(:send, nil, :assert_equal,
                  s(:str, "a\n0\n"),
                  s(:send,
                    s(:const, nil, :File), :read,
                    s(:str, "out"))))),
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:send,
                s(:const, nil, :Process), :spawn,
                s(:splat,
                  s(:const, nil, :SORT)),
                s(:hash,
                  s(:pair,
                    s(:const, nil, :STDIN),
                    s(:array,
                      s(:str, "out"),
                      s(:const,
                        s(:const, nil, :File), :RDONLY),
                      s(:int, 420))),
                  s(:pair,
                    s(:const, nil, :STDOUT),
                    s(:array,
                      s(:str, "out2"),
                      s(:send,
                        s(:send,
                          s(:const,
                            s(:const, nil, :File), :WRONLY), :|,
                          s(:const,
                            s(:const, nil, :File), :CREAT)), :|,
                        s(:const,
                          s(:const, nil, :File), :TRUNC)),
                      s(:int, 420)))))),
            s(:send, nil, :assert_equal,
              s(:str, "0\na\n"),
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "out2"))),
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:send,
                s(:const, nil, :Process), :spawn,
                s(:splat,
                  s(:send,
                    s(:const, nil, :ECHO), :[],
                    s(:str, "b"))),
                s(:hash,
                  s(:pair,
                    s(:array,
                      s(:const, nil, :STDOUT),
                      s(:const, nil, :STDERR)),
                    s(:array,
                      s(:str, "out"),
                      s(:send,
                        s(:send,
                          s(:const,
                            s(:const, nil, :File), :WRONLY), :|,
                          s(:const,
                            s(:const, nil, :File), :CREAT)), :|,
                        s(:const,
                          s(:const, nil, :File), :TRUNC)),
                      s(:int, 420)))))),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:str, "out")), :chomp)),
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:send,
                s(:const, nil, :Process), :spawn,
                s(:splat,
                  s(:send,
                    s(:const, nil, :ECHO), :[],
                    s(:str, "c"))),
                s(:hash,
                  s(:pair,
                    s(:const, nil, :STDERR),
                    s(:const, nil, :STDOUT)),
                  s(:pair,
                    s(:const, nil, :STDOUT),
                    s(:array,
                      s(:str, "out"),
                      s(:send,
                        s(:send,
                          s(:const,
                            s(:const, nil, :File), :WRONLY), :|,
                          s(:const,
                            s(:const, nil, :File), :CREAT)), :|,
                        s(:const,
                          s(:const, nil, :File), :TRUNC)),
                      s(:int, 420)))))),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:str, "out")), :chomp)),
            s(:block,
              s(:send,
                s(:const, nil, :File), :open,
                s(:str, "out"),
                s(:str, "w")),
              s(:args,
                s(:arg, :f)),
              s(:begin,
                s(:send,
                  s(:const, nil, :Process), :wait,
                  s(:send,
                    s(:const, nil, :Process), :spawn,
                    s(:splat,
                      s(:send,
                        s(:const, nil, :ECHO), :[],
                        s(:str, "d"))),
                    s(:hash,
                      s(:pair,
                        s(:const, nil, :STDOUT),
                        s(:lvar, :f))))),
                s(:send, nil, :assert_equal,
                  s(:str, "d"),
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :read,
                      s(:str, "out")), :chomp)))),
            s(:lvasgn, :opts,
              s(:hash,
                s(:pair,
                  s(:const, nil, :STDOUT),
                  s(:array,
                    s(:str, "out"),
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :File), :WRONLY), :|,
                        s(:const,
                          s(:const, nil, :File), :CREAT)), :|,
                      s(:const,
                        s(:const, nil, :File), :TRUNC)),
                    s(:int, 420))))),
            s(:if,
              s(:send, nil, :windows?), nil,
              s(:send,
                s(:lvar, :opts), :merge,
                s(:hash,
                  s(:pair,
                    s(:int, 3),
                    s(:const, nil, :STDOUT)),
                  s(:pair,
                    s(:int, 4),
                    s(:const, nil, :STDOUT)),
                  s(:pair,
                    s(:int, 5),
                    s(:const, nil, :STDOUT)),
                  s(:pair,
                    s(:int, 6),
                    s(:const, nil, :STDOUT)),
                  s(:pair,
                    s(:int, 7),
                    s(:const, nil, :STDOUT))))),
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:send,
                s(:const, nil, :Process), :spawn,
                s(:splat,
                  s(:send,
                    s(:const, nil, :ECHO), :[],
                    s(:str, "e"))),
                s(:lvar, :opts))),
            s(:send, nil, :assert_equal,
              s(:str, "e"),
              s(:send,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:str, "out")), :chomp)),
            s(:lvasgn, :opts,
              s(:hash,
                s(:pair,
                  s(:const, nil, :STDOUT),
                  s(:array,
                    s(:str, "out"),
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :File), :WRONLY), :|,
                        s(:const,
                          s(:const, nil, :File), :CREAT)), :|,
                      s(:const,
                        s(:const, nil, :File), :TRUNC)),
                    s(:int, 420))))),
            s(:if,
              s(:send, nil, :windows?), nil,
              s(:send,
                s(:lvar, :opts), :merge,
                s(:hash,
                  s(:pair,
                    s(:int, 3),
                    s(:int, 0)),
                  s(:pair,
                    s(:int, 4),
                    s(:sym, :in)),
                  s(:pair,
                    s(:int, 5),
                    s(:const, nil, :STDIN)),
                  s(:pair,
                    s(:int, 6),
                    s(:int, 1)),
                  s(:pair,
                    s(:int, 7),
                    s(:sym, :out)),
                  s(:pair,
                    s(:int, 8),
                    s(:const, nil, :STDOUT)),
                  s(:pair,
                    s(:int, 9),
                    s(:int, 2)),
                  s(:pair,
                    s(:int, 10),
                    s(:sym, :err)),
                  s(:pair,
                    s(:int, 11),
                    s(:const, nil, :STDERR))))),
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:send,
                s(:const, nil, :Process), :spawn,
                s(:splat,
                  s(:send,
                    s(:const, nil, :ECHO), :[],
                    s(:str, "ee"))),
                s(:lvar, :opts))),
            s(:send, nil, :assert_equal,
              s(:str, "ee"),
              s(:send,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:str, "out")), :chomp)),
            s(:if,
              s(:send, nil, :windows?), nil,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:str, "out"),
                  s(:str, "w")),
                s(:args,
                  s(:arg, :f)),
                s(:begin,
                  s(:lvasgn, :h,
                    s(:hash,
                      s(:pair,
                        s(:const, nil, :STDOUT),
                        s(:lvar, :f)),
                      s(:pair,
                        s(:lvar, :f),
                        s(:const, nil, :STDOUT)))),
                  s(:block,
                    s(:send,
                      s(:int, 3), :upto,
                      s(:int, 30)),
                    s(:args,
                      s(:arg, :i)),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :f), :fileno), :!=,
                        s(:lvar, :i)),
                      s(:send,
                        s(:lvar, :h), :[]=,
                        s(:lvar, :i),
                        s(:const, nil, :STDOUT)), nil)),
                  s(:send,
                    s(:const, nil, :Process), :wait,
                    s(:send,
                      s(:const, nil, :Process), :spawn,
                      s(:splat,
                        s(:send,
                          s(:const, nil, :ECHO), :[],
                          s(:str, "f"))),
                      s(:lvar, :h))),
                  s(:send, nil, :assert_equal,
                    s(:str, "f"),
                    s(:send,
                      s(:send,
                        s(:const, nil, :File), :read,
                        s(:str, "out")), :chomp))))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:send,
                  s(:const, nil, :Process), :spawn,
                  s(:splat,
                    s(:send,
                      s(:const, nil, :ECHO), :[],
                      s(:str, "f"))),
                  s(:hash,
                    s(:pair,
                      s(:int, 1),
                      s(:const, nil, :Process)))))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:send,
                  s(:const, nil, :Process), :spawn,
                  s(:splat,
                    s(:send,
                      s(:const, nil, :ECHO), :[],
                      s(:str, "f"))),
                  s(:hash,
                    s(:pair,
                      s(:array,
                        s(:const, nil, :Process)),
                      s(:int, 1)))))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:send,
                  s(:const, nil, :Process), :spawn,
                  s(:splat,
                    s(:send,
                      s(:const, nil, :ECHO), :[],
                      s(:str, "f"))),
                  s(:hash,
                    s(:pair,
                      s(:array,
                        s(:int, 1),
                        s(:const, nil, :STDOUT)),
                      s(:int, 2)))))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:send,
                  s(:const, nil, :Process), :spawn,
                  s(:splat,
                    s(:send,
                      s(:const, nil, :ECHO), :[],
                      s(:str, "f"))),
                  s(:hash,
                    s(:pair,
                      s(:int, -1),
                      s(:int, 2)))))),
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:send,
                s(:const, nil, :Process), :spawn,
                s(:splat,
                  s(:send,
                    s(:const, nil, :ECHO), :[],
                    s(:str, "hhh\nggg\n"))),
                s(:hash,
                  s(:pair,
                    s(:const, nil, :STDOUT),
                    s(:str, "out"))))),
            s(:send, nil, :assert_equal,
              s(:str, "hhh\nggg\n"),
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "out"))),
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:send,
                s(:const, nil, :Process), :spawn,
                s(:splat,
                  s(:const, nil, :SORT)),
                s(:hash,
                  s(:pair,
                    s(:const, nil, :STDIN),
                    s(:str, "out")),
                  s(:pair,
                    s(:const, nil, :STDOUT),
                    s(:str, "out2"))))),
            s(:send, nil, :assert_equal,
              s(:str, "ggg\nhhh\n"),
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "out2"))),
            s(:if,
              s(:send, nil, :windows?), nil,
              s(:begin,
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const, nil, :Errno), :ENOENT)),
                  s(:args),
                  s(:send,
                    s(:const, nil, :Process), :wait,
                    s(:send,
                      s(:const, nil, :Process), :spawn,
                      s(:str, "non-existing-command"),
                      s(:hash,
                        s(:pair,
                          s(:send,
                            s(:begin,
                              s(:irange,
                                s(:int, 3),
                                s(:int, 60))), :to_a),
                          s(:array,
                            s(:str, "err"),
                            s(:send,
                              s(:const,
                                s(:const, nil, :File), :WRONLY), :|,
                              s(:const,
                                s(:const, nil, :File), :CREAT)))))))),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:send,
                    s(:const, nil, :File), :read,
                    s(:str, "err"))))),
            s(:send, nil, :system,
              s(:splat,
                s(:send,
                  s(:const, nil, :ECHO), :[],
                  s(:str, "bb\naa\n"))),
              s(:hash,
                s(:pair,
                  s(:const, nil, :STDOUT),
                  s(:array,
                    s(:str, "out"),
                    s(:str, "w"))))),
            s(:send, nil, :assert_equal,
              s(:str, "bb\naa\n"),
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "out"))),
            s(:send, nil, :system,
              s(:splat,
                s(:const, nil, :SORT)),
              s(:hash,
                s(:pair,
                  s(:const, nil, :STDIN),
                  s(:array,
                    s(:str, "out"))),
                s(:pair,
                  s(:const, nil, :STDOUT),
                  s(:str, "out2")))),
            s(:send, nil, :assert_equal,
              s(:str, "aa\nbb\n"),
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "out2")))))),
      s(:if,
        s(:send, nil, :windows?), nil,
        s(:def, :test_execopts_redirect_open_order_normal,
          s(:args),
          s(:begin,
            s(:lvasgn, :minfd,
              s(:int, 3)),
            s(:lvasgn, :maxfd,
              s(:int, 20)),
            s(:block,
              s(:send, nil, :with_tmpchdir),
              s(:args,
                s(:arg, :d)),
              s(:begin,
                s(:lvasgn, :opts,
                  s(:hash)),
                s(:block,
                  s(:send,
                    s(:lvar, :minfd), :upto,
                    s(:lvar, :maxfd)),
                  s(:args,
                    s(:arg, :fd)),
                  s(:send,
                    s(:lvar, :opts), :[]=,
                    s(:lvar, :fd),
                    s(:array,
                      s(:dstr,
                        s(:str, "out"),
                        s(:begin,
                          s(:lvar, :fd))),
                      s(:str, "w")))),
                s(:send, nil, :system,
                  s(:const, nil, :RUBY),
                  s(:str, "-e"),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :minfd)),
                    s(:str, ".upto("),
                    s(:begin,
                      s(:lvar, :maxfd)),
                    s(:str, ") {|fd| IO.new(fd).print fd.to_s }")),
                  s(:lvar, :opts)),
                s(:block,
                  s(:send,
                    s(:lvar, :minfd), :upto,
                    s(:lvar, :maxfd)),
                  s(:args,
                    s(:arg, :fd)),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:lvar, :fd), :to_s),
                    s(:send,
                      s(:const, nil, :File), :read,
                      s(:dstr,
                        s(:str, "out"),
                        s(:begin,
                          s(:lvar, :fd))))))))))),
      s(:if,
        s(:send, nil, :windows?), nil,
        s(:def, :test_execopts_redirect_open_order_reverse,
          s(:args),
          s(:begin,
            s(:lvasgn, :minfd,
              s(:int, 3)),
            s(:lvasgn, :maxfd,
              s(:int, 20)),
            s(:block,
              s(:send, nil, :with_tmpchdir),
              s(:args,
                s(:arg, :d)),
              s(:begin,
                s(:lvasgn, :opts,
                  s(:hash)),
                s(:block,
                  s(:send,
                    s(:lvar, :maxfd), :downto,
                    s(:lvar, :minfd)),
                  s(:args,
                    s(:arg, :fd)),
                  s(:send,
                    s(:lvar, :opts), :[]=,
                    s(:lvar, :fd),
                    s(:array,
                      s(:dstr,
                        s(:str, "out"),
                        s(:begin,
                          s(:lvar, :fd))),
                      s(:str, "w")))),
                s(:send, nil, :system,
                  s(:const, nil, :RUBY),
                  s(:str, "-e"),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :minfd)),
                    s(:str, ".upto("),
                    s(:begin,
                      s(:lvar, :maxfd)),
                    s(:str, ") {|fd| IO.new(fd).print fd.to_s }")),
                  s(:lvar, :opts)),
                s(:block,
                  s(:send,
                    s(:lvar, :minfd), :upto,
                    s(:lvar, :maxfd)),
                  s(:args,
                    s(:arg, :fd)),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:lvar, :fd), :to_s),
                    s(:send,
                      s(:const, nil, :File), :read,
                      s(:dstr,
                        s(:str, "out"),
                        s(:begin,
                          s(:lvar, :fd))))))))))),
      s(:if,
        s(:send, nil, :windows?), nil,
        s(:def, :test_execopts_redirect_open_fifo,
          s(:args),
          s(:block,
            s(:send, nil, :with_tmpchdir),
            s(:args,
              s(:arg, :d)),
            s(:begin,
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:const, nil, :File), :mkfifo,
                    s(:str, "fifo")),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :NotImplementedError)), nil,
                    s(:return)), nil)),
              s(:send, nil, :assert,
                s(:send,
                  s(:const, nil, :FileTest), :pipe?,
                  s(:str, "fifo")),
                s(:str, "should be pipe")),
              s(:lvasgn, :t1,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:send, nil, :system,
                    s(:splat,
                      s(:send,
                        s(:const, nil, :ECHO), :[],
                        s(:str, "output to fifo"))),
                    s(:hash,
                      s(:pair,
                        s(:sym, :out),
                        s(:str, "fifo")))))),
              s(:lvasgn, :t2,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:block,
                    s(:send,
                      s(:const, nil, :IO), :popen,
                      s(:array,
                        s(:splat,
                          s(:const, nil, :CAT)),
                        s(:hash,
                          s(:pair,
                            s(:sym, :in),
                            s(:str, "fifo"))))),
                    s(:args,
                      s(:arg, :f)),
                    s(:send,
                      s(:lvar, :f), :read)))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :_),
                  s(:lvasgn, :v2)),
                s(:send, nil, :assert_join_threads,
                  s(:array,
                    s(:lvar, :t1),
                    s(:lvar, :t2)))),
              s(:send, nil, :assert_equal,
                s(:str, "output to fifo\n"),
                s(:lvar, :v2)))))),
      s(:if,
        s(:send, nil, :windows?), nil,
        s(:def, :test_execopts_redirect_open_fifo_interrupt_raise,
          s(:args),
          s(:block,
            s(:send, nil, :with_tmpchdir),
            s(:args,
              s(:arg, :d)),
            s(:begin,
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:const, nil, :File), :mkfifo,
                    s(:str, "fifo")),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :NotImplementedError)), nil,
                    s(:return)), nil)),
              s(:block,
                s(:send,
                  s(:const, nil, :IO), :popen,
                  s(:array,
                    s(:const, nil, :RUBY),
                    s(:str, "-e"),
                    s(:dstr,
                      s(:str, "        class E < StandardError; end\n"),
                      s(:str, "        trap(:USR1) { raise E }\n"),
                      s(:str, "        begin\n"),
                      s(:str, "          system(\"cat\", :in => \"fifo\")\n"),
                      s(:str, "        rescue E\n"),
                      s(:str, "          puts \"ok\"\n"),
                      s(:str, "        end\n")))),
                s(:args,
                  s(:arg, :io)),
                s(:begin,
                  s(:send, nil, :sleep,
                    s(:float, 0.5)),
                  s(:send,
                    s(:const, nil, :Process), :kill,
                    s(:sym, :USR1),
                    s(:send,
                      s(:lvar, :io), :pid)),
                  s(:send, nil, :assert_equal,
                    s(:str, "ok\n"),
                    s(:send,
                      s(:lvar, :io), :read)))))))),
      s(:if,
        s(:send, nil, :windows?), nil,
        s(:def, :test_execopts_redirect_open_fifo_interrupt_print,
          s(:args),
          s(:block,
            s(:send, nil, :with_tmpchdir),
            s(:args,
              s(:arg, :d)),
            s(:begin,
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:const, nil, :File), :mkfifo,
                    s(:str, "fifo")),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :NotImplementedError)), nil,
                    s(:return)), nil)),
              s(:block,
                s(:send,
                  s(:const, nil, :IO), :popen,
                  s(:array,
                    s(:const, nil, :RUBY),
                    s(:str, "-e"),
                    s(:dstr,
                      s(:str, "        trap(:USR1) { print \"trap\\n\" }\n"),
                      s(:str, "        system(\"cat\", :in => \"fifo\")\n")))),
                s(:args,
                  s(:arg, :io)),
                s(:begin,
                  s(:send, nil, :sleep,
                    s(:int, 1)),
                  s(:send,
                    s(:const, nil, :Process), :kill,
                    s(:sym, :USR1),
                    s(:send,
                      s(:lvar, :io), :pid)),
                  s(:send, nil, :sleep,
                    s(:int, 1)),
                  s(:send,
                    s(:const, nil, :File), :write,
                    s(:str, "fifo"),
                    s(:str, "ok\n")),
                  s(:send, nil, :assert_equal,
                    s(:str, "trap\nok\n"),
                    s(:send,
                      s(:lvar, :io), :read)))))))),
      s(:def, :test_execopts_redirect_pipe,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :with_pipe),
            s(:args,
              s(:arg, :r1),
              s(:arg, :w1)),
            s(:block,
              s(:send, nil, :with_pipe),
              s(:args,
                s(:arg, :r2),
                s(:arg, :w2)),
              s(:begin,
                s(:lvasgn, :opts,
                  s(:hash,
                    s(:pair,
                      s(:const, nil, :STDIN),
                      s(:lvar, :r1)),
                    s(:pair,
                      s(:const, nil, :STDOUT),
                      s(:lvar, :w2)))),
                s(:if,
                  s(:send, nil, :windows?), nil,
                  s(:send,
                    s(:lvar, :opts), :merge,
                    s(:hash,
                      s(:pair,
                        s(:lvar, :w1),
                        s(:sym, :close)),
                      s(:pair,
                        s(:lvar, :r2),
                        s(:sym, :close))))),
                s(:lvasgn, :pid,
                  s(:send, nil, :spawn,
                    s(:splat,
                      s(:const, nil, :SORT)),
                    s(:lvar, :opts))),
                s(:send,
                  s(:lvar, :r1), :close),
                s(:send,
                  s(:lvar, :w2), :close),
                s(:send,
                  s(:lvar, :w1), :puts,
                  s(:str, "c")),
                s(:send,
                  s(:lvar, :w1), :puts,
                  s(:str, "a")),
                s(:send,
                  s(:lvar, :w1), :puts,
                  s(:str, "b")),
                s(:send,
                  s(:lvar, :w1), :close),
                s(:send, nil, :assert_equal,
                  s(:str, "a\nb\nc\n"),
                  s(:send,
                    s(:lvar, :r2), :read)),
                s(:send,
                  s(:lvar, :r2), :close),
                s(:send,
                  s(:const, nil, :Process), :wait,
                  s(:lvar, :pid))))),
          s(:if,
            s(:send, nil, :windows?), nil,
            s(:begin,
              s(:block,
                s(:send, nil, :with_pipes,
                  s(:int, 5)),
                s(:args,
                  s(:arg, :pipes)),
                s(:begin,
                  s(:lvasgn, :ios,
                    s(:send,
                      s(:lvar, :pipes), :flatten)),
                  s(:lvasgn, :h,
                    s(:hash)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :ios), :length), :times),
                    s(:args,
                      s(:arg, :i)),
                    s(:send,
                      s(:lvar, :h), :[]=,
                      s(:send,
                        s(:lvar, :ios), :[],
                        s(:lvar, :i)),
                      s(:send,
                        s(:lvar, :ios), :[],
                        s(:send,
                          s(:begin,
                            s(:send,
                              s(:lvar, :i), :-,
                              s(:int, 1))), :%,
                          s(:send,
                            s(:lvar, :ios), :length))))),
                  s(:lvasgn, :h2,
                    s(:send,
                      s(:lvar, :h), :invert)),
                  s(:lvasgn, :_rios,
                    s(:block,
                      s(:send,
                        s(:lvar, :pipes), :map),
                      s(:args,
                        s(:arg, :r),
                        s(:arg, :w)),
                      s(:lvar, :r))),
                  s(:lvasgn, :wios,
                    s(:block,
                      s(:send,
                        s(:lvar, :pipes), :map),
                      s(:args,
                        s(:arg, :r),
                        s(:arg, :w)),
                      s(:lvar, :w))),
                  s(:lvasgn, :child_wfds,
                    s(:block,
                      s(:send,
                        s(:lvar, :wios), :map),
                      s(:args,
                        s(:arg, :w)),
                      s(:send,
                        s(:send,
                          s(:lvar, :h2), :[],
                          s(:lvar, :w)), :fileno))),
                  s(:lvasgn, :pid,
                    s(:send, nil, :spawn,
                      s(:const, nil, :RUBY),
                      s(:str, "-e"),
                      s(:dstr,
                        s(:str, "["),
                        s(:begin,
                          s(:send,
                            s(:lvar, :child_wfds), :join,
                            s(:str, ","))),
                        s(:str, "].each {|fd| IO.new(fd, 'w').puts fd }")),
                      s(:lvar, :h))),
                  s(:block,
                    s(:send,
                      s(:lvar, :pipes), :each),
                    s(:args,
                      s(:arg, :r),
                      s(:arg, :w)),
                    s(:send, nil, :assert_equal,
                      s(:dstr,
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:lvar, :h2), :[],
                              s(:lvar, :w)), :fileno)),
                        s(:str, "\n")),
                      s(:send,
                        s(:lvar, :r), :gets))),
                  s(:send,
                    s(:const, nil, :Process), :wait,
                    s(:lvar, :pid)))),
              s(:block,
                s(:send, nil, :with_pipes,
                  s(:int, 5)),
                s(:args,
                  s(:arg, :pipes)),
                s(:begin,
                  s(:lvasgn, :ios,
                    s(:send,
                      s(:lvar, :pipes), :flatten)),
                  s(:lvasgn, :h,
                    s(:hash)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :ios), :length), :times),
                    s(:args,
                      s(:arg, :i)),
                    s(:send,
                      s(:lvar, :h), :[]=,
                      s(:send,
                        s(:lvar, :ios), :[],
                        s(:lvar, :i)),
                      s(:send,
                        s(:lvar, :ios), :[],
                        s(:send,
                          s(:begin,
                            s(:send,
                              s(:lvar, :i), :+,
                              s(:int, 1))), :%,
                          s(:send,
                            s(:lvar, :ios), :length))))),
                  s(:lvasgn, :h2,
                    s(:send,
                      s(:lvar, :h), :invert)),
                  s(:lvasgn, :_rios,
                    s(:block,
                      s(:send,
                        s(:lvar, :pipes), :map),
                      s(:args,
                        s(:arg, :r),
                        s(:arg, :w)),
                      s(:lvar, :r))),
                  s(:lvasgn, :wios,
                    s(:block,
                      s(:send,
                        s(:lvar, :pipes), :map),
                      s(:args,
                        s(:arg, :r),
                        s(:arg, :w)),
                      s(:lvar, :w))),
                  s(:lvasgn, :child_wfds,
                    s(:block,
                      s(:send,
                        s(:lvar, :wios), :map),
                      s(:args,
                        s(:arg, :w)),
                      s(:send,
                        s(:send,
                          s(:lvar, :h2), :[],
                          s(:lvar, :w)), :fileno))),
                  s(:lvasgn, :pid,
                    s(:send, nil, :spawn,
                      s(:const, nil, :RUBY),
                      s(:str, "-e"),
                      s(:dstr,
                        s(:str, "["),
                        s(:begin,
                          s(:send,
                            s(:lvar, :child_wfds), :join,
                            s(:str, ","))),
                        s(:str, "].each {|fd| IO.new(fd, 'w').puts fd }")),
                      s(:lvar, :h))),
                  s(:block,
                    s(:send,
                      s(:lvar, :pipes), :each),
                    s(:args,
                      s(:arg, :r),
                      s(:arg, :w)),
                    s(:send, nil, :assert_equal,
                      s(:dstr,
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:lvar, :h2), :[],
                              s(:lvar, :w)), :fileno)),
                        s(:str, "\n")),
                      s(:send,
                        s(:lvar, :r), :gets))),
                  s(:send,
                    s(:const, nil, :Process), :wait,
                    s(:lvar, :pid)))),
              s(:lvasgn, :closed_fd,
                s(:nil)),
              s(:block,
                s(:send, nil, :with_pipes,
                  s(:int, 5)),
                s(:args,
                  s(:arg, :pipes)),
                s(:begin,
                  s(:lvasgn, :io,
                    s(:send,
                      s(:send,
                        s(:lvar, :pipes), :last), :last)),
                  s(:lvasgn, :closed_fd,
                    s(:send,
                      s(:lvar, :io), :fileno)))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :Errno), :EBADF)),
                s(:args),
                s(:send,
                  s(:const, nil, :Process), :wait,
                  s(:send, nil, :spawn,
                    s(:splat,
                      s(:const, nil, :TRUECOMMAND)),
                    s(:hash,
                      s(:pair,
                        s(:lvar, :closed_fd),
                        s(:lvar, :closed_fd)))))),
              s(:block,
                s(:send, nil, :with_pipe),
                s(:args,
                  s(:arg, :r),
                  s(:arg, :w)),
                s(:if,
                  s(:send,
                    s(:lvar, :w), :respond_to?,
                    s(:sym, :close_on_exec=)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :w), :close_on_exec=,
                      s(:true)),
                    s(:lvasgn, :pid,
                      s(:send, nil, :spawn,
                        s(:const, nil, :RUBY),
                        s(:str, "-e"),
                        s(:dstr,
                          s(:str, "IO.new("),
                          s(:begin,
                            s(:send,
                              s(:lvar, :w), :fileno)),
                          s(:str, ", 'w').print 'a'")),
                        s(:hash,
                          s(:pair,
                            s(:lvar, :w),
                            s(:lvar, :w))))),
                    s(:send,
                      s(:lvar, :w), :close),
                    s(:send, nil, :assert_equal,
                      s(:str, "a"),
                      s(:send,
                        s(:lvar, :r), :read)),
                    s(:send,
                      s(:const, nil, :Process), :wait,
                      s(:lvar, :pid))), nil)))))),
      s(:def, :test_execopts_redirect_symbol,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send, nil, :system,
              s(:splat,
                s(:send,
                  s(:const, nil, :ECHO), :[],
                  s(:str, "funya"))),
              s(:hash,
                s(:pair,
                  s(:sym, :out),
                  s(:str, "out")))),
            s(:send, nil, :assert_equal,
              s(:str, "funya\n"),
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "out"))),
            s(:send, nil, :system,
              s(:const, nil, :RUBY),
              s(:str, "-e"),
              s(:str, "STDOUT.reopen(STDERR); puts \"henya\""),
              s(:hash,
                s(:pair,
                  s(:sym, :err),
                  s(:str, "out")))),
            s(:send, nil, :assert_equal,
              s(:str, "henya\n"),
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "out"))),
            s(:block,
              s(:send,
                s(:const, nil, :IO), :popen,
                s(:array,
                  s(:splat,
                    s(:const, nil, :CAT)),
                  s(:hash,
                    s(:pair,
                      s(:sym, :in),
                      s(:str, "out"))))),
              s(:args,
                s(:arg, :io)),
              s(:send, nil, :assert_equal,
                s(:str, "henya\n"),
                s(:send,
                  s(:lvar, :io), :read)))))),
      s(:def, :test_execopts_redirect_nonascii_path,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9946,
            s(:str, "[ruby-core:63185] [Bug #9946]")),
          s(:block,
            s(:send, nil, :with_tmpchdir),
            s(:args,
              s(:arg, :d)),
            s(:begin,
              s(:lvasgn, :path,
                s(:str, "t-テストö.txt")),
              s(:send, nil, :system,
                s(:splat,
                  s(:send,
                    s(:const, nil, :ECHO), :[],
                    s(:str, "a"))),
                s(:hash,
                  s(:pair,
                    s(:sym, :out),
                    s(:lvar, :path)))),
              s(:send,
                s(:send,
                  s(:send, nil, :assert_file), :for,
                  s(:lvar, :bug9946)), :exist?,
                s(:lvar, :path)),
              s(:send, nil, :assert_equal,
                s(:str, "a\n"),
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:lvar, :path)),
                s(:lvar, :bug9946)))))),
      s(:def, :test_execopts_redirect_to_out_and_err,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:lvasgn, :ret,
              s(:send, nil, :system,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "STDERR.print \"e\"; STDOUT.print \"o\""),
                s(:hash,
                  s(:pair,
                    s(:array,
                      s(:sym, :out),
                      s(:sym, :err)),
                    s(:str, "foo"))))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :ret)),
            s(:send, nil, :assert_equal,
              s(:str, "eo"),
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "foo"))),
            s(:lvasgn, :ret,
              s(:send, nil, :system,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "STDERR.print \"E\"; STDOUT.print \"O\""),
                s(:hash,
                  s(:pair,
                    s(:array,
                      s(:sym, :err),
                      s(:sym, :out)),
                    s(:str, "bar"))))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :ret)),
            s(:send, nil, :assert_equal,
              s(:str, "EO"),
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "bar")))))),
      s(:def, :test_execopts_redirect_dup2_child,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:send, nil, :spawn,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "STDERR.print 'err'; STDOUT.print 'out'"),
                s(:hash,
                  s(:pair,
                    s(:const, nil, :STDOUT),
                    s(:str, "out")),
                  s(:pair,
                    s(:const, nil, :STDERR),
                    s(:array,
                      s(:sym, :child),
                      s(:const, nil, :STDOUT)))))),
            s(:send, nil, :assert_equal,
              s(:str, "errout"),
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "out"))),
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:send, nil, :spawn,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "STDERR.print 'err'; STDOUT.print 'out'"),
                s(:hash,
                  s(:pair,
                    s(:const, nil, :STDERR),
                    s(:str, "out")),
                  s(:pair,
                    s(:const, nil, :STDOUT),
                    s(:array,
                      s(:sym, :child),
                      s(:const, nil, :STDERR)))))),
            s(:send, nil, :assert_equal,
              s(:str, "errout"),
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "out"))),
            s(:if,
              s(:send, nil, :windows?),
              s(:send, nil, :skip,
                s(:str, "inheritance of fd other than stdin,stdout and stderr is not supported")), nil),
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:send, nil, :spawn,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "STDERR.print 'err'; STDOUT.print 'out'"),
                s(:hash,
                  s(:pair,
                    s(:const, nil, :STDOUT),
                    s(:str, "out")),
                  s(:pair,
                    s(:const, nil, :STDERR),
                    s(:array,
                      s(:sym, :child),
                      s(:int, 3))),
                  s(:pair,
                    s(:int, 3),
                    s(:array,
                      s(:sym, :child),
                      s(:int, 4))),
                  s(:pair,
                    s(:int, 4),
                    s(:array,
                      s(:sym, :child),
                      s(:const, nil, :STDOUT)))))),
            s(:send, nil, :assert_equal,
              s(:str, "errout"),
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "out"))),
            s(:block,
              s(:send,
                s(:const, nil, :IO), :popen,
                s(:array,
                  s(:const, nil, :RUBY),
                  s(:str, "-e"),
                  s(:str, "STDERR.print 'err'; STDOUT.print 'out'"),
                  s(:hash,
                    s(:pair,
                      s(:const, nil, :STDERR),
                      s(:array,
                        s(:sym, :child),
                        s(:const, nil, :STDOUT)))))),
              s(:args,
                s(:arg, :io)),
              s(:send, nil, :assert_equal,
                s(:str, "errout"),
                s(:send,
                  s(:lvar, :io), :read))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:send, nil, :spawn,
                  s(:splat,
                    s(:const, nil, :TRUECOMMAND)),
                  s(:hash,
                    s(:pair,
                      s(:const, nil, :STDOUT),
                      s(:array,
                        s(:sym, :child),
                        s(:const, nil, :STDOUT))))))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:send, nil, :spawn,
                  s(:splat,
                    s(:const, nil, :TRUECOMMAND)),
                  s(:hash,
                    s(:pair,
                      s(:int, 3),
                      s(:array,
                        s(:sym, :child),
                        s(:int, 4))),
                    s(:pair,
                      s(:int, 4),
                      s(:array,
                        s(:sym, :child),
                        s(:int, 3))))))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:send, nil, :spawn,
                  s(:splat,
                    s(:const, nil, :TRUECOMMAND)),
                  s(:hash,
                    s(:pair,
                      s(:int, 3),
                      s(:array,
                        s(:sym, :child),
                        s(:int, 4))),
                    s(:pair,
                      s(:int, 4),
                      s(:array,
                        s(:sym, :child),
                        s(:int, 5))),
                    s(:pair,
                      s(:int, 5),
                      s(:array,
                        s(:sym, :child),
                        s(:int, 3))))))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:send, nil, :spawn,
                  s(:splat,
                    s(:const, nil, :TRUECOMMAND)),
                  s(:hash,
                    s(:pair,
                      s(:const, nil, :STDOUT),
                      s(:array,
                        s(:sym, :child),
                        s(:int, 3)))))))))),
      s(:def, :test_execopts_exec,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send, nil, :write_file,
              s(:str, "s"),
              s(:str, "exec \"echo aaa\", STDOUT=>\"foo\"")),
            s(:lvasgn, :pid,
              s(:send, nil, :spawn,
                s(:const, nil, :RUBY),
                s(:str, "s"))),
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:lvar, :pid)),
            s(:send, nil, :assert_equal,
              s(:str, "aaa\n"),
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "foo")))))),
      s(:def, :test_execopts_popen,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:block,
              s(:send,
                s(:const, nil, :IO), :popen,
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :RUBY)),
                  s(:str, " -e 'puts :foo'"))),
              s(:args,
                s(:arg, :io)),
              s(:send, nil, :assert_equal,
                s(:str, "foo\n"),
                s(:send,
                  s(:lvar, :io), :read))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :Errno), :ENOENT)),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :IO), :popen,
                  s(:array,
                    s(:str, "echo bar"))),
                s(:args), nil)),
            s(:block,
              s(:send,
                s(:const, nil, :IO), :popen,
                s(:send,
                  s(:const, nil, :ECHO), :[],
                  s(:str, "baz"))),
              s(:args,
                s(:arg, :io)),
              s(:send, nil, :assert_equal,
                s(:str, "baz\n"),
                s(:send,
                  s(:lvar, :io), :read)))))),
      s(:def, :test_execopts_popen_stdio,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :IO), :popen,
                  s(:array,
                    s(:splat,
                      s(:send,
                        s(:const, nil, :ECHO), :[],
                        s(:str, "qux"))),
                    s(:hash,
                      s(:pair,
                        s(:const, nil, :STDOUT),
                        s(:const, nil, :STDOUT))))),
                s(:args,
                  s(:arg, :io)), nil)),
            s(:block,
              s(:send,
                s(:const, nil, :IO), :popen,
                s(:array,
                  s(:splat,
                    s(:send,
                      s(:const, nil, :ECHO), :[],
                      s(:str, "hoge"))),
                  s(:hash,
                    s(:pair,
                      s(:const, nil, :STDERR),
                      s(:const, nil, :STDOUT))))),
              s(:args,
                s(:arg, :io)),
              s(:send, nil, :assert_equal,
                s(:str, "hoge\n"),
                s(:send,
                  s(:lvar, :io), :read))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :IO), :popen,
                  s(:array,
                    s(:splat,
                      s(:send,
                        s(:const, nil, :ECHO), :[],
                        s(:str, "fuga"))),
                    s(:hash,
                      s(:pair,
                        s(:const, nil, :STDOUT),
                        s(:str, "out"))))),
                s(:args,
                  s(:arg, :io)), nil))))),
      s(:def, :test_execopts_popen_extra_fd,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :windows?),
            s(:send, nil, :skip,
              s(:str, "inheritance of fd other than stdin,stdout and stderr is not supported")), nil),
          s(:block,
            s(:send, nil, :with_tmpchdir),
            s(:args,
              s(:arg, :d)),
            s(:begin,
              s(:block,
                s(:send, nil, :with_pipe),
                s(:args,
                  s(:arg, :r),
                  s(:arg, :w)),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:const, nil, :IO), :popen,
                      s(:array,
                        s(:const, nil, :RUBY),
                        s(:str, "-e"),
                        s(:str, "IO.new(3, \"w\").puts(\"a\"); puts \"b\""),
                        s(:hash,
                          s(:pair,
                            s(:int, 3),
                            s(:lvar, :w))))),
                    s(:args,
                      s(:arg, :io)),
                    s(:send, nil, :assert_equal,
                      s(:str, "b\n"),
                      s(:send,
                        s(:lvar, :io), :read))),
                  s(:send,
                    s(:lvar, :w), :close),
                  s(:send, nil, :assert_equal,
                    s(:str, "a\n"),
                    s(:send,
                      s(:lvar, :r), :read)))),
              s(:block,
                s(:send,
                  s(:const, nil, :IO), :popen,
                  s(:array,
                    s(:const, nil, :RUBY),
                    s(:str, "-e"),
                    s(:str, "IO.new(9, 'w').puts(:b)"),
                    s(:hash,
                      s(:pair,
                        s(:int, 9),
                        s(:array,
                          s(:str, "out2"),
                          s(:send,
                            s(:send,
                              s(:const,
                                s(:const, nil, :File), :WRONLY), :|,
                              s(:const,
                                s(:const, nil, :File), :CREAT)), :|,
                            s(:const,
                              s(:const, nil, :File), :TRUNC))))))),
                s(:args,
                  s(:arg, :io)),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:send,
                    s(:lvar, :io), :read))),
              s(:send, nil, :assert_equal,
                s(:str, "b\n"),
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:str, "out2"))))))),
      s(:def, :test_popen_fork,
        s(:args),
        s(:rescue,
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:str, "-")),
            s(:args,
              s(:arg, :io)),
            s(:if,
              s(:send,
                s(:lvar, :io), :!),
              s(:send, nil, :puts,
                s(:str, "fooo")),
              s(:send, nil, :assert_equal,
                s(:str, "fooo\n"),
                s(:send,
                  s(:lvar, :io), :read)))),
          s(:resbody,
            s(:array,
              s(:const, nil, :NotImplementedError)), nil, nil), nil)),
      s(:def, :test_fd_inheritance,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :windows?),
            s(:send, nil, :skip,
              s(:str, "inheritance of fd other than stdin,stdout and stderr is not supported")), nil),
          s(:block,
            s(:send, nil, :with_pipe),
            s(:args,
              s(:arg, :r),
              s(:arg, :w)),
            s(:begin,
              s(:send, nil, :system,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "IO.new(ARGV[0].to_i, \"w\").puts(:ba)"),
                s(:send,
                  s(:send,
                    s(:lvar, :w), :fileno), :to_s),
                s(:hash,
                  s(:pair,
                    s(:lvar, :w),
                    s(:lvar, :w)))),
              s(:send,
                s(:lvar, :w), :close),
              s(:send, nil, :assert_equal,
                s(:str, "ba\n"),
                s(:send,
                  s(:lvar, :r), :read)))),
          s(:block,
            s(:send, nil, :with_pipe),
            s(:args,
              s(:arg, :r),
              s(:arg, :w)),
            s(:begin,
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:send, nil, :spawn,
                  s(:const, nil, :RUBY),
                  s(:str, "-e"),
                  s(:str, "IO.new(ARGV[0].to_i, \"w\").puts(\"bi\") rescue nil"),
                  s(:send,
                    s(:send,
                      s(:lvar, :w), :fileno), :to_s))),
              s(:send,
                s(:lvar, :w), :close),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :r), :read)))),
          s(:block,
            s(:send, nil, :with_pipe),
            s(:args,
              s(:arg, :r),
              s(:arg, :w)),
            s(:block,
              s(:send, nil, :with_tmpchdir),
              s(:args,
                s(:arg, :d)),
              s(:begin,
                s(:send, nil, :write_file,
                  s(:str, "s"),
                  s(:dstr,
                    s(:str, "\t  exec("),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :RUBY), :dump)),
                    s(:str, ", '-e',\n"),
                    s(:str, "\t       'IO.new(ARGV[0].to_i, \"w\").puts(\"bu\") rescue nil',\n"),
                    s(:str, "\t       "),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :w), :fileno), :to_s), :dump)),
                    s(:str, ", :close_others=>false)\n"))),
                s(:send,
                  s(:lvar, :w), :close_on_exec=,
                  s(:false)),
                s(:send,
                  s(:const, nil, :Process), :wait,
                  s(:send, nil, :spawn,
                    s(:const, nil, :RUBY),
                    s(:str, "s"),
                    s(:hash,
                      s(:pair,
                        s(:sym, :close_others),
                        s(:false))))),
                s(:send,
                  s(:lvar, :w), :close),
                s(:send, nil, :assert_equal,
                  s(:str, "bu\n"),
                  s(:send,
                    s(:lvar, :r), :read))))),
          s(:block,
            s(:send, nil, :with_pipe),
            s(:args,
              s(:arg, :r),
              s(:arg, :w)),
            s(:begin,
              s(:lvasgn, :io,
                s(:send,
                  s(:const, nil, :IO), :popen,
                  s(:array,
                    s(:const, nil, :RUBY),
                    s(:str, "-e"),
                    s(:dstr,
                      s(:str, "STDERR.reopen(STDOUT); IO.new("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :w), :fileno)),
                      s(:str, ", 'w').puts('me')"))))),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:send,
                      s(:lvar, :w), :close),
                    s(:lvasgn, :errmsg,
                      s(:send,
                        s(:lvar, :io), :read)),
                    s(:send, nil, :assert_equal,
                      s(:str, ""),
                      s(:send,
                        s(:lvar, :r), :read)),
                    s(:send, nil, :assert_not_equal,
                      s(:str, ""),
                      s(:lvar, :errmsg))),
                  s(:send,
                    s(:lvar, :io), :close))))),
          s(:block,
            s(:send, nil, :with_pipe),
            s(:args,
              s(:arg, :r),
              s(:arg, :w)),
            s(:begin,
              s(:lvasgn, :errmsg,
                s(:xstr,
                  s(:begin,
                    s(:const, nil, :RUBY)),
                  s(:str, " -e \"STDERR.reopen(STDOUT); IO.new("),
                  s(:begin,
                    s(:send,
                      s(:lvar, :w), :fileno)),
                  s(:str, ", 'w').puts(123)\""))),
              s(:send,
                s(:lvar, :w), :close),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :r), :read)),
              s(:send, nil, :assert_not_equal,
                s(:str, ""),
                s(:lvar, :errmsg)))))),
      s(:def, :test_execopts_close_others,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :windows?),
            s(:send, nil, :skip,
              s(:str, "inheritance of fd other than stdin,stdout and stderr is not supported")), nil),
          s(:block,
            s(:send, nil, :with_tmpchdir),
            s(:args,
              s(:arg, :d)),
            s(:begin,
              s(:block,
                s(:send, nil, :with_pipe),
                s(:args,
                  s(:arg, :r),
                  s(:arg, :w)),
                s(:begin,
                  s(:send, nil, :system,
                    s(:const, nil, :RUBY),
                    s(:str, "-e"),
                    s(:str, "STDERR.reopen(\"err\", \"w\"); IO.new(ARGV[0].to_i, \"w\").puts(\"ma\")"),
                    s(:send,
                      s(:send,
                        s(:lvar, :w), :fileno), :to_s),
                    s(:hash,
                      s(:pair,
                        s(:sym, :close_others),
                        s(:true)))),
                  s(:send,
                    s(:lvar, :w), :close),
                  s(:send, nil, :assert_equal,
                    s(:str, ""),
                    s(:send,
                      s(:lvar, :r), :read)),
                  s(:send, nil, :assert_not_equal,
                    s(:str, ""),
                    s(:send,
                      s(:const, nil, :File), :read,
                      s(:str, "err"))),
                  s(:send,
                    s(:const, nil, :File), :unlink,
                    s(:str, "err")))),
              s(:block,
                s(:send, nil, :with_pipe),
                s(:args,
                  s(:arg, :r),
                  s(:arg, :w)),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Process), :wait,
                    s(:send, nil, :spawn,
                      s(:const, nil, :RUBY),
                      s(:str, "-e"),
                      s(:str, "STDERR.reopen(\"err\", \"w\"); IO.new(ARGV[0].to_i, \"w\").puts(\"mi\")"),
                      s(:send,
                        s(:send,
                          s(:lvar, :w), :fileno), :to_s),
                      s(:hash,
                        s(:pair,
                          s(:sym, :close_others),
                          s(:true))))),
                  s(:send,
                    s(:lvar, :w), :close),
                  s(:send, nil, :assert_equal,
                    s(:str, ""),
                    s(:send,
                      s(:lvar, :r), :read)),
                  s(:send, nil, :assert_not_equal,
                    s(:str, ""),
                    s(:send,
                      s(:const, nil, :File), :read,
                      s(:str, "err"))),
                  s(:send,
                    s(:const, nil, :File), :unlink,
                    s(:str, "err")))),
              s(:block,
                s(:send, nil, :with_pipe),
                s(:args,
                  s(:arg, :r),
                  s(:arg, :w)),
                s(:begin,
                  s(:send,
                    s(:lvar, :w), :close_on_exec=,
                    s(:false)),
                  s(:send,
                    s(:const, nil, :Process), :wait,
                    s(:send, nil, :spawn,
                      s(:const, nil, :RUBY),
                      s(:str, "-e"),
                      s(:str, "IO.new(ARGV[0].to_i, \"w\").puts(\"bi\")"),
                      s(:send,
                        s(:send,
                          s(:lvar, :w), :fileno), :to_s),
                      s(:hash,
                        s(:pair,
                          s(:sym, :close_others),
                          s(:false))))),
                  s(:send,
                    s(:lvar, :w), :close),
                  s(:send, nil, :assert_equal,
                    s(:str, "bi\n"),
                    s(:send,
                      s(:lvar, :r), :read)))),
              s(:block,
                s(:send, nil, :with_pipe),
                s(:args,
                  s(:arg, :r),
                  s(:arg, :w)),
                s(:begin,
                  s(:send, nil, :write_file,
                    s(:str, "s"),
                    s(:dstr,
                      s(:str, "\t  exec("),
                      s(:begin,
                        s(:send,
                          s(:const, nil, :RUBY), :dump)),
                      s(:str, ", '-e',\n"),
                      s(:str, "\t       'STDERR.reopen(\"err\", \"w\"); IO.new(ARGV[0].to_i, \"w\").puts(\"mu\")',\n"),
                      s(:str, "\t       "),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :w), :fileno), :to_s), :dump)),
                      s(:str, ",\n"),
                      s(:str, "\t       :close_others=>true)\n"))),
                  s(:send,
                    s(:const, nil, :Process), :wait,
                    s(:send, nil, :spawn,
                      s(:const, nil, :RUBY),
                      s(:str, "s"),
                      s(:hash,
                        s(:pair,
                          s(:sym, :close_others),
                          s(:false))))),
                  s(:send,
                    s(:lvar, :w), :close),
                  s(:send, nil, :assert_equal,
                    s(:str, ""),
                    s(:send,
                      s(:lvar, :r), :read)),
                  s(:send, nil, :assert_not_equal,
                    s(:str, ""),
                    s(:send,
                      s(:const, nil, :File), :read,
                      s(:str, "err"))),
                  s(:send,
                    s(:const, nil, :File), :unlink,
                    s(:str, "err")))),
              s(:block,
                s(:send, nil, :with_pipe),
                s(:args,
                  s(:arg, :r),
                  s(:arg, :w)),
                s(:begin,
                  s(:lvasgn, :io,
                    s(:send,
                      s(:const, nil, :IO), :popen,
                      s(:array,
                        s(:const, nil, :RUBY),
                        s(:str, "-e"),
                        s(:dstr,
                          s(:str, "STDERR.reopen(STDOUT); IO.new("),
                          s(:begin,
                            s(:send,
                              s(:lvar, :w), :fileno)),
                          s(:str, ", 'w').puts('me')")),
                        s(:hash,
                          s(:pair,
                            s(:sym, :close_others),
                            s(:true)))))),
                  s(:kwbegin,
                    s(:ensure,
                      s(:begin,
                        s(:send,
                          s(:lvar, :w), :close),
                        s(:lvasgn, :errmsg,
                          s(:send,
                            s(:lvar, :io), :read)),
                        s(:send, nil, :assert_equal,
                          s(:str, ""),
                          s(:send,
                            s(:lvar, :r), :read)),
                        s(:send, nil, :assert_not_equal,
                          s(:str, ""),
                          s(:lvar, :errmsg))),
                      s(:send,
                        s(:lvar, :io), :close))))),
              s(:block,
                s(:send, nil, :with_pipe),
                s(:args,
                  s(:arg, :r),
                  s(:arg, :w)),
                s(:begin,
                  s(:send,
                    s(:lvar, :w), :close_on_exec=,
                    s(:false)),
                  s(:lvasgn, :io,
                    s(:send,
                      s(:const, nil, :IO), :popen,
                      s(:array,
                        s(:const, nil, :RUBY),
                        s(:str, "-e"),
                        s(:dstr,
                          s(:str, "STDERR.reopen(STDOUT); IO.new("),
                          s(:begin,
                            s(:send,
                              s(:lvar, :w), :fileno)),
                          s(:str, ", 'w').puts('mo')")),
                        s(:hash,
                          s(:pair,
                            s(:sym, :close_others),
                            s(:false)))))),
                  s(:kwbegin,
                    s(:ensure,
                      s(:begin,
                        s(:send,
                          s(:lvar, :w), :close),
                        s(:lvasgn, :errmsg,
                          s(:send,
                            s(:lvar, :io), :read)),
                        s(:send, nil, :assert_equal,
                          s(:str, "mo\n"),
                          s(:send,
                            s(:lvar, :r), :read)),
                        s(:send, nil, :assert_equal,
                          s(:str, ""),
                          s(:lvar, :errmsg))),
                      s(:send,
                        s(:lvar, :io), :close))))),
              s(:block,
                s(:send, nil, :with_pipe),
                s(:args,
                  s(:arg, :r),
                  s(:arg, :w)),
                s(:begin,
                  s(:send,
                    s(:lvar, :w), :close_on_exec=,
                    s(:false)),
                  s(:lvasgn, :io,
                    s(:send,
                      s(:const, nil, :IO), :popen,
                      s(:array,
                        s(:const, nil, :RUBY),
                        s(:str, "-e"),
                        s(:dstr,
                          s(:str, "STDERR.reopen(STDOUT); IO.new("),
                          s(:begin,
                            s(:send,
                              s(:lvar, :w), :fileno)),
                          s(:str, ", 'w').puts('mo')")),
                        s(:hash,
                          s(:pair,
                            s(:sym, :close_others),
                            s(:nil)))))),
                  s(:kwbegin,
                    s(:ensure,
                      s(:begin,
                        s(:send,
                          s(:lvar, :w), :close),
                        s(:lvasgn, :errmsg,
                          s(:send,
                            s(:lvar, :io), :read)),
                        s(:send, nil, :assert_equal,
                          s(:str, "mo\n"),
                          s(:send,
                            s(:lvar, :r), :read)),
                        s(:send, nil, :assert_equal,
                          s(:str, ""),
                          s(:lvar, :errmsg))),
                      s(:send,
                        s(:lvar, :io), :close))))))))),
      s(:if,
        s(:send, nil, :windows?), nil,
        s(:def, :test_execopts_redirect_self,
          s(:args),
          s(:kwbegin,
            s(:rescue,
              s(:block,
                s(:send, nil, :with_pipe),
                s(:args,
                  s(:arg, :r),
                  s(:arg, :w)),
                s(:begin,
                  s(:send,
                    s(:lvar, :w), :<<,
                    s(:str, "haha\n")),
                  s(:send,
                    s(:lvar, :w), :close),
                  s(:send,
                    s(:lvar, :r), :close_on_exec=,
                    s(:true)),
                  s(:block,
                    s(:send,
                      s(:const, nil, :IO), :popen,
                      s(:array,
                        s(:const, nil, :RUBY),
                        s(:str, "-e"),
                        s(:dstr,
                          s(:str, "print IO.new("),
                          s(:begin,
                            s(:send,
                              s(:lvar, :r), :fileno)),
                          s(:str, ", 'r').read")),
                        s(:hash,
                          s(:pair,
                            s(:send,
                              s(:lvar, :r), :fileno),
                            s(:send,
                              s(:lvar, :r), :fileno)),
                          s(:pair,
                            s(:sym, :close_others),
                            s(:false))))),
                    s(:args,
                      s(:arg, :io)),
                    s(:send, nil, :assert_equal,
                      s(:str, "haha\n"),
                      s(:send,
                        s(:lvar, :io), :read))))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :NotImplementedError)), nil,
                s(:send, nil, :skip,
                  s(:str, "IO#close_on_exec= is not supported"))), nil)))),
      s(:def, :test_execopts_redirect_tempfile,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6269,
            s(:str, "[ruby-core:44181]")),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:str, "execopts")),
            s(:args,
              s(:arg, :tmp)),
            s(:begin,
              s(:lvasgn, :pid,
                s(:block,
                  s(:send, nil, :assert_nothing_raised,
                    s(:const, nil, :ArgumentError),
                    s(:lvar, :bug6269)),
                  s(:args),
                  s(:break,
                    s(:send, nil, :spawn,
                      s(:const, nil, :RUBY),
                      s(:str, "-e"),
                      s(:str, "print $$"),
                      s(:hash,
                        s(:pair,
                          s(:sym, :out),
                          s(:lvar, :tmp))))))),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:lvar, :pid)),
              s(:send,
                s(:lvar, :tmp), :rewind),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :pid), :to_s),
                s(:send,
                  s(:lvar, :tmp), :read)))))),
      s(:def, :test_execopts_duplex_io,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :IO), :popen,
            s(:dstr,
              s(:begin,
                s(:const, nil, :RUBY)),
              s(:str, " -e ''")),
            s(:str, "r+")),
          s(:args,
            s(:arg, :duplex)),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send, nil, :system,
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :RUBY)),
                  s(:str, " -e ''")),
                s(:hash,
                  s(:pair,
                    s(:lvar, :duplex),
                    s(:const, nil, :STDOUT))))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send, nil, :system,
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :RUBY)),
                  s(:str, " -e ''")),
                s(:hash,
                  s(:pair,
                    s(:const, nil, :STDOUT),
                    s(:lvar, :duplex)))))))),
      s(:def, :test_execopts_modification,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:hash)),
          s(:send,
            s(:const, nil, :Process), :wait,
            s(:send, nil, :spawn,
              s(:splat,
                s(:const, nil, :TRUECOMMAND)),
              s(:lvar, :h))),
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:lvar, :h)),
          s(:lvasgn, :h,
            s(:hash)),
          s(:send, nil, :system,
            s(:splat,
              s(:const, nil, :TRUECOMMAND)),
            s(:lvar, :h)),
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:lvar, :h)),
          s(:lvasgn, :h,
            s(:hash)),
          s(:lvasgn, :io,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:splat,
                  s(:const, nil, :TRUECOMMAND)),
                s(:lvar, :h)))),
          s(:send,
            s(:lvar, :io), :close),
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:lvar, :h)))),
      s(:def, :test_system_noshell,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "echo non existing command name which contains spaces")),
          s(:send, nil, :assert_nil,
            s(:send, nil, :system,
              s(:array,
                s(:lvar, :str),
                s(:lvar, :str)))))),
      s(:def, :test_spawn_noshell,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "echo non existing command name which contains spaces")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Errno), :ENOENT)),
            s(:args),
            s(:send, nil, :spawn,
              s(:array,
                s(:lvar, :str),
                s(:lvar, :str)))))),
      s(:def, :test_popen_noshell,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "echo non existing command name which contains spaces")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Errno), :ENOENT)),
            s(:args),
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:lvar, :str),
                s(:lvar, :str)))))),
      s(:def, :test_exec_noshell,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send, nil, :write_file,
              s(:str, "s"),
              s(:dstr,
                s(:str, "\t  str = \"echo non existing command name which contains spaces\"\n"),
                s(:str, "\t  STDERR.reopen(STDOUT)\n"),
                s(:str, "\t  begin\n"),
                s(:str, "\t    exec [str, str]\n"),
                s(:str, "\t  rescue Errno::ENOENT\n"),
                s(:str, "\t    print \"Errno::ENOENT success\"\n"),
                s(:str, "\t  end\n"))),
            s(:lvasgn, :r,
              s(:block,
                s(:send,
                  s(:const, nil, :IO), :popen,
                  s(:array,
                    s(:const, nil, :RUBY),
                    s(:str, "s"),
                    s(:hash,
                      s(:pair,
                        s(:sym, :close_others),
                        s(:false)))),
                  s(:str, "r")),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:lvar, :f), :read))),
            s(:send, nil, :assert_equal,
              s(:str, "Errno::ENOENT success"),
              s(:lvar, :r))))),
      s(:def, :test_system_wordsplit,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send, nil, :write_file,
              s(:str, "script"),
              s(:dstr,
                s(:str, "        File.open(\"result\", \"w\") {|t| t << \"haha pid=\#{$$} ppid=\#{Process.ppid}\" }\n"),
                s(:str, "        exit 5\n"))),
            s(:lvasgn, :str,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :RUBY)),
                s(:str, " script"))),
            s(:lvasgn, :ret,
              s(:send, nil, :system,
                s(:lvar, :str))),
            s(:lvasgn, :status,
              s(:gvar, :$?)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:lvar, :ret)),
            s(:send, nil, :assert_predicate,
              s(:lvar, :status),
              s(:sym, :exited?)),
            s(:send, nil, :assert_equal,
              s(:int, 5),
              s(:send,
                s(:lvar, :status), :exitstatus)),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "haha pid="),
                s(:begin,
                  s(:send,
                    s(:lvar, :status), :pid)),
                s(:str, " ppid="),
                s(:begin,
                  s(:gvar, :$$))),
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "result")))))),
      s(:def, :test_spawn_wordsplit,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send, nil, :write_file,
              s(:str, "script"),
              s(:dstr,
                s(:str, "        File.open(\"result\", \"w\") {|t| t << \"hihi pid=\#{$$} ppid=\#{Process.ppid}\" }\n"),
                s(:str, "        exit 6\n"))),
            s(:lvasgn, :str,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :RUBY)),
                s(:str, " script"))),
            s(:lvasgn, :pid,
              s(:send, nil, :spawn,
                s(:lvar, :str))),
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:lvar, :pid)),
            s(:lvasgn, :status,
              s(:gvar, :$?)),
            s(:send, nil, :assert_equal,
              s(:lvar, :pid),
              s(:send,
                s(:lvar, :status), :pid)),
            s(:send, nil, :assert_predicate,
              s(:lvar, :status),
              s(:sym, :exited?)),
            s(:send, nil, :assert_equal,
              s(:int, 6),
              s(:send,
                s(:lvar, :status), :exitstatus)),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "hihi pid="),
                s(:begin,
                  s(:send,
                    s(:lvar, :status), :pid)),
                s(:str, " ppid="),
                s(:begin,
                  s(:gvar, :$$))),
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "result")))))),
      s(:def, :test_popen_wordsplit,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send, nil, :write_file,
              s(:str, "script"),
              s(:dstr,
                s(:str, "        print \"fufu pid=\#{$$} ppid=\#{Process.ppid}\"\n"),
                s(:str, "        exit 7\n"))),
            s(:lvasgn, :str,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :RUBY)),
                s(:str, " script"))),
            s(:lvasgn, :io,
              s(:send,
                s(:const, nil, :IO), :popen,
                s(:lvar, :str))),
            s(:lvasgn, :pid,
              s(:send,
                s(:lvar, :io), :pid)),
            s(:lvasgn, :result,
              s(:send,
                s(:lvar, :io), :read)),
            s(:send,
              s(:lvar, :io), :close),
            s(:lvasgn, :status,
              s(:gvar, :$?)),
            s(:send, nil, :assert_equal,
              s(:lvar, :pid),
              s(:send,
                s(:lvar, :status), :pid)),
            s(:send, nil, :assert_predicate,
              s(:lvar, :status),
              s(:sym, :exited?)),
            s(:send, nil, :assert_equal,
              s(:int, 7),
              s(:send,
                s(:lvar, :status), :exitstatus)),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "fufu pid="),
                s(:begin,
                  s(:send,
                    s(:lvar, :status), :pid)),
                s(:str, " ppid="),
                s(:begin,
                  s(:gvar, :$$))),
              s(:lvar, :result))))),
      s(:def, :test_popen_wordsplit_beginning_and_trailing_spaces,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send, nil, :write_file,
              s(:str, "script"),
              s(:dstr,
                s(:str, "        print \"fufumm pid=\#{$$} ppid=\#{Process.ppid}\"\n"),
                s(:str, "        exit 7\n"))),
            s(:lvasgn, :str,
              s(:dstr,
                s(:str, " "),
                s(:begin,
                  s(:const, nil, :RUBY)),
                s(:str, " script "))),
            s(:lvasgn, :io,
              s(:send,
                s(:const, nil, :IO), :popen,
                s(:lvar, :str))),
            s(:lvasgn, :pid,
              s(:send,
                s(:lvar, :io), :pid)),
            s(:lvasgn, :result,
              s(:send,
                s(:lvar, :io), :read)),
            s(:send,
              s(:lvar, :io), :close),
            s(:lvasgn, :status,
              s(:gvar, :$?)),
            s(:send, nil, :assert_equal,
              s(:lvar, :pid),
              s(:send,
                s(:lvar, :status), :pid)),
            s(:send, nil, :assert_predicate,
              s(:lvar, :status),
              s(:sym, :exited?)),
            s(:send, nil, :assert_equal,
              s(:int, 7),
              s(:send,
                s(:lvar, :status), :exitstatus)),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "fufumm pid="),
                s(:begin,
                  s(:send,
                    s(:lvar, :status), :pid)),
                s(:str, " ppid="),
                s(:begin,
                  s(:gvar, :$$))),
              s(:lvar, :result))))),
      s(:def, :test_exec_wordsplit,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send, nil, :write_file,
              s(:str, "script"),
              s(:dstr,
                s(:str, "        File.open(\"result\", \"w\") {|t|\n"),
                s(:str, "          if /mswin|bccwin|mingw/ =~ RUBY_PLATFORM\n"),
                s(:str, "            t << \"hehe ppid=\#{Process.ppid}\"\n"),
                s(:str, "          else\n"),
                s(:str, "            t << \"hehe pid=\#{$$} ppid=\#{Process.ppid}\"\n"),
                s(:str, "          end\n"),
                s(:str, "        }\n"),
                s(:str, "        exit 6\n"))),
            s(:send, nil, :write_file,
              s(:str, "s"),
              s(:dstr,
                s(:str, "\truby = "),
                s(:begin,
                  s(:send,
                    s(:const, nil, :RUBY), :dump)),
                s(:str, "\n"),
                s(:str, "\texec \"\#{ruby} script\"\n"))),
            s(:lvasgn, :pid,
              s(:send, nil, :spawn,
                s(:const, nil, :RUBY),
                s(:str, "s"))),
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:lvar, :pid)),
            s(:lvasgn, :status,
              s(:gvar, :$?)),
            s(:send, nil, :assert_equal,
              s(:lvar, :pid),
              s(:send,
                s(:lvar, :status), :pid)),
            s(:send, nil, :assert_predicate,
              s(:lvar, :status),
              s(:sym, :exited?)),
            s(:send, nil, :assert_equal,
              s(:int, 6),
              s(:send,
                s(:lvar, :status), :exitstatus)),
            s(:if,
              s(:send, nil, :windows?),
              s(:lvasgn, :expected,
                s(:dstr,
                  s(:str, "hehe ppid="),
                  s(:begin,
                    s(:send,
                      s(:lvar, :status), :pid)))),
              s(:lvasgn, :expected,
                s(:dstr,
                  s(:str, "hehe pid="),
                  s(:begin,
                    s(:send,
                      s(:lvar, :status), :pid)),
                  s(:str, " ppid="),
                  s(:begin,
                    s(:gvar, :$$))))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "result")))))),
      s(:def, :test_system_shell,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send, nil, :write_file,
              s(:str, "script1"),
              s(:dstr,
                s(:str, "        File.open(\"result1\", \"w\") {|t| t << \"taka pid=\#{$$} ppid=\#{Process.ppid}\" }\n"),
                s(:str, "        exit 7\n"))),
            s(:send, nil, :write_file,
              s(:str, "script2"),
              s(:dstr,
                s(:str, "        File.open(\"result2\", \"w\") {|t| t << \"taki pid=\#{$$} ppid=\#{Process.ppid}\" }\n"),
                s(:str, "        exit 8\n"))),
            s(:lvasgn, :ret,
              s(:send, nil, :system,
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :RUBY)),
                  s(:str, " script1 || "),
                  s(:begin,
                    s(:const, nil, :RUBY)),
                  s(:str, " script2")))),
            s(:lvasgn, :status,
              s(:gvar, :$?)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:lvar, :ret)),
            s(:send, nil, :assert_predicate,
              s(:lvar, :status),
              s(:sym, :exited?)),
            s(:lvasgn, :result1,
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "result1"))),
            s(:lvasgn, :result2,
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "result2"))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\Ataka pid=\\d+ ppid=\\d+\\z"),
                s(:regopt)),
              s(:lvar, :result1)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\Ataki pid=\\d+ ppid=\\d+\\z"),
                s(:regopt)),
              s(:lvar, :result2)),
            s(:send, nil, :assert_not_equal,
              s(:send,
                s(:send,
                  s(:lvar, :result1), :[],
                  s(:regexp,
                    s(:str, "\\d+"),
                    s(:regopt))), :to_i),
              s(:send,
                s(:lvar, :status), :pid)),
            s(:if,
              s(:send, nil, :windows?),
              s(:begin,
                s(:send,
                  s(:const, nil, :Dir), :mkdir,
                  s(:lvasgn, :path,
                    s(:str, "path with space"))),
                s(:send, nil, :write_file,
                  s(:lvasgn, :bat,
                    s(:send,
                      s(:lvar, :path), :+,
                      s(:str, "/bat test.bat"))),
                  s(:str, "@echo %1>out")),
                s(:send, nil, :system,
                  s(:lvar, :bat),
                  s(:str, "foo 'bar'")),
                s(:send, nil, :assert_equal,
                  s(:str, "\"foo 'bar'\"\n"),
                  s(:send,
                    s(:const, nil, :File), :read,
                    s(:str, "out")),
                  s(:str, "[ruby-core:22960]")),
                s(:send, nil, :system,
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:lvar, :bat), :dump)),
                    s(:str, " \"foo 'bar'\""))),
                s(:send, nil, :assert_equal,
                  s(:str, "\"foo 'bar'\"\n"),
                  s(:send,
                    s(:const, nil, :File), :read,
                    s(:str, "out")),
                  s(:str, "[ruby-core:22960]"))), nil)))),
      s(:def, :test_spawn_shell,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send, nil, :write_file,
              s(:str, "script1"),
              s(:dstr,
                s(:str, "        File.open(\"result1\", \"w\") {|t| t << \"taku pid=\#{$$} ppid=\#{Process.ppid}\" }\n"),
                s(:str, "        exit 7\n"))),
            s(:send, nil, :write_file,
              s(:str, "script2"),
              s(:dstr,
                s(:str, "        File.open(\"result2\", \"w\") {|t| t << \"take pid=\#{$$} ppid=\#{Process.ppid}\" }\n"),
                s(:str, "        exit 8\n"))),
            s(:lvasgn, :pid,
              s(:send, nil, :spawn,
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :RUBY)),
                  s(:str, " script1 || "),
                  s(:begin,
                    s(:const, nil, :RUBY)),
                  s(:str, " script2")))),
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:lvar, :pid)),
            s(:lvasgn, :status,
              s(:gvar, :$?)),
            s(:send, nil, :assert_predicate,
              s(:lvar, :status),
              s(:sym, :exited?)),
            s(:send, nil, :assert_not_predicate,
              s(:lvar, :status),
              s(:sym, :success?)),
            s(:lvasgn, :result1,
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "result1"))),
            s(:lvasgn, :result2,
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "result2"))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\Ataku pid=\\d+ ppid=\\d+\\z"),
                s(:regopt)),
              s(:lvar, :result1)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\Atake pid=\\d+ ppid=\\d+\\z"),
                s(:regopt)),
              s(:lvar, :result2)),
            s(:send, nil, :assert_not_equal,
              s(:send,
                s(:send,
                  s(:lvar, :result1), :[],
                  s(:regexp,
                    s(:str, "\\d+"),
                    s(:regopt))), :to_i),
              s(:send,
                s(:lvar, :status), :pid)),
            s(:if,
              s(:send, nil, :windows?),
              s(:begin,
                s(:send,
                  s(:const, nil, :Dir), :mkdir,
                  s(:lvasgn, :path,
                    s(:str, "path with space"))),
                s(:send, nil, :write_file,
                  s(:lvasgn, :bat,
                    s(:send,
                      s(:lvar, :path), :+,
                      s(:str, "/bat test.bat"))),
                  s(:str, "@echo %1>out")),
                s(:lvasgn, :pid,
                  s(:send, nil, :spawn,
                    s(:lvar, :bat),
                    s(:str, "foo 'bar'"))),
                s(:send,
                  s(:const, nil, :Process), :wait,
                  s(:lvar, :pid)),
                s(:lvasgn, :status,
                  s(:gvar, :$?)),
                s(:send, nil, :assert_predicate,
                  s(:lvar, :status),
                  s(:sym, :exited?)),
                s(:send, nil, :assert_predicate,
                  s(:lvar, :status),
                  s(:sym, :success?)),
                s(:send, nil, :assert_equal,
                  s(:str, "\"foo 'bar'\"\n"),
                  s(:send,
                    s(:const, nil, :File), :read,
                    s(:str, "out")),
                  s(:str, "[ruby-core:22960]")),
                s(:lvasgn, :pid,
                  s(:send, nil, :spawn,
                    s(:dstr,
                      s(:begin,
                        s(:send,
                          s(:lvar, :bat), :dump)),
                      s(:str, " \"foo 'bar'\"")))),
                s(:send,
                  s(:const, nil, :Process), :wait,
                  s(:lvar, :pid)),
                s(:lvasgn, :status,
                  s(:gvar, :$?)),
                s(:send, nil, :assert_predicate,
                  s(:lvar, :status),
                  s(:sym, :exited?)),
                s(:send, nil, :assert_predicate,
                  s(:lvar, :status),
                  s(:sym, :success?)),
                s(:send, nil, :assert_equal,
                  s(:str, "\"foo 'bar'\"\n"),
                  s(:send,
                    s(:const, nil, :File), :read,
                    s(:str, "out")),
                  s(:str, "[ruby-core:22960]"))), nil)))),
      s(:def, :test_popen_shell,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send, nil, :write_file,
              s(:str, "script1"),
              s(:dstr,
                s(:str, "        puts \"tako pid=\#{$$} ppid=\#{Process.ppid}\"\n"),
                s(:str, "        exit 7\n"))),
            s(:send, nil, :write_file,
              s(:str, "script2"),
              s(:dstr,
                s(:str, "        puts \"tika pid=\#{$$} ppid=\#{Process.ppid}\"\n"),
                s(:str, "        exit 8\n"))),
            s(:lvasgn, :io,
              s(:send,
                s(:const, nil, :IO), :popen,
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :RUBY)),
                  s(:str, " script1 || "),
                  s(:begin,
                    s(:const, nil, :RUBY)),
                  s(:str, " script2")))),
            s(:lvasgn, :result,
              s(:send,
                s(:lvar, :io), :read)),
            s(:send,
              s(:lvar, :io), :close),
            s(:lvasgn, :status,
              s(:gvar, :$?)),
            s(:send, nil, :assert_predicate,
              s(:lvar, :status),
              s(:sym, :exited?)),
            s(:send, nil, :assert_not_predicate,
              s(:lvar, :status),
              s(:sym, :success?)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\Atako pid=\\d+ ppid=\\d+\\ntika pid=\\d+ ppid=\\d+\\n\\z"),
                s(:regopt)),
              s(:lvar, :result)),
            s(:send, nil, :assert_not_equal,
              s(:send,
                s(:send,
                  s(:lvar, :result), :[],
                  s(:regexp,
                    s(:str, "\\d+"),
                    s(:regopt))), :to_i),
              s(:send,
                s(:lvar, :status), :pid)),
            s(:if,
              s(:send, nil, :windows?),
              s(:begin,
                s(:send,
                  s(:const, nil, :Dir), :mkdir,
                  s(:lvasgn, :path,
                    s(:str, "path with space"))),
                s(:send, nil, :write_file,
                  s(:lvasgn, :bat,
                    s(:send,
                      s(:lvar, :path), :+,
                      s(:str, "/bat test.bat"))),
                  s(:str, "@echo %1")),
                s(:lvasgn, :r,
                  s(:block,
                    s(:send,
                      s(:const, nil, :IO), :popen,
                      s(:array,
                        s(:lvar, :bat),
                        s(:str, "foo 'bar'"))),
                    s(:args,
                      s(:arg, :f)),
                    s(:send,
                      s(:lvar, :f), :read))),
                s(:send, nil, :assert_equal,
                  s(:str, "\"foo 'bar'\"\n"),
                  s(:lvar, :r),
                  s(:str, "[ruby-core:22960]")),
                s(:lvasgn, :r,
                  s(:block,
                    s(:send,
                      s(:const, nil, :IO), :popen,
                      s(:dstr,
                        s(:begin,
                          s(:send,
                            s(:lvar, :bat), :dump)),
                        s(:str, " \"foo 'bar'\""))),
                    s(:args,
                      s(:arg, :f)),
                    s(:send,
                      s(:lvar, :f), :read))),
                s(:send, nil, :assert_equal,
                  s(:str, "\"foo 'bar'\"\n"),
                  s(:lvar, :r),
                  s(:str, "[ruby-core:22960]"))), nil)))),
      s(:def, :test_exec_shell,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send, nil, :write_file,
              s(:str, "script1"),
              s(:dstr,
                s(:str, "        File.open(\"result1\", \"w\") {|t| t << \"tiki pid=\#{$$} ppid=\#{Process.ppid}\" }\n"),
                s(:str, "        exit 7\n"))),
            s(:send, nil, :write_file,
              s(:str, "script2"),
              s(:dstr,
                s(:str, "        File.open(\"result2\", \"w\") {|t| t << \"tiku pid=\#{$$} ppid=\#{Process.ppid}\" }\n"),
                s(:str, "        exit 8\n"))),
            s(:send, nil, :write_file,
              s(:str, "s"),
              s(:dstr,
                s(:str, "\truby = "),
                s(:begin,
                  s(:send,
                    s(:const, nil, :RUBY), :dump)),
                s(:str, "\n"),
                s(:str, "\texec(\"\#{ruby} script1 || \#{ruby} script2\")\n"))),
            s(:lvasgn, :pid,
              s(:send, nil, :spawn,
                s(:const, nil, :RUBY),
                s(:str, "s"))),
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:lvar, :pid)),
            s(:lvasgn, :status,
              s(:gvar, :$?)),
            s(:send, nil, :assert_predicate,
              s(:lvar, :status),
              s(:sym, :exited?)),
            s(:send, nil, :assert_not_predicate,
              s(:lvar, :status),
              s(:sym, :success?)),
            s(:lvasgn, :result1,
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "result1"))),
            s(:lvasgn, :result2,
              s(:send,
                s(:const, nil, :File), :read,
                s(:str, "result2"))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\Atiki pid=\\d+ ppid=\\d+\\z"),
                s(:regopt)),
              s(:lvar, :result1)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\Atiku pid=\\d+ ppid=\\d+\\z"),
                s(:regopt)),
              s(:lvar, :result2)),
            s(:send, nil, :assert_not_equal,
              s(:send,
                s(:send,
                  s(:lvar, :result1), :[],
                  s(:regexp,
                    s(:str, "\\d+"),
                    s(:regopt))), :to_i),
              s(:send,
                s(:lvar, :status), :pid))))),
      s(:def, :test_argv0,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send, nil, :system,
                s(:array,
                  s(:const, nil, :RUBY),
                  s(:str, "asdfg")),
                s(:str, "-e"),
                s(:str, "exit false"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send, nil, :system,
                s(:array,
                  s(:const, nil, :RUBY),
                  s(:str, "zxcvb")),
                s(:str, "-e"),
                s(:str, "exit true"))),
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:send, nil, :spawn,
                s(:array,
                  s(:const, nil, :RUBY),
                  s(:str, "poiu")),
                s(:str, "-e"),
                s(:str, "exit 4"))),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:send,
                s(:gvar, :$?), :exitstatus)),
            s(:send, nil, :assert_equal,
              s(:str, "1"),
              s(:block,
                s(:send,
                  s(:const, nil, :IO), :popen,
                  s(:array,
                    s(:array,
                      s(:const, nil, :RUBY),
                      s(:str, "qwerty")),
                    s(:str, "-e"),
                    s(:str, "print 1"))),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:lvar, :f), :read))),
            s(:send, nil, :write_file,
              s(:str, "s"),
              s(:dstr,
                s(:str, "        exec(["),
                s(:begin,
                  s(:send,
                    s(:const, nil, :RUBY), :dump)),
                s(:str, ", \"lkjh\"], \"-e\", \"exit 5\")\n"))),
            s(:lvasgn, :pid,
              s(:send, nil, :spawn,
                s(:const, nil, :RUBY),
                s(:str, "s"))),
            s(:send,
              s(:const, nil, :Process), :wait,
              s(:lvar, :pid)),
            s(:send, nil, :assert_equal,
              s(:int, 5),
              s(:send,
                s(:gvar, :$?), :exitstatus))))),
      s(:def, :with_stdin,
        s(:args,
          s(:arg, :filename)),
        s(:block,
          s(:send, nil, :open,
            s(:lvar, :filename)),
          s(:args,
            s(:arg, :f)),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :old,
                  s(:send,
                    s(:const, nil, :STDIN), :dup)),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:send,
                        s(:const, nil, :STDIN), :reopen,
                        s(:lvar, :filename)),
                      s(:yield)),
                    s(:send,
                      s(:const, nil, :STDIN), :reopen,
                      s(:lvar, :old))))),
              s(:send,
                s(:lvar, :old), :close))))),
      s(:def, :test_argv0_noarg,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:block,
              s(:send, nil, :open,
                s(:str, "t"),
                s(:str, "w")),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:lvar, :f), :print,
                s(:str, "exit true"))),
            s(:block,
              s(:send, nil, :open,
                s(:str, "f"),
                s(:str, "w")),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:lvar, :f), :print,
                s(:str, "exit false"))),
            s(:block,
              s(:send, nil, :with_stdin,
                s(:str, "t")),
              s(:args),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send, nil, :system,
                  s(:array,
                    s(:const, nil, :RUBY),
                    s(:str, "qaz"))))),
            s(:block,
              s(:send, nil, :with_stdin,
                s(:str, "f")),
              s(:args),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send, nil, :system,
                  s(:array,
                    s(:const, nil, :RUBY),
                    s(:str, "wsx"))))),
            s(:block,
              s(:send, nil, :with_stdin,
                s(:str, "t")),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:send, nil, :spawn,
                  s(:array,
                    s(:const, nil, :RUBY),
                    s(:str, "edc"))))),
            s(:send, nil, :assert_predicate,
              s(:gvar, :$?),
              s(:sym, :success?)),
            s(:block,
              s(:send, nil, :with_stdin,
                s(:str, "f")),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:send, nil, :spawn,
                  s(:array,
                    s(:const, nil, :RUBY),
                    s(:str, "rfv"))))),
            s(:send, nil, :assert_not_predicate,
              s(:gvar, :$?),
              s(:sym, :success?)),
            s(:block,
              s(:send, nil, :with_stdin,
                s(:str, "t")),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :IO), :popen,
                  s(:array,
                    s(:array,
                      s(:const, nil, :RUBY),
                      s(:str, "tgb")))),
                s(:args,
                  s(:arg, :io)),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:send,
                    s(:lvar, :io), :read)))),
            s(:send, nil, :assert_predicate,
              s(:gvar, :$?),
              s(:sym, :success?)),
            s(:block,
              s(:send, nil, :with_stdin,
                s(:str, "f")),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :IO), :popen,
                  s(:array,
                    s(:array,
                      s(:const, nil, :RUBY),
                      s(:str, "yhn")))),
                s(:args,
                  s(:arg, :io)),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:send,
                    s(:lvar, :io), :read)))),
            s(:send, nil, :assert_not_predicate,
              s(:gvar, :$?),
              s(:sym, :success?)),
            s(:lvasgn, :status,
              s(:send, nil, :run_in_child,
                s(:dstr,
                  s(:str, "STDIN.reopen('t'); exec(["),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :RUBY), :dump)),
                  s(:str, ", 'ujm'])")))),
            s(:send, nil, :assert_predicate,
              s(:lvar, :status),
              s(:sym, :success?)),
            s(:lvasgn, :status,
              s(:send, nil, :run_in_child,
                s(:dstr,
                  s(:str, "STDIN.reopen('f'); exec(["),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :RUBY), :dump)),
                  s(:str, ", 'ik,'])")))),
            s(:send, nil, :assert_not_predicate,
              s(:lvar, :status),
              s(:sym, :success?))))),
      s(:def, :test_status,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args),
          s(:begin,
            s(:lvasgn, :s,
              s(:send, nil, :run_in_child,
                s(:str, "exit 1"))),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "#<Process::Status: pid "),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :pid)),
                s(:str, " exit "),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :exitstatus)),
                s(:str, ">")),
              s(:send,
                s(:lvar, :s), :inspect)),
            s(:send, nil, :assert_equal,
              s(:lvar, :s),
              s(:lvar, :s)),
            s(:send, nil, :assert_equal,
              s(:lvar, :s),
              s(:send,
                s(:lvar, :s), :to_i)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:lvar, :s), :to_i), :&,
                s(:int, 1431655765)),
              s(:send,
                s(:lvar, :s), :&,
                s(:int, 1431655765))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:lvar, :s), :to_i), :>>,
                s(:int, 1)),
              s(:send,
                s(:lvar, :s), :>>,
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :s), :stopped?)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :s), :stopsig))))),
      s(:def, :test_status_kill,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Process), :respond_to?,
              s(:sym, :kill)), nil,
            s(:return)),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :Signal), :list), :include?,
              s(:str, "KILL")), nil,
            s(:return)),
          s(:lvasgn, :expected,
            s(:if,
              s(:send,
                s(:send,
                  s(:const, nil, :Signal), :list), :include?,
                s(:str, "QUIT")),
              s(:array,
                s(:false),
                s(:true),
                s(:false),
                s(:nil)),
              s(:array,
                s(:true),
                s(:false),
                s(:false),
                s(:true)))),
          s(:block,
            s(:send, nil, :with_tmpchdir),
            s(:args),
            s(:begin,
              s(:send, nil, :write_file,
                s(:str, "foo"),
                s(:str, "Process.kill(:KILL, $$); exit(42)")),
              s(:send, nil, :system,
                s(:const, nil, :RUBY),
                s(:str, "foo")),
              s(:lvasgn, :s,
                s(:gvar, :$?)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:array,
                  s(:send,
                    s(:lvar, :s), :exited?),
                  s(:send,
                    s(:lvar, :s), :signaled?),
                  s(:send,
                    s(:lvar, :s), :stopped?),
                  s(:send,
                    s(:lvar, :s), :success?)),
                s(:str, "[s.exited?, s.signaled?, s.stopped?, s.success?]")))))),
      s(:def, :test_status_quit,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Process), :respond_to?,
              s(:sym, :kill)), nil,
            s(:return)),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :Signal), :list), :include?,
              s(:str, "QUIT")), nil,
            s(:return)),
          s(:block,
            s(:send, nil, :with_tmpchdir),
            s(:args),
            s(:begin,
              s(:lvasgn, :s,
                s(:send, nil, :assert_in_out_err,
                  s(:array),
                  s(:str, "Signal.trap(:QUIT,'DEFAULT'); Process.kill(:SIGQUIT, $$);sleep 30"),
                  s(:regexp,
                    s(:regopt)),
                  s(:regexp,
                    s(:regopt)),
                  s(:hash,
                    s(:pair,
                      s(:sym, :rlimit_core),
                      s(:int, 0))))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:false),
                  s(:true),
                  s(:false),
                  s(:nil)),
                s(:array,
                  s(:send,
                    s(:lvar, :s), :exited?),
                  s(:send,
                    s(:lvar, :s), :signaled?),
                  s(:send,
                    s(:lvar, :s), :stopped?),
                  s(:send,
                    s(:lvar, :s), :success?)),
                s(:str, "[s.exited?, s.signaled?, s.stopped?, s.success?]")),
              s(:send, nil, :assert_equal,
                s(:dstr,
                  s(:str, "#<Process::Status: pid "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :s), :pid)),
                  s(:str, " SIGQUIT (signal "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :s), :termsig)),
                  s(:str, ")>")),
                s(:send,
                  s(:send,
                    s(:lvar, :s), :inspect), :sub,
                  s(:regexp,
                    s(:str, " \\(core dumped\\)(?=>\\z)"),
                    s(:regopt)),
                  s(:str, ""))))))),
      s(:def, :test_wait_without_arg,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args),
          s(:begin,
            s(:send, nil, :write_file,
              s(:str, "foo"),
              s(:str, "sleep 0.1")),
            s(:lvasgn, :pid,
              s(:send, nil, :spawn,
                s(:const, nil, :RUBY),
                s(:str, "foo"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :pid),
              s(:send,
                s(:const, nil, :Process), :wait))))),
      s(:def, :test_wait2,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args),
          s(:begin,
            s(:send, nil, :write_file,
              s(:str, "foo"),
              s(:str, "sleep 0.1")),
            s(:lvasgn, :pid,
              s(:send, nil, :spawn,
                s(:const, nil, :RUBY),
                s(:str, "foo"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:lvar, :pid),
                s(:int, 0)),
              s(:send,
                s(:const, nil, :Process), :wait2))))),
      s(:def, :test_waitall,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args),
          s(:begin,
            s(:send, nil, :write_file,
              s(:str, "foo"),
              s(:str, "sleep 0.1")),
            s(:lvasgn, :ps,
              s(:send,
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:erange,
                        s(:int, 0),
                        s(:int, 3))), :map),
                  s(:args),
                  s(:send, nil, :spawn,
                    s(:const, nil, :RUBY),
                    s(:str, "foo"))), :sort)),
            s(:lvasgn, :ss,
              s(:send,
                s(:send,
                  s(:const, nil, :Process), :waitall), :sort)),
            s(:block,
              s(:send,
                s(:lvar, :ps), :zip,
                s(:lvar, :ss)),
              s(:args,
                s(:arg, :p1),
                s(:mlhs,
                  s(:arg, :p2),
                  s(:arg, :s))),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:lvar, :p1),
                  s(:lvar, :p2)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :p1),
                  s(:send,
                    s(:lvar, :s), :pid))))))),
      s(:def, :test_wait_exception,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug11340,
            s(:str, "[ruby-dev:49176] [Bug #11340]")),
          s(:lvasgn, :t0,
            s(:lvasgn, :t1,
              s(:nil))),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, "puts;STDOUT.flush;Thread.start{gets;exit};sleep(3)")),
              s(:str, "r+")),
            s(:args,
              s(:arg, :f)),
            s(:begin,
              s(:lvasgn, :pid,
                s(:send,
                  s(:lvar, :f), :pid)),
              s(:send,
                s(:lvar, :f), :gets),
              s(:lvasgn, :t0,
                s(:send,
                  s(:const, nil, :Time), :now)),
              s(:lvasgn, :th,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :start,
                    s(:send,
                      s(:const, nil, :Thread), :current)),
                  s(:args,
                    s(:arg, :main)),
                  s(:begin,
                    s(:until,
                      s(:send,
                        s(:lvar, :main), :stop?),
                      s(:send,
                        s(:const, nil, :Thread), :pass)),
                    s(:send,
                      s(:lvar, :main), :raise,
                      s(:const, nil, :Interrupt))))),
              s(:kwbegin,
                s(:ensure,
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:const, nil, :Interrupt)),
                    s(:args),
                    s(:send,
                      s(:const, nil, :Process), :wait,
                      s(:lvar, :pid))),
                  s(:send,
                    s(:send,
                      s(:lvar, :th), :kill), :join))),
              s(:lvasgn, :t1,
                s(:send,
                  s(:const, nil, :Time), :now)),
              s(:send,
                s(:lvar, :f), :puts))),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:lvar, :t1), :-,
              s(:lvar, :t0)),
            s(:sym, :<),
            s(:int, 3),
            s(:block,
              s(:send, nil, :lambda),
              s(:args),
              s(:dstr,
                s(:begin,
                  s(:lvar, :bug11340)),
                s(:str, ": "),
                s(:begin,
                  s(:send,
                    s(:lvar, :t1), :-,
                    s(:lvar, :t0))),
                s(:str, " seconds to interrupt Process.wait")))))),
      s(:def, :test_abort,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args),
          s(:begin,
            s(:lvasgn, :s,
              s(:send, nil, :run_in_child,
                s(:str, "abort"))),
            s(:send, nil, :assert_not_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :s), :exitstatus))))),
      s(:def, :test_sleep,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:send, nil, :sleep,
            s(:int, 1),
            s(:int, 1)))),
      s(:def, :test_getpgid,
        s(:args),
        s(:rescue,
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:send,
              s(:const, nil, :Process), :getpgid,
              s(:send,
                s(:const, nil, :Process), :ppid))),
          s(:resbody,
            s(:array,
              s(:const, nil, :NotImplementedError)), nil, nil), nil)),
      s(:def, :test_getpriority,
        s(:args),
        s(:rescue,
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:send,
              s(:const, nil, :Process), :getpriority,
              s(:const,
                s(:const, nil, :Process), :PRIO_PROCESS),
              s(:gvar, :$$))),
          s(:resbody,
            s(:array,
              s(:const, nil, :NameError),
              s(:const, nil, :NotImplementedError)), nil, nil), nil)),
      s(:def, :test_setpriority,
        s(:args),
        s(:if,
          s(:defined?,
            s(:const,
              s(:const, nil, :Process), :PRIO_USER)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:begin,
              s(:lvasgn, :pr,
                s(:send,
                  s(:const, nil, :Process), :getpriority,
                  s(:const,
                    s(:const, nil, :Process), :PRIO_PROCESS),
                  s(:gvar, :$$))),
              s(:send,
                s(:const, nil, :Process), :setpriority,
                s(:const,
                  s(:const, nil, :Process), :PRIO_PROCESS),
                s(:gvar, :$$),
                s(:lvar, :pr)))), nil)),
      s(:def, :test_getuid,
        s(:args),
        s(:send, nil, :assert_kind_of,
          s(:const, nil, :Integer),
          s(:send,
            s(:const, nil, :Process), :uid))),
      s(:def, :test_groups,
        s(:args),
        s(:rescue,
          s(:begin,
            s(:lvasgn, :gs,
              s(:send,
                s(:const, nil, :Process), :groups)),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :Array),
              s(:lvar, :gs)),
            s(:block,
              s(:send,
                s(:lvar, :gs), :each),
              s(:args,
                s(:arg, :g)),
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :Integer),
                s(:lvar, :g)))),
          s(:resbody,
            s(:array,
              s(:const, nil, :NotImplementedError)), nil, nil), nil)),
      s(:def, :test_maxgroups,
        s(:args),
        s(:rescue,
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:send,
              s(:const, nil, :Process), :maxgroups)),
          s(:resbody,
            s(:array,
              s(:const, nil, :NotImplementedError)), nil, nil), nil)),
      s(:def, :test_geteuid,
        s(:args),
        s(:send, nil, :assert_kind_of,
          s(:const, nil, :Integer),
          s(:send,
            s(:const, nil, :Process), :euid))),
      s(:def, :test_seteuid,
        s(:args),
        s(:rescue,
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:op_asgn,
              s(:send,
                s(:const, nil, :Process), :euid), :+,
              s(:int, 0))),
          s(:resbody,
            s(:array,
              s(:const, nil, :NotImplementedError)), nil, nil), nil)),
      s(:def, :test_seteuid_name,
        s(:args),
        s(:rescue,
          s(:begin,
            s(:or,
              s(:lvasgn, :user,
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:str, "USER"))),
              s(:return)),
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:const, nil, :TypeError)),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :euid=,
                s(:lvar, :user)))),
          s(:resbody,
            s(:array,
              s(:const, nil, :NotImplementedError)), nil, nil), nil)),
      s(:def, :test_getegid,
        s(:args),
        s(:send, nil, :assert_kind_of,
          s(:const, nil, :Integer),
          s(:send,
            s(:const, nil, :Process), :egid))),
      s(:def, :test_setegid,
        s(:args),
        s(:rescue,
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:op_asgn,
              s(:send,
                s(:const, nil, :Process), :egid), :+,
              s(:int, 0))),
          s(:resbody,
            s(:array,
              s(:const, nil, :NotImplementedError)), nil, nil), nil)),
      s(:def, :test_uid_re_exchangeable_p,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Process), :UID), :re_exchangeable?)),
          s(:send, nil, :assert_include,
            s(:array,
              s(:true),
              s(:false)),
            s(:lvar, :r)))),
      s(:def, :test_gid_re_exchangeable_p,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Process), :GID), :re_exchangeable?)),
          s(:send, nil, :assert_include,
            s(:array,
              s(:true),
              s(:false)),
            s(:lvar, :r)))),
      s(:def, :test_uid_sid_available?,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Process), :UID), :sid_available?)),
          s(:send, nil, :assert_include,
            s(:array,
              s(:true),
              s(:false)),
            s(:lvar, :r)))),
      s(:def, :test_gid_sid_available?,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Process), :GID), :sid_available?)),
          s(:send, nil, :assert_include,
            s(:array,
              s(:true),
              s(:false)),
            s(:lvar, :r)))),
      s(:def, :test_pst_inspect,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised),
          s(:args),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :Process), :Status), :allocate), :inspect))),
      s(:def, :test_wait_and_sigchild,
        s(:args),
        s(:ensure,
          s(:rescue,
            s(:begin,
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "freebsd|openbsd"),
                    s(:regopt)),
                  s(:const, nil, :RUBY_PLATFORM)),
                s(:send, nil, :skip,
                  s(:str, "this fails on FreeBSD and OpenBSD on multithreaded environment")), nil),
              s(:lvasgn, :signal_received,
                s(:array)),
              s(:block,
                s(:send,
                  s(:const, nil, :Signal), :trap,
                  s(:sym, :CHLD)),
                s(:args),
                s(:send,
                  s(:lvar, :signal_received), :<<,
                  s(:true))),
              s(:lvasgn, :pid,
                s(:nil)),
              s(:block,
                s(:send,
                  s(:const, nil, :IO), :pipe),
                s(:args,
                  s(:arg, :r),
                  s(:arg, :w)),
                s(:begin,
                  s(:lvasgn, :pid,
                    s(:block,
                      s(:send, nil, :fork),
                      s(:args),
                      s(:begin,
                        s(:send,
                          s(:lvar, :r), :read,
                          s(:int, 1)),
                        s(:send, nil, :exit)))),
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :start),
                    s(:args),
                    s(:send, nil, :raise)),
                  s(:send,
                    s(:lvar, :w), :puts))),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:lvar, :pid)),
              s(:block,
                s(:send,
                  s(:int, 10), :times),
                s(:args),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :signal_received), :empty?), nil,
                    s(:break)),
                  s(:send, nil, :sleep,
                    s(:float, 0.01)))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:true)),
                s(:lvar, :signal_received),
                s(:str, " [ruby-core:19744]"))),
            s(:resbody,
              s(:array,
                s(:const, nil, :NotImplementedError),
                s(:const, nil, :ArgumentError)), nil, nil), nil),
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:const, nil, :Signal), :trap,
                s(:sym, :CHLD),
                s(:str, "DEFAULT")),
              s(:resbody,
                s(:array,
                  s(:const, nil, :ArgumentError)), nil, nil), nil)))),
      s(:def, :test_no_curdir,
        s(:args),
        s(:block,
          s(:send, nil, :with_tmpchdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send,
              s(:const, nil, :Dir), :mkdir,
              s(:str, "vd")),
            s(:lvasgn, :status,
              s(:nil)),
            s(:block,
              s(:send,
                s(:const, nil, :Dir), :chdir,
                s(:str, "vd")),
              s(:args),
              s(:begin,
                s(:lvasgn, :dir,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :d)),
                    s(:str, "/vd"))),
                s(:send, nil, :system,
                  s(:const, nil, :RUBY),
                  s(:str, "--disable-gems"),
                  s(:str, "-e"),
                  s(:dstr,
                    s(:str, "Dir.chdir '..'; Dir.rmdir "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :dir), :dump))),
                  s(:hash,
                    s(:pair,
                      s(:sym, :err),
                      s(:const,
                        s(:const, nil, :File), :NULL)))),
                s(:send, nil, :system,
                  s(:hash,
                    s(:pair,
                      s(:str, "RUBYLIB"),
                      s(:nil))),
                  s(:const, nil, :RUBY),
                  s(:str, "--disable-gems"),
                  s(:str, "-e"),
                  s(:str, "exit true")),
                s(:lvasgn, :status,
                  s(:gvar, :$?)))),
            s(:send, nil, :assert_predicate,
              s(:lvar, :status),
              s(:sym, :success?),
              s(:str, "[ruby-dev:38105]"))))),
      s(:if,
        s(:send,
          s(:const, nil, :File), :executable?,
          s(:str, "/bin/sh")),
        s(:def, :test_fallback_to_sh,
          s(:args),
          s(:begin,
            s(:lvasgn, :feature,
              s(:str, "[ruby-core:32745]")),
            s(:block,
              s(:send, nil, :with_tmpchdir),
              s(:args,
                s(:arg, :d)),
              s(:begin,
                s(:block,
                  s(:send, nil, :open,
                    s(:dstr,
                      s(:str, "tmp_script."),
                      s(:begin,
                        s(:gvar, :$$))),
                    s(:str, "w")),
                  s(:args,
                    s(:arg, :f)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :f), :puts,
                      s(:str, ": ;")),
                    s(:send,
                      s(:lvar, :f), :chmod,
                      s(:int, 493)))),
                s(:send, nil, :assert_not_nil,
                  s(:lvasgn, :pid,
                    s(:send,
                      s(:const, nil, :Process), :spawn,
                      s(:dstr,
                        s(:str, "./tmp_script."),
                        s(:begin,
                          s(:gvar, :$$))))),
                  s(:lvar, :feature)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :wpid),
                    s(:lvasgn, :st)),
                  s(:send,
                    s(:const, nil, :Process), :waitpid2,
                    s(:lvar, :pid))),
                s(:send, nil, :assert_equal,
                  s(:array,
                    s(:lvar, :pid),
                    s(:true)),
                  s(:array,
                    s(:lvar, :wpid),
                    s(:send,
                      s(:lvar, :st), :success?)),
                  s(:lvar, :feature)),
                s(:block,
                  s(:send, nil, :open,
                    s(:dstr,
                      s(:str, "tmp_script."),
                      s(:begin,
                        s(:gvar, :$$))),
                    s(:str, "w")),
                  s(:args,
                    s(:arg, :f)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :f), :puts,
                      s(:str, "echo $#: $@")),
                    s(:send,
                      s(:lvar, :f), :chmod,
                      s(:int, 493)))),
                s(:lvasgn, :result,
                  s(:block,
                    s(:send,
                      s(:const, nil, :IO), :popen,
                      s(:array,
                        s(:dstr,
                          s(:str, "./tmp_script."),
                          s(:begin,
                            s(:gvar, :$$))),
                        s(:str, "a b"),
                        s(:str, "c"))),
                    s(:args,
                      s(:arg, :f)),
                    s(:send,
                      s(:lvar, :f), :read))),
                s(:send, nil, :assert_equal,
                  s(:str, "2: a b c\n"),
                  s(:lvar, :result),
                  s(:lvar, :feature)),
                s(:block,
                  s(:send, nil, :open,
                    s(:dstr,
                      s(:str, "tmp_script."),
                      s(:begin,
                        s(:gvar, :$$))),
                    s(:str, "w")),
                  s(:args,
                    s(:arg, :f)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :f), :puts,
                      s(:str, "echo $hghg")),
                    s(:send,
                      s(:lvar, :f), :chmod,
                      s(:int, 493)))),
                s(:lvasgn, :result,
                  s(:block,
                    s(:send,
                      s(:const, nil, :IO), :popen,
                      s(:array,
                        s(:hash,
                          s(:pair,
                            s(:str, "hghg"),
                            s(:str, "mogomogo"))),
                        s(:dstr,
                          s(:str, "./tmp_script."),
                          s(:begin,
                            s(:gvar, :$$))),
                        s(:str, "a b"),
                        s(:str, "c"))),
                    s(:args,
                      s(:arg, :f)),
                    s(:send,
                      s(:lvar, :f), :read))),
                s(:send, nil, :assert_equal,
                  s(:str, "mogomogo\n"),
                  s(:lvar, :result),
                  s(:lvar, :feature)))))), nil),
      s(:def, :test_spawn_too_long_path,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug4314,
            s(:str, "[ruby-core:34842]")),
          s(:send, nil, :assert_fail_too_long_path,
            s(:array,
              s(:str, "echo")),
            s(:lvar, :bug4314)))),
      s(:def, :test_aspawn_too_long_path,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug4315,
            s(:str, "[ruby-core:34833] #7904 [ruby-core:52628] #11613")),
          s(:send, nil, :assert_fail_too_long_path,
            s(:array,
              s(:str, "echo"),
              s(:str, "|")),
            s(:lvar, :bug4315)))),
      s(:def, :assert_fail_too_long_path,
        s(:args,
          s(:mlhs,
            s(:arg, :cmd),
            s(:arg, :sep)),
          s(:arg, :mesg)),
        s(:begin,
          s(:or_asgn,
            s(:lvasgn, :sep),
            s(:str, "")),
          s(:lvasgn, :min,
            s(:send,
              s(:int, 1000), :/,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :cmd), :size), :+,
                  s(:send,
                    s(:lvar, :sep), :size))))),
          s(:lvasgn, :cmds,
            s(:send,
              s(:const, nil, :Array), :new,
              s(:lvar, :min),
              s(:lvar, :cmd))),
          s(:lvasgn, :exs,
            s(:array,
              s(:const,
                s(:const, nil, :Errno), :ENOENT))),
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :Errno), :E2BIG)),
            s(:send,
              s(:lvar, :exs), :<<,
              s(:const,
                s(:const, nil, :Errno), :E2BIG)), nil),
          s(:lvasgn, :opts,
            s(:hash,
              s(:pair,
                s(:array,
                  s(:const, nil, :STDOUT),
                  s(:const, nil, :STDERR)),
                s(:const,
                  s(:const, nil, :File), :NULL)))),
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :Process), :RLIMIT_NPROC)),
            s(:send,
              s(:lvar, :opts), :[]=,
              s(:sym, :rlimit_nproc),
              s(:int, 128)), nil),
          s(:block,
            s(:send,
              s(:const, nil, :EnvUtil), :suppress_warning),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:splat,
                  s(:lvar, :exs)),
                s(:lvar, :mesg)),
              s(:args),
              s(:kwbegin,
                s(:rescue,
                  s(:block,
                    s(:send, nil, :loop),
                    s(:args),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Process), :spawn,
                        s(:send,
                          s(:lvar, :cmds), :join,
                          s(:lvar, :sep)),
                        s(:lvar, :opts)),
                      s(:lvasgn, :min,
                        s(:send,
                          s(:array,
                            s(:send,
                              s(:lvar, :cmds), :size),
                            s(:lvar, :min)), :max)),
                      s(:op_asgn,
                        s(:lvasgn, :cmds), :*,
                        s(:int, 100)))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :NoMemoryError)), nil,
                    s(:begin,
                      s(:lvasgn, :size,
                        s(:send,
                          s(:lvar, :cmds), :size)),
                      s(:if,
                        s(:send,
                          s(:lvar, :min), :>=,
                          s(:send,
                            s(:lvar, :size), :-,
                            s(:int, 1))),
                        s(:send, nil, :raise), nil),
                      s(:lvasgn, :min,
                        s(:send,
                          s(:array,
                            s(:lvar, :min),
                            s(:op_asgn,
                              s(:lvasgn, :size), :/,
                              s(:int, 2))), :max)),
                      s(:send,
                        s(:lvar, :cmds), :[]=,
                        s(:irange,
                          s(:lvar, :size),
                          s(:int, -1)),
                        s(:array)),
                      s(:if,
                        s(:send,
                          s(:lvar, :size), :<,
                          s(:int, 250)),
                        s(:send, nil, :raise), nil),
                      s(:retry))), nil)))))),
      s(:def, :test_system_sigpipe,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:if,
              s(:send, nil, :windows?),
              s(:return), nil),
            s(:lvasgn, :pid,
              s(:int, 0)),
            s(:block,
              s(:send, nil, :with_tmpchdir),
              s(:args),
              s(:block,
                s(:send, nil, :assert_nothing_raised,
                  s(:str, "[ruby-dev:12261]")),
                s(:args),
                s(:block,
                  s(:send,
                    s(:const, nil, :Timeout), :timeout,
                    s(:int, 3)),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :pid,
                      s(:send, nil, :spawn,
                        s(:str, "yes | ls"))),
                    s(:send,
                      s(:const, nil, :Process), :waitpid,
                      s(:lvar, :pid))))))),
          s(:rescue,
            s(:if,
              s(:begin,
                s(:send,
                  s(:lvar, :pid), :!=,
                  s(:int, 0))),
              s(:send,
                s(:const, nil, :Process), :kill,
                s(:sym, :KILL),
                s(:lvar, :pid)), nil),
            s(:resbody, nil, nil,
              s(:false)), nil))),
      s(:if,
        s(:send,
          s(:const, nil, :Process), :respond_to?,
          s(:sym, :daemon)),
        s(:begin,
          s(:def, :test_daemon_default,
            s(:args),
            s(:begin,
              s(:lvasgn, :data,
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:str, "-"),
                    s(:str, "r+")),
                  s(:args,
                    s(:arg, :f)),
                  s(:begin,
                    s(:if,
                      s(:lvar, :f),
                      s(:break,
                        s(:send,
                          s(:lvar, :f), :read)), nil),
                    s(:send,
                      s(:const, nil, :Process), :daemon),
                    s(:send, nil, :puts,
                      s(:str, "ng"))))),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:lvar, :data)))),
          s(:def, :test_daemon_noclose,
            s(:args),
            s(:begin,
              s(:lvasgn, :data,
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:str, "-"),
                    s(:str, "r+")),
                  s(:args,
                    s(:arg, :f)),
                  s(:begin,
                    s(:if,
                      s(:lvar, :f),
                      s(:break,
                        s(:send,
                          s(:lvar, :f), :read)), nil),
                    s(:send,
                      s(:const, nil, :Process), :daemon,
                      s(:false),
                      s(:true)),
                    s(:send, nil, :puts,
                      s(:str, "ok"),
                      s(:send,
                        s(:const, nil, :Dir), :pwd))))),
              s(:send, nil, :assert_equal,
                s(:str, "ok\n/\n"),
                s(:lvar, :data)))),
          s(:def, :test_daemon_nochdir_noclose,
            s(:args),
            s(:begin,
              s(:lvasgn, :data,
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:str, "-"),
                    s(:str, "r+")),
                  s(:args,
                    s(:arg, :f)),
                  s(:begin,
                    s(:if,
                      s(:lvar, :f),
                      s(:break,
                        s(:send,
                          s(:lvar, :f), :read)), nil),
                    s(:send,
                      s(:const, nil, :Process), :daemon,
                      s(:true),
                      s(:true)),
                    s(:send, nil, :puts,
                      s(:str, "ok"),
                      s(:send,
                        s(:const, nil, :Dir), :pwd))))),
              s(:send, nil, :assert_equal,
                s(:dstr,
                  s(:str, "ok\n"),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Dir), :pwd)),
                  s(:str, "\n")),
                s(:lvar, :data)))),
          s(:def, :test_daemon_readwrite,
            s(:args),
            s(:begin,
              s(:lvasgn, :data,
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:str, "-"),
                    s(:str, "r+")),
                  s(:args,
                    s(:arg, :f)),
                  s(:begin,
                    s(:if,
                      s(:lvar, :f),
                      s(:begin,
                        s(:send,
                          s(:lvar, :f), :puts,
                          s(:str, "ok?")),
                        s(:break,
                          s(:send,
                            s(:lvar, :f), :read))), nil),
                    s(:send,
                      s(:const, nil, :Process), :daemon,
                      s(:true),
                      s(:true)),
                    s(:send, nil, :puts,
                      s(:send,
                        s(:const, nil, :STDIN), :gets))))),
              s(:send, nil, :assert_equal,
                s(:str, "ok?\n"),
                s(:lvar, :data)))),
          s(:def, :test_daemon_pid,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :cpid),
                  s(:lvasgn, :dpid)),
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:str, "-"),
                    s(:str, "r+")),
                  s(:args,
                    s(:arg, :f)),
                  s(:begin,
                    s(:if,
                      s(:lvar, :f),
                      s(:break,
                        s(:send,
                          s(:lvar, :f), :pid),
                        s(:send, nil, :Integer,
                          s(:send,
                            s(:lvar, :f), :read))), nil),
                    s(:send,
                      s(:const, nil, :Process), :daemon,
                      s(:false),
                      s(:true)),
                    s(:send, nil, :puts,
                      s(:gvar, :$$))))),
              s(:send, nil, :assert_not_equal,
                s(:lvar, :cpid),
                s(:lvar, :dpid)))),
          s(:if,
            s(:and,
              s(:send,
                s(:const, nil, :File), :directory?,
                s(:str, "/proc/self/task")),
              s(:send,
                s(:regexp,
                  s(:str, "netbsd[a-z]*[1-6]"),
                  s(:regopt)), :!~,
                s(:const, nil, :RUBY_PLATFORM))),
            s(:def, :test_daemon_no_threads,
              s(:args),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :pid),
                    s(:lvasgn, :data)),
                  s(:block,
                    s(:send,
                      s(:const, nil, :IO), :popen,
                      s(:str, "-"),
                      s(:str, "r+")),
                    s(:args,
                      s(:arg, :f)),
                    s(:begin,
                      s(:if,
                        s(:lvar, :f),
                        s(:break,
                          s(:send,
                            s(:lvar, :f), :pid),
                          s(:send,
                            s(:lvar, :f), :readlines)), nil),
                      s(:send,
                        s(:const, nil, :Process), :daemon,
                        s(:true),
                        s(:true)),
                      s(:send, nil, :puts,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Dir), :entries,
                            s(:str, "/proc/self/task")), :-,
                          s(:array,
                            s(:str, "."),
                            s(:str, ".."))))))),
                s(:lvasgn, :bug4920,
                  s(:str, "[ruby-dev:43873]")),
                s(:send, nil, :assert_equal,
                  s(:int, 2),
                  s(:send,
                    s(:lvar, :data), :size),
                  s(:lvar, :bug4920)),
                s(:send, nil, :assert_not_include,
                  s(:send,
                    s(:lvar, :data), :map,
                    s(:block_pass,
                      s(:sym, :to_i))),
                  s(:lvar, :pid)))),
            s(:def, :test_daemon_no_threads,
              s(:args),
              s(:begin,
                s(:lvasgn, :data,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Timeout), :timeout,
                      s(:int, 3)),
                    s(:args),
                    s(:block,
                      s(:send,
                        s(:const, nil, :IO), :popen,
                        s(:str, "-")),
                      s(:args,
                        s(:arg, :f)),
                      s(:begin,
                        s(:if,
                          s(:lvar, :f),
                          s(:break,
                            s(:send,
                              s(:send,
                                s(:lvar, :f), :readlines), :map,
                              s(:block_pass,
                                s(:sym, :chomp)))), nil),
                        s(:lvasgn, :th,
                          s(:block,
                            s(:send,
                              s(:const, nil, :Thread), :start),
                            s(:args),
                            s(:send, nil, :sleep,
                              s(:int, 3)))),
                        s(:send,
                          s(:const, nil, :Process), :daemon,
                          s(:true),
                          s(:true)),
                        s(:send, nil, :puts,
                          s(:send,
                            s(:send,
                              s(:const, nil, :Thread), :list), :size),
                          s(:send,
                            s(:send,
                              s(:lvar, :th), :status), :inspect)))))),
                s(:send, nil, :assert_equal,
                  s(:array,
                    s(:str, "1"),
                    s(:str, "false")),
                  s(:lvar, :data)))))), nil),
      s(:def, :test_popen_cloexec,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :Fcntl), :FD_CLOEXEC)), nil,
            s(:return)),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:str, ""))),
            s(:args,
              s(:arg, :io)),
            s(:send, nil, :assert_predicate,
              s(:lvar, :io),
              s(:sym, :close_on_exec?))))),
      s(:def, :test_popen_exit,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :bug11510,
              s(:str, "[ruby-core:70671] [Bug #11510]")),
            s(:lvasgn, :pid,
              s(:nil)),
            s(:lvasgn, :opt,
              s(:hash,
                s(:pair,
                  s(:sym, :timeout),
                  s(:int, 10)),
                s(:pair,
                  s(:sym, :stdout_filter),
                  s(:block,
                    s(:send, nil, :lambda),
                    s(:args,
                      s(:arg, :s)),
                    s(:lvasgn, :pid,
                      s(:lvar, :s)))))),
            s(:if,
              s(:send, nil, :windows?),
              s(:send,
                s(:lvar, :opt), :[]=,
                s(:sym, :new_pgroup),
                s(:true)),
              s(:send,
                s(:lvar, :opt), :[]=,
                s(:sym, :pgroup),
                s(:true))),
            s(:send, nil, :assert_ruby_status,
              s(:array,
                s(:str, "-"),
                s(:const, nil, :RUBY)),
              s(:dstr,
                s(:str, "      RUBY = ARGV[0]\n"),
                s(:str, "      th = Thread.start {\n"),
                s(:str, "        Thread.current.abort_on_exception = true\n"),
                s(:str, "        IO.popen([RUBY, \"-esleep 15\", err: [:child, :out]]) {|f|\n"),
                s(:str, "          STDOUT.puts f.pid\n"),
                s(:str, "          STDOUT.flush\n"),
                s(:str, "          sleep(2)\n"),
                s(:str, "        }\n"),
                s(:str, "      }\n"),
                s(:str, "      sleep(0.001) until th.stop?\n")),
              s(:lvar, :bug11510),
              s(:hash,
                s(:kwsplat,
                  s(:lvar, :opt)))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\A\\d+\\Z"),
                s(:regopt)),
              s(:lvar, :pid))),
          s(:if,
            s(:lvar, :pid),
            s(:begin,
              s(:lvasgn, :pid,
                s(:send,
                  s(:lvar, :pid), :to_i)),
              s(:block,
                s(:send,
                  s(:array,
                    s(:sym, :TERM),
                    s(:sym, :KILL)), :each),
                s(:args,
                  s(:arg, :sig)),
                s(:rescue,
                  s(:send,
                    s(:const, nil, :Process), :kill,
                    s(:lvar, :sig),
                    s(:lvar, :pid)),
                  s(:resbody, nil, nil,
                    s(:break)), nil))), nil))),
      s(:def, :test_execopts_new_pgroup,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :windows?), nil,
            s(:return)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send, nil, :system,
              s(:splat,
                s(:const, nil, :TRUECOMMAND)),
              s(:hash,
                s(:pair,
                  s(:sym, :new_pgroup),
                  s(:true))))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send, nil, :system,
              s(:splat,
                s(:const, nil, :TRUECOMMAND)),
              s(:hash,
                s(:pair,
                  s(:sym, :new_pgroup),
                  s(:false))))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send, nil, :spawn,
              s(:splat,
                s(:const, nil, :TRUECOMMAND)),
              s(:hash,
                s(:pair,
                  s(:sym, :new_pgroup),
                  s(:true))))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :IO), :popen,
                s(:array,
                  s(:splat,
                    s(:const, nil, :TRUECOMMAND)),
                  s(:hash,
                    s(:pair,
                      s(:sym, :new_pgroup),
                      s(:true))))),
              s(:args), nil)))),
      s(:def, :test_execopts_uid,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature6975,
            s(:str, "[ruby-core:47414]")),
          s(:block,
            s(:send,
              s(:array,
                s(:int, 30000),
                s(:array,
                  s(:send,
                    s(:const, nil, :Process), :uid),
                  s(:send,
                    s(:const, nil, :ENV), :[],
                    s(:str, "USER")))), :each),
            s(:args,
              s(:arg, :uid),
              s(:arg, :user)),
            s(:begin,
              s(:if,
                s(:lvar, :user),
                s(:block,
                  s(:send, nil, :assert_nothing_raised,
                    s(:lvar, :feature6975)),
                  s(:args),
                  s(:kwbegin,
                    s(:rescue,
                      s(:send, nil, :system,
                        s(:splat,
                          s(:const, nil, :TRUECOMMAND)),
                        s(:hash,
                          s(:pair,
                            s(:sym, :uid),
                            s(:lvar, :user)))),
                      s(:resbody,
                        s(:array,
                          s(:const,
                            s(:const, nil, :Errno), :EPERM),
                          s(:const, nil, :NotImplementedError)), nil, nil), nil))), nil),
              s(:block,
                s(:send, nil, :assert_nothing_raised,
                  s(:lvar, :feature6975)),
                s(:args),
                s(:kwbegin,
                  s(:rescue,
                    s(:send, nil, :system,
                      s(:splat,
                        s(:const, nil, :TRUECOMMAND)),
                      s(:hash,
                        s(:pair,
                          s(:sym, :uid),
                          s(:lvar, :uid)))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Errno), :EPERM),
                        s(:const, nil, :NotImplementedError)), nil, nil), nil))),
              s(:block,
                s(:send, nil, :assert_nothing_raised,
                  s(:lvar, :feature6975)),
                s(:args),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:lvasgn, :u,
                        s(:send,
                          s(:const, nil, :IO), :popen,
                          s(:array,
                            s(:const, nil, :RUBY),
                            s(:str, "-e"),
                            s(:str, "print Process.uid"),
                            s(:hash,
                              s(:pair,
                                s(:sym, :uid),
                                s(:or,
                                  s(:lvar, :user),
                                  s(:lvar, :uid))))),
                          s(:block_pass,
                            s(:sym, :read)))),
                      s(:send, nil, :assert_equal,
                        s(:send,
                          s(:lvar, :uid), :to_s),
                        s(:lvar, :u),
                        s(:lvar, :feature6975))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Errno), :EPERM),
                        s(:const, nil, :NotImplementedError)), nil, nil), nil))))))),
      s(:def, :test_execopts_gid,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :windows?),
            s(:send, nil, :skip,
              s(:str, "Process.groups not implemented on Windows platform")), nil),
          s(:lvasgn, :feature6975,
            s(:str, "[ruby-core:47414]")),
          s(:block,
            s(:send,
              s(:array,
                s(:int, 30000),
                s(:splat,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Process), :groups), :map),
                    s(:args,
                      s(:arg, :g)),
                    s(:begin,
                      s(:lvasgn, :g,
                        s(:send,
                          s(:const, nil, :Etc), :getgrgid,
                          s(:lvar, :g))),
                      s(:array,
                        s(:send,
                          s(:lvar, :g), :name),
                        s(:send,
                          s(:lvar, :g), :gid)))))), :each),
            s(:args,
              s(:arg, :group),
              s(:arg, :gid)),
            s(:begin,
              s(:block,
                s(:send, nil, :assert_nothing_raised,
                  s(:lvar, :feature6975)),
                s(:args),
                s(:kwbegin,
                  s(:rescue,
                    s(:send, nil, :system,
                      s(:splat,
                        s(:const, nil, :TRUECOMMAND)),
                      s(:hash,
                        s(:pair,
                          s(:sym, :gid),
                          s(:lvar, :group)))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Errno), :EPERM),
                        s(:const, nil, :NotImplementedError)), nil, nil), nil))),
              s(:lvasgn, :gid,
                s(:dstr,
                  s(:begin,
                    s(:or,
                      s(:lvar, :gid),
                      s(:lvar, :group))))),
              s(:block,
                s(:send, nil, :assert_nothing_raised,
                  s(:lvar, :feature6975)),
                s(:args),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:lvasgn, :g,
                        s(:send,
                          s(:const, nil, :IO), :popen,
                          s(:array,
                            s(:const, nil, :RUBY),
                            s(:str, "-e"),
                            s(:str, "print Process.gid"),
                            s(:hash,
                              s(:pair,
                                s(:sym, :gid),
                                s(:lvar, :group)))),
                          s(:block_pass,
                            s(:sym, :read)))),
                      s(:if,
                        s(:and,
                          s(:and,
                            s(:send,
                              s(:send,
                                s(:gvar, :$?), :exitstatus), :==,
                              s(:int, 1)),
                            s(:match_with_lvasgn,
                              s(:regexp,
                                s(:str, "aix"),
                                s(:regopt)),
                              s(:const, nil, :RUBY_PLATFORM))),
                          s(:send,
                            s(:lvar, :gid), :!=,
                            s(:send,
                              s(:const, nil, :Process), :gid))), nil,
                        s(:send, nil, :assert_equal,
                          s(:lvar, :gid),
                          s(:lvar, :g),
                          s(:lvar, :feature6975)))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Errno), :EPERM),
                        s(:const, nil, :NotImplementedError)), nil, nil), nil))))))),
      s(:def, :test_sigpipe,
        s(:args),
        s(:begin,
          s(:send, nil, :system,
            s(:const, nil, :RUBY),
            s(:str, "-e"),
            s(:str, "")),
          s(:block,
            s(:send, nil, :with_pipe),
            s(:args,
              s(:arg, :r),
              s(:arg, :w)),
            s(:begin,
              s(:send,
                s(:lvar, :r), :close),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :Errno), :EPIPE)),
                s(:args),
                s(:send,
                  s(:lvar, :w), :print,
                  s(:str, "a"))))))),
      s(:if,
        s(:send,
          s(:const, nil, :File), :executable?,
          s(:str, "/bin/sh")),
        s(:def, :test_sh_comment,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:str, "echo a # fofoof")),
            s(:args,
              s(:arg, :f)),
            s(:send, nil, :assert_equal,
              s(:str, "a\n"),
              s(:send,
                s(:lvar, :f), :read)))), nil),
      s(:if,
        s(:send,
          s(:const, nil, :File), :executable?,
          s(:str, "/bin/sh")),
        s(:def, :test_sh_env,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:str, "foofoo=barbar env")),
            s(:args,
              s(:arg, :f)),
            s(:begin,
              s(:lvasgn, :lines,
                s(:send,
                  s(:lvar, :f), :readlines)),
              s(:send, nil, :assert_operator,
                s(:lvar, :lines),
                s(:sym, :include?),
                s(:str, "foofoo=barbar\n"))))), nil),
      s(:if,
        s(:send,
          s(:const, nil, :File), :executable?,
          s(:str, "/bin/sh")),
        s(:def, :test_sh_exec,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:str, "exec echo exexexec")),
            s(:args,
              s(:arg, :f)),
            s(:send, nil, :assert_equal,
              s(:str, "exexexec\n"),
              s(:send,
                s(:lvar, :f), :read)))), nil),
      s(:def, :test_setsid,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Process), :respond_to?,
              s(:sym, :setsid)), nil,
            s(:return)),
          s(:if,
            s(:send,
              s(:const, nil, :Process), :respond_to?,
              s(:sym, :getsid)), nil,
            s(:return)),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "openbsd|aix"),
                s(:regopt)),
              s(:const, nil, :RUBY_PLATFORM)),
            s(:return), nil),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:const, nil, :RUBY),
                s(:str, "-e"),
                s(:dstr,
                  s(:str, "\tMarshal.dump(Process.getsid, STDOUT)\n"),
                  s(:str, "\tnewsid = Process.setsid\n"),
                  s(:str, "\tMarshal.dump(newsid, STDOUT)\n"),
                  s(:str, "\tSTDOUT.flush\n"),
                  s(:str, "\t# getsid() on MacOS X return ESRCH when target process is zombie\n"),
                  s(:str, "\t# even if it is valid process id.\n"),
                  s(:str, "\tsleep\n")))),
            s(:args,
              s(:arg, :io)),
            s(:kwbegin,
              s(:ensure,
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:const, nil, :Marshal), :load,
                      s(:lvar, :io)),
                    s(:send,
                      s(:const, nil, :Process), :getsid)),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:const, nil, :Marshal), :load,
                      s(:lvar, :io)),
                    s(:send,
                      s(:const, nil, :Process), :getsid,
                      s(:send,
                        s(:lvar, :io), :pid)))),
                s(:begin,
                  s(:rescue,
                    s(:send,
                      s(:const, nil, :Process), :kill,
                      s(:sym, :KILL),
                      s(:send,
                        s(:lvar, :io), :pid)),
                    s(:resbody, nil, nil,
                      s(:nil)), nil),
                  s(:send,
                    s(:const, nil, :Process), :wait,
                    s(:send,
                      s(:lvar, :io), :pid)))))))),
      s(:if,
        s(:send, nil, :windows?),
        s(:def, :test_spawn_nonascii,
          s(:args),
          s(:begin,
            s(:lvasgn, :bug1771,
              s(:str, "[ruby-core:24309] [Bug #1771]")),
            s(:block,
              s(:send, nil, :with_tmpchdir),
              s(:args),
              s(:block,
                s(:send,
                  s(:array,
                    s(:str, "紅玉"),
                    s(:str, "zufällige_žluťoučký_გამეორებ_разлога_和新加坡以及东"),
                    s(:str, "của")), :each),
                s(:args,
                  s(:arg, :name)),
                s(:begin,
                  s(:lvasgn, :msg,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :bug1771)),
                      s(:str, " "),
                      s(:begin,
                        s(:lvar, :name)))),
                  s(:lvasgn, :exename,
                    s(:dstr,
                      s(:str, "./"),
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, ".exe"))),
                  s(:send,
                    s(:const, nil, :FileUtils), :cp,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "COMSPEC")),
                    s(:lvar, :exename)),
                  s(:send, nil, :assert_equal,
                    s(:true),
                    s(:send, nil, :system,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :exename)),
                        s(:str, " /c exit"))),
                    s(:lvar, :msg)),
                  s(:send, nil, :system,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :exename)),
                      s(:str, " /c exit 12"))),
                  s(:send, nil, :assert_equal,
                    s(:int, 12),
                    s(:send,
                      s(:gvar, :$?), :exitstatus),
                    s(:lvar, :msg)),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :_),
                      s(:lvasgn, :status)),
                    s(:send,
                      s(:const, nil, :Process), :wait2,
                      s(:send,
                        s(:const, nil, :Process), :spawn,
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :exename)),
                          s(:str, " /c exit 42"))))),
                  s(:send, nil, :assert_equal,
                    s(:int, 42),
                    s(:send,
                      s(:lvar, :status), :exitstatus),
                    s(:lvar, :msg)),
                  s(:send, nil, :assert_equal,
                    s(:str, "ok\n"),
                    s(:xstr,
                      s(:begin,
                        s(:lvar, :exename)),
                      s(:str, " /c echo ok")),
                    s(:lvar, :msg)),
                  s(:send, nil, :assert_equal,
                    s(:str, "ok\n"),
                    s(:send,
                      s(:const, nil, :IO), :popen,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :exename)),
                        s(:str, " /c echo ok")),
                      s(:block_pass,
                        s(:sym, :read))),
                    s(:lvar, :msg)),
                  s(:send, nil, :assert_equal,
                    s(:str, "ok\n"),
                    s(:send,
                      s(:const, nil, :IO), :popen,
                      s(:array,
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :exename))),
                        s(:str, "/c"),
                        s(:str, "echo"),
                        s(:str, "ok")),
                      s(:block_pass,
                        s(:sym, :read))),
                    s(:lvar, :msg)),
                  s(:send,
                    s(:const, nil, :File), :binwrite,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, ".txt")),
                    s(:str, "ok")),
                  s(:send, nil, :assert_equal,
                    s(:str, "ok"),
                    s(:xstr,
                      s(:str, "type "),
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, ".txt")))))))), nil),
      s(:def, :test_clock_gettime,
        s(:args),
        s(:begin,
          s(:lvasgn, :t1,
            s(:send,
              s(:const, nil, :Process), :clock_gettime,
              s(:const,
                s(:const, nil, :Process), :CLOCK_REALTIME),
              s(:sym, :nanosecond))),
          s(:lvasgn, :t2,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:lvasgn, :t2,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :t2), :tv_sec), :*,
                s(:int, 1000000000)), :+,
              s(:send,
                s(:lvar, :t2), :tv_nsec))),
          s(:lvasgn, :t3,
            s(:send,
              s(:const, nil, :Process), :clock_gettime,
              s(:const,
                s(:const, nil, :Process), :CLOCK_REALTIME),
              s(:sym, :nanosecond))),
          s(:send, nil, :assert_operator,
            s(:lvar, :t1),
            s(:sym, :<=),
            s(:lvar, :t2)),
          s(:send, nil, :assert_operator,
            s(:lvar, :t2),
            s(:sym, :<=),
            s(:lvar, :t3)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Errno), :EINVAL)),
            s(:args),
            s(:send,
              s(:const, nil, :Process), :clock_gettime,
              s(:sym, :foo))))),
      s(:def, :test_clock_gettime_unit,
        s(:args),
        s(:begin,
          s(:lvasgn, :t0,
            s(:send,
              s(:send,
                s(:const, nil, :Time), :now), :to_f)),
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:sym, :nanosecond),
                  s(:int, 1000000000)),
                s(:array,
                  s(:sym, :microsecond),
                  s(:int, 1000000)),
                s(:array,
                  s(:sym, :millisecond),
                  s(:int, 1000)),
                s(:array,
                  s(:sym, :second),
                  s(:int, 1)),
                s(:array,
                  s(:sym, :float_microsecond),
                  s(:float, 1000000.0)),
                s(:array,
                  s(:sym, :float_millisecond),
                  s(:float, 1000.0)),
                s(:array,
                  s(:sym, :float_second),
                  s(:float, 1.0)),
                s(:array,
                  s(:nil),
                  s(:float, 1.0)),
                s(:array,
                  s(:sym, :foo))), :each),
            s(:args,
              s(:arg, :unit),
              s(:arg, :num)),
            s(:begin,
              s(:if,
                s(:lvar, :num), nil,
                s(:begin,
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:const, nil, :ArgumentError)),
                    s(:args),
                    s(:send,
                      s(:const, nil, :Process), :clock_gettime,
                      s(:const,
                        s(:const, nil, :Process), :CLOCK_REALTIME),
                      s(:lvar, :unit))),
                  s(:next))),
              s(:lvasgn, :t1,
                s(:send,
                  s(:const, nil, :Process), :clock_gettime,
                  s(:const,
                    s(:const, nil, :Process), :CLOCK_REALTIME),
                  s(:lvar, :unit))),
              s(:send, nil, :assert_kind_of,
                s(:if,
                  s(:send,
                    s(:lvar, :num), :integer?),
                  s(:const, nil, :Integer),
                  s(:send,
                    s(:lvar, :num), :class)),
                s(:lvar, :t1),
                s(:send,
                  s(:array,
                    s(:lvar, :unit),
                    s(:lvar, :num)), :inspect)),
              s(:send, nil, :assert_in_delta,
                s(:lvar, :t0),
                s(:send,
                  s(:lvar, :t1), :/,
                  s(:lvar, :num)),
                s(:int, 1),
                s(:send,
                  s(:array,
                    s(:lvar, :unit),
                    s(:lvar, :num)), :inspect)))))),
      s(:def, :test_clock_gettime_constants,
        s(:args),
        s(:block,
          s(:send,
            s(:send,
              s(:send,
                s(:const, nil, :Process), :constants), :grep,
              s(:regexp,
                s(:str, "\\ACLOCK_"),
                s(:regopt))), :each),
          s(:args,
            s(:arg, :n)),
          s(:begin,
            s(:lvasgn, :c,
              s(:send,
                s(:const, nil, :Process), :const_get,
                s(:lvar, :n))),
            s(:kwbegin,
              s(:rescue,
                s(:lvasgn, :t,
                  s(:send,
                    s(:const, nil, :Process), :clock_gettime,
                    s(:lvar, :c))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Errno), :EINVAL)), nil,
                  s(:next)), nil)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Float),
              s(:lvar, :t),
              s(:dstr,
                s(:str, "Process.clock_gettime(Process::"),
                s(:begin,
                  s(:lvar, :n)),
                s(:str, ")")))))),
      s(:def, :test_clock_gettime_GETTIMEOFDAY_BASED_CLOCK_REALTIME,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:sym, :GETTIMEOFDAY_BASED_CLOCK_REALTIME)),
          s(:lvasgn, :t,
            s(:send,
              s(:const, nil, :Process), :clock_gettime,
              s(:lvar, :n))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Float),
            s(:lvar, :t),
            s(:dstr,
              s(:str, "Process.clock_gettime(:"),
              s(:begin,
                s(:lvar, :n)),
              s(:str, ")"))))),
      s(:def, :test_clock_gettime_TIME_BASED_CLOCK_REALTIME,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:sym, :TIME_BASED_CLOCK_REALTIME)),
          s(:lvasgn, :t,
            s(:send,
              s(:const, nil, :Process), :clock_gettime,
              s(:lvar, :n))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Float),
            s(:lvar, :t),
            s(:dstr,
              s(:str, "Process.clock_gettime(:"),
              s(:begin,
                s(:lvar, :n)),
              s(:str, ")"))))),
      s(:def, :test_clock_gettime_TIMES_BASED_CLOCK_MONOTONIC,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:sym, :TIMES_BASED_CLOCK_MONOTONIC)),
          s(:kwbegin,
            s(:rescue,
              s(:lvasgn, :t,
                s(:send,
                  s(:const, nil, :Process), :clock_gettime,
                  s(:lvar, :n))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :EINVAL)), nil,
                s(:return)), nil)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Float),
            s(:lvar, :t),
            s(:dstr,
              s(:str, "Process.clock_gettime(:"),
              s(:begin,
                s(:lvar, :n)),
              s(:str, ")"))))),
      s(:def, :test_clock_gettime_GETRUSAGE_BASED_CLOCK_PROCESS_CPUTIME_ID,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:sym, :GETRUSAGE_BASED_CLOCK_PROCESS_CPUTIME_ID)),
          s(:kwbegin,
            s(:rescue,
              s(:lvasgn, :t,
                s(:send,
                  s(:const, nil, :Process), :clock_gettime,
                  s(:lvar, :n))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :EINVAL)), nil,
                s(:return)), nil)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Float),
            s(:lvar, :t),
            s(:dstr,
              s(:str, "Process.clock_gettime(:"),
              s(:begin,
                s(:lvar, :n)),
              s(:str, ")"))))),
      s(:def, :test_clock_gettime_TIMES_BASED_CLOCK_PROCESS_CPUTIME_ID,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:sym, :TIMES_BASED_CLOCK_PROCESS_CPUTIME_ID)),
          s(:kwbegin,
            s(:rescue,
              s(:lvasgn, :t,
                s(:send,
                  s(:const, nil, :Process), :clock_gettime,
                  s(:lvar, :n))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :EINVAL)), nil,
                s(:return)), nil)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Float),
            s(:lvar, :t),
            s(:dstr,
              s(:str, "Process.clock_gettime(:"),
              s(:begin,
                s(:lvar, :n)),
              s(:str, ")"))))),
      s(:def, :test_clock_gettime_CLOCK_BASED_CLOCK_PROCESS_CPUTIME_ID,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:sym, :CLOCK_BASED_CLOCK_PROCESS_CPUTIME_ID)),
          s(:lvasgn, :t,
            s(:send,
              s(:const, nil, :Process), :clock_gettime,
              s(:lvar, :n))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Float),
            s(:lvar, :t),
            s(:dstr,
              s(:str, "Process.clock_gettime(:"),
              s(:begin,
                s(:lvar, :n)),
              s(:str, ")"))))),
      s(:def, :test_clock_gettime_MACH_ABSOLUTE_TIME_BASED_CLOCK_MONOTONIC,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:sym, :MACH_ABSOLUTE_TIME_BASED_CLOCK_MONOTONIC)),
          s(:kwbegin,
            s(:rescue,
              s(:lvasgn, :t,
                s(:send,
                  s(:const, nil, :Process), :clock_gettime,
                  s(:lvar, :n))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :EINVAL)), nil,
                s(:return)), nil)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Float),
            s(:lvar, :t),
            s(:dstr,
              s(:str, "Process.clock_gettime(:"),
              s(:begin,
                s(:lvar, :n)),
              s(:str, ")"))))),
      s(:def, :test_clock_getres,
        s(:args),
        s(:rescue,
          s(:lvasgn, :r,
            s(:send,
              s(:const, nil, :Process), :clock_getres,
              s(:const,
                s(:const, nil, :Process), :CLOCK_REALTIME),
              s(:sym, :nanosecond))),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const, nil, :Errno), :EINVAL)), nil, nil),
          s(:begin,
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Integer),
              s(:lvar, :r)),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :Errno), :EINVAL)),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :clock_getres,
                s(:sym, :foo)))))),
      s(:def, :test_clock_getres_constants,
        s(:args),
        s(:block,
          s(:send,
            s(:send,
              s(:send,
                s(:const, nil, :Process), :constants), :grep,
              s(:regexp,
                s(:str, "\\ACLOCK_"),
                s(:regopt))), :each),
          s(:args,
            s(:arg, :n)),
          s(:begin,
            s(:lvasgn, :c,
              s(:send,
                s(:const, nil, :Process), :const_get,
                s(:lvar, :n))),
            s(:kwbegin,
              s(:rescue,
                s(:lvasgn, :t,
                  s(:send,
                    s(:const, nil, :Process), :clock_getres,
                    s(:lvar, :c))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Errno), :EINVAL)), nil,
                  s(:next)), nil)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Float),
              s(:lvar, :t),
              s(:dstr,
                s(:str, "Process.clock_getres(Process::"),
                s(:begin,
                  s(:lvar, :n)),
                s(:str, ")")))))),
      s(:def, :test_clock_getres_GETTIMEOFDAY_BASED_CLOCK_REALTIME,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:sym, :GETTIMEOFDAY_BASED_CLOCK_REALTIME)),
          s(:lvasgn, :t,
            s(:send,
              s(:const, nil, :Process), :clock_getres,
              s(:lvar, :n))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Float),
            s(:lvar, :t),
            s(:dstr,
              s(:str, "Process.clock_getres(:"),
              s(:begin,
                s(:lvar, :n)),
              s(:str, ")"))),
          s(:send, nil, :assert_equal,
            s(:int, 1000),
            s(:send,
              s(:const, nil, :Process), :clock_getres,
              s(:lvar, :n),
              s(:sym, :nanosecond))))),
      s(:def, :test_clock_getres_TIME_BASED_CLOCK_REALTIME,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:sym, :TIME_BASED_CLOCK_REALTIME)),
          s(:lvasgn, :t,
            s(:send,
              s(:const, nil, :Process), :clock_getres,
              s(:lvar, :n))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Float),
            s(:lvar, :t),
            s(:dstr,
              s(:str, "Process.clock_getres(:"),
              s(:begin,
                s(:lvar, :n)),
              s(:str, ")"))),
          s(:send, nil, :assert_equal,
            s(:int, 1000000000),
            s(:send,
              s(:const, nil, :Process), :clock_getres,
              s(:lvar, :n),
              s(:sym, :nanosecond))))),
      s(:def, :test_clock_getres_TIMES_BASED_CLOCK_MONOTONIC,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:sym, :TIMES_BASED_CLOCK_MONOTONIC)),
          s(:kwbegin,
            s(:rescue,
              s(:lvasgn, :t,
                s(:send,
                  s(:const, nil, :Process), :clock_getres,
                  s(:lvar, :n))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :EINVAL)), nil,
                s(:return)), nil)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Float),
            s(:lvar, :t),
            s(:dstr,
              s(:str, "Process.clock_getres(:"),
              s(:begin,
                s(:lvar, :n)),
              s(:str, ")"))),
          s(:lvasgn, :f,
            s(:send,
              s(:const, nil, :Process), :clock_getres,
              s(:lvar, :n),
              s(:sym, :hertz))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :f), :-,
              s(:send,
                s(:lvar, :f), :floor))))),
      s(:def, :test_clock_getres_GETRUSAGE_BASED_CLOCK_PROCESS_CPUTIME_ID,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:sym, :GETRUSAGE_BASED_CLOCK_PROCESS_CPUTIME_ID)),
          s(:kwbegin,
            s(:rescue,
              s(:lvasgn, :t,
                s(:send,
                  s(:const, nil, :Process), :clock_getres,
                  s(:lvar, :n))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :EINVAL)), nil,
                s(:return)), nil)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Float),
            s(:lvar, :t),
            s(:dstr,
              s(:str, "Process.clock_getres(:"),
              s(:begin,
                s(:lvar, :n)),
              s(:str, ")"))),
          s(:send, nil, :assert_equal,
            s(:int, 1000),
            s(:send,
              s(:const, nil, :Process), :clock_getres,
              s(:lvar, :n),
              s(:sym, :nanosecond))))),
      s(:def, :test_clock_getres_TIMES_BASED_CLOCK_PROCESS_CPUTIME_ID,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:sym, :TIMES_BASED_CLOCK_PROCESS_CPUTIME_ID)),
          s(:kwbegin,
            s(:rescue,
              s(:lvasgn, :t,
                s(:send,
                  s(:const, nil, :Process), :clock_getres,
                  s(:lvar, :n))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :EINVAL)), nil,
                s(:return)), nil)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Float),
            s(:lvar, :t),
            s(:dstr,
              s(:str, "Process.clock_getres(:"),
              s(:begin,
                s(:lvar, :n)),
              s(:str, ")"))),
          s(:lvasgn, :f,
            s(:send,
              s(:const, nil, :Process), :clock_getres,
              s(:lvar, :n),
              s(:sym, :hertz))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :f), :-,
              s(:send,
                s(:lvar, :f), :floor))))),
      s(:def, :test_clock_getres_CLOCK_BASED_CLOCK_PROCESS_CPUTIME_ID,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:sym, :CLOCK_BASED_CLOCK_PROCESS_CPUTIME_ID)),
          s(:lvasgn, :t,
            s(:send,
              s(:const, nil, :Process), :clock_getres,
              s(:lvar, :n))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Float),
            s(:lvar, :t),
            s(:dstr,
              s(:str, "Process.clock_getres(:"),
              s(:begin,
                s(:lvar, :n)),
              s(:str, ")"))),
          s(:lvasgn, :f,
            s(:send,
              s(:const, nil, :Process), :clock_getres,
              s(:lvar, :n),
              s(:sym, :hertz))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :f), :-,
              s(:send,
                s(:lvar, :f), :floor))))),
      s(:def, :test_clock_getres_MACH_ABSOLUTE_TIME_BASED_CLOCK_MONOTONIC,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:sym, :MACH_ABSOLUTE_TIME_BASED_CLOCK_MONOTONIC)),
          s(:kwbegin,
            s(:rescue,
              s(:lvasgn, :t,
                s(:send,
                  s(:const, nil, :Process), :clock_getres,
                  s(:lvar, :n))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :EINVAL)), nil,
                s(:return)), nil)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Float),
            s(:lvar, :t),
            s(:dstr,
              s(:str, "Process.clock_getres(:"),
              s(:begin,
                s(:lvar, :n)),
              s(:str, ")"))))),
      s(:if,
        s(:defined?,
          s(:send, nil, :fork)),
        s(:def, :test_deadlock_by_signal_at_forking,
          s(:args),
          s(:send, nil, :assert_separately,
            s(:array,
              s(:str, "-"),
              s(:const, nil, :RUBY)),
            s(:dstr,
              s(:str, "      ruby = ARGV.shift\n"),
              s(:str, "      GC.start # reduce garbage\n"),
              s(:str, "      GC.disable # avoid triggering CoW after forks\n"),
              s(:str, "      trap(:QUIT) {}\n"),
              s(:str, "      parent = $$\n"),
              s(:str, "      100.times do |i|\n"),
              s(:str, "        pid = fork {Process.kill(:QUIT, parent)}\n"),
              s(:str, "        IO.popen(ruby, 'r+'){}\n"),
              s(:str, "        Process.wait(pid)\n"),
              s(:str, "        $stdout.puts\n"),
              s(:str, "        $stdout.flush\n"),
              s(:str, "      end\n")),
            s(:hash,
              s(:pair,
                s(:sym, :timeout),
                s(:int, 60))))), nil),
      s(:if,
        s(:defined?,
          s(:send, nil, :fork)),
        s(:def, :test_process_detach,
          s(:args),
          s(:begin,
            s(:lvasgn, :pid,
              s(:block,
                s(:send, nil, :fork),
                s(:args), nil)),
            s(:lvasgn, :th,
              s(:send,
                s(:const, nil, :Process), :detach,
                s(:lvar, :pid))),
            s(:send, nil, :assert_equal,
              s(:lvar, :pid),
              s(:send,
                s(:lvar, :th), :pid)),
            s(:lvasgn, :status,
              s(:send,
                s(:lvar, :th), :value)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :status), :success?),
              s(:send,
                s(:lvar, :status), :inspect)))), nil),
      s(:if,
        s(:defined?,
          s(:send, nil, :fork)),
        s(:def, :test_kill_at_spawn_failure,
          s(:args),
          s(:begin,
            s(:lvasgn, :bug11166,
              s(:str, "[ruby-core:69304] [Bug #11166]")),
            s(:lvasgn, :th,
              s(:nil)),
            s(:lvasgn, :x,
              s(:block,
                s(:send, nil, :with_tmpchdir),
                s(:args,
                  s(:arg, :d)),
                s(:begin,
                  s(:lvasgn, :prog,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :d)),
                      s(:str, "/notexist"))),
                  s(:lvasgn, :th,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Thread), :start),
                      s(:args),
                      s(:begin,
                        s(:send, nil, :system,
                          s(:lvar, :prog)),
                        s(:send, nil, :sleep)))),
                  s(:send,
                    s(:lvar, :th), :kill),
                  s(:send,
                    s(:lvar, :th), :join,
                    s(:float, 0.1))))),
            s(:send, nil, :assert_equal,
              s(:lvar, :th),
              s(:lvar, :x),
              s(:lvar, :bug11166)))), nil),
      s(:if,
        s(:defined?,
          s(:send, nil, :fork)),
        s(:def, :test_exec_fd_3_redirect,
          s(:args),
          s(:send, nil, :assert_separately,
            s(:array,
              s(:str, "-"),
              s(:const, nil, :RUBY)),
            s(:dstr,
              s(:str, "      ruby = ARGV.shift\n"),
              s(:str, "      begin\n"),
              s(:str, "        a = IO.pipe\n"),
              s(:str, "        b = IO.pipe\n"),
              s(:str, "        pid = fork do\n"),
              s(:str, "          exec ruby, '-e', 'print IO.for_fd(3).read(1)', 3 => a[0], 1 => b[1]\n"),
              s(:str, "        end\n"),
              s(:str, "        b[1].close\n"),
              s(:str, "        a[0].close\n"),
              s(:str, "        a[1].write('.')\n"),
              s(:str, "        assert_equal \".\", b[0].read(1)\n"),
              s(:str, "      ensure\n"),
              s(:str, "        Process.wait(pid) if pid\n"),
              s(:str, "        a.each(&:close) if a\n"),
              s(:str, "        b.each(&:close) if b\n"),
              s(:str, "      end\n")),
            s(:hash,
              s(:pair,
                s(:sym, :timeout),
                s(:int, 60))))), nil),
      s(:def, :test_exec_close_reserved_fd,
        s(:args),
        s(:begin,
          s(:lvasgn, :cmd,
            s(:dstr,
              s(:str, "."),
              s(:begin,
                s(:or,
                  s(:const,
                    s(:const, nil, :File), :ALT_SEPARATOR),
                  s(:const,
                    s(:const, nil, :File), :SEPARATOR))),
              s(:str, "bug11353"))),
          s(:block,
            s(:send, nil, :with_tmpchdir),
            s(:args),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 3),
                    s(:int, 6))), :each),
              s(:args,
                s(:arg, :i)),
              s(:begin,
                s(:lvasgn, :ret,
                  s(:send, nil, :run_in_child,
                    s(:dstr,
                      s(:str, "          begin\n"),
                      s(:str, "            $VERBOSE = nil\n"),
                      s(:str, "            Process.exec('"),
                      s(:begin,
                        s(:lvar, :cmd)),
                      s(:str, "', 'dummy', "),
                      s(:begin,
                        s(:lvar, :i)),
                      s(:str, " => :close)\n"),
                      s(:str, "          rescue SystemCallError\n"),
                      s(:str, "          end\n")))),
                s(:send, nil, :assert_equal,
                  s(:int, 0),
                  s(:lvar, :ret))))))),
      s(:if,
        s(:defined?,
          s(:send, nil, :fork)),
        s(:def, :test_signals_work_after_exec_fail,
          s(:args),
          s(:ensure,
            s(:rescue,
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :r),
                    s(:lvasgn, :w)),
                  s(:send,
                    s(:const, nil, :IO), :pipe)),
                s(:lvasgn, :pid,
                  s(:lvasgn, :status,
                    s(:nil))),
                s(:block,
                  s(:send,
                    s(:const, nil, :Timeout), :timeout,
                    s(:int, 30)),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :pid,
                      s(:block,
                        s(:send, nil, :fork),
                        s(:args),
                        s(:begin,
                          s(:send,
                            s(:lvar, :r), :close),
                          s(:kwbegin,
                            s(:rescue,
                              s(:begin,
                                s(:block,
                                  s(:send, nil, :trap,
                                    s(:sym, :USR1)),
                                  s(:args),
                                  s(:begin,
                                    s(:send,
                                      s(:lvar, :w), :syswrite,
                                      s(:str, "USR1\n")),
                                    s(:send, nil, :exit,
                                      s(:int, 0)))),
                                s(:send, nil, :exec,
                                  s(:dstr,
                                    s(:str, "/path/to/non/existent/"),
                                    s(:gvar, :$$),
                                    s(:str, "/"),
                                    s(:begin,
                                      s(:send, nil, :rand)),
                                    s(:str, ".ex")))),
                              s(:resbody,
                                s(:array,
                                  s(:const, nil, :SystemCallError)), nil,
                                s(:send,
                                  s(:lvar, :w), :syswrite,
                                  s(:str, "exec failed\n"))), nil)),
                          s(:send, nil, :sleep),
                          s(:send, nil, :exit,
                            s(:int, 1))))),
                    s(:send,
                      s(:lvar, :w), :close),
                    s(:send, nil, :assert_equal,
                      s(:str, "exec failed\n"),
                      s(:send,
                        s(:lvar, :r), :gets)),
                    s(:send,
                      s(:const, nil, :Process), :kill,
                      s(:sym, :USR1),
                      s(:lvar, :pid)),
                    s(:send, nil, :assert_equal,
                      s(:str, "USR1\n"),
                      s(:send,
                        s(:lvar, :r), :gets)),
                    s(:send, nil, :assert_nil,
                      s(:send,
                        s(:lvar, :r), :gets)),
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :_),
                        s(:lvasgn, :status)),
                      s(:send,
                        s(:const, nil, :Process), :waitpid2,
                        s(:lvar, :pid))))),
                s(:send, nil, :assert_predicate,
                  s(:lvar, :status),
                  s(:sym, :success?))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Timeout), :Error)), nil,
                s(:begin,
                  s(:kwbegin,
                    s(:rescue,
                      s(:send,
                        s(:const, nil, :Process), :kill,
                        s(:sym, :KILL),
                        s(:lvar, :pid)),
                      s(:resbody,
                        s(:array,
                          s(:const,
                            s(:const, nil, :Errno), :ESRCH)), nil, nil), nil)),
                  s(:send, nil, :raise))), nil),
            s(:begin,
              s(:if,
                s(:lvar, :w),
                s(:send,
                  s(:lvar, :w), :close), nil),
              s(:if,
                s(:lvar, :r),
                s(:send,
                  s(:lvar, :r), :close), nil)))), nil),
      s(:if,
        s(:defined?,
          s(:send, nil, :fork)),
        s(:def, :test_threading_works_after_exec_fail,
          s(:args),
          s(:ensure,
            s(:rescue,
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :r),
                    s(:lvasgn, :w)),
                  s(:send,
                    s(:const, nil, :IO), :pipe)),
                s(:lvasgn, :pid,
                  s(:lvasgn, :status,
                    s(:nil))),
                s(:block,
                  s(:send,
                    s(:const, nil, :Timeout), :timeout,
                    s(:int, 30)),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :pid,
                      s(:block,
                        s(:send, nil, :fork),
                        s(:args),
                        s(:begin,
                          s(:send,
                            s(:lvar, :r), :close),
                          s(:kwbegin,
                            s(:rescue,
                              s(:send, nil, :exec,
                                s(:dstr,
                                  s(:str, "/path/to/non/existent/"),
                                  s(:gvar, :$$),
                                  s(:str, "/"),
                                  s(:begin,
                                    s(:send, nil, :rand)),
                                  s(:str, ".ex"))),
                              s(:resbody,
                                s(:array,
                                  s(:const, nil, :SystemCallError)), nil,
                                s(:send,
                                  s(:lvar, :w), :syswrite,
                                  s(:str, "exec failed\n"))), nil)),
                          s(:lvasgn, :run,
                            s(:true)),
                          s(:lvasgn, :th1,
                            s(:block,
                              s(:send,
                                s(:const, nil, :Thread), :new),
                              s(:args),
                              s(:begin,
                                s(:lvasgn, :i,
                                  s(:int, 0)),
                                s(:while,
                                  s(:lvar, :run),
                                  s(:op_asgn,
                                    s(:lvasgn, :i), :+,
                                    s(:int, 1))),
                                s(:lvar, :i)))),
                          s(:lvasgn, :th2,
                            s(:block,
                              s(:send,
                                s(:const, nil, :Thread), :new),
                              s(:args),
                              s(:begin,
                                s(:lvasgn, :j,
                                  s(:int, 0)),
                                s(:while,
                                  s(:and,
                                    s(:lvar, :run),
                                    s(:send,
                                      s(:send,
                                        s(:const, nil, :Thread), :pass), :nil?)),
                                  s(:op_asgn,
                                    s(:lvasgn, :j), :+,
                                    s(:int, 1))),
                                s(:lvar, :j)))),
                          s(:send, nil, :sleep,
                            s(:float, 0.5)),
                          s(:lvasgn, :run,
                            s(:false)),
                          s(:send,
                            s(:lvar, :w), :syswrite,
                            s(:dstr,
                              s(:begin,
                                s(:send,
                                  s(:lvar, :th1), :value)),
                              s(:str, " "),
                              s(:begin,
                                s(:send,
                                  s(:lvar, :th2), :value)),
                              s(:str, "\n")))))),
                    s(:send,
                      s(:lvar, :w), :close),
                    s(:send, nil, :assert_equal,
                      s(:str, "exec failed\n"),
                      s(:send,
                        s(:lvar, :r), :gets)),
                    s(:lvasgn, :vals,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :r), :gets), :chomp), :split), :map!,
                        s(:block_pass,
                          s(:sym, :to_i)))),
                    s(:send, nil, :assert_operator,
                      s(:send,
                        s(:lvar, :vals), :[],
                        s(:int, 0)),
                      s(:sym, :>),
                      s(:send,
                        s(:lvar, :vals), :[],
                        s(:int, 1)),
                      s(:send,
                        s(:lvar, :vals), :inspect)),
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :_),
                        s(:lvasgn, :status)),
                      s(:send,
                        s(:const, nil, :Process), :waitpid2,
                        s(:lvar, :pid))))),
                s(:send, nil, :assert_predicate,
                  s(:lvar, :status),
                  s(:sym, :success?))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Timeout), :Error)), nil,
                s(:begin,
                  s(:kwbegin,
                    s(:rescue,
                      s(:send,
                        s(:const, nil, :Process), :kill,
                        s(:sym, :KILL),
                        s(:lvar, :pid)),
                      s(:resbody,
                        s(:array,
                          s(:const,
                            s(:const, nil, :Errno), :ESRCH)), nil, nil), nil)),
                  s(:send, nil, :raise))), nil),
            s(:begin,
              s(:if,
                s(:lvar, :w),
                s(:send,
                  s(:lvar, :w), :close), nil),
              s(:if,
                s(:lvar, :r),
                s(:send,
                  s(:lvar, :r), :close), nil)))), nil),
      s(:def, :test_many_args,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug11418,
            s(:str, "[ruby-core:70251] [Bug #11418]")),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "      bin = \""),
              s(:begin,
                s(:send,
                  s(:const, nil, :EnvUtil), :rubybin)),
              s(:str, "\"\n"),
              s(:str, "      args = Array.new(256) {\"x\"}\n"),
              s(:str, "      GC.stress = true\n"),
              s(:str, "      system(bin, \"--disable=gems\", \"-w\", \"-e\", \"puts ARGV\", *args)\n")),
            s(:send,
              s(:array,
                s(:str, "x")), :*,
              s(:int, 256)),
            s(:array),
            s(:lvar, :bug11418),
            s(:hash,
              s(:pair,
                s(:sym, :timeout),
                s(:int, 60)))))),
      s(:def, :test_to_hash_on_arguments,
        s(:args),
        s(:block,
          s(:send, nil, :all_assertions),
          s(:args,
            s(:arg, :a)),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "Array"),
                s(:str, "String")), :each),
            s(:args,
              s(:arg, :type)),
            s(:block,
              s(:send,
                s(:lvar, :a), :for,
                s(:lvar, :type)),
              s(:args),
              s(:send, nil, :assert_separately,
                s(:array,
                  s(:str, "-"),
                  s(:send,
                    s(:const, nil, :EnvUtil), :rubybin)),
                s(:dstr,
                  s(:str, "class "),
                  s(:begin,
                    s(:lvar, :type)),
                  s(:str, "\n"),
                  s(:str, "  def to_hash\n"),
                  s(:str, "    raise \"[Bug-12355]: "),
                  s(:begin,
                    s(:lvar, :type)),
                  s(:str, "#to_hash is called\"\n"),
                  s(:str, "  end\n"),
                  s(:str, "end\n"),
                  s(:str, "ex = ARGV[0]\n"),
                  s(:str, "assert_equal(true, system([ex, ex], \"-e\", \"\"))\n"))))))))))
