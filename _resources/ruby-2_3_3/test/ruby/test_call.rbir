s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestCall),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :aaa,
        s(:args,
          s(:arg, :a),
          s(:optarg, :b,
            s(:int, 100)),
          s(:restarg, :rest)),
        s(:begin,
          s(:lvasgn, :res,
            s(:array,
              s(:lvar, :a),
              s(:lvar, :b))),
          s(:if,
            s(:lvar, :rest),
            s(:op_asgn,
              s(:lvasgn, :res), :+,
              s(:lvar, :rest)), nil),
          s(:return,
            s(:lvar, :res)))),
      s(:def, :test_call,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :aaa)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :aaa)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 100)),
            s(:send, nil, :aaa,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send, nil, :aaa,
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4)),
            s(:send, nil, :aaa,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4)),
            s(:send, nil, :aaa,
              s(:int, 1),
              s(:splat,
                s(:array,
                  s(:int, 2),
                  s(:int, 3),
                  s(:int, 4))))))),
      s(:def, :test_callinfo,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9622,
            s(:str, "[ruby-core:61422] [Bug #9622]")),
          s(:lvasgn, :o,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new),
                s(:args),
                s(:begin,
                  s(:def, :foo,
                    s(:args,
                      s(:restarg, :args)),
                    s(:send, nil, :bar,
                      s(:sym, :foo),
                      s(:splat,
                        s(:lvar, :args)))),
                  s(:def, :bar,
                    s(:args,
                      s(:arg, :name)),
                    s(:lvar, :name)))), :new)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:lvar, :o), :foo,
                s(:int, 100)))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :foo)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:send,
                s(:lvar, :e), :message),
              s(:lvar, :bug9622)),
            s(:args),
            s(:send,
              s(:lvar, :o), :foo,
              s(:int, 100))))),
      s(:def, :test_safe_call,
        s(:args),
        s(:begin,
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :Struct), :new,
              s(:sym, :x),
              s(:sym, :y),
              s(:sym, :z))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :s), :new,
              s(:str, "x"))),
          s(:send, nil, :assert_equal,
            s(:str, "X"),
            s(:csend,
              s(:send,
                s(:lvar, :o), :x), :upcase)),
          s(:send, nil, :assert_nil,
            s(:csend,
              s(:send,
                s(:lvar, :o), :y), :upcase)),
          s(:send, nil, :assert_equal,
            s(:str, "x"),
            s(:send,
              s(:lvar, :o), :x)),
          s(:csend,
            s(:lvar, :o), :x=,
            s(:int, 6)),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:lvar, :o), :x)),
          s(:op_asgn,
            s(:csend,
              s(:lvar, :o), :x), :*,
            s(:int, 7)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:lvar, :o), :x)),
          s(:csend,
            s(:lvar, :o), :y=,
            s(:int, 5)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :o), :y)),
          s(:or_asgn,
            s(:csend,
              s(:lvar, :o), :z),
            s(:int, 6)),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:lvar, :o), :z)),
          s(:lvasgn, :o,
            s(:nil)),
          s(:send, nil, :assert_nil,
            s(:csend,
              s(:lvar, :o), :x)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:csend,
              s(:lvar, :o), :x=,
              s(:int, 6))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:op_asgn,
              s(:csend,
                s(:lvar, :o), :x), :*,
              s(:int, 7))))),
      s(:def, :test_safe_call_evaluate_arguments_only_method_call_is_made,
        s(:args),
        s(:begin,
          s(:lvasgn, :count,
            s(:int, 0)),
          s(:lvasgn, :proc,
            s(:block,
              s(:send, nil, :proc),
              s(:args),
              s(:begin,
                s(:op_asgn,
                  s(:lvasgn, :count), :+,
                  s(:int, 1)),
                s(:int, 1)))),
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :Struct), :new,
              s(:sym, :x),
              s(:sym, :y))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :s), :new,
              s(:array,
                s(:str, "a"),
                s(:str, "b"),
                s(:str, "c")))),
          s(:csend,
            s(:send,
              s(:lvar, :o), :y), :at,
            s(:send,
              s(:lvar, :proc), :call)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:lvar, :count)),
          s(:csend,
            s(:send,
              s(:lvar, :o), :x), :at,
            s(:send,
              s(:lvar, :proc), :call)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:lvar, :count)))),
      s(:def, :test_safe_call_block_command,
        s(:args),
        s(:send, nil, :assert_nil,
          s(:begin,
            s(:csend,
              s(:block,
                s(:send,
                  s(:str, "a"), :sub!,
                  s(:str, "b")),
                s(:args), nil), :foo,
              s(:int, 1))))),
      s(:def, :test_safe_call_block_call,
        s(:args),
        s(:send, nil, :assert_nil,
          s(:begin,
            s(:csend,
              s(:block,
                s(:send,
                  s(:str, "a"), :sub!,
                  s(:str, "b")),
                s(:args), nil), :foo)))),
      s(:def, :test_safe_call_block_call_brace,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_nil,
            s(:begin,
              s(:block,
                s(:csend,
                  s(:block,
                    s(:send,
                      s(:str, "a"), :sub!,
                      s(:str, "b")),
                    s(:args), nil), :foo),
                s(:args), nil))),
          s(:send, nil, :assert_nil,
            s(:begin,
              s(:block,
                s(:csend,
                  s(:block,
                    s(:send,
                      s(:str, "a"), :sub!,
                      s(:str, "b")),
                    s(:args), nil), :foo),
                s(:args), nil))))),
      s(:def, :test_safe_call_block_call_command,
        s(:args),
        s(:send, nil, :assert_nil,
          s(:begin,
            s(:block,
              s(:csend,
                s(:block,
                  s(:send,
                    s(:str, "a"), :sub!,
                    s(:str, "b")),
                  s(:args), nil), :foo,
                s(:int, 1)),
              s(:args), nil)))),
      s(:def, :test_invalid_safe_call,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:nil)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:lvar, :h), :[]=,
              s(:sym, :foo),
              s(:nil))))))))
