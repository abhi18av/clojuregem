s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestWeakMap),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:ivasgn, :@wm,
          s(:send,
            s(:const,
              s(:const, nil, :ObjectSpace), :WeakMap), :new))),
      s(:def, :test_map,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :k,
            s(:str, "foo")),
          s(:send,
            s(:ivar, :@wm), :[]=,
            s(:lvar, :k),
            s(:lvar, :x)),
          s(:send, nil, :assert_same,
            s(:lvar, :x),
            s(:send,
              s(:ivar, :@wm), :[],
              s(:lvar, :k))),
          s(:send, nil, :assert_not_same,
            s(:lvar, :x),
            s(:send,
              s(:ivar, :@wm), :[],
              s(:send,
                s(:str, "FOO"), :downcase))))),
      s(:def, :test_aset_const,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:ivar, :@wm), :[]=,
              s(:true),
              s(:lvar, :x))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:ivar, :@wm), :[]=,
              s(:false),
              s(:lvar, :x))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:ivar, :@wm), :[]=,
              s(:nil),
              s(:lvar, :x))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:ivar, :@wm), :[]=,
              s(:int, 42),
              s(:lvar, :x))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:ivar, :@wm), :[]=,
              s(:sym, :foo),
              s(:lvar, :x))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:ivar, :@wm), :[]=,
              s(:lvar, :x),
              s(:true))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:ivar, :@wm), :[]=,
              s(:lvar, :x),
              s(:false))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:ivar, :@wm), :[]=,
              s(:lvar, :x),
              s(:nil))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:ivar, :@wm), :[]=,
              s(:lvar, :x),
              s(:int, 42))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:ivar, :@wm), :[]=,
              s(:lvar, :x),
              s(:sym, :foo))))),
      s(:def, :test_include?,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:send, nil, :__callee__), :[],
              s(:regexp,
                s(:str, "test_(.*)"),
                s(:regopt)),
              s(:int, 1))),
          s(:lvasgn, :k,
            s(:str, "foo")),
          s(:block,
            s(:send,
              s(:int, 1), :times),
            s(:args),
            s(:begin,
              s(:lvasgn, :x,
                s(:send,
                  s(:const, nil, :Object), :new)),
              s(:send,
                s(:ivar, :@wm), :[]=,
                s(:lvar, :k),
                s(:lvar, :x)),
              s(:send, nil, :assert_send,
                s(:array,
                  s(:ivar, :@wm),
                  s(:lvar, :m),
                  s(:lvar, :k))),
              s(:send, nil, :assert_not_send,
                s(:array,
                  s(:ivar, :@wm),
                  s(:lvar, :m),
                  s(:send,
                    s(:str, "FOO"), :downcase))),
              s(:lvasgn, :x,
                s(:nil)))),
          s(:send,
            s(:const, nil, :GC), :start),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:ivar, :@wm),
              s(:lvar, :m),
              s(:lvar, :k))))),
      s(:alias,
        s(:sym, :test_member?),
        s(:sym, :test_include?)),
      s(:alias,
        s(:sym, :test_key?),
        s(:sym, :test_include?)),
      s(:def, :test_inspect,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :k,
            s(:send,
              s(:const, nil, :BasicObject), :new)),
          s(:send,
            s(:ivar, :@wm), :[]=,
            s(:lvar, :k),
            s(:lvar, :x)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A\\#<"),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:ivar, :@wm), :class), :name)),
              s(:str, ":[^:]+:\\s\\#<BasicObject:[^:]*>\\s=>\\s\\#<Object:[^:]*>>\\z"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@wm), :inspect)))),
      s(:def, :test_each,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:send, nil, :__callee__), :[],
              s(:regexp,
                s(:str, "test_(.*)"),
                s(:regopt)),
              s(:int, 1))),
          s(:lvasgn, :x1,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :k1,
            s(:str, "foo")),
          s(:send,
            s(:ivar, :@wm), :[]=,
            s(:lvar, :k1),
            s(:lvar, :x1)),
          s(:lvasgn, :x2,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :k2,
            s(:str, "bar")),
          s(:send,
            s(:ivar, :@wm), :[]=,
            s(:lvar, :k2),
            s(:lvar, :x2)),
          s(:lvasgn, :n,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:ivar, :@wm), :__send__,
              s(:lvar, :m)),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:begin,
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "\\A(?:foo|bar)\\z"),
                  s(:regopt)),
                s(:lvar, :k)),
              s(:case,
                s(:lvar, :k),
                s(:when,
                  s(:regexp,
                    s(:str, "foo"),
                    s(:regopt)),
                  s(:begin,
                    s(:send, nil, :assert_same,
                      s(:lvar, :k1),
                      s(:lvar, :k)),
                    s(:send, nil, :assert_same,
                      s(:lvar, :x1),
                      s(:lvar, :v)))),
                s(:when,
                  s(:regexp,
                    s(:str, "bar"),
                    s(:regopt)),
                  s(:begin,
                    s(:send, nil, :assert_same,
                      s(:lvar, :k2),
                      s(:lvar, :k)),
                    s(:send, nil, :assert_same,
                      s(:lvar, :x2),
                      s(:lvar, :v)))), nil),
              s(:op_asgn,
                s(:lvasgn, :n), :+,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:lvar, :n)))),
      s(:def, :test_each_key,
        s(:args),
        s(:begin,
          s(:lvasgn, :x1,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :k1,
            s(:str, "foo")),
          s(:send,
            s(:ivar, :@wm), :[]=,
            s(:lvar, :k1),
            s(:lvar, :x1)),
          s(:lvasgn, :x2,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :k2,
            s(:str, "bar")),
          s(:send,
            s(:ivar, :@wm), :[]=,
            s(:lvar, :k2),
            s(:lvar, :x2)),
          s(:lvasgn, :n,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:ivar, :@wm), :each_key),
            s(:args,
              s(:arg, :k)),
            s(:begin,
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "\\A(?:foo|bar)\\z"),
                  s(:regopt)),
                s(:lvar, :k)),
              s(:case,
                s(:lvar, :k),
                s(:when,
                  s(:regexp,
                    s(:str, "foo"),
                    s(:regopt)),
                  s(:send, nil, :assert_same,
                    s(:lvar, :k1),
                    s(:lvar, :k))),
                s(:when,
                  s(:regexp,
                    s(:str, "bar"),
                    s(:regopt)),
                  s(:send, nil, :assert_same,
                    s(:lvar, :k2),
                    s(:lvar, :k))), nil),
              s(:op_asgn,
                s(:lvasgn, :n), :+,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:lvar, :n)))),
      s(:def, :test_each_value,
        s(:args),
        s(:begin,
          s(:lvasgn, :x1,
            s(:str, "foo")),
          s(:lvasgn, :k1,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send,
            s(:ivar, :@wm), :[]=,
            s(:lvar, :k1),
            s(:lvar, :x1)),
          s(:lvasgn, :x2,
            s(:str, "bar")),
          s(:lvasgn, :k2,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send,
            s(:ivar, :@wm), :[]=,
            s(:lvar, :k2),
            s(:lvar, :x2)),
          s(:lvasgn, :n,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:ivar, :@wm), :each_value),
            s(:args,
              s(:arg, :v)),
            s(:begin,
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "\\A(?:foo|bar)\\z"),
                  s(:regopt)),
                s(:lvar, :v)),
              s(:case,
                s(:lvar, :v),
                s(:when,
                  s(:regexp,
                    s(:str, "foo"),
                    s(:regopt)),
                  s(:send, nil, :assert_same,
                    s(:lvar, :x1),
                    s(:lvar, :v))),
                s(:when,
                  s(:regexp,
                    s(:str, "bar"),
                    s(:regopt)),
                  s(:send, nil, :assert_same,
                    s(:lvar, :x2),
                    s(:lvar, :v))), nil),
              s(:op_asgn,
                s(:lvasgn, :n), :+,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:lvar, :n)))),
      s(:def, :test_size,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:send, nil, :__callee__), :[],
              s(:regexp,
                s(:str, "test_(.*)"),
                s(:regopt)),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@wm), :__send__,
              s(:lvar, :m))),
          s(:lvasgn, :x1,
            s(:str, "foo")),
          s(:lvasgn, :k1,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send,
            s(:ivar, :@wm), :[]=,
            s(:lvar, :k1),
            s(:lvar, :x1)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@wm), :__send__,
              s(:lvar, :m))),
          s(:lvasgn, :x2,
            s(:str, "bar")),
          s(:lvasgn, :k2,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send,
            s(:ivar, :@wm), :[]=,
            s(:lvar, :k2),
            s(:lvar, :x2)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@wm), :__send__,
              s(:lvar, :m))))),
      s(:alias,
        s(:sym, :test_length),
        s(:sym, :test_size)))))
