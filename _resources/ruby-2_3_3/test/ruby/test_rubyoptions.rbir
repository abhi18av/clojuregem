s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "tmpdir")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:class,
    s(:const, nil, :TestRubyOptions),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :write_file,
        s(:args,
          s(:arg, :filename),
          s(:arg, :content)),
        s(:block,
          s(:send,
            s(:const, nil, :File), :open,
            s(:lvar, :filename),
            s(:str, "w")),
          s(:args,
            s(:arg, :f)),
          s(:send,
            s(:lvar, :f), :<<,
            s(:lvar, :content)))),
      s(:def, :with_tmpchdir,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Dir), :mktmpdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :File), :realpath,
                s(:lvar, :d))),
            s(:block,
              s(:send,
                s(:const, nil, :Dir), :chdir,
                s(:lvar, :d)),
              s(:args),
              s(:yield,
                s(:lvar, :d)))))),
      s(:def, :test_source_file,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array),
          s(:str, ""),
          s(:array),
          s(:array))),
      s(:def, :test_usage,
        s(:args),
        s(:block,
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-h"))),
          s(:args,
            s(:arg, :r),
            s(:arg, :e)),
          s(:begin,
            s(:send, nil, :assert_operator,
              s(:send,
                s(:lvar, :r), :size),
              s(:sym, :<=),
              s(:int, 24)),
            s(:lvasgn, :longer,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :r), :[],
                    s(:irange,
                      s(:int, 1),
                      s(:int, -1))), :select),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:send,
                    s(:lvar, :x), :size), :>,
                  s(:int, 80)))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:lvar, :longer)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:lvar, :e))))),
      s(:def, :test_usage_long,
        s(:args),
        s(:block,
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "--help"))),
          s(:args,
            s(:arg, :r),
            s(:arg, :e)),
          s(:begin,
            s(:lvasgn, :longer,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :r), :[],
                    s(:irange,
                      s(:int, 1),
                      s(:int, -1))), :select),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:send,
                    s(:lvar, :x), :size), :>,
                  s(:int, 80)))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:lvar, :longer)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:lvar, :e))))),
      s(:def, :test_option_variables,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-e"),
                s(:str, "p [$-p, $-l, $-a]"))),
            s(:args,
              s(:arg, :r),
              s(:arg, :e)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "[false, false, false]")),
                s(:lvar, :r)),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:lvar, :e)))),
          s(:block,
            s(:send, nil, :assert_in_out_err,
              s(:send,
                s(:array,
                  s(:str, "-p"),
                  s(:str, "-l"),
                  s(:str, "-a"),
                  s(:str, "-e")), :+,
                s(:array,
                  s(:str, "p [$-p, $-l, $-a]"))),
              s(:str, "foo\nbar\nbaz\n")),
            s(:args,
              s(:arg, :r),
              s(:arg, :e)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "[true, true, true]"),
                  s(:str, "foo"),
                  s(:str, "[true, true, true]"),
                  s(:str, "bar"),
                  s(:str, "[true, true, true]"),
                  s(:str, "baz")),
                s(:lvar, :r)),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:lvar, :e)))))),
      s(:def, :test_warning,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :save_rubyopt,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "RUBYOPT"))),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "RUBYOPT"),
              s(:nil)),
            s(:send, nil, :assert_in_out_err,
              s(:send,
                s(:array,
                  s(:str, "-W0"),
                  s(:str, "-e")), :+,
                s(:array,
                  s(:str, "p $-W"))),
              s(:str, ""),
              s(:array,
                s(:str, "0")),
              s(:array)),
            s(:send, nil, :assert_in_out_err,
              s(:send,
                s(:array,
                  s(:str, "-W1"),
                  s(:str, "-e")), :+,
                s(:array,
                  s(:str, "p $-W"))),
              s(:str, ""),
              s(:array,
                s(:str, "1")),
              s(:array)),
            s(:send, nil, :assert_in_out_err,
              s(:send,
                s(:array,
                  s(:str, "-Wx"),
                  s(:str, "-e")), :+,
                s(:array,
                  s(:str, "p $-W"))),
              s(:str, ""),
              s(:array,
                s(:str, "1")),
              s(:array)),
            s(:send, nil, :assert_in_out_err,
              s(:send,
                s(:array,
                  s(:str, "-W"),
                  s(:str, "-e")), :+,
                s(:array,
                  s(:str, "p $-W"))),
              s(:str, ""),
              s(:array,
                s(:str, "2")),
              s(:array))),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "RUBYOPT"),
            s(:lvar, :save_rubyopt)))),
      s(:def, :test_safe_level,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_out_err,
            s(:send,
              s(:array,
                s(:str, "-T"),
                s(:str, "-e")), :+,
              s(:array,
                s(:str, ""))),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "no -e allowed in tainted mode \\(SecurityError\\)"),
              s(:regopt))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-T4"),
              s(:str, "-S"),
              s(:str, "foo.rb")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "no -S allowed in tainted mode \\(SecurityError\\)"),
              s(:regopt))))),
      s(:def, :test_debug,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "--disable-gems"),
              s(:str, "-de"),
              s(:str, "p $DEBUG")),
            s(:str, ""),
            s(:array,
              s(:str, "true")),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "--disable-gems"),
              s(:str, "--debug"),
              s(:str, "-e"),
              s(:str, "p $DEBUG")),
            s(:str, ""),
            s(:array,
              s(:str, "true")),
            s(:array)))),
      s(:def, :test_verbose,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-vve"),
                s(:str, ""))),
            s(:args,
              s(:arg, :r),
              s(:arg, :e)),
            s(:begin,
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "^ruby "),
                  s(:begin,
                    s(:const, nil, :RUBY_VERSION)),
                  s(:str, "(?:[p ]|dev|rc).*? \\["),
                  s(:begin,
                    s(:const, nil, :RUBY_PLATFORM)),
                  s(:str, "\\]$"),
                  s(:regopt)),
                s(:send,
                  s(:lvar, :r), :[],
                  s(:int, 0))),
              s(:send, nil, :assert_equal,
                s(:const, nil, :RUBY_DESCRIPTION),
                s(:send,
                  s(:lvar, :r), :[],
                  s(:int, 0))),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:lvar, :e)))),
          s(:send, nil, :assert_in_out_err,
            s(:send,
              s(:array,
                s(:str, "--verbose"),
                s(:str, "-e")), :+,
              s(:array,
                s(:str, "p $VERBOSE"))),
            s(:str, ""),
            s(:array,
              s(:str, "true")),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "--verbose")),
            s(:str, ""),
            s(:array),
            s(:array)))),
      s(:def, :test_copyright,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "--copyright")),
            s(:str, ""),
            s(:regexp,
              s(:str, "^ruby - Copyright \\(C\\) 1993-\\d+ Yukihiro Matsumoto$"),
              s(:regopt)),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:send,
              s(:array,
                s(:str, "--verbose"),
                s(:str, "-e")), :+,
              s(:array,
                s(:str, "p $VERBOSE"))),
            s(:str, ""),
            s(:array,
              s(:str, "true")),
            s(:array)))),
      s(:def, :test_enable,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_out_err,
            s(:send,
              s(:array,
                s(:str, "--enable"),
                s(:str, "all"),
                s(:str, "-e")), :+,
              s(:array,
                s(:str, ""))),
            s(:str, ""),
            s(:array),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:send,
              s(:array,
                s(:str, "--enable-all"),
                s(:str, "-e")), :+,
              s(:array,
                s(:str, ""))),
            s(:str, ""),
            s(:array),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:send,
              s(:array,
                s(:str, "--enable=all"),
                s(:str, "-e")), :+,
              s(:array,
                s(:str, ""))),
            s(:str, ""),
            s(:array),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:send,
              s(:array,
                s(:str, "--enable"),
                s(:str, "foobarbazqux"),
                s(:str, "-e")), :+,
              s(:array,
                s(:str, ""))),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "unknown argument for --enable: `foobarbazqux'"),
              s(:regopt))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "--enable")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "missing argument for --enable"),
              s(:regopt))))),
      s(:def, :test_disable,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_out_err,
            s(:send,
              s(:array,
                s(:str, "--disable"),
                s(:str, "all"),
                s(:str, "-e")), :+,
              s(:array,
                s(:str, ""))),
            s(:str, ""),
            s(:array),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:send,
              s(:array,
                s(:str, "--disable-all"),
                s(:str, "-e")), :+,
              s(:array,
                s(:str, ""))),
            s(:str, ""),
            s(:array),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:send,
              s(:array,
                s(:str, "--disable=all"),
                s(:str, "-e")), :+,
              s(:array,
                s(:str, ""))),
            s(:str, ""),
            s(:array),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:send,
              s(:array,
                s(:str, "--disable"),
                s(:str, "foobarbazqux"),
                s(:str, "-e")), :+,
              s(:array,
                s(:str, ""))),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "unknown argument for --disable: `foobarbazqux'"),
              s(:regopt))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "--disable")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "missing argument for --disable"),
              s(:regopt))))),
      s(:def, :test_kanji,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-KU")),
              s(:str, "p 'あ'")),
            s(:args,
              s(:arg, :r),
              s(:arg, :e)),
            s(:send, nil, :assert_equal,
              s(:str, "\"あ\""),
              s(:send,
                s(:send,
                  s(:lvar, :r), :join), :force_encoding,
                s(:const,
                  s(:const, nil, :Encoding), :UTF_8)))),
          s(:lvasgn, :line,
            s(:str, "-eputs\"\\xc2\\xa1\".encoding")),
          s(:lvasgn, :env,
            s(:hash,
              s(:pair,
                s(:str, "RUBYOPT"),
                s(:nil)))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :env),
              s(:str, "-Ke"),
              s(:lvar, :line)),
            s(:str, ""),
            s(:array,
              s(:str, "EUC-JP")),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :env),
              s(:str, "-KE"),
              s(:lvar, :line)),
            s(:str, ""),
            s(:array,
              s(:str, "EUC-JP")),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :env),
              s(:str, "-Ks"),
              s(:lvar, :line)),
            s(:str, ""),
            s(:array,
              s(:str, "Windows-31J")),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :env),
              s(:str, "-KS"),
              s(:lvar, :line)),
            s(:str, ""),
            s(:array,
              s(:str, "Windows-31J")),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :env),
              s(:str, "-Ku"),
              s(:lvar, :line)),
            s(:str, ""),
            s(:array,
              s(:str, "UTF-8")),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :env),
              s(:str, "-KU"),
              s(:lvar, :line)),
            s(:str, ""),
            s(:array,
              s(:str, "UTF-8")),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :env),
              s(:str, "-Kn"),
              s(:lvar, :line)),
            s(:str, ""),
            s(:array,
              s(:str, "ASCII-8BIT")),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :env),
              s(:str, "-KN"),
              s(:lvar, :line)),
            s(:str, ""),
            s(:array,
              s(:str, "ASCII-8BIT")),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :env),
              s(:str, "-wKe"),
              s(:lvar, :line)),
            s(:str, ""),
            s(:array,
              s(:str, "EUC-JP")),
            s(:regexp,
              s(:str, "-K"),
              s(:regopt))))),
      s(:def, :test_version,
        s(:args),
        s(:block,
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "--version"))),
          s(:args,
            s(:arg, :r),
            s(:arg, :e)),
          s(:begin,
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "^ruby "),
                s(:begin,
                  s(:const, nil, :RUBY_VERSION)),
                s(:str, "(?:[p ]|dev|rc).*? \\["),
                s(:begin,
                  s(:const, nil, :RUBY_PLATFORM)),
                s(:str, "\\]$"),
                s(:regopt)),
              s(:send,
                s(:lvar, :r), :[],
                s(:int, 0))),
            s(:send, nil, :assert_equal,
              s(:const, nil, :RUBY_DESCRIPTION),
              s(:send,
                s(:lvar, :r), :[],
                s(:int, 0))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:lvar, :e))))),
      s(:def, :test_eval,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array,
            s(:str, "-e")),
          s(:str, ""),
          s(:array),
          s(:regexp,
            s(:str, "no code specified for -e \\(RuntimeError\\)"),
            s(:regopt)))),
      s(:def, :test_require,
        s(:args),
        s(:rescue,
          s(:begin,
            s(:send, nil, :require,
              s(:str, "pp")),
            s(:send, nil, :assert_in_out_err,
              s(:send,
                s(:array,
                  s(:str, "-r"),
                  s(:str, "pp"),
                  s(:str, "-e")), :+,
                s(:array,
                  s(:str, "pp 1"))),
              s(:str, ""),
              s(:array,
                s(:str, "1")),
              s(:array)),
            s(:send, nil, :assert_in_out_err,
              s(:send,
                s(:array,
                  s(:str, "-rpp"),
                  s(:str, "-e")), :+,
                s(:array,
                  s(:str, "pp 1"))),
              s(:str, ""),
              s(:array,
                s(:str, "1")),
              s(:array)),
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-ep 1"),
                s(:str, "-r")),
              s(:str, ""),
              s(:array,
                s(:str, "1")),
              s(:array)),
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-r")),
              s(:str, ""),
              s(:array),
              s(:array))),
          s(:resbody,
            s(:array,
              s(:const, nil, :LoadError)), nil, nil), nil)),
      s(:def, :test_include,
        s(:args),
        s(:begin,
          s(:lvasgn, :d,
            s(:send,
              s(:const, nil, :Dir), :tmpdir)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:send,
                s(:str, "-I"), :+,
                s(:lvar, :d)),
              s(:str, "-e"),
              s(:str, "")),
            s(:str, ""),
            s(:array),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-I"),
              s(:lvar, :d),
              s(:str, "-e"),
              s(:str, "")),
            s(:str, ""),
            s(:array),
            s(:array)))),
      s(:def, :test_separator,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_out_err,
            s(:send,
              s(:array,
                s(:str, "-000"),
                s(:str, "-e")), :+,
              s(:array,
                s(:str, "print gets"))),
            s(:str, "foo\nbar\u0000baz"),
            s(:array,
              s(:str, "foo"),
              s(:str, "bar\u0000baz")),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:send,
              s(:array,
                s(:str, "-0141"),
                s(:str, "-e")), :+,
              s(:array,
                s(:str, "print gets"))),
            s(:str, "foo\nbar\u0000baz"),
            s(:array,
              s(:str, "foo"),
              s(:str, "ba")),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:send,
              s(:array,
                s(:str, "-0e")), :+,
              s(:array,
                s(:str, "print gets"))),
            s(:str, "foo\nbar\u0000baz"),
            s(:array,
              s(:str, "foo"),
              s(:str, "bar\u0000")),
            s(:array)))),
      s(:def, :test_autosplit,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:send,
            s(:array,
              s(:str, "-an"),
              s(:str, "-F:"),
              s(:str, "-e")), :+,
            s(:array,
              s(:str, "p $F"))),
          s(:str, "foo:bar:baz\nqux:quux:quuux\n"),
          s(:array,
            s(:str, "[\"foo\", \"bar\", \"baz\\n\"]"),
            s(:str, "[\"qux\", \"quux\", \"quuux\\n\"]")),
          s(:array))),
      s(:def, :test_chdir,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-C")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "Can't chdir"),
              s(:regopt))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-C"),
              s(:str, "test_ruby_test_rubyoptions_foobarbazqux")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "Can't chdir"),
              s(:regopt))),
          s(:lvasgn, :d,
            s(:send,
              s(:const, nil, :Dir), :tmpdir)),
          s(:block,
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-C"),
                s(:lvar, :d),
                s(:str, "-e"),
                s(:str, "puts Dir.pwd"))),
            s(:args,
              s(:arg, :r),
              s(:arg, :e)),
            s(:begin,
              s(:send,
                s(:send, nil, :assert_file), :identical?,
                s(:send,
                  s(:lvar, :r), :join),
                s(:lvar, :d)),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:lvar, :e)))))),
      s(:def, :test_yydebug,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-ye"),
                s(:str, ""))),
            s(:args,
              s(:arg, :r),
              s(:arg, :e)),
            s(:begin,
              s(:send, nil, :assert_not_equal,
                s(:array),
                s(:lvar, :r)),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:lvar, :e)))),
          s(:block,
            s(:send, nil, :assert_in_out_err,
              s(:send,
                s(:array,
                  s(:str, "--yydebug"),
                  s(:str, "-e")), :+,
                s(:array,
                  s(:str, "")))),
            s(:args,
              s(:arg, :r),
              s(:arg, :e)),
            s(:begin,
              s(:send, nil, :assert_not_equal,
                s(:array),
                s(:lvar, :r)),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:lvar, :e)))))),
      s(:def, :test_encoding,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "--encoding")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "missing argument for --encoding"),
              s(:regopt))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "--encoding"),
              s(:str, "test_ruby_test_rubyoptions_foobarbazqux")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "unknown encoding name - test_ruby_test_rubyoptions_foobarbazqux \\(RuntimeError\\)"),
              s(:regopt))),
          s(:if,
            s(:and,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "mswin|mingw|aix"),
                  s(:regopt)),
                s(:const, nil, :RUBY_PLATFORM)),
              s(:send,
                s(:begin,
                  s(:lvasgn, :str,
                    s(:send,
                      s(:str, "あ"), :force_encoding,
                      s(:send,
                        s(:const, nil, :Encoding), :find,
                        s(:str, "locale"))))), :valid_encoding?)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :out),
                s(:lvasgn, :err)),
              s(:array,
                s(:array,
                  s(:lvar, :str)),
                s(:array))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :out),
                s(:lvasgn, :err)),
              s(:array,
                s(:array),
                s(:regexp,
                  s(:str, "invalid multibyte char"),
                  s(:regopt))))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-Eutf-8")),
            s(:str, "puts 'あ'"),
            s(:lvar, :out),
            s(:lvar, :err)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "--encoding"),
              s(:str, "utf-8")),
            s(:str, "puts 'あ'"),
            s(:lvar, :out),
            s(:lvar, :err)))),
      s(:def, :test_syntax_check,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array,
            s(:str, "-c"),
            s(:str, "-e"),
            s(:str, "a=1+1"),
            s(:str, "-e"),
            s(:str, "!a")),
          s(:str, ""),
          s(:array,
            s(:str, "Syntax OK")),
          s(:array))),
      s(:def, :test_invalid_option,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "--foobarbazqux")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "invalid option --foobarbazqux"),
              s(:regopt))),
          s(:send, nil, :assert_in_out_err,
            s(:send,
              s(:array,
                s(:str, "-\r"),
                s(:str, "-e")), :+,
              s(:array,
                s(:str, ""))),
            s(:str, ""),
            s(:array),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-\rx")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "invalid option -\\\\x0D  \\(-h will show valid options\\) \\(RuntimeError\\)"),
              s(:regopt))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-\u0001")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "invalid option -\\\\x01  \\(-h will show valid options\\) \\(RuntimeError\\)"),
              s(:regopt))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-Z")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "invalid option -Z  \\(-h will show valid options\\) \\(RuntimeError\\)"),
              s(:regopt))))),
      s(:def, :test_rubyopt,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :rubyopt_orig,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "RUBYOPT"))),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "RUBYOPT"),
              s(:str, " - -")),
            s(:send, nil, :assert_in_out_err,
              s(:array),
              s(:str, ""),
              s(:array),
              s(:array)),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "RUBYOPT"),
              s(:str, "-e \"p 1\"")),
            s(:send, nil, :assert_in_out_err,
              s(:array),
              s(:str, ""),
              s(:array),
              s(:regexp,
                s(:str, "invalid switch in RUBYOPT: -e \\(RuntimeError\\)"),
                s(:regopt))),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "RUBYOPT"),
              s(:str, "-T1")),
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "--disable-gems")),
              s(:str, ""),
              s(:array),
              s(:regexp,
                s(:str, "no program input from stdin allowed in tainted mode \\(SecurityError\\)"),
                s(:regopt))),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "RUBYOPT"),
              s(:str, "-T4")),
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "--disable-gems")),
              s(:str, ""),
              s(:array),
              s(:regexp,
                s(:str, "no program input from stdin allowed in tainted mode \\(SecurityError\\)"),
                s(:regopt))),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "RUBYOPT"),
              s(:str, "-Eus-ascii -KN")),
            s(:block,
              s(:send, nil, :assert_in_out_err,
                s(:array,
                  s(:str, "-Eutf-8"),
                  s(:str, "-KU")),
                s(:str, "p 'あ'")),
              s(:args,
                s(:arg, :r),
                s(:arg, :e)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:str, "\"あ\""),
                  s(:send,
                    s(:send,
                      s(:lvar, :r), :join), :force_encoding,
                    s(:const,
                      s(:const, nil, :Encoding), :UTF_8))),
                s(:send, nil, :assert_equal,
                  s(:array),
                  s(:lvar, :e))))),
          s(:if,
            s(:lvar, :rubyopt_orig),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "RUBYOPT"),
              s(:lvar, :rubyopt_orig)),
            s(:send,
              s(:const, nil, :ENV), :delete,
              s(:str, "RUBYOPT"))))),
      s(:def, :test_search,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :rubypath_orig,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "RUBYPATH"))),
            s(:lvasgn, :path_orig,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "PATH"))),
            s(:block,
              s(:send,
                s(:const, nil, :Tempfile), :create,
                s(:array,
                  s(:str, "test_ruby_test_rubyoption"),
                  s(:str, ".rb"))),
              s(:args,
                s(:arg, :t)),
              s(:begin,
                s(:send,
                  s(:lvar, :t), :puts,
                  s(:str, "p 1")),
                s(:send,
                  s(:lvar, :t), :close),
                s(:ivasgn, :@verbose,
                  s(:gvar, :$VERBOSE)),
                s(:gvasgn, :$VERBOSE,
                  s(:nil)),
                s(:send,
                  s(:const, nil, :ENV), :[]=,
                  s(:str, "PATH"),
                  s(:send,
                    s(:const, nil, :File), :dirname,
                    s(:send,
                      s(:lvar, :t), :path))),
                s(:send, nil, :assert_in_out_err,
                  s(:send,
                    s(:array,
                      s(:str, "-S")), :+,
                    s(:array,
                      s(:send,
                        s(:const, nil, :File), :basename,
                        s(:send,
                          s(:lvar, :t), :path)))),
                  s(:str, ""),
                  s(:array,
                    s(:str, "1")),
                  s(:array)),
                s(:send,
                  s(:const, nil, :ENV), :[]=,
                  s(:str, "RUBYPATH"),
                  s(:send,
                    s(:const, nil, :File), :dirname,
                    s(:send,
                      s(:lvar, :t), :path))),
                s(:send, nil, :assert_in_out_err,
                  s(:send,
                    s(:array,
                      s(:str, "-S")), :+,
                    s(:array,
                      s(:send,
                        s(:const, nil, :File), :basename,
                        s(:send,
                          s(:lvar, :t), :path)))),
                  s(:str, ""),
                  s(:array,
                    s(:str, "1")),
                  s(:array))))),
          s(:begin,
            s(:if,
              s(:lvar, :rubypath_orig),
              s(:send,
                s(:const, nil, :ENV), :[]=,
                s(:str, "RUBYPATH"),
                s(:lvar, :rubypath_orig)),
              s(:send,
                s(:const, nil, :ENV), :delete,
                s(:str, "RUBYPATH"))),
            s(:if,
              s(:lvar, :path_orig),
              s(:send,
                s(:const, nil, :ENV), :[]=,
                s(:str, "PATH"),
                s(:lvar, :path_orig)),
              s(:send,
                s(:const, nil, :ENV), :delete,
                s(:str, "PATH"))),
            s(:gvasgn, :$VERBOSE,
              s(:ivar, :@verbose))))),
      s(:def, :test_shebang,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:str, "#! /test_r_u_b_y_test_r_u_b_y_options_foobarbazqux\r\np 1\r\n"),
            s(:array),
            s(:regexp,
              s(:str, ": no Ruby script found in input"),
              s(:regopt))),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:str, "#! /test_r_u_b_y_test_r_u_b_y_options_foobarbazqux -foo -bar\r\np 1\r\n"),
            s(:array),
            s(:regexp,
              s(:str, ": no Ruby script found in input"),
              s(:regopt))),
          s(:block,
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:hash,
                  s(:pair,
                    s(:str, "RUBYOPT"),
                    s(:nil)))),
              s(:str, "#!ruby -KU -Eutf-8\r\np \"あ\"\r\n")),
            s(:args,
              s(:arg, :r),
              s(:arg, :e)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, "\"あ\""),
                s(:send,
                  s(:send,
                    s(:lvar, :r), :join), :force_encoding,
                  s(:const,
                    s(:const, nil, :Encoding), :UTF_8))),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:lvar, :e)))),
          s(:lvasgn, :bug4118,
            s(:str, "[ruby-dev:42680]")),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "#!/bin/sh\n"),
              s(:str, "#!shebang\n"),
              s(:str, "#!ruby\n"),
              s(:str, "puts __LINE__\n")),
            s(:array,
              s(:str, "4")),
            s(:array),
            s(:lvar, :bug4118)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-x")),
            s(:dstr,
              s(:str, "#!/bin/sh\n"),
              s(:str, "#!shebang\n"),
              s(:str, "#!ruby\n"),
              s(:str, "puts __LINE__\n")),
            s(:array,
              s(:str, "4")),
            s(:array),
            s(:lvar, :bug4118)))),
      s(:def, :test_sflag,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-"),
              s(:str, "-abc"),
              s(:str, "-def=foo"),
              s(:str, "-ghi-jkl"),
              s(:str, "--"),
              s(:str, "-xyz")),
            s(:str, "#!ruby -s\np [$abc, $def, $ghi_jkl, defined?($xyz)]\n"),
            s(:array,
              s(:str, "[true, \"foo\", true, nil]")),
            s(:array)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-"),
              s(:str, "-#")),
            s(:str, "#!ruby -s\n"),
            s(:array),
            s(:regexp,
              s(:str, "invalid name for global variable - -# \\(NameError\\)"),
              s(:regopt))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-"),
              s(:str, "-#=foo")),
            s(:str, "#!ruby -s\n"),
            s(:array),
            s(:regexp,
              s(:str, "invalid name for global variable - -# \\(NameError\\)"),
              s(:regopt))))),
      s(:def, :test_assignment_in_conditional,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Tempfile), :create,
            s(:array,
              s(:str, "test_ruby_test_rubyoption"),
              s(:str, ".rb"))),
          s(:args,
            s(:arg, :t)),
          s(:begin,
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "if a = 1")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "end")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "0.times do")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "  if b = 2")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "    a += b")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "  end")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "end")),
            s(:send,
              s(:lvar, :t), :flush),
            s(:lvasgn, :warning,
              s(:str, " warning: found = in conditional, should be ==")),
            s(:lvasgn, :err,
              s(:array,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :t), :path)),
                  s(:str, ":1:"),
                  s(:begin,
                    s(:lvar, :warning))),
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :t), :path)),
                  s(:str, ":4:"),
                  s(:begin,
                    s(:lvar, :warning))))),
            s(:lvasgn, :bug2136,
              s(:str, "[ruby-dev:39363]")),
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-w"),
                s(:send,
                  s(:lvar, :t), :path)),
              s(:str, ""),
              s(:array),
              s(:lvar, :err),
              s(:lvar, :bug2136)),
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-wr"),
                s(:send,
                  s(:lvar, :t), :path),
                s(:str, "-e"),
                s(:str, "")),
              s(:str, ""),
              s(:array),
              s(:lvar, :err),
              s(:lvar, :bug2136)),
            s(:send,
              s(:lvar, :t), :rewind),
            s(:send,
              s(:lvar, :t), :truncate,
              s(:int, 0)),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "if a = ''; end")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "if a = []; end")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "if a = [1]; end")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "if a = [a]; end")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "if a = {}; end")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "if a = {1=>2}; end")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "if a = {3=>a}; end")),
            s(:send,
              s(:lvar, :t), :flush),
            s(:lvasgn, :err,
              s(:array,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :t), :path)),
                  s(:str, ":1:"),
                  s(:begin,
                    s(:lvar, :warning))),
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :t), :path)),
                  s(:str, ":2:"),
                  s(:begin,
                    s(:lvar, :warning))),
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :t), :path)),
                  s(:str, ":3:"),
                  s(:begin,
                    s(:lvar, :warning))),
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :t), :path)),
                  s(:str, ":5:"),
                  s(:begin,
                    s(:lvar, :warning))),
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :t), :path)),
                  s(:str, ":6:"),
                  s(:begin,
                    s(:lvar, :warning))))),
            s(:lvasgn, :feature4299,
              s(:str, "[ruby-dev:43083]")),
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-w"),
                s(:send,
                  s(:lvar, :t), :path)),
              s(:str, ""),
              s(:array),
              s(:lvar, :err),
              s(:lvar, :feature4299)),
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-wr"),
                s(:send,
                  s(:lvar, :t), :path),
                s(:str, "-e"),
                s(:str, "")),
              s(:str, ""),
              s(:array),
              s(:lvar, :err),
              s(:lvar, :feature4299))))),
      s(:def, :test_indentation_check,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Tempfile), :create,
            s(:array,
              s(:str, "test_ruby_test_rubyoption"),
              s(:str, ".rb"))),
          s(:args,
            s(:arg, :t)),
          s(:begin,
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "begin")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, " end")),
            s(:send,
              s(:lvar, :t), :flush),
            s(:lvasgn, :err,
              s(:array,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :t), :path)),
                  s(:str, ":2: warning: mismatched indentations at 'end' with 'begin' at 1")))),
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-w"),
                s(:send,
                  s(:lvar, :t), :path)),
              s(:str, ""),
              s(:array),
              s(:lvar, :err)),
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-wr"),
                s(:send,
                  s(:lvar, :t), :path),
                s(:str, "-e"),
                s(:str, "")),
              s(:str, ""),
              s(:array),
              s(:lvar, :err)),
            s(:send,
              s(:lvar, :t), :rewind),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "# -*- warn-indent: false -*-")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "begin")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, " end")),
            s(:send,
              s(:lvar, :t), :flush),
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-w"),
                s(:send,
                  s(:lvar, :t), :path)),
              s(:str, ""),
              s(:array),
              s(:array),
              s(:str, "[ruby-core:25442]")),
            s(:lvasgn, :err,
              s(:array,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :t), :path)),
                  s(:str, ":4: warning: mismatched indentations at 'end' with 'begin' at 3")))),
            s(:send,
              s(:lvar, :t), :rewind),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "# -*- warn-indent: false -*-")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "# -*- warn-indent: true -*-")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "begin")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, " end")),
            s(:send,
              s(:lvar, :t), :flush),
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-w"),
                s(:send,
                  s(:lvar, :t), :path)),
              s(:str, ""),
              s(:array),
              s(:lvar, :err),
              s(:str, "[ruby-core:25442]")),
            s(:lvasgn, :err,
              s(:array,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :t), :path)),
                  s(:str, ":4: warning: mismatched indentations at 'end' with 'begin' at 2")))),
            s(:send,
              s(:lvar, :t), :rewind),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "# -*- warn-indent: true -*-")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "begin")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "# -*- warn-indent: false -*-")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, " end")),
            s(:send,
              s(:lvar, :t), :flush),
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-w"),
                s(:send,
                  s(:lvar, :t), :path)),
              s(:str, ""),
              s(:array),
              s(:array),
              s(:str, "[ruby-core:25442]"))))),
      s(:def, :test_notfound,
        s(:args),
        s(:begin,
          s(:lvasgn, :notexist,
            s(:str, "./notexist.rb")),
          s(:lvasgn, :rubybin,
            s(:send,
              s(:send,
                s(:const, nil, :EnvUtil), :rubybin), :dup)),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "mswin|mingw"),
                s(:regopt)),
              s(:const, nil, :RUBY_PLATFORM)),
            s(:send,
              s(:lvar, :rubybin), :gsub!,
              s(:regexp,
                s(:str, "/"),
                s(:regopt)),
              s(:str, "\\")), nil),
          s(:lvasgn, :rubybin,
            s(:send,
              s(:const, nil, :Regexp), :quote,
              s(:lvar, :rubybin))),
          s(:lvasgn, :pat,
            s(:send,
              s(:const, nil, :Regexp), :quote,
              s(:lvar, :notexist))),
          s(:lvasgn, :bug1573,
            s(:str, "[ruby-core:23717]")),
          s(:send,
            s(:send, nil, :assert_file), :not_exist?,
            s(:lvar, :notexist)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-r"),
              s(:lvar, :notexist),
              s(:str, "-ep")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, ".* -- "),
              s(:begin,
                s(:lvar, :pat)),
              s(:str, " \\(LoadError\\)"),
              s(:regopt)),
            s(:lvar, :bug1573)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:lvar, :notexist)),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:begin,
                s(:lvar, :rubybin)),
              s(:str, ":.* -- "),
              s(:begin,
                s(:lvar, :pat)),
              s(:str, " \\(LoadError\\)"),
              s(:regopt)),
            s(:lvar, :bug1573)))),
      s(:def, :test_program_name,
        s(:args),
        s(:begin,
          s(:lvasgn, :ruby,
            s(:send,
              s(:const, nil, :EnvUtil), :rubybin)),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:lvar, :ruby),
                s(:str, "-e"),
                s(:str, "print $0"))),
            s(:args,
              s(:arg, :f)),
            s(:send, nil, :assert_equal,
              s(:str, "-e"),
              s(:send,
                s(:lvar, :f), :read))),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:lvar, :ruby),
                s(:str, "-")),
              s(:str, "r+")),
            s(:args,
              s(:arg, :f)),
            s(:begin,
              s(:send,
                s(:lvar, :f), :<<,
                s(:str, "print $0")),
              s(:send,
                s(:lvar, :f), :close_write),
              s(:send, nil, :assert_equal,
                s(:str, "-"),
                s(:send,
                  s(:lvar, :f), :read)))),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :mktmpdir),
            s(:args,
              s(:arg, :d)),
            s(:begin,
              s(:lvasgn, :n1,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :d),
                  s(:str, "t1"))),
              s(:block,
                s(:send, nil, :open,
                  s(:lvar, :n1),
                  s(:str, "w")),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:lvar, :f), :<<,
                  s(:str, "print $0"))),
              s(:block,
                s(:send,
                  s(:const, nil, :IO), :popen,
                  s(:array,
                    s(:lvar, :ruby),
                    s(:lvar, :n1))),
                s(:args,
                  s(:arg, :f)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :n1),
                  s(:send,
                    s(:lvar, :f), :read))),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :respond_to?,
                  s(:sym, :symlink)),
                s(:begin,
                  s(:lvasgn, :n2,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:lvar, :d),
                      s(:str, "t2"))),
                  s(:kwbegin,
                    s(:rescue,
                      s(:send,
                        s(:const, nil, :File), :symlink,
                        s(:lvar, :n1),
                        s(:lvar, :n2)),
                      s(:resbody,
                        s(:array,
                          s(:const,
                            s(:const, nil, :Errno), :EACCES)), nil, nil),
                      s(:block,
                        s(:send,
                          s(:const, nil, :IO), :popen,
                          s(:array,
                            s(:lvar, :ruby),
                            s(:lvar, :n2))),
                        s(:args,
                          s(:arg, :f)),
                        s(:send, nil, :assert_equal,
                          s(:lvar, :n2),
                          s(:send,
                            s(:lvar, :f), :read)))))), nil),
              s(:block,
                s(:send,
                  s(:const, nil, :Dir), :chdir,
                  s(:lvar, :d)),
                s(:args),
                s(:begin,
                  s(:lvasgn, :n3,
                    s(:str, "-e")),
                  s(:block,
                    s(:send, nil, :open,
                      s(:lvar, :n3),
                      s(:str, "w")),
                    s(:args,
                      s(:arg, :f)),
                    s(:send,
                      s(:lvar, :f), :<<,
                      s(:str, "print $0"))),
                  s(:block,
                    s(:send,
                      s(:const, nil, :IO), :popen,
                      s(:array,
                        s(:lvar, :ruby),
                        s(:str, "--"),
                        s(:lvar, :n3))),
                    s(:args,
                      s(:arg, :f)),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :n3),
                      s(:send,
                        s(:lvar, :f), :read))),
                  s(:lvasgn, :n4,
                    s(:str, "-")),
                  s(:block,
                    s(:send,
                      s(:const, nil, :IO), :popen,
                      s(:array,
                        s(:lvar, :ruby),
                        s(:str, "--"),
                        s(:lvar, :n4)),
                      s(:str, "r+")),
                    s(:args,
                      s(:arg, :f)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :f), :<<,
                        s(:str, "print $0")),
                      s(:send,
                        s(:lvar, :f), :close_write),
                      s(:send, nil, :assert_equal,
                        s(:lvar, :n4),
                        s(:send,
                          s(:lvar, :f), :read)))))))))),
      s(:if,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "linux|freebsd|netbsd|openbsd|darwin"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM)),
        s(:begin,
          s(:casgn, nil, :PSCMD,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :find_executable,
                s(:str, "ps"),
                s(:str, "-o"),
                s(:str, "command"),
                s(:str, "-p"),
                s(:send,
                  s(:gvar, :$$), :to_s)),
              s(:args,
                s(:arg, :out)),
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "ruby"),
                  s(:regopt)),
                s(:lvar, :out)))),
          s(:if,
            s(:const, nil, :PSCMD),
            s(:send,
              s(:const, nil, :PSCMD), :pop), nil)), nil),
      s(:def, :test_set_program_name,
        s(:args),
        s(:begin,
          s(:if,
            s(:and,
              s(:defined?,
                s(:const, nil, :PSCMD)),
              s(:const, nil, :PSCMD)), nil,
            s(:send, nil, :skip,
              s(:str, "platform dependent feature"))),
          s(:block,
            s(:send, nil, :with_tmpchdir),
            s(:args),
            s(:begin,
              s(:send, nil, :write_file,
                s(:str, "test-script"),
                s(:str, "$0 = 'hello world'; /test-script/ =~ Process.argv0 or $0 = 'Process.argv0 changed!'; sleep 60")),
              s(:lvasgn, :pid,
                s(:send, nil, :spawn,
                  s(:send,
                    s(:const, nil, :EnvUtil), :rubybin),
                  s(:str, "test-script"))),
              s(:lvasgn, :ps,
                s(:nil)),
              s(:block,
                s(:send,
                  s(:int, 10), :times),
                s(:args),
                s(:begin,
                  s(:send, nil, :sleep,
                    s(:float, 0.1)),
                  s(:lvasgn, :ps,
                    s(:xstr,
                      s(:begin,
                        s(:send,
                          s(:const, nil, :PSCMD), :join,
                          s(:str, " "))),
                      s(:str, " "),
                      s(:begin,
                        s(:lvar, :pid)))),
                  s(:if,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "hello world"),
                        s(:regopt)),
                      s(:lvar, :ps)),
                    s(:break), nil))),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "hello world"),
                  s(:regopt)),
                s(:lvar, :ps)),
              s(:send,
                s(:const, nil, :Process), :kill,
                s(:sym, :KILL),
                s(:lvar, :pid)),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:lvar, :pid)))))),
      s(:def, :test_setproctitle,
        s(:args),
        s(:begin,
          s(:if,
            s(:and,
              s(:defined?,
                s(:const, nil, :PSCMD)),
              s(:const, nil, :PSCMD)), nil,
            s(:send, nil, :skip,
              s(:str, "platform dependent feature"))),
          s(:block,
            s(:send, nil, :with_tmpchdir),
            s(:args),
            s(:begin,
              s(:send, nil, :write_file,
                s(:str, "test-script"),
                s(:str, "$_0 = $0.dup; Process.setproctitle('hello world'); $0 == $_0 or Process.setproctitle('$0 changed!'); sleep 60")),
              s(:lvasgn, :pid,
                s(:send, nil, :spawn,
                  s(:send,
                    s(:const, nil, :EnvUtil), :rubybin),
                  s(:str, "test-script"))),
              s(:lvasgn, :ps,
                s(:nil)),
              s(:block,
                s(:send,
                  s(:int, 10), :times),
                s(:args),
                s(:begin,
                  s(:send, nil, :sleep,
                    s(:float, 0.1)),
                  s(:lvasgn, :ps,
                    s(:xstr,
                      s(:begin,
                        s(:send,
                          s(:const, nil, :PSCMD), :join,
                          s(:str, " "))),
                      s(:str, " "),
                      s(:begin,
                        s(:lvar, :pid)))),
                  s(:if,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "hello world"),
                        s(:regopt)),
                      s(:lvar, :ps)),
                    s(:break), nil))),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "hello world"),
                  s(:regopt)),
                s(:lvar, :ps)),
              s(:send,
                s(:const, nil, :Process), :kill,
                s(:sym, :KILL),
                s(:lvar, :pid)),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:lvar, :pid)))))),
      s(:module,
        s(:const, nil, :SEGVTest),
        s(:begin,
          s(:lvasgn, :opts,
            s(:hash)),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "mswin|mingw"),
                s(:regopt)),
              s(:const, nil, :RUBY_PLATFORM)),
            s(:lvasgn, :additional,
              s(:regexp,
                s(:str, "[\\s\\w\\.\\']*"),
                s(:regopt))),
            s(:begin,
              s(:send,
                s(:lvar, :opts), :[]=,
                s(:sym, :rlimit_core),
                s(:int, 0)),
              s(:lvasgn, :additional,
                s(:nil)))),
          s(:casgn, nil, :ExecOptions,
            s(:send,
              s(:lvar, :opts), :freeze)),
          s(:casgn, nil, :ExpectedStderrList,
            s(:array,
              s(:regexp,
                s(:str, "\n"),
                s(:str, "        -e:(?:1:)?\\s\\[BUG\\]\\sSegmentation\\sfault.*\\n\n"),
                s(:str, "      "),
                s(:regopt, :x)),
              s(:regexp,
                s(:str, "\n"),
                s(:str, "        "),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Regexp), :quote,
                    s(:const, nil, :RUBY_DESCRIPTION))),
                s(:str, "\\n\\n\n"),
                s(:str, "      "),
                s(:regopt, :x)),
              s(:regexp,
                s(:str, "\n"),
                s(:str, "        (?:--\\s(?:.+\\n)*\\n)?\n"),
                s(:str, "        --\\sControl\\sframe\\sinformation\\s-+\\n\n"),
                s(:str, "        (?:c:.*\\n)*\n"),
                s(:str, "      "),
                s(:regopt, :x)),
              s(:regexp,
                s(:str, "\n"),
                s(:str, "        (?:\n"),
                s(:str, "        --\\sRuby\\slevel\\sbacktrace\\sinformation\\s----------------------------------------\\n\n"),
                s(:str, "        -e:1:in\\s\\`<main>\\'\\n\n"),
                s(:str, "        -e:1:in\\s\\`kill\\'\\n\n"),
                s(:str, "        )?\n"),
                s(:str, "      "),
                s(:regopt, :x)),
              s(:regexp,
                s(:str, "\n"),
                s(:str, "        (?:\n"),
                s(:str, "          --\\sC\\slevel\\sbacktrace\\sinformation\\s-------------------------------------------\\n\n"),
                s(:str, "          (?:(?:.*\\s)?\\[0x\\h+\\]\\n)*\\n\n"),
                s(:str, "        )?\n"),
                s(:str, "      "),
                s(:regopt, :x)),
              s(:sym, :*),
              s(:regexp,
                s(:str, "\n"),
                s(:str, "        \\[NOTE\\]\\n\n"),
                s(:str, "        You\\smay\\shave\\sencountered\\sa\\sbug\\sin\\sthe\\sRuby\\sinterpreter\\sor\\sextension\\slibraries.\\n\n"),
                s(:str, "        Bug\\sreports\\sare\\swelcome.\\n\n"),
                s(:str, "        (?:.*\\n)?\n"),
                s(:str, "        For\\sdetails:\\shttp:\\/\\/.*\\.ruby-lang\\.org/.*\\n\n"),
                s(:str, "        \\n\n"),
                s(:str, "      "),
                s(:regopt, :x)))),
          s(:if,
            s(:lvar, :additional),
            s(:send,
              s(:const, nil, :ExpectedStderrList), :<<,
              s(:lvar, :additional)), nil))),
      s(:def, :assert_segv,
        s(:args,
          s(:arg, :args),
          s(:optarg, :message,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :test_stdin,
            s(:str, "")),
          s(:lvasgn, :opt,
            s(:send,
              s(:const,
                s(:const, nil, :SEGVTest), :ExecOptions), :dup)),
          s(:lvasgn, :list,
            s(:const,
              s(:const, nil, :SEGVTest), :ExpectedStderrList)),
          s(:send, nil, :assert_in_out_err,
            s(:lvar, :args),
            s(:lvar, :test_stdin),
            s(:regexp,
              s(:regopt)),
            s(:lvar, :list),
            s(:hash,
              s(:pair,
                s(:sym, :encoding),
                s(:str, "ASCII-8BIT")),
              s(:kwsplat,
                s(:lvar, :opt)))))),
      s(:def, :test_segv_test,
        s(:args),
        s(:send, nil, :assert_segv,
          s(:array,
            s(:str, "--disable-gems"),
            s(:str, "-e"),
            s(:str, "Process.kill :SEGV, $$")))),
      s(:def, :test_segv_loaded_features,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7402,
            s(:str, "[ruby-core:49573]")),
          s(:lvasgn, :status,
            s(:send, nil, :assert_segv,
              s(:array,
                s(:str, "-e"),
                s(:str, "END {Process.kill :SEGV, $$}"),
                s(:str, "-e"),
                s(:str, "class Bogus; def to_str; exit true; end; end"),
                s(:str, "-e"),
                s(:str, "$\".clear"),
                s(:str, "-e"),
                s(:str, "$\".unshift Bogus.new"),
                s(:str, "-e"),
                s(:str, "(p $\"; abort) unless $\".size == 1")))),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :status),
            s(:sym, :success?),
            s(:dstr,
              s(:str, "segv but success "),
              s(:begin,
                s(:lvar, :bug7402)))))),
      s(:def, :test_segv_setproctitle,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7597,
            s(:str, "[ruby-dev:46786]")),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:array,
                s(:str, "test_ruby_test_bug7597"),
                s(:str, ".rb"))),
            s(:args,
              s(:arg, :t)),
            s(:begin,
              s(:send,
                s(:lvar, :t), :write,
                s(:send,
                  s(:str, "f"), :*,
                  s(:int, 100))),
              s(:send,
                s(:lvar, :t), :flush),
              s(:send, nil, :assert_segv,
                s(:array,
                  s(:str, "--disable-gems"),
                  s(:str, "-e"),
                  s(:str, "$0=ARGV[0]; Process.kill :SEGV, $$"),
                  s(:send,
                    s(:lvar, :t), :path)),
                s(:lvar, :bug7597)))))),
      s(:def, :test_DATA,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Tempfile), :create,
            s(:array,
              s(:str, "test_ruby_test_rubyoption"),
              s(:str, ".rb"))),
          s(:args,
            s(:arg, :t)),
          s(:begin,
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "puts DATA.read.inspect")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "__END__")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "foo")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "bar")),
            s(:send,
              s(:lvar, :t), :puts,
              s(:str, "baz")),
            s(:send,
              s(:lvar, :t), :flush),
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:send,
                  s(:lvar, :t), :path)),
              s(:str, ""),
              s(:array,
                s(:str, "\"foo\\nbar\\nbaz\\n\"")),
              s(:array))))),
      s(:def, :test_unused_variable,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature3446,
            s(:str, "[ruby-dev:41620]")),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-we"),
              s(:str, "a=1")),
            s(:str, ""),
            s(:array),
            s(:array),
            s(:lvar, :feature3446)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-we"),
              s(:str, "def foo\n  a=1\nend")),
            s(:str, ""),
            s(:array),
            s(:array,
              s(:str, "-e:2: warning: assigned but unused variable - a")),
            s(:lvar, :feature3446)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-we"),
              s(:str, "def foo\n  eval('a=1')\nend")),
            s(:str, ""),
            s(:array),
            s(:array),
            s(:lvar, :feature3446)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-we"),
              s(:str, "1.times do\n  a=1\nend")),
            s(:str, ""),
            s(:array),
            s(:array),
            s(:lvar, :feature3446)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-we"),
              s(:str, "def foo\n  1.times do\n    a=1\n  end\nend")),
            s(:str, ""),
            s(:array),
            s(:array,
              s(:str, "-e:3: warning: assigned but unused variable - a")),
            s(:lvar, :feature3446)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-we"),
              s(:dstr,
                s(:str, "def foo\n"),
                s(:str, "  1.times do |a| end\n"),
                s(:str, "end"))),
            s(:str, ""),
            s(:array),
            s(:array)),
          s(:lvasgn, :feature6693,
            s(:str, "[ruby-core:46160]")),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-we"),
              s(:str, "def foo\n  _a=1\nend")),
            s(:str, ""),
            s(:array),
            s(:array),
            s(:lvar, :feature6693)),
          s(:lvasgn, :bug7408,
            s(:str, "[ruby-core:49659]")),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-we"),
              s(:str, "def foo\n  a=1\n :a\nend")),
            s(:str, ""),
            s(:array),
            s(:array,
              s(:str, "-e:2: warning: assigned but unused variable - a")),
            s(:lvar, :bug7408)),
          s(:lvasgn, :feature7730,
            s(:str, "[ruby-core:51580]")),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-w"),
              s(:str, "-")),
            s(:str, "a=1"),
            s(:array),
            s(:array,
              s(:str, "-:1: warning: assigned but unused variable - a")),
            s(:lvar, :feature7730)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-w"),
              s(:str, "-")),
            s(:str, "eval('a=1')"),
            s(:array),
            s(:array),
            s(:lvar, :feature7730)))),
      s(:def, :test_shadowing_variable,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug4130,
            s(:str, "[ruby-dev:42718]")),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-we"),
              s(:dstr,
                s(:str, "def foo\n"),
                s(:str, "  a=1\n"),
                s(:str, "  1.times do |a| end\n"),
                s(:str, "  a\n"),
                s(:str, "end"))),
            s(:str, ""),
            s(:array),
            s(:array,
              s(:str, "-e:3: warning: shadowing outer local variable - a")),
            s(:lvar, :bug4130)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-we"),
              s(:dstr,
                s(:str, "def foo\n"),
                s(:str, "  a=1\n"),
                s(:str, "  1.times do |a| end\n"),
                s(:str, "end"))),
            s(:str, ""),
            s(:array),
            s(:array,
              s(:str, "-e:3: warning: shadowing outer local variable - a"),
              s(:str, "-e:2: warning: assigned but unused variable - a")),
            s(:lvar, :bug4130)),
          s(:lvasgn, :feature6693,
            s(:str, "[ruby-core:46160]")),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-we"),
              s(:dstr,
                s(:str, "def foo\n"),
                s(:str, "  _a=1\n"),
                s(:str, "  1.times do |_a| end\n"),
                s(:str, "end"))),
            s(:str, ""),
            s(:array),
            s(:array),
            s(:lvar, :feature6693)))),
      s(:def, :test_script_from_stdin,
        s(:args),
        s(:begin,
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:send, nil, :require,
                  s(:str, "pty")),
                s(:send, nil, :require,
                  s(:str, "io/console"))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :LoadError)), nil,
                s(:return)), nil)),
          s(:send, nil, :require,
            s(:str, "timeout")),
          s(:lvasgn, :result,
            s(:nil)),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :pipe),
            s(:args,
              s(:arg, :r),
              s(:arg, :w)),
            s(:kwbegin,
              s(:rescue,
                s(:block,
                  s(:send,
                    s(:const, nil, :PTY), :open),
                  s(:args,
                    s(:arg, :m),
                    s(:arg, :s)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :s), :echo=,
                      s(:false)),
                    s(:send,
                      s(:lvar, :m), :print,
                      s(:str, "\u0004")),
                    s(:lvasgn, :pid,
                      s(:send, nil, :spawn,
                        s(:send,
                          s(:const, nil, :EnvUtil), :rubybin),
                        s(:hash,
                          s(:pair,
                            s(:sym, :in),
                            s(:lvar, :s)),
                          s(:pair,
                            s(:sym, :out),
                            s(:lvar, :w))))),
                    s(:send,
                      s(:lvar, :w), :close),
                    s(:block,
                      s(:send, nil, :assert_nothing_raised,
                        s(:str, "[ruby-dev:37798]")),
                      s(:args),
                      s(:lvasgn, :result,
                        s(:block,
                          s(:send,
                            s(:const, nil, :Timeout), :timeout,
                            s(:int, 3)),
                          s(:args),
                          s(:send,
                            s(:lvar, :r), :read)))),
                    s(:send,
                      s(:const, nil, :Process), :wait,
                      s(:lvar, :pid)))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :RuntimeError)), nil,
                  s(:send, nil, :skip,
                    s(:gvar, :$!))), nil))),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:lvar, :result),
            s(:str, "[ruby-dev:37798]")),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :pipe),
            s(:args,
              s(:arg, :r),
              s(:arg, :w)),
            s(:block,
              s(:send,
                s(:const, nil, :PTY), :open),
              s(:args,
                s(:arg, :m),
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :echo=,
                  s(:false)),
                s(:lvasgn, :pid,
                  s(:send, nil, :spawn,
                    s(:send,
                      s(:const, nil, :EnvUtil), :rubybin),
                    s(:hash,
                      s(:pair,
                        s(:sym, :in),
                        s(:lvar, :s)),
                      s(:pair,
                        s(:sym, :out),
                        s(:lvar, :w))))),
                s(:send,
                  s(:lvar, :w), :close),
                s(:send,
                  s(:lvar, :m), :print,
                  s(:str, "$stdin.read; p $stdin.gets\n\u0004")),
                s(:send,
                  s(:lvar, :m), :print,
                  s(:str, "abc\n\u0004")),
                s(:send,
                  s(:lvar, :m), :print,
                  s(:str, "zzz\n")),
                s(:lvasgn, :result,
                  s(:send,
                    s(:lvar, :r), :read)),
                s(:send,
                  s(:const, nil, :Process), :wait,
                  s(:lvar, :pid))))),
          s(:send, nil, :assert_equal,
            s(:str, "\"zzz\\n\"\n"),
            s(:lvar, :result),
            s(:str, "[ruby-core:30910]")))),
      s(:def, :test_unmatching_glob,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug3851,
            s(:str, "[ruby-core:32478]")),
          s(:lvasgn, :a,
            s(:str, "a[foo")),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :mktmpdir),
            s(:args,
              s(:arg, :dir)),
            s(:begin,
              s(:block,
                s(:send, nil, :open,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:lvar, :dir),
                    s(:lvar, :a)),
                  s(:str, "w")),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:lvar, :f), :puts,
                  s(:str, "p 42"))),
              s(:send, nil, :assert_in_out_err,
                s(:array,
                  s(:str, "-C"),
                  s(:lvar, :dir),
                  s(:lvar, :a)),
                s(:str, ""),
                s(:array,
                  s(:str, "42")),
                s(:array),
                s(:lvar, :bug3851)),
              s(:send,
                s(:const, nil, :File), :unlink,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :dir),
                  s(:lvar, :a))),
              s(:send, nil, :assert_in_out_err,
                s(:array,
                  s(:str, "-C"),
                  s(:lvar, :dir),
                  s(:lvar, :a)),
                s(:str, ""),
                s(:array),
                s(:regexp,
                  s(:str, "LoadError"),
                  s(:regopt)),
                s(:lvar, :bug3851)))))),
      s(:case,
        s(:const, nil, :RUBY_PLATFORM),
        s(:when,
          s(:regexp,
            s(:str, "mswin|mingw"),
            s(:regopt)),
          s(:begin,
            s(:def, :test_command_line_glob_nonascii,
              s(:args),
              s(:begin,
                s(:lvasgn, :bug10555,
                  s(:str, "[ruby-dev:48752] [Bug #10555]")),
                s(:lvasgn, :name,
                  s(:str, "あ.txt")),
                s(:lvasgn, :expected,
                  s(:rescue,
                    s(:send,
                      s(:lvar, :name), :encode,
                      s(:str, "locale")),
                    s(:resbody, nil, nil,
                      s(:str, "?.txt")), nil)),
                s(:block,
                  s(:send, nil, :with_tmpchdir),
                  s(:args,
                    s(:arg, :dir)),
                  s(:begin,
                    s(:block,
                      s(:send, nil, :open,
                        s(:lvar, :name),
                        s(:str, "w")),
                      s(:args), nil),
                    s(:send, nil, :assert_in_out_err,
                      s(:array,
                        s(:str, "-e"),
                        s(:str, "puts ARGV"),
                        s(:str, "?.txt")),
                      s(:str, ""),
                      s(:array,
                        s(:lvar, :expected)),
                      s(:array),
                      s(:lvar, :bug10555),
                      s(:hash,
                        s(:pair,
                          s(:sym, :encoding),
                          s(:str, "locale")))))))),
            s(:def, :test_command_line_progname_nonascii,
              s(:args),
              s(:begin,
                s(:lvasgn, :bug10555,
                  s(:str, "[ruby-dev:48752] [Bug #10555]")),
                s(:lvasgn, :name,
                  s(:lvasgn, :expected,
                    s(:nil))),
                s(:if,
                  s(:block,
                    s(:send,
                      s(:begin,
                        s(:irange,
                          s(:int, 128),
                          s(:int, 65536))), :any?),
                    s(:args,
                      s(:arg, :c)),
                    s(:begin,
                      s(:lvasgn, :name,
                        s(:send,
                          s(:lvar, :c), :chr,
                          s(:const,
                            s(:const, nil, :Encoding), :UTF_8))),
                      s(:lvasgn, :expected,
                        s(:rescue,
                          s(:send,
                            s(:lvar, :name), :encode,
                            s(:str, "locale")),
                          s(:resbody, nil, nil,
                            s(:nil)), nil)))), nil,
                  s(:send, nil, :skip,
                    s(:str, "can't make locale name"))),
                s(:send,
                  s(:lvar, :name), :<<,
                  s(:str, ".rb")),
                s(:send,
                  s(:lvar, :expected), :<<,
                  s(:str, ".rb")),
                s(:block,
                  s(:send, nil, :with_tmpchdir),
                  s(:args,
                    s(:arg, :dir)),
                  s(:begin,
                    s(:block,
                      s(:send, nil, :open,
                        s(:lvar, :name),
                        s(:str, "w")),
                      s(:args,
                        s(:arg, :f)),
                      s(:send,
                        s(:lvar, :f), :puts,
                        s(:str, "puts File.basename($0)"))),
                    s(:send, nil, :assert_in_out_err,
                      s(:array,
                        s(:lvar, :name)),
                      s(:str, ""),
                      s(:array,
                        s(:lvar, :expected)),
                      s(:array),
                      s(:lvar, :bug10555),
                      s(:hash,
                        s(:pair,
                          s(:sym, :encoding),
                          s(:str, "locale")))))))),
            s(:def, :test_command_line_glob_with_dir,
              s(:args),
              s(:begin,
                s(:lvasgn, :bug10941,
                  s(:str, "[ruby-core:68430] [Bug #10941]")),
                s(:block,
                  s(:send, nil, :with_tmpchdir),
                  s(:args,
                    s(:arg, :dir)),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Dir), :mkdir,
                      s(:str, "test")),
                    s(:send, nil, :assert_in_out_err,
                      s(:array,
                        s(:str, "-e"),
                        s(:str, ""),
                        s(:str, "test/*")),
                      s(:str, ""),
                      s(:array),
                      s(:array),
                      s(:lvar, :bug10941)))))),
            s(:casgn, nil, :Ougai,
              s(:array,
                s(:str, "森O外.txt"),
                s(:str, "森鴎外.txt"),
                s(:str, "森鷗外.txt"))),
            s(:def, :test_command_line_glob_noncodepage,
              s(:args),
              s(:block,
                s(:send, nil, :with_tmpchdir),
                s(:args,
                  s(:arg, :dir)),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Ougai), :each),
                    s(:args,
                      s(:arg, :f)),
                    s(:block,
                      s(:send, nil, :open,
                        s(:lvar, :f),
                        s(:str, "w")),
                      s(:args), nil)),
                  s(:send, nil, :assert_in_out_err,
                    s(:array,
                      s(:str, "-Eutf-8"),
                      s(:str, "-e"),
                      s(:str, "puts ARGV"),
                      s(:str, "*")),
                    s(:str, ""),
                    s(:const, nil, :Ougai),
                    s(:hash,
                      s(:pair,
                        s(:sym, :encoding),
                        s(:str, "utf-8")))),
                  s(:lvasgn, :ougai,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Ougai), :map),
                      s(:args,
                        s(:arg, :f)),
                      s(:send,
                        s(:lvar, :f), :encode,
                        s(:str, "locale"),
                        s(:hash,
                          s(:pair,
                            s(:sym, :replace),
                            s(:str, "?")))))),
                  s(:send, nil, :assert_in_out_err,
                    s(:array,
                      s(:str, "-e"),
                      s(:str, "puts ARGV"),
                      s(:str, "*.txt")),
                    s(:str, ""),
                    s(:lvar, :ougai))))))),
        s(:when,
          s(:regexp,
            s(:str, "cygwin"),
            s(:regopt)),
          s(:def, :test_command_line_non_ascii,
            s(:args),
            s(:send, nil, :assert_separately,
              s(:array,
                s(:hash,
                  s(:pair,
                    s(:str, "LC_ALL"),
                    s(:str, "ja_JP.SJIS"))),
                s(:str, "-"),
                s(:send,
                  s(:str, "あ"), :encode,
                  s(:str, "SJIS"))),
              s(:dstr,
                s(:str, "        bug12184 = '[ruby-dev:49519] [Bug #12184]'\n"),
                s(:str, "        a = ARGV[0]\n"),
                s(:str, "        assert_equal([Encoding::SJIS, 130, 160], [a.encoding, *a.bytes], bug12184)\n"))))), nil),
      s(:def, :test_script_is_directory,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature2408,
            s(:str, "[ruby-core:26925]")),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, ".")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "Is a directory -- \\."),
              s(:regopt)),
            s(:lvar, :feature2408)))),
      s(:def, :test_pflag_gsub,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7157,
            s(:str, "[ruby-core:47967]")),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-p"),
              s(:str, "-e"),
              s(:str, "gsub(/t.*/){\"TEST\"}")),
            s(:str, "test"),
            s(:array,
              s(:str, "TEST")),
            s(:array),
            s(:lvar, :bug7157)))),
      s(:def, :test_pflag_sub,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7157,
            s(:str, "[ruby-core:47967]")),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-p"),
              s(:str, "-e"),
              s(:str, "sub(/t.*/){\"TEST\"}")),
            s(:str, "test"),
            s(:array,
              s(:str, "TEST")),
            s(:array),
            s(:lvar, :bug7157)))),
      s(:def, :assert_norun_with_rflag,
        s(:args,
          s(:arg, :opt)),
        s(:begin,
          s(:lvasgn, :bug10435,
            s(:dstr,
              s(:str, "[ruby-dev:48712] [Bug #10435]: should not run with "),
              s(:begin,
                s(:lvar, :opt)),
              s(:str, " option"))),
          s(:lvasgn, :stderr,
            s(:array)),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:array,
                s(:str, "bug10435-"),
                s(:str, ".rb"))),
            s(:args,
              s(:arg, :script)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :dir),
                  s(:lvasgn, :base)),
                s(:send,
                  s(:const, nil, :File), :split,
                  s(:send,
                    s(:lvar, :script), :path))),
              s(:send,
                s(:lvar, :script), :puts,
                s(:str, "abort ':run'")),
              s(:send,
                s(:lvar, :script), :close),
              s(:lvasgn, :opts,
                s(:array,
                  s(:str, "-C"),
                  s(:lvar, :dir),
                  s(:str, "-r"),
                  s(:dstr,
                    s(:str, "./"),
                    s(:begin,
                      s(:lvar, :base))),
                  s(:lvar, :opt))),
              s(:block,
                s(:send, nil, :assert_in_out_err,
                  s(:array,
                    s(:splat,
                      s(:lvar, :opts)),
                    s(:str, "-ep"))),
                s(:args,
                  s(:arg, :_),
                  s(:arg, :e)),
                s(:send,
                  s(:lvar, :stderr), :concat,
                  s(:lvar, :e))),
              s(:send,
                s(:lvar, :stderr), :<<,
                s(:str, "---")),
              s(:block,
                s(:send, nil, :assert_in_out_err,
                  s(:array,
                    s(:splat,
                      s(:lvar, :opts)),
                    s(:lvar, :base))),
                s(:args,
                  s(:arg, :_),
                  s(:arg, :e)),
                s(:send,
                  s(:lvar, :stderr), :concat,
                  s(:lvar, :e))))),
          s(:send, nil, :assert_not_include,
            s(:lvar, :stderr),
            s(:str, ":run"),
            s(:lvar, :bug10435)))),
      s(:def, :test_dump_syntax_with_rflag,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_norun_with_rflag,
            s(:str, "-c")),
          s(:send, nil, :assert_norun_with_rflag,
            s(:str, "--dump=syntax")))),
      s(:def, :test_dump_yydebug_with_rflag,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_norun_with_rflag,
            s(:str, "-y")),
          s(:send, nil, :assert_norun_with_rflag,
            s(:str, "--dump=yydebug")))),
      s(:def, :test_dump_parsetree_with_rflag,
        s(:args),
        s(:send, nil, :assert_norun_with_rflag,
          s(:str, "--dump=parsetree"))),
      s(:def, :test_dump_insns_with_rflag,
        s(:args),
        s(:send, nil, :assert_norun_with_rflag,
          s(:str, "--dump=insns"))),
      s(:def, :test_frozen_string_literal,
        s(:args),
        s(:block,
          s(:send, nil, :all_assertions),
          s(:args,
            s(:arg, :a)),
          s(:begin,
            s(:block,
              s(:send,
                s(:array,
                  s(:array,
                    s(:str, "disable"),
                    s(:str, "false")),
                  s(:array,
                    s(:str, "enable"),
                    s(:str, "true"))), :each),
              s(:args,
                s(:arg, :opt),
                s(:arg, :exp)),
              s(:block,
                s(:send,
                  s(:array,
                    s(:str, "frozen_string_literal"),
                    s(:str, "frozen-string-literal")), :each),
                s(:args,
                  s(:arg, :arg)),
                s(:begin,
                  s(:lvasgn, :key,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :opt)),
                      s(:str, "="),
                      s(:begin,
                        s(:lvar, :arg)))),
                  s(:block,
                    s(:send,
                      s(:lvar, :a), :for,
                      s(:lvar, :key)),
                    s(:args),
                    s(:send, nil, :assert_in_out_err,
                      s(:array,
                        s(:str, "--disable=gems"),
                        s(:dstr,
                          s(:str, "--"),
                          s(:begin,
                            s(:lvar, :key)))),
                      s(:str, "p(\"foo\".frozen?)"),
                      s(:array,
                        s(:lvar, :exp))))))),
            s(:block,
              s(:send,
                s(:array,
                  s(:str, "disable"),
                  s(:str, "enable")), :product,
                s(:array,
                  s(:str, "false"),
                  s(:str, "true"))),
              s(:args,
                s(:arg, :opt),
                s(:arg, :exp)),
              s(:block,
                s(:send,
                  s(:lvar, :a), :for,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :opt)),
                    s(:str, "=>"),
                    s(:begin,
                      s(:lvar, :exp)))),
                s(:args),
                s(:send, nil, :assert_in_out_err,
                  s(:array,
                    s(:str, "-w"),
                    s(:str, "--disable=gems"),
                    s(:dstr,
                      s(:str, "--"),
                      s(:begin,
                        s(:lvar, :opt)),
                      s(:str, "=frozen-string-literal"))),
                  s(:dstr,
                    s(:str, "            #-*- frozen-string-literal: "),
                    s(:begin,
                      s(:lvar, :exp)),
                    s(:str, " -*-\n"),
                    s(:str, "            p(\"foo\".frozen?)\n")),
                  s(:array,
                    s(:lvar, :exp)))))))),
      s(:def, :test_frozen_string_literal_debug,
        s(:args),
        s(:begin,
          s(:lvasgn, :with_debug_pat,
            s(:regexp,
              s(:str, "created at"),
              s(:regopt))),
          s(:lvasgn, :wo_debug_pat,
            s(:regexp,
              s(:str, "can\\'t modify frozen String \\(RuntimeError\\)\\n\\z"),
              s(:regopt))),
          s(:lvasgn, :frozen,
            s(:array,
              s(:array,
                s(:str, "--enable-frozen-string-literal"),
                s(:true)),
              s(:array,
                s(:str, "--disable-frozen-string-literal"),
                s(:false)),
              s(:array,
                s(:nil),
                s(:false)))),
          s(:lvasgn, :debug,
            s(:array,
              s(:array,
                s(:str, "--debug-frozen-string-literal"),
                s(:true)),
              s(:array,
                s(:str, "--debug=frozen-string-literal"),
                s(:true)),
              s(:array,
                s(:str, "--debug"),
                s(:true)),
              s(:array,
                s(:nil),
                s(:false)))),
          s(:lvasgn, :opts,
            s(:array,
              s(:str, "--disable=gems"))),
          s(:block,
            s(:send,
              s(:lvar, :frozen), :product,
              s(:lvar, :debug)),
            s(:args,
              s(:mlhs,
                s(:arg, :opt1),
                s(:arg, :freeze)),
              s(:mlhs,
                s(:arg, :opt2),
                s(:arg, :debug))),
            s(:begin,
              s(:lvasgn, :opt,
                s(:send,
                  s(:lvar, :opts), :+,
                  s(:send,
                    s(:array,
                      s(:lvar, :opt1),
                      s(:lvar, :opt2)), :compact))),
              s(:lvasgn, :err,
                s(:if,
                  s(:send,
                    s(:lvar, :freeze), :!),
                  s(:array),
                  s(:if,
                    s(:lvar, :debug),
                    s(:lvar, :with_debug_pat),
                    s(:lvar, :wo_debug_pat)))),
              s(:send, nil, :assert_in_out_err,
                s(:lvar, :opt),
                s(:str, "\"foo\" << \"bar\""),
                s(:array),
                s(:lvar, :err)),
              s(:if,
                s(:lvar, :freeze),
                s(:send, nil, :assert_in_out_err,
                  s(:lvar, :opt),
                  s(:str, "\"foo\#{123}bar\" << \"bar\""),
                  s(:array),
                  s(:lvar, :err)), nil))))))))
