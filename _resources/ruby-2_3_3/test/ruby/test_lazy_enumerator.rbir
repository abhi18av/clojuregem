s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestLazyEnumerator),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:class,
        s(:const, nil, :Step), nil,
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :Enumerable)),
          s(:send, nil, :attr_reader,
            s(:sym, :current),
            s(:sym, :args)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :enum)),
            s(:begin,
              s(:ivasgn, :@enum,
                s(:lvar, :enum)),
              s(:ivasgn, :@current,
                s(:nil)),
              s(:ivasgn, :@args,
                s(:nil)))),
          s(:def, :each,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:ivasgn, :@args,
                s(:lvar, :args)),
              s(:block,
                s(:send,
                  s(:ivar, :@enum), :each),
                s(:args,
                  s(:arg, :i)),
                s(:begin,
                  s(:ivasgn, :@current,
                    s(:lvar, :i)),
                  s(:yield,
                    s(:lvar, :i)))))))),
      s(:def, :test_initialize,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:send,
              s(:send,
                s(:array,
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3)), :lazy), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:send,
              s(:block,
                s(:send,
                  s(:const,
                    s(:const, nil, :Enumerator), :Lazy), :new,
                  s(:array,
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3))),
                s(:args,
                  s(:arg, :y),
                  s(:arg, :v)),
                s(:send,
                  s(:lvar, :y), :<<,
                  s(:lvar, :v))), :to_a)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :Enumerator), :Lazy), :new,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)))),
          s(:lvasgn, :a,
            s(:send,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)), :lazy)),
          s(:send,
            s(:lvar, :a), :freeze),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :a), :__send__,
              s(:sym, :initialize),
              s(:array,
                s(:int, 4),
                s(:int, 5)),
              s(:block_pass,
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args,
                    s(:arg, :y),
                    s(:restarg, :v)),
                  s(:send,
                    s(:lvar, :y), :<<,
                    s(:yield,
                      s(:splat,
                        s(:lvar, :v)))))))))),
      s(:def, :test_each_args,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :a), :lazy), :each,
                s(:int, 4)), :first)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 4)),
            s(:send,
              s(:lvar, :a), :args)))),
      s(:def, :test_each_line,
        s(:args),
        s(:begin,
          s(:lvasgn, :name,
            s(:lvasgn, :lineno,
              s(:nil))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "(string)")),
            s(:args,
              s(:arg, :f)),
            s(:block,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :f), :each,
                      s(:str, "")), :map),
                  s(:args,
                    s(:arg, :paragraph)),
                  s(:send,
                    s(:lvar, :paragraph), :[],
                    s(:regexp,
                      s(:str, "\\A\\s*(.*)"),
                      s(:regopt)),
                    s(:int, 1))), :find),
              s(:args,
                s(:arg, :line)),
              s(:if,
                s(:lvasgn, :name,
                  s(:send,
                    s(:lvar, :line), :[],
                    s(:regexp,
                      s(:str, "^class\\s+(\\S+)"),
                      s(:regopt)),
                    s(:int, 1))),
                s(:begin,
                  s(:lvasgn, :lineno,
                    s(:send,
                      s(:lvar, :f), :lineno)),
                  s(:true)), nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:self), :class), :name),
            s(:lvar, :name)),
          s(:send, nil, :assert_operator,
            s(:lvar, :lineno),
            s(:sym, :>),
            s(:int, 2)),
          s(:lvasgn, :name,
            s(:lvasgn, :lineno,
              s(:nil))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "(string)")),
            s(:args,
              s(:arg, :f)),
            s(:block,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :f), :lazy), :each,
                      s(:str, "")), :map),
                  s(:args,
                    s(:arg, :paragraph)),
                  s(:send,
                    s(:lvar, :paragraph), :[],
                    s(:regexp,
                      s(:str, "\\A\\s*(.*)"),
                      s(:regopt)),
                    s(:int, 1))), :find),
              s(:args,
                s(:arg, :line)),
              s(:if,
                s(:lvasgn, :name,
                  s(:send,
                    s(:lvar, :line), :[],
                    s(:regexp,
                      s(:str, "^class\\s+(\\S+)"),
                      s(:regopt)),
                    s(:int, 1))),
                s(:begin,
                  s(:lvasgn, :lineno,
                    s(:send,
                      s(:lvar, :f), :lineno)),
                  s(:true)), nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:self), :class), :name),
            s(:lvar, :name)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:lvar, :lineno)))),
      s(:def, :test_select,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 6)))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :a), :select),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :x), :>,
                  s(:int, 3))), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :lazy), :select),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :x), :>,
                  s(:int, 3))), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :a), :current)),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:array,
                s(:str, "word"),
                s(:nil),
                s(:int, 1)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :a), :select),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:str, "x"), :+,
                  s(:lvar, :x))), :first)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:str, "word"),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :lazy), :select),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:str, "x"), :+,
                  s(:lvar, :x))), :first)),
          s(:send, nil, :assert_equal,
            s(:str, "word"),
            s(:send,
              s(:lvar, :a), :current)))),
      s(:def, :test_select_multiple_values,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:const, nil, :Enumerator), :new),
              s(:args,
                s(:arg, :yielder)),
              s(:for,
                s(:lvasgn, :i),
                s(:irange,
                  s(:int, 1),
                  s(:int, 5)),
                s(:send,
                  s(:lvar, :yielder), :yield,
                  s(:lvar, :i),
                  s(:send,
                    s(:lvar, :i), :to_s))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 2),
                s(:str, "2")),
              s(:array,
                s(:int, 4),
                s(:str, "4"))),
            s(:block,
              s(:send,
                s(:lvar, :e), :select),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :x), :[],
                    s(:int, 0)), :%,
                  s(:int, 2)), :==,
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 2),
                s(:str, "2")),
              s(:array,
                s(:int, 4),
                s(:str, "4"))),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :e), :lazy), :select),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :x), :[],
                      s(:int, 0)), :%,
                    s(:int, 2)), :==,
                  s(:int, 0))), :force)))),
      s(:def, :test_map,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :a), :map),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :x), :*,
                  s(:int, 2))), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :lazy), :map),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :x), :*,
                  s(:int, 2))), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :a), :current)))),
      s(:def, :test_flat_map,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :a), :flat_map),
                s(:args,
                  s(:arg, :x)),
                s(:array,
                  s(:send,
                    s(:lvar, :x), :*,
                    s(:int, 2)))), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :lazy), :flat_map),
                s(:args,
                  s(:arg, :x)),
                s(:array,
                  s(:send,
                    s(:lvar, :x), :*,
                    s(:int, 2)))), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :a), :current)))),
      s(:def, :test_flat_map_nested,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:str, "a")),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :a), :flat_map),
                s(:args,
                  s(:arg, :x)),
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:str, "a"),
                        s(:str, "c"))), :map),
                  s(:args,
                    s(:arg, :y)),
                  s(:array,
                    s(:lvar, :x),
                    s(:lvar, :y)))), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:str, "a")),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :lazy), :flat_map),
                s(:args,
                  s(:arg, :x)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:begin,
                        s(:irange,
                          s(:str, "a"),
                          s(:str, "c"))), :lazy), :map),
                  s(:args,
                    s(:arg, :y)),
                  s(:array,
                    s(:lvar, :x),
                    s(:lvar, :y)))), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :a), :current)))),
      s(:def, :test_flat_map_to_ary,
        s(:args),
        s(:begin,
          s(:lvasgn, :to_ary,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:def, :initialize,
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@value,
                    s(:lvar, :value))),
                s(:def, :to_ary,
                  s(:args),
                  s(:array,
                    s(:sym, :to_ary),
                    s(:ivar, :@value)))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :to_ary),
              s(:int, 1),
              s(:sym, :to_ary),
              s(:int, 2),
              s(:sym, :to_ary),
              s(:int, 3)),
            s(:block,
              s(:send,
                s(:array,
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3)), :flat_map),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :to_ary), :new,
                s(:lvar, :x)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :to_ary),
              s(:int, 1),
              s(:sym, :to_ary),
              s(:int, 2),
              s(:sym, :to_ary),
              s(:int, 3)),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:int, 1),
                      s(:int, 2),
                      s(:int, 3)), :lazy), :flat_map),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :to_ary), :new,
                  s(:lvar, :x))), :force)))),
      s(:def, :test_flat_map_non_array,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "1"),
              s(:str, "2"),
              s(:str, "3")),
            s(:block,
              s(:send,
                s(:array,
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3)), :flat_map),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :to_s))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "1"),
              s(:str, "2"),
              s(:str, "3")),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:int, 1),
                      s(:int, 2),
                      s(:int, 3)), :lazy), :flat_map),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :x), :to_s)), :force)))),
      s(:def, :test_flat_map_hash,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:hash,
                s(:pair,
                  s(:str, "a"),
                  s(:int, 97))),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:int, 98))),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:int, 99)))),
            s(:block,
              s(:send,
                s(:array,
                  s(:str, "a"),
                  s(:str, "b"),
                  s(:str, "c")), :flat_map),
              s(:args,
                s(:arg, :x)),
              s(:hash,
                s(:pair,
                  s(:lvar, :x),
                  s(:send,
                    s(:lvar, :x), :ord))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:hash,
                s(:pair,
                  s(:str, "a"),
                  s(:int, 97))),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:int, 98))),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:int, 99)))),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:str, "a"),
                      s(:str, "b"),
                      s(:str, "c")), :lazy), :flat_map),
                s(:args,
                  s(:arg, :x)),
                s(:hash,
                  s(:pair,
                    s(:lvar, :x),
                    s(:send,
                      s(:lvar, :x), :ord)))), :force)))),
      s(:def, :test_reject,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 6)))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :a), :reject),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :x), :<,
                  s(:int, 4))), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :lazy), :reject),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :x), :<,
                  s(:int, 4))), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :a), :current)),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:array,
                s(:str, "word"),
                s(:nil),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :a), :reject),
                s(:args,
                  s(:arg, :x)),
                s(:lvar, :x)), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :lazy), :reject),
                s(:args,
                  s(:arg, :x)),
                s(:lvar, :x)), :first)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :a), :current)))),
      s(:def, :test_reject_multiple_values,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:const, nil, :Enumerator), :new),
              s(:args,
                s(:arg, :yielder)),
              s(:for,
                s(:lvasgn, :i),
                s(:irange,
                  s(:int, 1),
                  s(:int, 5)),
                s(:send,
                  s(:lvar, :yielder), :yield,
                  s(:lvar, :i),
                  s(:send,
                    s(:lvar, :i), :to_s))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 2),
                s(:str, "2")),
              s(:array,
                s(:int, 4),
                s(:str, "4"))),
            s(:block,
              s(:send,
                s(:lvar, :e), :reject),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :x), :[],
                    s(:int, 0)), :%,
                  s(:int, 2)), :!=,
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 2),
                s(:str, "2")),
              s(:array,
                s(:int, 4),
                s(:str, "4"))),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :e), :lazy), :reject),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :x), :[],
                      s(:int, 0)), :%,
                    s(:int, 2)), :!=,
                  s(:int, 0))), :force)))),
      s(:def, :test_grep,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:str, "a"),
                s(:str, "f")))),
          s(:send, nil, :assert_equal,
            s(:str, "c"),
            s(:send,
              s(:send,
                s(:lvar, :a), :grep,
                s(:regexp,
                  s(:str, "c"),
                  s(:regopt))), :first)),
          s(:send, nil, :assert_equal,
            s(:str, "f"),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:str, "c"),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :a), :lazy), :grep,
                s(:regexp,
                  s(:str, "c"),
                  s(:regopt))), :first)),
          s(:send, nil, :assert_equal,
            s(:str, "c"),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a"),
              s(:str, "e")),
            s(:send,
              s(:lvar, :a), :grep,
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :x)),
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "[aeiou]"),
                    s(:regopt)),
                  s(:lvar, :x))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a"),
              s(:str, "e")),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :a), :lazy), :grep,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args,
                    s(:arg, :x)),
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "[aeiou]"),
                      s(:regopt)),
                    s(:lvar, :x)))), :to_a)))),
      s(:def, :test_grep_with_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:str, "a"),
                s(:str, "f")))),
          s(:send, nil, :assert_equal,
            s(:str, "C"),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :a), :grep,
                  s(:regexp,
                    s(:str, "c"),
                    s(:regopt))),
                s(:args,
                  s(:arg, :i)),
                s(:send,
                  s(:lvar, :i), :upcase)), :first)),
          s(:send, nil, :assert_equal,
            s(:str, "C"),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :lazy), :grep,
                  s(:regexp,
                    s(:str, "c"),
                    s(:regopt))),
                s(:args,
                  s(:arg, :i)),
                s(:send,
                  s(:lvar, :i), :upcase)), :first)))),
      s(:def, :test_grep_multiple_values,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:const, nil, :Enumerator), :new),
              s(:args,
                s(:arg, :yielder)),
              s(:block,
                s(:send,
                  s(:int, 3), :times),
                s(:args,
                  s(:arg, :i)),
                s(:send,
                  s(:lvar, :yielder), :yield,
                  s(:lvar, :i),
                  s(:send,
                    s(:lvar, :i), :to_s))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 2),
                s(:str, "2"))),
            s(:send,
              s(:lvar, :e), :grep,
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :x), :==,
                  s(:array,
                    s(:int, 2),
                    s(:str, "2")))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 2),
                s(:str, "2"))),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :e), :lazy), :grep,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:lvar, :x), :==,
                    s(:array,
                      s(:int, 2),
                      s(:str, "2"))))), :force)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "22")),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :e), :lazy), :grep,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:lvar, :x), :==,
                    s(:array,
                      s(:int, 2),
                      s(:str, "2")))),
                s(:block_pass,
                  s(:sym, :join))), :force)))),
      s(:def, :test_grep_v,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:str, "a"),
                s(:str, "f")))),
          s(:send, nil, :assert_equal,
            s(:str, "b"),
            s(:send,
              s(:send,
                s(:lvar, :a), :grep_v,
                s(:regexp,
                  s(:str, "a"),
                  s(:regopt))), :first)),
          s(:send, nil, :assert_equal,
            s(:str, "f"),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:str, "a"),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :a), :lazy), :grep_v,
                s(:regexp,
                  s(:str, "c"),
                  s(:regopt))), :first)),
          s(:send, nil, :assert_equal,
            s(:str, "a"),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "b"),
              s(:str, "c"),
              s(:str, "d"),
              s(:str, "f")),
            s(:send,
              s(:lvar, :a), :grep_v,
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :x)),
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "[aeiou]"),
                    s(:regopt)),
                  s(:lvar, :x))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "b"),
              s(:str, "c"),
              s(:str, "d"),
              s(:str, "f")),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :a), :lazy), :grep_v,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args,
                    s(:arg, :x)),
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "[aeiou]"),
                      s(:regopt)),
                    s(:lvar, :x)))), :to_a)))),
      s(:def, :test_grep_v_with_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:str, "a"),
                s(:str, "f")))),
          s(:send, nil, :assert_equal,
            s(:str, "B"),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :a), :grep_v,
                  s(:regexp,
                    s(:str, "a"),
                    s(:regopt))),
                s(:args,
                  s(:arg, :i)),
                s(:send,
                  s(:lvar, :i), :upcase)), :first)),
          s(:send, nil, :assert_equal,
            s(:str, "B"),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :lazy), :grep_v,
                  s(:regexp,
                    s(:str, "a"),
                    s(:regopt))),
                s(:args,
                  s(:arg, :i)),
                s(:send,
                  s(:lvar, :i), :upcase)), :first)))),
      s(:def, :test_grep_v_multiple_values,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:const, nil, :Enumerator), :new),
              s(:args,
                s(:arg, :yielder)),
              s(:block,
                s(:send,
                  s(:int, 3), :times),
                s(:args,
                  s(:arg, :i)),
                s(:send,
                  s(:lvar, :yielder), :yield,
                  s(:lvar, :i),
                  s(:send,
                    s(:lvar, :i), :to_s))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 0),
                s(:str, "0")),
              s(:array,
                s(:int, 1),
                s(:str, "1"))),
            s(:send,
              s(:lvar, :e), :grep_v,
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :x), :==,
                  s(:array,
                    s(:int, 2),
                    s(:str, "2")))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 0),
                s(:str, "0")),
              s(:array,
                s(:int, 1),
                s(:str, "1"))),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :e), :lazy), :grep_v,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:lvar, :x), :==,
                    s(:array,
                      s(:int, 2),
                      s(:str, "2"))))), :force)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "00"),
              s(:str, "11")),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :e), :lazy), :grep_v,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:lvar, :x), :==,
                    s(:array,
                      s(:int, 2),
                      s(:str, "2")))),
                s(:block_pass,
                  s(:sym, :join))), :force)))),
      s(:def, :test_zip,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:str, "a")),
            s(:send,
              s(:send,
                s(:lvar, :a), :zip,
                s(:irange,
                  s(:str, "a"),
                  s(:str, "c"))), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:str, "a")),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :a), :lazy), :zip,
                s(:irange,
                  s(:str, "a"),
                  s(:str, "c"))), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :a), :current)))),
      s(:def, :test_zip_short_arg,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 5)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 5),
              s(:nil)),
            s(:send,
              s(:send,
                s(:lvar, :a), :zip,
                s(:irange,
                  s(:str, "a"),
                  s(:str, "c"))), :last)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 5),
              s(:nil)),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :lazy), :zip,
                  s(:irange,
                    s(:str, "a"),
                    s(:str, "c"))), :force), :last)))),
      s(:def, :test_zip_without_arg,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:send,
                s(:lvar, :a), :zip), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :a), :lazy), :zip), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :a), :current)))),
      s(:def, :test_zip_bad_arg,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 3)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:send,
                s(:lvar, :a), :lazy), :zip,
              s(:int, 42))))),
      s(:def, :test_zip_with_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 3)))),
          s(:lvasgn, :ary,
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :a), :lazy), :zip,
                s(:irange,
                  s(:str, "a"),
                  s(:str, "c"))),
              s(:args,
                s(:arg, :x),
                s(:arg, :y)),
              s(:send,
                s(:lvar, :ary), :<<,
                s(:array,
                  s(:lvar, :x),
                  s(:lvar, :y))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :a), :zip,
              s(:irange,
                s(:str, "a"),
                s(:str, "c"))),
            s(:lvar, :ary)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :a), :current)))),
      s(:def, :test_take,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 10)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:lvar, :a), :take,
                s(:int, 5)), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :a), :lazy), :take,
                s(:int, 5)), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1),
                  s(:int, 5))), :to_a),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :a), :lazy), :take,
                s(:int, 5)), :force)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :a), :current)),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 10)))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :a), :lazy), :take,
                s(:int, 0)), :force)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :a), :current)))),
      s(:def, :test_take_recycle,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6428,
            s(:str, "[ruby-dev:45634]")),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 10)))),
          s(:lvasgn, :take5,
            s(:send,
              s(:send,
                s(:lvar, :a), :lazy), :take,
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1),
                  s(:int, 5))), :to_a),
            s(:send,
              s(:lvar, :take5), :force),
            s(:lvar, :bug6428)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1),
                  s(:int, 5))), :to_a),
            s(:send,
              s(:lvar, :take5), :force),
            s(:lvar, :bug6428)))),
      s(:def, :test_take_nested,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7696,
            s(:str, "[ruby-core:51470]")),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 10)))),
          s(:lvasgn, :take5,
            s(:send,
              s(:send,
                s(:lvar, :a), :lazy), :take,
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:splat,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:int, 5))))), :*,
              s(:int, 5)),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :take5), :flat_map),
                s(:args),
                s(:lvar, :take5)), :force),
            s(:lvar, :bug7696)))),
      s(:def, :test_drop_while_nested,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7696,
            s(:str, "[ruby-core:51470]")),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 10)))),
          s(:lvasgn, :drop5,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :a), :lazy), :drop_while),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :<,
                s(:int, 6)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:splat,
                  s(:begin,
                    s(:irange,
                      s(:int, 6),
                      s(:int, 10))))), :*,
              s(:int, 5)),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :drop5), :flat_map),
                s(:args),
                s(:lvar, :drop5)), :force),
            s(:lvar, :bug7696)))),
      s(:def, :test_drop_nested,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7696,
            s(:str, "[ruby-core:51470]")),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 10)))),
          s(:lvasgn, :drop5,
            s(:send,
              s(:send,
                s(:lvar, :a), :lazy), :drop,
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:splat,
                  s(:begin,
                    s(:irange,
                      s(:int, 6),
                      s(:int, 10))))), :*,
              s(:int, 5)),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :drop5), :flat_map),
                s(:args),
                s(:lvar, :drop5)), :force),
            s(:lvar, :bug7696)))),
      s(:def, :test_zip_nested,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7696,
            s(:str, "[ruby-core:51470]")),
          s(:lvasgn, :enum,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:str, "a"),
                  s(:str, "z"))), :each)),
          s(:send,
            s(:lvar, :enum), :next),
          s(:lvasgn, :zip,
            s(:send,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:int, 3))), :lazy), :zip,
              s(:lvar, :enum),
              s(:lvar, :enum))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:array,
                  s(:int, 1),
                  s(:str, "a"),
                  s(:str, "a")),
                s(:array,
                  s(:int, 2),
                  s(:str, "b"),
                  s(:str, "b")),
                s(:array,
                  s(:int, 3),
                  s(:str, "c"),
                  s(:str, "c"))), :*,
              s(:int, 3)),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :zip), :flat_map),
                s(:args),
                s(:lvar, :zip)), :force),
            s(:lvar, :bug7696)))),
      s(:def, :test_zip_lazy_on_args,
        s(:args),
        s(:begin,
          s(:lvasgn, :zip,
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Step), :new,
                  s(:irange,
                    s(:int, 1),
                    s(:int, 2))), :lazy), :zip,
              s(:irange,
                s(:int, 42),
                s(:const,
                  s(:const, nil, :Float), :INFINITY)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 42)),
              s(:array,
                s(:int, 2),
                s(:int, 43))),
            s(:send,
              s(:lvar, :zip), :force)))),
      s(:def, :test_zip_efficient_on_array_args,
        s(:args),
        s(:begin,
          s(:lvasgn, :ary,
            s(:array,
              s(:int, 42),
              s(:sym, :foo))),
          s(:block,
            s(:send,
              s(:array,
                s(:sym, :to_enum),
                s(:sym, :enum_for),
                s(:sym, :lazy),
                s(:sym, :each)), :each),
            s(:args,
              s(:arg, :forbid)),
            s(:block,
              s(:send,
                s(:lvar, :ary), :define_singleton_method,
                s(:lvar, :forbid)),
              s(:args),
              s(:send, nil, :fail,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :forbid)),
                  s(:str, " was called"))))),
          s(:lvasgn, :zip,
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Step), :new,
                  s(:irange,
                    s(:int, 1),
                    s(:int, 2))), :lazy), :zip,
              s(:lvar, :ary))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 42)),
              s(:array,
                s(:int, 2),
                s(:sym, :foo))),
            s(:send,
              s(:lvar, :zip), :force)))),
      s(:def, :test_zip_nonsingle,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8735,
            s(:str, "[ruby-core:56383] [Bug #8735]")),
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :obj), :each,
            s(:args),
            s(:begin,
              s(:yield),
              s(:yield,
                s(:int, 1),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :obj), :to_enum), :zip,
              s(:send,
                s(:lvar, :obj), :to_enum)),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :obj), :to_enum), :lazy), :zip,
                s(:send,
                  s(:lvar, :obj), :to_enum)), :force),
            s(:lvar, :bug8735)))),
      s(:def, :test_take_rewound,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7696,
            s(:str, "[ruby-core:51470]")),
          s(:lvasgn, :e,
            s(:send,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:int, 42))), :lazy), :take,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :next),
            s(:lvar, :bug7696)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :e), :next),
            s(:lvar, :bug7696)),
          s(:send,
            s(:lvar, :e), :rewind),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :next),
            s(:lvar, :bug7696)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :e), :next),
            s(:lvar, :bug7696)))),
      s(:def, :test_take_while,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 10)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :a), :take_while),
                s(:args,
                  s(:arg, :i)),
                s(:send,
                  s(:lvar, :i), :<,
                  s(:int, 5))), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :lazy), :take_while),
                s(:args,
                  s(:arg, :i)),
                s(:send,
                  s(:lvar, :i), :<,
                  s(:int, 5))), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1),
                  s(:int, 4))), :to_a),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :lazy), :take_while),
                s(:args,
                  s(:arg, :i)),
                s(:send,
                  s(:lvar, :i), :<,
                  s(:int, 5))), :to_a)))),
      s(:def, :test_drop,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 10)))),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:send,
                s(:lvar, :a), :drop,
                s(:int, 5)), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 10),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :a), :lazy), :drop,
                s(:int, 5)), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 6),
                  s(:int, 10))), :to_a),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :a), :lazy), :drop,
                s(:int, 5)), :to_a)))),
      s(:def, :test_drop_while,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 10)))),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :a), :drop_while),
                s(:args,
                  s(:arg, :i)),
                s(:send,
                  s(:send,
                    s(:lvar, :i), :%,
                    s(:int, 5)), :>,
                  s(:int, 0))), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 10),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :lazy), :drop_while),
                s(:args,
                  s(:arg, :i)),
                s(:send,
                  s(:send,
                    s(:lvar, :i), :%,
                    s(:int, 5)), :>,
                  s(:int, 0))), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 5),
                  s(:int, 10))), :to_a),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :lazy), :drop_while),
                s(:args,
                  s(:arg, :i)),
                s(:send,
                  s(:send,
                    s(:lvar, :i), :%,
                    s(:int, 5)), :>,
                  s(:int, 0))), :to_a)))),
      s(:def, :test_drop_and_take,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:int, 4),
            s(:int, 5)),
          s(:send,
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:const,
                        s(:const, nil, :Float), :INFINITY))), :lazy), :drop,
                s(:int, 3)), :take,
              s(:int, 2)), :to_a))),
      s(:def, :test_cycle,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:str, "1"),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :a), :cycle,
                  s(:int, 2)), :map,
                s(:block_pass,
                  s(:sym, :to_s))), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :a), :current)),
          s(:send, nil, :assert_equal,
            s(:str, "1"),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :lazy), :cycle,
                  s(:int, 2)), :map,
                s(:block_pass,
                  s(:sym, :to_s))), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :a), :current)))),
      s(:def, :test_cycle_with_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Step), :new,
              s(:irange,
                s(:int, 1),
                s(:int, 3)))),
          s(:lvasgn, :ary,
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :a), :lazy), :cycle,
                s(:int, 2)),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:lvar, :ary), :<<,
                s(:lvar, :i)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :a), :cycle,
                s(:int, 2)), :to_a),
            s(:lvar, :ary)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :a), :current)))),
      s(:def, :test_cycle_chain,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:irange,
              s(:int, 1),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 1)),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :lazy), :cycle), :take,
                s(:int, 10)), :force)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 2),
              s(:int, 2),
              s(:int, 2),
              s(:int, 2),
              s(:int, 2),
              s(:int, 2),
              s(:int, 2),
              s(:int, 2),
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :a), :lazy), :cycle), :select),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:lvar, :x), :==,
                    s(:int, 2))), :take,
                s(:int, 10)), :force)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 2),
              s(:int, 2),
              s(:int, 2),
              s(:int, 2),
              s(:int, 2),
              s(:int, 2),
              s(:int, 2),
              s(:int, 2),
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :a), :lazy), :select),
                    s(:args,
                      s(:arg, :x)),
                    s(:send,
                      s(:lvar, :x), :==,
                      s(:int, 2))), :cycle), :take,
                s(:int, 10)), :force)))),
      s(:def, :test_force,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:int, 1),
            s(:int, 2),
            s(:int, 3)),
          s(:send,
            s(:send,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:const,
                      s(:const, nil, :Float), :INFINITY))), :lazy), :take,
              s(:int, 3)), :force))),
      s(:def, :test_inspect,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "#<Enumerator::Lazy: 1..10>"),
            s(:send,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:int, 10))), :lazy), :inspect)),
          s(:send, nil, :assert_equal,
            s(:str, "#<Enumerator::Lazy: #<Enumerator: \"foo\":each_char>>"),
            s(:send,
              s(:send,
                s(:send,
                  s(:str, "foo"), :each_char), :lazy), :inspect)),
          s(:send, nil, :assert_equal,
            s(:str, "#<Enumerator::Lazy: #<Enumerator::Lazy: 1..10>:map>"),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:int, 1),
                        s(:int, 10))), :lazy), :map),
                s(:args), nil), :inspect)),
          s(:send, nil, :assert_equal,
            s(:str, "#<Enumerator::Lazy: #<Enumerator::Lazy: 1..10>:take(0)>"),
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:int, 10))), :lazy), :take,
                s(:int, 0)), :inspect)),
          s(:send, nil, :assert_equal,
            s(:str, "#<Enumerator::Lazy: #<Enumerator::Lazy: 1..10>:take(3)>"),
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:int, 10))), :lazy), :take,
                s(:int, 3)), :inspect)),
          s(:send, nil, :assert_equal,
            s(:str, "#<Enumerator::Lazy: #<Enumerator::Lazy: \"a\"..\"c\">:grep(/b/)>"),
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:str, "a"),
                      s(:str, "c"))), :lazy), :grep,
                s(:regexp,
                  s(:str, "b"),
                  s(:regopt))), :inspect)),
          s(:send, nil, :assert_equal,
            s(:str, "#<Enumerator::Lazy: #<Enumerator::Lazy: 1..10>:cycle(3)>"),
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:int, 10))), :lazy), :cycle,
                s(:int, 3)), :inspect)),
          s(:send, nil, :assert_equal,
            s(:str, "#<Enumerator::Lazy: #<Enumerator::Lazy: 1..10>:cycle>"),
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:int, 10))), :lazy), :cycle), :inspect)),
          s(:send, nil, :assert_equal,
            s(:str, "#<Enumerator::Lazy: #<Enumerator::Lazy: 1..10>:cycle(3)>"),
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:int, 10))), :lazy), :cycle,
                s(:int, 3)), :inspect)),
          s(:lvasgn, :l,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:block,
                                s(:send,
                                  s(:block,
                                    s(:send,
                                      s(:block,
                                        s(:send,
                                          s(:block,
                                            s(:send,
                                              s(:block,
                                                s(:send,
                                                  s(:block,
                                                    s(:send,
                                                      s(:block,
                                                        s(:send,
                                                          s(:send,
                                                            s(:begin,
                                                              s(:irange,
                                                                s(:int, 1),
                                                                s(:int, 10))), :lazy), :map),
                                                        s(:args), nil), :collect),
                                                    s(:args), nil), :flat_map),
                                                s(:args), nil), :collect_concat),
                                            s(:args), nil), :select),
                                        s(:args), nil), :find_all),
                                    s(:args), nil), :reject),
                                s(:args), nil), :grep,
                              s(:int, 1)), :zip,
                            s(:irange,
                              s(:str, "a"),
                              s(:str, "c"))), :take,
                          s(:int, 10)), :take_while),
                      s(:args), nil), :drop,
                    s(:int, 3)), :drop_while),
                s(:args), nil), :cycle,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "#<Enumerator::Lazy: #<Enumerator::Lazy: #<Enumerator::Lazy: #<Enumerator::Lazy: #<Enumerator::Lazy: #<Enumerator::Lazy: #<Enumerator::Lazy: #<Enumerator::Lazy: #<Enumerator::Lazy: #<Enumerator::Lazy: #<Enumerator::Lazy: #<Enumerator::Lazy: #<Enumerator::Lazy: #<Enumerator::Lazy: #<Enumerator::Lazy: 1..10>:map>:collect>:flat_map>:collect_concat>:select>:find_all>:reject>:grep(1)>:zip(\"a\"..\"c\")>:take(10)>:take_while>:drop(3)>:drop_while>:cycle(3)>\n"), :chomp),
            s(:send,
              s(:lvar, :l), :inspect)))),
      s(:def, :test_lazy_to_enum,
        s(:args),
        s(:begin,
          s(:lvasgn, :lazy,
            s(:send,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)), :lazy)),
          s(:defs,
            s(:lvar, :lazy), :foo,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:yield,
                s(:lvar, :args)),
              s(:yield,
                s(:lvar, :args)))),
          s(:lvasgn, :enum,
            s(:send,
              s(:lvar, :lazy), :to_enum,
              s(:sym, :foo),
              s(:sym, :hello),
              s(:sym, :world))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Enumerator), :Lazy),
            s(:send,
              s(:lvar, :enum), :class)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :enum), :size)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :hello),
                s(:sym, :world)),
              s(:array,
                s(:sym, :hello),
                s(:sym, :world))),
            s(:send,
              s(:lvar, :enum), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:send,
              s(:send,
                s(:lvar, :lazy), :to_enum), :to_a)))),
      s(:def, :test_size,
        s(:args),
        s(:begin,
          s(:lvasgn, :lazy,
            s(:send,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)), :lazy)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :lazy), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:block,
                s(:send,
                  s(:const,
                    s(:const, nil, :Enumerator), :Lazy), :new,
                  s(:array),
                  s(:block,
                    s(:send, nil, :lambda),
                    s(:args),
                    s(:int, 42))),
                s(:args), nil), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:block,
                s(:send,
                  s(:const,
                    s(:const, nil, :Enumerator), :Lazy), :new,
                  s(:array),
                  s(:int, 42)),
                s(:args), nil), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Enumerator), :Lazy), :new,
                    s(:array),
                    s(:int, 42)),
                  s(:args), nil), :lazy), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :lazy), :to_enum),
                s(:args),
                s(:int, 42)), :size)),
          s(:block,
            s(:send,
              s(:array,
                s(:sym, :map),
                s(:sym, :collect)), :each),
            s(:args,
              s(:arg, :m)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :lazy), :send,
                    s(:lvar, :m)),
                  s(:args), nil), :size))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:send,
                s(:lvar, :lazy), :zip,
                s(:array,
                  s(:int, 4))), :size)),
          s(:block,
            s(:send,
              s(:array,
                s(:sym, :flat_map),
                s(:sym, :collect_concat),
                s(:sym, :select),
                s(:sym, :find_all),
                s(:sym, :reject),
                s(:sym, :take_while),
                s(:sym, :drop_while)), :each),
            s(:args,
              s(:arg, :m)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :lazy), :send,
                    s(:lvar, :m)),
                  s(:args), nil), :size))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:lvar, :lazy), :grep,
                s(:regexp,
                  s(:regopt))), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:lvar, :lazy), :take,
                s(:int, 2)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:send,
                s(:lvar, :lazy), :take,
                s(:int, 4)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:send,
                s(:send,
                  s(:send, nil, :loop), :lazy), :take,
                s(:int, 4)), :size)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :lazy), :select),
                  s(:args), nil), :take,
                s(:int, 4)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:lvar, :lazy), :drop,
                s(:int, 2)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:lvar, :lazy), :drop,
                s(:int, 4)), :size)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:send,
                s(:send,
                  s(:send, nil, :loop), :lazy), :drop,
                s(:int, 4)), :size)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :lazy), :select),
                  s(:args), nil), :drop,
                s(:int, 4)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:lvar, :lazy), :cycle,
                s(:int, 0)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:send,
                s(:lvar, :lazy), :cycle,
                s(:int, 2)), :size)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 3), :<<,
              s(:int, 80)),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:int, 4), :times), :inject,
                  s(:lvar, :lazy)),
                s(:args,
                  s(:arg, :enum)),
                s(:send,
                  s(:lvar, :enum), :cycle,
                  s(:send,
                    s(:int, 1), :<<,
                    s(:int, 20)))), :size)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:send,
                s(:lvar, :lazy), :cycle), :size)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:send,
                s(:send,
                  s(:send, nil, :loop), :lazy), :cycle,
                s(:int, 4)), :size)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:send,
                s(:send,
                  s(:send, nil, :loop), :lazy), :cycle), :size)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :lazy), :select),
                  s(:args), nil), :cycle,
                s(:int, 4)), :size)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :lazy), :select),
                  s(:args), nil), :cycle), :size)))),
      s(:def, :test_map_zip,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7507,
            s(:str, "[ruby-core:50545]")),
          s(:send, nil, :assert_ruby_status,
            s(:array,
              s(:str, "-e"),
              s(:str, "GC.stress = true"),
              s(:str, "-e"),
              s(:str, "(1..10).lazy.map{}.zip(){}")),
            s(:str, ""),
            s(:lvar, :bug7507)),
          s(:send, nil, :assert_ruby_status,
            s(:array,
              s(:str, "-e"),
              s(:str, "GC.stress = true"),
              s(:str, "-e"),
              s(:str, "(1..10).lazy.map{}.zip().to_a")),
            s(:str, ""),
            s(:lvar, :bug7507)))),
      s(:def, :test_require_block,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:sym, :select),
              s(:sym, :reject),
              s(:sym, :drop_while),
              s(:sym, :take_while),
              s(:sym, :map),
              s(:sym, :flat_map)), :each),
          s(:args,
            s(:arg, :method)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send,
                s(:array), :lazy), :send,
              s(:lvar, :method))))),
      s(:def, :test_laziness_conservation,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7507,
            s(:str, "[ruby-core:51510]")),
          s(:block,
            s(:send,
              s(:hash,
                s(:pair,
                  s(:sym, :slice_before),
                  s(:regexp,
                    s(:regopt))),
                s(:pair,
                  s(:sym, :slice_after),
                  s(:regexp,
                    s(:regopt))),
                s(:pair,
                  s(:sym, :with_index),
                  s(:nil)),
                s(:pair,
                  s(:sym, :cycle),
                  s(:nil)),
                s(:pair,
                  s(:sym, :each_with_object),
                  s(:int, 42)),
                s(:pair,
                  s(:sym, :each_slice),
                  s(:int, 42)),
                s(:pair,
                  s(:sym, :each_entry),
                  s(:nil)),
                s(:pair,
                  s(:sym, :each_cons),
                  s(:int, 42))), :each),
            s(:args,
              s(:arg, :method),
              s(:arg, :arg)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Enumerator), :Lazy),
              s(:send,
                s(:send,
                  s(:send,
                    s(:array), :lazy), :send,
                  s(:lvar, :method),
                  s(:splat,
                    s(:lvar, :arg))), :class),
              s(:lvar, :bug7507))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Enumerator), :Lazy),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:array), :lazy), :chunk),
                s(:args), nil), :class),
            s(:lvar, :bug7507)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Enumerator), :Lazy),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:array), :lazy), :slice_when),
                s(:args), nil), :class),
            s(:lvar, :bug7507)))),
      s(:def, :test_each_cons_limit,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:send,
              s(:int, 1), :<<,
              s(:int, 120))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:lvar, :n))), :lazy), :each_cons,
                s(:int, 2)), :first)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 2)),
              s(:array,
                s(:int, 2),
                s(:int, 3))),
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:lvar, :n))), :lazy), :each_cons,
                s(:int, 2)), :first,
              s(:int, 2))))),
      s(:def, :test_each_slice_limit,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:send,
              s(:int, 1), :<<,
              s(:int, 120))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:lvar, :n))), :lazy), :each_slice,
                s(:int, 2)), :first)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 2)),
              s(:array,
                s(:int, 3),
                s(:int, 4))),
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:lvar, :n))), :lazy), :each_slice,
                s(:int, 2)), :first,
              s(:int, 2))))),
      s(:def, :test_no_warnings,
        s(:args),
        s(:begin,
          s(:lvasgn, :le,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1),
                  s(:int, 3))), :lazy)),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:send,
              s(:send,
                s(:lvar, :le), :zip,
                s(:array,
                  s(:int, 4),
                  s(:int, 5),
                  s(:int, 6))), :force)),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:send,
              s(:send,
                s(:lvar, :le), :zip,
                s(:irange,
                  s(:int, 4),
                  s(:int, 6))), :force)),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:send,
              s(:send,
                s(:lvar, :le), :take,
                s(:int, 1)), :force)),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:send,
              s(:send,
                s(:lvar, :le), :drop,
                s(:int, 1)), :force)),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :le), :drop_while),
                s(:args),
                s(:false)), :force)))),
      s(:def, :test_symbol_chain,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "1"),
              s(:str, "3")),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:int, 1),
                      s(:int, 2),
                      s(:int, 3)), :lazy), :reject,
                  s(:block_pass,
                    s(:sym, :even?))), :map,
                s(:block_pass,
                  s(:sym, :to_s))), :force)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:int, 1),
                      s(:int, 2),
                      s(:int, 3)), :lazy), :map,
                  s(:block_pass,
                    s(:sym, :undefined))), :map,
                s(:block_pass,
                  s(:sym, :to_s))), :force)))))))
