s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestFloat),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :EnvUtil)),
      s(:def, :test_float,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:float, 2.6), :floor)),
          s(:send, nil, :assert_equal,
            s(:int, -3),
            s(:send,
              s(:begin,
                s(:float, -2.6)), :floor)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:float, 2.6), :ceil)),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:begin,
                s(:float, -2.6)), :ceil)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:float, 2.6), :truncate)),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:begin,
                s(:float, -2.6)), :truncate)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:float, 2.6), :round)),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:begin,
                s(:float, -2.4)), :truncate)),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:float, 13.4), :%,
              s(:int, 1)),
            s(:float, 0.4),
            s(:float, 0.0001)),
          s(:send, nil, :assert_equal,
            s(:int, 36893488147419111424),
            s(:send,
              s(:float, 3.689348814741911e+19), :to_i)))),
      s(:def, :nan_test,
        s(:args,
          s(:arg, :x),
          s(:arg, :y)),
        s(:begin,
          s(:send, nil, :extend,
            s(:const,
              s(:const,
                s(:const, nil, :Test), :Unit), :Assertions)),
          s(:send, nil, :assert_operator,
            s(:lvar, :x),
            s(:sym, :!=),
            s(:lvar, :y)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :x),
            s(:sym, :<),
            s(:lvar, :y)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :x),
            s(:sym, :>),
            s(:lvar, :y)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :x),
            s(:sym, :<=),
            s(:lvar, :y)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :x),
            s(:sym, :>=),
            s(:lvar, :y)))),
      s(:def, :test_nan,
        s(:args),
        s(:begin,
          s(:lvasgn, :nan,
            s(:const,
              s(:const, nil, :Float), :NAN)),
          s(:send, nil, :nan_test,
            s(:lvar, :nan),
            s(:lvar, :nan)),
          s(:send, nil, :nan_test,
            s(:lvar, :nan),
            s(:int, 0)),
          s(:send, nil, :nan_test,
            s(:lvar, :nan),
            s(:int, 1)),
          s(:send, nil, :nan_test,
            s(:lvar, :nan),
            s(:int, -1)),
          s(:send, nil, :nan_test,
            s(:lvar, :nan),
            s(:int, 1000)),
          s(:send, nil, :nan_test,
            s(:lvar, :nan),
            s(:int, -1000)),
          s(:send, nil, :nan_test,
            s(:lvar, :nan),
            s(:int, 1000000000000)),
          s(:send, nil, :nan_test,
            s(:lvar, :nan),
            s(:int, -1000000000000)),
          s(:send, nil, :nan_test,
            s(:lvar, :nan),
            s(:float, 100.0)),
          s(:send, nil, :nan_test,
            s(:lvar, :nan),
            s(:float, -100.0)),
          s(:send, nil, :nan_test,
            s(:lvar, :nan),
            s(:float, 0.001)),
          s(:send, nil, :nan_test,
            s(:lvar, :nan),
            s(:float, -0.001)),
          s(:send, nil, :nan_test,
            s(:lvar, :nan),
            s(:send,
              s(:float, 1.0), :/,
              s(:int, 0))),
          s(:send, nil, :nan_test,
            s(:lvar, :nan),
            s(:send,
              s(:float, -1.0), :/,
              s(:int, 0))))),
      s(:def, :test_precision,
        s(:args),
        s(:begin,
          s(:lvasgn, :u,
            s(:float, 3.751767503646127e+17)),
          s(:lvasgn, :v,
            s(:send,
              s(:send, nil, :sprintf,
                s(:str, "%.16e"),
                s(:lvar, :u)), :to_f)),
          s(:send, nil, :assert_in_delta,
            s(:lvar, :u),
            s(:lvar, :v),
            s(:send,
              s(:send,
                s(:lvar, :u), :abs), :*,
              s(:const,
                s(:const, nil, :Float), :EPSILON))),
          s(:send, nil, :assert_in_delta,
            s(:lvar, :u),
            s(:lvar, :v),
            s(:send,
              s(:send,
                s(:lvar, :v), :abs), :*,
              s(:const,
                s(:const, nil, :Float), :EPSILON))))),
      s(:def, :test_symmetry_bignum,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:int, 100000000000000000000000)),
          s(:lvasgn, :b,
            s(:float, 1.0e+23)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :a), :==,
              s(:lvar, :b)),
            s(:send,
              s(:lvar, :b), :==,
              s(:lvar, :a))))),
      s(:def, :test_cmp_int,
        s(:args),
        s(:block,
          s(:send,
            s(:int, 100), :times),
          s(:args,
            s(:arg, :i)),
          s(:begin,
            s(:lvasgn, :int0,
              s(:send,
                s(:int, 1), :<<,
                s(:lvar, :i))),
            s(:block,
              s(:send,
                s(:array,
                  s(:lvar, :int0),
                  s(:send,
                    s(:lvar, :int0), :-@)), :each),
              s(:args,
                s(:arg, :int)),
              s(:begin,
                s(:lvasgn, :flt,
                  s(:send,
                    s(:lvar, :int), :to_f)),
                s(:lvasgn, :bigger,
                  s(:send,
                    s(:lvar, :int), :+,
                    s(:int, 1))),
                s(:lvasgn, :smaller,
                  s(:send,
                    s(:lvar, :int), :-,
                    s(:int, 1))),
                s(:send, nil, :assert_operator,
                  s(:lvar, :flt),
                  s(:sym, :==),
                  s(:lvar, :int)),
                s(:send, nil, :assert_operator,
                  s(:lvar, :flt),
                  s(:sym, :>),
                  s(:lvar, :smaller)),
                s(:send, nil, :assert_operator,
                  s(:lvar, :flt),
                  s(:sym, :>=),
                  s(:lvar, :smaller)),
                s(:send, nil, :assert_operator,
                  s(:lvar, :flt),
                  s(:sym, :<),
                  s(:lvar, :bigger)),
                s(:send, nil, :assert_operator,
                  s(:lvar, :flt),
                  s(:sym, :<=),
                  s(:lvar, :bigger)),
                s(:send, nil, :assert_equal,
                  s(:int, 0),
                  s(:send,
                    s(:lvar, :flt), :<=>,
                    s(:lvar, :int))),
                s(:send, nil, :assert_equal,
                  s(:int, -1),
                  s(:send,
                    s(:lvar, :flt), :<=>,
                    s(:lvar, :bigger))),
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:send,
                    s(:lvar, :flt), :<=>,
                    s(:lvar, :smaller))),
                s(:send, nil, :assert_operator,
                  s(:lvar, :int),
                  s(:sym, :==),
                  s(:lvar, :flt)),
                s(:send, nil, :assert_operator,
                  s(:lvar, :bigger),
                  s(:sym, :>),
                  s(:lvar, :flt)),
                s(:send, nil, :assert_operator,
                  s(:lvar, :bigger),
                  s(:sym, :>=),
                  s(:lvar, :flt)),
                s(:send, nil, :assert_operator,
                  s(:lvar, :smaller),
                  s(:sym, :<),
                  s(:lvar, :flt)),
                s(:send, nil, :assert_operator,
                  s(:lvar, :smaller),
                  s(:sym, :<=),
                  s(:lvar, :flt)),
                s(:send, nil, :assert_equal,
                  s(:int, 0),
                  s(:send,
                    s(:lvar, :int), :<=>,
                    s(:lvar, :flt))),
                s(:send, nil, :assert_equal,
                  s(:int, -1),
                  s(:send,
                    s(:lvar, :smaller), :<=>,
                    s(:lvar, :flt))),
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:send,
                    s(:lvar, :bigger), :<=>,
                    s(:lvar, :flt))),
                s(:block,
                  s(:send,
                    s(:array,
                      s(:array,
                        s(:lvar, :int),
                        s(:send,
                          s(:lvar, :flt), :+,
                          s(:float, 0.5)),
                        s(:lvar, :bigger)),
                      s(:array,
                        s(:lvar, :smaller),
                        s(:send,
                          s(:lvar, :flt), :-,
                          s(:float, 0.5)),
                        s(:lvar, :int))), :each),
                  s(:args,
                    s(:arg, :smaller2),
                    s(:arg, :flt2),
                    s(:arg, :bigger2)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :flt2), :==,
                        s(:send,
                          s(:lvar, :flt2), :round)),
                      s(:next), nil),
                    s(:send, nil, :assert_operator,
                      s(:lvar, :flt2),
                      s(:sym, :!=),
                      s(:lvar, :smaller2)),
                    s(:send, nil, :assert_operator,
                      s(:lvar, :flt2),
                      s(:sym, :!=),
                      s(:lvar, :bigger2)),
                    s(:send, nil, :assert_operator,
                      s(:lvar, :flt2),
                      s(:sym, :>),
                      s(:lvar, :smaller2)),
                    s(:send, nil, :assert_operator,
                      s(:lvar, :flt2),
                      s(:sym, :>=),
                      s(:lvar, :smaller2)),
                    s(:send, nil, :assert_operator,
                      s(:lvar, :flt2),
                      s(:sym, :<),
                      s(:lvar, :bigger2)),
                    s(:send, nil, :assert_operator,
                      s(:lvar, :flt2),
                      s(:sym, :<=),
                      s(:lvar, :bigger2)),
                    s(:send, nil, :assert_equal,
                      s(:int, -1),
                      s(:send,
                        s(:lvar, :flt2), :<=>,
                        s(:lvar, :bigger2))),
                    s(:send, nil, :assert_equal,
                      s(:int, 1),
                      s(:send,
                        s(:lvar, :flt2), :<=>,
                        s(:lvar, :smaller2))),
                    s(:send, nil, :assert_operator,
                      s(:lvar, :smaller2),
                      s(:sym, :!=),
                      s(:lvar, :flt2)),
                    s(:send, nil, :assert_operator,
                      s(:lvar, :bigger2),
                      s(:sym, :!=),
                      s(:lvar, :flt2)),
                    s(:send, nil, :assert_operator,
                      s(:lvar, :bigger2),
                      s(:sym, :>),
                      s(:lvar, :flt2)),
                    s(:send, nil, :assert_operator,
                      s(:lvar, :bigger2),
                      s(:sym, :>=),
                      s(:lvar, :flt2)),
                    s(:send, nil, :assert_operator,
                      s(:lvar, :smaller2),
                      s(:sym, :<),
                      s(:lvar, :flt2)),
                    s(:send, nil, :assert_operator,
                      s(:lvar, :smaller2),
                      s(:sym, :<=),
                      s(:lvar, :flt2)),
                    s(:send, nil, :assert_equal,
                      s(:int, -1),
                      s(:send,
                        s(:lvar, :smaller2), :<=>,
                        s(:lvar, :flt2))),
                    s(:send, nil, :assert_equal,
                      s(:int, 1),
                      s(:send,
                        s(:lvar, :bigger2), :<=>,
                        s(:lvar, :flt2)))))))))),
      s(:def, :test_strtod,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :Float,
              s(:str, "0"))),
          s(:send, nil, :assert_in_delta,
            s(:lvar, :a),
            s(:int, 0),
            s(:const,
              s(:const, nil, :Float), :EPSILON)),
          s(:lvasgn, :a,
            s(:send, nil, :Float,
              s(:str, "0.0"))),
          s(:send, nil, :assert_in_delta,
            s(:lvar, :a),
            s(:int, 0),
            s(:const,
              s(:const, nil, :Float), :EPSILON)),
          s(:lvasgn, :a,
            s(:send, nil, :Float,
              s(:str, "+0.0"))),
          s(:send, nil, :assert_in_delta,
            s(:lvar, :a),
            s(:int, 0),
            s(:const,
              s(:const, nil, :Float), :EPSILON)),
          s(:lvasgn, :a,
            s(:send, nil, :Float,
              s(:str, "-0.0"))),
          s(:send, nil, :assert_in_delta,
            s(:lvar, :a),
            s(:int, 0),
            s(:const,
              s(:const, nil, :Float), :EPSILON)),
          s(:lvasgn, :a,
            s(:send, nil, :Float,
              s(:str, "0.0000000000000000001"))),
          s(:send, nil, :assert_not_equal,
            s(:float, 0.0),
            s(:lvar, :a)),
          s(:lvasgn, :a,
            s(:send, nil, :Float,
              s(:str, "+0.0000000000000000001"))),
          s(:send, nil, :assert_not_equal,
            s(:float, 0.0),
            s(:lvar, :a)),
          s(:lvasgn, :a,
            s(:send, nil, :Float,
              s(:str, "-0.0000000000000000001"))),
          s(:send, nil, :assert_not_equal,
            s(:float, 0.0),
            s(:lvar, :a)),
          s(:lvasgn, :a,
            s(:send, nil, :Float,
              s(:str, ".0"))),
          s(:send, nil, :assert_in_delta,
            s(:lvar, :a),
            s(:int, 0),
            s(:const,
              s(:const, nil, :Float), :EPSILON)),
          s(:lvasgn, :a,
            s(:send, nil, :Float,
              s(:str, "+.0"))),
          s(:send, nil, :assert_in_delta,
            s(:lvar, :a),
            s(:int, 0),
            s(:const,
              s(:const, nil, :Float), :EPSILON)),
          s(:lvasgn, :a,
            s(:send, nil, :Float,
              s(:str, "-.0"))),
          s(:send, nil, :assert_in_delta,
            s(:lvar, :a),
            s(:int, 0),
            s(:const,
              s(:const, nil, :Float), :EPSILON)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "0."))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "+0."))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "-0."))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "."))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "+"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "+."))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "-"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "-."))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "1e"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "1__1"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "1."))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "1.e+00"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "0x1.p+0"))),
          s(:send, nil, :assert_equal,
            s(:int, 10),
            s(:send, nil, :Float,
              s(:str, "1_0"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:float, 0.0)), :pack,
              s(:str, "G")),
            s(:send,
              s(:array,
                s(:send,
                  s(:send, nil, :Float,
                    s(:str, " 0x0p+0")), :to_f)), :pack,
              s(:str, "G"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:float, -0.0)), :pack,
              s(:str, "G")),
            s(:send,
              s(:array,
                s(:send,
                  s(:send, nil, :Float,
                    s(:str, "-0x0p+0")), :to_f)), :pack,
              s(:str, "G"))),
          s(:send, nil, :assert_equal,
            s(:float, 255.0),
            s(:send, nil, :Float,
              s(:str, "0Xff"))),
          s(:send, nil, :assert_equal,
            s(:float, 1024.0),
            s(:send, nil, :Float,
              s(:str, "0x1p10"))),
          s(:send, nil, :assert_equal,
            s(:float, 1024.0),
            s(:send, nil, :Float,
              s(:str, "0x1p+10"))),
          s(:send, nil, :assert_equal,
            s(:float, 0.0009765625),
            s(:send, nil, :Float,
              s(:str, "0x1p-10"))),
          s(:send, nil, :assert_equal,
            s(:float, 2.6881171418161356e+43),
            s(:send, nil, :Float,
              s(:str, "0x1.3494a9b171bf5p+144"))),
          s(:send, nil, :assert_equal,
            s(:float, -3.720075976020836e-44),
            s(:send, nil, :Float,
              s(:str, "-0x1.a8c1f14e2af5dp-145"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:float, 31.0), :*,
              s(:send,
                s(:int, 2), :**,
                s(:int, 1019))),
            s(:send, nil, :Float,
              s(:send,
                s(:send,
                  s(:str, "0x0."), :+,
                  s(:begin,
                    s(:send,
                      s(:str, "0"), :*,
                      s(:int, 268)))), :+,
                s(:str, "1fp2099")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:float, 31.0), :*,
              s(:send,
                s(:int, 2), :**,
                s(:int, 1019))),
            s(:send, nil, :Float,
              s(:send,
                s(:send,
                  s(:str, "0x0."), :+,
                  s(:begin,
                    s(:send,
                      s(:str, "0"), :*,
                      s(:int, 600)))), :+,
                s(:str, "1fp3427")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:float, -31.0), :*,
              s(:send,
                s(:int, 2), :**,
                s(:int, 1019))),
            s(:send, nil, :Float,
              s(:send,
                s(:send,
                  s(:str, "-0x0."), :+,
                  s(:begin,
                    s(:send,
                      s(:str, "0"), :*,
                      s(:int, 268)))), :+,
                s(:str, "1fp2099")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:float, -31.0), :*,
              s(:send,
                s(:int, 2), :**,
                s(:int, 1019))),
            s(:send, nil, :Float,
              s(:send,
                s(:send,
                  s(:str, "-0x0."), :+,
                  s(:begin,
                    s(:send,
                      s(:str, "0"), :*,
                      s(:int, 600)))), :+,
                s(:str, "1fp3427")))),
          s(:block,
            s(:send, nil, :suppress_warning),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:float, 31.0), :*,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, -1027))),
                s(:send, nil, :Float,
                  s(:send,
                    s(:send,
                      s(:str, "0x1f"), :+,
                      s(:begin,
                        s(:send,
                          s(:str, "0"), :*,
                          s(:int, 268)))), :+,
                    s(:str, ".0p-2099")))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:float, 31.0), :*,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, -1027))),
                s(:send, nil, :Float,
                  s(:send,
                    s(:send,
                      s(:str, "0x1f"), :+,
                      s(:begin,
                        s(:send,
                          s(:str, "0"), :*,
                          s(:int, 600)))), :+,
                    s(:str, ".0p-3427")))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:float, -31.0), :*,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, -1027))),
                s(:send, nil, :Float,
                  s(:send,
                    s(:send,
                      s(:str, "-0x1f"), :+,
                      s(:begin,
                        s(:send,
                          s(:str, "0"), :*,
                          s(:int, 268)))), :+,
                    s(:str, ".0p-2099")))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:float, -31.0), :*,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, -1027))),
                s(:send, nil, :Float,
                  s(:send,
                    s(:send,
                      s(:str, "-0x1f"), :+,
                      s(:begin,
                        s(:send,
                          s(:str, "0"), :*,
                          s(:int, 600)))), :+,
                    s(:str, ".0p-3427")))))))),
      s(:def, :test_divmod,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:float, 3.5)),
            s(:send,
              s(:float, 11.5), :divmod,
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, -3),
              s(:float, -0.5)),
            s(:send,
              s(:float, 11.5), :divmod,
              s(:int, -4))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, -3),
              s(:float, 0.5)),
            s(:send,
              s(:begin,
                s(:float, -11.5)), :divmod,
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:float, -3.5)),
            s(:send,
              s(:begin,
                s(:float, -11.5)), :divmod,
              s(:int, -4))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :Float), :NAN), :divmod,
              s(:int, 2))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :Float), :INFINITY), :divmod,
              s(:int, 2))))),
      s(:def, :test_div,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:float, 11.5), :div,
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:int, -3),
            s(:send,
              s(:float, 11.5), :div,
              s(:int, -4))),
          s(:send, nil, :assert_equal,
            s(:int, -3),
            s(:send,
              s(:begin,
                s(:float, -11.5)), :div,
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:begin,
                s(:float, -11.5)), :div,
              s(:int, -4))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send,
              s(:send,
                s(:float, 11.5), :div,
                s(:const,
                  s(:const, nil, :Float), :NAN)), :nan?)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Float), :NAN), :div,
                s(:int, 2)), :nan?)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Float), :NAN), :div,
                s(:float, 11.5)), :nan?)))),
      s(:def, :test_modulo,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:float, 3.5),
            s(:send,
              s(:float, 11.5), :modulo,
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:float, -0.5),
            s(:send,
              s(:float, 11.5), :modulo,
              s(:int, -4))),
          s(:send, nil, :assert_equal,
            s(:float, 0.5),
            s(:send,
              s(:begin,
                s(:float, -11.5)), :modulo,
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:float, -3.5),
            s(:send,
              s(:begin,
                s(:float, -11.5)), :modulo,
              s(:int, -4))))),
      s(:def, :test_remainder,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:float, 3.5),
            s(:send,
              s(:float, 11.5), :remainder,
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:float, 3.5),
            s(:send,
              s(:float, 11.5), :remainder,
              s(:int, -4))),
          s(:send, nil, :assert_equal,
            s(:float, -3.5),
            s(:send,
              s(:begin,
                s(:float, -11.5)), :remainder,
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:float, -3.5),
            s(:send,
              s(:begin,
                s(:float, -11.5)), :remainder,
              s(:int, -4))),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :NAN), :remainder,
              s(:int, 4)),
            s(:sym, :nan?)),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:int, 4), :remainder,
              s(:const,
                s(:const, nil, :Float), :NAN)),
            s(:sym, :nan?)))),
      s(:def, :test_to_s,
        s(:args),
        s(:begin,
          s(:lvasgn, :inf,
            s(:const,
              s(:const, nil, :Float), :INFINITY)),
          s(:send, nil, :assert_equal,
            s(:str, "Infinity"),
            s(:send,
              s(:lvar, :inf), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "-Infinity"),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :inf), :-@)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "NaN"),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :inf), :/,
                  s(:lvar, :inf))), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "1.0e+18"),
            s(:send,
              s(:float, 1.0e+18), :to_s)),
          s(:lvasgn, :bug3273,
            s(:str, "[ruby-core:30145]")),
          s(:block,
            s(:send,
              s(:array,
                s(:float, 0.21611564636388503),
                s(:float, 0.56)), :each),
            s(:args,
              s(:arg, :f)),
            s(:begin,
              s(:lvasgn, :s,
                s(:send,
                  s(:lvar, :f), :to_s)),
              s(:send, nil, :assert_equal,
                s(:lvar, :f),
                s(:send,
                  s(:lvar, :s), :to_f),
                s(:lvar, :bug3273)),
              s(:send, nil, :assert_not_equal,
                s(:lvar, :f),
                s(:send,
                  s(:send,
                    s(:lvar, :s), :chop), :to_f),
                s(:lvar, :bug3273)))))),
      s(:def, :test_coerce,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:const, nil, :Float),
          s(:send,
            s(:send,
              s(:send,
                s(:float, 1.0), :coerce,
                s(:int, 1)), :first), :class))),
      s(:def, :test_plus,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:float, 4.0),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :+),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 4.0),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :+),
              s(:send,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 32))), :coerce,
                  s(:int, 2)), :first))),
          s(:send, nil, :assert_equal,
            s(:float, 4.0),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :+),
              s(:float, 2.0))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :+),
              s(:const,
                s(:const, nil, :Float), :INFINITY))),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :+),
              s(:const,
                s(:const, nil, :Float), :NAN)),
            s(:sym, :nan?)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :+),
              s(:nil))))),
      s(:def, :test_minus,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:float, 0.0),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :-),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 0.0),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :-),
              s(:send,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 32))), :coerce,
                  s(:int, 2)), :first))),
          s(:send, nil, :assert_equal,
            s(:float, 0.0),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :-),
              s(:float, 2.0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :INFINITY), :-@),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :-),
              s(:const,
                s(:const, nil, :Float), :INFINITY))),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :-),
              s(:const,
                s(:const, nil, :Float), :NAN)),
            s(:sym, :nan?)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :-),
              s(:nil))))),
      s(:def, :test_mul,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:float, 4.0),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :*),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 4.0),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :*),
              s(:send,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 32))), :coerce,
                  s(:int, 2)), :first))),
          s(:send, nil, :assert_equal,
            s(:float, 4.0),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :*),
              s(:float, 2.0))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :*),
              s(:const,
                s(:const, nil, :Float), :INFINITY))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :*),
              s(:nil))))),
      s(:def, :test_div2,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:float, 1.0),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :/),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 1.0),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :/),
              s(:send,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 32))), :coerce,
                  s(:int, 2)), :first))),
          s(:send, nil, :assert_equal,
            s(:float, 1.0),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :/),
              s(:float, 2.0))),
          s(:send, nil, :assert_equal,
            s(:float, 0.0),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :/),
              s(:const,
                s(:const, nil, :Float), :INFINITY))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :/),
              s(:nil))))),
      s(:def, :test_modulo2,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:float, 0.0),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :%),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 0.0),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :%),
              s(:send,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 32))), :coerce,
                  s(:int, 2)), :first))),
          s(:send, nil, :assert_equal,
            s(:float, 0.0),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :%),
              s(:float, 2.0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:float, 2.0), :send,
              s(:sym, :%),
              s(:nil))))),
      s(:def, :test_modulo3,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6048,
            s(:str, "[ruby-core:42726]")),
          s(:send, nil, :assert_equal,
            s(:float, 4.2),
            s(:send,
              s(:float, 4.2), :send,
              s(:sym, :%),
              s(:const,
                s(:const, nil, :Float), :INFINITY)),
            s(:lvar, :bug6048)),
          s(:send, nil, :assert_equal,
            s(:float, 4.2),
            s(:send,
              s(:float, 4.2), :%,
              s(:const,
                s(:const, nil, :Float), :INFINITY)),
            s(:lvar, :bug6048)),
          s(:send, nil, :assert_is_minus_zero,
            s(:send,
              s(:float, -0.0), :%,
              s(:float, 4.2))),
          s(:send, nil, :assert_is_minus_zero,
            s(:send,
              s(:float, -0.0), :send,
              s(:sym, :%),
              s(:float, 4.2))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ZeroDivisionError),
              s(:lvar, :bug6048)),
            s(:args),
            s(:send,
              s(:float, 4.2), :send,
              s(:sym, :%),
              s(:float, 0.0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ZeroDivisionError),
              s(:lvar, :bug6048)),
            s(:args),
            s(:send,
              s(:float, 4.2), :%,
              s(:float, 0.0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ZeroDivisionError),
              s(:lvar, :bug6048)),
            s(:args),
            s(:send,
              s(:int, 42), :send,
              s(:sym, :%),
              s(:int, 0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ZeroDivisionError),
              s(:lvar, :bug6048)),
            s(:args),
            s(:send,
              s(:int, 42), :%,
              s(:int, 0))))),
      s(:def, :test_modulo4,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:begin,
                s(:float, 0.0)), :modulo,
              s(:const,
                s(:const, nil, :Float), :NAN)),
            s(:sym, :nan?)),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:begin,
                s(:float, 1.0)), :modulo,
              s(:const,
                s(:const, nil, :Float), :NAN)),
            s(:sym, :nan?)),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :INFINITY), :modulo,
              s(:int, 1)),
            s(:sym, :nan?)))),
      s(:def, :test_divmod2,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:float, 1.0),
              s(:float, 0.0)),
            s(:send,
              s(:float, 2.0), :divmod,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:float, 1.0),
              s(:float, 0.0)),
            s(:send,
              s(:float, 2.0), :divmod,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 32))), :coerce,
                  s(:int, 2)), :first))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:float, 1.0),
              s(:float, 0.0)),
            s(:send,
              s(:float, 2.0), :divmod,
              s(:float, 2.0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:float, 2.0), :divmod,
              s(:nil))),
          s(:lvasgn, :inf,
            s(:const,
              s(:const, nil, :Float), :INFINITY)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ZeroDivisionError)),
            s(:args),
            s(:send,
              s(:lvar, :inf), :divmod,
              s(:int, 0))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :a),
              s(:lvasgn, :b)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:float, 2.0), :**,
                  s(:int, 32))), :divmod,
              s(:float, 1.0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 2), :**,
              s(:int, 32)),
            s(:lvar, :a)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:lvar, :b)))),
      s(:def, :test_pow,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:float, 1.0),
            s(:send,
              s(:float, 1.0), :**,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))))),
          s(:send, nil, :assert_equal,
            s(:float, 1.0),
            s(:send,
              s(:float, 1.0), :**,
              s(:float, 1.0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:float, 1.0), :**,
              s(:nil))))),
      s(:def, :test_eql,
        s(:args),
        s(:begin,
          s(:lvasgn, :inf,
            s(:const,
              s(:const, nil, :Float), :INFINITY)),
          s(:lvasgn, :nan,
            s(:const,
              s(:const, nil, :Float), :NAN)),
          s(:send, nil, :assert_operator,
            s(:float, 1.0),
            s(:sym, :eql?),
            s(:float, 1.0)),
          s(:send, nil, :assert_operator,
            s(:lvar, :inf),
            s(:sym, :eql?),
            s(:lvar, :inf)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :nan),
            s(:sym, :eql?),
            s(:lvar, :nan)),
          s(:send, nil, :assert_not_operator,
            s(:float, 1.0),
            s(:sym, :eql?),
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:float, 1.0),
            s(:int, 1)),
          s(:send, nil, :assert_not_equal,
            s(:float, 1.0),
            s(:send,
              s(:int, 2), :**,
              s(:int, 32))),
          s(:send, nil, :assert_not_equal,
            s(:float, 1.0),
            s(:lvar, :nan)),
          s(:send, nil, :assert_not_equal,
            s(:float, 1.0),
            s(:nil)))),
      s(:def, :test_cmp,
        s(:args),
        s(:begin,
          s(:lvasgn, :inf,
            s(:const,
              s(:const, nil, :Float), :INFINITY)),
          s(:lvasgn, :nan,
            s(:const,
              s(:const, nil, :Float), :NAN)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:float, 1.0), :<=>,
              s(:float, 1.0))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:float, 1.0), :<=>,
              s(:float, 0.0))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:float, 1.0), :<=>,
              s(:float, 2.0))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:float, 1.0), :<=>,
              s(:nil))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:float, 1.0), :<=>,
              s(:lvar, :nan))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :nan), :<=>,
              s(:float, 1.0))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:float, 1.0), :<=>,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:float, 1.0), :<=>,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:float, 1.0), :<=>,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:float, 1.0), :<=>,
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :inf), :<=>,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Float), :MAX), :to_i), :*,
                  s(:int, 2))))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send,
                s(:lvar, :inf), :-@), :<=>,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Float), :MAX), :to_i), :-@), :*,
                  s(:int, 2))))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Float), :MAX), :to_i), :*,
                  s(:int, 2))), :<=>,
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Float), :MAX), :to_i), :-@), :*,
                  s(:int, 2))), :<=>,
              s(:send,
                s(:lvar, :inf), :-@))),
          s(:lvasgn, :bug3609,
            s(:str, "[ruby-core:31470]")),
          s(:defs,
            s(:lvasgn, :pinf,
              s(:send,
                s(:const, nil, :Object), :new)), :infinite?,
            s(:args),
            s(:int, 1)),
          s(:defs,
            s(:lvasgn, :ninf,
              s(:send,
                s(:const, nil, :Object), :new)), :infinite?,
            s(:args),
            s(:int, -1)),
          s(:defs,
            s(:lvasgn, :fin,
              s(:send,
                s(:const, nil, :Object), :new)), :infinite?,
            s(:args),
            s(:nil)),
          s(:lvasgn, :nonum,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :inf), :<=>,
              s(:lvar, :pinf)),
            s(:lvar, :bug3609)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :inf), :<=>,
              s(:lvar, :fin)),
            s(:lvar, :bug3609)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :inf), :<=>,
              s(:lvar, :ninf)),
            s(:lvar, :bug3609)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :inf), :<=>,
              s(:lvar, :nonum)),
            s(:lvar, :bug3609)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send,
                s(:lvar, :inf), :-@), :<=>,
              s(:lvar, :pinf)),
            s(:lvar, :bug3609)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send,
                s(:lvar, :inf), :-@), :<=>,
              s(:lvar, :fin)),
            s(:lvar, :bug3609)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:lvar, :inf), :-@), :<=>,
              s(:lvar, :ninf)),
            s(:lvar, :bug3609)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:send,
                s(:lvar, :inf), :-@), :<=>,
              s(:lvar, :nonum)),
            s(:lvar, :bug3609)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:float, 1.0), :>,
              s(:nil))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:float, 1.0), :>=,
              s(:nil))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:float, 1.0), :<,
              s(:nil))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:float, 1.0), :<=,
              s(:nil))))),
      s(:def, :test_zero_p,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_predicate,
            s(:float, 0.0),
            s(:sym, :zero?)),
          s(:send, nil, :assert_not_predicate,
            s(:float, 1.0),
            s(:sym, :zero?)))),
      s(:def, :test_positive_p,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_predicate,
            s(:float, 1.0),
            s(:sym, :positive?)),
          s(:send, nil, :assert_not_predicate,
            s(:float, 0.0),
            s(:sym, :positive?)),
          s(:send, nil, :assert_not_predicate,
            s(:float, -0.0),
            s(:sym, :positive?)),
          s(:send, nil, :assert_not_predicate,
            s(:float, -1.0),
            s(:sym, :positive?)),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:begin,
                s(:send,
                  s(:float, 0.0), :next_float)), :+@),
            s(:sym, :positive?)),
          s(:send, nil, :assert_not_predicate,
            s(:send,
              s(:begin,
                s(:send,
                  s(:float, 0.0), :next_float)), :-@),
            s(:sym, :positive?)),
          s(:send, nil, :assert_predicate,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:sym, :positive?)),
          s(:send, nil, :assert_not_predicate,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :INFINITY), :-@),
            s(:sym, :positive?)),
          s(:send, nil, :assert_not_predicate,
            s(:const,
              s(:const, nil, :Float), :NAN),
            s(:sym, :positive?)))),
      s(:def, :test_negative_p,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_predicate,
            s(:float, -1.0),
            s(:sym, :negative?)),
          s(:send, nil, :assert_not_predicate,
            s(:float, -0.0),
            s(:sym, :negative?)),
          s(:send, nil, :assert_not_predicate,
            s(:float, 0.0),
            s(:sym, :negative?)),
          s(:send, nil, :assert_not_predicate,
            s(:float, 1.0),
            s(:sym, :negative?)),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:begin,
                s(:send,
                  s(:float, 0.0), :next_float)), :-@),
            s(:sym, :negative?)),
          s(:send, nil, :assert_not_predicate,
            s(:send,
              s(:begin,
                s(:send,
                  s(:float, 0.0), :next_float)), :+@),
            s(:sym, :negative?)),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :INFINITY), :-@),
            s(:sym, :negative?)),
          s(:send, nil, :assert_not_predicate,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:sym, :negative?)),
          s(:send, nil, :assert_not_predicate,
            s(:const,
              s(:const, nil, :Float), :NAN),
            s(:sym, :negative?)))),
      s(:def, :test_infinite_p,
        s(:args),
        s(:begin,
          s(:lvasgn, :inf,
            s(:const,
              s(:const, nil, :Float), :INFINITY)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :inf), :infinite?)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :inf), :-@)), :infinite?)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:float, 1.0), :infinite?)))),
      s(:def, :test_finite_p,
        s(:args),
        s(:begin,
          s(:lvasgn, :inf,
            s(:const,
              s(:const, nil, :Float), :INFINITY)),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :inf),
            s(:sym, :finite?)),
          s(:send, nil, :assert_not_predicate,
            s(:send,
              s(:lvar, :inf), :-@),
            s(:sym, :finite?)),
          s(:send, nil, :assert_predicate,
            s(:float, 1.0),
            s(:sym, :finite?)))),
      s(:def, :test_floor_ceil_round_truncate,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:float, 1.5), :floor)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:float, 1.5), :ceil)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:float, 1.5), :round)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:float, 1.5), :truncate)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:float, 2.0), :floor)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:float, 2.0), :ceil)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:float, 2.0), :round)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:float, 2.0), :truncate)),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:begin,
                s(:float, -1.5)), :floor)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:begin,
                s(:float, -1.5)), :ceil)),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:begin,
                s(:float, -1.5)), :round)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:begin,
                s(:float, -1.5)), :truncate)),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:begin,
                s(:float, -2.0)), :floor)),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:begin,
                s(:float, -2.0)), :ceil)),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:begin,
                s(:float, -2.0)), :round)),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:begin,
                s(:float, -2.0)), :truncate)),
          s(:lvasgn, :inf,
            s(:const,
              s(:const, nil, :Float), :INFINITY)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send,
              s(:lvar, :inf), :floor)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send,
              s(:lvar, :inf), :ceil)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send,
              s(:lvar, :inf), :round)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send,
              s(:lvar, :inf), :truncate)))),
      s(:def, :test_round_with_precision,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:float, 1.1),
            s(:send,
              s(:float, 1.111), :round,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:float, 1.11),
            s(:send,
              s(:float, 1.111), :round,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 11110.0),
            s(:send,
              s(:float, 11111.1), :round,
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:float, 11100.0),
            s(:send,
              s(:float, 11111.1), :round,
              s(:int, -2))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 10), :**,
              s(:int, 300)),
            s(:send,
              s(:float, 1.1e+300), :round,
              s(:int, -300))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:int, 10), :**,
                s(:int, 300)), :-@),
            s(:send,
              s(:float, -1.1e+300), :round,
              s(:int, -300))),
          s(:send, nil, :assert_equal,
            s(:float, 1.0e-300),
            s(:send,
              s(:float, 1.1e-300), :round,
              s(:int, 300))),
          s(:send, nil, :assert_equal,
            s(:float, -1.0e-300),
            s(:send,
              s(:float, -1.1e-300), :round,
              s(:int, 300))),
          s(:lvasgn, :bug5227,
            s(:str, "[ruby-core:39093]")),
          s(:send, nil, :assert_equal,
            s(:float, 42.0),
            s(:send,
              s(:float, 42.0), :round,
              s(:int, 308)),
            s(:lvar, :bug5227)),
          s(:send, nil, :assert_equal,
            s(:float, 1.0e+307),
            s(:send,
              s(:float, 1.0e+307), :round,
              s(:int, 2)),
            s(:lvar, :bug5227)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:float, 1.0), :round,
              s(:str, "4"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:float, 1.0), :round,
              s(:nil))),
          s(:defs,
            s(:lvasgn, :prec,
              s(:send,
                s(:const, nil, :Object), :new)), :to_int,
            s(:args),
            s(:int, 2)),
          s(:send, nil, :assert_equal,
            s(:float, 1.0),
            s(:send,
              s(:float, 0.998), :round,
              s(:lvar, :prec))))),
      s(:casgn, nil, :VS,
        s(:array,
          s(:float, 1.8446744073709552e+19),
          s(:float, 1.8446744073709552e+19),
          s(:float, 1.8446744073709552e+19),
          s(:float, 1.8446744073709552e+19),
          s(:float, 1.8446744073709552e+19),
          s(:float, 1.8446744073709552e+19),
          s(:float, 1.8446744073709552e+19),
          s(:float, 4.6116860184273874e+18),
          s(:float, 4.6116860184273874e+18),
          s(:float, 4.6116860184273874e+18),
          s(:float, 4.6116860184273874e+18),
          s(:float, 4.6116860184273874e+18),
          s(:float, 4.6116860184273874e+18),
          s(:float, 4.6116860184273874e+18),
          s(:float, 4294967297.0),
          s(:float, 4294967296.0),
          s(:float, 4294967295.8),
          s(:float, 4294967295.5),
          s(:float, 4294967295.2),
          s(:float, 4294967295.0),
          s(:float, 4294967294.0),
          s(:float, 1073741825.0),
          s(:float, 1073741824.0),
          s(:float, 1073741823.8),
          s(:float, 1073741823.5),
          s(:float, 1073741823.2),
          s(:float, 1073741823.0),
          s(:float, 1073741822.0),
          s(:float, -1073741823.0),
          s(:float, -1073741824.0),
          s(:float, -1073741824.2),
          s(:float, -1073741824.5),
          s(:float, -1073741824.8),
          s(:float, -1073741825.0),
          s(:float, -1073741826.0),
          s(:float, -4294967295.0),
          s(:float, -4294967296.0),
          s(:float, -4294967296.2),
          s(:float, -4294967296.5),
          s(:float, -4294967296.8),
          s(:float, -4294967297.0),
          s(:float, -4294967298.0),
          s(:float, -4.6116860184273874e+18),
          s(:float, -4.6116860184273874e+18),
          s(:float, -4.6116860184273874e+18),
          s(:float, -4.6116860184273874e+18),
          s(:float, -4.6116860184273874e+18),
          s(:float, -4.6116860184273874e+18),
          s(:float, -4.6116860184273874e+18),
          s(:float, -1.8446744073709552e+19),
          s(:float, -1.8446744073709552e+19),
          s(:float, -1.8446744073709552e+19),
          s(:float, -1.8446744073709552e+19),
          s(:float, -1.8446744073709552e+19),
          s(:float, -1.8446744073709552e+19),
          s(:float, -1.8446744073709552e+19))),
      s(:def, :test_truncate,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :f)),
          s(:begin,
            s(:lvasgn, :i,
              s(:send,
                s(:lvar, :f), :truncate)),
            s(:send, nil, :assert_equal,
              s(:lvar, :i),
              s(:send,
                s(:lvar, :f), :to_i)),
            s(:if,
              s(:send,
                s(:lvar, :f), :<,
                s(:int, 0)),
              s(:send, nil, :assert_operator,
                s(:lvar, :i),
                s(:sym, :<),
                s(:int, 0)),
              s(:send, nil, :assert_operator,
                s(:lvar, :i),
                s(:sym, :>),
                s(:int, 0))),
            s(:send, nil, :assert_operator,
              s(:send,
                s(:lvar, :i), :abs),
              s(:sym, :<=),
              s(:send,
                s(:lvar, :f), :abs)),
            s(:lvasgn, :d,
              s(:send,
                s(:send,
                  s(:lvar, :f), :abs), :-,
                s(:send,
                  s(:lvar, :i), :abs))),
            s(:send, nil, :assert_operator,
              s(:int, 0),
              s(:sym, :<=),
              s(:lvar, :d)),
            s(:send, nil, :assert_operator,
              s(:lvar, :d),
              s(:sym, :<),
              s(:int, 1))))),
      s(:def, :test_ceil,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :f)),
          s(:begin,
            s(:lvasgn, :i,
              s(:send,
                s(:lvar, :f), :ceil)),
            s(:if,
              s(:send,
                s(:lvar, :f), :<,
                s(:int, 0)),
              s(:send, nil, :assert_operator,
                s(:lvar, :i),
                s(:sym, :<),
                s(:int, 0)),
              s(:send, nil, :assert_operator,
                s(:lvar, :i),
                s(:sym, :>),
                s(:int, 0))),
            s(:send, nil, :assert_operator,
              s(:lvar, :i),
              s(:sym, :>=),
              s(:lvar, :f)),
            s(:lvasgn, :d,
              s(:send,
                s(:lvar, :f), :-,
                s(:lvar, :i))),
            s(:send, nil, :assert_operator,
              s(:int, -1),
              s(:sym, :<),
              s(:lvar, :d)),
            s(:send, nil, :assert_operator,
              s(:lvar, :d),
              s(:sym, :<=),
              s(:int, 0))))),
      s(:def, :test_floor,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :f)),
          s(:begin,
            s(:lvasgn, :i,
              s(:send,
                s(:lvar, :f), :floor)),
            s(:if,
              s(:send,
                s(:lvar, :f), :<,
                s(:int, 0)),
              s(:send, nil, :assert_operator,
                s(:lvar, :i),
                s(:sym, :<),
                s(:int, 0)),
              s(:send, nil, :assert_operator,
                s(:lvar, :i),
                s(:sym, :>),
                s(:int, 0))),
            s(:send, nil, :assert_operator,
              s(:lvar, :i),
              s(:sym, :<=),
              s(:lvar, :f)),
            s(:lvasgn, :d,
              s(:send,
                s(:lvar, :f), :-,
                s(:lvar, :i))),
            s(:send, nil, :assert_operator,
              s(:int, 0),
              s(:sym, :<=),
              s(:lvar, :d)),
            s(:send, nil, :assert_operator,
              s(:lvar, :d),
              s(:sym, :<),
              s(:int, 1))))),
      s(:def, :test_round,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :VS), :each),
          s(:args,
            s(:arg, :f)),
          s(:begin,
            s(:lvasgn, :msg,
              s(:dstr,
                s(:str, "round("),
                s(:begin,
                  s(:lvar, :f)),
                s(:str, ")"))),
            s(:lvasgn, :i,
              s(:send,
                s(:lvar, :f), :round)),
            s(:if,
              s(:send,
                s(:lvar, :f), :<,
                s(:int, 0)),
              s(:send, nil, :assert_operator,
                s(:lvar, :i),
                s(:sym, :<),
                s(:int, 0),
                s(:lvar, :msg)),
              s(:send, nil, :assert_operator,
                s(:lvar, :i),
                s(:sym, :>),
                s(:int, 0),
                s(:lvar, :msg))),
            s(:lvasgn, :d,
              s(:send,
                s(:lvar, :f), :-,
                s(:lvar, :i))),
            s(:send, nil, :assert_operator,
              s(:float, -0.5),
              s(:sym, :<=),
              s(:lvar, :d),
              s(:lvar, :msg)),
            s(:send, nil, :assert_operator,
              s(:lvar, :d),
              s(:sym, :<=),
              s(:float, 0.5),
              s(:lvar, :msg))))),
      s(:def, :test_Float,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_delta,
            s(:float, 0.125),
            s(:send, nil, :Float,
              s(:str, "0.1_2_5")),
            s(:float, 1.0e-05)),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.125),
            s(:send,
              s(:str, "0.1_2_5__"), :to_f),
            s(:float, 1.0e-05)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:block,
                s(:send, nil, :suppress_warning),
                s(:args),
                s(:send, nil, :Float,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:array,
                          s(:int, 1)), :*,
                        s(:int, 10000))), :join))), :infinite?)),
          s(:send, nil, :assert_not_predicate,
            s(:send, nil, :Float,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:array,
                      s(:int, 1)), :*,
                    s(:int, 10000))), :join,
                s(:str, "_"))),
            s(:sym, :infinite?)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "1.0\u00001"))),
          s(:send, nil, :assert_equal,
            s(:float, 15.9375),
            s(:send, nil, :Float,
              s(:str, "0xf.fp0"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "0x"))),
          s(:send, nil, :assert_equal,
            s(:int, 15),
            s(:send, nil, :Float,
              s(:str, "0xf"))),
          s(:send, nil, :assert_equal,
            s(:int, 15),
            s(:send, nil, :Float,
              s(:str, "0xfp0"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "0xfp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "0xf."))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "0xf.p"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "0xf.p0"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "0xf.f"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Float,
              s(:str, "0xf.fp"))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send, nil, :Float,
              s(:str, "0xf.fp1000000000000000"))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:block,
                s(:send, nil, :suppress_warning),
                s(:args),
                s(:send, nil, :Float,
                  s(:str, "1e10_00"))), :infinite?)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :Float,
              s(:nil))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :to_f,
            s(:args),
            s(:begin,
              s(:lvasgn, :inf,
                s(:const,
                  s(:const, nil, :Float), :INFINITY)),
              s(:send,
                s(:lvar, :inf), :/,
                s(:lvar, :inf)))),
          s(:send, nil, :assert_predicate,
            s(:send, nil, :Float,
              s(:lvar, :o)),
            s(:sym, :nan?)))),
      s(:def, :test_invalid_str,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug4310,
            s(:str, "[ruby-core:34820]")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError),
              s(:lvar, :bug4310)),
            s(:args),
            s(:block,
              s(:send, nil, :under_gc_stress),
              s(:args),
              s(:send, nil, :Float,
                s(:send,
                  s(:str, "a"), :*,
                  s(:int, 10000))))))),
      s(:def, :test_num2dbl,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:block,
              s(:send,
                s(:float, 1.0), :step,
                s(:float, 2.0),
                s(:str, "0.5")),
              s(:args), nil)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:float, 1.0), :step,
                s(:float, 2.0),
                s(:nil)),
              s(:args), nil)))),
      s(:def, :test_sleep_with_Float,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised,
            s(:str, "[ruby-core:23282]")),
          s(:args),
          s(:send, nil, :sleep,
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:float, 0.1), :+,
                              s(:float, 0.1)), :+,
                            s(:float, 0.1)), :+,
                          s(:float, 0.1)), :+,
                        s(:float, 0.1)), :+,
                      s(:float, 0.1)), :+,
                    s(:float, 0.1)), :+,
                  s(:float, 0.1)), :+,
                s(:float, 0.1)), :+,
              s(:float, 0.1))))),
      s(:def, :test_step,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:int, 1000), :times),
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:send, nil, :rand)),
              s(:lvasgn, :b,
                s(:send,
                  s(:lvar, :a), :+,
                  s(:send,
                    s(:send, nil, :rand), :*,
                    s(:int, 1000)))),
              s(:lvasgn, :s,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :b), :-,
                      s(:lvar, :a))), :/,
                  s(:int, 10))),
              s(:send, nil, :assert_equal,
                s(:int, 11),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:begin,
                        s(:irange,
                          s(:lvar, :a),
                          s(:lvar, :b))), :step,
                      s(:lvar, :s)), :to_a), :length)))),
          s(:block,
            s(:send,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:float, 1.0),
                    s(:float, 12.7))), :step,
                s(:float, 1.3)), :each),
            s(:args,
              s(:arg, :n)),
            s(:send, nil, :assert_operator,
              s(:lvar, :n),
              s(:sym, :<=),
              s(:float, 12.7))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:float, 5.0),
              s(:float, 4.0),
              s(:float, 3.0),
              s(:float, 2.0)),
            s(:send,
              s(:send,
                s(:float, 5.0), :step,
                s(:float, 1.5),
                s(:int, -1)), :to_a)))),
      s(:def, :test_step2,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:float, 0.0)),
          s(:send,
            s(:send,
              s(:float, 0.0), :step,
              s(:float, 1.0),
              s(:const,
                s(:const, nil, :Float), :INFINITY)), :to_a))),
      s(:def, :test_step_excl,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:int, 1000), :times),
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:send, nil, :rand)),
              s(:lvasgn, :b,
                s(:send,
                  s(:lvar, :a), :+,
                  s(:send,
                    s(:send, nil, :rand), :*,
                    s(:int, 1000)))),
              s(:lvasgn, :s,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :b), :-,
                      s(:lvar, :a))), :/,
                  s(:int, 10))),
              s(:send, nil, :assert_equal,
                s(:int, 10),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:begin,
                        s(:erange,
                          s(:lvar, :a),
                          s(:lvar, :b))), :step,
                      s(:lvar, :s)), :to_a), :length)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:float, 1.0),
              s(:float, 2.9),
              s(:float, 4.8),
              s(:float, 6.699999999999999)),
            s(:send,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:float, 1.0),
                    s(:float, 6.8))), :step,
                s(:float, 1.9)), :to_a)),
          s(:lvasgn, :e,
            s(:send,
              s(:int, 1), :+,
              s(:float, 1.0e-12))),
          s(:block,
            s(:send,
              s(:begin,
                s(:erange,
                  s(:float, 1.0),
                  s(:lvar, :e))), :step,
              s(:float, 1.0e-16)),
            s(:args,
              s(:arg, :n)),
            s(:send, nil, :assert_operator,
              s(:lvar, :n),
              s(:sym, :<=),
              s(:lvar, :e))))),
      s(:def, :test_singleton_method,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:float, 1.0)),
              s(:defs,
                s(:lvar, :a), :foo,
                s(:args), nil))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:const,
                  s(:const, nil, :Float), :INFINITY)),
              s(:defs,
                s(:lvar, :a), :foo,
                s(:args), nil))))),
      s(:def, :test_long_string,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array),
          s(:str, "    assert_in_epsilon(10.0, (\"1.\"+\"1\"*300000).to_f*9)\n"))),
      s(:def, :test_next_float,
        s(:args),
        s(:begin,
          s(:lvasgn, :smallest,
            s(:send,
              s(:float, 0.0), :next_float)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :MAX), :-@),
            s(:send,
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :Float), :INFINITY), :-@)), :next_float)),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :MAX), :-@),
            s(:sym, :<),
            s(:send,
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :Float), :MAX), :-@)), :next_float)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :EPSILON), :/,
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:begin,
                  s(:float, -1.0)), :next_float), :+,
              s(:float, 1.0))),
          s(:send, nil, :assert_operator,
            s(:float, 0.0),
            s(:sym, :<),
            s(:lvar, :smallest)),
          s(:send, nil, :assert_operator,
            s(:array,
              s(:float, 0.0),
              s(:lvar, :smallest)),
            s(:sym, :include?),
            s(:send,
              s(:lvar, :smallest), :/,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :EPSILON),
            s(:send,
              s(:send,
                s(:float, 1.0), :next_float), :-,
              s(:float, 1.0))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:const,
                s(:const, nil, :Float), :MAX), :next_float)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:const,
                s(:const, nil, :Float), :INFINITY), :next_float)),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :NAN), :next_float),
            s(:sym, :nan?)))),
      s(:def, :test_prev_float,
        s(:args),
        s(:begin,
          s(:lvasgn, :smallest,
            s(:send,
              s(:float, 0.0), :next_float)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :INFINITY), :-@),
            s(:send,
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :Float), :INFINITY), :-@)), :prev_float)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :INFINITY), :-@),
            s(:send,
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :Float), :MAX), :-@)), :prev_float)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :EPSILON), :-@),
            s(:send,
              s(:send,
                s(:begin,
                  s(:float, -1.0)), :prev_float), :+,
              s(:float, 1.0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :smallest), :-@),
            s(:send,
              s(:float, 0.0), :prev_float)),
          s(:send, nil, :assert_operator,
            s(:array,
              s(:float, 0.0),
              s(:send,
                s(:float, 0.0), :prev_float)),
            s(:sym, :include?),
            s(:send,
              s(:send,
                s(:float, 0.0), :prev_float), :/,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Float), :EPSILON), :-@), :/,
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:float, 1.0), :prev_float), :-,
              s(:float, 1.0))),
          s(:send, nil, :assert_operator,
            s(:const,
              s(:const, nil, :Float), :MAX),
            s(:sym, :>),
            s(:send,
              s(:const,
                s(:const, nil, :Float), :MAX), :prev_float)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :MAX),
            s(:send,
              s(:const,
                s(:const, nil, :Float), :INFINITY), :prev_float)),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :NAN), :prev_float),
            s(:sym, :nan?)))),
      s(:def, :test_next_prev_float_zero,
        s(:args),
        s(:begin,
          s(:lvasgn, :z,
            s(:send,
              s(:send,
                s(:float, 0.0), :next_float), :prev_float)),
          s(:send, nil, :assert_equal,
            s(:float, 0.0),
            s(:lvar, :z)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:float, 1.0), :/,
              s(:lvar, :z))),
          s(:lvasgn, :z,
            s(:send,
              s(:send,
                s(:float, 0.0), :prev_float), :next_float)),
          s(:send, nil, :assert_equal,
            s(:float, 0.0),
            s(:lvar, :z)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :INFINITY), :-@),
            s(:send,
              s(:float, 1.0), :/,
              s(:lvar, :z))))),
      s(:def, :test_hash_0,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug10979,
            s(:str, "[ruby-core:68541] [Bug #10979]")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:float, 0.0), :hash),
            s(:send,
              s(:float, -0.0), :hash)),
          s(:send, nil, :assert_operator,
            s(:float, 0.0),
            s(:sym, :eql?),
            s(:float, -0.0)),
          s(:lvasgn, :h,
            s(:hash,
              s(:pair,
                s(:float, 0.0),
                s(:lvar, :bug10979)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :bug10979),
            s(:send,
              s(:lvar, :h), :[],
              s(:float, -0.0))))))))
