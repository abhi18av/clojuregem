s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestTranscode),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_errors,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :ConverterNotFoundError)),
            s(:args),
            s(:send,
              s(:str, "abc"), :encode,
              s(:str, "foo"),
              s(:str, "bar"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :ConverterNotFoundError)),
            s(:args),
            s(:send,
              s(:str, "abc"), :encode!,
              s(:str, "foo"),
              s(:str, "bar"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :ConverterNotFoundError)),
            s(:args),
            s(:send,
              s(:send,
                s(:str, "abc"), :force_encoding,
                s(:str, "utf-8")), :encode,
              s(:str, "foo"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :ConverterNotFoundError)),
            s(:args),
            s(:send,
              s(:send,
                s(:str, "abc"), :force_encoding,
                s(:str, "utf-8")), :encode!,
              s(:str, "foo"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x80"), :encode,
              s(:str, "utf-8"),
              s(:str, "ASCII-8BIT"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :InvalidByteSequenceError)),
            s(:args),
            s(:send,
              s(:str, "\x80"), :encode,
              s(:str, "utf-8"),
              s(:str, "US-ASCII"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA5"), :encode,
              s(:str, "utf-8"),
              s(:str, "iso-8859-3"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:send,
                s(:str, "hello"), :freeze), :encode!,
              s(:str, "iso-8859-1"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:send,
                s(:str, "\\u3053\\u3093\\u306b\\u3061\\u306f"), :freeze), :encode!,
              s(:str, "iso-8859-1"))))),
      s(:def, :test_arguments,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "abc"),
            s(:send,
              s(:send,
                s(:str, "abc"), :force_encoding,
                s(:str, "utf-8")), :encode,
              s(:str, "iso-8859-1"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "abc"), :force_encoding,
              s(:str, "Shift_JIS")),
            s(:send,
              s(:send,
                s(:str, "abc"), :force_encoding,
                s(:str, "Shift_JIS")), :encode,
              s(:str, "Shift_JIS"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "abc"), :force_encoding,
              s(:str, "Shift_JIS")),
            s(:send,
              s(:send,
                s(:str, "abc"), :force_encoding,
                s(:str, "Shift_JIS")), :encode!,
              s(:str, "Shift_JIS"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "Dürst"), :encoding),
            s(:send,
              s(:send,
                s(:send,
                  s(:str, "D\xFCrst"), :force_encoding,
                  s(:str, "iso-8859-1")), :encode,
                s(:str, "utf-8")), :encoding)),
          s(:send, nil, :assert_equal,
            s(:str, "Dürst"),
            s(:send,
              s(:str, "D\xFCrst"), :encode,
              s(:str, "utf-8"),
              s(:send,
                s(:const, nil, :Encoding), :find,
                s(:str, "ISO-8859-1")))),
          s(:send, nil, :assert_equal,
            s(:str, "Dürst"),
            s(:send,
              s(:str, "D\xFCrst"), :encode,
              s(:send,
                s(:const, nil, :Encoding), :find,
                s(:str, "utf-8")),
              s(:str, "ISO-8859-1"))),
          s(:send, nil, :assert_equal,
            s(:str, "Dürst"),
            s(:send,
              s(:str, "D\xFCrst"), :encode,
              s(:send,
                s(:const, nil, :Encoding), :find,
                s(:str, "utf-8")),
              s(:send,
                s(:const, nil, :Encoding), :find,
                s(:str, "ISO-8859-1")))))),
      s(:def, :test_noargument,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :EnvUtil), :with_default_internal,
              s(:nil)),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:str, "あ"), :encode),
                s(:str, "あ")),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:str, "\xE3\x81\x82\x81"), :force_encoding,
                    s(:str, "utf-8")), :encode),
                s(:send,
                  s(:str, "\xE3\x81\x82\x81"), :force_encoding,
                  s(:str, "utf-8"))))),
          s(:block,
            s(:send,
              s(:const, nil, :EnvUtil), :with_default_internal,
              s(:str, "EUC-JP")),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:str, "あ"), :encode),
                s(:send,
                  s(:str, "\xA4\xA2"), :force_encoding,
                  s(:str, "EUC-JP"))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:str, "\xE3\x81\x82\x81"), :force_encoding,
                    s(:str, "utf-8")), :encode),
                s(:send,
                  s(:str, "\xA4\xA2?"), :force_encoding,
                  s(:str, "EUC-JP"))))))),
      s(:def, :test_length,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "€"), :*,
              s(:int, 20)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:str, "\xA4"), :*,
                  s(:int, 20))), :encode,
              s(:str, "utf-8"),
              s(:str, "iso-8859-15"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "€"), :*,
              s(:int, 20)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:str, "\xA4"), :*,
                  s(:int, 20))), :encode!,
              s(:str, "utf-8"),
              s(:str, "iso-8859-15"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "€"), :*,
              s(:int, 2000)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:str, "\xA4"), :*,
                  s(:int, 2000))), :encode,
              s(:str, "utf-8"),
              s(:str, "iso-8859-15"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "€"), :*,
              s(:int, 2000)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:str, "\xA4"), :*,
                  s(:int, 2000))), :encode!,
              s(:str, "utf-8"),
              s(:str, "iso-8859-15"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "€"), :*,
              s(:int, 200000)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:str, "\xA4"), :*,
                  s(:int, 200000))), :encode,
              s(:str, "utf-8"),
              s(:str, "iso-8859-15"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "€"), :*,
              s(:int, 200000)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:str, "\xA4"), :*,
                  s(:int, 200000))), :encode!,
              s(:str, "utf-8"),
              s(:str, "iso-8859-15"))))),
      s(:def, :check_both_ways,
        s(:args,
          s(:arg, :utf8),
          s(:arg, :raw),
          s(:arg, :encoding)),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :utf8), :force_encoding,
              s(:str, "utf-8")),
            s(:send,
              s(:lvar, :raw), :encode,
              s(:str, "utf-8"),
              s(:lvar, :encoding)),
            s(:send,
              s(:send,
                s(:lvar, :utf8), :dump), :+,
              s(:send,
                s(:lvar, :raw), :dump))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :raw), :force_encoding,
              s(:lvar, :encoding)),
            s(:send,
              s(:lvar, :utf8), :encode,
              s(:lvar, :encoding),
              s(:str, "utf-8"))))),
      s(:def, :check_both_ways2,
        s(:args,
          s(:arg, :str1),
          s(:arg, :enc1),
          s(:arg, :str2),
          s(:arg, :enc2)),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :str1), :force_encoding,
              s(:lvar, :enc1)),
            s(:send,
              s(:lvar, :str2), :encode,
              s(:lvar, :enc1),
              s(:lvar, :enc2))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :str2), :force_encoding,
              s(:lvar, :enc2)),
            s(:send,
              s(:lvar, :str1), :encode,
              s(:lvar, :enc2),
              s(:lvar, :enc1))))),
      s(:def, :test_encoding_of_ascii_originating_from_binary,
        s(:args),
        s(:begin,
          s(:lvasgn, :binary_string,
            s(:array,
              s(:int, 130),
              s(:int, 116),
              s(:int, 104),
              s(:int, 105),
              s(:int, 115),
              s(:int, 32),
              s(:int, 105),
              s(:int, 115),
              s(:int, 32),
              s(:int, 97),
              s(:int, 32),
              s(:int, 118),
              s(:int, 101),
              s(:int, 114),
              s(:int, 121),
              s(:int, 32),
              s(:int, 108),
              s(:int, 111),
              s(:int, 110),
              s(:int, 103),
              s(:int, 32),
              s(:int, 115),
              s(:int, 116),
              s(:int, 114),
              s(:int, 105),
              s(:int, 110),
              s(:int, 103))),
          s(:sclass,
            s(:lvar, :binary_string),
            s(:def, :make_cow_substring,
              s(:args),
              s(:send,
                s(:send, nil, :pack,
                  s(:str, "C27")), :slice,
                s(:int, 1),
                s(:int, 26)))),
          s(:lvasgn, :ascii_string,
            s(:send,
              s(:lvar, :binary_string), :make_cow_substring)),
          s(:send, nil, :assert_equal,
            s(:str, "this is a very long string"),
            s(:lvar, :ascii_string)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :ASCII_8BIT),
            s(:send,
              s(:lvar, :ascii_string), :encoding)),
          s(:lvasgn, :utf8_string,
            s(:nil)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:str, "JRUBY-6764")),
            s(:args),
            s(:lvasgn, :utf8_string,
              s(:send,
                s(:lvar, :ascii_string), :encode,
                s(:const,
                  s(:const, nil, :Encoding), :UTF_8)))),
          s(:send, nil, :assert_equal,
            s(:str, "this is a very long string"),
            s(:lvar, :utf8_string)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :UTF_8),
            s(:send,
              s(:lvar, :utf8_string), :encoding)))),
      s(:def, :test_encodings,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "まつもと ゆきひろ"),
            s(:str, "\x82\xDC\x82\xC2\x82\xE0\x82\xC6 \x82\xE4\x82\xAB\x82\xD0\x82\xEB"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "まつもと ゆきひろ"),
            s(:str, "\xA4\xDE\xA4\xC4\xA4\xE2\xA4\xC8 \xA4\xE6\xA4\xAD\xA4\xD2\xA4\xED"),
            s(:str, "euc-jp")),
          s(:send, nil, :check_both_ways,
            s(:str, "まつもと ゆきひろ"),
            s(:str, "\xA4\xDE\xA4\xC4\xA4\xE2\xA4\xC8 \xA4\xE6\xA4\xAD\xA4\xD2\xA4\xED"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "松本行弘"),
            s(:str, "\x8F\xBC\x96{\x8Ds\x8DO"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "松本行弘"),
            s(:str, "\xBE\xBE\xCB\xDC\xB9\xD4\xB9\xB0"),
            s(:str, "euc-jp")),
          s(:send, nil, :check_both_ways,
            s(:str, "松本行弘"),
            s(:str, "\xBE\xBE\xCB\xDC\xB9\xD4\xB9\xB0"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "Dürst"),
            s(:str, "D\xFCrst"),
            s(:str, "iso-8859-1")),
          s(:send, nil, :check_both_ways,
            s(:str, "Dürst"),
            s(:str, "D\xFCrst"),
            s(:str, "iso-8859-2")),
          s(:send, nil, :check_both_ways,
            s(:str, "Dürst"),
            s(:str, "D\xFCrst"),
            s(:str, "iso-8859-3")),
          s(:send, nil, :check_both_ways,
            s(:str, "Dürst"),
            s(:str, "D\xFCrst"),
            s(:str, "iso-8859-4")),
          s(:send, nil, :check_both_ways,
            s(:str, "Dürst"),
            s(:str, "D\xFCrst"),
            s(:str, "iso-8859-9")),
          s(:send, nil, :check_both_ways,
            s(:str, "Dürst"),
            s(:str, "D\xFCrst"),
            s(:str, "iso-8859-10")),
          s(:send, nil, :check_both_ways,
            s(:str, "Dürst"),
            s(:str, "D\xFCrst"),
            s(:str, "iso-8859-13")),
          s(:send, nil, :check_both_ways,
            s(:str, "Dürst"),
            s(:str, "D\xFCrst"),
            s(:str, "iso-8859-14")),
          s(:send, nil, :check_both_ways,
            s(:str, "Dürst"),
            s(:str, "D\xFCrst"),
            s(:str, "iso-8859-15")),
          s(:send, nil, :check_both_ways,
            s(:str, "résumé"),
            s(:str, "r\xE9sum\xE9"),
            s(:str, "iso-8859-1")),
          s(:send, nil, :check_both_ways,
            s(:str, "előírás"),
            s(:str, "el\xF5\xEDr\xE1s"),
            s(:str, "iso-8859-2")),
          s(:send, nil, :check_both_ways,
            s(:str, "перевод"),
            s(:str, "\xDF\xD5\xE0\xD5\xD2\xDE\xD4"),
            s(:str, "iso-8859-5")),
          s(:send, nil, :check_both_ways,
            s(:str, "كتب"),
            s(:str, "\xE3\xCA\xC8"),
            s(:str, "iso-8859-6")),
          s(:send, nil, :check_both_ways,
            s(:str, "日記"),
            s(:str, "\x93\xFA\x8BL"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "日記"),
            s(:str, "\xC6\xFC\xB5\xAD"),
            s(:str, "euc-jp")),
          s(:send, nil, :check_both_ways,
            s(:str, "日記"),
            s(:str, "\xC6\xFC\xB5\xAD"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "애인구함 朴지인"),
            s(:str, "\xBE\xD6\xC0\xCE\xB1\xB8\xC7\xD4 \xDA\xD3\xC1\xF6\xC0\xCE"),
            s(:str, "euc-kr")),
          s(:send, nil, :check_both_ways,
            s(:str, "아햏햏 똠방횽님 사랑휖"),
            s(:str, "\xBE\xC6\xC1d\xC1d \x8Cc\xB9\xE6\xC4O\xB4\xD4 \xBB\xE7\xB6\xFB\xC5B"),
            s(:str, "cp949")),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :ISO_8859_1),
            s(:send,
              s(:send,
                s(:send,
                  s(:str, "D\xFCrst"), :force_encoding,
                  s(:str, "iso-8859-2")), :encode,
                s(:str, "iso-8859-1"),
                s(:str, "iso-8859-1")), :encoding)))),
      s(:def, :test_twostep,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:str, "D\xFCrst"), :force_encoding,
            s(:str, "iso-8859-2")),
          s(:send,
            s(:str, "D\xFCrst"), :encode,
            s(:str, "iso-8859-2"),
            s(:str, "iso-8859-1")))),
      s(:def, :test_ascii_range,
        s(:args),
        s(:begin,
          s(:lvasgn, :encodings,
            s(:array,
              s(:str, "US-ASCII"),
              s(:str, "ASCII-8BIT"),
              s(:str, "ISO-8859-1"),
              s(:str, "ISO-8859-2"),
              s(:str, "ISO-8859-3"),
              s(:str, "ISO-8859-4"),
              s(:str, "ISO-8859-5"),
              s(:str, "ISO-8859-6"),
              s(:str, "ISO-8859-7"),
              s(:str, "ISO-8859-8"),
              s(:str, "ISO-8859-9"),
              s(:str, "ISO-8859-10"),
              s(:str, "ISO-8859-11"),
              s(:str, "ISO-8859-13"),
              s(:str, "ISO-8859-14"),
              s(:str, "ISO-8859-15"),
              s(:str, "EUC-JP"),
              s(:str, "SHIFT_JIS"),
              s(:str, "EUC-KR"))),
          s(:lvasgn, :all_ascii,
            s(:send,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 0),
                    s(:int, 127))), :to_a), :pack,
              s(:str, "C*"))),
          s(:block,
            s(:send,
              s(:lvar, :encodings), :each),
            s(:args,
              s(:arg, :enc)),
            s(:begin,
              s(:lvasgn, :test_start,
                s(:lvar, :all_ascii)),
              s(:send, nil, :assert_equal,
                s(:lvar, :test_start),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :test_start), :encode,
                      s(:str, "UTF-8"),
                      s(:lvar, :enc)), :encode,
                    s(:lvar, :enc)), :force_encoding,
                  s(:str, "ASCII-8BIT"))))))),
      s(:def, :test_all_bytes,
        s(:args),
        s(:begin,
          s(:lvasgn, :encodings_8859,
            s(:array,
              s(:str, "ISO-8859-1"),
              s(:str, "ISO-8859-2"),
              s(:str, "ISO-8859-4"),
              s(:str, "ISO-8859-5"),
              s(:str, "ISO-8859-9"),
              s(:str, "ISO-8859-10"),
              s(:str, "ISO-8859-13"),
              s(:str, "ISO-8859-14"),
              s(:str, "ISO-8859-15"))),
          s(:lvasgn, :all_bytes,
            s(:send,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 0),
                    s(:int, 255))), :to_a), :pack,
              s(:str, "C*"))),
          s(:block,
            s(:send,
              s(:lvar, :encodings_8859), :each),
            s(:args,
              s(:arg, :enc)),
            s(:begin,
              s(:lvasgn, :test_start,
                s(:lvar, :all_bytes)),
              s(:send, nil, :assert_equal,
                s(:lvar, :test_start),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :test_start), :encode,
                      s(:str, "UTF-8"),
                      s(:lvar, :enc)), :encode,
                    s(:lvar, :enc)), :force_encoding,
                  s(:str, "ASCII-8BIT"))))))),
      s(:def, :test_windows_874,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "€"),
            s(:str, "\x80"),
            s(:str, "windows-874")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x81"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-874"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x84"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-874"))),
          s(:send, nil, :check_both_ways,
            s(:str, "…"),
            s(:str, "\x85"),
            s(:str, "windows-874")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x86"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-874"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x8F"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-874"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x90"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-874"))),
          s(:send, nil, :check_both_ways,
            s(:str, "‘"),
            s(:str, "\x91"),
            s(:str, "windows-874")),
          s(:send, nil, :check_both_ways,
            s(:str, "—"),
            s(:str, "\x97"),
            s(:str, "windows-874")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x98"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-874"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x9F"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-874"))),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xA0"),
            s(:str, "windows-874")),
          s(:send, nil, :check_both_ways,
            s(:str, "ฏ"),
            s(:str, "\xAF"),
            s(:str, "windows-874")),
          s(:send, nil, :check_both_ways,
            s(:str, "ฐ"),
            s(:str, "\xB0"),
            s(:str, "windows-874")),
          s(:send, nil, :check_both_ways,
            s(:str, "ฟ"),
            s(:str, "\xBF"),
            s(:str, "windows-874")),
          s(:send, nil, :check_both_ways,
            s(:str, "ภ"),
            s(:str, "\xC0"),
            s(:str, "windows-874")),
          s(:send, nil, :check_both_ways,
            s(:str, "ฯ"),
            s(:str, "\xCF"),
            s(:str, "windows-874")),
          s(:send, nil, :check_both_ways,
            s(:str, "ะ"),
            s(:str, "\xD0"),
            s(:str, "windows-874")),
          s(:send, nil, :check_both_ways,
            s(:str, "ฺ"),
            s(:str, "\xDA"),
            s(:str, "windows-874")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xDB"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-874"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xDE"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-874"))),
          s(:send, nil, :check_both_ways,
            s(:str, "฿"),
            s(:str, "\xDF"),
            s(:str, "windows-874")),
          s(:send, nil, :check_both_ways,
            s(:str, "เ"),
            s(:str, "\xE0"),
            s(:str, "windows-874")),
          s(:send, nil, :check_both_ways,
            s(:str, "๏"),
            s(:str, "\xEF"),
            s(:str, "windows-874")),
          s(:send, nil, :check_both_ways,
            s(:str, "๐"),
            s(:str, "\xF0"),
            s(:str, "windows-874")),
          s(:send, nil, :check_both_ways,
            s(:str, "๛"),
            s(:str, "\xFB"),
            s(:str, "windows-874")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xFC"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-874"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xFF"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-874"))))),
      s(:def, :test_windows_1250,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "€"),
            s(:str, "\x80"),
            s(:str, "windows-1250")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x81"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1250"))),
          s(:send, nil, :check_both_ways,
            s(:str, "‚"),
            s(:str, "\x82"),
            s(:str, "windows-1250")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x83"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1250"))),
          s(:send, nil, :check_both_ways,
            s(:str, "„"),
            s(:str, "\x84"),
            s(:str, "windows-1250")),
          s(:send, nil, :check_both_ways,
            s(:str, "‡"),
            s(:str, "\x87"),
            s(:str, "windows-1250")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x88"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1250"))),
          s(:send, nil, :check_both_ways,
            s(:str, "‰"),
            s(:str, "\x89"),
            s(:str, "windows-1250")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ź"),
            s(:str, "\x8F"),
            s(:str, "windows-1250")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x90"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1250"))),
          s(:send, nil, :check_both_ways,
            s(:str, "‘"),
            s(:str, "\x91"),
            s(:str, "windows-1250")),
          s(:send, nil, :check_both_ways,
            s(:str, "—"),
            s(:str, "\x97"),
            s(:str, "windows-1250")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x98"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1250"))),
          s(:send, nil, :check_both_ways,
            s(:str, "™"),
            s(:str, "\x99"),
            s(:str, "windows-1250")),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xA0"),
            s(:str, "windows-1250")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ż"),
            s(:str, "\xAF"),
            s(:str, "windows-1250")),
          s(:send, nil, :check_both_ways,
            s(:str, "°"),
            s(:str, "\xB0"),
            s(:str, "windows-1250")),
          s(:send, nil, :check_both_ways,
            s(:str, "ż"),
            s(:str, "\xBF"),
            s(:str, "windows-1250")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ŕ"),
            s(:str, "\xC0"),
            s(:str, "windows-1250")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ď"),
            s(:str, "\xCF"),
            s(:str, "windows-1250")),
          s(:send, nil, :check_both_ways,
            s(:str, "Đ"),
            s(:str, "\xD0"),
            s(:str, "windows-1250")),
          s(:send, nil, :check_both_ways,
            s(:str, "ß"),
            s(:str, "\xDF"),
            s(:str, "windows-1250")),
          s(:send, nil, :check_both_ways,
            s(:str, "ŕ"),
            s(:str, "\xE0"),
            s(:str, "windows-1250")),
          s(:send, nil, :check_both_ways,
            s(:str, "ď"),
            s(:str, "\xEF"),
            s(:str, "windows-1250")),
          s(:send, nil, :check_both_ways,
            s(:str, "đ"),
            s(:str, "\xF0"),
            s(:str, "windows-1250")),
          s(:send, nil, :check_both_ways,
            s(:str, "˙"),
            s(:str, "\xFF"),
            s(:str, "windows-1250")))),
      s(:def, :test_windows_1251,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "Ђ"),
            s(:str, "\x80"),
            s(:str, "windows-1251")),
          s(:send, nil, :check_both_ways,
            s(:str, "€"),
            s(:str, "\x88"),
            s(:str, "windows-1251")),
          s(:send, nil, :check_both_ways,
            s(:str, "Џ"),
            s(:str, "\x8F"),
            s(:str, "windows-1251")),
          s(:send, nil, :check_both_ways,
            s(:str, "ђ"),
            s(:str, "\x90"),
            s(:str, "windows-1251")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x98"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1251"))),
          s(:send, nil, :check_both_ways,
            s(:str, "џ"),
            s(:str, "\x9F"),
            s(:str, "windows-1251")),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xA0"),
            s(:str, "windows-1251")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ї"),
            s(:str, "\xAF"),
            s(:str, "windows-1251")),
          s(:send, nil, :check_both_ways,
            s(:str, "°"),
            s(:str, "\xB0"),
            s(:str, "windows-1251")),
          s(:send, nil, :check_both_ways,
            s(:str, "ї"),
            s(:str, "\xBF"),
            s(:str, "windows-1251")),
          s(:send, nil, :check_both_ways,
            s(:str, "А"),
            s(:str, "\xC0"),
            s(:str, "windows-1251")),
          s(:send, nil, :check_both_ways,
            s(:str, "П"),
            s(:str, "\xCF"),
            s(:str, "windows-1251")),
          s(:send, nil, :check_both_ways,
            s(:str, "Р"),
            s(:str, "\xD0"),
            s(:str, "windows-1251")),
          s(:send, nil, :check_both_ways,
            s(:str, "Я"),
            s(:str, "\xDF"),
            s(:str, "windows-1251")),
          s(:send, nil, :check_both_ways,
            s(:str, "а"),
            s(:str, "\xE0"),
            s(:str, "windows-1251")),
          s(:send, nil, :check_both_ways,
            s(:str, "п"),
            s(:str, "\xEF"),
            s(:str, "windows-1251")),
          s(:send, nil, :check_both_ways,
            s(:str, "р"),
            s(:str, "\xF0"),
            s(:str, "windows-1251")),
          s(:send, nil, :check_both_ways,
            s(:str, "я"),
            s(:str, "\xFF"),
            s(:str, "windows-1251")))),
      s(:def, :test_windows_1252,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "€"),
            s(:str, "\x80"),
            s(:str, "windows-1252")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x81"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1252"))),
          s(:send, nil, :check_both_ways,
            s(:str, "‚"),
            s(:str, "\x82"),
            s(:str, "windows-1252")),
          s(:send, nil, :check_both_ways,
            s(:str, "Œ"),
            s(:str, "\x8C"),
            s(:str, "windows-1252")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x8D"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1252"))),
          s(:send, nil, :check_both_ways,
            s(:str, "Ž"),
            s(:str, "\x8E"),
            s(:str, "windows-1252")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x8F"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1252"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x90"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1252"))),
          s(:send, nil, :check_both_ways,
            s(:str, "‘"),
            s(:str, "\x91"),
            s(:str, "windows-1252")),
          s(:send, nil, :check_both_ways,
            s(:str, "œ"),
            s(:str, "\x9C"),
            s(:str, "windows-1252")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x9D"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1252"))),
          s(:send, nil, :check_both_ways,
            s(:str, "ž"),
            s(:str, "\x9E"),
            s(:str, "windows-1252")),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xA0"),
            s(:str, "windows-1252")),
          s(:send, nil, :check_both_ways,
            s(:str, "¯"),
            s(:str, "\xAF"),
            s(:str, "windows-1252")),
          s(:send, nil, :check_both_ways,
            s(:str, "°"),
            s(:str, "\xB0"),
            s(:str, "windows-1252")),
          s(:send, nil, :check_both_ways,
            s(:str, "¿"),
            s(:str, "\xBF"),
            s(:str, "windows-1252")),
          s(:send, nil, :check_both_ways,
            s(:str, "À"),
            s(:str, "\xC0"),
            s(:str, "windows-1252")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ï"),
            s(:str, "\xCF"),
            s(:str, "windows-1252")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ð"),
            s(:str, "\xD0"),
            s(:str, "windows-1252")),
          s(:send, nil, :check_both_ways,
            s(:str, "ß"),
            s(:str, "\xDF"),
            s(:str, "windows-1252")),
          s(:send, nil, :check_both_ways,
            s(:str, "à"),
            s(:str, "\xE0"),
            s(:str, "windows-1252")),
          s(:send, nil, :check_both_ways,
            s(:str, "ï"),
            s(:str, "\xEF"),
            s(:str, "windows-1252")),
          s(:send, nil, :check_both_ways,
            s(:str, "ð"),
            s(:str, "\xF0"),
            s(:str, "windows-1252")),
          s(:send, nil, :check_both_ways,
            s(:str, "ÿ"),
            s(:str, "\xFF"),
            s(:str, "windows-1252")))),
      s(:def, :test_windows_1253,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "€"),
            s(:str, "\x80"),
            s(:str, "windows-1253")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x81"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1253"))),
          s(:send, nil, :check_both_ways,
            s(:str, "‚"),
            s(:str, "\x82"),
            s(:str, "windows-1253")),
          s(:send, nil, :check_both_ways,
            s(:str, "‡"),
            s(:str, "\x87"),
            s(:str, "windows-1253")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x88"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1253"))),
          s(:send, nil, :check_both_ways,
            s(:str, "‰"),
            s(:str, "\x89"),
            s(:str, "windows-1253")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x8A"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1253"))),
          s(:send, nil, :check_both_ways,
            s(:str, "‹"),
            s(:str, "\x8B"),
            s(:str, "windows-1253")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x8C"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1253"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x8F"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1253"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x90"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1253"))),
          s(:send, nil, :check_both_ways,
            s(:str, "‘"),
            s(:str, "\x91"),
            s(:str, "windows-1253")),
          s(:send, nil, :check_both_ways,
            s(:str, "—"),
            s(:str, "\x97"),
            s(:str, "windows-1253")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x98"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1253"))),
          s(:send, nil, :check_both_ways,
            s(:str, "™"),
            s(:str, "\x99"),
            s(:str, "windows-1253")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x9A"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1253"))),
          s(:send, nil, :check_both_ways,
            s(:str, "›"),
            s(:str, "\x9B"),
            s(:str, "windows-1253")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x9C"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1253"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x9F"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1253"))),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xA0"),
            s(:str, "windows-1253")),
          s(:send, nil, :check_both_ways,
            s(:str, "―"),
            s(:str, "\xAF"),
            s(:str, "windows-1253")),
          s(:send, nil, :check_both_ways,
            s(:str, "°"),
            s(:str, "\xB0"),
            s(:str, "windows-1253")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ώ"),
            s(:str, "\xBF"),
            s(:str, "windows-1253")),
          s(:send, nil, :check_both_ways,
            s(:str, "ΐ"),
            s(:str, "\xC0"),
            s(:str, "windows-1253")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ο"),
            s(:str, "\xCF"),
            s(:str, "windows-1253")),
          s(:send, nil, :check_both_ways,
            s(:str, "Π"),
            s(:str, "\xD0"),
            s(:str, "windows-1253")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ρ"),
            s(:str, "\xD1"),
            s(:str, "windows-1253")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xD2"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1253"))),
          s(:send, nil, :check_both_ways,
            s(:str, "Σ"),
            s(:str, "\xD3"),
            s(:str, "windows-1253")),
          s(:send, nil, :check_both_ways,
            s(:str, "ί"),
            s(:str, "\xDF"),
            s(:str, "windows-1253")),
          s(:send, nil, :check_both_ways,
            s(:str, "ΰ"),
            s(:str, "\xE0"),
            s(:str, "windows-1253")),
          s(:send, nil, :check_both_ways,
            s(:str, "ο"),
            s(:str, "\xEF"),
            s(:str, "windows-1253")),
          s(:send, nil, :check_both_ways,
            s(:str, "π"),
            s(:str, "\xF0"),
            s(:str, "windows-1253")),
          s(:send, nil, :check_both_ways,
            s(:str, "ώ"),
            s(:str, "\xFE"),
            s(:str, "windows-1253")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xFF"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1253"))))),
      s(:def, :test_windows_1254,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "€"),
            s(:str, "\x80"),
            s(:str, "windows-1254")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x81"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1254"))),
          s(:send, nil, :check_both_ways,
            s(:str, "‚"),
            s(:str, "\x82"),
            s(:str, "windows-1254")),
          s(:send, nil, :check_both_ways,
            s(:str, "Œ"),
            s(:str, "\x8C"),
            s(:str, "windows-1254")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x8D"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1254"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x8F"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1254"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x90"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1254"))),
          s(:send, nil, :check_both_ways,
            s(:str, "‘"),
            s(:str, "\x91"),
            s(:str, "windows-1254")),
          s(:send, nil, :check_both_ways,
            s(:str, "œ"),
            s(:str, "\x9C"),
            s(:str, "windows-1254")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x9D"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1254"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x9E"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1254"))),
          s(:send, nil, :check_both_ways,
            s(:str, "Ÿ"),
            s(:str, "\x9F"),
            s(:str, "windows-1254")),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xA0"),
            s(:str, "windows-1254")),
          s(:send, nil, :check_both_ways,
            s(:str, "¯"),
            s(:str, "\xAF"),
            s(:str, "windows-1254")),
          s(:send, nil, :check_both_ways,
            s(:str, "°"),
            s(:str, "\xB0"),
            s(:str, "windows-1254")),
          s(:send, nil, :check_both_ways,
            s(:str, "¿"),
            s(:str, "\xBF"),
            s(:str, "windows-1254")),
          s(:send, nil, :check_both_ways,
            s(:str, "À"),
            s(:str, "\xC0"),
            s(:str, "windows-1254")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ï"),
            s(:str, "\xCF"),
            s(:str, "windows-1254")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ğ"),
            s(:str, "\xD0"),
            s(:str, "windows-1254")),
          s(:send, nil, :check_both_ways,
            s(:str, "ß"),
            s(:str, "\xDF"),
            s(:str, "windows-1254")),
          s(:send, nil, :check_both_ways,
            s(:str, "à"),
            s(:str, "\xE0"),
            s(:str, "windows-1254")),
          s(:send, nil, :check_both_ways,
            s(:str, "ï"),
            s(:str, "\xEF"),
            s(:str, "windows-1254")),
          s(:send, nil, :check_both_ways,
            s(:str, "ğ"),
            s(:str, "\xF0"),
            s(:str, "windows-1254")),
          s(:send, nil, :check_both_ways,
            s(:str, "ÿ"),
            s(:str, "\xFF"),
            s(:str, "windows-1254")))),
      s(:def, :test_windows_1255,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "€"),
            s(:str, "\x80"),
            s(:str, "windows-1255")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x81"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1255"))),
          s(:send, nil, :check_both_ways,
            s(:str, "‚"),
            s(:str, "\x82"),
            s(:str, "windows-1255")),
          s(:send, nil, :check_both_ways,
            s(:str, "‰"),
            s(:str, "\x89"),
            s(:str, "windows-1255")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x8A"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1255"))),
          s(:send, nil, :check_both_ways,
            s(:str, "‹"),
            s(:str, "\x8B"),
            s(:str, "windows-1255")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x8C"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1255"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x8F"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1255"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x90"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1255"))),
          s(:send, nil, :check_both_ways,
            s(:str, "‘"),
            s(:str, "\x91"),
            s(:str, "windows-1255")),
          s(:send, nil, :check_both_ways,
            s(:str, "™"),
            s(:str, "\x99"),
            s(:str, "windows-1255")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x9A"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1255"))),
          s(:send, nil, :check_both_ways,
            s(:str, "›"),
            s(:str, "\x9B"),
            s(:str, "windows-1255")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x9C"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1255"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x9F"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1255"))),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xA0"),
            s(:str, "windows-1255")),
          s(:send, nil, :check_both_ways,
            s(:str, "¡"),
            s(:str, "\xA1"),
            s(:str, "windows-1255")),
          s(:send, nil, :check_both_ways,
            s(:str, "×"),
            s(:str, "\xAA"),
            s(:str, "windows-1255")),
          s(:send, nil, :check_both_ways,
            s(:str, "¯"),
            s(:str, "\xAF"),
            s(:str, "windows-1255")),
          s(:send, nil, :check_both_ways,
            s(:str, "°"),
            s(:str, "\xB0"),
            s(:str, "windows-1255")),
          s(:send, nil, :check_both_ways,
            s(:str, "¸"),
            s(:str, "\xB8"),
            s(:str, "windows-1255")),
          s(:send, nil, :check_both_ways,
            s(:str, "÷"),
            s(:str, "\xBA"),
            s(:str, "windows-1255")),
          s(:send, nil, :check_both_ways,
            s(:str, "¿"),
            s(:str, "\xBF"),
            s(:str, "windows-1255")),
          s(:send, nil, :check_both_ways,
            s(:str, "ְ"),
            s(:str, "\xC0"),
            s(:str, "windows-1255")),
          s(:send, nil, :check_both_ways,
            s(:str, "ֹ"),
            s(:str, "\xC9"),
            s(:str, "windows-1255")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xCA"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1255"))),
          s(:send, nil, :check_both_ways,
            s(:str, "ֻ"),
            s(:str, "\xCB"),
            s(:str, "windows-1255")),
          s(:send, nil, :check_both_ways,
            s(:str, "ֿ"),
            s(:str, "\xCF"),
            s(:str, "windows-1255")),
          s(:send, nil, :check_both_ways,
            s(:str, "׀"),
            s(:str, "\xD0"),
            s(:str, "windows-1255")),
          s(:send, nil, :check_both_ways,
            s(:str, "׳"),
            s(:str, "\xD7"),
            s(:str, "windows-1255")),
          s(:send, nil, :check_both_ways,
            s(:str, "״"),
            s(:str, "\xD8"),
            s(:str, "windows-1255")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xD9"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1255"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xDF"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1255"))),
          s(:send, nil, :check_both_ways,
            s(:str, "א"),
            s(:str, "\xE0"),
            s(:str, "windows-1255")),
          s(:send, nil, :check_both_ways,
            s(:str, "ן"),
            s(:str, "\xEF"),
            s(:str, "windows-1255")),
          s(:send, nil, :check_both_ways,
            s(:str, "נ"),
            s(:str, "\xF0"),
            s(:str, "windows-1255")),
          s(:send, nil, :check_both_ways,
            s(:str, "ת"),
            s(:str, "\xFA"),
            s(:str, "windows-1255")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xFB"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1255"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xFC"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1255"))),
          s(:send, nil, :check_both_ways,
            s(:str, "‎"),
            s(:str, "\xFD"),
            s(:str, "windows-1255")),
          s(:send, nil, :check_both_ways,
            s(:str, "‏"),
            s(:str, "\xFE"),
            s(:str, "windows-1255")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xFF"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1255"))))),
      s(:def, :test_windows_1256,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "€"),
            s(:str, "\x80"),
            s(:str, "windows-1256")),
          s(:send, nil, :check_both_ways,
            s(:str, "ٹ"),
            s(:str, "\x8A"),
            s(:str, "windows-1256")),
          s(:send, nil, :check_both_ways,
            s(:str, "ڈ"),
            s(:str, "\x8F"),
            s(:str, "windows-1256")),
          s(:send, nil, :check_both_ways,
            s(:str, "گ"),
            s(:str, "\x90"),
            s(:str, "windows-1256")),
          s(:send, nil, :check_both_ways,
            s(:str, "ک"),
            s(:str, "\x98"),
            s(:str, "windows-1256")),
          s(:send, nil, :check_both_ways,
            s(:str, "ڑ"),
            s(:str, "\x9A"),
            s(:str, "windows-1256")),
          s(:send, nil, :check_both_ways,
            s(:str, "ں"),
            s(:str, "\x9F"),
            s(:str, "windows-1256")),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xA0"),
            s(:str, "windows-1256")),
          s(:send, nil, :check_both_ways,
            s(:str, "ھ"),
            s(:str, "\xAA"),
            s(:str, "windows-1256")),
          s(:send, nil, :check_both_ways,
            s(:str, "¯"),
            s(:str, "\xAF"),
            s(:str, "windows-1256")),
          s(:send, nil, :check_both_ways,
            s(:str, "°"),
            s(:str, "\xB0"),
            s(:str, "windows-1256")),
          s(:send, nil, :check_both_ways,
            s(:str, "؟"),
            s(:str, "\xBF"),
            s(:str, "windows-1256")),
          s(:send, nil, :check_both_ways,
            s(:str, "ہ"),
            s(:str, "\xC0"),
            s(:str, "windows-1256")),
          s(:send, nil, :check_both_ways,
            s(:str, "د"),
            s(:str, "\xCF"),
            s(:str, "windows-1256")),
          s(:send, nil, :check_both_ways,
            s(:str, "ذ"),
            s(:str, "\xD0"),
            s(:str, "windows-1256")),
          s(:send, nil, :check_both_ways,
            s(:str, "ك"),
            s(:str, "\xDF"),
            s(:str, "windows-1256")),
          s(:send, nil, :check_both_ways,
            s(:str, "à"),
            s(:str, "\xE0"),
            s(:str, "windows-1256")),
          s(:send, nil, :check_both_ways,
            s(:str, "ï"),
            s(:str, "\xEF"),
            s(:str, "windows-1256")),
          s(:send, nil, :check_both_ways,
            s(:str, "ً"),
            s(:str, "\xF0"),
            s(:str, "windows-1256")),
          s(:send, nil, :check_both_ways,
            s(:str, "ے"),
            s(:str, "\xFF"),
            s(:str, "windows-1256")))),
      s(:def, :test_windows_1257,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "€"),
            s(:str, "\x80"),
            s(:str, "windows-1257")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x81"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1257"))),
          s(:send, nil, :check_both_ways,
            s(:str, "‚"),
            s(:str, "\x82"),
            s(:str, "windows-1257")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x83"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1257"))),
          s(:send, nil, :check_both_ways,
            s(:str, "„"),
            s(:str, "\x84"),
            s(:str, "windows-1257")),
          s(:send, nil, :check_both_ways,
            s(:str, "‡"),
            s(:str, "\x87"),
            s(:str, "windows-1257")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x88"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1257"))),
          s(:send, nil, :check_both_ways,
            s(:str, "‰"),
            s(:str, "\x89"),
            s(:str, "windows-1257")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x8A"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1257"))),
          s(:send, nil, :check_both_ways,
            s(:str, "‹"),
            s(:str, "\x8B"),
            s(:str, "windows-1257")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x8C"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1257"))),
          s(:send, nil, :check_both_ways,
            s(:str, "¨"),
            s(:str, "\x8D"),
            s(:str, "windows-1257")),
          s(:send, nil, :check_both_ways,
            s(:str, "ˇ"),
            s(:str, "\x8E"),
            s(:str, "windows-1257")),
          s(:send, nil, :check_both_ways,
            s(:str, "¸"),
            s(:str, "\x8F"),
            s(:str, "windows-1257")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x90"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1257"))),
          s(:send, nil, :check_both_ways,
            s(:str, "‘"),
            s(:str, "\x91"),
            s(:str, "windows-1257")),
          s(:send, nil, :check_both_ways,
            s(:str, "—"),
            s(:str, "\x97"),
            s(:str, "windows-1257")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x98"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1257"))),
          s(:send, nil, :check_both_ways,
            s(:str, "™"),
            s(:str, "\x99"),
            s(:str, "windows-1257")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x9A"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1257"))),
          s(:send, nil, :check_both_ways,
            s(:str, "›"),
            s(:str, "\x9B"),
            s(:str, "windows-1257")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x9C"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1257"))),
          s(:send, nil, :check_both_ways,
            s(:str, "¯"),
            s(:str, "\x9D"),
            s(:str, "windows-1257")),
          s(:send, nil, :check_both_ways,
            s(:str, "˛"),
            s(:str, "\x9E"),
            s(:str, "windows-1257")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x9F"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1257"))),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xA0"),
            s(:str, "windows-1257")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA1"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1257"))),
          s(:send, nil, :check_both_ways,
            s(:str, "¢"),
            s(:str, "\xA2"),
            s(:str, "windows-1257")),
          s(:send, nil, :check_both_ways,
            s(:str, "¤"),
            s(:str, "\xA4"),
            s(:str, "windows-1257")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA5"), :encode,
              s(:str, "utf-8"),
              s(:str, "windows-1257"))),
          s(:send, nil, :check_both_ways,
            s(:str, "¦"),
            s(:str, "\xA6"),
            s(:str, "windows-1257")),
          s(:send, nil, :check_both_ways,
            s(:str, "Æ"),
            s(:str, "\xAF"),
            s(:str, "windows-1257")),
          s(:send, nil, :check_both_ways,
            s(:str, "°"),
            s(:str, "\xB0"),
            s(:str, "windows-1257")),
          s(:send, nil, :check_both_ways,
            s(:str, "æ"),
            s(:str, "\xBF"),
            s(:str, "windows-1257")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ą"),
            s(:str, "\xC0"),
            s(:str, "windows-1257")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ļ"),
            s(:str, "\xCF"),
            s(:str, "windows-1257")),
          s(:send, nil, :check_both_ways,
            s(:str, "Š"),
            s(:str, "\xD0"),
            s(:str, "windows-1257")),
          s(:send, nil, :check_both_ways,
            s(:str, "ß"),
            s(:str, "\xDF"),
            s(:str, "windows-1257")),
          s(:send, nil, :check_both_ways,
            s(:str, "ą"),
            s(:str, "\xE0"),
            s(:str, "windows-1257")),
          s(:send, nil, :check_both_ways,
            s(:str, "ļ"),
            s(:str, "\xEF"),
            s(:str, "windows-1257")),
          s(:send, nil, :check_both_ways,
            s(:str, "š"),
            s(:str, "\xF0"),
            s(:str, "windows-1257")),
          s(:send, nil, :check_both_ways,
            s(:str, "˙"),
            s(:str, "\xFF"),
            s(:str, "windows-1257")))),
      s(:def, :test_IBM437,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "Ç"),
            s(:str, "\x80"),
            s(:str, "IBM437")),
          s(:send, nil, :check_both_ways,
            s(:str, "Å"),
            s(:str, "\x8F"),
            s(:str, "IBM437")),
          s(:send, nil, :check_both_ways,
            s(:str, "É"),
            s(:str, "\x90"),
            s(:str, "IBM437")),
          s(:send, nil, :check_both_ways,
            s(:str, "ƒ"),
            s(:str, "\x9F"),
            s(:str, "IBM437")),
          s(:send, nil, :check_both_ways,
            s(:str, "á"),
            s(:str, "\xA0"),
            s(:str, "IBM437")),
          s(:send, nil, :check_both_ways,
            s(:str, "»"),
            s(:str, "\xAF"),
            s(:str, "IBM437")),
          s(:send, nil, :check_both_ways,
            s(:str, "░"),
            s(:str, "\xB0"),
            s(:str, "IBM437")),
          s(:send, nil, :check_both_ways,
            s(:str, "┐"),
            s(:str, "\xBF"),
            s(:str, "IBM437")),
          s(:send, nil, :check_both_ways,
            s(:str, "└"),
            s(:str, "\xC0"),
            s(:str, "IBM437")),
          s(:send, nil, :check_both_ways,
            s(:str, "╧"),
            s(:str, "\xCF"),
            s(:str, "IBM437")),
          s(:send, nil, :check_both_ways,
            s(:str, "╨"),
            s(:str, "\xD0"),
            s(:str, "IBM437")),
          s(:send, nil, :check_both_ways,
            s(:str, "▀"),
            s(:str, "\xDF"),
            s(:str, "IBM437")),
          s(:send, nil, :check_both_ways,
            s(:str, "α"),
            s(:str, "\xE0"),
            s(:str, "IBM437")),
          s(:send, nil, :check_both_ways,
            s(:str, "∩"),
            s(:str, "\xEF"),
            s(:str, "IBM437")),
          s(:send, nil, :check_both_ways,
            s(:str, "≡"),
            s(:str, "\xF0"),
            s(:str, "IBM437")),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xFF"),
            s(:str, "IBM437")))),
      s(:def, :test_IBM775,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "Ć"),
            s(:str, "\x80"),
            s(:str, "IBM775")),
          s(:send, nil, :check_both_ways,
            s(:str, "Å"),
            s(:str, "\x8F"),
            s(:str, "IBM775")),
          s(:send, nil, :check_both_ways,
            s(:str, "É"),
            s(:str, "\x90"),
            s(:str, "IBM775")),
          s(:send, nil, :check_both_ways,
            s(:str, "¤"),
            s(:str, "\x9F"),
            s(:str, "IBM775")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ā"),
            s(:str, "\xA0"),
            s(:str, "IBM775")),
          s(:send, nil, :check_both_ways,
            s(:str, "»"),
            s(:str, "\xAF"),
            s(:str, "IBM775")),
          s(:send, nil, :check_both_ways,
            s(:str, "░"),
            s(:str, "\xB0"),
            s(:str, "IBM775")),
          s(:send, nil, :check_both_ways,
            s(:str, "┐"),
            s(:str, "\xBF"),
            s(:str, "IBM775")),
          s(:send, nil, :check_both_ways,
            s(:str, "└"),
            s(:str, "\xC0"),
            s(:str, "IBM775")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ž"),
            s(:str, "\xCF"),
            s(:str, "IBM775")),
          s(:send, nil, :check_both_ways,
            s(:str, "ą"),
            s(:str, "\xD0"),
            s(:str, "IBM775")),
          s(:send, nil, :check_both_ways,
            s(:str, "▀"),
            s(:str, "\xDF"),
            s(:str, "IBM775")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ó"),
            s(:str, "\xE0"),
            s(:str, "IBM775")),
          s(:send, nil, :check_both_ways,
            s(:str, "’"),
            s(:str, "\xEF"),
            s(:str, "IBM775")),
          s(:send, nil, :check_both_ways,
            s(:str, "­"),
            s(:str, "\xF0"),
            s(:str, "IBM775")),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xFF"),
            s(:str, "IBM775")))),
      s(:def, :test_IBM852,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "Ç"),
            s(:str, "\x80"),
            s(:str, "IBM852")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ć"),
            s(:str, "\x8F"),
            s(:str, "IBM852")),
          s(:send, nil, :check_both_ways,
            s(:str, "É"),
            s(:str, "\x90"),
            s(:str, "IBM852")),
          s(:send, nil, :check_both_ways,
            s(:str, "č"),
            s(:str, "\x9F"),
            s(:str, "IBM852")),
          s(:send, nil, :check_both_ways,
            s(:str, "á"),
            s(:str, "\xA0"),
            s(:str, "IBM852")),
          s(:send, nil, :check_both_ways,
            s(:str, "»"),
            s(:str, "\xAF"),
            s(:str, "IBM852")),
          s(:send, nil, :check_both_ways,
            s(:str, "░"),
            s(:str, "\xB0"),
            s(:str, "IBM852")),
          s(:send, nil, :check_both_ways,
            s(:str, "┐"),
            s(:str, "\xBF"),
            s(:str, "IBM852")),
          s(:send, nil, :check_both_ways,
            s(:str, "└"),
            s(:str, "\xC0"),
            s(:str, "IBM852")),
          s(:send, nil, :check_both_ways,
            s(:str, "¤"),
            s(:str, "\xCF"),
            s(:str, "IBM852")),
          s(:send, nil, :check_both_ways,
            s(:str, "đ"),
            s(:str, "\xD0"),
            s(:str, "IBM852")),
          s(:send, nil, :check_both_ways,
            s(:str, "▀"),
            s(:str, "\xDF"),
            s(:str, "IBM852")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ó"),
            s(:str, "\xE0"),
            s(:str, "IBM852")),
          s(:send, nil, :check_both_ways,
            s(:str, "´"),
            s(:str, "\xEF"),
            s(:str, "IBM852")),
          s(:send, nil, :check_both_ways,
            s(:str, "­"),
            s(:str, "\xF0"),
            s(:str, "IBM852")),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xFF"),
            s(:str, "IBM852")))),
      s(:def, :test_IBM855,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "ђ"),
            s(:str, "\x80"),
            s(:str, "IBM855")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ј"),
            s(:str, "\x8F"),
            s(:str, "IBM855")),
          s(:send, nil, :check_both_ways,
            s(:str, "љ"),
            s(:str, "\x90"),
            s(:str, "IBM855")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ъ"),
            s(:str, "\x9F"),
            s(:str, "IBM855")),
          s(:send, nil, :check_both_ways,
            s(:str, "а"),
            s(:str, "\xA0"),
            s(:str, "IBM855")),
          s(:send, nil, :check_both_ways,
            s(:str, "»"),
            s(:str, "\xAF"),
            s(:str, "IBM855")),
          s(:send, nil, :check_both_ways,
            s(:str, "░"),
            s(:str, "\xB0"),
            s(:str, "IBM855")),
          s(:send, nil, :check_both_ways,
            s(:str, "┐"),
            s(:str, "\xBF"),
            s(:str, "IBM855")),
          s(:send, nil, :check_both_ways,
            s(:str, "└"),
            s(:str, "\xC0"),
            s(:str, "IBM855")),
          s(:send, nil, :check_both_ways,
            s(:str, "¤"),
            s(:str, "\xCF"),
            s(:str, "IBM855")),
          s(:send, nil, :check_both_ways,
            s(:str, "л"),
            s(:str, "\xD0"),
            s(:str, "IBM855")),
          s(:send, nil, :check_both_ways,
            s(:str, "▀"),
            s(:str, "\xDF"),
            s(:str, "IBM855")),
          s(:send, nil, :check_both_ways,
            s(:str, "Я"),
            s(:str, "\xE0"),
            s(:str, "IBM855")),
          s(:send, nil, :check_both_ways,
            s(:str, "№"),
            s(:str, "\xEF"),
            s(:str, "IBM855")),
          s(:send, nil, :check_both_ways,
            s(:str, "­"),
            s(:str, "\xF0"),
            s(:str, "IBM855")),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xFF"),
            s(:str, "IBM855")))),
      s(:def, :test_IBM857,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "Ç"),
            s(:str, "\x80"),
            s(:str, "IBM857")),
          s(:send, nil, :check_both_ways,
            s(:str, "Å"),
            s(:str, "\x8F"),
            s(:str, "IBM857")),
          s(:send, nil, :check_both_ways,
            s(:str, "É"),
            s(:str, "\x90"),
            s(:str, "IBM857")),
          s(:send, nil, :check_both_ways,
            s(:str, "ş"),
            s(:str, "\x9F"),
            s(:str, "IBM857")),
          s(:send, nil, :check_both_ways,
            s(:str, "á"),
            s(:str, "\xA0"),
            s(:str, "IBM857")),
          s(:send, nil, :check_both_ways,
            s(:str, "»"),
            s(:str, "\xAF"),
            s(:str, "IBM857")),
          s(:send, nil, :check_both_ways,
            s(:str, "░"),
            s(:str, "\xB0"),
            s(:str, "IBM857")),
          s(:send, nil, :check_both_ways,
            s(:str, "┐"),
            s(:str, "\xBF"),
            s(:str, "IBM857")),
          s(:send, nil, :check_both_ways,
            s(:str, "└"),
            s(:str, "\xC0"),
            s(:str, "IBM857")),
          s(:send, nil, :check_both_ways,
            s(:str, "¤"),
            s(:str, "\xCF"),
            s(:str, "IBM857")),
          s(:send, nil, :check_both_ways,
            s(:str, "º"),
            s(:str, "\xD0"),
            s(:str, "IBM857")),
          s(:send, nil, :check_both_ways,
            s(:str, "È"),
            s(:str, "\xD4"),
            s(:str, "IBM857")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xD5"), :encode,
              s(:str, "utf-8"),
              s(:str, "IBM857"))),
          s(:send, nil, :check_both_ways,
            s(:str, "Í"),
            s(:str, "\xD6"),
            s(:str, "IBM857")),
          s(:send, nil, :check_both_ways,
            s(:str, "▀"),
            s(:str, "\xDF"),
            s(:str, "IBM857")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ó"),
            s(:str, "\xE0"),
            s(:str, "IBM857")),
          s(:send, nil, :check_both_ways,
            s(:str, "µ"),
            s(:str, "\xE6"),
            s(:str, "IBM857")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xE7"), :encode,
              s(:str, "utf-8"),
              s(:str, "IBM857"))),
          s(:send, nil, :check_both_ways,
            s(:str, "×"),
            s(:str, "\xE8"),
            s(:str, "IBM857")),
          s(:send, nil, :check_both_ways,
            s(:str, "´"),
            s(:str, "\xEF"),
            s(:str, "IBM857")),
          s(:send, nil, :check_both_ways,
            s(:str, "­"),
            s(:str, "\xF0"),
            s(:str, "IBM857")),
          s(:send, nil, :check_both_ways,
            s(:str, "±"),
            s(:str, "\xF1"),
            s(:str, "IBM857")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xF2"), :encode,
              s(:str, "utf-8"),
              s(:str, "IBM857"))),
          s(:send, nil, :check_both_ways,
            s(:str, "¾"),
            s(:str, "\xF3"),
            s(:str, "IBM857")),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xFF"),
            s(:str, "IBM857")))),
      s(:def, :test_IBM860,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "Ç"),
            s(:str, "\x80"),
            s(:str, "IBM860")),
          s(:send, nil, :check_both_ways,
            s(:str, "Â"),
            s(:str, "\x8F"),
            s(:str, "IBM860")),
          s(:send, nil, :check_both_ways,
            s(:str, "É"),
            s(:str, "\x90"),
            s(:str, "IBM860")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ó"),
            s(:str, "\x9F"),
            s(:str, "IBM860")),
          s(:send, nil, :check_both_ways,
            s(:str, "á"),
            s(:str, "\xA0"),
            s(:str, "IBM860")),
          s(:send, nil, :check_both_ways,
            s(:str, "»"),
            s(:str, "\xAF"),
            s(:str, "IBM860")),
          s(:send, nil, :check_both_ways,
            s(:str, "░"),
            s(:str, "\xB0"),
            s(:str, "IBM860")),
          s(:send, nil, :check_both_ways,
            s(:str, "┐"),
            s(:str, "\xBF"),
            s(:str, "IBM860")),
          s(:send, nil, :check_both_ways,
            s(:str, "└"),
            s(:str, "\xC0"),
            s(:str, "IBM860")),
          s(:send, nil, :check_both_ways,
            s(:str, "╧"),
            s(:str, "\xCF"),
            s(:str, "IBM860")),
          s(:send, nil, :check_both_ways,
            s(:str, "╨"),
            s(:str, "\xD0"),
            s(:str, "IBM860")),
          s(:send, nil, :check_both_ways,
            s(:str, "▀"),
            s(:str, "\xDF"),
            s(:str, "IBM860")),
          s(:send, nil, :check_both_ways,
            s(:str, "α"),
            s(:str, "\xE0"),
            s(:str, "IBM860")),
          s(:send, nil, :check_both_ways,
            s(:str, "∩"),
            s(:str, "\xEF"),
            s(:str, "IBM860")),
          s(:send, nil, :check_both_ways,
            s(:str, "≡"),
            s(:str, "\xF0"),
            s(:str, "IBM860")),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xFF"),
            s(:str, "IBM860")))),
      s(:def, :test_IBM861,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "Ç"),
            s(:str, "\x80"),
            s(:str, "IBM861")),
          s(:send, nil, :check_both_ways,
            s(:str, "Å"),
            s(:str, "\x8F"),
            s(:str, "IBM861")),
          s(:send, nil, :check_both_ways,
            s(:str, "É"),
            s(:str, "\x90"),
            s(:str, "IBM861")),
          s(:send, nil, :check_both_ways,
            s(:str, "ƒ"),
            s(:str, "\x9F"),
            s(:str, "IBM861")),
          s(:send, nil, :check_both_ways,
            s(:str, "á"),
            s(:str, "\xA0"),
            s(:str, "IBM861")),
          s(:send, nil, :check_both_ways,
            s(:str, "»"),
            s(:str, "\xAF"),
            s(:str, "IBM861")),
          s(:send, nil, :check_both_ways,
            s(:str, "░"),
            s(:str, "\xB0"),
            s(:str, "IBM861")),
          s(:send, nil, :check_both_ways,
            s(:str, "┐"),
            s(:str, "\xBF"),
            s(:str, "IBM861")),
          s(:send, nil, :check_both_ways,
            s(:str, "└"),
            s(:str, "\xC0"),
            s(:str, "IBM861")),
          s(:send, nil, :check_both_ways,
            s(:str, "╧"),
            s(:str, "\xCF"),
            s(:str, "IBM861")),
          s(:send, nil, :check_both_ways,
            s(:str, "╨"),
            s(:str, "\xD0"),
            s(:str, "IBM861")),
          s(:send, nil, :check_both_ways,
            s(:str, "▀"),
            s(:str, "\xDF"),
            s(:str, "IBM861")),
          s(:send, nil, :check_both_ways,
            s(:str, "α"),
            s(:str, "\xE0"),
            s(:str, "IBM861")),
          s(:send, nil, :check_both_ways,
            s(:str, "∩"),
            s(:str, "\xEF"),
            s(:str, "IBM861")),
          s(:send, nil, :check_both_ways,
            s(:str, "≡"),
            s(:str, "\xF0"),
            s(:str, "IBM861")),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xFF"),
            s(:str, "IBM861")))),
      s(:def, :test_IBM862,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "א"),
            s(:str, "\x80"),
            s(:str, "IBM862")),
          s(:send, nil, :check_both_ways,
            s(:str, "ן"),
            s(:str, "\x8F"),
            s(:str, "IBM862")),
          s(:send, nil, :check_both_ways,
            s(:str, "נ"),
            s(:str, "\x90"),
            s(:str, "IBM862")),
          s(:send, nil, :check_both_ways,
            s(:str, "ƒ"),
            s(:str, "\x9F"),
            s(:str, "IBM862")),
          s(:send, nil, :check_both_ways,
            s(:str, "á"),
            s(:str, "\xA0"),
            s(:str, "IBM862")),
          s(:send, nil, :check_both_ways,
            s(:str, "»"),
            s(:str, "\xAF"),
            s(:str, "IBM862")),
          s(:send, nil, :check_both_ways,
            s(:str, "░"),
            s(:str, "\xB0"),
            s(:str, "IBM862")),
          s(:send, nil, :check_both_ways,
            s(:str, "┐"),
            s(:str, "\xBF"),
            s(:str, "IBM862")),
          s(:send, nil, :check_both_ways,
            s(:str, "└"),
            s(:str, "\xC0"),
            s(:str, "IBM862")),
          s(:send, nil, :check_both_ways,
            s(:str, "╧"),
            s(:str, "\xCF"),
            s(:str, "IBM862")),
          s(:send, nil, :check_both_ways,
            s(:str, "╨"),
            s(:str, "\xD0"),
            s(:str, "IBM862")),
          s(:send, nil, :check_both_ways,
            s(:str, "▀"),
            s(:str, "\xDF"),
            s(:str, "IBM862")),
          s(:send, nil, :check_both_ways,
            s(:str, "α"),
            s(:str, "\xE0"),
            s(:str, "IBM862")),
          s(:send, nil, :check_both_ways,
            s(:str, "∩"),
            s(:str, "\xEF"),
            s(:str, "IBM862")),
          s(:send, nil, :check_both_ways,
            s(:str, "≡"),
            s(:str, "\xF0"),
            s(:str, "IBM862")),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xFF"),
            s(:str, "IBM862")))),
      s(:def, :test_IBM863,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "Ç"),
            s(:str, "\x80"),
            s(:str, "IBM863")),
          s(:send, nil, :check_both_ways,
            s(:str, "§"),
            s(:str, "\x8F"),
            s(:str, "IBM863")),
          s(:send, nil, :check_both_ways,
            s(:str, "É"),
            s(:str, "\x90"),
            s(:str, "IBM863")),
          s(:send, nil, :check_both_ways,
            s(:str, "ƒ"),
            s(:str, "\x9F"),
            s(:str, "IBM863")),
          s(:send, nil, :check_both_ways,
            s(:str, "¦"),
            s(:str, "\xA0"),
            s(:str, "IBM863")),
          s(:send, nil, :check_both_ways,
            s(:str, "»"),
            s(:str, "\xAF"),
            s(:str, "IBM863")),
          s(:send, nil, :check_both_ways,
            s(:str, "░"),
            s(:str, "\xB0"),
            s(:str, "IBM863")),
          s(:send, nil, :check_both_ways,
            s(:str, "┐"),
            s(:str, "\xBF"),
            s(:str, "IBM863")),
          s(:send, nil, :check_both_ways,
            s(:str, "└"),
            s(:str, "\xC0"),
            s(:str, "IBM863")),
          s(:send, nil, :check_both_ways,
            s(:str, "╧"),
            s(:str, "\xCF"),
            s(:str, "IBM863")),
          s(:send, nil, :check_both_ways,
            s(:str, "╨"),
            s(:str, "\xD0"),
            s(:str, "IBM863")),
          s(:send, nil, :check_both_ways,
            s(:str, "▀"),
            s(:str, "\xDF"),
            s(:str, "IBM863")),
          s(:send, nil, :check_both_ways,
            s(:str, "α"),
            s(:str, "\xE0"),
            s(:str, "IBM863")),
          s(:send, nil, :check_both_ways,
            s(:str, "∩"),
            s(:str, "\xEF"),
            s(:str, "IBM863")),
          s(:send, nil, :check_both_ways,
            s(:str, "≡"),
            s(:str, "\xF0"),
            s(:str, "IBM863")),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xFF"),
            s(:str, "IBM863")))),
      s(:def, :test_IBM865,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "Ç"),
            s(:str, "\x80"),
            s(:str, "IBM865")),
          s(:send, nil, :check_both_ways,
            s(:str, "Å"),
            s(:str, "\x8F"),
            s(:str, "IBM865")),
          s(:send, nil, :check_both_ways,
            s(:str, "É"),
            s(:str, "\x90"),
            s(:str, "IBM865")),
          s(:send, nil, :check_both_ways,
            s(:str, "ƒ"),
            s(:str, "\x9F"),
            s(:str, "IBM865")),
          s(:send, nil, :check_both_ways,
            s(:str, "á"),
            s(:str, "\xA0"),
            s(:str, "IBM865")),
          s(:send, nil, :check_both_ways,
            s(:str, "¤"),
            s(:str, "\xAF"),
            s(:str, "IBM865")),
          s(:send, nil, :check_both_ways,
            s(:str, "░"),
            s(:str, "\xB0"),
            s(:str, "IBM865")),
          s(:send, nil, :check_both_ways,
            s(:str, "┐"),
            s(:str, "\xBF"),
            s(:str, "IBM865")),
          s(:send, nil, :check_both_ways,
            s(:str, "└"),
            s(:str, "\xC0"),
            s(:str, "IBM865")),
          s(:send, nil, :check_both_ways,
            s(:str, "╧"),
            s(:str, "\xCF"),
            s(:str, "IBM865")),
          s(:send, nil, :check_both_ways,
            s(:str, "╨"),
            s(:str, "\xD0"),
            s(:str, "IBM865")),
          s(:send, nil, :check_both_ways,
            s(:str, "▀"),
            s(:str, "\xDF"),
            s(:str, "IBM865")),
          s(:send, nil, :check_both_ways,
            s(:str, "α"),
            s(:str, "\xE0"),
            s(:str, "IBM865")),
          s(:send, nil, :check_both_ways,
            s(:str, "∩"),
            s(:str, "\xEF"),
            s(:str, "IBM865")),
          s(:send, nil, :check_both_ways,
            s(:str, "≡"),
            s(:str, "\xF0"),
            s(:str, "IBM865")),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xFF"),
            s(:str, "IBM865")))),
      s(:def, :test_IBM866,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "А"),
            s(:str, "\x80"),
            s(:str, "IBM866")),
          s(:send, nil, :check_both_ways,
            s(:str, "П"),
            s(:str, "\x8F"),
            s(:str, "IBM866")),
          s(:send, nil, :check_both_ways,
            s(:str, "Р"),
            s(:str, "\x90"),
            s(:str, "IBM866")),
          s(:send, nil, :check_both_ways,
            s(:str, "Я"),
            s(:str, "\x9F"),
            s(:str, "IBM866")),
          s(:send, nil, :check_both_ways,
            s(:str, "а"),
            s(:str, "\xA0"),
            s(:str, "IBM866")),
          s(:send, nil, :check_both_ways,
            s(:str, "п"),
            s(:str, "\xAF"),
            s(:str, "IBM866")),
          s(:send, nil, :check_both_ways,
            s(:str, "░"),
            s(:str, "\xB0"),
            s(:str, "IBM866")),
          s(:send, nil, :check_both_ways,
            s(:str, "┐"),
            s(:str, "\xBF"),
            s(:str, "IBM866")),
          s(:send, nil, :check_both_ways,
            s(:str, "└"),
            s(:str, "\xC0"),
            s(:str, "IBM866")),
          s(:send, nil, :check_both_ways,
            s(:str, "╧"),
            s(:str, "\xCF"),
            s(:str, "IBM866")),
          s(:send, nil, :check_both_ways,
            s(:str, "╨"),
            s(:str, "\xD0"),
            s(:str, "IBM866")),
          s(:send, nil, :check_both_ways,
            s(:str, "▀"),
            s(:str, "\xDF"),
            s(:str, "IBM866")),
          s(:send, nil, :check_both_ways,
            s(:str, "р"),
            s(:str, "\xE0"),
            s(:str, "IBM866")),
          s(:send, nil, :check_both_ways,
            s(:str, "я"),
            s(:str, "\xEF"),
            s(:str, "IBM866")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ё"),
            s(:str, "\xF0"),
            s(:str, "IBM866")),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xFF"),
            s(:str, "IBM866")))),
      s(:def, :test_IBM869,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x80"), :encode,
              s(:str, "utf-8"),
              s(:str, "IBM869"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x85"), :encode,
              s(:str, "utf-8"),
              s(:str, "IBM869"))),
          s(:send, nil, :check_both_ways,
            s(:str, "Ά"),
            s(:str, "\x86"),
            s(:str, "IBM869")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x87"), :encode,
              s(:str, "utf-8"),
              s(:str, "IBM869"))),
          s(:send, nil, :check_both_ways,
            s(:str, "·"),
            s(:str, "\x88"),
            s(:str, "IBM869")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ή"),
            s(:str, "\x8F"),
            s(:str, "IBM869")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ί"),
            s(:str, "\x90"),
            s(:str, "IBM869")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ό"),
            s(:str, "\x92"),
            s(:str, "IBM869")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x93"), :encode,
              s(:str, "utf-8"),
              s(:str, "IBM869"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x94"), :encode,
              s(:str, "utf-8"),
              s(:str, "IBM869"))),
          s(:send, nil, :check_both_ways,
            s(:str, "Ύ"),
            s(:str, "\x95"),
            s(:str, "IBM869")),
          s(:send, nil, :check_both_ways,
            s(:str, "ί"),
            s(:str, "\x9F"),
            s(:str, "IBM869")),
          s(:send, nil, :check_both_ways,
            s(:str, "ϊ"),
            s(:str, "\xA0"),
            s(:str, "IBM869")),
          s(:send, nil, :check_both_ways,
            s(:str, "»"),
            s(:str, "\xAF"),
            s(:str, "IBM869")),
          s(:send, nil, :check_both_ways,
            s(:str, "░"),
            s(:str, "\xB0"),
            s(:str, "IBM869")),
          s(:send, nil, :check_both_ways,
            s(:str, "┐"),
            s(:str, "\xBF"),
            s(:str, "IBM869")),
          s(:send, nil, :check_both_ways,
            s(:str, "└"),
            s(:str, "\xC0"),
            s(:str, "IBM869")),
          s(:send, nil, :check_both_ways,
            s(:str, "Σ"),
            s(:str, "\xCF"),
            s(:str, "IBM869")),
          s(:send, nil, :check_both_ways,
            s(:str, "Τ"),
            s(:str, "\xD0"),
            s(:str, "IBM869")),
          s(:send, nil, :check_both_ways,
            s(:str, "▀"),
            s(:str, "\xDF"),
            s(:str, "IBM869")),
          s(:send, nil, :check_both_ways,
            s(:str, "ζ"),
            s(:str, "\xE0"),
            s(:str, "IBM869")),
          s(:send, nil, :check_both_ways,
            s(:str, "΄"),
            s(:str, "\xEF"),
            s(:str, "IBM869")),
          s(:send, nil, :check_both_ways,
            s(:str, "­"),
            s(:str, "\xF0"),
            s(:str, "IBM869")),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xFF"),
            s(:str, "IBM869")))),
      s(:def, :test_macCroatian,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "Ä"),
            s(:str, "\x80"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "è"),
            s(:str, "\x8F"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "ê"),
            s(:str, "\x90"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "ü"),
            s(:str, "\x9F"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "†"),
            s(:str, "\xA0"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ø"),
            s(:str, "\xAF"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "∞"),
            s(:str, "\xB0"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "ø"),
            s(:str, "\xBF"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "¿"),
            s(:str, "\xC0"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "œ"),
            s(:str, "\xCF"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "Đ"),
            s(:str, "\xD0"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "©"),
            s(:str, "\xD9"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "⁄"),
            s(:str, "\xDA"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "›"),
            s(:str, "\xDD"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "Æ"),
            s(:str, "\xDE"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "»"),
            s(:str, "\xDF"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "–"),
            s(:str, "\xE0"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "·"),
            s(:str, "\xE1"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "Â"),
            s(:str, "\xE5"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "ć"),
            s(:str, "\xE6"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "Á"),
            s(:str, "\xE7"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "č"),
            s(:str, "\xE8"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "È"),
            s(:str, "\xE9"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ô"),
            s(:str, "\xEF"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "đ"),
            s(:str, "\xF0"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ò"),
            s(:str, "\xF1"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "¯"),
            s(:str, "\xF8"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "π"),
            s(:str, "\xF9"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ë"),
            s(:str, "\xFA"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ê"),
            s(:str, "\xFD"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "æ"),
            s(:str, "\xFE"),
            s(:str, "macCroatian")),
          s(:send, nil, :check_both_ways,
            s(:str, "ˇ"),
            s(:str, "\xFF"),
            s(:str, "macCroatian")))),
      s(:def, :test_macCyrillic,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "А"),
            s(:str, "\x80"),
            s(:str, "macCyrillic")),
          s(:send, nil, :check_both_ways,
            s(:str, "П"),
            s(:str, "\x8F"),
            s(:str, "macCyrillic")),
          s(:send, nil, :check_both_ways,
            s(:str, "Р"),
            s(:str, "\x90"),
            s(:str, "macCyrillic")),
          s(:send, nil, :check_both_ways,
            s(:str, "Я"),
            s(:str, "\x9F"),
            s(:str, "macCyrillic")),
          s(:send, nil, :check_both_ways,
            s(:str, "†"),
            s(:str, "\xA0"),
            s(:str, "macCyrillic")),
          s(:send, nil, :check_both_ways,
            s(:str, "ѓ"),
            s(:str, "\xAF"),
            s(:str, "macCyrillic")),
          s(:send, nil, :check_both_ways,
            s(:str, "∞"),
            s(:str, "\xB0"),
            s(:str, "macCyrillic")),
          s(:send, nil, :check_both_ways,
            s(:str, "њ"),
            s(:str, "\xBF"),
            s(:str, "macCyrillic")),
          s(:send, nil, :check_both_ways,
            s(:str, "ј"),
            s(:str, "\xC0"),
            s(:str, "macCyrillic")),
          s(:send, nil, :check_both_ways,
            s(:str, "ѕ"),
            s(:str, "\xCF"),
            s(:str, "macCyrillic")),
          s(:send, nil, :check_both_ways,
            s(:str, "–"),
            s(:str, "\xD0"),
            s(:str, "macCyrillic")),
          s(:send, nil, :check_both_ways,
            s(:str, "я"),
            s(:str, "\xDF"),
            s(:str, "macCyrillic")),
          s(:send, nil, :check_both_ways,
            s(:str, "а"),
            s(:str, "\xE0"),
            s(:str, "macCyrillic")),
          s(:send, nil, :check_both_ways,
            s(:str, "п"),
            s(:str, "\xEF"),
            s(:str, "macCyrillic")),
          s(:send, nil, :check_both_ways,
            s(:str, "р"),
            s(:str, "\xF0"),
            s(:str, "macCyrillic")),
          s(:send, nil, :check_both_ways,
            s(:str, "¤"),
            s(:str, "\xFF"),
            s(:str, "macCyrillic")))),
      s(:def, :test_macGreek,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "Ä"),
            s(:str, "\x80"),
            s(:str, "macGreek")),
          s(:send, nil, :check_both_ways,
            s(:str, "è"),
            s(:str, "\x8F"),
            s(:str, "macGreek")),
          s(:send, nil, :check_both_ways,
            s(:str, "ê"),
            s(:str, "\x90"),
            s(:str, "macGreek")),
          s(:send, nil, :check_both_ways,
            s(:str, "ü"),
            s(:str, "\x9F"),
            s(:str, "macGreek")),
          s(:send, nil, :check_both_ways,
            s(:str, "†"),
            s(:str, "\xA0"),
            s(:str, "macGreek")),
          s(:send, nil, :check_both_ways,
            s(:str, "Γ"),
            s(:str, "\xA1"),
            s(:str, "macGreek")),
          s(:send, nil, :check_both_ways,
            s(:str, "·"),
            s(:str, "\xAF"),
            s(:str, "macGreek")),
          s(:send, nil, :check_both_ways,
            s(:str, "Α"),
            s(:str, "\xB0"),
            s(:str, "macGreek")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ω"),
            s(:str, "\xBF"),
            s(:str, "macGreek")),
          s(:send, nil, :check_both_ways,
            s(:str, "ά"),
            s(:str, "\xC0"),
            s(:str, "macGreek")),
          s(:send, nil, :check_both_ways,
            s(:str, "œ"),
            s(:str, "\xCF"),
            s(:str, "macGreek")),
          s(:send, nil, :check_both_ways,
            s(:str, "–"),
            s(:str, "\xD0"),
            s(:str, "macGreek")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ώ"),
            s(:str, "\xDF"),
            s(:str, "macGreek")),
          s(:send, nil, :check_both_ways,
            s(:str, "ύ"),
            s(:str, "\xE0"),
            s(:str, "macGreek")),
          s(:send, nil, :check_both_ways,
            s(:str, "ο"),
            s(:str, "\xEF"),
            s(:str, "macGreek")),
          s(:send, nil, :check_both_ways,
            s(:str, "π"),
            s(:str, "\xF0"),
            s(:str, "macGreek")),
          s(:send, nil, :check_both_ways,
            s(:str, "ΰ"),
            s(:str, "\xFE"),
            s(:str, "macGreek")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xFF"), :encode,
              s(:str, "utf-8"),
              s(:str, "macGreek"))))),
      s(:def, :test_macIceland,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "Ä"),
            s(:str, "\x80"),
            s(:str, "macIceland")),
          s(:send, nil, :check_both_ways,
            s(:str, "è"),
            s(:str, "\x8F"),
            s(:str, "macIceland")),
          s(:send, nil, :check_both_ways,
            s(:str, "ê"),
            s(:str, "\x90"),
            s(:str, "macIceland")),
          s(:send, nil, :check_both_ways,
            s(:str, "ü"),
            s(:str, "\x9F"),
            s(:str, "macIceland")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ý"),
            s(:str, "\xA0"),
            s(:str, "macIceland")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ø"),
            s(:str, "\xAF"),
            s(:str, "macIceland")),
          s(:send, nil, :check_both_ways,
            s(:str, "∞"),
            s(:str, "\xB0"),
            s(:str, "macIceland")),
          s(:send, nil, :check_both_ways,
            s(:str, "ø"),
            s(:str, "\xBF"),
            s(:str, "macIceland")),
          s(:send, nil, :check_both_ways,
            s(:str, "¿"),
            s(:str, "\xC0"),
            s(:str, "macIceland")),
          s(:send, nil, :check_both_ways,
            s(:str, "œ"),
            s(:str, "\xCF"),
            s(:str, "macIceland")),
          s(:send, nil, :check_both_ways,
            s(:str, "–"),
            s(:str, "\xD0"),
            s(:str, "macIceland")),
          s(:send, nil, :check_both_ways,
            s(:str, "þ"),
            s(:str, "\xDF"),
            s(:str, "macIceland")),
          s(:send, nil, :check_both_ways,
            s(:str, "ý"),
            s(:str, "\xE0"),
            s(:str, "macIceland")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ô"),
            s(:str, "\xEF"),
            s(:str, "macIceland")),
          s(:send, nil, :check_both_ways,
            s(:str, "ˇ"),
            s(:str, "\xFF"),
            s(:str, "macIceland")))),
      s(:def, :test_macRoman,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "Ä"),
            s(:str, "\x80"),
            s(:str, "macRoman")),
          s(:send, nil, :check_both_ways,
            s(:str, "è"),
            s(:str, "\x8F"),
            s(:str, "macRoman")),
          s(:send, nil, :check_both_ways,
            s(:str, "ê"),
            s(:str, "\x90"),
            s(:str, "macRoman")),
          s(:send, nil, :check_both_ways,
            s(:str, "ü"),
            s(:str, "\x9F"),
            s(:str, "macRoman")),
          s(:send, nil, :check_both_ways,
            s(:str, "†"),
            s(:str, "\xA0"),
            s(:str, "macRoman")),
          s(:send, nil, :check_both_ways,
            s(:str, "∞"),
            s(:str, "\xB0"),
            s(:str, "macRoman")),
          s(:send, nil, :check_both_ways,
            s(:str, "ø"),
            s(:str, "\xBF"),
            s(:str, "macRoman")),
          s(:send, nil, :check_both_ways,
            s(:str, "¿"),
            s(:str, "\xC0"),
            s(:str, "macRoman")),
          s(:send, nil, :check_both_ways,
            s(:str, "œ"),
            s(:str, "\xCF"),
            s(:str, "macRoman")),
          s(:send, nil, :check_both_ways,
            s(:str, "–"),
            s(:str, "\xD0"),
            s(:str, "macRoman")),
          s(:send, nil, :check_both_ways,
            s(:str, "¤"),
            s(:str, "\xDB"),
            s(:str, "macRoman")),
          s(:send, nil, :check_both_ways,
            s(:str, "ﬂ"),
            s(:str, "\xDF"),
            s(:str, "macRoman")),
          s(:send, nil, :check_both_ways,
            s(:str, "‡"),
            s(:str, "\xE0"),
            s(:str, "macRoman")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ô"),
            s(:str, "\xEF"),
            s(:str, "macRoman")),
          s(:send, nil, :check_both_ways,
            s(:str, "ˇ"),
            s(:str, "\xFF"),
            s(:str, "macRoman")))),
      s(:def, :test_macRomania,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "Ä"),
            s(:str, "\x80"),
            s(:str, "macRomania")),
          s(:send, nil, :check_both_ways,
            s(:str, "è"),
            s(:str, "\x8F"),
            s(:str, "macRomania")),
          s(:send, nil, :check_both_ways,
            s(:str, "ê"),
            s(:str, "\x90"),
            s(:str, "macRomania")),
          s(:send, nil, :check_both_ways,
            s(:str, "ü"),
            s(:str, "\x9F"),
            s(:str, "macRomania")),
          s(:send, nil, :check_both_ways,
            s(:str, "†"),
            s(:str, "\xA0"),
            s(:str, "macRomania")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ş"),
            s(:str, "\xAF"),
            s(:str, "macRomania")),
          s(:send, nil, :check_both_ways,
            s(:str, "∞"),
            s(:str, "\xB0"),
            s(:str, "macRomania")),
          s(:send, nil, :check_both_ways,
            s(:str, "ş"),
            s(:str, "\xBF"),
            s(:str, "macRomania")),
          s(:send, nil, :check_both_ways,
            s(:str, "¿"),
            s(:str, "\xC0"),
            s(:str, "macRomania")),
          s(:send, nil, :check_both_ways,
            s(:str, "œ"),
            s(:str, "\xCF"),
            s(:str, "macRomania")),
          s(:send, nil, :check_both_ways,
            s(:str, "–"),
            s(:str, "\xD0"),
            s(:str, "macRomania")),
          s(:send, nil, :check_both_ways,
            s(:str, "¤"),
            s(:str, "\xDB"),
            s(:str, "macRomania")),
          s(:send, nil, :check_both_ways,
            s(:str, "ţ"),
            s(:str, "\xDF"),
            s(:str, "macRomania")),
          s(:send, nil, :check_both_ways,
            s(:str, "‡"),
            s(:str, "\xE0"),
            s(:str, "macRomania")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ô"),
            s(:str, "\xEF"),
            s(:str, "macRomania")),
          s(:send, nil, :check_both_ways,
            s(:str, "ˇ"),
            s(:str, "\xFF"),
            s(:str, "macRomania")))),
      s(:def, :test_macTurkish,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "Ä"),
            s(:str, "\x80"),
            s(:str, "macTurkish")),
          s(:send, nil, :check_both_ways,
            s(:str, "è"),
            s(:str, "\x8F"),
            s(:str, "macTurkish")),
          s(:send, nil, :check_both_ways,
            s(:str, "ê"),
            s(:str, "\x90"),
            s(:str, "macTurkish")),
          s(:send, nil, :check_both_ways,
            s(:str, "ü"),
            s(:str, "\x9F"),
            s(:str, "macTurkish")),
          s(:send, nil, :check_both_ways,
            s(:str, "†"),
            s(:str, "\xA0"),
            s(:str, "macTurkish")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ø"),
            s(:str, "\xAF"),
            s(:str, "macTurkish")),
          s(:send, nil, :check_both_ways,
            s(:str, "∞"),
            s(:str, "\xB0"),
            s(:str, "macTurkish")),
          s(:send, nil, :check_both_ways,
            s(:str, "ø"),
            s(:str, "\xBF"),
            s(:str, "macTurkish")),
          s(:send, nil, :check_both_ways,
            s(:str, "¿"),
            s(:str, "\xC0"),
            s(:str, "macTurkish")),
          s(:send, nil, :check_both_ways,
            s(:str, "œ"),
            s(:str, "\xCF"),
            s(:str, "macTurkish")),
          s(:send, nil, :check_both_ways,
            s(:str, "–"),
            s(:str, "\xD0"),
            s(:str, "macTurkish")),
          s(:send, nil, :check_both_ways,
            s(:str, "ş"),
            s(:str, "\xDF"),
            s(:str, "macTurkish")),
          s(:send, nil, :check_both_ways,
            s(:str, "‡"),
            s(:str, "\xE0"),
            s(:str, "macTurkish")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ô"),
            s(:str, "\xEF"),
            s(:str, "macTurkish")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ù"),
            s(:str, "\xF4"),
            s(:str, "macTurkish")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xF5"), :encode,
              s(:str, "utf-8"),
              s(:str, "macTurkish"))),
          s(:send, nil, :check_both_ways,
            s(:str, "ˆ"),
            s(:str, "\xF6"),
            s(:str, "macTurkish")),
          s(:send, nil, :check_both_ways,
            s(:str, "ˇ"),
            s(:str, "\xFF"),
            s(:str, "macTurkish")))),
      s(:def, :test_macUkraine,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "А"),
            s(:str, "\x80"),
            s(:str, "macUkraine")),
          s(:send, nil, :check_both_ways,
            s(:str, "П"),
            s(:str, "\x8F"),
            s(:str, "macUkraine")),
          s(:send, nil, :check_both_ways,
            s(:str, "Р"),
            s(:str, "\x90"),
            s(:str, "macUkraine")),
          s(:send, nil, :check_both_ways,
            s(:str, "Я"),
            s(:str, "\x9F"),
            s(:str, "macUkraine")),
          s(:send, nil, :check_both_ways,
            s(:str, "†"),
            s(:str, "\xA0"),
            s(:str, "macUkraine")),
          s(:send, nil, :check_both_ways,
            s(:str, "ѓ"),
            s(:str, "\xAF"),
            s(:str, "macUkraine")),
          s(:send, nil, :check_both_ways,
            s(:str, "∞"),
            s(:str, "\xB0"),
            s(:str, "macUkraine")),
          s(:send, nil, :check_both_ways,
            s(:str, "њ"),
            s(:str, "\xBF"),
            s(:str, "macUkraine")),
          s(:send, nil, :check_both_ways,
            s(:str, "ј"),
            s(:str, "\xC0"),
            s(:str, "macUkraine")),
          s(:send, nil, :check_both_ways,
            s(:str, "ѕ"),
            s(:str, "\xCF"),
            s(:str, "macUkraine")),
          s(:send, nil, :check_both_ways,
            s(:str, "–"),
            s(:str, "\xD0"),
            s(:str, "macUkraine")),
          s(:send, nil, :check_both_ways,
            s(:str, "я"),
            s(:str, "\xDF"),
            s(:str, "macUkraine")),
          s(:send, nil, :check_both_ways,
            s(:str, "а"),
            s(:str, "\xE0"),
            s(:str, "macUkraine")),
          s(:send, nil, :check_both_ways,
            s(:str, "п"),
            s(:str, "\xEF"),
            s(:str, "macUkraine")),
          s(:send, nil, :check_both_ways,
            s(:str, "р"),
            s(:str, "\xF0"),
            s(:str, "macUkraine")),
          s(:send, nil, :check_both_ways,
            s(:str, "¤"),
            s(:str, "\xFF"),
            s(:str, "macUkraine")))),
      s(:def, :test_koi8_u,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "─"),
            s(:str, "\x80"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "▐"),
            s(:str, "\x8F"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "░"),
            s(:str, "\x90"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "÷"),
            s(:str, "\x9F"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "═"),
            s(:str, "\xA0"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "є"),
            s(:str, "\xA4"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "і"),
            s(:str, "\xA6"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "ї"),
            s(:str, "\xA7"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "ґ"),
            s(:str, "\xAD"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "╞"),
            s(:str, "\xAF"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "╟"),
            s(:str, "\xB0"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "Є"),
            s(:str, "\xB4"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "І"),
            s(:str, "\xB6"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ї"),
            s(:str, "\xB7"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ґ"),
            s(:str, "\xBD"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "©"),
            s(:str, "\xBF"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "ю"),
            s(:str, "\xC0"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "о"),
            s(:str, "\xCF"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "п"),
            s(:str, "\xD0"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "ъ"),
            s(:str, "\xDF"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ю"),
            s(:str, "\xE0"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "О"),
            s(:str, "\xEF"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "П"),
            s(:str, "\xF0"),
            s(:str, "KOI8-U")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ъ"),
            s(:str, "\xFF"),
            s(:str, "KOI8-U")))),
      s(:def, :test_koi8_r,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "─"),
            s(:str, "\x80"),
            s(:str, "KOI8-R")),
          s(:send, nil, :check_both_ways,
            s(:str, "▐"),
            s(:str, "\x8F"),
            s(:str, "KOI8-R")),
          s(:send, nil, :check_both_ways,
            s(:str, "░"),
            s(:str, "\x90"),
            s(:str, "KOI8-R")),
          s(:send, nil, :check_both_ways,
            s(:str, "÷"),
            s(:str, "\x9F"),
            s(:str, "KOI8-R")),
          s(:send, nil, :check_both_ways,
            s(:str, "═"),
            s(:str, "\xA0"),
            s(:str, "KOI8-R")),
          s(:send, nil, :check_both_ways,
            s(:str, "╞"),
            s(:str, "\xAF"),
            s(:str, "KOI8-R")),
          s(:send, nil, :check_both_ways,
            s(:str, "╟"),
            s(:str, "\xB0"),
            s(:str, "KOI8-R")),
          s(:send, nil, :check_both_ways,
            s(:str, "©"),
            s(:str, "\xBF"),
            s(:str, "KOI8-R")),
          s(:send, nil, :check_both_ways,
            s(:str, "ю"),
            s(:str, "\xC0"),
            s(:str, "KOI8-R")),
          s(:send, nil, :check_both_ways,
            s(:str, "о"),
            s(:str, "\xCF"),
            s(:str, "KOI8-R")),
          s(:send, nil, :check_both_ways,
            s(:str, "п"),
            s(:str, "\xD0"),
            s(:str, "KOI8-R")),
          s(:send, nil, :check_both_ways,
            s(:str, "ъ"),
            s(:str, "\xDF"),
            s(:str, "KOI8-R")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ю"),
            s(:str, "\xE0"),
            s(:str, "KOI8-R")),
          s(:send, nil, :check_both_ways,
            s(:str, "О"),
            s(:str, "\xEF"),
            s(:str, "KOI8-R")),
          s(:send, nil, :check_both_ways,
            s(:str, "П"),
            s(:str, "\xF0"),
            s(:str, "KOI8-R")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ъ"),
            s(:str, "\xFF"),
            s(:str, "KOI8-R")))),
      s(:def, :test_TIS_620,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x80"), :encode,
              s(:str, "utf-8"),
              s(:str, "TIS-620"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x8F"), :encode,
              s(:str, "utf-8"),
              s(:str, "TIS-620"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x90"), :encode,
              s(:str, "utf-8"),
              s(:str, "TIS-620"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x9F"), :encode,
              s(:str, "utf-8"),
              s(:str, "TIS-620"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA0"), :encode,
              s(:str, "utf-8"),
              s(:str, "TIS-620"))),
          s(:send, nil, :check_both_ways,
            s(:str, "ก"),
            s(:str, "\xA1"),
            s(:str, "TIS-620")),
          s(:send, nil, :check_both_ways,
            s(:str, "ฏ"),
            s(:str, "\xAF"),
            s(:str, "TIS-620")),
          s(:send, nil, :check_both_ways,
            s(:str, "ฐ"),
            s(:str, "\xB0"),
            s(:str, "TIS-620")),
          s(:send, nil, :check_both_ways,
            s(:str, "ฟ"),
            s(:str, "\xBF"),
            s(:str, "TIS-620")),
          s(:send, nil, :check_both_ways,
            s(:str, "ภ"),
            s(:str, "\xC0"),
            s(:str, "TIS-620")),
          s(:send, nil, :check_both_ways,
            s(:str, "ฯ"),
            s(:str, "\xCF"),
            s(:str, "TIS-620")),
          s(:send, nil, :check_both_ways,
            s(:str, "ะ"),
            s(:str, "\xD0"),
            s(:str, "TIS-620")),
          s(:send, nil, :check_both_ways,
            s(:str, "ฺ"),
            s(:str, "\xDA"),
            s(:str, "TIS-620")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xDB"), :encode,
              s(:str, "utf-8"),
              s(:str, "TIS-620"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xDE"), :encode,
              s(:str, "utf-8"),
              s(:str, "TIS-620"))),
          s(:send, nil, :check_both_ways,
            s(:str, "฿"),
            s(:str, "\xDF"),
            s(:str, "TIS-620")),
          s(:send, nil, :check_both_ways,
            s(:str, "เ"),
            s(:str, "\xE0"),
            s(:str, "TIS-620")),
          s(:send, nil, :check_both_ways,
            s(:str, "๏"),
            s(:str, "\xEF"),
            s(:str, "TIS-620")),
          s(:send, nil, :check_both_ways,
            s(:str, "๐"),
            s(:str, "\xF0"),
            s(:str, "TIS-620")),
          s(:send, nil, :check_both_ways,
            s(:str, "๛"),
            s(:str, "\xFB"),
            s(:str, "TIS-620")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xFC"), :encode,
              s(:str, "utf-8"),
              s(:str, "TIS-620"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xFF"), :encode,
              s(:str, "utf-8"),
              s(:str, "TIS-620"))))),
      s(:def, :test_CP850,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "Ç"),
            s(:str, "\x80"),
            s(:str, "CP850")),
          s(:send, nil, :check_both_ways,
            s(:str, "Å"),
            s(:str, "\x8F"),
            s(:str, "CP850")),
          s(:send, nil, :check_both_ways,
            s(:str, "É"),
            s(:str, "\x90"),
            s(:str, "CP850")),
          s(:send, nil, :check_both_ways,
            s(:str, "ƒ"),
            s(:str, "\x9F"),
            s(:str, "CP850")),
          s(:send, nil, :check_both_ways,
            s(:str, "á"),
            s(:str, "\xA0"),
            s(:str, "CP850")),
          s(:send, nil, :check_both_ways,
            s(:str, "»"),
            s(:str, "\xAF"),
            s(:str, "CP850")),
          s(:send, nil, :check_both_ways,
            s(:str, "░"),
            s(:str, "\xB0"),
            s(:str, "CP850")),
          s(:send, nil, :check_both_ways,
            s(:str, "┐"),
            s(:str, "\xBF"),
            s(:str, "CP850")),
          s(:send, nil, :check_both_ways,
            s(:str, "└"),
            s(:str, "\xC0"),
            s(:str, "CP850")),
          s(:send, nil, :check_both_ways,
            s(:str, "¤"),
            s(:str, "\xCF"),
            s(:str, "CP850")),
          s(:send, nil, :check_both_ways,
            s(:str, "ð"),
            s(:str, "\xD0"),
            s(:str, "CP850")),
          s(:send, nil, :check_both_ways,
            s(:str, "▀"),
            s(:str, "\xDF"),
            s(:str, "CP850")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ó"),
            s(:str, "\xE0"),
            s(:str, "CP850")),
          s(:send, nil, :check_both_ways,
            s(:str, "´"),
            s(:str, "\xEF"),
            s(:str, "CP850")),
          s(:send, nil, :check_both_ways,
            s(:str, "­"),
            s(:str, "\xF0"),
            s(:str, "CP850")),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xFF"),
            s(:str, "CP850")))),
      s(:def, :test_CP852,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "Ç"),
            s(:str, "\x80"),
            s(:str, "CP852")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ć"),
            s(:str, "\x8F"),
            s(:str, "CP852")),
          s(:send, nil, :check_both_ways,
            s(:str, "É"),
            s(:str, "\x90"),
            s(:str, "CP852")),
          s(:send, nil, :check_both_ways,
            s(:str, "č"),
            s(:str, "\x9F"),
            s(:str, "CP852")),
          s(:send, nil, :check_both_ways,
            s(:str, "á"),
            s(:str, "\xA0"),
            s(:str, "CP852")),
          s(:send, nil, :check_both_ways,
            s(:str, "»"),
            s(:str, "\xAF"),
            s(:str, "CP852")),
          s(:send, nil, :check_both_ways,
            s(:str, "░"),
            s(:str, "\xB0"),
            s(:str, "CP852")),
          s(:send, nil, :check_both_ways,
            s(:str, "┐"),
            s(:str, "\xBF"),
            s(:str, "CP852")),
          s(:send, nil, :check_both_ways,
            s(:str, "└"),
            s(:str, "\xC0"),
            s(:str, "CP852")),
          s(:send, nil, :check_both_ways,
            s(:str, "¤"),
            s(:str, "\xCF"),
            s(:str, "CP852")),
          s(:send, nil, :check_both_ways,
            s(:str, "đ"),
            s(:str, "\xD0"),
            s(:str, "CP852")),
          s(:send, nil, :check_both_ways,
            s(:str, "▀"),
            s(:str, "\xDF"),
            s(:str, "CP852")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ó"),
            s(:str, "\xE0"),
            s(:str, "CP852")),
          s(:send, nil, :check_both_ways,
            s(:str, "´"),
            s(:str, "\xEF"),
            s(:str, "CP852")),
          s(:send, nil, :check_both_ways,
            s(:str, "­"),
            s(:str, "\xF0"),
            s(:str, "CP852")),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xFF"),
            s(:str, "CP852")))),
      s(:def, :test_CP855,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "ђ"),
            s(:str, "\x80"),
            s(:str, "CP855")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ј"),
            s(:str, "\x8F"),
            s(:str, "CP855")),
          s(:send, nil, :check_both_ways,
            s(:str, "љ"),
            s(:str, "\x90"),
            s(:str, "CP855")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ъ"),
            s(:str, "\x9F"),
            s(:str, "CP855")),
          s(:send, nil, :check_both_ways,
            s(:str, "а"),
            s(:str, "\xA0"),
            s(:str, "CP855")),
          s(:send, nil, :check_both_ways,
            s(:str, "»"),
            s(:str, "\xAF"),
            s(:str, "CP855")),
          s(:send, nil, :check_both_ways,
            s(:str, "░"),
            s(:str, "\xB0"),
            s(:str, "CP855")),
          s(:send, nil, :check_both_ways,
            s(:str, "┐"),
            s(:str, "\xBF"),
            s(:str, "CP855")),
          s(:send, nil, :check_both_ways,
            s(:str, "└"),
            s(:str, "\xC0"),
            s(:str, "CP855")),
          s(:send, nil, :check_both_ways,
            s(:str, "¤"),
            s(:str, "\xCF"),
            s(:str, "CP855")),
          s(:send, nil, :check_both_ways,
            s(:str, "л"),
            s(:str, "\xD0"),
            s(:str, "CP855")),
          s(:send, nil, :check_both_ways,
            s(:str, "▀"),
            s(:str, "\xDF"),
            s(:str, "CP855")),
          s(:send, nil, :check_both_ways,
            s(:str, "Я"),
            s(:str, "\xE0"),
            s(:str, "CP855")),
          s(:send, nil, :check_both_ways,
            s(:str, "№"),
            s(:str, "\xEF"),
            s(:str, "CP855")),
          s(:send, nil, :check_both_ways,
            s(:str, "­"),
            s(:str, "\xF0"),
            s(:str, "CP855")),
          s(:send, nil, :check_both_ways,
            s(:str, " "),
            s(:str, "\xFF"),
            s(:str, "CP855")))),
      s(:def, :check_utf_16_both_ways,
        s(:args,
          s(:arg, :utf8),
          s(:arg, :raw)),
        s(:begin,
          s(:lvasgn, :copy,
            s(:send,
              s(:lvar, :raw), :dup)),
          s(:block,
            s(:send,
              s(:int, 0), :step,
              s(:send,
                s(:send,
                  s(:lvar, :copy), :length), :-,
                s(:int, 1)),
              s(:int, 2)),
            s(:args,
              s(:arg, :i)),
            s(:masgn,
              s(:mlhs,
                s(:send,
                  s(:lvar, :copy), :[]=,
                  s(:send,
                    s(:lvar, :i), :+,
                    s(:int, 1))),
                s(:send,
                  s(:lvar, :copy), :[]=,
                  s(:lvar, :i))),
              s(:array,
                s(:send,
                  s(:lvar, :copy), :[],
                  s(:lvar, :i)),
                s(:send,
                  s(:lvar, :copy), :[],
                  s(:send,
                    s(:lvar, :i), :+,
                    s(:int, 1)))))),
          s(:send, nil, :check_both_ways,
            s(:lvar, :utf8),
            s(:lvar, :raw),
            s(:str, "utf-16be")),
          s(:send, nil, :check_both_ways,
            s(:lvar, :utf8),
            s(:lvar, :copy),
            s(:str, "utf-16le")))),
      s(:def, :test_utf_16,
        s(:args),
        s(:begin,
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "abc"),
            s(:str, "\x00a\x00b\x00c")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "é"),
            s(:str, "\x00\xE9")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "épée"),
            s(:str, "\x00\xE9\x00p\x00\xE9\x00e")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "松本行弘"),
            s(:str, "g~g,\x88L_\x18")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "青山学院大学"),
            s(:str, "\x97R\\q[f\x96bY'[f")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "Martin Dürst"),
            s(:str, "\x00M\x00a\x00r\x00t\x00i\x00n\x00 \x00D\x00\xFC\x00r\x00s\x00t")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "\x00"),
            s(:str, "\x00\x00")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "\x7F"),
            s(:str, "\x00\x7F")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "\u0080"),
            s(:str, "\x00\x80")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "Օ"),
            s(:str, "\x05U")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "Ҫ"),
            s(:str, "\x04\xAA")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "̳"),
            s(:str, "\x033")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "ӌ"),
            s(:str, "\x04\xCC")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "ð"),
            s(:str, "\x00\xF0")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "܏"),
            s(:str, "\a\x0F")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "\u07FF"),
            s(:str, "\a\xFF")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "ࠀ"),
            s(:str, "\b\x00")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "\uD7FF"),
            s(:str, "\xD7\xFF")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, ""),
            s(:str, "\xE0\x00")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "\uFFFF"),
            s(:str, "\xFF\xFF")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "啕"),
            s(:str, "UU")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "ꪪ"),
            s(:str, "\xAA\xAA")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "㌳"),
            s(:str, "33")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "쳌"),
            s(:str, "\xCC\xCC")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, ""),
            s(:str, "\xF0\xF0")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "༏"),
            s(:str, "\x0F\x0F")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "\uFF00"),
            s(:str, "\xFF\x00")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "ÿ"),
            s(:str, "\x00\xFF")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "𐀀"),
            s(:str, "\xD8\x00\xDC\x00")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "\u{FFFFF}"),
            s(:str, "\xDB\xBF\xDF\xFF")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "􀀀"),
            s(:str, "\xDB\xC0\xDC\x00")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "\u{10FFFF}"),
            s(:str, "\xDB\xFF\xDF\xFF")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "􅕕"),
            s(:str, "\xDB\xD5\xDDU")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "\u{55555}"),
            s(:str, "\xD9\x15\xDDU")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "\u{AAAAA}"),
            s(:str, "\xDAj\xDE\xAA")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "\u{33333}"),
            s(:str, "\xD8\x8C\xDF3")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "\u{CCCCC}"),
            s(:str, "\xDA\xF3\xDC\xCC")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "\u{8F0F0}"),
            s(:str, "\xD9\xFC\xDC\xF0")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "󰼏"),
            s(:str, "\xDB\x83\xDF\x0F")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "\u{8FF00}"),
            s(:str, "\xD9\xFF\xDF\x00")),
          s(:send, nil, :check_utf_16_both_ways,
            s(:str, "󰃿"),
            s(:str, "\xDB\x80\xDC\xFF")))),
      s(:def, :test_utf_16_bom,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:str, "あい𠮷")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:array,
                  s(:str, "fffe4230443042d8b7df")), :pack,
                s(:str, "H*")), :encode,
              s(:str, "UTF-8"),
              s(:str, "UTF-16"))),
          s(:send, nil, :check_both_ways,
            s(:lvar, :expected),
            s(:send,
              s(:array,
                s(:str, "feff30423044d842dfb7")), :pack,
              s(:str, "H*")),
            s(:str, "UTF-16")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :InvalidByteSequenceError)),
            s(:args),
            s(:send,
              s(:send,
                s(:array,
                  s(:str, "feffdfb7")), :pack,
                s(:str, "H*")), :encode,
              s(:str, "UTF-8"),
              s(:str, "UTF-16"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :InvalidByteSequenceError)),
            s(:args),
            s(:send,
              s(:send,
                s(:array,
                  s(:str, "fffeb7df")), :pack,
                s(:str, "H*")), :encode,
              s(:str, "UTF-8"),
              s(:str, "UTF-16"))))),
      s(:def, :test_utf_32_bom,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:str, "あい𠮷")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:array,
                  s(:str, "fffe00004230000044300000b70b0200")), :pack,
                s(:str, "H*")), :encode,
              s(:str, "UTF-8"),
              s(:str, "UTF-32"))),
          s(:send, nil, :check_both_ways,
            s(:lvar, :expected),
            s(:send,
              s(:array,
                s(:str, "0000feff000030420000304400020bb7")), :pack,
              s(:str, "H*")),
            s(:str, "UTF-32")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :InvalidByteSequenceError)),
            s(:args),
            s(:send,
              s(:send,
                s(:array,
                  s(:str, "0000feff00110000")), :pack,
                s(:str, "H*")), :encode,
              s(:str, "UTF-8"),
              s(:str, "UTF-32"))))),
      s(:def, :check_utf_32_both_ways,
        s(:args,
          s(:arg, :utf8),
          s(:arg, :raw)),
        s(:begin,
          s(:lvasgn, :copy,
            s(:send,
              s(:lvar, :raw), :dup)),
          s(:block,
            s(:send,
              s(:int, 0), :step,
              s(:send,
                s(:send,
                  s(:lvar, :copy), :length), :-,
                s(:int, 1)),
              s(:int, 4)),
            s(:args,
              s(:arg, :i)),
            s(:masgn,
              s(:mlhs,
                s(:send,
                  s(:lvar, :copy), :[]=,
                  s(:send,
                    s(:lvar, :i), :+,
                    s(:int, 3))),
                s(:send,
                  s(:lvar, :copy), :[]=,
                  s(:send,
                    s(:lvar, :i), :+,
                    s(:int, 2))),
                s(:send,
                  s(:lvar, :copy), :[]=,
                  s(:send,
                    s(:lvar, :i), :+,
                    s(:int, 1))),
                s(:send,
                  s(:lvar, :copy), :[]=,
                  s(:lvar, :i))),
              s(:array,
                s(:send,
                  s(:lvar, :copy), :[],
                  s(:lvar, :i)),
                s(:send,
                  s(:lvar, :copy), :[],
                  s(:send,
                    s(:lvar, :i), :+,
                    s(:int, 1))),
                s(:send,
                  s(:lvar, :copy), :[],
                  s(:send,
                    s(:lvar, :i), :+,
                    s(:int, 2))),
                s(:send,
                  s(:lvar, :copy), :[],
                  s(:send,
                    s(:lvar, :i), :+,
                    s(:int, 3)))))),
          s(:send, nil, :check_both_ways,
            s(:lvar, :utf8),
            s(:lvar, :raw),
            s(:str, "utf-32be")))),
      s(:def, :test_utf_32,
        s(:args),
        s(:begin,
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "abc"),
            s(:str, "\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "é"),
            s(:str, "\x00\x00\x00\xE9")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "épée"),
            s(:str, "\x00\x00\x00\xE9\x00\x00\x00p\x00\x00\x00\xE9\x00\x00\x00e")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "松本行弘"),
            s(:str, "\x00\x00g~\x00\x00g,\x00\x00\x88L\x00\x00_\x18")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "青山学院大学"),
            s(:str, "\x00\x00\x97R\x00\x00\\q\x00\x00[f\x00\x00\x96b\x00\x00Y'\x00\x00[f")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "Martin Dürst"),
            s(:str, "\x00\x00\x00M\x00\x00\x00a\x00\x00\x00r\x00\x00\x00t\x00\x00\x00i\x00\x00\x00n\x00\x00\x00 \x00\x00\x00D\x00\x00\x00\xFC\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "\x00"),
            s(:str, "\x00\x00\x00\x00")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "\x7F"),
            s(:str, "\x00\x00\x00\x7F")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "\u0080"),
            s(:str, "\x00\x00\x00\x80")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "Օ"),
            s(:str, "\x00\x00\x05U")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "Ҫ"),
            s(:str, "\x00\x00\x04\xAA")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "̳"),
            s(:str, "\x00\x00\x033")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "ӌ"),
            s(:str, "\x00\x00\x04\xCC")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "ð"),
            s(:str, "\x00\x00\x00\xF0")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "܏"),
            s(:str, "\x00\x00\a\x0F")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "\u07FF"),
            s(:str, "\x00\x00\a\xFF")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "ࠀ"),
            s(:str, "\x00\x00\b\x00")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "\uD7FF"),
            s(:str, "\x00\x00\xD7\xFF")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, ""),
            s(:str, "\x00\x00\xE0\x00")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "\uFFFF"),
            s(:str, "\x00\x00\xFF\xFF")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "啕"),
            s(:str, "\x00\x00UU")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "ꪪ"),
            s(:str, "\x00\x00\xAA\xAA")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "㌳"),
            s(:str, "\x00\x0033")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "쳌"),
            s(:str, "\x00\x00\xCC\xCC")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, ""),
            s(:str, "\x00\x00\xF0\xF0")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "༏"),
            s(:str, "\x00\x00\x0F\x0F")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "\uFF00"),
            s(:str, "\x00\x00\xFF\x00")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "ÿ"),
            s(:str, "\x00\x00\x00\xFF")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "𐀀"),
            s(:str, "\x00\x01\x00\x00")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "\u{FFFFF}"),
            s(:str, "\x00\x0F\xFF\xFF")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "􀀀"),
            s(:str, "\x00\x10\x00\x00")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "\u{10FFFF}"),
            s(:str, "\x00\x10\xFF\xFF")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "􅕕"),
            s(:str, "\x00\x10UU")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "\u{55555}"),
            s(:str, "\x00\x05UU")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "\u{AAAAA}"),
            s(:str, "\x00\n\xAA\xAA")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "\u{33333}"),
            s(:str, "\x00\x0333")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "\u{CCCCC}"),
            s(:str, "\x00\f\xCC\xCC")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "\u{8F0F0}"),
            s(:str, "\x00\b\xF0\xF0")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "󰼏"),
            s(:str, "\x00\x0F\x0F\x0F")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "\u{8FF00}"),
            s(:str, "\x00\b\xFF\x00")),
          s(:send, nil, :check_utf_32_both_ways,
            s(:str, "󰃿"),
            s(:str, "\x00\x0F\x00\xFF")))),
      s(:def, :test_invalid_ignore,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:str, "abc"), :encode,
              s(:str, "utf-8"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace)),
                s(:pair,
                  s(:sym, :replace),
                  s(:str, ""))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\x00A\x00>\x00B"), :force_encoding,
              s(:str, "UTF-16BE")),
            s(:send,
              s(:str, "A\xC2>B"), :encode,
              s(:str, "UTF-16BE"),
              s(:str, "UTF-8"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace)),
                s(:pair,
                  s(:sym, :replace),
                  s(:str, ""))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\x00A\x00\xF1\x00B"), :force_encoding,
              s(:str, "UTF-16BE")),
            s(:send,
              s(:str, "A\xC2\xC3\xB1B"), :encode,
              s(:str, "UTF-16BE"),
              s(:str, "UTF-8"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace)),
                s(:pair,
                  s(:sym, :replace),
                  s(:str, ""))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\x00B"), :force_encoding,
              s(:str, "UTF-16BE")),
            s(:send,
              s(:str, "\xF0\x80\x80B"), :encode,
              s(:str, "UTF-16BE"),
              s(:str, "UTF-8"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace)),
                s(:pair,
                  s(:sym, :replace),
                  s(:str, ""))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, ""), :force_encoding,
              s(:str, "UTF-16BE")),
            s(:send,
              s(:str, "\x82\xAB"), :encode,
              s(:str, "UTF-16BE"),
              s(:str, "UTF-8"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace)),
                s(:pair,
                  s(:sym, :replace),
                  s(:str, ""))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\e$B!!\e(B"), :force_encoding,
              s(:str, "ISO-2022-JP")),
            s(:send,
              s(:str, "\xA1\xA1\xFF"), :encode,
              s(:str, "ISO-2022-JP"),
              s(:str, "EUC-JP"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace)),
                s(:pair,
                  s(:sym, :replace),
                  s(:str, ""))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\e$B$\"$$\e(B"), :force_encoding,
              s(:str, "ISO-2022-JP")),
            s(:send,
              s(:str, "\xA4\xA2\xFF\xA4\xA4"), :encode,
              s(:str, "ISO-2022-JP"),
              s(:str, "EUC-JP"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace)),
                s(:pair,
                  s(:sym, :replace),
                  s(:str, ""))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\e$B$\"$$\e(B"), :force_encoding,
              s(:str, "ISO-2022-JP")),
            s(:send,
              s(:str, "\xA4\xA2\xFF\xFF\xA4\xA4"), :encode,
              s(:str, "ISO-2022-JP"),
              s(:str, "EUC-JP"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace)),
                s(:pair,
                  s(:sym, :replace),
                  s(:str, ""))))))),
      s(:def, :test_invalid_replace,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:str, "abc"), :encode,
              s(:str, "UTF-8"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\xEF\xBF\xBD"), :force_encoding,
              s(:str, "UTF-8")),
            s(:send,
              s(:str, "\x80"), :encode,
              s(:str, "UTF-8"),
              s(:str, "UTF-16BE"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\xFF\xFD"), :force_encoding,
              s(:str, "UTF-16BE")),
            s(:send,
              s(:str, "\x80"), :encode,
              s(:str, "UTF-16BE"),
              s(:str, "UTF-8"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\xFD\xFF"), :force_encoding,
              s(:str, "UTF-16LE")),
            s(:send,
              s(:str, "\x80"), :encode,
              s(:str, "UTF-16LE"),
              s(:str, "UTF-8"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\x00\x00\xFF\xFD"), :force_encoding,
              s(:str, "UTF-32BE")),
            s(:send,
              s(:str, "\x80"), :encode,
              s(:str, "UTF-32BE"),
              s(:str, "UTF-8"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\xFD\xFF\x00\x00"), :force_encoding,
              s(:str, "UTF-32LE")),
            s(:send,
              s(:str, "\x80"), :encode,
              s(:str, "UTF-32LE"),
              s(:str, "UTF-8"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:str, "�!"),
            s(:send,
              s(:str, "\xDC\x00\x00!"), :encode,
              s(:str, "utf-8"),
              s(:str, "utf-16be"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:str, "�!"),
            s(:send,
              s(:str, "\xD8\x00\x00!"), :encode,
              s(:str, "utf-8"),
              s(:str, "utf-16be"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:str, "�!"),
            s(:send,
              s(:str, "\x00\xDC!\x00"), :encode,
              s(:str, "utf-8"),
              s(:str, "utf-16le"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:str, "�!"),
            s(:send,
              s(:str, "\x00\xD8!\x00"), :encode,
              s(:str, "utf-8"),
              s(:str, "utf-16le"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:str, "�!"),
            s(:send,
              s(:str, "\x01\x00\x00\x00\x00\x00\x00!"), :encode,
              s(:str, "utf-8"),
              s(:str, "utf-32be"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace)))),
            s(:str, "[ruby-dev:35726]")),
          s(:send, nil, :assert_equal,
            s(:str, "�!"),
            s(:send,
              s(:str, "\x00\xFF\x00\x00\x00\x00\x00!"), :encode,
              s(:str, "utf-8"),
              s(:str, "utf-32be"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:str, "�!"),
            s(:send,
              s(:str, "\x00\x00\xD8\x00\x00\x00\x00!"), :encode,
              s(:str, "utf-8"),
              s(:str, "utf-32be"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:str, "�!"),
            s(:send,
              s(:str, "\x00\x00\x00\xFF!\x00\x00\x00"), :encode,
              s(:str, "utf-8"),
              s(:str, "utf-32le"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:str, "�!"),
            s(:send,
              s(:str, "\x00\x00\xFF\x00!\x00\x00\x00"), :encode,
              s(:str, "utf-8"),
              s(:str, "utf-32le"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:str, "�!"),
            s(:send,
              s(:str, "\x00\xD8\x00\x00!\x00\x00\x00"), :encode,
              s(:str, "utf-8"),
              s(:str, "utf-32le"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:str, "�!"),
            s(:send,
              s(:str, "\xFF!"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:str, "�!"),
            s(:send,
              s(:str, "\xFF!"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jis-2004"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:str, "�!"),
            s(:send,
              s(:str, "\xA1!"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:str, "�!"),
            s(:send,
              s(:str, "\xA1!"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jis-2004"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:str, "�!"),
            s(:send,
              s(:str, "\x8F\xA1!"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:str, "�!"),
            s(:send,
              s(:str, "\x8F\xA1!"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jis-2004"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:str, "?"),
            s(:send,
              s(:str, "\xDC\x00"), :encode,
              s(:str, "EUC-JP"),
              s(:str, "UTF-16BE"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace)))),
            s(:str, "[ruby-dev:35776]")),
          s(:send, nil, :assert_equal,
            s(:str, "ab?cd?ef"),
            s(:send,
              s(:str, "\x00a\x00b\xDC\x00\x00c\x00d\xDF\x00\x00e\x00f"), :encode,
              s(:str, "EUC-JP"),
              s(:str, "UTF-16BE"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\e$B!!\e(B?"), :force_encoding,
              s(:str, "ISO-2022-JP")),
            s(:send,
              s(:str, "\xA1\xA1\xFF"), :encode,
              s(:str, "ISO-2022-JP"),
              s(:str, "EUC-JP"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\e$B$\"\e(B?\e$B$$\e(B"), :force_encoding,
              s(:str, "ISO-2022-JP")),
            s(:send,
              s(:str, "\xA4\xA2\xFF\xA4\xA4"), :encode,
              s(:str, "ISO-2022-JP"),
              s(:str, "EUC-JP"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\e$B$\"\e(B??\e$B$$\e(B"), :force_encoding,
              s(:str, "ISO-2022-JP")),
            s(:send,
              s(:str, "\xA4\xA2\xFF\xFF\xA4\xA4"), :encode,
              s(:str, "ISO-2022-JP"),
              s(:str, "EUC-JP"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))))),
      s(:def, :test_invalid_replace_string,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "a<x>A"),
            s(:send,
              s(:str, "a\x80A"), :encode,
              s(:str, "us-ascii"),
              s(:str, "euc-jp"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace)),
                s(:pair,
                  s(:sym, :replace),
                  s(:str, "<x>"))))),
          s(:send, nil, :assert_equal,
            s(:str, "a<x>A"),
            s(:send,
              s(:str, "a\x80A"), :encode,
              s(:str, "us-ascii"),
              s(:str, "euc-jis-2004"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace)),
                s(:pair,
                  s(:sym, :replace),
                  s(:str, "<x>"))))),
          s(:lvasgn, :s,
            s(:str, "abcdÁ")),
          s(:lvasgn, :r,
            s(:send,
              s(:send,
                s(:lvar, :s), :b), :encode,
              s(:str, "UTF-8"),
              s(:str, "UTF-8"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace)),
                s(:pair,
                  s(:sym, :replace),
                  s(:str, "�"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :s),
            s(:lvar, :r)))),
      s(:def, :test_undef_replace,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "?"),
          s(:send,
            s(:str, "€"), :encode,
            s(:str, "EUC-JP"),
            s(:hash,
              s(:pair,
                s(:sym, :undef),
                s(:sym, :replace)))),
          s(:str, "[ruby-dev:35709]"))),
      s(:def, :test_undef_replace_string,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "a<x>A"),
          s(:send,
            s(:str, "aあA"), :encode,
            s(:str, "us-ascii"),
            s(:hash,
              s(:pair,
                s(:sym, :undef),
                s(:sym, :replace)),
              s(:pair,
                s(:sym, :replace),
                s(:str, "<x>")))))),
      s(:def, :test_shift_jis,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "　"),
            s(:str, "\x81@"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "×"),
            s(:str, "\x81~"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "÷"),
            s(:str, "\x81\x80"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "◇"),
            s(:str, "\x81\x9E"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "◆"),
            s(:str, "\x81\x9F"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "◯"),
            s(:str, "\x81\xFC"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "檗"),
            s(:str, "\x9F@"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "毯"),
            s(:str, "\x9F~"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "麾"),
            s(:str, "\x9F\x80"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "沾"),
            s(:str, "\x9F\x9E"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "沺"),
            s(:str, "\x9F\x9F"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "滌"),
            s(:str, "\x9F\xFC"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "漾"),
            s(:str, "\xE0@"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "烝"),
            s(:str, "\xE0~"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "烙"),
            s(:str, "\xE0\x80"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "燼"),
            s(:str, "\xE0\x9E"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "燹"),
            s(:str, "\xE0\x9F"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "珱"),
            s(:str, "\xE0\xFC"),
            s(:str, "shift_jis")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xEF@"), :encode,
              s(:str, "utf-8"),
              s(:str, "shift_jis"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xEF~"), :encode,
              s(:str, "utf-8"),
              s(:str, "shift_jis"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xEF\x80"), :encode,
              s(:str, "utf-8"),
              s(:str, "shift_jis"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xEF\x9E"), :encode,
              s(:str, "utf-8"),
              s(:str, "shift_jis"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xEF\x9F"), :encode,
              s(:str, "utf-8"),
              s(:str, "shift_jis"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xEF\xFC"), :encode,
              s(:str, "utf-8"),
              s(:str, "shift_jis"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xF0@"), :encode,
              s(:str, "utf-8"),
              s(:str, "shift_jis"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xF0~"), :encode,
              s(:str, "utf-8"),
              s(:str, "shift_jis"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xF0\x80"), :encode,
              s(:str, "utf-8"),
              s(:str, "shift_jis"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xF0\x9E"), :encode,
              s(:str, "utf-8"),
              s(:str, "shift_jis"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xF0\x9F"), :encode,
              s(:str, "utf-8"),
              s(:str, "shift_jis"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xF0\xFC"), :encode,
              s(:str, "utf-8"),
              s(:str, "shift_jis"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xFC~"), :encode,
              s(:str, "utf-8"),
              s(:str, "shift_jis"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xFC\x80"), :encode,
              s(:str, "utf-8"),
              s(:str, "shift_jis"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xFC\x9E"), :encode,
              s(:str, "utf-8"),
              s(:str, "shift_jis"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xFC\x9F"), :encode,
              s(:str, "utf-8"),
              s(:str, "shift_jis"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xFC\xFC"), :encode,
              s(:str, "utf-8"),
              s(:str, "shift_jis"))),
          s(:send, nil, :check_both_ways,
            s(:str, "松本行弘"),
            s(:str, "\x8F\xBC\x96{\x8Ds\x8DO"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "青山学院大学"),
            s(:str, "\x90\xC2\x8ER\x8Aw\x89@\x91\xE5\x8Aw"),
            s(:str, "shift_jis")),
          s(:send, nil, :check_both_ways,
            s(:str, "神林義博"),
            s(:str, "\x90_\x97\xD1\x8B`\x94\x8E"),
            s(:str, "shift_jis")))),
      s(:def, :test_windows_31j,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "∪"),
            s(:str, "\x81\xBE"),
            s(:str, "Windows-31J")),
          s(:send, nil, :check_both_ways,
            s(:str, "￢"),
            s(:str, "\x81\xCA"),
            s(:str, "Windows-31J")),
          s(:send, nil, :check_both_ways,
            s(:str, "∵"),
            s(:str, "\x81\xE6"),
            s(:str, "Windows-31J")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ⅰ"),
            s(:str, "\x87T"),
            s(:str, "Windows-31J")),
          s(:send, nil, :check_both_ways,
            s(:str, "ⅰ"),
            s(:str, "\xFA@"),
            s(:str, "Windows-31J")))),
      s(:def, :test_euc_jp,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "　"),
            s(:str, "\xA1\xA1"),
            s(:str, "euc-jp")),
          s(:send, nil, :check_both_ways,
            s(:str, "×"),
            s(:str, "\xA1\xDF"),
            s(:str, "euc-jp")),
          s(:send, nil, :check_both_ways,
            s(:str, "÷"),
            s(:str, "\xA1\xE0"),
            s(:str, "euc-jp")),
          s(:send, nil, :check_both_ways,
            s(:str, "◇"),
            s(:str, "\xA1\xFE"),
            s(:str, "euc-jp")),
          s(:send, nil, :check_both_ways,
            s(:str, "◆"),
            s(:str, "\xA2\xA1"),
            s(:str, "euc-jp")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA2\xAF"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA2\xB9"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA2\xC2"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA2\xC9"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA2\xD1"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA2\xDB"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA2\xEB"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA2\xF1"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA2\xFA"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA2\xFD"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:send, nil, :check_both_ways,
            s(:str, "◯"),
            s(:str, "\xA2\xFE"),
            s(:str, "euc-jp")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA3\xAF"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA3\xBA"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA3\xC0"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA3\xDB"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA3\xE0"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA3\xFB"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA4\xF4"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA5\xF7"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA6\xB9"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA6\xC0"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA6\xD9"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA7\xC2"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA7\xD0"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA7\xF2"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA8\xC1"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xCF\xD4"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xCF\xFE"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:send, nil, :check_both_ways,
            s(:str, "檗"),
            s(:str, "\xDD\xA1"),
            s(:str, "euc-jp")),
          s(:send, nil, :check_both_ways,
            s(:str, "毯"),
            s(:str, "\xDD\xDF"),
            s(:str, "euc-jp")),
          s(:send, nil, :check_both_ways,
            s(:str, "麾"),
            s(:str, "\xDD\xE0"),
            s(:str, "euc-jp")),
          s(:send, nil, :check_both_ways,
            s(:str, "沾"),
            s(:str, "\xDD\xFE"),
            s(:str, "euc-jp")),
          s(:send, nil, :check_both_ways,
            s(:str, "沺"),
            s(:str, "\xDE\xA1"),
            s(:str, "euc-jp")),
          s(:send, nil, :check_both_ways,
            s(:str, "滌"),
            s(:str, "\xDE\xFE"),
            s(:str, "euc-jp")),
          s(:send, nil, :check_both_ways,
            s(:str, "漾"),
            s(:str, "\xDF\xA1"),
            s(:str, "euc-jp")),
          s(:send, nil, :check_both_ways,
            s(:str, "烝"),
            s(:str, "\xDF\xDF"),
            s(:str, "euc-jp")),
          s(:send, nil, :check_both_ways,
            s(:str, "烙"),
            s(:str, "\xDF\xE0"),
            s(:str, "euc-jp")),
          s(:send, nil, :check_both_ways,
            s(:str, "燼"),
            s(:str, "\xDF\xFE"),
            s(:str, "euc-jp")),
          s(:send, nil, :check_both_ways,
            s(:str, "燹"),
            s(:str, "\xE0\xA1"),
            s(:str, "euc-jp")),
          s(:send, nil, :check_both_ways,
            s(:str, "珱"),
            s(:str, "\xE0\xFE"),
            s(:str, "euc-jp")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xF4\xA7"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jp"))),
          s(:send, nil, :check_both_ways,
            s(:str, "松本行弘"),
            s(:str, "\xBE\xBE\xCB\xDC\xB9\xD4\xB9\xB0"),
            s(:str, "euc-jp")),
          s(:send, nil, :check_both_ways,
            s(:str, "青山学院大学"),
            s(:str, "\xC0\xC4\xBB\xB3\xB3\xD8\xB1\xA1\xC2\xE7\xB3\xD8"),
            s(:str, "euc-jp")),
          s(:send, nil, :check_both_ways,
            s(:str, "神林義博"),
            s(:str, "\xBF\xC0\xCE\xD3\xB5\xC1\xC7\xEE"),
            s(:str, "euc-jp")))),
      s(:def, :test_euc_jis_2004,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "　"),
            s(:str, "\xA1\xA1"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "×"),
            s(:str, "\xA1\xDF"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "÷"),
            s(:str, "\xA1\xE0"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "◇"),
            s(:str, "\xA1\xFE"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "◆"),
            s(:str, "\xA2\xA1"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "＇"),
            s(:str, "\xA2\xAF"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "ゟ"),
            s(:str, "\xA2\xB9"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "⊄"),
            s(:str, "\xA2\xC2"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "⌆"),
            s(:str, "\xA2\xC9"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "⊕"),
            s(:str, "\xA2\xD1"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "〗"),
            s(:str, "\xA2\xDB"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "≢"),
            s(:str, "\xA2\xEB"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "↔"),
            s(:str, "\xA2\xF1"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "♮"),
            s(:str, "\xA2\xFA"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "♩"),
            s(:str, "\xA2\xFD"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "◯"),
            s(:str, "\xA2\xFE"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "⤵"),
            s(:str, "\xA3\xAF"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "⦿"),
            s(:str, "\xA3\xBA"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "•"),
            s(:str, "\xA3\xC0"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "∓"),
            s(:str, "\xA3\xDB"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "℧"),
            s(:str, "\xA3\xE0"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "゠"),
            s(:str, "\xA3\xFB"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "ｔ"),
            s(:str, "\xA3\xF4"),
            s(:str, "euc-jis-2004")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA5\xF7"), :encode,
              s(:str, "utf-8"),
              s(:str, "euc-jis-2004"))),
          s(:send, nil, :check_both_ways,
            s(:str, "♤"),
            s(:str, "\xA6\xB9"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "♣"),
            s(:str, "\xA6\xC0"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "ς"),
            s(:str, "\xA6\xD9"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "⎾"),
            s(:str, "\xA7\xC2"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "⏌"),
            s(:str, "\xA7\xD0"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "ヷ"),
            s(:str, "\xA7\xF2"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "㉑"),
            s(:str, "\xA8\xC1"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "𠮟"),
            s(:str, "\xCF\xD4"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "吞"),
            s(:str, "\xCF\xFE"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "檗"),
            s(:str, "\xDD\xA1"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "毯"),
            s(:str, "\xDD\xDF"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "麾"),
            s(:str, "\xDD\xE0"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "沾"),
            s(:str, "\xDD\xFE"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "沺"),
            s(:str, "\xDE\xA1"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "滌"),
            s(:str, "\xDE\xFE"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "漾"),
            s(:str, "\xDF\xA1"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "烝"),
            s(:str, "\xDF\xDF"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "烙"),
            s(:str, "\xDF\xE0"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "燼"),
            s(:str, "\xDF\xFE"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "燹"),
            s(:str, "\xE0\xA1"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "珱"),
            s(:str, "\xE0\xFE"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "噓"),
            s(:str, "\xF4\xA7"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "鷗"),
            s(:str, "\xFE\xE5"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "𠀋"),
            s(:str, "\xAE\xA2"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "𪚲"),
            s(:str, "\x8F\xFE\xF6"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "松本行弘"),
            s(:str, "\xBE\xBE\xCB\xDC\xB9\xD4\xB9\xB0"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "青山学院大学"),
            s(:str, "\xC0\xC4\xBB\xB3\xB3\xD8\xB1\xA1\xC2\xE7\xB3\xD8"),
            s(:str, "euc-jis-2004")),
          s(:send, nil, :check_both_ways,
            s(:str, "神林義博"),
            s(:str, "\xBF\xC0\xCE\xD3\xB5\xC1\xC7\xEE"),
            s(:str, "euc-jis-2004")))),
      s(:def, :test_eucjp_ms,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "№"),
            s(:str, "\xAD\xE2"),
            s(:str, "eucJP-ms")),
          s(:send, nil, :check_both_ways,
            s(:str, "√"),
            s(:str, "\xA2\xE5"),
            s(:str, "eucJP-ms")),
          s(:send, nil, :check_both_ways,
            s(:str, "㈱"),
            s(:str, "\xAD\xEA"),
            s(:str, "eucJP-ms")),
          s(:send, nil, :check_both_ways,
            s(:str, "～"),
            s(:str, "\xA1\xC1"),
            s(:str, "eucJP-ms")))),
      s(:def, :test_eucjp_sjis,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways2,
            s(:str, "\xA1\xA1"),
            s(:str, "EUC-JP"),
            s(:str, "\x81@"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xA1\xDF"),
            s(:str, "EUC-JP"),
            s(:str, "\x81~"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xA1\xE0"),
            s(:str, "EUC-JP"),
            s(:str, "\x81\x80"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xA1\xFE"),
            s(:str, "EUC-JP"),
            s(:str, "\x81\x9E"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xA2\xA1"),
            s(:str, "EUC-JP"),
            s(:str, "\x81\x9F"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xA2\xFE"),
            s(:str, "EUC-JP"),
            s(:str, "\x81\xFC"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xDD\xA1"),
            s(:str, "EUC-JP"),
            s(:str, "\x9F@"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xDD\xDF"),
            s(:str, "EUC-JP"),
            s(:str, "\x9F~"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xDD\xE0"),
            s(:str, "EUC-JP"),
            s(:str, "\x9F\x80"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xDD\xFE"),
            s(:str, "EUC-JP"),
            s(:str, "\x9F\x9E"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xDE\xA1"),
            s(:str, "EUC-JP"),
            s(:str, "\x9F\x9F"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xDE\xFE"),
            s(:str, "EUC-JP"),
            s(:str, "\x9F\xFC"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xDF\xA1"),
            s(:str, "EUC-JP"),
            s(:str, "\xE0@"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xDF\xDF"),
            s(:str, "EUC-JP"),
            s(:str, "\xE0~"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xDF\xE0"),
            s(:str, "EUC-JP"),
            s(:str, "\xE0\x80"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xDF\xFE"),
            s(:str, "EUC-JP"),
            s(:str, "\xE0\x9E"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xE0\xA1"),
            s(:str, "EUC-JP"),
            s(:str, "\xE0\x9F"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xE0\xFE"),
            s(:str, "EUC-JP"),
            s(:str, "\xE0\xFC"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xF4\xA1"),
            s(:str, "EUC-JP"),
            s(:str, "\xEA\x9F"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xF4\xA2"),
            s(:str, "EUC-JP"),
            s(:str, "\xEA\xA0"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xF4\xA3"),
            s(:str, "EUC-JP"),
            s(:str, "\xEA\xA1"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xF4\xA4"),
            s(:str, "EUC-JP"),
            s(:str, "\xEA\xA2"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xF4\xA5"),
            s(:str, "EUC-JP"),
            s(:str, "\xEA\xA3"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xF4\xA6"),
            s(:str, "EUC-JP"),
            s(:str, "\xEA\xA4"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\x8E\xA1"),
            s(:str, "EUC-JP"),
            s(:str, "\xA1"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\x8E\xDF"),
            s(:str, "EUC-JP"),
            s(:str, "\xDF"),
            s(:str, "Shift_JIS")))),
      s(:def, :test_eucjp_sjis_unassigned,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways2,
            s(:str, "\xFD\xA1"),
            s(:str, "EUC-JP"),
            s(:str, "\xEF@"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xFD\xA1"),
            s(:str, "EUC-JP"),
            s(:str, "\xEF@"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xFD\xDF"),
            s(:str, "EUC-JP"),
            s(:str, "\xEF~"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xFD\xE0"),
            s(:str, "EUC-JP"),
            s(:str, "\xEF\x80"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xFD\xFE"),
            s(:str, "EUC-JP"),
            s(:str, "\xEF\x9E"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xFE\xA1"),
            s(:str, "EUC-JP"),
            s(:str, "\xEF\x9F"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways2,
            s(:str, "\xFE\xFE"),
            s(:str, "EUC-JP"),
            s(:str, "\xEF\xFC"),
            s(:str, "Shift_JIS")))),
      s(:def, :test_eucjp_sjis_undef,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x8E\xE0"), :encode,
              s(:str, "Shift_JIS"),
              s(:str, "EUC-JP"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x8E\xFE"), :encode,
              s(:str, "Shift_JIS"),
              s(:str, "EUC-JP"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x8F\xA1\xA1"), :encode,
              s(:str, "Shift_JIS"),
              s(:str, "EUC-JP"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x8F\xA1\xFE"), :encode,
              s(:str, "Shift_JIS"),
              s(:str, "EUC-JP"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x8F\xFE\xA1"), :encode,
              s(:str, "Shift_JIS"),
              s(:str, "EUC-JP"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\x8F\xFE\xFE"), :encode,
              s(:str, "Shift_JIS"),
              s(:str, "EUC-JP"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xF0@"), :encode,
              s(:str, "EUC-JP"),
              s(:str, "Shift_JIS"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xF0~"), :encode,
              s(:str, "EUC-JP"),
              s(:str, "Shift_JIS"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xF0\x80"), :encode,
              s(:str, "EUC-JP"),
              s(:str, "Shift_JIS"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xF0\xFC"), :encode,
              s(:str, "EUC-JP"),
              s(:str, "Shift_JIS"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xFC@"), :encode,
              s(:str, "EUC-JP"),
              s(:str, "Shift_JIS"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xFC~"), :encode,
              s(:str, "EUC-JP"),
              s(:str, "Shift_JIS"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xFC\x80"), :encode,
              s(:str, "EUC-JP"),
              s(:str, "Shift_JIS"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xFC\xFC"), :encode,
              s(:str, "EUC-JP"),
              s(:str, "Shift_JIS"))))),
      s(:def, :test_iso_2022_jp,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :InvalidByteSequenceError)),
            s(:args),
            s(:send,
              s(:str, "\e(A"), :encode,
              s(:str, "utf-8"),
              s(:str, "iso-2022-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :InvalidByteSequenceError)),
            s(:args),
            s(:send,
              s(:str, "\e$(A"), :encode,
              s(:str, "utf-8"),
              s(:str, "iso-2022-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :InvalidByteSequenceError)),
            s(:args),
            s(:send,
              s(:str, "\e$C"), :encode,
              s(:str, "utf-8"),
              s(:str, "iso-2022-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :InvalidByteSequenceError)),
            s(:args),
            s(:send,
              s(:str, "\x0E"), :encode,
              s(:str, "utf-8"),
              s(:str, "iso-2022-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :InvalidByteSequenceError)),
            s(:args),
            s(:send,
              s(:str, "\x80"), :encode,
              s(:str, "utf-8"),
              s(:str, "iso-2022-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :InvalidByteSequenceError)),
            s(:args),
            s(:send,
              s(:str, "\e$(Dd!\e(B"), :encode,
              s(:str, "utf-8"),
              s(:str, "iso-2022-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "銙"), :encode,
              s(:str, "iso-2022-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "ｱｲｳｴｵ"), :encode,
              s(:str, "iso-2022-jp"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :InvalidByteSequenceError)),
            s(:args),
            s(:send,
              s(:str, "\e(I12345\e(B"), :encode,
              s(:str, "utf-8"),
              s(:str, "iso-2022-jp"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\xA1\xA1"), :force_encoding,
              s(:str, "euc-jp")),
            s(:send,
              s(:str, "\e$B!!\e(B"), :encode,
              s(:str, "EUC-JP"),
              s(:str, "ISO-2022-JP"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\e$B!!\e(B"), :force_encoding,
              s(:str, "ISO-2022-JP")),
            s(:send,
              s(:str, "\xA1\xA1"), :encode,
              s(:str, "ISO-2022-JP"),
              s(:str, "EUC-JP"))))),
      s(:def, :test_from_cp50221,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "!"),
            s(:send,
              s(:str, "\e(B!"), :encode,
              s(:str, "utf-8"),
              s(:str, "cp50221"))),
          s(:send, nil, :assert_equal,
            s(:str, "!"),
            s(:send,
              s(:str, "\e(J!"), :encode,
              s(:str, "utf-8"),
              s(:str, "cp50221"))),
          s(:send, nil, :assert_equal,
            s(:str, "ｱ"),
            s(:send,
              s(:str, "\xB1"), :encode,
              s(:str, "utf-8"),
              s(:str, "cp50221"))),
          s(:send, nil, :assert_equal,
            s(:str, "ｱ"),
            s(:send,
              s(:str, "\e(B\xB1"), :encode,
              s(:str, "utf-8"),
              s(:str, "cp50221"))),
          s(:send, nil, :assert_equal,
            s(:str, "ｱ"),
            s(:send,
              s(:str, "\e(J\xB1"), :encode,
              s(:str, "utf-8"),
              s(:str, "cp50221"))),
          s(:send, nil, :assert_equal,
            s(:str, "ｱ"),
            s(:send,
              s(:str, "\e(I\xB1"), :encode,
              s(:str, "utf-8"),
              s(:str, "cp50221"))),
          s(:send, nil, :assert_equal,
            s(:str, "ｱ"),
            s(:send,
              s(:str, "\e(I1"), :encode,
              s(:str, "utf-8"),
              s(:str, "cp50221"))),
          s(:send, nil, :assert_equal,
            s(:str, "ｱ"),
            s(:send,
              s(:str, "\x0E\xB1"), :encode,
              s(:str, "utf-8"),
              s(:str, "cp50221"))),
          s(:send, nil, :assert_equal,
            s(:str, "　"),
            s(:send,
              s(:str, "\e$@!!"), :encode,
              s(:str, "utf-8"),
              s(:str, "cp50221"))),
          s(:send, nil, :assert_equal,
            s(:str, "　"),
            s(:send,
              s(:str, "\e$B!!"), :encode,
              s(:str, "utf-8"),
              s(:str, "cp50221"))),
          s(:send, nil, :assert_equal,
            s(:str, "①"),
            s(:send,
              s(:str, "\e$B-!"), :encode,
              s(:str, "utf-8"),
              s(:str, "cp50221"))),
          s(:send, nil, :assert_equal,
            s(:str, "纊"),
            s(:send,
              s(:str, "\e$By!"), :encode,
              s(:str, "utf-8"),
              s(:str, "cp50221"))),
          s(:send, nil, :assert_equal,
            s(:str, "忞"),
            s(:send,
              s(:str, "\e$Bz!"), :encode,
              s(:str, "utf-8"),
              s(:str, "cp50221"))),
          s(:send, nil, :assert_equal,
            s(:str, "犾"),
            s(:send,
              s(:str, "\e$B{!"), :encode,
              s(:str, "utf-8"),
              s(:str, "cp50221"))),
          s(:send, nil, :assert_equal,
            s(:str, "釗"),
            s(:send,
              s(:str, "\e$B|!"), :encode,
              s(:str, "utf-8"),
              s(:str, "cp50221"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\xA1\xDF"), :force_encoding,
              s(:str, "sjis")),
            s(:send,
              s(:str, "\e(I!_\e(B"), :encode,
              s(:str, "sjis"),
              s(:str, "cp50220"))))),
      s(:def, :test_to_cp50221,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\e$B!#!,\e(B"), :force_encoding,
              s(:str, "cp50220")),
            s(:send,
              s(:str, "\xA1\xDF"), :encode,
              s(:str, "cp50220"),
              s(:str, "sjis"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\e$B%*!+%,%I%J!+%N!+%P%\\%^!+%Q%]%\"\e(B"), :force_encoding,
              s(:str, "cp50220")),
            s(:send,
              s(:str, "\xB5\xDE\xB6\xDE\xC4\xDE\xC5\xDE\xC9\xDE\xCA\xDE\xCE\xDE\xCF\xDE\xCA\xDF\xCE\xDF\xB1"), :encode,
              s(:str, "cp50220"),
              s(:str, "sjis"))))),
      s(:def, :test_iso_2022_jp_1,
        s(:args), nil),
      s(:def, :test_unicode_public_review_issue_121,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\x00a\xFF\xFD\xFF\xFD\xFF\xFD\x00b"), :force_encoding,
              s(:str, "UTF-16BE")),
            s(:send,
              s(:str, "a\xF1\x80\x80\xE1\x80\xC2b"), :encode,
              s(:str, "UTF-16BE"),
              s(:str, "UTF-8"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "a\x00\xFD\xFF\xFD\xFF\xFD\xFFb\x00"), :force_encoding,
              s(:str, "UTF-16LE")),
            s(:send,
              s(:str, "a\xF1\x80\x80\xE1\x80\xC2b"), :encode,
              s(:str, "UTF-16LE"),
              s(:str, "UTF-8"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\xFF\xFD\xFF\xFD\xFF\xFD\xFF\xFD"), :force_encoding,
              s(:str, "UTF-16BE")),
            s(:send,
              s(:str, "\xF0\x80\x80\x80"), :encode,
              s(:str, "UTF-16BE"),
              s(:str, "UTF-8"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "\xFD\xFF\xFD\xFF\xFD\xFF\xFD\xFF"), :force_encoding,
              s(:str, "UTF-16LE")),
            s(:send,
              s(:str, "\xF0\x80\x80\x80"), :encode,
              s(:str, "UTF-16LE"),
              s(:str, "UTF-8"),
              s(:hash,
                s(:pair,
                  s(:sym, :invalid),
                  s(:sym, :replace))))))),
      s(:def, :test_yen_sign,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "\\"),
            s(:str, "\\"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways,
            s(:str, "\\"),
            s(:str, "\\"),
            s(:str, "Windows-31J")),
          s(:send, nil, :check_both_ways,
            s(:str, "\\"),
            s(:str, "\\"),
            s(:str, "EUC-JP")),
          s(:send, nil, :check_both_ways,
            s(:str, "\\"),
            s(:str, "\\"),
            s(:str, "eucJP-ms")),
          s(:send, nil, :check_both_ways,
            s(:str, "\\"),
            s(:str, "\\"),
            s(:str, "CP51932")),
          s(:send, nil, :check_both_ways,
            s(:str, "\\"),
            s(:str, "\\"),
            s(:str, "ISO-2022-JP")),
          s(:send, nil, :assert_equal,
            s(:str, "\\"),
            s(:send,
              s(:str, "\e(B\\\e(B"), :encode,
              s(:str, "UTF-8"),
              s(:str, "ISO-2022-JP"))),
          s(:send, nil, :assert_equal,
            s(:str, "\\"),
            s(:send,
              s(:str, "\e(J\\\e(B"), :encode,
              s(:str, "UTF-8"),
              s(:str, "ISO-2022-JP"))),
          s(:send, nil, :assert_equal,
            s(:str, "\\"),
            s(:send,
              s(:str, "\\"), :encode,
              s(:str, "stateless-ISO-2022-JP"),
              s(:str, "ISO-2022-JP"))),
          s(:send, nil, :assert_equal,
            s(:str, "\\"),
            s(:send,
              s(:str, "\e(J\\\e(B"), :encode,
              s(:str, "stateless-ISO-2022-JP"),
              s(:str, "ISO-2022-JP"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "¥"), :encode,
              s(:str, "Shift_JIS"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "¥"), :encode,
              s(:str, "Windows-31J"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "¥"), :encode,
              s(:str, "EUC-JP"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "¥"), :encode,
              s(:str, "eucJP-ms"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "¥"), :encode,
              s(:str, "CP51932"))),
          s(:send, nil, :check_both_ways,
            s(:str, "＼"),
            s(:str, "\x81_"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways,
            s(:str, "＼"),
            s(:str, "\x81_"),
            s(:str, "Windows-31J")),
          s(:send, nil, :check_both_ways,
            s(:str, "＼"),
            s(:str, "\xA1\xC0"),
            s(:str, "EUC-JP")),
          s(:send, nil, :check_both_ways,
            s(:str, "＼"),
            s(:str, "\xA1\xC0"),
            s(:str, "eucJP-ms")),
          s(:send, nil, :check_both_ways,
            s(:str, "＼"),
            s(:str, "\xA1\xC0"),
            s(:str, "CP51932")))),
      s(:def, :test_tilde_overline,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "~"),
            s(:str, "~"),
            s(:str, "Shift_JIS")),
          s(:send, nil, :check_both_ways,
            s(:str, "~"),
            s(:str, "~"),
            s(:str, "Windows-31J")),
          s(:send, nil, :check_both_ways,
            s(:str, "~"),
            s(:str, "~"),
            s(:str, "EUC-JP")),
          s(:send, nil, :check_both_ways,
            s(:str, "~"),
            s(:str, "~"),
            s(:str, "eucJP-ms")),
          s(:send, nil, :check_both_ways,
            s(:str, "~"),
            s(:str, "~"),
            s(:str, "CP51932")),
          s(:send, nil, :check_both_ways,
            s(:str, "~"),
            s(:str, "~"),
            s(:str, "ISO-2022-JP")),
          s(:send, nil, :assert_equal,
            s(:str, "~"),
            s(:send,
              s(:str, "\e(B~\e(B"), :encode,
              s(:str, "UTF-8"),
              s(:str, "ISO-2022-JP"))),
          s(:send, nil, :assert_equal,
            s(:str, "~"),
            s(:send,
              s(:str, "\e(J~\e(B"), :encode,
              s(:str, "UTF-8"),
              s(:str, "ISO-2022-JP"))),
          s(:send, nil, :assert_equal,
            s(:str, "~"),
            s(:send,
              s(:str, "~"), :encode,
              s(:str, "stateless-ISO-2022-JP"),
              s(:str, "ISO-2022-JP"))),
          s(:send, nil, :assert_equal,
            s(:str, "~"),
            s(:send,
              s(:str, "\e(J~\e(B"), :encode,
              s(:str, "stateless-ISO-2022-JP"),
              s(:str, "ISO-2022-JP"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "‾"), :encode,
              s(:str, "Shift_JIS"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "‾"), :encode,
              s(:str, "Windows-31J"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "‾"), :encode,
              s(:str, "EUC-JP"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "‾"), :encode,
              s(:str, "eucJP-ms"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "‾"), :encode,
              s(:str, "CP51932"))))),
      s(:def, :test_gb2312,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "　"),
            s(:str, "\xA1\xA1"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "〓"),
            s(:str, "\xA1\xFE"),
            s(:str, "GB2312")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA2\xB0"), :encode,
              s(:str, "utf-8"),
              s(:str, "GB2312"))),
          s(:send, nil, :check_both_ways,
            s(:str, "⒈"),
            s(:str, "\xA2\xB1"),
            s(:str, "GB2312")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA2\xE4"), :encode,
              s(:str, "utf-8"),
              s(:str, "GB2312"))),
          s(:send, nil, :check_both_ways,
            s(:str, "㈠"),
            s(:str, "\xA2\xE5"),
            s(:str, "GB2312")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA2\xF0"), :encode,
              s(:str, "utf-8"),
              s(:str, "GB2312"))),
          s(:send, nil, :check_both_ways,
            s(:str, "Ⅰ"),
            s(:str, "\xA2\xF1"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "！"),
            s(:str, "\xA3\xA1"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "￣"),
            s(:str, "\xA3\xFE"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "ぁ"),
            s(:str, "\xA4\xA1"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "ァ"),
            s(:str, "\xA5\xA1"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "Α"),
            s(:str, "\xA6\xA1"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "α"),
            s(:str, "\xA6\xC1"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "А"),
            s(:str, "\xA7\xA1"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "а"),
            s(:str, "\xA7\xD1"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "ā"),
            s(:str, "\xA8\xA1"),
            s(:str, "GB2312")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA8\xC4"), :encode,
              s(:str, "utf-8"),
              s(:str, "GB2312"))),
          s(:send, nil, :check_both_ways,
            s(:str, "ㄅ"),
            s(:str, "\xA8\xC5"),
            s(:str, "GB2312")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA9\xA3"), :encode,
              s(:str, "utf-8"),
              s(:str, "GB2312"))),
          s(:send, nil, :check_both_ways,
            s(:str, "─"),
            s(:str, "\xA9\xA4"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "啊"),
            s(:str, "\xB0\xA1"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "剥"),
            s(:str, "\xB0\xFE"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "俊"),
            s(:str, "\xBF\xA1"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "傀"),
            s(:str, "\xBF\xFE"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "馈"),
            s(:str, "\xC0\xA1"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "俐"),
            s(:str, "\xC0\xFE"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "稀"),
            s(:str, "\xCF\xA1"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "晓"),
            s(:str, "\xCF\xFE"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "小"),
            s(:str, "\xD0\xA1"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "玄"),
            s(:str, "\xD0\xFE"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "住"),
            s(:str, "\xD7\xA1"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "座"),
            s(:str, "\xD7\xF9"),
            s(:str, "GB2312")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xD7\xFA"), :encode,
              s(:str, "utf-8"),
              s(:str, "GB2312"))),
          s(:send, nil, :check_both_ways,
            s(:str, "摺"),
            s(:str, "\xDF\xA1"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "唼"),
            s(:str, "\xDF\xFE"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "唷"),
            s(:str, "\xE0\xA1"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "帼"),
            s(:str, "\xE0\xFE"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "铩"),
            s(:str, "\xEF\xA1"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "稔"),
            s(:str, "\xEF\xFE"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "稹"),
            s(:str, "\xF0\xA1"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "瘙"),
            s(:str, "\xF0\xFE"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "鳌"),
            s(:str, "\xF7\xA1"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "齄"),
            s(:str, "\xF7\xFE"),
            s(:str, "GB2312")),
          s(:send, nil, :check_both_ways,
            s(:str, "青山学院大学"),
            s(:str, "\xC7\xE0\xC9\xBD\xD1\xA7\xD4\xBA\xB4\xF3\xD1\xA7"),
            s(:str, "GB2312")))),
      s(:def, :test_gbk,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "丂"),
            s(:str, "\x81@"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "亊"),
            s(:str, "\x81~"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "亐"),
            s(:str, "\x81\x80"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "侢"),
            s(:str, "\x81\xFE"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "廆"),
            s(:str, "\x8F@"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "弤"),
            s(:str, "\x8F~"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "弨"),
            s(:str, "\x8F\x80"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "怇"),
            s(:str, "\x8F\xFE"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "怈"),
            s(:str, "\x90@"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "悀"),
            s(:str, "\x90~"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "悁"),
            s(:str, "\x90\x80"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "慆"),
            s(:str, "\x90\xFE"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "烜"),
            s(:str, "\x9F@"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "焴"),
            s(:str, "\x9F~"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "焵"),
            s(:str, "\x9F\x80"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "燓"),
            s(:str, "\x9F\xFE"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "燖"),
            s(:str, "\xA0@"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "爚"),
            s(:str, "\xA0~"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "爛"),
            s(:str, "\xA0\x80"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "狛"),
            s(:str, "\xA0\xFE"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "　"),
            s(:str, "\xA1\xA1"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "、"),
            s(:str, "\xA1\xA2"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "〓"),
            s(:str, "\xA1\xFE"),
            s(:str, "GBK")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA2\xA0"), :encode,
              s(:str, "utf-8"),
              s(:str, "GBK"))),
          s(:send, nil, :check_both_ways,
            s(:str, "ⅰ"),
            s(:str, "\xA2\xA1"),
            s(:str, "GBK")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA2\xB0"), :encode,
              s(:str, "utf-8"),
              s(:str, "GBK"))),
          s(:send, nil, :check_both_ways,
            s(:str, "⒈"),
            s(:str, "\xA2\xB1"),
            s(:str, "GBK")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA2\xE4"), :encode,
              s(:str, "utf-8"),
              s(:str, "GBK"))),
          s(:send, nil, :check_both_ways,
            s(:str, "㈠"),
            s(:str, "\xA2\xE5"),
            s(:str, "GBK")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA2\xF0"), :encode,
              s(:str, "utf-8"),
              s(:str, "GBK"))),
          s(:send, nil, :check_both_ways,
            s(:str, "Ⅰ"),
            s(:str, "\xA2\xF1"),
            s(:str, "GBK")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA3\xA0"), :encode,
              s(:str, "utf-8"),
              s(:str, "GBK"))),
          s(:send, nil, :check_both_ways,
            s(:str, "！"),
            s(:str, "\xA3\xA1"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "￣"),
            s(:str, "\xA3\xFE"),
            s(:str, "GBK")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA4\xA0"), :encode,
              s(:str, "utf-8"),
              s(:str, "GBK"))),
          s(:send, nil, :check_both_ways,
            s(:str, "ぁ"),
            s(:str, "\xA4\xA1"),
            s(:str, "GBK")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA5\xA0"), :encode,
              s(:str, "utf-8"),
              s(:str, "GBK"))),
          s(:send, nil, :check_both_ways,
            s(:str, "ァ"),
            s(:str, "\xA5\xA1"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "Α"),
            s(:str, "\xA6\xA1"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "α"),
            s(:str, "\xA6\xC1"),
            s(:str, "GBK")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA6\xED"), :encode,
              s(:str, "utf-8"),
              s(:str, "GBK"))),
          s(:send, nil, :check_both_ways,
            s(:str, "︻"),
            s(:str, "\xA6\xEE"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "А"),
            s(:str, "\xA7\xA1"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "а"),
            s(:str, "\xA7\xD1"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "ˊ"),
            s(:str, "\xA8@"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "▇"),
            s(:str, "\xA8~"),
            s(:str, "GBK")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA8\x96"), :encode,
              s(:str, "utf-8"),
              s(:str, "GBK"))),
          s(:send, nil, :check_both_ways,
            s(:str, "ā"),
            s(:str, "\xA8\xA1"),
            s(:str, "GBK")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA8\xBC"), :encode,
              s(:str, "utf-8"),
              s(:str, "GBK"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA8\xBF"), :encode,
              s(:str, "utf-8"),
              s(:str, "GBK"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA8\xC4"), :encode,
              s(:str, "utf-8"),
              s(:str, "GBK"))),
          s(:send, nil, :check_both_ways,
            s(:str, "ㄅ"),
            s(:str, "\xA8\xC5"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "〡"),
            s(:str, "\xA9@"),
            s(:str, "GBK")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA9X"), :encode,
              s(:str, "utf-8"),
              s(:str, "GBK"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA9["), :encode,
              s(:str, "utf-8"),
              s(:str, "GBK"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA9]"), :encode,
              s(:str, "utf-8"),
              s(:str, "GBK"))),
          s(:send, nil, :check_both_ways,
            s(:str, "〇"),
            s(:str, "\xA9\x96"),
            s(:str, "GBK")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA9\xA3"), :encode,
              s(:str, "utf-8"),
              s(:str, "GBK"))),
          s(:send, nil, :check_both_ways,
            s(:str, "─"),
            s(:str, "\xA9\xA4"),
            s(:str, "GBK")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA9\xF0"), :encode,
              s(:str, "utf-8"),
              s(:str, "GBK"))),
          s(:send, nil, :check_both_ways,
            s(:str, "疈"),
            s(:str, "\xAF@"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "瘇"),
            s(:str, "\xAF~"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "瘈"),
            s(:str, "\xAF\x80"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "癄"),
            s(:str, "\xAF\xA0"),
            s(:str, "GBK")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xAF\xA1"), :encode,
              s(:str, "utf-8"),
              s(:str, "GBK"))),
          s(:send, nil, :check_both_ways,
            s(:str, "癅"),
            s(:str, "\xB0@"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "皛"),
            s(:str, "\xB0~"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "皜"),
            s(:str, "\xB0\x80"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "剥"),
            s(:str, "\xB0\xFE"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "緻"),
            s(:str, "\xBF@"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "縹"),
            s(:str, "\xBF~"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "縺"),
            s(:str, "\xBF\x80"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "傀"),
            s(:str, "\xBF\xFE"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "繞"),
            s(:str, "\xC0@"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "纞"),
            s(:str, "\xC0~"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "纮"),
            s(:str, "\xC0\x80"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "俐"),
            s(:str, "\xC0\xFE"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "螥"),
            s(:str, "\xCF@"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "蟸"),
            s(:str, "\xCF~"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "蟺"),
            s(:str, "\xCF\x80"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "晓"),
            s(:str, "\xCF\xFE"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "蠤"),
            s(:str, "\xD0@"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "衺"),
            s(:str, "\xD0~"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "衻"),
            s(:str, "\xD0\x80"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "玄"),
            s(:str, "\xD0\xFE"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "這"),
            s(:str, "\xDF@"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "邁"),
            s(:str, "\xDF~"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "還"),
            s(:str, "\xDF\x80"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "唼"),
            s(:str, "\xDF\xFE"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "郂"),
            s(:str, "\xE0@"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "鄜"),
            s(:str, "\xE0~"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "鄝"),
            s(:str, "\xE0\x80"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "帼"),
            s(:str, "\xE0\xFE"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "顯"),
            s(:str, "\xEF@"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "飤"),
            s(:str, "\xEF~"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "飥"),
            s(:str, "\xEF\x80"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "稔"),
            s(:str, "\xEF\xFE"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "餈"),
            s(:str, "\xF0@"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "饉"),
            s(:str, "\xF0~"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "饊"),
            s(:str, "\xF0\x80"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "瘙"),
            s(:str, "\xF0\xFE"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "鼲"),
            s(:str, "\xFD@"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "齸"),
            s(:str, "\xFD~"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "齹"),
            s(:str, "\xFD\x80"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "隣"),
            s(:str, "\xFD\xA0"),
            s(:str, "GBK")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xFD\xA1"), :encode,
              s(:str, "utf-8"),
              s(:str, "GBK"))),
          s(:send, nil, :check_both_ways,
            s(:str, "兀"),
            s(:str, "\xFE@"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "﨩"),
            s(:str, "\xFEO"),
            s(:str, "GBK")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xFEP"), :encode,
              s(:str, "utf-8"),
              s(:str, "GBK"))),
          s(:send, nil, :check_both_ways,
            s(:str, "青山学院大学"),
            s(:str, "\xC7\xE0\xC9\xBD\xD1\xA7\xD4\xBA\xB4\xF3\xD1\xA7"),
            s(:str, "GBK")),
          s(:send, nil, :check_both_ways,
            s(:str, "神林義博"),
            s(:str, "\xC9\xF1\xC1\xD6\xC1x\xB2\xA9"),
            s(:str, "GBK")))),
      s(:def, :test_gb18030,
        s(:args),
        s(:begin,
          s(:lvasgn, :all_unicode,
            s(:send,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 0),
                    s(:int, 55295))), :to_a), :pack,
              s(:str, "U*"))),
          s(:send,
            s(:lvar, :all_unicode), :<<,
            s(:send,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 57344),
                    s(:int, 65535))), :to_a), :pack,
              s(:str, "U*"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :all_unicode),
            s(:send,
              s(:send,
                s(:lvar, :all_unicode), :encode,
                s(:str, "gb18030")), :encode,
              s(:str, "UTF-8"))),
          s(:send, nil, :check_both_ways,
            s(:str, "丂"),
            s(:str, "\x81@"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "亊"),
            s(:str, "\x81~"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "亐"),
            s(:str, "\x81\x80"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "侢"),
            s(:str, "\x81\xFE"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "廆"),
            s(:str, "\x8F@"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "弤"),
            s(:str, "\x8F~"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "弨"),
            s(:str, "\x8F\x80"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "怇"),
            s(:str, "\x8F\xFE"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "怈"),
            s(:str, "\x90@"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "悀"),
            s(:str, "\x90~"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "悁"),
            s(:str, "\x90\x80"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "慆"),
            s(:str, "\x90\xFE"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "烜"),
            s(:str, "\x9F@"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "焴"),
            s(:str, "\x9F~"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "焵"),
            s(:str, "\x9F\x80"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "燓"),
            s(:str, "\x9F\xFE"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "燖"),
            s(:str, "\xA0@"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "爚"),
            s(:str, "\xA0~"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "爛"),
            s(:str, "\xA0\x80"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "狛"),
            s(:str, "\xA0\xFE"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "　"),
            s(:str, "\xA1\xA1"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "、"),
            s(:str, "\xA1\xA2"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "〓"),
            s(:str, "\xA1\xFE"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "ⅰ"),
            s(:str, "\xA2\xA1"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "⒈"),
            s(:str, "\xA2\xB1"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "㈠"),
            s(:str, "\xA2\xE5"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "Ⅰ"),
            s(:str, "\xA2\xF1"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "！"),
            s(:str, "\xA3\xA1"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "￣"),
            s(:str, "\xA3\xFE"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "ぁ"),
            s(:str, "\xA4\xA1"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "ァ"),
            s(:str, "\xA5\xA1"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "Α"),
            s(:str, "\xA6\xA1"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "α"),
            s(:str, "\xA6\xC1"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "︻"),
            s(:str, "\xA6\xEE"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "А"),
            s(:str, "\xA7\xA1"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "а"),
            s(:str, "\xA7\xD1"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "ˊ"),
            s(:str, "\xA8@"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "▇"),
            s(:str, "\xA8~"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "ā"),
            s(:str, "\xA8\xA1"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "ㄅ"),
            s(:str, "\xA8\xC5"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "〡"),
            s(:str, "\xA9@"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "〇"),
            s(:str, "\xA9\x96"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "─"),
            s(:str, "\xA9\xA4"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "疈"),
            s(:str, "\xAF@"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "瘇"),
            s(:str, "\xAF~"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "瘈"),
            s(:str, "\xAF\x80"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "癄"),
            s(:str, "\xAF\xA0"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "癅"),
            s(:str, "\xB0@"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "皛"),
            s(:str, "\xB0~"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "皜"),
            s(:str, "\xB0\x80"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "剥"),
            s(:str, "\xB0\xFE"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "緻"),
            s(:str, "\xBF@"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "縹"),
            s(:str, "\xBF~"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "縺"),
            s(:str, "\xBF\x80"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "傀"),
            s(:str, "\xBF\xFE"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "繞"),
            s(:str, "\xC0@"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "纞"),
            s(:str, "\xC0~"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "纮"),
            s(:str, "\xC0\x80"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "俐"),
            s(:str, "\xC0\xFE"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "螥"),
            s(:str, "\xCF@"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "蟸"),
            s(:str, "\xCF~"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "蟺"),
            s(:str, "\xCF\x80"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "晓"),
            s(:str, "\xCF\xFE"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "蠤"),
            s(:str, "\xD0@"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "衺"),
            s(:str, "\xD0~"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "衻"),
            s(:str, "\xD0\x80"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "玄"),
            s(:str, "\xD0\xFE"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "這"),
            s(:str, "\xDF@"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "邁"),
            s(:str, "\xDF~"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "還"),
            s(:str, "\xDF\x80"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "唼"),
            s(:str, "\xDF\xFE"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "郂"),
            s(:str, "\xE0@"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "鄜"),
            s(:str, "\xE0~"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "鄝"),
            s(:str, "\xE0\x80"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "帼"),
            s(:str, "\xE0\xFE"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "顯"),
            s(:str, "\xEF@"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "飤"),
            s(:str, "\xEF~"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "飥"),
            s(:str, "\xEF\x80"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "稔"),
            s(:str, "\xEF\xFE"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "餈"),
            s(:str, "\xF0@"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "饉"),
            s(:str, "\xF0~"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "饊"),
            s(:str, "\xF0\x80"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "瘙"),
            s(:str, "\xF0\xFE"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "鼲"),
            s(:str, "\xFD@"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "齸"),
            s(:str, "\xFD~"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "齹"),
            s(:str, "\xFD\x80"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "隣"),
            s(:str, "\xFD\xA0"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "兀"),
            s(:str, "\xFE@"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "﨩"),
            s(:str, "\xFEO"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "青山学院大学"),
            s(:str, "\xC7\xE0\xC9\xBD\xD1\xA7\xD4\xBA\xB4\xF3\xD1\xA7"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "神林義博"),
            s(:str, "\xC9\xF1\xC1\xD6\xC1x\xB2\xA9"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "龦"),
            s(:str, "\x825\x8F3"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "\uD7FF"),
            s(:str, "\x836\xC78"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "ђ"),
            s(:str, "\x810\xD30"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "‏"),
            s(:str, "\x816\xA51"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, ""),
            s(:str, "\x836\xD00"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "狼"),
            s(:str, "\x840\x854"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "♃"),
            s(:str, "\x817\xA89"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "⺀"),
            s(:str, "\x818\xFD8"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "飯"),
            s(:str, "\x840\x9C8"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "︯"),
            s(:str, "\x841\x857"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "㳡"),
            s(:str, "\x821\xD48"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "䁕"),
            s(:str, "\x822\xAF2"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "㘛"),
            s(:str, "\x820\xA63"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "㤗"),
            s(:str, "\x820\xF27"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "䦸"),
            s(:str, "\x824\xA11"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "䱶"),
            s(:str, "\x824\xE73"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "䅠"),
            s(:str, "\x822\xC97"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "䌶"),
            s(:str, "\x822\xF87"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "䞎"),
            s(:str, "\x823\xE88"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "䥆"),
            s(:str, "\x824\x968"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "䓗"),
            s(:str, "\x823\xA39"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "䙋"),
            s(:str, "\x823\xC91"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "￦"),
            s(:str, "\x841\xA24"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "\uFFFF"),
            s(:str, "\x841\xA49"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "𐀀"),
            s(:str, "\x900\x810"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "\u{10FFFE}"),
            s(:str, "\xE32\x9A4"),
            s(:str, "GB18030")),
          s(:send, nil, :check_both_ways,
            s(:str, "\u{10FFFF}"),
            s(:str, "\xE32\x9A5"),
            s(:str, "GB18030")))),
      s(:def, :test_Big5,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "　"),
            s(:str, "\xA1@"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "﹚"),
            s(:str, "\xA1~"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "﹛"),
            s(:str, "\xA1\xA1"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "ｗ"),
            s(:str, "\xA3@"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "ㄏ"),
            s(:str, "\xA3~"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "ㄐ"),
            s(:str, "\xA3\xA1"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "ˋ"),
            s(:str, "\xA3\xBF"),
            s(:str, "Big5")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Encoding), :UndefinedConversionError)),
            s(:args),
            s(:send,
              s(:str, "\xA3\xC0"), :encode,
              s(:str, "utf-8"),
              s(:str, "Big5"))),
          s(:send, nil, :check_both_ways,
            s(:str, "浬"),
            s(:str, "\xAF@"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "砷"),
            s(:str, "\xAF~"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "砥"),
            s(:str, "\xAF\xA1"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "荃"),
            s(:str, "\xAF\xFE"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "虔"),
            s(:str, "\xB0@"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "陡"),
            s(:str, "\xB0~"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "陛"),
            s(:str, "\xB0\xA1"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "婀"),
            s(:str, "\xB0\xFE"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "濃"),
            s(:str, "\xBF@"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "縊"),
            s(:str, "\xBF~"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "縑"),
            s(:str, "\xBF\xA1"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "錚"),
            s(:str, "\xBF\xFE"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "錐"),
            s(:str, "\xC0@"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "嚇"),
            s(:str, "\xC0~"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "嚏"),
            s(:str, "\xC0\xA1"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "瞬"),
            s(:str, "\xC0\xFE"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "讖"),
            s(:str, "\xC6@"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "籲"),
            s(:str, "\xC6~"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "乂"),
            s(:str, "\xC9@"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "氕"),
            s(:str, "\xC9~"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "氶"),
            s(:str, "\xC9\xA1"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "汋"),
            s(:str, "\xC9\xFE"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "柜"),
            s(:str, "\xCF@"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "浂"),
            s(:str, "\xCF~"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "洁"),
            s(:str, "\xCF\xA1"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "窀"),
            s(:str, "\xCF\xFE"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "穾"),
            s(:str, "\xD0@"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "苪"),
            s(:str, "\xD0~"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "苤"),
            s(:str, "\xD0\xA1"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "哱"),
            s(:str, "\xD0\xFE"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "稛"),
            s(:str, "\xDF@"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "腯"),
            s(:str, "\xDF~"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "腄"),
            s(:str, "\xDF\xA1"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "觤"),
            s(:str, "\xDF\xFE"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "觡"),
            s(:str, "\xE0@"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "逿"),
            s(:str, "\xE0~"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "遄"),
            s(:str, "\xE0\xA1"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "僠"),
            s(:str, "\xE0\xFE"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "鞞"),
            s(:str, "\xEF@"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "鴰"),
            s(:str, "\xEF~"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "鵅"),
            s(:str, "\xEF\xA1"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "獶"),
            s(:str, "\xEF\xFE"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "璸"),
            s(:str, "\xF0@"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "臒"),
            s(:str, "\xF0~"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "臐"),
            s(:str, "\xF0\xA1"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "蹧"),
            s(:str, "\xF0\xFE"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "纘"),
            s(:str, "\xF9@"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "鼊"),
            s(:str, "\xF9~"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "龤"),
            s(:str, "\xF9\xA1"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "龘"),
            s(:str, "\xF9\xD5"),
            s(:str, "Big5")),
          s(:send, nil, :check_both_ways,
            s(:str, "神林義博"),
            s(:str, "\xAF\xAB\xAAL\xB8q\xB3\xD5"),
            s(:str, "Big5")))),
      s(:def, :test_Big5_Hkscs,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "　"),
            s(:str, "\xA1@"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "﹚"),
            s(:str, "\xA1~"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "﹛"),
            s(:str, "\xA1\xA1"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "ｗ"),
            s(:str, "\xA3@"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "ㄏ"),
            s(:str, "\xA3~"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "ㄐ"),
            s(:str, "\xA3\xA1"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "ˋ"),
            s(:str, "\xA3\xBF"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "浬"),
            s(:str, "\xAF@"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "砷"),
            s(:str, "\xAF~"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "砥"),
            s(:str, "\xAF\xA1"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "荃"),
            s(:str, "\xAF\xFE"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "虔"),
            s(:str, "\xB0@"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "陡"),
            s(:str, "\xB0~"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "陛"),
            s(:str, "\xB0\xA1"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "婀"),
            s(:str, "\xB0\xFE"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "濃"),
            s(:str, "\xBF@"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "縊"),
            s(:str, "\xBF~"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "縑"),
            s(:str, "\xBF\xA1"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "錚"),
            s(:str, "\xBF\xFE"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "錐"),
            s(:str, "\xC0@"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "嚇"),
            s(:str, "\xC0~"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "嚏"),
            s(:str, "\xC0\xA1"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "瞬"),
            s(:str, "\xC0\xFE"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "讖"),
            s(:str, "\xC6@"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "籲"),
            s(:str, "\xC6~"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "乂"),
            s(:str, "\xC9@"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "氕"),
            s(:str, "\xC9~"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "氶"),
            s(:str, "\xC9\xA1"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "汋"),
            s(:str, "\xC9\xFE"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "柜"),
            s(:str, "\xCF@"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "浂"),
            s(:str, "\xCF~"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "洁"),
            s(:str, "\xCF\xA1"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "窀"),
            s(:str, "\xCF\xFE"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "穾"),
            s(:str, "\xD0@"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "苪"),
            s(:str, "\xD0~"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "苤"),
            s(:str, "\xD0\xA1"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "哱"),
            s(:str, "\xD0\xFE"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "稛"),
            s(:str, "\xDF@"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "腯"),
            s(:str, "\xDF~"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "腄"),
            s(:str, "\xDF\xA1"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "觤"),
            s(:str, "\xDF\xFE"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "觡"),
            s(:str, "\xE0@"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "逿"),
            s(:str, "\xE0~"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "遄"),
            s(:str, "\xE0\xA1"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "僠"),
            s(:str, "\xE0\xFE"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "鞞"),
            s(:str, "\xEF@"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "鴰"),
            s(:str, "\xEF~"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "鵅"),
            s(:str, "\xEF\xA1"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "獶"),
            s(:str, "\xEF\xFE"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "璸"),
            s(:str, "\xF0@"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "臒"),
            s(:str, "\xF0~"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "臐"),
            s(:str, "\xF0\xA1"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "蹧"),
            s(:str, "\xF0\xFE"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "纘"),
            s(:str, "\xF9@"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "鼊"),
            s(:str, "\xF9~"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "龤"),
            s(:str, "\xF9\xA1"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "龘"),
            s(:str, "\xF9\xD5"),
            s(:str, "Big5-HKSCS")),
          s(:send, nil, :check_both_ways,
            s(:str, "神林義博"),
            s(:str, "\xAF\xAB\xAAL\xB8q\xB3\xD5"),
            s(:str, "Big5-HKSCS")))),
      s(:def, :test_Big5_UAO,
        s(:args),
        s(:send, nil, :check_both_ways,
          s(:str, "丗"),
          s(:str, "\x81@"),
          s(:str, "Big5-UAO"))),
      s(:def, :test_EBCDIC,
        s(:args),
        s(:begin,
          s(:send, nil, :check_both_ways,
            s(:str, "abcdeABCDE"),
            s(:str, "\x81\x82\x83\x84\x85\xC1\xC2\xC3\xC4\xC5"),
            s(:str, "IBM037")),
          s(:send, nil, :check_both_ways,
            s(:str, "aijrszAIJRSZ09"),
            s(:str, "\x81\x89\x91\x99\xA2\xA9\xC1\xC9\xD1\xD9\xE2\xE9\xF0\xF9"),
            s(:str, "IBM037")),
          s(:send, nil, :check_both_ways,
            s(:str, "Matz"),
            s(:str, "\xD4\x81\xA3\xA9"),
            s(:str, "IBM037")),
          s(:send, nil, :check_both_ways,
            s(:str, "Dürst"),
            s(:str, "\xC4\xDC\x99\xA2\xA3"),
            s(:str, "IBM037")))),
      s(:def, :test_nothing_changed,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:str, "James"), :force_encoding,
              s(:str, "US-ASCII"))),
          s(:lvasgn, :b,
            s(:send,
              s(:lvar, :a), :encode,
              s(:str, "Shift_JIS"))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :US_ASCII),
            s(:send,
              s(:lvar, :a), :encoding)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :Shift_JIS),
            s(:send,
              s(:lvar, :b), :encoding)))),
      s(:def, :test_utf8_mac,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "כֿ"),
            s(:send,
              s(:str, "כֿ"), :encode,
              s(:str, "UTF-8"),
              s(:str, "UTF8-MAC"))),
          s(:send, nil, :assert_equal,
            s(:str, "ῷ"),
            s(:send,
              s(:str, "ῷ"), :encode,
              s(:str, "UTF-8"),
              s(:str, "UTF8-MAC"))),
          s(:send, nil, :assert_equal,
            s(:str, "כֿ"),
            s(:send,
              s(:send,
                s(:str, "כֿ"), :encode,
                s(:str, "UTF8-MAC")), :force_encoding,
              s(:str, "UTF-8"))),
          s(:send, nil, :assert_equal,
            s(:str, "ῷ"),
            s(:send,
              s(:send,
                s(:str, "ῷ"), :encode,
                s(:str, "UTF8-MAC")), :force_encoding,
              s(:str, "UTF-8"))),
          s(:send, nil, :check_both_ways,
            s(:str, "étè"),
            s(:str, "étè"),
            s(:str, "UTF8-MAC")))),
      s(:def, :test_fallback,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "あ"), :encode,
              s(:str, "EUC-JP")),
            s(:send,
              s(:str, "𠀀"), :encode,
              s(:str, "EUC-JP"),
              s(:hash,
                s(:pair,
                  s(:sym, :fallback),
                  s(:hash,
                    s(:pair,
                      s(:str, "𠀀"),
                      s(:send,
                        s(:str, "あ"), :encode,
                        s(:str, "EUC-JP")))))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "あ"), :encode,
              s(:str, "EUC-JP")),
            s(:send,
              s(:str, "𠀀"), :encode,
              s(:str, "EUC-JP"),
              s(:hash,
                s(:pair,
                  s(:sym, :fallback),
                  s(:hash,
                    s(:pair,
                      s(:str, "𠀀"),
                      s(:str, "あ"))))))),
          s(:send, nil, :assert_equal,
            s(:str, "[ISU]"),
            s(:send,
              s(:str, "💺"), :encode,
              s(:str, "SJIS-KDDI"),
              s(:hash,
                s(:pair,
                  s(:sym, :fallback),
                  s(:hash,
                    s(:pair,
                      s(:str, "💺"),
                      s(:str, "[ISU]"))))))))),
      s(:def, :test_fallback_hash_default,
        s(:args),
        s(:begin,
          s(:lvasgn, :fallback,
            s(:block,
              s(:send,
                s(:const, nil, :Hash), :new),
              s(:args,
                s(:arg, :h),
                s(:arg, :x)),
              s(:send,
                s(:str, "U+%.4X"), :%,
                s(:send,
                  s(:lvar, :x), :unpack,
                  s(:str, "U"))))),
          s(:send, nil, :assert_equal,
            s(:str, "U+3042"),
            s(:send,
              s(:str, "あ"), :encode,
              s(:str, "US-ASCII"),
              s(:hash,
                s(:pair,
                  s(:sym, :fallback),
                  s(:lvar, :fallback))))))),
      s(:def, :test_fallback_proc,
        s(:args),
        s(:begin,
          s(:lvasgn, :fallback,
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:str, "U+%.4X"), :%,
                s(:send,
                  s(:lvar, :x), :unpack,
                  s(:str, "U"))))),
          s(:send, nil, :assert_equal,
            s(:str, "U+3042"),
            s(:send,
              s(:str, "あ"), :encode,
              s(:str, "US-ASCII"),
              s(:hash,
                s(:pair,
                  s(:sym, :fallback),
                  s(:lvar, :fallback))))))),
      s(:def, :test_fallback_method,
        s(:args),
        s(:begin,
          s(:defs,
            s(:lvasgn, :fallback,
              s(:str, "U+%.4X")), :escape,
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:self), :%,
              s(:send,
                s(:lvar, :x), :unpack,
                s(:str, "U")))),
          s(:send, nil, :assert_equal,
            s(:str, "U+3042"),
            s(:send,
              s(:str, "あ"), :encode,
              s(:str, "US-ASCII"),
              s(:hash,
                s(:pair,
                  s(:sym, :fallback),
                  s(:send,
                    s(:lvar, :fallback), :method,
                    s(:sym, :escape)))))))),
      s(:lvasgn, :bug8940,
        s(:str, "[ruby-core:57318] [Bug #8940]")),
      s(:block,
        s(:send,
          s(:array,
            s(:str, "UTF-32"),
            s(:str, "UTF-16")), :each),
        s(:args,
          s(:arg, :enc)),
        s(:block,
          s(:send, nil, :define_method,
            s(:dstr,
              s(:str, "test_pseudo_encoding_inspect("),
              s(:begin,
                s(:lvar, :enc)),
              s(:str, ")"))),
          s(:args),
          s(:begin,
            s(:send, nil, :assert_normal_exit,
              s(:dstr,
                s(:str, "'aaa'.encode('"),
                s(:begin,
                  s(:lvar, :enc)),
                s(:str, "').inspect")),
              s(:lvar, :bug8940)),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:send,
                s(:send,
                  s(:str, "aaa"), :encode,
                  s(:lvar, :enc)), :length),
              s(:dstr,
                s(:str, "should count in "),
                s(:begin,
                  s(:lvar, :enc)),
                s(:str, " with BOM")))))),
      s(:def, :test_encode_with_invalid_chars,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8995,
            s(:str, "[ruby-dev:47747]")),
          s(:block,
            s(:send,
              s(:const, nil, :EnvUtil), :with_default_internal,
              s(:const,
                s(:const, nil, :Encoding), :UTF_8)),
            s(:args),
            s(:begin,
              s(:lvasgn, :str,
                s(:send,
                  s(:str, "\xFF"), :force_encoding,
                  s(:str, "utf-8"))),
              s(:send, nil, :assert_equal,
                s(:lvar, :str),
                s(:send,
                  s(:lvar, :str), :encode),
                s(:lvar, :bug8995)),
              s(:send, nil, :assert_equal,
                s(:str, "�"),
                s(:send,
                  s(:lvar, :str), :encode,
                  s(:hash,
                    s(:pair,
                      s(:sym, :invalid),
                      s(:sym, :replace)))),
                s(:lvar, :bug8995)))))),
      s(:def, :test_valid_dummy_encoding,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9314,
            s(:str, "[ruby-core:59354] [Bug #9314]")),
          s(:send, nil, :assert_separately,
            s(:array,
              s(:str, "-"),
              s(:str, "--"),
              s(:dstr,
                s(:begin,
                  s(:lvar, :bug9314)))),
            s(:dstr,
              s(:str, "    bug = ARGV.shift\n"),
              s(:str, "    result = assert_nothing_raised(TypeError, bug) {break \"test\".encode(Encoding::UTF_16)}\n"),
              s(:str, "    assert_equal(\"\\xFE\\xFF\\x00t\\x00e\\x00s\\x00t\", result.b, bug)\n"),
              s(:str, "    result = assert_nothing_raised(TypeError, bug) {break \"test\".encode(Encoding::UTF_32)}\n"),
              s(:str, "    assert_equal(\"\\x00\\x00\\xFE\\xFF\\x00\\x00\\x00t\\x00\\x00\\x00e\\x00\\x00\\x00s\\x00\\x00\\x00t\", result.b, bug)\n"))))),
      s(:def, :test_loading_race,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array),
          s(:dstr,
            s(:str, "      bug11277 = '[ruby-dev:49106] [Bug #11277]'\n"),
            s(:str, "      num = 2\n"),
            s(:str, "      th = (0...num).map do |i|\n"),
            s(:str, "        Thread.new {\"\\u3042\".encode(\"EUC-JP\")}\n"),
            s(:str, "      end\n"),
            s(:str, "      result = nil\n"),
            s(:str, "      assert_warning(\"\", bug11277) do\n"),
            s(:str, "        assert_nothing_raised(Encoding::ConverterNotFoundError, bug11277) do\n"),
            s(:str, "          result = th.map(&:value)\n"),
            s(:str, "        end\n"),
            s(:str, "      end\n"),
            s(:str, "      expected = \"\\xa4\\xa2\".force_encoding(Encoding::EUC_JP)\n"),
            s(:str, "      assert_equal([expected]*num, result, bug11277)\n")))),
      s(:def, :test_universal_newline,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug11324,
            s(:str, "[ruby-core:69841] [Bug #11324]")),
          s(:lvasgn, :usascii,
            s(:const,
              s(:const, nil, :Encoding), :US_ASCII)),
          s(:lvasgn, :s,
            s(:send,
              s(:str, "A\nB\r\nC"), :force_encoding,
              s(:lvar, :usascii))),
          s(:send, nil, :assert_equal,
            s(:str, "A\nB\nC"),
            s(:send,
              s(:lvar, :s), :encode,
              s(:lvar, :usascii),
              s(:hash,
                s(:pair,
                  s(:sym, :universal_newline),
                  s(:true)))),
            s(:lvar, :bug11324)),
          s(:send, nil, :assert_equal,
            s(:str, "A\nB\nC"),
            s(:send,
              s(:lvar, :s), :encode,
              s(:lvar, :usascii),
              s(:hash,
                s(:pair,
                  s(:sym, :universal_newline),
                  s(:true)),
                s(:pair,
                  s(:sym, :undef),
                  s(:sym, :replace)))),
            s(:lvar, :bug11324)),
          s(:send, nil, :assert_equal,
            s(:str, "A\nB\nC"),
            s(:send,
              s(:lvar, :s), :encode,
              s(:lvar, :usascii),
              s(:hash,
                s(:pair,
                  s(:sym, :universal_newline),
                  s(:true)),
                s(:pair,
                  s(:sym, :undef),
                  s(:sym, :replace)),
                s(:pair,
                  s(:sym, :replace),
                  s(:str, "")))),
            s(:lvar, :bug11324)))))))
