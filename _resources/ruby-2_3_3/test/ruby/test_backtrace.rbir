s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:class,
    s(:const, nil, :TestBacktrace),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_exception,
        s(:args),
        s(:begin,
          s(:lvasgn, :bt,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Fiber), :new),
                s(:args),
                s(:kwbegin,
                  s(:rescue,
                    s(:send, nil, :raise),
                    s(:resbody, nil,
                      s(:lvasgn, :e),
                      s(:send,
                        s(:lvar, :e), :backtrace)), nil))), :resume)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :bt), :size)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, ".+:\\d+:.+"),
              s(:regopt)),
            s(:send,
              s(:lvar, :bt), :[],
              s(:int, 0))))),
      s(:def, :helper_test_exception_backtrace_locations,
        s(:args),
        s(:send, nil, :raise)),
      s(:def, :test_exception_backtrace_locations,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :backtrace),
              s(:lvasgn, :backtrace_locations)),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Fiber), :new),
                s(:args),
                s(:kwbegin,
                  s(:rescue,
                    s(:send, nil, :raise),
                    s(:resbody, nil,
                      s(:lvasgn, :e),
                      s(:array,
                        s(:send,
                          s(:lvar, :e), :backtrace),
                        s(:send,
                          s(:lvar, :e), :backtrace_locations))), nil))), :resume)),
          s(:send, nil, :assert_equal,
            s(:lvar, :backtrace),
            s(:block,
              s(:send,
                s(:lvar, :backtrace_locations), :map),
              s(:args,
                s(:arg, :e)),
              s(:send,
                s(:lvar, :e), :to_s))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :backtrace),
              s(:lvasgn, :backtrace_locations)),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Fiber), :new),
                s(:args),
                s(:kwbegin,
                  s(:rescue,
                    s(:kwbegin,
                      s(:rescue,
                        s(:send, nil, :helper_test_exception_backtrace_locations),
                        s(:resbody, nil, nil,
                          s(:send, nil, :raise)), nil)),
                    s(:resbody, nil,
                      s(:lvasgn, :e),
                      s(:array,
                        s(:send,
                          s(:lvar, :e), :backtrace),
                        s(:send,
                          s(:lvar, :e), :backtrace_locations))), nil))), :resume)),
          s(:send, nil, :assert_equal,
            s(:lvar, :backtrace),
            s(:block,
              s(:send,
                s(:lvar, :backtrace_locations), :map),
              s(:args,
                s(:arg, :e)),
              s(:send,
                s(:lvar, :e), :to_s))))),
      s(:def, :call_helper_test_exception_backtrace_locations,
        s(:args),
        s(:send, nil, :helper_test_exception_backtrace_locations,
          s(:sym, :bad_argument))),
      s(:def, :test_argument_error_backtrace_locations,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :backtrace),
              s(:lvasgn, :backtrace_locations)),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Fiber), :new),
                s(:args),
                s(:kwbegin,
                  s(:rescue,
                    s(:send, nil, :helper_test_exception_backtrace_locations,
                      s(:int, 1)),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :ArgumentError)),
                      s(:lvasgn, :e),
                      s(:array,
                        s(:send,
                          s(:lvar, :e), :backtrace),
                        s(:send,
                          s(:lvar, :e), :backtrace_locations))), nil))), :resume)),
          s(:send, nil, :assert_equal,
            s(:lvar, :backtrace),
            s(:block,
              s(:send,
                s(:lvar, :backtrace_locations), :map),
              s(:args,
                s(:arg, :e)),
              s(:send,
                s(:lvar, :e), :to_s))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :backtrace),
              s(:lvasgn, :backtrace_locations)),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Fiber), :new),
                s(:args),
                s(:kwbegin,
                  s(:rescue,
                    s(:send, nil, :call_helper_test_exception_backtrace_locations),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :ArgumentError)),
                      s(:lvasgn, :e),
                      s(:array,
                        s(:send,
                          s(:lvar, :e), :backtrace),
                        s(:send,
                          s(:lvar, :e), :backtrace_locations))), nil))), :resume)),
          s(:send, nil, :assert_equal,
            s(:lvar, :backtrace),
            s(:block,
              s(:send,
                s(:lvar, :backtrace_locations), :map),
              s(:args,
                s(:arg, :e)),
              s(:send,
                s(:lvar, :e), :to_s))))),
      s(:def, :test_caller_lev,
        s(:args),
        s(:begin,
          s(:lvasgn, :cs,
            s(:array)),
          s(:send,
            s(:block,
              s(:send,
                s(:const, nil, :Fiber), :new),
              s(:args),
              s(:send,
                s(:block,
                  s(:send,
                    s(:const, nil, :Proc), :new),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:lvar, :cs), :<<,
                      s(:send, nil, :caller,
                        s(:int, 0))),
                    s(:send,
                      s(:lvar, :cs), :<<,
                      s(:send, nil, :caller,
                        s(:int, 1))),
                    s(:send,
                      s(:lvar, :cs), :<<,
                      s(:send, nil, :caller,
                        s(:int, 2))),
                    s(:send,
                      s(:lvar, :cs), :<<,
                      s(:send, nil, :caller,
                        s(:int, 3))),
                    s(:send,
                      s(:lvar, :cs), :<<,
                      s(:send, nil, :caller,
                        s(:int, 4))),
                    s(:send,
                      s(:lvar, :cs), :<<,
                      s(:send, nil, :caller,
                        s(:int, 5))))), :call)), :resume),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:lvar, :cs), :[],
                s(:int, 0)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:lvar, :cs), :[],
                s(:int, 1)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:lvar, :cs), :[],
                s(:int, 2)), :size)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :cs), :[],
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :cs), :[],
              s(:int, 4))),
          s(:lvasgn, :max,
            s(:int, 7)),
          s(:lvasgn, :rec,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :n)),
              s(:if,
                s(:send,
                  s(:lvar, :n), :>,
                  s(:int, 0)),
                s(:block,
                  s(:send,
                    s(:int, 1), :times),
                  s(:args),
                  s(:send,
                    s(:lvar, :rec), :[],
                    s(:send,
                      s(:lvar, :n), :-,
                      s(:int, 1)))),
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:lvar, :max), :*,
                        s(:int, 3))), :times),
                  s(:args,
                    s(:arg, :i)),
                  s(:begin,
                    s(:lvasgn, :total_size,
                      s(:send,
                        s(:send, nil, :caller,
                          s(:int, 0)), :size)),
                    s(:lvasgn, :c,
                      s(:send, nil, :caller,
                        s(:lvar, :i))),
                    s(:if,
                      s(:lvar, :c),
                      s(:send, nil, :assert_equal,
                        s(:send,
                          s(:lvar, :total_size), :-,
                          s(:lvar, :i)),
                        s(:send,
                          s(:send, nil, :caller,
                            s(:lvar, :i)), :size),
                        s(:str, "[ruby-dev:45673]")), nil)))))),
          s(:send,
            s(:block,
              s(:send,
                s(:const, nil, :Fiber), :new),
              s(:args),
              s(:send,
                s(:lvar, :rec), :[],
                s(:lvar, :max))), :resume))),
      s(:def, :test_caller_lev_and_n,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:int, 10)),
          s(:lvasgn, :rec,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :n)),
              s(:if,
                s(:send,
                  s(:lvar, :n), :<,
                  s(:int, 0)),
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:lvar, :m), :*,
                        s(:int, 6))), :times),
                  s(:args,
                    s(:arg, :lev)),
                  s(:block,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :m), :*,
                          s(:int, 6))), :times),
                    s(:args,
                      s(:arg, :i)),
                    s(:begin,
                      s(:lvasgn, :t,
                        s(:send,
                          s(:send, nil, :caller,
                            s(:int, 0)), :size)),
                      s(:lvasgn, :r,
                        s(:send, nil, :caller,
                          s(:lvar, :lev),
                          s(:lvar, :i))),
                      s(:if,
                        s(:send,
                          s(:lvar, :r), :respond_to?,
                          s(:sym, :size)),
                        s(:lvasgn, :r,
                          s(:send,
                            s(:lvar, :r), :size)), nil),
                      s(:if,
                        s(:send,
                          s(:lvar, :i), :==,
                          s(:int, 0)),
                        s(:send, nil, :assert_equal,
                          s(:int, 0),
                          s(:lvar, :r),
                          s(:send,
                            s(:array,
                              s(:lvar, :t),
                              s(:lvar, :lev),
                              s(:lvar, :i),
                              s(:lvar, :r)), :inspect)),
                        s(:if,
                          s(:send,
                            s(:lvar, :t), :<,
                            s(:lvar, :lev)),
                          s(:send, nil, :assert_equal,
                            s(:nil),
                            s(:lvar, :r),
                            s(:send,
                              s(:array,
                                s(:lvar, :t),
                                s(:lvar, :lev),
                                s(:lvar, :i),
                                s(:lvar, :r)), :inspect)),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:lvar, :t), :-,
                                s(:lvar, :lev)), :>,
                              s(:lvar, :i)),
                            s(:send, nil, :assert_equal,
                              s(:lvar, :i),
                              s(:lvar, :r),
                              s(:send,
                                s(:array,
                                  s(:lvar, :t),
                                  s(:lvar, :lev),
                                  s(:lvar, :i),
                                  s(:lvar, :r)), :inspect)),
                            s(:send, nil, :assert_equal,
                              s(:send,
                                s(:lvar, :t), :-,
                                s(:lvar, :lev)),
                              s(:lvar, :r),
                              s(:send,
                                s(:array,
                                  s(:lvar, :t),
                                  s(:lvar, :lev),
                                  s(:lvar, :i),
                                  s(:lvar, :r)), :inspect)))))))),
                s(:send,
                  s(:lvar, :rec), :[],
                  s(:send,
                    s(:lvar, :n), :-,
                    s(:int, 1)))))),
          s(:send,
            s(:lvar, :rec), :[],
            s(:lvar, :m)))),
      s(:def, :test_caller_with_nil_length,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send, nil, :caller,
            s(:int, 0)),
          s(:send, nil, :caller,
            s(:int, 0),
            s(:nil)))),
      s(:def, :test_caller_locations,
        s(:args),
        s(:begin,
          s(:lvasgn, :cs,
            s(:send, nil, :caller,
              s(:int, 0))),
          s(:lvasgn, :locs,
            s(:block,
              s(:send,
                s(:send, nil, :caller_locations,
                  s(:int, 0)), :map),
              s(:args,
                s(:arg, :loc)),
              s(:send,
                s(:lvar, :loc), :to_s))),
          s(:send, nil, :assert_equal,
            s(:lvar, :cs),
            s(:lvar, :locs)))),
      s(:def, :test_caller_locations_with_range,
        s(:args),
        s(:begin,
          s(:lvasgn, :cs,
            s(:send, nil, :caller,
              s(:int, 0),
              s(:int, 2))),
          s(:lvasgn, :locs,
            s(:block,
              s(:send,
                s(:send, nil, :caller_locations,
                  s(:irange,
                    s(:int, 0),
                    s(:int, 1))), :map),
              s(:args,
                s(:arg, :loc)),
              s(:send,
                s(:lvar, :loc), :to_s))),
          s(:send, nil, :assert_equal,
            s(:lvar, :cs),
            s(:lvar, :locs)))),
      s(:def, :test_caller_locations_to_s_inspect,
        s(:args),
        s(:begin,
          s(:lvasgn, :cs,
            s(:send, nil, :caller,
              s(:int, 0))),
          s(:lvasgn, :locs,
            s(:send, nil, :caller_locations,
              s(:int, 0))),
          s(:block,
            s(:send,
              s(:lvar, :cs), :zip,
              s(:lvar, :locs)),
            s(:args,
              s(:arg, :str),
              s(:arg, :loc)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:lvar, :str),
                s(:send,
                  s(:lvar, :loc), :to_s)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :str), :inspect),
                s(:send,
                  s(:lvar, :loc), :inspect)))))),
      s(:def, :test_caller_locations_path,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :loc)),
            s(:send, nil, :caller_locations,
              s(:int, 0),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "(string)"),
            s(:send,
              s(:lvar, :loc), :path)),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:array,
                s(:str, "caller_locations"),
                s(:str, ".rb"))),
            s(:args,
              s(:arg, :f)),
            s(:begin,
              s(:send,
                s(:lvar, :f), :puts,
                s(:str, "caller_locations(0, 1)[0].tap {|loc| puts loc.path}")),
              s(:send,
                s(:lvar, :f), :close),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :dir),
                  s(:lvasgn, :base)),
                s(:send,
                  s(:const, nil, :File), :split,
                  s(:send,
                    s(:lvar, :f), :path))),
              s(:send, nil, :assert_in_out_err,
                s(:array,
                  s(:str, "-C"),
                  s(:lvar, :dir),
                  s(:lvar, :base)),
                s(:str, ""),
                s(:array,
                  s(:lvar, :base))))))),
      s(:def, :test_caller_locations_absolute_path,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :loc)),
            s(:send, nil, :caller_locations,
              s(:int, 0),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "(string)"),
            s(:send,
              s(:lvar, :loc), :absolute_path)),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:array,
                s(:str, "caller_locations"),
                s(:str, ".rb"))),
            s(:args,
              s(:arg, :f)),
            s(:begin,
              s(:send,
                s(:lvar, :f), :puts,
                s(:str, "caller_locations(0, 1)[0].tap {|loc| puts loc.absolute_path}")),
              s(:send,
                s(:lvar, :f), :close),
              s(:send, nil, :assert_in_out_err,
                s(:array,
                  s(:str, "-C"),
                  s(:splat,
                    s(:send,
                      s(:const, nil, :File), :split,
                      s(:send,
                        s(:lvar, :f), :path)))),
                s(:str, ""),
                s(:array,
                  s(:send,
                    s(:const, nil, :File), :realpath,
                    s(:send,
                      s(:lvar, :f), :path)))))))),
      s(:def, :test_caller_locations_lineno,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :loc)),
            s(:send, nil, :caller_locations,
              s(:int, 0),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 191), :-,
              s(:int, 1)),
            s(:send,
              s(:lvar, :loc), :lineno)),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:array,
                s(:str, "caller_locations"),
                s(:str, ".rb"))),
            s(:args,
              s(:arg, :f)),
            s(:begin,
              s(:send,
                s(:lvar, :f), :puts,
                s(:str, "caller_locations(0, 1)[0].tap {|loc| puts loc.lineno}")),
              s(:send,
                s(:lvar, :f), :close),
              s(:send, nil, :assert_in_out_err,
                s(:array,
                  s(:str, "-C"),
                  s(:splat,
                    s(:send,
                      s(:const, nil, :File), :split,
                      s(:send,
                        s(:lvar, :f), :path)))),
                s(:str, ""),
                s(:array,
                  s(:str, "1"))))))),
      s(:def, :test_caller_locations_base_label,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:begin,
                s(:send, nil, :__method__))),
            s(:send,
              s(:send,
                s(:send, nil, :caller_locations,
                  s(:int, 0),
                  s(:int, 1)), :[],
                s(:int, 0)), :base_label)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :loc)),
            s(:block,
              s(:send, nil, :tap),
              s(:args,
                s(:arg, :loc)),
              s(:break,
                s(:send, nil, :caller_locations,
                  s(:int, 0),
                  s(:int, 1))))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:begin,
                s(:send, nil, :__method__))),
            s(:send,
              s(:lvar, :loc), :base_label)),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :raise),
              s(:resbody, nil, nil,
                s(:send, nil, :assert_equal,
                  s(:dstr,
                    s(:begin,
                      s(:send, nil, :__method__))),
                  s(:send,
                    s(:send,
                      s(:send, nil, :caller_locations,
                        s(:int, 0),
                        s(:int, 1)), :[],
                      s(:int, 0)), :base_label))), nil)))),
      s(:def, :test_caller_locations_label,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:begin,
                s(:send, nil, :__method__))),
            s(:send,
              s(:send,
                s(:send, nil, :caller_locations,
                  s(:int, 0),
                  s(:int, 1)), :[],
                s(:int, 0)), :label)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :loc)),
            s(:block,
              s(:send, nil, :tap),
              s(:args,
                s(:arg, :loc)),
              s(:break,
                s(:send, nil, :caller_locations,
                  s(:int, 0),
                  s(:int, 1))))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "block in "),
              s(:begin,
                s(:send, nil, :__method__))),
            s(:send,
              s(:lvar, :loc), :label)),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :raise),
              s(:resbody, nil, nil,
                s(:send, nil, :assert_equal,
                  s(:dstr,
                    s(:str, "rescue in "),
                    s(:begin,
                      s(:send, nil, :__method__))),
                  s(:send,
                    s(:send,
                      s(:send, nil, :caller_locations,
                        s(:int, 0),
                        s(:int, 1)), :[],
                      s(:int, 0)), :label))), nil)))),
      s(:def, :th_rec,
        s(:args,
          s(:arg, :q),
          s(:optarg, :n,
            s(:int, 10))),
        s(:if,
          s(:send,
            s(:lvar, :n), :>,
            s(:int, 1)),
          s(:send, nil, :th_rec,
            s(:lvar, :q),
            s(:send,
              s(:lvar, :n), :-,
              s(:int, 1))),
          s(:send,
            s(:lvar, :q), :pop))),
      s(:def, :test_thread_backtrace,
        s(:args),
        s(:kwbegin,
          s(:ensure,
            s(:begin,
              s(:lvasgn, :q,
                s(:send,
                  s(:const, nil, :Queue), :new)),
              s(:lvasgn, :th,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:send, nil, :th_rec,
                    s(:lvar, :q)))),
              s(:send, nil, :sleep,
                s(:float, 0.5)),
              s(:lvasgn, :th_backtrace,
                s(:send,
                  s(:lvar, :th), :backtrace)),
              s(:lvasgn, :th_locations,
                s(:send,
                  s(:lvar, :th), :backtrace_locations)),
              s(:send, nil, :assert_equal,
                s(:int, 10),
                s(:block,
                  s(:send,
                    s(:lvar, :th_backtrace), :count),
                  s(:args,
                    s(:arg, :e)),
                  s(:send,
                    s(:lvar, :e), :=~,
                    s(:regexp,
                      s(:str, "th_rec"),
                      s(:regopt))))),
              s(:send, nil, :assert_equal,
                s(:lvar, :th_backtrace),
                s(:block,
                  s(:send,
                    s(:lvar, :th_locations), :map),
                  s(:args,
                    s(:arg, :e)),
                  s(:send,
                    s(:lvar, :e), :to_s))),
              s(:send, nil, :assert_equal,
                s(:lvar, :th_backtrace),
                s(:send,
                  s(:lvar, :th), :backtrace,
                  s(:int, 0))),
              s(:send, nil, :assert_equal,
                s(:block,
                  s(:send,
                    s(:lvar, :th_locations), :map),
                  s(:args,
                    s(:arg, :e)),
                  s(:send,
                    s(:lvar, :e), :to_s)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :th), :backtrace_locations,
                      s(:int, 0)), :map),
                  s(:args,
                    s(:arg, :e)),
                  s(:send,
                    s(:lvar, :e), :to_s))),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :th_backtrace), :size), :times),
                s(:args,
                  s(:arg, :n)),
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:lvar, :n),
                    s(:send,
                      s(:send,
                        s(:lvar, :th), :backtrace,
                        s(:int, 0),
                        s(:lvar, :n)), :size)),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :n),
                    s(:send,
                      s(:send,
                        s(:lvar, :th), :backtrace_locations,
                        s(:int, 0),
                        s(:lvar, :n)), :size)))),
              s(:lvasgn, :n,
                s(:send,
                  s(:lvar, :th_backtrace), :size)),
              s(:send, nil, :assert_equal,
                s(:lvar, :n),
                s(:send,
                  s(:send,
                    s(:lvar, :th), :backtrace,
                    s(:int, 0),
                    s(:send,
                      s(:lvar, :n), :+,
                      s(:int, 1))), :size)),
              s(:send, nil, :assert_equal,
                s(:lvar, :n),
                s(:send,
                  s(:send,
                    s(:lvar, :th), :backtrace_locations,
                    s(:int, 0),
                    s(:send,
                      s(:lvar, :n), :+,
                      s(:int, 1))), :size))),
            s(:begin,
              s(:send,
                s(:lvar, :q), :<<,
                s(:true)),
              s(:send,
                s(:lvar, :th), :join))))),
      s(:def, :test_thread_backtrace_locations_with_range,
        s(:args),
        s(:kwbegin,
          s(:ensure,
            s(:begin,
              s(:lvasgn, :q,
                s(:send,
                  s(:const, nil, :Queue), :new)),
              s(:lvasgn, :th,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:send, nil, :th_rec,
                    s(:lvar, :q)))),
              s(:send, nil, :sleep,
                s(:float, 0.5)),
              s(:lvasgn, :bt,
                s(:send,
                  s(:lvar, :th), :backtrace,
                  s(:int, 0),
                  s(:int, 2))),
              s(:lvasgn, :locs,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :th), :backtrace_locations,
                      s(:irange,
                        s(:int, 0),
                        s(:int, 1))), :map),
                  s(:args,
                    s(:arg, :loc)),
                  s(:send,
                    s(:lvar, :loc), :to_s))),
              s(:send, nil, :assert_equal,
                s(:lvar, :bt),
                s(:lvar, :locs))),
            s(:begin,
              s(:send,
                s(:lvar, :q), :<<,
                s(:true)),
              s(:send,
                s(:lvar, :th), :join))))),
      s(:def, :test_core_backtrace_alias,
        s(:args),
        s(:begin,
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :BasicObject), :new)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :NameError)),
              s(:args),
              s(:sclass,
                s(:lvar, :obj),
                s(:alias,
                  s(:sym, :foo),
                  s(:sym, :bar))))),
          s(:send, nil, :assert_not_match,
            s(:regexp,
              s(:str, "\\Acore#"),
              s(:regopt)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :e), :backtrace_locations), :[],
                s(:int, 0)), :base_label)))),
      s(:def, :test_core_backtrace_undef,
        s(:args),
        s(:begin,
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :BasicObject), :new)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :NameError)),
              s(:args),
              s(:sclass,
                s(:lvar, :obj),
                s(:undef,
                  s(:sym, :foo))))),
          s(:send, nil, :assert_not_match,
            s(:regexp,
              s(:str, "\\Acore#"),
              s(:regopt)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :e), :backtrace_locations), :[],
                s(:int, 0)), :base_label)))),
      s(:def, :test_core_backtrace_hash_merge,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :TypeError)),
              s(:args),
              s(:hash,
                s(:kwsplat,
                  s(:nil))))),
          s(:send, nil, :assert_not_match,
            s(:regexp,
              s(:str, "\\Acore#"),
              s(:regopt)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :e), :backtrace_locations), :[],
                s(:int, 0)), :base_label)))))))
