s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestTimeTZ),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:lvasgn, :has_right_tz,
        s(:true)),
      s(:lvasgn, :has_lisbon_tz,
        s(:true)),
      s(:lvasgn, :force_tz_test,
        s(:send,
          s(:send,
            s(:const, nil, :ENV), :[],
            s(:str, "RUBY_FORCE_TIME_TZ_TEST")), :==,
          s(:str, "yes"))),
      s(:case,
        s(:const, nil, :RUBY_PLATFORM),
        s(:when,
          s(:regexp,
            s(:str, "linux"),
            s(:regopt)),
          s(:lvasgn, :force_tz_test,
            s(:true))),
        s(:when,
          s(:regexp,
            s(:str, "darwin|freebsd"),
            s(:regopt)),
          s(:begin,
            s(:lvasgn, :has_lisbon_tz,
              s(:false)),
            s(:lvasgn, :force_tz_test,
              s(:true)))), nil),
      s(:if,
        s(:lvar, :force_tz_test),
        s(:module,
          s(:const, nil, :Util),
          s(:def, :with_tz,
            s(:args,
              s(:arg, :tz)),
            s(:begin,
              s(:lvasgn, :old,
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:str, "TZ"))),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :ENV), :[]=,
                      s(:str, "TZ"),
                      s(:lvar, :tz)),
                    s(:yield)),
                  s(:send,
                    s(:const, nil, :ENV), :[]=,
                    s(:str, "TZ"),
                    s(:lvar, :old))))))),
        s(:module,
          s(:const, nil, :Util),
          s(:def, :with_tz,
            s(:args,
              s(:arg, :tz)),
            s(:if,
              s(:send,
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:str, "TZ")), :==,
                s(:lvar, :tz)),
              s(:yield), nil)))),
      s(:module,
        s(:const, nil, :Util),
        s(:begin,
          s(:def, :have_tz_offset?,
            s(:args,
              s(:arg, :tz)),
            s(:block,
              s(:send, nil, :with_tz,
                s(:lvar, :tz)),
              s(:args),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Time), :now), :utc_offset), :zero?), :!))),
          s(:def, :format_gmtoff,
            s(:args,
              s(:arg, :gmtoff),
              s(:optarg, :colon,
                s(:false))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :gmtoff), :<,
                  s(:int, 0)),
                s(:begin,
                  s(:lvasgn, :expected,
                    s(:str, "-")),
                  s(:lvasgn, :gmtoff,
                    s(:send,
                      s(:lvar, :gmtoff), :-@))),
                s(:lvasgn, :expected,
                  s(:str, "+"))),
              s(:op_asgn,
                s(:lvasgn, :gmtoff), :/,
                s(:int, 60)),
              s(:send,
                s(:lvar, :expected), :<<,
                s(:send,
                  s(:str, "%02d"), :%,
                  s(:array,
                    s(:send,
                      s(:lvar, :gmtoff), :/,
                      s(:int, 60))))),
              s(:if,
                s(:lvar, :colon),
                s(:send,
                  s(:lvar, :expected), :<<,
                  s(:str, ":")), nil),
              s(:send,
                s(:lvar, :expected), :<<,
                s(:send,
                  s(:str, "%02d"), :%,
                  s(:array,
                    s(:send,
                      s(:lvar, :gmtoff), :%,
                      s(:int, 60))))),
              s(:lvar, :expected))),
          s(:def, :format_gmtoff2,
            s(:args,
              s(:arg, :gmtoff)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :gmtoff), :<,
                  s(:int, 0)),
                s(:begin,
                  s(:lvasgn, :expected,
                    s(:str, "-")),
                  s(:lvasgn, :gmtoff,
                    s(:send,
                      s(:lvar, :gmtoff), :-@))),
                s(:lvasgn, :expected,
                  s(:str, "+"))),
              s(:send,
                s(:lvar, :expected), :<<,
                s(:send,
                  s(:str, "%02d:%02d:%02d"), :%,
                  s(:array,
                    s(:send,
                      s(:lvar, :gmtoff), :/,
                      s(:int, 3600)),
                    s(:send,
                      s(:send,
                        s(:lvar, :gmtoff), :%,
                        s(:int, 3600)), :/,
                      s(:int, 60)),
                    s(:send,
                      s(:lvar, :gmtoff), :%,
                      s(:int, 60))))),
              s(:lvar, :expected))),
          s(:def, :group_by,
            s(:args,
              s(:arg, :e),
              s(:blockarg, :block)),
            s(:if,
              s(:send,
                s(:lvar, :e), :respond_to?,
                s(:sym, :group_by)),
              s(:send,
                s(:lvar, :e), :group_by,
                s(:block_pass,
                  s(:lvar, :block))),
              s(:begin,
                s(:lvasgn, :h,
                  s(:hash)),
                s(:block,
                  s(:send,
                    s(:lvar, :e), :each),
                  s(:args,
                    s(:arg, :o)),
                  s(:send,
                    s(:begin,
                      s(:or_asgn,
                        s(:send,
                          s(:lvar, :h), :[],
                          s(:yield,
                            s(:lvar, :o))),
                        s(:array))), :<<,
                    s(:lvar, :o))),
                s(:lvar, :h)))))),
      s(:send, nil, :include,
        s(:const, nil, :Util)),
      s(:send, nil, :extend,
        s(:const, nil, :Util)),
      s(:and_asgn,
        s(:lvasgn, :has_right_tz),
        s(:send, nil, :have_tz_offset?,
          s(:str, "right/America/Los_Angeles"))),
      s(:and_asgn,
        s(:lvasgn, :has_lisbon_tz),
        s(:send, nil, :have_tz_offset?,
          s(:str, "Europe/Lisbon"))),
      s(:def, :time_to_s,
        s(:args,
          s(:arg, :t)),
        s(:send,
          s(:lvar, :t), :to_s)),
      s(:def, :assert_time_constructor,
        s(:args,
          s(:arg, :tz),
          s(:arg, :expected),
          s(:arg, :method),
          s(:arg, :args),
          s(:optarg, :message,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :m,
            s(:if,
              s(:lvar, :message),
              s(:dstr,
                s(:begin,
                  s(:lvar, :message)),
                s(:str, "\n")),
              s(:str, ""))),
          s(:send,
            s(:lvar, :m), :<<,
            s(:dstr,
              s(:str, "TZ="),
              s(:begin,
                s(:lvar, :tz)),
              s(:str, " Time."),
              s(:begin,
                s(:lvar, :method)),
              s(:str, "("),
              s(:begin,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :args), :map),
                    s(:args,
                      s(:arg, :arg)),
                    s(:send,
                      s(:lvar, :arg), :inspect)), :join,
                  s(:str, ", "))),
              s(:str, ")"))),
          s(:lvasgn, :real,
            s(:send, nil, :time_to_s,
              s(:send,
                s(:const, nil, :Time), :send,
                s(:lvar, :method),
                s(:splat,
                  s(:lvar, :args))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :real),
            s(:lvar, :m)))),
      s(:def, :test_america_los_angeles,
        s(:args),
        s(:block,
          s(:send, nil, :with_tz,
            s(:lvasgn, :tz,
              s(:str, "America/Los_Angeles"))),
          s(:args),
          s(:begin,
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "2007-03-11 03:00:00 -0700"),
              s(:sym, :local),
              s(:array,
                s(:int, 2007),
                s(:int, 3),
                s(:int, 11),
                s(:int, 2),
                s(:int, 0),
                s(:int, 0))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "2007-03-11 03:59:59 -0700"),
              s(:sym, :local),
              s(:array,
                s(:int, 2007),
                s(:int, 3),
                s(:int, 11),
                s(:int, 2),
                s(:int, 59),
                s(:int, 59))),
            s(:send, nil, :assert_equal,
              s(:str, "PST"),
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :new,
                  s(:int, 18446744073709551616),
                  s(:int, 1)), :zone)),
            s(:send, nil, :assert_equal,
              s(:str, "PDT"),
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :new,
                  s(:int, 18446744073709551616),
                  s(:int, 8)), :zone)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :new,
                  s(:int, 18446744073709551616),
                  s(:int, 1)), :isdst)),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :new,
                  s(:int, 18446744073709551616),
                  s(:int, 8)), :isdst))))),
      s(:def, :test_america_managua,
        s(:args),
        s(:block,
          s(:send, nil, :with_tz,
            s(:lvasgn, :tz,
              s(:str, "America/Managua"))),
          s(:args),
          s(:begin,
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "1993-01-01 01:00:00 -0500"),
              s(:sym, :local),
              s(:array,
                s(:int, 1993),
                s(:int, 1),
                s(:int, 1),
                s(:int, 0),
                s(:int, 0),
                s(:int, 0))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "1993-01-01 01:59:59 -0500"),
              s(:sym, :local),
              s(:array,
                s(:int, 1993),
                s(:int, 1),
                s(:int, 1),
                s(:int, 0),
                s(:int, 59),
                s(:int, 59)))))),
      s(:def, :test_asia_singapore,
        s(:args),
        s(:block,
          s(:send, nil, :with_tz,
            s(:lvasgn, :tz,
              s(:str, "Asia/Singapore"))),
          s(:args),
          s(:begin,
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "1981-12-31 23:59:59 +0730"),
              s(:sym, :local),
              s(:array,
                s(:int, 1981),
                s(:int, 12),
                s(:int, 31),
                s(:int, 23),
                s(:int, 59),
                s(:int, 59))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "1982-01-01 00:30:00 +0800"),
              s(:sym, :local),
              s(:array,
                s(:int, 1982),
                s(:int, 1),
                s(:int, 1),
                s(:int, 0),
                s(:int, 0),
                s(:int, 0))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "1982-01-01 00:59:59 +0800"),
              s(:sym, :local),
              s(:array,
                s(:int, 1982),
                s(:int, 1),
                s(:int, 1),
                s(:int, 0),
                s(:int, 29),
                s(:int, 59))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "1982-01-01 00:30:00 +0800"),
              s(:sym, :local),
              s(:array,
                s(:int, 1982),
                s(:int, 1),
                s(:int, 1),
                s(:int, 0),
                s(:int, 30),
                s(:int, 0)))))),
      s(:def, :test_asia_tokyo,
        s(:args),
        s(:block,
          s(:send, nil, :with_tz,
            s(:lvasgn, :tz,
              s(:str, "Asia/Tokyo"))),
          s(:args),
          s(:begin,
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "1951-05-06 03:00:00 +1000"),
              s(:sym, :local),
              s(:array,
                s(:int, 1951),
                s(:int, 5),
                s(:int, 6),
                s(:int, 2),
                s(:int, 0),
                s(:int, 0))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "1951-05-06 03:59:59 +1000"),
              s(:sym, :local),
              s(:array,
                s(:int, 1951),
                s(:int, 5),
                s(:int, 6),
                s(:int, 2),
                s(:int, 59),
                s(:int, 59))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "2010-06-10 06:13:28 +0900"),
              s(:sym, :local),
              s(:array,
                s(:int, 2010),
                s(:int, 6),
                s(:int, 10),
                s(:int, 6),
                s(:int, 13),
                s(:int, 28)))))),
      s(:def, :test_canada_newfoundland,
        s(:args),
        s(:block,
          s(:send, nil, :with_tz,
            s(:lvasgn, :tz,
              s(:str, "America/St_Johns"))),
          s(:args),
          s(:begin,
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "2007-11-03 23:00:59 -0230"),
              s(:sym, :new),
              s(:array,
                s(:int, 2007),
                s(:int, 11),
                s(:int, 3),
                s(:int, 23),
                s(:int, 0),
                s(:int, 59),
                s(:sym, :dst))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "2007-11-03 23:01:00 -0230"),
              s(:sym, :new),
              s(:array,
                s(:int, 2007),
                s(:int, 11),
                s(:int, 3),
                s(:int, 23),
                s(:int, 1),
                s(:int, 0),
                s(:sym, :dst))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "2007-11-03 23:59:59 -0230"),
              s(:sym, :new),
              s(:array,
                s(:int, 2007),
                s(:int, 11),
                s(:int, 3),
                s(:int, 23),
                s(:int, 59),
                s(:int, 59),
                s(:sym, :dst))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "2007-11-04 00:00:00 -0230"),
              s(:sym, :new),
              s(:array,
                s(:int, 2007),
                s(:int, 11),
                s(:int, 4),
                s(:int, 0),
                s(:int, 0),
                s(:int, 0),
                s(:sym, :dst))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "2007-11-04 00:00:59 -0230"),
              s(:sym, :new),
              s(:array,
                s(:int, 2007),
                s(:int, 11),
                s(:int, 4),
                s(:int, 0),
                s(:int, 0),
                s(:int, 59),
                s(:sym, :dst))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "2007-11-03 23:01:00 -0330"),
              s(:sym, :new),
              s(:array,
                s(:int, 2007),
                s(:int, 11),
                s(:int, 3),
                s(:int, 23),
                s(:int, 1),
                s(:int, 0),
                s(:sym, :std))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "2007-11-03 23:59:59 -0330"),
              s(:sym, :new),
              s(:array,
                s(:int, 2007),
                s(:int, 11),
                s(:int, 3),
                s(:int, 23),
                s(:int, 59),
                s(:int, 59),
                s(:sym, :std))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "2007-11-04 00:00:59 -0330"),
              s(:sym, :new),
              s(:array,
                s(:int, 2007),
                s(:int, 11),
                s(:int, 4),
                s(:int, 0),
                s(:int, 0),
                s(:int, 59),
                s(:sym, :std))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "2007-11-04 00:01:00 -0330"),
              s(:sym, :new),
              s(:array,
                s(:int, 2007),
                s(:int, 11),
                s(:int, 4),
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:sym, :std)))))),
      s(:def, :test_europe_brussels,
        s(:args),
        s(:block,
          s(:send, nil, :with_tz,
            s(:lvasgn, :tz,
              s(:str, "Europe/Brussels"))),
          s(:args),
          s(:begin,
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "1916-04-30 23:59:59 +0100"),
              s(:sym, :local),
              s(:array,
                s(:int, 1916),
                s(:int, 4),
                s(:int, 30),
                s(:int, 23),
                s(:int, 59),
                s(:int, 59))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "1916-05-01 01:00:00 +0200"),
              s(:sym, :local),
              s(:array,
                s(:int, 1916),
                s(:int, 5),
                s(:int, 1)),
              s(:str, "[ruby-core:30672] [Bug #3411]")),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "1916-05-01 01:59:59 +0200"),
              s(:sym, :local),
              s(:array,
                s(:int, 1916),
                s(:int, 5),
                s(:int, 1),
                s(:int, 0),
                s(:int, 59),
                s(:int, 59))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "1916-05-01 01:00:00 +0200"),
              s(:sym, :local),
              s(:array,
                s(:int, 1916),
                s(:int, 5),
                s(:int, 1),
                s(:int, 1),
                s(:int, 0),
                s(:int, 0))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "1916-05-01 01:59:59 +0200"),
              s(:sym, :local),
              s(:array,
                s(:int, 1916),
                s(:int, 5),
                s(:int, 1),
                s(:int, 1),
                s(:int, 59),
                s(:int, 59)))))),
      s(:def, :test_europe_berlin,
        s(:args),
        s(:block,
          s(:send, nil, :with_tz,
            s(:lvasgn, :tz,
              s(:str, "Europe/Berlin"))),
          s(:args),
          s(:begin,
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "2011-10-30 02:00:00 +0100"),
              s(:sym, :local),
              s(:array,
                s(:int, 2011),
                s(:int, 10),
                s(:int, 30),
                s(:int, 2),
                s(:int, 0),
                s(:int, 0)),
              s(:str, "[ruby-core:67345] [Bug #10698]")),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "2011-10-30 02:00:00 +0100"),
              s(:sym, :local),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 2),
                s(:int, 30),
                s(:int, 10),
                s(:int, 2011),
                s(:nil),
                s(:nil),
                s(:false),
                s(:nil))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "2011-10-30 02:00:00 +0200"),
              s(:sym, :local),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 2),
                s(:int, 30),
                s(:int, 10),
                s(:int, 2011),
                s(:nil),
                s(:nil),
                s(:true),
                s(:nil)))))),
      s(:if,
        s(:lvar, :has_lisbon_tz),
        s(:def, :test_europe_lisbon,
          s(:args),
          s(:block,
            s(:send, nil, :with_tz,
              s(:str, "Europe/Lisbon")),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:str, "LMT"),
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :new,
                  s(:int, -18446744073709551616)), :zone)))), nil),
      s(:def, :test_pacific_kiritimati,
        s(:args),
        s(:block,
          s(:send, nil, :with_tz,
            s(:lvasgn, :tz,
              s(:str, "Pacific/Kiritimati"))),
          s(:args),
          s(:begin,
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "1994-12-31 23:59:59 -1000"),
              s(:sym, :local),
              s(:array,
                s(:int, 1994),
                s(:int, 12),
                s(:int, 31),
                s(:int, 23),
                s(:int, 59),
                s(:int, 59))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "1995-01-02 00:00:00 +1400"),
              s(:sym, :local),
              s(:array,
                s(:int, 1995),
                s(:int, 1),
                s(:int, 1),
                s(:int, 0),
                s(:int, 0),
                s(:int, 0))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "1995-01-02 23:59:59 +1400"),
              s(:sym, :local),
              s(:array,
                s(:int, 1995),
                s(:int, 1),
                s(:int, 1),
                s(:int, 23),
                s(:int, 59),
                s(:int, 59))),
            s(:send, nil, :assert_time_constructor,
              s(:lvar, :tz),
              s(:str, "1995-01-02 00:00:00 +1400"),
              s(:sym, :local),
              s(:array,
                s(:int, 1995),
                s(:int, 1),
                s(:int, 2),
                s(:int, 0),
                s(:int, 0),
                s(:int, 0)))))),
      s(:if,
        s(:lvar, :has_right_tz),
        s(:def, :test_right_utc,
          s(:args),
          s(:block,
            s(:send, nil, :with_tz,
              s(:lvasgn, :tz,
                s(:str, "right/UTC"))),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_time_constructor,
                s(:lvar, :tz),
                s(:str, "2008-12-31 23:59:59 UTC"),
                s(:sym, :utc),
                s(:array,
                  s(:int, 2008),
                  s(:int, 12),
                  s(:int, 31),
                  s(:int, 23),
                  s(:int, 59),
                  s(:int, 59))),
              s(:send, nil, :assert_time_constructor,
                s(:lvar, :tz),
                s(:str, "2008-12-31 23:59:60 UTC"),
                s(:sym, :utc),
                s(:array,
                  s(:int, 2008),
                  s(:int, 12),
                  s(:int, 31),
                  s(:int, 23),
                  s(:int, 59),
                  s(:int, 60))),
              s(:send, nil, :assert_time_constructor,
                s(:lvar, :tz),
                s(:str, "2009-01-01 00:00:00 UTC"),
                s(:sym, :utc),
                s(:array,
                  s(:int, 2008),
                  s(:int, 12),
                  s(:int, 31),
                  s(:int, 24),
                  s(:int, 0),
                  s(:int, 0))),
              s(:send, nil, :assert_time_constructor,
                s(:lvar, :tz),
                s(:str, "2009-01-01 00:00:00 UTC"),
                s(:sym, :utc),
                s(:array,
                  s(:int, 2009),
                  s(:int, 1),
                  s(:int, 1),
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, 0)))))), nil),
      s(:if,
        s(:lvar, :has_right_tz),
        s(:def, :test_right_america_los_angeles,
          s(:args),
          s(:block,
            s(:send, nil, :with_tz,
              s(:lvasgn, :tz,
                s(:str, "right/America/Los_Angeles"))),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_time_constructor,
                s(:lvar, :tz),
                s(:str, "2008-12-31 15:59:59 -0800"),
                s(:sym, :local),
                s(:array,
                  s(:int, 2008),
                  s(:int, 12),
                  s(:int, 31),
                  s(:int, 15),
                  s(:int, 59),
                  s(:int, 59))),
              s(:send, nil, :assert_time_constructor,
                s(:lvar, :tz),
                s(:str, "2008-12-31 15:59:60 -0800"),
                s(:sym, :local),
                s(:array,
                  s(:int, 2008),
                  s(:int, 12),
                  s(:int, 31),
                  s(:int, 15),
                  s(:int, 59),
                  s(:int, 60))),
              s(:send, nil, :assert_time_constructor,
                s(:lvar, :tz),
                s(:str, "2008-12-31 16:00:00 -0800"),
                s(:sym, :local),
                s(:array,
                  s(:int, 2008),
                  s(:int, 12),
                  s(:int, 31),
                  s(:int, 16),
                  s(:int, 0),
                  s(:int, 0)))))), nil),
      s(:casgn, nil, :MON2NUM,
        s(:hash,
          s(:pair,
            s(:str, "Jan"),
            s(:int, 1)),
          s(:pair,
            s(:str, "Feb"),
            s(:int, 2)),
          s(:pair,
            s(:str, "Mar"),
            s(:int, 3)),
          s(:pair,
            s(:str, "Apr"),
            s(:int, 4)),
          s(:pair,
            s(:str, "May"),
            s(:int, 5)),
          s(:pair,
            s(:str, "Jun"),
            s(:int, 6)),
          s(:pair,
            s(:str, "Jul"),
            s(:int, 7)),
          s(:pair,
            s(:str, "Aug"),
            s(:int, 8)),
          s(:pair,
            s(:str, "Sep"),
            s(:int, 9)),
          s(:pair,
            s(:str, "Oct"),
            s(:int, 10)),
          s(:pair,
            s(:str, "Nov"),
            s(:int, 11)),
          s(:pair,
            s(:str, "Dec"),
            s(:int, 12)))),
      s(:ivasgn, :@testnum,
        s(:int, 0)),
      s(:defs,
        s(:self), :gen_test_name,
        s(:args,
          s(:arg, :hint)),
        s(:begin,
          s(:op_asgn,
            s(:ivasgn, :@testnum), :+,
            s(:int, 1)),
          s(:lvasgn, :s,
            s(:dstr,
              s(:str, "test_gen_"),
              s(:begin,
                s(:ivar, :@testnum)))),
          s(:block,
            s(:send,
              s(:lvar, :s), :sub,
              s(:regexp,
                s(:str, "gen_"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:str, "gen"), :+,
              s(:send,
                s(:dstr,
                  s(:str, "_"),
                  s(:begin,
                    s(:lvar, :hint)),
                  s(:str, "_")), :gsub,
                s(:regexp,
                  s(:str, "[^0-9A-Za-z]+"),
                  s(:regopt)),
                s(:str, "_")))))),
      s(:defs,
        s(:self), :parse_zdump_line,
        s(:args,
          s(:arg, :line)),
        s(:begin,
          s(:if,
            s(:or,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A\\#"),
                  s(:regopt)),
                s(:lvar, :line)),
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A\\s*\\z"),
                  s(:regopt)),
                s(:lvar, :line))),
            s(:return,
              s(:nil)), nil),
          s(:if,
            s(:send,
              s(:regexp,
                s(:str, "\\A(\\S+)\\s+\n"),
                s(:str, "        \\S+\\s+(\\S+)\\s+(\\d+)\\s+(\\d\\d):(\\d\\d):(\\d\\d)\\s+(\\d+)\\s+UTC?\n"),
                s(:str, "        \\s+=\\s+\n"),
                s(:str, "        \\S+\\s+(\\S+)\\s+(\\d+)\\s+(\\d\\d):(\\d\\d):(\\d\\d)\\s+(\\d+)\\s+\\S+\n"),
                s(:str, "        \\s+isdst=\\d+\\s+gmtoff=(-?\\d+)\\n\n"),
                s(:str, "        \\z"),
                s(:regopt, :x)), :!~,
              s(:lvar, :line)),
            s(:send, nil, :raise,
              s(:dstr,
                s(:str, "unexpected zdump line: "),
                s(:begin,
                  s(:send,
                    s(:lvar, :line), :inspect)))), nil),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :tz),
              s(:lvasgn, :u_mon),
              s(:lvasgn, :u_day),
              s(:lvasgn, :u_hour),
              s(:lvasgn, :u_min),
              s(:lvasgn, :u_sec),
              s(:lvasgn, :u_year),
              s(:lvasgn, :l_mon),
              s(:lvasgn, :l_day),
              s(:lvasgn, :l_hour),
              s(:lvasgn, :l_min),
              s(:lvasgn, :l_sec),
              s(:lvasgn, :l_year),
              s(:lvasgn, :gmtoff)),
            s(:send,
              s(:gvar, :$~), :captures)),
          s(:lvasgn, :u_year,
            s(:send,
              s(:lvar, :u_year), :to_i)),
          s(:lvasgn, :u_mon,
            s(:send,
              s(:const, nil, :MON2NUM), :[],
              s(:lvar, :u_mon))),
          s(:lvasgn, :u_day,
            s(:send,
              s(:lvar, :u_day), :to_i)),
          s(:lvasgn, :u_hour,
            s(:send,
              s(:lvar, :u_hour), :to_i)),
          s(:lvasgn, :u_min,
            s(:send,
              s(:lvar, :u_min), :to_i)),
          s(:lvasgn, :u_sec,
            s(:send,
              s(:lvar, :u_sec), :to_i)),
          s(:lvasgn, :l_year,
            s(:send,
              s(:lvar, :l_year), :to_i)),
          s(:lvasgn, :l_mon,
            s(:send,
              s(:const, nil, :MON2NUM), :[],
              s(:lvar, :l_mon))),
          s(:lvasgn, :l_day,
            s(:send,
              s(:lvar, :l_day), :to_i)),
          s(:lvasgn, :l_hour,
            s(:send,
              s(:lvar, :l_hour), :to_i)),
          s(:lvasgn, :l_min,
            s(:send,
              s(:lvar, :l_min), :to_i)),
          s(:lvasgn, :l_sec,
            s(:send,
              s(:lvar, :l_sec), :to_i)),
          s(:lvasgn, :gmtoff,
            s(:send,
              s(:lvar, :gmtoff), :to_i)),
          s(:array,
            s(:lvar, :tz),
            s(:array,
              s(:lvar, :u_year),
              s(:lvar, :u_mon),
              s(:lvar, :u_day),
              s(:lvar, :u_hour),
              s(:lvar, :u_min),
              s(:lvar, :u_sec)),
            s(:array,
              s(:lvar, :l_year),
              s(:lvar, :l_mon),
              s(:lvar, :l_day),
              s(:lvar, :l_hour),
              s(:lvar, :l_min),
              s(:lvar, :l_sec)),
            s(:lvar, :gmtoff)))),
      s(:defs,
        s(:self), :gen_zdump_test,
        s(:args,
          s(:arg, :data)),
        s(:begin,
          s(:lvasgn, :sample,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :data), :each_line),
            s(:args,
              s(:arg, :line)),
            s(:begin,
              s(:lvasgn, :s,
                s(:send, nil, :parse_zdump_line,
                  s(:lvar, :line))),
              s(:if,
                s(:lvar, :s),
                s(:send,
                  s(:lvar, :sample), :<<,
                  s(:lvar, :s)), nil))),
          s(:block,
            s(:send,
              s(:lvar, :sample), :each),
            s(:args,
              s(:arg, :tz),
              s(:arg, :u),
              s(:arg, :l),
              s(:arg, :gmtoff)),
            s(:begin,
              s(:lvasgn, :expected_utc,
                s(:send,
                  s(:str, "%04d-%02d-%02d %02d:%02d:%02d UTC"), :%,
                  s(:lvar, :u))),
              s(:lvasgn, :expected,
                s(:send,
                  s(:str, "%04d-%02d-%02d %02d:%02d:%02d %s"), :%,
                  s(:begin,
                    s(:send,
                      s(:lvar, :l), :+,
                      s(:array,
                        s(:send, nil, :format_gmtoff,
                          s(:lvar, :gmtoff))))))),
              s(:lvasgn, :mesg_utc,
                s(:dstr,
                  s(:str, "TZ="),
                  s(:begin,
                    s(:lvar, :tz)),
                  s(:str, " Time.utc("),
                  s(:begin,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:lvar, :u), :map),
                        s(:args,
                          s(:arg, :arg)),
                        s(:send,
                          s(:lvar, :arg), :inspect)), :join,
                      s(:str, ", "))),
                  s(:str, ")"))),
              s(:lvasgn, :mesg,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :mesg_utc)),
                  s(:str, ".localtime"))),
              s(:block,
                s(:send, nil, :define_method,
                  s(:send, nil, :gen_test_name,
                    s(:lvar, :tz))),
                s(:args),
                s(:block,
                  s(:send, nil, :with_tz,
                    s(:lvar, :tz)),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :t,
                      s(:nil)),
                    s(:block,
                      s(:send, nil, :assert_nothing_raised,
                        s(:lvar, :mesg)),
                      s(:args),
                      s(:lvasgn, :t,
                        s(:send,
                          s(:const, nil, :Time), :utc,
                          s(:splat,
                            s(:lvar, :u))))),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :expected_utc),
                      s(:send, nil, :time_to_s,
                        s(:lvar, :t)),
                      s(:lvar, :mesg_utc)),
                    s(:block,
                      s(:send, nil, :assert_nothing_raised,
                        s(:lvar, :mesg)),
                      s(:args),
                      s(:send,
                        s(:lvar, :t), :localtime)),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :expected),
                      s(:send, nil, :time_to_s,
                        s(:lvar, :t)),
                      s(:lvar, :mesg)),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :gmtoff),
                      s(:send,
                        s(:lvar, :t), :gmtoff)),
                    s(:send, nil, :assert_equal,
                      s(:send, nil, :format_gmtoff,
                        s(:lvar, :gmtoff)),
                      s(:send,
                        s(:lvar, :t), :strftime,
                        s(:str, "%z"))),
                    s(:send, nil, :assert_equal,
                      s(:send, nil, :format_gmtoff,
                        s(:lvar, :gmtoff),
                        s(:true)),
                      s(:send,
                        s(:lvar, :t), :strftime,
                        s(:str, "%:z"))),
                    s(:send, nil, :assert_equal,
                      s(:send, nil, :format_gmtoff2,
                        s(:lvar, :gmtoff)),
                      s(:send,
                        s(:lvar, :t), :strftime,
                        s(:str, "%::z"))),
                    s(:send, nil, :assert_equal,
                      s(:const,
                        s(:const, nil, :Encoding), :US_ASCII),
                      s(:send,
                        s(:send,
                          s(:lvar, :t), :zone), :encoding))))))),
          s(:block,
            s(:send,
              s(:block,
                s(:send, nil, :group_by,
                  s(:lvar, :sample)),
                s(:args,
                  s(:arg, :tz),
                  s(:arg, :_),
                  s(:arg, :_),
                  s(:arg, :_)),
                s(:lvar, :tz)), :each),
            s(:args,
              s(:arg, :tz),
              s(:arg, :a)),
            s(:block,
              s(:send,
                s(:lvar, :a), :each_with_index),
              s(:args,
                s(:mlhs,
                  s(:arg, :_),
                  s(:arg, :_),
                  s(:arg, :l),
                  s(:arg, :gmtoff)),
                s(:arg, :i)),
              s(:begin,
                s(:lvasgn, :expected,
                  s(:send,
                    s(:str, "%04d-%02d-%02d %02d:%02d:%02d %s"), :%,
                    s(:begin,
                      s(:send,
                        s(:lvar, :l), :+,
                        s(:array,
                          s(:send, nil, :format_gmtoff,
                            s(:lvar, :gmtoff))))))),
                s(:lvasgn, :monotonic_to_past,
                  s(:or,
                    s(:send,
                      s(:lvar, :i), :==,
                      s(:int, 0)),
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :a), :[],
                              s(:send,
                                s(:lvar, :i), :-,
                                s(:int, 1))), :[],
                            s(:int, 2)), :<=>,
                          s(:lvar, :l))), :<,
                      s(:int, 0)))),
                s(:lvasgn, :monotonic_to_future,
                  s(:or,
                    s(:send,
                      s(:lvar, :i), :==,
                      s(:send,
                        s(:send,
                          s(:lvar, :a), :length), :-,
                        s(:int, 1))),
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :l), :<=>,
                          s(:send,
                            s(:send,
                              s(:lvar, :a), :[],
                              s(:send,
                                s(:lvar, :i), :+,
                                s(:int, 1))), :[],
                            s(:int, 2)))), :<,
                      s(:int, 0)))),
                s(:if,
                  s(:and,
                    s(:lvar, :monotonic_to_past),
                    s(:lvar, :monotonic_to_future)),
                  s(:block,
                    s(:send, nil, :define_method,
                      s(:send, nil, :gen_test_name,
                        s(:lvar, :tz))),
                    s(:args),
                    s(:block,
                      s(:send, nil, :with_tz,
                        s(:lvar, :tz)),
                      s(:args),
                      s(:begin,
                        s(:send, nil, :assert_time_constructor,
                          s(:lvar, :tz),
                          s(:lvar, :expected),
                          s(:sym, :local),
                          s(:lvar, :l)),
                        s(:send, nil, :assert_time_constructor,
                          s(:lvar, :tz),
                          s(:lvar, :expected),
                          s(:sym, :local),
                          s(:send,
                            s(:send,
                              s(:lvar, :l), :reverse), :+,
                            s(:array,
                              s(:nil),
                              s(:nil),
                              s(:false),
                              s(:nil)))),
                        s(:send, nil, :assert_time_constructor,
                          s(:lvar, :tz),
                          s(:lvar, :expected),
                          s(:sym, :local),
                          s(:send,
                            s(:send,
                              s(:lvar, :l), :reverse), :+,
                            s(:array,
                              s(:nil),
                              s(:nil),
                              s(:true),
                              s(:nil)))),
                        s(:send, nil, :assert_time_constructor,
                          s(:lvar, :tz),
                          s(:lvar, :expected),
                          s(:sym, :new),
                          s(:lvar, :l)),
                        s(:send, nil, :assert_time_constructor,
                          s(:lvar, :tz),
                          s(:lvar, :expected),
                          s(:sym, :new),
                          s(:send,
                            s(:lvar, :l), :+,
                            s(:array,
                              s(:sym, :std)))),
                        s(:send, nil, :assert_time_constructor,
                          s(:lvar, :tz),
                          s(:lvar, :expected),
                          s(:sym, :new),
                          s(:send,
                            s(:lvar, :l), :+,
                            s(:array,
                              s(:sym, :dst))))))),
                  s(:if,
                    s(:and,
                      s(:lvar, :monotonic_to_past),
                      s(:send,
                        s(:lvar, :monotonic_to_future), :!)),
                    s(:block,
                      s(:send, nil, :define_method,
                        s(:send, nil, :gen_test_name,
                          s(:lvar, :tz))),
                      s(:args),
                      s(:block,
                        s(:send, nil, :with_tz,
                          s(:lvar, :tz)),
                        s(:args),
                        s(:begin,
                          s(:send, nil, :assert_time_constructor,
                            s(:lvar, :tz),
                            s(:lvar, :expected),
                            s(:sym, :local),
                            s(:send,
                              s(:send,
                                s(:lvar, :l), :reverse), :+,
                              s(:array,
                                s(:nil),
                                s(:nil),
                                s(:true),
                                s(:nil)))),
                          s(:send, nil, :assert_time_constructor,
                            s(:lvar, :tz),
                            s(:lvar, :expected),
                            s(:sym, :new),
                            s(:send,
                              s(:lvar, :l), :+,
                              s(:array,
                                s(:sym, :dst))))))),
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:lvar, :monotonic_to_past), :!),
                        s(:lvar, :monotonic_to_future)),
                      s(:block,
                        s(:send, nil, :define_method,
                          s(:send, nil, :gen_test_name,
                            s(:lvar, :tz))),
                        s(:args),
                        s(:block,
                          s(:send, nil, :with_tz,
                            s(:lvar, :tz)),
                          s(:args),
                          s(:begin,
                            s(:send, nil, :assert_time_constructor,
                              s(:lvar, :tz),
                              s(:lvar, :expected),
                              s(:sym, :local),
                              s(:send,
                                s(:send,
                                  s(:lvar, :l), :reverse), :+,
                                s(:array,
                                  s(:nil),
                                  s(:nil),
                                  s(:false),
                                  s(:nil)))),
                            s(:send, nil, :assert_time_constructor,
                              s(:lvar, :tz),
                              s(:lvar, :expected),
                              s(:sym, :new),
                              s(:send,
                                s(:lvar, :l), :+,
                                s(:array,
                                  s(:sym, :std))))))),
                      s(:block,
                        s(:send, nil, :define_method,
                          s(:send, nil, :gen_test_name,
                            s(:lvar, :tz))),
                        s(:args),
                        s(:send, nil, :flunk,
                          s(:dstr,
                            s(:str, "time in reverse order: TZ="),
                            s(:begin,
                              s(:lvar, :tz)),
                            s(:str, " "),
                            s(:begin,
                              s(:lvar, :expected))))))))))))),
      s(:send, nil, :gen_zdump_test,
        s(:dstr,
          s(:str, "America/Lima  Sun Apr  1 03:59:59 1990 UTC = Sat Mar 31 23:59:59 1990 PEST isdst=1 gmtoff=-14400\n"),
          s(:str, "America/Lima  Sun Apr  1 04:00:00 1990 UTC = Sat Mar 31 23:00:00 1990 PET isdst=0 gmtoff=-18000\n"),
          s(:str, "America/Lima  Sat Jan  1 04:59:59 1994 UTC = Fri Dec 31 23:59:59 1993 PET isdst=0 gmtoff=-18000\n"),
          s(:str, "America/Lima  Sat Jan  1 05:00:00 1994 UTC = Sat Jan  1 01:00:00 1994 PEST isdst=1 gmtoff=-14400\n"),
          s(:str, "America/Lima  Fri Apr  1 03:59:59 1994 UTC = Thu Mar 31 23:59:59 1994 PEST isdst=1 gmtoff=-14400\n"),
          s(:str, "America/Lima  Fri Apr  1 04:00:00 1994 UTC = Thu Mar 31 23:00:00 1994 PET isdst=0 gmtoff=-18000\n"),
          s(:str, "America/Los_Angeles  Sun Apr  2 09:59:59 2006 UTC = Sun Apr  2 01:59:59 2006 PST isdst=0 gmtoff=-28800\n"),
          s(:str, "America/Los_Angeles  Sun Apr  2 10:00:00 2006 UTC = Sun Apr  2 03:00:00 2006 PDT isdst=1 gmtoff=-25200\n"),
          s(:str, "America/Los_Angeles  Sun Oct 29 08:59:59 2006 UTC = Sun Oct 29 01:59:59 2006 PDT isdst=1 gmtoff=-25200\n"),
          s(:str, "America/Los_Angeles  Sun Oct 29 09:00:00 2006 UTC = Sun Oct 29 01:00:00 2006 PST isdst=0 gmtoff=-28800\n"),
          s(:str, "America/Los_Angeles  Sun Mar 11 09:59:59 2007 UTC = Sun Mar 11 01:59:59 2007 PST isdst=0 gmtoff=-28800\n"),
          s(:str, "America/Los_Angeles  Sun Mar 11 10:00:00 2007 UTC = Sun Mar 11 03:00:00 2007 PDT isdst=1 gmtoff=-25200\n"),
          s(:str, "America/Los_Angeles  Sun Nov  4 08:59:59 2007 UTC = Sun Nov  4 01:59:59 2007 PDT isdst=1 gmtoff=-25200\n"),
          s(:str, "America/Los_Angeles  Sun Nov  4 09:00:00 2007 UTC = Sun Nov  4 01:00:00 2007 PST isdst=0 gmtoff=-28800\n"),
          s(:str, "America/Managua  Thu Sep 24 04:59:59 1992 UTC = Wed Sep 23 23:59:59 1992 EST isdst=0 gmtoff=-18000\n"),
          s(:str, "America/Managua  Thu Sep 24 05:00:00 1992 UTC = Wed Sep 23 23:00:00 1992 CST isdst=0 gmtoff=-21600\n"),
          s(:str, "America/Managua  Fri Jan  1 05:59:59 1993 UTC = Thu Dec 31 23:59:59 1992 CST isdst=0 gmtoff=-21600\n"),
          s(:str, "America/Managua  Fri Jan  1 06:00:00 1993 UTC = Fri Jan  1 01:00:00 1993 EST isdst=0 gmtoff=-18000\n"),
          s(:str, "America/Managua  Wed Jan  1 04:59:59 1997 UTC = Tue Dec 31 23:59:59 1996 EST isdst=0 gmtoff=-18000\n"),
          s(:str, "America/Managua  Wed Jan  1 05:00:00 1997 UTC = Tue Dec 31 23:00:00 1996 CST isdst=0 gmtoff=-21600\n"),
          s(:str, "Asia/Singapore  Sun Aug  8 16:30:00 1965 UTC = Mon Aug  9 00:00:00 1965 SGT isdst=0 gmtoff=27000\n"),
          s(:str, "Asia/Singapore  Thu Dec 31 16:29:59 1981 UTC = Thu Dec 31 23:59:59 1981 SGT isdst=0 gmtoff=27000\n"),
          s(:str, "Asia/Singapore  Thu Dec 31 16:30:00 1981 UTC = Fri Jan  1 00:30:00 1982 SGT isdst=0 gmtoff=28800\n"),
          s(:str, "Asia/Tokyo  Sat May  5 16:59:59 1951 UTC = Sun May  6 01:59:59 1951 JST isdst=0 gmtoff=32400\n"),
          s(:str, "Asia/Tokyo  Sat May  5 17:00:00 1951 UTC = Sun May  6 03:00:00 1951 JDT isdst=1 gmtoff=36000\n"),
          s(:str, "Asia/Tokyo  Fri Sep  7 15:59:59 1951 UTC = Sat Sep  8 01:59:59 1951 JDT isdst=1 gmtoff=36000\n"),
          s(:str, "Asia/Tokyo  Fri Sep  7 16:00:00 1951 UTC = Sat Sep  8 01:00:00 1951 JST isdst=0 gmtoff=32400\n"),
          s(:str, "America/St_Johns  Sun Mar 11 03:30:59 2007 UTC = Sun Mar 11 00:00:59 2007 NST isdst=0 gmtoff=-12600\n"),
          s(:str, "America/St_Johns  Sun Mar 11 03:31:00 2007 UTC = Sun Mar 11 01:01:00 2007 NDT isdst=1 gmtoff=-9000\n"),
          s(:str, "America/St_Johns  Sun Nov  4 02:30:59 2007 UTC = Sun Nov  4 00:00:59 2007 NDT isdst=1 gmtoff=-9000\n"),
          s(:str, "America/St_Johns  Sun Nov  4 02:31:00 2007 UTC = Sat Nov  3 23:01:00 2007 NST isdst=0 gmtoff=-12600\n"),
          s(:str, "Europe/Brussels  Sun Apr 30 22:59:59 1916 UTC = Sun Apr 30 23:59:59 1916 CET isdst=0 gmtoff=3600\n"),
          s(:str, "Europe/Brussels  Sun Apr 30 23:00:00 1916 UTC = Mon May  1 01:00:00 1916 CEST isdst=1 gmtoff=7200\n"),
          s(:str, "Europe/Brussels  Sat Sep 30 22:59:59 1916 UTC = Sun Oct  1 00:59:59 1916 CEST isdst=1 gmtoff=7200\n"),
          s(:str, "Europe/Brussels  Sat Sep 30 23:00:00 1916 UTC = Sun Oct  1 00:00:00 1916 CET isdst=0 gmtoff=3600\n"),
          s(:str, "Europe/London  Sun Mar 16 01:59:59 1947 UTC = Sun Mar 16 01:59:59 1947 GMT isdst=0 gmtoff=0\n"),
          s(:str, "Europe/London  Sun Mar 16 02:00:00 1947 UTC = Sun Mar 16 03:00:00 1947 BST isdst=1 gmtoff=3600\n"),
          s(:str, "Europe/London  Sun Apr 13 00:59:59 1947 UTC = Sun Apr 13 01:59:59 1947 BST isdst=1 gmtoff=3600\n"),
          s(:str, "Europe/London  Sun Apr 13 01:00:00 1947 UTC = Sun Apr 13 03:00:00 1947 BDST isdst=1 gmtoff=7200\n"),
          s(:str, "Europe/London  Sun Aug 10 00:59:59 1947 UTC = Sun Aug 10 02:59:59 1947 BDST isdst=1 gmtoff=7200\n"),
          s(:str, "Europe/London  Sun Aug 10 01:00:00 1947 UTC = Sun Aug 10 02:00:00 1947 BST isdst=1 gmtoff=3600\n"),
          s(:str, "Europe/London  Sun Nov  2 01:59:59 1947 UTC = Sun Nov  2 02:59:59 1947 BST isdst=1 gmtoff=3600\n"),
          s(:str, "Europe/London  Sun Nov  2 02:00:00 1947 UTC = Sun Nov  2 02:00:00 1947 GMT isdst=0 gmtoff=0\n"),
          s(:str, "Pacific/Kiritimati  Sun Jan  1 09:59:59 1995 UTC = Sat Dec 31 23:59:59 1994 LINT isdst=0 gmtoff=-36000\n"),
          s(:str, "Pacific/Kiritimati  Sun Jan  1 10:00:00 1995 UTC = Mon Jan  2 00:00:00 1995 LINT isdst=0 gmtoff=50400\n"))),
      s(:if,
        s(:lvar, :has_right_tz),
        s(:send, nil, :gen_zdump_test,
          s(:dstr,
            s(:str, "right/America/Los_Angeles  Fri Jun 30 23:59:60 1972 UTC = Fri Jun 30 16:59:60 1972 PDT isdst=1 gmtoff=-25200\n"),
            s(:str, "right/America/Los_Angeles  Wed Dec 31 23:59:60 2008 UTC = Wed Dec 31 15:59:60 2008 PST isdst=0 gmtoff=-28800\n"),
            s(:str, "#right/Asia/Tokyo  Fri Jun 30 23:59:60 1972 UTC = Sat Jul  1 08:59:60 1972 JST isdst=0 gmtoff=32400\n"),
            s(:str, "#right/Asia/Tokyo  Sat Dec 31 23:59:60 2005 UTC = Sun Jan  1 08:59:60 2006 JST isdst=0 gmtoff=32400\n"),
            s(:str, "right/Europe/Paris  Fri Jun 30 23:59:60 1972 UTC = Sat Jul  1 00:59:60 1972 CET isdst=0 gmtoff=3600\n"),
            s(:str, "right/Europe/Paris  Wed Dec 31 23:59:60 2008 UTC = Thu Jan  1 00:59:60 2009 CET isdst=0 gmtoff=3600\n"))), nil),
      s(:defs,
        s(:self), :gen_variational_zdump_test,
        s(:args,
          s(:arg, :hint),
          s(:arg, :data)),
        s(:begin,
          s(:lvasgn, :sample,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :data), :each_line),
            s(:args,
              s(:arg, :line)),
            s(:begin,
              s(:lvasgn, :s,
                s(:send, nil, :parse_zdump_line,
                  s(:lvar, :line))),
              s(:if,
                s(:lvar, :s),
                s(:send,
                  s(:lvar, :sample), :<<,
                  s(:lvar, :s)), nil))),
          s(:block,
            s(:send, nil, :define_method,
              s(:send, nil, :gen_test_name,
                s(:lvar, :hint))),
            s(:args),
            s(:begin,
              s(:lvasgn, :results,
                s(:array)),
              s(:block,
                s(:send,
                  s(:lvar, :sample), :each),
                s(:args,
                  s(:arg, :tz),
                  s(:arg, :u),
                  s(:arg, :l),
                  s(:arg, :gmtoff)),
                s(:begin,
                  s(:lvasgn, :expected_utc,
                    s(:send,
                      s(:str, "%04d-%02d-%02d %02d:%02d:%02d UTC"), :%,
                      s(:lvar, :u))),
                  s(:lvasgn, :expected,
                    s(:send,
                      s(:str, "%04d-%02d-%02d %02d:%02d:%02d %s"), :%,
                      s(:begin,
                        s(:send,
                          s(:lvar, :l), :+,
                          s(:array,
                            s(:send, nil, :format_gmtoff,
                              s(:lvar, :gmtoff))))))),
                  s(:lvasgn, :mesg_utc,
                    s(:dstr,
                      s(:str, "TZ="),
                      s(:begin,
                        s(:lvar, :tz)),
                      s(:str, " Time.utc("),
                      s(:begin,
                        s(:send,
                          s(:block,
                            s(:send,
                              s(:lvar, :u), :map),
                            s(:args,
                              s(:arg, :arg)),
                            s(:send,
                              s(:lvar, :arg), :inspect)), :join,
                          s(:str, ", "))),
                      s(:str, ")"))),
                  s(:lvasgn, :mesg,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :mesg_utc)),
                      s(:str, ".localtime"))),
                  s(:block,
                    s(:send, nil, :with_tz,
                      s(:lvar, :tz)),
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :t,
                        s(:nil)),
                      s(:block,
                        s(:send, nil, :assert_nothing_raised,
                          s(:lvar, :mesg)),
                        s(:args),
                        s(:lvasgn, :t,
                          s(:send,
                            s(:const, nil, :Time), :utc,
                            s(:splat,
                              s(:lvar, :u))))),
                      s(:send, nil, :assert_equal,
                        s(:lvar, :expected_utc),
                        s(:send, nil, :time_to_s,
                          s(:lvar, :t)),
                        s(:lvar, :mesg_utc)),
                      s(:block,
                        s(:send, nil, :assert_nothing_raised,
                          s(:lvar, :mesg)),
                        s(:args),
                        s(:send,
                          s(:lvar, :t), :localtime)),
                      s(:send,
                        s(:lvar, :results), :<<,
                        s(:array,
                          s(:send,
                            s(:lvar, :expected), :==,
                            s(:send, nil, :time_to_s,
                              s(:lvar, :t))),
                          s(:send,
                            s(:lvar, :gmtoff), :==,
                            s(:send,
                              s(:lvar, :t), :gmtoff)),
                          s(:send,
                            s(:send, nil, :format_gmtoff,
                              s(:lvar, :gmtoff)), :==,
                            s(:send,
                              s(:lvar, :t), :strftime,
                              s(:str, "%z"))),
                          s(:send,
                            s(:send, nil, :format_gmtoff,
                              s(:lvar, :gmtoff),
                              s(:true)), :==,
                            s(:send,
                              s(:lvar, :t), :strftime,
                              s(:str, "%:z"))),
                          s(:send,
                            s(:send, nil, :format_gmtoff2,
                              s(:lvar, :gmtoff)), :==,
                            s(:send,
                              s(:lvar, :t), :strftime,
                              s(:str, "%::z"))))))))),
              s(:send, nil, :assert_includes,
                s(:lvar, :results),
                s(:array,
                  s(:true),
                  s(:true),
                  s(:true),
                  s(:true),
                  s(:true))))))),
      s(:if,
        s(:lvar, :has_lisbon_tz),
        s(:send, nil, :gen_variational_zdump_test,
          s(:str, "lisbon"),
          s(:dstr,
            s(:str, "Europe/Lisbon  Mon Jan  1 00:36:31 1912 UTC = Sun Dec 31 23:59:59 1911 LMT isdst=0 gmtoff=-2192\n"),
            s(:str, "Europe/Lisbon  Mon Jan  1 00:36:44 1912 UT = Sun Dec 31 23:59:59 1911 LMT isdst=0 gmtoff=-2205\n"))), nil))))
