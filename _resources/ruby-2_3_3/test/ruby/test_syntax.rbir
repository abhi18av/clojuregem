s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestSyntax),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:send, nil, :using,
        s(:block,
          s(:send,
            s(:const, nil, :Module), :new),
          s(:args),
          s(:block,
            s(:send, nil, :refine,
              s(:const, nil, :Object)),
            s(:args),
            s(:def, :`,
              s(:args,
                s(:arg, :s)),
              s(:lvar, :s))))),
      s(:def, :assert_syntax_files,
        s(:args,
          s(:arg, :test)),
        s(:begin,
          s(:lvasgn, :srcdir,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:str, "../../.."),
              s(:str, "(string)"))),
          s(:lvasgn, :srcdir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :srcdir),
              s(:lvar, :test))),
          s(:send, nil, :assert_separately,
            s(:array,
              s(:str, "--disable-gem"),
              s(:str, "-"),
              s(:dstr,
                s(:begin,
                  s(:lvar, :srcdir)))),
            s(:str, "(string)"),
            s(:int, 17),
            s(:dstr,
              s(:str, "      dir = ARGV.shift\n"),
              s(:str, "      for script in Dir[\"\#{dir}/**/*.rb\"].sort\n"),
              s(:str, "        assert_valid_syntax(IO::read(script), script)\n"),
              s(:str, "      end\n")),
            s(:hash,
              s(:pair,
                s(:sym, :timeout),
                s(:const,
                  s(:const, nil, :Float), :INFINITY)))))),
      s(:def, :test_syntax_lib,
        s(:args),
        s(:send, nil, :assert_syntax_files,
          s(:str, "lib"))),
      s(:def, :test_syntax_sample,
        s(:args),
        s(:send, nil, :assert_syntax_files,
          s(:str, "sample"))),
      s(:def, :test_syntax_ext,
        s(:args),
        s(:send, nil, :assert_syntax_files,
          s(:str, "ext"))),
      s(:def, :test_syntax_test,
        s(:args),
        s(:send, nil, :assert_syntax_files,
          s(:str, "test"))),
      s(:def, :test_defined_empty_argument,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8220,
            s(:str, "[ruby-core:53999] [Bug #8220]")),
          s(:send, nil, :assert_ruby_status,
            s(:array,
              s(:str, "--disable-gem")),
            s(:str, "puts defined? ()"),
            s(:lvar, :bug8220)))),
      s(:def, :test_must_ascii_compatible,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send, nil, :require,
              s(:str, "tempfile")),
            s(:lvasgn, :f,
              s(:send,
                s(:const, nil, :Tempfile), :new,
                s(:str, "must_ac_"))),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Encoding), :list), :each),
              s(:args,
                s(:arg, :enc)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :enc), :ascii_compatible?), nil,
                  s(:next)),
                s(:send, nil, :make_tmpsrc,
                  s(:lvar, :f),
                  s(:dstr,
                    s(:str, "# -*- coding: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :enc), :name)),
                    s(:str, " -*-"))),
                s(:block,
                  s(:send, nil, :assert_nothing_raised,
                    s(:const, nil, :ArgumentError),
                    s(:send,
                      s(:lvar, :enc), :name)),
                  s(:args),
                  s(:send, nil, :load,
                    s(:send,
                      s(:lvar, :f), :path))))),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Encoding), :list), :each),
              s(:args,
                s(:arg, :enc)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :enc), :ascii_compatible?),
                  s(:next), nil),
                s(:send, nil, :make_tmpsrc,
                  s(:lvar, :f),
                  s(:dstr,
                    s(:str, "# -*- coding: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :enc), :name)),
                    s(:str, " -*-"))),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :ArgumentError),
                    s(:send,
                      s(:lvar, :enc), :name)),
                  s(:args),
                  s(:send, nil, :load,
                    s(:send,
                      s(:lvar, :f), :path)))))),
          s(:if,
            s(:lvar, :f),
            s(:send,
              s(:lvar, :f), :close!), nil))),
      s(:def, :test_script_lines,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send, nil, :require,
              s(:str, "tempfile")),
            s(:lvasgn, :f,
              s(:send,
                s(:const, nil, :Tempfile), :new,
                s(:str, "bug4361_"))),
            s(:lvasgn, :bug4361,
              s(:str, "[ruby-dev:43168]")),
            s(:block,
              s(:send, nil, :with_script_lines),
              s(:args,
                s(:arg, :debug_lines)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :Encoding), :list), :each),
                s(:args,
                  s(:arg, :enc)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :enc), :ascii_compatible?), nil,
                    s(:next)),
                  s(:send, nil, :make_tmpsrc,
                    s(:lvar, :f),
                    s(:dstr,
                      s(:str, "# -*- coding: "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :enc), :name)),
                      s(:str, " -*-\n#----------------"))),
                  s(:send, nil, :load,
                    s(:send,
                      s(:lvar, :f), :path)),
                  s(:send, nil, :assert_equal,
                    s(:array,
                      s(:send,
                        s(:lvar, :f), :path)),
                    s(:send,
                      s(:lvar, :debug_lines), :keys)),
                  s(:send, nil, :assert_equal,
                    s(:array,
                      s(:lvar, :enc),
                      s(:lvar, :enc)),
                    s(:send,
                      s(:send,
                        s(:lvar, :debug_lines), :[],
                        s(:send,
                          s(:lvar, :f), :path)), :map,
                      s(:block_pass,
                        s(:sym, :encoding))),
                    s(:lvar, :bug4361)))))),
          s(:if,
            s(:lvar, :f),
            s(:send,
              s(:lvar, :f), :close!), nil))),
      s(:def, :test_newline_in_block_parameters,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug,
            s(:str, "[ruby-dev:45292]")),
          s(:block,
            s(:send,
              s(:array,
                s(:str, ""),
                s(:str, "a"),
                s(:str, "a, b")), :product,
              s(:array,
                s(:str, ""),
                s(:str, ";x"),
                s(:array,
                  s(:str, ";"),
                  s(:str, "x")))),
            s(:args,
              s(:arg, :params)),
            s(:begin,
              s(:lvasgn, :params,
                s(:send,
                  s(:array,
                    s(:str, "|"),
                    s(:splat,
                      s(:lvar, :params)),
                    s(:str, "|")), :join,
                  s(:str, "\n"))),
              s(:send, nil, :assert_valid_syntax,
                s(:dstr,
                  s(:str, "1.times{"),
                  s(:begin,
                    s(:lvar, :params)),
                  s(:str, "}")),
                s(:str, "(string)"),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :bug)),
                  s(:str, " "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :params), :inspect)))))))),
      s(:block,
        s(:send, nil, :tap),
        s(:args,
          s(:arg, :_),
          s(:optarg, :bug6115,
            s(:str, "[ruby-dev:45308]")),
          s(:optarg, :blockcall,
            s(:str, "[\"elem\"].each_with_object [] do end")),
          s(:optarg, :methods,
            s(:array,
              s(:array,
                s(:str, "map"),
                s(:str, "no")),
              s(:array,
                s(:str, "inject([])"),
                s(:str, "with")))),
          s(:optarg, :blocks,
            s(:array,
              s(:array,
                s(:str, "do end"),
                s(:str, "do")),
              s(:array,
                s(:str, "{}"),
                s(:str, "brace")))),
          s(:restarg)),
        s(:block,
          s(:send,
            s(:array,
              s(:array,
                s(:str, "."),
                s(:str, "dot")),
              s(:array,
                s(:str, "::"),
                s(:str, "colon"))), :product,
            s(:lvar, :methods),
            s(:lvar, :blocks)),
          s(:args,
            s(:mlhs,
              s(:arg, :c),
              s(:arg, :n1)),
            s(:mlhs,
              s(:arg, :m),
              s(:arg, :n2)),
            s(:mlhs,
              s(:arg, :b),
              s(:arg, :n3))),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :n2), :==,
                s(:str, "do")),
              s(:lvasgn, :m,
                s(:send,
                  s(:send,
                    s(:lvar, :m), :tr_s,
                    s(:str, "()"),
                    s(:str, " ")), :strip)), nil),
            s(:lvasgn, :name,
              s(:dstr,
                s(:str, "test_"),
                s(:begin,
                  s(:lvar, :n3)),
                s(:str, "_block_after_blockcall_"),
                s(:begin,
                  s(:lvar, :n1)),
                s(:str, "_"),
                s(:begin,
                  s(:lvar, :n2)),
                s(:str, "_arg"))),
            s(:lvasgn, :code,
              s(:dstr,
                s(:begin,
                  s(:lvar, :blockcall)),
                s(:begin,
                  s(:lvar, :c)),
                s(:begin,
                  s(:lvar, :m)),
                s(:str, " "),
                s(:begin,
                  s(:lvar, :b)))),
            s(:block,
              s(:send, nil, :define_method,
                s(:lvar, :name)),
              s(:args),
              s(:send, nil, :assert_valid_syntax,
                s(:lvar, :code),
                s(:lvar, :bug6115)))))),
      s(:def, :test_do_block_in_cmdarg,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9726,
            s(:str, "[ruby-core:61950] [Bug #9726]")),
          s(:send, nil, :assert_valid_syntax,
            s(:str, "tap (proc do end)"),
            s(:str, "(string)"),
            s(:lvar, :bug9726)))),
      s(:def, :test_keyword_rest,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5989,
            s(:str, "[ruby-core:42455]")),
          s(:send, nil, :assert_valid_syntax,
            s(:str, "def kwrest_test(**a) a; end"),
            s(:str, "(string)"),
            s(:lvar, :bug5989)),
          s(:send, nil, :assert_valid_syntax,
            s(:str, "def kwrest_test2(**a, &b) end"),
            s(:str, "(string)"),
            s(:lvar, :bug5989)),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :kw,
            s(:args,
              s(:kwrestarg, :a)),
            s(:lvar, :a)),
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:send,
              s(:lvar, :o), :kw),
            s(:lvar, :bug5989)),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:sym, :foo),
                s(:int, 1))),
            s(:send,
              s(:lvar, :o), :kw,
              s(:hash,
                s(:pair,
                  s(:sym, :foo),
                  s(:int, 1)))),
            s(:lvar, :bug5989)),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:sym, :foo),
                s(:int, 1)),
              s(:pair,
                s(:sym, :bar),
                s(:int, 2))),
            s(:send,
              s(:lvar, :o), :kw,
              s(:hash,
                s(:pair,
                  s(:sym, :foo),
                  s(:int, 1)),
                s(:pair,
                  s(:sym, :bar),
                  s(:int, 2)))),
            s(:lvar, :bug5989)),
          s(:block,
            s(:send,
              s(:const, nil, :EnvUtil), :under_gc_stress),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "def o.m(k: 0) k end"))),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:lvar, :o), :m,
              s(:hash,
                s(:pair,
                  s(:sym, :k),
                  s(:int, 42)))),
            s(:str, "[ruby-core:45744]")),
          s(:lvasgn, :bug7922,
            s(:str, "[ruby-core:52744] [Bug #7922]")),
          s(:defs,
            s(:lvar, :o), :bug7922,
            s(:args,
              s(:kwrestarg)), nil),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :ArgumentError),
              s(:lvar, :bug7922)),
            s(:args),
            s(:send,
              s(:lvar, :o), :bug7922,
              s(:hash,
                s(:pair,
                  s(:sym, :foo),
                  s(:int, 42))))))),
      s(:class,
        s(:const, nil, :KW2), nil,
        s(:def, :kw,
          s(:args,
            s(:kwoptarg, :k1,
              s(:int, 1)),
            s(:kwoptarg, :k2,
              s(:int, 2))),
          s(:array,
            s(:lvar, :k1),
            s(:lvar, :k2)))),
      s(:def, :test_keyword_splat,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_valid_syntax,
            s(:str, "foo(**h)"),
            s(:str, "(string)")),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :KW2), :new)),
          s(:lvasgn, :h,
            s(:hash,
              s(:pair,
                s(:sym, :k1),
                s(:int, 11)),
              s(:pair,
                s(:sym, :k2),
                s(:int, 12)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 11),
              s(:int, 12)),
            s(:send,
              s(:lvar, :o), :kw,
              s(:hash,
                s(:kwsplat,
                  s(:lvar, :h))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 11),
              s(:int, 12)),
            s(:send,
              s(:lvar, :o), :kw,
              s(:hash,
                s(:pair,
                  s(:sym, :k2),
                  s(:int, 22)),
                s(:kwsplat,
                  s(:lvar, :h))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 11),
              s(:int, 22)),
            s(:send,
              s(:lvar, :o), :kw,
              s(:hash,
                s(:kwsplat,
                  s(:lvar, :h)),
                s(:kwsplat,
                  s(:hash,
                    s(:pair,
                      s(:sym, :k2),
                      s(:int, 22))))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 11),
              s(:int, 12)),
            s(:send,
              s(:lvar, :o), :kw,
              s(:hash,
                s(:kwsplat,
                  s(:hash,
                    s(:pair,
                      s(:sym, :k2),
                      s(:int, 22)))),
                s(:kwsplat,
                  s(:lvar, :h))))))),
      s(:def, :test_keyword_duplicated_splat,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug10315,
            s(:str, "[ruby-core:65368] [Bug #10315]")),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :KW2), :new)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 23),
              s(:int, 2)),
            s(:send,
              s(:lvar, :o), :kw,
              s(:hash,
                s(:kwsplat,
                  s(:hash,
                    s(:pair,
                      s(:sym, :k1),
                      s(:int, 22)))),
                s(:kwsplat,
                  s(:hash,
                    s(:pair,
                      s(:sym, :k1),
                      s(:int, 23)))))),
            s(:lvar, :bug10315)),
          s(:lvasgn, :h,
            s(:hash,
              s(:pair,
                s(:sym, :k3),
                s(:int, 31)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :kw,
              s(:hash,
                s(:kwsplat,
                  s(:lvar, :h))))),
          s(:lvasgn, :h,
            s(:hash,
              s(:pair,
                s(:str, "k1"),
                s(:int, 11)),
              s(:pair,
                s(:sym, :k2),
                s(:int, 12)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :kw,
              s(:hash,
                s(:kwsplat,
                  s(:lvar, :h))))))),
      s(:def, :test_keyword_duplicated,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug10315,
            s(:str, "[ruby-core:65625] [Bug #10315]")),
          s(:lvasgn, :a,
            s(:array)),
          s(:defs,
            s(:lvar, :a), :add,
            s(:args,
              s(:arg, :x)),
            s(:begin,
              s(:send, nil, :push,
                s(:lvar, :x)),
              s(:lvar, :x))),
          s(:defs,
            s(:lvar, :a), :f,
            s(:args,
              s(:kwarg, :k)),
            s(:lvar, :k)),
          s(:send,
            s(:lvar, :a), :clear),
          s(:lvasgn, :r,
            s(:nil)),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:regexp,
                s(:str, "duplicated"),
                s(:regopt))),
            s(:args),
            s(:lvasgn, :r,
              s(:send, nil, :eval,
                s(:str, "a.f(k: a.add(1), k: a.add(2))")))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:lvar, :r)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:lvar, :a),
            s(:lvar, :bug10315)),
          s(:send,
            s(:lvar, :a), :clear),
          s(:lvasgn, :r,
            s(:nil)),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:regexp,
                s(:str, "duplicated"),
                s(:regopt))),
            s(:args),
            s(:lvasgn, :r,
              s(:send, nil, :eval,
                s(:str, "a.f({k: a.add(1), k: a.add(2)})")))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:lvar, :r)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:lvar, :a),
            s(:lvar, :bug10315)))),
      s(:def, :test_keyword_empty_splat,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array),
          s(:dstr,
            s(:str, "      bug10719 = '[ruby-core:67446] [Bug #10719]'\n"),
            s(:str, "      assert_valid_syntax(\"foo(a: 1, **{})\", bug10719)\n")))),
      s(:def, :test_keyword_self_reference,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9593,
            s(:str, "[ruby-core:61299] [Bug #9593]")),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:regexp,
                s(:str, "circular argument reference - var"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_eval,
              s(:str, "def foo(var: defined?(var)) var end"))),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:lvar, :o), :foo,
              s(:hash,
                s(:pair,
                  s(:sym, :var),
                  s(:int, 42))))),
          s(:send, nil, :assert_equal,
            s(:str, "local-variable"),
            s(:send,
              s(:lvar, :o), :foo),
            s(:lvar, :bug9593)),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:regexp,
                s(:str, "circular argument reference - var"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_eval,
              s(:str, "def foo(var: var) var end"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :o), :foo),
            s(:lvar, :bug9593)),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:regexp,
                s(:str, "circular argument reference - var"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_eval,
              s(:str, "def foo(var: bar(var)) var end"))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:regexp,
                s(:str, "circular argument reference - var"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_eval,
              s(:str, "def foo(var: bar {var}) var end"))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:str, "")),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_eval,
              s(:str, "def foo(var: bar {|var| var}) var end"))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:str, "")),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_eval,
              s(:str, "def foo(var: def bar(var) var; end) var end"))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:str, "")),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_eval,
              s(:str, "proc {|var: 1| var}"))))),
      s(:def, :test_keyword_invalid_name,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug11663,
            s(:str, "[ruby-core:71356] [Bug #11663]")),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send, nil, :assert_syntax_error,
            s(:str, "def o.foo(arg1?:) end"),
            s(:regexp,
              s(:str, "arg1\\?"),
              s(:regopt)),
            s(:lvar, :bug11663)),
          s(:send, nil, :assert_syntax_error,
            s(:str, "def o.foo(arg1?:, arg2:) end"),
            s(:regexp,
              s(:str, "arg1\\?"),
              s(:regopt)),
            s(:lvar, :bug11663)),
          s(:send, nil, :assert_syntax_error,
            s(:str, "proc {|arg1?:|}"),
            s(:regexp,
              s(:str, "arg1\\?"),
              s(:regopt)),
            s(:lvar, :bug11663)),
          s(:send, nil, :assert_syntax_error,
            s(:str, "proc {|arg1?:, arg2:|}"),
            s(:regexp,
              s(:str, "arg1\\?"),
              s(:regopt)),
            s(:lvar, :bug11663)))),
      s(:def, :test_optional_self_reference,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9593,
            s(:str, "[ruby-core:61299] [Bug #9593]")),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:regexp,
                s(:str, "circular argument reference - var"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_eval,
              s(:str, "def foo(var = defined?(var)) var end"))),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:lvar, :o), :foo,
              s(:int, 42))),
          s(:send, nil, :assert_equal,
            s(:str, "local-variable"),
            s(:send,
              s(:lvar, :o), :foo),
            s(:lvar, :bug9593)),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:regexp,
                s(:str, "circular argument reference - var"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_eval,
              s(:str, "def foo(var = var) var end"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :o), :foo),
            s(:lvar, :bug9593)),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:regexp,
                s(:str, "circular argument reference - var"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_eval,
              s(:str, "def foo(var = bar(var)) var end"))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:regexp,
                s(:str, "circular argument reference - var"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_eval,
              s(:str, "def foo(var = bar {var}) var end"))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:regexp,
                s(:str, "circular argument reference - var"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_eval,
              s(:str, "def foo(var = (def bar;end; var)) var end"))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:regexp,
                s(:str, "circular argument reference - var"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_eval,
              s(:str, "def foo(var = (def self.bar;end; var)) var end"))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:str, "")),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_eval,
              s(:str, "def foo(var = bar {|var| var}) var end"))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:str, "")),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_eval,
              s(:str, "def foo(var = def bar(var) var; end) var end"))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:str, "")),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_eval,
              s(:str, "proc {|var = 1| var}"))))),
      s(:def, :test_warn_grouped_expression,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5214,
            s(:str, "[ruby-core:39050]")),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, ""),
              s(:lvar, :bug5214)),
            s(:args),
            s(:send, nil, :assert_valid_syntax,
              s(:str, "foo \\\n(\n  true)"),
              s(:str, "test"),
              s(:hash,
                s(:pair,
                  s(:sym, :verbose),
                  s(:true))))))),
      s(:def, :test_warn_unreachable,
        s(:args),
        s(:block,
          s(:send, nil, :assert_warning,
            s(:str, "test:3: warning: statement not reached\n")),
          s(:args),
          s(:begin,
            s(:lvasgn, :code,
              s(:dstr,
                s(:str, "loop do\n"),
                s(:str, "break\n"),
                s(:str, "foo\n"),
                s(:str, "end"))),
            s(:send, nil, :assert_valid_syntax,
              s(:lvar, :code),
              s(:str, "test"),
              s(:hash,
                s(:pair,
                  s(:sym, :verbose),
                  s(:true))))))),
      s(:def, :test_warn_balanced,
        s(:args),
        s(:begin,
          s(:lvasgn, :warning,
            s(:dstr,
              s(:str, "test:1: warning: `%s' after local variable or literal is interpreted as binary operator\n"),
              s(:str, "test:1: warning: even though it seems like %s\n"))),
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:sym, :**),
                  s(:str, "argument prefix")),
                s(:array,
                  s(:sym, :*),
                  s(:str, "argument prefix")),
                s(:array,
                  s(:sym, :<<),
                  s(:str, "here document")),
                s(:array,
                  s(:sym, :&),
                  s(:str, "argument prefix")),
                s(:array,
                  s(:sym, :+),
                  s(:str, "unary operator")),
                s(:array,
                  s(:sym, :-),
                  s(:str, "unary operator")),
                s(:array,
                  s(:sym, :/),
                  s(:str, "regexp literal")),
                s(:array,
                  s(:sym, :%),
                  s(:str, "string literal"))), :each),
            s(:args,
              s(:arg, :op),
              s(:arg, :syn)),
            s(:block,
              s(:send, nil, :assert_warning,
                s(:send,
                  s(:lvar, :warning), :%,
                  s(:array,
                    s(:lvar, :op),
                    s(:lvar, :syn)))),
              s(:args),
              s(:send, nil, :assert_valid_syntax,
                s(:dstr,
                  s(:str, "puts 1 "),
                  s(:begin,
                    s(:lvar, :op)),
                  s(:str, "0")),
                s(:str, "test"),
                s(:hash,
                  s(:pair,
                    s(:sym, :verbose),
                    s(:true)))))))),
      s(:def, :test_cmd_symbol_after_keyword,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6347,
            s(:str, "[ruby-dev:45563]")),
          s(:send, nil, :assert_not_label,
            s(:sym, :foo),
            s(:str, "if true then not_label:foo end"),
            s(:lvar, :bug6347)),
          s(:send, nil, :assert_not_label,
            s(:sym, :foo),
            s(:str, "if false; else not_label:foo end"),
            s(:lvar, :bug6347)),
          s(:send, nil, :assert_not_label,
            s(:sym, :foo),
            s(:str, "begin not_label:foo end"),
            s(:lvar, :bug6347)),
          s(:send, nil, :assert_not_label,
            s(:sym, :foo),
            s(:str, "begin ensure not_label:foo end"),
            s(:lvar, :bug6347)))),
      s(:def, :test_cmd_symbol_in_string,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6347,
            s(:str, "[ruby-dev:45563]")),
          s(:send, nil, :assert_not_label,
            s(:sym, :foo),
            s(:str, "\"\#{not_label:foo}\""),
            s(:lvar, :bug6347)))),
      s(:def, :test_cmd_symbol_singleton_class,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6347,
            s(:str, "[ruby-dev:45563]")),
          s(:ivasgn, :@not_label,
            s(:self)),
          s(:send, nil, :assert_not_label,
            s(:sym, :foo),
            s(:str, "class << not_label:foo; end"),
            s(:lvar, :bug6347)))),
      s(:def, :test_cmd_symbol_superclass,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6347,
            s(:str, "[ruby-dev:45563]")),
          s(:ivasgn, :@not_label,
            s(:const, nil, :Object)),
          s(:send, nil, :assert_not_label,
            s(:sym, :foo),
            s(:str, "class Foo < not_label:foo; end"),
            s(:lvar, :bug6347)))),
      s(:def, :test_no_label_with_percent,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_syntax_error,
            s(:str, "{%\"a\": 1}"),
            s(:regexp,
              s(:str, "unexpected ':'"),
              s(:regopt))),
          s(:send, nil, :assert_syntax_error,
            s(:str, "{%'a': 1}"),
            s(:regexp,
              s(:str, "unexpected ':'"),
              s(:regopt))),
          s(:send, nil, :assert_syntax_error,
            s(:str, "{%Q\"a\": 1}"),
            s(:regexp,
              s(:str, "unexpected ':'"),
              s(:regopt))),
          s(:send, nil, :assert_syntax_error,
            s(:str, "{%Q'a': 1}"),
            s(:regexp,
              s(:str, "unexpected ':'"),
              s(:regopt))),
          s(:send, nil, :assert_syntax_error,
            s(:str, "{%q\"a\": 1}"),
            s(:regexp,
              s(:str, "unexpected ':'"),
              s(:regopt))),
          s(:send, nil, :assert_syntax_error,
            s(:str, "{%q'a': 1}"),
            s(:regexp,
              s(:str, "unexpected ':'"),
              s(:regopt))))),
      s(:def, :test_block_after_cond,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug10653,
            s(:str, "[ruby-dev:48790] [Bug #10653]")),
          s(:send, nil, :assert_valid_syntax,
            s(:str, "false ? raise {} : tap {}"),
            s(:lvar, :bug10653)),
          s(:send, nil, :assert_valid_syntax,
            s(:str, "false ? raise do end : tap do end"),
            s(:lvar, :bug10653)))),
      s(:def, :test_paren_after_label,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug11456,
            s(:str, "[ruby-dev:49221] [Bug #11456]")),
          s(:send, nil, :assert_valid_syntax,
            s(:str, "{foo: (1 rescue 0)}"),
            s(:lvar, :bug11456)),
          s(:send, nil, :assert_valid_syntax,
            s(:str, "{foo: /=/}"),
            s(:lvar, :bug11456)))),
      s(:def, :test_percent_string_after_label,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug11812,
            s(:str, "[ruby-core:72084]")),
          s(:send, nil, :assert_valid_syntax,
            s(:str, "{label:%w(*)}"),
            s(:lvar, :bug11812)),
          s(:send, nil, :assert_valid_syntax,
            s(:str, "{label: %w(*)}"),
            s(:lvar, :bug11812)))),
      s(:def, :test_heredoc_after_label,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug11849,
            s(:str, "[ruby-core:72396] [Bug #11849]")),
          s(:send, nil, :assert_valid_syntax,
            s(:dstr,
              s(:str, "{label:<<DOC\n"),
              s(:str, "DOC\n"),
              s(:str, "}")),
            s(:lvar, :bug11849)),
          s(:send, nil, :assert_valid_syntax,
            s(:dstr,
              s(:str, "{label:<<-DOC\n"),
              s(:str, "DOC\n"),
              s(:str, "}")),
            s(:lvar, :bug11849)),
          s(:send, nil, :assert_valid_syntax,
            s(:dstr,
              s(:str, "{label:<<~DOC\n"),
              s(:str, "DOC\n"),
              s(:str, "}")),
            s(:lvar, :bug11849)),
          s(:send, nil, :assert_valid_syntax,
            s(:dstr,
              s(:str, "{label: <<DOC\n"),
              s(:str, "DOC\n"),
              s(:str, "}")),
            s(:lvar, :bug11849)),
          s(:send, nil, :assert_valid_syntax,
            s(:dstr,
              s(:str, "{label: <<-DOC\n"),
              s(:str, "DOC\n"),
              s(:str, "}")),
            s(:lvar, :bug11849)),
          s(:send, nil, :assert_valid_syntax,
            s(:dstr,
              s(:str, "{label: <<~DOC\n"),
              s(:str, "DOC\n"),
              s(:str, "}")),
            s(:lvar, :bug11849)))),
      s(:def, :test_cmdarg_kwarg_lvar_clashing_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug12073,
            s(:str, "[ruby-core:73816] [Bug#12073]")),
          s(:lvasgn, :a,
            s(:int, 1)),
          s(:send, nil, :assert_valid_syntax,
            s(:str, "a b: 1")),
          s(:send, nil, :assert_valid_syntax,
            s(:str, "a = 1; a b: 1"),
            s(:lvar, :bug12073)))),
      s(:def, :test_duplicated_arg,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_syntax_error,
            s(:str, "def foo(a, a) end"),
            s(:regexp,
              s(:str, "duplicated argument name"),
              s(:regopt))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:def, :foo,
              s(:args,
                s(:arg, :_),
                s(:arg, :_)), nil)))),
      s(:def, :test_duplicated_rest,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_syntax_error,
            s(:str, "def foo(a, *a) end"),
            s(:regexp,
              s(:str, "duplicated argument name"),
              s(:regopt))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:def, :foo,
              s(:args,
                s(:arg, :_),
                s(:restarg, :_)), nil)))),
      s(:def, :test_duplicated_opt,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_syntax_error,
            s(:str, "def foo(a, a=1) end"),
            s(:regexp,
              s(:str, "duplicated argument name"),
              s(:regopt))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:def, :foo,
              s(:args,
                s(:arg, :_),
                s(:optarg, :_,
                  s(:int, 1))), nil)))),
      s(:def, :test_duplicated_opt_rest,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_syntax_error,
            s(:str, "def foo(a=1, *a) end"),
            s(:regexp,
              s(:str, "duplicated argument name"),
              s(:regopt))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:def, :foo,
              s(:args,
                s(:optarg, :_,
                  s(:int, 1)),
                s(:restarg, :_)), nil)))),
      s(:def, :test_duplicated_rest_opt,
        s(:args),
        s(:send, nil, :assert_syntax_error,
          s(:str, "def foo(*a, a=1) end"),
          s(:regexp,
            s(:str, "duplicated argument name"),
            s(:regopt)))),
      s(:def, :test_duplicated_rest_post,
        s(:args),
        s(:send, nil, :assert_syntax_error,
          s(:str, "def foo(*a, a) end"),
          s(:regexp,
            s(:str, "duplicated argument name"),
            s(:regopt)))),
      s(:def, :test_duplicated_opt_post,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_syntax_error,
            s(:str, "def foo(a=1, a) end"),
            s(:regexp,
              s(:str, "duplicated argument name"),
              s(:regopt))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:def, :foo,
              s(:args,
                s(:optarg, :_,
                  s(:int, 1)),
                s(:arg, :_)), nil)))),
      s(:def, :test_duplicated_kw,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_syntax_error,
            s(:str, "def foo(a, a: 1) end"),
            s(:regexp,
              s(:str, "duplicated argument name"),
              s(:regopt))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:def, :foo,
              s(:args,
                s(:arg, :_),
                s(:kwoptarg, :_,
                  s(:int, 1))), nil)))),
      s(:def, :test_duplicated_rest_kw,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_syntax_error,
            s(:str, "def foo(*a, a: 1) end"),
            s(:regexp,
              s(:str, "duplicated argument name"),
              s(:regopt))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:def, :foo,
              s(:args,
                s(:restarg, :_),
                s(:kwoptarg, :_,
                  s(:int, 1))), nil)))),
      s(:def, :test_duplicated_opt_kw,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_syntax_error,
            s(:str, "def foo(a=1, a: 1) end"),
            s(:regexp,
              s(:str, "duplicated argument name"),
              s(:regopt))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:def, :foo,
              s(:args,
                s(:optarg, :_,
                  s(:int, 1)),
                s(:kwoptarg, :_,
                  s(:int, 1))), nil)))),
      s(:def, :test_duplicated_kw_kwrest,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_syntax_error,
            s(:str, "def foo(a: 1, **a) end"),
            s(:regexp,
              s(:str, "duplicated argument name"),
              s(:regopt))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:def, :foo,
              s(:args,
                s(:kwoptarg, :_,
                  s(:int, 1)),
                s(:kwrestarg, :_)), nil)))),
      s(:def, :test_duplicated_rest_kwrest,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_syntax_error,
            s(:str, "def foo(*a, **a) end"),
            s(:regexp,
              s(:str, "duplicated argument name"),
              s(:regopt))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:def, :foo,
              s(:args,
                s(:restarg, :_),
                s(:kwrestarg, :_)), nil)))),
      s(:def, :test_duplicated_opt_kwrest,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_syntax_error,
            s(:str, "def foo(a=1, **a) end"),
            s(:regexp,
              s(:str, "duplicated argument name"),
              s(:regopt))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:def, :foo,
              s(:args,
                s(:optarg, :_,
                  s(:int, 1)),
                s(:kwrestarg, :_)), nil)))),
      s(:def, :test_duplicated_when,
        s(:args),
        s(:begin,
          s(:lvasgn, :w,
            s(:str, "warning: duplicated when clause is ignored")),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:regexp,
                s(:str, "3: "),
                s(:begin,
                  s(:lvar, :w)),
                s(:str, ".+4: "),
                s(:begin,
                  s(:lvar, :w)),
                s(:str, ".+4: "),
                s(:begin,
                  s(:lvar, :w)),
                s(:str, ".+5: "),
                s(:begin,
                  s(:lvar, :w)),
                s(:str, ".+5: "),
                s(:begin,
                  s(:lvar, :w)),
                s(:regopt, :m))),
            s(:args),
            s(:send, nil, :eval,
              s(:dstr,
                s(:str, "\n"),
                s(:str, "        case 1\n"),
                s(:str, "        when 1, 1\n"),
                s(:str, "        when 1, 1\n"),
                s(:str, "        when 1, 1\n"),
                s(:str, "        end\n"),
                s(:str, "      ")))),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:regexp,
                s(:begin,
                  s(:lvar, :w)),
                s(:regopt))),
            s(:args),
            s(:begin,
              s(:lvasgn, :a,
                s(:int, 1)),
              s(:send, nil, :eval,
                s(:dstr,
                  s(:str, "\n"),
                  s(:str, "        case 1\n"),
                  s(:str, "        when 1, 1\n"),
                  s(:str, "        when 1, a\n"),
                  s(:str, "        when 1, 1\n"),
                  s(:str, "        end\n"),
                  s(:str, "      "))))))),
      s(:def, :test_invalid_next,
        s(:args),
        s(:send, nil, :assert_syntax_error,
          s(:str, "def m; next; end"),
          s(:regexp,
            s(:str, "Invalid next"),
            s(:regopt)))),
      s(:def, :test_lambda_with_space,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature6390,
            s(:str, "[ruby-dev:45605]")),
          s(:send, nil, :assert_valid_syntax,
            s(:str, "-> (x, y) {}"),
            s(:str, "(string)"),
            s(:lvar, :feature6390)))),
      s(:def, :test_do_block_in_cmdarg_begin,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6419,
            s(:str, "[ruby-dev:45631]")),
          s(:send, nil, :assert_valid_syntax,
            s(:str, "p begin 1.times do 1 end end"),
            s(:str, "(string)"),
            s(:lvar, :bug6419)))),
      s(:def, :test_do_block_in_call_args,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9308,
            s(:str, "[ruby-core:59342] [Bug #9308]")),
          s(:send, nil, :assert_valid_syntax,
            s(:str, "bar def foo; self.each do end end"),
            s(:lvar, :bug9308)))),
      s(:def, :test_do_block_in_lambda,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug11107,
            s(:str, "[ruby-core:69017] [Bug #11107]")),
          s(:send, nil, :assert_valid_syntax,
            s(:str, "p ->() do a() do end end"),
            s(:lvar, :bug11107)))),
      s(:def, :test_do_block_after_lambda,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug11380,
            s(:str, "[ruby-core:70067] [Bug #11380]")),
          s(:send, nil, :assert_valid_syntax,
            s(:str, "p -> { :hello }, a: 1 do end"),
            s(:lvar, :bug11380)))),
      s(:def, :test_reserved_method_no_args,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6403,
            s(:str, "[ruby-dev:45626]")),
          s(:send, nil, :assert_valid_syntax,
            s(:str, "def self; :foo; end"),
            s(:str, "(string)"),
            s(:lvar, :bug6403)))),
      s(:def, :test_unassignable,
        s(:args),
        s(:begin,
          s(:lvasgn, :gvar,
            s(:send, nil, :global_variables)),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "self"),
                s(:str, "nil"),
                s(:str, "true"),
                s(:str, "false"),
                s(:str, "__FILE__"),
                s(:str, "__LINE__"),
                s(:str, "__ENCODING__")), :each),
            s(:args,
              s(:arg, :kwd)),
            s(:begin,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :SyntaxError)),
                s(:args),
                s(:send, nil, :eval,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :kwd)),
                    s(:str, " = nil")))),
              s(:send, nil, :assert_equal,
                s(:lvar, :gvar),
                s(:send, nil, :global_variables)))))),
      s(:casgn, nil, :Bug7559,
        s(:str, "[ruby-dev:46737]")),
      s(:def, :test_lineno_command_call_quote,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:send,
              s(:int, 501), :+,
              s(:int, 1))),
          s(:lvasgn, :actual,
            s(:send, nil, :caller_lineno,
              s(:dstr,
                s(:str, "a\n"),
                s(:str, "b\n"),
                s(:str, "c\n"),
                s(:str, "d\n"),
                s(:str, "e")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :actual),
            s(:dstr,
              s(:begin,
                s(:const, nil, :Bug7559)),
              s(:str, ": "))))),
      s(:def, :assert_dedented_heredoc,
        s(:args,
          s(:arg, :expect),
          s(:arg, :result),
          s(:optarg, :mesg,
            s(:str, ""))),
        s(:block,
          s(:send, nil, :all_assertions,
            s(:lvar, :mesg)),
          s(:args,
            s(:arg, :a)),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "eos"),
                s(:str, "\"eos\""),
                s(:str, "'eos'"),
                s(:str, "`eos`")), :each),
            s(:args,
              s(:arg, :eos)),
            s(:block,
              s(:send,
                s(:lvar, :a), :for,
                s(:lvar, :eos)),
              s(:args),
              s(:send, nil, :assert_equal,
                s(:send, nil, :eval,
                  s(:dstr,
                    s(:str, "<<-"),
                    s(:begin,
                      s(:lvar, :eos)),
                    s(:str, "\n"),
                    s(:begin,
                      s(:lvar, :expect)),
                    s(:str, "eos\n"))),
                s(:send, nil, :eval,
                  s(:dstr,
                    s(:str, "<<~"),
                    s(:begin,
                      s(:lvar, :eos)),
                    s(:str, "\n"),
                    s(:begin,
                      s(:lvar, :result)),
                    s(:str, "eos\n")))))))),
      s(:def, :test_dedented_heredoc_without_indentation,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:dstr,
              s(:str, " y\n"),
              s(:str, "z\n"))),
          s(:lvasgn, :expect,
            s(:lvar, :result)),
          s(:send, nil, :assert_dedented_heredoc,
            s(:lvar, :expect),
            s(:lvar, :result)))),
      s(:def, :test_dedented_heredoc_with_indentation,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:dstr,
              s(:str, "     a\n"),
              s(:str, "    b\n"))),
          s(:lvasgn, :expect,
            s(:dstr,
              s(:str, " a\n"),
              s(:str, "b\n"))),
          s(:send, nil, :assert_dedented_heredoc,
            s(:lvar, :expect),
            s(:lvar, :result)))),
      s(:def, :test_dedented_heredoc_with_blank_less_indented_line,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:dstr,
              s(:str, "    a\n"),
              s(:str, "  \n"),
              s(:str, "    b\n"))),
          s(:lvasgn, :expect,
            s(:dstr,
              s(:str, "a\n"),
              s(:str, "\n"),
              s(:str, "b\n"))),
          s(:send, nil, :assert_dedented_heredoc,
            s(:lvar, :expect),
            s(:lvar, :result)))),
      s(:def, :test_dedented_heredoc_with_blank_less_indented_line_escaped,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:dstr,
              s(:str, "    a\n"),
              s(:str, "\\ \\ \n"),
              s(:str, "    b\n"))),
          s(:lvasgn, :expect,
            s(:lvar, :result)),
          s(:send, nil, :assert_dedented_heredoc,
            s(:lvar, :expect),
            s(:lvar, :result)))),
      s(:def, :test_dedented_heredoc_with_blank_more_indented_line,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:dstr,
              s(:str, "    a\n"),
              s(:str, "      \n"),
              s(:str, "    b\n"))),
          s(:lvasgn, :expect,
            s(:dstr,
              s(:str, "a\n"),
              s(:str, "  \n"),
              s(:str, "b\n"))),
          s(:send, nil, :assert_dedented_heredoc,
            s(:lvar, :expect),
            s(:lvar, :result)))),
      s(:def, :test_dedented_heredoc_with_blank_more_indented_line_escaped,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:dstr,
              s(:str, "    a\n"),
              s(:str, "\\ \\ \\ \\ \\ \\ \n"),
              s(:str, "    b\n"))),
          s(:lvasgn, :expect,
            s(:lvar, :result)),
          s(:send, nil, :assert_dedented_heredoc,
            s(:lvar, :expect),
            s(:lvar, :result)))),
      s(:def, :test_dedented_heredoc_with_empty_line,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:dstr,
              s(:str, "      This would contain specially formatted text.\n"),
              s(:str, "\n"),
              s(:str, "      That might span many lines\n"))),
          s(:lvasgn, :expect,
            s(:dstr,
              s(:str, "This would contain specially formatted text."),
              s(:str, "\n"),
              s(:str, ""),
              s(:str, "\n"),
              s(:str, "That might span many lines"),
              s(:str, "\n"))),
          s(:send, nil, :assert_dedented_heredoc,
            s(:lvar, :expect),
            s(:lvar, :result)))),
      s(:def, :test_dedented_heredoc_with_interpolated_expression,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:dstr,
              s(:str, "  \#{1}a"),
              s(:str, "\n"),
              s(:str, " zy\n"))),
          s(:lvasgn, :expect,
            s(:dstr,
              s(:str, " \#{1}a"),
              s(:str, "\n"),
              s(:str, "zy\n"))),
          s(:send, nil, :assert_dedented_heredoc,
            s(:lvar, :expect),
            s(:lvar, :result)))),
      s(:def, :test_dedented_heredoc_with_interpolated_string,
        s(:args),
        s(:begin,
          s(:lvasgn, :w,
            s(:str, "")),
          s(:lvasgn, :result,
            s(:dstr,
              s(:str, " \#{mesg} a\n"),
              s(:str, "  zy\n"))),
          s(:lvasgn, :expect,
            s(:dstr,
              s(:str, "\#{mesg} a"),
              s(:str, "\n"),
              s(:str, " zy"),
              s(:str, "\n"))),
          s(:send, nil, :assert_dedented_heredoc,
            s(:lvar, :expect),
            s(:lvar, :result)))),
      s(:def, :test_dedented_heredoc_with_concatenation,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug11990,
            s(:str, "[ruby-core:72857] [Bug #11990] concatenated string should not be dedented")),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "eos"),
                s(:str, "\"eos\""),
                s(:str, "'eos'")), :each),
            s(:args,
              s(:arg, :eos)),
            s(:send, nil, :assert_equal,
              s(:str, "x\n  y"),
              s(:send, nil, :eval,
                s(:dstr,
                  s(:str, "<<~"),
                  s(:begin,
                    s(:lvar, :eos)),
                  s(:str, " '  y'\n  x\neos\n"))),
              s(:dstr,
                s(:begin,
                  s(:lvar, :bug11990)),
                s(:str, " with "),
                s(:begin,
                  s(:lvar, :eos))))),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "eos"),
                s(:str, "\"eos\""),
                s(:str, "'eos'"),
                s(:str, "`eos`")), :each),
            s(:args,
              s(:arg, :eos)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :_),
                  s(:lvasgn, :expect)),
                s(:send, nil, :eval,
                  s(:dstr,
                    s(:dstr,
                      s(:str, "[<<~"),
                      s(:begin,
                        s(:lvar, :eos)),
                      s(:str, ", '  x']\n")),
                    s(:str, "  y\n"),
                    s(:str, "eos\n")))),
              s(:send, nil, :assert_equal,
                s(:str, "  x"),
                s(:lvar, :expect),
                s(:lvar, :bug11990)))))),
      s(:def, :test_lineno_after_heredoc,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7559,
            s(:str, "[ruby-dev:46737]")),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :expected),
              s(:lvasgn, :_),
              s(:lvasgn, :actual)),
            s(:array,
              s(:int, 616),
              s(:dstr,
                s(:str, "    a\n"),
                s(:str, "    b\n"),
                s(:str, "    c\n"),
                s(:str, "    d\n")),
              s(:int, 616))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :actual),
            s(:lvar, :bug7559)))),
      s(:def, :test_lineno_operation_brace_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:send,
              s(:int, 626), :+,
              s(:int, 1))),
          s(:lvasgn, :actual,
            s(:block,
              s(:send, nil, :caller_lineno),
              s(:args), nil)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :actual)))),
      s(:def, :assert_constant_reassignment_nested,
        s(:args,
          s(:arg, :preset),
          s(:arg, :op),
          s(:arg, :expected),
          s(:optarg, :err,
            s(:array)),
          s(:optarg, :bug,
            s(:str, "[Bug #5449]"))),
        s(:block,
          s(:send,
            s(:array,
              s(:array,
                s(:str, "p "),
                s(:str, "")),
              s(:array,
                s(:str, ""),
                s(:str, "p Foo::Bar"))), :each),
          s(:args,
            s(:arg, :p1),
            s(:arg, :p2)),
          s(:begin,
            s(:lvasgn, :src,
              s(:send,
                s(:dstr,
                  s(:str, "      class Foo\n"),
                  s(:str, "        "),
                  s(:begin,
                    s(:if,
                      s(:lvar, :preset),
                      s(:send,
                        s(:str, "Bar = "), :+,
                        s(:lvar, :preset)), nil)),
                  s(:str, "\n"),
                  s(:str, "      end\n"),
                  s(:str, "      "),
                  s(:begin,
                    s(:lvar, :p1)),
                  s(:str, "Foo::Bar "),
                  s(:begin,
                    s(:lvar, :op)),
                  s(:str, "= 42\n"),
                  s(:str, "      "),
                  s(:begin,
                    s(:lvar, :p2)),
                  s(:str, "\n")), :gsub,
                s(:regexp,
                  s(:str, "^\\s*\\n"),
                  s(:regopt)),
                s(:str, ""))),
            s(:lvasgn, :msg,
              s(:dstr,
                s(:str, "# "),
                s(:begin,
                  s(:lvar, :bug)),
                s(:str, "\n"),
                s(:begin,
                  s(:lvar, :src)))),
            s(:send, nil, :assert_valid_syntax,
              s(:lvar, :src),
              s(:send,
                s(:send,
                  s(:send, nil, :caller_locations,
                    s(:int, 1),
                    s(:int, 1)), :[],
                  s(:int, 0)), :path),
              s(:lvar, :msg)),
            s(:send, nil, :assert_in_out_err,
              s(:array),
              s(:lvar, :src),
              s(:lvar, :expected),
              s(:lvar, :err),
              s(:lvar, :msg))))),
      s(:def, :test_constant_reassignment_nested,
        s(:args),
        s(:begin,
          s(:lvasgn, :already,
            s(:regexp,
              s(:str, "already initialized constant Foo::Bar"),
              s(:regopt))),
          s(:lvasgn, :uninitialized,
            s(:regexp,
              s(:str, "uninitialized constant Foo::Bar"),
              s(:regopt))),
          s(:send, nil, :assert_constant_reassignment_nested,
            s(:nil),
            s(:str, "||"),
            s(:array,
              s(:str, "42"))),
          s(:send, nil, :assert_constant_reassignment_nested,
            s(:str, "false"),
            s(:str, "||"),
            s(:array,
              s(:str, "42")),
            s(:lvar, :already)),
          s(:send, nil, :assert_constant_reassignment_nested,
            s(:str, "true"),
            s(:str, "||"),
            s(:array,
              s(:str, "true"))),
          s(:send, nil, :assert_constant_reassignment_nested,
            s(:nil),
            s(:str, "&&"),
            s(:array),
            s(:lvar, :uninitialized)),
          s(:send, nil, :assert_constant_reassignment_nested,
            s(:str, "false"),
            s(:str, "&&"),
            s(:array,
              s(:str, "false"))),
          s(:send, nil, :assert_constant_reassignment_nested,
            s(:str, "true"),
            s(:str, "&&"),
            s(:array,
              s(:str, "42")),
            s(:lvar, :already)),
          s(:send, nil, :assert_constant_reassignment_nested,
            s(:nil),
            s(:str, "+"),
            s(:array),
            s(:lvar, :uninitialized)),
          s(:send, nil, :assert_constant_reassignment_nested,
            s(:str, "false"),
            s(:str, "+"),
            s(:array),
            s(:regexp,
              s(:str, "undefined method"),
              s(:regopt))),
          s(:send, nil, :assert_constant_reassignment_nested,
            s(:str, "11"),
            s(:str, "+"),
            s(:array,
              s(:str, "53")),
            s(:lvar, :already)))),
      s(:def, :assert_constant_reassignment_toplevel,
        s(:args,
          s(:arg, :preset),
          s(:arg, :op),
          s(:arg, :expected),
          s(:optarg, :err,
            s(:array)),
          s(:optarg, :bug,
            s(:str, "[Bug #5449]"))),
        s(:block,
          s(:send,
            s(:array,
              s(:array,
                s(:str, "p "),
                s(:str, "")),
              s(:array,
                s(:str, ""),
                s(:str, "p ::Bar"))), :each),
          s(:args,
            s(:arg, :p1),
            s(:arg, :p2)),
          s(:begin,
            s(:lvasgn, :src,
              s(:send,
                s(:dstr,
                  s(:str, "      "),
                  s(:begin,
                    s(:if,
                      s(:lvar, :preset),
                      s(:send,
                        s(:str, "Bar = "), :+,
                        s(:lvar, :preset)), nil)),
                  s(:str, "\n"),
                  s(:str, "      class Foo\n"),
                  s(:str, "        "),
                  s(:begin,
                    s(:lvar, :p1)),
                  s(:str, "::Bar "),
                  s(:begin,
                    s(:lvar, :op)),
                  s(:str, "= 42\n"),
                  s(:str, "        "),
                  s(:begin,
                    s(:lvar, :p2)),
                  s(:str, "\n"),
                  s(:str, "      end\n")), :gsub,
                s(:regexp,
                  s(:str, "^\\s*\\n"),
                  s(:regopt)),
                s(:str, ""))),
            s(:lvasgn, :msg,
              s(:dstr,
                s(:str, "# "),
                s(:begin,
                  s(:lvar, :bug)),
                s(:str, "\n"),
                s(:begin,
                  s(:lvar, :src)))),
            s(:send, nil, :assert_valid_syntax,
              s(:lvar, :src),
              s(:send,
                s(:send,
                  s(:send, nil, :caller_locations,
                    s(:int, 1),
                    s(:int, 1)), :[],
                  s(:int, 0)), :path),
              s(:lvar, :msg)),
            s(:send, nil, :assert_in_out_err,
              s(:array),
              s(:lvar, :src),
              s(:lvar, :expected),
              s(:lvar, :err),
              s(:lvar, :msg))))),
      s(:def, :test_constant_reassignment_toplevel,
        s(:args),
        s(:begin,
          s(:lvasgn, :already,
            s(:regexp,
              s(:str, "already initialized constant Bar"),
              s(:regopt))),
          s(:lvasgn, :uninitialized,
            s(:regexp,
              s(:str, "uninitialized constant Bar"),
              s(:regopt))),
          s(:send, nil, :assert_constant_reassignment_toplevel,
            s(:nil),
            s(:str, "||"),
            s(:array,
              s(:str, "42"))),
          s(:send, nil, :assert_constant_reassignment_toplevel,
            s(:str, "false"),
            s(:str, "||"),
            s(:array,
              s(:str, "42")),
            s(:lvar, :already)),
          s(:send, nil, :assert_constant_reassignment_toplevel,
            s(:str, "true"),
            s(:str, "||"),
            s(:array,
              s(:str, "true"))),
          s(:send, nil, :assert_constant_reassignment_toplevel,
            s(:nil),
            s(:str, "&&"),
            s(:array),
            s(:lvar, :uninitialized)),
          s(:send, nil, :assert_constant_reassignment_toplevel,
            s(:str, "false"),
            s(:str, "&&"),
            s(:array,
              s(:str, "false"))),
          s(:send, nil, :assert_constant_reassignment_toplevel,
            s(:str, "true"),
            s(:str, "&&"),
            s(:array,
              s(:str, "42")),
            s(:lvar, :already)),
          s(:send, nil, :assert_constant_reassignment_toplevel,
            s(:nil),
            s(:str, "+"),
            s(:array),
            s(:lvar, :uninitialized)),
          s(:send, nil, :assert_constant_reassignment_toplevel,
            s(:str, "false"),
            s(:str, "+"),
            s(:array),
            s(:regexp,
              s(:str, "undefined method"),
              s(:regopt))),
          s(:send, nil, :assert_constant_reassignment_toplevel,
            s(:str, "11"),
            s(:str, "+"),
            s(:array,
              s(:str, "53")),
            s(:lvar, :already)))),
      s(:def, :test_integer_suffix,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:str, "1if true"),
              s(:str, "begin 1end")), :each),
          s(:args,
            s(:arg, :src)),
          s(:begin,
            s(:send, nil, :assert_valid_syntax,
              s(:lvar, :src)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send, nil, :eval,
                s(:lvar, :src)),
              s(:lvar, :src))))),
      s(:def, :test_value_of_def,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array),
          s(:dstr,
            s(:str, "      assert_equal(:foo, (def foo; end))\n"),
            s(:str, "      assert_equal(:foo, (def (Object.new).foo; end))\n")))),
      s(:def, :test_heredoc_cr,
        s(:args),
        s(:send, nil, :assert_syntax_error,
          s(:dstr,
            s(:str, "puts <<"),
            s(:str, "EOS\n"),
            s(:str, "ng\n"),
            s(:str, "EOS\r"),
            s(:str, "NO\n")),
          s(:regexp,
            s(:str, "can't find string \"EOS\" anywhere before EOF"),
            s(:regopt)))),
      s(:def, :test__END___cr,
        s(:args),
        s(:send, nil, :assert_syntax_error,
          s(:str, "__END__\r<<<<<\n"),
          s(:regexp,
            s(:str, "unexpected <<"),
            s(:regopt)))),
      s(:def, :test_warning_for_cr,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature8699,
            s(:str, "[ruby-core:56240] [Feature #8699]")),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:regexp,
                s(:str, "encountered \\\\r"),
                s(:regopt)),
              s(:lvar, :feature8699)),
            s(:args),
            s(:send, nil, :eval,
              s(:dstr,
                s(:str, "\r"),
                s(:str, "__id__\r")))))),
      s(:def, :test_unexpected_fraction,
        s(:args),
        s(:begin,
          s(:lvasgn, :msg,
            s(:regexp,
              s(:str, "unexpected fraction"),
              s(:regopt))),
          s(:send, nil, :assert_syntax_error,
            s(:str, "0x0.0"),
            s(:lvar, :msg)),
          s(:send, nil, :assert_syntax_error,
            s(:str, "0b0.0"),
            s(:lvar, :msg)),
          s(:send, nil, :assert_syntax_error,
            s(:str, "0d0.0"),
            s(:lvar, :msg)),
          s(:send, nil, :assert_syntax_error,
            s(:str, "0o0.0"),
            s(:lvar, :msg)),
          s(:send, nil, :assert_syntax_error,
            s(:str, "0.0.0"),
            s(:lvar, :msg)))),
      s(:def, :test_error_message_encoding,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug10114,
            s(:str, "[ruby-core:64228] [Bug #10114]")),
          s(:lvasgn, :code,
            s(:dstr,
              s(:str, "# -*- coding: utf-8 -*-\n"),
              s(:str, "def n \"∈\"; end"))),
          s(:send, nil, :assert_syntax_error,
            s(:lvar, :code),
            s(:regexp,
              s(:str, "def n \"\\u{2208}\"; end"),
              s(:regopt)),
            s(:lvar, :bug10114)))),
      s(:def, :test_bad_kwarg,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug10545,
            s(:str, "[ruby-dev:48742] [Bug #10545]")),
          s(:lvasgn, :src,
            s(:str, "def foo(A: a) end")),
          s(:send, nil, :assert_syntax_error,
            s(:lvar, :src),
            s(:regexp,
              s(:str, "formal argument"),
              s(:regopt)),
            s(:lvar, :bug10545)))),
      s(:def, :test_null_range_cmdarg,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug10957,
            s(:str, "[ruby-core:68477] [Bug #10957]")),
          s(:send, nil, :assert_ruby_status,
            s(:array,
              s(:str, "-c"),
              s(:str, "-e"),
              s(:str, "p ()..0")),
            s(:str, ""),
            s(:lvar, :bug10957)),
          s(:send, nil, :assert_ruby_status,
            s(:array,
              s(:str, "-c"),
              s(:str, "-e"),
              s(:str, "p ()...0")),
            s(:str, ""),
            s(:lvar, :bug10957)),
          s(:send, nil, :assert_syntax_error,
            s(:str, "0..%w."),
            s(:regexp,
              s(:str, "unterminated string"),
              s(:regopt)),
            s(:lvar, :bug10957)),
          s(:send, nil, :assert_syntax_error,
            s(:str, "0...%w."),
            s(:regexp,
              s(:str, "unterminated string"),
              s(:regopt)),
            s(:lvar, :bug10957)))),
      s(:def, :test_too_big_nth_ref,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug11192,
            s(:str, "[ruby-core:69393] [Bug #11192]")),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:regexp,
                s(:str, "too big"),
                s(:regopt)),
              s(:lvar, :bug11192)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "$99999999999999999"))))),
      s(:def, :test_invalid_symbol_space,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_syntax_error,
            s(:str, ": foo"),
            s(:regexp,
              s(:str, "unexpected ':'"),
              s(:regopt))),
          s(:send, nil, :assert_syntax_error,
            s(:str, ": #\n foo"),
            s(:regexp,
              s(:str, "unexpected ':'"),
              s(:regopt))),
          s(:send, nil, :assert_syntax_error,
            s(:str, ":#\n foo"),
            s(:regexp,
              s(:str, "unexpected ':'"),
              s(:regopt))))),
      s(:def, :test_fluent_dot,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_valid_syntax,
            s(:str, "a\n.foo")),
          s(:send, nil, :assert_valid_syntax,
            s(:str, "a\n&.foo")))),
      s(:def, :test_no_warning_logop_literal,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "true||raise;nil"))),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "false&&raise;nil"))),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, "")),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "''||raise;nil"))))),
      s(:def, :test_alias_symbol,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8851,
            s(:str, "[ruby-dev:47681] [Bug #8851]")),
          s(:lvasgn, :formats,
            s(:array,
              s(:str, "%s"),
              s(:str, ":'%s'"),
              s(:str, ":\"%s\""),
              s(:str, "%%s(%s)"))),
          s(:block,
            s(:send, nil, :all_assertions,
              s(:lvar, :bug8851)),
            s(:args,
              s(:arg, :all)),
            s(:block,
              s(:send,
                s(:lvar, :formats), :product,
                s(:lvar, :formats)),
              s(:args,
                s(:arg, :form1),
                s(:arg, :form2)),
              s(:block,
                s(:send,
                  s(:lvar, :all), :for,
                  s(:lvasgn, :code,
                    s(:dstr,
                      s(:str, "alias "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :form1), :%,
                          s(:str, "a"))),
                      s(:str, " "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :form2), :%,
                          s(:str, "p")))))),
                s(:args),
                s(:send, nil, :assert_valid_syntax,
                  s(:lvar, :code))))))),
      s(:def, :test_undef_symbol,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8851,
            s(:str, "[ruby-dev:47681] [Bug #8851]")),
          s(:lvasgn, :formats,
            s(:array,
              s(:str, "%s"),
              s(:str, ":'%s'"),
              s(:str, ":\"%s\""),
              s(:str, "%%s(%s)"))),
          s(:block,
            s(:send, nil, :all_assertions,
              s(:lvar, :bug8851)),
            s(:args,
              s(:arg, :all)),
            s(:block,
              s(:send,
                s(:lvar, :formats), :product,
                s(:lvar, :formats)),
              s(:args,
                s(:arg, :form1),
                s(:arg, :form2)),
              s(:block,
                s(:send,
                  s(:lvar, :all), :for,
                  s(:lvasgn, :code,
                    s(:dstr,
                      s(:str, "undef "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :form1), :%,
                          s(:str, "a"))),
                      s(:str, ", "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :form2), :%,
                          s(:str, "p")))))),
                s(:args),
                s(:send, nil, :assert_valid_syntax,
                  s(:lvar, :code))))))),
      s(:send, nil, :private),
      s(:def, :not_label,
        s(:args,
          s(:arg, :x)),
        s(:begin,
          s(:ivasgn, :@result,
            s(:lvar, :x)),
          s(:or_asgn,
            s(:ivasgn, :@not_label),
            s(:nil)))),
      s(:def, :assert_not_label,
        s(:args,
          s(:arg, :expected),
          s(:arg, :src),
          s(:optarg, :message,
            s(:nil))),
        s(:begin,
          s(:ivasgn, :@result,
            s(:nil)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :SyntaxError),
              s(:lvar, :message)),
            s(:args),
            s(:send, nil, :eval,
              s(:lvar, :src))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:ivar, :@result),
            s(:lvar, :message)))),
      s(:def, :make_tmpsrc,
        s(:args,
          s(:arg, :f),
          s(:arg, :src)),
        s(:begin,
          s(:send,
            s(:lvar, :f), :open),
          s(:send,
            s(:lvar, :f), :truncate,
            s(:int, 0)),
          s(:send,
            s(:lvar, :f), :puts,
            s(:lvar, :src)),
          s(:send,
            s(:lvar, :f), :close))),
      s(:def, :with_script_lines,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :script_lines,
              s(:nil)),
            s(:lvasgn, :debug_lines,
              s(:hash)),
            s(:block,
              s(:send,
                s(:const, nil, :Object), :class_eval),
              s(:args),
              s(:begin,
                s(:if,
                  s(:defined?,
                    s(:const, nil, :SCRIPT_LINES__)),
                  s(:begin,
                    s(:lvasgn, :script_lines,
                      s(:const, nil, :SCRIPT_LINES__)),
                    s(:send, nil, :remove_const,
                      s(:sym, :SCRIPT_LINES__))), nil),
                s(:send, nil, :const_set,
                  s(:sym, :SCRIPT_LINES__),
                  s(:lvar, :debug_lines)))),
            s(:yield,
              s(:lvar, :debug_lines))),
          s(:block,
            s(:send,
              s(:const, nil, :Object), :class_eval),
            s(:args),
            s(:begin,
              s(:send, nil, :remove_const,
                s(:sym, :SCRIPT_LINES__)),
              s(:if,
                s(:lvar, :script_lines),
                s(:send, nil, :const_set,
                  s(:sym, :SCRIPT_LINES__),
                  s(:lvar, :script_lines)), nil))))),
      s(:def, :caller_lineno,
        s(:args,
          s(:restarg)),
        s(:send,
          s(:send,
            s(:send, nil, :caller_locations,
              s(:int, 1),
              s(:int, 1)), :[],
            s(:int, 0)), :lineno)))))
