s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :RationalSub),
    s(:const, nil, :Rational), nil),
  s(:class,
    s(:const, nil, :Rational_Test),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_ratsub,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :RationalSub), :__send__,
              s(:sym, :convert),
              s(:int, 1))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Numeric),
            s(:lvar, :c)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :RationalSub),
            s(:lvar, :c)),
          s(:lvasgn, :c2,
            s(:send,
              s(:lvar, :c), :+,
              s(:int, 1))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :RationalSub),
            s(:lvar, :c2)),
          s(:lvasgn, :c2,
            s(:send,
              s(:lvar, :c), :-,
              s(:int, 1))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :RationalSub),
            s(:lvar, :c2)),
          s(:lvasgn, :c3,
            s(:send,
              s(:lvar, :c), :-,
              s(:lvar, :c2))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :RationalSub),
            s(:lvar, :c3)),
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:lvar, :c))),
          s(:lvasgn, :c5,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:lvar, :s))),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:lvar, :c5)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :RationalSub),
            s(:lvar, :c5)),
          s(:lvasgn, :c1,
            s(:send, nil, :Rational,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :c1), :hash),
            s(:send,
              s(:lvar, :c), :hash),
            s(:str, "[ruby-dev:38850]")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:true),
              s(:true)),
            s(:array,
              s(:send,
                s(:lvar, :c), :eql?,
                s(:lvar, :c1)),
              s(:send,
                s(:lvar, :c1), :eql?,
                s(:lvar, :c)))))),
      s(:def, :test_eql_p,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 0))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 0))),
          s(:lvasgn, :c3,
            s(:send, nil, :Rational,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :c), :eql?,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :eql?,
              s(:lvar, :c3))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :eql?,
              s(:int, 0))))),
      s(:def, :test_hash,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Fixnum),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)), :hash)),
          s(:lvasgn, :h,
            s(:hash)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:send, nil, :Rational,
              s(:int, 0)),
            s(:int, 0)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 1)),
            s(:int, 1)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:send, nil, :Rational,
              s(:int, 2),
              s(:int, 1)),
            s(:int, 2)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:send, nil, :Rational,
              s(:int, 3),
              s(:int, 1)),
            s(:int, 3)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :h), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :h), :[],
              s(:send, nil, :Rational,
                s(:int, 2),
                s(:int, 1)))),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:send, nil, :Rational,
              s(:int, 0),
              s(:int, 1)),
            s(:int, 9)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :h), :size)))),
      s(:def, :test_freeze,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 1))),
          s(:send,
            s(:lvar, :c), :freeze),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :c), :frozen?)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :String),
            s(:send,
              s(:lvar, :c), :to_s)))),
      s(:def, :test_conv,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 0),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 0),
              s(:int, 1)),
            s(:lvar, :c)),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)),
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)),
              s(:send,
                s(:int, 2), :**,
                s(:int, 32))),
            s(:lvar, :c)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 1)),
            s(:array,
              s(:send,
                s(:lvar, :c), :numerator),
              s(:send,
                s(:lvar, :c), :denominator))),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@),
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@),
              s(:send,
                s(:int, 2), :**,
                s(:int, 32))),
            s(:lvar, :c)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, -1),
              s(:int, 1)),
            s(:array,
              s(:send,
                s(:lvar, :c), :numerator),
              s(:send,
                s(:lvar, :c), :denominator))),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)),
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)),
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@)),
            s(:lvar, :c)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, -1),
              s(:int, 1)),
            s(:array,
              s(:send,
                s(:lvar, :c), :numerator),
              s(:send,
                s(:lvar, :c), :denominator))),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@),
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@),
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32)), :-@)),
            s(:lvar, :c)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 1)),
            s(:array,
              s(:send,
                s(:lvar, :c), :numerator),
              s(:send,
                s(:lvar, :c), :denominator))),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 4)),
            s(:lvar, :c)),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 2),
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 4)),
            s(:lvar, :c)),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)),
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1)),
            s(:lvar, :c)),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 2)),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)),
              s(:int, 1)),
            s(:lvar, :c)),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 2),
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 2),
                s(:int, 5)),
              s(:send, nil, :Rational,
                s(:int, -4),
                s(:int, 5))),
            s(:lvar, :c)),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 2)),
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1)),
            s(:lvar, :c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 3)),
            s(:send, nil, :Rational,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1)),
            s(:send, nil, :Rational,
              s(:int, 3),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:float, 3.3), :to_r),
            s(:send, nil, :Rational,
              s(:float, 3.3))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send, nil, :Rational,
              s(:float, 3.3),
              s(:float, 3.3))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 3)),
            s(:send, nil, :Rational,
              s(:str, "3"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1)),
            s(:send, nil, :Rational,
              s(:str, "3.0"),
              s(:str, "3.0"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1)),
            s(:send, nil, :Rational,
              s(:str, "3/3"),
              s(:str, "3/3"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :Rational,
              s(:nil))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Rational,
              s(:str, ""))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:regexp,
                s(:str, "\\u{221a 2668}"),
                s(:regopt))),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :with_default_external,
                s(:const,
                  s(:const, nil, :Encoding), :UTF_8)),
              s(:args),
              s(:send, nil, :Rational,
                s(:str, "√♨")))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :Rational,
              s(:send,
                s(:const, nil, :Object), :new))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Rational)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:if,
            s(:send,
              s(:begin,
                s(:send,
                  s(:float, 0.0), :/,
                  s(:int, 0))), :nan?),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :FloatDomainError)),
              s(:args),
              s(:send, nil, :Rational,
                s(:send,
                  s(:float, 0.0), :/,
                  s(:int, 0)))), nil),
          s(:if,
            s(:send,
              s(:begin,
                s(:send,
                  s(:float, 1.0), :/,
                  s(:int, 0))), :infinite?),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :FloatDomainError)),
              s(:args),
              s(:send, nil, :Rational,
                s(:send,
                  s(:float, 1.0), :/,
                  s(:int, 0)))), nil))),
      s(:def, :test_attr,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :c), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :c), :denominator)),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 4),
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :c), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :c), :denominator)),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :c), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :c), :denominator)),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 4),
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :c), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :c), :denominator)),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :c), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :c), :denominator)),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 4),
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :c), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :c), :denominator)))),
      s(:def, :test_attr2,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :integer?)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :c), :real?)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 0)), :zero?)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 0),
                s(:int, 1)), :zero?)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 1)), :zero?)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 0)), :nonzero?)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 0),
                s(:int, 1)), :nonzero?)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 1)), :nonzero?)))),
      s(:def, :test_uplus,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1)), :+@)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -1)),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, -1)), :+@)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 1)), :+@)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -1),
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, 1)), :+@)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -1),
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, -1)), :+@)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, -1)), :+@)))),
      s(:def, :test_negate,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -1)),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1)), :-@)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, -1)), :-@)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -1),
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 1)), :-@)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, 1)), :-@)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, -1)), :-@)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -1),
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, -1)), :-@)))),
      s(:def, :test_add,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 7),
              s(:int, 6)),
            s(:send,
              s(:lvar, :c), :+,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5),
              s(:int, 2)),
            s(:send,
              s(:lvar, :c), :+,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 2.5),
            s(:send,
              s(:lvar, :c), :+,
              s(:float, 2.0))))),
      s(:def, :test_sub,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -1),
              s(:int, 6)),
            s(:send,
              s(:lvar, :c), :-,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -3),
              s(:int, 2)),
            s(:send,
              s(:lvar, :c), :-,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, -1.5),
            s(:send,
              s(:lvar, :c), :-,
              s(:float, 2.0))))),
      s(:def, :test_mul,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 3)),
            s(:send,
              s(:lvar, :c), :*,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 1)),
            s(:send,
              s(:lvar, :c), :*,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 1.0),
            s(:send,
              s(:lvar, :c), :*,
              s(:float, 2.0))))),
      s(:def, :test_div,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 3),
              s(:int, 4)),
            s(:send,
              s(:lvar, :c), :/,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 4)),
            s(:send,
              s(:lvar, :c), :/,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 0.25),
            s(:send,
              s(:lvar, :c), :/,
              s(:float, 2.0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ZeroDivisionError)),
            s(:args),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 3)), :/,
              s(:int, 0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ZeroDivisionError)),
            s(:args),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 3)), :/,
              s(:send, nil, :Rational,
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 3)), :/,
              s(:const,
                s(:const, nil, :Float), :INFINITY))),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 3)), :/,
              s(:float, 0.0)),
            s(:sym, :infinite?),
            s(:str, "[ruby-core:31626]")))),
      s(:def, :assert_eql,
        s(:args,
          s(:arg, :exp),
          s(:arg, :act),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Array), :===,
              s(:lvar, :exp)), nil,
            s(:lvasgn, :exp,
              s(:array,
                s(:lvar, :exp)))),
          s(:if,
            s(:send,
              s(:const, nil, :Array), :===,
              s(:lvar, :act)), nil,
            s(:lvasgn, :act,
              s(:array,
                s(:lvar, :act)))),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :exp), :zip,
                s(:lvar, :act)), :each),
            s(:args,
              s(:arg, :e),
              s(:arg, :a)),
            s(:begin,
              s(:lvasgn, :na,
                s(:send,
                  s(:array,
                    s(:lvar, :e),
                    s(:lvar, :a)), :+,
                  s(:lvar, :args))),
              s(:send, nil, :assert_equal,
                s(:splat,
                  s(:lvar, :na))),
              s(:lvasgn, :na,
                s(:send,
                  s(:array,
                    s(:send,
                      s(:lvar, :e), :class),
                    s(:lvar, :a)), :+,
                  s(:lvar, :args))),
              s(:send, nil, :assert_instance_of,
                s(:splat,
                  s(:lvar, :na))))))),
      s(:def, :test_idiv,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_eql,
            s(:int, 0),
            s(:send,
              s(:lvar, :c), :div,
              s(:lvar, :c2))),
          s(:send, nil, :assert_eql,
            s(:int, 0),
            s(:send,
              s(:lvar, :c), :div,
              s(:int, 2))),
          s(:send, nil, :assert_eql,
            s(:int, 0),
            s(:send,
              s(:lvar, :c), :div,
              s(:float, 2.0))),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 301),
              s(:int, 100))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 7),
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :c), :div,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:int, -3),
            s(:send,
              s(:lvar, :c), :div,
              s(:send,
                s(:lvar, :c2), :-@))),
          s(:send, nil, :assert_equal,
            s(:int, -3),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :div,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :div,
              s(:send,
                s(:lvar, :c2), :-@))),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 301),
              s(:int, 100))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :c), :div,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:lvar, :c), :div,
              s(:send,
                s(:lvar, :c2), :-@))),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :div,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :div,
              s(:send,
                s(:lvar, :c2), :-@))),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 11))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :c), :div,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:int, -4),
            s(:send,
              s(:lvar, :c), :div,
              s(:send,
                s(:lvar, :c2), :-@))),
          s(:send, nil, :assert_equal,
            s(:int, -4),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :div,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :div,
              s(:send,
                s(:lvar, :c2), :-@))))),
      s(:def, :test_modulo,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_eql,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :c), :modulo,
              s(:lvar, :c2))),
          s(:send, nil, :assert_eql,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :c), :modulo,
              s(:int, 2))),
          s(:send, nil, :assert_eql,
            s(:float, 0.5),
            s(:send,
              s(:lvar, :c), :modulo,
              s(:float, 2.0))),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 301),
              s(:int, 100))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 7),
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 21),
              s(:int, 100)),
            s(:send,
              s(:lvar, :c), :modulo,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -119),
              s(:int, 100)),
            s(:send,
              s(:lvar, :c), :modulo,
              s(:send,
                s(:lvar, :c2), :-@))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 119),
              s(:int, 100)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :modulo,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -21),
              s(:int, 100)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :modulo,
              s(:send,
                s(:lvar, :c2), :-@))),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 301),
              s(:int, 100))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 101),
              s(:int, 100)),
            s(:send,
              s(:lvar, :c), :modulo,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -99),
              s(:int, 100)),
            s(:send,
              s(:lvar, :c), :modulo,
              s(:send,
                s(:lvar, :c2), :-@))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 99),
              s(:int, 100)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :modulo,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -101),
              s(:int, 100)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :modulo,
              s(:send,
                s(:lvar, :c2), :-@))),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 11))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :c), :modulo,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :c), :modulo,
              s(:send,
                s(:lvar, :c2), :-@))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :modulo,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :modulo,
              s(:send,
                s(:lvar, :c2), :-@))))),
      s(:def, :test_divmod,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_eql,
            s(:array,
              s(:int, 0),
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2))),
            s(:send,
              s(:lvar, :c), :divmod,
              s(:lvar, :c2))),
          s(:send, nil, :assert_eql,
            s(:array,
              s(:int, 0),
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2))),
            s(:send,
              s(:lvar, :c), :divmod,
              s(:int, 2))),
          s(:send, nil, :assert_eql,
            s(:array,
              s(:int, 0),
              s(:float, 0.5)),
            s(:send,
              s(:lvar, :c), :divmod,
              s(:float, 2.0))),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 301),
              s(:int, 100))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 7),
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:send, nil, :Rational,
                s(:int, 21),
                s(:int, 100))),
            s(:send,
              s(:lvar, :c), :divmod,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, -3),
              s(:send, nil, :Rational,
                s(:int, -119),
                s(:int, 100))),
            s(:send,
              s(:lvar, :c), :divmod,
              s(:send,
                s(:lvar, :c2), :-@))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, -3),
              s(:send, nil, :Rational,
                s(:int, 119),
                s(:int, 100))),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :divmod,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:send, nil, :Rational,
                s(:int, -21),
                s(:int, 100))),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :divmod,
              s(:send,
                s(:lvar, :c2), :-@))),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 301),
              s(:int, 100))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:send, nil, :Rational,
                s(:int, 101),
                s(:int, 100))),
            s(:send,
              s(:lvar, :c), :divmod,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, -2),
              s(:send, nil, :Rational,
                s(:int, -99),
                s(:int, 100))),
            s(:send,
              s(:lvar, :c), :divmod,
              s(:send,
                s(:lvar, :c2), :-@))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, -2),
              s(:send, nil, :Rational,
                s(:int, 99),
                s(:int, 100))),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :divmod,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:send, nil, :Rational,
                s(:int, -101),
                s(:int, 100))),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :divmod,
              s(:send,
                s(:lvar, :c2), :-@))),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 11))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 3),
              s(:int, 2)),
            s(:send,
              s(:lvar, :c), :divmod,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, -4),
              s(:int, -1)),
            s(:send,
              s(:lvar, :c), :divmod,
              s(:send,
                s(:lvar, :c2), :-@))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, -4),
              s(:int, 1)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :divmod,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 3),
              s(:int, -2)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :divmod,
              s(:send,
                s(:lvar, :c2), :-@))))),
      s(:def, :test_remainder,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_eql,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :c), :remainder,
              s(:lvar, :c2))),
          s(:send, nil, :assert_eql,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :c), :remainder,
              s(:int, 2))),
          s(:send, nil, :assert_eql,
            s(:float, 0.5),
            s(:send,
              s(:lvar, :c), :remainder,
              s(:float, 2.0))),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 301),
              s(:int, 100))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 7),
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 21),
              s(:int, 100)),
            s(:send,
              s(:lvar, :c), :remainder,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 21),
              s(:int, 100)),
            s(:send,
              s(:lvar, :c), :remainder,
              s(:send,
                s(:lvar, :c2), :-@))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -21),
              s(:int, 100)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :remainder,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -21),
              s(:int, 100)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :remainder,
              s(:send,
                s(:lvar, :c2), :-@))),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 301),
              s(:int, 100))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 101),
              s(:int, 100)),
            s(:send,
              s(:lvar, :c), :remainder,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 101),
              s(:int, 100)),
            s(:send,
              s(:lvar, :c), :remainder,
              s(:send,
                s(:lvar, :c2), :-@))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -101),
              s(:int, 100)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :remainder,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -101),
              s(:int, 100)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :remainder,
              s(:send,
                s(:lvar, :c2), :-@))),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 11))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :c), :remainder,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :c), :remainder,
              s(:send,
                s(:lvar, :c2), :-@))),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :remainder,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :remainder,
              s(:send,
                s(:lvar, :c2), :-@))))),
      s(:def, :test_quo,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 3),
              s(:int, 4)),
            s(:send,
              s(:lvar, :c), :quo,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 4)),
            s(:send,
              s(:lvar, :c), :quo,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 0.25),
            s(:send,
              s(:lvar, :c), :quo,
              s(:float, 2.0))))),
      s(:def, :test_fdiv,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:float, 0.75),
            s(:send,
              s(:lvar, :c), :fdiv,
              s(:lvar, :c2))),
          s(:send, nil, :assert_equal,
            s(:float, 0.25),
            s(:send,
              s(:lvar, :c), :fdiv,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 0.25),
            s(:send,
              s(:lvar, :c), :fdiv,
              s(:float, 2.0))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :c), :fdiv,
              s(:const,
                s(:const, nil, :Float), :INFINITY))),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:lvar, :c), :fdiv,
              s(:int, 0)),
            s(:sym, :infinite?),
            s(:str, "[ruby-core:31626]")))),
      s(:def, :test_expt,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :c2,
            s(:send, nil, :Rational,
              s(:int, 2),
              s(:int, 3))),
          s(:lvasgn, :r,
            s(:send,
              s(:lvar, :c), :**,
              s(:lvar, :c2))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.6299),
            s(:lvar, :r),
            s(:float, 0.001)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 4)),
            s(:send,
              s(:lvar, :c), :**,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 4)),
            s(:send,
              s(:lvar, :c), :**,
              s(:int, -2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 4)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :**,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 4)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-@)), :**,
              s(:int, -2))),
          s(:send, nil, :assert_equal,
            s(:float, 0.25),
            s(:send,
              s(:lvar, :c), :**,
              s(:float, 2.0))),
          s(:send, nil, :assert_equal,
            s(:float, 4.0),
            s(:send,
              s(:lvar, :c), :**,
              s(:float, -2.0))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 4)),
            s(:send,
              s(:lvar, :c), :**,
              s(:send, nil, :Rational,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 4)),
            s(:send,
              s(:lvar, :c), :**,
              s(:send, nil, :Rational,
                s(:int, -2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1)),
            s(:send,
              s(:int, 0), :**,
              s(:send, nil, :Rational,
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 0)), :**,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1)),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 0)), :**,
              s(:send, nil, :Rational,
                s(:int, 0)))),
          s(:lvasgn, :x,
            s(:send,
              s(:int, 2), :**,
              s(:send, nil, :Rational,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 4)),
            s(:lvar, :x)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Rational),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :x), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :denominator)),
          s(:lvasgn, :x,
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 2)), :**,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 4)),
            s(:lvar, :x)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Rational),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :x), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :denominator)),
          s(:lvasgn, :x,
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 2)), :**,
              s(:send, nil, :Rational,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 4)),
            s(:lvar, :x)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Rational),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :x), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :denominator)),
          s(:lvasgn, :x,
            s(:send,
              s(:begin,
                s(:int, -2)), :**,
              s(:send, nil, :Rational,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 4)),
            s(:lvar, :x)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Rational),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :x), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :denominator)),
          s(:lvasgn, :x,
            s(:send,
              s(:send, nil, :Rational,
                s(:int, -2)), :**,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 4)),
            s(:lvar, :x)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Rational),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :x), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :denominator)),
          s(:lvasgn, :x,
            s(:send,
              s(:send, nil, :Rational,
                s(:int, -2)), :**,
              s(:send, nil, :Rational,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 4)),
            s(:lvar, :x)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Rational),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :x), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :denominator)),
          s(:lvasgn, :x,
            s(:send,
              s(:int, 2), :**,
              s(:send, nil, :Rational,
                s(:int, -2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 4)),
            s(:lvar, :x)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Rational),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :x), :denominator)),
          s(:lvasgn, :x,
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 2)), :**,
              s(:int, -2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 4)),
            s(:lvar, :x)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Rational),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :x), :denominator)),
          s(:lvasgn, :x,
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 2)), :**,
              s(:send, nil, :Rational,
                s(:int, -2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 4)),
            s(:lvar, :x)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Rational),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :x), :denominator)),
          s(:lvasgn, :x,
            s(:send,
              s(:begin,
                s(:int, -2)), :**,
              s(:send, nil, :Rational,
                s(:int, -2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 4)),
            s(:lvar, :x)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Rational),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :x), :denominator)),
          s(:lvasgn, :x,
            s(:send,
              s(:send, nil, :Rational,
                s(:int, -2)), :**,
              s(:int, -2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 4)),
            s(:lvar, :x)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Rational),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :x), :denominator)),
          s(:lvasgn, :x,
            s(:send,
              s(:send, nil, :Rational,
                s(:int, -2)), :**,
              s(:send, nil, :Rational,
                s(:int, -2)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 4)),
            s(:lvar, :x)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Rational),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :x), :denominator)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ZeroDivisionError)),
            s(:args),
            s(:send,
              s(:int, 0), :**,
              s(:int, -1))))),
      s(:def, :test_cmp,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, -1)), :<=>,
              s(:send, nil, :Rational,
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 0)), :<=>,
              s(:send, nil, :Rational,
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1)), :<=>,
              s(:send, nil, :Rational,
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, -1)), :<=>,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 0)), :<=>,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1)), :<=>,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, -1)), :<=>,
              s(:float, 0.0))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 0)), :<=>,
              s(:float, 0.0))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1)), :<=>,
              s(:float, 0.0))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)), :<=>,
              s(:send, nil, :Rational,
                s(:int, 2),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 2),
                s(:int, 3)), :<=>,
              s(:send, nil, :Rational,
                s(:int, 2),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 2),
                s(:int, 3)), :<=>,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)))),
          s(:lvasgn, :f,
            s(:send,
              s(:send,
                s(:int, 2), :**,
                s(:int, 30)), :-,
              s(:int, 1))),
          s(:lvasgn, :b,
            s(:send,
              s(:int, 2), :**,
              s(:int, 30))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send, nil, :Rational,
                s(:lvar, :f)), :<=>,
              s(:send, nil, :Rational,
                s(:lvar, :f)))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send, nil, :Rational,
                s(:lvar, :f)), :<=>,
              s(:send, nil, :Rational,
                s(:lvar, :b)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send, nil, :Rational,
                s(:lvar, :b)), :<=>,
              s(:send, nil, :Rational,
                s(:lvar, :f)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send, nil, :Rational,
                s(:lvar, :b)), :<=>,
              s(:send, nil, :Rational,
                s(:lvar, :b)))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send, nil, :Rational,
                s(:send,
                  s(:lvar, :f), :-,
                  s(:int, 1))), :<=>,
              s(:send, nil, :Rational,
                s(:lvar, :f)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send, nil, :Rational,
                s(:lvar, :f)), :<=>,
              s(:send, nil, :Rational,
                s(:send,
                  s(:lvar, :f), :-,
                  s(:int, 1))))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send, nil, :Rational,
                s(:send,
                  s(:lvar, :b), :-,
                  s(:int, 1))), :<=>,
              s(:send, nil, :Rational,
                s(:lvar, :b)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send, nil, :Rational,
                s(:lvar, :b)), :<=>,
              s(:send, nil, :Rational,
                s(:send,
                  s(:lvar, :b), :-,
                  s(:int, 1))))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 0)), :<,
              s(:send, nil, :Rational,
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 0)), :<=,
              s(:send, nil, :Rational,
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 0)), :>=,
              s(:send, nil, :Rational,
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 0)), :>,
              s(:send, nil, :Rational,
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 0)), :<=>,
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 0)), :<=>,
              s(:str, "foo"))))),
      s(:def, :test_eqeq,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 1)),
            s(:send, nil, :Rational,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -1),
              s(:int, 1)),
            s(:send, nil, :Rational,
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 2),
                s(:int, 1)), :==,
              s(:send, nil, :Rational,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 2),
                s(:int, 1)), :!=,
              s(:send, nil, :Rational,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1)), :==,
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1)), :==,
              s(:str, ""))))),
      s(:def, :test_coerce,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :Rational,
                s(:int, 2)),
              s(:send, nil, :Rational,
                s(:int, 1))),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1)), :coerce,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :Rational,
                s(:float, 2.2)),
              s(:send, nil, :Rational,
                s(:int, 1))),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1)), :coerce,
              s(:float, 2.2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :Rational,
                s(:int, 2)),
              s(:send, nil, :Rational,
                s(:int, 1))),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1)), :coerce,
              s(:send, nil, :Rational,
                s(:int, 2)))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :TypeError),
              s(:str, "[Bug #5020] [ruby-devl:44088]")),
            s(:args),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)), :coerce,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 1)))))),
      s(:class,
        s(:const, nil, :ObjectX), nil,
        s(:begin,
          s(:def, :+,
            s(:args,
              s(:arg, :x)),
            s(:send, nil, :Rational,
              s(:int, 1))),
          s(:alias,
            s(:sym, :-),
            s(:sym, :+)),
          s(:alias,
            s(:sym, :*),
            s(:sym, :+)),
          s(:alias,
            s(:sym, :/),
            s(:sym, :+)),
          s(:alias,
            s(:sym, :quo),
            s(:sym, :+)),
          s(:alias,
            s(:sym, :div),
            s(:sym, :+)),
          s(:alias,
            s(:sym, :%),
            s(:sym, :+)),
          s(:alias,
            s(:sym, :remainder),
            s(:sym, :+)),
          s(:alias,
            s(:sym, :**),
            s(:sym, :+)),
          s(:def, :coerce,
            s(:args,
              s(:arg, :x)),
            s(:array,
              s(:lvar, :x),
              s(:send, nil, :Rational,
                s(:int, 1)))))),
      s(:def, :test_coerce2,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :ObjectX), :new)),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "+"),
                s(:str, "-"),
                s(:str, "*"),
                s(:str, "/"),
                s(:str, "quo"),
                s(:str, "div"),
                s(:str, "%"),
                s(:str, "remainder"),
                s(:str, "**")), :each),
            s(:args,
              s(:arg, :op)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Numeric),
              s(:send,
                s(:send, nil, :Rational,
                  s(:int, 1)), :__send__,
                s(:lvar, :op),
                s(:lvar, :x)))))),
      s(:def, :test_math,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)), :abs)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, 2)), :abs)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)), :magnitude)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, 2)), :magnitude)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)), :denominator)))),
      s(:def, :test_trunc,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:array,
                s(:send, nil, :Rational,
                  s(:int, 13),
                  s(:int, 5)),
                s(:array,
                  s(:int, 2),
                  s(:int, 3),
                  s(:int, 2),
                  s(:int, 3))),
              s(:array,
                s(:send, nil, :Rational,
                  s(:int, 5),
                  s(:int, 2)),
                s(:array,
                  s(:int, 2),
                  s(:int, 3),
                  s(:int, 2),
                  s(:int, 3))),
              s(:array,
                s(:send, nil, :Rational,
                  s(:int, 12),
                  s(:int, 5)),
                s(:array,
                  s(:int, 2),
                  s(:int, 3),
                  s(:int, 2),
                  s(:int, 2))),
              s(:array,
                s(:send, nil, :Rational,
                  s(:int, -12),
                  s(:int, 5)),
                s(:array,
                  s(:int, -3),
                  s(:int, -2),
                  s(:int, -2),
                  s(:int, -2))),
              s(:array,
                s(:send, nil, :Rational,
                  s(:int, -5),
                  s(:int, 2)),
                s(:array,
                  s(:int, -3),
                  s(:int, -2),
                  s(:int, -2),
                  s(:int, -3))),
              s(:array,
                s(:send, nil, :Rational,
                  s(:int, -13),
                  s(:int, 5)),
                s(:array,
                  s(:int, -3),
                  s(:int, -2),
                  s(:int, -2),
                  s(:int, -3)))), :each),
          s(:args,
            s(:arg, :i),
            s(:arg, :a)),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :a), :[],
                s(:int, 0)),
              s(:send,
                s(:lvar, :i), :floor)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :a), :[],
                s(:int, 1)),
              s(:send,
                s(:lvar, :i), :ceil)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :a), :[],
                s(:int, 2)),
              s(:send,
                s(:lvar, :i), :truncate)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :a), :[],
                s(:int, 3)),
              s(:send,
                s(:lvar, :i), :round))))),
      s(:def, :test_to_s,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :String),
            s(:send,
              s(:lvar, :c), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "1/2"),
            s(:send,
              s(:lvar, :c), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "0/1"),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 0),
                s(:int, 2)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "0/1"),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 0),
                s(:int, -2)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "1/2"),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "-1/2"),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, 2)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "1/2"),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, -2)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "-1/2"),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, -2)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "1/2"),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, -2)), :to_s)))),
      s(:def, :test_inspect,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :String),
            s(:send,
              s(:lvar, :c), :inspect)),
          s(:send, nil, :assert_equal,
            s(:str, "(1/2)"),
            s(:send,
              s(:lvar, :c), :inspect)))),
      s(:def, :test_marshal,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2))),
          s(:block,
            s(:send,
              s(:lvar, :c), :instance_eval),
            s(:args),
            s(:ivasgn, :@ivar,
              s(:int, 9))),
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:lvar, :c))),
          s(:lvasgn, :c2,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:lvar, :s))),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:lvar, :c2)),
          s(:send, nil, :assert_equal,
            s(:int, 9),
            s(:send,
              s(:lvar, :c2), :instance_variable_get,
              s(:sym, :@ivar))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Rational),
            s(:lvar, :c2)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ZeroDivisionError)),
            s(:args),
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:str, "\u0004\bU:\rRational[\ai\u0006i\u0005"))),
          s(:lvasgn, :bug3656,
            s(:str, "[ruby-core:31622]")),
          s(:lvasgn, :c,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2))),
          s(:send,
            s(:lvar, :c), :freeze),
          s(:send, nil, :assert_predicate,
            s(:lvar, :c),
            s(:sym, :frozen?)),
          s(:lvasgn, :result,
            s(:rescue,
              s(:send,
                s(:lvar, :c), :marshal_load,
                s(:array,
                  s(:int, 2),
                  s(:int, 3))),
              s(:resbody, nil, nil,
                s(:sym, :fail)), nil)),
          s(:send, nil, :assert_equal,
            s(:sym, :fail),
            s(:lvar, :result),
            s(:lvar, :bug3656)))),
      s(:def, :test_marshal_compatibility,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6625,
            s(:str, "[ruby-core:45775]")),
          s(:lvasgn, :dump,
            s(:str, "\u0004\bo:\rRational\a:\u0011@denominatori\a:\u000F@numeratori\u0006")),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:lvar, :bug6625)),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)),
              s(:send,
                s(:const, nil, :Marshal), :load,
                s(:lvar, :dump)),
              s(:lvar, :bug6625))))),
      s(:def, :test_parse,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5)),
            s(:send,
              s(:str, "5"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -5)),
            s(:send,
              s(:str, "-5"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5),
              s(:int, 3)),
            s(:send,
              s(:str, "5/3"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -5),
              s(:int, 3)),
            s(:send,
              s(:str, "-5/3"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5)),
            s(:send,
              s(:str, "5.0"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -5)),
            s(:send,
              s(:str, "-5.0"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5),
              s(:int, 3)),
            s(:send,
              s(:str, "5.0/3"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -5),
              s(:int, 3)),
            s(:send,
              s(:str, "-5.0/3"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5)),
            s(:send,
              s(:str, "5e0"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -5)),
            s(:send,
              s(:str, "-5e0"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5),
              s(:int, 3)),
            s(:send,
              s(:str, "5e0/3"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -5),
              s(:int, 3)),
            s(:send,
              s(:str, "-5e0/3"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:float, 50.0)),
            s(:send,
              s(:str, "5e1"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:float, -500.0)),
            s(:send,
              s(:str, "-5e2"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:float, 5000.0),
              s(:int, 3)),
            s(:send,
              s(:str, "5e003/3"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:float, -50000.0),
              s(:int, 3)),
            s(:send,
              s(:str, "-5e004/3"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 33),
              s(:int, 100)),
            s(:send,
              s(:str, ".33"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 33),
              s(:int, 100)),
            s(:send,
              s(:str, "0.33"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -33),
              s(:int, 100)),
            s(:send,
              s(:str, "-.33"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -33),
              s(:int, 100)),
            s(:send,
              s(:str, "-0.33"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -33),
              s(:int, 100)),
            s(:send,
              s(:str, "-0.3_3"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:str, "5e-1"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 50)),
            s(:send,
              s(:str, "5e+1"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:str, "5.0e-1"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 50)),
            s(:send,
              s(:str, "5.0e+1"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 50)),
            s(:send,
              s(:str, "5e1"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 50)),
            s(:send,
              s(:str, "5E1"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 500)),
            s(:send,
              s(:str, "5e2"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5000)),
            s(:send,
              s(:str, "5e3"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 500000000000)),
            s(:send,
              s(:str, "5e1_1"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5)),
            s(:send, nil, :Rational,
              s(:str, "5"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -5)),
            s(:send, nil, :Rational,
              s(:str, "-5"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5),
              s(:int, 3)),
            s(:send, nil, :Rational,
              s(:str, "5/3"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -5),
              s(:int, 3)),
            s(:send, nil, :Rational,
              s(:str, "-5/3"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5)),
            s(:send, nil, :Rational,
              s(:str, "5.0"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -5)),
            s(:send, nil, :Rational,
              s(:str, "-5.0"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5),
              s(:int, 3)),
            s(:send, nil, :Rational,
              s(:str, "5.0/3"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -5),
              s(:int, 3)),
            s(:send, nil, :Rational,
              s(:str, "-5.0/3"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5)),
            s(:send, nil, :Rational,
              s(:str, "5e0"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -5)),
            s(:send, nil, :Rational,
              s(:str, "-5e0"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5),
              s(:int, 3)),
            s(:send, nil, :Rational,
              s(:str, "5e0/3"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -5),
              s(:int, 3)),
            s(:send, nil, :Rational,
              s(:str, "-5e0/3"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:float, 50.0)),
            s(:send, nil, :Rational,
              s(:str, "5e1"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:float, -500.0)),
            s(:send, nil, :Rational,
              s(:str, "-5e2"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:float, 5000.0),
              s(:int, 3)),
            s(:send, nil, :Rational,
              s(:str, "5e003/3"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:float, -50000.0),
              s(:int, 3)),
            s(:send, nil, :Rational,
              s(:str, "-5e004/3"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 33),
              s(:int, 100)),
            s(:send, nil, :Rational,
              s(:str, ".33"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 33),
              s(:int, 100)),
            s(:send, nil, :Rational,
              s(:str, "0.33"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -33),
              s(:int, 100)),
            s(:send, nil, :Rational,
              s(:str, "-.33"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -33),
              s(:int, 100)),
            s(:send, nil, :Rational,
              s(:str, "-0.33"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, -33),
              s(:int, 100)),
            s(:send, nil, :Rational,
              s(:str, "-0.3_3"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2)),
            s(:send, nil, :Rational,
              s(:str, "5e-1"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 50)),
            s(:send, nil, :Rational,
              s(:str, "5e+1"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2)),
            s(:send, nil, :Rational,
              s(:str, "5.0e-1"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 50)),
            s(:send, nil, :Rational,
              s(:str, "5.0e+1"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 50)),
            s(:send, nil, :Rational,
              s(:str, "5e1"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 50)),
            s(:send, nil, :Rational,
              s(:str, "5E1"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 500)),
            s(:send, nil, :Rational,
              s(:str, "5e2"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5000)),
            s(:send, nil, :Rational,
              s(:str, "5e3"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 500000000000)),
            s(:send, nil, :Rational,
              s(:str, "5e1_1"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 0)),
            s(:send,
              s(:str, ""), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 0)),
            s(:send,
              s(:str, " "), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5)),
            s(:send,
              s(:str, "\f\n\r\t\v5\u0000"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 0)),
            s(:send,
              s(:str, "_"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 0)),
            s(:send,
              s(:str, "_5"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5)),
            s(:send,
              s(:str, "5_"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5)),
            s(:send,
              s(:str, "5x"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5)),
            s(:send,
              s(:str, "5/_3"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5),
              s(:int, 3)),
            s(:send,
              s(:str, "5/3_"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5),
              s(:int, 3)),
            s(:send,
              s(:str, "5/3.3"), :to_r)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5),
              s(:int, 3)),
            s(:send,
              s(:str, "5/3x"), :to_r)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Rational,
              s(:str, ""))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Rational,
              s(:str, "_"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Rational,
              s(:str, "\f\n\r\t\v5\u0000"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Rational,
              s(:str, "_5"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Rational,
              s(:str, "5_"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Rational,
              s(:str, "5x"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Rational,
              s(:str, "5/_3"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Rational,
              s(:str, "5/3_"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Rational,
              s(:str, "5/3.3"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :Rational,
              s(:str, "5/3x"))))),
      s(:def, :test_to_i,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 3),
                s(:int, 2)), :to_i)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send, nil, :Integer,
              s(:send, nil, :Rational,
                s(:int, 3),
                s(:int, 2)))))),
      s(:def, :test_to_f,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:float, 1.5),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 3),
                s(:int, 2)), :to_f)),
          s(:send, nil, :assert_equal,
            s(:float, 1.5),
            s(:send, nil, :Float,
              s(:send, nil, :Rational,
                s(:int, 3),
                s(:int, 2)))))),
      s(:def, :test_to_c,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 3),
                s(:int, 2))),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 3),
                s(:int, 2)), :to_c)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 3),
                s(:int, 2))),
            s(:send, nil, :Complex,
              s(:send, nil, :Rational,
                s(:int, 3),
                s(:int, 2)))))),
      s(:def, :test_to_r,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:nil), :to_r)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:int, 1)),
            s(:array,
              s(:send,
                s(:lvar, :c), :numerator),
              s(:send,
                s(:lvar, :c), :denominator))),
          s(:lvasgn, :c,
            s(:send,
              s(:int, 0), :to_r)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:int, 1)),
            s(:array,
              s(:send,
                s(:lvar, :c), :numerator),
              s(:send,
                s(:lvar, :c), :denominator))),
          s(:lvasgn, :c,
            s(:send,
              s(:int, 1), :to_r)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 1)),
            s(:array,
              s(:send,
                s(:lvar, :c), :numerator),
              s(:send,
                s(:lvar, :c), :denominator))),
          s(:lvasgn, :c,
            s(:send,
              s(:float, 1.1), :to_r)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2476979795053773),
              s(:int, 2251799813685248)),
            s(:array,
              s(:send,
                s(:lvar, :c), :numerator),
              s(:send,
                s(:lvar, :c), :denominator))),
          s(:lvasgn, :c,
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)), :to_r)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:array,
              s(:send,
                s(:lvar, :c), :numerator),
              s(:send,
                s(:lvar, :c), :denominator))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RangeError)),
            s(:args),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 2)), :to_r)),
          s(:if,
            s(:send,
              s(:begin,
                s(:send,
                  s(:float, 0.0), :/,
                  s(:int, 0))), :nan?),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :FloatDomainError)),
              s(:args),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:float, 0.0), :/,
                    s(:int, 0))), :to_r)), nil),
          s(:if,
            s(:send,
              s(:begin,
                s(:send,
                  s(:float, 1.0), :/,
                  s(:int, 0))), :infinite?),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :FloatDomainError)),
              s(:args),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:float, 1.0), :/,
                    s(:int, 0))), :to_r)), nil))),
      s(:def, :test_rationalize,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:nil), :rationalize)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:int, 1)),
            s(:array,
              s(:send,
                s(:lvar, :c), :numerator),
              s(:send,
                s(:lvar, :c), :denominator))),
          s(:lvasgn, :c,
            s(:send,
              s(:int, 0), :rationalize)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:int, 1)),
            s(:array,
              s(:send,
                s(:lvar, :c), :numerator),
              s(:send,
                s(:lvar, :c), :denominator))),
          s(:lvasgn, :c,
            s(:send,
              s(:int, 1), :rationalize)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 1)),
            s(:array,
              s(:send,
                s(:lvar, :c), :numerator),
              s(:send,
                s(:lvar, :c), :denominator))),
          s(:lvasgn, :c,
            s(:send,
              s(:float, 1.1), :rationalize)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 11),
              s(:int, 10)),
            s(:array,
              s(:send,
                s(:lvar, :c), :numerator),
              s(:send,
                s(:lvar, :c), :denominator))),
          s(:lvasgn, :c,
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)), :rationalize)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:array,
              s(:send,
                s(:lvar, :c), :numerator),
              s(:send,
                s(:lvar, :c), :denominator))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:nil), :rationalize,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 10))),
            s(:send, nil, :Rational,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 0), :rationalize,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 10))),
            s(:send, nil, :Rational,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 10), :rationalize,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 10))),
            s(:send, nil, :Rational,
              s(:int, 10))),
          s(:lvasgn, :r,
            s(:float, 0.3333)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :r), :rationalize),
            s(:send, nil, :Rational,
              s(:int, 3333),
              s(:int, 10000))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :r), :rationalize,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 10))),
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :r), :rationalize,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, 10))),
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 3))),
          s(:lvasgn, :r,
            s(:send, nil, :Rational,
              s(:int, 5404319552844595),
              s(:int, 18014398509481984))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :r), :rationalize),
            s(:lvar, :r)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :r), :rationalize,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 10))),
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :r), :rationalize,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, 10))),
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 3))),
          s(:lvasgn, :r,
            s(:float, -0.3333)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :r), :rationalize),
            s(:send, nil, :Rational,
              s(:int, -3333),
              s(:int, 10000))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :r), :rationalize,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 10))),
            s(:send, nil, :Rational,
              s(:int, -1),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :r), :rationalize,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, 10))),
            s(:send, nil, :Rational,
              s(:int, -1),
              s(:int, 3))),
          s(:lvasgn, :r,
            s(:send, nil, :Rational,
              s(:int, -5404319552844595),
              s(:int, 18014398509481984))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :r), :rationalize),
            s(:lvar, :r)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :r), :rationalize,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 10))),
            s(:send, nil, :Rational,
              s(:int, -1),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :r), :rationalize,
              s(:send, nil, :Rational,
                s(:int, -1),
                s(:int, 10))),
            s(:send, nil, :Rational,
              s(:int, -1),
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RangeError)),
            s(:args),
            s(:send,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, 2)), :rationalize)),
          s(:if,
            s(:send,
              s(:begin,
                s(:send,
                  s(:float, 0.0), :/,
                  s(:int, 0))), :nan?),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :FloatDomainError)),
              s(:args),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:float, 0.0), :/,
                    s(:int, 0))), :rationalize)), nil),
          s(:if,
            s(:send,
              s(:begin,
                s(:send,
                  s(:float, 1.0), :/,
                  s(:int, 0))), :infinite?),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :FloatDomainError)),
              s(:args),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:float, 1.0), :/,
                    s(:int, 0))), :rationalize)), nil))),
      s(:def, :test_gcdlcm,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 7),
            s(:send,
              s(:int, 91), :gcd,
              s(:int, -49))),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:int, 5), :gcd,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:int, 0), :gcd,
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:int, 70),
            s(:send,
              s(:int, 14), :lcm,
              s(:int, 35))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:int, 5), :lcm,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:int, 0), :lcm,
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 5),
              s(:int, 0)),
            s(:send,
              s(:int, 0), :gcdlcm,
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 5),
              s(:int, 0)),
            s(:send,
              s(:int, 5), :gcdlcm,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:int, 1073741827), :gcd,
              s(:int, 1073741789))),
          s(:send, nil, :assert_equal,
            s(:int, 1152921470247108503),
            s(:send,
              s(:int, 1073741827), :lcm,
              s(:int, 1073741789))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:int, 1073741789), :gcd,
              s(:int, 1073741827))),
          s(:send, nil, :assert_equal,
            s(:int, 1152921470247108503),
            s(:send,
              s(:int, 1073741789), :lcm,
              s(:int, 1073741827))))),
      s(:def, :test_supp,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:int, 1), :real?)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:float, 1.1), :real?)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:int, 1), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 9),
            s(:send,
              s(:int, 9), :numerator)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:int, 1), :denominator)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:int, 9), :denominator)),
          s(:send, nil, :assert_equal,
            s(:float, 1.0),
            s(:send,
              s(:float, 1.0), :numerator)),
          s(:send, nil, :assert_equal,
            s(:float, 9.0),
            s(:send,
              s(:float, 9.0), :numerator)),
          s(:send, nil, :assert_equal,
            s(:float, 1.0),
            s(:send,
              s(:float, 1.0), :denominator)),
          s(:send, nil, :assert_equal,
            s(:float, 1.0),
            s(:send,
              s(:float, 9.0), :denominator)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:int, 1), :quo,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 5000000000)),
            s(:send,
              s(:int, 10000000000), :quo,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 0.5),
            s(:send,
              s(:float, 1.0), :quo,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 4)),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)), :quo,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)), :quo,
              s(:const,
                s(:const, nil, :Float), :INFINITY))),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)), :quo,
              s(:float, 0.0)),
            s(:sym, :infinite?),
            s(:str, "[ruby-core:31626]")),
          s(:send, nil, :assert_equal,
            s(:float, 0.5),
            s(:send,
              s(:int, 1), :fdiv,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 5000000000.0),
            s(:send,
              s(:int, 10000000000), :fdiv,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 0.5),
            s(:send,
              s(:float, 1.0), :fdiv,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 0.25),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)), :fdiv,
              s(:int, 2))))),
      s(:def, :test_ruby19,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:const, nil, :Rational), :new,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:const, nil, :Rational), :new!,
              s(:int, 1))))),
      s(:def, :test_fixed_bug,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Float), :MAX), :to_i), :*,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 1.0),
            s(:send,
              s(:send, nil, :Rational,
                s(:send,
                  s(:lvar, :n), :+,
                  s(:int, 2)),
                s(:send,
                  s(:lvar, :n), :+,
                  s(:int, 1))), :to_f),
            s(:str, "[ruby-dev:33852]")))),
      s(:def, :test_power_of_1_and_minus_1,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5715,
            s(:str, "[ruby-core:41498]")),
          s(:lvasgn, :big,
            s(:send,
              s(:int, 1), :<<,
              s(:int, 66))),
          s(:lvasgn, :one,
            s(:send, nil, :Rational,
              s(:int, 1),
              s(:int, 1))),
          s(:send, nil, :assert_eql,
            s(:lvar, :one),
            s(:send,
              s(:lvar, :one), :**,
              s(:send,
                s(:lvar, :big), :-@)),
            s(:lvar, :bug5715)),
          s(:send, nil, :assert_eql,
            s(:lvar, :one),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :one), :-@)), :**,
              s(:send,
                s(:lvar, :big), :-@)),
            s(:lvar, :bug5715)),
          s(:send, nil, :assert_eql,
            s(:send,
              s(:lvar, :one), :-@),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :one), :-@)), :**,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:lvar, :big), :+,
                    s(:int, 1))), :-@)),
            s(:lvar, :bug5715)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :Complex),
            s(:send,
              s(:begin,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :one), :-@)), :**,
                  s(:send, nil, :Rational,
                    s(:int, 1),
                    s(:int, 3)))), :class)))),
      s(:def, :test_power_of_0,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5713,
            s(:str, "[ruby-core:41494]")),
          s(:lvasgn, :big,
            s(:send,
              s(:int, 1), :<<,
              s(:int, 66))),
          s(:lvasgn, :zero,
            s(:send, nil, :Rational,
              s(:int, 0),
              s(:int, 1))),
          s(:send, nil, :assert_eql,
            s(:lvar, :zero),
            s(:send,
              s(:lvar, :zero), :**,
              s(:lvar, :big))),
          s(:send, nil, :assert_eql,
            s(:lvar, :zero),
            s(:send,
              s(:lvar, :zero), :**,
              s(:send, nil, :Rational,
                s(:int, 2),
                s(:int, 3)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ZeroDivisionError),
              s(:lvar, :bug5713)),
            s(:args),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 0),
                s(:int, 1)), :**,
              s(:send,
                s(:lvar, :big), :-@))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ZeroDivisionError),
              s(:lvar, :bug5713)),
            s(:args),
            s(:send,
              s(:send, nil, :Rational,
                s(:int, 0),
                s(:int, 1)), :**,
              s(:send, nil, :Rational,
                s(:int, -2),
                s(:int, 3)))))),
      s(:def, :test_positive_p,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:int, 1), :/,
              s(:rational, (2/1))),
            s(:sym, :positive?)),
          s(:send, nil, :assert_not_predicate,
            s(:send,
              s(:int, -1), :/,
              s(:rational, (2/1))),
            s(:sym, :positive?)))),
      s(:def, :test_negative_p,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:int, -1), :/,
              s(:rational, (2/1))),
            s(:sym, :negative?)),
          s(:send, nil, :assert_not_predicate,
            s(:send,
              s(:int, 1), :/,
              s(:rational, (2/1))),
            s(:sym, :negative?)))),
      s(:def, :test_known_bug,
        s(:args), nil))))
