s(:begin,
  s(:send, nil, :require,
    s(:str, "envutil")),
  s(:send, nil, :require,
    s(:str, "shellwords")),
  s(:class,
    s(:const, nil, :TestExtLibs),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:ivasgn, :@extdir,
        s(:block,
          s(:send,
            s(:gvar, :$"), :grep,
            s(:regexp,
              s(:str, "/rbconfig\\.rb\\z"),
              s(:regopt))),
          s(:args),
          s(:break,
            s(:dstr,
              s(:back_ref, :$`),
              s(:str, "/ext"))))),
      s(:defs,
        s(:self), :check_existence,
        s(:args,
          s(:arg, :ext),
          s(:optarg, :add_msg,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:block,
              s(:send,
                s(:ivar, :@excluded), :any?),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:const, nil, :File), :fnmatch?,
                s(:lvar, :i),
                s(:lvar, :ext),
                s(:const,
                  s(:const, nil, :File), :FNM_CASEFOLD))),
            s(:return), nil),
          s(:if,
            s(:lvar, :add_msg),
            s(:lvasgn, :add_msg,
              s(:dstr,
                s(:str, ".  "),
                s(:begin,
                  s(:lvar, :add_msg)))), nil),
          s(:lvasgn, :log,
            s(:dstr,
              s(:begin,
                s(:ivar, :@extdir)),
              s(:str, "/"),
              s(:begin,
                s(:lvar, :ext)),
              s(:str, "/mkmf.log"))),
          s(:block,
            s(:send, nil, :define_method,
              s(:dstr,
                s(:str, "test_existence_of_"),
                s(:begin,
                  s(:lvar, :ext)))),
            s(:args),
            s(:send, nil, :assert_separately,
              s(:array),
              s(:dstr,
                s(:str, "        log = "),
                s(:begin,
                  s(:send,
                    s(:lvar, :log), :dump)),
                s(:str, "\n"),
                s(:str, "        msg = proc {\n"),
                s(:str, "          \"extension library `"),
                s(:begin,
                  s(:lvar, :ext)),
                s(:str, "' is not found"),
                s(:begin,
                  s(:lvar, :add_msg)),
                s(:str, "\n\" <<\n"),
                s(:str, "            (File.exist?(log) ? File.binread(log) : \"\#{log} not found\")\n"),
                s(:str, "        }\n"),
                s(:str, "        assert_nothing_raised(msg) do\n"),
                s(:str, "          require \""),
                s(:begin,
                  s(:lvar, :ext)),
                s(:str, "\"\n"),
                s(:str, "        end\n")),
              s(:hash,
                s(:pair,
                  s(:sym, :ignore_stderr),
                  s(:true))))))),
      s(:def, :windows?,
        s(:args),
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "mswin|mingw"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM))),
      s(:lvasgn, :excluded,
        s(:send,
          s(:send,
            s(:block,
              s(:send,
                s(:array,
                  s(:const,
                    s(:const, nil, :RbConfig), :CONFIG),
                  s(:const, nil, :ENV)), :map),
              s(:args,
                s(:arg, :conf)),
              s(:if,
                s(:lvasgn, :args,
                  s(:send,
                    s(:lvar, :conf), :[],
                    s(:str, "configure_args"))),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :args), :shellsplit), :grep,
                    s(:regexp,
                      s(:str, "\\A--without-ext="),
                      s(:regopt))),
                  s(:args),
                  s(:send,
                    s(:back_ref, :$'), :split,
                    s(:regexp,
                      s(:str, ","),
                      s(:regopt)))), nil)), :flatten), :compact)),
      s(:if,
        s(:send,
          s(:lvar, :excluded), :empty?),
        s(:send,
          s(:lvar, :excluded), :<<,
          s(:str, "+")), nil),
      s(:if,
        s(:send, nil, :windows?),
        s(:begin,
          s(:block,
            s(:send,
              s(:lvar, :excluded), :map!),
            s(:args,
              s(:arg, :i)),
            s(:if,
              s(:send,
                s(:lvar, :i), :==,
                s(:str, "+")),
              s(:array,
                s(:str, "pty"),
                s(:str, "syslog")),
              s(:lvar, :i))),
          s(:send,
            s(:lvar, :excluded), :flatten!)),
        s(:block,
          s(:send,
            s(:lvar, :excluded), :map!),
          s(:args,
            s(:arg, :i)),
          s(:if,
            s(:send,
              s(:lvar, :i), :==,
              s(:str, "+")),
            s(:str, "*win32*"),
            s(:lvar, :i)))),
      s(:ivasgn, :@excluded,
        s(:lvar, :excluded)),
      s(:send, nil, :check_existence,
        s(:str, "bigdecimal")),
      s(:send, nil, :check_existence,
        s(:str, "continuation")),
      s(:send, nil, :check_existence,
        s(:str, "coverage")),
      s(:send, nil, :check_existence,
        s(:str, "date")),
      s(:send, nil, :check_existence,
        s(:str, "digest")),
      s(:send, nil, :check_existence,
        s(:str, "digest/bubblebabble")),
      s(:send, nil, :check_existence,
        s(:str, "digest/md5")),
      s(:send, nil, :check_existence,
        s(:str, "digest/rmd160")),
      s(:send, nil, :check_existence,
        s(:str, "digest/sha1")),
      s(:send, nil, :check_existence,
        s(:str, "digest/sha2")),
      s(:send, nil, :check_existence,
        s(:str, "etc")),
      s(:send, nil, :check_existence,
        s(:str, "fcntl")),
      s(:send, nil, :check_existence,
        s(:str, "fiber")),
      s(:send, nil, :check_existence,
        s(:str, "fiddle")),
      s(:send, nil, :check_existence,
        s(:str, "io/console")),
      s(:send, nil, :check_existence,
        s(:str, "io/nonblock")),
      s(:send, nil, :check_existence,
        s(:str, "io/wait")),
      s(:send, nil, :check_existence,
        s(:str, "json")),
      s(:send, nil, :check_existence,
        s(:str, "mathn/complex")),
      s(:send, nil, :check_existence,
        s(:str, "mathn/rational")),
      s(:send, nil, :check_existence,
        s(:str, "nkf")),
      s(:send, nil, :check_existence,
        s(:str, "objspace")),
      s(:send, nil, :check_existence,
        s(:str, "openssl"),
        s(:str, "this may be false positive, but should assert because rubygems requires this")),
      s(:send, nil, :check_existence,
        s(:str, "pathname")),
      s(:send, nil, :check_existence,
        s(:str, "psych")),
      s(:send, nil, :check_existence,
        s(:str, "pty")),
      s(:send, nil, :check_existence,
        s(:str, "racc/cparse")),
      s(:send, nil, :check_existence,
        s(:str, "rbconfig/sizeof")),
      s(:send, nil, :check_existence,
        s(:str, "ripper")),
      s(:send, nil, :check_existence,
        s(:str, "sdbm")),
      s(:send, nil, :check_existence,
        s(:str, "socket")),
      s(:send, nil, :check_existence,
        s(:str, "stringio")),
      s(:send, nil, :check_existence,
        s(:str, "strscan")),
      s(:send, nil, :check_existence,
        s(:str, "syslog")),
      s(:send, nil, :check_existence,
        s(:str, "thread")),
      s(:send, nil, :check_existence,
        s(:str, "Win32API")),
      s(:send, nil, :check_existence,
        s(:str, "win32ole")),
      s(:send, nil, :check_existence,
        s(:str, "zlib"),
        s(:str, "this may be false positive, but should assert because rubygems requires this")))))
