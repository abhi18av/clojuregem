s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestFnmatch),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :bracket_test,
        s(:args,
          s(:arg, :s),
          s(:arg, :t)),
        s(:block,
          s(:send,
            s(:int, 33), :upto,
            s(:int, 126)),
          s(:args,
            s(:arg, :i)),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :t), :include?,
                s(:send,
                  s(:lvar, :i), :chr)),
              s(:send,
                s(:const, nil, :File), :fnmatch,
                s(:dstr,
                  s(:str, "["),
                  s(:begin,
                    s(:lvar, :s)),
                  s(:str, "]")),
                s(:send,
                  s(:lvar, :i), :chr),
                s(:const,
                  s(:const, nil, :File), :FNM_DOTMATCH))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :t), :include?,
                s(:send,
                  s(:lvar, :i), :chr)),
              s(:send,
                s(:send,
                  s(:const, nil, :File), :fnmatch,
                  s(:dstr,
                    s(:str, "[^"),
                    s(:begin,
                      s(:lvar, :s)),
                    s(:str, "]")),
                  s(:send,
                    s(:lvar, :i), :chr),
                  s(:const,
                    s(:const, nil, :File), :FNM_DOTMATCH)), :!)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :t), :include?,
                s(:send,
                  s(:lvar, :i), :chr)),
              s(:send,
                s(:send,
                  s(:const, nil, :File), :fnmatch,
                  s(:dstr,
                    s(:str, "[!"),
                    s(:begin,
                      s(:lvar, :s)),
                    s(:str, "]")),
                  s(:send,
                    s(:lvar, :i), :chr),
                  s(:const,
                    s(:const, nil, :File), :FNM_DOTMATCH)), :!))))),
      s(:def, :test_fnmatch,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:send, nil, :assert_file), :for,
              s(:str, "[ruby-dev:22819]")), :fnmatch,
            s(:str, "\\[1\\]"),
            s(:str, "[1]")),
          s(:send,
            s(:send,
              s(:send, nil, :assert_file), :for,
              s(:str, "[ruby-dev:22815]")), :fnmatch,
            s(:str, "*?"),
            s(:str, "a")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "*/"),
            s(:str, "a/")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "\\[1\\]"),
            s(:str, "[1]"),
            s(:const,
              s(:const, nil, :File), :FNM_PATHNAME)),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "*?"),
            s(:str, "a"),
            s(:const,
              s(:const, nil, :File), :FNM_PATHNAME)),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "*/"),
            s(:str, "a/"),
            s(:const,
              s(:const, nil, :File), :FNM_PATHNAME)),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "cat"),
            s(:str, "cat")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "cat"),
            s(:str, "category")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "cat"),
            s(:str, "wildcat")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "?at"),
            s(:str, "cat")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "c?t"),
            s(:str, "cat")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "ca?"),
            s(:str, "cat")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "?a?"),
            s(:str, "cat")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "c??t"),
            s(:str, "cat")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "??at"),
            s(:str, "cat")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "ca??"),
            s(:str, "cat")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "c*"),
            s(:str, "cats")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "c*ts"),
            s(:str, "cats")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "*ts"),
            s(:str, "cats")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "*c*a*t*s*"),
            s(:str, "cats")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "c*t"),
            s(:str, "cats")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "*abc"),
            s(:str, "abcabz")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "*abz"),
            s(:str, "abcabz")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "a*abc"),
            s(:str, "abc")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "a*bc"),
            s(:str, "abc")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "a*bc"),
            s(:str, "abcd")),
          s(:send, nil, :bracket_test,
            s(:str, "bd-gikl-mosv-x"),
            s(:str, "bdefgiklmosvwx")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "\\?"),
            s(:str, "?")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "\\?"),
            s(:str, "\\?")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "\\?"),
            s(:str, "a")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "\\?"),
            s(:str, "\\a")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "\\*"),
            s(:str, "*")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "\\*"),
            s(:str, "\\*")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "\\*"),
            s(:str, "cats")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "\\*"),
            s(:str, "\\cats")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "\\a"),
            s(:str, "a")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "\\a"),
            s(:str, "\\a")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "[a\\-c]"),
            s(:str, "a")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "[a\\-c]"),
            s(:str, "-")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "[a\\-c]"),
            s(:str, "c")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "[a\\-c]"),
            s(:str, "b")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "[a\\-c]"),
            s(:str, "\\")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "\\?"),
            s(:str, "?"),
            s(:const,
              s(:const, nil, :File), :FNM_NOESCAPE)),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "\\?"),
            s(:str, "\\?"),
            s(:const,
              s(:const, nil, :File), :FNM_NOESCAPE)),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "\\?"),
            s(:str, "a"),
            s(:const,
              s(:const, nil, :File), :FNM_NOESCAPE)),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "\\?"),
            s(:str, "\\a"),
            s(:const,
              s(:const, nil, :File), :FNM_NOESCAPE)),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "\\*"),
            s(:str, "*"),
            s(:const,
              s(:const, nil, :File), :FNM_NOESCAPE)),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "\\*"),
            s(:str, "\\*"),
            s(:const,
              s(:const, nil, :File), :FNM_NOESCAPE)),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "\\*"),
            s(:str, "cats"),
            s(:const,
              s(:const, nil, :File), :FNM_NOESCAPE)),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "\\*"),
            s(:str, "\\cats"),
            s(:const,
              s(:const, nil, :File), :FNM_NOESCAPE)),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "\\a"),
            s(:str, "a"),
            s(:const,
              s(:const, nil, :File), :FNM_NOESCAPE)),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "\\a"),
            s(:str, "\\a"),
            s(:const,
              s(:const, nil, :File), :FNM_NOESCAPE)),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "[a\\-c]"),
            s(:str, "a"),
            s(:const,
              s(:const, nil, :File), :FNM_NOESCAPE)),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "[a\\-c]"),
            s(:str, "-"),
            s(:const,
              s(:const, nil, :File), :FNM_NOESCAPE)),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "[a\\-c]"),
            s(:str, "c"),
            s(:const,
              s(:const, nil, :File), :FNM_NOESCAPE)),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "[a\\-c]"),
            s(:str, "b"),
            s(:const,
              s(:const, nil, :File), :FNM_NOESCAPE)),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "[a\\-c]"),
            s(:str, "\\"),
            s(:const,
              s(:const, nil, :File), :FNM_NOESCAPE)),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "cat"),
            s(:str, "CAT")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "cat"),
            s(:str, "CAT"),
            s(:const,
              s(:const, nil, :File), :FNM_CASEFOLD)),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "[a-z]"),
            s(:str, "D")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "[a-z]"),
            s(:str, "D"),
            s(:const,
              s(:const, nil, :File), :FNM_CASEFOLD)),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "[abc]"),
            s(:str, "B")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "[abc]"),
            s(:str, "B"),
            s(:const,
              s(:const, nil, :File), :FNM_CASEFOLD)),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "foo?boo"),
            s(:str, "foo/boo")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "foo*"),
            s(:str, "foo/boo")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "foo?boo"),
            s(:str, "foo/boo"),
            s(:const,
              s(:const, nil, :File), :FNM_PATHNAME)),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "foo*"),
            s(:str, "foo/boo"),
            s(:const,
              s(:const, nil, :File), :FNM_PATHNAME)),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "*"),
            s(:str, ".profile")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "*"),
            s(:str, ".profile"),
            s(:const,
              s(:const, nil, :File), :FNM_DOTMATCH)),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, ".*"),
            s(:str, ".profile")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "*"),
            s(:str, "dave/.profile")),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "*/*"),
            s(:str, "dave/.profile")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "*/*"),
            s(:str, "dave/.profile"),
            s(:const,
              s(:const, nil, :File), :FNM_PATHNAME)),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "*/*"),
            s(:str, "dave/.profile"),
            s(:send,
              s(:const,
                s(:const, nil, :File), :FNM_PATHNAME), :|,
              s(:const,
                s(:const, nil, :File), :FNM_DOTMATCH))),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "**/foo"),
            s(:str, "a/b/c/foo"),
            s(:const,
              s(:const, nil, :File), :FNM_PATHNAME)),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "**/foo"),
            s(:str, "/foo"),
            s(:const,
              s(:const, nil, :File), :FNM_PATHNAME)),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "**/foo"),
            s(:str, "a/.b/c/foo"),
            s(:const,
              s(:const, nil, :File), :FNM_PATHNAME)),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "**/foo"),
            s(:str, "a/.b/c/foo"),
            s(:send,
              s(:const,
                s(:const, nil, :File), :FNM_PATHNAME), :|,
              s(:const,
                s(:const, nil, :File), :FNM_DOTMATCH))),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "**/foo"),
            s(:str, "/root/foo"),
            s(:const,
              s(:const, nil, :File), :FNM_PATHNAME)),
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "**/foo"),
            s(:str, "c:/root/foo"),
            s(:const,
              s(:const, nil, :File), :FNM_PATHNAME)))),
      s(:def, :test_extglob,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature5422,
            s(:str, "[ruby-core:40037]")),
          s(:send,
            s(:send,
              s(:send, nil, :assert_file), :for,
              s(:lvar, :feature5422)), :not_fnmatch?,
            s(:str, "{.g,t}*"),
            s(:str, ".gem")),
          s(:send,
            s(:send,
              s(:send, nil, :assert_file), :for,
              s(:lvar, :feature5422)), :fnmatch?,
            s(:str, "{.g,t}*"),
            s(:str, ".gem"),
            s(:const,
              s(:const, nil, :File), :FNM_EXTGLOB)))),
      s(:def, :test_unmatched_encoding,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7911,
            s(:str, "[ruby-dev:47069] [Bug #7911]")),
          s(:lvasgn, :path,
            s(:str, "あ")),
          s(:lvasgn, :pattern_ascii,
            s(:send,
              s(:str, "a"), :encode,
              s(:str, "US-ASCII"))),
          s(:lvasgn, :pattern_eucjp,
            s(:send,
              s(:lvar, :path), :encode,
              s(:str, "EUC-JP"))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :ArgumentError),
              s(:lvar, :bug7911)),
            s(:args),
            s(:begin,
              s(:send,
                s(:send, nil, :assert_file), :not_fnmatch,
                s(:lvar, :pattern_ascii),
                s(:lvar, :path)),
              s(:send,
                s(:send, nil, :assert_file), :not_fnmatch,
                s(:lvar, :pattern_eucjp),
                s(:lvar, :path)),
              s(:send,
                s(:send, nil, :assert_file), :not_fnmatch,
                s(:lvar, :pattern_ascii),
                s(:lvar, :path),
                s(:const,
                  s(:const, nil, :File), :FNM_CASEFOLD)),
              s(:send,
                s(:send, nil, :assert_file), :not_fnmatch,
                s(:lvar, :pattern_eucjp),
                s(:lvar, :path),
                s(:const,
                  s(:const, nil, :File), :FNM_CASEFOLD)),
              s(:send,
                s(:send, nil, :assert_file), :fnmatch,
                s(:dstr,
                  s(:str, "{*,"),
                  s(:begin,
                    s(:lvar, :pattern_ascii)),
                  s(:str, "}")),
                s(:lvar, :path),
                s(:const,
                  s(:const, nil, :File), :FNM_EXTGLOB)),
              s(:send,
                s(:send, nil, :assert_file), :fnmatch,
                s(:dstr,
                  s(:str, "{*,"),
                  s(:begin,
                    s(:lvar, :pattern_eucjp)),
                  s(:str, "}")),
                s(:lvar, :path),
                s(:const,
                  s(:const, nil, :File), :FNM_EXTGLOB)))))),
      s(:def, :test_unicode,
        s(:args),
        s(:begin,
          s(:send,
            s(:send, nil, :assert_file), :fnmatch,
            s(:str, "[a-あ]*"),
            s(:str, "あ")),
          s(:send,
            s(:send, nil, :assert_file), :not_fnmatch,
            s(:str, "[a-あ]*"),
            s(:str, "ぃ")))))))
