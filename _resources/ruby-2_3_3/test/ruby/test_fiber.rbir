s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "fiber")),
  s(:block,
    s(:send,
      s(:const, nil, :EnvUtil), :suppress_warning),
    s(:args),
    s(:send, nil, :require,
      s(:str, "continuation"))),
  s(:send, nil, :require,
    s(:str, "tmpdir")),
  s(:class,
    s(:const, nil, :TestFiber),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_normal,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:sym, :ok2),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Fiber), :new),
                s(:args,
                  s(:arg, :e)),
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:sym, :ok1),
                    s(:lvar, :e)),
                  s(:send,
                    s(:const, nil, :Fiber), :yield,
                    s(:sym, :ok2)))), :resume,
              s(:sym, :ok1))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :a),
              s(:sym, :b)),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Fiber), :new),
                s(:args,
                  s(:arg, :a),
                  s(:arg, :b)),
                s(:array,
                  s(:lvar, :a),
                  s(:lvar, :b))), :resume,
              s(:sym, :a),
              s(:sym, :b))))),
      s(:def, :test_argument,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:int, 4),
          s(:send,
            s(:block,
              s(:send,
                s(:const, nil, :Fiber), :new),
              s(:args,
                s(:optarg, :i,
                  s(:int, 4))),
              s(:lvar, :i)), :resume))),
      s(:def, :test_term,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:sym, :ok),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Fiber), :new),
                s(:args),
                s(:sym, :ok)), :resume)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :a),
              s(:sym, :b),
              s(:sym, :c),
              s(:sym, :d),
              s(:sym, :e)),
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:const, nil, :Fiber), :new),
                  s(:args),
                  s(:send,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:const, nil, :Fiber), :new),
                        s(:args),
                        s(:send,
                          s(:send,
                            s(:block,
                              s(:send,
                                s(:const, nil, :Fiber), :new),
                              s(:args),
                              s(:send,
                                s(:send,
                                  s(:block,
                                    s(:send,
                                      s(:const, nil, :Fiber), :new),
                                    s(:args),
                                    s(:array,
                                      s(:sym, :a))), :resume), :+,
                                s(:array,
                                  s(:sym, :b)))), :resume), :+,
                          s(:array,
                            s(:sym, :c)))), :resume), :+,
                    s(:array,
                      s(:sym, :d)))), :resume), :+,
              s(:array,
                s(:sym, :e)))))),
      s(:def, :test_many_fibers,
        s(:args),
        s(:begin,
          s(:lvasgn, :max,
            s(:int, 10000)),
          s(:send, nil, :assert_equal,
            s(:lvar, :max),
            s(:block,
              s(:send,
                s(:lvar, :max), :times),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :Fiber), :new),
                s(:args), nil))),
          s(:send,
            s(:const, nil, :GC), :start),
          s(:send, nil, :assert_equal,
            s(:lvar, :max),
            s(:block,
              s(:send,
                s(:lvar, :max), :times),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:block,
                  s(:send,
                    s(:const, nil, :Fiber), :new),
                  s(:args), nil), :resume))),
          s(:send,
            s(:const, nil, :GC), :start))),
      s(:def, :test_many_fibers_with_threads,
        s(:args),
        s(:send, nil, :assert_normal_exit,
          s(:dstr,
            s(:str, "      max = 1000\n"),
            s(:str, "      @cnt = 0\n"),
            s(:str, "      (1..100).map{|ti|\n"),
            s(:str, "        Thread.new{\n"),
            s(:str, "          max.times{|i|\n"),
            s(:str, "            Fiber.new{\n"),
            s(:str, "              @cnt += 1\n"),
            s(:str, "            }.resume\n"),
            s(:str, "          }\n"),
            s(:str, "        }\n"),
            s(:str, "      }.each{|t|\n"),
            s(:str, "        t.join\n"),
            s(:str, "      }\n")),
          s(:hash,
            s(:pair,
              s(:sym, :timeout),
              s(:int, 60))))),
      s(:def, :test_error,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :Fiber), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FiberError)),
            s(:args),
            s(:begin,
              s(:lvasgn, :f,
                s(:block,
                  s(:send,
                    s(:const, nil, :Fiber), :new),
                  s(:args), nil)),
              s(:send,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:send,
                    s(:lvar, :f), :resume)), :join))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FiberError)),
            s(:args),
            s(:begin,
              s(:lvasgn, :f,
                s(:block,
                  s(:send,
                    s(:const, nil, :Fiber), :new),
                  s(:args), nil)),
              s(:send,
                s(:lvar, :f), :resume),
              s(:send,
                s(:lvar, :f), :resume))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:begin,
              s(:send,
                s(:block,
                  s(:send,
                    s(:const, nil, :Fiber), :new),
                  s(:args),
                  s(:ivasgn, :@c,
                    s(:block,
                      s(:send, nil, :callcc),
                      s(:args,
                        s(:arg, :c)),
                      s(:ivasgn, :@c,
                        s(:lvar, :c))))), :resume),
              s(:send,
                s(:ivar, :@c), :call))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Fiber), :new),
                s(:args),
                s(:send, nil, :raise)), :resume)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FiberError)),
            s(:args),
            s(:send,
              s(:const, nil, :Fiber), :yield)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FiberError)),
            s(:args),
            s(:begin,
              s(:lvasgn, :fib,
                s(:block,
                  s(:send,
                    s(:const, nil, :Fiber), :new),
                  s(:args),
                  s(:send,
                    s(:lvar, :fib), :resume))),
              s(:send,
                s(:lvar, :fib), :resume))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FiberError)),
            s(:args),
            s(:begin,
              s(:lvasgn, :fib,
                s(:block,
                  s(:send,
                    s(:const, nil, :Fiber), :new),
                  s(:args),
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Fiber), :new),
                      s(:args),
                      s(:send,
                        s(:lvar, :fib), :resume)), :resume))),
              s(:send,
                s(:lvar, :fib), :resume))))),
      s(:def, :test_return,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :LocalJumpError)),
          s(:args),
          s(:send,
            s(:block,
              s(:send,
                s(:const, nil, :Fiber), :new),
              s(:args),
              s(:return)), :resume))),
      s(:def, :test_throw,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :UncaughtThrowError)),
          s(:args),
          s(:send,
            s(:block,
              s(:send,
                s(:const, nil, :Fiber), :new),
              s(:args),
              s(:send, nil, :throw,
                s(:sym, :a))), :resume))),
      s(:def, :test_transfer,
        s(:args),
        s(:begin,
          s(:lvasgn, :ary,
            s(:array)),
          s(:lvasgn, :f2,
            s(:nil)),
          s(:lvasgn, :f1,
            s(:block,
              s(:send,
                s(:const, nil, :Fiber), :new),
              s(:args),
              s(:begin,
                s(:send,
                  s(:lvar, :ary), :<<,
                  s(:send,
                    s(:lvar, :f2), :transfer,
                    s(:sym, :foo))),
                s(:sym, :ok)))),
          s(:lvasgn, :f2,
            s(:block,
              s(:send,
                s(:const, nil, :Fiber), :new),
              s(:args),
              s(:begin,
                s(:send,
                  s(:lvar, :ary), :<<,
                  s(:send,
                    s(:lvar, :f1), :transfer,
                    s(:sym, :baz))),
                s(:sym, :ng)))),
          s(:send, nil, :assert_equal,
            s(:sym, :ok),
            s(:send,
              s(:lvar, :f1), :transfer)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :baz)),
            s(:lvar, :ary)))),
      s(:def, :test_tls,
        s(:args),
        s(:begin,
          s(:def, :tvar,
            s(:args,
              s(:arg, :var),
              s(:arg, :val)),
            s(:begin,
              s(:lvasgn, :old,
                s(:send,
                  s(:send,
                    s(:const, nil, :Thread), :current), :[],
                  s(:lvar, :var))),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Thread), :current), :[]=,
                      s(:lvar, :var),
                      s(:lvar, :val)),
                    s(:yield)),
                  s(:send,
                    s(:send,
                      s(:const, nil, :Thread), :current), :[]=,
                    s(:lvar, :var),
                    s(:lvar, :old)))))),
          s(:lvasgn, :fb,
            s(:block,
              s(:send,
                s(:const, nil, :Fiber), :new),
              s(:args),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:nil),
                  s(:send,
                    s(:send,
                      s(:const, nil, :Thread), :current), :[],
                    s(:sym, :v))),
                s(:block,
                  s(:send, nil, :tvar,
                    s(:sym, :v),
                    s(:sym, :x)),
                  s(:args),
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:sym, :x),
                      s(:send,
                        s(:send,
                          s(:const, nil, :Thread), :current), :[],
                        s(:sym, :v))),
                    s(:send,
                      s(:const, nil, :Fiber), :yield),
                    s(:send, nil, :assert_equal,
                      s(:sym, :x),
                      s(:send,
                        s(:send,
                          s(:const, nil, :Thread), :current), :[],
                        s(:sym, :v))))),
                s(:send, nil, :assert_equal,
                  s(:nil),
                  s(:send,
                    s(:send,
                      s(:const, nil, :Thread), :current), :[],
                    s(:sym, :v))),
                s(:send,
                  s(:const, nil, :Fiber), :yield),
                s(:send, nil, :raise)))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:const, nil, :Thread), :current), :[],
              s(:sym, :v))),
          s(:block,
            s(:send, nil, :tvar,
              s(:sym, :v),
              s(:int, 1)),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:send,
                    s(:const, nil, :Thread), :current), :[],
                  s(:sym, :v))),
              s(:block,
                s(:send, nil, :tvar,
                  s(:sym, :v),
                  s(:int, 3)),
                s(:args),
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:int, 3),
                    s(:send,
                      s(:send,
                        s(:const, nil, :Thread), :current), :[],
                      s(:sym, :v))),
                  s(:send,
                    s(:lvar, :fb), :resume),
                  s(:send, nil, :assert_equal,
                    s(:int, 3),
                    s(:send,
                      s(:send,
                        s(:const, nil, :Thread), :current), :[],
                      s(:sym, :v))))),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:send,
                    s(:const, nil, :Thread), :current), :[],
                  s(:sym, :v))))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:const, nil, :Thread), :current), :[],
              s(:sym, :v))),
          s(:send,
            s(:lvar, :fb), :resume),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:const, nil, :Thread), :current), :[],
              s(:sym, :v))))),
      s(:def, :test_alive,
        s(:args),
        s(:begin,
          s(:lvasgn, :fib,
            s(:block,
              s(:send,
                s(:const, nil, :Fiber), :new),
              s(:args),
              s(:send,
                s(:const, nil, :Fiber), :yield))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :fib), :alive?)),
          s(:send,
            s(:lvar, :fib), :resume),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :fib), :alive?)),
          s(:send,
            s(:lvar, :fib), :resume),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :fib), :alive?)))),
      s(:def, :test_resume_self,
        s(:args),
        s(:begin,
          s(:lvasgn, :f,
            s(:block,
              s(:send,
                s(:const, nil, :Fiber), :new),
              s(:args),
              s(:send,
                s(:lvar, :f), :resume))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FiberError),
              s(:str, "[ruby-core:23651]")),
            s(:args),
            s(:send,
              s(:lvar, :f), :transfer)))),
      s(:def, :test_fiber_transfer_segv,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_normal_exit,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "      require 'fiber'\n"),
              s(:str, "      f2 = nil\n"),
              s(:str, "      f1 = Fiber.new{ f2.resume }\n"),
              s(:str, "      f2 = Fiber.new{ f1.resume }\n"),
              s(:str, "      f1.transfer\n"),
              s(:str, "    ")),
            s(:str, "[ruby-dev:40833]")),
          s(:send, nil, :assert_normal_exit,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "      require 'fiber'\n"),
              s(:str, "      Fiber.new{}.resume\n"),
              s(:str, "      1.times{Fiber.current.transfer}\n"),
              s(:str, "    "))))),
      s(:def, :test_resume_root_fiber,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :FiberError)),
          s(:args),
          s(:send,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:send,
                s(:send,
                  s(:const, nil, :Fiber), :current), :resume)), :join))),
      s(:def, :test_gc_root_fiber,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug4612,
            s(:str, "[ruby-core:35891]")),
          s(:send, nil, :assert_normal_exit,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "      require 'fiber'\n"),
              s(:str, "      GC.stress = true\n"),
              s(:str, "      Thread.start{ Fiber.current; nil }.join\n"),
              s(:str, "      GC.start\n"),
              s(:str, "    ")),
            s(:lvar, :bug4612)))),
      s(:def, :test_no_valid_cfp,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5083,
            s(:str, "[ruby-dev:44208]")),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:send,
                s(:const, nil, :Fiber), :new,
                s(:block_pass,
                  s(:send,
                    s(:const, nil, :Module), :method,
                    s(:sym, :nesting)))), :resume),
            s(:lvar, :bug5083)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Class),
            s(:send,
              s(:send,
                s(:const, nil, :Fiber), :new,
                s(:block_pass,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Class), :new), :method,
                    s(:sym, :undef_method)))), :resume,
              s(:sym, :to_s)),
            s(:lvar, :bug5083)))),
      s(:def, :test_prohibit_resume_transfered_fiber,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FiberError)),
            s(:args),
            s(:begin,
              s(:lvasgn, :root_fiber,
                s(:send,
                  s(:const, nil, :Fiber), :current)),
              s(:lvasgn, :f,
                s(:block,
                  s(:send,
                    s(:const, nil, :Fiber), :new),
                  s(:args),
                  s(:send,
                    s(:lvar, :root_fiber), :transfer))),
              s(:send,
                s(:lvar, :f), :transfer),
              s(:send,
                s(:lvar, :f), :resume))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FiberError)),
            s(:args),
            s(:begin,
              s(:lvasgn, :g,
                s(:nil)),
              s(:lvasgn, :f,
                s(:block,
                  s(:send,
                    s(:const, nil, :Fiber), :new),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:lvar, :g), :resume),
                    s(:send,
                      s(:lvar, :g), :resume)))),
              s(:lvasgn, :g,
                s(:block,
                  s(:send,
                    s(:const, nil, :Fiber), :new),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:lvar, :f), :resume),
                    s(:send,
                      s(:lvar, :f), :resume)))),
              s(:send,
                s(:lvar, :f), :transfer))))),
      s(:def, :test_fork_from_fiber,
        s(:args),
        s(:begin,
          s(:kwbegin,
            s(:rescue,
              s(:lvasgn, :pid,
                s(:block,
                  s(:send,
                    s(:const, nil, :Process), :fork),
                  s(:args), nil)),
              s(:resbody,
                s(:array,
                  s(:const, nil, :NotImplementedError)), nil,
                s(:return)),
              s(:send,
                s(:const, nil, :Process), :wait,
                s(:lvar, :pid)))),
          s(:lvasgn, :bug5700,
            s(:str, "[ruby-core:41456]")),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:lvar, :bug5700)),
            s(:args),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Fiber), :new),
                s(:args),
                s(:lvasgn, :pid,
                  s(:block,
                    s(:send, nil, :fork),
                    s(:args), nil))), :resume)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :pid),
              s(:lvasgn, :status)),
            s(:send,
              s(:const, nil, :Process), :waitpid2,
              s(:lvar, :pid))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :status), :exitstatus),
            s(:lvar, :bug5700)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :status), :signaled?),
            s(:lvar, :bug5700)))),
      s(:def, :test_exit_in_fiber,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5993,
            s(:str, "[ruby-dev:45218]")),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:lvar, :bug5993)),
            s(:args),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :new),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Fiber), :new),
                      s(:args),
                      s(:send,
                        s(:const, nil, :Thread), :exit)), :resume),
                  s(:send, nil, :raise,
                    s(:str, "unreachable")))), :join)))),
      s(:def, :test_fatal_in_fiber,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array,
            s(:str, "-r-test-/fatal/rb_fatal"),
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      Fiber.new{\n"),
              s(:str, "        rb_fatal \"ok\"\n"),
              s(:str, "      }.resume\n"),
              s(:str, "      puts :ng # unreachable.\n"))),
          s(:str, ""),
          s(:array),
          s(:regexp,
            s(:str, "ok"),
            s(:regopt)))),
      s(:def, :invoke_rec,
        s(:args,
          s(:arg, :script),
          s(:arg, :vm_stack_size),
          s(:arg, :machine_stack_size),
          s(:optarg, :use_length,
            s(:true))),
        s(:begin,
          s(:lvasgn, :env,
            s(:hash)),
          s(:if,
            s(:lvar, :vm_stack_size),
            s(:send,
              s(:lvar, :env), :[]=,
              s(:str, "RUBY_FIBER_VM_STACK_SIZE"),
              s(:send,
                s(:lvar, :vm_stack_size), :to_s)), nil),
          s(:if,
            s(:lvar, :machine_stack_size),
            s(:send,
              s(:lvar, :env), :[]=,
              s(:str, "RUBY_FIBER_MACHINE_STACK_SIZE"),
              s(:send,
                s(:lvar, :machine_stack_size), :to_s)), nil),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :_)),
            s(:block,
              s(:send,
                s(:const, nil, :Dir), :mktmpdir,
                s(:str, "test_fiber")),
              s(:args,
                s(:arg, :tmpdir)),
              s(:send,
                s(:const, nil, :EnvUtil), :invoke_ruby,
                s(:array,
                  s(:lvar, :env),
                  s(:str, "-e"),
                  s(:lvar, :script)),
                s(:str, ""),
                s(:true),
                s(:true),
                s(:hash,
                  s(:pair,
                    s(:sym, :chdir),
                    s(:lvar, :tmpdir)))))),
          s(:if,
            s(:lvar, :use_length),
            s(:send,
              s(:lvar, :out), :length),
            s(:lvar, :out)))),
      s(:def, :test_stack_size,
        s(:args),
        s(:begin,
          s(:lvasgn, :h_default,
            s(:send, nil, :eval,
              s(:send, nil, :invoke_rec,
                s(:str, "p RubyVM::DEFAULT_PARAMS"),
                s(:nil),
                s(:nil),
                s(:false)))),
          s(:lvasgn, :h_0,
            s(:send, nil, :eval,
              s(:send, nil, :invoke_rec,
                s(:str, "p RubyVM::DEFAULT_PARAMS"),
                s(:int, 0),
                s(:int, 0),
                s(:false)))),
          s(:lvasgn, :h_large,
            s(:send, nil, :eval,
              s(:send, nil, :invoke_rec,
                s(:str, "p RubyVM::DEFAULT_PARAMS"),
                s(:send,
                  s(:send,
                    s(:int, 1024), :*,
                    s(:int, 1024)), :*,
                  s(:int, 10)),
                s(:send,
                  s(:send,
                    s(:int, 1024), :*,
                    s(:int, 1024)), :*,
                  s(:int, 10)),
                s(:false)))),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:lvar, :h_default), :[],
              s(:sym, :fiber_vm_stack_size)),
            s(:sym, :>),
            s(:send,
              s(:lvar, :h_0), :[],
              s(:sym, :fiber_vm_stack_size))),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:lvar, :h_default), :[],
              s(:sym, :fiber_vm_stack_size)),
            s(:sym, :<),
            s(:send,
              s(:lvar, :h_large), :[],
              s(:sym, :fiber_vm_stack_size))),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:lvar, :h_default), :[],
              s(:sym, :fiber_machine_stack_size)),
            s(:sym, :>=),
            s(:send,
              s(:lvar, :h_0), :[],
              s(:sym, :fiber_machine_stack_size))),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:lvar, :h_default), :[],
              s(:sym, :fiber_machine_stack_size)),
            s(:sym, :<=),
            s(:send,
              s(:lvar, :h_large), :[],
              s(:sym, :fiber_machine_stack_size))),
          s(:lvasgn, :script,
            s(:str, "$stdout.sync=true; def rec; print \".\"; rec; end; Fiber.new{rec}.resume")),
          s(:lvasgn, :size_default,
            s(:send, nil, :invoke_rec,
              s(:lvar, :script),
              s(:nil),
              s(:nil))),
          s(:send, nil, :assert_operator,
            s(:lvar, :size_default),
            s(:sym, :>),
            s(:int, 0)),
          s(:lvasgn, :size_0,
            s(:send, nil, :invoke_rec,
              s(:lvar, :script),
              s(:int, 0),
              s(:nil))),
          s(:send, nil, :assert_operator,
            s(:lvar, :size_default),
            s(:sym, :>),
            s(:lvar, :size_0)),
          s(:lvasgn, :size_large,
            s(:send, nil, :invoke_rec,
              s(:lvar, :script),
              s(:send,
                s(:send,
                  s(:int, 1024), :*,
                  s(:int, 1024)), :*,
                s(:int, 10)),
              s(:nil))),
          s(:send, nil, :assert_operator,
            s(:lvar, :size_default),
            s(:sym, :<),
            s(:lvar, :size_large)),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "mswin|mingw"),
                s(:regopt)),
              s(:const, nil, :RUBY_PLATFORM)),
            s(:return), nil),
          s(:lvasgn, :script,
            s(:str, "$stdout.sync=true; def rec; print \".\"; 1.times{1.times{1.times{rec}}}; end; Fiber.new{rec}.resume")),
          s(:lvasgn, :vm_stack_size,
            s(:send,
              s(:int, 1024), :*,
              s(:int, 1024))),
          s(:lvasgn, :size_default,
            s(:send, nil, :invoke_rec,
              s(:lvar, :script),
              s(:lvar, :vm_stack_size),
              s(:nil))),
          s(:lvasgn, :size_0,
            s(:send, nil, :invoke_rec,
              s(:lvar, :script),
              s(:lvar, :vm_stack_size),
              s(:int, 0))),
          s(:send, nil, :assert_operator,
            s(:lvar, :size_default),
            s(:sym, :>=),
            s(:lvar, :size_0)),
          s(:lvasgn, :size_large,
            s(:send, nil, :invoke_rec,
              s(:lvar, :script),
              s(:lvar, :vm_stack_size),
              s(:send,
                s(:send,
                  s(:int, 1024), :*,
                  s(:int, 1024)), :*,
                s(:int, 10)))),
          s(:send, nil, :assert_operator,
            s(:lvar, :size_default),
            s(:sym, :<=),
            s(:lvar, :size_large)))),
      s(:def, :test_separate_lastmatch,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7678,
            s(:str, "[ruby-core:51331]")),
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "a"),
              s(:regopt)),
            s(:str, "a")),
          s(:lvasgn, :m1,
            s(:gvar, :$~)),
          s(:lvasgn, :m2,
            s(:nil)),
          s(:send,
            s(:block,
              s(:send,
                s(:const, nil, :Fiber), :new),
              s(:args),
              s(:begin,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "b"),
                    s(:regopt)),
                  s(:str, "b")),
                s(:lvasgn, :m2,
                  s(:gvar, :$~)))), :resume),
          s(:send, nil, :assert_equal,
            s(:str, "b"),
            s(:send,
              s(:lvar, :m2), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:lvar, :m1),
            s(:gvar, :$~),
            s(:lvar, :bug7678)))),
      s(:def, :test_separate_lastline,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7678,
            s(:str, "[ruby-core:51331]")),
          s(:gvasgn, :$_,
            s(:lvasgn, :s1,
              s(:str, "outer"))),
          s(:lvasgn, :s2,
            s(:nil)),
          s(:send,
            s(:block,
              s(:send,
                s(:const, nil, :Fiber), :new),
              s(:args),
              s(:lvasgn, :s2,
                s(:str, "inner"))), :resume),
          s(:send, nil, :assert_equal,
            s(:str, "inner"),
            s(:lvar, :s2)),
          s(:send, nil, :assert_equal,
            s(:lvar, :s1),
            s(:gvar, :$_),
            s(:lvar, :bug7678)))))))
