s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestAlias),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:class,
        s(:const, nil, :Alias0), nil,
        s(:def, :foo,
          s(:args),
          s(:str, "foo"))),
      s(:class,
        s(:const, nil, :Alias1),
        s(:const, nil, :Alias0),
        s(:begin,
          s(:alias,
            s(:sym, :bar),
            s(:sym, :foo)),
          s(:def, :foo,
            s(:args),
            s(:dstr,
              s(:str, "foo+"),
              s(:begin,
                s(:zsuper)))))),
      s(:class,
        s(:const, nil, :Alias2),
        s(:const, nil, :Alias1),
        s(:begin,
          s(:alias,
            s(:sym, :baz),
            s(:sym, :foo)),
          s(:undef,
            s(:sym, :foo)))),
      s(:class,
        s(:const, nil, :Alias3),
        s(:const, nil, :Alias2),
        s(:begin,
          s(:def, :foo,
            s(:args),
            s(:zsuper)),
          s(:def, :bar,
            s(:args),
            s(:zsuper)),
          s(:def, :quux,
            s(:args),
            s(:zsuper)))),
      s(:def, :test_alias,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :Alias2), :new)),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:lvar, :x), :bar)),
          s(:send, nil, :assert_equal,
            s(:str, "foo+foo"),
            s(:send,
              s(:lvar, :x), :baz)),
          s(:send, nil, :assert_equal,
            s(:str, "foo+foo"),
            s(:send,
              s(:lvar, :x), :baz)),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :Alias3), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:lvar, :x), :foo)),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:lvar, :x), :bar)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:lvar, :x), :quux)))),
      s(:class,
        s(:const, nil, :C), nil,
        s(:def, :m,
          s(:args),
          s(:gvar, :$SAFE))),
      s(:def, :test_nonexistmethod,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :NameError)),
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Class), :new),
            s(:args),
            s(:send, nil, :alias_method,
              s(:sym, :foobarxyzzy),
              s(:sym, :barbaz))))),
      s(:def, :test_send_alias,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:str, "abc")),
          s(:sclass,
            s(:lvar, :x),
            s(:send, nil, :alias_method,
              s(:sym, :try),
              s(:sym, :__send__))),
          s(:send, nil, :assert_equal,
            s(:str, "ABC"),
            s(:send,
              s(:lvar, :x), :try,
              s(:sym, :upcase)),
            s(:str, "[ruby-dev:38824]")))),
      s(:def, :test_special_const_alias,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:block,
            s(:send,
              s(:int, 1), :instance_eval),
            s(:args),
            s(:alias,
              s(:sym, :to_string),
              s(:sym, :to_s))))),
      s(:def, :test_alias_with_zsuper_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send,
              s(:lvar, :c), :class_eval),
            s(:args),
            s(:begin,
              s(:def, :foo,
                s(:args),
                s(:sym, :ok)),
              s(:def, :bar,
                s(:args),
                s(:sym, :ng)),
              s(:send, nil, :private,
                s(:sym, :foo)))),
          s(:lvasgn, :d,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :c))),
          s(:block,
            s(:send,
              s(:lvar, :d), :class_eval),
            s(:args),
            s(:begin,
              s(:send, nil, :public,
                s(:sym, :foo)),
              s(:alias,
                s(:sym, :bar),
                s(:sym, :foo)))),
          s(:send, nil, :assert_equal,
            s(:sym, :ok),
            s(:send,
              s(:send,
                s(:lvar, :d), :new), :bar)))),
      s(:module,
        s(:const, nil, :SuperInAliasedModuleMethod),
        s(:begin,
          s(:module,
            s(:const, nil, :M),
            s(:begin,
              s(:def, :foo,
                s(:args),
                s(:send,
                  s(:zsuper), :<<,
                  s(:sym, :M))),
              s(:alias,
                s(:sym, :bar),
                s(:sym, :foo)))),
          s(:class,
            s(:const, nil, :Base), nil,
            s(:def, :foo,
              s(:args),
              s(:array,
                s(:sym, :Base)))),
          s(:class,
            s(:const, nil, :Derived),
            s(:const, nil, :Base),
            s(:send, nil, :include,
              s(:const, nil, :M))))),
      s(:def, :test_super_in_aliased_module_method,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:sym, :Base),
            s(:sym, :M)),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :SuperInAliasedModuleMethod), :Derived), :new), :bar))),
      s(:def, :test_alias_wb_miss,
        s(:args),
        s(:send, nil, :assert_normal_exit,
          s(:dstr,
            s(:str, "\n"),
            s(:str, "      require 'stringio'\n"),
            s(:str, "      GC.verify_internal_consistency\n"),
            s(:str, "      GC.start\n"),
            s(:str, "      class StringIO\n"),
            s(:str, "        alias_method :read_nonblock, :sysread\n"),
            s(:str, "      end\n"),
            s(:str, "      GC.verify_internal_consistency\n"),
            s(:str, "    ")))),
      s(:def, :test_cyclic_zsuper,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9475,
            s(:str, "[ruby-core:60431] [Bug #9475]")),
          s(:lvasgn, :a,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:def, :foo,
                s(:args),
                s(:str, "A")))),
          s(:lvasgn, :b,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:send, nil, :include,
                  s(:lvar, :a)),
                s(:send, nil, :attr_reader,
                  s(:sym, :b)),
                s(:def, :foo,
                  s(:args),
                  s(:begin,
                    s(:or_asgn,
                      s(:ivasgn, :@b),
                      s(:int, 0)),
                    s(:if,
                      s(:send,
                        s(:begin,
                          s(:op_asgn,
                            s(:ivasgn, :@b), :+,
                            s(:int, 1))), :>,
                        s(:int, 1)),
                      s(:send, nil, :raise,
                        s(:const, nil, :SystemStackError)), nil),
                    s(:send,
                      s(:zsuper), :+,
                      s(:str, "B"))))))),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:lvar, :b)),
              s(:args),
              s(:begin,
                s(:alias,
                  s(:sym, :orig_foo),
                  s(:sym, :foo)),
                s(:def, :foo,
                  s(:args),
                  s(:send,
                    s(:send, nil, :orig_foo), :+,
                    s(:str, "C")))))),
          s(:block,
            s(:send,
              s(:lvar, :b), :class_eval),
            s(:args),
            s(:begin,
              s(:alias,
                s(:sym, :orig_foo),
                s(:sym, :foo)),
              s(:send, nil, :attr_reader,
                s(:sym, :b2)),
              s(:def, :foo,
                s(:args),
                s(:begin,
                  s(:or_asgn,
                    s(:ivasgn, :@b2),
                    s(:int, 0)),
                  s(:if,
                    s(:send,
                      s(:begin,
                        s(:op_asgn,
                          s(:ivasgn, :@b2), :+,
                          s(:int, 1))), :>,
                      s(:int, 1)),
                    s(:send, nil, :raise,
                      s(:const, nil, :SystemStackError)), nil),
                  s(:send,
                    s(:send, nil, :orig_foo), :+,
                    s(:str, "B2")))))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :SystemStackError),
              s(:lvar, :bug9475)),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:str, "ABC"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :new), :foo),
              s(:lvar, :bug9475))))),
      s(:def, :test_alias_in_module,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9663,
            s(:str, "[ruby-core:61635] [Bug #9663]")),
          s(:send, nil, :assert_separately,
            s(:array,
              s(:str, "-"),
              s(:lvar, :bug9663)),
            s(:dstr,
              s(:str, "      bug = ARGV[0]\n"),
              s(:str, "\n"),
              s(:str, "      m = Module.new do\n"),
              s(:str, "        alias orig_to_s to_s\n"),
              s(:str, "      end\n"),
              s(:str, "\n"),
              s(:str, "      o = Object.new.extend(m)\n"),
              s(:str, "      assert_equal(o.to_s, o.orig_to_s, bug)\n"))))),
      s(:class,
        s(:const, nil, :C0), nil,
        s(:def, :foo,
          s(:args), nil)),
      s(:class,
        s(:const, nil, :C1),
        s(:const, nil, :C0),
        s(:alias,
          s(:sym, :bar),
          s(:sym, :foo))),
      s(:def, :test_alias_method_equation,
        s(:args),
        s(:begin,
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :C1), :new)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :obj), :method,
              s(:sym, :bar)),
            s(:send,
              s(:lvar, :obj), :method,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :obj), :method,
              s(:sym, :foo)),
            s(:send,
              s(:lvar, :obj), :method,
              s(:sym, :bar))))))))
