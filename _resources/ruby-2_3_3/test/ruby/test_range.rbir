s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "delegate")),
  s(:send, nil, :require,
    s(:str, "timeout")),
  s(:send, nil, :require,
    s(:str, "bigdecimal")),
  s(:class,
    s(:const, nil, :TestRange),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_new,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:begin,
              s(:irange,
                s(:int, 0),
                s(:int, 2))),
            s(:send,
              s(:const, nil, :Range), :new,
              s(:int, 0),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:begin,
              s(:irange,
                s(:int, 0),
                s(:int, 2))),
            s(:send,
              s(:const, nil, :Range), :new,
              s(:int, 0),
              s(:int, 2),
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:begin,
              s(:erange,
                s(:int, 0),
                s(:int, 2))),
            s(:send,
              s(:const, nil, :Range), :new,
              s(:int, 0),
              s(:int, 2),
              s(:true))))),
      s(:def, :test_range_string,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:str, "a"),
                  s(:str, "a"))), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a")),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:str, "a"),
                  s(:str, "a"))), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a")),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:str, "a"),
                  s(:str, "b"))), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a"),
              s(:str, "b")),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:str, "a"),
                  s(:str, "b"))), :to_a)))),
      s(:def, :test_range_numeric_string,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "6"),
              s(:str, "7"),
              s(:str, "8")),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:str, "6"),
                  s(:str, "8"))), :to_a),
            s(:str, "[ruby-talk:343187]")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "6"),
              s(:str, "7")),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:str, "6"),
                  s(:str, "8"))), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "9"),
              s(:str, "10")),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:str, "9"),
                  s(:str, "10"))), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "09"),
              s(:str, "10")),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:str, "09"),
                  s(:str, "10"))), :to_a),
            s(:str, "[ruby-dev:39361]")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "9"),
              s(:str, "10")),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:send,
                    s(:const, nil, :SimpleDelegator), :new,
                    s(:str, "9")),
                  s(:str, "10"))), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "9"),
              s(:str, "10")),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:str, "9"),
                  s(:send,
                    s(:const, nil, :SimpleDelegator), :new,
                    s(:str, "10")))), :to_a)))),
      s(:def, :test_range_symbol,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:sym, :a),
            s(:sym, :b)),
          s(:send,
            s(:begin,
              s(:irange,
                s(:sym, :a),
                s(:sym, :b))), :to_a))),
      s(:def, :test_evaluation_order,
        s(:args),
        s(:begin,
          s(:lvasgn, :arr,
            s(:array,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :r,
            s(:irange,
              s(:begin,
                s(:send,
                  s(:lvar, :arr), :shift)),
              s(:begin,
                s(:send,
                  s(:lvar, :arr), :shift)))),
          s(:send, nil, :assert_equal,
            s(:irange,
              s(:int, 1),
              s(:int, 2)),
            s(:lvar, :r),
            s(:str, "[ruby-dev:26383]")))),
      s(:class,
        s(:const, nil, :DuckRange), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :b),
              s(:arg, :e),
              s(:optarg, :excl,
                s(:false))),
            s(:begin,
              s(:ivasgn, :@begin,
                s(:lvar, :b)),
              s(:ivasgn, :@end,
                s(:lvar, :e)),
              s(:ivasgn, :@excl,
                s(:lvar, :excl)))),
          s(:send, nil, :attr_reader,
            s(:sym, :begin),
            s(:sym, :end)),
          s(:def, :exclude_end?,
            s(:args),
            s(:ivar, :@excl)))),
      s(:def, :test_duckrange,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "bc"),
          s(:send,
            s(:str, "abcd"), :[],
            s(:send,
              s(:const, nil, :DuckRange), :new,
              s(:int, 1),
              s(:int, 2))))),
      s(:def, :test_min,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1),
                  s(:int, 2))), :min)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 2),
                  s(:int, 1))), :min)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:int, 1),
                  s(:int, 2))), :min)),
          s(:send, nil, :assert_equal,
            s(:float, 1.0),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:float, 1.0),
                  s(:float, 2.0))), :min)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:float, 2.0),
                  s(:float, 1.0))), :min)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:float, 1.0),
                  s(:float, 2.0))), :min)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 0))), :min)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:int, 0),
                  s(:int, 0))), :min)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 10))), :min,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:int, 1)),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 1))), :min,
              s(:int, 3))))),
      s(:def, :test_max,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1),
                  s(:int, 2))), :max)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 2),
                  s(:int, 1))), :max)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:int, 1),
                  s(:int, 2))), :max)),
          s(:send, nil, :assert_equal,
            s(:float, 2.0),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:float, 1.0),
                  s(:float, 2.0))), :max)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:float, 2.0),
                  s(:float, 1.0))), :max)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:float, 1.0),
                  s(:float, 2.0))), :max)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:int, 1),
                  s(:float, 1.5))), :max)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:float, 1.5),
                  s(:int, 2))), :max)),
          s(:send, nil, :assert_equal,
            s(:int, -2147483650),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:begin,
                    s(:int, -2147483650)),
                  s(:begin,
                    s(:int, -2147483649)))), :max)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 0))), :max)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:int, 0),
                  s(:int, 0))), :max)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 10),
              s(:int, 9),
              s(:int, 8)),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 10))), :max,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 9),
              s(:int, 8),
              s(:int, 7)),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:int, 0),
                  s(:int, 10))), :max,
              s(:int, 3))))),
      s(:def, :test_initialize_twice,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send, nil, :eval,
              s(:str, "1..2"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :r), :instance_eval),
              s(:args),
              s(:send, nil, :initialize,
                s(:int, 3),
                s(:int, 4)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :r), :instance_eval),
              s(:args),
              s(:send, nil, :initialize_copy,
                s(:irange,
                  s(:int, 3),
                  s(:int, 4))))))),
      s(:def, :test_uninitialized_range,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send,
              s(:const, nil, :Range), :allocate)),
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:lvar, :r))),
          s(:lvasgn, :r,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:lvar, :s))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :r), :instance_eval),
              s(:args),
              s(:send, nil, :initialize,
                s(:int, 5),
                s(:int, 6)))))),
      s(:def, :test_bad_value,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:begin,
            s(:irange,
              s(:int, 1),
              s(:sym, :a))))),
      s(:def, :test_exclude_end,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_predicate,
            s(:irange,
              s(:int, 0),
              s(:int, 1)),
            s(:sym, :exclude_end?)),
          s(:send, nil, :assert_predicate,
            s(:erange,
              s(:int, 0),
              s(:int, 1)),
            s(:sym, :exclude_end?)))),
      s(:def, :test_eq,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:begin,
              s(:irange,
                s(:int, 0),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :r),
            s(:lvar, :r)),
          s(:send, nil, :assert_equal,
            s(:lvar, :r),
            s(:begin,
              s(:irange,
                s(:int, 0),
                s(:int, 1)))),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :r),
            s(:int, 0)),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :r),
            s(:begin,
              s(:irange,
                s(:int, 1),
                s(:int, 2)))),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :r),
            s(:begin,
              s(:irange,
                s(:int, 0),
                s(:int, 2)))),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :r),
            s(:begin,
              s(:erange,
                s(:int, 0),
                s(:int, 1)))),
          s(:lvasgn, :subclass,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const, nil, :Range))),
          s(:send, nil, :assert_equal,
            s(:lvar, :r),
            s(:send,
              s(:lvar, :subclass), :new,
              s(:int, 0),
              s(:int, 1))))),
      s(:def, :test_eql,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:begin,
              s(:irange,
                s(:int, 0),
                s(:int, 1)))),
          s(:send, nil, :assert_operator,
            s(:lvar, :r),
            s(:sym, :eql?),
            s(:lvar, :r)),
          s(:send, nil, :assert_operator,
            s(:lvar, :r),
            s(:sym, :eql?),
            s(:irange,
              s(:int, 0),
              s(:int, 1))),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :r),
            s(:sym, :eql?),
            s(:int, 0)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :r),
            s(:sym, :eql?),
            s(:irange,
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :r),
            s(:sym, :eql?),
            s(:irange,
              s(:int, 0),
              s(:int, 2))),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :r),
            s(:sym, :eql?),
            s(:erange,
              s(:int, 0),
              s(:int, 1))),
          s(:lvasgn, :subclass,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const, nil, :Range))),
          s(:send, nil, :assert_operator,
            s(:lvar, :r),
            s(:sym, :eql?),
            s(:send,
              s(:lvar, :subclass), :new,
              s(:int, 0),
              s(:int, 1))))),
      s(:def, :test_hash,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Fixnum),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 1))), :hash)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 1))), :hash),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 1))), :hash)),
          s(:send, nil, :assert_not_equal,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 1))), :hash),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:int, 0),
                  s(:int, 1))), :hash)))),
      s(:def, :test_step,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 10))), :step),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 5),
              s(:int, 6),
              s(:int, 7),
              s(:int, 8),
              s(:int, 9),
              s(:int, 10)),
            s(:lvar, :a)),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 10))), :step,
              s(:int, 2)),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:int, 2),
              s(:int, 4),
              s(:int, 6),
              s(:int, 8),
              s(:int, 10)),
            s(:lvar, :a)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 0),
                    s(:int, 10))), :step,
                s(:int, -1)),
              s(:args), nil)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 0),
                    s(:int, 10))), :step,
                s(:int, 0)),
              s(:args), nil)),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:str, "a"),
                  s(:str, "z"))), :step,
              s(:int, 2)),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a"),
              s(:str, "c"),
              s(:str, "e"),
              s(:str, "g"),
              s(:str, "i"),
              s(:str, "k"),
              s(:str, "m"),
              s(:str, "o"),
              s(:str, "q"),
              s(:str, "s"),
              s(:str, "u"),
              s(:str, "w"),
              s(:str, "y")),
            s(:lvar, :a)),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:str, "a"),
                  s(:str, "z"))), :step,
              s(:send,
                s(:int, 2), :**,
                s(:int, 32))),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a")),
            s(:lvar, :a)),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:send,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 32)), :-,
                    s(:int, 1)),
                  s(:send,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 32)), :+,
                    s(:int, 1)))), :step,
              s(:int, 2)),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 4294967295),
              s(:int, 4294967297)),
            s(:lvar, :a)),
          s(:lvasgn, :zero,
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 32))), :coerce,
                s(:int, 0)), :first)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:send,
                      s(:send,
                        s(:int, 2), :**,
                        s(:int, 32)), :-,
                      s(:int, 1)),
                    s(:send,
                      s(:send,
                        s(:int, 2), :**,
                        s(:int, 32)), :+,
                      s(:int, 1)))), :step,
                s(:lvar, :zero)),
              s(:args), nil)),
          s(:lvasgn, :o1,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :o2,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o1), :<=>,
            s(:args,
              s(:arg, :x)),
            s(:int, -1)),
          s(:defs,
            s(:lvar, :o2), :<=>,
            s(:args,
              s(:arg, :x)),
            s(:int, 0)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:lvar, :o1),
                    s(:lvar, :o2))), :step,
                s(:int, 1)),
              s(:args), nil)),
          s(:block,
            s(:send,
              s(:sclass,
                s(:lvar, :o1),
                s(:self)), :class_eval),
            s(:args),
            s(:block,
              s(:send, nil, :define_method,
                s(:sym, :succ)),
              s(:args),
              s(:lvar, :o2))),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:lvar, :o1),
                  s(:lvar, :o2))), :step,
              s(:int, 1)),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :o1),
              s(:lvar, :o2)),
            s(:lvar, :a)),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:begin,
                s(:erange,
                  s(:lvar, :o1),
                  s(:lvar, :o2))), :step,
              s(:int, 1)),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :o1)),
            s(:lvar, :a)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:str, "[ruby-dev:34557]")),
            s(:args),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 0),
                    s(:int, 2))), :step,
                s(:float, 0.5)),
              s(:args,
                s(:arg, :x)), nil)),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 2))), :step,
              s(:float, 0.5)),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:float, 0.5),
              s(:float, 1.0),
              s(:float, 1.5),
              s(:float, 2.0)),
            s(:lvar, :a)),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1073741824),
                  s(:int, 1073741826))), :step,
              s(:float, 0.5)),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1073741824),
              s(:float, 1073741824.5),
              s(:float, 1073741825.0),
              s(:float, 1073741825.5),
              s(:int, 1073741826)),
            s(:lvar, :a)),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :to_int,
            s(:args),
            s(:int, 1)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:str, "[ruby-dev:34558]")),
            s(:args),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 0),
                    s(:int, 2))), :step,
                s(:lvar, :o)),
              s(:args,
                s(:arg, :x)), nil)))),
      s(:def, :test_step_ruby_core_35753,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:erange,
                      s(:int, 1),
                      s(:float, 6.3))), :step), :to_a), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:erange,
                      s(:float, 1.1),
                      s(:int, 6))), :step), :to_a), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:erange,
                      s(:int, 1),
                      s(:int, 6))), :step,
                  s(:float, 1.1)), :to_a), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:erange,
                      s(:float, 1.0),
                      s(:float, 5.4))), :step,
                  s(:float, 1.5)), :to_a), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:erange,
                      s(:float, 1.0),
                      s(:float, 5.5))), :step,
                  s(:float, 1.5)), :to_a), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:erange,
                      s(:float, 1.0),
                      s(:float, 5.6))), :step,
                  s(:float, 1.5)), :to_a), :size)))),
      s(:def, :test_each,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 10))), :each),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 5),
              s(:int, 6),
              s(:int, 7),
              s(:int, 8),
              s(:int, 9),
              s(:int, 10)),
            s(:lvar, :a)),
          s(:lvasgn, :o1,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :o2,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o1), :setcmp,
            s(:args,
              s(:arg, :v)),
            s(:ivasgn, :@cmpresult,
              s(:lvar, :v))),
          s(:send,
            s(:lvar, :o1), :setcmp,
            s(:int, -1)),
          s(:defs,
            s(:lvar, :o1), :<=>,
            s(:args,
              s(:arg, :x)),
            s(:ivar, :@cmpresult)),
          s(:defs,
            s(:lvar, :o2), :setcmp,
            s(:args,
              s(:arg, :v)),
            s(:ivasgn, :@cmpresult,
              s(:lvar, :v))),
          s(:send,
            s(:lvar, :o2), :setcmp,
            s(:int, 0)),
          s(:defs,
            s(:lvar, :o2), :<=>,
            s(:args,
              s(:arg, :x)),
            s(:ivar, :@cmpresult)),
          s(:block,
            s(:send,
              s(:sclass,
                s(:lvar, :o1),
                s(:self)), :class_eval),
            s(:args),
            s(:block,
              s(:send, nil, :define_method,
                s(:sym, :succ)),
              s(:args),
              s(:lvar, :o2))),
          s(:lvasgn, :r1,
            s(:begin,
              s(:irange,
                s(:lvar, :o1),
                s(:lvar, :o2)))),
          s(:lvasgn, :r2,
            s(:begin,
              s(:erange,
                s(:lvar, :o1),
                s(:lvar, :o2)))),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :r1), :each),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :o1),
              s(:lvar, :o2)),
            s(:lvar, :a)),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :r2), :each),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :o1)),
            s(:lvar, :a)),
          s(:send,
            s(:lvar, :o2), :setcmp,
            s(:int, 1)),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :r1), :each),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :o1)),
            s(:lvar, :a)),
          s(:send,
            s(:lvar, :o2), :setcmp,
            s(:nil)),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :r1), :each),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :o1)),
            s(:lvar, :a)),
          s(:send,
            s(:lvar, :o1), :setcmp,
            s(:nil)),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :r2), :each),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:lvar, :a)))),
      s(:def, :test_begin_end,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 1))), :begin)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 1))), :end)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:int, 0),
                  s(:int, 1))), :end)))),
      s(:def, :test_first_last,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 10))), :first,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 8),
              s(:int, 9),
              s(:int, 10)),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 10))), :last,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 10))), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 10),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 10))), :last)),
          s(:send, nil, :assert_equal,
            s(:str, "a"),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:str, "a"),
                  s(:str, "c"))), :first)),
          s(:send, nil, :assert_equal,
            s(:str, "c"),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:str, "a"),
                  s(:str, "c"))), :last)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 2),
                  s(:int, 0))), :last)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:int, 0),
                  s(:int, 10))), :first,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 7),
              s(:int, 8),
              s(:int, 9)),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:int, 0),
                  s(:int, 10))), :last,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:int, 0),
                  s(:int, 10))), :first)),
          s(:send, nil, :assert_equal,
            s(:int, 10),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:int, 0),
                  s(:int, 10))), :last)),
          s(:send, nil, :assert_equal,
            s(:str, "a"),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:str, "a"),
                  s(:str, "c"))), :first)),
          s(:send, nil, :assert_equal,
            s(:str, "c"),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:str, "a"),
                  s(:str, "c"))), :last)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:int, 2),
                  s(:int, 0))), :last)))),
      s(:def, :test_to_s,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "0..1"),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 1))), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "0...1"),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:int, 0),
                  s(:int, 1))), :to_s)),
          s(:lvasgn, :bug11767,
            s(:str, "[ruby-core:71811] [Bug #11767]")),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:send,
                    s(:str, "0"), :taint),
                  s(:str, "1"))), :to_s),
            s(:sym, :tainted?),
            s(:lvar, :bug11767)),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:str, "0"),
                  s(:send,
                    s(:str, "1"), :taint))), :to_s),
            s(:sym, :tainted?),
            s(:lvar, :bug11767)),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:str, "0"),
                    s(:str, "1"))), :taint), :to_s),
            s(:sym, :tainted?),
            s(:lvar, :bug11767)))),
      s(:def, :test_inspect,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "0..1"),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 1))), :inspect)),
          s(:send, nil, :assert_equal,
            s(:str, "0...1"),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:int, 0),
                  s(:int, 1))), :inspect)),
          s(:lvasgn, :bug11767,
            s(:str, "[ruby-core:71811] [Bug #11767]")),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:send,
                    s(:str, "0"), :taint),
                  s(:str, "1"))), :inspect),
            s(:sym, :tainted?),
            s(:lvar, :bug11767)),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:str, "0"),
                  s(:send,
                    s(:str, "1"), :taint))), :inspect),
            s(:sym, :tainted?),
            s(:lvar, :bug11767)),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:str, "0"),
                    s(:str, "1"))), :taint), :inspect),
            s(:sym, :tainted?),
            s(:lvar, :bug11767)))),
      s(:def, :test_eqq,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_operator,
            s(:irange,
              s(:int, 0),
              s(:int, 10)),
            s(:sym, :===),
            s(:int, 5)),
          s(:send, nil, :assert_not_operator,
            s(:irange,
              s(:int, 0),
              s(:int, 10)),
            s(:sym, :===),
            s(:int, 11)))),
      s(:def, :test_eqq_time,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug11113,
            s(:str, "[ruby-core:69052] [Bug #11113]")),
          s(:lvasgn, :t,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :TypeError),
              s(:lvar, :bug11113)),
            s(:args),
            s(:send, nil, :assert_operator,
              s(:irange,
                s(:lvar, :t),
                s(:begin,
                  s(:send,
                    s(:lvar, :t), :+,
                    s(:int, 10)))),
              s(:sym, :===),
              s(:send,
                s(:lvar, :t), :+,
                s(:int, 5)))))),
      s(:def, :test_eqq_non_linear,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug12003,
            s(:str, "[ruby-core:72908] [Bug #12003]")),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:send, nil, :attr_reader,
                  s(:sym, :value)),
                s(:def, :initialize,
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@value,
                    s(:lvar, :value))),
                s(:def, :succ,
                  s(:args),
                  s(:send,
                    s(:send,
                      s(:self), :class), :new,
                    s(:send,
                      s(:ivar, :@value), :succ))),
                s(:def, :==,
                  s(:args,
                    s(:arg, :other)),
                  s(:send,
                    s(:ivar, :@value), :==,
                    s(:send,
                      s(:lvar, :other), :value))),
                s(:def, :<=>,
                  s(:args,
                    s(:arg, :other)),
                  s(:send,
                    s(:ivar, :@value), :<=>,
                    s(:send,
                      s(:lvar, :other), :value)))))),
          s(:send, nil, :assert_operator,
            s(:irange,
              s(:send,
                s(:lvar, :c), :new,
                s(:int, 0)),
              s(:send,
                s(:lvar, :c), :new,
                s(:int, 10))),
            s(:sym, :===),
            s(:send,
              s(:lvar, :c), :new,
              s(:int, 5)),
            s(:lvar, :bug12003)))),
      s(:def, :test_include,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_include,
            s(:irange,
              s(:str, "a"),
              s(:str, "z")),
            s(:str, "c")),
          s(:send, nil, :assert_not_include,
            s(:irange,
              s(:str, "a"),
              s(:str, "z")),
            s(:str, "5")),
          s(:send, nil, :assert_include,
            s(:erange,
              s(:str, "a"),
              s(:str, "z")),
            s(:str, "y")),
          s(:send, nil, :assert_not_include,
            s(:erange,
              s(:str, "a"),
              s(:str, "z")),
            s(:str, "z")),
          s(:send, nil, :assert_not_include,
            s(:irange,
              s(:str, "a"),
              s(:str, "z")),
            s(:str, "cc")),
          s(:send, nil, :assert_include,
            s(:erange,
              s(:int, 0),
              s(:int, 10)),
            s(:int, 5)))),
      s(:def, :test_cover,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_operator,
            s(:irange,
              s(:str, "a"),
              s(:str, "z")),
            s(:sym, :cover?),
            s(:str, "c")),
          s(:send, nil, :assert_not_operator,
            s(:irange,
              s(:str, "a"),
              s(:str, "z")),
            s(:sym, :cover?),
            s(:str, "5")),
          s(:send, nil, :assert_operator,
            s(:erange,
              s(:str, "a"),
              s(:str, "z")),
            s(:sym, :cover?),
            s(:str, "y")),
          s(:send, nil, :assert_not_operator,
            s(:erange,
              s(:str, "a"),
              s(:str, "z")),
            s(:sym, :cover?),
            s(:str, "z")),
          s(:send, nil, :assert_operator,
            s(:irange,
              s(:str, "a"),
              s(:str, "z")),
            s(:sym, :cover?),
            s(:str, "cc")))),
      s(:def, :test_beg_len,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:array), :[],
              s(:lvar, :o))),
          s(:sclass,
            s(:lvar, :o),
            s(:send, nil, :attr_accessor,
              s(:sym, :begin))),
          s(:send,
            s(:lvar, :o), :begin=,
            s(:int, -10)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:array), :[],
              s(:lvar, :o))),
          s(:sclass,
            s(:lvar, :o),
            s(:send, nil, :attr_accessor,
              s(:sym, :end))),
          s(:send,
            s(:lvar, :o), :end=,
            s(:int, 0)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:array), :[],
              s(:lvar, :o))),
          s(:defs,
            s(:lvar, :o), :exclude_end=,
            s(:args,
              s(:arg, :v)),
            s(:ivasgn, :@exclude_end,
              s(:lvar, :v))),
          s(:defs,
            s(:lvar, :o), :exclude_end?,
            s(:args),
            s(:ivar, :@exclude_end)),
          s(:send,
            s(:lvar, :o), :exclude_end=,
            s(:false)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:array,
                s(:int, 0)), :[],
              s(:lvar, :o))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RangeError)),
            s(:args),
            s(:send,
              s(:array,
                s(:int, 0)), :[]=,
              s(:lvar, :o),
              s(:int, 1))),
          s(:send,
            s(:lvar, :o), :begin=,
            s(:int, 10)),
          s(:send,
            s(:lvar, :o), :end=,
            s(:int, 10)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:array,
                s(:int, 0)), :[],
              s(:lvar, :o))),
          s(:send,
            s(:lvar, :o), :begin=,
            s(:int, 0)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0)),
            s(:send,
              s(:array,
                s(:int, 0)), :[],
              s(:lvar, :o))),
          s(:send,
            s(:lvar, :o), :begin=,
            s(:int, 2)),
          s(:send,
            s(:lvar, :o), :end=,
            s(:int, 0)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:array,
                s(:int, 0),
                s(:int, 1),
                s(:int, 2)), :[],
              s(:lvar, :o))))),
      s(:class,
        s(:const, nil, :CyclicRange),
        s(:const, nil, :Range),
        s(:def, :<=>,
          s(:args,
            s(:arg, :other)),
          s(:true))),
      s(:def, :test_cyclic_range_inspect,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :CyclicRange), :allocate)),
          s(:block,
            s(:send,
              s(:lvar, :o), :instance_eval),
            s(:args),
            s(:send, nil, :initialize,
              s(:lvar, :o),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "(... .. ...)..1"),
            s(:send,
              s(:lvar, :o), :inspect)))),
      s(:def, :test_comparison_when_recursive,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :CyclicRange), :allocate)),
          s(:send,
            s(:lvar, :x), :send,
            s(:sym, :initialize),
            s(:lvar, :x),
            s(:int, 1)),
          s(:lvasgn, :y,
            s(:send,
              s(:const, nil, :CyclicRange), :allocate)),
          s(:send,
            s(:lvar, :y), :send,
            s(:sym, :initialize),
            s(:lvar, :y),
            s(:int, 1)),
          s(:block,
            s(:send,
              s(:const, nil, :Timeout), :timeout,
              s(:int, 1)),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:lvar, :x),
                s(:lvar, :y)),
              s(:send, nil, :assert_operator,
                s(:lvar, :x),
                s(:sym, :eql?),
                s(:lvar, :y)))),
          s(:lvasgn, :z,
            s(:send,
              s(:const, nil, :CyclicRange), :allocate)),
          s(:send,
            s(:lvar, :z), :send,
            s(:sym, :initialize),
            s(:lvar, :z),
            s(:sym, :another)),
          s(:block,
            s(:send,
              s(:const, nil, :Timeout), :timeout,
              s(:int, 1)),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_not_equal,
                s(:lvar, :x),
                s(:lvar, :z)),
              s(:send, nil, :assert_not_operator,
                s(:lvar, :x),
                s(:sym, :eql?),
                s(:lvar, :z)))),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :CyclicRange), :allocate)),
          s(:lvasgn, :y,
            s(:send,
              s(:const, nil, :CyclicRange), :allocate)),
          s(:send,
            s(:lvar, :x), :send,
            s(:sym, :initialize),
            s(:lvar, :y),
            s(:int, 1)),
          s(:send,
            s(:lvar, :y), :send,
            s(:sym, :initialize),
            s(:lvar, :x),
            s(:int, 1)),
          s(:block,
            s(:send,
              s(:const, nil, :Timeout), :timeout,
              s(:int, 1)),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:lvar, :x),
                s(:lvar, :y)),
              s(:send, nil, :assert_operator,
                s(:lvar, :x),
                s(:sym, :eql?),
                s(:lvar, :y)))),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :CyclicRange), :allocate)),
          s(:lvasgn, :z,
            s(:send,
              s(:const, nil, :CyclicRange), :allocate)),
          s(:send,
            s(:lvar, :x), :send,
            s(:sym, :initialize),
            s(:lvar, :z),
            s(:int, 1)),
          s(:send,
            s(:lvar, :z), :send,
            s(:sym, :initialize),
            s(:lvar, :x),
            s(:sym, :other)),
          s(:block,
            s(:send,
              s(:const, nil, :Timeout), :timeout,
              s(:int, 1)),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_not_equal,
                s(:lvar, :x),
                s(:lvar, :z)),
              s(:send, nil, :assert_not_operator,
                s(:lvar, :x),
                s(:sym, :eql?),
                s(:lvar, :z)))))),
      s(:def, :test_size,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1),
                  s(:int, 42))), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 41),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:int, 1),
                  s(:int, 42))), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:int, 1),
                  s(:float, 6.3))), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:begin,
                s(:erange,
                  s(:float, 1.1),
                  s(:int, 6))), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:int, 42))), :each), :size)))),
      s(:def, :test_bsearch_typechecks_return_values,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:int, 42))), :bsearch),
              s(:args),
              s(:str, "not ok"))),
          s(:lvasgn, :c,
            s(:send, nil, :eval,
              s(:str, "class C゚⚡⛄🌀;self;end"))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "C\\u{309a 26a1 26c4 1f300}"),
                s(:regopt))),
            s(:args),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:int, 42))), :bsearch),
              s(:args),
              s(:send,
                s(:lvar, :c), :new))),
          s(:send, nil, :assert_equal,
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:int, 42))), :bsearch),
              s(:args), nil),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:int, 42))), :bsearch),
              s(:args),
              s(:false))))),
      s(:def, :test_bsearch_with_no_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :enum,
            s(:send,
              s(:begin,
                s(:erange,
                  s(:int, 42),
                  s(:int, 666))), :bsearch)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :enum), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 200),
            s(:block,
              s(:send,
                s(:lvar, :enum), :each),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :>=,
                s(:int, 200)))))),
      s(:def, :test_bsearch_for_other_numerics,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:send, nil, :Rational,
                    s(:int, -1),
                    s(:int, 2)),
                  s(:send, nil, :Rational,
                    s(:int, 9),
                    s(:int, 4)))), :bsearch)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:send, nil, :BigDecimal,
                    s(:str, "0.5")),
                  s(:send, nil, :BigDecimal,
                    s(:str, "2.25")))), :bsearch)))),
      s(:def, :test_bsearch_for_fixnum,
        s(:args),
        s(:begin,
          s(:lvasgn, :ary,
            s(:array,
              s(:int, 3),
              s(:int, 4),
              s(:int, 7),
              s(:int, 9),
              s(:int, 12))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:int, 0),
                    s(:send,
                      s(:lvar, :ary), :size))), :bsearch),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:send,
                  s(:lvar, :ary), :[],
                  s(:lvar, :i)), :>=,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:int, 0),
                    s(:send,
                      s(:lvar, :ary), :size))), :bsearch),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:send,
                  s(:lvar, :ary), :[],
                  s(:lvar, :i)), :>=,
                s(:int, 4)))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:int, 0),
                    s(:send,
                      s(:lvar, :ary), :size))), :bsearch),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:send,
                  s(:lvar, :ary), :[],
                  s(:lvar, :i)), :>=,
                s(:int, 6)))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:int, 0),
                    s(:send,
                      s(:lvar, :ary), :size))), :bsearch),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:send,
                  s(:lvar, :ary), :[],
                  s(:lvar, :i)), :>=,
                s(:int, 8)))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:int, 0),
                    s(:send,
                      s(:lvar, :ary), :size))), :bsearch),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:send,
                  s(:lvar, :ary), :[],
                  s(:lvar, :i)), :>=,
                s(:int, 10)))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:int, 0),
                    s(:send,
                      s(:lvar, :ary), :size))), :bsearch),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:send,
                  s(:lvar, :ary), :[],
                  s(:lvar, :i)), :>=,
                s(:int, 100)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:int, 0),
                    s(:send,
                      s(:lvar, :ary), :size))), :bsearch),
              s(:args,
                s(:arg, :i)),
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:int, 0),
                    s(:send,
                      s(:lvar, :ary), :size))), :bsearch),
              s(:args,
                s(:arg, :i)),
              s(:false))),
          s(:lvasgn, :ary,
            s(:array,
              s(:int, 0),
              s(:int, 100),
              s(:int, 100),
              s(:int, 100),
              s(:int, 200))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:int, 0),
                    s(:send,
                      s(:lvar, :ary), :size))), :bsearch),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:send,
                  s(:lvar, :ary), :[],
                  s(:lvar, :i)), :>=,
                s(:int, 100)))))),
      s(:def, :test_bsearch_for_float,
        s(:args),
        s(:begin,
          s(:lvasgn, :inf,
            s(:const,
              s(:const, nil, :Float), :INFINITY)),
          s(:send, nil, :assert_in_delta,
            s(:float, 10.0),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:float, 0.0),
                    s(:float, 100.0))), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:and,
                s(:send,
                  s(:lvar, :x), :>,
                  s(:int, 0)),
                s(:send,
                  s(:send,
                    s(:const, nil, :Math), :log,
                    s(:send,
                      s(:lvar, :x), :/,
                      s(:int, 10))), :>=,
                  s(:int, 0)))),
            s(:float, 0.0001)),
          s(:send, nil, :assert_in_delta,
            s(:float, 10.0),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:float, 0.0),
                    s(:lvar, :inf))), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:and,
                s(:send,
                  s(:lvar, :x), :>,
                  s(:int, 0)),
                s(:send,
                  s(:send,
                    s(:const, nil, :Math), :log,
                    s(:send,
                      s(:lvar, :x), :/,
                      s(:int, 10))), :>=,
                  s(:int, 0)))),
            s(:float, 0.0001)),
          s(:send, nil, :assert_in_delta,
            s(:float, -10.0),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:send,
                      s(:lvar, :inf), :-@),
                    s(:float, 100.0))), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:or,
                s(:send,
                  s(:lvar, :x), :>=,
                  s(:int, 0)),
                s(:send,
                  s(:send,
                    s(:const, nil, :Math), :log,
                    s(:send,
                      s(:send,
                        s(:lvar, :x), :-@), :/,
                      s(:int, 10))), :<,
                  s(:int, 0)))),
            s(:float, 0.0001)),
          s(:send, nil, :assert_in_delta,
            s(:float, 10.0),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:send,
                      s(:lvar, :inf), :-@),
                    s(:lvar, :inf))), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:and,
                s(:send,
                  s(:lvar, :x), :>,
                  s(:int, 0)),
                s(:send,
                  s(:send,
                    s(:const, nil, :Math), :log,
                    s(:send,
                      s(:lvar, :x), :/,
                      s(:int, 10))), :>=,
                  s(:int, 0)))),
            s(:float, 0.0001)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:send,
                      s(:lvar, :inf), :-@),
                    s(:int, 5))), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:and,
                s(:send,
                  s(:lvar, :x), :>,
                  s(:int, 0)),
                s(:send,
                  s(:send,
                    s(:const, nil, :Math), :log,
                    s(:send,
                      s(:lvar, :x), :/,
                      s(:int, 10))), :>=,
                  s(:int, 0)))),
            s(:float, 0.0001)),
          s(:send, nil, :assert_in_delta,
            s(:float, 10.0),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:send,
                      s(:lvar, :inf), :-@),
                    s(:int, 10))), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:and,
                s(:send,
                  s(:lvar, :x), :>,
                  s(:int, 0)),
                s(:send,
                  s(:send,
                    s(:const, nil, :Math), :log,
                    s(:send,
                      s(:lvar, :x), :/,
                      s(:int, 10))), :>=,
                  s(:int, 0)))),
            s(:float, 0.0001)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:send,
                      s(:lvar, :inf), :-@),
                    s(:int, 10))), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:and,
                s(:send,
                  s(:lvar, :x), :>,
                  s(:int, 0)),
                s(:send,
                  s(:send,
                    s(:const, nil, :Math), :log,
                    s(:send,
                      s(:lvar, :x), :/,
                      s(:int, 10))), :>=,
                  s(:int, 0)))),
            s(:float, 0.0001)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:send,
                      s(:lvar, :inf), :-@),
                    s(:lvar, :inf))), :bsearch),
              s(:args),
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :inf), :-@),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:send,
                      s(:lvar, :inf), :-@),
                    s(:lvar, :inf))), :bsearch),
              s(:args),
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:lvar, :inf),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 0),
                    s(:lvar, :inf))), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :==,
                s(:lvar, :inf)))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:int, 0),
                    s(:lvar, :inf))), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :==,
                s(:lvar, :inf)))),
          s(:lvasgn, :v,
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:send,
                      s(:lvar, :inf), :-@),
                    s(:int, 0))), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :!=,
                s(:send,
                  s(:lvar, :inf), :-@)))),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :MAX), :-@),
            s(:sym, :>=),
            s(:lvar, :v)),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:lvar, :inf), :-@),
            s(:sym, :<),
            s(:lvar, :v)),
          s(:lvasgn, :v,
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:float, 0.0),
                    s(:float, 1.0))), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :>,
                s(:int, 0)))),
          s(:send, nil, :assert_in_delta,
            s(:int, 0),
            s(:lvar, :v),
            s(:float, 0.0001)),
          s(:send, nil, :assert_operator,
            s(:int, 0),
            s(:sym, :<),
            s(:lvar, :v)),
          s(:send, nil, :assert_equal,
            s(:float, 0.0),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:float, -1.0),
                    s(:float, 0.0))), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :>=,
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:float, -1.0),
                    s(:float, 0.0))), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :>=,
                s(:int, 0)))),
          s(:lvasgn, :v,
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 0),
                    s(:const,
                      s(:const, nil, :Float), :MAX))), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :>=,
                s(:const,
                  s(:const, nil, :Float), :MAX)))),
          s(:send, nil, :assert_in_delta,
            s(:const,
              s(:const, nil, :Float), :MAX),
            s(:lvar, :v)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :v), :infinite?)),
          s(:lvasgn, :v,
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 0),
                    s(:lvar, :inf))), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :>=,
                s(:const,
                  s(:const, nil, :Float), :MAX)))),
          s(:send, nil, :assert_in_delta,
            s(:const,
              s(:const, nil, :Float), :MAX),
            s(:lvar, :v)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :v), :infinite?)),
          s(:lvasgn, :v,
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Float), :MAX), :-@),
                    s(:int, 0))), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :>,
                s(:send,
                  s(:const,
                    s(:const, nil, :Float), :MAX), :-@)))),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :MAX), :-@),
            s(:sym, :<),
            s(:lvar, :v)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :v), :infinite?)),
          s(:lvasgn, :v,
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:send,
                      s(:lvar, :inf), :-@),
                    s(:int, 0))), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :>=,
                s(:send,
                  s(:const,
                    s(:const, nil, :Float), :MAX), :-@)))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :MAX), :-@),
            s(:lvar, :v)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :v), :infinite?)),
          s(:lvasgn, :v,
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:send,
                      s(:lvar, :inf), :-@),
                    s(:int, 0))), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :>,
                s(:send,
                  s(:const,
                    s(:const, nil, :Float), :MAX), :-@)))),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :MAX), :-@),
            s(:sym, :<),
            s(:lvar, :v)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :v), :infinite?)),
          s(:send, nil, :assert_in_delta,
            s(:float, 1.0),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:float, 0.0),
                    s(:lvar, :inf))), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:send,
                  s(:const, nil, :Math), :log,
                  s(:lvar, :x)), :>=,
                s(:int, 0)))),
          s(:send, nil, :assert_in_delta,
            s(:float, 7.0),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:float, 0.0),
                    s(:int, 10))), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:float, 7.0), :-,
                s(:lvar, :x)))))),
      s(:def, :check_bsearch_values,
        s(:args,
          s(:arg, :range),
          s(:arg, :search)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :from),
              s(:lvasgn, :to)),
            s(:array,
              s(:send,
                s(:lvar, :range), :begin),
              s(:send,
                s(:lvar, :range), :end))),
          s(:lvasgn, :cmp,
            s(:if,
              s(:send,
                s(:lvar, :range), :exclude_end?),
              s(:sym, :<),
              s(:sym, :<=))),
          s(:lvasgn, :r,
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Range), :new,
                  s(:lvar, :to),
                  s(:lvar, :from),
                  s(:send,
                    s(:lvar, :range), :exclude_end?)), :bsearch),
              s(:args,
                s(:arg, :x)),
              s(:send, nil, :fail,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :to)),
                  s(:str, ", "),
                  s(:begin,
                    s(:lvar, :from)),
                  s(:str, ", "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :range), :exclude_end?)),
                  s(:str, ", "),
                  s(:begin,
                    s(:lvar, :x)))))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:lvar, :r)),
          s(:lvasgn, :r,
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:lvar, :to),
                    s(:lvar, :to))), :bsearch),
              s(:args),
              s(:send, nil, :fail))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:lvar, :r)),
          s(:lvasgn, :yielded,
            s(:array)),
          s(:lvasgn, :r,
            s(:block,
              s(:send,
                s(:lvar, :range), :bsearch),
              s(:args,
                s(:arg, :val)),
              s(:begin,
                s(:send,
                  s(:lvar, :yielded), :<<,
                  s(:lvar, :val)),
                s(:send,
                  s(:lvar, :val), :>=,
                  s(:lvar, :search))))),
          s(:lvasgn, :max,
            s(:case,
              s(:lvar, :from),
              s(:when,
                s(:const, nil, :Float),
                s(:int, 65)),
              s(:when,
                s(:const, nil, :Integer),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Math), :log,
                      s(:send,
                        s(:send,
                          s(:lvar, :to), :-,
                          s(:lvar, :from)), :+,
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:lvar, :range), :exclude_end?),
                            s(:int, 0),
                            s(:int, 1)))),
                      s(:int, 2)), :to_i), :+,
                  s(:int, 1))), nil)),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:lvar, :yielded), :size),
            s(:sym, :<=),
            s(:lvar, :max)),
          s(:lvasgn, :expect,
            s(:if,
              s(:send,
                s(:lvar, :search), :<,
                s(:lvar, :from)),
              s(:lvar, :from),
              s(:if,
                s(:send,
                  s(:lvar, :search), :send,
                  s(:lvar, :cmp),
                  s(:lvar, :to)),
                s(:lvar, :search),
                s(:nil)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expect),
            s(:lvar, :r)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :yielded), :uniq!)),
          s(:case, nil,
            s(:when,
              s(:send,
                s(:lvar, :range), :exclude_end?),
              s(:begin,
                s(:send, nil, :assert_not_include,
                  s(:lvar, :yielded),
                  s(:lvar, :to)),
                s(:send, nil, :assert_not_equal,
                  s(:lvar, :r),
                  s(:lvar, :to)))),
            s(:when,
              s(:send,
                s(:lvar, :search), :>=,
                s(:lvar, :to)),
              s(:begin,
                s(:send, nil, :assert_include,
                  s(:lvar, :yielded),
                  s(:lvar, :to)),
                s(:send, nil, :assert_equal,
                  s(:if,
                    s(:send,
                      s(:lvar, :search), :==,
                      s(:lvar, :to)),
                    s(:lvar, :to),
                    s(:nil)),
                  s(:lvar, :r)))), nil),
          s(:if,
            s(:send,
              s(:lvar, :search), :<=,
              s(:lvar, :from)),
            s(:begin,
              s(:send, nil, :assert_include,
                s(:lvar, :yielded),
                s(:lvar, :from)),
              s(:send, nil, :assert_equal,
                s(:lvar, :from),
                s(:lvar, :r))), nil),
          s(:block,
            s(:send,
              s(:lvar, :yielded), :each),
            s(:args,
              s(:arg, :val)),
            s(:begin,
              s(:send, nil, :assert_operator,
                s(:lvar, :from),
                s(:sym, :<=),
                s(:lvar, :val)),
              s(:send, nil, :assert_send,
                s(:array,
                  s(:lvar, :val),
                  s(:lvar, :cmp),
                  s(:lvar, :to))))))),
      s(:def, :test_range_bsearch_for_floats,
        s(:args),
        s(:begin,
          s(:lvasgn, :ints,
            s(:array,
              s(:send,
                s(:int, -1), :<<,
                s(:int, 100)),
              s(:int, -123456789),
              s(:int, -42),
              s(:int, -1),
              s(:int, 0),
              s(:int, 1),
              s(:int, 42),
              s(:int, 123456789),
              s(:send,
                s(:int, 1), :<<,
                s(:int, 100)))),
          s(:lvasgn, :floats,
            s(:array,
              s(:send,
                s(:const,
                  s(:const, nil, :Float), :INFINITY), :-@),
              s(:send,
                s(:const,
                  s(:const, nil, :Float), :MAX), :-@),
              s(:float, -42.0),
              s(:float, -4.2),
              s(:send,
                s(:const,
                  s(:const, nil, :Float), :EPSILON), :-@),
              s(:send,
                s(:const,
                  s(:const, nil, :Float), :MIN), :-@),
              s(:float, 0.0),
              s(:const,
                s(:const, nil, :Float), :MIN),
              s(:const,
                s(:const, nil, :Float), :EPSILON),
              s(:const,
                s(:const, nil, :Math), :PI),
              s(:float, 4.2),
              s(:float, 42.0),
              s(:const,
                s(:const, nil, :Float), :MAX),
              s(:const,
                s(:const, nil, :Float), :INFINITY))),
          s(:block,
            s(:send,
              s(:array,
                s(:lvar, :ints),
                s(:lvar, :floats)), :each),
            s(:args,
              s(:arg, :values)),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :values), :combination,
                      s(:int, 2)), :to_a), :product,
                  s(:lvar, :values)), :each),
              s(:args,
                s(:mlhs,
                  s(:arg, :from),
                  s(:arg, :to)),
                s(:arg, :search)),
              s(:begin,
                s(:send, nil, :check_bsearch_values,
                  s(:irange,
                    s(:lvar, :from),
                    s(:lvar, :to)),
                  s(:lvar, :search)),
                s(:send, nil, :check_bsearch_values,
                  s(:erange,
                    s(:lvar, :from),
                    s(:lvar, :to)),
                  s(:lvar, :search))))))),
      s(:def, :test_bsearch_for_bignum,
        s(:args),
        s(:begin,
          s(:lvasgn, :bignum,
            s(:send,
              s(:int, 2), :**,
              s(:int, 100))),
          s(:lvasgn, :ary,
            s(:array,
              s(:int, 3),
              s(:int, 4),
              s(:int, 7),
              s(:int, 9),
              s(:int, 12))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :bignum), :+,
              s(:int, 0)),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:lvar, :bignum),
                    s(:send,
                      s(:lvar, :bignum), :+,
                      s(:send,
                        s(:lvar, :ary), :size)))), :bsearch),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:send,
                  s(:lvar, :ary), :[],
                  s(:send,
                    s(:lvar, :i), :-,
                    s(:lvar, :bignum))), :>=,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :bignum), :+,
              s(:int, 1)),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:lvar, :bignum),
                    s(:send,
                      s(:lvar, :bignum), :+,
                      s(:send,
                        s(:lvar, :ary), :size)))), :bsearch),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:send,
                  s(:lvar, :ary), :[],
                  s(:send,
                    s(:lvar, :i), :-,
                    s(:lvar, :bignum))), :>=,
                s(:int, 4)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :bignum), :+,
              s(:int, 2)),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:lvar, :bignum),
                    s(:send,
                      s(:lvar, :bignum), :+,
                      s(:send,
                        s(:lvar, :ary), :size)))), :bsearch),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:send,
                  s(:lvar, :ary), :[],
                  s(:send,
                    s(:lvar, :i), :-,
                    s(:lvar, :bignum))), :>=,
                s(:int, 6)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :bignum), :+,
              s(:int, 3)),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:lvar, :bignum),
                    s(:send,
                      s(:lvar, :bignum), :+,
                      s(:send,
                        s(:lvar, :ary), :size)))), :bsearch),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:send,
                  s(:lvar, :ary), :[],
                  s(:send,
                    s(:lvar, :i), :-,
                    s(:lvar, :bignum))), :>=,
                s(:int, 8)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :bignum), :+,
              s(:int, 4)),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:lvar, :bignum),
                    s(:send,
                      s(:lvar, :bignum), :+,
                      s(:send,
                        s(:lvar, :ary), :size)))), :bsearch),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:send,
                  s(:lvar, :ary), :[],
                  s(:send,
                    s(:lvar, :i), :-,
                    s(:lvar, :bignum))), :>=,
                s(:int, 10)))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:lvar, :bignum),
                    s(:send,
                      s(:lvar, :bignum), :+,
                      s(:send,
                        s(:lvar, :ary), :size)))), :bsearch),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:send,
                  s(:lvar, :ary), :[],
                  s(:send,
                    s(:lvar, :i), :-,
                    s(:lvar, :bignum))), :>=,
                s(:int, 100)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :bignum), :+,
              s(:int, 0)),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:lvar, :bignum),
                    s(:send,
                      s(:lvar, :bignum), :+,
                      s(:send,
                        s(:lvar, :ary), :size)))), :bsearch),
              s(:args,
                s(:arg, :i)),
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:block,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:lvar, :bignum),
                    s(:send,
                      s(:lvar, :bignum), :+,
                      s(:send,
                        s(:lvar, :ary), :size)))), :bsearch),
              s(:args,
                s(:arg, :i)),
              s(:false))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:str, "a"),
                    s(:str, "z"))), :bsearch),
              s(:args), nil)))),
      s(:def, :test_bsearch_with_mathn,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array,
            s(:str, "-r"),
            s(:str, "mathn")),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "      msg = '[ruby-core:25740]'\n"),
            s(:str, "      answer = (1..(1 << 100)).bsearch{|x|\n"),
            s(:str, "        assert_predicate(x, :integer?, msg)\n"),
            s(:str, "        x >= 42\n"),
            s(:str, "      }\n"),
            s(:str, "      assert_equal(42, answer, msg)\n"),
            s(:str, "    ")),
          s(:hash,
            s(:pair,
              s(:sym, :ignore_stderr),
              s(:true))))),
      s(:def, :test_each_no_blockarg,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:str, "a")),
          s(:defs,
            s(:lvar, :a), :upto,
            s(:args,
              s(:arg, :x),
              s(:arg, :e),
              s(:blockarg, :b)),
            s(:block,
              s(:zsuper),
              s(:args,
                s(:arg, :y)),
              s(:block,
                s(:send,
                  s(:lvar, :b), :call,
                  s(:lvar, :y)),
                s(:args,
                  s(:arg, :z)),
                s(:send, nil, :assert,
                  s(:false))))),
          s(:block,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:lvar, :a),
                  s(:str, "c"))), :each),
            s(:args,
              s(:arg, :x),
              s(:blockarg, :b)),
            s(:send, nil, :assert_nil,
              s(:lvar, :b))))))))
