s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestSetTraceFunc),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@original_compile_option,
            s(:send,
              s(:const,
                s(:const, nil, :RubyVM), :InstructionSequence), :compile_option)),
          s(:send,
            s(:const,
              s(:const, nil, :RubyVM), :InstructionSequence), :compile_option=,
            s(:hash,
              s(:pair,
                s(:sym, :trace_instruction),
                s(:true)),
              s(:pair,
                s(:sym, :specialized_instruction),
                s(:false)))),
          s(:ivasgn, :@target_thread,
            s(:send,
              s(:const, nil, :Thread), :current)))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:send, nil, :set_trace_func,
            s(:nil)),
          s(:send,
            s(:const,
              s(:const, nil, :RubyVM), :InstructionSequence), :compile_option=,
            s(:ivar, :@original_compile_option)),
          s(:ivasgn, :@target_thread,
            s(:nil)))),
      s(:def, :target_thread?,
        s(:args),
        s(:send,
          s(:send,
            s(:const, nil, :Thread), :current), :==,
          s(:ivar, :@target_thread))),
      s(:def, :test_c_call,
        s(:args),
        s(:begin,
          s(:lvasgn, :events,
            s(:array)),
          s(:lvasgn, :name,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:self), :class)),
              s(:str, "#"),
              s(:begin,
                s(:send, nil, :__method__)))),
          s(:send, nil, :eval,
            s(:send,
              s(:dstr,
                s(:str, "     1: set_trace_func(Proc.new { |event, file, lineno, mid, binding, klass|\n"),
                s(:str, "     2:   events << [event, lineno, mid, klass] if file == name\n"),
                s(:str, "     3: })\n"),
                s(:str, "     4: x = 1 + 1\n"),
                s(:str, "     5: set_trace_func(nil)\n")), :gsub,
              s(:regexp,
                s(:str, "^.*?: "),
                s(:regopt)),
              s(:str, "")),
            s(:nil),
            s(:lvar, :name)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-return"),
              s(:int, 1),
              s(:sym, :set_trace_func),
              s(:const, nil, :Kernel)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 4),
              s(:send, nil, :__method__),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-call"),
              s(:int, 4),
              s(:sym, :+),
              s(:const, nil, :Fixnum)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-return"),
              s(:int, 4),
              s(:sym, :+),
              s(:const, nil, :Fixnum)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 5),
              s(:send, nil, :__method__),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-call"),
              s(:int, 5),
              s(:sym, :set_trace_func),
              s(:const, nil, :Kernel)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:lvar, :events)))),
      s(:def, :test_call,
        s(:args),
        s(:begin,
          s(:lvasgn, :events,
            s(:array)),
          s(:lvasgn, :name,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:self), :class)),
              s(:str, "#"),
              s(:begin,
                s(:send, nil, :__method__)))),
          s(:send, nil, :eval,
            s(:send,
              s(:dstr,
                s(:str, "     1: set_trace_func(Proc.new { |event, file, lineno, mid, binding, klass|\n"),
                s(:str, "     2:   events << [event, lineno, mid, klass] if file == name\n"),
                s(:str, "     3: })\n"),
                s(:str, "     4: def add(x, y)\n"),
                s(:str, "     5:   x + y\n"),
                s(:str, "     6: end\n"),
                s(:str, "     7: x = add(1, 1)\n"),
                s(:str, "     8: set_trace_func(nil)\n")), :gsub,
              s(:regexp,
                s(:str, "^.*?: "),
                s(:regopt)),
              s(:str, "")),
            s(:nil),
            s(:lvar, :name)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-return"),
              s(:int, 1),
              s(:sym, :set_trace_func),
              s(:const, nil, :Kernel)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 4),
              s(:send, nil, :__method__),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-call"),
              s(:int, 4),
              s(:sym, :method_added),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-return"),
              s(:int, 4),
              s(:sym, :method_added),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 7),
              s(:send, nil, :__method__),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "call"),
              s(:int, 4),
              s(:sym, :add),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 5),
              s(:sym, :add),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-call"),
              s(:int, 5),
              s(:sym, :+),
              s(:const, nil, :Fixnum)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-return"),
              s(:int, 5),
              s(:sym, :+),
              s(:const, nil, :Fixnum)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "return"),
              s(:int, 6),
              s(:sym, :add),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 8),
              s(:send, nil, :__method__),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-call"),
              s(:int, 8),
              s(:sym, :set_trace_func),
              s(:const, nil, :Kernel)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:lvar, :events)))),
      s(:def, :test_class,
        s(:args),
        s(:begin,
          s(:lvasgn, :events,
            s(:array)),
          s(:lvasgn, :name,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:self), :class)),
              s(:str, "#"),
              s(:begin,
                s(:send, nil, :__method__)))),
          s(:send, nil, :eval,
            s(:send,
              s(:dstr,
                s(:str, "     1: set_trace_func(Proc.new { |event, file, lineno, mid, binding, klass|\n"),
                s(:str, "     2:   events << [event, lineno, mid, klass] if file == name\n"),
                s(:str, "     3: })\n"),
                s(:str, "     4: class Foo\n"),
                s(:str, "     5:   def bar\n"),
                s(:str, "     6:   end\n"),
                s(:str, "     7: end\n"),
                s(:str, "     8: x = Foo.new.bar\n"),
                s(:str, "     9: set_trace_func(nil)\n")), :gsub,
              s(:regexp,
                s(:str, "^.*?: "),
                s(:regopt)),
              s(:str, "")),
            s(:nil),
            s(:lvar, :name)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-return"),
              s(:int, 1),
              s(:sym, :set_trace_func),
              s(:const, nil, :Kernel)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 4),
              s(:send, nil, :__method__),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-call"),
              s(:int, 4),
              s(:sym, :inherited),
              s(:const, nil, :Class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-return"),
              s(:int, 4),
              s(:sym, :inherited),
              s(:const, nil, :Class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "class"),
              s(:int, 4),
              s(:nil),
              s(:nil)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 5),
              s(:nil),
              s(:nil)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-call"),
              s(:int, 5),
              s(:sym, :method_added),
              s(:const, nil, :Module)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-return"),
              s(:int, 5),
              s(:sym, :method_added),
              s(:const, nil, :Module)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "end"),
              s(:int, 7),
              s(:nil),
              s(:nil)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 8),
              s(:send, nil, :__method__),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-call"),
              s(:int, 8),
              s(:sym, :new),
              s(:const, nil, :Class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-call"),
              s(:int, 8),
              s(:sym, :initialize),
              s(:const, nil, :BasicObject)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-return"),
              s(:int, 8),
              s(:sym, :initialize),
              s(:const, nil, :BasicObject)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-return"),
              s(:int, 8),
              s(:sym, :new),
              s(:const, nil, :Class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "call"),
              s(:int, 5),
              s(:sym, :bar),
              s(:const, nil, :Foo)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "return"),
              s(:int, 6),
              s(:sym, :bar),
              s(:const, nil, :Foo)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 9),
              s(:send, nil, :__method__),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-call"),
              s(:int, 9),
              s(:sym, :set_trace_func),
              s(:const, nil, :Kernel)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:lvar, :events)))),
      s(:def, :test_return,
        s(:args),
        s(:begin,
          s(:lvasgn, :events,
            s(:array)),
          s(:lvasgn, :name,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:self), :class)),
              s(:str, "#"),
              s(:begin,
                s(:send, nil, :__method__)))),
          s(:send, nil, :eval,
            s(:send,
              s(:dstr,
                s(:str, "     1: set_trace_func(Proc.new { |event, file, lineno, mid, binding, klass|\n"),
                s(:str, "     2:   events << [event, lineno, mid, klass] if file == name\n"),
                s(:str, "     3: })\n"),
                s(:str, "     4: def meth_return(a)\n"),
                s(:str, "     5:   return if a\n"),
                s(:str, "     6:   return\n"),
                s(:str, "     7: end\n"),
                s(:str, "     8: meth_return(true)\n"),
                s(:str, "     9: meth_return(false)\n"),
                s(:str, "    10: set_trace_func(nil)\n")), :gsub,
              s(:regexp,
                s(:str, "^.*?: "),
                s(:regopt)),
              s(:str, "")),
            s(:nil),
            s(:lvar, :name)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-return"),
              s(:int, 1),
              s(:sym, :set_trace_func),
              s(:const, nil, :Kernel)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 4),
              s(:send, nil, :__method__),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-call"),
              s(:int, 4),
              s(:sym, :method_added),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-return"),
              s(:int, 4),
              s(:sym, :method_added),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 8),
              s(:send, nil, :__method__),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "call"),
              s(:int, 4),
              s(:sym, :meth_return),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 5),
              s(:sym, :meth_return),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "return"),
              s(:int, 5),
              s(:sym, :meth_return),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 9),
              s(:sym, :test_return),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "call"),
              s(:int, 4),
              s(:sym, :meth_return),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 5),
              s(:sym, :meth_return),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "return"),
              s(:int, 7),
              s(:sym, :meth_return),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 10),
              s(:sym, :test_return),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-call"),
              s(:int, 10),
              s(:sym, :set_trace_func),
              s(:const, nil, :Kernel)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:lvar, :events)))),
      s(:def, :test_return2,
        s(:args),
        s(:begin,
          s(:lvasgn, :events,
            s(:array)),
          s(:lvasgn, :name,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:self), :class)),
              s(:str, "#"),
              s(:begin,
                s(:send, nil, :__method__)))),
          s(:send, nil, :eval,
            s(:send,
              s(:dstr,
                s(:str, "     1: set_trace_func(Proc.new { |event, file, lineno, mid, binding, klass|\n"),
                s(:str, "     2:   events << [event, lineno, mid, klass] if file == name\n"),
                s(:str, "     3: })\n"),
                s(:str, "     4: def meth_return2\n"),
                s(:str, "     5:   a = 5\n"),
                s(:str, "     6:   return a\n"),
                s(:str, "     7: end\n"),
                s(:str, "     8: meth_return2\n"),
                s(:str, "     9: set_trace_func(nil)\n")), :gsub,
              s(:regexp,
                s(:str, "^.*?: "),
                s(:regopt)),
              s(:str, "")),
            s(:nil),
            s(:lvar, :name)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-return"),
              s(:int, 1),
              s(:sym, :set_trace_func),
              s(:const, nil, :Kernel)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 4),
              s(:send, nil, :__method__),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-call"),
              s(:int, 4),
              s(:sym, :method_added),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-return"),
              s(:int, 4),
              s(:sym, :method_added),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 8),
              s(:send, nil, :__method__),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "call"),
              s(:int, 4),
              s(:sym, :meth_return2),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 5),
              s(:sym, :meth_return2),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 6),
              s(:sym, :meth_return2),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "return"),
              s(:int, 7),
              s(:sym, :meth_return2),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 9),
              s(:sym, :test_return2),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-call"),
              s(:int, 9),
              s(:sym, :set_trace_func),
              s(:const, nil, :Kernel)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:lvar, :events)))),
      s(:def, :test_raise,
        s(:args),
        s(:begin,
          s(:lvasgn, :events,
            s(:array)),
          s(:lvasgn, :name,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:self), :class)),
              s(:str, "#"),
              s(:begin,
                s(:send, nil, :__method__)))),
          s(:send, nil, :eval,
            s(:send,
              s(:dstr,
                s(:str, "     1: set_trace_func(Proc.new { |event, file, lineno, mid, binding, klass|\n"),
                s(:str, "     2:   events << [event, lineno, mid, klass] if file == name\n"),
                s(:str, "     3: })\n"),
                s(:str, "     4: begin\n"),
                s(:str, "     5:   raise TypeError, \"error\"\n"),
                s(:str, "     6: rescue TypeError\n"),
                s(:str, "     7: end\n"),
                s(:str, "     8: set_trace_func(nil)\n")), :gsub,
              s(:regexp,
                s(:str, "^.*?: "),
                s(:regopt)),
              s(:str, "")),
            s(:nil),
            s(:lvar, :name)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-return"),
              s(:int, 1),
              s(:sym, :set_trace_func),
              s(:const, nil, :Kernel)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 4),
              s(:send, nil, :__method__),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 5),
              s(:send, nil, :__method__),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-call"),
              s(:int, 5),
              s(:sym, :raise),
              s(:const, nil, :Kernel)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-call"),
              s(:int, 5),
              s(:sym, :exception),
              s(:const, nil, :Exception)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-call"),
              s(:int, 5),
              s(:sym, :initialize),
              s(:const, nil, :Exception)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-return"),
              s(:int, 5),
              s(:sym, :initialize),
              s(:const, nil, :Exception)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-return"),
              s(:int, 5),
              s(:sym, :exception),
              s(:const, nil, :Exception)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-return"),
              s(:int, 5),
              s(:sym, :raise),
              s(:const, nil, :Kernel)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-call"),
              s(:int, 5),
              s(:sym, :backtrace),
              s(:const, nil, :Exception)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-return"),
              s(:int, 5),
              s(:sym, :backtrace),
              s(:const, nil, :Exception)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "raise"),
              s(:int, 5),
              s(:sym, :test_raise),
              s(:const, nil, :TestSetTraceFunc)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-call"),
              s(:int, 6),
              s(:sym, :===),
              s(:const, nil, :Module)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-return"),
              s(:int, 6),
              s(:sym, :===),
              s(:const, nil, :Module)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "line"),
              s(:int, 8),
              s(:send, nil, :__method__),
              s(:send,
                s(:self), :class)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-call"),
              s(:int, 8),
              s(:sym, :set_trace_func),
              s(:const, nil, :Kernel)),
            s(:send,
              s(:lvar, :events), :shift)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:lvar, :events)))),
      s(:def, :test_break,
        s(:args),
        s(:begin,
          s(:lvasgn, :events,
            s(:array)),
          s(:lvasgn, :name,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:self), :class)),
              s(:str, "#"),
              s(:begin,
                s(:send, nil, :__method__)))),
          s(:send, nil, :eval,
            s(:send,
              s(:dstr,
                s(:str, "     1: set_trace_func(Proc.new { |event, file, lineno, mid, binding, klass|\n"),
                s(:str, "     2:   events << [event, lineno, mid, klass] if file == name\n"),
                s(:str, "     3: })\n"),
                s(:str, "     4: [1,2,3].any? {|n| n}\n"),
                s(:str, "     8: set_trace_func(nil)\n")), :gsub,
              s(:regexp,
                s(:str, "^.*?: "),
                s(:regopt)),
              s(:str, "")),
            s(:nil),
            s(:lvar, :name)),
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:str, "c-return"),
                  s(:int, 1),
                  s(:sym, :set_trace_func),
                  s(:const, nil, :Kernel)),
                s(:array,
                  s(:str, "line"),
                  s(:int, 4),
                  s(:send, nil, :__method__),
                  s(:send,
                    s(:self), :class)),
                s(:array,
                  s(:str, "c-call"),
                  s(:int, 4),
                  s(:sym, :any?),
                  s(:const, nil, :Array)),
                s(:array,
                  s(:str, "line"),
                  s(:int, 4),
                  s(:send, nil, :__method__),
                  s(:send,
                    s(:self), :class)),
                s(:array,
                  s(:str, "c-return"),
                  s(:int, 4),
                  s(:sym, :any?),
                  s(:const, nil, :Array)),
                s(:array,
                  s(:str, "line"),
                  s(:int, 5),
                  s(:send, nil, :__method__),
                  s(:send,
                    s(:self), :class)),
                s(:array,
                  s(:str, "c-call"),
                  s(:int, 5),
                  s(:sym, :set_trace_func),
                  s(:const, nil, :Kernel))), :each),
            s(:args,
              s(:arg, :e)),
            s(:send, nil, :assert_equal,
              s(:lvar, :e),
              s(:send,
                s(:lvar, :events), :shift))))),
      s(:def, :test_invalid_proc,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send, nil, :set_trace_func,
            s(:int, 1)))),
      s(:def, :test_raise_in_trace,
        s(:args),
        s(:begin,
          s(:send, nil, :set_trace_func,
            s(:block,
              s(:send, nil, :proc),
              s(:args),
              s(:rescue,
                s(:send, nil, :raise),
                s(:resbody, nil, nil,
                  s(:nil)), nil))),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:begin,
              s(:rescue,
                s(:send, nil, :raise),
                s(:resbody, nil, nil,
                  s(:int, 42)), nil)),
            s(:str, "[ruby-core:24118]")))),
      s(:def, :test_thread_trace,
        s(:args),
        s(:begin,
          s(:lvasgn, :events,
            s(:hash,
              s(:pair,
                s(:sym, :set),
                s(:array)),
              s(:pair,
                s(:sym, :add),
                s(:array)))),
          s(:lvasgn, :prc,
            s(:block,
              s(:send,
                s(:const, nil, :Proc), :new),
              s(:args,
                s(:arg, :event),
                s(:arg, :file),
                s(:arg, :lineno),
                s(:arg, :mid),
                s(:arg, :binding),
                s(:arg, :klass)),
              s(:send,
                s(:send,
                  s(:lvar, :events), :[],
                  s(:sym, :set)), :<<,
                s(:array,
                  s(:lvar, :event),
                  s(:lvar, :lineno),
                  s(:lvar, :mid),
                  s(:lvar, :klass),
                  s(:sym, :set))))),
          s(:lvasgn, :prc,
            s(:lvar, :prc)),
          s(:lvasgn, :prc2,
            s(:block,
              s(:send,
                s(:const, nil, :Proc), :new),
              s(:args,
                s(:arg, :event),
                s(:arg, :file),
                s(:arg, :lineno),
                s(:arg, :mid),
                s(:arg, :binding),
                s(:arg, :klass)),
              s(:send,
                s(:send,
                  s(:lvar, :events), :[],
                  s(:sym, :add)), :<<,
                s(:array,
                  s(:lvar, :event),
                  s(:lvar, :lineno),
                  s(:lvar, :mid),
                  s(:lvar, :klass),
                  s(:sym, :add))))),
          s(:lvasgn, :prc2,
            s(:lvar, :prc2)),
          s(:lvasgn, :th,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:begin,
                s(:lvasgn, :th,
                  s(:send,
                    s(:const, nil, :Thread), :current)),
                s(:lvasgn, :name,
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:self), :class)),
                    s(:str, "#"),
                    s(:begin,
                      s(:send, nil, :__method__)))),
                s(:send, nil, :eval,
                  s(:send,
                    s(:dstr,
                      s(:str, "       1: th.set_trace_func(prc)\n"),
                      s(:str, "       2: th.add_trace_func(prc2)\n"),
                      s(:str, "       3: class ThreadTraceInnerClass\n"),
                      s(:str, "       4:   def foo\n"),
                      s(:str, "       5:     _x = 1 + 1\n"),
                      s(:str, "       6:   end\n"),
                      s(:str, "       7: end\n"),
                      s(:str, "       8: ThreadTraceInnerClass.new.foo\n"),
                      s(:str, "       9: th.set_trace_func(nil)\n")), :gsub,
                    s(:regexp,
                      s(:str, "^.*?: "),
                      s(:regopt)),
                    s(:str, "")),
                  s(:nil),
                  s(:lvar, :name))))),
          s(:send,
            s(:lvar, :th), :join),
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:str, "c-return"),
                  s(:int, 1),
                  s(:sym, :set_trace_func),
                  s(:const, nil, :Thread),
                  s(:sym, :set)),
                s(:array,
                  s(:str, "line"),
                  s(:int, 2),
                  s(:send, nil, :__method__),
                  s(:send,
                    s(:self), :class),
                  s(:sym, :set)),
                s(:array,
                  s(:str, "c-call"),
                  s(:int, 2),
                  s(:sym, :add_trace_func),
                  s(:const, nil, :Thread),
                  s(:sym, :set))), :each),
            s(:args,
              s(:arg, :e)),
            s(:send, nil, :assert_equal,
              s(:lvar, :e),
              s(:send,
                s(:send,
                  s(:lvar, :events), :[],
                  s(:sym, :set)), :shift))),
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:str, "c-return"),
                  s(:int, 2),
                  s(:sym, :add_trace_func),
                  s(:const, nil, :Thread)),
                s(:array,
                  s(:str, "line"),
                  s(:int, 3),
                  s(:send, nil, :__method__),
                  s(:send,
                    s(:self), :class)),
                s(:array,
                  s(:str, "c-call"),
                  s(:int, 3),
                  s(:sym, :inherited),
                  s(:const, nil, :Class)),
                s(:array,
                  s(:str, "c-return"),
                  s(:int, 3),
                  s(:sym, :inherited),
                  s(:const, nil, :Class)),
                s(:array,
                  s(:str, "class"),
                  s(:int, 3),
                  s(:nil),
                  s(:nil)),
                s(:array,
                  s(:str, "line"),
                  s(:int, 4),
                  s(:nil),
                  s(:nil)),
                s(:array,
                  s(:str, "c-call"),
                  s(:int, 4),
                  s(:sym, :method_added),
                  s(:const, nil, :Module)),
                s(:array,
                  s(:str, "c-return"),
                  s(:int, 4),
                  s(:sym, :method_added),
                  s(:const, nil, :Module)),
                s(:array,
                  s(:str, "end"),
                  s(:int, 7),
                  s(:nil),
                  s(:nil)),
                s(:array,
                  s(:str, "line"),
                  s(:int, 8),
                  s(:send, nil, :__method__),
                  s(:send,
                    s(:self), :class)),
                s(:array,
                  s(:str, "c-call"),
                  s(:int, 8),
                  s(:sym, :new),
                  s(:const, nil, :Class)),
                s(:array,
                  s(:str, "c-call"),
                  s(:int, 8),
                  s(:sym, :initialize),
                  s(:const, nil, :BasicObject)),
                s(:array,
                  s(:str, "c-return"),
                  s(:int, 8),
                  s(:sym, :initialize),
                  s(:const, nil, :BasicObject)),
                s(:array,
                  s(:str, "c-return"),
                  s(:int, 8),
                  s(:sym, :new),
                  s(:const, nil, :Class)),
                s(:array,
                  s(:str, "call"),
                  s(:int, 4),
                  s(:sym, :foo),
                  s(:const, nil, :ThreadTraceInnerClass)),
                s(:array,
                  s(:str, "line"),
                  s(:int, 5),
                  s(:sym, :foo),
                  s(:const, nil, :ThreadTraceInnerClass)),
                s(:array,
                  s(:str, "c-call"),
                  s(:int, 5),
                  s(:sym, :+),
                  s(:const, nil, :Fixnum)),
                s(:array,
                  s(:str, "c-return"),
                  s(:int, 5),
                  s(:sym, :+),
                  s(:const, nil, :Fixnum)),
                s(:array,
                  s(:str, "return"),
                  s(:int, 6),
                  s(:sym, :foo),
                  s(:const, nil, :ThreadTraceInnerClass)),
                s(:array,
                  s(:str, "line"),
                  s(:int, 9),
                  s(:send, nil, :__method__),
                  s(:send,
                    s(:self), :class)),
                s(:array,
                  s(:str, "c-call"),
                  s(:int, 9),
                  s(:sym, :set_trace_func),
                  s(:const, nil, :Thread))), :each),
            s(:args,
              s(:arg, :e)),
            s(:block,
              s(:send,
                s(:array,
                  s(:sym, :set),
                  s(:sym, :add)), :each),
              s(:args,
                s(:arg, :type)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :e), :+,
                  s(:array,
                    s(:lvar, :type))),
                s(:send,
                  s(:send,
                    s(:lvar, :events), :[],
                    s(:lvar, :type)), :shift)))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :events), :[],
              s(:sym, :set))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :events), :[],
              s(:sym, :add))))),
      s(:def, :test_trace_defined_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :events,
            s(:array)),
          s(:lvasgn, :name,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:self), :class)),
              s(:str, "#"),
              s(:begin,
                s(:send, nil, :__method__)))),
          s(:send, nil, :eval,
            s(:send,
              s(:dstr,
                s(:str, "     1: class FooBar; define_method(:foobar){}; end\n"),
                s(:str, "     2: fb = FooBar.new\n"),
                s(:str, "     3: set_trace_func(Proc.new { |event, file, lineno, mid, binding, klass|\n"),
                s(:str, "     4:   events << [event, lineno, mid, klass] if file == name\n"),
                s(:str, "     5: })\n"),
                s(:str, "     6: fb.foobar\n"),
                s(:str, "     7: set_trace_func(nil)\n")), :gsub,
              s(:regexp,
                s(:str, "^.*?: "),
                s(:regopt)),
              s(:str, "")),
            s(:nil),
            s(:lvar, :name)),
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:str, "c-return"),
                  s(:int, 3),
                  s(:sym, :set_trace_func),
                  s(:const, nil, :Kernel)),
                s(:array,
                  s(:str, "line"),
                  s(:int, 6),
                  s(:send, nil, :__method__),
                  s(:send,
                    s(:self), :class)),
                s(:array,
                  s(:str, "call"),
                  s(:int, 1),
                  s(:sym, :foobar),
                  s(:const, nil, :FooBar)),
                s(:array,
                  s(:str, "return"),
                  s(:int, 6),
                  s(:sym, :foobar),
                  s(:const, nil, :FooBar)),
                s(:array,
                  s(:str, "line"),
                  s(:int, 7),
                  s(:send, nil, :__method__),
                  s(:send,
                    s(:self), :class)),
                s(:array,
                  s(:str, "c-call"),
                  s(:int, 7),
                  s(:sym, :set_trace_func),
                  s(:const, nil, :Kernel))), :each),
            s(:args,
              s(:arg, :e)),
            s(:send, nil, :assert_equal,
              s(:lvar, :e),
              s(:send,
                s(:lvar, :events), :shift))))),
      s(:def, :test_remove_in_trace,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug3921,
            s(:str, "[ruby-dev:42350]")),
          s(:lvasgn, :ok,
            s(:false)),
          s(:lvasgn, :func,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :e),
                s(:arg, :f),
                s(:arg, :l),
                s(:arg, :i),
                s(:arg, :b),
                s(:arg, :k)),
              s(:begin,
                s(:send, nil, :set_trace_func,
                  s(:nil)),
                s(:lvasgn, :ok,
                  s(:send, nil, :eval,
                    s(:str, "self"),
                    s(:lvar, :b)))))),
          s(:send, nil, :set_trace_func,
            s(:lvar, :func)),
          s(:send, nil, :assert_equal,
            s(:self),
            s(:lvar, :ok),
            s(:lvar, :bug3921)))),
      s(:sclass,
        s(:self),
        s(:send, nil, :define_method,
          s(:sym, :method_added),
          s(:send,
            s(:const, nil, :Module), :method,
            s(:sym, :method_added)))),
      s(:def, :trace_by_tracepoint,
        s(:args,
          s(:restarg, :trace_events)),
        s(:begin,
          s(:lvasgn, :events,
            s(:array)),
          s(:lvasgn, :trace,
            s(:nil)),
          s(:lvasgn, :xyzzy,
            s(:nil)),
          s(:lvasgn, :_local_var,
            s(:sym, :outer)),
          s(:lvasgn, :raised_exc,
            s(:nil)),
          s(:lvasgn, :method,
            s(:sym, :trace_by_tracepoint)),
          s(:lvasgn, :_get_data,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :tp)),
              s(:case,
                s(:send,
                  s(:lvar, :tp), :event),
                s(:when,
                  s(:sym, :return),
                  s(:sym, :c_return),
                  s(:send,
                    s(:lvar, :tp), :return_value)),
                s(:when,
                  s(:sym, :raise),
                  s(:send,
                    s(:lvar, :tp), :raised_exception)),
                s(:sym, :nothing)))),
          s(:lvasgn, :_defined_class,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :tp)),
              s(:begin,
                s(:lvasgn, :klass,
                  s(:send,
                    s(:lvar, :tp), :defined_class)),
                s(:if,
                  s(:lvar, :klass),
                  s(:kwbegin,
                    s(:rescue,
                      s(:case,
                        s(:send,
                          s(:lvar, :klass), :inspect),
                        s(:when,
                          s(:regexp,
                            s(:str, "Class:TracePoint"),
                            s(:regopt)),
                          s(:return,
                            s(:const, nil, :TracePoint))),
                        s(:when,
                          s(:regexp,
                            s(:str, "Class:Exception"),
                            s(:regopt)),
                          s(:return,
                            s(:const, nil, :Exception))),
                        s(:lvar, :klass)),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :Exception)),
                        s(:lvasgn, :e),
                        s(:lvar, :e)), nil)), nil)))),
          s(:lvasgn, :trace,
            s(:nil)),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:send, nil, :eval,
                  s(:send,
                    s(:dstr,
                      s(:str, "    1: trace = TracePoint.trace(*trace_events){|tp| next if !target_thread?\n"),
                      s(:str, "    2:   events << [tp.event, tp.lineno, tp.path, _defined_class.(tp), tp.method_id, tp.self, tp.binding.eval(\"_local_var\"), _get_data.(tp)] if tp.path == 'xyzzy'\n"),
                      s(:str, "    3: }\n"),
                      s(:str, "    4: 1.times{|;_local_var| _local_var = :inner\n"),
                      s(:str, "    5:   tap{}\n"),
                      s(:str, "    6: }\n"),
                      s(:str, "    7: class XYZZY\n"),
                      s(:str, "    8:   _local_var = :XYZZY_outer\n"),
                      s(:str, "    9:   def foo\n"),
                      s(:str, "   10:     _local_var = :XYZZY_foo\n"),
                      s(:str, "   11:     bar\n"),
                      s(:str, "   12:   end\n"),
                      s(:str, "   13:   def bar\n"),
                      s(:str, "   14:     _local_var = :XYZZY_bar\n"),
                      s(:str, "   15:     tap{}\n"),
                      s(:str, "   16:   end\n"),
                      s(:str, "   17: end\n"),
                      s(:str, "   18: xyzzy = XYZZY.new\n"),
                      s(:str, "   19: xyzzy.foo\n"),
                      s(:str, "   20: begin; raise RuntimeError; rescue RuntimeError => raised_exc; end\n"),
                      s(:str, "   21: trace.disable\n")), :gsub,
                    s(:regexp,
                      s(:str, "^.*?: "),
                      s(:regopt)),
                    s(:str, "")),
                  s(:nil),
                  s(:str, "xyzzy")),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:self), :class), :class_eval),
                  s(:args),
                  s(:send, nil, :remove_const,
                    s(:sym, :XYZZY)))),
              s(:if,
                s(:csend,
                  s(:lvar, :trace), :enabled?),
                s(:send,
                  s(:lvar, :trace), :disable), nil))),
          s(:lvasgn, :answer_events,
            s(:array,
              s(:array,
                s(:sym, :c_return),
                s(:int, 1),
                s(:str, "xyzzy"),
                s(:const, nil, :TracePoint),
                s(:sym, :trace),
                s(:const, nil, :TracePoint),
                s(:sym, :outer),
                s(:lvar, :trace)),
              s(:array,
                s(:sym, :line),
                s(:int, 4),
                s(:str, "xyzzy"),
                s(:send,
                  s(:self), :class),
                s(:lvar, :method),
                s(:self),
                s(:sym, :outer),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_call),
                s(:int, 4),
                s(:str, "xyzzy"),
                s(:const, nil, :Integer),
                s(:sym, :times),
                s(:int, 1),
                s(:sym, :outer),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :line),
                s(:int, 4),
                s(:str, "xyzzy"),
                s(:send,
                  s(:self), :class),
                s(:lvar, :method),
                s(:self),
                s(:nil),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :line),
                s(:int, 5),
                s(:str, "xyzzy"),
                s(:send,
                  s(:self), :class),
                s(:lvar, :method),
                s(:self),
                s(:sym, :inner),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_call),
                s(:int, 5),
                s(:str, "xyzzy"),
                s(:const, nil, :Kernel),
                s(:sym, :tap),
                s(:self),
                s(:sym, :inner),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_return),
                s(:int, 5),
                s(:str, "xyzzy"),
                s(:const, nil, :Kernel),
                s(:sym, :tap),
                s(:self),
                s(:sym, :inner),
                s(:self)),
              s(:array,
                s(:sym, :c_return),
                s(:int, 4),
                s(:str, "xyzzy"),
                s(:const, nil, :Integer),
                s(:sym, :times),
                s(:int, 1),
                s(:sym, :outer),
                s(:int, 1)),
              s(:array,
                s(:sym, :line),
                s(:int, 7),
                s(:str, "xyzzy"),
                s(:send,
                  s(:self), :class),
                s(:lvar, :method),
                s(:self),
                s(:sym, :outer),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_call),
                s(:int, 7),
                s(:str, "xyzzy"),
                s(:const, nil, :Class),
                s(:sym, :inherited),
                s(:const, nil, :Object),
                s(:sym, :outer),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_return),
                s(:int, 7),
                s(:str, "xyzzy"),
                s(:const, nil, :Class),
                s(:sym, :inherited),
                s(:const, nil, :Object),
                s(:sym, :outer),
                s(:nil)),
              s(:array,
                s(:sym, :class),
                s(:int, 7),
                s(:str, "xyzzy"),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:lvar, :xyzzy), :class),
                s(:nil),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :line),
                s(:int, 8),
                s(:str, "xyzzy"),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:lvar, :xyzzy), :class),
                s(:nil),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :line),
                s(:int, 9),
                s(:str, "xyzzy"),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:lvar, :xyzzy), :class),
                s(:sym, :XYZZY_outer),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_call),
                s(:int, 9),
                s(:str, "xyzzy"),
                s(:const, nil, :Module),
                s(:sym, :method_added),
                s(:send,
                  s(:lvar, :xyzzy), :class),
                s(:sym, :XYZZY_outer),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_return),
                s(:int, 9),
                s(:str, "xyzzy"),
                s(:const, nil, :Module),
                s(:sym, :method_added),
                s(:send,
                  s(:lvar, :xyzzy), :class),
                s(:sym, :XYZZY_outer),
                s(:nil)),
              s(:array,
                s(:sym, :line),
                s(:int, 13),
                s(:str, "xyzzy"),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:lvar, :xyzzy), :class),
                s(:sym, :XYZZY_outer),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_call),
                s(:int, 13),
                s(:str, "xyzzy"),
                s(:const, nil, :Module),
                s(:sym, :method_added),
                s(:send,
                  s(:lvar, :xyzzy), :class),
                s(:sym, :XYZZY_outer),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_return),
                s(:int, 13),
                s(:str, "xyzzy"),
                s(:const, nil, :Module),
                s(:sym, :method_added),
                s(:send,
                  s(:lvar, :xyzzy), :class),
                s(:sym, :XYZZY_outer),
                s(:nil)),
              s(:array,
                s(:sym, :end),
                s(:int, 17),
                s(:str, "xyzzy"),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:lvar, :xyzzy), :class),
                s(:sym, :XYZZY_outer),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :line),
                s(:int, 18),
                s(:str, "xyzzy"),
                s(:const, nil, :TestSetTraceFunc),
                s(:lvar, :method),
                s(:self),
                s(:sym, :outer),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_call),
                s(:int, 18),
                s(:str, "xyzzy"),
                s(:const, nil, :Class),
                s(:sym, :new),
                s(:send,
                  s(:lvar, :xyzzy), :class),
                s(:sym, :outer),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_call),
                s(:int, 18),
                s(:str, "xyzzy"),
                s(:const, nil, :BasicObject),
                s(:sym, :initialize),
                s(:lvar, :xyzzy),
                s(:sym, :outer),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_return),
                s(:int, 18),
                s(:str, "xyzzy"),
                s(:const, nil, :BasicObject),
                s(:sym, :initialize),
                s(:lvar, :xyzzy),
                s(:sym, :outer),
                s(:nil)),
              s(:array,
                s(:sym, :c_return),
                s(:int, 18),
                s(:str, "xyzzy"),
                s(:const, nil, :Class),
                s(:sym, :new),
                s(:send,
                  s(:lvar, :xyzzy), :class),
                s(:sym, :outer),
                s(:lvar, :xyzzy)),
              s(:array,
                s(:sym, :line),
                s(:int, 19),
                s(:str, "xyzzy"),
                s(:const, nil, :TestSetTraceFunc),
                s(:lvar, :method),
                s(:self),
                s(:sym, :outer),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :call),
                s(:int, 9),
                s(:str, "xyzzy"),
                s(:send,
                  s(:lvar, :xyzzy), :class),
                s(:sym, :foo),
                s(:lvar, :xyzzy),
                s(:nil),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :line),
                s(:int, 10),
                s(:str, "xyzzy"),
                s(:send,
                  s(:lvar, :xyzzy), :class),
                s(:sym, :foo),
                s(:lvar, :xyzzy),
                s(:nil),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :line),
                s(:int, 11),
                s(:str, "xyzzy"),
                s(:send,
                  s(:lvar, :xyzzy), :class),
                s(:sym, :foo),
                s(:lvar, :xyzzy),
                s(:sym, :XYZZY_foo),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :call),
                s(:int, 13),
                s(:str, "xyzzy"),
                s(:send,
                  s(:lvar, :xyzzy), :class),
                s(:sym, :bar),
                s(:lvar, :xyzzy),
                s(:nil),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :line),
                s(:int, 14),
                s(:str, "xyzzy"),
                s(:send,
                  s(:lvar, :xyzzy), :class),
                s(:sym, :bar),
                s(:lvar, :xyzzy),
                s(:nil),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :line),
                s(:int, 15),
                s(:str, "xyzzy"),
                s(:send,
                  s(:lvar, :xyzzy), :class),
                s(:sym, :bar),
                s(:lvar, :xyzzy),
                s(:sym, :XYZZY_bar),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_call),
                s(:int, 15),
                s(:str, "xyzzy"),
                s(:const, nil, :Kernel),
                s(:sym, :tap),
                s(:lvar, :xyzzy),
                s(:sym, :XYZZY_bar),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_return),
                s(:int, 15),
                s(:str, "xyzzy"),
                s(:const, nil, :Kernel),
                s(:sym, :tap),
                s(:lvar, :xyzzy),
                s(:sym, :XYZZY_bar),
                s(:lvar, :xyzzy)),
              s(:array,
                s(:sym, :return),
                s(:int, 16),
                s(:str, "xyzzy"),
                s(:send,
                  s(:lvar, :xyzzy), :class),
                s(:sym, :bar),
                s(:lvar, :xyzzy),
                s(:sym, :XYZZY_bar),
                s(:lvar, :xyzzy)),
              s(:array,
                s(:sym, :return),
                s(:int, 12),
                s(:str, "xyzzy"),
                s(:send,
                  s(:lvar, :xyzzy), :class),
                s(:sym, :foo),
                s(:lvar, :xyzzy),
                s(:sym, :XYZZY_foo),
                s(:lvar, :xyzzy)),
              s(:array,
                s(:sym, :line),
                s(:int, 20),
                s(:str, "xyzzy"),
                s(:const, nil, :TestSetTraceFunc),
                s(:lvar, :method),
                s(:self),
                s(:sym, :outer),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_call),
                s(:int, 20),
                s(:str, "xyzzy"),
                s(:const, nil, :Kernel),
                s(:sym, :raise),
                s(:self),
                s(:sym, :outer),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_call),
                s(:int, 20),
                s(:str, "xyzzy"),
                s(:const, nil, :Exception),
                s(:sym, :exception),
                s(:const, nil, :RuntimeError),
                s(:sym, :outer),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_call),
                s(:int, 20),
                s(:str, "xyzzy"),
                s(:const, nil, :Exception),
                s(:sym, :initialize),
                s(:lvar, :raised_exc),
                s(:sym, :outer),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_return),
                s(:int, 20),
                s(:str, "xyzzy"),
                s(:const, nil, :Exception),
                s(:sym, :initialize),
                s(:lvar, :raised_exc),
                s(:sym, :outer),
                s(:lvar, :raised_exc)),
              s(:array,
                s(:sym, :c_return),
                s(:int, 20),
                s(:str, "xyzzy"),
                s(:const, nil, :Exception),
                s(:sym, :exception),
                s(:const, nil, :RuntimeError),
                s(:sym, :outer),
                s(:lvar, :raised_exc)),
              s(:array,
                s(:sym, :c_return),
                s(:int, 20),
                s(:str, "xyzzy"),
                s(:const, nil, :Kernel),
                s(:sym, :raise),
                s(:self),
                s(:sym, :outer),
                s(:nil)),
              s(:array,
                s(:sym, :c_call),
                s(:int, 20),
                s(:str, "xyzzy"),
                s(:const, nil, :Exception),
                s(:sym, :backtrace),
                s(:lvar, :raised_exc),
                s(:sym, :outer),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_return),
                s(:int, 20),
                s(:str, "xyzzy"),
                s(:const, nil, :Exception),
                s(:sym, :backtrace),
                s(:lvar, :raised_exc),
                s(:sym, :outer),
                s(:nil)),
              s(:array,
                s(:sym, :raise),
                s(:int, 20),
                s(:str, "xyzzy"),
                s(:const, nil, :TestSetTraceFunc),
                s(:sym, :trace_by_tracepoint),
                s(:self),
                s(:sym, :outer),
                s(:lvar, :raised_exc)),
              s(:array,
                s(:sym, :c_call),
                s(:int, 20),
                s(:str, "xyzzy"),
                s(:const, nil, :Module),
                s(:sym, :===),
                s(:const, nil, :RuntimeError),
                s(:sym, :outer),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_return),
                s(:int, 20),
                s(:str, "xyzzy"),
                s(:const, nil, :Module),
                s(:sym, :===),
                s(:const, nil, :RuntimeError),
                s(:sym, :outer),
                s(:true)),
              s(:array,
                s(:sym, :line),
                s(:int, 21),
                s(:str, "xyzzy"),
                s(:const, nil, :TestSetTraceFunc),
                s(:lvar, :method),
                s(:self),
                s(:sym, :outer),
                s(:sym, :nothing)),
              s(:array,
                s(:sym, :c_call),
                s(:int, 21),
                s(:str, "xyzzy"),
                s(:const, nil, :TracePoint),
                s(:sym, :disable),
                s(:lvar, :trace),
                s(:sym, :outer),
                s(:sym, :nothing)))),
          s(:return,
            s(:lvar, :events),
            s(:lvar, :answer_events)))),
      s(:def, :trace_by_set_trace_func,
        s(:args),
        s(:begin,
          s(:lvasgn, :events,
            s(:array)),
          s(:lvasgn, :trace,
            s(:nil)),
          s(:lvasgn, :trace,
            s(:lvar, :trace)),
          s(:lvasgn, :xyzzy,
            s(:nil)),
          s(:lvasgn, :xyzzy,
            s(:lvar, :xyzzy)),
          s(:lvasgn, :_local_var,
            s(:sym, :outer)),
          s(:send, nil, :eval,
            s(:send,
              s(:dstr,
                s(:str, "    1: set_trace_func(lambda{|event, file, line, id, binding, klass|\n"),
                s(:str, "    2:   events << [event, line, file, klass, id, binding.eval('self'), binding.eval(\"_local_var\")] if file == 'xyzzy'\n"),
                s(:str, "    3: })\n"),
                s(:str, "    4: 1.times{|;_local_var| _local_var = :inner\n"),
                s(:str, "    5:   tap{}\n"),
                s(:str, "    6: }\n"),
                s(:str, "    7: class XYZZY\n"),
                s(:str, "    8:   _local_var = :XYZZY_outer\n"),
                s(:str, "    9:   def foo\n"),
                s(:str, "   10:     _local_var = :XYZZY_foo\n"),
                s(:str, "   11:     bar\n"),
                s(:str, "   12:   end\n"),
                s(:str, "   13:   def bar\n"),
                s(:str, "   14:     _local_var = :XYZZY_bar\n"),
                s(:str, "   15:     tap{}\n"),
                s(:str, "   16:   end\n"),
                s(:str, "   17: end\n"),
                s(:str, "   18: xyzzy = XYZZY.new\n"),
                s(:str, "   19: xyzzy.foo\n"),
                s(:str, "   20: begin; raise RuntimeError; rescue RuntimeError => raised_exc; end\n"),
                s(:str, "   21: set_trace_func(nil)\n")), :gsub,
              s(:regexp,
                s(:str, "^.*?: "),
                s(:regopt)),
              s(:str, "")),
            s(:nil),
            s(:str, "xyzzy")),
          s(:block,
            s(:send,
              s(:send,
                s(:self), :class), :class_eval),
            s(:args),
            s(:send, nil, :remove_const,
              s(:sym, :XYZZY))),
          s(:return,
            s(:lvar, :events)))),
      s(:def, :test_tracepoint,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :events1),
              s(:lvasgn, :answer_events)),
            s(:array,
              s(:splat,
                s(:send, nil, :trace_by_tracepoint,
                  s(:sym, :line),
                  s(:sym, :class),
                  s(:sym, :end),
                  s(:sym, :call),
                  s(:sym, :return),
                  s(:sym, :c_call),
                  s(:sym, :c_return),
                  s(:sym, :raise))))),
          s(:lvasgn, :ms,
            s(:block,
              s(:send,
                s(:array,
                  s(:lvar, :events1),
                  s(:lvar, :answer_events)), :map),
              s(:args,
                s(:arg, :evs)),
              s(:block,
                s(:send,
                  s(:lvar, :evs), :map),
                s(:args,
                  s(:arg, :e)),
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :e), :[],
                      s(:int, 0))),
                  s(:str, " - "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :e), :[],
                      s(:int, 2))),
                  s(:str, ":"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :e), :[],
                      s(:int, 1))),
                  s(:str, " id: "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :e), :[],
                      s(:int, 4))))))),
          s(:lvasgn, :mesg,
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :ms), :[],
                        s(:int, 0)), :zip,
                      s(:send,
                        s(:lvar, :ms), :[],
                        s(:int, 1))), :map),
                  s(:args,
                    s(:arg, :a),
                    s(:arg, :b)),
                  s(:if,
                    s(:send,
                      s(:lvar, :a), :!=,
                      s(:lvar, :b)),
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :a)),
                      s(:str, " <-> "),
                      s(:begin,
                        s(:lvar, :b))), nil)), :compact), :join,
              s(:str, "\n"))),
          s(:block,
            s(:send,
              s(:lvar, :answer_events), :zip,
              s(:lvar, :events1)),
            s(:args,
              s(:arg, :answer),
              s(:arg, :event)),
            s(:send, nil, :assert_equal,
              s(:lvar, :answer),
              s(:lvar, :event),
              s(:lvar, :mesg))),
          s(:lvasgn, :events2,
            s(:send, nil, :trace_by_set_trace_func)),
          s(:block,
            s(:send,
              s(:lvar, :events1), :zip,
              s(:lvar, :events2)),
            s(:args,
              s(:arg, :ev1),
              s(:arg, :ev2)),
            s(:begin,
              s(:send,
                s(:lvar, :ev2), :[]=,
                s(:int, 0),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :ev2), :[],
                      s(:int, 0)), :sub,
                    s(:str, "-"),
                    s(:str, "_")), :to_sym)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :ev1), :[],
                  s(:irange,
                    s(:int, 0),
                    s(:int, 2))),
                s(:send,
                  s(:lvar, :ev2), :[],
                  s(:irange,
                    s(:int, 0),
                    s(:int, 2))),
                s(:send,
                  s(:lvar, :ev1), :inspect)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:lvar, :ev1), :[],
                    s(:int, 3)), :nil?),
                s(:send,
                  s(:send,
                    s(:lvar, :ev2), :[],
                    s(:int, 3)), :nil?)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:lvar, :ev1), :[],
                    s(:int, 4)), :nil?),
                s(:send,
                  s(:send,
                    s(:lvar, :ev2), :[],
                    s(:int, 4)), :nil?)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :ev1), :[],
                  s(:int, 6)),
                s(:send,
                  s(:lvar, :ev2), :[],
                  s(:int, 6))))),
          s(:block,
            s(:send,
              s(:array,
                s(:sym, :line),
                s(:sym, :class),
                s(:sym, :end),
                s(:sym, :call),
                s(:sym, :return),
                s(:sym, :c_call),
                s(:sym, :c_return),
                s(:sym, :raise)), :each),
            s(:args,
              s(:arg, :event)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :events1),
                  s(:lvasgn, :answer_events)),
                s(:array,
                  s(:splat,
                    s(:send, nil, :trace_by_tracepoint,
                      s(:lvar, :event))))),
              s(:block,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :answer_events), :find_all),
                    s(:args,
                      s(:arg, :e)),
                    s(:send,
                      s(:send,
                        s(:lvar, :e), :[],
                        s(:int, 0)), :==,
                      s(:lvar, :event))), :zip,
                  s(:lvar, :events1)),
                s(:args,
                  s(:arg, :answer_line),
                  s(:arg, :event_line)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :answer_line),
                  s(:lvar, :event_line))))))),
      s(:def, :test_tracepoint_object_id,
        s(:args),
        s(:begin,
          s(:lvasgn, :tps,
            s(:array)),
          s(:lvasgn, :trace,
            s(:block,
              s(:send,
                s(:const, nil, :TracePoint), :trace),
              s(:args,
                s(:arg, :tp)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send, nil, :target_thread?), :!),
                  s(:next), nil),
                s(:send,
                  s(:lvar, :tps), :<<,
                  s(:lvar, :tp))))),
          s(:block,
            s(:send, nil, :tap),
            s(:args), nil),
          s(:block,
            s(:send, nil, :tap),
            s(:args), nil),
          s(:block,
            s(:send, nil, :tap),
            s(:args), nil),
          s(:send,
            s(:lvar, :trace), :disable),
          s(:block,
            s(:send,
              s(:lvar, :tps), :each),
            s(:args,
              s(:arg, :tp)),
            s(:send, nil, :assert_equal,
              s(:lvar, :trace),
              s(:lvar, :tp))))),
      s(:def, :test_tracepoint_access_from_outside,
        s(:args),
        s(:begin,
          s(:lvasgn, :tp_store,
            s(:nil)),
          s(:lvasgn, :trace,
            s(:block,
              s(:send,
                s(:const, nil, :TracePoint), :trace),
              s(:args,
                s(:arg, :tp)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send, nil, :target_thread?), :!),
                  s(:next), nil),
                s(:lvasgn, :tp_store,
                  s(:lvar, :tp))))),
          s(:block,
            s(:send, nil, :tap),
            s(:args), nil),
          s(:send,
            s(:lvar, :trace), :disable),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :tp_store), :lineno)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :tp_store), :event)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :tp_store), :path)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :tp_store), :method_id)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :tp_store), :defined_class)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :tp_store), :binding)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :tp_store), :self)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :tp_store), :return_value)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :tp_store), :raised_exception)))),
      s(:def, :foo,
        s(:args), nil),
      s(:def, :test_tracepoint_enable,
        s(:args),
        s(:begin,
          s(:lvasgn, :ary,
            s(:array)),
          s(:lvasgn, :trace,
            s(:block,
              s(:send,
                s(:const, nil, :TracePoint), :new,
                s(:sym, :call)),
              s(:args,
                s(:arg, :tp)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send, nil, :target_thread?), :!),
                  s(:next), nil),
                s(:send,
                  s(:lvar, :ary), :<<,
                  s(:send,
                    s(:lvar, :tp), :method_id))))),
          s(:send, nil, :foo),
          s(:block,
            s(:send,
              s(:lvar, :trace), :enable),
            s(:args),
            s(:send, nil, :foo)),
          s(:send, nil, :foo),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :foo)),
            s(:lvar, :ary)),
          s(:lvasgn, :trace,
            s(:block,
              s(:send,
                s(:const, nil, :TracePoint), :new),
              s(:args), nil)),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:false),
                  s(:send,
                    s(:lvar, :trace), :enable)),
                s(:send, nil, :assert_equal,
                  s(:true),
                  s(:send,
                    s(:lvar, :trace), :enable)),
                s(:block,
                  s(:send,
                    s(:lvar, :trace), :enable),
                  s(:args), nil),
                s(:send, nil, :assert_equal,
                  s(:true),
                  s(:send,
                    s(:lvar, :trace), :enable))),
              s(:send,
                s(:lvar, :trace), :disable))))),
      s(:def, :test_tracepoint_disable,
        s(:args),
        s(:begin,
          s(:lvasgn, :ary,
            s(:array)),
          s(:lvasgn, :trace,
            s(:block,
              s(:send,
                s(:const, nil, :TracePoint), :trace,
                s(:sym, :call)),
              s(:args,
                s(:arg, :tp)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send, nil, :target_thread?), :!),
                  s(:next), nil),
                s(:send,
                  s(:lvar, :ary), :<<,
                  s(:send,
                    s(:lvar, :tp), :method_id))))),
          s(:send, nil, :foo),
          s(:block,
            s(:send,
              s(:lvar, :trace), :disable),
            s(:args),
            s(:send, nil, :foo)),
          s(:send, nil, :foo),
          s(:send,
            s(:lvar, :trace), :disable),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :foo),
              s(:sym, :foo)),
            s(:lvar, :ary)),
          s(:lvasgn, :trace,
            s(:block,
              s(:send,
                s(:const, nil, :TracePoint), :new),
              s(:args), nil)),
          s(:block,
            s(:send,
              s(:lvar, :trace), :enable),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :trace), :disable)),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :trace), :disable)),
              s(:block,
                s(:send,
                  s(:lvar, :trace), :disable),
                s(:args), nil),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :trace), :disable)))))),
      s(:def, :test_tracepoint_enabled,
        s(:args),
        s(:begin,
          s(:lvasgn, :trace,
            s(:block,
              s(:send,
                s(:const, nil, :TracePoint), :trace,
                s(:sym, :call)),
              s(:args,
                s(:arg, :tp)), nil)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :trace), :enabled?)),
          s(:block,
            s(:send,
              s(:lvar, :trace), :disable),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:lvar, :trace), :enabled?)),
              s(:block,
                s(:send,
                  s(:lvar, :trace), :enable),
                s(:args),
                s(:send, nil, :assert_equal,
                  s(:true),
                  s(:send,
                    s(:lvar, :trace), :enabled?))))),
          s(:send,
            s(:lvar, :trace), :disable),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :trace), :enabled?)))),
      s(:def, :method_test_tracepoint_return_value,
        s(:args,
          s(:arg, :obj)),
        s(:lvar, :obj)),
      s(:def, :test_tracepoint_return_value,
        s(:args),
        s(:begin,
          s(:lvasgn, :trace,
            s(:block,
              s(:send,
                s(:const, nil, :TracePoint), :new,
                s(:sym, :call),
                s(:sym, :return)),
              s(:args,
                s(:arg, :tp)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send, nil, :target_thread?), :!),
                  s(:next), nil),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :tp), :path), :!=,
                    s(:str, "(string)")),
                  s(:next), nil),
                s(:case,
                  s(:send,
                    s(:lvar, :tp), :event),
                  s(:when,
                    s(:sym, :call),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const, nil, :RuntimeError)),
                      s(:args),
                      s(:send,
                        s(:lvar, :tp), :return_value))),
                  s(:when,
                    s(:sym, :return),
                    s(:send, nil, :assert_equal,
                      s(:str, "xyzzy"),
                      s(:send,
                        s(:lvar, :tp), :return_value))), nil)))),
          s(:block,
            s(:send,
              s(:lvar, :trace), :enable),
            s(:args),
            s(:send, nil, :method_test_tracepoint_return_value,
              s(:str, "xyzzy"))))),
      s(:class,
        s(:const, nil, :XYZZYException),
        s(:const, nil, :Exception), nil),
      s(:def, :method_test_tracepoint_raised_exception,
        s(:args,
          s(:arg, :err)),
        s(:send, nil, :raise,
          s(:lvar, :err))),
      s(:def, :test_tracepoint_raised_exception,
        s(:args),
        s(:begin,
          s(:lvasgn, :trace,
            s(:block,
              s(:send,
                s(:const, nil, :TracePoint), :new,
                s(:sym, :call),
                s(:sym, :return)),
              s(:args,
                s(:arg, :tp)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send, nil, :target_thread?), :!),
                  s(:next), nil),
                s(:case,
                  s(:send,
                    s(:lvar, :tp), :event),
                  s(:when,
                    s(:sym, :call),
                    s(:sym, :return),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const, nil, :RuntimeError)),
                      s(:args),
                      s(:send,
                        s(:lvar, :tp), :raised_exception))),
                  s(:when,
                    s(:sym, :raise),
                    s(:send, nil, :assert_equal,
                      s(:const, nil, :XYZZYError),
                      s(:send,
                        s(:lvar, :tp), :raised_exception))), nil)))),
          s(:block,
            s(:send,
              s(:lvar, :trace), :enable),
            s(:args),
            s(:kwbegin,
              s(:rescue,
                s(:send, nil, :method_test_tracepoint_raised_exception,
                  s(:const, nil, :XYZZYException)),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :XYZZYException)), nil, nil),
                s(:send, nil, :raise)))))),
      s(:def, :method_for_test_tracepoint_block,
        s(:args),
        s(:yield)),
      s(:def, :test_tracepoint_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :events,
            s(:array)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:sym, :call),
                  s(:sym, :return),
                  s(:sym, :c_call),
                  s(:sym, :b_call),
                  s(:sym, :c_return),
                  s(:sym, :b_return)),
                s(:args,
                  s(:arg, :tp)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send, nil, :target_thread?), :!),
                    s(:next), nil),
                  s(:send,
                    s(:lvar, :events), :<<,
                    s(:array,
                      s(:send,
                        s(:lvar, :tp), :event),
                      s(:send,
                        s(:lvar, :tp), :method_id),
                      s(:send,
                        s(:lvar, :tp), :defined_class),
                      s(:send,
                        s(:send,
                          s(:lvar, :tp), :self), :class),
                      s(:if,
                        s(:match_with_lvasgn,
                          s(:regexp,
                            s(:str, "return"),
                            s(:regopt)),
                          s(:send,
                            s(:lvar, :tp), :event)),
                        s(:send,
                          s(:lvar, :tp), :return_value),
                        s(:nil)))))), :enable),
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:int, 1), :times),
                s(:args),
                s(:int, 3)),
              s(:block,
                s(:send, nil, :method_for_test_tracepoint_block),
                s(:args),
                s(:int, 4)))),
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:sym, :b_call),
                  s(:sym, :test_tracepoint_block),
                  s(:const, nil, :TestSetTraceFunc),
                  s(:const, nil, :TestSetTraceFunc),
                  s(:nil)),
                s(:array,
                  s(:sym, :c_call),
                  s(:sym, :times),
                  s(:const, nil, :Integer),
                  s(:const, nil, :Fixnum),
                  s(:nil)),
                s(:array,
                  s(:sym, :b_call),
                  s(:sym, :test_tracepoint_block),
                  s(:const, nil, :TestSetTraceFunc),
                  s(:const, nil, :TestSetTraceFunc),
                  s(:nil)),
                s(:array,
                  s(:sym, :b_return),
                  s(:sym, :test_tracepoint_block),
                  s(:const, nil, :TestSetTraceFunc),
                  s(:const, nil, :TestSetTraceFunc),
                  s(:int, 3)),
                s(:array,
                  s(:sym, :c_return),
                  s(:sym, :times),
                  s(:const, nil, :Integer),
                  s(:const, nil, :Fixnum),
                  s(:int, 1)),
                s(:array,
                  s(:sym, :call),
                  s(:sym, :method_for_test_tracepoint_block),
                  s(:const, nil, :TestSetTraceFunc),
                  s(:const, nil, :TestSetTraceFunc),
                  s(:nil)),
                s(:array,
                  s(:sym, :b_call),
                  s(:sym, :test_tracepoint_block),
                  s(:const, nil, :TestSetTraceFunc),
                  s(:const, nil, :TestSetTraceFunc),
                  s(:nil)),
                s(:array,
                  s(:sym, :b_return),
                  s(:sym, :test_tracepoint_block),
                  s(:const, nil, :TestSetTraceFunc),
                  s(:const, nil, :TestSetTraceFunc),
                  s(:int, 4)),
                s(:array,
                  s(:sym, :return),
                  s(:sym, :method_for_test_tracepoint_block),
                  s(:const, nil, :TestSetTraceFunc),
                  s(:const, nil, :TestSetTraceFunc),
                  s(:int, 4)),
                s(:array,
                  s(:sym, :b_return),
                  s(:sym, :test_tracepoint_block),
                  s(:const, nil, :TestSetTraceFunc),
                  s(:const, nil, :TestSetTraceFunc),
                  s(:int, 4))), :zip,
              s(:lvar, :events)),
            s(:args,
              s(:arg, :expected),
              s(:arg, :actual)),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:lvar, :actual))))),
      s(:def, :test_tracepoint_thread,
        s(:args),
        s(:begin,
          s(:lvasgn, :events,
            s(:array)),
          s(:lvasgn, :thread_self,
            s(:nil)),
          s(:lvasgn, :created_thread,
            s(:nil)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:sym, :thread_begin),
                  s(:sym, :thread_end)),
                s(:args,
                  s(:arg, :tp)),
                s(:send,
                  s(:lvar, :events), :<<,
                  s(:array,
                    s(:send,
                      s(:const, nil, :Thread), :current),
                    s(:send,
                      s(:lvar, :tp), :event),
                    s(:send,
                      s(:lvar, :tp), :lineno),
                    s(:send,
                      s(:lvar, :tp), :path),
                    s(:send,
                      s(:lvar, :tp), :binding),
                    s(:send,
                      s(:lvar, :tp), :defined_class),
                    s(:send,
                      s(:send,
                        s(:lvar, :tp), :self), :class)))), :enable),
            s(:args),
            s(:begin,
              s(:lvasgn, :created_thread,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:lvasgn, :thread_self,
                    s(:self)))),
              s(:send,
                s(:lvar, :created_thread), :join))),
          s(:block,
            s(:send,
              s(:lvar, :events), :reject!),
            s(:args,
              s(:arg, :i)),
            s(:send,
              s(:send,
                s(:lvar, :i), :[],
                s(:int, 0)), :!=,
              s(:lvar, :created_thread))),
          s(:send, nil, :assert_equal,
            s(:self),
            s(:lvar, :thread_self)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :created_thread),
              s(:sym, :thread_begin),
              s(:int, 0),
              s(:nil),
              s(:nil),
              s(:nil),
              s(:const, nil, :Thread)),
            s(:send,
              s(:lvar, :events), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :created_thread),
              s(:sym, :thread_end),
              s(:int, 0),
              s(:nil),
              s(:nil),
              s(:nil),
              s(:const, nil, :Thread)),
            s(:send,
              s(:lvar, :events), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :events), :size)))),
      s(:def, :test_tracepoint_inspect,
        s(:args),
        s(:begin,
          s(:lvasgn, :events,
            s(:array)),
          s(:lvasgn, :trace,
            s(:block,
              s(:send,
                s(:const, nil, :TracePoint), :new),
              s(:args,
                s(:arg, :tp)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send, nil, :target_thread?), :!),
                  s(:next), nil),
                s(:send,
                  s(:lvar, :events), :<<,
                  s(:array,
                    s(:send,
                      s(:lvar, :tp), :event),
                    s(:send,
                      s(:lvar, :tp), :inspect)))))),
          s(:send, nil, :assert_equal,
            s(:str, "#<TracePoint:disabled>"),
            s(:send,
              s(:lvar, :trace), :inspect)),
          s(:block,
            s(:send,
              s(:lvar, :trace), :enable),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, "#<TracePoint:enabled>"),
                s(:send,
                  s(:lvar, :trace), :inspect)),
              s(:send,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args), nil), :join))),
          s(:send, nil, :assert_equal,
            s(:str, "#<TracePoint:disabled>"),
            s(:send,
              s(:lvar, :trace), :inspect)),
          s(:block,
            s(:send,
              s(:lvar, :events), :each),
            s(:args,
              s(:mlhs,
                s(:arg, :ev),
                s(:arg, :str))),
            s(:case,
              s(:lvar, :ev),
              s(:when,
                s(:sym, :line),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, " in "),
                    s(:regopt)),
                  s(:lvar, :str))),
              s(:when,
                s(:sym, :call),
                s(:sym, :c_call),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "call \\`"),
                    s(:regopt)),
                  s(:lvar, :str))),
              s(:when,
                s(:sym, :return),
                s(:sym, :c_return),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "return \\`"),
                    s(:regopt)),
                  s(:lvar, :str))),
              s(:when,
                s(:regexp,
                  s(:str, "thread"),
                  s(:regopt)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "\\#<Thread:"),
                    s(:regopt)),
                  s(:lvar, :str))),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "\\#<TracePoint:"),
                  s(:regopt)),
                s(:lvar, :str)))))),
      s(:def, :test_tracepoint_exception_at_line,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :RuntimeError)),
          s(:args),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:sym, :line)),
                s(:args),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send, nil, :target_thread?), :!),
                    s(:next), nil),
                  s(:send, nil, :raise))), :enable),
            s(:args),
            s(:int, 1)))),
      s(:def, :test_tracepoint_exception_at_return,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised,
            s(:const,
              s(:const, nil, :Timeout), :Error),
            s(:str, "infinite trace")),
          s(:args),
          s(:send, nil, :assert_normal_exit,
            s(:str, "def m; end; TracePoint.new(:return) {raise}.enable {m}"),
            s(:str, ""),
            s(:hash,
              s(:pair,
                s(:sym, :timeout),
                s(:int, 3)))))),
      s(:def, :test_tracepoint_with_multithreads,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised),
          s(:args),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new),
                s(:args),
                s(:block,
                  s(:send,
                    s(:int, 10), :times),
                  s(:args),
                  s(:send,
                    s(:const, nil, :Thread), :pass))), :enable),
            s(:args),
            s(:block,
              s(:send,
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:int, 1),
                        s(:int, 10))), :map),
                  s(:args),
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:block,
                      s(:send,
                        s(:int, 1000), :times),
                      s(:args), nil))), :each),
              s(:args,
                s(:arg, :th)),
              s(:send,
                s(:lvar, :th), :join))))),
      s(:class,
        s(:const, nil, :FOO_ERROR),
        s(:const, nil, :RuntimeError), nil),
      s(:class,
        s(:const, nil, :BAR_ERROR),
        s(:const, nil, :RuntimeError), nil),
      s(:def, :m1_test_trace_point_at_return_when_exception,
        s(:args),
        s(:send, nil, :m2_test_trace_point_at_return_when_exception)),
      s(:def, :m2_test_trace_point_at_return_when_exception,
        s(:args),
        s(:send, nil, :raise,
          s(:const, nil, :BAR_ERROR))),
      s(:def, :test_trace_point_at_return_when_exception,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug_7624,
            s(:str, "[ruby-core:51128] [ruby-trunk - Bug #7624]")),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new),
                s(:args,
                  s(:arg, :tp)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send, nil, :target_thread?), :!),
                    s(:next), nil),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:send,
                          s(:lvar, :tp), :event), :==,
                        s(:sym, :return)),
                      s(:send,
                        s(:send,
                          s(:lvar, :tp), :method_id), :==,
                        s(:sym, :m2_test_trace_point_at_return_when_exception))),
                    s(:send, nil, :raise,
                      s(:const, nil, :FOO_ERROR)), nil))), :enable),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :FOO_ERROR),
                s(:lvar, :bug_7624)),
              s(:args),
              s(:send, nil, :m1_test_trace_point_at_return_when_exception))),
          s(:lvasgn, :bug_7668,
            s(:str, "[Bug #7668]")),
          s(:lvasgn, :ary,
            s(:array)),
          s(:lvasgn, :trace,
            s(:block,
              s(:send,
                s(:const, nil, :TracePoint), :new),
              s(:args,
                s(:arg, :tp)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send, nil, :target_thread?), :!),
                  s(:next), nil),
                s(:send,
                  s(:lvar, :ary), :<<,
                  s(:send,
                    s(:lvar, :tp), :event)),
                s(:send, nil, :raise)))),
          s(:kwbegin,
            s(:rescue,
              s(:block,
                s(:send,
                  s(:lvar, :trace), :enable),
                s(:args),
                s(:block,
                  s(:send,
                    s(:int, 1), :times),
                  s(:args),
                  s(:send, nil, :raise))),
              s(:resbody, nil, nil,
                s(:send, nil, :assert_equal,
                  s(:array,
                    s(:sym, :b_call),
                    s(:sym, :b_return)),
                  s(:lvar, :ary),
                  s(:lvar, :bug_7668))), nil)))),
      s(:def, :m1_for_test_trace_point_binding_in_ifunc,
        s(:args,
          s(:arg, :arg)),
        s(:rescue,
          s(:send,
            s(:lvar, :arg), :+,
            s(:nil)),
          s(:resbody, nil, nil, nil), nil)),
      s(:def, :m2_for_test_trace_point_binding_in_ifunc,
        s(:args,
          s(:arg, :arg)),
        s(:rescue,
          s(:send,
            s(:lvar, :arg), :inject,
            s(:sym, :+)),
          s(:resbody, nil, nil, nil), nil)),
      s(:def, :test_trace_point_binding_in_ifunc,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7774,
            s(:str, "[ruby-dev:46908]")),
          s(:lvasgn, :src,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "      tp = TracePoint.new(:raise) do |tp|\n"),
              s(:str, "        tp.binding\n"),
              s(:str, "      end\n"),
              s(:str, "      tp.enable do\n"),
              s(:str, "        obj = Object.new\n"),
              s(:str, "        class << obj\n"),
              s(:str, "          include Enumerable\n"),
              s(:str, "          def each\n"),
              s(:str, "            yield 1\n"),
              s(:str, "          end\n"),
              s(:str, "        end\n"),
              s(:str, "        %s\n"),
              s(:str, "      end\n"),
              s(:str, "    "))),
          s(:send, nil, :assert_normal_exit,
            s(:send,
              s(:lvar, :src), :%,
              s(:str, "obj.zip({}) {}")),
            s(:lvar, :bug7774)),
          s(:send, nil, :assert_normal_exit,
            s(:send,
              s(:lvar, :src), :%,
              s(:dstr,
                s(:str, "\n"),
                s(:str, "      require 'continuation'\n"),
                s(:str, "      begin\n"),
                s(:str, "        c = nil\n"),
                s(:str, "        obj.sort_by {|x| callcc {|c2| c ||= c2 }; x }\n"),
                s(:str, "        c.call\n"),
                s(:str, "      rescue RuntimeError\n"),
                s(:str, "      end\n"),
                s(:str, "    "))),
            s(:lvar, :bug7774)),
          s(:lvasgn, :tp_b,
            s(:nil)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:sym, :raise)),
                s(:args,
                  s(:arg, :tp)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send, nil, :target_thread?), :!),
                    s(:next), nil),
                  s(:lvasgn, :tp_b,
                    s(:send,
                      s(:lvar, :tp), :binding)))), :enable),
            s(:args),
            s(:begin,
              s(:send, nil, :m1_for_test_trace_point_binding_in_ifunc,
                s(:int, 0)),
              s(:send, nil, :assert_equal,
                s(:self),
                s(:send, nil, :eval,
                  s(:str, "self"),
                  s(:lvar, :tp_b)),
                s(:str, "[ruby-dev:46960]")),
              s(:send, nil, :m2_for_test_trace_point_binding_in_ifunc,
                s(:array,
                  s(:int, 0),
                  s(:nil))),
              s(:send, nil, :assert_equal,
                s(:self),
                s(:send, nil, :eval,
                  s(:str, "self"),
                  s(:lvar, :tp_b)),
                s(:str, "[ruby-dev:46960]")))),
          s(:lvasgn, :stf_b,
            s(:nil)),
          s(:send, nil, :set_trace_func,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :event),
                s(:arg, :file),
                s(:arg, :line),
                s(:arg, :id),
                s(:arg, :binding),
                s(:arg, :klass)),
              s(:if,
                s(:send,
                  s(:lvar, :event), :==,
                  s(:str, "raise")),
                s(:lvasgn, :stf_b,
                  s(:lvar, :binding)), nil))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:send, nil, :m1_for_test_trace_point_binding_in_ifunc,
                  s(:int, 0)),
                s(:send, nil, :assert_equal,
                  s(:self),
                  s(:send, nil, :eval,
                    s(:str, "self"),
                    s(:lvar, :stf_b)),
                  s(:str, "[ruby-dev:46960]")),
                s(:send, nil, :m2_for_test_trace_point_binding_in_ifunc,
                  s(:array,
                    s(:int, 0),
                    s(:nil))),
                s(:send, nil, :assert_equal,
                  s(:self),
                  s(:send, nil, :eval,
                    s(:str, "self"),
                    s(:lvar, :stf_b)),
                  s(:str, "[ruby-dev:46960]"))),
              s(:send, nil, :set_trace_func,
                s(:nil)))))),
      s(:def, :test_trace_point_binding_after_break,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug10689,
            s(:str, "[ruby-dev:48797]")),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "      class Bug\n"),
              s(:str, "        include Enumerable\n"),
              s(:str, "\n"),
              s(:str, "        def each\n"),
              s(:str, "          [0].each do\n"),
              s(:str, "            yield\n"),
              s(:str, "          end\n"),
              s(:str, "        end\n"),
              s(:str, "      end\n"),
              s(:str, "\n"),
              s(:str, "      TracePoint.trace(:c_return) do |tp|\n"),
              s(:str, "        tp.binding\n"),
              s(:str, "      end\n"),
              s(:str, "\n"),
              s(:str, "      Bug.new.all? { false }\n")),
            s(:array),
            s(:array),
            s(:lvar, :bug10689)))),
      s(:def, :test_tracepoint_b_return_with_next,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:sym, :b_return)),
                s(:args),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send, nil, :target_thread?), :!),
                    s(:next), nil),
                  s(:op_asgn,
                    s(:lvasgn, :n), :+,
                    s(:int, 1)))), :enable),
            s(:args),
            s(:block,
              s(:send,
                s(:int, 3), :times),
              s(:args),
              s(:next))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:lvar, :n)))),
      s(:def, :test_tracepoint_b_return_with_lambda,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:sym, :b_return)),
                s(:args),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send, nil, :target_thread?), :!),
                    s(:next), nil),
                  s(:op_asgn,
                    s(:lvasgn, :n), :+,
                    s(:int, 1)))), :enable),
            s(:args),
            s(:begin,
              s(:send,
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args),
                  s(:return)), :call),
              s(:block,
                s(:send,
                  s(:int, 3), :times),
                s(:args),
                s(:send,
                  s(:block,
                    s(:send, nil, :lambda),
                    s(:args),
                    s(:return)), :call)),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:block,
                      s(:send, nil, :lambda),
                      s(:args),
                      s(:send, nil, :raise)), :call),
                  s(:resbody, nil, nil, nil), nil)))),
          s(:send, nil, :assert_equal,
            s(:int, 9),
            s(:lvar, :n)))),
      s(:def, :test_isolated_raise_in_trace,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9088,
            s(:str, "[ruby-dev:47793] [Bug #9088]")),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "    set_trace_func proc {raise rescue nil}\n"),
              s(:str, "    1.times {break}\n")),
            s(:array),
            s(:array),
            s(:lvar, :bug9088)))),
      s(:def, :test_a_call,
        s(:args),
        s(:begin,
          s(:lvasgn, :events,
            s(:array)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:sym, :a_call)),
                s(:args,
                  s(:arg, :tp)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send, nil, :target_thread?), :!),
                    s(:next), nil),
                  s(:send,
                    s(:lvar, :events), :<<,
                    s(:send,
                      s(:lvar, :tp), :event)))), :enable),
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:int, 1), :times),
                s(:args),
                s(:int, 3)),
              s(:block,
                s(:send, nil, :method_for_test_tracepoint_block),
                s(:args),
                s(:int, 4)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :b_call),
              s(:sym, :c_call),
              s(:sym, :b_call),
              s(:sym, :call),
              s(:sym, :b_call)),
            s(:lvar, :events)))),
      s(:def, :test_a_return,
        s(:args),
        s(:begin,
          s(:lvasgn, :events,
            s(:array)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:sym, :a_return)),
                s(:args,
                  s(:arg, :tp)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send, nil, :target_thread?), :!),
                    s(:next), nil),
                  s(:send,
                    s(:lvar, :events), :<<,
                    s(:send,
                      s(:lvar, :tp), :event)))), :enable),
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:int, 1), :times),
                s(:args),
                s(:int, 3)),
              s(:block,
                s(:send, nil, :method_for_test_tracepoint_block),
                s(:args),
                s(:int, 4)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :b_return),
              s(:sym, :c_return),
              s(:sym, :b_return),
              s(:sym, :return),
              s(:sym, :b_return)),
            s(:lvar, :events)))),
      s(:def, :test_const_missing,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug59398,
            s(:str, "[ruby-core:59398]")),
          s(:lvasgn, :events,
            s(:array)),
          s(:send, nil, :assert,
            s(:send,
              s(:defined?,
                s(:const, nil, :MISSING_CONSTANT_59398)), :!)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:sym, :c_call),
                  s(:sym, :c_return),
                  s(:sym, :call),
                  s(:sym, :return)),
                s(:args,
                  s(:arg, :tp)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send, nil, :target_thread?), :!),
                    s(:next), nil),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :tp), :defined_class), :==,
                      s(:const, nil, :Module)), nil,
                    s(:next)),
                  s(:if,
                    s(:or,
                      s(:send,
                        s(:send,
                          s(:lvar, :tp), :method_id), :==,
                        s(:sym, :const_missing)),
                      s(:send,
                        s(:send,
                          s(:lvar, :tp), :method_id), :==,
                        s(:sym, :rake_original_const_missing))),
                    s(:send,
                      s(:lvar, :events), :<<,
                      s(:array,
                        s(:send,
                          s(:lvar, :tp), :event),
                        s(:send,
                          s(:lvar, :tp), :method_id))), nil))), :enable),
            s(:args),
            s(:rescue,
              s(:const, nil, :MISSING_CONSTANT_59398),
              s(:resbody, nil, nil,
                s(:nil)), nil)),
          s(:if,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :events), :map),
                s(:args,
                  s(:arg, :e)),
                s(:send,
                  s(:lvar, :e), :[],
                  s(:int, 1))), :include?,
              s(:sym, :rake_original_const_missing)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:sym, :call),
                  s(:sym, :const_missing)),
                s(:array,
                  s(:sym, :c_call),
                  s(:sym, :rake_original_const_missing)),
                s(:array,
                  s(:sym, :c_return),
                  s(:sym, :rake_original_const_missing)),
                s(:array,
                  s(:sym, :return),
                  s(:sym, :const_missing))),
              s(:lvar, :events),
              s(:lvar, :bug59398)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:sym, :c_call),
                  s(:sym, :const_missing)),
                s(:array,
                  s(:sym, :c_return),
                  s(:sym, :const_missing))),
              s(:lvar, :events),
              s(:lvar, :bug59398))))),
      s(:class,
        s(:const, nil, :AliasedRubyMethod), nil,
        s(:begin,
          s(:def, :foo,
            s(:args),
            s(:int, 1)),
          s(:alias,
            s(:sym, :bar),
            s(:sym, :foo)))),
      s(:def, :test_aliased_ruby_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :events,
            s(:array)),
          s(:lvasgn, :aliased,
            s(:send,
              s(:const, nil, :AliasedRubyMethod), :new)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:sym, :call),
                  s(:sym, :return)),
                s(:args,
                  s(:arg, :tp)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send, nil, :target_thread?), :!),
                    s(:next), nil),
                  s(:send,
                    s(:lvar, :events), :<<,
                    s(:array,
                      s(:send,
                        s(:lvar, :tp), :event),
                      s(:send,
                        s(:lvar, :tp), :method_id))))), :enable),
            s(:args),
            s(:send,
              s(:lvar, :aliased), :bar)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :call),
                s(:sym, :foo)),
              s(:array,
                s(:sym, :return),
                s(:sym, :foo))),
            s(:lvar, :events),
            s(:str, "should use original method name for tracing ruby methods")))),
      s(:class,
        s(:const, nil, :AliasedCMethod),
        s(:const, nil, :Hash),
        s(:begin,
          s(:alias,
            s(:sym, :original_size),
            s(:sym, :size)),
          s(:def, :size,
            s(:args),
            s(:send, nil, :original_size)))),
      s(:def, :test_aliased_c_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :events,
            s(:array)),
          s(:lvasgn, :aliased,
            s(:send,
              s(:const, nil, :AliasedCMethod), :new)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:sym, :call),
                  s(:sym, :return),
                  s(:sym, :c_call),
                  s(:sym, :c_return)),
                s(:args,
                  s(:arg, :tp)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send, nil, :target_thread?), :!),
                    s(:next), nil),
                  s(:send,
                    s(:lvar, :events), :<<,
                    s(:array,
                      s(:send,
                        s(:lvar, :tp), :event),
                      s(:send,
                        s(:lvar, :tp), :method_id))))), :enable),
            s(:args),
            s(:send,
              s(:lvar, :aliased), :size)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :call),
                s(:sym, :size)),
              s(:array,
                s(:sym, :c_call),
                s(:sym, :original_size)),
              s(:array,
                s(:sym, :c_return),
                s(:sym, :original_size)),
              s(:array,
                s(:sym, :return),
                s(:sym, :size))),
            s(:lvar, :events),
            s(:str, "should use alias method name for tracing c methods")))),
      s(:def, :test_method_missing,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug59398,
            s(:str, "[ruby-core:59398]")),
          s(:lvasgn, :events,
            s(:array)),
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :respond_to?,
                s(:sym, :missing_method_59398)), :!)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:sym, :c_call),
                  s(:sym, :c_return),
                  s(:sym, :call),
                  s(:sym, :return)),
                s(:args,
                  s(:arg, :tp)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send, nil, :target_thread?), :!),
                    s(:next), nil),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :tp), :defined_class), :==,
                      s(:const, nil, :BasicObject)), nil,
                    s(:next)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :tp), :method_id), :==,
                      s(:sym, :method_missing)),
                    s(:send,
                      s(:lvar, :events), :<<,
                      s(:array,
                        s(:send,
                          s(:lvar, :tp), :event),
                        s(:send,
                          s(:lvar, :tp), :method_id))), nil))), :enable),
            s(:args),
            s(:rescue,
              s(:send, nil, :missing_method_59398),
              s(:resbody, nil, nil,
                s(:nil)), nil)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :c_call),
                s(:sym, :method_missing)),
              s(:array,
                s(:sym, :c_return),
                s(:sym, :method_missing))),
            s(:lvar, :events),
            s(:lvar, :bug59398)))),
      s(:class,
        s(:const, nil, :C9759), nil,
        s(:block,
          s(:send, nil, :define_method,
            s(:sym, :foo)),
          s(:args),
          s(:send, nil, :raise))),
      s(:def, :test_define_method_on_exception,
        s(:args),
        s(:begin,
          s(:lvasgn, :events,
            s(:array)),
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :C9759), :new)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:sym, :call),
                  s(:sym, :return)),
                s(:args,
                  s(:arg, :tp)),
                s(:begin,
                  s(:if,
                    s(:send, nil, :target_thread?), nil,
                    s(:next)),
                  s(:send,
                    s(:lvar, :events), :<<,
                    s(:array,
                      s(:send,
                        s(:lvar, :tp), :event),
                      s(:send,
                        s(:lvar, :tp), :method_id))))), :enable),
            s(:args),
            s(:rescue,
              s(:send,
                s(:lvar, :obj), :foo),
              s(:resbody, nil, nil,
                s(:nil)), nil)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :call),
                s(:sym, :foo)),
              s(:array,
                s(:sym, :return),
                s(:sym, :foo))),
            s(:lvar, :events),
            s(:str, "Bug #9759")),
          s(:lvasgn, :events,
            s(:array)),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:send, nil, :set_trace_func,
                  s(:block,
                    s(:send, nil, :lambda),
                    s(:args,
                      s(:arg, :event),
                      s(:arg, :file),
                      s(:arg, :lineno),
                      s(:arg, :mid),
                      s(:arg, :binding),
                      s(:arg, :klass)),
                    s(:begin,
                      s(:if,
                        s(:send, nil, :target_thread?), nil,
                        s(:next)),
                      s(:case,
                        s(:lvar, :event),
                        s(:when,
                          s(:str, "call"),
                          s(:str, "return"),
                          s(:send,
                            s(:lvar, :events), :<<,
                            s(:array,
                              s(:lvar, :event),
                              s(:lvar, :mid)))), nil)))),
                s(:rescue,
                  s(:send,
                    s(:lvar, :obj), :foo),
                  s(:resbody, nil, nil,
                    s(:nil)), nil),
                s(:send, nil, :set_trace_func,
                  s(:nil)),
                s(:send, nil, :assert_equal,
                  s(:array,
                    s(:array,
                      s(:str, "call"),
                      s(:sym, :foo)),
                    s(:array,
                      s(:str, "return"),
                      s(:sym, :foo))),
                  s(:lvar, :events),
                  s(:str, "Bug #9759"))), nil)))),
      s(:class,
        s(:const, nil, :C11492), nil,
        s(:begin,
          s(:block,
            s(:send, nil, :define_method,
              s(:sym, :foo_return)),
            s(:args),
            s(:return,
              s(:true))),
          s(:block,
            s(:send, nil, :define_method,
              s(:sym, :foo_break)),
            s(:args),
            s(:break,
              s(:true))))),
      s(:def, :test_define_method_on_return,
        s(:args),
        s(:begin,
          s(:lvasgn, :events,
            s(:array)),
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :C11492), :new)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:sym, :call),
                  s(:sym, :return)),
                s(:args,
                  s(:arg, :tp)),
                s(:begin,
                  s(:if,
                    s(:send, nil, :target_thread?), nil,
                    s(:next)),
                  s(:send,
                    s(:lvar, :events), :<<,
                    s(:array,
                      s(:send,
                        s(:lvar, :tp), :event),
                      s(:send,
                        s(:lvar, :tp), :method_id))))), :enable),
            s(:args),
            s(:send,
              s(:lvar, :obj), :foo_return)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :call),
                s(:sym, :foo_return)),
              s(:array,
                s(:sym, :return),
                s(:sym, :foo_return))),
            s(:lvar, :events),
            s(:str, "Bug #11492")),
          s(:lvasgn, :events,
            s(:array)),
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :C11492), :new)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:sym, :call),
                  s(:sym, :return)),
                s(:args,
                  s(:arg, :tp)),
                s(:begin,
                  s(:if,
                    s(:send, nil, :target_thread?), nil,
                    s(:next)),
                  s(:send,
                    s(:lvar, :events), :<<,
                    s(:array,
                      s(:send,
                        s(:lvar, :tp), :event),
                      s(:send,
                        s(:lvar, :tp), :method_id))))), :enable),
            s(:args),
            s(:send,
              s(:lvar, :obj), :foo_break)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :call),
                s(:sym, :foo_break)),
              s(:array,
                s(:sym, :return),
                s(:sym, :foo_break))),
            s(:lvar, :events),
            s(:str, "Bug #11492")),
          s(:lvasgn, :events,
            s(:array)),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:send, nil, :set_trace_func,
                  s(:block,
                    s(:send, nil, :lambda),
                    s(:args,
                      s(:arg, :event),
                      s(:arg, :file),
                      s(:arg, :lineno),
                      s(:arg, :mid),
                      s(:arg, :binding),
                      s(:arg, :klass)),
                    s(:begin,
                      s(:if,
                        s(:send, nil, :target_thread?), nil,
                        s(:next)),
                      s(:case,
                        s(:lvar, :event),
                        s(:when,
                          s(:str, "call"),
                          s(:str, "return"),
                          s(:send,
                            s(:lvar, :events), :<<,
                            s(:array,
                              s(:lvar, :event),
                              s(:lvar, :mid)))), nil)))),
                s(:send,
                  s(:lvar, :obj), :foo_return),
                s(:send, nil, :set_trace_func,
                  s(:nil)),
                s(:send, nil, :assert_equal,
                  s(:array,
                    s(:array,
                      s(:str, "call"),
                      s(:sym, :foo_return)),
                    s(:array,
                      s(:str, "return"),
                      s(:sym, :foo_return))),
                  s(:lvar, :events),
                  s(:str, "Bug #11492"))), nil)),
          s(:lvasgn, :events,
            s(:array)),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:send, nil, :set_trace_func,
                  s(:block,
                    s(:send, nil, :lambda),
                    s(:args,
                      s(:arg, :event),
                      s(:arg, :file),
                      s(:arg, :lineno),
                      s(:arg, :mid),
                      s(:arg, :binding),
                      s(:arg, :klass)),
                    s(:begin,
                      s(:if,
                        s(:send, nil, :target_thread?), nil,
                        s(:next)),
                      s(:case,
                        s(:lvar, :event),
                        s(:when,
                          s(:str, "call"),
                          s(:str, "return"),
                          s(:send,
                            s(:lvar, :events), :<<,
                            s(:array,
                              s(:lvar, :event),
                              s(:lvar, :mid)))), nil)))),
                s(:send,
                  s(:lvar, :obj), :foo_break),
                s(:send, nil, :set_trace_func,
                  s(:nil)),
                s(:send, nil, :assert_equal,
                  s(:array,
                    s(:array,
                      s(:str, "call"),
                      s(:sym, :foo_break)),
                    s(:array,
                      s(:str, "return"),
                      s(:sym, :foo_break))),
                  s(:lvar, :events),
                  s(:str, "Bug #11492"))), nil)))),
      s(:def, :test_recursive,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array),
          s(:dstr,
            s(:str, "\\\n"),
            s(:str, "      TracePoint.new(:c_call){|tp|\n"),
            s(:str, "        p tp.method_id\n"),
            s(:str, "      }.enable{\n"),
            s(:str, "        p 1\n"),
            s(:str, "      }\n"),
            s(:str, "    ")),
          s(:array,
            s(:str, ":p"),
            s(:str, ":inspect"),
            s(:str, "1")),
          s(:array),
          s(:str, "[Bug #9940]"))),
      s(:def, :method_prefix,
        s(:args,
          s(:arg, :event)),
        s(:case,
          s(:lvar, :event),
          s(:when,
            s(:sym, :call),
            s(:sym, :return),
            s(:sym, :n)),
          s(:when,
            s(:sym, :c_call),
            s(:sym, :c_return),
            s(:sym, :c)),
          s(:when,
            s(:sym, :b_call),
            s(:sym, :b_return),
            s(:sym, :b)), nil)),
      s(:def, :method_label,
        s(:args,
          s(:arg, :tp)),
        s(:dstr,
          s(:begin,
            s(:send, nil, :method_prefix,
              s(:send,
                s(:lvar, :tp), :event))),
          s(:str, "#"),
          s(:begin,
            s(:send,
              s(:lvar, :tp), :method_id)))),
      s(:def, :assert_consistent_call_return,
        s(:args,
          s(:optarg, :message,
            s(:str, "")),
          s(:kwoptarg, :check_events,
            s(:nil))),
        s(:begin,
          s(:or_asgn,
            s(:lvasgn, :check_events),
            s(:array,
              s(:sym, :a_call),
              s(:sym, :a_return))),
          s(:lvasgn, :call_stack,
            s(:array)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:splat,
                    s(:lvar, :check_events))),
                s(:args,
                  s(:arg, :tp)),
                s(:begin,
                  s(:if,
                    s(:send, nil, :target_thread?), nil,
                    s(:next)),
                  s(:case,
                    s(:send,
                      s(:send,
                        s(:lvar, :tp), :event), :to_s),
                    s(:when,
                      s(:regexp,
                        s(:str, "call"),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :call_stack), :<<,
                        s(:send, nil, :method_label,
                          s(:lvar, :tp)))),
                    s(:when,
                      s(:regexp,
                        s(:str, "return"),
                        s(:regopt)),
                      s(:begin,
                        s(:lvasgn, :frame,
                          s(:send,
                            s(:lvar, :call_stack), :pop)),
                        s(:send, nil, :assert_equal,
                          s(:lvar, :frame),
                          s(:send, nil, :method_label,
                            s(:lvar, :tp))))), nil))), :enable),
            s(:args),
            s(:yield)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :call_stack), :empty?)))),
      s(:def, :method_test_rescue_should_not_cause_b_return,
        s(:args),
        s(:kwbegin,
          s(:rescue,
            s(:send, nil, :raise),
            s(:resbody, nil, nil,
              s(:return)), nil))),
      s(:def, :method_test_ensure_should_not_cause_b_return,
        s(:args),
        s(:kwbegin,
          s(:ensure,
            s(:send, nil, :raise),
            s(:return)))),
      s(:def, :test_rescue_and_ensure_should_not_cause_b_return,
        s(:args),
        s(:block,
          s(:send, nil, :assert_consistent_call_return,
            s(:str, "[Bug #9957]")),
          s(:args),
          s(:begin,
            s(:send, nil, :method_test_rescue_should_not_cause_b_return),
            s(:kwbegin,
              s(:rescue,
                s(:send, nil, :method_test_ensure_should_not_cause_b_return),
                s(:resbody, nil, nil, nil), nil))))),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :method_test_argument_error_on_bmethod)),
        s(:args,
          s(:kwoptarg, :correct_key,
            s(:int, 1))), nil),
      s(:def, :test_argument_error_on_bmethod,
        s(:args),
        s(:block,
          s(:send, nil, :assert_consistent_call_return,
            s(:str, "[Bug #9959]")),
          s(:args),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :method_test_argument_error_on_bmethod,
                s(:hash,
                  s(:pair,
                    s(:sym, :wrong_key),
                    s(:int, 2)))),
              s(:resbody, nil,
                s(:lvasgn, :e), nil), nil)))),
      s(:def, :test_rb_rescue,
        s(:args),
        s(:block,
          s(:send, nil, :assert_consistent_call_return,
            s(:str, "[Bug #9961]")),
          s(:args),
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:send,
                  s(:const, nil, :Numeric), :new), :-@),
              s(:resbody, nil,
                s(:lvasgn, :e), nil), nil)))),
      s(:def, :test_b_call_with_redo,
        s(:args),
        s(:block,
          s(:send, nil, :assert_consistent_call_return,
            s(:str, "[Bug #9964]")),
          s(:args),
          s(:begin,
            s(:lvasgn, :i,
              s(:int, 0)),
            s(:block,
              s(:send,
                s(:int, 1), :times),
              s(:args),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:begin,
                      s(:op_asgn,
                        s(:lvasgn, :i), :+,
                        s(:int, 1))), :>,
                    s(:int, 10)),
                  s(:break), nil),
                s(:redo)))))),
      s(:def, :test_no_duplicate_line_events,
        s(:args),
        s(:begin,
          s(:lvasgn, :lines,
            s(:array)),
          s(:lvasgn, :dummy,
            s(:array)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:sym, :line)),
                s(:args,
                  s(:arg, :tp)),
                s(:begin,
                  s(:if,
                    s(:send, nil, :target_thread?), nil,
                    s(:next)),
                  s(:send,
                    s(:lvar, :lines), :<<,
                    s(:send,
                      s(:lvar, :tp), :lineno)))), :enable),
            s(:args),
            s(:begin,
              s(:send,
                s(:lvar, :dummy), :<<,
                s(:send,
                  s(:begin,
                    s(:int, 1)), :+,
                  s(:begin,
                    s(:int, 2)))),
              s(:send,
                s(:lvar, :dummy), :<<,
                s(:send,
                  s(:begin,
                    s(:int, 1)), :+,
                  s(:begin,
                    s(:int, 2)))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:int, 1399), :-,
                s(:int, 3)),
              s(:send,
                s(:int, 1399), :-,
                s(:int, 2))),
            s(:lvar, :lines),
            s(:str, "Bug #10449")))),
      s(:def, :test_elsif_line_event,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug10763,
            s(:str, "[ruby-core:67720] [Bug #10763]")),
          s(:lvasgn, :lines,
            s(:array)),
          s(:lvasgn, :line,
            s(:nil)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:sym, :line)),
                s(:args,
                  s(:arg, :tp)),
                s(:begin,
                  s(:if,
                    s(:send, nil, :target_thread?), nil,
                    s(:next)),
                  s(:if,
                    s(:lvar, :line),
                    s(:send,
                      s(:lvar, :lines), :<<,
                      s(:send,
                        s(:lvar, :tp), :lineno)), nil))), :enable),
            s(:args),
            s(:begin,
              s(:lvasgn, :line,
                s(:int, 1411)),
              s(:if,
                s(:send,
                  s(:lvar, :line), :!),
                s(:int, 1),
                s(:if,
                  s(:lvar, :line),
                  s(:int, 2), nil)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:lvar, :line), :+,
                s(:int, 1)),
              s(:send,
                s(:lvar, :line), :+,
                s(:int, 3)),
              s(:send,
                s(:lvar, :line), :+,
                s(:int, 4))),
            s(:lvar, :lines),
            s(:lvar, :bug10763)))),
      s(:class,
        s(:const, nil, :Bug10724), nil,
        s(:def, :initialize,
          s(:args),
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:return)))),
      s(:def, :test_throwing_return_with_finish_frame,
        s(:args),
        s(:begin,
          s(:lvasgn, :target_th,
            s(:send,
              s(:const, nil, :Thread), :current)),
          s(:lvasgn, :evs,
            s(:array)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:sym, :call),
                  s(:sym, :return)),
                s(:args,
                  s(:arg, :tp)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Thread), :current), :!=,
                      s(:lvar, :target_th)),
                    s(:return), nil),
                  s(:send,
                    s(:lvar, :evs), :<<,
                    s(:send,
                      s(:lvar, :tp), :event)))), :enable),
            s(:args),
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :Bug10724), :new))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :call),
              s(:sym, :return)),
            s(:lvar, :evs)))),
      s(:send, nil, :require,
        s(:str, "fiber")),
      s(:def, :test_fiber_switch,
        s(:args),
        s(:begin,
          s(:lvasgn, :evs,
            s(:array)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:sym, :fiber_switch)),
                s(:args,
                  s(:arg, :tp)),
                s(:begin,
                  s(:if,
                    s(:send, nil, :target_thread?), nil,
                    s(:next)),
                  s(:send,
                    s(:lvar, :evs), :<<,
                    s(:send,
                      s(:lvar, :tp), :event)))), :enable),
            s(:args),
            s(:begin,
              s(:lvasgn, :f,
                s(:block,
                  s(:send,
                    s(:const, nil, :Fiber), :new),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Fiber), :yield),
                    s(:send,
                      s(:const, nil, :Fiber), :yield),
                    s(:send,
                      s(:const, nil, :Fiber), :yield)))),
              s(:send,
                s(:lvar, :f), :resume),
              s(:send,
                s(:lvar, :f), :resume),
              s(:send,
                s(:lvar, :f), :resume),
              s(:send,
                s(:lvar, :f), :resume),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:lvar, :f), :resume),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :FiberError)), nil, nil), nil)))),
          s(:send, nil, :assert_equal,
            s(:int, 8),
            s(:send,
              s(:lvar, :evs), :size)),
          s(:block,
            s(:send,
              s(:lvar, :evs), :each),
            s(:args,
              s(:arg, :ev)),
            s(:send, nil, :assert_equal,
              s(:lvar, :ev),
              s(:sym, :fiber_switch))),
          s(:lvasgn, :evs,
            s(:array)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:sym, :fiber_switch)),
                s(:args,
                  s(:arg, :tp)),
                s(:begin,
                  s(:if,
                    s(:send, nil, :target_thread?), nil,
                    s(:next)),
                  s(:send,
                    s(:lvar, :evs), :<<,
                    s(:send,
                      s(:lvar, :tp), :event)))), :enable),
            s(:args),
            s(:begin,
              s(:lvasgn, :f1,
                s(:lvasgn, :f2,
                  s(:nil))),
              s(:lvasgn, :f1,
                s(:block,
                  s(:send,
                    s(:const, nil, :Fiber), :new),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:lvar, :f2), :transfer),
                    s(:send,
                      s(:lvar, :f2), :transfer),
                    s(:send,
                      s(:const, nil, :Fiber), :yield,
                      s(:sym, :ok))))),
              s(:lvasgn, :f2,
                s(:block,
                  s(:send,
                    s(:const, nil, :Fiber), :new),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:lvar, :f1), :transfer),
                    s(:send,
                      s(:lvar, :f1), :transfer)))),
              s(:send, nil, :assert_equal,
                s(:sym, :ok),
                s(:send,
                  s(:lvar, :f1), :resume)))),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:lvar, :evs), :size)),
          s(:block,
            s(:send,
              s(:lvar, :evs), :each),
            s(:args,
              s(:arg, :ev)),
            s(:send, nil, :assert_equal,
              s(:lvar, :ev),
              s(:sym, :fiber_switch))))))))
