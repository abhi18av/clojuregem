s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestObject),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@verbose,
            s(:gvar, :$VERBOSE)),
          s(:gvasgn, :$VERBOSE,
            s(:nil)))),
      s(:def, :teardown,
        s(:args),
        s(:gvasgn, :$VERBOSE,
          s(:ivar, :@verbose))),
      s(:def, :test_itself,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature6373,
            s(:str, "[ruby-core:44704] [Feature #6373]")),
          s(:lvasgn, :object,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send, nil, :assert_same,
            s(:lvar, :object),
            s(:send,
              s(:lvar, :object), :itself),
            s(:lvar, :feature6373)))),
      s(:def, :test_dup,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:int, 1), :dup)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:true), :dup)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:nil), :dup)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Object), :new), :instance_eval),
              s(:args),
              s(:send, nil, :initialize_copy,
                s(:int, 1)))))),
      s(:def, :test_init_dupclone,
        s(:args),
        s(:begin,
          s(:lvasgn, :cls,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:def, :initialize_clone,
                  s(:args,
                    s(:arg, :orig)),
                  s(:send, nil, :throw,
                    s(:sym, :initialize_clone))),
                s(:def, :initialize_dup,
                  s(:args,
                    s(:arg, :orig)),
                  s(:send, nil, :throw,
                    s(:sym, :initialize_dup)))))),
          s(:lvasgn, :obj,
            s(:send,
              s(:lvar, :cls), :new)),
          s(:block,
            s(:send, nil, :assert_throw,
              s(:sym, :initialize_clone)),
            s(:args),
            s(:send,
              s(:lvar, :obj), :clone)),
          s(:block,
            s(:send, nil, :assert_throw,
              s(:sym, :initialize_dup)),
            s(:args),
            s(:send,
              s(:lvar, :obj), :dup)))),
      s(:def, :test_instance_of,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send,
            s(:int, 1), :instance_of?,
            s(:int, 1)))),
      s(:def, :test_kind_of,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send,
            s(:int, 1), :kind_of?,
            s(:int, 1)))),
      s(:def, :test_taint_frozen_obj,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send,
            s(:lvar, :o), :freeze),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :taint)),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send,
            s(:lvar, :o), :taint),
          s(:send,
            s(:lvar, :o), :freeze),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :untaint)))),
      s(:def, :test_freeze_immediate,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:int, 1), :frozen?)),
          s(:send,
            s(:int, 1), :freeze),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:int, 1), :frozen?)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:int, 2), :frozen?)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:true), :frozen?)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:false), :frozen?)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:nil), :frozen?)))),
      s(:def, :test_frozen_error_message,
        s(:args),
        s(:begin,
          s(:lvasgn, :name,
            s(:str, "Cテスト")),
          s(:lvasgn, :klass,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :labeled_class,
                s(:lvar, :name)),
              s(:args),
              s(:send, nil, :attr_accessor,
                s(:sym, :foo)))),
          s(:lvasgn, :obj,
            s(:send,
              s(:send,
                s(:lvar, :klass), :new), :freeze)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :RuntimeError),
              s(:regexp,
                s(:begin,
                  s(:lvar, :name)),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :obj), :foo=,
              s(:int, 1))))),
      s(:def, :test_nil_to_f,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:float, 0.0),
          s(:send,
            s(:nil), :to_f))),
      s(:def, :test_not,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send,
                s(:const, nil, :Object), :new), :send,
              s(:sym, :!))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:nil), :send,
              s(:sym, :!))))),
      s(:def, :test_true_and,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:true), :&,
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:true), :&,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:true), :&,
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:true), :&,
              s(:nil))))),
      s(:def, :test_true_or,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:true), :|,
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:true), :|,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:true), :|,
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:true), :|,
              s(:nil))))),
      s(:def, :test_true_xor,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:true), :^,
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:true), :^,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:true), :^,
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:true), :^,
              s(:nil))))),
      s(:def, :test_false_and,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:false), :&,
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:false), :&,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:false), :&,
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:false), :&,
              s(:nil))))),
      s(:def, :test_false_or,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:false), :|,
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:false), :|,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:false), :|,
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:false), :|,
              s(:nil))))),
      s(:def, :test_false_xor,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:false), :^,
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:false), :^,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:false), :^,
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:false), :^,
              s(:nil))))),
      s(:def, :test_methods,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :a1,
            s(:send,
              s(:lvar, :o), :methods)),
          s(:lvasgn, :a2,
            s(:send,
              s(:lvar, :o), :methods,
              s(:false))),
          s(:defs,
            s(:lvar, :o), :foo,
            s(:args), nil),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :foo)),
            s(:send,
              s(:send,
                s(:lvar, :o), :methods,
                s(:true)), :-,
              s(:lvar, :a1))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :foo)),
            s(:send,
              s(:send,
                s(:lvar, :o), :methods,
                s(:false)), :-,
              s(:lvar, :a2))))),
      s(:def, :test_methods2,
        s(:args),
        s(:begin,
          s(:lvasgn, :c0,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:lvasgn, :c1,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :c0))),
          s(:block,
            s(:send,
              s(:lvar, :c1), :module_eval),
            s(:args),
            s(:begin,
              s(:send, nil, :public),
              s(:def, :foo,
                s(:args), nil),
              s(:send, nil, :protected),
              s(:def, :bar,
                s(:args), nil),
              s(:send, nil, :private),
              s(:def, :baz,
                s(:args), nil))),
          s(:lvasgn, :c2,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :c1))),
          s(:block,
            s(:send,
              s(:lvar, :c2), :module_eval),
            s(:args),
            s(:begin,
              s(:send, nil, :public),
              s(:def, :foo2,
                s(:args), nil),
              s(:send, nil, :protected),
              s(:def, :bar2,
                s(:args), nil),
              s(:send, nil, :private),
              s(:def, :baz2,
                s(:args), nil))),
          s(:lvasgn, :o0,
            s(:send,
              s(:lvar, :c0), :new)),
          s(:lvasgn, :o2,
            s(:send,
              s(:lvar, :c2), :new)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :baz),
              s(:sym, :baz2)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :o2), :private_methods), :-,
                  s(:send,
                    s(:lvar, :o0), :private_methods))), :sort)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :baz2)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :o2), :private_methods,
                    s(:false)), :-,
                  s(:send,
                    s(:lvar, :o0), :private_methods,
                    s(:false)))), :sort)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :bar),
              s(:sym, :bar2)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :o2), :protected_methods), :-,
                  s(:send,
                    s(:lvar, :o0), :protected_methods))), :sort)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :bar2)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :o2), :protected_methods,
                    s(:false)), :-,
                  s(:send,
                    s(:lvar, :o0), :protected_methods,
                    s(:false)))), :sort)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :foo),
              s(:sym, :foo2)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :o2), :public_methods), :-,
                  s(:send,
                    s(:lvar, :o0), :public_methods))), :sort)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :foo2)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :o2), :public_methods,
                    s(:false)), :-,
                  s(:send,
                    s(:lvar, :o0), :public_methods,
                    s(:false)))), :sort)))),
      s(:def, :test_methods_prepend,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8044,
            s(:str, "[ruby-core:53207] [Bug #8044]")),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :foo,
            s(:args), nil),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :foo)),
            s(:send,
              s(:lvar, :o), :methods,
              s(:false))),
          s(:sclass,
            s(:lvar, :o),
            s(:send, nil, :prepend,
              s(:send,
                s(:const, nil, :Module), :new))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :foo)),
            s(:send,
              s(:lvar, :o), :methods,
              s(:false)),
            s(:lvar, :bug8044)))),
      s(:def, :test_instance_variable_get,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send,
              s(:lvar, :o), :instance_eval),
            s(:args),
            s(:ivasgn, :@foo,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :o), :instance_variable_get,
              s(:sym, :@foo))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :o), :instance_variable_get,
              s(:sym, :@bar))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_variable_get,
              s(:str, "@"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_variable_get,
              s(:sym, :"@"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_variable_get,
              s(:sym, :foo))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_variable_get,
              s(:str, "bar"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_variable_get,
              s(:int, 1))),
          s(:lvasgn, :n,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :n), :to_str,
            s(:args),
            s(:begin,
              s(:ivasgn, :@count,
                s(:if,
                  s(:defined?,
                    s(:ivar, :@count)),
                  s(:send,
                    s(:ivar, :@count), :+,
                    s(:int, 1)),
                  s(:int, 1))),
              s(:str, "@foo"))),
          s(:defs,
            s(:lvar, :n), :count,
            s(:args),
            s(:ivar, :@count)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :o), :instance_variable_get,
              s(:lvar, :n))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :n), :count)))),
      s(:def, :test_instance_variable_set,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send,
            s(:lvar, :o), :instance_variable_set,
            s(:sym, :@foo),
            s(:sym, :foo)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:block,
              s(:send,
                s(:lvar, :o), :instance_eval),
              s(:args),
              s(:ivar, :@foo))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_variable_set,
              s(:sym, :"@"),
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_variable_set,
              s(:str, "@"),
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_variable_set,
              s(:sym, :foo),
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_variable_set,
              s(:str, "bar"),
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_variable_set,
              s(:int, 1),
              s(:int, 1))),
          s(:lvasgn, :n,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :n), :to_str,
            s(:args),
            s(:begin,
              s(:ivasgn, :@count,
                s(:if,
                  s(:defined?,
                    s(:ivar, :@count)),
                  s(:send,
                    s(:ivar, :@count), :+,
                    s(:int, 1)),
                  s(:int, 1))),
              s(:str, "@foo"))),
          s(:defs,
            s(:lvar, :n), :count,
            s(:args),
            s(:ivar, :@count)),
          s(:send,
            s(:lvar, :o), :instance_variable_set,
            s(:lvar, :n),
            s(:sym, :bar)),
          s(:send, nil, :assert_equal,
            s(:sym, :bar),
            s(:block,
              s(:send,
                s(:lvar, :o), :instance_eval),
              s(:args),
              s(:ivar, :@foo))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :n), :count)))),
      s(:def, :test_instance_variable_defined,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send,
              s(:lvar, :o), :instance_eval),
            s(:args),
            s(:ivasgn, :@foo,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :o), :instance_variable_defined?,
              s(:sym, :@foo))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :o), :instance_variable_defined?,
              s(:sym, :@bar))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_variable_defined?,
              s(:sym, :"@"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_variable_defined?,
              s(:str, "@"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_variable_defined?,
              s(:sym, :foo))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_variable_defined?,
              s(:str, "bar"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :instance_variable_defined?,
              s(:int, 1))),
          s(:lvasgn, :n,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :n), :to_str,
            s(:args),
            s(:begin,
              s(:ivasgn, :@count,
                s(:if,
                  s(:defined?,
                    s(:ivar, :@count)),
                  s(:send,
                    s(:ivar, :@count), :+,
                    s(:int, 1)),
                  s(:int, 1))),
              s(:str, "@foo"))),
          s(:defs,
            s(:lvar, :n), :count,
            s(:args),
            s(:ivar, :@count)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :o), :instance_variable_defined?,
              s(:lvar, :n))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :n), :count)))),
      s(:def, :test_remove_instance_variable,
        s(:args),
        s(:block,
          s(:send,
            s(:hash,
              s(:pair,
                s(:str, "T_OBJECT"),
                s(:send,
                  s(:const, nil, :Object), :new)),
              s(:pair,
                s(:str, "T_CLASS,T_MODULE"),
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const, nil, :Object))),
              s(:pair,
                s(:str, "generic ivar"),
                s(:str, ""))), :each),
          s(:args,
            s(:arg, :desc),
            s(:arg, :o)),
          s(:begin,
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :NameError),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :desc)),
                    s(:str, " iv removal raises before set"))),
                s(:args),
                s(:send,
                  s(:lvar, :o), :remove_instance_variable,
                  s(:sym, :@foo)))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:lvar, :o),
                s(:sym, :@foo)),
              s(:array,
                s(:send,
                  s(:lvar, :e), :receiver),
                s(:send,
                  s(:lvar, :e), :name))),
            s(:block,
              s(:send,
                s(:lvar, :o), :instance_eval),
              s(:args),
              s(:ivasgn, :@foo,
                s(:sym, :foo))),
            s(:send, nil, :assert_equal,
              s(:sym, :foo),
              s(:send,
                s(:lvar, :o), :remove_instance_variable,
                s(:sym, :@foo)),
              s(:dstr,
                s(:begin,
                  s(:lvar, :desc)),
                s(:str, " iv removal returns original value"))),
            s(:send, nil, :assert_not_send,
              s(:array,
                s(:lvar, :o),
                s(:sym, :instance_variable_defined?),
                s(:sym, :@foo)),
              s(:dstr,
                s(:begin,
                  s(:lvar, :desc)),
                s(:str, " iv removed successfully"))),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :NameError),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :desc)),
                    s(:str, " iv removal raises after removal"))),
                s(:args),
                s(:send,
                  s(:lvar, :o), :remove_instance_variable,
                  s(:sym, :@foo)))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:lvar, :o),
                s(:sym, :@foo)),
              s(:array,
                s(:send,
                  s(:lvar, :e), :receiver),
                s(:send,
                  s(:lvar, :e), :name)))))),
      s(:def, :test_convert_string,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :to_s,
            s(:args),
            s(:int, 1)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :String,
              s(:lvar, :o))),
          s(:defs,
            s(:lvar, :o), :to_s,
            s(:args),
            s(:str, "o")),
          s(:send, nil, :assert_equal,
            s(:str, "o"),
            s(:send, nil, :String,
              s(:lvar, :o))),
          s(:defs,
            s(:lvar, :o), :to_str,
            s(:args),
            s(:str, "O")),
          s(:send, nil, :assert_equal,
            s(:str, "O"),
            s(:send, nil, :String,
              s(:lvar, :o))),
          s(:defs,
            s(:lvar, :o), :respond_to?,
            s(:args,
              s(:restarg)),
            s(:false)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :String,
              s(:lvar, :o))))),
      s(:def, :test_convert_array,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :to_a,
            s(:args),
            s(:int, 1)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :Array,
              s(:lvar, :o))),
          s(:defs,
            s(:lvar, :o), :to_a,
            s(:args),
            s(:array,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send, nil, :Array,
              s(:lvar, :o))),
          s(:defs,
            s(:lvar, :o), :to_ary,
            s(:args),
            s(:array,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2)),
            s(:send, nil, :Array,
              s(:lvar, :o))),
          s(:defs,
            s(:lvar, :o), :respond_to?,
            s(:args,
              s(:restarg)),
            s(:false)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :o)),
            s(:send, nil, :Array,
              s(:lvar, :o))))),
      s(:def, :test_convert_hash,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:send, nil, :Hash,
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:send, nil, :Hash,
              s(:array))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:sym, :key),
                s(:sym, :value))),
            s(:send, nil, :Hash,
              s(:hash,
                s(:pair,
                  s(:sym, :key),
                  s(:sym, :value))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :Hash,
              s(:array,
                s(:int, 1),
                s(:int, 2)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :Hash,
              s(:send,
                s(:const, nil, :Object), :new))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :to_hash,
            s(:args),
            s(:hash,
              s(:pair,
                s(:sym, :a),
                s(:int, 1)),
              s(:pair,
                s(:sym, :b),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:sym, :a),
                s(:int, 1)),
              s(:pair,
                s(:sym, :b),
                s(:int, 2))),
            s(:send, nil, :Hash,
              s(:lvar, :o))),
          s(:defs,
            s(:lvar, :o), :to_hash,
            s(:args),
            s(:int, 9)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :Hash,
              s(:lvar, :o))))),
      s(:def, :test_to_integer,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :to_i,
            s(:args),
            s(:nil)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :Integer,
              s(:lvar, :o))),
          s(:defs,
            s(:lvar, :o), :to_i,
            s(:args),
            s(:int, 42)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send, nil, :Integer,
              s(:lvar, :o))),
          s(:defs,
            s(:lvar, :o), :respond_to?,
            s(:args,
              s(:restarg)),
            s(:false)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :Integer,
              s(:lvar, :o))))),
      s(:class,
        s(:const, nil, :MyInteger), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :n)),
            s(:ivasgn, :@num,
              s(:lvar, :n))),
          s(:def, :to_int,
            s(:args),
            s(:ivar, :@num)),
          s(:def, :<=>,
            s(:args,
              s(:arg, :n)),
            s(:send,
              s(:ivar, :@num), :<=>,
              s(:send,
                s(:lvar, :n), :to_int))),
          s(:def, :<=,
            s(:args,
              s(:arg, :n)),
            s(:send,
              s(:ivar, :@num), :<=,
              s(:send,
                s(:lvar, :n), :to_int))),
          s(:def, :+,
            s(:args,
              s(:arg, :n)),
            s(:send,
              s(:const, nil, :MyInteger), :new,
              s(:send,
                s(:ivar, :@num), :+,
                s(:send,
                  s(:lvar, :n), :to_int)))))),
      s(:def, :test_check_to_integer,
        s(:args),
        s(:begin,
          s(:lvasgn, :o1,
            s(:send,
              s(:const, nil, :MyInteger), :new,
              s(:int, 1))),
          s(:lvasgn, :o9,
            s(:send,
              s(:const, nil, :MyInteger), :new,
              s(:int, 9))),
          s(:lvasgn, :n,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Range), :new,
                s(:lvar, :o1),
                s(:lvar, :o9)), :step,
              s(:int, 2)),
            s(:args,
              s(:arg, :x)),
            s(:op_asgn,
              s(:lvasgn, :n), :+,
              s(:send,
                s(:lvar, :x), :to_int))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:int, 1), :+,
                    s(:int, 3)), :+,
                  s(:int, 5)), :+,
                s(:int, 7)), :+,
              s(:int, 9)),
            s(:lvar, :n)))),
      s(:def, :test_redefine_method_under_verbose,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array),
          s(:dstr,
            s(:str, "      $VERBOSE = true\n"),
            s(:str, "      o = Object.new\n"),
            s(:str, "      def o.foo; 1; end\n"),
            s(:str, "      def o.foo; 2; end\n"),
            s(:str, "      p o.foo\n")),
          s(:array,
            s(:str, "2")),
          s(:regexp,
            s(:str, "warning: method redefined; discarding old foo$"),
            s(:regopt)))),
      s(:def, :test_redefine_method_which_may_case_serious_problem,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "      $VERBOSE = false\n"),
              s(:str, "      def (Object.new).object_id; end\n")),
            s(:array),
            s(:regexp,
              s(:str, "warning: redefining `object_id' may cause serious problems$"),
              s(:regopt))),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "      $VERBOSE = false\n"),
              s(:str, "      def (Object.new).__send__; end\n")),
            s(:array),
            s(:regexp,
              s(:str, "warning: redefining `__send__' may cause serious problems$"),
              s(:regopt))),
          s(:lvasgn, :bug10421,
            s(:str, "[ruby-dev:48691] [Bug #10421]")),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "      $VERBOSE = false\n"),
              s(:str, "      class C < BasicObject\n"),
              s(:str, "        def object_id; 1; end\n"),
              s(:str, "      end\n"),
              s(:str, "      puts C.new.object_id\n")),
            s(:array,
              s(:str, "1")),
            s(:array),
            s(:lvar, :bug10421)))),
      s(:def, :test_remove_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:send,
            s(:lvar, :c), :freeze),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :c), :instance_eval),
              s(:args),
              s(:send, nil, :remove_method,
                s(:sym, :foo)))),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:def, :meth1,
                s(:args),
                s(:str, "meth")))),
          s(:lvasgn, :d,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:lvar, :c)),
              s(:args),
              s(:alias,
                s(:sym, :meth2),
                s(:sym, :meth1)))),
          s(:lvasgn, :o1,
            s(:send,
              s(:lvar, :c), :new)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :o1),
            s(:sym, :meth1)),
          s(:send, nil, :assert_equal,
            s(:str, "meth"),
            s(:send,
              s(:lvar, :o1), :meth1)),
          s(:lvasgn, :o2,
            s(:send,
              s(:lvar, :d), :new)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :o2),
            s(:sym, :meth1)),
          s(:send, nil, :assert_equal,
            s(:str, "meth"),
            s(:send,
              s(:lvar, :o2), :meth1)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :o2),
            s(:sym, :meth2)),
          s(:send, nil, :assert_equal,
            s(:str, "meth"),
            s(:send,
              s(:lvar, :o2), :meth2)),
          s(:block,
            s(:send,
              s(:lvar, :d), :class_eval),
            s(:args),
            s(:send, nil, :remove_method,
              s(:sym, :meth2))),
          s(:lvasgn, :bug2202,
            s(:str, "[ruby-core:26074]")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError),
              s(:lvar, :bug2202)),
            s(:args),
            s(:send,
              s(:lvar, :o2), :meth2)),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "object_id"),
                s(:str, "__send__"),
                s(:str, "initialize")), :each),
            s(:args,
              s(:arg, :m)),
            s(:send, nil, :assert_in_out_err,
              s(:array),
              s(:dstr,
                s(:str, "        $VERBOSE = false\n"),
                s(:str, "        begin\n"),
                s(:str, "          Class.new.instance_eval { remove_method(:"),
                s(:begin,
                  s(:lvar, :m)),
                s(:str, ") }\n"),
                s(:str, "        rescue NameError\n"),
                s(:str, "          p :ok\n"),
                s(:str, "        end\n")),
              s(:array,
                s(:str, ":ok")),
              s(:regexp,
                s(:str, "warning: removing `"),
                s(:begin,
                  s(:lvar, :m)),
                s(:str, "' may cause serious problems$"),
                s(:regopt)))),
          s(:lvasgn, :m,
            s(:str, "メソッド")),
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send,
              s(:const, nil, :EnvUtil), :with_default_external,
              s(:const,
                s(:const, nil, :Encoding), :UTF_8)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :NameError),
                s(:regexp,
                  s(:begin,
                    s(:lvar, :m)),
                  s(:regopt))),
              s(:args),
              s(:block,
                s(:send,
                  s(:lvar, :c), :class_eval),
                s(:args),
                s(:send, nil, :remove_method,
                  s(:lvar, :m))))),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:block,
                  s(:send, nil, :define_method,
                    s(:lvar, :m)),
                  s(:args), nil),
                s(:send, nil, :remove_method,
                  s(:lvar, :m))))),
          s(:block,
            s(:send,
              s(:const, nil, :EnvUtil), :with_default_external,
              s(:const,
                s(:const, nil, :Encoding), :UTF_8)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :NameError),
                s(:regexp,
                  s(:begin,
                    s(:lvar, :m)),
                  s(:regopt))),
              s(:args),
              s(:block,
                s(:send,
                  s(:lvar, :c), :class_eval),
                s(:args),
                s(:send, nil, :remove_method,
                  s(:lvar, :m))))))),
      s(:def, :test_method_missing,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:block,
              s(:send,
                s(:int, 1), :instance_eval),
              s(:args),
              s(:send, nil, :method_missing))),
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:block,
            s(:send,
              s(:lvar, :c), :class_eval),
            s(:args),
            s(:begin,
              s(:send, nil, :protected),
              s(:def, :foo,
                s(:args), nil))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:send,
                s(:lvar, :c), :new), :foo)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:block,
              s(:send,
                s(:int, 1), :instance_eval),
              s(:args),
              s(:send, nil, :method_missing,
                s(:sym, :method_missing)))),
          s(:block,
            s(:send,
              s(:lvar, :c), :class_eval),
            s(:args),
            s(:send, nil, :undef_method,
              s(:sym, :method_missing))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send,
                s(:lvar, :c), :new), :method_missing)),
          s(:lvasgn, :bug2494,
            s(:str, "[ruby-core:27219]")),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:def, :method_missing,
                s(:args,
                  s(:arg, :meth),
                  s(:restarg, :args)),
                s(:zsuper)))),
          s(:lvasgn, :b,
            s(:send,
              s(:lvar, :c), :new)),
          s(:rescue,
            s(:send, nil, :foo),
            s(:resbody, nil, nil,
              s(:nil)), nil),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:lvar, :bug2494)),
            s(:args),
            s(:send,
              s(:array,
                s(:lvar, :b)), :flatten)))),
      s(:def, :test_respond_to_missing_string,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:def, :respond_to_missing?,
                s(:args,
                  s(:arg, :id),
                  s(:arg, :priv)),
                s(:send,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:lvar, :id), :!~,
                        s(:regexp,
                          s(:str, "\\Agadzoks\\d+\\z"),
                          s(:regopt)))), :!), :^,
                  s(:lvar, :priv))))),
          s(:lvasgn, :foo,
            s(:send,
              s(:lvar, :c), :new)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :foo), :respond_to?,
              s(:str, "gadzooks16"))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :foo), :respond_to?,
              s(:str, "gadzooks17"),
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :foo), :respond_to?,
              s(:str, "gadzoks16"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :foo), :respond_to?,
              s(:str, "gadzoks17"),
              s(:true))))),
      s(:def, :test_respond_to_missing,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:def, :respond_to_missing?,
                  s(:args,
                    s(:arg, :id),
                    s(:arg, :priv)),
                  s(:if,
                    s(:send,
                      s(:lvar, :id), :==,
                      s(:sym, :foobar)),
                    s(:true),
                    s(:false))),
                s(:def, :method_missing,
                  s(:args,
                    s(:arg, :id),
                    s(:restarg, :args)),
                  s(:if,
                    s(:send,
                      s(:lvar, :id), :==,
                      s(:sym, :foobar)),
                    s(:return,
                      s(:array,
                        s(:sym, :foo),
                        s(:splat,
                          s(:lvar, :args)))),
                    s(:zsuper)))))),
          s(:lvasgn, :foo,
            s(:send,
              s(:lvar, :c), :new)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :foo)),
            s(:send,
              s(:lvar, :foo), :foobar)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :foo),
              s(:int, 1)),
            s(:send,
              s(:lvar, :foo), :foobar,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :foo),
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 5)),
            s(:send,
              s(:lvar, :foo), :foobar,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 5))),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :foo),
            s(:sym, :foobar)),
          s(:send, nil, :assert_not_respond_to,
            s(:lvar, :foo),
            s(:sym, :foobarbaz)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:lvar, :foo), :foobarbaz)),
          s(:lvasgn, :foobar,
            s(:send,
              s(:lvar, :foo), :method,
              s(:sym, :foobar))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :foobar), :arity)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :foo)),
            s(:send,
              s(:lvar, :foobar), :call)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :foo),
              s(:int, 1)),
            s(:send,
              s(:lvar, :foobar), :call,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :foo),
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 5)),
            s(:send,
              s(:lvar, :foobar), :call,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:lvar, :foobar),
            s(:send,
              s(:lvar, :foo), :method,
              s(:sym, :foobar))),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :foobar),
            s(:send,
              s(:send,
                s(:lvar, :c), :new), :method,
              s(:sym, :foobar))),
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :c))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :c), :method_defined?,
              s(:sym, :foobar))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError),
              s(:str, "[ruby-core:25748]")),
            s(:args),
            s(:send,
              s(:lvar, :c), :instance_method,
              s(:sym, :foobar))),
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Module), :new)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :m), :method_defined?,
              s(:sym, :foobar))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError),
              s(:str, "[ruby-core:25748]")),
            s(:args),
            s(:send,
              s(:lvar, :m), :instance_method,
              s(:sym, :foobar))))),
      s(:def, :test_implicit_respond_to,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5158,
            s(:str, "[ruby-core:38799]")),
          s(:lvasgn, :p,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :called,
            s(:array)),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :p), :singleton_class), :class_eval),
            s(:args),
            s(:block,
              s(:send, nil, :define_method,
                s(:sym, :to_ary)),
              s(:args),
              s(:send,
                s(:lvar, :called), :<<,
                s(:array,
                  s(:sym, :to_ary),
                  s(:lvar, :bug5158))))),
          s(:send,
            s(:array,
              s(:array,
                s(:lvar, :p))), :flatten),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :to_ary),
                s(:lvar, :bug5158))),
            s(:lvar, :called),
            s(:lvar, :bug5158)),
          s(:lvasgn, :called,
            s(:array)),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :p), :singleton_class), :class_eval),
            s(:args),
            s(:block,
              s(:send, nil, :define_method,
                s(:sym, :respond_to?)),
              s(:args,
                s(:restarg, :a)),
              s(:begin,
                s(:send,
                  s(:lvar, :called), :<<,
                  s(:array,
                    s(:sym, :respond_to?),
                    s(:splat,
                      s(:lvar, :a)))),
                s(:false)))),
          s(:send,
            s(:array,
              s(:array,
                s(:lvar, :p))), :flatten),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :respond_to?),
                s(:sym, :to_ary),
                s(:true))),
            s(:lvar, :called),
            s(:lvar, :bug5158)))),
      s(:def, :test_implicit_respond_to_arity_1,
        s(:args),
        s(:begin,
          s(:lvasgn, :p,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :called,
            s(:array)),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :p), :singleton_class), :class_eval),
            s(:args),
            s(:block,
              s(:send, nil, :define_method,
                s(:sym, :respond_to?)),
              s(:args,
                s(:arg, :a)),
              s(:begin,
                s(:send,
                  s(:lvar, :called), :<<,
                  s(:array,
                    s(:sym, :respond_to?),
                    s(:lvar, :a))),
                s(:false)))),
          s(:send,
            s(:array,
              s(:array,
                s(:lvar, :p))), :flatten),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :respond_to?),
                s(:sym, :to_ary))),
            s(:lvar, :called),
            s(:str, "[bug:6000]")))),
      s(:def, :test_implicit_respond_to_arity_3,
        s(:args),
        s(:begin,
          s(:lvasgn, :p,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :called,
            s(:array)),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :p), :singleton_class), :class_eval),
            s(:args),
            s(:block,
              s(:send, nil, :define_method,
                s(:sym, :respond_to?)),
              s(:args,
                s(:arg, :a),
                s(:arg, :b),
                s(:arg, :c)),
              s(:begin,
                s(:send,
                  s(:lvar, :called), :<<,
                  s(:array,
                    s(:sym, :respond_to?),
                    s(:lvar, :a),
                    s(:lvar, :b),
                    s(:lvar, :c))),
                s(:false)))),
          s(:lvasgn, :msg,
            s(:str, "respond_to? must accept 1 or 2 arguments (requires 3)")),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:lvar, :msg),
              s(:str, "[bug:6000]")),
            s(:args),
            s(:send,
              s(:array,
                s(:array,
                  s(:lvar, :p))), :flatten)))),
      s(:def, :test_method_missing_passed_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5731,
            s(:str, "[ruby-dev:44961]")),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:def, :method_missing,
                s(:args,
                  s(:arg, :meth),
                  s(:restarg, :args)),
                s(:yield,
                  s(:lvar, :meth),
                  s(:splat,
                    s(:lvar, :args)))))),
          s(:lvasgn, :a,
            s(:send,
              s(:lvar, :c), :new)),
          s(:lvasgn, :result,
            s(:nil)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :LocalJumpError),
              s(:lvar, :bug5731)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :a), :foo),
              s(:args,
                s(:arg, :x)),
              s(:lvasgn, :result,
                s(:lvar, :x)))),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:lvar, :result),
            s(:lvar, :bug5731)),
          s(:lvasgn, :result,
            s(:nil)),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :a), :enum_for,
              s(:sym, :foo))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :LocalJumpError),
              s(:lvar, :bug5731)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :e), :each),
              s(:args,
                s(:arg, :x)),
              s(:lvasgn, :result,
                s(:lvar, :x)))),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:lvar, :result),
            s(:lvar, :bug5731)),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:begin,
                s(:def, :respond_to_missing?,
                  s(:args,
                    s(:arg, :id),
                    s(:arg, :priv)),
                  s(:true)),
                s(:def, :method_missing,
                  s(:args,
                    s(:arg, :id),
                    s(:restarg, :args),
                    s(:blockarg, :block)),
                  s(:return,
                    s(:send,
                      s(:lvar, :block), :call,
                      s(:sym, :foo),
                      s(:splat,
                        s(:lvar, :args)))))))),
          s(:lvasgn, :foo,
            s(:send,
              s(:lvar, :c), :new)),
          s(:lvasgn, :result,
            s(:nil)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :LocalJumpError),
              s(:lvar, :bug5731)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :foo), :foobar),
              s(:args,
                s(:arg, :x)),
              s(:lvasgn, :result,
                s(:lvar, :x)))),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:lvar, :result),
            s(:lvar, :bug5731)),
          s(:lvasgn, :result,
            s(:nil)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :LocalJumpError),
              s(:lvar, :bug5731)),
            s(:args),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :foo), :enum_for,
                  s(:sym, :foobar)), :each),
              s(:args,
                s(:arg, :x)),
              s(:lvasgn, :result,
                s(:lvar, :x)))),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:lvar, :result),
            s(:lvar, :bug5731)),
          s(:lvasgn, :result,
            s(:nil)),
          s(:lvasgn, :foobar,
            s(:send,
              s(:lvar, :foo), :method,
              s(:sym, :foobar))),
          s(:block,
            s(:send,
              s(:lvar, :foobar), :call),
            s(:args,
              s(:arg, :x)),
            s(:lvasgn, :result,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:lvar, :result),
            s(:lvar, :bug5731)),
          s(:lvasgn, :result,
            s(:nil)),
          s(:lvasgn, :foobar,
            s(:send,
              s(:lvar, :foo), :method,
              s(:sym, :foobar))),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :foobar), :enum_for,
                s(:sym, :call)), :each),
            s(:args,
              s(:arg, :x)),
            s(:lvasgn, :result,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:lvar, :result),
            s(:lvar, :bug5731)))),
      s(:def, :test_send_with_no_arguments,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:send,
            s(:int, 1), :send))),
      s(:def, :test_send_with_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:sym, :ng)),
          s(:block,
            s(:send,
              s(:int, 1), :send,
              s(:sym, :times)),
            s(:args),
            s(:lvasgn, :x,
              s(:sym, :ok))),
          s(:send, nil, :assert_equal,
            s(:sym, :ok),
            s(:lvar, :x)),
          s(:lvasgn, :x,
            s(:sym, :ok)),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :inspect,
            s(:args),
            s(:begin,
              s(:if,
                s(:send, nil, :block_given?),
                s(:yield), nil),
              s(:zsuper))),
          s(:kwbegin,
            s(:rescue,
              s(:block,
                s(:send,
                  s(:nil), :public_send,
                  s(:lvar, :o)),
                s(:args),
                s(:lvasgn, :x,
                  s(:sym, :ng))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :TypeError)), nil, nil), nil)),
          s(:send, nil, :assert_equal,
            s(:sym, :ok),
            s(:lvar, :x)))),
      s(:def, :test_public_send,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new),
                s(:args),
                s(:begin,
                  s(:def, :pub,
                    s(:args),
                    s(:sym, :ok)),
                  s(:def, :invoke,
                    s(:args,
                      s(:arg, :m)),
                    s(:send, nil, :public_send,
                      s(:lvar, :m))),
                  s(:send, nil, :protected),
                  s(:def, :prot,
                    s(:args),
                    s(:sym, :ng)),
                  s(:send, nil, :private),
                  s(:def, :priv,
                    s(:args),
                    s(:sym, :ng)))), :new)),
          s(:send, nil, :assert_equal,
            s(:sym, :ok),
            s(:send,
              s(:lvar, :c), :public_send,
              s(:sym, :pub))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :public_send,
              s(:sym, :priv))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :public_send,
              s(:sym, :prot))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:lvar, :c), :invoke,
              s(:sym, :priv))),
          s(:lvasgn, :bug7499,
            s(:str, "[ruby-core:50489]")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError),
              s(:lvar, :bug7499)),
            s(:args),
            s(:send,
              s(:lvar, :c), :invoke,
              s(:sym, :prot))))),
      s(:def, :test_no_superclass_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug2312,
            s(:str, "[ruby-dev:39581]")),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :NoMethodError)),
              s(:args),
              s(:send,
                s(:send,
                  s(:lvar, :o), :method,
                  s(:sym, :__send__)), :call,
                s(:sym, :never_defined_test_no_superclass_method)))),
          s(:lvasgn, :m1,
            s(:send,
              s(:lvar, :e), :message)),
          s(:send, nil, :assert_no_match,
            s(:regexp,
              s(:str, "no superclass method"),
              s(:regopt)),
            s(:lvar, :m1),
            s(:lvar, :bug2312)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :NoMethodError)),
              s(:args),
              s(:send,
                s(:send,
                  s(:lvar, :o), :method,
                  s(:sym, :__send__)), :call,
                s(:sym, :never_defined_test_no_superclass_method)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :m1),
            s(:send,
              s(:lvar, :e), :message),
            s(:lvar, :bug2312)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :NoMethodError)),
              s(:args),
              s(:send,
                s(:lvar, :o), :never_defined_test_no_superclass_method))),
          s(:send, nil, :assert_equal,
            s(:lvar, :m1),
            s(:send,
              s(:lvar, :e), :message),
            s(:lvar, :bug2312)))),
      s(:def, :test_superclass_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug2312,
            s(:str, "[ruby-dev:39581]")),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-e"),
              s(:str, "module Enumerable;undef min;end; (1..2).min{}")),
            s(:str, ""),
            s(:array),
            s(:regexp,
              s(:str, "no superclass method"),
              s(:regopt)),
            s(:lvar, :bug2312)))),
      s(:def, :test_specific_eval_with_wrong_arguments,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:block,
              s(:send,
                s(:int, 1), :instance_eval,
                s(:str, "foo")),
              s(:args),
              s(:send, nil, :foo))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:int, 1), :instance_eval)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:int, 1), :instance_eval,
              s(:str, ""),
              s(:int, 1),
              s(:int, 1),
              s(:int, 1))))),
      s(:class,
        s(:const, nil, :InstanceExec), nil,
        s(:casgn, nil, :INSTANCE_EXEC,
          s(:int, 123))),
      s(:def, :test_instance_exec,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:block,
              s(:send,
                s(:int, 1), :instance_exec,
                s(:int, 42)),
              s(:args,
                s(:arg, :a)),
              s(:send,
                s(:self), :+,
                s(:lvar, :a)))),
          s(:send, nil, :assert_equal,
            s(:int, 43),
            s(:lvar, :x)),
          s(:lvasgn, :x,
            s(:block,
              s(:send,
                s(:str, "foo"), :instance_exec,
                s(:str, "bar")),
              s(:args,
                s(:arg, :a)),
              s(:send,
                s(:self), :+,
                s(:lvar, :a)))),
          s(:send, nil, :assert_equal,
            s(:str, "foobar"),
            s(:lvar, :x)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :InstanceExec), :new), :instance_exec),
              s(:args),
              s(:const, nil, :INSTANCE_EXEC))))),
      s(:def, :test_extend,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:send,
            s(:int, 1), :extend))),
      s(:def, :test_untrusted,
        s(:args),
        s(:begin,
          s(:lvasgn, :verbose,
            s(:gvar, :$VERBOSE)),
          s(:gvasgn, :$VERBOSE,
            s(:false)),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :obj,
                  s(:send,
                    s(:const, nil, :Object), :new)),
                s(:send, nil, :assert_equal,
                  s(:false),
                  s(:send,
                    s(:lvar, :obj), :untrusted?)),
                s(:send, nil, :assert_equal,
                  s(:false),
                  s(:send,
                    s(:lvar, :obj), :tainted?)),
                s(:send,
                  s(:lvar, :obj), :untrust),
                s(:send, nil, :assert_equal,
                  s(:true),
                  s(:send,
                    s(:lvar, :obj), :untrusted?)),
                s(:send, nil, :assert_equal,
                  s(:true),
                  s(:send,
                    s(:lvar, :obj), :tainted?)),
                s(:send,
                  s(:lvar, :obj), :trust),
                s(:send, nil, :assert_equal,
                  s(:false),
                  s(:send,
                    s(:lvar, :obj), :untrusted?)),
                s(:send, nil, :assert_equal,
                  s(:false),
                  s(:send,
                    s(:lvar, :obj), :tainted?)),
                s(:send,
                  s(:lvar, :obj), :taint),
                s(:send, nil, :assert_equal,
                  s(:true),
                  s(:send,
                    s(:lvar, :obj), :untrusted?)),
                s(:send, nil, :assert_equal,
                  s(:true),
                  s(:send,
                    s(:lvar, :obj), :tainted?)),
                s(:send,
                  s(:lvar, :obj), :untaint),
                s(:send, nil, :assert_equal,
                  s(:false),
                  s(:send,
                    s(:lvar, :obj), :untrusted?)),
                s(:send, nil, :assert_equal,
                  s(:false),
                  s(:send,
                    s(:lvar, :obj), :tainted?))),
              s(:gvasgn, :$VERBOSE,
                s(:lvar, :verbose)))))),
      s(:def, :test_to_s,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send,
            s(:lvar, :x), :taint),
          s(:lvasgn, :s,
            s(:send,
              s(:lvar, :x), :to_s)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :s), :tainted?)),
          s(:lvasgn, :x,
            s(:send, nil, :eval,
              s(:dstr,
                s(:str, "      class ToSあ\n"),
                s(:str, "        new.to_s\n"),
                s(:str, "      end\n")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\bToS\\u{3042}:"),
              s(:regopt)),
            s(:lvar, :x)),
          s(:lvasgn, :name,
            s(:send,
              s(:str, "X"), :freeze)),
          s(:lvasgn, :x,
            s(:send,
              s(:send,
                s(:const, nil, :Object), :new), :taint)),
          s(:block,
            s(:send,
              s(:sclass,
                s(:lvar, :x),
                s(:self)), :class_eval),
            s(:args),
            s(:block,
              s(:send, nil, :define_method,
                s(:sym, :to_s)),
              s(:args),
              s(:lvar, :name))),
          s(:send, nil, :assert_same,
            s(:lvar, :name),
            s(:send,
              s(:lvar, :x), :to_s)),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :name),
            s(:sym, :tainted?)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :name), :taint)),
          s(:send, nil, :assert_equal,
            s(:str, "X"),
            s(:send,
              s(:array,
                s(:lvar, :x)), :join,
              s(:str, ""))),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :name),
            s(:sym, :tainted?)),
          s(:send, nil, :assert_not_predicate,
            s(:send, nil, :eval,
              s(:str, "\"X\".freeze")),
            s(:sym, :tainted?)))),
      s(:def, :test_inspect,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A#<Object:0x\\h+>\\z"),
              s(:regopt)),
            s(:send,
              s(:lvar, :x), :inspect)),
          s(:send,
            s(:lvar, :x), :instance_variable_set,
            s(:sym, :@ivar),
            s(:sym, :value)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A#<Object:0x\\h+ @ivar=:value>\\z"),
              s(:regopt)),
            s(:send,
              s(:lvar, :x), :inspect)),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send,
            s(:lvar, :x), :instance_variable_set,
            s(:sym, :@recur),
            s(:lvar, :x)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A#<Object:0x\\h+ @recur=#<Object:0x\\h+ \\.\\.\\.>>\\z"),
              s(:regopt)),
            s(:send,
              s(:lvar, :x), :inspect)),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send,
            s(:lvar, :x), :instance_variable_set,
            s(:sym, :@foo),
            s(:str, "value")),
          s(:send,
            s(:lvar, :x), :instance_variable_set,
            s(:sym, :@bar),
            s(:int, 42)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A#<Object:0x\\h+ (?:@foo=\"value\", @bar=42|@bar=42, @foo=\"value\")>\\z"),
              s(:regopt)),
            s(:send,
              s(:lvar, :x), :inspect)),
          s(:lvasgn, :feature6130,
            s(:str, "[ruby-core:43238]")),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :x), :to_s,
            s(:args),
            s(:str, "to_s")),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A#<Object:0x\\h+>\\z"),
              s(:regopt)),
            s(:send,
              s(:lvar, :x), :inspect),
            s(:lvar, :feature6130)),
          s(:lvasgn, :x,
            s(:send, nil, :eval,
              s(:dstr,
                s(:str, "      class Inspectあ\n"),
                s(:str, "        new.inspect\n"),
                s(:str, "      end\n")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\bInspect\\u{3042}:"),
              s(:regopt)),
            s(:lvar, :x)),
          s(:lvasgn, :x,
            s(:send, nil, :eval,
              s(:dstr,
                s(:str, "      class Inspectあ\n"),
                s(:str, "        def initialize\n"),
                s(:str, "          @い = 42\n"),
                s(:str, "        end\n"),
                s(:str, "        new\n"),
                s(:str, "      end\n")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\bInspect\\u{3042}:.* @\\u{3044}=42\\b"),
              s(:regopt)),
            s(:send,
              s(:lvar, :x), :inspect)),
          s(:send,
            s(:lvar, :x), :instance_variable_set,
            s(:send,
              s(:str, "@う"), :encode,
              s(:const,
                s(:const, nil, :Encoding), :EUC_JP)),
            s(:int, 6)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "@\\u{3046}=6\\b"),
              s(:regopt)),
            s(:send,
              s(:lvar, :x), :inspect)))),
      s(:def, :test_singleton_class,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :xs,
            s(:sclass,
              s(:lvar, :x),
              s(:self))),
          s(:send, nil, :assert_equal,
            s(:lvar, :xs),
            s(:send,
              s(:lvar, :x), :singleton_class)),
          s(:lvasgn, :y,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :ys,
            s(:send,
              s(:lvar, :y), :singleton_class)),
          s(:send, nil, :assert_equal,
            s(:sclass,
              s(:lvar, :y),
              s(:self)),
            s(:lvar, :ys)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :NilClass),
            s(:send,
              s(:nil), :singleton_class)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :TrueClass),
            s(:send,
              s(:true), :singleton_class)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :FalseClass),
            s(:send,
              s(:false), :singleton_class)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:int, 123), :singleton_class)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:sym, :foo), :singleton_class)))),
      s(:def, :test_redef_method_missing,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5473,
            s(:str, "[ruby-core:40287]")),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "ArgumentError.new(\"bug5473\")"),
                s(:str, "ArgumentError, \"bug5473\""),
                s(:str, "\"bug5473\"")), :each),
            s(:args,
              s(:arg, :code)),
            s(:begin,
              s(:lvasgn, :exc,
                s(:or,
                  s(:send,
                    s(:lvar, :code), :[],
                    s(:regexp,
                      s(:str, "\\A[A-Z]\\w+"),
                      s(:regopt))),
                  s(:str, "RuntimeError"))),
              s(:send, nil, :assert_separately,
                s(:array),
                s(:dstr,
                  s(:str, "      class ::Object\n"),
                  s(:str, "        def method_missing(m, *a, &b)\n"),
                  s(:str, "          raise "),
                  s(:begin,
                    s(:lvar, :code)),
                  s(:str, "\n"),
                  s(:str, "        end\n"),
                  s(:str, "      end\n"),
                  s(:str, "\n"),
                  s(:str, "      assert_raise_with_message("),
                  s(:begin,
                    s(:lvar, :exc)),
                  s(:str, ", \"bug5473\") {1.foo}\n"))))))),
      s(:def, :assert_not_initialize_copy,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:yield)),
          s(:lvasgn, :b,
            s(:yield)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:str, "copy")),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :a), :instance_eval),
              s(:args),
              s(:send, nil, :initialize_copy,
                s(:lvar, :b)))),
          s(:lvasgn, :c,
            s(:send,
              s(:send,
                s(:lvar, :a), :dup), :freeze)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError),
              s(:str, "frozen")),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :c), :instance_eval),
              s(:args),
              s(:send, nil, :initialize_copy,
                s(:lvar, :b)))),
          s(:lvasgn, :d,
            s(:send,
              s(:send,
                s(:lvar, :a), :dup), :trust)),
          s(:array,
            s(:lvar, :a),
            s(:lvar, :b),
            s(:lvar, :c),
            s(:lvar, :d)))),
      s(:def, :test_bad_initialize_copy,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_not_initialize_copy),
            s(:args),
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send, nil, :assert_not_initialize_copy),
            s(:args),
            s(:send,
              s(:array), :to_enum)),
          s(:block,
            s(:send, nil, :assert_not_initialize_copy),
            s(:args),
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Enumerator), :Generator), :new),
              s(:args), nil)),
          s(:block,
            s(:send, nil, :assert_not_initialize_copy),
            s(:args),
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Enumerator), :Yielder), :new),
              s(:args), nil)),
          s(:block,
            s(:send, nil, :assert_not_initialize_copy),
            s(:args),
            s(:send,
              s(:const, nil, :File), :stat,
              s(:str, "(string)"))),
          s(:send,
            s(:block,
              s(:send, nil, :assert_not_initialize_copy),
              s(:args),
              s(:send, nil, :open,
                s(:str, "(string)"))), :each,
            s(:block_pass,
              s(:sym, :close))),
          s(:block,
            s(:send, nil, :assert_not_initialize_copy),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :ARGF), :class), :new)),
          s(:block,
            s(:send, nil, :assert_not_initialize_copy),
            s(:args),
            s(:send,
              s(:const, nil, :Random), :new)),
          s(:block,
            s(:send, nil, :assert_not_initialize_copy),
            s(:args),
            s(:regexp,
              s(:regopt))),
          s(:block,
            s(:send, nil, :assert_not_initialize_copy),
            s(:args),
            s(:send,
              s(:regexp,
                s(:str, ".*"),
                s(:regopt)), :match,
              s(:str, "foo"))),
          s(:lvasgn, :st,
            s(:send,
              s(:const, nil, :Struct), :new,
              s(:sym, :foo))),
          s(:block,
            s(:send, nil, :assert_not_initialize_copy),
            s(:args),
            s(:send,
              s(:lvar, :st), :new)))),
      s(:def, :test_type_error_message,
        s(:args),
        s(:begin,
          s(:lvasgn, :_issue,
            s(:str, "Bug #7539")),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:str, "can't convert Array into Integer")),
            s(:args),
            s(:send, nil, :Integer,
              s(:array,
                s(:int, 42)))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:str, "no implicit conversion of Array into Integer")),
            s(:args),
            s(:send,
              s(:array), :first,
              s(:array,
                s(:int, 42)))))),
      s(:def, :test_copied_ivar_memory_leak,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug10191,
            s(:str, "[ruby-core:64700] [Bug #10191]")),
          s(:send, nil, :assert_no_memory_leak,
            s(:array),
            s(:dstr,
              s(:str, "      def (a = Object.new).set; @v = nil; end\n"),
              s(:str, "      num = 500_000\n")),
            s(:str, "      num.times {a.clone.set}\n"),
            s(:lvar, :bug10191),
            s(:hash,
              s(:pair,
                s(:sym, :timeout),
                s(:int, 60)),
              s(:pair,
                s(:sym, :limit),
                s(:float, 1.8)))))))))
