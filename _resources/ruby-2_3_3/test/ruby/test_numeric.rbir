s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestNumeric),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_coerce,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :a),
              s(:lvasgn, :b)),
            s(:send,
              s(:int, 1), :coerce,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:const, nil, :Fixnum),
            s(:send,
              s(:lvar, :a), :class)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :Fixnum),
            s(:send,
              s(:lvar, :b), :class)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :a),
              s(:lvasgn, :b)),
            s(:send,
              s(:int, 1), :coerce,
              s(:float, 2.0))),
          s(:send, nil, :assert_equal,
            s(:const, nil, :Float),
            s(:send,
              s(:lvar, :a), :class)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :Float),
            s(:send,
              s(:lvar, :b), :class)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Numeric), :new), :-@)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "can't be coerced into "),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:int, 1), :+,
              s(:sym, :foo))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "can't be coerced into "),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:int, 1), :&,
              s(:sym, :foo))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "can't be coerced into "),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:int, 1), :|,
              s(:sym, :foo))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "can't be coerced into "),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:int, 1), :^,
              s(:sym, :foo))),
          s(:block,
            s(:send,
              s(:const, nil, :EnvUtil), :with_default_external,
              s(:const,
                s(:const, nil, :Encoding), :UTF_8)),
            s(:args),
            s(:begin,
              s(:block,
                s(:send, nil, :assert_raise_with_message,
                  s(:const, nil, :TypeError),
                  s(:regexp,
                    s(:str, ":\\u{3042}"),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:int, 1), :+,
                  s(:sym, :あ))),
              s(:block,
                s(:send, nil, :assert_raise_with_message,
                  s(:const, nil, :TypeError),
                  s(:regexp,
                    s(:str, ":\\u{3042}"),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:int, 1), :&,
                  s(:sym, :あ))),
              s(:block,
                s(:send, nil, :assert_raise_with_message,
                  s(:const, nil, :TypeError),
                  s(:regexp,
                    s(:str, ":\\u{3042}"),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:int, 1), :|,
                  s(:sym, :あ))),
              s(:block,
                s(:send, nil, :assert_raise_with_message,
                  s(:const, nil, :TypeError),
                  s(:regexp,
                    s(:str, ":\\u{3042}"),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:int, 1), :^,
                  s(:sym, :あ))))),
          s(:block,
            s(:send,
              s(:const, nil, :EnvUtil), :with_default_external,
              s(:const,
                s(:const, nil, :Encoding), :US_ASCII)),
            s(:args),
            s(:begin,
              s(:block,
                s(:send, nil, :assert_raise_with_message,
                  s(:const, nil, :TypeError),
                  s(:regexp,
                    s(:str, ":\"\\\\u3042\""),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:int, 1), :+,
                  s(:sym, :あ))),
              s(:block,
                s(:send, nil, :assert_raise_with_message,
                  s(:const, nil, :TypeError),
                  s(:regexp,
                    s(:str, ":\"\\\\u3042\""),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:int, 1), :&,
                  s(:sym, :あ))),
              s(:block,
                s(:send, nil, :assert_raise_with_message,
                  s(:const, nil, :TypeError),
                  s(:regexp,
                    s(:str, ":\"\\\\u3042\""),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:int, 1), :|,
                  s(:sym, :あ))),
              s(:block,
                s(:send, nil, :assert_raise_with_message,
                  s(:const, nil, :TypeError),
                  s(:regexp,
                    s(:str, ":\"\\\\u3042\""),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:int, 1), :^,
                  s(:sym, :あ))))),
          s(:lvasgn, :bug10711,
            s(:str, "[ruby-core:67405] [Bug #10711]")),
          s(:lvasgn, :exp,
            s(:str, "1.2 can't be coerced into Fixnum")),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:lvar, :exp),
              s(:lvar, :bug10711)),
            s(:args),
            s(:send,
              s(:int, 1), :&,
              s(:float, 1.2))))),
      s(:def, :test_dummynumeric,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const, nil, :Numeric)),
                s(:args),
                s(:def, :coerce,
                  s(:args,
                    s(:arg, :x)),
                  s(:nil))), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :a), :-@)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:int, 1), :<=>,
              s(:lvar, :a))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:int, 1), :<=,
              s(:lvar, :a))),
          s(:lvasgn, :a,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const, nil, :Numeric)),
                s(:args),
                s(:def, :coerce,
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:int, 1), :coerce,
                    s(:lvar, :x)))), :new)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:int, 1), :+,
              s(:lvar, :a))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:int, 1), :<=>,
              s(:lvar, :a))),
          s(:send, nil, :assert_operator,
            s(:int, 1),
            s(:sym, :<=),
            s(:lvar, :a)),
          s(:lvasgn, :a,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const, nil, :Numeric)),
                s(:args),
                s(:def, :coerce,
                  s(:args,
                    s(:arg, :x)),
                  s(:array,
                    s(:lvar, :x),
                    s(:int, 1)))), :new)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :a), :-@)),
          s(:lvasgn, :bug7688,
            s(:str, "[ruby-core:51389] [Bug #7688]")),
          s(:lvasgn, :a,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const, nil, :Numeric)),
                s(:args),
                s(:def, :coerce,
                  s(:args,
                    s(:arg, :x)),
                  s(:send, nil, :raise,
                    s(:const, nil, :StandardError)))), :new)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "can't be coerced into "),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:int, 1), :+,
              s(:lvar, :a))),
          s(:lvasgn, :warn,
            s(:regexp,
              s(:str, "will no more rescue exceptions of #coerce.+ in the next release"),
              s(:regopt, :m))),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:lvar, :warn),
              s(:lvar, :bug7688)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:int, 1), :<,
                s(:lvar, :a)))),
          s(:lvasgn, :a,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const, nil, :Numeric)),
                s(:args),
                s(:def, :coerce,
                  s(:args,
                    s(:arg, :x)),
                  s(:sym, :bad_return_value))), :new)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:str, "coerce must return [x, y]")),
            s(:args),
            s(:send,
              s(:int, 1), :+,
              s(:lvar, :a))),
          s(:lvasgn, :warn,
            s(:regexp,
              s(:str, "Bad return value for #coerce.+next release will raise an error"),
              s(:regopt, :m))),
          s(:block,
            s(:send, nil, :assert_warn,
              s(:lvar, :warn),
              s(:lvar, :bug7688)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:int, 1), :<,
                s(:lvar, :a)))))),
      s(:def, :test_singleton_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Numeric), :new)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "foo"),
                s(:regopt))),
            s(:args),
            s(:defs,
              s(:lvar, :a), :foo,
              s(:args), nil)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "\\u3042"),
                s(:regopt))),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "def a.あ; end"))))),
      s(:def, :test_dup,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Numeric), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :a), :dup)),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Module), :new),
              s(:args),
              s(:break,
                s(:send, nil, :eval,
                  s(:str, "class Cあ < Numeric; self; end"))))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "C\\u3042"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:send,
                s(:lvar, :c), :new), :dup)))),
      s(:def, :test_quo,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Numeric), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :a), :quo,
              s(:int, 1))))),
      s(:def, :test_quo_ruby_core_41575,
        s(:args),
        s(:begin,
          s(:lvasgn, :rat,
            s(:send,
              s(:int, 84), :quo,
              s(:int, 1))),
          s(:lvasgn, :x,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const, nil, :Numeric)),
                s(:args),
                s(:block,
                  s(:send, nil, :define_method,
                    s(:sym, :to_r)),
                  s(:args),
                  s(:lvar, :rat))), :new)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 2), :quo,
              s(:int, 1)),
            s(:send,
              s(:lvar, :x), :quo,
              s(:int, 42)),
            s(:str, "[ruby-core:41575]")))),
      s(:def, :test_divmod,
        s(:args),
        s(:send, nil, :assert_kind_of,
          s(:const, nil, :Integer),
          s(:send,
            s(:send,
              s(:int, 11), :divmod,
              s(:float, 3.5)), :first),
          s(:str, "[ruby-dev:34006]"))),
      s(:def, :test_real_p,
        s(:args),
        s(:send, nil, :assert_predicate,
          s(:send,
            s(:const, nil, :Numeric), :new),
          s(:sym, :real?))),
      s(:def, :test_integer_p,
        s(:args),
        s(:send, nil, :assert_not_predicate,
          s(:send,
            s(:const, nil, :Numeric), :new),
          s(:sym, :integer?))),
      s(:def, :test_abs,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const, nil, :Numeric)),
                s(:args),
                s(:begin,
                  s(:def, :-@,
                    s(:args),
                    s(:sym, :ok)),
                  s(:def, :<,
                    s(:args,
                      s(:arg, :x)),
                    s(:true)))), :new)),
          s(:send, nil, :assert_equal,
            s(:sym, :ok),
            s(:send,
              s(:lvar, :a), :abs)),
          s(:lvasgn, :a,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const, nil, :Numeric)),
                s(:args),
                s(:def, :<,
                  s(:args,
                    s(:arg, :x)),
                  s(:false))), :new)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a),
            s(:send,
              s(:lvar, :a), :abs)))),
      s(:def, :test_zero_p,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const, nil, :Numeric)),
                s(:args),
                s(:def, :==,
                  s(:args,
                    s(:arg, :x)),
                  s(:true))), :new)),
          s(:send, nil, :assert_predicate,
            s(:lvar, :a),
            s(:sym, :zero?)))),
      s(:def, :test_positive_p,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const, nil, :Numeric)),
                s(:args),
                s(:def, :>,
                  s(:args,
                    s(:arg, :x)),
                  s(:true))), :new)),
          s(:send, nil, :assert_predicate,
            s(:lvar, :a),
            s(:sym, :positive?)),
          s(:lvasgn, :a,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const, nil, :Numeric)),
                s(:args),
                s(:def, :>,
                  s(:args,
                    s(:arg, :x)),
                  s(:false))), :new)),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :a),
            s(:sym, :positive?)))),
      s(:def, :test_negative_p,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const, nil, :Numeric)),
                s(:args),
                s(:def, :<,
                  s(:args,
                    s(:arg, :x)),
                  s(:true))), :new)),
          s(:send, nil, :assert_predicate,
            s(:lvar, :a),
            s(:sym, :negative?)),
          s(:lvasgn, :a,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const, nil, :Numeric)),
                s(:args),
                s(:def, :<,
                  s(:args,
                    s(:arg, :x)),
                  s(:false))), :new)),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :a),
            s(:sym, :negative?)))),
      s(:def, :test_to_int,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const, nil, :Numeric)),
                s(:args),
                s(:def, :to_i,
                  s(:args),
                  s(:sym, :ok))), :new)),
          s(:send, nil, :assert_equal,
            s(:sym, :ok),
            s(:send,
              s(:lvar, :a), :to_int)))),
      s(:def, :test_cmp,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Numeric), :new)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :a), :<=>,
              s(:lvar, :a))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :a), :<=>,
              s(:sym, :foo))))),
      s(:def, :test_floor_ceil_round_truncate,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const, nil, :Numeric)),
                s(:args),
                s(:def, :to_f,
                  s(:args),
                  s(:float, 1.5))), :new)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :a), :floor)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :a), :ceil)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :a), :round)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :a), :truncate)),
          s(:lvasgn, :a,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const, nil, :Numeric)),
                s(:args),
                s(:def, :to_f,
                  s(:args),
                  s(:float, 1.4))), :new)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :a), :floor)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :a), :ceil)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :a), :round)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :a), :truncate)),
          s(:lvasgn, :a,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const, nil, :Numeric)),
                s(:args),
                s(:def, :to_f,
                  s(:args),
                  s(:float, -1.5))), :new)),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:lvar, :a), :floor)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :a), :ceil)),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:lvar, :a), :round)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :a), :truncate)))),
      s(:def, :assert_step,
        s(:args,
          s(:arg, :expected),
          s(:mlhs,
            s(:arg, :from),
            s(:restarg, :args)),
          s(:kwoptarg, :inf,
            s(:false))),
        s(:begin,
          s(:lvasgn, :enum,
            s(:send,
              s(:lvar, :from), :step,
              s(:splat,
                s(:lvar, :args)))),
          s(:lvasgn, :size,
            s(:send,
              s(:lvar, :enum), :size)),
          s(:lvasgn, :xsize,
            s(:send,
              s(:lvar, :expected), :size)),
          s(:if,
            s(:lvar, :inf),
            s(:begin,
              s(:send, nil, :assert_send,
                s(:array,
                  s(:lvar, :size),
                  s(:sym, :infinite?)),
                s(:str, "step size: +infinity")),
              s(:send, nil, :assert_send,
                s(:array,
                  s(:lvar, :size),
                  s(:sym, :>),
                  s(:int, 0)),
                s(:str, "step size: +infinity")),
              s(:lvasgn, :a,
                s(:array)),
              s(:block,
                s(:send,
                  s(:lvar, :from), :step,
                  s(:splat,
                    s(:lvar, :args))),
                s(:args,
                  s(:arg, :x)),
                s(:begin,
                  s(:send,
                    s(:lvar, :a), :<<,
                    s(:lvar, :x)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :a), :size), :==,
                      s(:lvar, :xsize)),
                    s(:break), nil))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:lvar, :a),
                s(:str, "step")),
              s(:lvasgn, :a,
                s(:array)),
              s(:block,
                s(:send,
                  s(:lvar, :enum), :each),
                s(:args,
                  s(:arg, :x)),
                s(:begin,
                  s(:send,
                    s(:lvar, :a), :<<,
                    s(:lvar, :x)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :a), :size), :==,
                      s(:lvar, :xsize)),
                    s(:break), nil))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:lvar, :a),
                s(:str, "step enumerator"))),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :expected), :size),
                s(:lvar, :size),
                s(:str, "step size")),
              s(:lvasgn, :a,
                s(:array)),
              s(:block,
                s(:send,
                  s(:lvar, :from), :step,
                  s(:splat,
                    s(:lvar, :args))),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :a), :<<,
                  s(:lvar, :x))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:lvar, :a),
                s(:str, "step")),
              s(:lvasgn, :a,
                s(:array)),
              s(:block,
                s(:send,
                  s(:lvar, :enum), :each),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :a), :<<,
                  s(:lvar, :x))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:lvar, :a),
                s(:str, "step enumerator")))))),
      s(:def, :test_step,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :i),
              s(:lvasgn, :bignum)),
            s(:array,
              s(:int, 32),
              s(:send,
                s(:int, 1), :<<,
                s(:int, 30)))),
          s(:until,
            s(:send,
              s(:lvar, :bignum), :is_a?,
              s(:const, nil, :Bignum)),
            s(:op_asgn,
              s(:lvasgn, :bignum), :<<,
              s(:send,
                s(:begin,
                  s(:op_asgn,
                    s(:lvasgn, :i), :<<,
                    s(:int, 1))), :-,
                s(:int, 32)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:block,
              s(:send,
                s(:int, 1), :step,
                s(:int, 10),
                s(:int, 1),
                s(:int, 0)),
              s(:args), nil)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send,
                s(:int, 1), :step,
                s(:int, 10),
                s(:int, 1),
                s(:int, 0)), :size)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:block,
              s(:send,
                s(:int, 1), :step,
                s(:int, 10),
                s(:int, 0)),
              s(:args), nil)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send,
                s(:int, 1), :step,
                s(:int, 10),
                s(:int, 0)), :size)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:block,
              s(:send,
                s(:int, 1), :step,
                s(:int, 10),
                s(:str, "1")),
              s(:args), nil)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send,
                s(:int, 1), :step,
                s(:int, 10),
                s(:str, "1")), :size)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:int, 1), :step,
                s(:int, 10),
                s(:nil)),
              s(:args), nil)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:send,
                s(:int, 1), :step,
                s(:int, 10),
                s(:nil)), :size)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:int, 1), :step,
              s(:hash,
                s(:pair,
                  s(:sym, :by),
                  s(:int, 0)),
                s(:pair,
                  s(:sym, :to),
                  s(:nil))))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:send,
                s(:int, 1), :step,
                s(:hash,
                  s(:pair,
                    s(:sym, :by),
                    s(:int, 0)),
                  s(:pair,
                    s(:sym, :to),
                    s(:nil)))), :size)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:int, 1), :step,
              s(:hash,
                s(:pair,
                  s(:sym, :by),
                  s(:int, 0))))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:send,
                s(:int, 1), :step,
                s(:hash,
                  s(:pair,
                    s(:sym, :by),
                    s(:int, 0)))), :size)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:int, 1), :step,
              s(:hash,
                s(:pair,
                  s(:sym, :by),
                  s(:nil))))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:send,
                s(:int, 1), :step,
                s(:hash,
                  s(:pair,
                    s(:sym, :by),
                    s(:nil)))), :size)),
          s(:lvasgn, :bug9811,
            s(:str, "[ruby-dev:48177] [Bug #9811]")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError),
              s(:lvar, :bug9811)),
            s(:args),
            s(:block,
              s(:send,
                s(:int, 1), :step,
                s(:int, 10),
                s(:hash,
                  s(:pair,
                    s(:sym, :foo),
                    s(:nil)))),
              s(:args), nil)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError),
              s(:lvar, :bug9811)),
            s(:args),
            s(:send,
              s(:send,
                s(:int, 1), :step,
                s(:int, 10),
                s(:hash,
                  s(:pair,
                    s(:sym, :foo),
                    s(:nil)))), :size)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError),
              s(:lvar, :bug9811)),
            s(:args),
            s(:block,
              s(:send,
                s(:int, 1), :step,
                s(:int, 10),
                s(:hash,
                  s(:pair,
                    s(:sym, :to),
                    s(:int, 11)))),
              s(:args), nil)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError),
              s(:lvar, :bug9811)),
            s(:args),
            s(:send,
              s(:send,
                s(:int, 1), :step,
                s(:int, 10),
                s(:hash,
                  s(:pair,
                    s(:sym, :to),
                    s(:int, 11)))), :size)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError),
              s(:lvar, :bug9811)),
            s(:args),
            s(:block,
              s(:send,
                s(:int, 1), :step,
                s(:int, 10),
                s(:int, 1),
                s(:hash,
                  s(:pair,
                    s(:sym, :by),
                    s(:int, 11)))),
              s(:args), nil)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError),
              s(:lvar, :bug9811)),
            s(:args),
            s(:send,
              s(:send,
                s(:int, 1), :step,
                s(:int, 10),
                s(:int, 1),
                s(:hash,
                  s(:pair,
                    s(:sym, :by),
                    s(:int, 11)))), :size)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :bignum), :*,
                s(:int, 2)), :+,
              s(:int, 1)),
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:lvar, :bignum), :-@)), :step,
                s(:lvar, :bignum),
                s(:int, 1)), :size)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :bignum), :*,
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:lvar, :bignum), :-@)), :step,
                s(:send,
                  s(:lvar, :bignum), :-,
                  s(:int, 1)),
                s(:int, 1)), :size)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 10), :+,
              s(:int, 1)),
            s(:send,
              s(:send,
                s(:begin,
                  s(:float, 0.0)), :step,
                s(:float, 10.0),
                s(:float, 1.0)), :size)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :i),
              s(:lvasgn, :bigflo)),
            s(:array,
              s(:int, 1),
              s(:send,
                s(:lvar, :bignum), :to_f))),
          s(:until,
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:lvar, :bigflo), :-,
                    s(:lvar, :i))), :to_i), :<,
              s(:lvar, :bignum)),
            s(:op_asgn,
              s(:lvasgn, :i), :<<,
              s(:int, 1))),
          s(:op_asgn,
            s(:lvasgn, :bigflo), :-,
            s(:send,
              s(:lvar, :i), :>>,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :bigflo), :to_i),
            s(:send,
              s(:send,
                s(:begin,
                  s(:float, 0.0)), :step,
                s(:send,
                  s(:lvar, :bigflo), :-,
                  s(:float, 1.0)),
                s(:float, 1.0)), :size)),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:send,
                s(:begin,
                  s(:float, 0.0)), :step,
                s(:send,
                  s(:lvar, :bignum), :to_f),
                s(:float, 1.0)), :size),
            s(:sym, :>=),
            s(:lvar, :bignum)),
          s(:send, nil, :assert_step,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 5),
              s(:int, 6),
              s(:int, 7),
              s(:int, 8),
              s(:int, 9),
              s(:int, 10)),
            s(:array,
              s(:int, 1),
              s(:int, 10))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 5),
              s(:int, 6),
              s(:int, 7),
              s(:int, 8),
              s(:int, 9),
              s(:int, 10)),
            s(:array,
              s(:int, 1),
              s(:hash,
                s(:pair,
                  s(:sym, :to),
                  s(:int, 10))))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 5),
              s(:int, 6),
              s(:int, 7),
              s(:int, 8),
              s(:int, 9),
              s(:int, 10)),
            s(:array,
              s(:int, 1),
              s(:hash,
                s(:pair,
                  s(:sym, :to),
                  s(:int, 10)),
                s(:pair,
                  s(:sym, :by),
                  s(:nil))))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:int, 1),
              s(:int, 3),
              s(:int, 5),
              s(:int, 7),
              s(:int, 9)),
            s(:array,
              s(:int, 1),
              s(:int, 10),
              s(:int, 2))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:int, 1),
              s(:int, 3),
              s(:int, 5),
              s(:int, 7),
              s(:int, 9)),
            s(:array,
              s(:int, 1),
              s(:hash,
                s(:pair,
                  s(:sym, :to),
                  s(:int, 10)),
                s(:pair,
                  s(:sym, :by),
                  s(:int, 2))))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:int, 10),
              s(:int, 8),
              s(:int, 6),
              s(:int, 4),
              s(:int, 2)),
            s(:array,
              s(:int, 10),
              s(:int, 1),
              s(:int, -2))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:int, 10),
              s(:int, 8),
              s(:int, 6),
              s(:int, 4),
              s(:int, 2)),
            s(:array,
              s(:int, 10),
              s(:hash,
                s(:pair,
                  s(:sym, :to),
                  s(:int, 1)),
                s(:pair,
                  s(:sym, :by),
                  s(:int, -2))))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:float, 1.0),
              s(:float, 3.0),
              s(:float, 5.0),
              s(:float, 7.0),
              s(:float, 9.0)),
            s(:array,
              s(:float, 1.0),
              s(:float, 10.0),
              s(:float, 2.0))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:float, 1.0),
              s(:float, 3.0),
              s(:float, 5.0),
              s(:float, 7.0),
              s(:float, 9.0)),
            s(:array,
              s(:float, 1.0),
              s(:hash,
                s(:pair,
                  s(:sym, :to),
                  s(:float, 10.0)),
                s(:pair,
                  s(:sym, :by),
                  s(:float, 2.0))))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:int, 1)),
            s(:array,
              s(:int, 1),
              s(:int, 10),
              s(:lvar, :bignum))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:int, 1)),
            s(:array,
              s(:int, 1),
              s(:hash,
                s(:pair,
                  s(:sym, :to),
                  s(:int, 10)),
                s(:pair,
                  s(:sym, :by),
                  s(:lvar, :bignum))))),
          s(:send, nil, :assert_step,
            s(:array),
            s(:array,
              s(:int, 2),
              s(:int, 1),
              s(:int, 3))),
          s(:send, nil, :assert_step,
            s(:array),
            s(:array,
              s(:int, -2),
              s(:int, -1),
              s(:int, -3))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:int, 3),
              s(:int, 3),
              s(:int, 3),
              s(:int, 3)),
            s(:array,
              s(:int, 3),
              s(:hash,
                s(:pair,
                  s(:sym, :by),
                  s(:int, 0)))),
            s(:hash,
              s(:pair,
                s(:sym, :inf),
                s(:true)))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:int, 3),
              s(:int, 3),
              s(:int, 3),
              s(:int, 3)),
            s(:array,
              s(:int, 3),
              s(:hash,
                s(:pair,
                  s(:sym, :by),
                  s(:int, 0)),
                s(:pair,
                  s(:sym, :to),
                  s(:int, 42)))),
            s(:hash,
              s(:pair,
                s(:sym, :inf),
                s(:true)))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:int, 10)),
            s(:array,
              s(:int, 10),
              s(:int, 1),
              s(:send,
                s(:lvar, :bignum), :-@))),
          s(:send, nil, :assert_step,
            s(:array),
            s(:array,
              s(:int, 1),
              s(:int, 0),
              s(:const,
                s(:const, nil, :Float), :INFINITY))),
          s(:send, nil, :assert_step,
            s(:array),
            s(:array,
              s(:int, 0),
              s(:int, 1),
              s(:send,
                s(:const,
                  s(:const, nil, :Float), :INFINITY), :-@))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:int, 10)),
            s(:array,
              s(:int, 10),
              s(:hash,
                s(:pair,
                  s(:sym, :to),
                  s(:int, 1)),
                s(:pair,
                  s(:sym, :by),
                  s(:send,
                    s(:lvar, :bignum), :-@))))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:int, 10),
              s(:int, 11),
              s(:int, 12),
              s(:int, 13)),
            s(:array,
              s(:int, 10)),
            s(:hash,
              s(:pair,
                s(:sym, :inf),
                s(:true)))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:int, 10),
              s(:int, 9),
              s(:int, 8),
              s(:int, 7)),
            s(:array,
              s(:int, 10),
              s(:hash,
                s(:pair,
                  s(:sym, :by),
                  s(:int, -1)))),
            s(:hash,
              s(:pair,
                s(:sym, :inf),
                s(:true)))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:int, 10),
              s(:int, 9),
              s(:int, 8),
              s(:int, 7)),
            s(:array,
              s(:int, 10),
              s(:hash,
                s(:pair,
                  s(:sym, :by),
                  s(:int, -1)),
                s(:pair,
                  s(:sym, :to),
                  s(:nil)))),
            s(:hash,
              s(:pair,
                s(:sym, :inf),
                s(:true)))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:int, 42),
              s(:int, 42),
              s(:int, 42),
              s(:int, 42)),
            s(:array,
              s(:int, 42),
              s(:hash,
                s(:pair,
                  s(:sym, :by),
                  s(:int, 0)),
                s(:pair,
                  s(:sym, :to),
                  s(:send,
                    s(:const,
                      s(:const, nil, :Float), :INFINITY), :-@)))),
            s(:hash,
              s(:pair,
                s(:sym, :inf),
                s(:true)))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:int, 42),
              s(:int, 42),
              s(:int, 42),
              s(:int, 42)),
            s(:array,
              s(:int, 42),
              s(:hash,
                s(:pair,
                  s(:sym, :by),
                  s(:int, 0)),
                s(:pair,
                  s(:sym, :to),
                  s(:float, 42.5)))),
            s(:hash,
              s(:pair,
                s(:sym, :inf),
                s(:true)))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:float, 4.2),
              s(:float, 4.2),
              s(:float, 4.2),
              s(:float, 4.2)),
            s(:array,
              s(:float, 4.2),
              s(:hash,
                s(:pair,
                  s(:sym, :by),
                  s(:float, 0.0)))),
            s(:hash,
              s(:pair,
                s(:sym, :inf),
                s(:true)))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:float, 4.2),
              s(:float, 4.2),
              s(:float, 4.2),
              s(:float, 4.2)),
            s(:array,
              s(:float, 4.2),
              s(:hash,
                s(:pair,
                  s(:sym, :by),
                  s(:float, -0.0)))),
            s(:hash,
              s(:pair,
                s(:sym, :inf),
                s(:true)))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:float, 42.0),
              s(:float, 42.0),
              s(:float, 42.0),
              s(:float, 42.0)),
            s(:array,
              s(:int, 42),
              s(:hash,
                s(:pair,
                  s(:sym, :by),
                  s(:float, 0.0)),
                s(:pair,
                  s(:sym, :to),
                  s(:int, 44)))),
            s(:hash,
              s(:pair,
                s(:sym, :inf),
                s(:true)))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:float, 42.0),
              s(:float, 42.0),
              s(:float, 42.0),
              s(:float, 42.0)),
            s(:array,
              s(:int, 42),
              s(:hash,
                s(:pair,
                  s(:sym, :by),
                  s(:float, 0.0)),
                s(:pair,
                  s(:sym, :to),
                  s(:int, 0)))),
            s(:hash,
              s(:pair,
                s(:sym, :inf),
                s(:true)))),
          s(:send, nil, :assert_step,
            s(:array,
              s(:float, 42.0),
              s(:float, 42.0),
              s(:float, 42.0),
              s(:float, 42.0)),
            s(:array,
              s(:int, 42),
              s(:hash,
                s(:pair,
                  s(:sym, :by),
                  s(:float, -0.0)),
                s(:pair,
                  s(:sym, :to),
                  s(:int, 44)))),
            s(:hash,
              s(:pair,
                s(:sym, :inf),
                s(:true)))),
          s(:send, nil, :assert_step,
            s(:send,
              s(:array,
                s(:lvar, :bignum)), :*,
              s(:int, 4)),
            s(:array,
              s(:lvar, :bignum),
              s(:hash,
                s(:pair,
                  s(:sym, :by),
                  s(:int, 0)))),
            s(:hash,
              s(:pair,
                s(:sym, :inf),
                s(:true)))),
          s(:send, nil, :assert_step,
            s(:send,
              s(:array,
                s(:lvar, :bignum)), :*,
              s(:int, 4)),
            s(:array,
              s(:lvar, :bignum),
              s(:hash,
                s(:pair,
                  s(:sym, :by),
                  s(:float, 0.0)))),
            s(:hash,
              s(:pair,
                s(:sym, :inf),
                s(:true)))),
          s(:send, nil, :assert_step,
            s(:send,
              s(:array,
                s(:lvar, :bignum)), :*,
              s(:int, 4)),
            s(:array,
              s(:lvar, :bignum),
              s(:hash,
                s(:pair,
                  s(:sym, :by),
                  s(:int, 0)),
                s(:pair,
                  s(:sym, :to),
                  s(:send,
                    s(:lvar, :bignum), :+,
                    s(:int, 1))))),
            s(:hash,
              s(:pair,
                s(:sym, :inf),
                s(:true)))),
          s(:send, nil, :assert_step,
            s(:send,
              s(:array,
                s(:lvar, :bignum)), :*,
              s(:int, 4)),
            s(:array,
              s(:lvar, :bignum),
              s(:hash,
                s(:pair,
                  s(:sym, :by),
                  s(:int, 0)),
                s(:pair,
                  s(:sym, :to),
                  s(:int, 0)))),
            s(:hash,
              s(:pair,
                s(:sym, :inf),
                s(:true)))))),
      s(:def, :test_num2long,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:int, 1), :&,
              s(:nil))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:int, 1), :&,
              s(:float, 1.0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:int, 1), :&,
              s(:float, 2147483648.0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:int, 1), :&,
              s(:float, 9.223372036854778e+18))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :to_int,
            s(:args),
            s(:int, 1)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:int, 1), :&,
                s(:lvar, :o)))))),
      s(:def, :test_eql,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:float, 1.0)),
          s(:send, nil, :assert_not_operator,
            s(:int, 1),
            s(:sym, :eql?),
            s(:float, 1.0)),
          s(:send, nil, :assert_not_operator,
            s(:int, 1),
            s(:sym, :eql?),
            s(:int, 2)))))))
