s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestEnumerator),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@obj,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:sclass,
            s(:ivar, :@obj),
            s(:begin,
              s(:send, nil, :include,
                s(:const, nil, :Enumerable)),
              s(:def, :foo,
                s(:args,
                  s(:restarg, :a)),
                s(:block,
                  s(:send,
                    s(:lvar, :a), :each),
                  s(:args,
                    s(:arg, :x)),
                  s(:yield,
                    s(:lvar, :x)))))),
          s(:ivasgn, :@sized,
            s(:send,
              s(:ivar, :@obj), :clone)),
          s(:defs,
            s(:ivar, :@sized), :size,
            s(:args),
            s(:int, 42)))),
      s(:def, :enum_test,
        s(:args,
          s(:arg, :obj)),
        s(:send,
          s(:block,
            s(:send,
              s(:lvar, :obj), :map),
            s(:args,
              s(:arg, :e)),
            s(:lvar, :e)), :sort)),
      s(:def, :test_iterators,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:int, 1),
              s(:int, 2)),
            s(:send, nil, :enum_test,
              s(:send,
                s(:int, 3), :times))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :x),
              s(:sym, :y),
              s(:sym, :z)),
            s(:send, nil, :enum_test,
              s(:send,
                s(:array,
                  s(:sym, :x),
                  s(:sym, :y),
                  s(:sym, :z)), :each))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :x),
                s(:int, 1)),
              s(:array,
                s(:sym, :y),
                s(:int, 2))),
            s(:send, nil, :enum_test,
              s(:send,
                s(:hash,
                  s(:pair,
                    s(:sym, :x),
                    s(:int, 1)),
                  s(:pair,
                    s(:sym, :y),
                    s(:int, 2))), :each))))),
      s(:def, :test_next,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:send,
              s(:int, 3), :times)),
          s(:block,
            s(:send,
              s(:int, 3), :times),
            s(:args,
              s(:arg, :i)),
            s(:send, nil, :assert_equal,
              s(:lvar, :i),
              s(:send,
                s(:lvar, :e), :next))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :StopIteration)),
            s(:args),
            s(:send,
              s(:lvar, :e), :next)))),
      s(:def, :test_loop,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:send,
              s(:int, 3), :times)),
          s(:lvasgn, :i,
            s(:int, 0)),
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:lvar, :i),
                s(:send,
                  s(:lvar, :e), :next)),
              s(:op_asgn,
                s(:lvasgn, :i), :+,
                s(:int, 1)))))),
      s(:def, :test_loop_return_value,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:block,
              s(:send, nil, :loop),
              s(:args),
              s(:break))),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:block,
              s(:send, nil, :loop),
              s(:args),
              s(:break,
                s(:int, 42)))),
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:const, nil, :Enumerator), :new),
              s(:args,
                s(:arg, :y)),
              s(:begin,
                s(:send,
                  s(:lvar, :y), :<<,
                  s(:int, 1)),
                s(:send,
                  s(:lvar, :y), :<<,
                  s(:int, 2)),
                s(:sym, :stopped)))),
          s(:send, nil, :assert_equal,
            s(:sym, :stopped),
            s(:block,
              s(:send, nil, :loop),
              s(:args),
              s(:while,
                s(:true),
                s(:send,
                  s(:lvar, :e), :next)))))),
      s(:def, :test_nested_iteration,
        s(:args),
        s(:begin,
          s(:defs,
            s(:lvasgn, :o,
              s(:send,
                s(:const, nil, :Object), :new)), :each,
            s(:args),
            s(:begin,
              s(:yield,
                s(:sym, :ok1)),
              s(:yield,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:sym, :ok2),
                      s(:sym, :x)), :each), :next)))),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :o), :to_enum)),
          s(:send, nil, :assert_equal,
            s(:sym, :ok1),
            s(:send,
              s(:lvar, :e), :next)),
          s(:send, nil, :assert_equal,
            s(:sym, :ok2),
            s(:send,
              s(:lvar, :e), :next)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :StopIteration)),
            s(:args),
            s(:send,
              s(:lvar, :e), :next)))),
      s(:def, :test_initialize,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :to_enum,
                s(:sym, :foo),
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)), :to_a)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :_),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3)),
                s(:send,
                  s(:send,
                    s(:const, nil, :Enumerator), :new,
                    s(:ivar, :@obj),
                    s(:sym, :foo),
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3)), :to_a)))),
          s(:send, nil, :assert_match,
            s(:str, "Enumerator.new without a block is deprecated"),
            s(:lvar, :err)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Enumerator), :new),
                s(:args,
                  s(:arg, :y)),
                s(:begin,
                  s(:lvasgn, :i,
                    s(:int, 0)),
                  s(:block,
                    s(:send, nil, :loop),
                    s(:args),
                    s(:send,
                      s(:lvar, :y), :<<,
                      s(:begin,
                        s(:op_asgn,
                          s(:lvasgn, :i), :+,
                          s(:int, 1))))))), :take,
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :Enumerator), :new)),
          s(:lvasgn, :enum,
            s(:send,
              s(:ivar, :@obj), :to_enum)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :enum), :each),
              s(:args), nil)),
          s(:send,
            s(:lvar, :enum), :freeze),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:lvar, :enum), :__send__,
                s(:sym, :initialize),
                s(:ivar, :@obj),
                s(:sym, :foo)))))),
      s(:def, :test_initialize_copy,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@obj), :to_enum,
                  s(:sym, :foo),
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3)), :dup), :to_a)),
          s(:lvasgn, :e,
            s(:send,
              s(:ivar, :@obj), :to_enum,
              s(:sym, :foo),
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :e), :next))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :e), :dup)),
          s(:lvasgn, :e,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Enumerator), :new),
                s(:args,
                  s(:arg, :y)),
                s(:begin,
                  s(:lvasgn, :i,
                    s(:int, 0)),
                  s(:block,
                    s(:send, nil, :loop),
                    s(:args),
                    s(:send,
                      s(:lvar, :y), :<<,
                      s(:begin,
                        s(:op_asgn,
                          s(:lvasgn, :i), :+,
                          s(:int, 1))))))), :dup)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :e), :next))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :e), :dup)))),
      s(:def, :test_gc,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised),
          s(:args),
          s(:begin,
            s(:block,
              s(:send,
                s(:int, 1), :times),
              s(:args),
              s(:begin,
                s(:lvasgn, :foo,
                  s(:send,
                    s(:array,
                      s(:int, 1),
                      s(:int, 2),
                      s(:int, 3)), :to_enum)),
                s(:send,
                  s(:const, nil, :GC), :start))),
            s(:send,
              s(:const, nil, :GC), :start)))),
      s(:def, :test_slice,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:array,
              s(:int, 4),
              s(:int, 5),
              s(:int, 6)),
            s(:array,
              s(:int, 7),
              s(:int, 8),
              s(:int, 9)),
            s(:array,
              s(:int, 10))),
          s(:send,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1),
                  s(:int, 10))), :each_slice,
              s(:int, 3)), :to_a))),
      s(:def, :test_cons,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:int, 2),
                s(:int, 3),
                s(:int, 4)),
              s(:array,
                s(:int, 3),
                s(:int, 4),
                s(:int, 5)),
              s(:array,
                s(:int, 4),
                s(:int, 5),
                s(:int, 6)),
              s(:array,
                s(:int, 5),
                s(:int, 6),
                s(:int, 7)),
              s(:array,
                s(:int, 6),
                s(:int, 7),
                s(:int, 8)),
              s(:array,
                s(:int, 7),
                s(:int, 8),
                s(:int, 9)),
              s(:array,
                s(:int, 8),
                s(:int, 9),
                s(:int, 10)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :a),
            s(:send,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:int, 10))), :each_cons,
                s(:int, 3)), :to_a)))),
      s(:def, :test_with_index,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 0)),
              s(:array,
                s(:int, 2),
                s(:int, 1)),
              s(:array,
                s(:int, 3),
                s(:int, 2))),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@obj), :to_enum,
                  s(:sym, :foo),
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3)), :with_index), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 5)),
              s(:array,
                s(:int, 2),
                s(:int, 6)),
              s(:array,
                s(:int, 3),
                s(:int, 7))),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@obj), :to_enum,
                  s(:sym, :foo),
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3)), :with_index,
                s(:int, 5)), :to_a)))),
      s(:def, :test_with_index_large_offset,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8010,
            s(:str, "[ruby-dev:47131] [Bug #8010]")),
          s(:lvasgn, :s,
            s(:send,
              s(:int, 1), :<<,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:int, 8), :*,
                    s(:send,
                      s(:int, 1), :size)), :-,
                  s(:int, 2))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:lvar, :s)),
              s(:array,
                s(:int, 2),
                s(:send,
                  s(:lvar, :s), :+,
                  s(:int, 1))),
              s(:array,
                s(:int, 3),
                s(:send,
                  s(:lvar, :s), :+,
                  s(:int, 2)))),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@obj), :to_enum,
                  s(:sym, :foo),
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3)), :with_index,
                s(:lvar, :s)), :to_a),
            s(:lvar, :bug8010)),
          s(:op_asgn,
            s(:lvasgn, :s), :<<,
            s(:int, 1)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:lvar, :s)),
              s(:array,
                s(:int, 2),
                s(:send,
                  s(:lvar, :s), :+,
                  s(:int, 1))),
              s(:array,
                s(:int, 3),
                s(:send,
                  s(:lvar, :s), :+,
                  s(:int, 2)))),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@obj), :to_enum,
                  s(:sym, :foo),
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3)), :with_index,
                s(:lvar, :s)), :to_a),
            s(:lvar, :bug8010)))),
      s(:def, :test_with_index_nonnum_offset,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8010,
            s(:str, "[ruby-dev:47131] [Bug #8010]")),
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :s), :to_int,
            s(:args),
            s(:int, 1)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 1)),
              s(:array,
                s(:int, 2),
                s(:int, 2)),
              s(:array,
                s(:int, 3),
                s(:int, 3))),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@obj), :to_enum,
                  s(:sym, :foo),
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3)), :with_index,
                s(:lvar, :s)), :to_a),
            s(:lvar, :bug8010)))),
      s(:def, :test_with_index_string_offset,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8010,
            s(:str, "[ruby-dev:47131] [Bug #8010]")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError),
              s(:lvar, :bug8010)),
            s(:args),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@obj), :to_enum,
                  s(:sym, :foo),
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3)), :with_index,
                s(:str, "1")), :to_a)))),
      s(:def, :test_with_index_dangling_memo,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9178,
            s(:str, "[ruby-core:58692] [Bug #9178]")),
          s(:send, nil, :assert_separately,
            s(:array),
            s(:dstr,
              s(:str, "    bug = \""),
              s(:begin,
                s(:lvar, :bug9178)),
              s(:str, "\"\n"),
              s(:str, "    e = [1].to_enum(:chunk).with_index {|c,i| i == 5}\n"),
              s(:str, "    assert_kind_of(Enumerator, e)\n"),
              s(:str, "    assert_equal([false, [1]], e.to_a[0], bug)\n"))))),
      s(:def, :test_with_object,
        s(:args),
        s(:begin,
          s(:lvasgn, :obj,
            s(:array,
              s(:int, 0),
              s(:int, 1))),
          s(:lvasgn, :ret,
            s(:block,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:int, 10))), :each), :with_object,
                s(:lvar, :obj)),
              s(:args,
                s(:arg, :i),
                s(:arg, :memo)),
              s(:begin,
                s(:op_asgn,
                  s(:send,
                    s(:lvar, :memo), :[],
                    s(:int, 0)), :+,
                  s(:lvar, :i)),
                s(:op_asgn,
                  s(:send,
                    s(:lvar, :memo), :[],
                    s(:int, 1)), :*,
                  s(:lvar, :i))))),
          s(:send, nil, :assert_same,
            s(:lvar, :obj),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 55),
              s(:int, 3628800)),
            s(:lvar, :ret)),
          s(:lvasgn, :a,
            s(:array,
              s(:int, 2),
              s(:int, 5),
              s(:int, 2),
              s(:int, 1),
              s(:int, 5),
              s(:int, 3),
              s(:int, 4),
              s(:int, 2),
              s(:int, 1),
              s(:int, 0))),
          s(:lvasgn, :obj,
            s(:hash)),
          s(:lvasgn, :ret,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :a), :delete_if), :with_object,
                s(:lvar, :obj)),
              s(:args,
                s(:arg, :i),
                s(:arg, :seen)),
              s(:if,
                s(:send,
                  s(:lvar, :seen), :key?,
                  s(:lvar, :i)),
                s(:true),
                s(:begin,
                  s(:send,
                    s(:lvar, :seen), :[]=,
                    s(:lvar, :i),
                    s(:true)),
                  s(:false))))),
          s(:send, nil, :assert_same,
            s(:lvar, :obj),
            s(:lvar, :ret)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 5),
              s(:int, 1),
              s(:int, 3),
              s(:int, 4),
              s(:int, 0)),
            s(:lvar, :a)))),
      s(:def, :test_next_rewind,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:send,
              s(:ivar, :@obj), :to_enum,
              s(:sym, :foo),
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :next)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :e), :next)),
          s(:send,
            s(:lvar, :e), :rewind),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :next)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :e), :next)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :e), :next)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :StopIteration)),
            s(:args),
            s(:send,
              s(:lvar, :e), :next)))),
      s(:def, :test_peek,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:array,
              s(:int, 1))),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :a), :each)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :peek)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :peek)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :next)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :StopIteration)),
            s(:args),
            s(:send,
              s(:lvar, :e), :peek)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :StopIteration)),
            s(:args),
            s(:send,
              s(:lvar, :e), :peek)))),
      s(:def, :test_peek_modify,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :each,
            s(:args),
            s(:yield,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :o), :to_enum)),
          s(:lvasgn, :a,
            s(:send,
              s(:lvar, :e), :peek)),
          s(:send,
            s(:lvar, :a), :<<,
            s(:int, 3)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :e), :peek)))),
      s(:def, :test_peek_values_modify,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :each,
            s(:args),
            s(:yield,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :o), :to_enum)),
          s(:lvasgn, :a,
            s(:send,
              s(:lvar, :e), :peek_values)),
          s(:send,
            s(:lvar, :a), :<<,
            s(:int, 3)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :e), :peek)))),
      s(:def, :test_next_after_stopiteration,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:array,
              s(:int, 1))),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :a), :each)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :next)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :StopIteration)),
            s(:args),
            s(:send,
              s(:lvar, :e), :next)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :StopIteration)),
            s(:args),
            s(:send,
              s(:lvar, :e), :next)),
          s(:send,
            s(:lvar, :e), :rewind),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :next)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :StopIteration)),
            s(:args),
            s(:send,
              s(:lvar, :e), :next)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :StopIteration)),
            s(:args),
            s(:send,
              s(:lvar, :e), :next)))),
      s(:def, :test_stop_result,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:array,
              s(:int, 1))),
          s(:lvasgn, :res,
            s(:block,
              s(:send,
                s(:lvar, :a), :each),
              s(:args), nil)),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :a), :each)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :next)),
          s(:lvasgn, :exc,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :StopIteration)),
              s(:args),
              s(:send,
                s(:lvar, :e), :next))),
          s(:send, nil, :assert_equal,
            s(:lvar, :res),
            s(:send,
              s(:lvar, :exc), :result)))),
      s(:def, :test_next_values,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :each,
            s(:args),
            s(:begin,
              s(:yield),
              s(:yield,
                s(:int, 1)),
              s(:yield,
                s(:int, 1),
                s(:int, 2)))),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :o), :to_enum)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :e), :next)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :next)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :e), :next)),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :o), :to_enum)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :e), :next_values)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:lvar, :e), :next_values)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :e), :next_values)))),
      s(:def, :test_peek_values,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :each,
            s(:args),
            s(:begin,
              s(:yield),
              s(:yield,
                s(:int, 1)),
              s(:yield,
                s(:int, 1),
                s(:int, 2)))),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :o), :to_enum)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :e), :peek)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :e), :next)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :peek)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :next)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :e), :peek)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :e), :next)),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :o), :to_enum)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :e), :peek_values)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :e), :next_values)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:lvar, :e), :peek_values)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:lvar, :e), :next_values)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :e), :peek_values)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :e), :next_values)),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :o), :to_enum)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :e), :peek_values)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :e), :next)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:lvar, :e), :peek_values)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :next)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :e), :peek_values)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :e), :next)),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :o), :to_enum)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :e), :peek)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :e), :next_values)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :peek)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:lvar, :e), :next_values)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :e), :peek)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :e), :next_values)))),
      s(:def, :test_each_arg,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :each,
            s(:args,
              s(:arg, :ary)),
            s(:begin,
              s(:send,
                s(:lvar, :ary), :<<,
                s(:int, 1)),
              s(:yield))),
          s(:lvasgn, :ary,
            s(:array)),
          s(:lvasgn, :e,
            s(:send,
              s(:send,
                s(:lvar, :o), :to_enum), :each,
              s(:lvar, :ary))),
          s(:send,
            s(:lvar, :e), :next),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:lvar, :ary)))),
      s(:def, :test_feed,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :each,
            s(:args,
              s(:arg, :ary)),
            s(:begin,
              s(:send,
                s(:lvar, :ary), :<<,
                s(:yield)),
              s(:send,
                s(:lvar, :ary), :<<,
                s(:yield)),
              s(:send,
                s(:lvar, :ary), :<<,
                s(:yield)))),
          s(:lvasgn, :ary,
            s(:array)),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :o), :to_enum,
              s(:sym, :each),
              s(:lvar, :ary))),
          s(:send,
            s(:lvar, :e), :next),
          s(:send,
            s(:lvar, :e), :feed,
            s(:int, 1)),
          s(:send,
            s(:lvar, :e), :next),
          s(:send,
            s(:lvar, :e), :feed,
            s(:int, 2)),
          s(:send,
            s(:lvar, :e), :next),
          s(:send,
            s(:lvar, :e), :feed,
            s(:int, 3)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :StopIteration)),
            s(:args),
            s(:send,
              s(:lvar, :e), :next)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:lvar, :ary)))),
      s(:def, :test_feed_mixed,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :each,
            s(:args,
              s(:arg, :ary)),
            s(:begin,
              s(:send,
                s(:lvar, :ary), :<<,
                s(:yield)),
              s(:send,
                s(:lvar, :ary), :<<,
                s(:yield)),
              s(:send,
                s(:lvar, :ary), :<<,
                s(:yield)))),
          s(:lvasgn, :ary,
            s(:array)),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :o), :to_enum,
              s(:sym, :each),
              s(:lvar, :ary))),
          s(:send,
            s(:lvar, :e), :next),
          s(:send,
            s(:lvar, :e), :feed,
            s(:int, 1)),
          s(:send,
            s(:lvar, :e), :next),
          s(:send,
            s(:lvar, :e), :next),
          s(:send,
            s(:lvar, :e), :feed,
            s(:int, 3)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :StopIteration)),
            s(:args),
            s(:send,
              s(:lvar, :e), :next)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:nil),
              s(:int, 3)),
            s(:lvar, :ary)))),
      s(:def, :test_feed_twice,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :each,
            s(:args,
              s(:arg, :ary)),
            s(:begin,
              s(:send,
                s(:lvar, :ary), :<<,
                s(:yield)),
              s(:send,
                s(:lvar, :ary), :<<,
                s(:yield)),
              s(:send,
                s(:lvar, :ary), :<<,
                s(:yield)))),
          s(:lvasgn, :ary,
            s(:array)),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :o), :to_enum,
              s(:sym, :each),
              s(:lvar, :ary))),
          s(:send,
            s(:lvar, :e), :feed,
            s(:int, 1)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :e), :feed,
              s(:int, 2))))),
      s(:def, :test_feed_before_first_next,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :each,
            s(:args,
              s(:arg, :ary)),
            s(:begin,
              s(:send,
                s(:lvar, :ary), :<<,
                s(:yield)),
              s(:send,
                s(:lvar, :ary), :<<,
                s(:yield)),
              s(:send,
                s(:lvar, :ary), :<<,
                s(:yield)))),
          s(:lvasgn, :ary,
            s(:array)),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :o), :to_enum,
              s(:sym, :each),
              s(:lvar, :ary))),
          s(:send,
            s(:lvar, :e), :feed,
            s(:int, 1)),
          s(:send,
            s(:lvar, :e), :next),
          s(:send,
            s(:lvar, :e), :next),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:lvar, :ary)))),
      s(:def, :test_rewind_clear_feed,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :each,
            s(:args,
              s(:arg, :ary)),
            s(:begin,
              s(:send,
                s(:lvar, :ary), :<<,
                s(:yield)),
              s(:send,
                s(:lvar, :ary), :<<,
                s(:yield)),
              s(:send,
                s(:lvar, :ary), :<<,
                s(:yield)))),
          s(:lvasgn, :ary,
            s(:array)),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :o), :to_enum,
              s(:sym, :each),
              s(:lvar, :ary))),
          s(:send,
            s(:lvar, :e), :next),
          s(:send,
            s(:lvar, :e), :feed,
            s(:int, 1)),
          s(:send,
            s(:lvar, :e), :next),
          s(:send,
            s(:lvar, :e), :feed,
            s(:int, 2)),
          s(:send,
            s(:lvar, :e), :rewind),
          s(:send,
            s(:lvar, :e), :next),
          s(:send,
            s(:lvar, :e), :next),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:nil)),
            s(:lvar, :ary)))),
      s(:def, :test_feed_yielder,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:nil)),
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:const, nil, :Enumerator), :new),
              s(:args,
                s(:arg, :y)),
              s(:begin,
                s(:lvasgn, :x,
                  s(:send,
                    s(:lvar, :y), :yield)),
                s(:int, 10)))),
          s(:send,
            s(:lvar, :e), :next),
          s(:send,
            s(:lvar, :e), :feed,
            s(:int, 100)),
          s(:lvasgn, :exc,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :StopIteration)),
              s(:args),
              s(:send,
                s(:lvar, :e), :next))),
          s(:send, nil, :assert_equal,
            s(:int, 100),
            s(:lvar, :x)),
          s(:send, nil, :assert_equal,
            s(:int, 10),
            s(:send,
              s(:lvar, :exc), :result)))),
      s(:def, :test_inspect,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 10))), :each_cons,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "#<Enumerator: 0..10:each_cons(2)>"),
            s(:send,
              s(:lvar, :e), :inspect)),
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:const, nil, :Enumerator), :new),
              s(:args,
                s(:arg, :y)),
              s(:begin,
                s(:send,
                  s(:lvar, :y), :yield),
                s(:int, 10)))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A#<Enumerator: .*:each>"),
              s(:regopt)),
            s(:send,
              s(:lvar, :e), :inspect)),
          s(:lvasgn, :a,
            s(:array)),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :a), :each_with_object,
              s(:lvar, :a))),
          s(:send,
            s(:lvar, :a), :<<,
            s(:lvar, :e)),
          s(:send, nil, :assert_equal,
            s(:str, "#<Enumerator: [#<Enumerator: ...>]:each_with_object([#<Enumerator: ...>])>"),
            s(:send,
              s(:lvar, :e), :inspect)))),
      s(:def, :test_inspect_verbose,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6214,
            s(:str, "[ruby-dev:45449]")),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, ""),
              s(:lvar, :bug6214)),
            s(:args),
            s(:send,
              s(:send,
                s(:str, ""), :bytes), :inspect)),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:str, ""),
              s(:lvar, :bug6214)),
            s(:args),
            s(:send,
              s(:send,
                s(:array), :lazy), :inspect)))),
      s(:def, :test_inspect_encoding,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:block,
                s(:send, nil, :define_method,
                  s(:str, "あ")),
                s(:args), nil))),
          s(:lvasgn, :e,
            s(:send,
              s(:send,
                s(:lvar, :c), :new), :enum_for,
              s(:str, "あ"))),
          s(:lvasgn, :s,
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:const,
                  s(:const, nil, :Encoding), :CompatibilityError)),
              s(:args),
              s(:break,
                s(:send,
                  s(:lvar, :e), :inspect)))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :UTF_8),
            s(:send,
              s(:lvar, :s), :encoding)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A#<Enumerator: .*:\\u{3042}>\\z"),
              s(:regopt)),
            s(:lvar, :s)))),
      s(:def, :test_generator,
        s(:args),
        s(:begin,
          s(:lvasgn, :g,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Enumerator), :Generator), :new),
              s(:args,
                s(:arg, :y)),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :y), :<<,
                      s(:int, 1)), :<<,
                    s(:int, 2)), :<<,
                  s(:int, 3)),
                s(:sym, :foo)))),
          s(:lvasgn, :g2,
            s(:send,
              s(:lvar, :g), :dup)),
          s(:lvasgn, :a,
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:block,
              s(:send,
                s(:lvar, :g), :each),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :a), :<<,
                s(:lvar, :x)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:lvar, :a)),
          s(:lvasgn, :a,
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:block,
              s(:send,
                s(:lvar, :g2), :each),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :a), :<<,
                s(:lvar, :x)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:lvar, :a)),
          s(:send,
            s(:lvar, :g), :freeze),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :g), :__send__,
              s(:sym, :initialize),
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :y)),
                s(:send,
                  s(:send,
                    s(:lvar, :y), :<<,
                    s(:int, 4)), :<<,
                  s(:int, 5))))),
          s(:lvasgn, :g,
            s(:send,
              s(:const,
                s(:const, nil, :Enumerator), :Generator), :new,
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :y)),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :y), :<<,
                      s(:int, 4)), :<<,
                    s(:int, 5)),
                  s(:sym, :foo))))),
          s(:lvasgn, :a,
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:block,
              s(:send,
                s(:lvar, :g), :each),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :a), :<<,
                s(:lvar, :x)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 4),
              s(:int, 5)),
            s(:lvar, :a)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :LocalJumpError)),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :Enumerator), :Generator), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :Enumerator), :Generator), :new,
              s(:int, 1))),
          s(:lvasgn, :obj,
            s(:send,
              s(:send, nil, :eval,
                s(:str, "class C🗿; self; end")), :new)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "C\\u{1f5ff}"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :Enumerator), :Generator), :new,
              s(:lvar, :obj))))),
      s(:def, :test_generator_args,
        s(:args),
        s(:begin,
          s(:lvasgn, :g,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Enumerator), :Generator), :new),
              s(:args,
                s(:arg, :y),
                s(:arg, :x)),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :y), :<<,
                      s(:int, 1)), :<<,
                    s(:int, 2)), :<<,
                  s(:int, 3)),
                s(:lvar, :x)))),
          s(:lvasgn, :a,
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:sym, :bar),
            s(:block,
              s(:send,
                s(:lvar, :g), :each,
                s(:sym, :bar)),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :a), :<<,
                s(:lvar, :x)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:lvar, :a)))),
      s(:def, :test_yielder,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:array)),
          s(:lvasgn, :y,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Enumerator), :Yielder), :new),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :a), :<<,
                s(:lvar, :x)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :y),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :y), :<<,
                  s(:int, 1)), :<<,
                s(:int, 2)), :<<,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:lvar, :a)),
          s(:lvasgn, :a,
            s(:array)),
          s(:lvasgn, :y,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Enumerator), :Yielder), :new),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :a), :<<,
                s(:lvar, :x)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:lvar, :y), :yield,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:lvar, :y), :yield,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:send,
              s(:lvar, :y), :yield,
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :LocalJumpError)),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :Enumerator), :Yielder), :new)))),
      s(:def, :test_size,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Enumerator), :new),
                s(:args), nil), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Enumerator), :new,
                  s(:block,
                    s(:send, nil, :lambda),
                    s(:args),
                    s(:int, 42))),
                s(:args), nil), :size)),
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :obj), :call,
            s(:args),
            s(:int, 42)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Enumerator), :new,
                  s(:lvar, :obj)),
                s(:args), nil), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Enumerator), :new,
                  s(:int, 42)),
                s(:args), nil), :size)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 1), :<<,
              s(:int, 70)),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Enumerator), :new,
                  s(:send,
                    s(:int, 1), :<<,
                    s(:int, 70))),
                s(:args), nil), :size)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Enumerator), :new,
                  s(:const,
                    s(:const, nil, :Float), :INFINITY)),
                s(:args), nil), :size)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Enumerator), :new,
                  s(:nil)),
                s(:args), nil), :size)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Enumerator), :new,
                s(:str, "42")),
              s(:args), nil)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :to_enum,
                s(:sym, :foo),
                s(:int, 0),
                s(:int, 1)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:block,
                s(:send,
                  s(:ivar, :@obj), :to_enum,
                  s(:sym, :foo),
                  s(:int, 0),
                  s(:int, 1)),
                s(:args),
                s(:int, 2)), :size)))),
      s(:def, :test_size_for_enum_created_by_enumerators,
        s(:args),
        s(:begin,
          s(:lvasgn, :enum,
            s(:block,
              s(:send, nil, :to_enum),
              s(:args),
              s(:int, 42))),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:send,
                s(:lvar, :enum), :with_index), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:send,
                s(:lvar, :enum), :with_object,
                s(:sym, :foo)), :size)))),
      s(:def, :test_size_for_enum_created_from_array,
        s(:args),
        s(:begin,
          s(:lvasgn, :arr,
            s(:array,
              s(:str, "hello"),
              s(:str, "world"))),
          s(:block,
            s(:send,
              s(:array,
                s(:sym, :each),
                s(:sym, :each_with_index),
                s(:sym, :reverse_each),
                s(:sym, :sort_by!),
                s(:sym, :sort_by),
                s(:sym, :map),
                s(:sym, :map!),
                s(:sym, :keep_if),
                s(:sym, :reject!),
                s(:sym, :reject),
                s(:sym, :select!),
                s(:sym, :select),
                s(:sym, :delete_if)), :each),
            s(:args,
              s(:arg, :method)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :arr), :size),
              s(:send,
                s(:send,
                  s(:lvar, :arr), :send,
                  s(:lvar, :method)), :size))))),
      s(:def, :test_size_for_enum_created_from_enumerable,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:array,
                s(:sym, :find_all),
                s(:sym, :reject),
                s(:sym, :map),
                s(:sym, :flat_map),
                s(:sym, :partition),
                s(:sym, :group_by),
                s(:sym, :sort_by),
                s(:sym, :min_by),
                s(:sym, :max_by),
                s(:sym, :minmax_by),
                s(:sym, :each_with_index),
                s(:sym, :reverse_each),
                s(:sym, :each_entry)), :each),
            s(:args,
              s(:arg, :method)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:nil),
                s(:send,
                  s(:send,
                    s(:ivar, :@obj), :send,
                    s(:lvar, :method)), :size)),
              s(:send, nil, :assert_equal,
                s(:int, 42),
                s(:send,
                  s(:send,
                    s(:ivar, :@sized), :send,
                    s(:lvar, :method)), :size)))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_with_object,
                s(:nil)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:send,
                s(:ivar, :@sized), :each_with_object,
                s(:nil)), :size)))),
      s(:def, :test_size_for_enum_created_from_hash,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:hash,
              s(:pair,
                s(:sym, :a),
                s(:int, 1)),
              s(:pair,
                s(:sym, :b),
                s(:int, 2)),
              s(:pair,
                s(:sym, :c),
                s(:int, 3)))),
          s(:lvasgn, :methods,
            s(:array,
              s(:sym, :delete_if),
              s(:sym, :reject),
              s(:sym, :reject!),
              s(:sym, :select),
              s(:sym, :select!),
              s(:sym, :keep_if),
              s(:sym, :each),
              s(:sym, :each_key),
              s(:sym, :each_pair))),
          s(:lvasgn, :enums,
            s(:block,
              s(:send,
                s(:lvar, :methods), :map),
              s(:args,
                s(:arg, :method)),
              s(:send,
                s(:lvar, :h), :send,
                s(:lvar, :method)))),
          s(:lvasgn, :s,
            s(:send,
              s(:lvar, :enums), :group_by,
              s(:block_pass,
                s(:sym, :size)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 3)),
            s(:send,
              s(:lvar, :s), :keys),
            s(:block,
              s(:send, nil, :lambda),
              s(:args),
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :s), :reject!),
                  s(:args,
                    s(:arg, :k)),
                  s(:send,
                    s(:lvar, :k), :==,
                    s(:int, 3))), :inspect))),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:sym, :d),
            s(:int, 4)),
          s(:lvasgn, :s,
            s(:send,
              s(:lvar, :enums), :group_by,
              s(:block_pass,
                s(:sym, :size)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 4)),
            s(:send,
              s(:lvar, :s), :keys),
            s(:block,
              s(:send, nil, :lambda),
              s(:args),
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :s), :reject!),
                  s(:args,
                    s(:arg, :k)),
                  s(:send,
                    s(:lvar, :k), :==,
                    s(:int, 4))), :inspect))))),
      s(:def, :test_size_for_enum_created_from_env,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:sym, :each_pair),
              s(:sym, :reject!),
              s(:sym, :delete_if),
              s(:sym, :select),
              s(:sym, :select!),
              s(:sym, :keep_if)), :each),
          s(:args,
            s(:arg, :method)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :ENV), :size),
            s(:send,
              s(:send,
                s(:const, nil, :ENV), :send,
                s(:lvar, :method)), :size)))),
      s(:def, :test_size_for_enum_created_from_struct,
        s(:args),
        s(:begin,
          s(:lvasgn, :s,
            s(:send,
              s(:send,
                s(:const, nil, :Struct), :new,
                s(:sym, :foo),
                s(:sym, :bar),
                s(:sym, :baz)), :new,
              s(:int, 1),
              s(:int, 2))),
          s(:block,
            s(:send,
              s(:array,
                s(:sym, :each),
                s(:sym, :each_pair),
                s(:sym, :select)), :each),
            s(:args,
              s(:arg, :method)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send,
                  s(:lvar, :s), :send,
                  s(:lvar, :method)), :size))))),
      s(:def, :check_consistency_for_combinatorics,
        s(:args,
          s(:arg, :method)),
        s(:block,
          s(:send,
            s(:array,
              s(:array),
              s(:array,
                s(:sym, :a),
                s(:sym, :b),
                s(:sym, :c),
                s(:sym, :d),
                s(:sym, :e))), :product,
            s(:array,
              s(:int, -2),
              s(:int, 0),
              s(:int, 2),
              s(:int, 5),
              s(:int, 6))),
          s(:args,
            s(:arg, :array),
            s(:arg, :arg)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :array), :send,
                  s(:lvar, :method),
                  s(:lvar, :arg)), :to_a), :size),
            s(:send,
              s(:send,
                s(:lvar, :array), :send,
                s(:lvar, :method),
                s(:lvar, :arg)), :size),
            s(:dstr,
              s(:str, "inconsistent size for "),
              s(:begin,
                s(:lvar, :array)),
              s(:str, "."),
              s(:begin,
                s(:lvar, :method)),
              s(:str, "("),
              s(:begin,
                s(:lvar, :arg)),
              s(:str, ")"))))),
      s(:def, :test_size_for_array_combinatorics,
        s(:args),
        s(:begin,
          s(:send, nil, :check_consistency_for_combinatorics,
            s(:sym, :permutation)),
          s(:send, nil, :assert_equal,
            s(:int, 24),
            s(:send,
              s(:send,
                s(:array,
                  s(:int, 0),
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 4)), :permutation), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 2933197128679486453788761052665610240000000),
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:int, 42))), :to_a), :permutation,
                s(:int, 30)), :size)),
          s(:send, nil, :check_consistency_for_combinatorics,
            s(:sym, :combination)),
          s(:send, nil, :assert_equal,
            s(:int, 28258808871162574166368460400),
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:int, 100))), :to_a), :combination,
                s(:int, 42)), :size)),
          s(:send, nil, :check_consistency_for_combinatorics,
            s(:sym, :repeated_permutation)),
          s(:send, nil, :assert_equal,
            s(:int, 291733167875766667063796853374976),
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:int, 42))), :to_a), :repeated_permutation,
                s(:int, 20)), :size)),
          s(:send, nil, :check_consistency_for_combinatorics,
            s(:sym, :repeated_combination)),
          s(:send, nil, :assert_equal,
            s(:int, 28258808871162574166368460400),
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:int, 59))), :to_a), :repeated_combination,
                s(:int, 42)), :size)))),
      s(:def, :test_size_for_cycle,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:send,
                s(:array,
                  s(:sym, :foo)), :cycle), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 10),
            s(:send,
              s(:send,
                s(:array,
                  s(:sym, :foo),
                  s(:sym, :bar)), :cycle,
                s(:int, 5)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:array,
                  s(:sym, :foo),
                  s(:sym, :bar)), :cycle,
                s(:int, -10)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:array), :cycle), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:array), :cycle,
                s(:int, 5)), :size)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :cycle), :size)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :cycle,
                s(:int, 5)), :size)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:send,
                s(:ivar, :@sized), :cycle), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 126),
            s(:send,
              s(:send,
                s(:ivar, :@sized), :cycle,
                s(:int, 3)), :size)))),
      s(:def, :test_size_for_loops,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:send, nil, :loop), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:send,
                s(:int, 42), :times), :size)))),
      s(:def, :test_size_for_each_slice,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_slice,
                s(:int, 3)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:send,
                s(:ivar, :@sized), :each_slice,
                s(:int, 7)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:send,
                s(:ivar, :@sized), :each_slice,
                s(:int, 10)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:ivar, :@sized), :each_slice,
                s(:int, 70)), :size)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_slice,
                s(:int, 0)), :size)))),
      s(:def, :test_size_for_each_cons,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_cons,
                s(:int, 3)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 33),
            s(:send,
              s(:send,
                s(:ivar, :@sized), :each_cons,
                s(:int, 10)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:ivar, :@sized), :each_cons,
                s(:int, 70)), :size)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send,
                s(:ivar, :@obj), :each_cons,
                s(:int, 0)), :size)))),
      s(:def, :test_size_for_step,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:send,
                s(:int, 5), :step,
                s(:int, 46)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:send,
                s(:int, 1), :step,
                s(:int, 10),
                s(:int, 3)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:send,
                s(:int, 1), :step,
                s(:int, 9),
                s(:int, 3)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:int, 1), :step,
                s(:int, -11)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:int, 1), :step,
                s(:int, -11),
                s(:int, 2)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 7),
            s(:send,
              s(:send,
                s(:int, 1), :step,
                s(:int, -11),
                s(:int, -2)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 7),
            s(:send,
              s(:send,
                s(:int, 1), :step,
                s(:float, -11.1),
                s(:int, -2)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:int, 42), :step,
                s(:const,
                  s(:const, nil, :Float), :INFINITY),
                s(:int, -2)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:int, 42), :step,
                s(:int, 55),
                s(:const,
                  s(:const, nil, :Float), :INFINITY)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:int, 42), :step,
                s(:const,
                  s(:const, nil, :Float), :INFINITY),
                s(:const,
                  s(:const, nil, :Float), :INFINITY)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 14),
            s(:send,
              s(:send,
                s(:float, 0.1), :step,
                s(:float, 4.2),
                s(:float, 0.3)), :size)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:send,
                s(:int, 42), :step,
                s(:const,
                  s(:const, nil, :Float), :INFINITY),
                s(:int, 2)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 10),
            s(:send,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:int, 10))), :step), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:int, 10))), :step,
                s(:int, 3)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:send,
                s(:begin,
                  s(:erange,
                    s(:int, 1),
                    s(:int, 10))), :step,
                s(:int, 3)), :size)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 42),
                    s(:const,
                      s(:const, nil, :Float), :INFINITY))), :step,
                s(:int, 2)), :size)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:int, 10))), :step,
                s(:int, -2)), :size)))),
      s(:def, :test_size_for_downup_to,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:int, 1), :upto,
                s(:int, -100)), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 102),
            s(:send,
              s(:send,
                s(:int, 1), :downto,
                s(:int, -100)), :size)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:send,
                s(:int, 42), :upto,
                s(:const,
                  s(:const, nil, :Float), :INFINITY)), :size)))),
      s(:def, :test_size_for_string,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:send,
                s(:str, "hello"), :each_byte), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:send,
                s(:str, "hello"), :each_char), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:send,
                s(:str, "hello"), :each_codepoint), :size)))),
      s(:def, :test_peek_for_enumerator_objects,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:send,
              s(:int, 2), :times)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :e), :peek)),
          s(:send,
            s(:lvar, :e), :next),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :peek)),
          s(:send,
            s(:lvar, :e), :next),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :StopIteration)),
            s(:args),
            s(:send,
              s(:lvar, :e), :peek)))))))
