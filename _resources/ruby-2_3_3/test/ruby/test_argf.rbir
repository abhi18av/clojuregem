s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "timeout")),
  s(:send, nil, :require,
    s(:str, "tmpdir")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:send, nil, :require,
    s(:str, "fileutils")),
  s(:class,
    s(:const, nil, :TestArgf),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@tmpdir,
            s(:send,
              s(:const, nil, :Dir), :mktmpdir)),
          s(:ivasgn, :@tmp_count,
            s(:int, 0)),
          s(:ivasgn, :@t1,
            s(:send, nil, :make_tempfile0,
              s(:str, "argf-foo"))),
          s(:send,
            s(:ivar, :@t1), :binmode),
          s(:send,
            s(:ivar, :@t1), :puts,
            s(:str, "1")),
          s(:send,
            s(:ivar, :@t1), :puts,
            s(:str, "2")),
          s(:send,
            s(:ivar, :@t1), :close),
          s(:ivasgn, :@t2,
            s(:send, nil, :make_tempfile0,
              s(:str, "argf-bar"))),
          s(:send,
            s(:ivar, :@t2), :binmode),
          s(:send,
            s(:ivar, :@t2), :puts,
            s(:str, "3")),
          s(:send,
            s(:ivar, :@t2), :puts,
            s(:str, "4")),
          s(:send,
            s(:ivar, :@t2), :close),
          s(:ivasgn, :@t3,
            s(:send, nil, :make_tempfile0,
              s(:str, "argf-baz"))),
          s(:send,
            s(:ivar, :@t3), :binmode),
          s(:send,
            s(:ivar, :@t3), :puts,
            s(:str, "5")),
          s(:send,
            s(:ivar, :@t3), :puts,
            s(:str, "6")),
          s(:send,
            s(:ivar, :@t3), :close))),
      s(:def, :teardown,
        s(:args),
        s(:send,
          s(:const, nil, :FileUtils), :rmtree,
          s(:ivar, :@tmpdir))),
      s(:def, :make_tempfile0,
        s(:args,
          s(:arg, :basename)),
        s(:begin,
          s(:op_asgn,
            s(:ivasgn, :@tmp_count), :+,
            s(:int, 1)),
          s(:send, nil, :open,
            s(:dstr,
              s(:begin,
                s(:ivar, :@tmpdir)),
              s(:str, "/"),
              s(:begin,
                s(:lvar, :basename)),
              s(:str, "-"),
              s(:begin,
                s(:ivar, :@tmp_count))),
            s(:str, "w")))),
      s(:def, :make_tempfile,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :make_tempfile0,
              s(:str, "argf-qux"))),
          s(:send,
            s(:lvar, :t), :puts,
            s(:str, "foo")),
          s(:send,
            s(:lvar, :t), :puts,
            s(:str, "bar")),
          s(:send,
            s(:lvar, :t), :puts,
            s(:str, "baz")),
          s(:send,
            s(:lvar, :t), :close),
          s(:lvar, :t))),
      s(:def, :ruby,
        s(:args,
          s(:restarg, :args),
          s(:kwoptarg, :external_encoding,
            s(:const,
              s(:const, nil, :Encoding), :UTF_8))),
        s(:ensure,
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :args), :empty?),
              s(:lvasgn, :args,
                s(:array,
                  s(:str, "-e"),
                  s(:str, "$>.write($<.read)"))), nil),
            s(:lvasgn, :ruby,
              s(:send,
                s(:const, nil, :EnvUtil), :rubybin)),
            s(:lvasgn, :f,
              s(:send,
                s(:const, nil, :IO), :popen,
                s(:send,
                  s(:array,
                    s(:lvar, :ruby)), :+,
                  s(:lvar, :args)),
                s(:str, "r+"),
                s(:hash,
                  s(:pair,
                    s(:sym, :external_encoding),
                    s(:lvar, :external_encoding))))),
            s(:yield,
              s(:lvar, :f))),
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :f), :!),
              s(:send,
                s(:lvar, :f), :closed?)), nil,
            s(:send,
              s(:lvar, :f), :close)))),
      s(:def, :no_safe_rename,
        s(:args),
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "cygwin|mswin|mingw|bccwin"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM))),
      s(:def, :assert_src_expected,
        s(:args,
          s(:arg, :line),
          s(:arg, :src),
          s(:optarg, :args,
            s(:nil))),
        s(:begin,
          s(:or_asgn,
            s(:lvasgn, :args),
            s(:array,
              s(:send,
                s(:ivar, :@t1), :path),
              s(:send,
                s(:ivar, :@t2), :path),
              s(:send,
                s(:ivar, :@t3), :path))),
          s(:lvasgn, :expected,
            s(:send,
              s(:lvar, :src), :split,
              s(:regexp,
                s(:str, "^"),
                s(:regopt)))),
          s(:block,
            s(:send, nil, :ruby,
              s(:str, "-e"),
              s(:lvar, :src),
              s(:splat,
                s(:lvar, :args))),
            s(:args,
              s(:arg, :f)),
            s(:block,
              s(:send,
                s(:lvar, :expected), :each_with_index),
              s(:args,
                s(:arg, :e),
                s(:arg, :i)),
              s(:begin,
                s(:or,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "#=> *(.*)"),
                      s(:regopt)),
                    s(:lvar, :e)),
                  s(:next)),
                s(:lvasgn, :a,
                  s(:send,
                    s(:lvar, :f), :gets)),
                s(:send, nil, :assert_not_nil,
                  s(:lvar, :a),
                  s(:str, "[ruby-dev:34445]: remained")),
                s(:send, nil, :assert_equal,
                  s(:nth_ref, 1),
                  s(:send,
                    s(:lvar, :a), :chomp),
                  s(:dstr,
                    s(:str, "[ruby-dev:34445]: line "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :line), :+,
                        s(:lvar, :i)))))))))),
      s(:def, :test_argf,
        s(:args),
        s(:send, nil, :assert_src_expected,
          s(:send,
            s(:int, 74), :+,
            s(:int, 1)),
          s(:dstr,
            s(:str, "      a = ARGF\n"),
            s(:str, "      b = a.dup\n"),
            s(:str, "      p [a.gets.chomp, a.lineno, b.gets.chomp, b.lineno] #=> [\"1\", 1, \"1\", 1]\n"),
            s(:str, "      p [a.gets.chomp, a.lineno, b.gets.chomp, b.lineno] #=> [\"2\", 2, \"2\", 2]\n"),
            s(:str, "      a.rewind\n"),
            s(:str, "      b.rewind\n"),
            s(:str, "      p [a.gets.chomp, a.lineno, b.gets.chomp, b.lineno] #=> [\"1\", 1, \"1\", 3]\n"),
            s(:str, "      p [a.gets.chomp, a.lineno, b.gets.chomp, b.lineno] #=> [\"2\", 2, \"2\", 4]\n"),
            s(:str, "      p [a.gets.chomp, a.lineno, b.gets.chomp, b.lineno] #=> [\"3\", 3, \"3\", 5]\n"),
            s(:str, "      p [a.gets.chomp, a.lineno, b.gets.chomp, b.lineno] #=> [\"4\", 4, \"4\", 6]\n"),
            s(:str, "      p [a.gets.chomp, a.lineno, b.gets.chomp, b.lineno] #=> [\"5\", 5, \"5\", 7]\n"),
            s(:str, "      a.rewind\n"),
            s(:str, "      b.rewind\n"),
            s(:str, "      p [a.gets.chomp, a.lineno, b.gets.chomp, b.lineno] #=> [\"5\", 5, \"5\", 8]\n"),
            s(:str, "      p [a.gets.chomp, a.lineno, b.gets.chomp, b.lineno] #=> [\"6\", 6, \"6\", 9]\n")))),
      s(:def, :test_lineno,
        s(:args),
        s(:send, nil, :assert_src_expected,
          s(:send,
            s(:int, 94), :+,
            s(:int, 1)),
          s(:dstr,
            s(:str, "      a = ARGF\n"),
            s(:str, "      a.gets; p $.  #=> 1\n"),
            s(:str, "      a.gets; p $.  #=> 2\n"),
            s(:str, "      a.gets; p $.  #=> 3\n"),
            s(:str, "      a.rewind; p $.  #=> 3\n"),
            s(:str, "      a.gets; p $.  #=> 3\n"),
            s(:str, "      a.gets; p $.  #=> 4\n"),
            s(:str, "      a.rewind; p $.  #=> 4\n"),
            s(:str, "      a.gets; p $.  #=> 3\n"),
            s(:str, "      a.lineno = 1000; p $.  #=> 1000\n"),
            s(:str, "      a.gets; p $.  #=> 1001\n"),
            s(:str, "      a.gets; p $.  #=> 1002\n"),
            s(:str, "      $. = 2000\n"),
            s(:str, "      a.gets; p $.  #=> 2001\n"),
            s(:str, "      a.gets; p $.  #=> 2001\n")))),
      s(:def, :test_lineno2,
        s(:args),
        s(:send, nil, :assert_src_expected,
          s(:send,
            s(:int, 114), :+,
            s(:int, 1)),
          s(:dstr,
            s(:str, "      a = ARGF.dup\n"),
            s(:str, "      a.gets; p $.  #=> 1\n"),
            s(:str, "      a.gets; p $.  #=> 2\n"),
            s(:str, "      a.gets; p $.  #=> 1\n"),
            s(:str, "      a.rewind; p $.  #=> 1\n"),
            s(:str, "      a.gets; p $.  #=> 1\n"),
            s(:str, "      a.gets; p $.  #=> 2\n"),
            s(:str, "      a.gets; p $.  #=> 1\n"),
            s(:str, "      a.lineno = 1000; p $.  #=> 1\n"),
            s(:str, "      a.gets; p $.  #=> 2\n"),
            s(:str, "      a.gets; p $.  #=> 2\n"),
            s(:str, "      $. = 2000\n"),
            s(:str, "      a.gets; p $.  #=> 2000\n"),
            s(:str, "      a.gets; p $.  #=> 2000\n")))),
      s(:def, :test_lineno3,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array,
            s(:str, "-"),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path)),
          s(:dstr,
            s(:str, "      ARGF.each do |line|\n"),
            s(:str, "        puts [$., ARGF.lineno, ARGF.file.lineno]\n"),
            s(:str, "      end\n")),
          s(:array,
            s(:str, "1"),
            s(:str, "1"),
            s(:str, "1"),
            s(:str, "2"),
            s(:str, "2"),
            s(:str, "2"),
            s(:str, "3"),
            s(:str, "3"),
            s(:str, "1"),
            s(:str, "4"),
            s(:str, "4"),
            s(:str, "2")),
          s(:array),
          s(:str, "[ruby-core:25205]"))),
      s(:def, :test_inplace,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-"),
              s(:send,
                s(:ivar, :@t1), :path),
              s(:send,
                s(:ivar, :@t2), :path),
              s(:send,
                s(:ivar, :@t3), :path)),
            s(:dstr,
              s(:str, "      ARGF.inplace_mode = '.bak'\n"),
              s(:str, "      while line = ARGF.gets\n"),
              s(:str, "        puts line.chomp + '.new'\n"),
              s(:str, "      end\n")),
            s(:array),
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:str, "1.new\n2.new\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:send,
                s(:ivar, :@t1), :path))),
          s(:send, nil, :assert_equal,
            s(:str, "3.new\n4.new\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:send,
                s(:ivar, :@t2), :path))),
          s(:send, nil, :assert_equal,
            s(:str, "5.new\n6.new\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:send,
                s(:ivar, :@t3), :path))),
          s(:send, nil, :assert_equal,
            s(:str, "1\n2\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:send,
                s(:send,
                  s(:ivar, :@t1), :path), :+,
                s(:str, ".bak")))),
          s(:send, nil, :assert_equal,
            s(:str, "3\n4\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:send,
                s(:send,
                  s(:ivar, :@t2), :path), :+,
                s(:str, ".bak")))),
          s(:send, nil, :assert_equal,
            s(:str, "5\n6\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:send,
                s(:send,
                  s(:ivar, :@t3), :path), :+,
                s(:str, ".bak")))))),
      s(:def, :test_inplace2,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-"),
              s(:send,
                s(:ivar, :@t1), :path),
              s(:send,
                s(:ivar, :@t2), :path),
              s(:send,
                s(:ivar, :@t3), :path)),
            s(:dstr,
              s(:str, "      ARGF.inplace_mode = '.bak'\n"),
              s(:str, "      puts ARGF.gets.chomp + '.new'\n"),
              s(:str, "      puts ARGF.gets.chomp + '.new'\n"),
              s(:str, "      p ARGF.inplace_mode\n"),
              s(:str, "      ARGF.inplace_mode = nil\n"),
              s(:str, "      puts ARGF.gets.chomp + '.new'\n"),
              s(:str, "      puts ARGF.gets.chomp + '.new'\n"),
              s(:str, "      p ARGF.inplace_mode\n"),
              s(:str, "      ARGF.inplace_mode = '.bak'\n"),
              s(:str, "      puts ARGF.gets.chomp + '.new'\n"),
              s(:str, "      p ARGF.inplace_mode\n"),
              s(:str, "      ARGF.inplace_mode = nil\n"),
              s(:str, "      puts ARGF.gets.chomp + '.new'\n")),
            s(:array),
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:str, "1.new\n2.new\n\".bak\"\n3.new\n4.new\nnil\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:send,
                s(:ivar, :@t1), :path))),
          s(:send, nil, :assert_equal,
            s(:str, "3\n4\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:send,
                s(:ivar, :@t2), :path))),
          s(:send, nil, :assert_equal,
            s(:str, "5.new\n\".bak\"\n6.new\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:send,
                s(:ivar, :@t3), :path))),
          s(:send, nil, :assert_equal,
            s(:str, "1\n2\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:send,
                s(:send,
                  s(:ivar, :@t1), :path), :+,
                s(:str, ".bak")))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:const, nil, :File), :file?,
              s(:send,
                s(:send,
                  s(:ivar, :@t2), :path), :+,
                s(:str, ".bak")))),
          s(:send, nil, :assert_equal,
            s(:str, "5\n6\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:send,
                s(:send,
                  s(:ivar, :@t3), :path), :+,
                s(:str, ".bak")))))),
      s(:def, :test_inplace3,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-i.bak"),
              s(:str, "-"),
              s(:send,
                s(:ivar, :@t1), :path),
              s(:send,
                s(:ivar, :@t2), :path),
              s(:send,
                s(:ivar, :@t3), :path)),
            s(:dstr,
              s(:str, "      puts ARGF.gets.chomp + '.new'\n"),
              s(:str, "      puts ARGF.gets.chomp + '.new'\n"),
              s(:str, "      p $-i\n"),
              s(:str, "      $-i = nil\n"),
              s(:str, "      puts ARGF.gets.chomp + '.new'\n"),
              s(:str, "      puts ARGF.gets.chomp + '.new'\n"),
              s(:str, "      p $-i\n"),
              s(:str, "      $-i = '.bak'\n"),
              s(:str, "      puts ARGF.gets.chomp + '.new'\n"),
              s(:str, "      p $-i\n"),
              s(:str, "      $-i = nil\n"),
              s(:str, "      puts ARGF.gets.chomp + '.new'\n")),
            s(:array),
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:str, "1.new\n2.new\n\".bak\"\n3.new\n4.new\nnil\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:send,
                s(:ivar, :@t1), :path))),
          s(:send, nil, :assert_equal,
            s(:str, "3\n4\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:send,
                s(:ivar, :@t2), :path))),
          s(:send, nil, :assert_equal,
            s(:str, "5.new\n\".bak\"\n6.new\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:send,
                s(:ivar, :@t3), :path))),
          s(:send, nil, :assert_equal,
            s(:str, "1\n2\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:send,
                s(:send,
                  s(:ivar, :@t1), :path), :+,
                s(:str, ".bak")))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:const, nil, :File), :file?,
              s(:send,
                s(:send,
                  s(:ivar, :@t2), :path), :+,
                s(:str, ".bak")))),
          s(:send, nil, :assert_equal,
            s(:str, "5\n6\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:send,
                s(:send,
                  s(:ivar, :@t3), :path), :+,
                s(:str, ".bak")))))),
      s(:def, :test_inplace_rename_impossible,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :make_tempfile)),
          s(:block,
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-"),
                s(:send,
                  s(:lvar, :t), :path)),
              s(:dstr,
                s(:str, "      ARGF.inplace_mode = '/\\\\:'\n"),
                s(:str, "      while line = ARGF.gets\n"),
                s(:str, "        puts line.chomp + '.new'\n"),
                s(:str, "      end\n"))),
            s(:args,
              s(:arg, :r),
              s(:arg, :e)),
            s(:begin,
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "Can't rename .* to .*: .*. skipping file"),
                  s(:regopt)),
                s(:send,
                  s(:lvar, :e), :first)),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:lvar, :r)),
              s(:send, nil, :assert_equal,
                s(:str, "foo\nbar\nbaz\n"),
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:send,
                    s(:lvar, :t), :path))))),
          s(:lvasgn, :base,
            s(:str, "argf-テスト")),
          s(:lvasgn, :name,
            s(:dstr,
              s(:begin,
                s(:ivar, :@tmpdir)),
              s(:str, "/"),
              s(:begin,
                s(:lvar, :base)))),
          s(:send,
            s(:const, nil, :File), :write,
            s(:lvar, :name),
            s(:str, "foo")),
          s(:lvasgn, :argf,
            s(:send,
              s(:send,
                s(:const, nil, :ARGF), :class), :new,
              s(:lvar, :name))),
          s(:send,
            s(:lvar, :argf), :inplace_mode=,
            s(:str, "/\\:")),
          s(:block,
            s(:send, nil, :assert_warning,
              s(:regexp,
                s(:begin,
                  s(:lvar, :base)),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :argf), :gets)))),
      s(:def, :test_inplace_no_backup,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :make_tempfile)),
          s(:block,
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-"),
                s(:send,
                  s(:lvar, :t), :path)),
              s(:dstr,
                s(:str, "      ARGF.inplace_mode = ''\n"),
                s(:str, "      while line = ARGF.gets\n"),
                s(:str, "        puts line.chomp + '.new'\n"),
                s(:str, "      end\n"))),
            s(:args,
              s(:arg, :r),
              s(:arg, :e)),
            s(:if,
              s(:send, nil, :no_safe_rename),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "Can't do inplace edit without backup"),
                  s(:regopt)),
                s(:send,
                  s(:lvar, :e), :join)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:array),
                  s(:lvar, :e)),
                s(:send, nil, :assert_equal,
                  s(:array),
                  s(:lvar, :r)),
                s(:send, nil, :assert_equal,
                  s(:str, "foo.new\nbar.new\nbaz.new\n"),
                  s(:send,
                    s(:const, nil, :File), :read,
                    s(:send,
                      s(:lvar, :t), :path)))))))),
      s(:def, :test_inplace_dup,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :make_tempfile)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-"),
              s(:send,
                s(:lvar, :t), :path)),
            s(:dstr,
              s(:str, "      ARGF.inplace_mode = '.bak'\n"),
              s(:str, "      f = ARGF.dup\n"),
              s(:str, "      while line = f.gets\n"),
              s(:str, "        puts line.chomp + '.new'\n"),
              s(:str, "      end\n")),
            s(:array),
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:str, "foo.new\nbar.new\nbaz.new\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:send,
                s(:lvar, :t), :path))))),
      s(:def, :test_inplace_stdin,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array,
            s(:str, "-"),
            s(:str, "-")),
          s(:dstr,
            s(:str, "      ARGF.inplace_mode = '.bak'\n"),
            s(:str, "      f = ARGF.dup\n"),
            s(:str, "      while line = f.gets\n"),
            s(:str, "        puts line.chomp + '.new'\n"),
            s(:str, "      end\n")),
          s(:array),
          s(:regexp,
            s(:str, "Can't do inplace edit for stdio; skipping"),
            s(:regopt)))),
      s(:def, :test_inplace_stdin2,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array,
            s(:str, "-")),
          s(:dstr,
            s(:str, "      ARGF.inplace_mode = '.bak'\n"),
            s(:str, "      while line = ARGF.gets\n"),
            s(:str, "        puts line.chomp + '.new'\n"),
            s(:str, "      end\n")),
          s(:array),
          s(:regexp,
            s(:str, "Can't do inplace edit for stdio"),
            s(:regopt)))),
      s(:def, :test_encoding,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      p ARGF.external_encoding.is_a?(Encoding)\n"),
              s(:str, "      p ARGF.internal_encoding.is_a?(Encoding)\n"),
              s(:str, "      ARGF.gets\n"),
              s(:str, "      p ARGF.external_encoding.is_a?(Encoding)\n"),
              s(:str, "      p ARGF.internal_encoding\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:send, nil, :assert_equal,
            s(:str, "true\ntrue\ntrue\nnil\n"),
            s(:send,
              s(:lvar, :f), :read)))),
      s(:def, :test_tell,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      begin\n"),
              s(:str, "        ARGF.binmode\n"),
              s(:str, "        loop do\n"),
              s(:str, "          p ARGF.tell\n"),
              s(:str, "          p ARGF.gets\n"),
              s(:str, "        end\n"),
              s(:str, "      rescue ArgumentError\n"),
              s(:str, "        puts \"end\"\n"),
              s(:str, "      end\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:begin,
            s(:lvasgn, :a,
              s(:send,
                s(:send,
                  s(:lvar, :f), :read), :split,
                s(:str, "\n"))),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:array,
                          s(:int, 0),
                          s(:int, 2),
                          s(:int, 4),
                          s(:int, 2),
                          s(:int, 4),
                          s(:int, 2),
                          s(:int, 4)), :map),
                      s(:args,
                        s(:arg, :i)),
                      s(:send,
                        s(:lvar, :i), :to_s)), :zip,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:begin,
                            s(:irange,
                              s(:int, 1),
                              s(:int, 6))), :map),
                        s(:args,
                          s(:arg, :i)),
                        s(:send,
                          s(:send,
                            s(:str, "\""), :+,
                            s(:send,
                              s(:lvar, :i), :to_s)), :+,
                          s(:str, "\\n\""))), :+,
                      s(:array,
                        s(:str, "nil")))), :flatten), :each),
              s(:args,
                s(:arg, :x)),
              s(:send, nil, :assert_equal,
                s(:lvar, :x),
                s(:send,
                  s(:lvar, :a), :shift))),
            s(:send, nil, :assert_equal,
              s(:str, "end"),
              s(:send,
                s(:lvar, :a), :shift))))),
      s(:def, :test_seek,
        s(:args),
        s(:send, nil, :assert_src_expected,
          s(:send,
            s(:int, 310), :+,
            s(:int, 1)),
          s(:dstr,
            s(:str, "      ARGF.seek(4)\n"),
            s(:str, "      p ARGF.gets #=> \"3\\n\"\n"),
            s(:str, "      ARGF.seek(0, IO::SEEK_END)\n"),
            s(:str, "      p ARGF.gets #=> \"5\\n\"\n"),
            s(:str, "      ARGF.seek(4)\n"),
            s(:str, "      p ARGF.gets #=> nil\n"),
            s(:str, "      begin\n"),
            s(:str, "        ARGF.seek(0)\n"),
            s(:str, "      rescue\n"),
            s(:str, "        puts \"end\" #=> end\n"),
            s(:str, "      end\n")))),
      s(:def, :test_set_pos,
        s(:args),
        s(:send, nil, :assert_src_expected,
          s(:send,
            s(:int, 326), :+,
            s(:int, 1)),
          s(:dstr,
            s(:str, "      ARGF.pos = 4\n"),
            s(:str, "      p ARGF.gets #=> \"3\\n\"\n"),
            s(:str, "      ARGF.pos = 4\n"),
            s(:str, "      p ARGF.gets #=> \"5\\n\"\n"),
            s(:str, "      ARGF.pos = 4\n"),
            s(:str, "      p ARGF.gets #=> nil\n"),
            s(:str, "      begin\n"),
            s(:str, "        ARGF.pos = 4\n"),
            s(:str, "      rescue\n"),
            s(:str, "        puts \"end\" #=> end\n"),
            s(:str, "      end\n")))),
      s(:def, :test_rewind,
        s(:args),
        s(:send, nil, :assert_src_expected,
          s(:send,
            s(:int, 342), :+,
            s(:int, 1)),
          s(:dstr,
            s(:str, "      ARGF.pos = 4\n"),
            s(:str, "      ARGF.rewind\n"),
            s(:str, "      p ARGF.gets #=> \"1\\n\"\n"),
            s(:str, "      ARGF.pos = 4\n"),
            s(:str, "      p ARGF.gets #=> \"3\\n\"\n"),
            s(:str, "      ARGF.pos = 4\n"),
            s(:str, "      p ARGF.gets #=> \"5\\n\"\n"),
            s(:str, "      ARGF.pos = 4\n"),
            s(:str, "      p ARGF.gets #=> nil\n"),
            s(:str, "      begin\n"),
            s(:str, "        ARGF.rewind\n"),
            s(:str, "      rescue\n"),
            s(:str, "        puts \"end\" #=> end\n"),
            s(:str, "      end\n")))),
      s(:def, :test_fileno,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      p ARGF.fileno\n"),
              s(:str, "      ARGF.gets\n"),
              s(:str, "      ARGF.gets\n"),
              s(:str, "      p ARGF.fileno\n"),
              s(:str, "      ARGF.gets\n"),
              s(:str, "      ARGF.gets\n"),
              s(:str, "      p ARGF.fileno\n"),
              s(:str, "      ARGF.gets\n"),
              s(:str, "      ARGF.gets\n"),
              s(:str, "      p ARGF.fileno\n"),
              s(:str, "      ARGF.gets\n"),
              s(:str, "      begin\n"),
              s(:str, "        ARGF.fileno\n"),
              s(:str, "      rescue\n"),
              s(:str, "        puts \"end\"\n"),
              s(:str, "      end\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:begin,
            s(:lvasgn, :a,
              s(:send,
                s(:send,
                  s(:lvar, :f), :read), :split,
                s(:str, "\n"))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :fd1),
                s(:lvasgn, :fd2),
                s(:lvasgn, :fd3),
                s(:lvasgn, :fd4),
                s(:lvasgn, :tag)),
              s(:lvar, :a)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "^\\d+$"),
                s(:regopt)),
              s(:lvar, :fd1)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "^\\d+$"),
                s(:regopt)),
              s(:lvar, :fd2)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "^\\d+$"),
                s(:regopt)),
              s(:lvar, :fd3)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "^\\d+$"),
                s(:regopt)),
              s(:lvar, :fd4)),
            s(:send, nil, :assert_equal,
              s(:str, "end"),
              s(:lvar, :tag))))),
      s(:def, :test_to_io,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      8.times do\n"),
              s(:str, "        p ARGF.to_io\n"),
              s(:str, "        ARGF.gets\n"),
              s(:str, "      end\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:begin,
            s(:lvasgn, :a,
              s(:send,
                s(:send,
                  s(:lvar, :f), :read), :split,
                s(:str, "\n"))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :f11),
                s(:lvasgn, :f12),
                s(:lvasgn, :f13),
                s(:lvasgn, :f21),
                s(:lvasgn, :f22),
                s(:lvasgn, :f31),
                s(:lvasgn, :f32),
                s(:lvasgn, :f4)),
              s(:lvar, :a)),
            s(:send, nil, :assert_equal,
              s(:lvar, :f11),
              s(:lvar, :f12)),
            s(:send, nil, :assert_equal,
              s(:lvar, :f11),
              s(:lvar, :f13)),
            s(:send, nil, :assert_equal,
              s(:lvar, :f21),
              s(:lvar, :f22)),
            s(:send, nil, :assert_equal,
              s(:lvar, :f31),
              s(:lvar, :f32)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\(closed\\)"),
                s(:regopt)),
              s(:lvar, :f4)),
            s(:send,
              s(:lvar, :f4), :sub!,
              s(:regexp,
                s(:str, " \\(closed\\)"),
                s(:regopt)),
              s(:str, "")),
            s(:send, nil, :assert_equal,
              s(:lvar, :f31),
              s(:lvar, :f4))))),
      s(:def, :test_eof,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :ruby,
              s(:str, "-e"),
              s(:dstr,
                s(:str, "      begin\n"),
                s(:str, "        8.times do\n"),
                s(:str, "          p ARGF.eof?\n"),
                s(:str, "          ARGF.gets\n"),
                s(:str, "        end\n"),
                s(:str, "      rescue IOError\n"),
                s(:str, "        puts \"end\"\n"),
                s(:str, "      end\n")),
              s(:send,
                s(:ivar, :@t1), :path),
              s(:send,
                s(:ivar, :@t2), :path),
              s(:send,
                s(:ivar, :@t3), :path)),
            s(:args,
              s(:arg, :f)),
            s(:begin,
              s(:lvasgn, :a,
                s(:send,
                  s(:send,
                    s(:lvar, :f), :read), :split,
                  s(:str, "\n"))),
              s(:block,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:array,
                          s(:str, "false")), :+,
                        s(:begin,
                          s(:send,
                            s(:array,
                              s(:str, "false"),
                              s(:str, "true")), :*,
                            s(:int, 3)))), :+,
                      s(:array,
                        s(:str, "end")))), :each),
                s(:args,
                  s(:arg, :x)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :x),
                  s(:send,
                    s(:lvar, :a), :shift))))),
          s(:lvasgn, :t1,
            s(:send, nil, :open,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@tmpdir)),
                s(:str, "/argf-hoge")),
              s(:str, "w"))),
          s(:send,
            s(:lvar, :t1), :binmode),
          s(:send,
            s(:lvar, :t1), :puts,
            s(:str, "foo")),
          s(:send,
            s(:lvar, :t1), :close),
          s(:lvasgn, :t2,
            s(:send, nil, :open,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@tmpdir)),
                s(:str, "/argf-moge")),
              s(:str, "w"))),
          s(:send,
            s(:lvar, :t2), :binmode),
          s(:send,
            s(:lvar, :t2), :puts,
            s(:str, "bar")),
          s(:send,
            s(:lvar, :t2), :close),
          s(:block,
            s(:send, nil, :ruby,
              s(:str, "-e"),
              s(:str, "STDERR.reopen(STDOUT); ARGF.gets; ARGF.skip; p ARGF.eof?"),
              s(:send,
                s(:lvar, :t1), :path),
              s(:send,
                s(:lvar, :t2), :path)),
            s(:args,
              s(:arg, :f)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "false")),
              s(:send,
                s(:send,
                  s(:lvar, :f), :read), :split,
                s(:regexp,
                  s(:str, "\\n"),
                  s(:regopt))))))),
      s(:def, :test_read,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:str, "p ARGF.read(8)"),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:send, nil, :assert_equal,
            s(:str, "\"1\\n2\\n3\\n4\\n\"\n"),
            s(:send,
              s(:lvar, :f), :read)))),
      s(:def, :test_read2,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      s = \"\"\n"),
              s(:str, "      ARGF.read(8, s)\n"),
              s(:str, "      p s\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:send, nil, :assert_equal,
            s(:str, "\"1\\n2\\n3\\n4\\n\"\n"),
            s(:send,
              s(:lvar, :f), :read)))),
      s(:def, :test_read2_with_not_empty_buffer,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      s = \"0123456789\"\n"),
              s(:str, "      ARGF.read(8, s)\n"),
              s(:str, "      p s\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:send, nil, :assert_equal,
            s(:str, "\"1\\n2\\n3\\n4\\n\"\n"),
            s(:send,
              s(:lvar, :f), :read)))),
      s(:def, :test_read3,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      nil while ARGF.gets\n"),
              s(:str, "      p ARGF.read\n"),
              s(:str, "      p ARGF.read(0, \"\")\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:send, nil, :assert_equal,
            s(:str, "nil\n\"\"\n"),
            s(:send,
              s(:lvar, :f), :read)))),
      s(:def, :test_readpartial,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      s = \"\"\n"),
              s(:str, "      begin\n"),
              s(:str, "        loop do\n"),
              s(:str, "          s << ARGF.readpartial(1)\n"),
              s(:str, "          t = \"\"; ARGF.readpartial(1, t); s << t\n"),
              s(:str, "          # not empty buffer\n"),
              s(:str, "          u = \"abcdef\"; ARGF.readpartial(1, u); s << u\n"),
              s(:str, "        end\n"),
              s(:str, "      rescue EOFError\n"),
              s(:str, "        puts s\n"),
              s(:str, "      end\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:send, nil, :assert_equal,
            s(:str, "1\n2\n3\n4\n5\n6\n"),
            s(:send,
              s(:lvar, :f), :read)))),
      s(:def, :test_readpartial2,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      s = \"\"\n"),
              s(:str, "      begin\n"),
              s(:str, "        loop do\n"),
              s(:str, "          s << ARGF.readpartial(1)\n"),
              s(:str, "          t = \"\"; ARGF.readpartial(1, t); s << t\n"),
              s(:str, "        end\n"),
              s(:str, "      rescue EOFError\n"),
              s(:str, "        $stdout.binmode\n"),
              s(:str, "        puts s\n"),
              s(:str, "      end\n"))),
          s(:args,
            s(:arg, :f)),
          s(:begin,
            s(:send,
              s(:lvar, :f), :binmode),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "foo")),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "bar")),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "baz")),
            s(:send,
              s(:lvar, :f), :close_write),
            s(:send, nil, :assert_equal,
              s(:str, "foo\nbar\nbaz\n"),
              s(:send,
                s(:lvar, :f), :read))))),
      s(:def, :test_readpartial_eof_twice,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-W1"),
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      $stderr = $stdout\n"),
              s(:str, "      print ARGF.readpartial(256)\n"),
              s(:str, "      ARGF.readpartial(256) rescue p($!.class)\n"),
              s(:str, "      ARGF.readpartial(256) rescue p($!.class)\n")),
            s(:send,
              s(:ivar, :@t1), :path)),
          s(:args,
            s(:arg, :f)),
          s(:send, nil, :assert_equal,
            s(:str, "1\n2\nEOFError\nEOFError\n"),
            s(:send,
              s(:lvar, :f), :read)))),
      s(:def, :test_getc,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      s = \"\"\n"),
              s(:str, "      while c = ARGF.getc\n"),
              s(:str, "        s << c\n"),
              s(:str, "      end\n"),
              s(:str, "      puts s\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:send, nil, :assert_equal,
            s(:str, "1\n2\n3\n4\n5\n6\n"),
            s(:send,
              s(:lvar, :f), :read)))),
      s(:def, :test_getbyte,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      s = []\n"),
              s(:str, "      while c = ARGF.getbyte\n"),
              s(:str, "        s << c\n"),
              s(:str, "      end\n"),
              s(:str, "      p s\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:send, nil, :assert_equal,
            s(:str, "[49, 10, 50, 10, 51, 10, 52, 10, 53, 10, 54, 10]\n"),
            s(:send,
              s(:lvar, :f), :read)))),
      s(:def, :test_readchar,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      s = \"\"\n"),
              s(:str, "      begin\n"),
              s(:str, "        while c = ARGF.readchar\n"),
              s(:str, "          s << c\n"),
              s(:str, "        end\n"),
              s(:str, "      rescue EOFError\n"),
              s(:str, "        puts s\n"),
              s(:str, "      end\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:send, nil, :assert_equal,
            s(:str, "1\n2\n3\n4\n5\n6\n"),
            s(:send,
              s(:lvar, :f), :read)))),
      s(:def, :test_readbyte,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      begin\n"),
              s(:str, "        s = []\n"),
              s(:str, "        while c = ARGF.readbyte\n"),
              s(:str, "          s << c\n"),
              s(:str, "        end\n"),
              s(:str, "      rescue EOFError\n"),
              s(:str, "        p s\n"),
              s(:str, "      end\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:send, nil, :assert_equal,
            s(:str, "[49, 10, 50, 10, 51, 10, 52, 10, 53, 10, 54, 10]\n"),
            s(:send,
              s(:lvar, :f), :read)))),
      s(:def, :test_each_line,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      s = []\n"),
              s(:str, "      ARGF.each_line {|l| s << l }\n"),
              s(:str, "      p s\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:send, nil, :assert_equal,
            s(:str, "[\"1\\n\", \"2\\n\", \"3\\n\", \"4\\n\", \"5\\n\", \"6\\n\"]\n"),
            s(:send,
              s(:lvar, :f), :read)))),
      s(:def, :test_each_line_paragraph,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array,
            s(:str, "-e"),
            s(:str, "ARGF.each_line(\"\") {|para| p para}")),
          s(:str, "a\n\nb\n"),
          s(:array,
            s(:str, "\"a\\n\\n\""),
            s(:str, "\"b\\n\"")),
          s(:array))),
      s(:def, :test_each_byte,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      s = []\n"),
              s(:str, "      ARGF.each_byte {|c| s << c }\n"),
              s(:str, "      p s\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:send, nil, :assert_equal,
            s(:str, "[49, 10, 50, 10, 51, 10, 52, 10, 53, 10, 54, 10]\n"),
            s(:send,
              s(:lvar, :f), :read)))),
      s(:def, :test_each_char,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      s = \"\"\n"),
              s(:str, "      ARGF.each_char {|c| s << c }\n"),
              s(:str, "      puts s\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:send, nil, :assert_equal,
            s(:str, "1\n2\n3\n4\n5\n6\n"),
            s(:send,
              s(:lvar, :f), :read)))),
      s(:def, :test_filename,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      begin\n"),
              s(:str, "        puts ARGF.filename.dump\n"),
              s(:str, "      end while ARGF.gets\n"),
              s(:str, "      puts ARGF.filename.dump\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:begin,
            s(:lvasgn, :a,
              s(:send,
                s(:send,
                  s(:lvar, :f), :read), :split,
                s(:str, "\n"))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t1), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t1), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t1), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t2), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t2), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t3), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t3), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t3), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift))))),
      s(:def, :test_filename2,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      begin\n"),
              s(:str, "        puts $FILENAME.dump\n"),
              s(:str, "      end while ARGF.gets\n"),
              s(:str, "      puts $FILENAME.dump\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:begin,
            s(:lvasgn, :a,
              s(:send,
                s(:send,
                  s(:lvar, :f), :read), :split,
                s(:str, "\n"))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t1), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t1), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t1), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t2), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t2), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t3), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t3), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t3), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift))))),
      s(:def, :test_file,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      begin\n"),
              s(:str, "        puts ARGF.file.path.dump\n"),
              s(:str, "      end while ARGF.gets\n"),
              s(:str, "      puts ARGF.file.path.dump\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:begin,
            s(:lvasgn, :a,
              s(:send,
                s(:send,
                  s(:lvar, :f), :read), :split,
                s(:str, "\n"))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t1), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t1), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t1), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t2), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t2), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t3), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t3), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:ivar, :@t3), :path), :dump),
              s(:send,
                s(:lvar, :a), :shift))))),
      s(:def, :test_binmode,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5268,
            s(:str, "[ruby-core:39234]")),
          s(:block,
            s(:send, nil, :open,
              s(:send,
                s(:ivar, :@t3), :path),
              s(:str, "wb")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :write,
              s(:str, "5\r\n6\r\n"))),
          s(:block,
            s(:send, nil, :ruby,
              s(:str, "-e"),
              s(:str, "ARGF.binmode; STDOUT.binmode; puts ARGF.read"),
              s(:send,
                s(:ivar, :@t1), :path),
              s(:send,
                s(:ivar, :@t2), :path),
              s(:send,
                s(:ivar, :@t3), :path)),
            s(:args,
              s(:arg, :f)),
            s(:begin,
              s(:send,
                s(:lvar, :f), :binmode),
              s(:send, nil, :assert_equal,
                s(:str, "1\n2\n3\n4\n5\r\n6\r\n"),
                s(:send,
                  s(:lvar, :f), :read),
                s(:lvar, :bug5268)))))),
      s(:if,
        s(:send,
          s(:const,
            s(:const, nil, :IO), :BINARY), :zero?), nil,
        s(:def, :test_textmode,
          s(:args),
          s(:begin,
            s(:lvasgn, :bug5268,
              s(:str, "[ruby-core:39234]")),
            s(:block,
              s(:send, nil, :open,
                s(:send,
                  s(:ivar, :@t3), :path),
                s(:str, "wb")),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:lvar, :f), :write,
                s(:str, "5\r\n6\r\n"))),
            s(:block,
              s(:send, nil, :ruby,
                s(:str, "-e"),
                s(:str, "STDOUT.binmode; puts ARGF.read"),
                s(:send,
                  s(:ivar, :@t1), :path),
                s(:send,
                  s(:ivar, :@t2), :path),
                s(:send,
                  s(:ivar, :@t3), :path)),
              s(:args,
                s(:arg, :f)),
              s(:begin,
                s(:send,
                  s(:lvar, :f), :binmode),
                s(:send, nil, :assert_equal,
                  s(:str, "1\n2\n3\n4\n5\n6\n"),
                  s(:send,
                    s(:lvar, :f), :read),
                  s(:lvar, :bug5268))))))),
      s(:def, :test_skip,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      ARGF.skip\n"),
              s(:str, "      puts ARGF.gets\n"),
              s(:str, "      ARGF.skip\n"),
              s(:str, "      puts ARGF.read\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:send, nil, :assert_equal,
            s(:str, "1\n3\n4\n5\n6\n"),
            s(:send,
              s(:lvar, :f), :read)))),
      s(:def, :test_skip_in_each_line,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :ruby,
              s(:str, "-e"),
              s(:str, "      ARGF.each_line {|l| print l; ARGF.skip}\n"),
              s(:send,
                s(:ivar, :@t1), :path),
              s(:send,
                s(:ivar, :@t2), :path),
              s(:send,
                s(:ivar, :@t3), :path)),
            s(:args,
              s(:arg, :f)),
            s(:send, nil, :assert_equal,
              s(:str, "1\n3\n5\n"),
              s(:send,
                s(:lvar, :f), :read),
              s(:str, "[ruby-list:49185]"))),
          s(:block,
            s(:send, nil, :ruby,
              s(:str, "-e"),
              s(:str, "      ARGF.each_line {|l| ARGF.skip; puts [l, ARGF.gets].map {|s| s ? s.chomp : s.inspect}.join(\"+\")}\n"),
              s(:send,
                s(:ivar, :@t1), :path),
              s(:send,
                s(:ivar, :@t2), :path),
              s(:send,
                s(:ivar, :@t3), :path)),
            s(:args,
              s(:arg, :f)),
            s(:send, nil, :assert_equal,
              s(:str, "1+3\n4+5\n6+nil\n"),
              s(:send,
                s(:lvar, :f), :read),
              s(:str, "[ruby-list:49185]"))))),
      s(:def, :test_skip_in_each_byte,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:str, "      ARGF.each_byte {|l| print l; ARGF.skip}\n"),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:str, "135"), :unpack,
                s(:str, "C*")), :join,
              s(:str, "")),
            s(:send,
              s(:lvar, :f), :read),
            s(:str, "[ruby-list:49185]")))),
      s(:def, :test_skip_in_each_char,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:ivar, :@t1),
                  s(:str, "あ")),
                s(:array,
                  s(:ivar, :@t2),
                  s(:str, "い")),
                s(:array,
                  s(:ivar, :@t3),
                  s(:str, "う"))), :each),
            s(:args,
              s(:arg, :f),
              s(:arg, :s)),
            s(:send,
              s(:const, nil, :File), :write,
              s(:send,
                s(:lvar, :f), :path),
              s(:lvar, :s),
              s(:hash,
                s(:pair,
                  s(:sym, :mode),
                  s(:str, "w:utf-8"))))),
          s(:block,
            s(:send, nil, :ruby,
              s(:str, "-Eutf-8"),
              s(:str, "-e"),
              s(:str, "      ARGF.each_char {|l| print l; ARGF.skip}\n"),
              s(:send,
                s(:ivar, :@t1), :path),
              s(:send,
                s(:ivar, :@t2), :path),
              s(:send,
                s(:ivar, :@t3), :path)),
            s(:args,
              s(:arg, :f)),
            s(:send, nil, :assert_equal,
              s(:str, "あいう"),
              s(:send,
                s(:lvar, :f), :read),
              s(:str, "[ruby-list:49185]"))))),
      s(:def, :test_skip_in_each_codepoint,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:ivar, :@t1),
                  s(:str, "あ")),
                s(:array,
                  s(:ivar, :@t2),
                  s(:str, "い")),
                s(:array,
                  s(:ivar, :@t3),
                  s(:str, "う"))), :each),
            s(:args,
              s(:arg, :f),
              s(:arg, :s)),
            s(:send,
              s(:const, nil, :File), :write,
              s(:send,
                s(:lvar, :f), :path),
              s(:lvar, :s),
              s(:hash,
                s(:pair,
                  s(:sym, :mode),
                  s(:str, "w:utf-8"))))),
          s(:block,
            s(:send, nil, :ruby,
              s(:str, "-Eutf-8"),
              s(:str, "-Eutf-8"),
              s(:str, "-e"),
              s(:str, "      ARGF.each_codepoint {|l| printf \"%x:\", l; ARGF.skip}\n"),
              s(:send,
                s(:ivar, :@t1), :path),
              s(:send,
                s(:ivar, :@t2), :path),
              s(:send,
                s(:ivar, :@t3), :path)),
            s(:args,
              s(:arg, :f)),
            s(:send, nil, :assert_equal,
              s(:str, "3042:3044:3046:"),
              s(:send,
                s(:lvar, :f), :read),
              s(:str, "[ruby-list:49185]"))))),
      s(:def, :test_close,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      ARGF.close\n"),
              s(:str, "      puts ARGF.read\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:send, nil, :assert_equal,
            s(:str, "3\n4\n5\n6\n"),
            s(:send,
              s(:lvar, :f), :read)))),
      s(:def, :test_close_replace,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      ARGF.close\n"),
              s(:str, "      ARGV.replace ['"),
              s(:begin,
                s(:send,
                  s(:ivar, :@t1), :path)),
              s(:str, "', '"),
              s(:begin,
                s(:send,
                  s(:ivar, :@t2), :path)),
              s(:str, "', '"),
              s(:begin,
                s(:send,
                  s(:ivar, :@t3), :path)),
              s(:str, "']\n"),
              s(:str, "      puts ARGF.read\n"))),
          s(:args,
            s(:arg, :f)),
          s(:send, nil, :assert_equal,
            s(:str, "1\n2\n3\n4\n5\n6\n"),
            s(:send,
              s(:lvar, :f), :read)))),
      s(:def, :test_closed,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      3.times do\n"),
              s(:str, "        p ARGF.closed?\n"),
              s(:str, "        ARGF.gets\n"),
              s(:str, "        ARGF.gets\n"),
              s(:str, "      end\n"),
              s(:str, "      p ARGF.closed?\n"),
              s(:str, "      ARGF.gets\n"),
              s(:str, "      p ARGF.closed?\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:send, nil, :assert_equal,
            s(:str, "false\nfalse\nfalse\nfalse\ntrue\n"),
            s(:send,
              s(:lvar, :f), :read)))),
      s(:def, :test_argv,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:str, "p ARGF.argv; p $*"),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:send,
                s(:array,
                  s(:send,
                    s(:ivar, :@t1), :path),
                  s(:send,
                    s(:ivar, :@t2), :path),
                  s(:send,
                    s(:ivar, :@t3), :path)), :inspect),
              s(:send,
                s(:send,
                  s(:lvar, :f), :gets), :chomp)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:array,
                  s(:send,
                    s(:ivar, :@t1), :path),
                  s(:send,
                    s(:ivar, :@t2), :path),
                  s(:send,
                    s(:ivar, :@t3), :path)), :inspect),
              s(:send,
                s(:send,
                  s(:lvar, :f), :gets), :chomp))))),
      s(:def, :test_readlines_limit_0,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug4024,
            s(:str, "[ruby-dev:42538]")),
          s(:lvasgn, :t,
            s(:send, nil, :make_tempfile)),
          s(:lvasgn, :argf,
            s(:send,
              s(:send,
                s(:const, nil, :ARGF), :class), :new,
              s(:send,
                s(:lvar, :t), :path))),
          s(:kwbegin,
            s(:ensure,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :ArgumentError),
                  s(:lvar, :bug4024)),
                s(:args),
                s(:send,
                  s(:lvar, :argf), :readlines,
                  s(:int, 0))),
              s(:send,
                s(:lvar, :argf), :close))))),
      s(:def, :test_each_line_limit_0,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug4024,
            s(:str, "[ruby-dev:42538]")),
          s(:lvasgn, :t,
            s(:send, nil, :make_tempfile)),
          s(:lvasgn, :argf,
            s(:send,
              s(:send,
                s(:const, nil, :ARGF), :class), :new,
              s(:send,
                s(:lvar, :t), :path))),
          s(:kwbegin,
            s(:ensure,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :ArgumentError),
                  s(:lvar, :bug4024)),
                s(:args),
                s(:send,
                  s(:send,
                    s(:lvar, :argf), :each_line,
                    s(:int, 0)), :next)),
              s(:send,
                s(:lvar, :argf), :close))))),
      s(:def, :test_unreadable,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug4274,
            s(:str, "[ruby-core:34446]")),
          s(:lvasgn, :paths,
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:int, 2))), :map),
              s(:args),
              s(:begin,
                s(:lvasgn, :t,
                  s(:send,
                    s(:const, nil, :Tempfile), :new,
                    s(:str, "bug4274-"))),
                s(:lvasgn, :path,
                  s(:send,
                    s(:lvar, :t), :path)),
                s(:send,
                  s(:lvar, :t), :close!),
                s(:lvar, :path)))),
          s(:lvasgn, :argf,
            s(:send,
              s(:send,
                s(:const, nil, :ARGF), :class), :new,
              s(:splat,
                s(:lvar, :paths)))),
          s(:block,
            s(:send,
              s(:lvar, :paths), :each),
            s(:args,
              s(:arg, :path)),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const,
                  s(:const, nil, :Errno), :ENOENT),
                s(:regexp,
                  s(:str, "- "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Regexp), :quote,
                      s(:lvar, :path))),
                  s(:str, "\\z"),
                  s(:regopt))),
              s(:args),
              s(:send,
                s(:lvar, :argf), :gets))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :argf), :gets),
            s(:lvar, :bug4274)))),
      s(:def, :test_readlines_twice,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5952,
            s(:str, "[ruby-dev:45160]")),
          s(:send, nil, :assert_ruby_status,
            s(:array,
              s(:str, "-e"),
              s(:str, "2.times {STDIN.tty?; readlines}")),
            s(:str, ""),
            s(:lvar, :bug5952)))),
      s(:def, :test_lines,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-W1"),
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      $stderr = $stdout\n"),
              s(:str, "      s = []\n"),
              s(:str, "      ARGF.lines {|l| s << l }\n"),
              s(:str, "      p s\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:begin,
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "deprecated"),
                s(:regopt)),
              s(:send,
                s(:lvar, :f), :gets)),
            s(:send, nil, :assert_equal,
              s(:str, "[\"1\\n\", \"2\\n\", \"3\\n\", \"4\\n\", \"5\\n\", \"6\\n\"]\n"),
              s(:send,
                s(:lvar, :f), :read))))),
      s(:def, :test_bytes,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-W1"),
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      $stderr = $stdout\n"),
              s(:str, "      print Marshal.dump(ARGF.bytes.to_a)\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:begin,
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "deprecated"),
                s(:regopt)),
              s(:send,
                s(:lvar, :f), :gets)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 49),
                s(:int, 10),
                s(:int, 50),
                s(:int, 10),
                s(:int, 51),
                s(:int, 10),
                s(:int, 52),
                s(:int, 10),
                s(:int, 53),
                s(:int, 10),
                s(:int, 54),
                s(:int, 10)),
              s(:send,
                s(:const, nil, :Marshal), :load,
                s(:send,
                  s(:lvar, :f), :read)))))),
      s(:def, :test_chars,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-W1"),
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      $stderr = $stdout\n"),
              s(:str, "      print [Marshal.dump(ARGF.chars.to_a)].pack('m')\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:begin,
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "deprecated"),
                s(:regopt)),
              s(:send,
                s(:lvar, :f), :gets)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "1"),
                s(:str, "\n"),
                s(:str, "2"),
                s(:str, "\n"),
                s(:str, "3"),
                s(:str, "\n"),
                s(:str, "4"),
                s(:str, "\n"),
                s(:str, "5"),
                s(:str, "\n"),
                s(:str, "6"),
                s(:str, "\n")),
              s(:send,
                s(:const, nil, :Marshal), :load,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :f), :read), :unpack,
                    s(:str, "m")), :first)))))),
      s(:def, :test_codepoints,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-W1"),
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      $stderr = $stdout\n"),
              s(:str, "      print Marshal.dump(ARGF.codepoints.to_a)\n")),
            s(:send,
              s(:ivar, :@t1), :path),
            s(:send,
              s(:ivar, :@t2), :path),
            s(:send,
              s(:ivar, :@t3), :path)),
          s(:args,
            s(:arg, :f)),
          s(:begin,
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "deprecated"),
                s(:regopt)),
              s(:send,
                s(:lvar, :f), :gets)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 49),
                s(:int, 10),
                s(:int, 50),
                s(:int, 10),
                s(:int, 51),
                s(:int, 10),
                s(:int, 52),
                s(:int, 10),
                s(:int, 53),
                s(:int, 10),
                s(:int, 54),
                s(:int, 10)),
              s(:send,
                s(:const, nil, :Marshal), :load,
                s(:send,
                  s(:lvar, :f), :read)))))),
      s(:def, :test_read_nonblock,
        s(:args),
        s(:block,
          s(:send, nil, :ruby,
            s(:str, "-e"),
            s(:dstr,
              s(:str, "      $stdout.sync = true\n"),
              s(:str, "      :wait_readable == ARGF.read_nonblock(1, \"\", exception: false) or\n"),
              s(:str, "        abort \"did not return :wait_readable\"\n"),
              s(:str, "\n"),
              s(:str, "      begin\n"),
              s(:str, "        ARGF.read_nonblock(1)\n"),
              s(:str, "        abort 'fail to raise IO::WaitReadable'\n"),
              s(:str, "      rescue IO::WaitReadable\n"),
              s(:str, "      end\n"),
              s(:str, "      puts 'starting select'\n"),
              s(:str, "\n"),
              s(:str, "      IO.select([ARGF]) == [[ARGF], [], []] or\n"),
              s(:str, "        abort 'did not awaken for readability (before byte)'\n"),
              s(:str, "\n"),
              s(:str, "      buf = ''\n"),
              s(:str, "      buf.object_id == ARGF.read_nonblock(1, buf).object_id or\n"),
              s(:str, "        abort \"read destination buffer failed\"\n"),
              s(:str, "      print buf\n"),
              s(:str, "\n"),
              s(:str, "      IO.select([ARGF]) == [[ARGF], [], []] or\n"),
              s(:str, "        abort 'did not awaken for readability (before EOF)'\n"),
              s(:str, "\n"),
              s(:str, "      ARGF.read_nonblock(1, buf, exception: false) == nil or\n"),
              s(:str, "        abort \"EOF should return nil if exception: false\"\n"),
              s(:str, "\n"),
              s(:str, "      begin\n"),
              s(:str, "        ARGF.read_nonblock(1, buf)\n"),
              s(:str, "        abort 'fail to raise IO::WaitReadable'\n"),
              s(:str, "      rescue EOFError\n"),
              s(:str, "        puts 'done with eof'\n"),
              s(:str, "      end\n"))),
          s(:args,
            s(:arg, :f)),
          s(:begin,
            s(:send,
              s(:lvar, :f), :sync=,
              s(:true)),
            s(:send, nil, :assert_equal,
              s(:str, "starting select\n"),
              s(:send,
                s(:lvar, :f), :gets)),
            s(:send,
              s(:lvar, :f), :write,
              s(:str, ".")),
            s(:send, nil, :assert_equal,
              s(:str, "."),
              s(:send,
                s(:lvar, :f), :read,
                s(:int, 1))),
            s(:send,
              s(:lvar, :f), :close_write),
            s(:send, nil, :assert_equal,
              s(:str, "done with eof\n"),
              s(:send,
                s(:lvar, :f), :gets))))),
      s(:def, :test_wrong_type,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array),
          s(:dstr,
            s(:str, "      bug11610 = '[ruby-core:71140] [Bug #11610]'\n"),
            s(:str, "      ARGV[0] = nil\n"),
            s(:str, "      assert_raise(TypeError, bug11610) {gets}\n")))))))
