s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestUnicodeEscape),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_basic,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "Matz - 松本行弘"),
            s(:str, "Matz - 松本行弘")),
          s(:send, nil, :assert_equal,
            s(:str, "Matz - まつもと ゆきひろ"),
            s(:str, "Matz - まつもと ゆきひろ")),
          s(:send, nil, :assert_equal,
            s(:str, "Matz - まつもと ゆきひろ"),
            s(:str, "Matz - まつもと ゆきひろ")),
          s(:send, nil, :assert_equal,
            s(:str, "Matz - まつもと ゆきひろ"),
            s(:str, "Matz - まつもと ゆきひろ")),
          s(:send, nil, :assert_equal,
            s(:str, "Aoyama Gakuin University - 青山学院大学"),
            s(:str, "Aoyama Gakuin University - 青山学院大学")),
          s(:send, nil, :assert_equal,
            s(:str, "Aoyama Gakuin University - 青山学院大学"),
            s(:str, "Aoyama Gakuin University - 青山学院大学")),
          s(:send, nil, :assert_equal,
            s(:str, "青山学院大学"),
            s(:str, "青山学院大学")),
          s(:send, nil, :assert_equal,
            s(:str, "Martin Dürst"),
            s(:str, "Martin Dürst")),
          s(:send, nil, :assert_equal,
            s(:str, "Martin Dürst"),
            s(:str, "Martin Dürst")),
          s(:send, nil, :assert_equal,
            s(:str, "ü"),
            s(:str, "ü")),
          s(:send, nil, :assert_equal,
            s(:str, "Martin Dürst"),
            s(:str, "Martin Dürst")),
          s(:send, nil, :assert_equal,
            s(:str, "Martin Dürst"),
            s(:str, "Martin Dürst")),
          s(:send, nil, :assert_equal,
            s(:str, "ü"),
            s(:str, "ü")),
          s(:send, nil, :assert_equal,
            s(:str, "ü"),
            s(:str, "ü")),
          s(:send, nil, :assert_equal,
            s(:str, "ü"),
            s(:send,
              s(:array,
                s(:str, "ü")), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "Matz - まつもと ゆきひろ"),
            s(:send,
              s(:str, "Matz - まつもと ゆきひろ\n"), :chop)),
          s(:send, nil, :assert_equal,
            s(:str, "Matz - まつもと ゆきひろ"),
            s(:send,
              s(:str, "Matz - まつもと ゆきひろ\n"), :chop)),
          s(:send, nil, :assert_not_equal,
            s(:str, "Matz - まつもと ゆきひろ"),
            s(:send,
              s(:str, "Matz - \\u{307E 3064 3082 3068} \\u{3086 304D 3072 308D}\n"), :chop)),
          s(:send, nil, :assert_not_equal,
            s(:str, "ü"),
            s(:str, "\\u{FC}")),
          s(:send, nil, :assert_not_equal,
            s(:str, "ü"),
            s(:str, "\\u{FC}")),
          s(:send, nil, :assert_not_equal,
            s(:str, "ü"),
            s(:send,
              s(:array,
                s(:str, "\\u{FC}")), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "\\u00fc"),
            s(:send,
              s(:str, "\\"), :+,
              s(:str, "u00fc"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^(\"?)A\\1$"),
              s(:regopt)),
            s(:xstr,
              s(:str, "echo \"A\""))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^(\"?)A\\1$"),
              s(:regopt)),
            s(:xstr,
              s(:str, "echo \"A\""))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^(\"?)ü\\1$"),
              s(:regopt)),
            s(:send,
              s(:xstr,
                s(:begin,
                  s(:send,
                    s(:const, nil, :EnvUtil), :rubybin)),
                s(:str, " -e \"#coding:utf-8\nputs \\\"\\u{FC}\\\"\"")), :force_encoding,
              s(:str, "utf-8"))),
          s(:send, nil, :assert_equal,
            s(:sym, :A),
            s(:sym, :A)),
          s(:send, nil, :assert_equal,
            s(:sym, :a),
            s(:sym, :a)),
          s(:send, nil, :assert_equal,
            s(:sym, :ま),
            s(:sym, :ま)),
          s(:send, nil, :assert_equal,
            s(:sym, :ü),
            s(:sym, :ü)),
          s(:send, nil, :assert_equal,
            s(:sym, :A),
            s(:sym, :A)),
          s(:send, nil, :assert_equal,
            s(:sym, :ü),
            s(:sym, :ü)),
          s(:lvasgn, :bug,
            s(:str, "[ruby-dev:41447]")),
          s(:lvasgn, :sym,
            s(:send,
              s(:str, "\u0000"), :to_sym)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :SyntaxError),
              s(:lvar, :bug)),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:lvar, :sym),
              s(:send, nil, :eval,
                s(:str, ":\"\\u{0}\"")))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :SyntaxError),
              s(:lvar, :bug)),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:lvar, :sym),
              s(:send, nil, :eval,
                s(:str, ":\"\\u0000\"")))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :SyntaxError),
              s(:lvar, :bug)),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:str, "ü\u0000A"), :to_sym),
              s(:send, nil, :eval,
                s(:str, ":\"\\u{fc 0 0041}\"")))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :SyntaxError),
              s(:lvar, :bug)),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:lvar, :sym),
              s(:send, nil, :eval,
                s(:str, ":\"\\x00\"")))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :SyntaxError),
              s(:lvar, :bug)),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:lvar, :sym),
              s(:send, nil, :eval,
                s(:str, ":\"\\0\"")))))),
      s(:def, :test_regexp,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_equal,
            s(:regexp,
              s(:str, "Yukihiro Matsumoto - 松本行弘"),
              s(:regopt)),
            s(:regexp,
              s(:str, "Yukihiro Matsumoto - \\u677E\\u672C\\u884C\\u5F18"),
              s(:regopt))),
          s(:send, nil, :assert_not_equal,
            s(:regexp,
              s(:str, "Yukihiro Matsumoto - 松本行弘"),
              s(:regopt)),
            s(:regexp,
              s(:str, "Yukihiro Matsumoto - \\u{677E 672C 884C 5F18}"),
              s(:regopt))),
          s(:send, nil, :assert_not_equal,
            s(:regexp,
              s(:str, "Matz - まつもと ゆきひろ"),
              s(:regopt)),
            s(:regexp,
              s(:str, "Matz - \\u307E\\u3064\\u3082\\u3068 \\u3086\\u304D\\u3072\\u308D"),
              s(:regopt))),
          s(:send, nil, :assert_not_equal,
            s(:regexp,
              s(:str, "Aoyama Gakuin University - 青山学院大学"),
              s(:regopt)),
            s(:regexp,
              s(:str, "Aoyama Gakuin University - \\u9752\\u5C71\\u5B66\\u9662\\u5927\\u5B66"),
              s(:regopt))),
          s(:send, nil, :assert_not_equal,
            s(:regexp,
              s(:str, "青山学院大学"),
              s(:regopt)),
            s(:regexp,
              s(:str, "\\u9752\\u5C71\\u5B66\\u9662\\u5927\\u5B66"),
              s(:regopt))),
          s(:send, nil, :assert_not_equal,
            s(:regexp,
              s(:str, "Martin Dürst"),
              s(:regopt)),
            s(:regexp,
              s(:str, "Martin D\\u00FCrst"),
              s(:regopt))),
          s(:send, nil, :assert_not_equal,
            s(:regexp,
              s(:str, "ü"),
              s(:regopt)),
            s(:regexp,
              s(:str, "\\u00FC"),
              s(:regopt))),
          s(:send, nil, :assert_not_equal,
            s(:regexp,
              s(:str, "Martin Dürst"),
              s(:regopt)),
            s(:regexp,
              s(:str, "Martin D\\u{FC}rst"),
              s(:regopt))),
          s(:send, nil, :assert_not_equal,
            s(:regexp,
              s(:str, "ü"),
              s(:regopt)),
            s(:regexp,
              s(:str, "\\u{FC}"),
              s(:regopt))),
          s(:send, nil, :assert_not_equal,
            s(:regexp,
              s(:str, "ü"),
              s(:regopt)),
            s(:regexp,
              s(:str, "\\u{FC}"),
              s(:regopt))),
          s(:send, nil, :assert_not_equal,
            s(:regexp,
              s(:str, "ü"),
              s(:regopt, :i)),
            s(:regexp,
              s(:str, "\\u00FC"),
              s(:regopt, :i))),
          s(:send, nil, :assert_equal,
            s(:str, "Yukihiro Matsumoto - \\u677E\\u672C\\u884C\\u5F18"),
            s(:send,
              s(:regexp,
                s(:str, "Yukihiro Matsumoto - \\u677E\\u672C\\u884C\\u5F18"),
                s(:regopt)), :source)),
          s(:send, nil, :assert_equal,
            s(:str, "Yukihiro Matsumoto - \\u{677E 672C 884C 5F18}"),
            s(:send,
              s(:regexp,
                s(:str, "Yukihiro Matsumoto - \\u{677E 672C 884C 5F18}"),
                s(:regopt)), :source)),
          s(:send, nil, :assert_equal,
            s(:str, "Matz - \\u307E\\u3064\\u3082\\u3068 \\u3086\\u304D\\u3072\\u308D"),
            s(:send,
              s(:regexp,
                s(:str, "Matz - \\u307E\\u3064\\u3082\\u3068 \\u3086\\u304D\\u3072\\u308D"),
                s(:regopt)), :source)),
          s(:send, nil, :assert_equal,
            s(:str, "Aoyama Gakuin University - \\u9752\\u5C71\\u5B66\\u9662\\u5927\\u5B66"),
            s(:send,
              s(:regexp,
                s(:str, "Aoyama Gakuin University - \\u9752\\u5C71\\u5B66\\u9662\\u5927\\u5B66"),
                s(:regopt)), :source)),
          s(:send, nil, :assert_equal,
            s(:str, "\\u9752\\u5C71\\u5B66\\u9662\\u5927\\u5B66"),
            s(:send,
              s(:regexp,
                s(:str, "\\u9752\\u5C71\\u5B66\\u9662\\u5927\\u5B66"),
                s(:regopt)), :source)),
          s(:send, nil, :assert_equal,
            s(:str, "Martin D\\u00FCrst"),
            s(:send,
              s(:regexp,
                s(:str, "Martin D\\u00FCrst"),
                s(:regopt)), :source)),
          s(:send, nil, :assert_equal,
            s(:str, "\\u00FC"),
            s(:send,
              s(:regexp,
                s(:str, "\\u00FC"),
                s(:regopt)), :source)),
          s(:send, nil, :assert_equal,
            s(:str, "Martin D\\u{FC}rst"),
            s(:send,
              s(:regexp,
                s(:str, "Martin D\\u{FC}rst"),
                s(:regopt)), :source)),
          s(:send, nil, :assert_equal,
            s(:str, "\\u{FC}"),
            s(:send,
              s(:regexp,
                s(:str, "\\u{FC}"),
                s(:regopt)), :source)),
          s(:send, nil, :assert_equal,
            s(:str, "\\u{FC}"),
            s(:send,
              s(:regexp,
                s(:str, "\\u{FC}"),
                s(:regopt)), :source)),
          s(:send, nil, :assert_equal,
            s(:str, "\\u00FC"),
            s(:send,
              s(:regexp,
                s(:str, "\\u00FC"),
                s(:regopt, :i)), :source)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:str, "Yukihiro Matsumoto - 松本行弘"), :=~,
              s(:regexp,
                s(:str, "Yukihiro Matsumoto - \\u677E\\u672C\\u884C\\u5F18"),
                s(:regopt)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:str, "Yukihiro Matsumoto - 松本行弘"), :=~,
              s(:regexp,
                s(:str, "Yukihiro Matsumoto - \\u677E\\u672C\\u884C"),
                s(:regopt)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:str, "Yukihiro Matsumoto - 松本行弘"), :=~,
              s(:regexp,
                s(:str, "Yukihiro Matsumoto - \\u{677E 672C 884C 5F18}"),
                s(:regopt)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:str, "Yukihiro Matsumoto - 松本行弘"), :=~,
              s(:regexp,
                s(:str, "Yukihiro Matsumoto - \\u{677E 672C 884C 5F18}"),
                s(:regopt)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:str, "Matz - まつもと ゆきひろ"), :=~,
              s(:regexp,
                s(:str, "Matz - \\u307E\\u3064\\u3082\\u3068 \\u3086\\u304D\\u3072\\u308D"),
                s(:regopt)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:str, "Aoyama Gakuin University - 青山学院大学"), :=~,
              s(:regexp,
                s(:str, "Aoyama Gakuin University - \\u9752\\u5C71\\u5B66\\u9662\\u5927\\u5B66"),
                s(:regopt)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:str, "青山学院大学"), :=~,
              s(:regexp,
                s(:str, "\\u9752\\u5C71\\u5B66\\u9662\\u5927\\u5B66"),
                s(:regopt)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:str, "Martin Dürst"), :=~,
              s(:regexp,
                s(:str, "Martin D\\u00FCrst"),
                s(:regopt)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:str, "ü"), :=~,
              s(:regexp,
                s(:str, "\\u00FC"),
                s(:regopt)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:str, "Martin Dürst"), :=~,
              s(:regexp,
                s(:str, "Martin D\\u{FC}rst"),
                s(:regopt)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:str, "ü"), :=~,
              s(:regexp,
                s(:str, "\\u{FC}"),
                s(:regopt)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:str, "ü"), :=~,
              s(:regexp,
                s(:str, "\\u00FC"),
                s(:regopt, :i)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "Martin D\\u00FCrst"),
                s(:regopt)),
              s(:str, "Martin Dürst"))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "\\u00FC"),
                s(:regopt)),
              s(:str, "testü"))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "Martin D\\u{FC}rst"),
                s(:regopt)),
              s(:str, "fooMartin Dürstbar"))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "\\u{FC}"),
                s(:regopt)),
              s(:str, "fooübar"))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:str, "Martin Dürst"), :=~,
              s(:regexp,
                s(:str, "Martin Dürst"),
                s(:regopt)))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:str, "testü"), :=~,
              s(:regexp,
                s(:str, "ü"),
                s(:regopt)))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:str, "fooMartin Dürstbar"), :=~,
              s(:regexp,
                s(:str, "Martin Dürst"),
                s(:regopt)))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:str, "fooübar"), :=~,
              s(:regexp,
                s(:str, "ü"),
                s(:regopt)))),
          s(:send, nil, :assert_match,
            s(:send, nil, :eval,
              s(:str, "/\\u{2a}/")),
            s(:str, "*")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SyntaxError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "/\\u{6666}/n"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SyntaxError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "/\\u{6666}/e"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SyntaxError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "/\\u{6666}/s"))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "/\\u{6666}/u"))))),
      s(:def, :test_dynamic_regexp,
        s(:args),
        s(:send, nil, :assert_match,
          s(:send,
            s(:const, nil, :Regexp), :new,
            s(:str, "Martin D\\u{FC}rst")),
          s(:str, "Martin Dürst"))),
      s(:def, :test_syntax_variants,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "ģ䕧覫췯"),
            s(:str, "ģ䕧覫췯")),
          s(:send, nil, :assert_equal,
            s(:str, "ģ䕧覫췯"),
            s(:str, "ģ䕧覫췯")),
          s(:send, nil, :assert_equal,
            s(:str, "ģ䕧覫췯"),
            s(:str, "ģ䕧覫췯")),
          s(:send, nil, :assert_equal,
            s(:str, "ģ䕧覫췯"),
            s(:str, "ģ䕧覫췯")),
          s(:send, nil, :assert_equal,
            s(:str, "ģ䕧覫췯"),
            s(:str, "ģ䕧覫췯")),
          s(:send, nil, :assert_equal,
            s(:str, "ģ䕧覫췯"),
            s(:str, "ģ䕧覫췯")))),
      s(:def, :test_fulton,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "épée"),
            s(:str, "épée")),
          s(:send, nil, :assert_equal,
            s(:str, "épée"),
            s(:str, "épée")),
          s(:send, nil, :assert_equal,
            s(:str, "épée"),
            s(:str, "épée")),
          s(:send, nil, :assert_equal,
            s(:str, "épée"),
            s(:str, "épée")),
          s(:send, nil, :assert_equal,
            s(:str, "épée"),
            s(:str, "épée")),
          s(:send, nil, :assert_equal,
            s(:str, "épée"),
            s(:str, "épée")),
          s(:send, nil, :assert_equal,
            s(:str, "épée"),
            s(:str, "épée")),
          s(:send, nil, :assert_equal,
            s(:str, "épée"),
            s(:str, "épée")),
          s(:send, nil, :assert_equal,
            s(:str, "öffnen"),
            s(:str, "öffnen")),
          s(:send, nil, :assert_equal,
            s(:str, "öffnen"),
            s(:str, "öffnen")),
          s(:send, nil, :assert_equal,
            s(:str, "öffnen"),
            s(:str, "öffnen")),
          s(:send, nil, :assert_equal,
            s(:str, "öffnen"),
            s(:str, "öffnen")),
          s(:send, nil, :assert_equal,
            s(:str, "öffnen"),
            s(:str, "öffnen")),
          s(:send, nil, :assert_equal,
            s(:str, "öffnen"),
            s(:str, "öffnen")),
          s(:send, nil, :assert_equal,
            s(:str, "öffnen"),
            s(:str, "öffnen")),
          s(:send, nil, :assert_equal,
            s(:str, "öffnen"),
            s(:str, "öffnen")),
          s(:send, nil, :assert_equal,
            s(:str, "öﬀnen"),
            s(:str, "öﬀnen")),
          s(:send, nil, :assert_equal,
            s(:str, "öﬀnen"),
            s(:str, "öﬀnen")),
          s(:send, nil, :assert_equal,
            s(:str, "öﬀnen"),
            s(:str, "öﬀnen")),
          s(:send, nil, :assert_equal,
            s(:str, "öﬀnen"),
            s(:str, "öﬀnen")),
          s(:send, nil, :assert_equal,
            s(:str, "öﬀnen"),
            s(:str, "öﬀnen")),
          s(:send, nil, :assert_equal,
            s(:str, "öﬀnen"),
            s(:str, "öﬀnen")),
          s(:send, nil, :assert_equal,
            s(:str, "öﬀnen"),
            s(:str, "öﬀnen")),
          s(:send, nil, :assert_equal,
            s(:str, "öﬀnen"),
            s(:str, "öﬀnen")),
          s(:send, nil, :assert_equal,
            s(:str, "Straße"),
            s(:str, "Straße")),
          s(:send, nil, :assert_equal,
            s(:str, "Straße"),
            s(:str, "Straße")),
          s(:send, nil, :assert_equal,
            s(:str, "Straße"),
            s(:str, "Straße")),
          s(:send, nil, :assert_equal,
            s(:str, "Straße"),
            s(:str, "Straße")),
          s(:send, nil, :assert_equal,
            s(:str, "Straße"),
            s(:str, "Straße")),
          s(:send, nil, :assert_equal,
            s(:str, "Straße"),
            s(:str, "Straße")),
          s(:send, nil, :assert_equal,
            s(:str, "Straße"),
            s(:str, "Straße")),
          s(:send, nil, :assert_equal,
            s(:str, "Straße"),
            s(:str, "Straße")),
          s(:send, nil, :assert_equal,
            s(:str, "Straße"),
            s(:str, "Straße")))),
      s(:def, :test_edge_cases,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "\u{10FFFF}"),
            s(:str, "\u{10FFFF}")),
          s(:send, nil, :assert_equal,
            s(:str, "􀀀"),
            s(:str, "􀀀")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{FFFFF}"),
            s(:str, "\u{FFFFF}")),
          s(:send, nil, :assert_equal,
            s(:str, "󰀀"),
            s(:str, "󰀀")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{EFFFF}"),
            s(:str, "\u{EFFFF}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{E0000}"),
            s(:str, "\u{E0000}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{DFFFF}"),
            s(:str, "\u{DFFFF}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{D0000}"),
            s(:str, "\u{D0000}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{CFFFF}"),
            s(:str, "\u{CFFFF}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{C0000}"),
            s(:str, "\u{C0000}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{BFFFF}"),
            s(:str, "\u{BFFFF}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{B0000}"),
            s(:str, "\u{B0000}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{AFFFF}"),
            s(:str, "\u{AFFFF}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{A0000}"),
            s(:str, "\u{A0000}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{9FFFF}"),
            s(:str, "\u{9FFFF}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{90000}"),
            s(:str, "\u{90000}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{8FFFF}"),
            s(:str, "\u{8FFFF}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{80000}"),
            s(:str, "\u{80000}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{7FFFF}"),
            s(:str, "\u{7FFFF}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{70000}"),
            s(:str, "\u{70000}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{6FFFF}"),
            s(:str, "\u{6FFFF}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{60000}"),
            s(:str, "\u{60000}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{5FFFF}"),
            s(:str, "\u{5FFFF}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{50000}"),
            s(:str, "\u{50000}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{4FFFF}"),
            s(:str, "\u{4FFFF}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{40000}"),
            s(:str, "\u{40000}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{3FFFF}"),
            s(:str, "\u{3FFFF}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{30000}"),
            s(:str, "\u{30000}")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{2FFFF}"),
            s(:str, "\u{2FFFF}")),
          s(:send, nil, :assert_equal,
            s(:str, "𠀀"),
            s(:str, "𠀀")),
          s(:send, nil, :assert_equal,
            s(:str, "\u{1FFFF}"),
            s(:str, "\u{1FFFF}")),
          s(:send, nil, :assert_equal,
            s(:str, "𐀀"),
            s(:str, "𐀀")),
          s(:send, nil, :assert_equal,
            s(:str, "\uFFFF"),
            s(:str, "\uFFFF")),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:str, "")),
          s(:send, nil, :assert_equal,
            s(:str, "\uD7FF"),
            s(:str, "\uD7FF")),
          s(:send, nil, :assert_equal,
            s(:str, "ࠀ"),
            s(:str, "ࠀ")),
          s(:send, nil, :assert_equal,
            s(:str, "\u07FF"),
            s(:str, "\u07FF")),
          s(:send, nil, :assert_equal,
            s(:str, "\u0080"),
            s(:str, "\u0080")),
          s(:send, nil, :assert_equal,
            s(:str, "\u007F"),
            s(:str, "\u007F")),
          s(:send, nil, :assert_equal,
            s(:str, "\u0000"),
            s(:str, "\u0000")))),
      s(:def, :test_chars,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "A"),
            s(:str, "A")),
          s(:send, nil, :assert_equal,
            s(:str, "y"),
            s(:str, "y")),
          s(:send, nil, :assert_equal,
            s(:str, "\u0000"),
            s(:str, "\u0000")),
          s(:send, nil, :assert_equal,
            s(:str, "\u0000"),
            s(:str, "\u0000")))),
      s(:def, :test_fail,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SyntaxError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "\"\\uabc\""))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SyntaxError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "\"\\uab\""))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SyntaxError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "\"\\ua\""))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SyntaxError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "\"\\u\""))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SyntaxError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "\"\\u{110000}\""))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SyntaxError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "\"\\u{abcdeff}\""))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SyntaxError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "\"\\ughij\""))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SyntaxError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "\"\\u{ghij}\""))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SyntaxError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "\"\\u{123 456 }\""))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SyntaxError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "\"\\u{ 123 456}\""))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SyntaxError)),
            s(:args),
            s(:send, nil, :eval,
              s(:str, "\"\\u{123  456}\""))))))))
