s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestLambdaParameters),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_exact_parameter,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:send,
            s(:begin,
              s(:irange,
                s(:int, 1),
                s(:int, 3))), :each,
            s(:block_pass,
              s(:block,
                s(:send, nil, :lambda),
                s(:args), nil))))),
      s(:def, :test_call_simple,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a)),
                s(:lvar, :a)), :call,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a),
                  s(:arg, :b)),
                s(:array,
                  s(:lvar, :a),
                  s(:lvar, :b))), :call,
              s(:int, 1),
              s(:int, 2))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a)), nil), :call,
              s(:int, 1),
              s(:int, 2))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a)), nil), :call)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args), nil), :call,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a),
                  s(:arg, :b)), nil), :call,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a)),
                s(:lvar, :a)), :call,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a),
                  s(:arg, :b)),
                s(:array,
                  s(:lvar, :a),
                  s(:lvar, :b))), :call,
              s(:int, 1),
              s(:int, 2))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a)), nil), :call,
              s(:int, 1),
              s(:int, 2))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a)), nil), :call)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args), nil), :call,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a),
                  s(:arg, :b)), nil), :call,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))))),
      s(:def, :test_lambda_as_iterator,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:int, 0)),
          s(:send,
            s(:int, 2), :times,
            s(:block_pass,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :_)),
                s(:op_asgn,
                  s(:lvasgn, :a), :+,
                  s(:int, 1))))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:lvar, :a)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:int, 1), :times,
              s(:block_pass,
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args),
                  s(:op_asgn,
                    s(:lvasgn, :a), :+,
                    s(:int, 1)))))),
          s(:lvasgn, :bug9605,
            s(:str, "[ruby-core:61468] [Bug #9605]")),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :ArgumentError),
              s(:lvar, :bug9605)),
            s(:args),
            s(:send,
              s(:int, 1), :times,
              s(:block_pass,
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args,
                    s(:arg, :n)),
                  s(:op_asgn,
                    s(:lvasgn, :a), :+,
                    s(:int, 1)))))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:lvar, :a),
            s(:lvar, :bug9605)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :ArgumentError),
              s(:lvar, :bug9605)),
            s(:args),
            s(:lvasgn, :a,
              s(:send,
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 2))), :map,
                s(:block_pass,
                  s(:block,
                    s(:send, nil, :lambda),
                    s(:args,
                      s(:arg, :x),
                      s(:arg, :y)),
                    s(:send,
                      s(:lvar, :x), :+,
                      s(:lvar, :y))))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 3)),
            s(:lvar, :a),
            s(:lvar, :bug9605)))),
      s(:def, :test_call_rest_args,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:restarg, :a)),
                s(:lvar, :a)), :call,
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:array)),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a),
                  s(:arg, :b),
                  s(:restarg, :c)),
                s(:array,
                  s(:lvar, :a),
                  s(:lvar, :b),
                  s(:lvar, :c))), :call,
              s(:int, 1),
              s(:int, 2))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a),
                  s(:restarg, :b)), nil), :call)))),
      s(:def, :test_call_opt_args,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4)),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a),
                  s(:arg, :b),
                  s(:optarg, :c,
                    s(:int, 3)),
                  s(:optarg, :d,
                    s(:int, 4))),
                s(:array,
                  s(:lvar, :a),
                  s(:lvar, :b),
                  s(:lvar, :c),
                  s(:lvar, :d))), :call,
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4)),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a),
                  s(:arg, :b),
                  s(:optarg, :c,
                    s(:int, 0)),
                  s(:optarg, :d,
                    s(:int, 4))),
                s(:array,
                  s(:lvar, :a),
                  s(:lvar, :b),
                  s(:lvar, :c),
                  s(:lvar, :d))), :call,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a),
                  s(:optarg, :b,
                    s(:int, 1))), nil), :call)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a),
                  s(:optarg, :b,
                    s(:int, 1))), nil), :call,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))))),
      s(:def, :test_call_rest_and_opt,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:array)),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a),
                  s(:optarg, :b,
                    s(:int, 2)),
                  s(:optarg, :c,
                    s(:int, 3)),
                  s(:restarg, :d)),
                s(:array,
                  s(:lvar, :a),
                  s(:lvar, :b),
                  s(:lvar, :c),
                  s(:lvar, :d))), :call,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:array)),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a),
                  s(:optarg, :b,
                    s(:int, 0)),
                  s(:optarg, :c,
                    s(:int, 3)),
                  s(:restarg, :d)),
                s(:array,
                  s(:lvar, :a),
                  s(:lvar, :b),
                  s(:lvar, :c),
                  s(:lvar, :d))), :call,
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:array,
                s(:int, 4),
                s(:int, 5),
                s(:int, 6))),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a),
                  s(:optarg, :b,
                    s(:int, 0)),
                  s(:optarg, :c,
                    s(:int, 0)),
                  s(:restarg, :d)),
                s(:array,
                  s(:lvar, :a),
                  s(:lvar, :b),
                  s(:lvar, :c),
                  s(:lvar, :d))), :call,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 5),
              s(:int, 6))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :a),
                  s(:optarg, :b,
                    s(:int, 1)),
                  s(:restarg, :c)), nil), :call)))),
      s(:def, :test_call_with_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :f,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :a),
                s(:arg, :b),
                s(:optarg, :c,
                  s(:int, 3)),
                s(:restarg, :d),
                s(:blockarg, :e)),
              s(:array,
                s(:lvar, :a),
                s(:lvar, :b),
                s(:lvar, :c),
                s(:lvar, :d),
                s(:send,
                  s(:lvar, :e), :call,
                  s(:send,
                    s(:lvar, :d), :+,
                    s(:array,
                      s(:lvar, :a),
                      s(:lvar, :b),
                      s(:lvar, :c))))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:array),
              s(:int, 6)),
            s(:block,
              s(:send,
                s(:lvar, :f), :call,
                s(:int, 1),
                s(:int, 2)),
              s(:args,
                s(:arg, :z)),
              s(:block,
                s(:send,
                  s(:lvar, :z), :inject),
                s(:args,
                  s(:arg, :s),
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :s), :+,
                  s(:lvar, :x))))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:blockarg, :b)),
                s(:lvar, :b)), :call)),
          s(:block,
            s(:send, nil, :foo),
            s(:args),
            s(:send, nil, :puts,
              s(:str, "bogus block "))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:block,
              s(:send,
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args,
                    s(:blockarg, :b)),
                  s(:send,
                    s(:lvar, :b), :call)), :call),
              s(:args),
              s(:int, 1))),
          s(:lvasgn, :b,
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:block,
              s(:send,
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args,
                    s(:blockarg, :b)),
                  s(:send,
                    s(:lvar, :b), :call)), :call),
              s(:args),
              s(:int, 1))),
          s(:send, nil, :assert_nil,
            s(:lvar, :b)))),
      s(:def, :test_call_block_from_lambda,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9605,
            s(:str, "[ruby-core:61470] [Bug #9605]")),
          s(:lvasgn, :plus,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :y)),
              s(:send,
                s(:lvar, :x), :+,
                s(:lvar, :y)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError),
              s(:lvar, :bug9605)),
            s(:args),
            s(:send,
              s(:send, nil, :proc,
                s(:block_pass,
                  s(:lvar, :plus))), :call,
              s(:array,
                s(:int, 1),
                s(:int, 2)))))),
      s(:def, :test_instance_exec,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug12568,
            s(:str, "[ruby-core:76300] [Bug #12568]")),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :ArgumentError),
              s(:lvar, :bug12568)),
            s(:args),
            s(:send, nil, :instance_exec,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:block_pass,
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args,
                    s(:optarg, :a,
                      s(:array))),
                  s(:lvar, :a))))))),
      s(:def, :yield_1,
        s(:args,
          s(:arg, :arg)),
        s(:yield,
          s(:lvar, :arg))),
      s(:block,
        s(:send, nil, :tap),
        s(:args,
          s(:shadowarg, :bug9605),
          s(:shadowarg, :expected),
          s(:shadowarg, :result)),
        s(:begin,
          s(:lvasgn, :bug9605,
            s(:str, "[ruby-core:65887] [Bug #9605] arity check should be relaxed")),
          s(:lvasgn, :expected,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:str, "array"),
                  s(:lvar, :expected)),
                s(:array,
                  s(:str, "to_ary"),
                  s(:send,
                    s(:send,
                      s(:const, nil, :Struct), :new,
                      s(:sym, :to_ary)), :new,
                    s(:lvar, :expected)))), :product,
              s(:array,
                s(:array,
                  s(:str, "proc"),
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args,
                      s(:arg, :a),
                      s(:arg, :b),
                      s(:arg, :c)),
                    s(:array,
                      s(:lvar, :a),
                      s(:lvar, :b),
                      s(:lvar, :c)))),
                s(:array,
                  s(:str, "lambda"),
                  s(:block,
                    s(:send, nil, :lambda),
                    s(:args,
                      s(:arg, :a),
                      s(:arg, :b),
                      s(:arg, :c)),
                    s(:array,
                      s(:lvar, :a),
                      s(:lvar, :b),
                      s(:lvar, :c)))))),
            s(:args,
              s(:mlhs,
                s(:arg, :vtype),
                s(:arg, :val)),
              s(:mlhs,
                s(:arg, :btype),
                s(:arg, :block))),
            s(:block,
              s(:send, nil, :define_method,
                s(:dstr,
                  s(:str, "test_yield_relaxed("),
                  s(:begin,
                    s(:lvar, :vtype)),
                  s(:str, ",&"),
                  s(:begin,
                    s(:lvar, :btype)),
                  s(:str, ")"))),
              s(:args),
              s(:begin,
                s(:lvasgn, :result,
                  s(:block,
                    s(:send, nil, :assert_nothing_raised,
                      s(:const, nil, :ArgumentError),
                      s(:lvar, :bug9605)),
                    s(:args),
                    s(:break,
                      s(:send, nil, :yield_1,
                        s(:lvar, :val),
                        s(:block_pass,
                          s(:lvar, :block)))))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :expected),
                  s(:lvar, :result),
                  s(:lvar, :bug9605))))))),
      s(:def, :foo,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:nil),
          s(:send,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:blockarg, :b)),
              s(:lvar, :b)), :call))),
      s(:def, :test_in_basic_object,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5966,
            s(:str, "[ruby-core:42349]")),
          s(:lvasgn, :called,
            s(:false)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :BasicObject), :new), :instance_eval),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :lambda),
                s(:args),
                s(:lvasgn, :called,
                  s(:true))), :call)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:lvar, :called),
            s(:lvar, :bug5966)))),
      s(:def, :test_location_on_error,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6151,
            s(:str, "[ruby-core:43314]")),
          s(:lvasgn, :called,
            s(:int, 0)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :line),
              s(:lvasgn, :f)),
            s(:array,
              s(:int, 122),
              s(:block,
                s(:send, nil, :lambda),
                s(:args),
                s(:begin,
                  s(:op_asgn,
                    s(:lvasgn, :called), :+,
                    s(:int, 1)),
                  s(:true))))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:lvar, :f), :call,
                s(:int, 42)))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:send,
                s(:send,
                  s(:lvar, :e), :backtrace), :first),
              s(:sym, :start_with?),
              s(:dstr,
                s(:begin,
                  s(:str, "(string)")),
                s(:str, ":"),
                s(:begin,
                  s(:lvar, :line)),
                s(:str, ":"))),
            s(:lvar, :bug6151)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:lvar, :called)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:int, 42), :times,
                s(:block_pass,
                  s(:lvar, :f))))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:send,
                s(:send,
                  s(:lvar, :e), :backtrace), :first),
              s(:sym, :start_with?),
              s(:dstr,
                s(:begin,
                  s(:str, "(string)")),
                s(:str, ":"),
                s(:begin,
                  s(:lvar, :line)),
                s(:str, ":"))),
            s(:lvar, :bug6151)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:lvar, :called)))),
      s(:def, :return_in_current,
        s(:args,
          s(:arg, :val)),
        s(:begin,
          s(:send,
            s(:int, 1), :tap,
            s(:block_pass,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:restarg)),
                s(:return,
                  s(:int, 0))))),
          s(:lvar, :val))),
      s(:def, :yield_block,
        s(:args),
        s(:yield)),
      s(:def, :return_in_callee,
        s(:args,
          s(:arg, :val)),
        s(:begin,
          s(:send, nil, :yield_block,
            s(:block_pass,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:restarg)),
                s(:return,
                  s(:int, 0))))),
          s(:lvar, :val))),
      s(:def, :test_return,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature8693,
            s(:str, "[ruby-core:56193] [Feature #8693]")),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send, nil, :return_in_current,
              s(:int, 42)),
            s(:lvar, :feature8693)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send, nil, :return_in_callee,
              s(:int, 42)),
            s(:lvar, :feature8693)))),
      s(:def, :test_do_lambda_source_location,
        s(:args),
        s(:begin,
          s(:lvasgn, :exp_lineno,
            s(:send,
              s(:int, 159), :+,
              s(:int, 3))),
          s(:lvasgn, :lmd,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :y),
                s(:arg, :z)), nil)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :file),
              s(:lvasgn, :lineno)),
            s(:send,
              s(:lvar, :lmd), :source_location)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^"),
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :quote,
                  s(:str, "(string)"))),
              s(:str, "$"),
              s(:regopt)),
            s(:lvar, :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :exp_lineno),
            s(:lvar, :lineno),
            s(:str, "must be at the beginning of the block")))),
      s(:def, :test_brace_lambda_source_location,
        s(:args),
        s(:begin,
          s(:lvasgn, :exp_lineno,
            s(:send,
              s(:int, 171), :+,
              s(:int, 3))),
          s(:lvasgn, :lmd,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :x),
                s(:arg, :y),
                s(:arg, :z)), nil)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :file),
              s(:lvasgn, :lineno)),
            s(:send,
              s(:lvar, :lmd), :source_location)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^"),
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :quote,
                  s(:str, "(string)"))),
              s(:str, "$"),
              s(:regopt)),
            s(:lvar, :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :exp_lineno),
            s(:lvar, :lineno),
            s(:str, "must be at the beginning of the block")))))))
