s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "tmpdir")),
  s(:send, nil, :require,
    s(:str, "fileutils")),
  s(:class,
    s(:const, nil, :TestDir),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@verbose,
            s(:gvar, :$VERBOSE)),
          s(:gvasgn, :$VERBOSE,
            s(:nil)),
          s(:ivasgn, :@root,
            s(:send,
              s(:const, nil, :File), :realpath,
              s(:send,
                s(:const, nil, :Dir), :mktmpdir,
                s(:str, "__test_dir__")))),
          s(:ivasgn, :@nodir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@root),
              s(:str, "dummy"))),
          s(:for,
            s(:lvasgn, :i),
            s(:irange,
              s(:str, "a"),
              s(:str, "z")),
            s(:if,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :i), :ord), :%,
                  s(:int, 2)), :==,
                s(:int, 0)),
              s(:send,
                s(:const, nil, :FileUtils), :touch,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:ivar, :@root),
                  s(:lvar, :i))),
              s(:send,
                s(:const, nil, :FileUtils), :mkdir,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:ivar, :@root),
                  s(:lvar, :i))))))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:gvasgn, :$VERBOSE,
            s(:ivar, :@verbose)),
          s(:if,
            s(:send,
              s(:const, nil, :File), :directory?,
              s(:ivar, :@root)),
            s(:send,
              s(:const, nil, :FileUtils), :remove_entry_secure,
              s(:ivar, :@root)), nil))),
      s(:def, :test_seek,
        s(:args),
        s(:begin,
          s(:lvasgn, :dir,
            s(:send,
              s(:const, nil, :Dir), :open,
              s(:ivar, :@root))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :cache,
                  s(:array)),
                s(:block,
                  s(:send, nil, :loop),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :pos,
                      s(:send,
                        s(:lvar, :dir), :tell)),
                    s(:if,
                      s(:lvasgn, :name,
                        s(:send,
                          s(:lvar, :dir), :read)), nil,
                      s(:break)),
                    s(:send,
                      s(:lvar, :cache), :<<,
                      s(:array,
                        s(:lvar, :pos),
                        s(:lvar, :name))))),
                s(:for,
                  s(:mlhs,
                    s(:lvasgn, :x),
                    s(:lvasgn, :y)),
                  s(:block,
                    s(:send,
                      s(:lvar, :cache), :sort_by),
                    s(:args,
                      s(:arg, :z)),
                    s(:send,
                      s(:send,
                        s(:lvar, :z), :[],
                        s(:int, 0)), :%,
                      s(:int, 3))),
                  s(:begin,
                    s(:send,
                      s(:lvar, :dir), :seek,
                      s(:lvar, :x)),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :y),
                      s(:send,
                        s(:lvar, :dir), :read))))),
              s(:send,
                s(:lvar, :dir), :close))))),
      s(:def, :test_nodir,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const,
              s(:const, nil, :Errno), :ENOENT)),
          s(:args),
          s(:send,
            s(:const, nil, :Dir), :open,
            s(:ivar, :@nodir)))),
      s(:def, :test_inspect,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Dir), :open,
                s(:ivar, :@root))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "^#<Dir:"),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Regexp), :quote,
                    s(:ivar, :@root))),
                s(:str, ">$"),
                s(:regopt)),
              s(:send,
                s(:lvar, :d), :inspect)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "^#<Dir:.*>$"),
                s(:regopt)),
              s(:send,
                s(:send,
                  s(:const, nil, :Dir), :allocate), :inspect))),
          s(:send,
            s(:lvar, :d), :close))),
      s(:def, :test_path,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Dir), :open,
                s(:ivar, :@root))),
            s(:send, nil, :assert_equal,
              s(:ivar, :@root),
              s(:send,
                s(:lvar, :d), :path)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:send,
                  s(:const, nil, :Dir), :allocate), :path))),
          s(:send,
            s(:lvar, :d), :close))),
      s(:def, :test_set_pos,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Dir), :open,
                s(:ivar, :@root))),
            s(:block,
              s(:send, nil, :loop),
              s(:args),
              s(:begin,
                s(:lvasgn, :i,
                  s(:send,
                    s(:lvar, :d), :pos)),
                s(:if,
                  s(:lvasgn, :x,
                    s(:send,
                      s(:lvar, :d), :read)), nil,
                  s(:break)),
                s(:send,
                  s(:lvar, :d), :pos=,
                  s(:lvar, :i)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :x),
                  s(:send,
                    s(:lvar, :d), :read))))),
          s(:send,
            s(:lvar, :d), :close))),
      s(:def, :test_rewind,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Dir), :open,
                s(:ivar, :@root))),
            s(:lvasgn, :a,
              s(:block,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 0),
                      s(:int, 5))), :map),
                s(:args),
                s(:send,
                  s(:lvar, :d), :read))),
            s(:send,
              s(:lvar, :d), :rewind),
            s(:lvasgn, :b,
              s(:block,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 0),
                      s(:int, 5))), :map),
                s(:args),
                s(:send,
                  s(:lvar, :d), :read))),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:lvar, :b))),
          s(:send,
            s(:lvar, :d), :close))),
      s(:def, :test_chdir,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:ivasgn, :@pwd,
              s(:send,
                s(:const, nil, :Dir), :pwd)),
            s(:ivasgn, :@env_home,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "HOME"))),
            s(:ivasgn, :@env_logdir,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "LOGDIR"))),
            s(:send,
              s(:const, nil, :ENV), :delete,
              s(:str, "HOME")),
            s(:send,
              s(:const, nil, :ENV), :delete,
              s(:str, "LOGDIR")),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :Errno), :ENOENT)),
              s(:args),
              s(:send,
                s(:const, nil, :Dir), :chdir,
                s(:ivar, :@nodir))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const, nil, :Dir), :chdir)),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "HOME"),
              s(:ivar, :@pwd)),
            s(:block,
              s(:send,
                s(:const, nil, :Dir), :chdir),
              s(:args),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:ivar, :@pwd),
                  s(:send,
                    s(:const, nil, :Dir), :pwd)),
                s(:send,
                  s(:const, nil, :Dir), :chdir,
                  s(:ivar, :@root)),
                s(:send, nil, :assert_equal,
                  s(:ivar, :@root),
                  s(:send,
                    s(:const, nil, :Dir), :pwd))))),
          s(:begin,
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:const, nil, :Dir), :chdir,
                  s(:ivar, :@pwd)),
                s(:resbody, nil, nil,
                  s(:send, nil, :abort,
                    s(:dstr,
                      s(:str, "cannot return the original directory: "),
                      s(:begin,
                        s(:ivar, :@pwd))))), nil)),
            s(:if,
              s(:ivar, :@env_home),
              s(:send,
                s(:const, nil, :ENV), :[]=,
                s(:str, "HOME"),
                s(:ivar, :@env_home)),
              s(:send,
                s(:const, nil, :ENV), :delete,
                s(:str, "HOME"))),
            s(:if,
              s(:ivar, :@env_logdir),
              s(:send,
                s(:const, nil, :ENV), :[]=,
                s(:str, "LOGDIR"),
                s(:ivar, :@env_logdir)),
              s(:send,
                s(:const, nil, :ENV), :delete,
                s(:str, "LOGDIR")))))),
      s(:def, :test_chroot_nodir,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :NotImplementedError),
            s(:const,
              s(:const, nil, :Errno), :ENOENT),
            s(:const,
              s(:const, nil, :Errno), :EPERM)),
          s(:args),
          s(:send,
            s(:const, nil, :Dir), :chroot,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@nodir),
              s(:str, ""))))),
      s(:def, :test_close,
        s(:args),
        s(:begin,
          s(:lvasgn, :d,
            s(:send,
              s(:const, nil, :Dir), :open,
              s(:ivar, :@root))),
          s(:send,
            s(:lvar, :d), :close),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :IOError)),
            s(:args),
            s(:send,
              s(:lvar, :d), :close)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :IOError)),
            s(:args),
            s(:send,
              s(:lvar, :d), :read)))),
      s(:def, :test_glob,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:block,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:array,
                      s(:str, "."),
                      s(:str, "..")), :+,
                    s(:send,
                      s(:begin,
                        s(:irange,
                          s(:str, "a"),
                          s(:str, "z"))), :to_a))), :map),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@root),
                s(:lvar, :f))),
            s(:send,
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:ivar, :@root),
                  s(:str, "*")),
                s(:const,
                  s(:const, nil, :File), :FNM_DOTMATCH)), :sort)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:ivar, :@root)), :+,
              s(:send,
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:str, "a"),
                        s(:str, "z"))), :map),
                  s(:args,
                    s(:arg, :f)),
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:ivar, :@root),
                    s(:lvar, :f))), :sort)),
            s(:send,
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:array,
                  s(:ivar, :@root),
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:ivar, :@root),
                    s(:str, "*")))), :sort)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:ivar, :@root)), :+,
              s(:send,
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:str, "a"),
                        s(:str, "z"))), :map),
                  s(:args,
                    s(:arg, :f)),
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:ivar, :@root),
                    s(:lvar, :f))), :sort)),
            s(:send,
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:send,
                  s(:send,
                    s(:ivar, :@root), :+,
                    s(:str, "\u0000\u0000\u0000")), :+,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:ivar, :@root),
                    s(:str, "*")))), :sort)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:str, "a"),
                        s(:str, "z"))), :step,
                    s(:int, 2)), :map),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:ivar, :@root),
                    s(:lvar, :f)),
                  s(:str, ""))), :sort),
            s(:send,
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:ivar, :@root),
                  s(:str, "*/"))), :sort)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@root),
                s(:str, "//a"))),
            s(:send,
              s(:const, nil, :Dir), :glob,
              s(:send,
                s(:ivar, :@root), :+,
                s(:str, "//a")))),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@root),
              s(:str, "{}"))),
          s(:send, nil, :assert_equal,
            s(:block,
              s(:send,
                s(:array,
                  s(:str, "{}"),
                  s(:str, "a")), :map),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@root),
                s(:lvar, :f))),
            s(:send,
              s(:const, nil, :Dir), :glob,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@root),
                s(:str, "{\\{\\},a}")))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:const, nil, :Dir), :glob,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@root),
                s(:str, "[")))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:const, nil, :Dir), :glob,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@root),
                s(:str, "[a-\\")))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@root),
                s(:str, "a"))),
            s(:send,
              s(:const, nil, :Dir), :glob,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@root),
                s(:str, "a\\")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:block,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:str, "a"),
                      s(:str, "f"))), :map),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:ivar, :@root),
                  s(:lvar, :f))), :sort),
            s(:send,
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:ivar, :@root),
                  s(:str, "[abc/def]"))), :sort)),
          s(:block,
            s(:send, nil, :open,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@root),
                s(:str, "}}{}")),
              s(:str, "wb")),
            s(:args), nil),
          s(:block,
            s(:send, nil, :open,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@root),
                s(:str, "}}a")),
              s(:str, "wb")),
            s(:args), nil),
          s(:send, nil, :assert_equal,
            s(:block,
              s(:send,
                s(:array,
                  s(:str, "}}{}"),
                  s(:str, "}}a")), :map),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@root),
                s(:lvar, :f))),
            s(:send,
              s(:const, nil, :Dir), :glob,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@root),
                s(:str, "}}{\\{\\},a}")))),
          s(:send, nil, :assert_equal,
            s(:block,
              s(:send,
                s(:array,
                  s(:str, "}}{}"),
                  s(:str, "}}a"),
                  s(:str, "b"),
                  s(:str, "c")), :map),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@root),
                s(:lvar, :f))),
            s(:send,
              s(:const, nil, :Dir), :glob,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@root),
                s(:str, "{\\}\\}{\\{\\},a},b,c}")))))),
      s(:def, :test_glob_recursive,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6977,
            s(:str, "[ruby-core:47418]")),
          s(:lvasgn, :bug8006,
            s(:str, "[ruby-core:53108] [Bug #8006]")),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@root)),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_include,
                s(:send,
                  s(:const, nil, :Dir), :glob,
                  s(:str, "a/**/*"),
                  s(:const,
                    s(:const, nil, :File), :FNM_DOTMATCH)),
                s(:str, "a/."),
                s(:lvar, :bug8006)),
              s(:send,
                s(:const, nil, :FileUtils), :mkdir_p,
                s(:str, "a/b/c/d/e/f")),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "a/b/c/d/e/f")),
                s(:send,
                  s(:const, nil, :Dir), :glob,
                  s(:str, "a/**/e/f")),
                s(:lvar, :bug6977)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "a/b/c/d/e/f")),
                s(:send,
                  s(:const, nil, :Dir), :glob,
                  s(:str, "a/**/d/e/f")),
                s(:lvar, :bug6977)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "a/b/c/d/e/f")),
                s(:send,
                  s(:const, nil, :Dir), :glob,
                  s(:str, "a/**/c/d/e/f")),
                s(:lvar, :bug6977)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "a/b/c/d/e/f")),
                s(:send,
                  s(:const, nil, :Dir), :glob,
                  s(:str, "a/**/b/c/d/e/f")),
                s(:lvar, :bug6977)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "a/b/c/d/e/f")),
                s(:send,
                  s(:const, nil, :Dir), :glob,
                  s(:str, "a/**/c/?/e/f")),
                s(:lvar, :bug6977)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "a/b/c/d/e/f")),
                s(:send,
                  s(:const, nil, :Dir), :glob,
                  s(:str, "a/**/c/**/d/e/f")),
                s(:lvar, :bug6977)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "a/b/c/d/e/f")),
                s(:send,
                  s(:const, nil, :Dir), :glob,
                  s(:str, "a/**/c/**/d/e/f")),
                s(:lvar, :bug6977)),
              s(:lvasgn, :bug8283,
                s(:str, "[ruby-core:54387] [Bug #8283]")),
              s(:lvasgn, :dirs,
                s(:array,
                  s(:str, "a/.x"),
                  s(:str, "a/b/.y"))),
              s(:send,
                s(:const, nil, :FileUtils), :mkdir_p,
                s(:lvar, :dirs)),
              s(:block,
                s(:send,
                  s(:lvar, :dirs), :map),
                s(:args,
                  s(:arg, :dir)),
                s(:block,
                  s(:send, nil, :open,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :dir)),
                      s(:str, "/z")),
                    s(:str, "w")),
                  s(:args), nil)),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:send,
                  s(:send,
                    s(:const, nil, :Dir), :glob,
                    s(:str, "a/**/z")), :sort),
                s(:lvar, :bug8283)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "a/.x/z")),
                s(:send,
                  s(:const, nil, :Dir), :glob,
                  s(:str, "a/**/.x/z")),
                s(:lvar, :bug8283)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "a/.x/z")),
                s(:send,
                  s(:const, nil, :Dir), :glob,
                  s(:str, "a/.x/**/z")),
                s(:lvar, :bug8283)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "a/b/.y/z")),
                s(:send,
                  s(:const, nil, :Dir), :glob,
                  s(:str, "a/**/.y/z")),
                s(:lvar, :bug8283)))))),
      s(:def, :assert_entries,
        s(:args,
          s(:arg, :entries)),
        s(:begin,
          s(:send,
            s(:lvar, :entries), :sort!),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:str, "."),
                s(:str, "..")), :+,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:str, "a"),
                    s(:str, "z"))), :to_a)),
            s(:lvar, :entries)))),
      s(:def, :test_entries,
        s(:args),
        s(:send, nil, :assert_entries,
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :open,
              s(:ivar, :@root)),
            s(:args,
              s(:arg, :dir)),
            s(:send,
              s(:lvar, :dir), :entries)))),
      s(:def, :test_foreach,
        s(:args),
        s(:send, nil, :assert_entries,
          s(:send,
            s(:send,
              s(:const, nil, :Dir), :foreach,
              s(:ivar, :@root)), :to_a))),
      s(:def, :test_dir_enc,
        s(:args),
        s(:begin,
          s(:lvasgn, :dir,
            s(:send,
              s(:const, nil, :Dir), :open,
              s(:ivar, :@root),
              s(:hash,
                s(:pair,
                  s(:sym, :encoding),
                  s(:str, "UTF-8"))))),
          s(:kwbegin,
            s(:ensure,
              s(:while,
                s(:lvasgn, :name,
                  s(:send,
                    s(:lvar, :dir), :read)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:const, nil, :Encoding), :find,
                    s(:str, "UTF-8")),
                  s(:send,
                    s(:lvar, :name), :encoding))),
              s(:send,
                s(:lvar, :dir), :close))),
          s(:lvasgn, :dir,
            s(:send,
              s(:const, nil, :Dir), :open,
              s(:ivar, :@root),
              s(:hash,
                s(:pair,
                  s(:sym, :encoding),
                  s(:str, "ASCII-8BIT"))))),
          s(:kwbegin,
            s(:ensure,
              s(:while,
                s(:lvasgn, :name,
                  s(:send,
                    s(:lvar, :dir), :read)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:const, nil, :Encoding), :find,
                    s(:str, "ASCII-8BIT")),
                  s(:send,
                    s(:lvar, :name), :encoding))),
              s(:send,
                s(:lvar, :dir), :close))))),
      s(:def, :test_unknown_keywords,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8060,
            s(:str, "[ruby-dev:47152] [Bug #8060]")),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:regexp,
                s(:str, "unknown keyword"),
                s(:regopt)),
              s(:lvar, :bug8060)),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Dir), :open,
                s(:ivar, :@root),
                s(:hash,
                  s(:pair,
                    s(:sym, :xawqij),
                    s(:str, "a")))),
              s(:args), nil)))),
      s(:def, :test_symlink,
        s(:args),
        s(:begin,
          s(:kwbegin,
            s(:rescue,
              s(:block,
                s(:send,
                  s(:array,
                    s(:str, "dummy"),
                    s(:splat,
                      s(:irange,
                        s(:str, "a"),
                        s(:str, "z")))), :each),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:const, nil, :File), :symlink,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:ivar, :@root),
                    s(:lvar, :f)),
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:ivar, :@root),
                    s(:dstr,
                      s(:str, "symlink-"),
                      s(:begin,
                        s(:lvar, :f)))))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :NotImplementedError),
                  s(:const,
                    s(:const, nil, :Errno), :EACCES)), nil,
                s(:return)), nil)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:splat,
                        s(:irange,
                          s(:str, "a"),
                          s(:str, "z"))),
                      s(:splat,
                        s(:irange,
                          s(:str, "symlink-a"),
                          s(:str, "symlink-z")))), :each_slice,
                    s(:int, 2)), :map),
                s(:args,
                  s(:arg, :f),
                  s(:arg, :_)),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:ivar, :@root),
                  s(:send,
                    s(:lvar, :f), :+,
                    s(:str, "/")))), :sort),
            s(:send,
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:ivar, :@root),
                  s(:str, "*/"))), :sort)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:ivar, :@root), :+,
                s(:str, "/")),
              s(:splat,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:array,
                          s(:splat,
                            s(:irange,
                              s(:str, "a"),
                              s(:str, "z")))), :each_slice,
                        s(:int, 2)), :map),
                    s(:args,
                      s(:arg, :f),
                      s(:arg, :_)),
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:ivar, :@root),
                      s(:send,
                        s(:lvar, :f), :+,
                        s(:str, "/")))), :sort))),
            s(:send,
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:ivar, :@root),
                  s(:str, "**/"))), :sort)))),
      s(:def, :test_glob_metachar,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8597,
            s(:str, "[ruby-core:55764] [Bug #8597]")),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:const, nil, :Dir), :glob,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@root),
                s(:str, "<"))),
            s(:lvar, :bug8597)))),
      s(:def, :test_glob_cases,
        s(:args),
        s(:begin,
          s(:lvasgn, :feature5994,
            s(:str, "[ruby-core:42469] [Feature #5994]")),
          s(:send,
            s(:lvar, :feature5994), :<<,
            s(:str, "\nDir.glob should return the filename with actual cases on the filesystem")),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@root),
                s(:str, "a"))),
            s(:args),
            s(:begin,
              s(:block,
                s(:send, nil, :open,
                  s(:str, "FileWithCases"),
                  s(:str, "w")),
                s(:args), nil),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :exist?,
                  s(:str, "filewithcases")), nil,
                s(:return)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "FileWithCases")),
                s(:send,
                  s(:const, nil, :Dir), :glob,
                  s(:str, "filewithcases")),
                s(:lvar, :feature5994)))),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@root)),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a/FileWithCases")),
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:str, "A/filewithcases")),
              s(:lvar, :feature5994))))),
      s(:def, :test_glob_super_root,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9648,
            s(:str, "[ruby-core:61552] [Bug #9648]")),
          s(:lvasgn, :roots,
            s(:send,
              s(:const, nil, :Dir), :glob,
              s(:str, "/*"))),
          s(:send, nil, :assert_equal,
            s(:block,
              s(:send,
                s(:lvar, :roots), :map),
              s(:args,
                s(:arg, :n)),
              s(:dstr,
                s(:str, "/.."),
                s(:begin,
                  s(:lvar, :n)))),
            s(:send,
              s(:const, nil, :Dir), :glob,
              s(:str, "/../*")),
            s(:lvar, :bug9648)))),
      s(:if,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "mswin|mingw"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM)),
        s(:def, :test_glob_legacy_short_name,
          s(:args),
          s(:begin,
            s(:lvasgn, :bug10819,
              s(:str, "[ruby-core:67954] [Bug #10819]")),
            s(:lvasgn, :bug11206,
              s(:str, "[ruby-core:69435] [Bug #11206]")),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A\\w:"),
                  s(:regopt)),
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:str, "ProgramFiles"))), nil,
              s(:send, nil, :skip)),
            s(:lvasgn, :short,
              s(:dstr,
                s(:back_ref, :$&),
                s(:str, "/PROGRA~1"))),
            s(:if,
              s(:send,
                s(:const, nil, :File), :directory?,
                s(:lvar, :short)), nil,
              s(:send, nil, :skip)),
            s(:lvasgn, :entries,
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :short)),
                  s(:str, "/Common*")))),
            s(:send, nil, :assert_not_empty,
              s(:lvar, :entries),
              s(:lvar, :bug10819)),
            s(:lvasgn, :long,
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:lvar, :short))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :long)),
                  s(:str, "/Common*"))),
              s(:lvar, :entries),
              s(:lvar, :bug10819)),
            s(:lvasgn, :wild,
              s(:send,
                s(:lvar, :short), :sub,
                s(:regexp,
                  s(:str, "1\\z"),
                  s(:regopt)),
                s(:str, "*"))),
            s(:send, nil, :assert_not_include,
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:lvar, :wild)),
              s(:lvar, :long),
              s(:lvar, :bug11206)),
            s(:send, nil, :assert_include,
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:lvar, :wild),
                s(:const,
                  s(:const, nil, :File), :FNM_SHORTNAME)),
              s(:lvar, :long),
              s(:lvar, :bug10819)),
            s(:send, nil, :assert_empty,
              s(:send,
                s(:lvar, :entries), :-,
                s(:send,
                  s(:const, nil, :Dir), :glob,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :wild)),
                    s(:str, "/Common*")),
                  s(:const,
                    s(:const, nil, :File), :FNM_SHORTNAME))),
              s(:lvar, :bug10819)))), nil),
      s(:def, :test_home,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :env_home,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "HOME"))),
            s(:lvasgn, :env_logdir,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "LOGDIR"))),
            s(:send,
              s(:const, nil, :ENV), :delete,
              s(:str, "HOME")),
            s(:send,
              s(:const, nil, :ENV), :delete,
              s(:str, "LOGDIR")),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const, nil, :Dir), :home)),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const, nil, :Dir), :home,
                s(:str, ""))),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "HOME"),
              s(:ivar, :@nodir)),
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:ivar, :@nodir),
                  s(:send,
                    s(:const, nil, :Dir), :home)),
                s(:send, nil, :assert_equal,
                  s(:ivar, :@nodir),
                  s(:send,
                    s(:const, nil, :Dir), :home,
                    s(:str, ""))))),
            s(:block,
              s(:send,
                s(:array,
                  s(:str, "no:such:user"),
                  s(:str, "留守:番")), :each),
              s(:args,
                s(:arg, :user)),
              s(:block,
                s(:send, nil, :assert_raise_with_message,
                  s(:const, nil, :ArgumentError),
                  s(:regexp,
                    s(:begin,
                      s(:lvar, :user)),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:const, nil, :Dir), :home,
                  s(:lvar, :user))))),
          s(:begin,
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "HOME"),
              s(:lvar, :env_home)),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "LOGDIR"),
              s(:lvar, :env_logdir))))),
      s(:def, :test_symlinks_not_resolved,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Dir), :mktmpdir),
          s(:args,
            s(:arg, :dirname)),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:lvar, :dirname)),
            s(:args),
            s(:begin,
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:const, nil, :File), :symlink,
                    s(:str, "some-dir"),
                    s(:str, "dir-symlink")),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :NotImplementedError),
                      s(:const,
                        s(:const, nil, :Errno), :EACCES)), nil,
                    s(:return)), nil)),
              s(:send,
                s(:const, nil, :Dir), :mkdir,
                s(:str, "some-dir")),
              s(:send,
                s(:const, nil, :File), :write,
                s(:str, "some-dir/foo"),
                s(:str, "some content")),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "dir-symlink"),
                  s(:str, "some-dir")),
                s(:send,
                  s(:send,
                    s(:const, nil, :Dir), :[],
                    s(:str, "*")), :sort)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "dir-symlink"),
                  s(:str, "some-dir"),
                  s(:str, "some-dir/foo")),
                s(:send,
                  s(:send,
                    s(:const, nil, :Dir), :[],
                    s(:str, "**/*")), :sort)))))),
      s(:def, :test_fileno,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Dir), :open,
            s(:str, ".")),
          s(:args,
            s(:arg, :d)),
          s(:if,
            s(:send,
              s(:lvar, :d), :respond_to?,
              s(:sym, :fileno)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Integer),
              s(:send,
                s(:lvar, :d), :fileno)),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :NotImplementedError)),
              s(:args),
              s(:send,
                s(:lvar, :d), :fileno))))))))
