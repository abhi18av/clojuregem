s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "timeout")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:class,
    s(:const, nil, :TestSignal),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:if,
        s(:send,
          s(:const, nil, :Process), :respond_to?,
          s(:sym, :kill)),
        s(:def, :test_signal,
          s(:args),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :x,
                  s(:int, 0)),
                s(:lvasgn, :oldtrap,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Signal), :trap,
                      s(:sym, :INT)),
                    s(:args,
                      s(:arg, :sig)),
                    s(:lvasgn, :x,
                      s(:int, 2)))),
                s(:send,
                  s(:const, nil, :Process), :kill,
                  s(:sym, :INT),
                  s(:send,
                    s(:const, nil, :Process), :pid)),
                s(:block,
                  s(:send,
                    s(:int, 10), :times),
                  s(:args),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:int, 2), :==,
                        s(:lvar, :x)),
                      s(:break), nil),
                    s(:send, nil, :sleep,
                      s(:float, 0.1)))),
                s(:send, nil, :assert_equal,
                  s(:int, 2),
                  s(:lvar, :x)),
                s(:block,
                  s(:send,
                    s(:const, nil, :Signal), :trap,
                    s(:sym, :INT)),
                  s(:args),
                  s(:send, nil, :raise,
                    s(:str, "Interrupt"))),
                s(:block,
                  s(:send, nil, :assert_raise_with_message,
                    s(:const, nil, :RuntimeError),
                    s(:regexp,
                      s(:str, "Interrupt"),
                      s(:regopt))),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Process), :kill,
                      s(:sym, :INT),
                      s(:send,
                        s(:const, nil, :Process), :pid)),
                    s(:send, nil, :sleep,
                      s(:float, 0.1))))),
              s(:if,
                s(:lvar, :oldtrap),
                s(:send,
                  s(:const, nil, :Signal), :trap,
                  s(:sym, :INT),
                  s(:lvar, :oldtrap)), nil)))), nil),
      s(:if,
        s(:and,
          s(:send,
            s(:const, nil, :Process), :respond_to?,
            s(:sym, :kill)),
          s(:send,
            s(:const, nil, :Process), :respond_to?,
            s(:sym, :pgroup))),
        s(:def, :test_signal_process_group,
          s(:args),
          s(:begin,
            s(:lvasgn, :bug4362,
              s(:str, "[ruby-dev:43169]")),
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:lvar, :bug4362)),
              s(:args),
              s(:begin,
                s(:lvasgn, :pid,
                  s(:send,
                    s(:const, nil, :Process), :spawn,
                    s(:send,
                      s(:const, nil, :EnvUtil), :rubybin),
                    s(:str, "-e"),
                    s(:str, "sleep 10"),
                    s(:hash,
                      s(:pair,
                        s(:sym, :pgroup),
                        s(:true))))),
                s(:send,
                  s(:const, nil, :Process), :kill,
                  s(:sym, :"-TERM"),
                  s(:lvar, :pid)),
                s(:send,
                  s(:const, nil, :Process), :waitpid,
                  s(:lvar, :pid)),
                s(:send, nil, :assert_equal,
                  s(:true),
                  s(:send,
                    s(:gvar, :$?), :signaled?)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Signal), :list), :[],
                    s(:str, "TERM")),
                  s(:send,
                    s(:gvar, :$?), :termsig)))))), nil),
      s(:if,
        s(:send,
          s(:const, nil, :Process), :respond_to?,
          s(:sym, :kill)),
        s(:def, :test_exit_action,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:send,
                  s(:const, nil, :Signal), :list), :[],
                s(:lvasgn, :sig,
                  s(:str, "USR1"))),
              s(:lvasgn, :term,
                s(:sym, :TERM)),
              s(:begin,
                s(:lvasgn, :sig,
                  s(:str, "INT")),
                s(:lvasgn, :term,
                  s(:sym, :KILL)))),
            s(:block,
              s(:send,
                s(:const, nil, :IO), :popen,
                s(:array,
                  s(:send,
                    s(:const, nil, :EnvUtil), :rubybin),
                  s(:str, "-e"),
                  s(:dstr,
                    s(:str, "        Signal.trap(:"),
                    s(:begin,
                      s(:lvar, :sig)),
                    s(:str, ", \"EXIT\")\n"),
                    s(:str, "        STDOUT.syswrite(\"a\")\n"),
                    s(:str, "        Thread.start { sleep(2) }\n"),
                    s(:str, "        STDIN.sysread(4096)\n"))),
                s(:str, "r+")),
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:lvasgn, :pid,
                  s(:send,
                    s(:lvar, :io), :pid)),
                s(:send,
                  s(:lvar, :io), :sysread,
                  s(:int, 1)),
                s(:send, nil, :sleep,
                  s(:float, 0.1)),
                s(:block,
                  s(:send, nil, :assert_nothing_raised,
                    s(:str, "[ruby-dev:26128]")),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Process), :kill,
                      s(:lvar, :term),
                      s(:lvar, :pid)),
                    s(:kwbegin,
                      s(:rescue,
                        s(:block,
                          s(:send,
                            s(:const, nil, :Timeout), :timeout,
                            s(:int, 3)),
                          s(:args),
                          s(:send,
                            s(:const, nil, :Process), :waitpid,
                            s(:lvar, :pid))),
                        s(:resbody,
                          s(:array,
                            s(:const,
                              s(:const, nil, :Timeout), :Error)), nil,
                          s(:begin,
                            s(:if,
                              s(:lvar, :term),
                              s(:begin,
                                s(:send,
                                  s(:const, nil, :Process), :kill,
                                  s(:lvar, :term),
                                  s(:lvar, :pid)),
                                s(:lvasgn, :term,
                                  s(:begin,
                                    s(:if,
                                      s(:send,
                                        s(:lvar, :term), :!=,
                                        s(:sym, :KILL)),
                                      s(:sym, :KILL), nil))),
                                s(:retry)), nil),
                            s(:send, nil, :raise))), nil)))))))), nil),
      s(:if,
        s(:send,
          s(:const, nil, :Process), :respond_to?,
          s(:sym, :kill)),
        s(:def, :test_invalid_signal_name,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :kill,
                s(:sym, :XXXXXXXXXX),
                s(:gvar, :$$))),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :ArgumentError),
                s(:regexp,
                  s(:str, "\\u{30eb 30d3 30fc}"),
                  s(:regopt))),
              s(:args),
              s(:send,
                s(:const, nil, :Process), :kill,
                s(:str, "ルビー"),
                s(:gvar, :$$))))), nil),
      s(:def, :test_signal_exception,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :SignalException), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :SignalException), :new,
              s(:int, -1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :SignalException), :new,
              s(:sym, :XXXXXXXXXX))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:regexp,
                s(:str, "\\u{30eb 30d3 30fc}"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:const, nil, :SignalException), :new,
              s(:str, "ルビー"))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Signal), :list), :each),
            s(:args,
              s(:arg, :signm),
              s(:arg, :signo)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :signm), :==,
                  s(:str, "EXIT")),
                s(:next), nil),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:const, nil, :SignalException), :new,
                    s(:lvar, :signm)), :signo),
                s(:lvar, :signo)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:const, nil, :SignalException), :new,
                    s(:send,
                      s(:lvar, :signm), :to_sym)), :signo),
                s(:lvar, :signo)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:const, nil, :SignalException), :new,
                    s(:lvar, :signo)), :signo),
                s(:lvar, :signo)))))),
      s(:def, :test_interrupt,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :Interrupt)),
          s(:args),
          s(:send, nil, :raise,
            s(:send,
              s(:const, nil, :Interrupt), :new)))),
      s(:if,
        s(:send,
          s(:const, nil, :Process), :respond_to?,
          s(:sym, :kill)),
        s(:def, :test_signal2,
          s(:args),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :x,
                  s(:false)),
                s(:lvasgn, :oldtrap,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Signal), :trap,
                      s(:sym, :INT)),
                    s(:args,
                      s(:arg, :sig)),
                    s(:lvasgn, :x,
                      s(:true)))),
                s(:send,
                  s(:const, nil, :GC), :start),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :ArgumentError)),
                  s(:args),
                  s(:send,
                    s(:const, nil, :Process), :kill)),
                s(:block,
                  s(:send,
                    s(:const, nil, :Timeout), :timeout,
                    s(:int, 10)),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :x,
                      s(:false)),
                    s(:send,
                      s(:const, nil, :Process), :kill,
                      s(:send,
                        s(:send,
                          s(:const, nil, :SignalException), :new,
                          s(:sym, :INT)), :signo),
                      s(:gvar, :$$)),
                    s(:until,
                      s(:lvar, :x),
                      s(:send, nil, :sleep,
                        s(:float, 0.01))),
                    s(:lvasgn, :x,
                      s(:false)),
                    s(:send,
                      s(:const, nil, :Process), :kill,
                      s(:str, "INT"),
                      s(:gvar, :$$)),
                    s(:until,
                      s(:lvar, :x),
                      s(:send, nil, :sleep,
                        s(:float, 0.01))),
                    s(:lvasgn, :x,
                      s(:false)),
                    s(:send,
                      s(:const, nil, :Process), :kill,
                      s(:str, "SIGINT"),
                      s(:gvar, :$$)),
                    s(:until,
                      s(:lvar, :x),
                      s(:send, nil, :sleep,
                        s(:float, 0.01))),
                    s(:lvasgn, :x,
                      s(:false)),
                    s(:lvasgn, :o,
                      s(:send,
                        s(:const, nil, :Object), :new)),
                    s(:defs,
                      s(:lvar, :o), :to_str,
                      s(:args),
                      s(:str, "SIGINT")),
                    s(:send,
                      s(:const, nil, :Process), :kill,
                      s(:lvar, :o),
                      s(:gvar, :$$)),
                    s(:until,
                      s(:lvar, :x),
                      s(:send, nil, :sleep,
                        s(:float, 0.01))))),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :ArgumentError)),
                  s(:args),
                  s(:send,
                    s(:const, nil, :Process), :kill,
                    s(:send,
                      s(:const, nil, :Object), :new),
                    s(:gvar, :$$)))),
              s(:if,
                s(:lvar, :oldtrap),
                s(:send,
                  s(:const, nil, :Signal), :trap,
                  s(:sym, :INT),
                  s(:lvar, :oldtrap)), nil)))), nil),
      s(:if,
        s(:send,
          s(:const, nil, :Process), :respond_to?,
          s(:sym, :kill)),
        s(:def, :test_trap,
          s(:args),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :oldtrap,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Signal), :trap,
                      s(:sym, :INT)),
                    s(:args,
                      s(:arg, :sig)), nil)),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :ArgumentError)),
                  s(:args),
                  s(:send,
                    s(:const, nil, :Signal), :trap)),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :SecurityError)),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :s,
                      s(:send,
                        s(:block,
                          s(:send, nil, :proc),
                          s(:args), nil), :taint)),
                    s(:send,
                      s(:const, nil, :Signal), :trap,
                      s(:sym, :INT),
                      s(:lvar, :s)))),
                s(:send,
                  s(:const, nil, :Signal), :trap,
                  s(:sym, :INT),
                  s(:nil)),
                s(:send,
                  s(:const, nil, :Signal), :trap,
                  s(:sym, :INT),
                  s(:str, "")),
                s(:send,
                  s(:const, nil, :Signal), :trap,
                  s(:sym, :INT),
                  s(:str, "SIG_IGN")),
                s(:send,
                  s(:const, nil, :Signal), :trap,
                  s(:sym, :INT),
                  s(:str, "IGNORE")),
                s(:send,
                  s(:const, nil, :Signal), :trap,
                  s(:sym, :INT),
                  s(:str, "SIG_DFL")),
                s(:send,
                  s(:const, nil, :Signal), :trap,
                  s(:sym, :INT),
                  s(:str, "SYSTEM_DEFAULT")),
                s(:send,
                  s(:const, nil, :Signal), :trap,
                  s(:sym, :INT),
                  s(:str, "EXIT")),
                s(:send,
                  s(:const, nil, :Signal), :trap,
                  s(:sym, :INT),
                  s(:str, "xxxxxx")),
                s(:send,
                  s(:const, nil, :Signal), :trap,
                  s(:sym, :INT),
                  s(:str, "xxxx")),
                s(:send,
                  s(:const, nil, :Signal), :trap,
                  s(:send,
                    s(:send,
                      s(:const, nil, :SignalException), :new,
                      s(:sym, :INT)), :signo),
                  s(:str, "SIG_DFL")),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :ArgumentError)),
                  s(:args),
                  s(:send,
                    s(:const, nil, :Signal), :trap,
                    s(:int, -1),
                    s(:str, "xxxx"))),
                s(:lvasgn, :o,
                  s(:send,
                    s(:const, nil, :Object), :new)),
                s(:defs,
                  s(:lvar, :o), :to_str,
                  s(:args),
                  s(:str, "SIGINT")),
                s(:send,
                  s(:const, nil, :Signal), :trap,
                  s(:lvar, :o),
                  s(:str, "SIG_DFL")),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :ArgumentError)),
                  s(:args),
                  s(:send,
                    s(:const, nil, :Signal), :trap,
                    s(:str, "XXXXXXXXXX"),
                    s(:str, "SIG_DFL"))),
                s(:block,
                  s(:send, nil, :assert_raise_with_message,
                    s(:const, nil, :ArgumentError),
                    s(:regexp,
                      s(:str, "\\u{30eb 30d3 30fc}"),
                      s(:regopt))),
                  s(:args),
                  s(:send,
                    s(:const, nil, :Signal), :trap,
                    s(:str, "ルビー"),
                    s(:str, "SIG_DFL")))),
              s(:if,
                s(:lvar, :oldtrap),
                s(:send,
                  s(:const, nil, :Signal), :trap,
                  s(:sym, :INT),
                  s(:lvar, :oldtrap)), nil)))), nil),
      s(:block,
        s(:send,
          s(:array,
            s(:str, "KILL"),
            s(:str, "STOP")), :each),
        s(:args,
          s(:arg, :sig)),
        s(:if,
          s(:send,
            s(:send,
              s(:const, nil, :Signal), :list), :key?,
            s(:lvar, :sig)),
          s(:block,
            s(:send, nil, :define_method,
              s(:dstr,
                s(:str, "test_trap_uncatchable_"),
                s(:begin,
                  s(:lvar, :sig)))),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :Errno), :EINVAL),
                s(:dstr,
                  s(:str, "SIG"),
                  s(:begin,
                    s(:lvar, :sig)),
                  s(:str, " is not allowed to be caught"))),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :Signal), :trap,
                  s(:lvar, :sig)),
                s(:args), nil))), nil)),
      s(:def, :test_sigexit,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:str, "Signal.trap(:EXIT) {print \"OK\"}"),
            s(:array,
              s(:str, "OK"))),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:str, "Signal.trap(\"EXIT\") {print \"OK\"}"),
            s(:array,
              s(:str, "OK"))),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:str, "Signal.trap(:SIGEXIT) {print \"OK\"}"),
            s(:array,
              s(:str, "OK"))),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:str, "Signal.trap(\"SIGEXIT\") {print \"OK\"}"),
            s(:array,
              s(:str, "OK"))),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:str, "Signal.trap(0) {print \"OK\"}"),
            s(:array,
              s(:str, "OK"))))),
      s(:if,
        s(:send,
          s(:const, nil, :Process), :respond_to?,
          s(:sym, :kill)),
        s(:def, :test_kill_immediately_before_termination,
          s(:args),
          s(:begin,
            s(:or,
              s(:send,
                s(:send,
                  s(:const, nil, :Signal), :list), :[],
                s(:lvasgn, :sig,
                  s(:str, "USR1"))),
              s(:lvasgn, :sig,
                s(:str, "INT"))),
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-e"),
                s(:dstr,
                  s(:str, "      Signal.trap(:"),
                  s(:begin,
                    s(:lvar, :sig)),
                  s(:str, ") { STDOUT.syswrite(\"foo\") }\n"),
                  s(:str, "      Process.kill :"),
                  s(:begin,
                    s(:lvar, :sig)),
                  s(:str, ", $$\n"))),
              s(:str, ""),
              s(:array,
                s(:str, "foo"))))), nil),
      s(:if,
        s(:send,
          s(:send,
            s(:const, nil, :Signal), :list), :key?,
          s(:str, "QUIT")),
        s(:def, :test_trap_system_default,
          s(:args),
          s(:send, nil, :assert_separately,
            s(:array),
            s(:dstr,
              s(:str, "      trap(:QUIT, \"SYSTEM_DEFAULT\")\n"),
              s(:str, "      assert_equal(\"SYSTEM_DEFAULT\", trap(:QUIT, \"DEFAULT\"))\n")))), nil),
      s(:def, :test_reserved_signal,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Signal), :trap,
                s(:sym, :SEGV)),
              s(:args), nil)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Signal), :trap,
                s(:sym, :BUS)),
              s(:args), nil)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Signal), :trap,
                s(:sym, :ILL)),
              s(:args), nil)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Signal), :trap,
                s(:sym, :FPE)),
              s(:args), nil)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Signal), :trap,
                s(:sym, :VTALRM)),
              s(:args), nil)))),
      s(:def, :test_signame,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Signal), :list), :each),
            s(:args,
              s(:arg, :name),
              s(:arg, :num)),
            s(:send, nil, :assert_equal,
              s(:lvar, :num),
              s(:send,
                s(:send,
                  s(:const, nil, :Signal), :list), :[],
                s(:send,
                  s(:const, nil, :Signal), :signame,
                  s(:lvar, :num))),
              s(:lvar, :name))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:const, nil, :Signal), :signame,
              s(:int, -1))),
          s(:lvasgn, :signums,
            s(:send,
              s(:send,
                s(:const, nil, :Signal), :list), :invert)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:const, nil, :Signal), :signame,
              s(:block,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:int, 1000))), :find),
                s(:args,
                  s(:arg, :num)),
                s(:send,
                  s(:send,
                    s(:lvar, :signums), :[],
                    s(:lvar, :num)), :!)))))),
      s(:if,
        s(:send,
          s(:const, nil, :Process), :respond_to?,
          s(:sym, :kill)),
        s(:def, :test_signame_delivered,
          s(:args),
          s(:block,
            s(:send,
              s(:int, 10), :times),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :IO), :popen,
                s(:array,
                  s(:send,
                    s(:const, nil, :EnvUtil), :rubybin),
                  s(:str, "-e"),
                  s(:dstr,
                    s(:str, "        Signal.trap(\"INT\") do |signo|\n"),
                    s(:str, "          signame = Signal.signame(signo)\n"),
                    s(:str, "          Marshal.dump(signame, STDOUT)\n"),
                    s(:str, "          STDOUT.flush\n"),
                    s(:str, "          exit 0\n"),
                    s(:str, "        end\n"),
                    s(:str, "        Process.kill(\"INT\", $$)\n"),
                    s(:str, "        sleep 1  # wait signal deliver\n")),
                  s(:hash,
                    s(:pair,
                      s(:sym, :err),
                      s(:const,
                        s(:const, nil, :File), :NULL))))),
              s(:args,
                s(:arg, :child)),
              s(:begin,
                s(:lvasgn, :signame,
                  s(:send,
                    s(:const, nil, :Marshal), :load,
                    s(:lvar, :child))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :signame),
                  s(:str, "INT")))))), nil),
      s(:if,
        s(:send,
          s(:const, nil, :Process), :respond_to?,
          s(:sym, :kill)),
        s(:def, :test_trap_puts,
          s(:args),
          s(:send, nil, :assert_in_out_err,
            s(:array),
            s(:dstr,
              s(:str, "      Signal.trap(:INT) {\n"),
              s(:str, "          # for enable internal io mutex\n"),
              s(:str, "          STDOUT.sync = false\n"),
              s(:str, "          # larger than internal io buffer\n"),
              s(:str, "          print \"a\"*10000\n"),
              s(:str, "      }\n"),
              s(:str, "      Process.kill :INT, $$\n"),
              s(:str, "      sleep 0.1\n")),
            s(:array,
              s(:send,
                s(:str, "a"), :*,
                s(:int, 10000))),
            s(:array))), nil),
      s(:if,
        s(:and,
          s(:send,
            s(:const, nil, :Process), :respond_to?,
            s(:sym, :kill)),
          s(:send,
            s(:send,
              s(:const, nil, :Signal), :list), :key?,
            s(:str, "HUP"))),
        s(:def, :test_hup_me,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_separately,
              s(:array),
              s(:dstr,
                s(:str, "    trap(:HUP, \"DEFAULT\")\n"),
                s(:str, "    assert_raise(SignalException) {\n"),
                s(:str, "      Process.kill('HUP', Process.pid)\n"),
                s(:str, "    }\n"))),
            s(:lvasgn, :bug8137,
              s(:str, "[ruby-dev:47182] [Bug #8137]")),
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:lvar, :bug8137)),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :Timeout), :timeout,
                  s(:int, 1)),
                s(:args),
                s(:send,
                  s(:const, nil, :Process), :kill,
                  s(:int, 0),
                  s(:send,
                    s(:const, nil, :Process), :pid)))))), nil),
      s(:if,
        s(:send,
          s(:const, nil, :Process), :respond_to?,
          s(:sym, :kill)),
        s(:def, :test_ignored_interrupt,
          s(:args),
          s(:begin,
            s(:lvasgn, :bug9820,
              s(:str, "[ruby-dev:48203] [Bug #9820]")),
            s(:send, nil, :assert_separately,
              s(:array,
                s(:str, "-"),
                s(:lvar, :bug9820)),
              s(:dstr,
                s(:str, "      bug = ARGV.shift\n"),
                s(:str, "      trap(:INT, \"IGNORE\")\n"),
                s(:str, "      assert_nothing_raised(SignalException, bug) do\n"),
                s(:str, "        Process.kill(:INT, $$)\n"),
                s(:str, "      end\n"))),
            s(:if,
              s(:lvasgn, :trap,
                s(:send,
                  s(:send,
                    s(:const, nil, :Signal), :list), :[],
                  s(:str, "TRAP"))),
              s(:begin,
                s(:lvasgn, :bug9820,
                  s(:str, "[ruby-dev:48592] [Bug #9820]")),
                s(:lvasgn, :status,
                  s(:send, nil, :assert_in_out_err,
                    s(:array,
                      s(:str, "-e"),
                      s(:str, "Process.kill(:TRAP, $$)")))),
                s(:send, nil, :assert_predicate,
                  s(:lvar, :status),
                  s(:sym, :signaled?),
                  s(:lvar, :bug9820)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :trap),
                  s(:send,
                    s(:lvar, :status), :termsig),
                  s(:lvar, :bug9820))), nil),
            s(:if,
              s(:send,
                s(:send,
                  s(:const, nil, :Signal), :list), :[],
                s(:str, "CONT")),
              s(:begin,
                s(:lvasgn, :bug9820,
                  s(:str, "[ruby-dev:48606] [Bug #9820]")),
                s(:send, nil, :assert_ruby_status,
                  s(:array,
                    s(:str, "-e"),
                    s(:str, "Process.kill(:CONT, $$)")))), nil))), nil))))
