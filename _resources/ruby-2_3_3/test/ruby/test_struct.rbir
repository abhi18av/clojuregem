s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "timeout")),
  s(:module,
    s(:const, nil, :TestStruct),
    s(:begin,
      s(:def, :test_struct,
        s(:args),
        s(:begin,
          s(:lvasgn, :struct_test,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:str, "Test"),
              s(:sym, :foo),
              s(:sym, :bar))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:ivar, :@Struct), :Test),
            s(:lvar, :struct_test)),
          s(:lvasgn, :test,
            s(:send,
              s(:lvar, :struct_test), :new,
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :test), :foo)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :test), :bar)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :test), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :test), :[],
              s(:int, 1))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :a),
              s(:lvasgn, :b)),
            s(:send,
              s(:lvar, :test), :to_a)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:lvar, :a)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:lvar, :b)),
          s(:send,
            s(:lvar, :test), :[]=,
            s(:int, 0),
            s(:int, 22)),
          s(:send, nil, :assert_equal,
            s(:int, 22),
            s(:send,
              s(:lvar, :test), :foo)),
          s(:send,
            s(:lvar, :test), :bar=,
            s(:int, 47)),
          s(:send, nil, :assert_equal,
            s(:int, 47),
            s(:send,
              s(:lvar, :test), :bar)))),
      s(:def, :test_morethan10members,
        s(:args),
        s(:begin,
          s(:lvasgn, :list,
            s(:array,
              s(:str, "a"),
              s(:str, "b"),
              s(:str, "c"),
              s(:str, "d"),
              s(:str, "e"),
              s(:str, "f"),
              s(:str, "g"),
              s(:str, "h"),
              s(:str, "i"),
              s(:str, "j"),
              s(:str, "k"),
              s(:str, "l"),
              s(:str, "m"),
              s(:str, "n"),
              s(:str, "o"),
              s(:str, "p"))),
          s(:until,
            s(:send,
              s(:lvar, :list), :empty?),
            s(:begin,
              s(:lvasgn, :c,
                s(:send,
                  s(:send,
                    s(:ivar, :@Struct), :new,
                    s(:splat,
                      s(:block,
                        s(:send,
                          s(:lvar, :list), :map),
                        s(:args,
                          s(:arg, :ch)),
                        s(:send,
                          s(:lvar, :ch), :intern)))), :new)),
              s(:block,
                s(:send,
                  s(:lvar, :list), :each),
                s(:args,
                  s(:arg, :ch)),
                s(:send,
                  s(:lvar, :c), :__send__,
                  s(:lvar, :ch))),
              s(:send,
                s(:lvar, :list), :pop))))),
      s(:def, :test_small_structs,
        s(:args),
        s(:begin,
          s(:lvasgn, :names,
            s(:array,
              s(:sym, :a),
              s(:sym, :b),
              s(:sym, :c),
              s(:sym, :d))),
          s(:block,
            s(:send,
              s(:int, 1), :upto,
              s(:int, 4)),
            s(:args,
              s(:arg, :n)),
            s(:begin,
              s(:lvasgn, :fields,
                s(:send,
                  s(:lvar, :names), :[],
                  s(:int, 0),
                  s(:lvar, :n))),
              s(:lvasgn, :klass,
                s(:send,
                  s(:ivar, :@Struct), :new,
                  s(:splat,
                    s(:lvar, :fields)))),
              s(:lvasgn, :o,
                s(:send,
                  s(:lvar, :klass), :new,
                  s(:splat,
                    s(:send,
                      s(:begin,
                        s(:erange,
                          s(:int, 0),
                          s(:lvar, :n))), :to_a)))),
              s(:block,
                s(:send,
                  s(:lvar, :fields), :each_with_index),
                s(:args,
                  s(:arg, :name),
                  s(:arg, :i)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :i),
                  s(:send,
                    s(:lvar, :o), :[],
                    s(:lvar, :name)))),
              s(:lvasgn, :o,
                s(:send,
                  s(:lvar, :klass), :new,
                  s(:splat,
                    s(:send,
                      s(:send,
                        s(:begin,
                          s(:erange,
                            s(:int, 0),
                            s(:lvar, :n))), :to_a), :reverse)))),
              s(:block,
                s(:send,
                  s(:lvar, :fields), :each_with_index),
                s(:args,
                  s(:arg, :name),
                  s(:arg, :i)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:send,
                      s(:lvar, :n), :-,
                      s(:lvar, :i)), :-,
                    s(:int, 1)),
                  s(:send,
                    s(:lvar, :o), :[],
                    s(:lvar, :name)))))))),
      s(:def, :test_inherit,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a))),
          s(:lvasgn, :klass2,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:lvar, :klass))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass2), :new,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :o), :a)))),
      s(:def, :test_members,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass), :new,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :a)),
            s(:send,
              s(:lvar, :klass), :members)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :a)),
            s(:send,
              s(:lvar, :o), :members)))),
      s(:def, :test_ref,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass), :new,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :o), :[],
              s(:sym, :a))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :[],
              s(:sym, :b))))),
      s(:def, :test_set,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass), :new,
              s(:int, 1))),
          s(:send,
            s(:lvar, :o), :[]=,
            s(:sym, :a),
            s(:int, 2)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :o), :[],
              s(:sym, :a))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :[]=,
              s(:sym, :b),
              s(:int, 3))))),
      s(:def, :test_struct_new,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NameError)),
            s(:args),
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:str, "foo"))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:str, "Foo"))),
          s(:block,
            s(:send,
              s(:ivar, :@Struct), :instance_eval),
            s(:args),
            s(:send, nil, :remove_const,
              s(:sym, :Foo))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@Struct), :new,
                s(:sym, :a)),
              s(:args), nil)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@Struct), :new,
                s(:sym, :a)),
              s(:args),
              s(:send, nil, :raise))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :utime),
              s(:sym, :stime),
              s(:sym, :cutime),
              s(:sym, :cstime)),
            s(:send,
              s(:send,
                s(:const, nil, :Process), :times), :members)))),
      s(:def, :test_initialize,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :klass), :new,
              s(:int, 1),
              s(:int, 2))),
          s(:lvasgn, :klass,
            s(:block,
              s(:send,
                s(:ivar, :@Struct), :new,
                s(:sym, :total)),
              s(:args),
              s(:def, :initialize,
                s(:args,
                  s(:arg, :a),
                  s(:arg, :b)),
                s(:super,
                  s(:send,
                    s(:lvar, :a), :+,
                    s(:lvar, :b)))))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:send,
                s(:lvar, :klass), :new,
                s(:int, 1),
                s(:int, 2)), :total)))),
      s(:def, :test_each,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a),
              s(:sym, :b))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass), :new,
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:lvar, :o), :each), :to_a)))),
      s(:def, :test_each_pair,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a),
              s(:sym, :b))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass), :new,
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :a),
                s(:int, 1)),
              s(:array,
                s(:sym, :b),
                s(:int, 2))),
            s(:send,
              s(:send,
                s(:lvar, :o), :each_pair), :to_a)),
          s(:lvasgn, :bug7382,
            s(:str, "[ruby-dev:46533]")),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :o), :each_pair),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :a),
                s(:int, 1)),
              s(:array,
                s(:sym, :b),
                s(:int, 2))),
            s(:lvar, :a),
            s(:lvar, :bug7382)))),
      s(:def, :test_inspect,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass), :new,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:str, "#<struct a=1>"),
            s(:send,
              s(:lvar, :o), :inspect)),
          s(:send,
            s(:lvar, :o), :a=,
            s(:lvar, :o)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^#<struct a=#<struct #<.*?>:...>>$"),
              s(:regopt)),
            s(:send,
              s(:lvar, :o), :inspect)),
          s(:send,
            s(:ivar, :@Struct), :new,
            s(:str, "Foo"),
            s(:sym, :a)),
          s(:lvasgn, :o,
            s(:send,
              s(:const,
                s(:ivar, :@Struct), :Foo), :new,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "#<struct "),
              s(:ivar, :@Struct),
              s(:str, "::Foo a=1>")),
            s(:send,
              s(:lvar, :o), :inspect)),
          s(:block,
            s(:send,
              s(:ivar, :@Struct), :instance_eval),
            s(:args),
            s(:send, nil, :remove_const,
              s(:sym, :Foo))),
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a),
              s(:sym, :b))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass), :new,
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "#<struct a=1, b=2>"),
            s(:send,
              s(:lvar, :o), :inspect)),
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :@a))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass), :new,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :o), :__send__,
              s(:sym, :@a))),
          s(:send, nil, :assert_equal,
            s(:str, "#<struct :@a=1>"),
            s(:send,
              s(:lvar, :o), :inspect)),
          s(:send,
            s(:lvar, :o), :__send__,
            s(:sym, :"@a="),
            s(:int, 2)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :o), :__send__,
              s(:sym, :@a))),
          s(:send, nil, :assert_equal,
            s(:str, "#<struct :@a=2>"),
            s(:send,
              s(:lvar, :o), :inspect)),
          s(:send,
            s(:lvar, :o), :__send__,
            s(:str, "@a="),
            s(:int, 3)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :o), :__send__,
              s(:sym, :@a))),
          s(:send, nil, :assert_equal,
            s(:str, "#<struct :@a=3>"),
            s(:send,
              s(:lvar, :o), :inspect)),
          s(:lvasgn, :methods,
            s(:send,
              s(:lvar, :klass), :instance_methods,
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:sym, :@a),
                s(:sym, :"@a=")), :inspect),
            s(:send,
              s(:lvar, :methods), :inspect),
            s(:str, "[Bug #8756]")),
          s(:send, nil, :assert_include,
            s(:lvar, :methods),
            s(:sym, :@a)),
          s(:send, nil, :assert_include,
            s(:lvar, :methods),
            s(:sym, :"@a=")))),
      s(:def, :test_init_copy,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass), :new,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:lvar, :o),
            s(:send,
              s(:lvar, :o), :dup)))),
      s(:def, :test_aref,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass), :new,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :o), :[],
              s(:int, 0))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :IndexError),
              s(:regexp,
                s(:str, "offset -2\\b"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :o), :[],
              s(:int, -2))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :IndexError),
              s(:regexp,
                s(:str, "offset 1\\b"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :o), :[],
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :NameError),
              s(:regexp,
                s(:str, "foo"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :o), :[],
              s(:str, "foo"))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :NameError),
              s(:regexp,
                s(:str, "foo"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :o), :[],
              s(:sym, :foo))))),
      s(:def, :test_aset,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass), :new,
              s(:int, 1))),
          s(:send,
            s(:lvar, :o), :[]=,
            s(:int, 0),
            s(:int, 2)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :o), :[],
              s(:sym, :a))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :IndexError),
              s(:regexp,
                s(:str, "offset -2\\b"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :o), :[]=,
              s(:int, -2),
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :IndexError),
              s(:regexp,
                s(:str, "offset 1\\b"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :o), :[]=,
              s(:int, 1),
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :NameError),
              s(:regexp,
                s(:str, "foo"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :o), :[]=,
              s(:str, "foo"),
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :NameError),
              s(:regexp,
                s(:str, "foo"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :o), :[]=,
              s(:sym, :foo),
              s(:int, 3))))),
      s(:def, :test_values_at,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a),
              s(:sym, :b),
              s(:sym, :c),
              s(:sym, :d),
              s(:sym, :e),
              s(:sym, :f))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass), :new,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 5),
              s(:int, 6))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 4),
              s(:int, 6)),
            s(:send,
              s(:lvar, :o), :values_at,
              s(:int, 1),
              s(:int, 3),
              s(:int, 5))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 3),
              s(:int, 4),
              s(:int, 5)),
            s(:send,
              s(:lvar, :o), :values_at,
              s(:irange,
                s(:int, 1),
                s(:int, 3)),
              s(:erange,
                s(:int, 2),
                s(:int, 5)))))),
      s(:def, :test_select,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a),
              s(:sym, :b),
              s(:sym, :c),
              s(:sym, :d),
              s(:sym, :e),
              s(:sym, :f))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass), :new,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 5),
              s(:int, 6))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 3),
              s(:int, 5)),
            s(:block,
              s(:send,
                s(:lvar, :o), :select),
              s(:args,
                s(:arg, :v)),
              s(:send,
                s(:send,
                  s(:lvar, :v), :%,
                  s(:int, 2)), :!=,
                s(:int, 0)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :select,
              s(:int, 1))))),
      s(:def, :test_big_struct,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass1,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:splat,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:str, "a"),
                      s(:str, "z"))), :map,
                  s(:block_pass,
                    s(:sym, :to_sym)))))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass1), :new)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :o), :z)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :o), :z=,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :o), :z)),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :o), :[],
              s(:int, 25))))),
      s(:def, :test_overridden_aset,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug10601,
            s(:str, "[ruby-core:66846] [Bug #10601]: should not be affected by []= method")),
          s(:lvasgn, :struct,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:send,
                  s(:const, nil, :Struct), :new,
                  s(:splat,
                    s(:begin,
                      s(:irange,
                        s(:sym, :a),
                        s(:sym, :z)))),
                  s(:sym, :result))),
              s(:args),
              s(:def, :[]=,
                s(:args,
                  s(:restarg, :args)),
                s(:send, nil, :raise,
                  s(:send,
                    s(:lvar, :args), :inspect))))),
          s(:lvasgn, :obj,
            s(:send,
              s(:lvar, :struct), :new)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :RuntimeError),
              s(:lvar, :bug10601)),
            s(:args),
            s(:send,
              s(:lvar, :obj), :result=,
              s(:int, 42))),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:lvar, :obj), :result),
            s(:lvar, :bug10601)))),
      s(:def, :test_overridden_aref,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug10601,
            s(:str, "[ruby-core:66846] [Bug #10601]: should not be affected by [] method")),
          s(:lvasgn, :struct,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new,
                s(:send,
                  s(:const, nil, :Struct), :new,
                  s(:splat,
                    s(:begin,
                      s(:irange,
                        s(:sym, :a),
                        s(:sym, :z)))),
                  s(:sym, :result))),
              s(:args),
              s(:def, :[],
                s(:args,
                  s(:restarg, :args)),
                s(:send, nil, :raise,
                  s(:send,
                    s(:lvar, :args), :inspect))))),
          s(:lvasgn, :obj,
            s(:send,
              s(:lvar, :struct), :new)),
          s(:send,
            s(:lvar, :obj), :result=,
            s(:int, 42)),
          s(:lvasgn, :result,
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:const, nil, :RuntimeError),
                s(:lvar, :bug10601)),
              s(:args),
              s(:break,
                s(:send,
                  s(:lvar, :obj), :result)))),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:lvar, :result),
            s(:lvar, :bug10601)))),
      s(:def, :test_equal,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass1,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a))),
          s(:lvasgn, :klass2,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a),
              s(:sym, :b))),
          s(:lvasgn, :o1,
            s(:send,
              s(:lvar, :klass1), :new,
              s(:int, 1))),
          s(:lvasgn, :o2,
            s(:send,
              s(:lvar, :klass1), :new,
              s(:int, 1))),
          s(:lvasgn, :o3,
            s(:send,
              s(:lvar, :klass2), :new,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:lvar, :o1),
            s(:lvar, :o2)),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :o1),
            s(:lvar, :o3)))),
      s(:def, :test_hash,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass), :new,
              s(:int, 1))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Fixnum),
            s(:send,
              s(:lvar, :o), :hash)))),
      s(:def, :test_eql,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass1,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a))),
          s(:lvasgn, :klass2,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a),
              s(:sym, :b))),
          s(:lvasgn, :o1,
            s(:send,
              s(:lvar, :klass1), :new,
              s(:int, 1))),
          s(:lvasgn, :o2,
            s(:send,
              s(:lvar, :klass1), :new,
              s(:int, 1))),
          s(:lvasgn, :o3,
            s(:send,
              s(:lvar, :klass2), :new,
              s(:int, 1))),
          s(:send, nil, :assert_operator,
            s(:lvar, :o1),
            s(:sym, :eql?),
            s(:lvar, :o2)),
          s(:send, nil, :assert_not_operator,
            s(:lvar, :o1),
            s(:sym, :eql?),
            s(:lvar, :o3)))),
      s(:def, :test_size,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass), :new,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :o), :size)))),
      s(:def, :test_error,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send,
            s(:ivar, :@Struct), :new,
            s(:int, 0)))),
      s(:def, :test_redefinition_warning,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@Struct), :new,
            s(:str, "RedefinitionWarning")),
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :verbose_warning),
              s(:args),
              s(:send,
                s(:ivar, :@Struct), :new,
                s(:str, "RedefinitionWarning")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "redefining constant "),
              s(:ivar, :@Struct),
              s(:str, "::RedefinitionWarning"),
              s(:regopt)),
            s(:lvar, :e)))),
      s(:def, :test_nonascii,
        s(:args),
        s(:begin,
          s(:lvasgn, :struct_test,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:str, "Résumé"),
              s(:sym, :résumé))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@Struct), :const_get,
              s(:str, "Résumé")),
            s(:lvar, :struct_test),
            s(:str, "[ruby-core:24849]")),
          s(:lvasgn, :a,
            s(:send,
              s(:lvar, :struct_test), :new,
              s(:int, 42))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "#<struct "),
              s(:ivar, :@Struct),
              s(:str, "::Résumé résumé=42>")),
            s(:send,
              s(:lvar, :a), :inspect),
            s(:str, "[ruby-core:24849]")),
          s(:lvasgn, :e,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :verbose_warning),
              s(:args),
              s(:send,
                s(:ivar, :@Struct), :new,
                s(:str, "Résumé"),
                s(:sym, :résumé)))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const,
                s(:const, nil, :Encoding), :CompatibilityError)),
            s(:args),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "redefining constant "),
                s(:ivar, :@Struct),
                s(:str, "::R\\u{e9}sum\\u{e9}"),
                s(:regopt)),
              s(:lvar, :e))))),
      s(:def, :test_junk,
        s(:args),
        s(:begin,
          s(:lvasgn, :struct_test,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:str, "Foo"),
              s(:str, "a\u0000"))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :struct_test), :new,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :o), :send,
              s(:str, "a\u0000"))),
          s(:block,
            s(:send,
              s(:ivar, :@Struct), :instance_eval),
            s(:args),
            s(:send, nil, :remove_const,
              s(:sym, :Foo))))),
      s(:def, :test_comparison_when_recursive,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass1,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a),
              s(:sym, :b),
              s(:sym, :c))),
          s(:lvasgn, :x,
            s(:send,
              s(:lvar, :klass1), :new,
              s(:int, 1),
              s(:int, 2),
              s(:nil))),
          s(:send,
            s(:lvar, :x), :c=,
            s(:lvar, :x)),
          s(:lvasgn, :y,
            s(:send,
              s(:lvar, :klass1), :new,
              s(:int, 1),
              s(:int, 2),
              s(:nil))),
          s(:send,
            s(:lvar, :y), :c=,
            s(:lvar, :y)),
          s(:block,
            s(:send,
              s(:const, nil, :Timeout), :timeout,
              s(:int, 1)),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:lvar, :x),
                s(:lvar, :y)),
              s(:send, nil, :assert_operator,
                s(:lvar, :x),
                s(:sym, :eql?),
                s(:lvar, :y)))),
          s(:lvasgn, :z,
            s(:send,
              s(:lvar, :klass1), :new,
              s(:sym, :something),
              s(:sym, :other),
              s(:nil))),
          s(:send,
            s(:lvar, :z), :c=,
            s(:lvar, :z)),
          s(:block,
            s(:send,
              s(:const, nil, :Timeout), :timeout,
              s(:int, 1)),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_not_equal,
                s(:lvar, :x),
                s(:lvar, :z)),
              s(:send, nil, :assert_not_operator,
                s(:lvar, :x),
                s(:sym, :eql?),
                s(:lvar, :z)))),
          s(:send,
            s(:lvar, :x), :c=,
            s(:lvar, :y)),
          s(:send,
            s(:lvar, :y), :c=,
            s(:lvar, :x)),
          s(:block,
            s(:send,
              s(:const, nil, :Timeout), :timeout,
              s(:int, 1)),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:lvar, :x),
                s(:lvar, :y)),
              s(:send, nil, :assert_operator,
                s(:lvar, :x),
                s(:sym, :eql?),
                s(:lvar, :y)))),
          s(:send,
            s(:lvar, :x), :c=,
            s(:lvar, :z)),
          s(:send,
            s(:lvar, :z), :c=,
            s(:lvar, :x)),
          s(:block,
            s(:send,
              s(:const, nil, :Timeout), :timeout,
              s(:int, 1)),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_not_equal,
                s(:lvar, :x),
                s(:lvar, :z)),
              s(:send, nil, :assert_not_operator,
                s(:lvar, :x),
                s(:sym, :eql?),
                s(:lvar, :z)))))),
      s(:def, :test_to_h,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a),
              s(:sym, :b),
              s(:sym, :c),
              s(:sym, :d),
              s(:sym, :e),
              s(:sym, :f))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass), :new,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 5),
              s(:int, 6))),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:sym, :a),
                s(:int, 1)),
              s(:pair,
                s(:sym, :b),
                s(:int, 2)),
              s(:pair,
                s(:sym, :c),
                s(:int, 3)),
              s(:pair,
                s(:sym, :d),
                s(:int, 4)),
              s(:pair,
                s(:sym, :e),
                s(:int, 5)),
              s(:pair,
                s(:sym, :f),
                s(:int, 6))),
            s(:send,
              s(:lvar, :o), :to_h)))),
      s(:def, :test_question_mark_in_member,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a),
              s(:sym, :b?))),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass), :new,
              s(:str, "test"),
              s(:lvar, :x))),
          s(:send, nil, :assert_same,
            s(:lvar, :x),
            s(:send,
              s(:lvar, :o), :b?)),
          s(:send,
            s(:lvar, :o), :send,
            s(:str, "b?="),
            s(:int, 42)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:lvar, :o), :b?)))),
      s(:def, :test_bang_mark_in_member,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a),
              s(:sym, :b!))),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass), :new,
              s(:str, "test"),
              s(:lvar, :x))),
          s(:send, nil, :assert_same,
            s(:lvar, :x),
            s(:send,
              s(:lvar, :o), :b!)),
          s(:send,
            s(:lvar, :o), :send,
            s(:str, "b!="),
            s(:int, 42)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:lvar, :o), :b!)))),
      s(:def, :test_setter_method_returns_value,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a))),
          s(:lvasgn, :x,
            s(:send,
              s(:lvar, :klass), :new)),
          s(:send, nil, :assert_equal,
            s(:str, "[Bug #9353]"),
            s(:send,
              s(:lvar, :x), :send,
              s(:sym, :a=),
              s(:str, "[Bug #9353]"))))),
      s(:def, :test_dig,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a))),
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :klass), :new,
              s(:send,
                s(:lvar, :klass), :new,
                s(:hash,
                  s(:pair,
                    s(:sym, :b),
                    s(:array,
                      s(:int, 1),
                      s(:int, 2),
                      s(:int, 3))))))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :o), :dig,
              s(:sym, :a),
              s(:sym, :a),
              s(:sym, :b),
              s(:int, 0))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :o), :dig,
              s(:sym, :b),
              s(:int, 0))))),
      s(:def, :test_new_dupilicate,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug12291,
            s(:str, "[ruby-core:74971] [Bug #12291]")),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:regexp,
                s(:str, "duplicate member"),
                s(:regopt)),
              s(:lvar, :bug12291)),
            s(:args),
            s(:send,
              s(:ivar, :@Struct), :new,
              s(:sym, :a),
              s(:sym, :a))))),
      s(:class,
        s(:const, nil, :TopStruct),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :TestStruct)),
          s(:def, :initialize,
            s(:args,
              s(:restarg)),
            s(:begin,
              s(:zsuper),
              s(:ivasgn, :@Struct,
                s(:const, nil, :Struct)))))),
      s(:class,
        s(:const, nil, :SubStruct),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :TestStruct)),
          s(:casgn, nil, :SubStruct,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const, nil, :Struct))),
          s(:def, :initialize,
            s(:args,
              s(:restarg)),
            s(:begin,
              s(:zsuper),
              s(:ivasgn, :@Struct,
                s(:const, nil, :SubStruct)))))))))
