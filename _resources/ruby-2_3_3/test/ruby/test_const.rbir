s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestConst),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :TEST1,
        s(:int, 1)),
      s(:casgn, nil, :TEST2,
        s(:int, 2)),
      s(:module,
        s(:const, nil, :Const),
        s(:begin,
          s(:casgn, nil, :TEST3,
            s(:int, 3)),
          s(:casgn, nil, :TEST4,
            s(:int, 4)))),
      s(:module,
        s(:const, nil, :Const2),
        s(:begin,
          s(:casgn, nil, :TEST3,
            s(:int, 6)),
          s(:casgn, nil, :TEST4,
            s(:int, 8)))),
      s(:def, :test_const,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:defined?,
              s(:const, nil, :TEST1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:const, nil, :TEST1)),
          s(:send, nil, :assert,
            s(:defined?,
              s(:const, nil, :TEST2))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:const, nil, :TEST2)),
          s(:block,
            s(:send,
              s(:send,
                s(:self), :class), :class_eval),
            s(:args),
            s(:send, nil, :include,
              s(:const, nil, :Const))),
          s(:send, nil, :assert,
            s(:defined?,
              s(:const, nil, :TEST1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:const, nil, :TEST1)),
          s(:send, nil, :assert,
            s(:defined?,
              s(:const, nil, :TEST2))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:const, nil, :TEST2)),
          s(:send, nil, :assert,
            s(:defined?,
              s(:const, nil, :TEST3))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:const, nil, :TEST3)),
          s(:send, nil, :assert,
            s(:defined?,
              s(:const, nil, :TEST4))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:const, nil, :TEST4)),
          s(:block,
            s(:send,
              s(:send,
                s(:self), :class), :class_eval),
            s(:args),
            s(:send, nil, :include,
              s(:const, nil, :Const2))),
          s(:if,
            s(:gvar, :$VERBOSE),
            s(:send,
              s(:const, nil, :STDERR), :print,
              s(:str, "intentionally redefines TEST3, TEST4\n")), nil),
          s(:send, nil, :assert,
            s(:defined?,
              s(:const, nil, :TEST1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:const, nil, :TEST1)),
          s(:send, nil, :assert,
            s(:defined?,
              s(:const, nil, :TEST2))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:const, nil, :TEST2)),
          s(:send, nil, :assert,
            s(:defined?,
              s(:const, nil, :TEST3))),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:const, nil, :TEST3)),
          s(:send, nil, :assert,
            s(:defined?,
              s(:const, nil, :TEST4))),
          s(:send, nil, :assert_equal,
            s(:int, 8),
            s(:const, nil, :TEST4)))),
      s(:def, :test_redefinition,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new)),
          s(:lvasgn, :name,
            s(:str, "X定数")),
          s(:send,
            s(:lvar, :c), :const_set,
            s(:lvar, :name),
            s(:int, 1)),
          s(:lvasgn, :prev_line,
            s(:send,
              s(:int, 55), :-,
              s(:int, 1))),
          s(:block,
            s(:send,
              s(:const, nil, :EnvUtil), :with_default_internal,
              s(:const,
                s(:const, nil, :Encoding), :UTF_8)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_warning,
                s(:dstr,
                  s(:begin,
                    s(:str, "(string)")),
                  s(:str, ":"),
                  s(:begin,
                    s(:send,
                      s(:int, 58), :-,
                      s(:int, 1))),
                  s(:str, ": warning: already initialized constant "),
                  s(:begin,
                    s(:lvar, :c)),
                  s(:str, "::"),
                  s(:begin,
                    s(:lvar, :name)),
                  s(:str, "\n"),
                  s(:begin,
                    s(:str, "(string)")),
                  s(:str, ":"),
                  s(:begin,
                    s(:lvar, :prev_line)),
                  s(:str, ": warning: previous definition of "),
                  s(:begin,
                    s(:lvar, :name)),
                  s(:str, " was here\n"))),
              s(:args),
              s(:send,
                s(:lvar, :c), :const_set,
                s(:lvar, :name),
                s(:int, 2)))))),
      s(:def, :test_redefinition_memory_leak,
        s(:args),
        s(:begin,
          s(:lvasgn, :code,
            s(:str, "350000.times { FOO = :BAR }\n")),
          s(:send, nil, :assert_no_memory_leak,
            s(:array,
              s(:str, "-W0"),
              s(:str, "-")),
            s(:str, ""),
            s(:lvar, :code),
            s(:str, "redefined constant"),
            s(:hash,
              s(:pair,
                s(:sym, :timeout),
                s(:int, 30)))))))))
