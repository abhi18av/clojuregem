s(:begin,
  s(:def, :Sentence,
    s(:args,
      s(:restarg, :ary)),
    s(:send,
      s(:const, nil, :Sentence), :new,
      s(:lvar, :ary))),
  s(:class,
    s(:const, nil, :Sentence), nil,
    s(:begin,
      s(:def, :initialize,
        s(:args,
          s(:arg, :ary)),
        s(:ivasgn, :@sent,
          s(:lvar, :ary))),
      s(:def, :to_s,
        s(:args),
        s(:send,
          s(:ivar, :@sent), :join,
          s(:str, ""))),
      s(:def, :join,
        s(:args,
          s(:optarg, :sep,
            s(:str, " "))),
        s(:send,
          s(:send,
            s(:ivar, :@sent), :flatten), :join,
          s(:lvar, :sep))),
      s(:def, :to_a,
        s(:args),
        s(:ivar, :@sent)),
      s(:def, :[],
        s(:args,
          s(:arg, :i)),
        s(:begin,
          s(:lvasgn, :e,
            s(:send,
              s(:ivar, :@sent), :[],
              s(:lvar, :i))),
          s(:if,
            s(:send,
              s(:lvar, :e), :respond_to?,
              s(:sym, :to_ary)),
            s(:send,
              s(:const, nil, :Sentence), :new,
              s(:lvar, :e)),
            s(:lvar, :e)))),
      s(:def, :length,
        s(:args),
        s(:send,
          s(:ivar, :@sent), :length)),
      s(:def, :each,
        s(:args),
        s(:block,
          s(:send,
            s(:ivar, :@sent), :each_index),
          s(:args,
            s(:arg, :i)),
          s(:yield,
            s(:send,
              s(:self), :[],
              s(:lvar, :i))))),
      s(:send, nil, :include,
        s(:const, nil, :Enumerable)),
      s(:def, :inspect,
        s(:args),
        s(:dstr,
          s(:str, "#<"),
          s(:begin,
            s(:send,
              s(:self), :class)),
          s(:str, ": "),
          s(:begin,
            s(:send, nil, :inner_inspect,
              s(:ivar, :@sent),
              s(:str, ""))),
          s(:str, ">"))),
      s(:def, :inner_inspect,
        s(:args,
          s(:arg, :ary),
          s(:arg, :r)),
        s(:begin,
          s(:lvasgn, :first,
            s(:true)),
          s(:block,
            s(:send,
              s(:lvar, :ary), :each),
            s(:args,
              s(:arg, :obj)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :first), :!),
                s(:send,
                  s(:lvar, :r), :<<,
                  s(:str, " ")), nil),
              s(:lvasgn, :first,
                s(:false)),
              s(:if,
                s(:send,
                  s(:lvar, :obj), :respond_to?,
                  s(:sym, :to_ary)),
                s(:begin,
                  s(:send,
                    s(:lvar, :r), :<<,
                    s(:str, "(")),
                  s(:send, nil, :inner_inspect,
                    s(:lvar, :obj),
                    s(:lvar, :r)),
                  s(:send,
                    s(:lvar, :r), :<<,
                    s(:str, ")"))),
                s(:send,
                  s(:lvar, :r), :<<,
                  s(:send,
                    s(:lvar, :obj), :inspect))))),
          s(:lvar, :r))),
      s(:def, :subst,
        s(:args,
          s(:arg, :target),
          s(:blockarg, :b)),
        s(:send,
          s(:const, nil, :Sentence), :new,
          s(:send, nil, :subst_rec,
            s(:ivar, :@sent),
            s(:lvar, :target),
            s(:block_pass,
              s(:lvar, :b))))),
      s(:def, :subst_rec,
        s(:args,
          s(:arg, :obj),
          s(:arg, :target),
          s(:blockarg, :b)),
        s(:if,
          s(:send,
            s(:lvar, :obj), :respond_to?,
            s(:sym, :to_ary)),
          s(:begin,
            s(:lvasgn, :a,
              s(:array)),
            s(:block,
              s(:send,
                s(:lvar, :obj), :each),
              s(:args,
                s(:arg, :e)),
              s(:send,
                s(:lvar, :a), :<<,
                s(:send, nil, :subst_rec,
                  s(:lvar, :e),
                  s(:lvar, :target),
                  s(:block_pass,
                    s(:lvar, :b))))),
            s(:lvar, :a)),
          s(:if,
            s(:send,
              s(:lvar, :target), :===,
              s(:lvar, :obj)),
            s(:yield,
              s(:lvar, :obj)),
            s(:lvar, :obj)))),
      s(:def, :find_subtree,
        s(:args,
          s(:blockarg, :b)),
        s(:send, nil, :find_subtree_rec,
          s(:ivar, :@sent),
          s(:block_pass,
            s(:lvar, :b)))),
      s(:def, :find_subtree_rec,
        s(:args,
          s(:arg, :obj),
          s(:blockarg, :b)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :obj), :respond_to?,
              s(:sym, :to_ary)),
            s(:begin,
              s(:lvasgn, :s,
                s(:send,
                  s(:const, nil, :Sentence), :new,
                  s(:lvar, :obj))),
              s(:if,
                s(:send,
                  s(:lvar, :b), :call,
                  s(:lvar, :s)),
                s(:return,
                  s(:lvar, :s)),
                s(:block,
                  s(:send,
                    s(:lvar, :obj), :each),
                  s(:args,
                    s(:arg, :e)),
                  s(:begin,
                    s(:lvasgn, :r,
                      s(:send, nil, :find_subtree_rec,
                        s(:lvar, :e),
                        s(:block_pass,
                          s(:lvar, :b)))),
                    s(:if,
                      s(:lvar, :r),
                      s(:return,
                        s(:lvar, :r)), nil))))), nil),
          s(:nil))),
      s(:def, :expand,
        s(:args,
          s(:blockarg, :b)),
        s(:send,
          s(:const, nil, :Sentence), :new,
          s(:send, nil, :expand_rec,
            s(:ivar, :@sent),
            s(:block_pass,
              s(:lvar, :b))))),
      s(:def, :expand_rec,
        s(:args,
          s(:arg, :obj),
          s(:optarg, :r,
            s(:array)),
          s(:blockarg, :b)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :obj), :respond_to?,
              s(:sym, :to_ary)),
            s(:block,
              s(:send,
                s(:lvar, :obj), :each),
              s(:args,
                s(:arg, :o)),
              s(:begin,
                s(:lvasgn, :s,
                  s(:send,
                    s(:const, nil, :Sentence), :new,
                    s(:lvar, :o))),
                s(:if,
                  s(:send,
                    s(:lvar, :b), :call,
                    s(:lvar, :s)),
                  s(:send, nil, :expand_rec,
                    s(:lvar, :o),
                    s(:lvar, :r),
                    s(:block_pass,
                      s(:lvar, :b))),
                  s(:begin,
                    s(:lvasgn, :a,
                      s(:array)),
                    s(:send, nil, :expand_rec,
                      s(:lvar, :o),
                      s(:lvar, :a),
                      s(:block_pass,
                        s(:lvar, :b))),
                    s(:send,
                      s(:lvar, :r), :<<,
                      s(:lvar, :a)))))),
            s(:send,
              s(:lvar, :r), :<<,
              s(:lvar, :obj))),
          s(:lvar, :r))),
      s(:defs,
        s(:const, nil, :Sentence), :each,
        s(:args,
          s(:arg, :syntax),
          s(:arg, :sym),
          s(:arg, :limit)),
        s(:block,
          s(:send,
            s(:send,
              s(:const, nil, :Gen), :new,
              s(:lvar, :syntax)), :each_tree,
            s(:lvar, :sym),
            s(:lvar, :limit)),
          s(:args,
            s(:arg, :tree)),
          s(:yield,
            s(:send,
              s(:const, nil, :Sentence), :new,
              s(:lvar, :tree))))),
      s(:defs,
        s(:const, nil, :Sentence), :expand_syntax,
        s(:args,
          s(:arg, :syntax)),
        s(:send,
          s(:const,
            s(:const, nil, :Sentence), :Gen), :expand_syntax,
          s(:lvar, :syntax))),
      s(:class,
        s(:const, nil, :Gen), nil,
        s(:begin,
          s(:defs,
            s(:const, nil, :Gen), :each_tree,
            s(:args,
              s(:arg, :syntax),
              s(:arg, :sym),
              s(:arg, :limit),
              s(:blockarg, :b)),
            s(:send,
              s(:send,
                s(:const, nil, :Gen), :new,
                s(:lvar, :syntax)), :each_tree,
              s(:lvar, :sym),
              s(:lvar, :limit),
              s(:block_pass,
                s(:lvar, :b)))),
          s(:defs,
            s(:const, nil, :Gen), :each_string,
            s(:args,
              s(:arg, :syntax),
              s(:arg, :sym),
              s(:arg, :limit),
              s(:blockarg, :b)),
            s(:send,
              s(:send,
                s(:const, nil, :Gen), :new,
                s(:lvar, :syntax)), :each_string,
              s(:lvar, :sym),
              s(:lvar, :limit),
              s(:block_pass,
                s(:lvar, :b)))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :syntax)),
            s(:ivasgn, :@syntax,
              s(:lvar, :syntax))),
          s(:defs,
            s(:self), :expand_syntax,
            s(:args,
              s(:arg, :syntax)),
            s(:begin,
              s(:lvasgn, :syntax,
                s(:send, nil, :simplify_underivable_rules,
                  s(:lvar, :syntax))),
              s(:lvasgn, :syntax,
                s(:send, nil, :simplify_emptyonly_rules,
                  s(:lvar, :syntax))),
              s(:lvasgn, :syntax,
                s(:send, nil, :make_rules_no_empseq,
                  s(:lvar, :syntax))),
              s(:lvasgn, :syntax,
                s(:send, nil, :expand_channel_rules,
                  s(:lvar, :syntax))),
              s(:lvasgn, :syntax,
                s(:send, nil, :expand_noalt_rules,
                  s(:lvar, :syntax))),
              s(:lvasgn, :syntax,
                s(:send, nil, :reorder_rules,
                  s(:lvar, :syntax))))),
          s(:defs,
            s(:self), :simplify_underivable_rules,
            s(:args,
              s(:arg, :syntax)),
            s(:begin,
              s(:lvasgn, :deribable_syms,
                s(:hash)),
              s(:lvasgn, :changed,
                s(:true)),
              s(:while,
                s(:lvar, :changed),
                s(:begin,
                  s(:lvasgn, :changed,
                    s(:false)),
                  s(:block,
                    s(:send,
                      s(:lvar, :syntax), :each),
                    s(:args,
                      s(:arg, :sym),
                      s(:arg, :rules)),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :deribable_syms), :[],
                          s(:lvar, :sym)),
                        s(:next), nil),
                      s(:block,
                        s(:send,
                          s(:lvar, :rules), :each),
                        s(:args,
                          s(:arg, :rhs)),
                        s(:if,
                          s(:block,
                            s(:send,
                              s(:lvar, :rhs), :all?),
                            s(:args,
                              s(:arg, :e)),
                            s(:or,
                              s(:send,
                                s(:const, nil, :String), :===,
                                s(:lvar, :e)),
                              s(:send,
                                s(:lvar, :deribable_syms), :[],
                                s(:lvar, :e)))),
                          s(:begin,
                            s(:send,
                              s(:lvar, :deribable_syms), :[]=,
                              s(:lvar, :sym),
                              s(:true)),
                            s(:lvasgn, :changed,
                              s(:true)),
                            s(:break)), nil)))))),
              s(:lvasgn, :result,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:lvar, :syntax), :each),
                s(:args,
                  s(:arg, :sym),
                  s(:arg, :rules)),
                s(:if,
                  s(:send,
                    s(:lvar, :deribable_syms), :[],
                    s(:lvar, :sym)),
                  s(:begin,
                    s(:lvasgn, :rules2,
                      s(:array)),
                    s(:block,
                      s(:send,
                        s(:lvar, :rules), :each),
                      s(:args,
                        s(:arg, :rhs)),
                      s(:if,
                        s(:block,
                          s(:send,
                            s(:lvar, :rhs), :all?),
                          s(:args,
                            s(:arg, :e)),
                          s(:or,
                            s(:send,
                              s(:const, nil, :String), :===,
                              s(:lvar, :e)),
                            s(:send,
                              s(:lvar, :deribable_syms), :[],
                              s(:lvar, :e)))),
                        s(:send,
                          s(:lvar, :rules2), :<<,
                          s(:lvar, :rhs)), nil)),
                    s(:send,
                      s(:lvar, :result), :[]=,
                      s(:lvar, :sym),
                      s(:send,
                        s(:lvar, :rules2), :uniq))),
                  s(:send,
                    s(:lvar, :result), :[]=,
                    s(:lvar, :sym),
                    s(:array)))),
              s(:lvar, :result))),
          s(:defs,
            s(:self), :simplify_emptyonly_rules,
            s(:args,
              s(:arg, :syntax)),
            s(:begin,
              s(:lvasgn, :justempty_syms,
                s(:hash)),
              s(:lvasgn, :changed,
                s(:true)),
              s(:while,
                s(:lvar, :changed),
                s(:begin,
                  s(:lvasgn, :changed,
                    s(:false)),
                  s(:block,
                    s(:send,
                      s(:lvar, :syntax), :each),
                    s(:args,
                      s(:arg, :sym),
                      s(:arg, :rules)),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :justempty_syms), :[],
                          s(:lvar, :sym)),
                        s(:next), nil),
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:send,
                              s(:lvar, :rules), :empty?), :!),
                          s(:block,
                            s(:send,
                              s(:lvar, :rules), :all?),
                            s(:args,
                              s(:arg, :rhs)),
                            s(:block,
                              s(:send,
                                s(:lvar, :rhs), :all?),
                              s(:args,
                                s(:arg, :e)),
                              s(:send,
                                s(:lvar, :justempty_syms), :[],
                                s(:lvar, :e))))),
                        s(:begin,
                          s(:send,
                            s(:lvar, :justempty_syms), :[]=,
                            s(:lvar, :sym),
                            s(:true)),
                          s(:lvasgn, :changed,
                            s(:true))), nil))))),
              s(:lvasgn, :result,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:lvar, :syntax), :each),
                s(:args,
                  s(:arg, :sym),
                  s(:arg, :rules)),
                s(:send,
                  s(:lvar, :result), :[]=,
                  s(:lvar, :sym),
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :rules), :map),
                      s(:args,
                        s(:arg, :rhs)),
                      s(:block,
                        s(:send,
                          s(:lvar, :rhs), :reject),
                        s(:args,
                          s(:arg, :e)),
                        s(:send,
                          s(:lvar, :justempty_syms), :[],
                          s(:lvar, :e)))), :uniq))),
              s(:lvar, :result))),
          s(:defs,
            s(:self), :expand_emptyable_syms,
            s(:args,
              s(:arg, :rhs),
              s(:arg, :emptyable_syms)),
            s(:if,
              s(:send,
                s(:lvar, :rhs), :empty?),
              s(:yield,
                s(:array)),
              s(:begin,
                s(:lvasgn, :first,
                  s(:send,
                    s(:lvar, :rhs), :[],
                    s(:int, 0))),
                s(:lvasgn, :rest,
                  s(:send,
                    s(:lvar, :rhs), :[],
                    s(:irange,
                      s(:int, 1),
                      s(:int, -1)))),
                s(:if,
                  s(:send,
                    s(:lvar, :emptyable_syms), :[],
                    s(:lvar, :first)),
                  s(:block,
                    s(:send, nil, :expand_emptyable_syms,
                      s(:lvar, :rest),
                      s(:lvar, :emptyable_syms)),
                    s(:args,
                      s(:arg, :rhs2)),
                    s(:begin,
                      s(:yield,
                        s(:send,
                          s(:array,
                            s(:lvar, :first)), :+,
                          s(:lvar, :rhs2))),
                      s(:yield,
                        s(:lvar, :rhs2)))),
                  s(:block,
                    s(:send, nil, :expand_emptyable_syms,
                      s(:lvar, :rest),
                      s(:lvar, :emptyable_syms)),
                    s(:args,
                      s(:arg, :rhs2)),
                    s(:yield,
                      s(:send,
                        s(:array,
                          s(:lvar, :first)), :+,
                        s(:lvar, :rhs2)))))))),
          s(:defs,
            s(:self), :make_rules_no_empseq,
            s(:args,
              s(:arg, :syntax)),
            s(:begin,
              s(:lvasgn, :emptyable_syms,
                s(:hash)),
              s(:lvasgn, :changed,
                s(:true)),
              s(:while,
                s(:lvar, :changed),
                s(:begin,
                  s(:lvasgn, :changed,
                    s(:false)),
                  s(:block,
                    s(:send,
                      s(:lvar, :syntax), :each),
                    s(:args,
                      s(:arg, :sym),
                      s(:arg, :rules)),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :emptyable_syms), :[],
                          s(:lvar, :sym)),
                        s(:next), nil),
                      s(:block,
                        s(:send,
                          s(:lvar, :rules), :each),
                        s(:args,
                          s(:arg, :rhs)),
                        s(:if,
                          s(:block,
                            s(:send,
                              s(:lvar, :rhs), :all?),
                            s(:args,
                              s(:arg, :e)),
                            s(:send,
                              s(:lvar, :emptyable_syms), :[],
                              s(:lvar, :e))),
                          s(:begin,
                            s(:send,
                              s(:lvar, :emptyable_syms), :[]=,
                              s(:lvar, :sym),
                              s(:true)),
                            s(:lvasgn, :changed,
                              s(:true)),
                            s(:break)), nil)))))),
              s(:lvasgn, :result,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:lvar, :syntax), :each),
                s(:args,
                  s(:arg, :sym),
                  s(:arg, :rules)),
                s(:begin,
                  s(:lvasgn, :rules2,
                    s(:array)),
                  s(:block,
                    s(:send,
                      s(:lvar, :rules), :each),
                    s(:args,
                      s(:arg, :rhs)),
                    s(:block,
                      s(:send, nil, :expand_emptyable_syms,
                        s(:lvar, :rhs),
                        s(:lvar, :emptyable_syms)),
                      s(:args,
                        s(:arg, :rhs2)),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:lvar, :rhs2), :empty?),
                          s(:next), nil),
                        s(:send,
                          s(:lvar, :rules2), :<<,
                          s(:lvar, :rhs2))))),
                  s(:send,
                    s(:lvar, :result), :[]=,
                    s(:lvar, :sym),
                    s(:send,
                      s(:lvar, :rules2), :uniq)))),
              s(:lvar, :result))),
          s(:defs,
            s(:self), :expand_channel_rules,
            s(:args,
              s(:arg, :syntax)),
            s(:begin,
              s(:lvasgn, :channel_rules,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:lvar, :syntax), :each),
                s(:args,
                  s(:arg, :sym),
                  s(:arg, :rules)),
                s(:begin,
                  s(:send,
                    s(:lvar, :channel_rules), :[]=,
                    s(:lvar, :sym),
                    s(:hash,
                      s(:pair,
                        s(:lvar, :sym),
                        s(:true)))),
                  s(:block,
                    s(:send,
                      s(:lvar, :rules), :each),
                    s(:args,
                      s(:arg, :rhs)),
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:send,
                            s(:lvar, :rhs), :length), :==,
                          s(:int, 1)),
                        s(:send,
                          s(:const, nil, :Symbol), :===,
                          s(:send,
                            s(:lvar, :rhs), :[],
                            s(:int, 0)))),
                      s(:send,
                        s(:send,
                          s(:lvar, :channel_rules), :[],
                          s(:lvar, :sym)), :[]=,
                        s(:send,
                          s(:lvar, :rhs), :[],
                          s(:int, 0)),
                        s(:true)), nil)))),
              s(:lvasgn, :changed,
                s(:true)),
              s(:while,
                s(:lvar, :changed),
                s(:begin,
                  s(:lvasgn, :changed,
                    s(:false)),
                  s(:block,
                    s(:send,
                      s(:lvar, :channel_rules), :each),
                    s(:args,
                      s(:arg, :sym),
                      s(:arg, :set)),
                    s(:begin,
                      s(:lvasgn, :n1,
                        s(:send,
                          s(:lvar, :set), :size)),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :set), :keys), :each),
                        s(:args,
                          s(:arg, :s)),
                        s(:send,
                          s(:lvar, :set), :update,
                          s(:send,
                            s(:lvar, :channel_rules), :[],
                            s(:lvar, :s)))),
                      s(:lvasgn, :n2,
                        s(:send,
                          s(:lvar, :set), :size)),
                      s(:if,
                        s(:send,
                          s(:lvar, :n1), :<,
                          s(:lvar, :n2)),
                        s(:lvasgn, :changed,
                          s(:true)), nil))))),
              s(:lvasgn, :result,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:lvar, :syntax), :each),
                s(:args,
                  s(:arg, :sym),
                  s(:arg, :rules)),
                s(:begin,
                  s(:lvasgn, :rules2,
                    s(:array)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :channel_rules), :[],
                        s(:lvar, :sym)), :each_key),
                    s(:args,
                      s(:arg, :s)),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :syntax), :[],
                          s(:lvar, :s)), :each),
                      s(:args,
                        s(:arg, :rhs)),
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:send,
                              s(:lvar, :rhs), :length), :==,
                            s(:int, 1)),
                          s(:send,
                            s(:const, nil, :Symbol), :===,
                            s(:send,
                              s(:lvar, :rhs), :[],
                              s(:int, 0)))), nil,
                        s(:send,
                          s(:lvar, :rules2), :<<,
                          s(:lvar, :rhs))))),
                  s(:send,
                    s(:lvar, :result), :[]=,
                    s(:lvar, :sym),
                    s(:send,
                      s(:lvar, :rules2), :uniq)))),
              s(:lvar, :result))),
          s(:defs,
            s(:self), :expand_noalt_rules,
            s(:args,
              s(:arg, :syntax)),
            s(:begin,
              s(:lvasgn, :noalt_syms,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:lvar, :syntax), :each),
                s(:args,
                  s(:arg, :sym),
                  s(:arg, :rules)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :rules), :length), :==,
                    s(:int, 1)),
                  s(:send,
                    s(:lvar, :noalt_syms), :[]=,
                    s(:lvar, :sym),
                    s(:true)), nil)),
              s(:lvasgn, :result,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:lvar, :syntax), :each),
                s(:args,
                  s(:arg, :sym),
                  s(:arg, :rules)),
                s(:begin,
                  s(:lvasgn, :rules2,
                    s(:array)),
                  s(:block,
                    s(:send,
                      s(:lvar, :rules), :each),
                    s(:args,
                      s(:arg, :rhs)),
                    s(:begin,
                      s(:lvasgn, :rhs2,
                        s(:array)),
                      s(:block,
                        s(:send,
                          s(:lvar, :rhs), :each),
                        s(:args,
                          s(:arg, :e)),
                        s(:if,
                          s(:send,
                            s(:lvar, :noalt_syms), :[],
                            s(:lvar, :e)),
                          s(:send,
                            s(:lvar, :rhs2), :concat,
                            s(:send,
                              s(:send,
                                s(:lvar, :syntax), :[],
                                s(:lvar, :e)), :[],
                              s(:int, 0))),
                          s(:send,
                            s(:lvar, :rhs2), :<<,
                            s(:lvar, :e)))),
                      s(:send,
                        s(:lvar, :rules2), :<<,
                        s(:lvar, :rhs2)))),
                  s(:send,
                    s(:lvar, :result), :[]=,
                    s(:lvar, :sym),
                    s(:send,
                      s(:lvar, :rules2), :uniq)))),
              s(:lvar, :result))),
          s(:defs,
            s(:self), :reorder_rules,
            s(:args,
              s(:arg, :syntax)),
            s(:begin,
              s(:lvasgn, :result,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:lvar, :syntax), :each),
                s(:args,
                  s(:arg, :sym),
                  s(:arg, :rules)),
                s(:send,
                  s(:lvar, :result), :[]=,
                  s(:lvar, :sym),
                  s(:block,
                    s(:send,
                      s(:lvar, :rules), :sort_by),
                    s(:args,
                      s(:arg, :rhs)),
                    s(:array,
                      s(:send,
                        s(:block,
                          s(:send,
                            s(:lvar, :rhs), :find_all),
                          s(:args,
                            s(:arg, :e)),
                          s(:send,
                            s(:const, nil, :Symbol), :===,
                            s(:lvar, :e))), :length),
                      s(:send,
                        s(:lvar, :rhs), :length))))),
              s(:lvar, :result))),
          s(:def, :each_tree,
            s(:args,
              s(:arg, :sym),
              s(:arg, :limit)),
            s(:begin,
              s(:block,
                s(:send, nil, :generate_from_sym,
                  s(:lvar, :sym),
                  s(:lvar, :limit)),
                s(:args,
                  s(:arg, :_),
                  s(:arg, :tree)),
                s(:yield,
                  s(:lvar, :tree))),
              s(:nil))),
          s(:def, :each_string,
            s(:args,
              s(:arg, :sym),
              s(:arg, :limit)),
            s(:begin,
              s(:block,
                s(:send, nil, :generate_from_sym,
                  s(:lvar, :sym),
                  s(:lvar, :limit)),
                s(:args,
                  s(:arg, :_),
                  s(:arg, :tree)),
                s(:yield,
                  s(:send,
                    s(:array,
                      s(:lvar, :tree)), :join,
                    s(:str, "")))),
              s(:nil))),
          s(:def, :generate_from_sym,
            s(:args,
              s(:arg, :sym),
              s(:arg, :limit),
              s(:blockarg, :b)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :limit), :<,
                  s(:int, 0)),
                s(:return), nil),
              s(:if,
                s(:send,
                  s(:const, nil, :String), :===,
                  s(:lvar, :sym)),
                s(:yield,
                  s(:lvar, :limit),
                  s(:lvar, :sym)),
                s(:begin,
                  s(:lvasgn, :rules,
                    s(:send,
                      s(:ivar, :@syntax), :[],
                      s(:lvar, :sym))),
                  s(:if,
                    s(:send,
                      s(:lvar, :rules), :!),
                    s(:send, nil, :raise,
                      s(:dstr,
                        s(:str, "undefined rule: "),
                        s(:begin,
                          s(:lvar, :sym)))), nil),
                  s(:block,
                    s(:send,
                      s(:lvar, :rules), :each),
                    s(:args,
                      s(:arg, :rhs)),
                    s(:begin,
                      s(:if,
                        s(:or,
                          s(:send,
                            s(:send,
                              s(:lvar, :rhs), :length), :==,
                            s(:int, 1)),
                          s(:send,
                            s(:send,
                              s(:lvar, :rules), :length), :==,
                            s(:int, 1))),
                        s(:lvasgn, :limit1,
                          s(:lvar, :limit)),
                        s(:lvasgn, :limit1,
                          s(:send,
                            s(:lvar, :limit), :-,
                            s(:int, 1)))),
                      s(:send, nil, :generate_from_rhs,
                        s(:lvar, :rhs),
                        s(:lvar, :limit1),
                        s(:block_pass,
                          s(:lvar, :b))))))),
              s(:nil))),
          s(:def, :generate_from_rhs,
            s(:args,
              s(:arg, :rhs),
              s(:arg, :limit)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :limit), :<,
                  s(:int, 0)),
                s(:return), nil),
              s(:if,
                s(:send,
                  s(:lvar, :rhs), :empty?),
                s(:yield,
                  s(:lvar, :limit),
                  s(:array)),
                s(:block,
                  s(:send, nil, :generate_from_sym,
                    s(:send,
                      s(:lvar, :rhs), :[],
                      s(:int, 0)),
                    s(:lvar, :limit)),
                  s(:args,
                    s(:arg, :limit1),
                    s(:arg, :child)),
                  s(:block,
                    s(:send, nil, :generate_from_rhs,
                      s(:send,
                        s(:lvar, :rhs), :[],
                        s(:irange,
                          s(:int, 1),
                          s(:int, -1))),
                      s(:lvar, :limit1)),
                    s(:args,
                      s(:arg, :limit2),
                      s(:arg, :arr)),
                    s(:yield,
                      s(:lvar, :limit2),
                      s(:array,
                        s(:lvar, :child),
                        s(:splat,
                          s(:lvar, :arr))))))),
              s(:nil))))))))
