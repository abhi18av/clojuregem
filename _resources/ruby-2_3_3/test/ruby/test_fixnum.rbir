s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestFixnum),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@verbose,
            s(:gvar, :$VERBOSE)),
          s(:gvasgn, :$VERBOSE,
            s(:nil)))),
      s(:def, :teardown,
        s(:args),
        s(:gvasgn, :$VERBOSE,
          s(:ivar, :@verbose))),
      s(:def, :test_pow,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:send,
                s(:int, 2), :**,
                s(:int, 64)),
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 63)), :*,
                s(:int, 3)),
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 64)), :*,
                s(:int, 3))), :each),
          s(:args,
            s(:arg, :y)),
          s(:block,
            s(:send,
              s(:array,
                s(:int, -1),
                s(:int, 0),
                s(:int, 1)), :each),
            s(:args,
              s(:arg, :x)),
            s(:begin,
              s(:lvasgn, :z1,
                s(:send,
                  s(:lvar, :x), :**,
                  s(:lvar, :y))),
              s(:lvasgn, :z2,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :x), :-@)), :**,
                  s(:lvar, :y))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :y), :%,
                    s(:int, 2)), :==,
                  s(:int, 1)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :z2),
                  s(:send,
                    s(:lvar, :z1), :-@)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :z2),
                  s(:lvar, :z1))))))),
      s(:def, :test_succ,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1073741824),
            s(:send,
              s(:int, 1073741823), :succ),
            s(:str, "[ruby-dev:31189]")),
          s(:send, nil, :assert_equal,
            s(:int, 4611686018427387904),
            s(:send,
              s(:int, 4611686018427387903), :succ),
            s(:str, "[ruby-dev:31190]")))),
      s(:def, :test_pred,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, -1073741825),
            s(:send,
              s(:begin,
                s(:int, -1073741824)), :pred)),
          s(:send, nil, :assert_equal,
            s(:int, -4611686018427387905),
            s(:send,
              s(:begin,
                s(:int, -4611686018427387904)), :pred)))),
      s(:def, :test_plus,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1073741824),
            s(:send,
              s(:int, 1073741823), :+,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 4611686018427387904),
            s(:send,
              s(:int, 4611686018427387903), :+,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, -1073741825),
            s(:send,
              s(:begin,
                s(:int, -1073741824)), :+,
              s(:begin,
                s(:int, -1)))),
          s(:send, nil, :assert_equal,
            s(:int, -4611686018427387905),
            s(:send,
              s(:begin,
                s(:int, -4611686018427387904)), :+,
              s(:begin,
                s(:int, -1)))),
          s(:send, nil, :assert_equal,
            s(:int, -2147483648),
            s(:send,
              s(:begin,
                s(:int, -1073741824)), :+,
              s(:begin,
                s(:int, -1073741824)))))),
      s(:def, :test_sub,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1073741824),
            s(:send,
              s(:int, 1073741823), :-,
              s(:begin,
                s(:int, -1)))),
          s(:send, nil, :assert_equal,
            s(:int, 4611686018427387904),
            s(:send,
              s(:int, 4611686018427387903), :-,
              s(:begin,
                s(:int, -1)))),
          s(:send, nil, :assert_equal,
            s(:int, -1073741825),
            s(:send,
              s(:begin,
                s(:int, -1073741824)), :-,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, -4611686018427387905),
            s(:send,
              s(:begin,
                s(:int, -4611686018427387904)), :-,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, -2147483648),
            s(:send,
              s(:begin,
                s(:int, -1073741824)), :-,
              s(:int, 1073741824))))),
      s(:def, :test_mult,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1073741824),
            s(:send,
              s(:int, 536870912), :*,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 4611686018427387904),
            s(:send,
              s(:int, 2305843009213693952), :*,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, -1073741825),
            s(:send,
              s(:int, 33025), :*,
              s(:begin,
                s(:int, -32513)))),
          s(:send, nil, :assert_equal,
            s(:int, -4611686018427387905),
            s(:send,
              s(:int, 1380655685), :*,
              s(:begin,
                s(:int, -3340214413)))),
          s(:send, nil, :assert_equal,
            s(:int, 1073741824),
            s(:send,
              s(:begin,
                s(:int, -1073741824)), :*,
              s(:begin,
                s(:int, -1)))))),
      s(:def, :test_div,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:int, 5), :/,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:int, 1), :/,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:int, -1), :/,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 1), :/,
                  s(:int, 2))), :-@)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:begin,
                s(:int, -1)), :/,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:begin,
                s(:int, -1)), :/,
              s(:begin,
                s(:int, -2)))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:int, 1), :/,
              s(:begin,
                s(:int, -2)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 1), :/,
                  s(:begin,
                    s(:int, -2)))), :-@)),
          s(:send, nil, :assert_equal,
            s(:int, 1073741823),
            s(:send,
              s(:int, 3221225469), :/,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 1073741824),
            s(:send,
              s(:int, 3221225472), :/,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 4611686018427387904),
            s(:send,
              s(:int, 13835058055282163712), :/,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, -1073741825),
            s(:send,
              s(:int, 3221225475), :/,
              s(:begin,
                s(:int, -3)))),
          s(:send, nil, :assert_equal,
            s(:int, -4611686018427387905),
            s(:send,
              s(:int, 13835058055282163715), :/,
              s(:begin,
                s(:int, -3)))),
          s(:send, nil, :assert_equal,
            s(:int, 1073741824),
            s(:send,
              s(:begin,
                s(:int, -1073741824)), :/,
              s(:begin,
                s(:int, -1))),
            s(:str, "[ruby-dev:31210]")),
          s(:send, nil, :assert_equal,
            s(:int, 4611686018427387904),
            s(:send,
              s(:begin,
                s(:int, -4611686018427387904)), :/,
              s(:begin,
                s(:int, -1)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send,
              s(:send,
                s(:int, 2), :div,
                s(:const,
                  s(:const, nil, :Float), :NAN)), :nan?)))),
      s(:def, :test_mod,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:begin,
                s(:int, -1073741824)), :%,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:begin,
                s(:int, -1073741824)), :%,
              s(:begin,
                s(:int, -1)))))),
      s(:def, :test_divmod,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:begin,
                s(:int, -5)), :upto,
              s(:int, 5)),
            s(:args,
              s(:arg, :a)),
            s(:block,
              s(:send,
                s(:begin,
                  s(:int, -5)), :upto,
                s(:int, 5)),
              s(:args,
                s(:arg, :b)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :b), :==,
                    s(:int, 0)),
                  s(:next), nil),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :q),
                    s(:lvasgn, :r)),
                  s(:send,
                    s(:lvar, :a), :divmod,
                    s(:lvar, :b))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :a),
                  s(:send,
                    s(:send,
                      s(:lvar, :b), :*,
                      s(:lvar, :q)), :+,
                    s(:lvar, :r))),
                s(:send, nil, :assert_operator,
                  s(:send,
                    s(:lvar, :r), :abs),
                  s(:sym, :<),
                  s(:send,
                    s(:lvar, :b), :abs)),
                s(:if,
                  s(:send,
                    s(:int, 0), :<,
                    s(:lvar, :b)),
                  s(:begin,
                    s(:send, nil, :assert_operator,
                      s(:lvar, :r),
                      s(:sym, :>=),
                      s(:int, 0)),
                    s(:send, nil, :assert_operator,
                      s(:lvar, :r),
                      s(:sym, :<),
                      s(:lvar, :b))),
                  s(:begin,
                    s(:send, nil, :assert_operator,
                      s(:lvar, :r),
                      s(:sym, :>),
                      s(:lvar, :b)),
                    s(:send, nil, :assert_operator,
                      s(:lvar, :r),
                      s(:sym, :<=),
                      s(:int, 0)))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :q),
                  s(:send,
                    s(:lvar, :a), :/,
                    s(:lvar, :b))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :q),
                  s(:send,
                    s(:lvar, :a), :div,
                    s(:lvar, :b))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :r),
                  s(:send,
                    s(:lvar, :a), :%,
                    s(:lvar, :b))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :r),
                  s(:send,
                    s(:lvar, :a), :modulo,
                    s(:lvar, :b)))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send,
              s(:int, 2), :divmod,
              s(:const,
                s(:const, nil, :Float), :NAN))))),
      s(:def, :test_not,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, -1073741824),
            s(:send,
              s(:int, 1073741823), :~)),
          s(:send, nil, :assert_equal,
            s(:int, 1073741823),
            s(:send,
              s(:int, -1073741824), :~)))),
      s(:def, :test_lshift,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1073741824),
            s(:send,
              s(:int, 536870912), :<<,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, -1073741824),
            s(:send,
              s(:begin,
                s(:int, -536870912)), :<<,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, -2147483648),
            s(:send,
              s(:begin,
                s(:int, -1073741824)), :<<,
              s(:int, 1))))),
      s(:def, :test_rshift,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 536870912),
            s(:send,
              s(:int, 1073741824), :>>,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, -536870912),
            s(:send,
              s(:begin,
                s(:int, -1073741824)), :>>,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, -1073741824),
            s(:send,
              s(:begin,
                s(:int, -2147483648)), :>>,
              s(:int, 1))))),
      s(:def, :test_abs,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1073741824),
            s(:send,
              s(:begin,
                s(:int, -1073741824)), :abs)),
          s(:send, nil, :assert_equal,
            s(:int, 4611686018427387904),
            s(:send,
              s(:begin,
                s(:int, -4611686018427387904)), :abs)))),
      s(:def, :test_to_s,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "1010"),
            s(:send,
              s(:int, 10), :to_s,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "a"),
            s(:send,
              s(:int, 10), :to_s,
              s(:int, 36))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:int, 10), :to_s,
              s(:int, 1))))),
      s(:def, :test_plus2,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:int, 1), :+,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 4294967297),
            s(:send,
              s(:int, 1), :+,
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)))),
          s(:send, nil, :assert_equal,
            s(:float, 2.0),
            s(:send,
              s(:int, 1), :+,
              s(:float, 1.0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:int, 1), :+,
              s(:nil))))),
      s(:def, :test_minus,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:int, 1), :-,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, -4294967295),
            s(:send,
              s(:int, 1), :-,
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)))),
          s(:send, nil, :assert_equal,
            s(:float, 0.0),
            s(:send,
              s(:int, 1), :-,
              s(:float, 1.0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:int, 1), :-,
              s(:nil))))),
      s(:def, :test_mul,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:int, 2), :send,
              s(:sym, :*),
              s(:int, 3))),
          s(:lvasgn, :a,
            s(:send,
              s(:send,
                s(:int, 2), :**,
                s(:int, 30)), :-,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1152921502459363329),
            s(:send,
              s(:lvar, :a), :send,
              s(:sym, :*),
              s(:lvar, :a))),
          s(:send, nil, :assert_equal,
            s(:float, 6.0),
            s(:send,
              s(:int, 2), :*,
              s(:float, 3.0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:int, 2), :*,
              s(:nil))))),
      s(:def, :test_divide,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:float, 2.0),
            s(:send,
              s(:int, 4), :quo,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 2.0),
            s(:send,
              s(:int, 4), :/,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 2.0),
            s(:send,
              s(:int, 4), :div,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:float, 0.5), :**,
              s(:int, 32)),
            s(:send,
              s(:int, 1), :quo,
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:int, 1), :/,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 32))))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:int, 1), :div,
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Float),
            s(:send,
              s(:int, 1), :quo,
              s(:float, 2.0))),
          s(:send, nil, :assert_equal,
            s(:float, 0.5),
            s(:send,
              s(:int, 1), :quo,
              s(:float, 2.0))),
          s(:send, nil, :assert_equal,
            s(:float, 0.5),
            s(:send,
              s(:int, 1), :/,
              s(:float, 2.0))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:int, 1), :div,
              s(:float, 2.0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError),
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:int, 2), :quo,
              s(:nil))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:int, 2), :/,
              s(:nil))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:int, 2), :div,
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:int, 4), :modulo,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:int, 1), :modulo,
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:int, 1), :modulo,
              s(:float, 2.0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:int, 2), :modulo,
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 0)),
            s(:send,
              s(:int, 4), :divmod,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:int, 1)),
            s(:send,
              s(:int, 1), :divmod,
              s(:send,
                s(:int, 2), :**,
                s(:int, 32)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:int, 1)),
            s(:send,
              s(:int, 1), :divmod,
              s(:float, 2.0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:int, 2), :divmod,
              s(:nil))))),
      s(:def, :test_pow2,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 65536),
            s(:send,
              s(:int, 2), :**,
              s(:int, 16))),
          s(:send, nil, :assert_equal,
            s(:int, 4294967296),
            s(:send,
              s(:int, 2), :**,
              s(:int, 32))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:float, 0.5), :**,
              s(:int, 16)),
            s(:send,
              s(:int, 2), :**,
              s(:int, -16))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:begin,
                s(:int, -1)), :**,
              s(:int, 4294967296))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:begin,
                s(:int, -1)), :**,
              s(:int, 4294967295))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:int, 2), :**,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:int, 2), :**,
                        s(:int, 32))), :coerce,
                    s(:int, 2)), :first)))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:int, 4), :**,
              s(:float, 0.5))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:int, 0), :**,
              s(:float, 0.5))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 0), :**,
                  s(:float, -1.0))), :infinite?)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError),
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:int, 1), :**,
              s(:nil))))),
      s(:def, :test_cmp,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_operator,
            s(:int, 1),
            s(:sym, :!=),
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:int, 1), :<=>,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:int, 1), :<=>,
              s(:int, 4294967296))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:int, 1), :<=>,
              s(:float, 1.0))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:int, 1), :<=>,
              s(:nil))),
          s(:send, nil, :assert_operator,
            s(:int, 1),
            s(:sym, :>),
            s(:int, 0)),
          s(:send, nil, :assert_not_operator,
            s(:int, 1),
            s(:sym, :>),
            s(:int, 1)),
          s(:send, nil, :assert_not_operator,
            s(:int, 1),
            s(:sym, :>),
            s(:int, 2)),
          s(:send, nil, :assert_not_operator,
            s(:int, 1),
            s(:sym, :>),
            s(:int, 4294967296)),
          s(:send, nil, :assert_operator,
            s(:int, 1),
            s(:sym, :>),
            s(:float, 0.0)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:int, 1), :>,
              s(:nil))),
          s(:send, nil, :assert_operator,
            s(:int, 1),
            s(:sym, :>=),
            s(:int, 0)),
          s(:send, nil, :assert_operator,
            s(:int, 1),
            s(:sym, :>=),
            s(:int, 1)),
          s(:send, nil, :assert_not_operator,
            s(:int, 1),
            s(:sym, :>=),
            s(:int, 2)),
          s(:send, nil, :assert_not_operator,
            s(:int, 1),
            s(:sym, :>=),
            s(:int, 4294967296)),
          s(:send, nil, :assert_operator,
            s(:int, 1),
            s(:sym, :>=),
            s(:float, 0.0)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:int, 1), :>=,
              s(:nil))),
          s(:send, nil, :assert_not_operator,
            s(:int, 1),
            s(:sym, :<),
            s(:int, 0)),
          s(:send, nil, :assert_not_operator,
            s(:int, 1),
            s(:sym, :<),
            s(:int, 1)),
          s(:send, nil, :assert_operator,
            s(:int, 1),
            s(:sym, :<),
            s(:int, 2)),
          s(:send, nil, :assert_operator,
            s(:int, 1),
            s(:sym, :<),
            s(:int, 4294967296)),
          s(:send, nil, :assert_not_operator,
            s(:int, 1),
            s(:sym, :<),
            s(:float, 0.0)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:int, 1), :<,
              s(:nil))),
          s(:send, nil, :assert_not_operator,
            s(:int, 1),
            s(:sym, :<=),
            s(:int, 0)),
          s(:send, nil, :assert_operator,
            s(:int, 1),
            s(:sym, :<=),
            s(:int, 1)),
          s(:send, nil, :assert_operator,
            s(:int, 1),
            s(:sym, :<=),
            s(:int, 2)),
          s(:send, nil, :assert_operator,
            s(:int, 1),
            s(:sym, :<=),
            s(:int, 4294967296)),
          s(:send, nil, :assert_not_operator,
            s(:int, 1),
            s(:sym, :<=),
            s(:float, 0.0)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:int, 1), :<=,
              s(:nil))))),
      s(:class,
        s(:const, nil, :DummyNumeric),
        s(:const, nil, :Numeric),
        s(:def, :to_int,
          s(:args),
          s(:int, 1))),
      s(:def, :test_and_with_float,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send,
            s(:int, 1), :&,
            s(:float, 1.5)))),
      s(:def, :test_and_with_rational,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError),
            s(:str, "#1792")),
          s(:args),
          s(:send,
            s(:int, 1), :&,
            s(:send, nil, :Rational,
              s(:int, 3),
              s(:int, 2))))),
      s(:def, :test_and_with_nonintegral_numeric,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError),
            s(:str, "#1792")),
          s(:args),
          s(:send,
            s(:int, 1), :&,
            s(:send,
              s(:const, nil, :DummyNumeric), :new)))),
      s(:def, :test_or_with_float,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send,
            s(:int, 1), :|,
            s(:float, 1.5)))),
      s(:def, :test_or_with_rational,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError),
            s(:str, "#1792")),
          s(:args),
          s(:send,
            s(:int, 1), :|,
            s(:send, nil, :Rational,
              s(:int, 3),
              s(:int, 2))))),
      s(:def, :test_or_with_nonintegral_numeric,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError),
            s(:str, "#1792")),
          s(:args),
          s(:send,
            s(:int, 1), :|,
            s(:send,
              s(:const, nil, :DummyNumeric), :new)))),
      s(:def, :test_xor_with_float,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send,
            s(:int, 1), :^,
            s(:float, 1.5)))),
      s(:def, :test_xor_with_rational,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError),
            s(:str, "#1792")),
          s(:args),
          s(:send,
            s(:int, 1), :^,
            s(:send, nil, :Rational,
              s(:int, 3),
              s(:int, 2))))),
      s(:def, :test_xor_with_nonintegral_numeric,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError),
            s(:str, "#1792")),
          s(:args),
          s(:send,
            s(:int, 1), :^,
            s(:send,
              s(:const, nil, :DummyNumeric), :new)))),
      s(:def, :test_singleton_method,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:begin,
            s(:lvasgn, :a,
              s(:int, 1)),
            s(:defs,
              s(:lvar, :a), :foo,
              s(:args), nil)))),
      s(:def, :test_frozen,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:true),
          s(:send,
            s(:int, 1), :frozen?))),
      s(:def, :assert_eql,
        s(:args,
          s(:arg, :a),
          s(:arg, :b),
          s(:arg, :mess)),
        s(:send, nil, :assert,
          s(:send,
            s(:lvar, :a), :eql?,
            s(:lvar, :b)),
          s(:dstr,
            s(:str, "expected "),
            s(:begin,
              s(:lvar, :a)),
            s(:str, " & "),
            s(:begin,
              s(:lvar, :b)),
            s(:str, " to be eql? "),
            s(:begin,
              s(:lvar, :mess))))),
      s(:def, :test_power_of_1_and_minus_1,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5715,
            s(:str, "[ruby-core:41498]")),
          s(:lvasgn, :big,
            s(:send,
              s(:int, 1), :<<,
              s(:int, 66))),
          s(:send, nil, :assert_eql,
            s(:int, 1),
            s(:send,
              s(:int, 1), :**,
              s(:send,
                s(:lvar, :big), :-@)),
            s(:lvar, :bug5715)),
          s(:send, nil, :assert_eql,
            s(:int, 1),
            s(:send,
              s(:begin,
                s(:int, -1)), :**,
              s(:send,
                s(:lvar, :big), :-@)),
            s(:lvar, :bug5715)),
          s(:send, nil, :assert_eql,
            s(:int, -1),
            s(:send,
              s(:begin,
                s(:int, -1)), :**,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:lvar, :big), :+,
                    s(:int, 1))), :-@)),
            s(:lvar, :bug5715)))),
      s(:def, :test_power_of_0,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5713,
            s(:str, "[ruby-core:41494]")),
          s(:lvasgn, :big,
            s(:send,
              s(:int, 1), :<<,
              s(:int, 66))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ZeroDivisionError),
              s(:lvar, :bug5713)),
            s(:args),
            s(:send,
              s(:int, 0), :**,
              s(:send,
                s(:lvar, :big), :-@))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ZeroDivisionError),
              s(:lvar, :bug5713)),
            s(:args),
            s(:send,
              s(:int, 0), :**,
              s(:send, nil, :Rational,
                s(:int, -2),
                s(:int, 3)))))),
      s(:def, :test_remainder,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:int, 5), :remainder,
              s(:int, 4))),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:int, 4), :remainder,
              s(:const,
                s(:const, nil, :Float), :NAN)),
            s(:sym, :nan?)))),
      s(:def, :test_zero_p,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_predicate,
            s(:int, 0),
            s(:sym, :zero?)),
          s(:send, nil, :assert_not_predicate,
            s(:int, 1),
            s(:sym, :zero?)))),
      s(:def, :test_positive_p,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_predicate,
            s(:int, 1),
            s(:sym, :positive?)),
          s(:send, nil, :assert_not_predicate,
            s(:int, 0),
            s(:sym, :positive?)),
          s(:send, nil, :assert_not_predicate,
            s(:int, -1),
            s(:sym, :positive?)))),
      s(:def, :test_negative_p,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_predicate,
            s(:int, -1),
            s(:sym, :negative?)),
          s(:send, nil, :assert_not_predicate,
            s(:int, 0),
            s(:sym, :negative?)),
          s(:send, nil, :assert_not_predicate,
            s(:int, 1),
            s(:sym, :negative?)))))))
