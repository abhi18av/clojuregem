s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:class,
    s(:const, nil, :TestRubyYield),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_ary_each,
        s(:args),
        s(:begin,
          s(:lvasgn, :ary,
            s(:array,
              s(:int, 1))),
          s(:block,
            s(:send,
              s(:lvar, :ary), :each),
            s(:args,
              s(:arg, :a),
              s(:arg, :b),
              s(:arg, :c),
              s(:arg, :d)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 1),
                s(:nil),
                s(:nil),
                s(:nil)),
              s(:array,
                s(:lvar, :a),
                s(:lvar, :b),
                s(:lvar, :c),
                s(:lvar, :d)))),
          s(:block,
            s(:send,
              s(:lvar, :ary), :each),
            s(:args,
              s(:arg, :a),
              s(:arg, :b),
              s(:arg, :c)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 1),
                s(:nil),
                s(:nil)),
              s(:array,
                s(:lvar, :a),
                s(:lvar, :b),
                s(:lvar, :c)))),
          s(:block,
            s(:send,
              s(:lvar, :ary), :each),
            s(:args,
              s(:arg, :a),
              s(:arg, :b)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 1),
                s(:nil)),
              s(:array,
                s(:lvar, :a),
                s(:lvar, :b)))),
          s(:block,
            s(:send,
              s(:lvar, :ary), :each),
            s(:args,
              s(:arg, :a)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:lvar, :a))))),
      s(:def, :test_hash_each,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:hash,
              s(:pair,
                s(:sym, :a),
                s(:int, 1)))),
          s(:block,
            s(:send,
              s(:lvar, :h), :each),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:sym, :a),
                s(:lvar, :k)),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:lvar, :v)))),
          s(:block,
            s(:send,
              s(:lvar, :h), :each),
            s(:args,
              s(:arg, :kv)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:sym, :a),
                s(:int, 1)),
              s(:lvar, :kv))))),
      s(:def, :test_yield_0,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:block,
              s(:send, nil, :iter0),
              s(:args),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:block,
              s(:send, nil, :iter0),
              s(:args),
              s(:int, 2))))),
      s(:def, :iter0,
        s(:args),
        s(:yield)),
      s(:def, :test_yield_1,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :iter1,
              s(:array)),
            s(:args,
              s(:arg, :a),
              s(:arg, :b)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:nil),
                s(:nil)),
              s(:array,
                s(:lvar, :a),
                s(:lvar, :b)))),
          s(:block,
            s(:send, nil, :iter1,
              s(:array,
                s(:int, 1))),
            s(:args,
              s(:arg, :a),
              s(:arg, :b)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 1),
                s(:nil)),
              s(:array,
                s(:lvar, :a),
                s(:lvar, :b)))),
          s(:block,
            s(:send, nil, :iter1,
              s(:array,
                s(:int, 1),
                s(:int, 2))),
            s(:args,
              s(:arg, :a),
              s(:arg, :b)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 1),
                s(:int, 2)),
              s(:array,
                s(:lvar, :a),
                s(:lvar, :b)))),
          s(:block,
            s(:send, nil, :iter1,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3))),
            s(:args,
              s(:arg, :a),
              s(:arg, :b)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 1),
                s(:int, 2)),
              s(:array,
                s(:lvar, :a),
                s(:lvar, :b)))),
          s(:block,
            s(:send, nil, :iter1,
              s(:array)),
            s(:args,
              s(:arg, :a)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:lvar, :a))),
          s(:block,
            s(:send, nil, :iter1,
              s(:array,
                s(:int, 1))),
            s(:args,
              s(:arg, :a)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 1)),
              s(:lvar, :a))),
          s(:block,
            s(:send, nil, :iter1,
              s(:array,
                s(:int, 1),
                s(:int, 2))),
            s(:args,
              s(:arg, :a)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 1),
                s(:int, 2)),
              s(:lvar, :a))),
          s(:block,
            s(:send, nil, :iter1,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3))),
            s(:args,
              s(:arg, :a)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:lvar, :a))))),
      s(:def, :iter1,
        s(:args,
          s(:arg, :args)),
        s(:yield,
          s(:lvar, :args))),
      s(:def, :test_yield2,
        s(:args),
        s(:begin,
          s(:def, :iter2_1,
            s(:args),
            s(:yield,
              s(:int, 1),
              s(:splat,
                s(:array,
                  s(:int, 2),
                  s(:int, 3))))),
          s(:block,
            s(:send, nil, :iter2_1),
            s(:args,
              s(:arg, :a),
              s(:arg, :b),
              s(:arg, :c)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:lvar, :a),
                s(:lvar, :b),
                s(:lvar, :c)))),
          s(:def, :iter2_2,
            s(:args),
            s(:yield,
              s(:int, 1),
              s(:splat,
                s(:array)))),
          s(:block,
            s(:send, nil, :iter2_2),
            s(:args,
              s(:arg, :a),
              s(:arg, :b),
              s(:arg, :c)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 1),
                s(:nil),
                s(:nil)),
              s(:array,
                s(:lvar, :a),
                s(:lvar, :b),
                s(:lvar, :c)))),
          s(:def, :iter2_3,
            s(:args),
            s(:yield,
              s(:int, 1),
              s(:splat,
                s(:array,
                  s(:int, 2))))),
          s(:block,
            s(:send, nil, :iter2_3),
            s(:args,
              s(:arg, :a),
              s(:arg, :b),
              s(:arg, :c)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:nil)),
              s(:array,
                s(:lvar, :a),
                s(:lvar, :b),
                s(:lvar, :c)))))),
      s(:def, :test_yield_nested,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:int, 1),
                  s(:array,
                    s(:int, 2),
                    s(:int, 3)))), :each),
            s(:args,
              s(:arg, :a),
              s(:mlhs,
                s(:arg, :b),
                s(:arg, :c))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:lvar, :a),
                s(:lvar, :b),
                s(:lvar, :c)))),
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:int, 1),
                  s(:array,
                    s(:int, 2),
                    s(:int, 3)))), :map),
            s(:args,
              s(:arg, :a),
              s(:mlhs,
                s(:arg, :b),
                s(:arg, :c))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:lvar, :a),
                s(:lvar, :b),
                s(:lvar, :c)))))),
      s(:def, :test_with_enum,
        s(:args),
        s(:begin,
          s(:lvasgn, :obj,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :obj), :each,
            s(:args),
            s(:yield,
              s(:splat,
                s(:array)))),
          s(:block,
            s(:send,
              s(:lvar, :obj), :each),
            s(:args,
              s(:restarg, :v)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:array),
              s(:str, "[ruby-dev:32392]"))),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :obj), :to_enum), :each),
            s(:args,
              s(:restarg, :v)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:array),
              s(:str, "[ruby-dev:32392]"))))),
      s(:def, :block_args_unleashed,
        s(:args),
        s(:yield,
          s(:int, 1),
          s(:int, 2),
          s(:int, 3),
          s(:int, 4),
          s(:int, 5))),
      s(:def, :test_block_args_unleashed,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:block,
              s(:send, nil, :block_args_unleashed),
              s(:args,
                s(:arg, :a),
                s(:optarg, :b,
                  s(:int, 1)),
                s(:restarg, :c),
                s(:arg, :d),
                s(:arg, :e)),
              s(:array,
                s(:lvar, :a),
                s(:lvar, :b),
                s(:lvar, :c),
                s(:lvar, :d),
                s(:lvar, :e)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:array,
                s(:int, 3)),
              s(:int, 4),
              s(:int, 5)),
            s(:lvar, :r),
            s(:str, "[ruby-core:19485]")))))),
  s(:send, nil, :require_relative,
    s(:str, "sentence")),
  s(:class,
    s(:const, nil, :TestRubyYieldGen),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :Syntax,
        s(:hash,
          s(:pair,
            s(:sym, :exp),
            s(:array,
              s(:array,
                s(:str, "0")),
              s(:array,
                s(:str, "nil")),
              s(:array,
                s(:str, "false")),
              s(:array,
                s(:str, "[]")),
              s(:array,
                s(:str, "["),
                s(:sym, :exps),
                s(:str, "]")))),
          s(:pair,
            s(:sym, :exps),
            s(:array,
              s(:array,
                s(:sym, :exp)),
              s(:array,
                s(:sym, :exp),
                s(:str, ","),
                s(:sym, :exps)))),
          s(:pair,
            s(:sym, :opt_block_param),
            s(:array,
              s(:array),
              s(:array,
                s(:sym, :block_param_def)))),
          s(:pair,
            s(:sym, :block_param_def),
            s(:array,
              s(:array,
                s(:str, "|"),
                s(:str, "|")),
              s(:array,
                s(:str, "|"),
                s(:sym, :block_param),
                s(:str, "|")))),
          s(:pair,
            s(:sym, :block_param),
            s(:array,
              s(:array,
                s(:sym, :f_arg),
                s(:str, ","),
                s(:sym, :f_rest_arg),
                s(:sym, :opt_f_block_arg)),
              s(:array,
                s(:sym, :f_arg),
                s(:str, ",")),
              s(:array,
                s(:sym, :f_arg),
                s(:str, ","),
                s(:sym, :f_rest_arg),
                s(:str, ","),
                s(:sym, :f_arg),
                s(:sym, :opt_f_block_arg)),
              s(:array,
                s(:sym, :f_arg),
                s(:sym, :opt_f_block_arg)),
              s(:array,
                s(:sym, :f_rest_arg),
                s(:sym, :opt_f_block_arg)),
              s(:array,
                s(:sym, :f_rest_arg),
                s(:str, ","),
                s(:sym, :f_arg),
                s(:sym, :opt_f_block_arg)),
              s(:array,
                s(:sym, :f_block_arg)))),
          s(:pair,
            s(:sym, :f_arg),
            s(:array,
              s(:array,
                s(:sym, :f_arg_item)),
              s(:array,
                s(:sym, :f_arg),
                s(:str, ","),
                s(:sym, :f_arg_item)))),
          s(:pair,
            s(:sym, :f_rest_arg),
            s(:array,
              s(:array,
                s(:str, "*"),
                s(:str, "var")),
              s(:array,
                s(:str, "*")))),
          s(:pair,
            s(:sym, :opt_f_block_arg),
            s(:array,
              s(:array,
                s(:str, ","),
                s(:sym, :f_block_arg)),
              s(:array))),
          s(:pair,
            s(:sym, :f_block_arg),
            s(:array,
              s(:array,
                s(:str, "&"),
                s(:str, "var")))),
          s(:pair,
            s(:sym, :f_arg_item),
            s(:array,
              s(:array,
                s(:sym, :f_norm_arg)),
              s(:array,
                s(:str, "("),
                s(:sym, :f_margs),
                s(:str, ")")))),
          s(:pair,
            s(:sym, :f_margs),
            s(:array,
              s(:array,
                s(:sym, :f_marg_list)),
              s(:array,
                s(:sym, :f_marg_list),
                s(:str, ","),
                s(:str, "*"),
                s(:sym, :f_norm_arg)),
              s(:array,
                s(:sym, :f_marg_list),
                s(:str, ","),
                s(:str, "*"),
                s(:sym, :f_norm_arg),
                s(:str, ","),
                s(:sym, :f_marg_list)),
              s(:array,
                s(:sym, :f_marg_list),
                s(:str, ","),
                s(:str, "*")),
              s(:array,
                s(:sym, :f_marg_list),
                s(:str, ","),
                s(:str, "*"),
                s(:str, ","),
                s(:sym, :f_marg_list)),
              s(:array,
                s(:str, "*"),
                s(:sym, :f_norm_arg)),
              s(:array,
                s(:str, "*"),
                s(:sym, :f_norm_arg),
                s(:str, ","),
                s(:sym, :f_marg_list)),
              s(:array,
                s(:str, "*")),
              s(:array,
                s(:str, "*"),
                s(:str, ","),
                s(:sym, :f_marg_list)))),
          s(:pair,
            s(:sym, :f_marg_list),
            s(:array,
              s(:array,
                s(:sym, :f_marg)),
              s(:array,
                s(:sym, :f_marg_list),
                s(:str, ","),
                s(:sym, :f_marg)))),
          s(:pair,
            s(:sym, :f_marg),
            s(:array,
              s(:array,
                s(:sym, :f_norm_arg)),
              s(:array,
                s(:str, "("),
                s(:sym, :f_margs),
                s(:str, ")")))),
          s(:pair,
            s(:sym, :f_norm_arg),
            s(:array,
              s(:array,
                s(:str, "var")))),
          s(:pair,
            s(:sym, :command_args),
            s(:array,
              s(:array,
                s(:sym, :open_args)))),
          s(:pair,
            s(:sym, :open_args),
            s(:array,
              s(:array,
                s(:str, " "),
                s(:sym, :call_args)),
              s(:array,
                s(:str, "("),
                s(:str, ")")),
              s(:array,
                s(:str, "("),
                s(:sym, :call_args2),
                s(:str, ")")))),
          s(:pair,
            s(:sym, :call_args),
            s(:array,
              s(:array,
                s(:sym, :command)),
              s(:array,
                s(:sym, :args),
                s(:sym, :opt_block_arg)),
              s(:array,
                s(:sym, :assocs),
                s(:sym, :opt_block_arg)),
              s(:array,
                s(:sym, :args),
                s(:str, ","),
                s(:sym, :assocs),
                s(:sym, :opt_block_arg)),
              s(:array,
                s(:sym, :block_arg)))),
          s(:pair,
            s(:sym, :call_args2),
            s(:array,
              s(:array,
                s(:sym, :arg),
                s(:str, ","),
                s(:sym, :args),
                s(:sym, :opt_block_arg)),
              s(:array,
                s(:sym, :arg),
                s(:str, ","),
                s(:sym, :block_arg)),
              s(:array,
                s(:sym, :assocs),
                s(:sym, :opt_block_arg)),
              s(:array,
                s(:sym, :arg),
                s(:str, ","),
                s(:sym, :assocs),
                s(:sym, :opt_block_arg)),
              s(:array,
                s(:sym, :arg),
                s(:str, ","),
                s(:sym, :args),
                s(:str, ","),
                s(:sym, :assocs),
                s(:sym, :opt_block_arg)),
              s(:array,
                s(:sym, :block_arg)))),
          s(:pair,
            s(:sym, :command_args_noblock),
            s(:array,
              s(:array,
                s(:sym, :open_args_noblock)))),
          s(:pair,
            s(:sym, :open_args_noblock),
            s(:array,
              s(:array,
                s(:str, " "),
                s(:sym, :call_args_noblock)),
              s(:array,
                s(:str, "("),
                s(:str, ")")),
              s(:array,
                s(:str, "("),
                s(:sym, :call_args2_noblock),
                s(:str, ")")))),
          s(:pair,
            s(:sym, :call_args_noblock),
            s(:array,
              s(:array,
                s(:sym, :command)),
              s(:array,
                s(:sym, :args)),
              s(:array,
                s(:sym, :assocs)),
              s(:array,
                s(:sym, :args),
                s(:str, ","),
                s(:sym, :assocs)))),
          s(:pair,
            s(:sym, :call_args2_noblock),
            s(:array,
              s(:array,
                s(:sym, :arg),
                s(:str, ","),
                s(:sym, :args)),
              s(:array,
                s(:sym, :assocs)),
              s(:array,
                s(:sym, :arg),
                s(:str, ","),
                s(:sym, :assocs)),
              s(:array,
                s(:sym, :arg),
                s(:str, ","),
                s(:sym, :args),
                s(:str, ","),
                s(:sym, :assocs)))),
          s(:pair,
            s(:sym, :command),
            s(:array)),
          s(:pair,
            s(:sym, :args),
            s(:array,
              s(:array,
                s(:sym, :arg)),
              s(:array,
                s(:str, "*"),
                s(:sym, :arg)),
              s(:array,
                s(:sym, :args),
                s(:str, ","),
                s(:sym, :arg)),
              s(:array,
                s(:sym, :args),
                s(:str, ","),
                s(:str, "*"),
                s(:sym, :arg)))),
          s(:pair,
            s(:sym, :arg),
            s(:array,
              s(:array,
                s(:sym, :exp)))),
          s(:pair,
            s(:sym, :assocs),
            s(:array,
              s(:array,
                s(:sym, :assoc)),
              s(:array,
                s(:sym, :assocs),
                s(:str, ","),
                s(:sym, :assoc)))),
          s(:pair,
            s(:sym, :assoc),
            s(:array,
              s(:array,
                s(:sym, :arg),
                s(:str, "=>"),
                s(:sym, :arg)),
              s(:array,
                s(:str, "label"),
                s(:str, ":"),
                s(:sym, :arg)))),
          s(:pair,
            s(:sym, :opt_block_arg),
            s(:array,
              s(:array,
                s(:str, ","),
                s(:sym, :block_arg)),
              s(:array))),
          s(:pair,
            s(:sym, :block_arg),
            s(:array,
              s(:array,
                s(:str, "&"),
                s(:sym, :arg)))),
          s(:pair,
            s(:sym, :test_proc),
            s(:array,
              s(:array,
                s(:str, "def m() yield"),
                s(:sym, :command_args_noblock),
                s(:str, " end; r = m {"),
                s(:sym, :block_param_def),
                s(:str, "vars"),
                s(:str, "}; undef m; r")))),
          s(:pair,
            s(:sym, :test_lambda),
            s(:array,
              s(:array,
                s(:str, "def m() yield"),
                s(:sym, :command_args_noblock),
                s(:str, " end; r = m(&lambda {"),
                s(:sym, :block_param_def),
                s(:str, "vars"),
                s(:str, "}); undef m; r")))),
          s(:pair,
            s(:sym, :test_enum),
            s(:array,
              s(:array,
                s(:str, "o = Object.new; def o.each() yield"),
                s(:sym, :command_args_noblock),
                s(:str, " end; r1 = r2 = nil; o.each {|*x| r1 = x }; o.to_enum.each {|*x| r2 = x }; [r1, r2]")))))),
      s(:def, :rename_var,
        s(:args,
          s(:arg, :obj)),
        s(:begin,
          s(:lvasgn, :vars,
            s(:array)),
          s(:lvasgn, :r,
            s(:block,
              s(:send,
                s(:lvar, :obj), :subst,
                s(:str, "var")),
              s(:args),
              s(:begin,
                s(:lvasgn, :var,
                  s(:dstr,
                    s(:str, "v"),
                    s(:begin,
                      s(:send,
                        s(:lvar, :vars), :length)))),
                s(:send,
                  s(:lvar, :vars), :<<,
                  s(:lvar, :var)),
                s(:lvar, :var)))),
          s(:return,
            s(:lvar, :r),
            s(:lvar, :vars)))),
      s(:def, :split_by_comma,
        s(:args,
          s(:arg, :ary)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :ary), :empty?),
            s(:return,
              s(:array)), nil),
          s(:lvasgn, :result,
            s(:array,
              s(:array))),
          s(:block,
            s(:send,
              s(:lvar, :ary), :each),
            s(:args,
              s(:arg, :e)),
            s(:if,
              s(:send,
                s(:lvar, :e), :==,
                s(:str, ",")),
              s(:send,
                s(:lvar, :result), :<<,
                s(:array)),
              s(:send,
                s(:send,
                  s(:lvar, :result), :last), :<<,
                s(:lvar, :e)))),
          s(:lvar, :result))),
      s(:def, :emu_return_args,
        s(:args,
          s(:restarg, :vs)),
        s(:lvar, :vs)),
      s(:def, :emu_eval_args,
        s(:args,
          s(:arg, :args)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :last), :==,
              s(:array)),
            s(:lvasgn, :args,
              s(:send,
                s(:lvar, :args), :[],
                s(:erange,
                  s(:int, 0),
                  s(:int, -1)))), nil),
          s(:lvasgn, :code,
            s(:dstr,
              s(:str, "emu_return_args("),
              s(:begin,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :args), :map),
                    s(:args,
                      s(:arg, :a)),
                    s(:send,
                      s(:lvar, :a), :join,
                      s(:str, ""))), :join,
                  s(:str, ","))),
              s(:str, ")"))),
          s(:send, nil, :eval,
            s(:lvar, :code),
            s(:nil),
            s(:str, "generated_code_in_emu_eval_args")))),
      s(:def, :emu_bind_single,
        s(:args,
          s(:arg, :arg),
          s(:arg, :param),
          s(:arg, :result_binding)),
        s(:begin,
          s(:if,
            s(:and,
              s(:and,
                s(:send,
                  s(:send,
                    s(:lvar, :param), :length), :==,
                  s(:int, 1)),
                s(:send,
                  s(:const, nil, :String), :===,
                  s(:send,
                    s(:lvar, :param), :[],
                    s(:int, 0)))),
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A[a-z0-9]+\\z"),
                  s(:regopt)),
                s(:send,
                  s(:lvar, :param), :[],
                  s(:int, 0)))),
            s(:send,
              s(:lvar, :result_binding), :[]=,
              s(:send,
                s(:lvar, :param), :[],
                s(:int, 0)),
              s(:lvar, :arg)),
            s(:if,
              s(:and,
                s(:and,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :param), :length), :==,
                      s(:int, 1)),
                    s(:send,
                      s(:const, nil, :Array), :===,
                      s(:send,
                        s(:lvar, :param), :[],
                        s(:int, 0)))),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :param), :[],
                        s(:int, 0)), :[],
                      s(:int, 0)), :==,
                    s(:str, "("))),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :param), :[],
                      s(:int, 0)), :[],
                    s(:int, -1)), :==,
                  s(:str, ")"))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:const, nil, :Array), :===,
                    s(:lvar, :arg)), nil,
                  s(:lvasgn, :arg,
                    s(:array,
                      s(:lvar, :arg)))),
                s(:send, nil, :emu_bind_params,
                  s(:lvar, :arg),
                  s(:send, nil, :split_by_comma,
                    s(:send,
                      s(:send,
                        s(:lvar, :param), :[],
                        s(:int, 0)), :[],
                      s(:erange,
                        s(:int, 1),
                        s(:int, -1)))),
                  s(:false),
                  s(:lvar, :result_binding))),
              s(:send, nil, :raise,
                s(:dstr,
                  s(:str, "unexpected param: "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :param), :inspect)))))),
          s(:lvar, :result_binding))),
      s(:def, :emu_bind_params,
        s(:args,
          s(:arg, :args),
          s(:arg, :params),
          s(:arg, :islambda),
          s(:optarg, :result_binding,
            s(:hash))),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :params), :last), :==,
              s(:array)),
            s(:send,
              s(:lvar, :params), :pop), nil),
          s(:lvasgn, :star_index,
            s(:nil)),
          s(:block,
            s(:send,
              s(:lvar, :params), :each_with_index),
            s(:args,
              s(:arg, :par),
              s(:arg, :i)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :par), :[],
                  s(:int, 0)), :==,
                s(:str, "*")),
              s(:lvasgn, :star_index,
                s(:lvar, :i)), nil)),
          s(:if,
            s(:lvar, :islambda),
            s(:if,
              s(:lvar, :star_index),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :args), :length), :<,
                  s(:send,
                    s(:send,
                      s(:lvar, :params), :length), :-,
                    s(:int, 1))),
                s(:send, nil, :throw,
                  s(:sym, :emuerror),
                  s(:const, nil, :ArgumentError)), nil),
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :args), :length), :!=,
                    s(:send,
                      s(:lvar, :params), :length)),
                  s(:send,
                    s(:begin,
                      s(:and,
                        s(:and,
                          s(:send,
                            s(:send,
                              s(:lvar, :args), :length), :==,
                            s(:int, 1)),
                          s(:send,
                            s(:const, nil, :Array), :===,
                            s(:send,
                              s(:lvar, :args), :[],
                              s(:int, 0)))),
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :args), :[],
                              s(:int, 0)), :length), :==,
                          s(:send,
                            s(:lvar, :params), :length)))), :!)),
                s(:send, nil, :throw,
                  s(:sym, :emuerror),
                  s(:const, nil, :ArgumentError)), nil)), nil),
          s(:if,
            s(:lvar, :star_index),
            s(:begin,
              s(:lvasgn, :pre_params,
                s(:send,
                  s(:lvar, :params), :[],
                  s(:erange,
                    s(:int, 0),
                    s(:lvar, :star_index)))),
              s(:lvasgn, :rest_param,
                s(:send,
                  s(:lvar, :params), :[],
                  s(:lvar, :star_index))),
              s(:lvasgn, :post_params,
                s(:send,
                  s(:lvar, :params), :[],
                  s(:irange,
                    s(:begin,
                      s(:send,
                        s(:lvar, :star_index), :+,
                        s(:int, 1))),
                    s(:int, -1)))),
              s(:block,
                s(:send,
                  s(:lvar, :pre_params), :each),
                s(:args,
                  s(:arg, :par)),
                s(:send, nil, :emu_bind_single,
                  s(:send,
                    s(:lvar, :args), :shift),
                  s(:lvar, :par),
                  s(:lvar, :result_binding))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :post_params), :length), :<=,
                  s(:send,
                    s(:lvar, :args), :length)),
                s(:block,
                  s(:send,
                    s(:lvar, :post_params), :reverse_each),
                  s(:args,
                    s(:arg, :par)),
                  s(:send, nil, :emu_bind_single,
                    s(:send,
                      s(:lvar, :args), :pop),
                    s(:lvar, :par),
                    s(:lvar, :result_binding))),
                s(:block,
                  s(:send,
                    s(:lvar, :post_params), :each),
                  s(:args,
                    s(:arg, :par)),
                  s(:send, nil, :emu_bind_single,
                    s(:send,
                      s(:lvar, :args), :shift),
                    s(:lvar, :par),
                    s(:lvar, :result_binding)))),
              s(:if,
                s(:send,
                  s(:lvar, :rest_param), :!=,
                  s(:array,
                    s(:str, "*"))),
                s(:send, nil, :emu_bind_single,
                  s(:lvar, :args),
                  s(:send,
                    s(:lvar, :rest_param), :[],
                    s(:irange,
                      s(:int, 1),
                      s(:int, -1))),
                  s(:lvar, :result_binding)), nil)),
            s(:block,
              s(:send,
                s(:lvar, :params), :each_with_index),
              s(:args,
                s(:arg, :par),
                s(:arg, :i)),
              s(:send, nil, :emu_bind_single,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:lvar, :i)),
                s(:lvar, :par),
                s(:lvar, :result_binding)))),
          s(:lvar, :result_binding))),
      s(:def, :emu_bind,
        s(:args,
          s(:arg, :t),
          s(:arg, :islambda)),
        s(:begin,
          s(:lvasgn, :command_args_noblock,
            s(:send,
              s(:lvar, :t), :[],
              s(:int, 1))),
          s(:lvasgn, :block_param_def,
            s(:send,
              s(:lvar, :t), :[],
              s(:int, 3))),
          s(:lvasgn, :command_args_noblock,
            s(:block,
              s(:send,
                s(:lvar, :command_args_noblock), :expand),
              s(:args,
                s(:arg, :a)),
              s(:send,
                s(:begin,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :a), :[],
                        s(:int, 0)), :==,
                      s(:str, "[")),
                    s(:send,
                      s(:send,
                        s(:lvar, :a), :[],
                        s(:int, -1)), :==,
                      s(:str, "]")))), :!))),
          s(:lvasgn, :block_param_def,
            s(:block,
              s(:send,
                s(:lvar, :block_param_def), :expand),
              s(:args,
                s(:arg, :a)),
              s(:send,
                s(:begin,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :a), :[],
                        s(:int, 0)), :==,
                      s(:str, "(")),
                    s(:send,
                      s(:send,
                        s(:lvar, :a), :[],
                        s(:int, -1)), :==,
                      s(:str, ")")))), :!))),
          s(:if,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :command_args_noblock), :to_a), :[],
                s(:int, 0)), :==,
              s(:str, " ")),
            s(:lvasgn, :args,
              s(:send,
                s(:send,
                  s(:lvar, :command_args_noblock), :to_a), :[],
                s(:irange,
                  s(:int, 1),
                  s(:int, -1)))),
            s(:if,
              s(:and,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :command_args_noblock), :to_a), :[],
                    s(:int, 0)), :==,
                  s(:str, "(")),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :command_args_noblock), :to_a), :[],
                    s(:int, -1)), :==,
                  s(:str, ")"))),
              s(:lvasgn, :args,
                s(:send,
                  s(:send,
                    s(:lvar, :command_args_noblock), :to_a), :[],
                  s(:erange,
                    s(:int, 1),
                    s(:int, -1)))),
              s(:send, nil, :raise,
                s(:dstr,
                  s(:str, "unexpected command_args_noblock: "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :command_args_noblock), :inspect)))))),
          s(:lvasgn, :args,
            s(:send, nil, :emu_eval_args,
              s(:send, nil, :split_by_comma,
                s(:lvar, :args)))),
          s(:lvasgn, :params,
            s(:send,
              s(:send,
                s(:lvar, :block_param_def), :to_a), :[],
              s(:erange,
                s(:int, 1),
                s(:int, -1)))),
          s(:lvasgn, :params,
            s(:send, nil, :split_by_comma,
              s(:lvar, :params))),
          s(:lvasgn, :result_binding,
            s(:hash)),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :params), :last),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :params), :last), :[],
                  s(:int, 0)), :==,
                s(:str, "&"))),
            s(:begin,
              s(:send,
                s(:lvar, :result_binding), :[]=,
                s(:send,
                  s(:send,
                    s(:lvar, :params), :last), :[],
                  s(:int, 1)),
                s(:nil)),
              s(:send,
                s(:lvar, :params), :pop)), nil),
          s(:if,
            s(:send,
              s(:lvar, :islambda), :!),
            s(:if,
              s(:and,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :args), :length), :==,
                    s(:int, 1)),
                  s(:send,
                    s(:const, nil, :Array), :===,
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:int, 0)))),
                s(:send,
                  s(:int, 1), :<,
                  s(:send,
                    s(:lvar, :params), :length))),
              s(:lvasgn, :args,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0))), nil), nil),
          s(:send, nil, :emu_bind_params,
            s(:lvar, :args),
            s(:lvar, :params),
            s(:lvar, :islambda),
            s(:lvar, :result_binding)),
          s(:lvar, :result_binding))),
      s(:def, :emu,
        s(:args,
          s(:arg, :t),
          s(:arg, :vars),
          s(:arg, :islambda)),
        s(:block,
          s(:send, nil, :catch,
            s(:sym, :emuerror)),
          s(:args),
          s(:begin,
            s(:lvasgn, :emu_binding,
              s(:send, nil, :emu_bind,
                s(:lvar, :t),
                s(:lvar, :islambda))),
            s(:block,
              s(:send,
                s(:lvar, :vars), :map),
              s(:args,
                s(:arg, :var)),
              s(:send,
                s(:lvar, :emu_binding), :fetch,
                s(:lvar, :var),
                s(:str, "NOVAL")))))),
      s(:def, :disable_stderr,
        s(:args),
        s(:kwbegin,
          s(:ensure,
            s(:begin,
              s(:lvasgn, :save_stderr,
                s(:gvar, :$stderr)),
              s(:gvasgn, :$stderr,
                s(:send,
                  s(:const, nil, :StringIO), :new)),
              s(:yield)),
            s(:gvasgn, :$stderr,
              s(:lvar, :save_stderr))))),
      s(:def, :check_nofork,
        s(:args,
          s(:arg, :t),
          s(:optarg, :islambda,
            s(:false))),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :t),
              s(:lvasgn, :vars)),
            s(:send, nil, :rename_var,
              s(:lvar, :t))),
          s(:lvasgn, :t,
            s(:block,
              s(:send,
                s(:lvar, :t), :subst,
                s(:str, "vars")),
              s(:args),
              s(:dstr,
                s(:str, " ["),
                s(:begin,
                  s(:send,
                    s(:lvar, :vars), :join,
                    s(:str, ","))),
                s(:str, "]")))),
          s(:lvasgn, :emu_values,
            s(:send, nil, :emu,
              s(:lvar, :t),
              s(:lvar, :vars),
              s(:lvar, :islambda))),
          s(:lvasgn, :s,
            s(:send,
              s(:lvar, :t), :to_s)),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :eval_values,
            s(:block,
              s(:send, nil, :disable_stderr),
              s(:args),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:lvar, :o), :instance_eval,
                    s(:lvar, :s),
                    s(:str, "generated_code_in_check_nofork")),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :ArgumentError)), nil,
                    s(:const, nil, :ArgumentError)), nil)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :emu_values),
            s(:lvar, :eval_values),
            s(:lvar, :s)))),
      s(:def, :assert_all_sentences,
        s(:args,
          s(:arg, :syntax),
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :syntax,
            s(:send,
              s(:const, nil, :Sentence), :expand_syntax,
              s(:lvar, :syntax))),
          s(:block,
            s(:send, nil, :all_assertions),
            s(:args,
              s(:arg, :a)),
            s(:block,
              s(:send,
                s(:const, nil, :Sentence), :each,
                s(:lvar, :syntax),
                s(:splat,
                  s(:lvar, :args))),
              s(:args,
                s(:arg, :t)),
              s(:block,
                s(:send,
                  s(:lvar, :a), :for,
                  s(:lvar, :t)),
                s(:args),
                s(:yield,
                  s(:lvar, :t))))))),
      s(:def, :test_yield,
        s(:args),
        s(:block,
          s(:send, nil, :assert_all_sentences,
            s(:const, nil, :Syntax),
            s(:sym, :test_proc),
            s(:int, 4)),
          s(:args,
            s(:arg, :t)),
          s(:send, nil, :check_nofork,
            s(:lvar, :t)))),
      s(:def, :test_yield_lambda,
        s(:args),
        s(:block,
          s(:send, nil, :assert_all_sentences,
            s(:const, nil, :Syntax),
            s(:sym, :test_lambda),
            s(:int, 4)),
          s(:args,
            s(:arg, :t)),
          s(:send, nil, :check_nofork,
            s(:lvar, :t),
            s(:true)))),
      s(:def, :test_yield_enum,
        s(:args),
        s(:block,
          s(:send, nil, :assert_all_sentences,
            s(:const, nil, :Syntax),
            s(:sym, :test_enum),
            s(:int, 4)),
          s(:args,
            s(:arg, :t)),
          s(:begin,
            s(:lvasgn, :code,
              s(:send,
                s(:lvar, :t), :to_s)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :r1),
                s(:lvasgn, :r2)),
              s(:block,
                s(:send, nil, :disable_stderr),
                s(:args),
                s(:send, nil, :eval,
                  s(:lvar, :code),
                  s(:nil),
                  s(:str, "generated_code_in_test_yield_enum")))),
            s(:send, nil, :assert_equal,
              s(:lvar, :r1),
              s(:lvar, :r2),
              s(:dstr,
                s(:begin,
                  s(:lvar, :t))))))),
      s(:def, :test_block_with_mock,
        s(:args),
        s(:begin,
          s(:lvasgn, :y,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :y), :s,
            s(:args,
              s(:arg, :a)),
            s(:yield,
              s(:lvar, :a))),
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :m), :method_missing,
            s(:args,
              s(:restarg, :a)),
            s(:zsuper)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :m),
              s(:nil)),
            s(:block,
              s(:send,
                s(:lvar, :y), :s,
                s(:lvar, :m)),
              s(:args,
                s(:arg, :a),
                s(:arg, :b)),
              s(:array,
                s(:lvar, :a),
                s(:lvar, :b)))))),
      s(:def, :test_block_cached_argc,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array),
          s(:dstr,
            s(:str, "      class Yielder\n"),
            s(:str, "        def each\n"),
            s(:str, "          yield :x, :y, :z\n"),
            s(:str, "        end\n"),
            s(:str, "      end\n"),
            s(:str, "      class Getter1\n"),
            s(:str, "        include Enumerable\n"),
            s(:str, "        def each(&block)\n"),
            s(:str, "          Yielder.new.each(&block)\n"),
            s(:str, "        end\n"),
            s(:str, "      end\n"),
            s(:str, "      class Getter2\n"),
            s(:str, "        include Enumerable\n"),
            s(:str, "        def each\n"),
            s(:str, "          Yielder.new.each { |a, b, c, d| yield(a) }\n"),
            s(:str, "        end\n"),
            s(:str, "      end\n"),
            s(:str, "      Getter1.new.map{Getter2.new.each{|x|}}\n")))))))
