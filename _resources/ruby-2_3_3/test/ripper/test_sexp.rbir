s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :require,
          s(:str, "ripper")),
        s(:send, nil, :require,
          s(:str, "test/unit")),
        s(:lvasgn, :ripper_test,
          s(:true)),
        s(:module,
          s(:const, nil, :TestRipper), nil)),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:lvar, :ripper_test),
    s(:class,
      s(:const,
        s(:const, nil, :TestRipper), :Sexp),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :test_compile_error,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_nil,
              s(:send,
                s(:const, nil, :Ripper), :sexp,
                s(:str, "/"))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:const, nil, :Ripper), :sexp,
                s(:str, "-"))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:const, nil, :Ripper), :sexp,
                s(:str, "+"))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:const, nil, :Ripper), :sexp,
                s(:str, "*"))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:const, nil, :Ripper), :sexp,
                s(:str, "end"))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:const, nil, :Ripper), :sexp,
                s(:str, "end 1"))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:const, nil, :Ripper), :sexp,
                s(:str, "/*"))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:const, nil, :Ripper), :sexp,
                s(:str, "/*/"))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:const, nil, :Ripper), :sexp,
                s(:str, "/+/"))))),
        s(:def, :test_regexp_content,
          s(:args),
          s(:begin,
            s(:lvasgn, :sexp,
              s(:send,
                s(:const, nil, :Ripper), :sexp,
                s(:str, "//"))),
            s(:send, nil, :assert_nil,
              s(:send, nil, :search_sexp,
                s(:sym, :@tstring_content),
                s(:send, nil, :search_sexp,
                  s(:sym, :regexp_literal),
                  s(:lvar, :sexp)))),
            s(:lvasgn, :sexp,
              s(:send,
                s(:const, nil, :Ripper), :sexp,
                s(:str, "/foo/"))),
            s(:send, nil, :assert_equal,
              s(:str, "foo"),
              s(:send,
                s(:send, nil, :search_sexp,
                  s(:sym, :@tstring_content),
                  s(:send, nil, :search_sexp,
                    s(:sym, :regexp_literal),
                    s(:lvar, :sexp))), :[],
                s(:int, 1))),
            s(:lvasgn, :sexp,
              s(:send,
                s(:const, nil, :Ripper), :sexp,
                s(:str, "/foo\nbar/"))),
            s(:send, nil, :assert_equal,
              s(:str, "foo\nbar"),
              s(:send,
                s(:send, nil, :search_sexp,
                  s(:sym, :@tstring_content),
                  s(:send, nil, :search_sexp,
                    s(:sym, :regexp_literal),
                    s(:lvar, :sexp))), :[],
                s(:int, 1))),
            s(:lvasgn, :sexp,
              s(:send,
                s(:const, nil, :Ripper), :sexp,
                s(:str, "/(?<n>a(b|\\g<n>))/"))),
            s(:send, nil, :assert_equal,
              s(:str, "(?<n>a(b|\\g<n>))"),
              s(:send,
                s(:send, nil, :search_sexp,
                  s(:sym, :@tstring_content),
                  s(:send, nil, :search_sexp,
                    s(:sym, :regexp_literal),
                    s(:lvar, :sexp))), :[],
                s(:int, 1))))),
        s(:def, :test_heredoc_content,
          s(:args),
          s(:begin,
            s(:lvasgn, :sexp,
              s(:send,
                s(:const, nil, :Ripper), :sexp,
                s(:str, "<<E\nfoo\nE"))),
            s(:send, nil, :assert_equal,
              s(:str, "foo\n"),
              s(:send,
                s(:send, nil, :search_sexp,
                  s(:sym, :@tstring_content),
                  s(:lvar, :sexp)), :[],
                s(:int, 1))))),
        s(:def, :test_squiggly_heredoc,
          s(:args),
          s(:begin,
            s(:lvasgn, :sexp,
              s(:send,
                s(:const, nil, :Ripper), :sexp,
                s(:str, "<<~eot\n      asdf\neot"))),
            s(:send, nil, :assert_equal,
              s(:str, "asdf\n"),
              s(:send,
                s(:send, nil, :search_sexp,
                  s(:sym, :@tstring_content),
                  s(:lvar, :sexp)), :[],
                s(:int, 1))))),
        s(:def, :test_squiggly_heredoc_with_interpolated_expression,
          s(:args),
          s(:begin,
            s(:lvasgn, :sexp1,
              s(:send,
                s(:const, nil, :Ripper), :sexp,
                s(:dstr,
                  s(:str, "<<-eot\n"),
                  s(:str, "a\#{1}z\n"),
                  s(:str, "eot\n")))),
            s(:lvasgn, :sexp2,
              s(:send,
                s(:const, nil, :Ripper), :sexp,
                s(:dstr,
                  s(:str, "<<~eot\n"),
                  s(:str, "  a\#{1}z\n"),
                  s(:str, "eot\n")))),
            s(:send, nil, :assert_equal,
              s(:send, nil, :clear_pos,
                s(:lvar, :sexp1)),
              s(:send, nil, :clear_pos,
                s(:lvar, :sexp2))))),
        s(:def, :search_sexp,
          s(:args,
            s(:arg, :sym),
            s(:arg, :sexp)),
          s(:begin,
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :sexp), :!),
                s(:send,
                  s(:send,
                    s(:lvar, :sexp), :[],
                    s(:int, 0)), :==,
                  s(:lvar, :sym))),
              s(:return,
                s(:lvar, :sexp)), nil),
            s(:block,
              s(:send,
                s(:lvar, :sexp), :find),
              s(:args,
                s(:arg, :e)),
              s(:if,
                s(:and,
                  s(:send,
                    s(:const, nil, :Array), :===,
                    s(:lvar, :e)),
                  s(:lvasgn, :e,
                    s(:send, nil, :search_sexp,
                      s(:lvar, :sym),
                      s(:lvar, :e)))),
                s(:return,
                  s(:lvar, :e)), nil)))),
        s(:def, :clear_pos,
          s(:args,
            s(:arg, :sexp)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :sexp), :!),
              s(:return,
                s(:lvar, :sexp)), nil),
            s(:block,
              s(:send,
                s(:lvar, :sexp), :each),
              s(:args,
                s(:arg, :e)),
              s(:if,
                s(:send,
                  s(:const, nil, :Array), :===,
                  s(:lvar, :e)),
                s(:if,
                  s(:and,
                    s(:and,
                      s(:and,
                        s(:and,
                          s(:send,
                            s(:send,
                              s(:lvar, :e), :size), :==,
                            s(:int, 3)),
                          s(:send,
                            s(:const, nil, :Array), :===,
                            s(:begin,
                              s(:lvasgn, :last,
                                s(:send,
                                  s(:lvar, :e), :last))))),
                        s(:send,
                          s(:send,
                            s(:lvar, :last), :size), :==,
                          s(:int, 2))),
                      s(:send,
                        s(:const, nil, :Integer), :===,
                        s(:send,
                          s(:lvar, :last), :[],
                          s(:int, 0)))),
                    s(:send,
                      s(:const, nil, :Integer), :===,
                      s(:send,
                        s(:lvar, :last), :[],
                        s(:int, 1)))),
                  s(:send,
                    s(:lvar, :last), :clear),
                  s(:send, nil, :clear_pos,
                    s(:lvar, :e))), nil)))))), nil))
