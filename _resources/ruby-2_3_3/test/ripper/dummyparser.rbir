s(:begin,
  s(:send, nil, :require,
    s(:str, "ripper")),
  s(:class,
    s(:const, nil, :Node), nil,
    s(:begin,
      s(:def, :initialize,
        s(:args,
          s(:arg, :name),
          s(:restarg, :nodes)),
        s(:begin,
          s(:ivasgn, :@name,
            s(:lvar, :name)),
          s(:ivasgn, :@children,
            s(:lvar, :nodes)))),
      s(:send, nil, :attr_reader,
        s(:sym, :name),
        s(:sym, :children)),
      s(:def, :to_s,
        s(:args),
        s(:dstr,
          s(:begin,
            s(:ivar, :@name)),
          s(:str, "("),
          s(:begin,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :Node), :trim_nil,
                    s(:ivar, :@children)), :map),
                s(:args,
                  s(:arg, :n)),
                s(:send,
                  s(:lvar, :n), :to_s)), :join,
              s(:str, ","))),
          s(:str, ")"))),
      s(:defs,
        s(:self), :trim_nil,
        s(:args,
          s(:arg, :list)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :list), :empty?), :!),
              s(:send,
                s(:send,
                  s(:lvar, :list), :last), :nil?)),
            s(:begin,
              s(:lvasgn, :list,
                s(:send,
                  s(:lvar, :list), :[],
                  s(:erange,
                    s(:int, 0),
                    s(:int, -1)))),
              s(:while,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :list), :empty?), :!),
                  s(:send,
                    s(:send,
                      s(:lvar, :list), :last), :nil?)),
                s(:send,
                  s(:lvar, :list), :pop))), nil),
          s(:lvar, :list))))),
  s(:class,
    s(:const, nil, :NodeList), nil,
    s(:begin,
      s(:def, :initialize,
        s(:args,
          s(:optarg, :list,
            s(:array))),
        s(:ivasgn, :@list,
          s(:lvar, :list))),
      s(:send, nil, :attr_reader,
        s(:sym, :list)),
      s(:def, :push,
        s(:args,
          s(:arg, :item)),
        s(:begin,
          s(:send,
            s(:ivar, :@list), :push,
            s(:lvar, :item)),
          s(:self))),
      s(:def, :prepend,
        s(:args,
          s(:arg, :items)),
        s(:send,
          s(:ivar, :@list), :unshift,
          s(:lvar, :items))),
      s(:def, :to_s,
        s(:args),
        s(:dstr,
          s(:str, "["),
          s(:begin,
            s(:send,
              s(:ivar, :@list), :join,
              s(:str, ","))),
          s(:str, "]"))))),
  s(:class,
    s(:const, nil, :DummyParser),
    s(:const, nil, :Ripper),
    s(:begin,
      s(:def, :hook,
        s(:args,
          s(:restarg, :names)),
        s(:begin,
          s(:block,
            s(:send,
              s(:sclass,
                s(:self),
                s(:self)), :class_eval),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :names), :each),
              s(:args,
                s(:arg, :name)),
              s(:block,
                s(:send, nil, :define_method,
                  s(:lvar, :name)),
                s(:args,
                  s(:restarg, :a),
                  s(:blockarg, :b)),
                s(:begin,
                  s(:lvasgn, :result,
                    s(:super,
                      s(:splat,
                        s(:lvar, :a)),
                      s(:block_pass,
                        s(:lvar, :b)))),
                  s(:yield,
                    s(:lvar, :name),
                    s(:splat,
                      s(:lvar, :a))),
                  s(:lvar, :result))))),
          s(:self))),
      s(:def, :on_program,
        s(:args,
          s(:arg, :stmts)),
        s(:lvar, :stmts)),
      s(:def, :on_stmts_new,
        s(:args),
        s(:send,
          s(:const, nil, :NodeList), :new)),
      s(:def, :on_stmts_add,
        s(:args,
          s(:arg, :stmts),
          s(:arg, :st)),
        s(:begin,
          s(:send,
            s(:lvar, :stmts), :push,
            s(:lvar, :st)),
          s(:lvar, :stmts))),
      s(:def, :on_void_stmt,
        s(:args),
        s(:send,
          s(:const, nil, :Node), :new,
          s(:str, "void"))),
      s(:def, :on_var_ref,
        s(:args,
          s(:arg, :name)),
        s(:send,
          s(:const, nil, :Node), :new,
          s(:str, "ref"),
          s(:lvar, :name))),
      s(:def, :on_var_alias,
        s(:args,
          s(:arg, :a),
          s(:arg, :b)),
        s(:send,
          s(:const, nil, :Node), :new,
          s(:str, "valias"),
          s(:lvar, :a),
          s(:lvar, :b))),
      s(:def, :on_alias_error,
        s(:args,
          s(:arg, :a)),
        s(:send,
          s(:const, nil, :Node), :new,
          s(:str, "aliaserr"),
          s(:lvar, :a))),
      s(:def, :on_arg_paren,
        s(:args,
          s(:arg, :args)),
        s(:lvar, :args)),
      s(:def, :on_args_new,
        s(:args),
        s(:send,
          s(:const, nil, :NodeList), :new)),
      s(:def, :on_args_add,
        s(:args,
          s(:arg, :list),
          s(:arg, :arg)),
        s(:send,
          s(:lvar, :list), :push,
          s(:lvar, :arg))),
      s(:def, :on_args_add_block,
        s(:args,
          s(:arg, :list),
          s(:arg, :blk)),
        s(:if,
          s(:lvar, :blk),
          s(:send,
            s(:lvar, :list), :push,
            s(:send,
              s(:str, "&"), :+,
              s(:send,
                s(:lvar, :blk), :to_s))),
          s(:lvar, :list))),
      s(:def, :on_args_add_star,
        s(:args,
          s(:arg, :list),
          s(:arg, :arg)),
        s(:send,
          s(:lvar, :list), :push,
          s(:send,
            s(:str, "*"), :+,
            s(:send,
              s(:lvar, :arg), :to_s)))),
      s(:def, :on_args_prepend,
        s(:args,
          s(:arg, :list),
          s(:arg, :args)),
        s(:begin,
          s(:send,
            s(:lvar, :list), :prepend,
            s(:lvar, :args)),
          s(:lvar, :list))),
      s(:def, :on_method_add_arg,
        s(:args,
          s(:arg, :m),
          s(:arg, :arg)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :arg), :==,
              s(:nil)),
            s(:lvasgn, :arg,
              s(:send, nil, :on_args_new)), nil),
          s(:send,
            s(:send,
              s(:lvar, :m), :children), :push,
            s(:lvar, :arg)),
          s(:lvar, :m))),
      s(:def, :on_method_add_block,
        s(:args,
          s(:arg, :m),
          s(:arg, :b)),
        s(:begin,
          s(:send, nil, :on_args_add_block,
            s(:send,
              s(:lvar, :m), :children),
            s(:lvar, :b)),
          s(:lvar, :m))),
      s(:def, :on_paren,
        s(:args,
          s(:arg, :params)),
        s(:lvar, :params)),
      s(:def, :on_brace_block,
        s(:args,
          s(:arg, :params),
          s(:arg, :code)),
        s(:send,
          s(:const, nil, :Node), :new,
          s(:str, "block"),
          s(:lvar, :params),
          s(:lvar, :code))),
      s(:def, :on_block_var,
        s(:args,
          s(:arg, :params),
          s(:arg, :shadow)),
        s(:lvar, :params)),
      s(:def, :on_rest_param,
        s(:args,
          s(:arg, :var)),
        s(:dstr,
          s(:str, "*"),
          s(:begin,
            s(:lvar, :var)))),
      s(:def, :on_blockarg,
        s(:args,
          s(:arg, :var)),
        s(:dstr,
          s(:str, "&"),
          s(:begin,
            s(:lvar, :var)))),
      s(:def, :on_params,
        s(:args,
          s(:arg, :required),
          s(:arg, :optional),
          s(:arg, :rest),
          s(:arg, :more),
          s(:arg, :keyword),
          s(:arg, :keyword_rest),
          s(:arg, :block)),
        s(:begin,
          s(:lvasgn, :args,
            s(:send,
              s(:const, nil, :NodeList), :new)),
          s(:if,
            s(:lvar, :required),
            s(:block,
              s(:send,
                s(:lvar, :required), :each),
              s(:args,
                s(:arg, :req)),
              s(:send,
                s(:lvar, :args), :push,
                s(:lvar, :req))), nil),
          s(:if,
            s(:lvar, :optional),
            s(:block,
              s(:send,
                s(:lvar, :optional), :each),
              s(:args,
                s(:arg, :var),
                s(:arg, :val)),
              s(:send,
                s(:lvar, :args), :push,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :var)),
                  s(:str, "="),
                  s(:begin,
                    s(:lvar, :val))))), nil),
          s(:if,
            s(:lvar, :rest),
            s(:send,
              s(:lvar, :args), :push,
              s(:lvar, :rest)), nil),
          s(:if,
            s(:lvar, :more),
            s(:block,
              s(:send,
                s(:lvar, :more), :each),
              s(:args,
                s(:arg, :m)),
              s(:send,
                s(:lvar, :args), :push,
                s(:lvar, :m))), nil),
          s(:if,
            s(:lvar, :block),
            s(:send,
              s(:lvar, :args), :push,
              s(:lvar, :block)), nil),
          s(:lvar, :args))),
      s(:def, :on_assoc_new,
        s(:args,
          s(:arg, :a),
          s(:arg, :b)),
        s(:send,
          s(:const, nil, :Node), :new,
          s(:str, "assoc"),
          s(:lvar, :a),
          s(:lvar, :b))),
      s(:def, :on_bare_assoc_hash,
        s(:args,
          s(:arg, :assoc_list)),
        s(:send,
          s(:const, nil, :Node), :new,
          s(:str, "assocs"),
          s(:splat,
            s(:lvar, :assoc_list)))),
      s(:def, :on_assoclist_from_args,
        s(:args,
          s(:arg, :a)),
        s(:send,
          s(:const, nil, :Node), :new,
          s(:str, "assocs"),
          s(:splat,
            s(:lvar, :a)))),
      s(:def, :on_word_new,
        s(:args),
        s(:str, "")),
      s(:def, :on_word_add,
        s(:args,
          s(:arg, :word),
          s(:arg, :w)),
        s(:send,
          s(:lvar, :word), :<<,
          s(:lvar, :w))),
      s(:def, :on_words_new,
        s(:args),
        s(:send,
          s(:const, nil, :NodeList), :new)),
      s(:def, :on_words_add,
        s(:args,
          s(:arg, :words),
          s(:arg, :word)),
        s(:send,
          s(:lvar, :words), :push,
          s(:lvar, :word))),
      s(:def, :on_qwords_new,
        s(:args),
        s(:send,
          s(:const, nil, :NodeList), :new)),
      s(:def, :on_qwords_add,
        s(:args,
          s(:arg, :words),
          s(:arg, :word)),
        s(:send,
          s(:lvar, :words), :push,
          s(:lvar, :word))),
      s(:def, :on_rescue,
        s(:args,
          s(:arg, :exc),
          s(:restarg, :rest)),
        s(:send,
          s(:const, nil, :Node), :new,
          s(:str, "rescue"),
          s(:begin,
            s(:and,
              s(:lvar, :exc),
              s(:send,
                s(:const, nil, :NodeList), :new,
                s(:lvar, :exc)))),
          s(:splat,
            s(:lvar, :rest)))),
      s(:block,
        s(:send,
          s(:begin,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Ripper), :PARSER_EVENTS), :map,
                s(:block_pass,
                  s(:sym, :to_s))), :-,
              s(:block,
                s(:send,
                  s(:send, nil, :instance_methods,
                    s(:false)), :map),
                s(:args,
                  s(:arg, :n)),
                s(:send,
                  s(:send,
                    s(:lvar, :n), :to_s), :sub,
                  s(:regexp,
                    s(:str, "^on_"),
                    s(:regopt)),
                  s(:str, ""))))), :each),
        s(:args,
          s(:arg, :event)),
        s(:block,
          s(:send, nil, :define_method,
            s(:dsym,
              s(:str, "on_"),
              s(:begin,
                s(:lvar, :event)))),
          s(:args,
            s(:restarg, :args)),
          s(:send,
            s(:const, nil, :Node), :new,
            s(:lvar, :event),
            s(:splat,
              s(:lvar, :args))))))))
