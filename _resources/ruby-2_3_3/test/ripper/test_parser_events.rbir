s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :require_relative,
          s(:str, "dummyparser")),
        s(:send, nil, :require,
          s(:str, "test/unit")),
        s(:lvasgn, :ripper_test,
          s(:true)),
        s(:module,
          s(:const, nil, :TestRipper), nil)),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:lvar, :ripper_test),
    s(:class,
      s(:const,
        s(:const, nil, :TestRipper), :ParserEvents),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :test_event_coverage,
          s(:args),
          s(:begin,
            s(:lvasgn, :dispatched,
              s(:const,
                s(:const, nil, :Ripper), :PARSER_EVENTS)),
            s(:lvasgn, :tested,
              s(:block,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:self), :class), :instance_methods,
                    s(:false)), :grep,
                  s(:regexp,
                    s(:str, "\\Atest_(\\w+)"),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:nth_ref, 1), :intern))),
            s(:send, nil, :assert_empty,
              s(:send,
                s(:lvar, :dispatched), :-,
                s(:lvar, :tested))))),
        s(:def, :parse,
          s(:args,
            s(:arg, :str),
            s(:optarg, :nm,
              s(:nil)),
            s(:blockarg, :bl)),
          s(:begin,
            s(:lvasgn, :dp,
              s(:send,
                s(:const, nil, :DummyParser), :new,
                s(:lvar, :str))),
            s(:if,
              s(:lvar, :nm),
              s(:send,
                s(:lvar, :dp), :hook,
                s(:splat,
                  s(:lvar, :nm)),
                s(:block_pass,
                  s(:lvar, :bl))), nil),
            s(:send,
              s(:send,
                s(:lvar, :dp), :parse), :to_s))),
        s(:def, :compile_error,
          s(:args,
            s(:arg, :str)),
          s(:block,
            s(:send, nil, :parse,
              s(:lvar, :str),
              s(:sym, :compile_error)),
            s(:args,
              s(:arg, :e),
              s(:arg, :msg)),
            s(:return,
              s(:lvar, :msg)))),
        s(:def, :warning,
          s(:args,
            s(:arg, :str)),
          s(:block,
            s(:send, nil, :parse,
              s(:lvar, :str),
              s(:sym, :warning)),
            s(:args,
              s(:arg, :e),
              s(:restarg, :args)),
            s(:return,
              s(:lvar, :args)))),
        s(:def, :warn,
          s(:args,
            s(:arg, :str)),
          s(:block,
            s(:send, nil, :parse,
              s(:lvar, :str),
              s(:sym, :warn)),
            s(:args,
              s(:arg, :e),
              s(:restarg, :args)),
            s(:return,
              s(:lvar, :args)))),
        s(:def, :test_program,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_program,
              s(:false)),
            s(:send, nil, :assert_equal,
              s(:str, "[void()]"),
              s(:block,
                s(:send, nil, :parse,
                  s(:str, ""),
                  s(:sym, :on_program)),
                s(:args),
                s(:lvasgn, :thru_program,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_program)))),
        s(:def, :test_stmts_new,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:str, "[void()]"),
            s(:send, nil, :parse,
              s(:str, "")))),
        s(:def, :test_stmts_add,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "[ref(nil)]"),
              s(:send, nil, :parse,
                s(:str, "nil"))),
            s(:send, nil, :assert_equal,
              s(:str, "[ref(nil),ref(nil)]"),
              s(:send, nil, :parse,
                s(:str, "nil;nil"))),
            s(:send, nil, :assert_equal,
              s(:str, "[ref(nil),ref(nil),ref(nil)]"),
              s(:send, nil, :parse,
                s(:str, "nil;nil;nil"))))),
        s(:def, :test_void_stmt,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "[void()]"),
              s(:send, nil, :parse,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:str, "[void()]"),
              s(:send, nil, :parse,
                s(:str, "; ;"))))),
        s(:def, :test_var_ref,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "[assign(var_field(a),ref(a))]"),
              s(:send, nil, :parse,
                s(:str, "a=a"))),
            s(:send, nil, :assert_equal,
              s(:str, "[ref(nil)]"),
              s(:send, nil, :parse,
                s(:str, "nil"))),
            s(:send, nil, :assert_equal,
              s(:str, "[ref(true)]"),
              s(:send, nil, :parse,
                s(:str, "true"))))),
        s(:def, :test_vcall,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:str, "[vcall(a)]"),
            s(:send, nil, :parse,
              s(:str, "a")))),
        s(:def, :test_BEGIN,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "[BEGIN([void()])]"),
              s(:send, nil, :parse,
                s(:str, "BEGIN{}"))),
            s(:send, nil, :assert_equal,
              s(:str, "[BEGIN([ref(nil)])]"),
              s(:send, nil, :parse,
                s(:str, "BEGIN{nil}"))))),
        s(:def, :test_END,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "[END([void()])]"),
              s(:send, nil, :parse,
                s(:str, "END{}"))),
            s(:send, nil, :assert_equal,
              s(:str, "[END([ref(nil)])]"),
              s(:send, nil, :parse,
                s(:str, "END{nil}"))))),
        s(:def, :test_alias,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:str, "[alias(symbol_literal(a),symbol_literal(b))]"),
            s(:send, nil, :parse,
              s(:str, "alias a b")))),
        s(:def, :test_var_alias,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:str, "[valias($a,$g)]"),
            s(:send, nil, :parse,
              s(:str, "alias $a $g")))),
        s(:def, :test_alias_error,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:str, "[aliaserr(valias($a,$1))]"),
            s(:send, nil, :parse,
              s(:str, "alias $a $1")))),
        s(:def, :test_arglist,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "[fcall(m,[])]"),
              s(:send, nil, :parse,
                s(:str, "m()"))),
            s(:send, nil, :assert_equal,
              s(:str, "[fcall(m,[1])]"),
              s(:send, nil, :parse,
                s(:str, "m(1)"))),
            s(:send, nil, :assert_equal,
              s(:str, "[fcall(m,[1,2])]"),
              s(:send, nil, :parse,
                s(:str, "m(1,2)"))),
            s(:send, nil, :assert_equal,
              s(:str, "[fcall(m,[*vcall(r)])]"),
              s(:send, nil, :parse,
                s(:str, "m(*r)"))),
            s(:send, nil, :assert_equal,
              s(:str, "[fcall(m,[1,*vcall(r)])]"),
              s(:send, nil, :parse,
                s(:str, "m(1,*r)"))),
            s(:send, nil, :assert_equal,
              s(:str, "[fcall(m,[1,2,*vcall(r)])]"),
              s(:send, nil, :parse,
                s(:str, "m(1,2,*r)"))),
            s(:send, nil, :assert_equal,
              s(:str, "[fcall(m,[&vcall(r)])]"),
              s(:send, nil, :parse,
                s(:str, "m(&r)"))),
            s(:send, nil, :assert_equal,
              s(:str, "[fcall(m,[1,&vcall(r)])]"),
              s(:send, nil, :parse,
                s(:str, "m(1,&r)"))),
            s(:send, nil, :assert_equal,
              s(:str, "[fcall(m,[1,2,&vcall(r)])]"),
              s(:send, nil, :parse,
                s(:str, "m(1,2,&r)"))),
            s(:send, nil, :assert_equal,
              s(:str, "[fcall(m,[*vcall(a),&vcall(b)])]"),
              s(:send, nil, :parse,
                s(:str, "m(*a,&b)"))),
            s(:send, nil, :assert_equal,
              s(:str, "[fcall(m,[1,*vcall(a),&vcall(b)])]"),
              s(:send, nil, :parse,
                s(:str, "m(1,*a,&b)"))),
            s(:send, nil, :assert_equal,
              s(:str, "[fcall(m,[1,2,*vcall(a),&vcall(b)])]"),
              s(:send, nil, :parse,
                s(:str, "m(1,2,*a,&b)"))))),
        s(:def, :test_args_add,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_args_add,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "m(a)"),
                s(:sym, :on_args_add)),
              s(:args),
              s(:lvasgn, :thru_args_add,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_args_add)))),
        s(:def, :test_args_add_block,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_args_add_block,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "m(&b)"),
                s(:sym, :on_args_add_block)),
              s(:args),
              s(:lvasgn, :thru_args_add_block,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_args_add_block)))),
        s(:def, :test_args_add_star,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_args_add_star,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "m(*a)"),
                s(:sym, :on_args_add_star)),
              s(:args),
              s(:lvasgn, :thru_args_add_star,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_args_add_star)),
            s(:lvasgn, :thru_args_add_star,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "m(*a, &b)"),
                s(:sym, :on_args_add_star)),
              s(:args),
              s(:lvasgn, :thru_args_add_star,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_args_add_star)))),
        s(:def, :test_args_new,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_args_new,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "m()"),
                s(:sym, :on_args_new)),
              s(:args),
              s(:lvasgn, :thru_args_new,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_args_new)))),
        s(:def, :test_arg_paren,
          s(:args), nil),
        s(:def, :test_aref,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "[aref(vcall(v),[1])]"),
              s(:send, nil, :parse,
                s(:str, "v[1]"))),
            s(:send, nil, :assert_equal,
              s(:str, "[aref(vcall(v),[1,2])]"),
              s(:send, nil, :parse,
                s(:str, "v[1,2]"))))),
        s(:def, :test_assoclist_from_args,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_assoclist_from_args,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "{a=>b}"),
                s(:sym, :on_assoclist_from_args)),
              s(:args),
              s(:lvasgn, :thru_assoclist_from_args,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_assoclist_from_args)))),
        s(:def, :test_assocs,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "[fcall(m,[assocs(assoc(1,2))])]"),
              s(:send, nil, :parse,
                s(:str, "m(1=>2)"))),
            s(:send, nil, :assert_equal,
              s(:str, "[fcall(m,[assocs(assoc(1,2),assoc(3,4))])]"),
              s(:send, nil, :parse,
                s(:str, "m(1=>2,3=>4)"))),
            s(:send, nil, :assert_equal,
              s(:str, "[fcall(m,[3,assocs(assoc(1,2))])]"),
              s(:send, nil, :parse,
                s(:str, "m(3,1=>2)"))))),
        s(:def, :test_assoc_new,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_assoc_new,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "{a=>b}"),
                s(:sym, :on_assoc_new)),
              s(:args),
              s(:lvasgn, :thru_assoc_new,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_assoc_new)))),
        s(:def, :test_assoc_splat,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_assoc_splat,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "m(**h)"),
                s(:sym, :on_assoc_splat)),
              s(:args),
              s(:lvasgn, :thru_assoc_splat,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_assoc_splat)))),
        s(:def, :test_aref_field,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:str, "[assign(aref_field(vcall(a),[1]),2)]"),
            s(:send, nil, :parse,
              s(:str, "a[1]=2")))),
        s(:def, :test_arg_ambiguous,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_arg_ambiguous,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "m //"),
                s(:sym, :on_arg_ambiguous)),
              s(:args),
              s(:lvasgn, :thru_arg_ambiguous,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_arg_ambiguous)))),
        s(:def, :test_operator_ambiguous,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_operator_ambiguous,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a=1; a %[]"),
                s(:sym, :on_operator_ambiguous)),
              s(:args),
              s(:lvasgn, :thru_operator_ambiguous,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_operator_ambiguous)))),
        s(:def, :test_array,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "[array([1,2,3])]"),
              s(:send, nil, :parse,
                s(:str, "[1,2,3]"))),
            s(:send, nil, :assert_equal,
              s(:str, "[array([abc,def])]"),
              s(:send, nil, :parse,
                s(:str, "%w[abc def]"))),
            s(:send, nil, :assert_equal,
              s(:str, "[array([abc,def])]"),
              s(:send, nil, :parse,
                s(:str, "%W[abc def]"))))),
        s(:def, :test_assign,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:str, "[assign(var_field(v),1)]"),
            s(:send, nil, :parse,
              s(:str, "v=1")))),
        s(:def, :test_assign_error,
          s(:args), nil),
        s(:def, :test_assign_error_backref,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_assign_error,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "$` = 1"),
                s(:sym, :on_assign_error)),
              s(:args),
              s(:lvasgn, :thru_assign_error,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_assign_error)),
            s(:lvasgn, :thru_assign_error,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "$`, _ = 1"),
                s(:sym, :on_assign_error)),
              s(:args),
              s(:lvasgn, :thru_assign_error,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_assign_error)))),
        s(:def, :test_assign_error_const_qualified,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_assign_error,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "self::X = 1"),
                s(:sym, :on_assign_error)),
              s(:args),
              s(:lvasgn, :thru_assign_error,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:lvar, :thru_assign_error)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "def m\n self::X = 1\nend"),
                s(:sym, :on_assign_error)),
              s(:args),
              s(:lvasgn, :thru_assign_error,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_assign_error)),
            s(:lvasgn, :thru_assign_error,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "def m\n self::X, a = 1, 2\nend"),
                s(:sym, :on_assign_error)),
              s(:args),
              s(:lvasgn, :thru_assign_error,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_assign_error)))),
        s(:def, :test_assign_error_const,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_assign_error,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "X = 1"),
                s(:sym, :on_assign_error)),
              s(:args),
              s(:lvasgn, :thru_assign_error,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:lvar, :thru_assign_error)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "def m\n X = 1\nend"),
                s(:sym, :on_assign_error)),
              s(:args),
              s(:lvasgn, :thru_assign_error,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_assign_error)),
            s(:lvasgn, :thru_assign_error,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "def m\n X, a = 1, 2\nend"),
                s(:sym, :on_assign_error)),
              s(:args),
              s(:lvasgn, :thru_assign_error,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_assign_error)))),
        s(:def, :test_assign_error_const_toplevel,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_assign_error,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "::X = 1"),
                s(:sym, :on_assign_error)),
              s(:args),
              s(:lvasgn, :thru_assign_error,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:lvar, :thru_assign_error)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "def m\n ::X = 1\nend"),
                s(:sym, :on_assign_error)),
              s(:args),
              s(:lvasgn, :thru_assign_error,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_assign_error)),
            s(:lvasgn, :thru_assign_error,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "def m\n ::X, a = 1, 2\nend"),
                s(:sym, :on_assign_error)),
              s(:args),
              s(:lvasgn, :thru_assign_error,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_assign_error)))),
        s(:def, :test_bare_assoc_hash,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_bare_assoc_hash,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "x[a=>b]"),
                s(:sym, :on_bare_assoc_hash)),
              s(:args),
              s(:lvasgn, :thru_bare_assoc_hash,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_bare_assoc_hash)),
            s(:lvasgn, :thru_bare_assoc_hash,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "x[1, a=>b]"),
                s(:sym, :on_bare_assoc_hash)),
              s(:args),
              s(:lvasgn, :thru_bare_assoc_hash,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_bare_assoc_hash)),
            s(:lvasgn, :thru_bare_assoc_hash,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "x(a=>b)"),
                s(:sym, :on_bare_assoc_hash)),
              s(:args),
              s(:lvasgn, :thru_bare_assoc_hash,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_bare_assoc_hash)),
            s(:lvasgn, :thru_bare_assoc_hash,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "x(1, a=>b)"),
                s(:sym, :on_bare_assoc_hash)),
              s(:args),
              s(:lvasgn, :thru_bare_assoc_hash,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_bare_assoc_hash)))),
        s(:def, :test_begin,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_begin,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "begin end"),
                s(:sym, :on_begin)),
              s(:args),
              s(:lvasgn, :thru_begin,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_begin)))),
        s(:block,
          s(:send,
            s(:array,
              s(:str, "and"),
              s(:str, "or"),
              s(:str, "+"),
              s(:str, "-"),
              s(:str, "*"),
              s(:str, "/"),
              s(:str, "%"),
              s(:str, "**"),
              s(:str, "|"),
              s(:str, "^"),
              s(:str, "&"),
              s(:str, "<=>"),
              s(:str, ">"),
              s(:str, ">="),
              s(:str, "<"),
              s(:str, "<="),
              s(:str, "=="),
              s(:str, "==="),
              s(:str, "!="),
              s(:str, "=~"),
              s(:str, "!~"),
              s(:str, "<<"),
              s(:str, ">>"),
              s(:str, "&&"),
              s(:str, "||")), :each),
          s(:args,
            s(:arg, :op)),
          s(:block,
            s(:send, nil, :define_method,
              s(:dstr,
                s(:str, "test_binary("),
                s(:begin,
                  s(:lvar, :op)),
                s(:str, ")"))),
            s(:args),
            s(:begin,
              s(:lvasgn, :thru_binary,
                s(:false)),
              s(:block,
                s(:send, nil, :parse,
                  s(:dstr,
                    s(:str, "a "),
                    s(:begin,
                      s(:lvar, :op)),
                    s(:str, " b")),
                  s(:sym, :on_binary)),
                s(:args),
                s(:lvasgn, :thru_binary,
                  s(:true))),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:lvar, :thru_binary))))),
        s(:def, :test_blockarg,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_blockarg,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "def a(&b) end"),
                s(:sym, :on_blockarg)),
              s(:args),
              s(:lvasgn, :thru_blockarg,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_blockarg)),
            s(:lvasgn, :thru_blockarg,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "def a(x, &b) end"),
                s(:sym, :on_blockarg)),
              s(:args),
              s(:lvasgn, :thru_blockarg,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_blockarg)),
            s(:lvasgn, :thru_blockarg,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc{|&b|}"),
                s(:sym, :on_blockarg)),
              s(:args),
              s(:lvasgn, :thru_blockarg,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_blockarg)),
            s(:lvasgn, :thru_blockarg,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc{|x, &b|}"),
                s(:sym, :on_blockarg)),
              s(:args),
              s(:lvasgn, :thru_blockarg,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_blockarg)),
            s(:lvasgn, :thru_blockarg,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc{|&b;y|}"),
                s(:sym, :on_blockarg)),
              s(:args),
              s(:lvasgn, :thru_blockarg,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_blockarg)),
            s(:lvasgn, :thru_blockarg,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc{|&b,x;y|}"),
                s(:sym, :on_blockarg)),
              s(:args),
              s(:lvasgn, :thru_blockarg,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_blockarg)),
            s(:lvasgn, :thru_blockarg,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc do |&b| end"),
                s(:sym, :on_blockarg)),
              s(:args),
              s(:lvasgn, :thru_blockarg,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_blockarg)),
            s(:lvasgn, :thru_blockarg,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc do |&b, x| end"),
                s(:sym, :on_blockarg)),
              s(:args),
              s(:lvasgn, :thru_blockarg,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_blockarg)),
            s(:lvasgn, :thru_blockarg,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc do |&b;y| end"),
                s(:sym, :on_blockarg)),
              s(:args),
              s(:lvasgn, :thru_blockarg,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_blockarg)),
            s(:lvasgn, :thru_blockarg,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc do |&b, x;y| end"),
                s(:sym, :on_blockarg)),
              s(:args),
              s(:lvasgn, :thru_blockarg,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_blockarg)))),
        s(:def, :test_block_var,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_block_var,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc{||}"),
                s(:sym, :on_block_var)),
              s(:args),
              s(:lvasgn, :thru_block_var,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_block_var)),
            s(:lvasgn, :thru_block_var,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc{| |}"),
                s(:sym, :on_block_var)),
              s(:args),
              s(:lvasgn, :thru_block_var,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_block_var)),
            s(:lvasgn, :thru_block_var,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc{|x|}"),
                s(:sym, :on_block_var)),
              s(:args),
              s(:lvasgn, :thru_block_var,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_block_var)),
            s(:lvasgn, :thru_block_var,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc{|;y|}"),
                s(:sym, :on_block_var)),
              s(:args),
              s(:lvasgn, :thru_block_var,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_block_var)),
            s(:lvasgn, :thru_block_var,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc{|x;y|}"),
                s(:sym, :on_block_var)),
              s(:args),
              s(:lvasgn, :thru_block_var,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_block_var)),
            s(:lvasgn, :thru_block_var,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc do || end"),
                s(:sym, :on_block_var)),
              s(:args),
              s(:lvasgn, :thru_block_var,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_block_var)),
            s(:lvasgn, :thru_block_var,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc do | | end"),
                s(:sym, :on_block_var)),
              s(:args),
              s(:lvasgn, :thru_block_var,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_block_var)),
            s(:lvasgn, :thru_block_var,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc do |x| end"),
                s(:sym, :on_block_var)),
              s(:args),
              s(:lvasgn, :thru_block_var,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_block_var)),
            s(:lvasgn, :thru_block_var,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc do |;y| end"),
                s(:sym, :on_block_var)),
              s(:args),
              s(:lvasgn, :thru_block_var,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_block_var)),
            s(:lvasgn, :thru_block_var,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc do |x;y| end"),
                s(:sym, :on_block_var)),
              s(:args),
              s(:lvasgn, :thru_block_var,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_block_var)))),
        s(:def, :test_block_var_add_block,
          s(:args), nil),
        s(:def, :test_block_var_add_star,
          s(:args), nil),
        s(:def, :test_bodystmt,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_bodystmt,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "class X\nend"),
                s(:sym, :on_bodystmt)),
              s(:args),
              s(:lvasgn, :thru_bodystmt,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_bodystmt)))),
        s(:def, :test_call,
          s(:args),
          s(:begin,
            s(:lvasgn, :bug2233,
              s(:str, "[ruby-core:26165]")),
            s(:lvasgn, :tree,
              s(:nil)),
            s(:lvasgn, :thru_call,
              s(:false)),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:lvasgn, :tree,
                s(:block,
                  s(:send, nil, :parse,
                    s(:str, "self.foo"),
                    s(:sym, :on_call)),
                  s(:args),
                  s(:lvasgn, :thru_call,
                    s(:true))))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_call)),
            s(:send, nil, :assert_equal,
              s(:str, "[call(ref(self),.,foo)]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_call,
              s(:false)),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:lvasgn, :tree,
                s(:block,
                  s(:send, nil, :parse,
                    s(:str, "self.foo()"),
                    s(:sym, :on_call)),
                  s(:args),
                  s(:lvasgn, :thru_call,
                    s(:true))))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_call)),
            s(:send, nil, :assert_equal,
              s(:str, "[call(ref(self),.,foo,[])]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_call,
              s(:false)),
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:lvar, :bug2233)),
              s(:args),
              s(:lvasgn, :tree,
                s(:block,
                  s(:send, nil, :parse,
                    s(:str, "foo.()"),
                    s(:sym, :on_call)),
                  s(:args),
                  s(:lvasgn, :thru_call,
                    s(:true))))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_call)),
            s(:send, nil, :assert_equal,
              s(:str, "[call(vcall(foo),.,call,[])]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_call,
              s(:false)),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:lvasgn, :tree,
                s(:block,
                  s(:send, nil, :parse,
                    s(:str, "self::foo"),
                    s(:sym, :on_call)),
                  s(:args),
                  s(:lvasgn, :thru_call,
                    s(:true))))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_call)),
            s(:send, nil, :assert_equal,
              s(:str, "[call(ref(self),::,foo)]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_call,
              s(:false)),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:lvasgn, :tree,
                s(:block,
                  s(:send, nil, :parse,
                    s(:str, "self::foo()"),
                    s(:sym, :on_call)),
                  s(:args),
                  s(:lvasgn, :thru_call,
                    s(:true))))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_call)),
            s(:send, nil, :assert_equal,
              s(:str, "[call(ref(self),::,foo,[])]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_call,
              s(:false)),
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:lvar, :bug2233)),
              s(:args),
              s(:lvasgn, :tree,
                s(:block,
                  s(:send, nil, :parse,
                    s(:str, "foo::()"),
                    s(:sym, :on_call)),
                  s(:args),
                  s(:lvasgn, :thru_call,
                    s(:true))))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_call)),
            s(:send, nil, :assert_equal,
              s(:str, "[call(vcall(foo),::,call,[])]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_call,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "self&.foo"),
                  s(:sym, :on_call)),
                s(:args),
                s(:lvasgn, :thru_call,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_call)),
            s(:send, nil, :assert_equal,
              s(:str, "[call(ref(self),&.,foo)]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_call,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "self&.foo()"),
                  s(:sym, :on_call)),
                s(:args),
                s(:lvasgn, :thru_call,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_call)),
            s(:send, nil, :assert_equal,
              s(:str, "[call(ref(self),&.,foo,[])]"),
              s(:lvar, :tree)))),
        s(:def, :test_excessed_comma,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_excessed_comma,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc{|x,|}"),
                s(:sym, :on_excessed_comma)),
              s(:args),
              s(:lvasgn, :thru_excessed_comma,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_excessed_comma)),
            s(:lvasgn, :thru_excessed_comma,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc{|x,y,|}"),
                s(:sym, :on_excessed_comma)),
              s(:args),
              s(:lvasgn, :thru_excessed_comma,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_excessed_comma)),
            s(:lvasgn, :thru_excessed_comma,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc do |x,| end"),
                s(:sym, :on_excessed_comma)),
              s(:args),
              s(:lvasgn, :thru_excessed_comma,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_excessed_comma)),
            s(:lvasgn, :thru_excessed_comma,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc do |x,y,| end"),
                s(:sym, :on_excessed_comma)),
              s(:args),
              s(:lvasgn, :thru_excessed_comma,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_excessed_comma)))),
        s(:def, :test_heredoc,
          s(:args),
          s(:begin,
            s(:lvasgn, :bug1921,
              s(:str, "[ruby-core:24855]")),
            s(:lvasgn, :thru_heredoc_beg,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:dstr,
                    s(:str, "<"),
                    s(:str, "<EOS\nheredoc\nEOS\n")),
                  s(:sym, :on_heredoc_beg)),
                s(:args),
                s(:lvasgn, :thru_heredoc_beg,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_heredoc_beg)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "string_content\\(\\),heredoc\\n"),
                s(:regopt)),
              s(:lvar, :tree),
              s(:lvar, :bug1921)),
            s(:lvasgn, :heredoc,
              s(:nil)),
            s(:block,
              s(:send, nil, :parse,
                s(:dstr,
                  s(:str, "<"),
                  s(:str, "<EOS\nheredoc1\nheredoc2\nEOS\n")),
                s(:sym, :on_string_add)),
              s(:args,
                s(:arg, :e),
                s(:arg, :n),
                s(:arg, :s)),
              s(:lvasgn, :heredoc,
                s(:lvar, :s))),
            s(:send, nil, :assert_equal,
              s(:str, "heredoc1\nheredoc2\n"),
              s(:lvar, :heredoc),
              s(:lvar, :bug1921)),
            s(:lvasgn, :heredoc,
              s(:nil)),
            s(:block,
              s(:send, nil, :parse,
                s(:dstr,
                  s(:str, "<"),
                  s(:str, "<-EOS\nheredoc1\nheredoc2\n\tEOS\n")),
                s(:sym, :on_string_add)),
              s(:args,
                s(:arg, :e),
                s(:arg, :n),
                s(:arg, :s)),
              s(:lvasgn, :heredoc,
                s(:lvar, :s))),
            s(:send, nil, :assert_equal,
              s(:str, "heredoc1\nheredoc2\n"),
              s(:lvar, :heredoc),
              s(:lvar, :bug1921)))),
        s(:def, :test_heredoc_dedent,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_heredoc_dedent,
              s(:false)),
            s(:lvasgn, :str,
              s(:lvasgn, :width,
                s(:nil))),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:dstr,
                    s(:str, "<"),
                    s(:str, "<~EOS\n heredoc\nEOS\n")),
                  s(:sym, :on_heredoc_dedent)),
                s(:args,
                  s(:arg, :e),
                  s(:arg, :s),
                  s(:arg, :w)),
                s(:begin,
                  s(:lvasgn, :thru_heredoc_dedent,
                    s(:true)),
                  s(:lvasgn, :str,
                    s(:lvar, :s)),
                  s(:lvasgn, :width,
                    s(:lvar, :w))))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_heredoc_dedent)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "string_content\\(\\), heredoc\\n"),
                s(:regopt)),
              s(:lvar, :tree)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:lvar, :width)))),
        s(:def, :test_massign,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_massign,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a, b = 1, 2"),
                s(:sym, :on_massign)),
              s(:args),
              s(:lvasgn, :thru_massign,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_massign)))),
        s(:def, :test_mlhs_add,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_mlhs_add,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a, b = 1, 2"),
                s(:sym, :on_mlhs_add)),
              s(:args),
              s(:lvasgn, :thru_mlhs_add,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_mlhs_add)))),
        s(:def, :test_mlhs_add_star,
          s(:args),
          s(:begin,
            s(:lvasgn, :bug2232,
              s(:str, "[ruby-core:26163]")),
            s(:lvasgn, :bug4364,
              s(:str, "[ruby-core:35078]")),
            s(:lvasgn, :thru_mlhs_add_star,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "a, *b = 1, 2"),
                  s(:sym, :on_mlhs_add_star)),
                s(:args),
                s(:lvasgn, :thru_mlhs_add_star,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_mlhs_add_star)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "mlhs_add_star\\(mlhs_add\\(mlhs_new\\(\\),a\\),b\\)"),
                s(:regopt)),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_mlhs_add_star,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "a, *b, c = 1, 2"),
                  s(:sym, :on_mlhs_add_star)),
                s(:args),
                s(:lvasgn, :thru_mlhs_add_star,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_mlhs_add_star)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "mlhs_add\\(mlhs_add_star\\(mlhs_add\\(mlhs_new\\(\\),a\\),b\\),mlhs_add\\(mlhs_new\\(\\),c\\)\\)"),
                s(:regopt)),
              s(:lvar, :tree),
              s(:lvar, :bug2232)),
            s(:lvasgn, :thru_mlhs_add_star,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "a, *, c = 1, 2"),
                  s(:sym, :on_mlhs_add_star)),
                s(:args),
                s(:lvasgn, :thru_mlhs_add_star,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_mlhs_add_star)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "mlhs_add\\(mlhs_add_star\\(mlhs_add\\(mlhs_new\\(\\),a\\)\\),mlhs_add\\(mlhs_new\\(\\),c\\)\\)"),
                s(:regopt)),
              s(:lvar, :tree),
              s(:lvar, :bug4364)),
            s(:lvasgn, :thru_mlhs_add_star,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "*b, c = 1, 2"),
                  s(:sym, :on_mlhs_add_star)),
                s(:args),
                s(:lvasgn, :thru_mlhs_add_star,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_mlhs_add_star)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "mlhs_add\\(mlhs_add_star\\(mlhs_new\\(\\),b\\),mlhs_add\\(mlhs_new\\(\\),c\\)\\)"),
                s(:regopt)),
              s(:lvar, :tree),
              s(:lvar, :bug4364)),
            s(:lvasgn, :thru_mlhs_add_star,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "*, c = 1, 2"),
                  s(:sym, :on_mlhs_add_star)),
                s(:args),
                s(:lvasgn, :thru_mlhs_add_star,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_mlhs_add_star)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "mlhs_add\\(mlhs_add_star\\(mlhs_new\\(\\)\\),mlhs_add\\(mlhs_new\\(\\),c\\)\\)"),
                s(:regopt)),
              s(:lvar, :tree),
              s(:lvar, :bug4364)))),
        s(:def, :test_mlhs_new,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_mlhs_new,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a, b = 1, 2"),
                s(:sym, :on_mlhs_new)),
              s(:args),
              s(:lvasgn, :thru_mlhs_new,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_mlhs_new)))),
        s(:def, :test_mlhs_paren,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_mlhs_paren,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a, b = 1, 2"),
                s(:sym, :on_mlhs_paren)),
              s(:args),
              s(:lvasgn, :thru_mlhs_paren,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:lvar, :thru_mlhs_paren)),
            s(:lvasgn, :thru_mlhs_paren,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "(a, b) = 1, 2"),
                s(:sym, :on_mlhs_paren)),
              s(:args),
              s(:lvasgn, :thru_mlhs_paren,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_mlhs_paren)))),
        s(:def, :test_brace_block,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_brace_block,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc {}"),
                s(:sym, :on_brace_block)),
              s(:args),
              s(:lvasgn, :thru_brace_block,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_brace_block)))),
        s(:def, :test_break,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_break,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc {break}"),
                s(:sym, :on_break)),
              s(:args),
              s(:lvasgn, :thru_break,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_break)))),
        s(:def, :test_case,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_case,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "case foo when true; end"),
                s(:sym, :on_case)),
              s(:args),
              s(:lvasgn, :thru_case,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_case)))),
        s(:def, :test_class,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_class,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "class Foo; end"),
                s(:sym, :on_class)),
              s(:args),
              s(:lvasgn, :thru_class,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_class)))),
        s(:def, :test_class_name_error,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_class_name_error,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "class foo; end"),
                s(:sym, :on_class_name_error)),
              s(:args),
              s(:lvasgn, :thru_class_name_error,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_class_name_error)))),
        s(:def, :test_command,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_command,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "foo a b"),
                s(:sym, :on_command)),
              s(:args),
              s(:lvasgn, :thru_command,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_command)))),
        s(:def, :test_command_call,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_command_call,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "foo.bar a, b"),
                s(:sym, :on_command_call)),
              s(:args),
              s(:lvasgn, :thru_command_call,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_command_call)))),
        s(:def, :test_const_ref,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_const_ref,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "class A;end"),
                s(:sym, :on_const_ref)),
              s(:args),
              s(:lvasgn, :thru_const_ref,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_const_ref)),
            s(:lvasgn, :thru_const_ref,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "module A;end"),
                s(:sym, :on_const_ref)),
              s(:args),
              s(:lvasgn, :thru_const_ref,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_const_ref)))),
        s(:def, :test_const_path_field,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_const_path_field,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "foo::X = 1"),
                s(:sym, :on_const_path_field)),
              s(:args),
              s(:lvasgn, :thru_const_path_field,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_const_path_field)))),
        s(:def, :test_const_path_ref,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_const_path_ref,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "foo::X"),
                s(:sym, :on_const_path_ref)),
              s(:args),
              s(:lvasgn, :thru_const_path_ref,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_const_path_ref)))),
        s(:def, :test_def,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_def,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "def foo; end"),
                s(:sym, :on_def)),
              s(:args),
              s(:lvasgn, :thru_def,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_def)),
            s(:send, nil, :assert_equal,
              s(:str, "[def(foo,[],bodystmt([void()]))]"),
              s(:send, nil, :parse,
                s(:str, "def foo ;end"))))),
        s(:def, :test_defined,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_defined,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "defined?(x)"),
                s(:sym, :on_defined)),
              s(:args),
              s(:lvasgn, :thru_defined,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_defined)))),
        s(:def, :test_defs,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_defs,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "def foo.bar; end"),
                  s(:sym, :on_defs)),
                s(:args),
                s(:lvasgn, :thru_defs,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_defs)),
            s(:send, nil, :assert_equal,
              s(:str, "[defs(vcall(foo),.,bar,[],bodystmt([void()]))]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_parse_error,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "def foo&.bar; end"),
                  s(:sym, :on_parse_error)),
                s(:args),
                s(:lvasgn, :thru_parse_error,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_parse_error)))),
        s(:def, :test_do_block,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_do_block,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "proc do end"),
                s(:sym, :on_do_block)),
              s(:args),
              s(:lvasgn, :thru_do_block,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_do_block)))),
        s(:def, :test_dot2,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_dot2,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a..b"),
                s(:sym, :on_dot2)),
              s(:args),
              s(:lvasgn, :thru_dot2,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_dot2)))),
        s(:def, :test_dot3,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_dot3,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a...b"),
                s(:sym, :on_dot3)),
              s(:args),
              s(:lvasgn, :thru_dot3,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_dot3)))),
        s(:def, :test_dyna_symbol,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_dyna_symbol,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, ":\"\#{foo}\""),
                s(:sym, :on_dyna_symbol)),
              s(:args),
              s(:lvasgn, :thru_dyna_symbol,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_dyna_symbol)),
            s(:lvasgn, :thru_dyna_symbol,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "{\"\#{foo}\": 1}"),
                s(:sym, :on_dyna_symbol)),
              s(:args),
              s(:lvasgn, :thru_dyna_symbol,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_dyna_symbol)))),
        s(:def, :test_else,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_else,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "if foo; bar else zot end"),
                s(:sym, :on_else)),
              s(:args),
              s(:lvasgn, :thru_else,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_else)))),
        s(:def, :test_elsif,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_elsif,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "if foo; bar elsif qux; zot end"),
                s(:sym, :on_elsif)),
              s(:args),
              s(:lvasgn, :thru_elsif,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_elsif)))),
        s(:def, :test_ensure,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_ensure,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "begin foo ensure bar end"),
                s(:sym, :on_ensure)),
              s(:args),
              s(:lvasgn, :thru_ensure,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_ensure)))),
        s(:def, :test_fcall,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_fcall,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "foo()"),
                s(:sym, :on_fcall)),
              s(:args),
              s(:lvasgn, :thru_fcall,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_fcall)))),
        s(:def, :test_field,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_field,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "foo.x = 1"),
                s(:sym, :on_field)),
              s(:args),
              s(:lvasgn, :thru_field,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_field)))),
        s(:def, :test_for,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_for,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "for i in foo; end"),
                s(:sym, :on_for)),
              s(:args),
              s(:lvasgn, :thru_for,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_for)))),
        s(:def, :test_hash,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_hash,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "{1=>2}"),
                s(:sym, :on_hash)),
              s(:args),
              s(:lvasgn, :thru_hash,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_hash)),
            s(:lvasgn, :thru_hash,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "{a: 2}"),
                s(:sym, :on_hash)),
              s(:args),
              s(:lvasgn, :thru_hash,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_hash)))),
        s(:def, :test_if,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_if,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "if false; end"),
                s(:sym, :on_if)),
              s(:args),
              s(:lvasgn, :thru_if,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_if)))),
        s(:def, :test_if_mod,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_if_mod,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "nil if nil"),
                s(:sym, :on_if_mod)),
              s(:args),
              s(:lvasgn, :thru_if_mod,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_if_mod)))),
        s(:def, :test_ifop,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_ifop,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a ? b : c"),
                s(:sym, :on_ifop)),
              s(:args),
              s(:lvasgn, :thru_ifop,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_ifop)))),
        s(:def, :test_lambda,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_lambda,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "->{}"),
                s(:sym, :on_lambda)),
              s(:args),
              s(:lvasgn, :thru_lambda,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_lambda)))),
        s(:def, :test_magic_comment,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_magic_comment,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "# -*- bug-5753: ruby-dev:44984 -*-"),
                s(:sym, :on_magic_comment)),
              s(:args,
                s(:restarg, :x)),
              s(:lvasgn, :thru_magic_comment,
                s(:lvar, :x))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:sym, :on_magic_comment),
                s(:str, "bug_5753"),
                s(:str, "ruby-dev:44984")),
              s(:lvar, :thru_magic_comment)))),
        s(:def, :test_method_add_block,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_method_add_block,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a {}"),
                s(:sym, :on_method_add_block)),
              s(:args),
              s(:lvasgn, :thru_method_add_block,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_method_add_block)),
            s(:lvasgn, :thru_method_add_block,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a do end"),
                s(:sym, :on_method_add_block)),
              s(:args),
              s(:lvasgn, :thru_method_add_block,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_method_add_block)))),
        s(:def, :test_method_add_arg,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_method_add_arg,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a()"),
                s(:sym, :on_method_add_arg)),
              s(:args),
              s(:lvasgn, :thru_method_add_arg,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_method_add_arg)),
            s(:lvasgn, :thru_method_add_arg,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a {}"),
                s(:sym, :on_method_add_arg)),
              s(:args),
              s(:lvasgn, :thru_method_add_arg,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_method_add_arg)),
            s(:lvasgn, :thru_method_add_arg,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a.b(1)"),
                s(:sym, :on_method_add_arg)),
              s(:args),
              s(:lvasgn, :thru_method_add_arg,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_method_add_arg)),
            s(:lvasgn, :thru_method_add_arg,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a::b(1)"),
                s(:sym, :on_method_add_arg)),
              s(:args),
              s(:lvasgn, :thru_method_add_arg,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_method_add_arg)))),
        s(:def, :test_module,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_module,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "module A; end"),
                s(:sym, :on_module)),
              s(:args),
              s(:lvasgn, :thru_module,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_module)))),
        s(:def, :test_mrhs_add,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_mrhs_add,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a = a, b"),
                s(:sym, :on_mrhs_add)),
              s(:args),
              s(:lvasgn, :thru_mrhs_add,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_mrhs_add)))),
        s(:def, :test_mrhs_add_star,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_mrhs_add_star,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a = a, *b"),
                s(:sym, :on_mrhs_add_star)),
              s(:args),
              s(:lvasgn, :thru_mrhs_add_star,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_mrhs_add_star)))),
        s(:def, :test_mrhs_new,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_mrhs_new,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a = *a"),
                s(:sym, :on_mrhs_new)),
              s(:args),
              s(:lvasgn, :thru_mrhs_new,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_mrhs_new)))),
        s(:def, :test_mrhs_new_from_args,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_mrhs_new_from_args,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a = a, b"),
                s(:sym, :on_mrhs_new_from_args)),
              s(:args),
              s(:lvasgn, :thru_mrhs_new_from_args,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_mrhs_new_from_args)))),
        s(:def, :test_next,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_next,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a {next}"),
                s(:sym, :on_next)),
              s(:args),
              s(:lvasgn, :thru_next,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_next)))),
        s(:def, :test_opassign,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_opassign,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "a += b"),
                  s(:sym, :on_opassign)),
                s(:args),
                s(:lvasgn, :thru_opassign,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_opassign)),
            s(:send, nil, :assert_equal,
              s(:str, "[opassign(var_field(a),+=,vcall(b))]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_opassign,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "a -= b"),
                  s(:sym, :on_opassign)),
                s(:args),
                s(:lvasgn, :thru_opassign,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_opassign)),
            s(:send, nil, :assert_equal,
              s(:str, "[opassign(var_field(a),-=,vcall(b))]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_opassign,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "a *= b"),
                  s(:sym, :on_opassign)),
                s(:args),
                s(:lvasgn, :thru_opassign,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_opassign)),
            s(:send, nil, :assert_equal,
              s(:str, "[opassign(var_field(a),*=,vcall(b))]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_opassign,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "a /= b"),
                  s(:sym, :on_opassign)),
                s(:args),
                s(:lvasgn, :thru_opassign,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_opassign)),
            s(:send, nil, :assert_equal,
              s(:str, "[opassign(var_field(a),/=,vcall(b))]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_opassign,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "a %= b"),
                  s(:sym, :on_opassign)),
                s(:args),
                s(:lvasgn, :thru_opassign,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_opassign)),
            s(:send, nil, :assert_equal,
              s(:str, "[opassign(var_field(a),%=,vcall(b))]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_opassign,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "a **= b"),
                  s(:sym, :on_opassign)),
                s(:args),
                s(:lvasgn, :thru_opassign,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_opassign)),
            s(:send, nil, :assert_equal,
              s(:str, "[opassign(var_field(a),**=,vcall(b))]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_opassign,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "a &= b"),
                  s(:sym, :on_opassign)),
                s(:args),
                s(:lvasgn, :thru_opassign,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_opassign)),
            s(:send, nil, :assert_equal,
              s(:str, "[opassign(var_field(a),&=,vcall(b))]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_opassign,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "a |= b"),
                  s(:sym, :on_opassign)),
                s(:args),
                s(:lvasgn, :thru_opassign,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:str, "[opassign(var_field(a),|=,vcall(b))]"),
              s(:lvar, :tree)),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_opassign)),
            s(:lvasgn, :thru_opassign,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "a <<= b"),
                  s(:sym, :on_opassign)),
                s(:args),
                s(:lvasgn, :thru_opassign,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_opassign)),
            s(:send, nil, :assert_equal,
              s(:str, "[opassign(var_field(a),<<=,vcall(b))]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_opassign,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "a >>= b"),
                  s(:sym, :on_opassign)),
                s(:args),
                s(:lvasgn, :thru_opassign,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_opassign)),
            s(:send, nil, :assert_equal,
              s(:str, "[opassign(var_field(a),>>=,vcall(b))]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_opassign,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "a &&= b"),
                  s(:sym, :on_opassign)),
                s(:args),
                s(:lvasgn, :thru_opassign,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_opassign)),
            s(:send, nil, :assert_equal,
              s(:str, "[opassign(var_field(a),&&=,vcall(b))]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_opassign,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "a ||= b"),
                  s(:sym, :on_opassign)),
                s(:args),
                s(:lvasgn, :thru_opassign,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_opassign)),
            s(:send, nil, :assert_equal,
              s(:str, "[opassign(var_field(a),||=,vcall(b))]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_opassign,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "a::X ||= c 1"),
                  s(:sym, :on_opassign)),
                s(:args),
                s(:lvasgn, :thru_opassign,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_opassign)),
            s(:send, nil, :assert_equal,
              s(:str, "[opassign(const_path_field(vcall(a),X),||=,command(c,[1]))]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_opassign,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "self.foo += 1"),
                  s(:sym, :on_opassign)),
                s(:args),
                s(:lvasgn, :thru_opassign,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_opassign)),
            s(:send, nil, :assert_equal,
              s(:str, "[opassign(field(ref(self),.,foo),+=,1)]"),
              s(:lvar, :tree)),
            s(:lvasgn, :thru_opassign,
              s(:false)),
            s(:lvasgn, :tree,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "self&.foo += 1"),
                  s(:sym, :on_opassign)),
                s(:args),
                s(:lvasgn, :thru_opassign,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_opassign)),
            s(:send, nil, :assert_equal,
              s(:str, "[opassign(field(ref(self),&.,foo),+=,1)]"),
              s(:lvar, :tree)))),
        s(:def, :test_opassign_error,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_opassign,
              s(:array)),
            s(:lvasgn, :events,
              s(:array,
                s(:sym, :on_opassign))),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "$~ ||= 1"),
                s(:lvar, :events)),
              s(:args,
                s(:arg, :a),
                s(:restarg, :b)),
              s(:send,
                s(:lvar, :thru_opassign), :<<,
                s(:lvar, :a))),
            s(:send, nil, :assert_equal,
              s(:lvar, :events),
              s(:lvar, :thru_opassign)))),
        s(:def, :test_param_error,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_param_error,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "def foo(A) end"),
                s(:sym, :on_param_error)),
              s(:args),
              s(:lvasgn, :thru_param_error,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_param_error)),
            s(:lvasgn, :thru_param_error,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "def foo($a) end"),
                s(:sym, :on_param_error)),
              s(:args),
              s(:lvasgn, :thru_param_error,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_param_error)),
            s(:lvasgn, :thru_param_error,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "def foo(@a) end"),
                s(:sym, :on_param_error)),
              s(:args),
              s(:lvasgn, :thru_param_error,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_param_error)),
            s(:lvasgn, :thru_param_error,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "def foo(@@a) end"),
                s(:sym, :on_param_error)),
              s(:args),
              s(:lvasgn, :thru_param_error,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_param_error)))),
        s(:def, :test_params,
          s(:args),
          s(:begin,
            s(:lvasgn, :arg,
              s(:nil)),
            s(:lvasgn, :thru_params,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a {||}"),
                s(:sym, :on_params)),
              s(:args,
                s(:arg, :_),
                s(:restarg, :v)),
              s(:begin,
                s(:lvasgn, :thru_params,
                  s(:true)),
                s(:lvasgn, :arg,
                  s(:lvar, :v)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_params)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:nil),
                s(:nil),
                s(:nil),
                s(:nil),
                s(:nil),
                s(:nil),
                s(:nil)),
              s(:lvar, :arg)),
            s(:lvasgn, :thru_params,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a {|x|}"),
                s(:sym, :on_params)),
              s(:args,
                s(:arg, :_),
                s(:restarg, :v)),
              s(:begin,
                s(:lvasgn, :thru_params,
                  s(:true)),
                s(:lvasgn, :arg,
                  s(:lvar, :v)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_params)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:str, "x")),
                s(:nil),
                s(:nil),
                s(:nil),
                s(:nil),
                s(:nil),
                s(:nil)),
              s(:lvar, :arg)),
            s(:lvasgn, :thru_params,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a {|*x|}"),
                s(:sym, :on_params)),
              s(:args,
                s(:arg, :_),
                s(:restarg, :v)),
              s(:begin,
                s(:lvasgn, :thru_params,
                  s(:true)),
                s(:lvasgn, :arg,
                  s(:lvar, :v)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_params)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:nil),
                s(:nil),
                s(:str, "*x"),
                s(:nil),
                s(:nil),
                s(:nil),
                s(:nil)),
              s(:lvar, :arg)),
            s(:lvasgn, :thru_params,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a {|x: 1|}"),
                s(:sym, :on_params)),
              s(:args,
                s(:arg, :_),
                s(:restarg, :v)),
              s(:begin,
                s(:lvasgn, :thru_params,
                  s(:true)),
                s(:lvasgn, :arg,
                  s(:lvar, :v)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_params)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:nil),
                s(:nil),
                s(:nil),
                s(:nil),
                s(:array,
                  s(:array,
                    s(:str, "x:"),
                    s(:str, "1"))),
                s(:nil),
                s(:nil)),
              s(:lvar, :arg)),
            s(:lvasgn, :thru_params,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a {|x:|}"),
                s(:sym, :on_params)),
              s(:args,
                s(:arg, :_),
                s(:restarg, :v)),
              s(:begin,
                s(:lvasgn, :thru_params,
                  s(:true)),
                s(:lvasgn, :arg,
                  s(:lvar, :v)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_params)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:nil),
                s(:nil),
                s(:nil),
                s(:nil),
                s(:array,
                  s(:array,
                    s(:str, "x:"),
                    s(:false))),
                s(:nil),
                s(:nil)),
              s(:lvar, :arg)),
            s(:lvasgn, :thru_params,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a {|**x|}"),
                s(:sym, :on_params)),
              s(:args,
                s(:arg, :_),
                s(:restarg, :v)),
              s(:begin,
                s(:lvasgn, :thru_params,
                  s(:true)),
                s(:lvasgn, :arg,
                  s(:lvar, :v)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_params)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:nil),
                s(:nil),
                s(:nil),
                s(:nil),
                s(:nil),
                s(:str, "x"),
                s(:nil)),
              s(:lvar, :arg)))),
        s(:def, :test_paren,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_paren,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "()"),
                s(:sym, :on_paren)),
              s(:args),
              s(:lvasgn, :thru_paren,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_paren)))),
        s(:def, :test_parse_error,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_parse_error,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "<>"),
                s(:sym, :on_parse_error)),
              s(:args),
              s(:lvasgn, :thru_parse_error,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_parse_error)))),
        s(:def, :test_qwords_add,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_qwords_add,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "%w[a]"),
                s(:sym, :on_qwords_add)),
              s(:args),
              s(:lvasgn, :thru_qwords_add,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_qwords_add)))),
        s(:def, :test_qsymbols_add,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_qsymbols_add,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "%i[a]"),
                s(:sym, :on_qsymbols_add)),
              s(:args),
              s(:lvasgn, :thru_qsymbols_add,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_qsymbols_add)))),
        s(:def, :test_symbols_add,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_symbols_add,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "%I[a]"),
                s(:sym, :on_symbols_add)),
              s(:args),
              s(:lvasgn, :thru_symbols_add,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_symbols_add)))),
        s(:def, :test_qwords_new,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_qwords_new,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "%w[]"),
                s(:sym, :on_qwords_new)),
              s(:args),
              s(:lvasgn, :thru_qwords_new,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_qwords_new)))),
        s(:def, :test_qsymbols_new,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_qsymbols_new,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "%i[]"),
                s(:sym, :on_qsymbols_new)),
              s(:args),
              s(:lvasgn, :thru_qsymbols_new,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_qsymbols_new)))),
        s(:def, :test_symbols_new,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_symbols_new,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "%I[]"),
                s(:sym, :on_symbols_new)),
              s(:args),
              s(:lvasgn, :thru_symbols_new,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_symbols_new)))),
        s(:def, :test_redo,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_redo,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "redo"),
                s(:sym, :on_redo)),
              s(:args),
              s(:lvasgn, :thru_redo,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_redo)))),
        s(:def, :test_regexp_add,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_regexp_add,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "/foo/"),
                s(:sym, :on_regexp_add)),
              s(:args),
              s(:lvasgn, :thru_regexp_add,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_regexp_add)))),
        s(:def, :test_regexp_literal,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_regexp_literal,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "//"),
                s(:sym, :on_regexp_literal)),
              s(:args),
              s(:lvasgn, :thru_regexp_literal,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_regexp_literal)))),
        s(:def, :test_regexp_new,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_regexp_new,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "//"),
                s(:sym, :on_regexp_new)),
              s(:args),
              s(:lvasgn, :thru_regexp_new,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_regexp_new)))),
        s(:def, :test_rescue,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_rescue,
              s(:false)),
            s(:lvasgn, :parsed,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "begin; 1; rescue => e; 2; end"),
                  s(:sym, :on_rescue)),
                s(:args),
                s(:lvasgn, :thru_rescue,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_rescue)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "1.*rescue"),
                s(:regopt)),
              s(:lvar, :parsed)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "rescue\\(,var_field\\(e\\),\\[2\\]\\)"),
                s(:regopt)),
              s(:lvar, :parsed)))),
        s(:def, :test_rescue_class,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_rescue,
              s(:false)),
            s(:lvasgn, :parsed,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "begin; 1; rescue RuntimeError => e; 2; end"),
                  s(:sym, :on_rescue)),
                s(:args),
                s(:lvasgn, :thru_rescue,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_rescue)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "1.*rescue"),
                s(:regopt)),
              s(:lvar, :parsed)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "rescue\\(\\[ref\\(RuntimeError\\)\\],var_field\\(e\\),\\[2\\]\\)"),
                s(:regopt)),
              s(:lvar, :parsed)))),
        s(:def, :test_rescue_mod,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_rescue_mod,
              s(:false)),
            s(:lvasgn, :parsed,
              s(:block,
                s(:send, nil, :parse,
                  s(:str, "1 rescue 2"),
                  s(:sym, :on_rescue_mod)),
                s(:args),
                s(:lvasgn, :thru_rescue_mod,
                  s(:true)))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_rescue_mod)),
            s(:lvasgn, :bug4716,
              s(:str, "[ruby-core:36248]")),
            s(:send, nil, :assert_equal,
              s(:str, "[rescue_mod(1,2)]"),
              s(:lvar, :parsed),
              s(:lvar, :bug4716)))),
        s(:def, :test_rest_param,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_rest_param,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "def a(*) end"),
                s(:sym, :on_rest_param)),
              s(:args),
              s(:lvasgn, :thru_rest_param,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_rest_param)),
            s(:lvasgn, :thru_rest_param,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "def a(*x) end"),
                s(:sym, :on_rest_param)),
              s(:args),
              s(:lvasgn, :thru_rest_param,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_rest_param)))),
        s(:def, :test_retry,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_retry,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "retry"),
                s(:sym, :on_retry)),
              s(:args),
              s(:lvasgn, :thru_retry,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_retry)))),
        s(:def, :test_return,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_return,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "return a"),
                s(:sym, :on_return)),
              s(:args),
              s(:lvasgn, :thru_return,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_return)))),
        s(:def, :test_return0,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_return0,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "return"),
                s(:sym, :on_return0)),
              s(:args),
              s(:lvasgn, :thru_return0,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_return0)))),
        s(:def, :test_sclass,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_sclass,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "class << a; end"),
                s(:sym, :on_sclass)),
              s(:args),
              s(:lvasgn, :thru_sclass,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_sclass)))),
        s(:def, :test_string_add,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_string_add,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "\"aa\""),
                s(:sym, :on_string_add)),
              s(:args),
              s(:lvasgn, :thru_string_add,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_string_add)))),
        s(:def, :test_string_concat,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_string_concat,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "\"a\" \"b\""),
                s(:sym, :on_string_concat)),
              s(:args),
              s(:lvasgn, :thru_string_concat,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_string_concat)))),
        s(:def, :test_string_content,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_string_content,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "\"\""),
                s(:sym, :on_string_content)),
              s(:args),
              s(:lvasgn, :thru_string_content,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_string_content)),
            s(:lvasgn, :thru_string_content,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "\"a\""),
                s(:sym, :on_string_content)),
              s(:args),
              s(:lvasgn, :thru_string_content,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_string_content)),
            s(:lvasgn, :thru_string_content,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "%[a]"),
                s(:sym, :on_string_content)),
              s(:args),
              s(:lvasgn, :thru_string_content,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_string_content)),
            s(:lvasgn, :thru_string_content,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "'a'"),
                s(:sym, :on_string_content)),
              s(:args),
              s(:lvasgn, :thru_string_content,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_string_content)),
            s(:lvasgn, :thru_string_content,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "%<a>"),
                s(:sym, :on_string_content)),
              s(:args),
              s(:lvasgn, :thru_string_content,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_string_content)),
            s(:lvasgn, :thru_string_content,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "%!a!"),
                s(:sym, :on_string_content)),
              s(:args),
              s(:lvasgn, :thru_string_content,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_string_content)),
            s(:lvasgn, :thru_string_content,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "%q!a!"),
                s(:sym, :on_string_content)),
              s(:args),
              s(:lvasgn, :thru_string_content,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_string_content)),
            s(:lvasgn, :thru_string_content,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "%Q!a!"),
                s(:sym, :on_string_content)),
              s(:args),
              s(:lvasgn, :thru_string_content,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_string_content)))),
        s(:def, :test_string_dvar,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_string_dvar,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "\"\#$a\""),
                s(:sym, :on_string_dvar)),
              s(:args),
              s(:lvasgn, :thru_string_dvar,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_string_dvar)),
            s(:lvasgn, :thru_string_dvar,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "'\#$a'"),
                s(:sym, :on_string_dvar)),
              s(:args),
              s(:lvasgn, :thru_string_dvar,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:lvar, :thru_string_dvar)),
            s(:lvasgn, :thru_string_dvar,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "\"\#@a\""),
                s(:sym, :on_string_dvar)),
              s(:args),
              s(:lvasgn, :thru_string_dvar,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_string_dvar)),
            s(:lvasgn, :thru_string_dvar,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "'\#@a'"),
                s(:sym, :on_string_dvar)),
              s(:args),
              s(:lvasgn, :thru_string_dvar,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:lvar, :thru_string_dvar)),
            s(:lvasgn, :thru_string_dvar,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "\"\#@@a\""),
                s(:sym, :on_string_dvar)),
              s(:args),
              s(:lvasgn, :thru_string_dvar,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_string_dvar)),
            s(:lvasgn, :thru_string_dvar,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "'\#@@a'"),
                s(:sym, :on_string_dvar)),
              s(:args),
              s(:lvasgn, :thru_string_dvar,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:lvar, :thru_string_dvar)),
            s(:lvasgn, :thru_string_dvar,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "\"\#$1\""),
                s(:sym, :on_string_dvar)),
              s(:args),
              s(:lvasgn, :thru_string_dvar,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_string_dvar)),
            s(:lvasgn, :thru_string_dvar,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "'\#$1'"),
                s(:sym, :on_string_dvar)),
              s(:args),
              s(:lvasgn, :thru_string_dvar,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:lvar, :thru_string_dvar)))),
        s(:def, :test_string_embexpr,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_string_embexpr,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "\"\#{}\""),
                s(:sym, :on_string_embexpr)),
              s(:args),
              s(:lvasgn, :thru_string_embexpr,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_string_embexpr)),
            s(:lvasgn, :thru_string_embexpr,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "'\#{}'"),
                s(:sym, :on_string_embexpr)),
              s(:args),
              s(:lvasgn, :thru_string_embexpr,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:lvar, :thru_string_embexpr)))),
        s(:def, :test_string_literal,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_string_literal,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "\"\""),
                s(:sym, :on_string_literal)),
              s(:args),
              s(:lvasgn, :thru_string_literal,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_string_literal)))),
        s(:def, :test_super,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_super,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "super()"),
                s(:sym, :on_super)),
              s(:args),
              s(:lvasgn, :thru_super,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_super)))),
        s(:def, :test_symbol,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_symbol,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, ":a"),
                s(:sym, :on_symbol)),
              s(:args),
              s(:lvasgn, :thru_symbol,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_symbol)),
            s(:lvasgn, :thru_symbol,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, ":$a"),
                s(:sym, :on_symbol)),
              s(:args),
              s(:lvasgn, :thru_symbol,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_symbol)),
            s(:lvasgn, :thru_symbol,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, ":@a"),
                s(:sym, :on_symbol)),
              s(:args),
              s(:lvasgn, :thru_symbol,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_symbol)),
            s(:lvasgn, :thru_symbol,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, ":@@a"),
                s(:sym, :on_symbol)),
              s(:args),
              s(:lvasgn, :thru_symbol,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_symbol)),
            s(:lvasgn, :thru_symbol,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, ":=="),
                s(:sym, :on_symbol)),
              s(:args),
              s(:lvasgn, :thru_symbol,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_symbol)))),
        s(:def, :test_symbol_literal,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_symbol_literal,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, ":a"),
                s(:sym, :on_symbol_literal)),
              s(:args),
              s(:lvasgn, :thru_symbol_literal,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_symbol_literal)))),
        s(:def, :test_top_const_field,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_top_const_field,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "::A=1"),
                s(:sym, :on_top_const_field)),
              s(:args),
              s(:lvasgn, :thru_top_const_field,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_top_const_field)))),
        s(:def, :test_top_const_ref,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_top_const_ref,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "::A"),
                s(:sym, :on_top_const_ref)),
              s(:args),
              s(:lvasgn, :thru_top_const_ref,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_top_const_ref)))),
        s(:def, :test_unary,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_unary,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "not a 1, 2"),
                s(:sym, :on_unary)),
              s(:args),
              s(:lvasgn, :thru_unary,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_unary)),
            s(:lvasgn, :thru_unary,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "not (a)"),
                s(:sym, :on_unary)),
              s(:args),
              s(:lvasgn, :thru_unary,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_unary)),
            s(:lvasgn, :thru_unary,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "!a"),
                s(:sym, :on_unary)),
              s(:args),
              s(:lvasgn, :thru_unary,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_unary)),
            s(:lvasgn, :thru_unary,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "-10"),
                s(:sym, :on_unary)),
              s(:args),
              s(:lvasgn, :thru_unary,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_unary)),
            s(:lvasgn, :thru_unary,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "-10*2"),
                s(:sym, :on_unary)),
              s(:args),
              s(:lvasgn, :thru_unary,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_unary)),
            s(:lvasgn, :thru_unary,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "-10.1"),
                s(:sym, :on_unary)),
              s(:args),
              s(:lvasgn, :thru_unary,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_unary)),
            s(:lvasgn, :thru_unary,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "-10.1*2"),
                s(:sym, :on_unary)),
              s(:args),
              s(:lvasgn, :thru_unary,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_unary)),
            s(:lvasgn, :thru_unary,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "-a"),
                s(:sym, :on_unary)),
              s(:args),
              s(:lvasgn, :thru_unary,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_unary)),
            s(:lvasgn, :thru_unary,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "+a"),
                s(:sym, :on_unary)),
              s(:args),
              s(:lvasgn, :thru_unary,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_unary)),
            s(:lvasgn, :thru_unary,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "~a"),
                s(:sym, :on_unary)),
              s(:args),
              s(:lvasgn, :thru_unary,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_unary)),
            s(:lvasgn, :thru_unary,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "not()"),
                s(:sym, :on_unary)),
              s(:args),
              s(:lvasgn, :thru_unary,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_unary)))),
        s(:def, :test_undef,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_undef,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "undef a"),
                s(:sym, :on_undef)),
              s(:args),
              s(:lvasgn, :thru_undef,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_undef)),
            s(:lvasgn, :thru_undef,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "undef <=>"),
                s(:sym, :on_undef)),
              s(:args),
              s(:lvasgn, :thru_undef,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_undef)),
            s(:lvasgn, :thru_undef,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "undef a, b"),
                s(:sym, :on_undef)),
              s(:args),
              s(:lvasgn, :thru_undef,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_undef)))),
        s(:def, :test_unless,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_unless,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "unless a; end"),
                s(:sym, :on_unless)),
              s(:args),
              s(:lvasgn, :thru_unless,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_unless)))),
        s(:def, :test_unless_mod,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_unless_mod,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "nil unless a"),
                s(:sym, :on_unless_mod)),
              s(:args),
              s(:lvasgn, :thru_unless_mod,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_unless_mod)))),
        s(:def, :test_until,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_until,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "until a; end"),
                s(:sym, :on_until)),
              s(:args),
              s(:lvasgn, :thru_until,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_until)))),
        s(:def, :test_until_mod,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_until_mod,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "nil until a"),
                s(:sym, :on_until_mod)),
              s(:args),
              s(:lvasgn, :thru_until_mod,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_until_mod)))),
        s(:def, :test_var_field,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_var_field,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a = 1"),
                s(:sym, :on_var_field)),
              s(:args),
              s(:lvasgn, :thru_var_field,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_var_field)),
            s(:lvasgn, :thru_var_field,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "a += 1"),
                s(:sym, :on_var_field)),
              s(:args),
              s(:lvasgn, :thru_var_field,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_var_field)))),
        s(:def, :test_when,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_when,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "case a when b; end"),
                s(:sym, :on_when)),
              s(:args),
              s(:lvasgn, :thru_when,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_when)),
            s(:lvasgn, :thru_when,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "case when a; end"),
                s(:sym, :on_when)),
              s(:args),
              s(:lvasgn, :thru_when,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_when)))),
        s(:def, :test_while,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_while,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "while a; end"),
                s(:sym, :on_while)),
              s(:args),
              s(:lvasgn, :thru_while,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_while)))),
        s(:def, :test_while_mod,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_while_mod,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "nil while a"),
                s(:sym, :on_while_mod)),
              s(:args),
              s(:lvasgn, :thru_while_mod,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_while_mod)))),
        s(:def, :test_word_add,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_word_add,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "%W[a]"),
                s(:sym, :on_word_add)),
              s(:args),
              s(:lvasgn, :thru_word_add,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_word_add)))),
        s(:def, :test_word_new,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_word_new,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "%W[a]"),
                s(:sym, :on_word_new)),
              s(:args),
              s(:lvasgn, :thru_word_new,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_word_new)))),
        s(:def, :test_words_add,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_words_add,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "%W[a]"),
                s(:sym, :on_words_add)),
              s(:args),
              s(:lvasgn, :thru_words_add,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_words_add)))),
        s(:def, :test_words_new,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_words_new,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "%W[]"),
                s(:sym, :on_words_new)),
              s(:args),
              s(:lvasgn, :thru_words_new,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_words_new)))),
        s(:def, :test_xstring_add,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_xstring_add,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "`x`"),
                s(:sym, :on_xstring_add)),
              s(:args),
              s(:lvasgn, :thru_xstring_add,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_xstring_add)))),
        s(:def, :test_xstring_literal,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_xstring_literal,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "``"),
                s(:sym, :on_xstring_literal)),
              s(:args),
              s(:lvasgn, :thru_xstring_literal,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_xstring_literal)))),
        s(:def, :test_xstring_new,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_xstring_new,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "``"),
                s(:sym, :on_xstring_new)),
              s(:args),
              s(:lvasgn, :thru_xstring_new,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_xstring_new)))),
        s(:def, :test_yield,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_yield,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "yield a"),
                s(:sym, :on_yield)),
              s(:args),
              s(:lvasgn, :thru_yield,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_yield)))),
        s(:def, :test_yield0,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_yield0,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "yield"),
                s(:sym, :on_yield0)),
              s(:args),
              s(:lvasgn, :thru_yield0,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_yield0)))),
        s(:def, :test_zsuper,
          s(:args),
          s(:begin,
            s(:lvasgn, :thru_zsuper,
              s(:false)),
            s(:block,
              s(:send, nil, :parse,
                s(:str, "super"),
                s(:sym, :on_zsuper)),
              s(:args),
              s(:lvasgn, :thru_zsuper,
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:lvar, :thru_zsuper)))),
        s(:def, :test_local_variables,
          s(:args),
          s(:begin,
            s(:lvasgn, :cmd,
              s(:str, "command(w,[regexp_literal(regexp_add(regexp_new(),25 # ),/)])")),
            s(:lvasgn, :div,
              s(:str, "binary(ref(w),/,25)")),
            s(:lvasgn, :bug1939,
              s(:str, "[ruby-core:24923]")),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "["),
                s(:begin,
                  s(:lvar, :cmd)),
                s(:str, "]")),
              s(:send, nil, :parse,
                s(:str, "w /25 # /")),
              s(:lvar, :bug1939)),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "[assign(var_field(w),1),"),
                s(:begin,
                  s(:lvar, :div)),
                s(:str, "]")),
              s(:send, nil, :parse,
                s(:str, "w = 1; w /25 # /")),
              s(:lvar, :bug1939)),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "[fcall(p,[],&block([w],["),
                s(:begin,
                  s(:lvar, :div)),
                s(:str, "]))]")),
              s(:send, nil, :parse,
                s(:str, "p{|w|w /25 # /\n}")),
              s(:lvar, :bug1939)),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "[def(p,[w],bodystmt(["),
                s(:begin,
                  s(:lvar, :div)),
                s(:str, "]))]")),
              s(:send, nil, :parse,
                s(:str, "def p(w)\nw /25 # /\nend")),
              s(:lvar, :bug1939)))),
        s(:def, :test_block_variables,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "[fcall(proc,[],&block([],[void()]))]"),
              s(:send, nil, :parse,
                s(:str, "proc{|;y|}"))),
            s(:if,
              s(:defined?,
                s(:const,
                  s(:const, nil, :Process), :RLIMIT_AS)),
              s(:send, nil, :assert_in_out_err,
                s(:array,
                  s(:dstr,
                    s(:str, "-I"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :File), :dirname,
                        s(:str, "(string)")))),
                  s(:str, "-rdummyparser")),
                s(:str, "Process.setrlimit(Process::RLIMIT_AS,100*1024*1024); puts DummyParser.new(\"proc{|;y|!y}\").parse"),
                s(:array,
                  s(:str, "[fcall(proc,[],&block([],[unary(!,ref(y))]))]")),
                s(:array),
                s(:str, "[ruby-dev:39423]")), nil))),
        s(:def, :test_unterminated_regexp,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:str, "unterminated regexp meets end of file"),
            s(:send, nil, :compile_error,
              s(:str, "/")))),
        s(:def, :test_invalid_instance_variable_name,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "`@1' is not allowed as an instance variable name"),
              s(:send, nil, :compile_error,
                s(:str, "@1"))),
            s(:send, nil, :assert_equal,
              s(:str, "`@%' is not allowed as an instance variable name"),
              s(:send, nil, :compile_error,
                s(:str, "@%"))),
            s(:send, nil, :assert_equal,
              s(:str, "`@' without identifiers is not allowed as an instance variable name"),
              s(:send, nil, :compile_error,
                s(:str, "@"))))),
        s(:def, :test_invalid_class_variable_name,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "`@@1' is not allowed as a class variable name"),
              s(:send, nil, :compile_error,
                s(:str, "@@1"))),
            s(:send, nil, :assert_equal,
              s(:str, "`@@%' is not allowed as a class variable name"),
              s(:send, nil, :compile_error,
                s(:str, "@@%"))),
            s(:send, nil, :assert_equal,
              s(:str, "`@@' without identifiers is not allowed as a class variable name"),
              s(:send, nil, :compile_error,
                s(:str, "@@"))))),
        s(:def, :test_invalid_global_variable_name,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "`$%' is not allowed as a global variable name"),
              s(:send, nil, :compile_error,
                s(:str, "$%"))),
            s(:send, nil, :assert_equal,
              s(:str, "`$' without identifiers is not allowed as a global variable name"),
              s(:send, nil, :compile_error,
                s(:str, "$"))))),
        s(:def, :test_warning_shadowing,
          s(:args),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :fmt),
                s(:splat,
                  s(:lvasgn, :args))),
              s(:send, nil, :warning,
                s(:str, "x = 1; tap {|;x|}"))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "shadowing outer local variable"),
                s(:regopt)),
              s(:lvar, :fmt)),
            s(:send, nil, :assert_equal,
              s(:str, "x"),
              s(:send,
                s(:lvar, :args), :[],
                s(:int, 0))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "x"),
                s(:regopt)),
              s(:send,
                s(:lvar, :fmt), :%,
                s(:lvar, :args))))),
        s(:def, :test_warning_ignored_magic_comment,
          s(:args),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :fmt),
                s(:splat,
                  s(:lvasgn, :args))),
              s(:send, nil, :warning,
                s(:str, "1; #-*- frozen-string-literal: true -*-"))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "ignored after any tokens"),
                s(:regopt)),
              s(:lvar, :fmt)),
            s(:send, nil, :assert_equal,
              s(:str, "frozen_string_literal"),
              s(:send,
                s(:lvar, :args), :[],
                s(:int, 0))))),
        s(:def, :test_warn_cr_in_middle,
          s(:args),
          s(:begin,
            s(:lvasgn, :fmt,
              s(:nil)),
            s(:block,
              s(:send, nil, :assert_warn,
                s(:str, "")),
              s(:args),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :fmt)),
                s(:send, nil, :warn,
                  s(:str, "\r;")))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "encountered"),
                s(:regopt)),
              s(:lvar, :fmt)))))), nil))
