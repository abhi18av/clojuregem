s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:module,
    s(:const, nil, :TestRipper), nil),
  s(:class,
    s(:const,
      s(:const, nil, :TestRipper), :Generic),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:def, :test_parse_files,
      s(:args),
      s(:begin,
        s(:lvasgn, :srcdir,
          s(:send,
            s(:const, nil, :File), :expand_path,
            s(:str, "../../.."),
            s(:str, "(string)"))),
        s(:send, nil, :assert_separately,
          s(:array,
            s(:str, "--disable-gem"),
            s(:str, "-rripper"),
            s(:str, "-"),
            s(:dstr,
              s(:begin,
                s(:lvar, :srcdir)))),
          s(:str, "(string)"),
          s(:int, 9),
          s(:dstr,
            s(:str, "      TEST_RATIO = ENV[\"TEST_RIPPER_RATIO\"]&.tap {|s|break s.to_f} || 0.05 # testing all files needs too long time...\n"),
            s(:str, "      class Parser < Ripper\n"),
            s(:str, "        PARSER_EVENTS.each {|n| eval \"def on_\#{n}(*args) r = [:\#{n}, *args]; r.inspect; Object.new end\" }\n"),
            s(:str, "        SCANNER_EVENTS.each {|n| eval \"def on_\#{n}(*args) r = [:\#{n}, *args]; r.inspect; Object.new end\" }\n"),
            s(:str, "      end\n"),
            s(:str, "      dir = ARGV.shift\n"),
            s(:str, "      for script in Dir[\"\#{dir}/{lib,sample,ext,test}/**/*.rb\"].sort\n"),
            s(:str, "        next if TEST_RATIO and TEST_RATIO < rand\n"),
            s(:str, "        assert_nothing_raised(\"ripper failed to parse: \#{script.inspect}\") {\n"),
            s(:str, "          Parser.new(File.read(script), script).parse\n"),
            s(:str, "        }\n"),
            s(:str, "      end\n")),
          s(:hash,
            s(:pair,
              s(:sym, :timeout),
              s(:const,
                s(:const, nil, :Float), :INFINITY))))))))
