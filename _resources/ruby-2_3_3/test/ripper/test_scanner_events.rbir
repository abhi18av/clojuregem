s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :require,
          s(:str, "ripper")),
        s(:send, nil, :require,
          s(:str, "test/unit")),
        s(:lvasgn, :ripper_test,
          s(:true)),
        s(:module,
          s(:const, nil, :TestRipper), nil)),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:lvar, :ripper_test),
    s(:class,
      s(:const,
        s(:const, nil, :TestRipper), :ScannerEvents),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :test_event_coverage,
          s(:args),
          s(:begin,
            s(:lvasgn, :dispatched,
              s(:block,
                s(:send,
                  s(:const,
                    s(:const, nil, :Ripper), :SCANNER_EVENTS), :map),
                s(:args,
                  s(:arg, :event),
                  s(:arg, :_)),
                s(:lvar, :event))),
            s(:block,
              s(:send,
                s(:lvar, :dispatched), :each),
              s(:args,
                s(:arg, :e)),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send, nil, :respond_to?,
                  s(:dstr,
                    s(:str, "test_"),
                    s(:begin,
                      s(:lvar, :e))),
                  s(:true)),
                s(:dstr,
                  s(:str, "event not tested: "),
                  s(:begin,
                    s(:lvar, :e))))))),
        s(:def, :scan,
          s(:args,
            s(:arg, :target),
            s(:arg, :str)),
          s(:begin,
            s(:lvasgn, :sym,
              s(:send,
                s(:dstr,
                  s(:str, "on_"),
                  s(:begin,
                    s(:lvar, :target))), :intern)),
            s(:block,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Ripper), :lex,
                      s(:lvar, :str)), :select),
                  s(:args,
                    s(:arg, :_1),
                    s(:arg, :type),
                    s(:arg, :_2)),
                  s(:send,
                    s(:lvar, :type), :==,
                    s(:lvar, :sym))), :map),
              s(:args,
                s(:arg, :_1),
                s(:arg, :_2),
                s(:arg, :tok)),
              s(:lvar, :tok)))),
        s(:def, :test_tokenize,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :Ripper), :tokenize,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a")),
              s(:send,
                s(:const, nil, :Ripper), :tokenize,
                s(:str, "a"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "1")),
              s(:send,
                s(:const, nil, :Ripper), :tokenize,
                s(:str, "1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "1"),
                s(:str, ";"),
                s(:str, "def"),
                s(:str, " "),
                s(:str, "m"),
                s(:str, "("),
                s(:str, "arg"),
                s(:str, ")"),
                s(:str, "end")),
              s(:send,
                s(:const, nil, :Ripper), :tokenize,
                s(:str, "1;def m(arg)end"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "print"),
                s(:str, "("),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "EOS")),
                s(:str, ")"),
                s(:str, "\n"),
                s(:str, "heredoc\n"),
                s(:str, "EOS\n")),
              s(:send,
                s(:const, nil, :Ripper), :tokenize,
                s(:dstr,
                  s(:str, "print(<<"),
                  s(:str, "EOS)\nheredoc\nEOS\n")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "print"),
                s(:str, "("),
                s(:str, " "),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "EOS")),
                s(:str, ")"),
                s(:str, "\n"),
                s(:str, "heredoc\n"),
                s(:str, "EOS\n")),
              s(:send,
                s(:const, nil, :Ripper), :tokenize,
                s(:dstr,
                  s(:str, "print( <<"),
                  s(:str, "EOS)\nheredoc\nEOS\n")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "#\n"),
                s(:str, "\n"),
                s(:str, "#\n"),
                s(:str, "\n"),
                s(:str, "nil"),
                s(:str, "\n")),
              s(:send,
                s(:const, nil, :Ripper), :tokenize,
                s(:str, "#\n\n#\n\nnil\n"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "1"),
                s(:str, "  "),
                s(:str, "."),
                s(:str, "foo"),
                s(:str, "\n")),
              s(:send,
                s(:const, nil, :Ripper), :tokenize,
                s(:str, "1  .foo\n"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "1"),
                s(:str, "\n"),
                s(:str, "  "),
                s(:str, "."),
                s(:str, "foo"),
                s(:str, "\n")),
              s(:send,
                s(:const, nil, :Ripper), :tokenize,
                s(:str, "1\n  .foo\n"))))),
        s(:def, :test_lex,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send,
                s(:const, nil, :Ripper), :lex,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:sym, :on_ident),
                  s(:str, "a"))),
              s(:send,
                s(:const, nil, :Ripper), :lex,
                s(:str, "a"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:sym, :on_kw),
                  s(:str, "nil"))),
              s(:send,
                s(:const, nil, :Ripper), :lex,
                s(:str, "nil"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:sym, :on_kw),
                  s(:str, "def")),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 3)),
                  s(:sym, :on_sp),
                  s(:str, " ")),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 4)),
                  s(:sym, :on_ident),
                  s(:str, "m")),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 5)),
                  s(:sym, :on_lparen),
                  s(:str, "(")),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 6)),
                  s(:sym, :on_ident),
                  s(:str, "a")),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 7)),
                  s(:sym, :on_rparen),
                  s(:str, ")")),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 8)),
                  s(:sym, :on_kw),
                  s(:str, "end"))),
              s(:send,
                s(:const, nil, :Ripper), :lex,
                s(:str, "def m(a)end"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:sym, :on_int),
                  s(:str, "1")),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 1)),
                  s(:sym, :on_nl),
                  s(:str, "\n")),
                s(:array,
                  s(:array,
                    s(:int, 2),
                    s(:int, 0)),
                  s(:sym, :on_int),
                  s(:str, "2")),
                s(:array,
                  s(:array,
                    s(:int, 2),
                    s(:int, 1)),
                  s(:sym, :on_nl),
                  s(:str, "\n")),
                s(:array,
                  s(:array,
                    s(:int, 3),
                    s(:int, 0)),
                  s(:sym, :on_int),
                  s(:str, "3"))),
              s(:send,
                s(:const, nil, :Ripper), :lex,
                s(:str, "1\n2\n3"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:sym, :on_heredoc_beg),
                  s(:dstr,
                    s(:str, "<<"),
                    s(:str, "EOS"))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 5)),
                  s(:sym, :on_nl),
                  s(:str, "\n")),
                s(:array,
                  s(:array,
                    s(:int, 2),
                    s(:int, 0)),
                  s(:sym, :on_tstring_content),
                  s(:str, "heredoc\n")),
                s(:array,
                  s(:array,
                    s(:int, 3),
                    s(:int, 0)),
                  s(:sym, :on_heredoc_end),
                  s(:str, "EOS"))),
              s(:send,
                s(:const, nil, :Ripper), :lex,
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "EOS\nheredoc\nEOS")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:sym, :on_heredoc_beg),
                  s(:dstr,
                    s(:str, "<<"),
                    s(:str, "EOS"))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 5)),
                  s(:sym, :on_nl),
                  s(:str, "\n")),
                s(:array,
                  s(:array,
                    s(:int, 2),
                    s(:int, 0)),
                  s(:sym, :on_heredoc_end),
                  s(:str, "EOS"))),
              s(:send,
                s(:const, nil, :Ripper), :lex,
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "EOS\nEOS"))),
              s(:str, "bug#4543")),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:sym, :on_regexp_beg),
                  s(:str, "/")),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 1)),
                  s(:sym, :on_tstring_content),
                  s(:str, "foo\nbar")),
                s(:array,
                  s(:array,
                    s(:int, 2),
                    s(:int, 3)),
                  s(:sym, :on_regexp_end),
                  s(:str, "/"))),
              s(:send,
                s(:const, nil, :Ripper), :lex,
                s(:str, "/foo\nbar/"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:sym, :on_regexp_beg),
                  s(:str, "/")),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 1)),
                  s(:sym, :on_tstring_content),
                  s(:str, "foo\n〠")),
                s(:array,
                  s(:array,
                    s(:int, 2),
                    s(:int, 3)),
                  s(:sym, :on_regexp_end),
                  s(:str, "/"))),
              s(:send,
                s(:const, nil, :Ripper), :lex,
                s(:str, "/foo\n〠/"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:sym, :on_tstring_beg),
                  s(:str, "'")),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 1)),
                  s(:sym, :on_tstring_content),
                  s(:str, "foo\n〠")),
                s(:array,
                  s(:array,
                    s(:int, 2),
                    s(:int, 3)),
                  s(:sym, :on_tstring_end),
                  s(:str, "'"))),
              s(:send,
                s(:const, nil, :Ripper), :lex,
                s(:str, "'foo\n〠'"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:sym, :on_tstring_beg),
                  s(:str, "'")),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 1)),
                  s(:sym, :on_tstring_content),
                  s(:str, "あ\nい")),
                s(:array,
                  s(:array,
                    s(:int, 2),
                    s(:int, 3)),
                  s(:sym, :on_tstring_end),
                  s(:str, "'"))),
              s(:send,
                s(:const, nil, :Ripper), :lex,
                s(:str, "'あ\nい'"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:sym, :on_rational),
                  s(:str, "1r")),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 2)),
                  s(:sym, :on_nl),
                  s(:str, "\n")),
                s(:array,
                  s(:array,
                    s(:int, 2),
                    s(:int, 0)),
                  s(:sym, :on_imaginary),
                  s(:str, "2i")),
                s(:array,
                  s(:array,
                    s(:int, 2),
                    s(:int, 2)),
                  s(:sym, :on_nl),
                  s(:str, "\n")),
                s(:array,
                  s(:array,
                    s(:int, 3),
                    s(:int, 0)),
                  s(:sym, :on_imaginary),
                  s(:str, "3ri")),
                s(:array,
                  s(:array,
                    s(:int, 3),
                    s(:int, 3)),
                  s(:sym, :on_nl),
                  s(:str, "\n")),
                s(:array,
                  s(:array,
                    s(:int, 4),
                    s(:int, 0)),
                  s(:sym, :on_rational),
                  s(:str, "4.2r")),
                s(:array,
                  s(:array,
                    s(:int, 4),
                    s(:int, 4)),
                  s(:sym, :on_nl),
                  s(:str, "\n")),
                s(:array,
                  s(:array,
                    s(:int, 5),
                    s(:int, 0)),
                  s(:sym, :on_imaginary),
                  s(:str, "5.6ri"))),
              s(:send,
                s(:const, nil, :Ripper), :lex,
                s(:str, "1r\n2i\n3ri\n4.2r\n5.6ri"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:sym, :on_heredoc_beg),
                  s(:str, "<<~EOS")),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 6)),
                  s(:sym, :on_nl),
                  s(:str, "\n")),
                s(:array,
                  s(:array,
                    s(:int, 2),
                    s(:int, 2)),
                  s(:sym, :on_tstring_content),
                  s(:str, "heredoc\n")),
                s(:array,
                  s(:array,
                    s(:int, 3),
                    s(:int, 0)),
                  s(:sym, :on_heredoc_end),
                  s(:str, "EOS"))),
              s(:send,
                s(:const, nil, :Ripper), :lex,
                s(:str, "<<~EOS\n  heredoc\nEOS"))))),
        s(:def, :test_location,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_location,
              s(:str, "")),
            s(:send, nil, :assert_location,
              s(:str, " ")),
            s(:send, nil, :assert_location,
              s(:str, ":")),
            s(:send, nil, :assert_location,
              s(:str, "\n")),
            s(:send, nil, :assert_location,
              s(:str, "\r\n")),
            s(:send, nil, :assert_location,
              s(:str, "\n\n\n\n\n\r\n\n\n")),
            s(:send, nil, :assert_location,
              s(:str, "\n;\n;\n;\n;\n")),
            s(:send, nil, :assert_location,
              s(:str, "nil")),
            s(:send, nil, :assert_location,
              s(:str, "@ivar")),
            s(:send, nil, :assert_location,
              s(:str, "1;2;3")),
            s(:send, nil, :assert_location,
              s(:str, "1\n2\n3")),
            s(:send, nil, :assert_location,
              s(:str, "1\n2\n3\n")),
            s(:send, nil, :assert_location,
              s(:str, "def m(a) nil end")),
            s(:send, nil, :assert_location,
              s(:str, "if true then false else nil end")),
            s(:send, nil, :assert_location,
              s(:str, "BEGIN{print nil}")),
            s(:send, nil, :assert_location,
              s(:str, "%w(a b\nc\r\nd \ne )")),
            s(:send, nil, :assert_location,
              s(:str, "\"a\nb\r\nc\"")),
            s(:send, nil, :assert_location,
              s(:dstr,
                s(:str, "print(<<"),
                s(:str, "EOS)\nheredoc\nEOS\n"))),
            s(:send, nil, :assert_location,
              s(:str, "print(<<-\"EOS\")\nheredoc\n     EOS\n")))),
        s(:def, :assert_location,
          s(:args,
            s(:arg, :src)),
          s(:begin,
            s(:lvasgn, :buf,
              s(:str, "")),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Ripper), :lex,
                  s(:lvar, :src)), :each),
              s(:args,
                s(:arg, :pos),
                s(:arg, :type),
                s(:arg, :tok)),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :line),
                    s(:lvasgn, :col)),
                  s(:array,
                    s(:splat,
                      s(:lvar, :pos)))),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:send,
                      s(:lvar, :buf), :count,
                      s(:str, "\n")), :+,
                    s(:int, 1)),
                  s(:lvar, :line),
                  s(:dstr,
                    s(:str, "wrong lineno: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :tok), :inspect)),
                    s(:str, " ("),
                    s(:begin,
                      s(:lvar, :type)),
                    s(:str, ") ["),
                    s(:begin,
                      s(:lvar, :line)),
                    s(:str, ":"),
                    s(:begin,
                      s(:lvar, :col)),
                    s(:str, "]"))),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:send,
                      s(:lvar, :buf), :sub,
                      s(:regexp,
                        s(:str, "\\A.*\\n"),
                        s(:regopt, :m)),
                      s(:str, "")), :size),
                  s(:lvar, :col),
                  s(:dstr,
                    s(:str, "wrong column: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :tok), :inspect)),
                    s(:str, " ("),
                    s(:begin,
                      s(:lvar, :type)),
                    s(:str, ") ["),
                    s(:begin,
                      s(:lvar, :line)),
                    s(:str, ":"),
                    s(:begin,
                      s(:lvar, :col)),
                    s(:str, "]"))),
                s(:send,
                  s(:lvar, :buf), :<<,
                  s(:lvar, :tok)))),
            s(:send, nil, :assert_equal,
              s(:lvar, :src),
              s(:lvar, :buf)))),
        s(:def, :test_backref,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "$`"),
              s(:str, "$&"),
              s(:str, "$'"),
              s(:str, "$1"),
              s(:str, "$2"),
              s(:str, "$3")),
            s(:send, nil, :scan,
              s(:str, "backref"),
              s(:str, "m($~, $`, $&, $', $1, $2, $3)")))),
        s(:def, :test_backtick,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "`")),
            s(:send, nil, :scan,
              s(:str, "backtick"),
              s(:str, "p `make all`")))),
        s(:def, :test_comma,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:send,
                s(:array,
                  s(:str, ",")), :*,
                s(:int, 6)),
              s(:send, nil, :scan,
                s(:str, "comma"),
                s(:str, " m(0,1,2,3,4,5,6) "))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "comma"),
                s(:str, "\".,.,.,.,.,.,..\""))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "comma"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "EOS\n,,,,,,,,,,\nEOS")))))),
        s(:def, :test_period,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "period"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, ".")),
              s(:send, nil, :scan,
                s(:str, "period"),
                s(:str, "a.b"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, ".")),
              s(:send, nil, :scan,
                s(:str, "period"),
                s(:str, "Object.new"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "period"),
                s(:str, "\".\""))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "period"),
                s(:str, "1..2"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "period"),
                s(:str, "1...3"))))),
        s(:def, :test_const,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "CONST")),
              s(:send, nil, :scan,
                s(:str, "const"),
                s(:str, "CONST"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "C")),
              s(:send, nil, :scan,
                s(:str, "const"),
                s(:str, "C"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "CONST_A")),
              s(:send, nil, :scan,
                s(:str, "const"),
                s(:str, "CONST_A"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "Const"),
                s(:str, "Const2"),
                s(:str, "Const3")),
              s(:send, nil, :scan,
                s(:str, "const"),
                s(:str, "Const; Const2; Const3"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "Const")),
              s(:send, nil, :scan,
                s(:str, "const"),
                s(:str, "Const(a)"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "M"),
                s(:str, "A"),
                s(:str, "A2")),
              s(:send, nil, :scan,
                s(:str, "const"),
                s(:str, "M(A,A2)"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "const"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "const"),
                s(:str, "m(lvar, @ivar, @@cvar, $gvar)"))))),
        s(:def, :test_cvar,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "cvar"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "@@cvar")),
              s(:send, nil, :scan,
                s(:str, "cvar"),
                s(:str, "@@cvar"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "@@__cvar__")),
              s(:send, nil, :scan,
                s(:str, "cvar"),
                s(:str, "@@__cvar__"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "@@CVAR")),
              s(:send, nil, :scan,
                s(:str, "cvar"),
                s(:str, "@@CVAR"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "@@cvar")),
              s(:send, nil, :scan,
                s(:str, "cvar"),
                s(:str, "   @@cvar#comment"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "@@cvar")),
              s(:send, nil, :scan,
                s(:str, "cvar"),
                s(:str, ":@@cvar"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "@@cvar")),
              s(:send, nil, :scan,
                s(:str, "cvar"),
                s(:str, "m(lvar, @ivar, @@cvar, $gvar)"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "cvar"),
                s(:str, "\"@@cvar\""))))),
        s(:def, :test_embexpr_beg,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "embexpr_beg"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "\#{")),
              s(:send, nil, :scan,
                s(:str, "embexpr_beg"),
                s(:str, "\"\#{expr}\""))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "embexpr_beg"),
                s(:str, "%q[\#{expr}]"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "\#{")),
              s(:send, nil, :scan,
                s(:str, "embexpr_beg"),
                s(:str, "%Q[\#{expr}]"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "\#{")),
              s(:send, nil, :scan,
                s(:str, "embexpr_beg"),
                s(:dstr,
                  s(:str, "m(<<"),
                  s(:str, "EOS)\n\#{expr}\nEOS")))))),
        s(:def, :test_embexpr_end,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "embexpr_end"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "}")),
              s(:send, nil, :scan,
                s(:str, "embexpr_end"),
                s(:str, "\"\#{expr}\""))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "embexpr_end"),
                s(:str, "%q[\#{expr}]"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "}")),
              s(:send, nil, :scan,
                s(:str, "embexpr_end"),
                s(:str, "%Q[\#{expr}]"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "}")),
              s(:send, nil, :scan,
                s(:str, "embexpr_end"),
                s(:dstr,
                  s(:str, "m(<<"),
                  s(:str, "EOS)\n\#{expr}\nEOS")))))),
        s(:def, :test_embvar,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "embvar"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "#")),
              s(:send, nil, :scan,
                s(:str, "embvar"),
                s(:str, "\"\#$gvar\""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "#")),
              s(:send, nil, :scan,
                s(:str, "embvar"),
                s(:str, "\"\#@ivar\""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "#")),
              s(:send, nil, :scan,
                s(:str, "embvar"),
                s(:str, "\"\#@@cvar\""))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "embvar"),
                s(:str, "\"#lvar\""))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "embvar"),
                s(:str, "\"#\""))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "embvar"),
                s(:str, "\"\\\#$gvar\""))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "embvar"),
                s(:str, "\"\\\#@ivar\""))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "embvar"),
                s(:str, "%q[\#@ivar]"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "#")),
              s(:send, nil, :scan,
                s(:str, "embvar"),
                s(:str, "%Q[\#@ivar]"))))),
        s(:def, :test_float,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "float"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "1.000")),
              s(:send, nil, :scan,
                s(:str, "float"),
                s(:str, "1.000"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "123.456")),
              s(:send, nil, :scan,
                s(:str, "float"),
                s(:str, "123.456"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "1.2345678901234567890123456789")),
              s(:send, nil, :scan,
                s(:str, "float"),
                s(:str, "1.2345678901234567890123456789"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "1.000")),
              s(:send, nil, :scan,
                s(:str, "float"),
                s(:str, "   1.000# comment"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "1.234e5")),
              s(:send, nil, :scan,
                s(:str, "float"),
                s(:str, "1.234e5"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "1.234e1234567890")),
              s(:send, nil, :scan,
                s(:str, "float"),
                s(:str, "1.234e1234567890"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "1.0")),
              s(:send, nil, :scan,
                s(:str, "float"),
                s(:str, "m(a,b,1.0,c,d)"))))),
        s(:def, :test_rational,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "rational"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "1r"),
                s(:str, "10r"),
                s(:str, "10.1r")),
              s(:send, nil, :scan,
                s(:str, "rational"),
                s(:str, "m(1r,10r,10.1r)"))))),
        s(:def, :test_gvar,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "gvar"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "$a")),
              s(:send, nil, :scan,
                s(:str, "gvar"),
                s(:str, "$a"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "$A")),
              s(:send, nil, :scan,
                s(:str, "gvar"),
                s(:str, "$A"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "$gvar")),
              s(:send, nil, :scan,
                s(:str, "gvar"),
                s(:str, "m(lvar, @ivar, @@cvar, $gvar)"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "$_"),
                s(:str, "$~"),
                s(:str, "$*"),
                s(:str, "$$"),
                s(:str, "$?"),
                s(:str, "$!"),
                s(:str, "$@"),
                s(:str, "$/"),
                s(:str, "$\\"),
                s(:str, "$;"),
                s(:str, "$,"),
                s(:str, "$."),
                s(:str, "$="),
                s(:str, "$:"),
                s(:str, "$<"),
                s(:str, "$>"),
                s(:str, "$\"")),
              s(:send, nil, :scan,
                s(:str, "gvar"),
                s(:str, "m($_, $~, $*, $$, $?, $!, $@, $/, $\\, $;, $,, $., $=, $:, $<, $>, $\")"))))),
        s(:def, :test_ident,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "ident"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "lvar")),
              s(:send, nil, :scan,
                s(:str, "ident"),
                s(:str, "lvar"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "m"),
                s(:str, "lvar")),
              s(:send, nil, :scan,
                s(:str, "ident"),
                s(:str, "m(lvar, @ivar, @@cvar, $gvar)"))))),
        s(:def, :test_imaginary,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "imaginary"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "1i"),
                s(:str, "10ri"),
                s(:str, "10.0i"),
                s(:str, "10.1ri")),
              s(:send, nil, :scan,
                s(:str, "imaginary"),
                s(:str, "m(1i,10ri,10.0i,10.1ri)"))))),
        s(:def, :test_int,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "int"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "1"),
                s(:str, "10"),
                s(:str, "100000000000000")),
              s(:send, nil, :scan,
                s(:str, "int"),
                s(:str, "m(1,10,100000000000000)"))))),
        s(:def, :test_ivar,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "ivar"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "@ivar")),
              s(:send, nil, :scan,
                s(:str, "ivar"),
                s(:str, "@ivar"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "@__ivar__")),
              s(:send, nil, :scan,
                s(:str, "ivar"),
                s(:str, "@__ivar__"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "@IVAR")),
              s(:send, nil, :scan,
                s(:str, "ivar"),
                s(:str, "@IVAR"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "@ivar")),
              s(:send, nil, :scan,
                s(:str, "ivar"),
                s(:str, "m(lvar, @ivar, @@cvar, $gvar)"))))),
        s(:def, :test_kw,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "not")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "not 1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "and")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "1 and 2"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "or")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "1 or 2"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "if"),
                s(:str, "then"),
                s(:str, "else"),
                s(:str, "end")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "if 1 then 2 else 3 end"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "if"),
                s(:str, "then"),
                s(:str, "elsif"),
                s(:str, "else"),
                s(:str, "end")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "if 1 then 2 elsif 3 else 4 end"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "unless"),
                s(:str, "then"),
                s(:str, "end")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "unless 1 then end"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "if"),
                s(:str, "true")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "1 if true"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "unless"),
                s(:str, "false")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "2 unless false"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "case"),
                s(:str, "when"),
                s(:str, "when"),
                s(:str, "else"),
                s(:str, "end")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "case n; when 1; when 2; else 3 end"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "while"),
                s(:str, "do"),
                s(:str, "nil"),
                s(:str, "end")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "while 1 do nil end"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "until"),
                s(:str, "do"),
                s(:str, "nil"),
                s(:str, "end")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "until 1 do nil end"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "while")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "1 while 2"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "until")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "1 until 2"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "while"),
                s(:str, "break"),
                s(:str, "next"),
                s(:str, "retry"),
                s(:str, "end")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "while 1; break; next; retry end"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "for"),
                s(:str, "in"),
                s(:str, "next"),
                s(:str, "break"),
                s(:str, "end")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "for x in obj; next 1; break 2 end"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "begin"),
                s(:str, "rescue"),
                s(:str, "retry"),
                s(:str, "end")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "begin 1; rescue; retry; end"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "rescue")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "1 rescue 2"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "def"),
                s(:str, "redo"),
                s(:str, "return"),
                s(:str, "end")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "def m() redo; return end"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "def"),
                s(:str, "yield"),
                s(:str, "yield"),
                s(:str, "end")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "def m() yield; yield 1 end"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "def"),
                s(:str, "super"),
                s(:str, "super"),
                s(:str, "super"),
                s(:str, "end")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "def m() super; super(); super(1) end"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "alias")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "alias a b"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "undef")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "undef public"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "class"),
                s(:str, "end")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "class A < Object; end"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "module"),
                s(:str, "end")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "module M; end"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "class"),
                s(:str, "end")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "class << obj; end"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "BEGIN")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "BEGIN { }"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "END")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "END { }"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "self")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "self.class"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "nil"),
                s(:str, "true"),
                s(:str, "false")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "p(nil, true, false)"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "__FILE__"),
                s(:str, "__LINE__")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "p __FILE__, __LINE__"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "defined?")),
              s(:send, nil, :scan,
                s(:str, "kw"),
                s(:str, "defined?(Object)"))))),
        s(:def, :test_lbrace,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "lbrace"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "{")),
              s(:send, nil, :scan,
                s(:str, "lbrace"),
                s(:str, "3.times{ }"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "{")),
              s(:send, nil, :scan,
                s(:str, "lbrace"),
                s(:str, "3.times  { }"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "{")),
              s(:send, nil, :scan,
                s(:str, "lbrace"),
                s(:str, "3.times{}"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "lbrace"),
                s(:str, "\"{}\""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "{")),
              s(:send, nil, :scan,
                s(:str, "lbrace"),
                s(:str, "{1=>2}"))))),
        s(:def, :test_rbrace,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "rbrace"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "}")),
              s(:send, nil, :scan,
                s(:str, "rbrace"),
                s(:str, "3.times{ }"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "}")),
              s(:send, nil, :scan,
                s(:str, "rbrace"),
                s(:str, "3.times  { }"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "}")),
              s(:send, nil, :scan,
                s(:str, "rbrace"),
                s(:str, "3.times{}"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "rbrace"),
                s(:str, "\"{}\""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "}")),
              s(:send, nil, :scan,
                s(:str, "rbrace"),
                s(:str, "{1=>2}"))))),
        s(:def, :test_lbracket,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "lbracket"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "[")),
              s(:send, nil, :scan,
                s(:str, "lbracket"),
                s(:str, "[]"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "[")),
              s(:send, nil, :scan,
                s(:str, "lbracket"),
                s(:str, "a[1]"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "lbracket"),
                s(:str, "m(%q[])"))))),
        s(:def, :test_rbracket,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "rbracket"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "]")),
              s(:send, nil, :scan,
                s(:str, "rbracket"),
                s(:str, "[]"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "]")),
              s(:send, nil, :scan,
                s(:str, "rbracket"),
                s(:str, "a[1]"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "rbracket"),
                s(:str, "m(%q[])"))))),
        s(:def, :test_lparen,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "lparen"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "(")),
              s(:send, nil, :scan,
                s(:str, "lparen"),
                s(:str, "()"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "(")),
              s(:send, nil, :scan,
                s(:str, "lparen"),
                s(:str, "m()"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "(")),
              s(:send, nil, :scan,
                s(:str, "lparen"),
                s(:str, "m (a)"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "lparen"),
                s(:str, "\"()\""))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "lparen"),
                s(:str, "\"%w()\""))))),
        s(:def, :test_rparen,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "rparen"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, ")")),
              s(:send, nil, :scan,
                s(:str, "rparen"),
                s(:str, "()"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, ")")),
              s(:send, nil, :scan,
                s(:str, "rparen"),
                s(:str, "m()"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, ")")),
              s(:send, nil, :scan,
                s(:str, "rparen"),
                s(:str, "m (a)"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "rparen"),
                s(:str, "\"()\""))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "rparen"),
                s(:str, "\"%w()\""))))),
        s(:def, :test_op,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "|")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "1 | 1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "^")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "1 ^ 1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "&")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "1 & 1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "<=>")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "1 <=> 1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "==")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "1 == 1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "===")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "1 === 1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "=~")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "1 =~ 1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, ">")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "1 > 1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, ">=")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "1 >= 1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "<")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "1 < 1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "<=")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "1 <= 1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:dstr,
                  s(:str, "<"),
                  s(:str, "<"))),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:dstr,
                  s(:str, "1 <"),
                  s(:str, "< 1")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, ">>")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "1 >> 1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "+")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "1 + 1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "-")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "1 - 1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "*")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "1 * 1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "/")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "1 / 1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "%")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "1 % 1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "**")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "1 ** 1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "~")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "~1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "-")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "-a"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "+")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "+a"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "[]")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, ":[]"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "[]=")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, ":[]="))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "&.")),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "a&.f"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "op"),
                s(:str, "`make all`"))))),
        s(:def, :test_symbeg,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "symbeg"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, ":")),
              s(:send, nil, :scan,
                s(:str, "symbeg"),
                s(:str, ":sym"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, ":")),
              s(:send, nil, :scan,
                s(:str, "symbeg"),
                s(:str, "[1,2,3,:sym]"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "symbeg"),
                s(:str, "\":sym\""))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "symbeg"),
                s(:str, "a ? b : c"))))),
        s(:def, :test_tstring_beg,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "tstring_beg"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "\"")),
              s(:send, nil, :scan,
                s(:str, "tstring_beg"),
                s(:str, "\"abcdef\""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "%q[")),
              s(:send, nil, :scan,
                s(:str, "tstring_beg"),
                s(:str, "%q[abcdef]"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "%Q[")),
              s(:send, nil, :scan,
                s(:str, "tstring_beg"),
                s(:str, "%Q[abcdef]"))))),
        s(:def, :test_tstring_content,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "tstring_content"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "abcdef")),
              s(:send, nil, :scan,
                s(:str, "tstring_content"),
                s(:str, "\"abcdef\""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "abcdef")),
              s(:send, nil, :scan,
                s(:str, "tstring_content"),
                s(:str, "%q[abcdef]"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "abcdef")),
              s(:send, nil, :scan,
                s(:str, "tstring_content"),
                s(:str, "%Q[abcdef]"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "abc"),
                s(:str, "def")),
              s(:send, nil, :scan,
                s(:str, "tstring_content"),
                s(:str, "\"abc\#{1}def\""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "sym")),
              s(:send, nil, :scan,
                s(:str, "tstring_content"),
                s(:str, ":\"sym\""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a b c")),
              s(:send, nil, :scan,
                s(:str, "tstring_content"),
                s(:str, ":\"a b c\"")),
              s(:str, "bug#4544")),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a\nb\nc")),
              s(:send, nil, :scan,
                s(:str, "tstring_content"),
                s(:str, ":'a\nb\nc'")),
              s(:str, "bug#4544")))),
        s(:def, :test_tstring_end,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "tstring_end"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "\"")),
              s(:send, nil, :scan,
                s(:str, "tstring_end"),
                s(:str, "\"abcdef\""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "]")),
              s(:send, nil, :scan,
                s(:str, "tstring_end"),
                s(:str, "%q[abcdef]"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "]")),
              s(:send, nil, :scan,
                s(:str, "tstring_end"),
                s(:str, "%Q[abcdef]"))))),
        s(:def, :test_regexp_beg,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "regexp_beg"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "/")),
              s(:send, nil, :scan,
                s(:str, "regexp_beg"),
                s(:str, "/re/"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "%r<")),
              s(:send, nil, :scan,
                s(:str, "regexp_beg"),
                s(:str, "%r<re>"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "regexp_beg"),
                s(:str, "5 / 5"))))),
        s(:def, :test_regexp_end,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "regexp_end"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "/")),
              s(:send, nil, :scan,
                s(:str, "regexp_end"),
                s(:str, "/re/"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, ">")),
              s(:send, nil, :scan,
                s(:str, "regexp_end"),
                s(:str, "%r<re>"))))),
        s(:def, :test_words_beg,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "words_beg"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "%W(")),
              s(:send, nil, :scan,
                s(:str, "words_beg"),
                s(:str, "%W()"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "%W(")),
              s(:send, nil, :scan,
                s(:str, "words_beg"),
                s(:str, "%W(w w w)"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "%W( ")),
              s(:send, nil, :scan,
                s(:str, "words_beg"),
                s(:str, "%W( w w w )"))))),
        s(:def, :test_qwords_beg,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "qwords_beg"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "%w(")),
              s(:send, nil, :scan,
                s(:str, "qwords_beg"),
                s(:str, "%w()"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "%w(")),
              s(:send, nil, :scan,
                s(:str, "qwords_beg"),
                s(:str, "%w(w w w)"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "%w( ")),
              s(:send, nil, :scan,
                s(:str, "qwords_beg"),
                s(:str, "%w( w w w )"))))),
        s(:def, :test_qsymbols_beg,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "qsymbols_beg"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "%i(")),
              s(:send, nil, :scan,
                s(:str, "qsymbols_beg"),
                s(:str, "%i()"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "%i(")),
              s(:send, nil, :scan,
                s(:str, "qsymbols_beg"),
                s(:str, "%i(w w w)"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "%i( ")),
              s(:send, nil, :scan,
                s(:str, "qsymbols_beg"),
                s(:str, "%i( w w w )"))))),
        s(:def, :test_symbols_beg,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "symbols_beg"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "%I(")),
              s(:send, nil, :scan,
                s(:str, "symbols_beg"),
                s(:str, "%I()"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "%I(")),
              s(:send, nil, :scan,
                s(:str, "symbols_beg"),
                s(:str, "%I(w w w)"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "%I( ")),
              s(:send, nil, :scan,
                s(:str, "symbols_beg"),
                s(:str, "%I( w w w )"))))),
        s(:def, :test_words_sep,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "words_sep"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, ")")),
              s(:send, nil, :scan,
                s(:str, "words_sep"),
                s(:str, "%w()"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, " "),
                s(:str, " "),
                s(:str, ")")),
              s(:send, nil, :scan,
                s(:str, "words_sep"),
                s(:str, "%w(w w w)"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, " "),
                s(:str, " "),
                s(:str, " )")),
              s(:send, nil, :scan,
                s(:str, "words_sep"),
                s(:str, "%w( w w w )"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "\n"),
                s(:str, " "),
                s(:str, " )")),
              s(:send, nil, :scan,
                s(:str, "words_sep"),
                s(:str, "%w( w\nw w )"))))),
        s(:def, :test_heredoc_beg,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "heredoc_beg"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "EOS"))),
              s(:send, nil, :scan,
                s(:str, "heredoc_beg"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "EOS\nheredoc\nEOS")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "EOS"))),
              s(:send, nil, :scan,
                s(:str, "heredoc_beg"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "EOS\nheredoc\nEOS\n")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "EOS"))),
              s(:send, nil, :scan,
                s(:str, "heredoc_beg"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "EOS\nheredoc\nEOS \n")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "-EOS"))),
              s(:send, nil, :scan,
                s(:str, "heredoc_beg"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "-EOS\nheredoc\n\tEOS \n")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "\"EOS\""))),
              s(:send, nil, :scan,
                s(:str, "heredoc_beg"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "\"EOS\""),
                  s(:str, "\nheredoc\nEOS")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "'EOS'"))),
              s(:send, nil, :scan,
                s(:str, "heredoc_beg"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "'EOS'\nheredoc\nEOS")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "`EOS`"))),
              s(:send, nil, :scan,
                s(:str, "heredoc_beg"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "`EOS`\nheredoc\nEOS")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "\" \""))),
              s(:send, nil, :scan,
                s(:str, "heredoc_beg"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "\" \""),
                  s(:str, "\nheredoc\nEOS")))))),
        s(:def, :test_tstring_content_HEREDOC,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "tstring_content"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "heredoc\n")),
              s(:send, nil, :scan,
                s(:str, "tstring_content"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "EOS\nheredoc\nEOS")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "heredoc\n")),
              s(:send, nil, :scan,
                s(:str, "tstring_content"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "EOS\nheredoc\nEOS\n")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "here\ndoc \nEOS \n")),
              s(:send, nil, :scan,
                s(:str, "tstring_content"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "EOS\nhere\ndoc \nEOS \n")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "heredoc\n\tEOS \n")),
              s(:send, nil, :scan,
                s(:str, "tstring_content"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "-EOS\nheredoc\n\tEOS \n")))),
            s(:lvasgn, :bug7255,
              s(:str, "[ruby-core:48703]")),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:dstr,
                  s(:str, "there\n"),
                  s(:str, "heredoc")),
                s(:str, "\n")),
              s(:send, nil, :scan,
                s(:str, "tstring_content"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "EOS\n"),
                  s(:str, "there\n"),
                  s(:str, "heredoc\#{foo}\nEOS"))),
              s(:lvar, :bug7255)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:dstr,
                  s(:str, "there\n"),
                  s(:str, "heredoc")),
                s(:str, "\n")),
              s(:send, nil, :scan,
                s(:str, "tstring_content"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "EOS\n"),
                  s(:str, "there\n"),
                  s(:str, "heredoc\#@foo\nEOS"))),
              s(:lvar, :bug7255)),
            s(:lvasgn, :bug10392,
              s(:str, "[ruby-dev:48647] [Bug #10392]")),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, " E\n\n")),
              s(:send, nil, :scan,
                s(:str, "tstring_content"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "'E'\n E\n\n"))),
              s(:lvar, :bug10392)))),
        s(:def, :test_heredoc_end,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "heredoc_end"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "EOS")),
              s(:send, nil, :scan,
                s(:str, "heredoc_end"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "EOS\nEOS"))),
              s(:str, "bug#4543")),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "EOS")),
              s(:send, nil, :scan,
                s(:str, "heredoc_end"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "EOS\nheredoc\nEOS")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "EOS\n")),
              s(:send, nil, :scan,
                s(:str, "heredoc_end"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "EOS\nheredoc\nEOS\n")))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "heredoc_end"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "EOS\nheredoc\nEOS \n")))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "heredoc_end"),
                s(:dstr,
                  s(:str, "<<"),
                  s(:str, "-EOS\nheredoc\n\tEOS \n")))))),
        s(:def, :test_semicolon,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "semicolon"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, ";")),
              s(:send, nil, :scan,
                s(:str, "semicolon"),
                s(:str, ";"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, ";"),
                s(:str, ";")),
              s(:send, nil, :scan,
                s(:str, "semicolon"),
                s(:str, "; ;"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, ";"),
                s(:str, ";"),
                s(:str, ";")),
              s(:send, nil, :scan,
                s(:str, "semicolon"),
                s(:str, "nil;nil;nil;"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, ";"),
                s(:str, ";"),
                s(:str, ";")),
              s(:send, nil, :scan,
                s(:str, "semicolon"),
                s(:str, "nil;nil;nil;nil"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "semicolon"),
                s(:str, "\";\""))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "semicolon"),
                s(:str, "%w(;)"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "semicolon"),
                s(:str, "/;/"))))),
        s(:def, :test_comment,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "comment"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "# comment")),
              s(:send, nil, :scan,
                s(:str, "comment"),
                s(:str, "# comment"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "# comment\n")),
              s(:send, nil, :scan,
                s(:str, "comment"),
                s(:str, "# comment\n"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "# comment\n")),
              s(:send, nil, :scan,
                s(:str, "comment"),
                s(:str, "# comment\n1 + 1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "# comment\n")),
              s(:send, nil, :scan,
                s(:str, "comment"),
                s(:str, "1 + 1 + 1# comment\n1 + 1"))))),
        s(:def, :test_embdoc_beg,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "embdoc_beg"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "=begin\n")),
              s(:send, nil, :scan,
                s(:str, "embdoc_beg"),
                s(:str, "=begin\ndoc\n=end"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "=begin \n")),
              s(:send, nil, :scan,
                s(:str, "embdoc_beg"),
                s(:str, "=begin \ndoc\n=end\n"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "=begin comment\n")),
              s(:send, nil, :scan,
                s(:str, "embdoc_beg"),
                s(:str, "=begin comment\ndoc\n=end\n"))))),
        s(:def, :test_embdoc,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "embdoc"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "doc\n")),
              s(:send, nil, :scan,
                s(:str, "embdoc"),
                s(:str, "=begin\ndoc\n=end"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "doc\n")),
              s(:send, nil, :scan,
                s(:str, "embdoc"),
                s(:str, "=begin\ndoc\n=end\n"))))),
        s(:def, :test_embdoc_end,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "embdoc_end"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "=end")),
              s(:send, nil, :scan,
                s(:str, "embdoc_end"),
                s(:str, "=begin\ndoc\n=end"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "=end\n")),
              s(:send, nil, :scan,
                s(:str, "embdoc_end"),
                s(:str, "=begin\ndoc\n=end\n"))))),
        s(:def, :test_sp,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "sp"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, " ")),
              s(:send, nil, :scan,
                s(:str, "sp"),
                s(:str, " "))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, " ")),
              s(:send, nil, :scan,
                s(:str, "sp"),
                s(:str, " 1"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "sp"),
                s(:str, "\n"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, " ")),
              s(:send, nil, :scan,
                s(:str, "sp"),
                s(:str, " \n"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, " "),
                s(:str, " ")),
              s(:send, nil, :scan,
                s(:str, "sp"),
                s(:str, "1 + 1"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "sp"),
                s(:str, "' '"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "sp"),
                s(:str, "%w(  )"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "sp"),
                s(:str, "%w(  w  )"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "sp"),
                s(:str, "p(/ /)"))))),
        s(:def, :test_nl,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "nl"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "nl"),
                s(:str, "\n"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "\n")),
              s(:send, nil, :scan,
                s(:str, "nl"),
                s(:str, "1 + 1\n"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "\n"),
                s(:str, "\n")),
              s(:send, nil, :scan,
                s(:str, "nl"),
                s(:str, "1 + 1\n2 + 2\n"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "nl"),
                s(:str, "1 +\n1"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "nl"),
                s(:str, "1;\n"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "\r\n")),
              s(:send, nil, :scan,
                s(:str, "nl"),
                s(:str, "1 + 1\r\n"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "nl"),
                s(:str, "1;\r\n"))))),
        s(:def, :test_ignored_nl,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "ignored_nl"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "\n")),
              s(:send, nil, :scan,
                s(:str, "ignored_nl"),
                s(:str, "\n"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "ignored_nl"),
                s(:str, "1 + 1\n"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "ignored_nl"),
                s(:str, "1 + 1\n2 + 2\n"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "\n")),
              s(:send, nil, :scan,
                s(:str, "ignored_nl"),
                s(:str, "1 +\n1"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "\n")),
              s(:send, nil, :scan,
                s(:str, "ignored_nl"),
                s(:str, "1;\n"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "ignored_nl"),
                s(:str, "1 + 1\r\n"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "\r\n")),
              s(:send, nil, :scan,
                s(:str, "ignored_nl"),
                s(:str, "1;\r\n"))))),
        s(:def, :test___end__,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "__end__"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "__END__")),
              s(:send, nil, :scan,
                s(:str, "__end__"),
                s(:str, "__END__"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "__END__\n")),
              s(:send, nil, :scan,
                s(:str, "__end__"),
                s(:str, "__END__\n"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "__END__\n")),
              s(:send,
                s(:const, nil, :Ripper), :tokenize,
                s(:str, "__END__\njunk junk junk"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "__END__")),
              s(:send, nil, :scan,
                s(:str, "__end__"),
                s(:str, "1\n__END__"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "__end__"),
                s(:str, "print('__END__')"))))),
        s(:def, :test_CHAR,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "CHAR"),
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "?a")),
              s(:send, nil, :scan,
                s(:str, "CHAR"),
                s(:str, "?a"))),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :scan,
                s(:str, "CHAR"),
                s(:str, "@ivar"))))),
        s(:def, :test_label,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "foo:")),
            s(:send, nil, :scan,
              s(:str, "label"),
              s(:str, "{foo: 1}")))),
        s(:def, :test_label_end,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "\":")),
            s(:send, nil, :scan,
              s(:str, "label_end"),
              s(:str, "{\"foo-bar\": 1}")))),
        s(:def, :test_tlambda,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "->")),
            s(:send, nil, :scan,
              s(:str, "tlambda"),
              s(:str, "->{}")))),
        s(:def, :test_tlambeg,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "{")),
            s(:send, nil, :scan,
              s(:str, "tlambeg"),
              s(:str, "-> {}")))),
        s(:def, :test_tlambda_arg,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send, nil, :scan,
              s(:str, "tlambda_arg"),
              s(:str, "-> {}")))))), nil))
