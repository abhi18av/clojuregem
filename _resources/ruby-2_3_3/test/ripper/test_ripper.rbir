s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :require,
          s(:str, "ripper")),
        s(:send, nil, :require,
          s(:str, "test/unit")),
        s(:lvasgn, :ripper_test,
          s(:true)),
        s(:module,
          s(:const, nil, :TestRipper), nil)),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:lvar, :ripper_test),
    s(:class,
      s(:const,
        s(:const, nil, :TestRipper), :Ripper),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:ivasgn, :@ripper,
            s(:send,
              s(:const, nil, :Ripper), :new,
              s(:str, "1 + 1")))),
        s(:def, :test_column,
          s(:args),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@ripper), :column))),
        s(:def, :test_encoding,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Encoding), :UTF_8),
              s(:send,
                s(:ivar, :@ripper), :encoding)),
            s(:lvasgn, :ripper,
              s(:send,
                s(:const, nil, :Ripper), :new,
                s(:str, "# coding: iso-8859-15"))),
            s(:send,
              s(:lvar, :ripper), :parse),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Encoding), :ISO_8859_15),
              s(:send,
                s(:lvar, :ripper), :encoding)),
            s(:lvasgn, :ripper,
              s(:send,
                s(:const, nil, :Ripper), :new,
                s(:str, "# -*- coding: iso-8859-15 -*-"))),
            s(:send,
              s(:lvar, :ripper), :parse),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Encoding), :ISO_8859_15),
              s(:send,
                s(:lvar, :ripper), :encoding)))),
        s(:def, :test_end_seen_eh,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@ripper), :parse),
            s(:send, nil, :assert_not_predicate,
              s(:ivar, :@ripper),
              s(:sym, :end_seen?)),
            s(:lvasgn, :ripper,
              s(:send,
                s(:const, nil, :Ripper), :new,
                s(:str, "__END__"))),
            s(:send,
              s(:lvar, :ripper), :parse),
            s(:send, nil, :assert_predicate,
              s(:lvar, :ripper),
              s(:sym, :end_seen?)))),
        s(:def, :test_filename,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "(ripper)"),
              s(:send,
                s(:ivar, :@ripper), :filename)),
            s(:lvasgn, :filename,
              s(:str, "ripper")),
            s(:lvasgn, :ripper,
              s(:send,
                s(:const, nil, :Ripper), :new,
                s(:str, ""),
                s(:lvar, :filename))),
            s(:send,
              s(:lvar, :filename), :clear),
            s(:send, nil, :assert_equal,
              s(:str, "ripper"),
              s(:send,
                s(:lvar, :ripper), :filename)))),
        s(:def, :test_lineno,
          s(:args),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@ripper), :lineno))),
        s(:def, :test_parse,
          s(:args),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@ripper), :parse))),
        s(:def, :test_yydebug,
          s(:args),
          s(:send, nil, :assert_not_predicate,
            s(:ivar, :@ripper),
            s(:sym, :yydebug))),
        s(:def, :test_yydebug_equals,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@ripper), :yydebug=,
              s(:true)),
            s(:send, nil, :assert_predicate,
              s(:ivar, :@ripper),
              s(:sym, :yydebug)))),
        s(:def, :test_regexp_with_option,
          s(:args),
          s(:begin,
            s(:lvasgn, :bug11932,
              s(:str, "[ruby-core:72638] [Bug #11932]")),
            s(:lvasgn, :src,
              s(:send,
                s(:str, "/[\\xC0-\\xF0]/u"), :force_encoding,
                s(:const,
                  s(:const, nil, :Encoding), :UTF_8))),
            s(:lvasgn, :ripper,
              s(:send,
                s(:const, nil, :Ripper), :new,
                s(:lvar, :src))),
            s(:send,
              s(:lvar, :ripper), :parse),
            s(:send, nil, :assert_predicate,
              s(:lvar, :ripper),
              s(:sym, :error?)),
            s(:lvasgn, :src,
              s(:send,
                s(:str, "/[\\xC0-\\xF0]/n"), :force_encoding,
                s(:const,
                  s(:const, nil, :Encoding), :UTF_8))),
            s(:lvasgn, :ripper,
              s(:send,
                s(:const, nil, :Ripper), :new,
                s(:lvar, :src))),
            s(:send,
              s(:lvar, :ripper), :parse),
            s(:send, nil, :assert_not_predicate,
              s(:lvar, :ripper),
              s(:sym, :error?),
              s(:lvar, :bug11932)))))), nil))
