s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :require,
          s(:str, "ripper")),
        s(:send, nil, :require,
          s(:str, "test/unit")),
        s(:lvasgn, :ripper_test,
          s(:true)),
        s(:module,
          s(:const, nil, :TestRipper), nil)),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:lvar, :ripper_test),
    s(:class,
      s(:const,
        s(:const, nil, :TestRipper), :Filter),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:class,
          s(:const, nil, :Filter),
          s(:const,
            s(:const, nil, :Ripper), :Filter),
          s(:def, :on_default,
            s(:args,
              s(:arg, :event),
              s(:arg, :token),
              s(:arg, :data)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :data), :empty?),
                s(:begin,
                  s(:send,
                    s(:lvar, :data), :[]=,
                    s(:sym, :filename),
                    s(:rescue,
                      s(:send, nil, :filename),
                      s(:resbody, nil, nil,
                        s(:nil)), nil)),
                  s(:send,
                    s(:lvar, :data), :[]=,
                    s(:sym, :lineno),
                    s(:send, nil, :lineno)),
                  s(:send,
                    s(:lvar, :data), :[]=,
                    s(:sym, :column),
                    s(:send, nil, :column)),
                  s(:send,
                    s(:lvar, :data), :[]=,
                    s(:sym, :token),
                    s(:lvar, :token))), nil),
              s(:lvar, :data)))),
        s(:def, :filename,
          s(:args),
          s(:send,
            s(:const, nil, :File), :expand_path,
            s(:str, "(string)"))),
        s(:def, :test_filter_filename_unset,
          s(:args),
          s(:begin,
            s(:lvasgn, :data,
              s(:hash)),
            s(:lvasgn, :filter,
              s(:send,
                s(:const, nil, :Filter), :new,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:send, nil, :filename)))),
            s(:send,
              s(:lvar, :filter), :parse,
              s(:lvar, :data)),
            s(:send, nil, :assert_equal,
              s(:str, "-"),
              s(:send,
                s(:lvar, :data), :[],
                s(:sym, :filename)),
              s(:str, "[ruby-dev:37856]")),
            s(:send, nil, :assert_equal,
              s(:str, "-"),
              s(:send,
                s(:lvar, :filter), :filename)))),
        s(:def, :test_filter_filename,
          s(:args),
          s(:begin,
            s(:lvasgn, :data,
              s(:hash)),
            s(:lvasgn, :filter,
              s(:send,
                s(:const, nil, :Filter), :new,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:send, nil, :filename)),
                s(:send, nil, :filename))),
            s(:send, nil, :assert_equal,
              s(:send, nil, :filename),
              s(:send,
                s(:lvar, :filter), :filename)),
            s(:send,
              s(:lvar, :filter), :parse,
              s(:lvar, :data)),
            s(:send, nil, :assert_equal,
              s(:send, nil, :filename),
              s(:send,
                s(:lvar, :data), :[],
                s(:sym, :filename))),
            s(:send, nil, :assert_equal,
              s(:send, nil, :filename),
              s(:send,
                s(:lvar, :filter), :filename)))),
        s(:def, :test_filter_lineno,
          s(:args),
          s(:begin,
            s(:lvasgn, :data,
              s(:hash)),
            s(:lvasgn, :src,
              s(:send,
                s(:const, nil, :File), :read,
                s(:send, nil, :filename))),
            s(:lvasgn, :src_lines,
              s(:send,
                s(:lvar, :src), :count,
                s(:str, "\n"))),
            s(:lvasgn, :filter,
              s(:send,
                s(:const, nil, :Filter), :new,
                s(:lvar, :src))),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :filter), :lineno)),
            s(:send,
              s(:lvar, :filter), :parse,
              s(:lvar, :data)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :data), :[],
                s(:sym, :lineno))),
            s(:send, nil, :assert_equal,
              s(:lvar, :src_lines),
              s(:send,
                s(:lvar, :filter), :lineno)))),
        s(:def, :test_filter_lineno_set,
          s(:args),
          s(:begin,
            s(:lvasgn, :data,
              s(:hash)),
            s(:lvasgn, :src,
              s(:send,
                s(:const, nil, :File), :read,
                s(:send, nil, :filename))),
            s(:lvasgn, :src_lines,
              s(:send,
                s(:lvar, :src), :count,
                s(:str, "\n"))),
            s(:lvasgn, :filter,
              s(:send,
                s(:const, nil, :Filter), :new,
                s(:lvar, :src),
                s(:str, "-"),
                s(:int, 100))),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :filter), :lineno)),
            s(:send,
              s(:lvar, :filter), :parse,
              s(:lvar, :data)),
            s(:send, nil, :assert_equal,
              s(:int, 100),
              s(:send,
                s(:lvar, :data), :[],
                s(:sym, :lineno))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:lvar, :src_lines), :+,
                  s(:int, 100)), :-,
                s(:int, 1)),
              s(:send,
                s(:lvar, :filter), :lineno)))),
        s(:def, :test_filter_column,
          s(:args),
          s(:begin,
            s(:lvasgn, :data,
              s(:hash)),
            s(:lvasgn, :src,
              s(:send,
                s(:const, nil, :File), :read,
                s(:send, nil, :filename))),
            s(:lvasgn, :last_columns,
              s(:send,
                s(:send,
                  s(:lvar, :src), :[],
                  s(:regexp,
                    s(:str, "(.*)\\Z"),
                    s(:regopt))), :size)),
            s(:lvasgn, :filter,
              s(:send,
                s(:const, nil, :Filter), :new,
                s(:lvar, :src))),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:lvar, :filter), :column)),
            s(:send,
              s(:lvar, :filter), :parse,
              s(:lvar, :data)),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :data), :[],
                s(:sym, :column))),
            s(:send, nil, :assert_equal,
              s(:lvar, :last_columns),
              s(:send,
                s(:lvar, :filter), :column)))),
        s(:def, :test_filter_token,
          s(:args),
          s(:begin,
            s(:lvasgn, :data,
              s(:hash)),
            s(:lvasgn, :filter,
              s(:send,
                s(:const, nil, :Filter), :new,
                s(:str, "begin; puts 1; end"))),
            s(:send,
              s(:lvar, :filter), :parse,
              s(:lvar, :data)),
            s(:send, nil, :assert_equal,
              s(:str, "begin"),
              s(:send,
                s(:lvar, :data), :[],
                s(:sym, :token))))))), nil))
