s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "testbase")),
  s(:send, nil, :require,
    s(:str, "bigdecimal/math")),
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:class,
    s(:const, nil, :TestBigDecimal),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :TestBigDecimalBase)),
      s(:casgn, nil, :ROUNDING_MODE_MAP,
        s(:array,
          s(:array,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_UP),
            s(:sym, :up)),
          s(:array,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_DOWN),
            s(:sym, :down)),
          s(:array,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_DOWN),
            s(:sym, :truncate)),
          s(:array,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_HALF_UP),
            s(:sym, :half_up)),
          s(:array,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_HALF_UP),
            s(:sym, :default)),
          s(:array,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_HALF_DOWN),
            s(:sym, :half_down)),
          s(:array,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_HALF_EVEN),
            s(:sym, :half_even)),
          s(:array,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_HALF_EVEN),
            s(:sym, :banker)),
          s(:array,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_CEILING),
            s(:sym, :ceiling)),
          s(:array,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_CEILING),
            s(:sym, :ceil)),
          s(:array,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_FLOOR),
            s(:sym, :floor)))),
      s(:def, :assert_nan,
        s(:args,
          s(:arg, :x)),
        s(:send, nil, :assert,
          s(:send,
            s(:lvar, :x), :nan?),
          s(:dstr,
            s(:str, "Expected "),
            s(:begin,
              s(:send,
                s(:lvar, :x), :inspect)),
            s(:str, " to be NaN")))),
      s(:def, :assert_positive_infinite,
        s(:args,
          s(:arg, :x)),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :x), :infinite?),
            s(:dstr,
              s(:str, "Expected "),
              s(:begin,
                s(:send,
                  s(:lvar, :x), :inspect)),
              s(:str, " to be positive infinite"))),
          s(:send, nil, :assert_operator,
            s(:lvar, :x),
            s(:sym, :>),
            s(:int, 0)))),
      s(:def, :assert_negative_infinite,
        s(:args,
          s(:arg, :x)),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :x), :infinite?),
            s(:dstr,
              s(:str, "Expected "),
              s(:begin,
                s(:send,
                  s(:lvar, :x), :inspect)),
              s(:str, " to be negative infinite"))),
          s(:send, nil, :assert_operator,
            s(:lvar, :x),
            s(:sym, :<),
            s(:int, 0)))),
      s(:def, :assert_positive_zero,
        s(:args,
          s(:arg, :x)),
        s(:send, nil, :assert_equal,
          s(:const,
            s(:const, nil, :BigDecimal), :SIGN_POSITIVE_ZERO),
          s(:send,
            s(:lvar, :x), :sign),
          s(:dstr,
            s(:str, "Expected "),
            s(:begin,
              s(:send,
                s(:lvar, :x), :inspect)),
            s(:str, " to be positive zero")))),
      s(:def, :assert_negative_zero,
        s(:args,
          s(:arg, :x)),
        s(:send, nil, :assert_equal,
          s(:const,
            s(:const, nil, :BigDecimal), :SIGN_NEGATIVE_ZERO),
          s(:send,
            s(:lvar, :x), :sign),
          s(:dstr,
            s(:str, "Expected "),
            s(:begin,
              s(:send,
                s(:lvar, :x), :inspect)),
            s(:str, " to be negative zero")))),
      s(:def, :test_not_equal,
        s(:args),
        s(:send, nil, :assert_not_equal,
          s(:send, nil, :BigDecimal,
            s(:str, "1")),
          s(:send,
            s(:const, nil, :BigDecimal), :allocate))),
      s(:def, :test_global_new,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send, nil, :BigDecimal,
              s(:str, "1"))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send, nil, :BigDecimal,
              s(:str, "1"),
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :BigDecimal,
              s(:str, "1"),
              s(:int, -1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :BigDecimal,
              s(:float, 4.2))),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :BigDecimal,
                s(:float, 4.2)),
              s(:resbody,
                s(:array,
                  s(:const, nil, :ArgumentError)),
                s(:lvasgn, :error),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "Float"),
                    s(:regopt)),
                  s(:send,
                    s(:lvar, :error), :message))), nil)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :BigDecimal,
              s(:send,
                s(:int, 42), :quo,
                s(:int, 7)))),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :BigDecimal,
                s(:send,
                  s(:int, 42), :quo,
                  s(:int, 7))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :ArgumentError)),
                s(:lvasgn, :error),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "Rational"),
                    s(:regopt)),
                  s(:send,
                    s(:lvar, :error), :message))), nil)))),
      s(:def, :test_global_new_with_integer,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "1")),
            s(:send, nil, :BigDecimal,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "-1")),
            s(:send, nil, :BigDecimal,
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s)),
            s(:send, nil, :BigDecimal,
              s(:send,
                s(:int, 2), :**,
                s(:int, 100)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 100)), :-@)), :to_s)),
            s(:send, nil, :BigDecimal,
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 100)), :-@))))),
      s(:def, :test_global_new_with_rational,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "0.333333333333333333333")),
            s(:send, nil, :BigDecimal,
              s(:send,
                s(:int, 1), :quo,
                s(:int, 3)),
              s(:int, 21))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "-0.333333333333333333333")),
            s(:send, nil, :BigDecimal,
              s(:send,
                s(:int, -1), :quo,
                s(:int, 3)),
              s(:int, 21))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :BigDecimal,
              s(:send,
                s(:int, 1), :quo,
                s(:int, 3)))))),
      s(:def, :test_global_new_with_float,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "0.1235")),
            s(:send, nil, :BigDecimal,
              s(:float, 0.1234567),
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "-0.1235")),
            s(:send, nil, :BigDecimal,
              s(:float, -0.1234567),
              s(:int, 4))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :BigDecimal,
              s(:float, 0.1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :BigDecimal,
              s(:float, 0.1),
              s(:send,
                s(:const,
                  s(:const, nil, :Float), :DIG), :+,
                s(:int, 2)))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send, nil, :BigDecimal,
              s(:float, 0.1),
              s(:send,
                s(:const,
                  s(:const, nil, :Float), :DIG), :+,
                s(:int, 1)))),
          s(:lvasgn, :bug9214,
            s(:str, "[ruby-core:58858]")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send, nil, :BigDecimal,
                s(:float, -0.0),
                s(:const,
                  s(:const, nil, :Float), :DIG)), :sign),
            s(:int, -1),
            s(:lvar, :bug9214)))),
      s(:def, :test_global_new_with_big_decimal,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:int, 1)),
            s(:send, nil, :BigDecimal,
              s(:send, nil, :BigDecimal,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "+0")),
            s(:send, nil, :BigDecimal,
              s(:send, nil, :BigDecimal,
                s(:str, "+0")))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "-0")),
            s(:send, nil, :BigDecimal,
              s(:send, nil, :BigDecimal,
                s(:str, "-0")))),
          s(:block,
            s(:send,
              s(:const, nil, :BigDecimal), :save_exception_mode),
            s(:args),
            s(:begin,
              s(:send,
                s(:const, nil, :BigDecimal), :mode,
                s(:const,
                  s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
                s(:false)),
              s(:send,
                s(:const, nil, :BigDecimal), :mode,
                s(:const,
                  s(:const, nil, :BigDecimal), :EXCEPTION_NaN),
                s(:false)),
              s(:send, nil, :assert_positive_infinite,
                s(:send, nil, :BigDecimal,
                  s(:send, nil, :BigDecimal,
                    s(:str, "Infinity")))),
              s(:send, nil, :assert_negative_infinite,
                s(:send, nil, :BigDecimal,
                  s(:send, nil, :BigDecimal,
                    s(:str, "-Infinity")))),
              s(:send, nil, :assert_nan,
                s(:send, nil, :BigDecimal,
                  s(:send, nil, :BigDecimal,
                    s(:str, "NaN")))))))),
      s(:def, :test_global_new_with_tainted_string,
        s(:args),
        s(:send,
          s(:block,
            s(:send,
              s(:const, nil, :Thread), :new),
            s(:args),
            s(:begin,
              s(:gvasgn, :$SAFE,
                s(:int, 1)),
              s(:send, nil, :BigDecimal,
                s(:send,
                  s(:str, "1"), :taint)))), :join)),
      s(:def, :test_new,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1"))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, " 1 "))),
          s(:send, nil, :assert_equal,
            s(:int, 111),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1_1_1_"))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "_1_1_1"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 10), :**,
              s(:begin,
                s(:int, -1))),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1E-1")),
            s(:str, "#4825")),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
            s(:false)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_NaN),
            s(:false)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "Infinity")), :infinite?)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "-Infinity")), :infinite?)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "NaN")), :nan?)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "1E1111111111111111111")), :infinite?)))),
      s(:def, :test_new_with_integer,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "1")),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "-1")),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s)),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:int, 2), :**,
                s(:int, 100)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 100)), :-@)), :to_s)),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 100)), :-@))))),
      s(:def, :test_new_with_rational,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "0.333333333333333333333")),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:int, 1), :quo,
                s(:int, 3)),
              s(:int, 21))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "-0.333333333333333333333")),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:int, -1), :quo,
                s(:int, 3)),
              s(:int, 21))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:int, 1), :quo,
                s(:int, 3)))))),
      s(:def, :test_new_with_float,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "0.1235")),
            s(:send, nil, :BigDecimal,
              s(:float, 0.1234567),
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "-0.1235")),
            s(:send, nil, :BigDecimal,
              s(:float, -0.1234567),
              s(:int, 4))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:float, 0.1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:float, 0.1),
              s(:send,
                s(:const,
                  s(:const, nil, :Float), :DIG), :+,
                s(:int, 2)))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:float, 0.1),
              s(:send,
                s(:const,
                  s(:const, nil, :Float), :DIG), :+,
                s(:int, 1)))))),
      s(:def, :test_new_with_big_decimal,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:int, 1)),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send, nil, :BigDecimal,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "+0")),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send, nil, :BigDecimal,
                s(:str, "+0")))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "-0")),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send, nil, :BigDecimal,
                s(:str, "-0")))),
          s(:block,
            s(:send,
              s(:const, nil, :BigDecimal), :save_exception_mode),
            s(:args),
            s(:begin,
              s(:send,
                s(:const, nil, :BigDecimal), :mode,
                s(:const,
                  s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
                s(:false)),
              s(:send,
                s(:const, nil, :BigDecimal), :mode,
                s(:const,
                  s(:const, nil, :BigDecimal), :EXCEPTION_NaN),
                s(:false)),
              s(:send, nil, :assert_positive_infinite,
                s(:send,
                  s(:const, nil, :BigDecimal), :new,
                  s(:send, nil, :BigDecimal,
                    s(:str, "Infinity")))),
              s(:send, nil, :assert_negative_infinite,
                s(:send,
                  s(:const, nil, :BigDecimal), :new,
                  s(:send, nil, :BigDecimal,
                    s(:str, "-Infinity")))),
              s(:send, nil, :assert_nan,
                s(:send, nil, :BigDecimal,
                  s(:send,
                    s(:const, nil, :BigDecimal), :new,
                    s(:str, "NaN")))))))),
      s(:def, :test_new_with_tainted_string,
        s(:args),
        s(:send,
          s(:block,
            s(:send,
              s(:const, nil, :Thread), :new),
            s(:args),
            s(:begin,
              s(:gvasgn, :$SAFE,
                s(:int, 1)),
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:send,
                  s(:str, "1"), :taint)))), :join)),
      s(:def, :_test_mode,
        s(:args,
          s(:arg, :type)),
        s(:begin,
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:lvar, :type),
            s(:true)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:yield)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:lvar, :type),
            s(:false)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:yield)))),
      s(:def, :test_mode,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :EXCEPTION_ALL),
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :ROUND_MODE),
              s(:int, 256))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :ROUND_MODE),
              s(:sym, :xyzzy))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:int, 61440),
              s(:true))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :saved_mode,
                  s(:send,
                    s(:const, nil, :BigDecimal), :mode,
                    s(:const,
                      s(:const, nil, :BigDecimal), :ROUND_MODE))),
                s(:block,
                  s(:send,
                    s(:array,
                      s(:const,
                        s(:const, nil, :BigDecimal), :ROUND_UP),
                      s(:const,
                        s(:const, nil, :BigDecimal), :ROUND_DOWN),
                      s(:const,
                        s(:const, nil, :BigDecimal), :ROUND_HALF_UP),
                      s(:const,
                        s(:const, nil, :BigDecimal), :ROUND_HALF_DOWN),
                      s(:const,
                        s(:const, nil, :BigDecimal), :ROUND_CEILING),
                      s(:const,
                        s(:const, nil, :BigDecimal), :ROUND_FLOOR),
                      s(:const,
                        s(:const, nil, :BigDecimal), :ROUND_HALF_EVEN)), :each),
                  s(:args,
                    s(:arg, :mode)),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :BigDecimal), :mode,
                      s(:const,
                        s(:const, nil, :BigDecimal), :ROUND_MODE),
                      s(:lvar, :mode)),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :mode),
                      s(:send,
                        s(:const, nil, :BigDecimal), :mode,
                        s(:const,
                          s(:const, nil, :BigDecimal), :ROUND_MODE)))))),
              s(:send,
                s(:const, nil, :BigDecimal), :mode,
                s(:const,
                  s(:const, nil, :BigDecimal), :ROUND_MODE),
                s(:lvar, :saved_mode)))),
          s(:block,
            s(:send,
              s(:const, nil, :BigDecimal), :save_rounding_mode),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :ROUNDING_MODE_MAP), :each),
              s(:args,
                s(:arg, :const),
                s(:arg, :sym)),
              s(:begin,
                s(:send,
                  s(:const, nil, :BigDecimal), :mode,
                  s(:const,
                    s(:const, nil, :BigDecimal), :ROUND_MODE),
                  s(:lvar, :sym)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :const),
                  s(:send,
                    s(:const, nil, :BigDecimal), :mode,
                    s(:const,
                      s(:const, nil, :BigDecimal), :ROUND_MODE)))))))),
      s(:def, :test_thread_local_mode,
        s(:args),
        s(:kwbegin,
          s(:ensure,
            s(:begin,
              s(:lvasgn, :saved_mode,
                s(:send,
                  s(:const, nil, :BigDecimal), :mode,
                  s(:const,
                    s(:const, nil, :BigDecimal), :ROUND_MODE))),
              s(:send,
                s(:const, nil, :BigDecimal), :mode,
                s(:const,
                  s(:const, nil, :BigDecimal), :ROUND_MODE),
                s(:const,
                  s(:const, nil, :BigDecimal), :ROUND_UP)),
              s(:send,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :start),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :BigDecimal), :mode,
                      s(:const,
                        s(:const, nil, :BigDecimal), :ROUND_MODE),
                      s(:const,
                        s(:const, nil, :BigDecimal), :ROUND_HALF_EVEN)),
                    s(:send, nil, :assert_equal,
                      s(:const,
                        s(:const, nil, :BigDecimal), :ROUND_HALF_EVEN),
                      s(:send,
                        s(:const, nil, :BigDecimal), :mode,
                        s(:const,
                          s(:const, nil, :BigDecimal), :ROUND_MODE))))), :join),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :BigDecimal), :ROUND_UP),
                s(:send,
                  s(:const, nil, :BigDecimal), :mode,
                  s(:const,
                    s(:const, nil, :BigDecimal), :ROUND_MODE)))),
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :ROUND_MODE),
              s(:lvar, :saved_mode))))),
      s(:def, :test_save_exception_mode,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
            s(:false)),
          s(:lvasgn, :mode,
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW))),
          s(:block,
            s(:send,
              s(:const, nil, :BigDecimal), :save_exception_mode),
            s(:args),
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:lvar, :mode),
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW))),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_MODE),
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_FLOOR)),
          s(:block,
            s(:send,
              s(:const, nil, :BigDecimal), :save_exception_mode),
            s(:args),
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :ROUND_MODE),
              s(:const,
                s(:const, nil, :BigDecimal), :ROUND_HALF_EVEN))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_HALF_EVEN),
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :ROUND_MODE))),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:block,
              s(:send,
                s(:const, nil, :BigDecimal), :save_exception_mode),
              s(:args),
              s(:int, 42))))),
      s(:def, :test_save_rounding_mode,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_MODE),
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_FLOOR)),
          s(:block,
            s(:send,
              s(:const, nil, :BigDecimal), :save_rounding_mode),
            s(:args),
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :ROUND_MODE),
              s(:const,
                s(:const, nil, :BigDecimal), :ROUND_HALF_EVEN))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_FLOOR),
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :ROUND_MODE))),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:block,
              s(:send,
                s(:const, nil, :BigDecimal), :save_rounding_mode),
              s(:args),
              s(:int, 42))))),
      s(:def, :test_save_limit,
        s(:args),
        s(:begin,
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :old,
                  s(:send,
                    s(:const, nil, :BigDecimal), :limit)),
                s(:send,
                  s(:const, nil, :BigDecimal), :limit,
                  s(:int, 100)),
                s(:block,
                  s(:send,
                    s(:const, nil, :BigDecimal), :save_limit),
                  s(:args),
                  s(:send,
                    s(:const, nil, :BigDecimal), :limit,
                    s(:int, 200))),
                s(:send, nil, :assert_equal,
                  s(:int, 100),
                  s(:send,
                    s(:const, nil, :BigDecimal), :limit))),
              s(:send,
                s(:const, nil, :BigDecimal), :limit,
                s(:lvar, :old)))),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:block,
              s(:send,
                s(:const, nil, :BigDecimal), :save_limit),
              s(:args),
              s(:int, 42))))),
      s(:def, :test_exception_nan,
        s(:args),
        s(:block,
          s(:send, nil, :_test_mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_NaN)),
          s(:args),
          s(:send,
            s(:const, nil, :BigDecimal), :new,
            s(:str, "NaN")))),
      s(:def, :test_exception_infinity,
        s(:args),
        s(:block,
          s(:send, nil, :_test_mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_INFINITY)),
          s(:args),
          s(:send,
            s(:const, nil, :BigDecimal), :new,
            s(:str, "Infinity")))),
      s(:def, :test_exception_underflow,
        s(:args),
        s(:block,
          s(:send, nil, :_test_mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_UNDERFLOW)),
          s(:args),
          s(:begin,
            s(:lvasgn, :x,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "0.1"))),
            s(:block,
              s(:send,
                s(:int, 100), :times),
              s(:args),
              s(:op_asgn,
                s(:lvasgn, :x), :*,
                s(:lvar, :x)))))),
      s(:def, :test_exception_overflow,
        s(:args),
        s(:block,
          s(:send, nil, :_test_mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW)),
          s(:args),
          s(:begin,
            s(:lvasgn, :x,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "10"))),
            s(:block,
              s(:send,
                s(:int, 100), :times),
              s(:args),
              s(:op_asgn,
                s(:lvasgn, :x), :*,
                s(:lvar, :x)))))),
      s(:def, :test_exception_zerodivide,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
            s(:false)),
          s(:block,
            s(:send, nil, :_test_mode,
              s(:const,
                s(:const, nil, :BigDecimal), :EXCEPTION_ZERODIVIDE)),
            s(:args),
            s(:send,
              s(:int, 1), :/,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "0")))),
          s(:block,
            s(:send, nil, :_test_mode,
              s(:const,
                s(:const, nil, :BigDecimal), :EXCEPTION_ZERODIVIDE)),
            s(:args),
            s(:send,
              s(:int, -1), :/,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "0")))))),
      s(:def, :test_round_up,
        s(:args),
        s(:begin,
          s(:lvasgn, :n4,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "4"))),
          s(:lvasgn, :n5,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "5"))),
          s(:lvasgn, :n6,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "6"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :m4),
              s(:lvasgn, :m5),
              s(:lvasgn, :m6)),
            s(:array,
              s(:send,
                s(:lvar, :n4), :-@),
              s(:send,
                s(:lvar, :n5), :-@),
              s(:send,
                s(:lvar, :n6), :-@))),
          s(:lvasgn, :n2h,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "2.5"))),
          s(:lvasgn, :n3h,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "3.5"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :m2h),
              s(:lvasgn, :m3h)),
            s(:array,
              s(:send,
                s(:lvar, :n2h), :-@),
              s(:send,
                s(:lvar, :n3h), :-@))),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_MODE),
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_UP)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n4),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :n4), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :n5),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :n5), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :n6),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :n6), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m4),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :m4), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m5),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :m5), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m6),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :m6), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :n2h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :n3h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, -3),
            s(:send,
              s(:lvar, :m2h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, -4),
            s(:send,
              s(:lvar, :m3h), :round)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_MODE),
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_DOWN)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n4),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :n4), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :n5),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :n5), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :n6),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :n6), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m4),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :m4), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m5),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :m5), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m6),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :m6), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :n2h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :n3h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:lvar, :m2h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, -3),
            s(:send,
              s(:lvar, :m3h), :round)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_MODE),
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_HALF_UP)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n4),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :n4), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :n5),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :n5), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :n6),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :n6), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m4),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :m4), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m5),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :m5), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m6),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :m6), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :n2h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :n3h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, -3),
            s(:send,
              s(:lvar, :m2h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, -4),
            s(:send,
              s(:lvar, :m3h), :round)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_MODE),
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_HALF_DOWN)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n4),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :n4), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :n5),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :n5), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :n6),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :n6), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m4),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :m4), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m5),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :m5), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m6),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :m6), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :n2h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :n3h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:lvar, :m2h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, -3),
            s(:send,
              s(:lvar, :m3h), :round)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_MODE),
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_HALF_EVEN)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n4),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :n4), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :n5),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :n5), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :n6),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :n6), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m4),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :m4), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m5),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :m5), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m6),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :m6), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :n2h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :n3h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:lvar, :m2h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, -4),
            s(:send,
              s(:lvar, :m3h), :round)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_MODE),
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_CEILING)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n4),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :n4), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :n5),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :n5), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :n6),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :n6), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m4),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :m4), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m5),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :m5), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m6),
            s(:sym, :<),
            s(:send,
              s(:send,
                s(:lvar, :m6), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :n2h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :n3h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:lvar, :m2h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, -3),
            s(:send,
              s(:lvar, :m3h), :round)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_MODE),
            s(:const,
              s(:const, nil, :BigDecimal), :ROUND_FLOOR)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n4),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :n4), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :n5),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :n5), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :n6),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :n6), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m4),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :m4), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m5),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :m5), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_operator,
            s(:lvar, :m6),
            s(:sym, :>),
            s(:send,
              s(:send,
                s(:lvar, :m6), :/,
                s(:int, 9)), :*,
              s(:int, 9))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :n2h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :n3h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, -3),
            s(:send,
              s(:lvar, :m2h), :round)),
          s(:send, nil, :assert_equal,
            s(:int, -4),
            s(:send,
              s(:lvar, :m3h), :round)))),
      s(:def, :test_zero_p,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "0")), :zero?)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "1")), :zero?)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "0E200000000000000")), :zero?)))),
      s(:def, :test_nonzero_p,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "0")), :nonzero?)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1")),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "1")), :nonzero?)))),
      s(:def, :test_double_fig,
        s(:args),
        s(:send, nil, :assert_kind_of,
          s(:const, nil, :Integer),
          s(:send,
            s(:const, nil, :BigDecimal), :double_fig))),
      s(:def, :test_cmp,
        s(:args),
        s(:begin,
          s(:lvasgn, :n1,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1"))),
          s(:lvasgn, :n2,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "2"))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :n1), :<=>,
              s(:lvar, :n1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :n2), :<=>,
              s(:lvar, :n1))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :n1), :<=>,
              s(:lvar, :n2))),
          s(:send, nil, :assert_operator,
            s(:lvar, :n1),
            s(:sym, :==),
            s(:lvar, :n1)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n1),
            s(:sym, :!=),
            s(:lvar, :n2)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n1),
            s(:sym, :<),
            s(:lvar, :n2)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n1),
            s(:sym, :<=),
            s(:lvar, :n1)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n1),
            s(:sym, :<=),
            s(:lvar, :n2)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n2),
            s(:sym, :>),
            s(:lvar, :n1)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n2),
            s(:sym, :>=),
            s(:lvar, :n1)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n1),
            s(:sym, :>=),
            s(:lvar, :n1)),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "-0")),
            s(:sym, :==),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "0"))),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "0")),
            s(:sym, :<),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1"))),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1")),
            s(:sym, :>),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "0"))),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1")),
            s(:sym, :>),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "-1"))),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "-1")),
            s(:sym, :<),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1"))),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s)),
            s(:sym, :>),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1"))),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1")),
            s(:sym, :<),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s))),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
            s(:false)),
          s(:lvasgn, :inf,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "Infinity"))),
          s(:send, nil, :assert_operator,
            s(:lvar, :inf),
            s(:sym, :>),
            s(:int, 1)),
          s(:send, nil, :assert_operator,
            s(:int, 1),
            s(:sym, :<),
            s(:lvar, :inf)),
          s(:send, nil, :assert_operator,
            s(:send, nil, :BigDecimal,
              s(:str, "1E-1")),
            s(:sym, :==),
            s(:send,
              s(:int, 10), :**,
              s(:begin,
                s(:int, -1))),
            s(:str, "#4825")),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send, nil, :BigDecimal,
                s(:str, "1E-1")), :<=>,
              s(:send,
                s(:int, 10), :**,
                s(:begin,
                  s(:int, -1)))),
            s(:str, "#4825")))),
      s(:def, :test_cmp_issue9192,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9192,
            s(:str, "[ruby-core:58756] [#9192]")),
          s(:lvasgn, :operators,
            s(:hash,
              s(:pair,
                s(:sym, :==),
                s(:sym, :==)),
              s(:pair,
                s(:sym, :<),
                s(:sym, :>)),
              s(:pair,
                s(:sym, :>),
                s(:sym, :<)),
              s(:pair,
                s(:sym, :<=),
                s(:sym, :>=)),
              s(:pair,
                s(:sym, :>=),
                s(:sym, :<=)))),
          s(:block,
            s(:send,
              s(:int, 5), :upto,
              s(:int, 8)),
            s(:args,
              s(:arg, :i)),
            s(:begin,
              s(:lvasgn, :s,
                s(:dstr,
                  s(:str, "706.0"),
                  s(:begin,
                    s(:lvar, :i)))),
              s(:lvasgn, :d,
                s(:send, nil, :BigDecimal,
                  s(:lvar, :s))),
              s(:lvasgn, :f,
                s(:send,
                  s(:lvar, :s), :to_f)),
              s(:block,
                s(:send,
                  s(:lvar, :operators), :each),
                s(:args,
                  s(:arg, :op),
                  s(:arg, :inv)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :d), :send,
                    s(:lvar, :op),
                    s(:lvar, :f)),
                  s(:send,
                    s(:lvar, :f), :send,
                    s(:lvar, :inv),
                    s(:lvar, :d)),
                  s(:dstr,
                    s(:str, "(BigDecimal("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :s), :inspect)),
                    s(:str, ") "),
                    s(:begin,
                      s(:lvar, :op)),
                    s(:str, " "),
                    s(:begin,
                      s(:lvar, :s)),
                    s(:str, ") and ("),
                    s(:begin,
                      s(:lvar, :s)),
                    s(:str, " "),
                    s(:begin,
                      s(:lvar, :inv)),
                    s(:str, " BigDecimal("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :s), :inspect)),
                    s(:str, ")) is different "),
                    s(:begin,
                      s(:lvar, :bug9192))))))))),
      s(:def, :test_cmp_nan,
        s(:args),
        s(:begin,
          s(:lvasgn, :n1,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1"))),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_NaN),
            s(:false)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "NaN")), :<=>,
              s(:lvar, :n1))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "NaN")), :>,
              s(:lvar, :n1))))),
      s(:def, :test_cmp_float_nan,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:nil),
          s(:send,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1")), :<=>,
            s(:const,
              s(:const, nil, :Float), :NAN)))),
      s(:def, :test_cmp_float_pos_inf,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:int, -1),
          s(:send,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1")), :<=>,
            s(:const,
              s(:const, nil, :Float), :INFINITY)))),
      s(:def, :test_cmp_float_neg_inf,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:int, 1),
          s(:send,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1")), :<=>,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :INFINITY), :-@)))),
      s(:def, :test_cmp_failing_coercion,
        s(:args),
        s(:begin,
          s(:lvasgn, :n1,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1"))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :n1), :<=>,
              s(:nil))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :n1), :>,
              s(:nil))))),
      s(:def, :test_cmp_coerce,
        s(:args),
        s(:begin,
          s(:lvasgn, :n1,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1"))),
          s(:lvasgn, :n2,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "2"))),
          s(:lvasgn, :o1,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o1), :coerce,
            s(:args,
              s(:arg, :x)),
            s(:array,
              s(:lvar, :x),
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "1")))),
          s(:lvasgn, :o2,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o2), :coerce,
            s(:args,
              s(:arg, :x)),
            s(:array,
              s(:lvar, :x),
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "2")))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :n1), :<=>,
              s(:lvar, :o1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :n2), :<=>,
              s(:lvar, :o1))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :n1), :<=>,
              s(:lvar, :o2))),
          s(:send, nil, :assert_operator,
            s(:lvar, :n1),
            s(:sym, :==),
            s(:lvar, :o1)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n1),
            s(:sym, :!=),
            s(:lvar, :o2)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n1),
            s(:sym, :<),
            s(:lvar, :o2)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n1),
            s(:sym, :<=),
            s(:lvar, :o1)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n1),
            s(:sym, :<=),
            s(:lvar, :o2)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n2),
            s(:sym, :>),
            s(:lvar, :o1)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n2),
            s(:sym, :>=),
            s(:lvar, :o1)),
          s(:send, nil, :assert_operator,
            s(:lvar, :n1),
            s(:sym, :>=),
            s(:int, 1)))),
      s(:def, :test_cmp_bignum,
        s(:args),
        s(:send, nil, :assert_operator,
          s(:send,
            s(:const, nil, :BigDecimal), :new,
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 100))), :to_s)),
          s(:sym, :==),
          s(:send,
            s(:int, 2), :**,
            s(:int, 100)))),
      s(:def, :test_cmp_data,
        s(:args),
        s(:begin,
          s(:lvasgn, :d,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:defs,
            s(:lvar, :d), :coerce,
            s(:args,
              s(:arg, :x)),
            s(:array,
              s(:lvar, :x),
              s(:lvar, :x))),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s)),
            s(:sym, :==),
            s(:lvar, :d)))),
      s(:def, :test_precs,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "1")), :precs)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Array),
            s(:lvar, :a)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :a), :size)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:send,
              s(:lvar, :a), :[],
              s(:int, 0))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:send,
              s(:lvar, :a), :[],
              s(:int, 1))))),
      s(:def, :test_hash,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:array)),
          s(:lvasgn, :b,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1"))),
          s(:block,
            s(:send,
              s(:int, 10), :times),
            s(:args),
            s(:send,
              s(:lvar, :a), :<<,
              s(:op_asgn,
                s(:lvasgn, :b), :*,
                s(:int, 10)))),
          s(:lvasgn, :h,
            s(:hash)),
          s(:block,
            s(:send,
              s(:lvar, :a), :each_with_index),
            s(:args,
              s(:arg, :x),
              s(:arg, :i)),
            s(:send,
              s(:lvar, :h), :[]=,
              s(:lvar, :x),
              s(:lvar, :i))),
          s(:block,
            s(:send,
              s(:lvar, :a), :each_with_index),
            s(:args,
              s(:arg, :x),
              s(:arg, :i)),
            s(:send, nil, :assert_equal,
              s(:lvar, :i),
              s(:send,
                s(:lvar, :h), :[],
                s(:lvar, :x)))))),
      s(:def, :test_marshal,
        s(:args),
        s(:begin,
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:send, nil, :BigDecimal,
                s(:str, "1"),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "1"),
              s(:int, 1)),
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:lvar, :s))),
          s(:lvasgn, :s,
            s(:block,
              s(:send,
                s(:lvar, :s), :gsub,
                s(:regexp,
                  s(:str, "BigDecimal.*\\z"),
                  s(:regopt, :m))),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :gsub,
                s(:regexp,
                  s(:str, "\\d"),
                  s(:regopt, :m)),
                s(:str, "-")))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:lvar, :s))))),
      s(:def, :test_finite_infinite_nan,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
            s(:false)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_ZERODIVIDE),
            s(:false)),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "0"))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :x), :finite?)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :x), :infinite?)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :x), :nan?)),
          s(:lvasgn, :y,
            s(:send,
              s(:int, 1), :/,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :y), :finite?)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :y), :infinite?)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :y), :nan?)),
          s(:lvasgn, :y,
            s(:send,
              s(:int, -1), :/,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :y), :finite?)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :y), :infinite?)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :y), :nan?)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_NaN),
            s(:false)),
          s(:lvasgn, :y,
            s(:send,
              s(:int, 0), :/,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :y), :finite?)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :y), :infinite?)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :y), :nan?)))),
      s(:def, :test_to_i,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
            s(:false)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_NaN),
            s(:false)),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "0"))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:send,
              s(:lvar, :x), :to_i)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :x), :to_i)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 1), :/,
                  s(:lvar, :x))), :to_i)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, -1), :/,
                  s(:lvar, :x))), :to_i)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 0), :/,
                  s(:lvar, :x))), :to_i)),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1"))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :to_i)),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 2), :**,
              s(:int, 100)),
            s(:send,
              s(:lvar, :x), :to_i)))),
      s(:def, :test_to_f,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
            s(:false)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_NaN),
            s(:false)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_ZERODIVIDE),
            s(:false)),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "0"))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Float),
            s(:send,
              s(:lvar, :x), :to_f)),
          s(:send, nil, :assert_equal,
            s(:float, 0.0),
            s(:send,
              s(:lvar, :x), :to_f)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:float, 1.0), :/,
              s(:float, 0.0)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 1), :/,
                  s(:lvar, :x))), :to_f)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:float, -1.0), :/,
              s(:float, 0.0)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, -1), :/,
                  s(:lvar, :x))), :to_f)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 0), :/,
                    s(:lvar, :x))), :to_f), :nan?)),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1"))),
          s(:send, nil, :assert_equal,
            s(:float, 1.0),
            s(:send,
              s(:lvar, :x), :to_f)),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 100))), :to_f),
            s(:send,
              s(:lvar, :x), :to_f)),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:str, "1"), :+,
                s(:send,
                  s(:str, "0"), :*,
                  s(:int, 10000))))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "-0")), :to_f)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
            s(:true)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send,
              s(:lvar, :x), :to_f)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
            s(:false)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Float),
            s(:send,
              s(:lvar, :x), :to_f)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Float),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :x), :-@)), :to_f)),
          s(:lvasgn, :bug6944,
            s(:str, "[ruby-core:47342]")),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_UNDERFLOW),
            s(:true)),
          s(:lvasgn, :x,
            s(:dstr,
              s(:str, "1e"),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :Float), :MIN_10_EXP), :-,
                  s(:send,
                    s(:int, 2), :*,
                    s(:const,
                      s(:const, nil, :Float), :DIG)))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError),
              s(:lvar, :x)),
            s(:args),
            s(:send,
              s(:send, nil, :BigDecimal,
                s(:lvar, :x)), :to_f)),
          s(:lvasgn, :x,
            s(:dstr,
              s(:str, "-"),
              s(:begin,
                s(:lvar, :x)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError),
              s(:lvar, :x)),
            s(:args),
            s(:send,
              s(:send, nil, :BigDecimal,
                s(:lvar, :x)), :to_f)),
          s(:lvasgn, :x,
            s(:dstr,
              s(:str, "1e"),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :Float), :MIN_10_EXP), :-,
                  s(:const,
                    s(:const, nil, :Float), :DIG))))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :FloatDomainError),
              s(:lvar, :x)),
            s(:args),
            s(:send, nil, :assert_in_delta,
              s(:float, 0.0),
              s(:send,
                s(:send, nil, :BigDecimal,
                  s(:lvar, :x)), :to_f),
              s(:send,
                s(:int, 10), :**,
                s(:const,
                  s(:const, nil, :Float), :MIN_10_EXP)),
              s(:lvar, :bug6944))),
          s(:lvasgn, :x,
            s(:dstr,
              s(:str, "-"),
              s(:begin,
                s(:lvar, :x)))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :FloatDomainError),
              s(:lvar, :x)),
            s(:args),
            s(:send, nil, :assert_in_delta,
              s(:float, 0.0),
              s(:send,
                s(:send, nil, :BigDecimal,
                  s(:lvar, :x)), :to_f),
              s(:send,
                s(:int, 10), :**,
                s(:const,
                  s(:const, nil, :Float), :MIN_10_EXP)),
              s(:lvar, :bug6944))),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_UNDERFLOW),
            s(:false)),
          s(:lvasgn, :x,
            s(:dstr,
              s(:str, "1e"),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :Float), :MIN_10_EXP), :-,
                  s(:send,
                    s(:int, 2), :*,
                    s(:const,
                      s(:const, nil, :Float), :DIG)))))),
          s(:send, nil, :assert_equal,
            s(:float, 0.0),
            s(:send,
              s(:send, nil, :BigDecimal,
                s(:lvar, :x)), :to_f),
            s(:lvar, :x)),
          s(:lvasgn, :x,
            s(:dstr,
              s(:str, "-"),
              s(:begin,
                s(:lvar, :x)))),
          s(:send, nil, :assert_equal,
            s(:float, -0.0),
            s(:send,
              s(:send, nil, :BigDecimal,
                s(:lvar, :x)), :to_f),
            s(:lvar, :x)),
          s(:lvasgn, :x,
            s(:dstr,
              s(:str, "1e"),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :Float), :MIN_10_EXP), :-,
                  s(:const,
                    s(:const, nil, :Float), :DIG))))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :FloatDomainError),
              s(:lvar, :x)),
            s(:args),
            s(:send, nil, :assert_in_delta,
              s(:float, 0.0),
              s(:send,
                s(:send, nil, :BigDecimal,
                  s(:lvar, :x)), :to_f),
              s(:send,
                s(:int, 10), :**,
                s(:const,
                  s(:const, nil, :Float), :MIN_10_EXP)),
              s(:lvar, :bug6944))),
          s(:lvasgn, :x,
            s(:dstr,
              s(:str, "-"),
              s(:begin,
                s(:lvar, :x)))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :FloatDomainError),
              s(:lvar, :x)),
            s(:args),
            s(:send, nil, :assert_in_delta,
              s(:float, 0.0),
              s(:send,
                s(:send, nil, :BigDecimal,
                  s(:lvar, :x)), :to_f),
              s(:send,
                s(:int, 10), :**,
                s(:const,
                  s(:const, nil, :Float), :MIN_10_EXP)),
              s(:lvar, :bug6944))),
          s(:send, nil, :assert_equal,
            s(:float, 0.0),
            s(:send,
              s(:send, nil, :BigDecimal,
                s(:str, "9e-325")), :to_f)),
          s(:send, nil, :assert_equal,
            s(:float, 0.0),
            s(:send,
              s(:send, nil, :BigDecimal,
                s(:str, "10e-325")), :to_f)),
          s(:send, nil, :assert_equal,
            s(:float, -0.0),
            s(:send,
              s(:send, nil, :BigDecimal,
                s(:str, "-9e-325")), :to_f)),
          s(:send, nil, :assert_equal,
            s(:float, -0.0),
            s(:send,
              s(:send, nil, :BigDecimal,
                s(:str, "-10e-325")), :to_f)))),
      s(:def, :test_coerce,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :a),
              s(:lvasgn, :b)),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "1")), :coerce,
              s(:float, 1.0))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :BigDecimal),
            s(:lvar, :a)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :BigDecimal),
            s(:lvar, :b)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:int, 1), :+,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "1"))),
            s(:str, "[ruby-core:25697]")),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :a),
              s(:lvasgn, :b)),
            s(:send,
              s(:send, nil, :BigDecimal,
                s(:str, "1")), :coerce,
              s(:send,
                s(:int, 1), :quo,
                s(:int, 10)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "0.1")),
            s(:lvar, :a),
            s(:str, "[ruby-core:34318]")),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :a),
              s(:lvasgn, :b)),
            s(:send,
              s(:send, nil, :BigDecimal,
                s(:str, "0.11111")), :coerce,
              s(:send,
                s(:int, 1), :quo,
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:send,
                s(:str, "0."), :+,
                s(:send,
                  s(:str, "3"), :*,
                  s(:send,
                    s(:send,
                      s(:lvar, :a), :precs), :[],
                    s(:int, 0))))),
            s(:lvar, :a)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :TypeError),
              s(:str, "#7176")),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "1")), :+,
              s(:send, nil, :Rational,
                s(:int, 1)))))),
      s(:def, :test_uplus,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :x),
            s(:send,
              s(:lvar, :x), :send,
              s(:sym, :+@))))),
      s(:def, :test_add,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "2")),
            s(:send,
              s(:lvar, :x), :+,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "0")), :+,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :+,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_POSITIVE_ZERO),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :BigDecimal), :new,
                    s(:str, "0")), :+,
                  s(:int, 0))), :sign)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_POSITIVE_ZERO),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :BigDecimal), :new,
                    s(:str, "-0")), :+,
                  s(:int, 0))), :sign)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_NEGATIVE_ZERO),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :BigDecimal), :new,
                    s(:str, "-0")), :+,
                  s(:send,
                    s(:const, nil, :BigDecimal), :new,
                    s(:str, "-0")))), :sign)),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 100)), :+,
                    s(:int, 1))), :to_s)),
            s(:send,
              s(:lvar, :x), :+,
              s(:int, 1))))),
      s(:def, :test_sub,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "0")),
            s(:send,
              s(:lvar, :x), :-,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "0")), :-,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :-,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_POSITIVE_ZERO),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :BigDecimal), :new,
                    s(:str, "0")), :-,
                  s(:int, 0))), :sign)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_NEGATIVE_ZERO),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :BigDecimal), :new,
                    s(:str, "-0")), :-,
                  s(:int, 0))), :sign)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_POSITIVE_ZERO),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :BigDecimal), :new,
                    s(:str, "-0")), :-,
                  s(:send,
                    s(:const, nil, :BigDecimal), :new,
                    s(:str, "-0")))), :sign)),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 100)), :-,
                    s(:int, 1))), :to_s)),
            s(:send,
              s(:lvar, :x), :-,
              s(:int, 1))))),
      s(:def, :test_sub_with_float,
        s(:args),
        s(:send, nil, :assert_kind_of,
          s(:const, nil, :BigDecimal),
          s(:send,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "3")), :-,
            s(:float, 1.0)))),
      s(:def, :test_sub_with_rational,
        s(:args),
        s(:send, nil, :assert_kind_of,
          s(:const, nil, :BigDecimal),
          s(:send,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "3")), :-,
            s(:send,
              s(:int, 1), :quo,
              s(:int, 3))))),
      s(:def, :test_mult,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 100)), :*,
                    s(:int, 3))), :to_s)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :x), :*,
                  s(:int, 3))), :to_i)),
          s(:send, nil, :assert_equal,
            s(:lvar, :x),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :x), :*,
                  s(:int, 1))), :to_i)),
          s(:send, nil, :assert_equal,
            s(:lvar, :x),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send, nil, :BigDecimal,
                    s(:str, "1")), :*,
                  s(:lvar, :x))), :to_i)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 200))), :to_s)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :x), :*,
                  s(:lvar, :x))), :to_i)))),
      s(:def, :test_mult_with_float,
        s(:args),
        s(:send, nil, :assert_kind_of,
          s(:const, nil, :BigDecimal),
          s(:send,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "3")), :*,
            s(:float, 1.5)))),
      s(:def, :test_mult_with_rational,
        s(:args),
        s(:send, nil, :assert_kind_of,
          s(:const, nil, :BigDecimal),
          s(:send,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "3")), :*,
            s(:send,
              s(:int, 1), :quo,
              s(:int, 3))))),
      s(:def, :test_mult_with_nil,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send,
            s(:send, nil, :BigDecimal,
              s(:str, "1.1")), :*,
            s(:nil)))),
      s(:def, :test_div,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 100)), :/,
                    s(:int, 3))), :to_s)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :x), :/,
                  s(:int, 3))), :to_i)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_POSITIVE_ZERO),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :BigDecimal), :new,
                    s(:str, "0")), :/,
                  s(:int, 1))), :sign)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_NEGATIVE_ZERO),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :BigDecimal), :new,
                    s(:str, "-0")), :/,
                  s(:int, 1))), :sign)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "2")), :/,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "2")), :/,
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "1486.868686869")),
            s(:send,
              s(:send, nil, :BigDecimal,
                s(:str, "1472.0")), :/,
              s(:send, nil, :BigDecimal,
                s(:str, "0.99"))),
            s(:str, "[ruby-core:59365] [#9316]")),
          s(:send, nil, :assert_equal,
            s(:float, 4.124045235),
            s(:send,
              s(:send, nil, :BigDecimal,
                s(:str, "0.9932")), :/,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:int, 700), :*,
                    s(:send, nil, :BigDecimal,
                      s(:str, "0.344045"))), :/,
                  s(:send, nil, :BigDecimal,
                    s(:str, "1000.0"))))),
            s(:str, "[#9305]")))),
      s(:def, :test_div_with_float,
        s(:args),
        s(:send, nil, :assert_kind_of,
          s(:const, nil, :BigDecimal),
          s(:send,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "3")), :/,
            s(:float, 1.5)))),
      s(:def, :test_div_with_rational,
        s(:args),
        s(:send, nil, :assert_kind_of,
          s(:const, nil, :BigDecimal),
          s(:send,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "3")), :/,
            s(:send,
              s(:int, 1), :quo,
              s(:int, 3))))),
      s(:def, :test_mod,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :%,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :x), :-@)), :%,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, -2),
            s(:send,
              s(:lvar, :x), :%,
              s(:int, -3))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :x), :-@)), :%,
              s(:int, -3))))),
      s(:def, :test_mod_with_float,
        s(:args),
        s(:send, nil, :assert_kind_of,
          s(:const, nil, :BigDecimal),
          s(:send,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "3")), :%,
            s(:float, 1.5)))),
      s(:def, :test_mod_with_rational,
        s(:args),
        s(:send, nil, :assert_kind_of,
          s(:const, nil, :BigDecimal),
          s(:send,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "3")), :%,
            s(:send,
              s(:int, 1), :quo,
              s(:int, 3))))),
      s(:def, :test_remainder,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :remainder,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :x), :-@)), :remainder,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :remainder,
              s(:int, -3))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :x), :-@)), :remainder,
              s(:int, -3))))),
      s(:def, :test_remainder_with_float,
        s(:args),
        s(:send, nil, :assert_kind_of,
          s(:const, nil, :BigDecimal),
          s(:send,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "3")), :remainder,
            s(:float, 1.5)))),
      s(:def, :test_remainder_with_rational,
        s(:args),
        s(:send, nil, :assert_kind_of,
          s(:const, nil, :BigDecimal),
          s(:send,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "3")), :remainder,
            s(:send,
              s(:int, 1), :quo,
              s(:int, 3))))),
      s(:def, :test_divmod,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:lvar, :x), :/,
                    s(:int, 3))), :floor),
              s(:int, 1)),
            s(:send,
              s(:lvar, :x), :divmod,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :x), :-@), :/,
                    s(:int, 3))), :floor),
              s(:int, 2)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :x), :-@)), :divmod,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:int, 0)),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "0")), :divmod,
              s(:int, 2))),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_NaN),
            s(:false)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ZeroDivisionError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "0")), :divmod,
              s(:int, 0))))),
      s(:def, :test_add_bigdecimal,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s))),
          s(:send, nil, :assert_equal,
            s(:int, 3000000000000000000000000000000),
            s(:send,
              s(:lvar, :x), :add,
              s(:lvar, :x),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 2500000000000000000000000000000),
            s(:send,
              s(:lvar, :x), :add,
              s(:lvar, :x),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 2540000000000000000000000000000),
            s(:send,
              s(:lvar, :x), :add,
              s(:lvar, :x),
              s(:int, 3))))),
      s(:def, :test_sub_bigdecimal,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s))),
          s(:send, nil, :assert_equal,
            s(:int, 1000000000000000000000000000000),
            s(:send,
              s(:lvar, :x), :sub,
              s(:int, 1),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1300000000000000000000000000000),
            s(:send,
              s(:lvar, :x), :sub,
              s(:int, 1),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 1270000000000000000000000000000),
            s(:send,
              s(:lvar, :x), :sub,
              s(:int, 1),
              s(:int, 3))))),
      s(:def, :test_mult_bigdecimal,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s))),
          s(:send, nil, :assert_equal,
            s(:int, 4000000000000000000000000000000),
            s(:send,
              s(:lvar, :x), :mult,
              s(:int, 3),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 3800000000000000000000000000000),
            s(:send,
              s(:lvar, :x), :mult,
              s(:int, 3),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 3800000000000000000000000000000),
            s(:send,
              s(:lvar, :x), :mult,
              s(:int, 3),
              s(:int, 3))))),
      s(:def, :test_div_bigdecimal,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s))),
          s(:send, nil, :assert_equal,
            s(:int, 422550200076076467165567735125),
            s(:send,
              s(:lvar, :x), :div,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 400000000000000000000000000000),
            s(:send,
              s(:lvar, :x), :div,
              s(:int, 3),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 420000000000000000000000000000),
            s(:send,
              s(:lvar, :x), :div,
              s(:int, 3),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 423000000000000000000000000000),
            s(:send,
              s(:lvar, :x), :div,
              s(:int, 3),
              s(:int, 3))),
          s(:block,
            s(:send,
              s(:const, nil, :BigDecimal), :save_exception_mode),
            s(:args),
            s(:begin,
              s(:send,
                s(:const, nil, :BigDecimal), :mode,
                s(:const,
                  s(:const, nil, :BigDecimal), :EXCEPTION_INFINITY),
                s(:false)),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:send, nil, :BigDecimal,
                    s(:str, "0")), :div,
                  s(:send, nil, :BigDecimal,
                    s(:str, "Infinity")))))))),
      s(:def, :test_abs_bigdecimal,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s))),
          s(:send, nil, :assert_equal,
            s(:int, 1267650600228229401496703205376),
            s(:send,
              s(:lvar, :x), :abs)),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:str, "-"), :+,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 100))), :to_s)))),
          s(:send, nil, :assert_equal,
            s(:int, 1267650600228229401496703205376),
            s(:send,
              s(:lvar, :x), :abs)),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "0"))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :x), :abs)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_NaN),
            s(:false)),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "NaN"))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:lvar, :x), :abs), :nan?)))),
      s(:def, :test_sqrt_bigdecimal,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "0.09"))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.3),
            s(:send,
              s(:lvar, :x), :sqrt,
              s(:int, 1)),
            s(:float, 0.001)),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))), :to_s))),
          s(:lvasgn, :y,
            s(:send, nil, :BigDecimal,
              s(:str, "1125899906842624"))),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :y), :exponent)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :x), :sqrt,
                      s(:int, 100)), :-,
                    s(:lvar, :y))), :abs), :<,
              s(:send, nil, :BigDecimal,
                s(:dstr,
                  s(:str, "1E"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :e), :-,
                      s(:int, 100))))))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :x), :sqrt,
                      s(:int, 200)), :-,
                    s(:lvar, :y))), :abs), :<,
              s(:send, nil, :BigDecimal,
                s(:dstr,
                  s(:str, "1E"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :e), :-,
                      s(:int, 200))))))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :x), :sqrt,
                      s(:int, 300)), :-,
                    s(:lvar, :y))), :abs), :<,
              s(:send, nil, :BigDecimal,
                s(:dstr,
                  s(:str, "1E"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :e), :-,
                      s(:int, 300))))))),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:str, "-"), :+,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 100))), :to_s)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send,
              s(:lvar, :x), :sqrt,
              s(:int, 1))),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 200))), :to_s))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 2), :**,
              s(:int, 100)),
            s(:send,
              s(:lvar, :x), :sqrt,
              s(:int, 1))),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
            s(:false)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_NaN),
            s(:false)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "NaN")), :sqrt,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "0")), :sqrt,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "1")), :sqrt,
              s(:int, 1))))),
      s(:def, :test_sqrt_5266,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send, nil, :BigDecimal,
              s(:send,
                s(:str, "2"), :+,
                s(:send,
                  s(:str, "0"), :*,
                  s(:int, 100))))),
          s(:send, nil, :assert_equal,
            s(:str, "0.14142135623730950488016887242096980785696718753769480731"),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :x), :sqrt,
                    s(:int, 56)), :to_s,
                  s(:int, 56)), :split,
                s(:str, " ")), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "0.1414213562373095048801688724209698078569671875376948073"),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :x), :sqrt,
                    s(:int, 55)), :to_s,
                  s(:int, 55)), :split,
                s(:str, " ")), :[],
              s(:int, 0))),
          s(:lvasgn, :x,
            s(:send, nil, :BigDecimal,
              s(:send,
                s(:str, "2"), :+,
                s(:send,
                  s(:str, "0"), :*,
                  s(:int, 200))))),
          s(:send, nil, :assert_equal,
            s(:str, "0.14142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462"),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :x), :sqrt,
                    s(:int, 110)), :to_s,
                  s(:int, 110)), :split,
                s(:str, " ")), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "0.1414213562373095048801688724209698078569671875376948073176679737990732478462107038850387534327641572735013846"),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :x), :sqrt,
                    s(:int, 109)), :to_s,
                  s(:int, 109)), :split,
                s(:str, " ")), :[],
              s(:int, 0))))),
      s(:def, :test_fix,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1.1"))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :fix)))),
      s(:def, :test_frac,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1.1"))),
          s(:send, nil, :assert_equal,
            s(:float, 0.1),
            s(:send,
              s(:lvar, :x), :frac)),
          s(:send, nil, :assert_equal,
            s(:float, 0.1),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "0.1")), :frac)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_NaN),
            s(:false)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :BigDecimal), :new,
                  s(:str, "NaN")), :frac), :nan?)))),
      s(:def, :test_round,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "3.14159")), :round)),
          s(:send, nil, :assert_equal,
            s(:int, 9),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "8.7")), :round)),
          s(:send, nil, :assert_equal,
            s(:float, 3.142),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "3.14159")), :round,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:float, 13300.0),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "13345.234")), :round,
              s(:int, -2))),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "111.111"))),
          s(:send, nil, :assert_equal,
            s(:int, 111),
            s(:send,
              s(:lvar, :x), :round)),
          s(:send, nil, :assert_equal,
            s(:float, 111.1),
            s(:send,
              s(:lvar, :x), :round,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:float, 111.11),
            s(:send,
              s(:lvar, :x), :round,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:float, 111.111),
            s(:send,
              s(:lvar, :x), :round,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:float, 111.111),
            s(:send,
              s(:lvar, :x), :round,
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:int, 110),
            s(:send,
              s(:lvar, :x), :round,
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:int, 100),
            s(:send,
              s(:lvar, :x), :round,
              s(:int, -2))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :x), :round,
              s(:int, -3))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :x), :round,
              s(:int, -4))),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "2.5"))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :x), :round,
              s(:int, 0),
              s(:const,
                s(:const, nil, :BigDecimal), :ROUND_UP))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :x), :round,
              s(:int, 0),
              s(:const,
                s(:const, nil, :BigDecimal), :ROUND_DOWN))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :x), :round,
              s(:int, 0),
              s(:const,
                s(:const, nil, :BigDecimal), :ROUND_HALF_UP))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :x), :round,
              s(:int, 0),
              s(:const,
                s(:const, nil, :BigDecimal), :ROUND_HALF_DOWN))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :x), :round,
              s(:int, 0),
              s(:const,
                s(:const, nil, :BigDecimal), :ROUND_HALF_EVEN))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :x), :round,
              s(:int, 0),
              s(:const,
                s(:const, nil, :BigDecimal), :ROUND_CEILING))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :x), :round,
              s(:int, 0),
              s(:const,
                s(:const, nil, :BigDecimal), :ROUND_FLOOR))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :x), :round,
              s(:int, 0),
              s(:int, 256))),
          s(:block,
            s(:send,
              s(:const, nil, :ROUNDING_MODE_MAP), :each),
            s(:args,
              s(:arg, :const),
              s(:arg, :sym)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :x), :round,
                s(:int, 0),
                s(:lvar, :const)),
              s(:send,
                s(:lvar, :x), :round,
                s(:int, 0),
                s(:lvar, :sym)))),
          s(:lvasgn, :bug3803,
            s(:str, "[ruby-core:32136]")),
          s(:block,
            s(:send,
              s(:int, 15), :times),
            s(:args,
              s(:arg, :n)),
            s(:begin,
              s(:lvasgn, :x,
                s(:send,
                  s(:const, nil, :BigDecimal), :new,
                  s(:dstr,
                    s(:str, "5"),
                    s(:begin,
                      s(:send,
                        s(:str, "0"), :*,
                        s(:lvar, :n))),
                    s(:str, "1")))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:int, 10), :**,
                  s(:begin,
                    s(:send,
                      s(:lvar, :n), :+,
                      s(:int, 2)))),
                s(:send,
                  s(:lvar, :x), :round,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:lvar, :n), :+,
                        s(:int, 2))), :-@),
                  s(:const,
                    s(:const, nil, :BigDecimal), :ROUND_HALF_DOWN)),
                s(:lvar, :bug3803)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:int, 10), :**,
                  s(:begin,
                    s(:send,
                      s(:lvar, :n), :+,
                      s(:int, 2)))),
                s(:send,
                  s(:lvar, :x), :round,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:lvar, :n), :+,
                        s(:int, 2))), :-@),
                  s(:const,
                    s(:const, nil, :BigDecimal), :ROUND_HALF_EVEN)),
                s(:lvar, :bug3803)),
              s(:lvasgn, :x,
                s(:send,
                  s(:const, nil, :BigDecimal), :new,
                  s(:dstr,
                    s(:str, "0.5"),
                    s(:begin,
                      s(:send,
                        s(:str, "0"), :*,
                        s(:lvar, :n))),
                    s(:str, "1")))),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:lvar, :x), :round,
                  s(:int, 0),
                  s(:const,
                    s(:const, nil, :BigDecimal), :ROUND_HALF_DOWN)),
                s(:lvar, :bug3803)),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:lvar, :x), :round,
                  s(:int, 0),
                  s(:const,
                    s(:const, nil, :BigDecimal), :ROUND_HALF_EVEN)),
                s(:lvar, :bug3803)),
              s(:lvasgn, :x,
                s(:send,
                  s(:const, nil, :BigDecimal), :new,
                  s(:dstr,
                    s(:str, "-0.5"),
                    s(:begin,
                      s(:send,
                        s(:str, "0"), :*,
                        s(:lvar, :n))),
                    s(:str, "1")))),
              s(:send, nil, :assert_equal,
                s(:int, -1),
                s(:send,
                  s(:lvar, :x), :round,
                  s(:int, 0),
                  s(:const,
                    s(:const, nil, :BigDecimal), :ROUND_HALF_DOWN)),
                s(:lvar, :bug3803)),
              s(:send, nil, :assert_equal,
                s(:int, -1),
                s(:send,
                  s(:lvar, :x), :round,
                  s(:int, 0),
                  s(:const,
                    s(:const, nil, :BigDecimal), :ROUND_HALF_EVEN)),
                s(:lvar, :bug3803)))))),
      s(:def, :test_truncate,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "3.14159")), :truncate)),
          s(:send, nil, :assert_equal,
            s(:int, 8),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "8.7")), :truncate)),
          s(:send, nil, :assert_equal,
            s(:float, 3.141),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "3.14159")), :truncate,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:float, 13300.0),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "13345.234")), :truncate,
              s(:int, -2))))),
      s(:def, :test_floor,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "3.14159")), :floor)),
          s(:send, nil, :assert_equal,
            s(:int, -10),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "-9.1")), :floor)),
          s(:send, nil, :assert_equal,
            s(:float, 3.141),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "3.14159")), :floor,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:float, 13300.0),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "13345.234")), :floor,
              s(:int, -2))))),
      s(:def, :test_ceil,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "3.14159")), :ceil)),
          s(:send, nil, :assert_equal,
            s(:int, -9),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "-9.1")), :ceil)),
          s(:send, nil, :assert_equal,
            s(:float, 3.142),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "3.14159")), :ceil,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:float, 13400.0),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "13345.234")), :ceil,
              s(:int, -2))))),
      s(:def, :test_to_s,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "-123.45678 90123 45678 9"),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "-123.45678901234567890")), :to_s,
              s(:str, "5F"))),
          s(:send, nil, :assert_equal,
            s(:str, "+123.45678901 23456789"),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "123.45678901234567890")), :to_s,
              s(:str, "+8F"))),
          s(:send, nil, :assert_equal,
            s(:str, " 123.4567890123456789"),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "123.45678901234567890")), :to_s,
              s(:str, " F"))),
          s(:send, nil, :assert_equal,
            s(:str, "0.1234567890123456789E3"),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "123.45678901234567890")), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "0.12345 67890 12345 6789E3"),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "123.45678901234567890")), :to_s,
              s(:int, 5))))),
      s(:def, :test_split,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "-123.45678901234567890"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, -1),
              s(:str, "1234567890123456789"),
              s(:int, 10),
              s(:int, 3)),
            s(:send,
              s(:lvar, :x), :split)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:str, "0"),
              s(:int, 10),
              s(:int, 0)),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "0")), :split)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, -1),
              s(:str, "0"),
              s(:int, 10),
              s(:int, 0)),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "-0")), :split)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
            s(:false)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_NaN),
            s(:false)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:str, "NaN"),
              s(:int, 10),
              s(:int, 0)),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "NaN")), :split)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:str, "Infinity"),
              s(:int, 10),
              s(:int, 0)),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "Infinity")), :split)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, -1),
              s(:str, "Infinity"),
              s(:int, 10),
              s(:int, 0)),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "-Infinity")), :split)))),
      s(:def, :test_exponent,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "-123.45678901234567890"))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :x), :exponent)))),
      s(:def, :test_inspect,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1234.5678"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :prec),
              s(:lvasgn, :maxprec)),
            s(:send,
              s(:lvar, :x), :precs)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^#<BigDecimal:[0-9a-f]+,'0.12345678E4',"),
              s(:begin,
                s(:lvar, :prec)),
              s(:str, "\\("),
              s(:begin,
                s(:lvar, :maxprec)),
              s(:str, "\\)>$"),
              s(:regopt)),
            s(:send,
              s(:lvar, :x), :inspect)))),
      s(:def, :test_power,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised,
            s(:const, nil, :TypeError),
            s(:str, "[ruby-core:47632]")),
          s(:args),
          s(:block,
            s(:send,
              s(:int, 1000), :times),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "1001.10")), :**,
              s(:float, 0.75))))),
      s(:def, :test_power_with_nil,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send,
            s(:send, nil, :BigDecimal,
              s(:int, 3)), :**,
            s(:nil)))),
      s(:def, :test_power_of_nan,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :BigDecimal), :save_exception_mode),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :EXCEPTION_NaN),
              s(:false)),
            s(:send, nil, :assert_nan,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :NAN), :**,
                s(:int, 0))),
            s(:send, nil, :assert_nan,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :NAN), :**,
                s(:int, 1))),
            s(:send, nil, :assert_nan,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :NAN), :**,
                s(:int, 42))),
            s(:send, nil, :assert_nan,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :NAN), :**,
                s(:int, -42))),
            s(:send, nil, :assert_nan,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :NAN), :**,
                s(:float, 42.0))),
            s(:send, nil, :assert_nan,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :NAN), :**,
                s(:float, -42.0))),
            s(:send, nil, :assert_nan,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :NAN), :**,
                s(:send, nil, :BigDecimal,
                  s(:int, 42)))),
            s(:send, nil, :assert_nan,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :NAN), :**,
                s(:send, nil, :BigDecimal,
                  s(:int, -42)))),
            s(:send, nil, :assert_nan,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :NAN), :**,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY))),
            s(:block,
              s(:send,
                s(:const, nil, :BigDecimal), :save_exception_mode),
              s(:args),
              s(:begin,
                s(:send,
                  s(:const, nil, :BigDecimal), :mode,
                  s(:const,
                    s(:const, nil, :BigDecimal), :EXCEPTION_INFINITY),
                  s(:false)),
                s(:send, nil, :assert_nan,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :NAN), :**,
                    s(:begin,
                      s(:send,
                        s(:const,
                          s(:const, nil, :BigDecimal), :INFINITY), :-@))))))))),
      s(:def, :test_power_with_Bignum,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :BigDecimal), :save_exception_mode),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :EXCEPTION_INFINITY),
              s(:false)),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:send, nil, :BigDecimal,
                  s(:int, 0)), :**,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:send, nil, :BigDecimal,
                  s(:int, 0)), :**,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 100))), :-@))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send, nil, :BigDecimal,
                      s(:int, 0)), :-@)), :**,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 100))), :-@))),
            s(:send, nil, :assert_negative_infinite,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send, nil, :BigDecimal,
                      s(:int, 0)), :-@)), :**,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:int, 2), :**,
                        s(:int, 100)), :+,
                      s(:int, 1))), :-@))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send, nil, :BigDecimal,
                  s(:int, 1)), :**,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:send, nil, :BigDecimal,
                  s(:int, 3)), :**,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))))),
            s(:send, nil, :assert_positive_zero,
              s(:send,
                s(:send, nil, :BigDecimal,
                  s(:int, 3)), :**,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 100)), :-@)))),
            s(:send, nil, :assert_negative_infinite,
              s(:send,
                s(:send, nil, :BigDecimal,
                  s(:int, -3)), :**,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:send, nil, :BigDecimal,
                  s(:int, -3)), :**,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 100)), :+,
                    s(:int, 1))))),
            s(:send, nil, :assert_negative_zero,
              s(:send,
                s(:send, nil, :BigDecimal,
                  s(:int, -3)), :**,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 100)), :-@)))),
            s(:send, nil, :assert_positive_zero,
              s(:send,
                s(:send, nil, :BigDecimal,
                  s(:int, -3)), :**,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:int, 2), :**,
                        s(:int, 100)), :-@), :-,
                    s(:int, 1))))),
            s(:send, nil, :assert_positive_zero,
              s(:send,
                s(:send, nil, :BigDecimal,
                  s(:float, 0.5),
                  s(:const,
                    s(:const, nil, :Float), :DIG)), :**,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:send, nil, :BigDecimal,
                  s(:float, 0.5),
                  s(:const,
                    s(:const, nil, :Float), :DIG)), :**,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 100)), :-@)))),
            s(:send, nil, :assert_negative_zero,
              s(:send,
                s(:send, nil, :BigDecimal,
                  s(:float, -0.5),
                  s(:const,
                    s(:const, nil, :Float), :DIG)), :**,
                s(:begin,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 100))))),
            s(:send, nil, :assert_positive_zero,
              s(:send,
                s(:send, nil, :BigDecimal,
                  s(:float, -0.5),
                  s(:const,
                    s(:const, nil, :Float), :DIG)), :**,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 100)), :-,
                    s(:int, 1))))),
            s(:send, nil, :assert_negative_infinite,
              s(:send,
                s(:send, nil, :BigDecimal,
                  s(:float, -0.5),
                  s(:const,
                    s(:const, nil, :Float), :DIG)), :**,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 100)), :-@)))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:send, nil, :BigDecimal,
                  s(:float, -0.5),
                  s(:const,
                    s(:const, nil, :Float), :DIG)), :**,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:int, 2), :**,
                        s(:int, 100)), :-@), :-,
                    s(:int, 1)))))))),
      s(:def, :test_power_with_BigDecimal,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised),
          s(:args),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:int, 3), :**,
              s(:int, 3)),
            s(:send,
              s(:send, nil, :BigDecimal,
                s(:int, 3)), :**,
              s(:send, nil, :BigDecimal,
                s(:int, 3)))))),
      s(:def, :test_power_of_finite_with_zero,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send, nil, :BigDecimal,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :**,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :**,
              s(:send,
                s(:int, 0), :quo,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :**,
              s(:float, 0.0))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :**,
              s(:send, nil, :BigDecimal,
                s(:int, 0)))),
          s(:lvasgn, :x,
            s(:send, nil, :BigDecimal,
              s(:int, 42))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :**,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :**,
              s(:send,
                s(:int, 0), :quo,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :**,
              s(:float, 0.0))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :**,
              s(:send, nil, :BigDecimal,
                s(:int, 0)))),
          s(:lvasgn, :x,
            s(:send, nil, :BigDecimal,
              s(:int, -42))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :**,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :**,
              s(:send,
                s(:int, 0), :quo,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :**,
              s(:float, 0.0))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :x), :**,
              s(:send, nil, :BigDecimal,
                s(:int, 0)))))),
      s(:def, :test_power_of_three,
        s(:args),
        s(:begin,
          s(:lvasgn, :x,
            s(:send, nil, :BigDecimal,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 81),
            s(:send,
              s(:lvar, :x), :**,
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 1), :quo,
              s(:int, 81)),
            s(:send,
              s(:lvar, :x), :**,
              s(:int, -4))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:float, 1.0), :/,
              s(:int, 81)),
            s(:send,
              s(:lvar, :x), :**,
              s(:int, -4))))),
      s(:def, :test_power_of_zero,
        s(:args),
        s(:begin,
          s(:lvasgn, :zero,
            s(:send, nil, :BigDecimal,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :zero), :**,
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :zero), :**,
              s(:send,
                s(:int, 4), :quo,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :zero), :**,
              s(:float, 4.0))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :zero), :**,
              s(:send, nil, :BigDecimal,
                s(:int, 4)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :zero), :**,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :zero), :**,
              s(:send,
                s(:int, 0), :quo,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :zero), :**,
              s(:float, 0.0))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :zero), :**,
              s(:send, nil, :BigDecimal,
                s(:int, 0)))),
          s(:block,
            s(:send,
              s(:const, nil, :BigDecimal), :save_exception_mode),
            s(:args),
            s(:begin,
              s(:send,
                s(:const, nil, :BigDecimal), :mode,
                s(:const,
                  s(:const, nil, :BigDecimal), :EXCEPTION_INFINITY),
                s(:false)),
              s(:send,
                s(:const, nil, :BigDecimal), :mode,
                s(:const,
                  s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
                s(:false)),
              s(:send, nil, :assert_positive_infinite,
                s(:send,
                  s(:lvar, :zero), :**,
                  s(:int, -1))),
              s(:send, nil, :assert_positive_infinite,
                s(:send,
                  s(:lvar, :zero), :**,
                  s(:send,
                    s(:int, -1), :quo,
                    s(:int, 1)))),
              s(:send, nil, :assert_positive_infinite,
                s(:send,
                  s(:lvar, :zero), :**,
                  s(:float, -1.0))),
              s(:send, nil, :assert_positive_infinite,
                s(:send,
                  s(:lvar, :zero), :**,
                  s(:send, nil, :BigDecimal,
                    s(:int, -1)))),
              s(:lvasgn, :m_zero,
                s(:send, nil, :BigDecimal,
                  s(:str, "-0"))),
              s(:send, nil, :assert_negative_infinite,
                s(:send,
                  s(:lvar, :m_zero), :**,
                  s(:int, -1))),
              s(:send, nil, :assert_negative_infinite,
                s(:send,
                  s(:lvar, :m_zero), :**,
                  s(:send,
                    s(:int, -1), :quo,
                    s(:int, 1)))),
              s(:send, nil, :assert_negative_infinite,
                s(:send,
                  s(:lvar, :m_zero), :**,
                  s(:float, -1.0))),
              s(:send, nil, :assert_negative_infinite,
                s(:send,
                  s(:lvar, :m_zero), :**,
                  s(:send, nil, :BigDecimal,
                    s(:int, -1)))),
              s(:send, nil, :assert_positive_infinite,
                s(:send,
                  s(:lvar, :m_zero), :**,
                  s(:int, -2))),
              s(:send, nil, :assert_positive_infinite,
                s(:send,
                  s(:lvar, :m_zero), :**,
                  s(:send,
                    s(:int, -2), :quo,
                    s(:int, 1)))),
              s(:send, nil, :assert_positive_infinite,
                s(:send,
                  s(:lvar, :m_zero), :**,
                  s(:float, -2.0))),
              s(:send, nil, :assert_positive_infinite,
                s(:send,
                  s(:lvar, :m_zero), :**,
                  s(:send, nil, :BigDecimal,
                    s(:int, -2)))))))),
      s(:def, :test_power_of_positive_infinity,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :BigDecimal), :save_exception_mode),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
              s(:false)),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:int, 3))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:send,
                  s(:int, 3), :quo,
                  s(:int, 1)))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:float, 3.0))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:send, nil, :BigDecimal,
                  s(:int, 3)))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:int, 2))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:send,
                  s(:int, 2), :quo,
                  s(:int, 1)))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:float, 2.0))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:send, nil, :BigDecimal,
                  s(:int, 2)))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:int, 1))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:send,
                  s(:int, 1), :quo,
                  s(:int, 1)))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:float, 1.0))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:send, nil, :BigDecimal,
                  s(:int, 1)))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:int, 0))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:send,
                  s(:int, 0), :quo,
                  s(:int, 1)))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:float, 0.0))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:send, nil, :BigDecimal,
                  s(:int, 0)))),
            s(:send, nil, :assert_positive_zero,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:int, -1))),
            s(:send, nil, :assert_positive_zero,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:send,
                  s(:int, -1), :quo,
                  s(:int, 1)))),
            s(:send, nil, :assert_positive_zero,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:float, -1.0))),
            s(:send, nil, :assert_positive_zero,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:send, nil, :BigDecimal,
                  s(:int, -1)))),
            s(:send, nil, :assert_positive_zero,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:int, -2))),
            s(:send, nil, :assert_positive_zero,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:float, -2.0))),
            s(:send, nil, :assert_positive_zero,
              s(:send,
                s(:const,
                  s(:const, nil, :BigDecimal), :INFINITY), :**,
                s(:send, nil, :BigDecimal,
                  s(:int, -2))))))),
      s(:def, :test_power_of_negative_infinity,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :BigDecimal), :save_exception_mode),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
              s(:false)),
            s(:send, nil, :assert_negative_infinite,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:int, 3))),
            s(:send, nil, :assert_negative_infinite,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:send,
                  s(:int, 3), :quo,
                  s(:int, 1)))),
            s(:send, nil, :assert_negative_infinite,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:float, 3.0))),
            s(:send, nil, :assert_negative_infinite,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:send, nil, :BigDecimal,
                  s(:int, 3)))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:int, 2))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:send,
                  s(:int, 2), :quo,
                  s(:int, 1)))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:float, 2.0))),
            s(:send, nil, :assert_positive_infinite,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:send, nil, :BigDecimal,
                  s(:int, 2)))),
            s(:send, nil, :assert_negative_infinite,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:int, 1))),
            s(:send, nil, :assert_negative_infinite,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:send,
                  s(:int, 1), :quo,
                  s(:int, 1)))),
            s(:send, nil, :assert_negative_infinite,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:float, 1.0))),
            s(:send, nil, :assert_negative_infinite,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:send, nil, :BigDecimal,
                  s(:int, 1)))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:int, 0))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:send,
                  s(:int, 0), :quo,
                  s(:int, 1)))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:float, 0.0))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:send, nil, :BigDecimal,
                  s(:int, 0)))),
            s(:send, nil, :assert_negative_zero,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:int, -1))),
            s(:send, nil, :assert_negative_zero,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:send,
                  s(:int, -1), :quo,
                  s(:int, 1)))),
            s(:send, nil, :assert_negative_zero,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:float, -1.0))),
            s(:send, nil, :assert_negative_zero,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:send, nil, :BigDecimal,
                  s(:int, -1)))),
            s(:send, nil, :assert_positive_zero,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:int, -2))),
            s(:send, nil, :assert_positive_zero,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:send,
                  s(:int, -2), :quo,
                  s(:int, 1)))),
            s(:send, nil, :assert_positive_zero,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:float, -2.0))),
            s(:send, nil, :assert_positive_zero,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :BigDecimal), :INFINITY), :-@)), :**,
                s(:send, nil, :BigDecimal,
                  s(:int, -2))))))),
      s(:def, :test_power_without_prec,
        s(:args),
        s(:begin,
          s(:lvasgn, :pi,
            s(:send, nil, :BigDecimal,
              s(:str, "3.14159265358979323846264338327950288419716939937511"))),
          s(:lvasgn, :e,
            s(:send, nil, :BigDecimal,
              s(:str, "2.71828182845904523536028747135266249775724709369996"))),
          s(:lvasgn, :pow,
            s(:send, nil, :BigDecimal,
              s(:str, "22.4591577183610454734271522045437350275893151339967843873233068"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :pow),
            s(:send,
              s(:lvar, :pi), :power,
              s(:lvar, :e))))),
      s(:def, :test_power_with_prec,
        s(:args),
        s(:begin,
          s(:lvasgn, :pi,
            s(:send, nil, :BigDecimal,
              s(:str, "3.14159265358979323846264338327950288419716939937511"))),
          s(:lvasgn, :e,
            s(:send, nil, :BigDecimal,
              s(:str, "2.71828182845904523536028747135266249775724709369996"))),
          s(:lvasgn, :pow,
            s(:send, nil, :BigDecimal,
              s(:str, "22.459157718361045473"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :pow),
            s(:send,
              s(:lvar, :pi), :power,
              s(:lvar, :e),
              s(:int, 20))),
          s(:lvasgn, :b,
            s(:send, nil, :BigDecimal,
              s(:str, "1.034482758620689655172413793103448275862068965517241379310344827586206896551724"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "0.114523E1")),
            s(:send,
              s(:lvar, :b), :power,
              s(:int, 4),
              s(:int, 5)),
            s(:str, "[Bug #8818] [ruby-core:56802]")))),
      s(:def, :test_limit,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :BigDecimal), :limit,
            s(:int, 1)),
          s(:lvasgn, :x,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "3"))),
          s(:send, nil, :assert_equal,
            s(:int, 90),
            s(:send,
              s(:lvar, :x), :**,
              s(:int, 4))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :BigDecimal), :limit,
              s(:int, -1))),
          s(:lvasgn, :bug7458,
            s(:str, "[ruby-core:50269] [#7458]")),
          s(:lvasgn, :one,
            s(:send, nil, :BigDecimal,
              s(:str, "1"))),
          s(:lvasgn, :epsilon,
            s(:send, nil, :BigDecimal,
              s(:str, "0.7E-18"))),
          s(:block,
            s(:send,
              s(:const, nil, :BigDecimal), :save_limit),
            s(:args),
            s(:begin,
              s(:send,
                s(:const, nil, :BigDecimal), :limit,
                s(:int, 0)),
              s(:send, nil, :assert_equal,
                s(:send, nil, :BigDecimal,
                  s(:str, "1.0000000000000000007")),
                s(:send,
                  s(:lvar, :one), :+,
                  s(:lvar, :epsilon)),
                s(:dstr,
                  s(:str, "limit(0) "),
                  s(:begin,
                    s(:lvar, :bug7458)))),
              s(:block,
                s(:send,
                  s(:int, 1), :upto,
                  s(:int, 18)),
                s(:args,
                  s(:arg, :lim)),
                s(:begin,
                  s(:send,
                    s(:const, nil, :BigDecimal), :limit,
                    s(:lvar, :lim)),
                  s(:send, nil, :assert_equal,
                    s(:send, nil, :BigDecimal,
                      s(:str, "1.0")),
                    s(:send,
                      s(:lvar, :one), :+,
                      s(:lvar, :epsilon)),
                    s(:dstr,
                      s(:str, "limit("),
                      s(:begin,
                        s(:lvar, :lim)),
                      s(:str, ") "),
                      s(:begin,
                        s(:lvar, :bug7458)))))),
              s(:send,
                s(:const, nil, :BigDecimal), :limit,
                s(:int, 19)),
              s(:send, nil, :assert_equal,
                s(:send, nil, :BigDecimal,
                  s(:str, "1.000000000000000001")),
                s(:send,
                  s(:lvar, :one), :+,
                  s(:lvar, :epsilon)),
                s(:dstr,
                  s(:str, "limit(19) "),
                  s(:begin,
                    s(:lvar, :bug7458)))),
              s(:send,
                s(:const, nil, :BigDecimal), :limit,
                s(:int, 20)),
              s(:send, nil, :assert_equal,
                s(:send, nil, :BigDecimal,
                  s(:str, "1.0000000000000000007")),
                s(:send,
                  s(:lvar, :one), :+,
                  s(:lvar, :epsilon)),
                s(:dstr,
                  s(:str, "limit(20) "),
                  s(:begin,
                    s(:lvar, :bug7458)))))))),
      s(:def, :test_sign,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
            s(:false)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_NaN),
            s(:false)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_ZERODIVIDE),
            s(:false)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_POSITIVE_ZERO),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "0")), :sign)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_NEGATIVE_ZERO),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "-0")), :sign)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_POSITIVE_FINITE),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "1")), :sign)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_NEGATIVE_FINITE),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:str, "-1")), :sign)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_POSITIVE_INFINITE),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :BigDecimal), :new,
                    s(:str, "1")), :/,
                  s(:int, 0))), :sign)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_NEGATIVE_INFINITE),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :BigDecimal), :new,
                    s(:str, "-1")), :/,
                  s(:int, 0))), :sign)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_NaN),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :BigDecimal), :new,
                    s(:str, "0")), :/,
                  s(:int, 0))), :sign)))),
      s(:def, :test_inf,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
            s(:false)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_NaN),
            s(:false)),
          s(:lvasgn, :inf,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "Infinity"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :inf),
            s(:send,
              s(:lvar, :inf), :+,
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :inf), :+,
                  s(:begin,
                    s(:send,
                      s(:lvar, :inf), :-@)))), :nan?)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :inf), :-,
                  s(:lvar, :inf))), :nan?)),
          s(:send, nil, :assert_equal,
            s(:lvar, :inf),
            s(:send,
              s(:lvar, :inf), :-,
              s(:begin,
                s(:send,
                  s(:lvar, :inf), :-@)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :inf),
            s(:send,
              s(:lvar, :inf), :*,
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :inf), :/,
                  s(:lvar, :inf))), :nan?)),
          s(:send, nil, :assert_equal,
            s(:lvar, :inf),
            s(:send,
              s(:lvar, :inf), :+,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:lvar, :inf),
            s(:send,
              s(:lvar, :inf), :-,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:lvar, :inf),
            s(:send,
              s(:lvar, :inf), :*,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :inf), :*,
                  s(:int, 0))), :nan?)),
          s(:send, nil, :assert_equal,
            s(:lvar, :inf),
            s(:send,
              s(:lvar, :inf), :/,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:lvar, :inf),
            s(:send,
              s(:int, 1), :+,
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :inf), :-@),
            s(:send,
              s(:int, 1), :-,
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:lvar, :inf),
            s(:send,
              s(:int, 1), :*,
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :inf), :-@),
            s(:send,
              s(:int, -1), :*,
              s(:lvar, :inf))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 0), :*,
                  s(:lvar, :inf))), :nan?)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_POSITIVE_ZERO),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 1), :/,
                  s(:lvar, :inf))), :sign)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_NEGATIVE_ZERO),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, -1), :/,
                  s(:lvar, :inf))), :sign)))),
      s(:def, :test_to_special_string,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
            s(:false)),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_NaN),
            s(:false)),
          s(:lvasgn, :nan,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "NaN"))),
          s(:send, nil, :assert_equal,
            s(:str, "NaN"),
            s(:send,
              s(:lvar, :nan), :to_s)),
          s(:lvasgn, :inf,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "Infinity"))),
          s(:send, nil, :assert_equal,
            s(:str, "Infinity"),
            s(:send,
              s(:lvar, :inf), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, " Infinity"),
            s(:send,
              s(:lvar, :inf), :to_s,
              s(:str, " "))),
          s(:send, nil, :assert_equal,
            s(:str, "+Infinity"),
            s(:send,
              s(:lvar, :inf), :to_s,
              s(:str, "+"))),
          s(:send, nil, :assert_equal,
            s(:str, "-Infinity"),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :inf), :-@)), :to_s)),
          s(:lvasgn, :pzero,
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "0"))),
          s(:send, nil, :assert_equal,
            s(:str, "0.0"),
            s(:send,
              s(:lvar, :pzero), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, " 0.0"),
            s(:send,
              s(:lvar, :pzero), :to_s,
              s(:str, " "))),
          s(:send, nil, :assert_equal,
            s(:str, "+0.0"),
            s(:send,
              s(:lvar, :pzero), :to_s,
              s(:str, "+"))),
          s(:send, nil, :assert_equal,
            s(:str, "-0.0"),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :pzero), :-@)), :to_s)))),
      s(:def, :test_to_string,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "0.01"),
            s(:send,
              s(:send, nil, :BigDecimal,
                s(:str, "0.01")), :to_s,
              s(:str, "F"))),
          s(:lvasgn, :s,
            s(:send,
              s(:send,
                s(:str, "0."), :+,
                s(:send,
                  s(:str, "0"), :*,
                  s(:int, 100))), :+,
              s(:str, "1"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :s),
            s(:send,
              s(:send, nil, :BigDecimal,
                s(:lvar, :s)), :to_s,
              s(:str, "F"))),
          s(:lvasgn, :s,
            s(:send,
              s(:send,
                s(:str, "1"), :+,
                s(:send,
                  s(:str, "0"), :*,
                  s(:int, 100))), :+,
              s(:str, ".0"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :s),
            s(:send,
              s(:send, nil, :BigDecimal,
                s(:lvar, :s)), :to_s,
              s(:str, "F"))))),
      s(:def, :test_ctov,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:float, 0.1),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1E-1"))),
          s(:send, nil, :assert_equal,
            s(:int, 10),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "1E+1"))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:const, nil, :BigDecimal), :new,
              s(:str, "+1"))),
          s(:send,
            s(:const, nil, :BigDecimal), :mode,
            s(:const,
              s(:const, nil, :BigDecimal), :EXCEPTION_OVERFLOW),
            s(:false)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_POSITIVE_INFINITE),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:send,
                  s(:str, "1E1"), :+,
                  s(:send,
                    s(:str, "0"), :*,
                    s(:int, 10000)))), :sign)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_NEGATIVE_INFINITE),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:send,
                  s(:str, "-1E1"), :+,
                  s(:send,
                    s(:str, "0"), :*,
                    s(:int, 10000)))), :sign)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_POSITIVE_ZERO),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:send,
                  s(:str, "1E-1"), :+,
                  s(:send,
                    s(:str, "0"), :*,
                    s(:int, 10000)))), :sign)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :BigDecimal), :SIGN_NEGATIVE_ZERO),
            s(:send,
              s(:send,
                s(:const, nil, :BigDecimal), :new,
                s(:send,
                  s(:str, "-1E-1"), :+,
                  s(:send,
                    s(:str, "0"), :*,
                    s(:int, 10000)))), :sign)))),
      s(:def, :test_split_under_gc_stress,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug3258,
            s(:str, "[ruby-dev:41213]")),
          s(:lvasgn, :expect,
            s(:block,
              s(:send,
                s(:send,
                  s(:int, 10), :upto,
                  s(:int, 20)), :map),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:array,
                  s(:int, 1),
                  s(:str, "1"),
                  s(:int, 10),
                  s(:send,
                    s(:lvar, :i), :+,
                    s(:int, 1))), :inspect))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-rbigdecimal"),
              s(:str, "--disable-gems")),
            s(:dstr,
              s(:str, "    GC.stress = true\n"),
              s(:str, "    10.upto(20) do |i|\n"),
              s(:str, "      p BigDecimal.new(\"1\"+\"0\"*i).split\n"),
              s(:str, "    end\n")),
            s(:lvar, :expect),
            s(:array),
            s(:lvar, :bug3258)))),
      s(:def, :test_coerce_under_gc_stress,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array,
            s(:str, "-rbigdecimal"),
            s(:str, "--disable-gems")),
          s(:dstr,
            s(:str, "      expect = \":too_long_to_embed_as_string can't be coerced into BigDecimal\"\n"),
            s(:str, "      b = BigDecimal.new(\"1\")\n"),
            s(:str, "      GC.stress = true\n"),
            s(:str, "      10.times do\n"),
            s(:str, "        begin\n"),
            s(:str, "          b.coerce(:too_long_to_embed_as_string)\n"),
            s(:str, "        rescue => e\n"),
            s(:str, "          raise unless e.is_a?(TypeError)\n"),
            s(:str, "          raise \"'\#{expect}' is expected, but '\#{e.message}'\" unless e.message == expect\n"),
            s(:str, "        end\n"),
            s(:str, "      end\n")),
          s(:array),
          s(:array))),
      s(:def, :test_INFINITY,
        s(:args),
        s(:send, nil, :assert,
          s(:send,
            s(:const,
              s(:const, nil, :BigDecimal), :INFINITY), :infinite?),
          s(:str, "BigDecimal::INFINITY is not a infinity"))),
      s(:def, :test_NAN,
        s(:args),
        s(:send, nil, :assert,
          s(:send,
            s(:const,
              s(:const, nil, :BigDecimal), :NAN), :nan?),
          s(:str, "BigDecimal::NAN is not NaN"))),
      s(:def, :test_exp_with_zerp_precision,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:send,
            s(:const, nil, :BigMath), :exp,
            s(:int, 1),
            s(:int, 0)))),
      s(:def, :test_exp_with_negative_precision,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:send,
            s(:const, nil, :BigMath), :exp,
            s(:int, 1),
            s(:int, -42)))),
      s(:def, :test_exp_with_complex,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:send,
            s(:const, nil, :BigMath), :exp,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 2)),
            s(:int, 20)))),
      s(:def, :test_exp_with_negative_infinite,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :BigDecimal), :save_exception_mode),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :EXCEPTION_INFINITY),
              s(:false)),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:const, nil, :BigMath), :exp,
                s(:send,
                  s(:const,
                    s(:const, nil, :BigDecimal), :INFINITY), :-@),
                s(:int, 20)))))),
      s(:def, :test_exp_with_positive_infinite,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :BigDecimal), :save_exception_mode),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :EXCEPTION_INFINITY),
              s(:false)),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:const, nil, :BigMath), :exp,
                  s(:const,
                    s(:const, nil, :BigDecimal), :INFINITY),
                  s(:int, 20)), :>,
                s(:int, 0))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:const, nil, :BigMath), :exp,
                  s(:const,
                    s(:const, nil, :BigDecimal), :INFINITY),
                  s(:int, 20)), :infinite?))))),
      s(:def, :test_exp_with_nan,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :BigDecimal), :save_exception_mode),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :EXCEPTION_NaN),
              s(:false)),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:const, nil, :BigMath), :exp,
                  s(:const,
                    s(:const, nil, :BigDecimal), :NAN),
                  s(:int, 20)), :nan?))))),
      s(:def, :test_exp_with_1,
        s(:args),
        s(:send, nil, :assert_in_epsilon,
          s(:const,
            s(:const, nil, :Math), :E),
          s(:send,
            s(:const, nil, :BigMath), :exp,
            s(:int, 1),
            s(:int, 20)))),
      s(:def, :test_BigMath_exp,
        s(:args),
        s(:begin,
          s(:lvasgn, :prec,
            s(:int, 20)),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:const, nil, :Math), :exp,
              s(:int, 20)),
            s(:send,
              s(:const, nil, :BigMath), :exp,
              s(:send, nil, :BigDecimal,
                s(:str, "20")),
              s(:lvar, :prec))),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:const, nil, :Math), :exp,
              s(:int, 40)),
            s(:send,
              s(:const, nil, :BigMath), :exp,
              s(:send, nil, :BigDecimal,
                s(:str, "40")),
              s(:lvar, :prec))),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:const, nil, :Math), :exp,
              s(:int, -20)),
            s(:send,
              s(:const, nil, :BigMath), :exp,
              s(:send, nil, :BigDecimal,
                s(:str, "-20")),
              s(:lvar, :prec))),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:const, nil, :Math), :exp,
              s(:int, -40)),
            s(:send,
              s(:const, nil, :BigMath), :exp,
              s(:send, nil, :BigDecimal,
                s(:str, "-40")),
              s(:lvar, :prec))))),
      s(:def, :test_BigMath_exp_with_float,
        s(:args),
        s(:begin,
          s(:lvasgn, :prec,
            s(:int, 20)),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:const, nil, :Math), :exp,
              s(:int, 20)),
            s(:send,
              s(:const, nil, :BigMath), :exp,
              s(:float, 20.0),
              s(:lvar, :prec))),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:const, nil, :Math), :exp,
              s(:int, 40)),
            s(:send,
              s(:const, nil, :BigMath), :exp,
              s(:float, 40.0),
              s(:lvar, :prec))),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:const, nil, :Math), :exp,
              s(:int, -20)),
            s(:send,
              s(:const, nil, :BigMath), :exp,
              s(:float, -20.0),
              s(:lvar, :prec))),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:const, nil, :Math), :exp,
              s(:int, -40)),
            s(:send,
              s(:const, nil, :BigMath), :exp,
              s(:float, -40.0),
              s(:lvar, :prec))))),
      s(:def, :test_BigMath_exp_with_fixnum,
        s(:args),
        s(:begin,
          s(:lvasgn, :prec,
            s(:int, 20)),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:const, nil, :Math), :exp,
              s(:int, 20)),
            s(:send,
              s(:const, nil, :BigMath), :exp,
              s(:int, 20),
              s(:lvar, :prec))),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:const, nil, :Math), :exp,
              s(:int, 40)),
            s(:send,
              s(:const, nil, :BigMath), :exp,
              s(:int, 40),
              s(:lvar, :prec))),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:const, nil, :Math), :exp,
              s(:int, -20)),
            s(:send,
              s(:const, nil, :BigMath), :exp,
              s(:int, -20),
              s(:lvar, :prec))),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:const, nil, :Math), :exp,
              s(:int, -40)),
            s(:send,
              s(:const, nil, :BigMath), :exp,
              s(:int, -40),
              s(:lvar, :prec))))),
      s(:def, :test_BigMath_exp_with_rational,
        s(:args),
        s(:begin,
          s(:lvasgn, :prec,
            s(:int, 20)),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:const, nil, :Math), :exp,
              s(:int, 20)),
            s(:send,
              s(:const, nil, :BigMath), :exp,
              s(:send, nil, :Rational,
                s(:int, 40),
                s(:int, 2)),
              s(:lvar, :prec))),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:const, nil, :Math), :exp,
              s(:int, 40)),
            s(:send,
              s(:const, nil, :BigMath), :exp,
              s(:send, nil, :Rational,
                s(:int, 80),
                s(:int, 2)),
              s(:lvar, :prec))),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:const, nil, :Math), :exp,
              s(:int, -20)),
            s(:send,
              s(:const, nil, :BigMath), :exp,
              s(:send, nil, :Rational,
                s(:int, -40),
                s(:int, 2)),
              s(:lvar, :prec))),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:const, nil, :Math), :exp,
              s(:int, -40)),
            s(:send,
              s(:const, nil, :BigMath), :exp,
              s(:send, nil, :Rational,
                s(:int, -80),
                s(:int, 2)),
              s(:lvar, :prec))))),
      s(:def, :test_BigMath_exp_under_gc_stress,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array,
            s(:str, "-rbigdecimal"),
            s(:str, "--disable-gems")),
          s(:dstr,
            s(:str, "      expect = \":too_long_to_embed_as_string can't be coerced into BigDecimal\"\n"),
            s(:str, "      10.times do\n"),
            s(:str, "        begin\n"),
            s(:str, "          BigMath.exp(:too_long_to_embed_as_string, 6)\n"),
            s(:str, "        rescue => e\n"),
            s(:str, "          raise unless e.is_a?(ArgumentError)\n"),
            s(:str, "          raise \"'\#{expect}' is expected, but '\#{e.message}'\" unless e.message == expect\n"),
            s(:str, "        end\n"),
            s(:str, "      end\n")),
          s(:array),
          s(:array))),
      s(:def, :test_BigMath_log_with_string,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:send,
            s(:const, nil, :BigMath), :log,
            s(:str, "foo"),
            s(:int, 20)))),
      s(:def, :test_BigMath_log_with_nil,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:send,
            s(:const, nil, :BigMath), :log,
            s(:nil),
            s(:int, 20)))),
      s(:def, :test_BigMath_log_with_non_integer_precision,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:send,
            s(:const, nil, :BigMath), :log,
            s(:int, 1),
            s(:float, 0.5)))),
      s(:def, :test_BigMath_log_with_nil_precision,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:send,
            s(:const, nil, :BigMath), :log,
            s(:int, 1),
            s(:nil)))),
      s(:def, :test_BigMath_log_with_complex,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const,
              s(:const, nil, :Math), :DomainError)),
          s(:args),
          s(:send,
            s(:const, nil, :BigMath), :log,
            s(:send, nil, :Complex,
              s(:int, 1),
              s(:int, 2)),
            s(:int, 20)))),
      s(:def, :test_BigMath_log_with_zero_arg,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const,
              s(:const, nil, :Math), :DomainError)),
          s(:args),
          s(:send,
            s(:const, nil, :BigMath), :log,
            s(:int, 0),
            s(:int, 20)))),
      s(:def, :test_BigMath_log_with_negative_arg,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const,
              s(:const, nil, :Math), :DomainError)),
          s(:args),
          s(:send,
            s(:const, nil, :BigMath), :log,
            s(:int, -1),
            s(:int, 20)))),
      s(:def, :test_BigMath_log_with_zero_precision,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:send,
            s(:const, nil, :BigMath), :log,
            s(:int, 1),
            s(:int, 0)))),
      s(:def, :test_BigMath_log_with_negative_precision,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:send,
            s(:const, nil, :BigMath), :log,
            s(:int, 1),
            s(:int, -42)))),
      s(:def, :test_BigMath_log_with_negative_infinite,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :BigDecimal), :save_exception_mode),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :EXCEPTION_INFINITY),
              s(:false)),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :Math), :DomainError)),
              s(:args),
              s(:send,
                s(:const, nil, :BigMath), :log,
                s(:send,
                  s(:const,
                    s(:const, nil, :BigDecimal), :INFINITY), :-@),
                s(:int, 20)))))),
      s(:def, :test_BigMath_log_with_positive_infinite,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :BigDecimal), :save_exception_mode),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :EXCEPTION_INFINITY),
              s(:false)),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:const, nil, :BigMath), :log,
                  s(:const,
                    s(:const, nil, :BigDecimal), :INFINITY),
                  s(:int, 20)), :>,
                s(:int, 0))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:const, nil, :BigMath), :log,
                  s(:const,
                    s(:const, nil, :BigDecimal), :INFINITY),
                  s(:int, 20)), :infinite?))))),
      s(:def, :test_BigMath_log_with_nan,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :BigDecimal), :save_exception_mode),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :EXCEPTION_NaN),
              s(:false)),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:const, nil, :BigMath), :log,
                  s(:const,
                    s(:const, nil, :BigDecimal), :NAN),
                  s(:int, 20)), :nan?))))),
      s(:def, :test_BigMath_log_with_float_nan,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :BigDecimal), :save_exception_mode),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :BigDecimal), :mode,
              s(:const,
                s(:const, nil, :BigDecimal), :EXCEPTION_NaN),
              s(:false)),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:const, nil, :BigMath), :log,
                  s(:const,
                    s(:const, nil, :Float), :NAN),
                  s(:int, 20)), :nan?))))),
      s(:def, :test_BigMath_log_with_1,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_delta,
            s(:float, 0.0),
            s(:send,
              s(:const, nil, :BigMath), :log,
              s(:int, 1),
              s(:int, 20))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.0),
            s(:send,
              s(:const, nil, :BigMath), :log,
              s(:float, 1.0),
              s(:int, 20))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.0),
            s(:send,
              s(:const, nil, :BigMath), :log,
              s(:send, nil, :BigDecimal,
                s(:int, 1)),
              s(:int, 20))))),
      s(:def, :test_BigMath_log_with_exp_1,
        s(:args),
        s(:send, nil, :assert_in_delta,
          s(:float, 1.0),
          s(:send,
            s(:const, nil, :BigMath), :log,
            s(:send,
              s(:const, nil, :BigMath), :E,
              s(:int, 10)),
            s(:int, 10)))),
      s(:def, :test_BigMath_log_with_2,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:const, nil, :Math), :log,
              s(:int, 2)),
            s(:send,
              s(:const, nil, :BigMath), :log,
              s(:int, 2),
              s(:int, 20))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:const, nil, :Math), :log,
              s(:int, 2)),
            s(:send,
              s(:const, nil, :BigMath), :log,
              s(:float, 2.0),
              s(:int, 20))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:const, nil, :Math), :log,
              s(:int, 2)),
            s(:send,
              s(:const, nil, :BigMath), :log,
              s(:send, nil, :BigDecimal,
                s(:int, 2)),
              s(:int, 20))))),
      s(:def, :test_BigMath_log_with_square_of_E,
        s(:args),
        s(:send, nil, :assert_in_delta,
          s(:int, 2),
          s(:send,
            s(:const, nil, :BigMath), :log,
            s(:send,
              s(:send,
                s(:const, nil, :BigMath), :E,
                s(:int, 20)), :**,
              s(:int, 2)),
            s(:int, 20)))),
      s(:def, :test_BigMath_log_with_high_precision_case,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:send, nil, :BigDecimal,
              s(:str, "2.71828182845904523536028747135266249775724709369996"))),
          s(:lvasgn, :e_3,
            s(:send,
              s(:send,
                s(:lvar, :e), :mult,
                s(:lvar, :e),
                s(:int, 50)), :mult,
              s(:lvar, :e),
              s(:int, 50))),
          s(:lvasgn, :log_3,
            s(:send,
              s(:const, nil, :BigMath), :log,
              s(:lvar, :e_3),
              s(:int, 50))),
          s(:send, nil, :assert_in_delta,
            s(:int, 3),
            s(:lvar, :log_3),
            s(:float, 1.0e-50)))),
      s(:def, :test_BigMath_log_with_42,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:const, nil, :Math), :log,
              s(:int, 42)),
            s(:send,
              s(:const, nil, :BigMath), :log,
              s(:int, 42),
              s(:int, 20))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:const, nil, :Math), :log,
              s(:int, 42)),
            s(:send,
              s(:const, nil, :BigMath), :log,
              s(:float, 42.0),
              s(:int, 20))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:const, nil, :Math), :log,
              s(:int, 42)),
            s(:send,
              s(:const, nil, :BigMath), :log,
              s(:send, nil, :BigDecimal,
                s(:int, 42)),
              s(:int, 20))))),
      s(:def, :test_BigMath_log_with_101,
        s(:args),
        s(:send, nil, :assert_in_delta,
          s(:send,
            s(:const, nil, :Math), :log,
            s(:int, 101)),
          s(:send,
            s(:const, nil, :BigMath), :log,
            s(:int, 101),
            s(:int, 20)),
          s(:float, 1.0e-15))),
      s(:def, :test_BigMath_log_with_reciprocal_of_42,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:const, nil, :Math), :log,
              s(:float, 1.0e-42)),
            s(:send,
              s(:const, nil, :BigMath), :log,
              s(:float, 1.0e-42),
              s(:int, 20))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:const, nil, :Math), :log,
              s(:float, 1.0e-42)),
            s(:send,
              s(:const, nil, :BigMath), :log,
              s(:send, nil, :BigDecimal,
                s(:str, "1e-42")),
              s(:int, 20))))),
      s(:def, :test_BigMath_log_under_gc_stress,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array,
            s(:str, "-rbigdecimal"),
            s(:str, "--disable-gems")),
          s(:dstr,
            s(:str, "      expect = \":too_long_to_embed_as_string can't be coerced into BigDecimal\"\n"),
            s(:str, "      10.times do\n"),
            s(:str, "        begin\n"),
            s(:str, "          BigMath.log(:too_long_to_embed_as_string, 6)\n"),
            s(:str, "        rescue => e\n"),
            s(:str, "          raise unless e.is_a?(ArgumentError)\n"),
            s(:str, "          raise \"'\#{expect}' is expected, but '\#{e.message}'\" unless e.message == expect\n"),
            s(:str, "        end\n"),
            s(:str, "      end\n")),
          s(:array),
          s(:array))),
      s(:def, :test_dup,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:int, 1),
              s(:int, -1),
              s(:send,
                s(:int, 2), :**,
                s(:int, 100)),
              s(:send,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 100)), :-@)), :each),
          s(:args,
            s(:arg, :i)),
          s(:begin,
            s(:lvasgn, :x,
              s(:send, nil, :BigDecimal,
                s(:lvar, :i))),
            s(:send, nil, :assert_equal,
              s(:lvar, :x),
              s(:send,
                s(:lvar, :x), :dup))))),
      s(:def, :test_dup_subclass,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :Class), :new,
              s(:const, nil, :BigDecimal))),
          s(:lvasgn, :x,
            s(:send,
              s(:lvar, :c), :new,
              s(:int, 1))),
          s(:lvasgn, :y,
            s(:send,
              s(:lvar, :x), :dup)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:lvar, :y)),
          s(:send, nil, :assert_kind_of,
            s(:lvar, :c),
            s(:lvar, :y)))),
      s(:def, :test_to_d,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6093,
            s(:str, "[ruby-core:42969]")),
          s(:lvasgn, :code,
            s(:str, "exit(BigDecimal.new('10.0') == 10.0.to_d)")),
          s(:send, nil, :assert_ruby_status,
            s(:array,
              s(:str, "-rbigdecimal"),
              s(:str, "-rbigdecimal/util"),
              s(:str, "-rmathn"),
              s(:str, "-")),
            s(:lvar, :code),
            s(:lvar, :bug6093)))),
      s(:def, :test_bug6406,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array,
            s(:str, "-rbigdecimal"),
            s(:str, "--disable-gems")),
          s(:str, "    Thread.current.keys.to_s\n"),
          s(:array),
          s(:array))),
      s(:def, :assert_no_memory_leak,
        s(:args,
          s(:arg, :code),
          s(:restarg, :rest),
          s(:kwrestarg, :opt)),
        s(:begin,
          s(:lvasgn, :code,
            s(:dstr,
              s(:str, "8.times {20_000.times {begin "),
              s(:begin,
                s(:lvar, :code)),
              s(:str, "; rescue NoMemoryError; end}; GC.start}"))),
          s(:super,
            s(:array,
              s(:str, "-rbigdecimal")),
            s(:dstr,
              s(:str, "b = BigDecimal('10'); b.nil?; "),
              s(:str, "GC.add_stress_to_class(BigDecimal); "),
              s(:dstr,
                s(:begin,
                  s(:lvar, :code)))),
            s(:lvar, :code),
            s(:splat,
              s(:lvar, :rest)),
            s(:hash,
              s(:pair,
                s(:sym, :rss),
                s(:true)),
              s(:pair,
                s(:sym, :limit),
                s(:float, 1.1)),
              s(:kwsplat,
                s(:lvar, :opt)))))),
      s(:if,
        s(:send,
          s(:const, nil, :EnvUtil), :gc_stress_to_class?),
        s(:begin,
          s(:def, :test_no_memory_leak_allocate,
            s(:args),
            s(:send, nil, :assert_no_memory_leak,
              s(:str, "BigDecimal.allocate"))),
          s(:def, :test_no_memory_leak_initialize,
            s(:args),
            s(:send, nil, :assert_no_memory_leak,
              s(:str, "BigDecimal.new"))),
          s(:def, :test_no_memory_leak_global_new,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_no_memory_leak,
                s(:str, "BigDecimal('10')")),
              s(:send, nil, :assert_no_memory_leak,
                s(:str, "BigDecimal(b)")))),
          s(:def, :test_no_memory_leak_create,
            s(:args),
            s(:send, nil, :assert_no_memory_leak,
              s(:str, "b + 10")))), nil))))
