s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "testbase")),
  s(:send, nil, :require,
    s(:str, "bigdecimal/math")),
  s(:class,
    s(:const, nil, :TestBigMath),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :TestBigDecimalBase)),
      s(:send, nil, :include,
        s(:const, nil, :BigMath)),
      s(:casgn, nil, :N,
        s(:int, 20)),
      s(:casgn, nil, :PINF,
        s(:send, nil, :BigDecimal,
          s(:str, "+Infinity"))),
      s(:casgn, nil, :MINF,
        s(:send, nil, :BigDecimal,
          s(:str, "-Infinity"))),
      s(:casgn, nil, :NAN,
        s(:send, nil, :BigDecimal,
          s(:str, "NaN"))),
      s(:def, :test_const,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_delta,
            s(:const,
              s(:const, nil, :Math), :PI),
            s(:send, nil, :PI,
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:const,
              s(:const, nil, :Math), :E),
            s(:send, nil, :E,
              s(:const, nil, :N))))),
      s(:def, :test_sqrt,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:int, 2), :**,
              s(:float, 0.5)),
            s(:send, nil, :sqrt,
              s(:send, nil, :BigDecimal,
                s(:str, "2")),
              s(:const, nil, :N))),
          s(:send, nil, :assert_equal,
            s(:int, 10),
            s(:send, nil, :sqrt,
              s(:send, nil, :BigDecimal,
                s(:str, "100")),
              s(:const, nil, :N))),
          s(:send, nil, :assert_equal,
            s(:float, 0.0),
            s(:send, nil, :sqrt,
              s(:send, nil, :BigDecimal,
                s(:str, "0")),
              s(:const, nil, :N))),
          s(:send, nil, :assert_equal,
            s(:float, 0.0),
            s(:send, nil, :sqrt,
              s(:send, nil, :BigDecimal,
                s(:str, "-0")),
              s(:const, nil, :N))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send, nil, :sqrt,
              s(:send, nil, :BigDecimal,
                s(:str, "-1.0")),
              s(:const, nil, :N))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send, nil, :sqrt,
              s(:const, nil, :NAN),
              s(:const, nil, :N))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :FloatDomainError)),
            s(:args),
            s(:send, nil, :sqrt,
              s(:const, nil, :PINF),
              s(:const, nil, :N))))),
      s(:def, :test_sin,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_delta,
            s(:float, 0.0),
            s(:send, nil, :sin,
              s(:send, nil, :BigDecimal,
                s(:str, "0.0")),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:send,
                s(:const, nil, :Math), :sqrt,
                s(:float, 2.0)), :/,
              s(:int, 2)),
            s(:send, nil, :sin,
              s(:send,
                s(:send, nil, :PI,
                  s(:const, nil, :N)), :/,
                s(:int, 4)),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:float, 1.0),
            s(:send, nil, :sin,
              s(:send,
                s(:send, nil, :PI,
                  s(:const, nil, :N)), :/,
                s(:int, 2)),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.0),
            s(:send, nil, :sin,
              s(:send,
                s(:send, nil, :PI,
                  s(:const, nil, :N)), :*,
                s(:int, 2)),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.0),
            s(:send, nil, :sin,
              s(:send, nil, :PI,
                s(:const, nil, :N)),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:float, -1.0),
            s(:send, nil, :sin,
              s(:send,
                s(:send, nil, :PI,
                  s(:const, nil, :N)), :/,
                s(:int, -2)),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.0),
            s(:send, nil, :sin,
              s(:send,
                s(:send, nil, :PI,
                  s(:const, nil, :N)), :*,
                s(:int, -2)),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.0),
            s(:send, nil, :sin,
              s(:send,
                s(:send, nil, :PI,
                  s(:const, nil, :N)), :-@),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.0),
            s(:send, nil, :sin,
              s(:send,
                s(:send, nil, :PI,
                  s(:const, nil, :N)), :*,
                s(:int, 21)),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.0),
            s(:send, nil, :sin,
              s(:send,
                s(:send, nil, :PI,
                  s(:const, nil, :N)), :*,
                s(:int, 30)),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:float, -1.0),
            s(:send, nil, :sin,
              s(:send,
                s(:send, nil, :PI,
                  s(:const, nil, :N)), :*,
                s(:send, nil, :BigDecimal,
                  s(:str, "301.5"))),
              s(:const, nil, :N))))),
      s(:def, :test_cos,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_delta,
            s(:float, 1.0),
            s(:send, nil, :cos,
              s(:send, nil, :BigDecimal,
                s(:str, "0.0")),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:send,
                s(:const, nil, :Math), :sqrt,
                s(:float, 2.0)), :/,
              s(:int, 2)),
            s(:send, nil, :cos,
              s(:send,
                s(:send, nil, :PI,
                  s(:const, nil, :N)), :/,
                s(:int, 4)),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.0),
            s(:send, nil, :cos,
              s(:send,
                s(:send, nil, :PI,
                  s(:const, nil, :N)), :/,
                s(:int, 2)),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:float, 1.0),
            s(:send, nil, :cos,
              s(:send,
                s(:send, nil, :PI,
                  s(:const, nil, :N)), :*,
                s(:int, 2)),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:float, -1.0),
            s(:send, nil, :cos,
              s(:send, nil, :PI,
                s(:const, nil, :N)),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.0),
            s(:send, nil, :cos,
              s(:send,
                s(:send, nil, :PI,
                  s(:const, nil, :N)), :/,
                s(:int, -2)),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:float, 1.0),
            s(:send, nil, :cos,
              s(:send,
                s(:send, nil, :PI,
                  s(:const, nil, :N)), :*,
                s(:int, -2)),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:float, -1.0),
            s(:send, nil, :cos,
              s(:send,
                s(:send, nil, :PI,
                  s(:const, nil, :N)), :-@),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:float, -1.0),
            s(:send, nil, :cos,
              s(:send,
                s(:send, nil, :PI,
                  s(:const, nil, :N)), :*,
                s(:int, 21)),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:float, 1.0),
            s(:send, nil, :cos,
              s(:send,
                s(:send, nil, :PI,
                  s(:const, nil, :N)), :*,
                s(:int, 30)),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.0),
            s(:send, nil, :cos,
              s(:send,
                s(:send, nil, :PI,
                  s(:const, nil, :N)), :*,
                s(:send, nil, :BigDecimal,
                  s(:str, "301.5"))),
              s(:const, nil, :N))))),
      s(:def, :test_atan,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:float, 0.0),
            s(:send, nil, :atan,
              s(:send, nil, :BigDecimal,
                s(:str, "0.0")),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:const,
                s(:const, nil, :Math), :PI), :/,
              s(:int, 4)),
            s(:send, nil, :atan,
              s(:send, nil, :BigDecimal,
                s(:str, "1.0")),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:const,
                s(:const, nil, :Math), :PI), :/,
              s(:int, 6)),
            s(:send, nil, :atan,
              s(:send,
                s(:send, nil, :sqrt,
                  s(:send, nil, :BigDecimal,
                    s(:str, "3.0")),
                  s(:const, nil, :N)), :/,
                s(:int, 3)),
              s(:const, nil, :N))),
          s(:send, nil, :assert_in_delta,
            s(:send,
              s(:const,
                s(:const, nil, :Math), :PI), :/,
              s(:int, 2)),
            s(:send, nil, :atan,
              s(:const, nil, :PINF),
              s(:const, nil, :N))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :BigDecimal,
              s(:str, "0.823840753418636291769355073102514088959345624027952954058347023122539489")),
            s(:send,
              s(:send, nil, :atan,
                s(:send, nil, :BigDecimal,
                  s(:str, "1.08")),
                s(:int, 72)), :round,
              s(:int, 72)),
            s(:str, "[ruby-dev:41257]")))),
      s(:def, :test_log,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:const, nil, :BigMath), :log,
              s(:send, nil, :BigDecimal,
                s(:str, "1.0")),
              s(:int, 10))),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:send,
                s(:const, nil, :Math), :log,
                s(:int, 10)), :*,
              s(:int, 1000)),
            s(:send,
              s(:const, nil, :BigMath), :log,
              s(:send, nil, :BigDecimal,
                s(:str, "1e1000")),
              s(:int, 10))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Math), :DomainError)),
            s(:args),
            s(:send,
              s(:const, nil, :BigMath), :log,
              s(:send, nil, :BigDecimal,
                s(:str, "0")),
              s(:int, 10))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Math), :DomainError)),
            s(:args),
            s(:send,
              s(:const, nil, :BigMath), :log,
              s(:send, nil, :BigDecimal,
                s(:str, "-1")),
              s(:int, 10))),
          s(:send, nil, :assert_separately,
            s(:array,
              s(:str, "-rbigdecimal")),
            s(:dstr,
              s(:str, "    begin\n"),
              s(:str, "      x = BigMath.log(BigDecimal(\"1E19999999999999\"), 10)\n"),
              s(:str, "    rescue FloatDomainError\n"),
              s(:str, "    else\n"),
              s(:str, "      unless x.infinite?\n"),
              s(:str, "        assert_in_epsilon(Math.log(10)*19999999999999, x)\n"),
              s(:str, "      end\n"),
              s(:str, "    end\n"))))))))
