s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "objspace")),
  s(:class,
    s(:const, nil, :TestObjSpace),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_memsize_of,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:const, nil, :ObjectSpace), :memsize_of,
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:const, nil, :ObjectSpace), :memsize_of,
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:const, nil, :ObjectSpace), :memsize_of,
              s(:int, 1))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:send,
              s(:const, nil, :ObjectSpace), :memsize_of,
              s(:send,
                s(:const, nil, :Object), :new))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:send,
              s(:const, nil, :ObjectSpace), :memsize_of,
              s(:const, nil, :Class))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:send,
              s(:const, nil, :ObjectSpace), :memsize_of,
              s(:str, ""))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:send,
              s(:const, nil, :ObjectSpace), :memsize_of,
              s(:array))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:send,
              s(:const, nil, :ObjectSpace), :memsize_of,
              s(:hash))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:send,
              s(:const, nil, :ObjectSpace), :memsize_of,
              s(:regexp,
                s(:regopt)))),
          s(:lvasgn, :f,
            s(:send,
              s(:const, nil, :File), :new,
              s(:str, "(string)"))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:send,
              s(:const, nil, :ObjectSpace), :memsize_of,
              s(:lvar, :f))),
          s(:send,
            s(:lvar, :f), :close),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:send,
              s(:const, nil, :ObjectSpace), :memsize_of,
              s(:send,
                s(:regexp,
                  s(:str, "a"),
                  s(:regopt)), :match,
                s(:str, "a")))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:send,
              s(:const, nil, :ObjectSpace), :memsize_of,
              s(:send,
                s(:const, nil, :Struct), :new,
                s(:sym, :a)))),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:const, nil, :ObjectSpace), :memsize_of,
              s(:send,
                s(:send,
                  s(:const, nil, :Regexp), :new,
                  s(:send,
                    s(:str, "(a)"), :*,
                    s(:int, 1000))), :match,
                s(:send,
                  s(:str, "a"), :*,
                  s(:int, 1000)))),
            s(:sym, :>),
            s(:send,
              s(:const, nil, :ObjectSpace), :memsize_of,
              s(:send,
                s(:regexp,
                  s(:regopt)), :match,
                s(:str, "")))))),
      s(:def, :test_memsize_of_root_shared_string,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:str, "hello"), :*,
              s(:int, 5))),
          s(:lvasgn, :b,
            s(:send,
              s(:lvar, :a), :dup)),
          s(:lvasgn, :c,
            s(:nil)),
          s(:block,
            s(:send,
              s(:const, nil, :ObjectSpace), :each_object,
              s(:const, nil, :String)),
            s(:args,
              s(:arg, :x)),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :x), :==,
                  s(:lvar, :a)),
                s(:send,
                  s(:lvar, :x), :frozen?)),
              s(:break,
                s(:lvasgn, :c,
                  s(:lvar, :x))), nil)),
          s(:lvasgn, :rv_size,
            s(:send,
              s(:const,
                s(:const, nil, :GC), :INTERNAL_CONSTANTS), :[],
              s(:sym, :RVALUE_SIZE))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :rv_size),
              s(:lvar, :rv_size),
              s(:send,
                s(:int, 26), :+,
                s(:lvar, :rv_size))),
            s(:block,
              s(:send,
                s(:array,
                  s(:lvar, :a),
                  s(:lvar, :b),
                  s(:lvar, :c)), :map),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:const, nil, :ObjectSpace), :memsize_of,
                s(:lvar, :x)))))),
      s(:def, :test_argf_memsize,
        s(:args),
        s(:begin,
          s(:lvasgn, :size,
            s(:send,
              s(:const, nil, :ObjectSpace), :memsize_of,
              s(:const, nil, :ARGF))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:lvar, :size)),
          s(:send, nil, :assert_operator,
            s(:lvar, :size),
            s(:sym, :>),
            s(:int, 0)),
          s(:lvasgn, :argf,
            s(:send,
              s(:const, nil, :ARGF), :dup)),
          s(:send,
            s(:lvar, :argf), :inplace_mode=,
            s(:nil)),
          s(:lvasgn, :size,
            s(:send,
              s(:const, nil, :ObjectSpace), :memsize_of,
              s(:lvar, :argf))),
          s(:send,
            s(:lvar, :argf), :inplace_mode=,
            s(:str, "inplace_mode_suffix")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :size), :+,
              s(:int, 20)),
            s(:send,
              s(:const, nil, :ObjectSpace), :memsize_of,
              s(:lvar, :argf))))),
      s(:def, :test_memsize_of_all,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :ObjectSpace), :memsize_of_all))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:lvasgn, :b,
              s(:send,
                s(:const, nil, :ObjectSpace), :memsize_of_all,
                s(:const, nil, :String)))),
          s(:send, nil, :assert_operator,
            s(:lvar, :a),
            s(:sym, :>),
            s(:lvar, :b)),
          s(:send, nil, :assert_operator,
            s(:lvar, :a),
            s(:sym, :>),
            s(:int, 0)),
          s(:send, nil, :assert_operator,
            s(:lvar, :b),
            s(:sym, :>),
            s(:int, 0)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :ObjectSpace), :memsize_of_all,
              s(:str, "error"))))),
      s(:def, :test_count_objects_size,
        s(:args),
        s(:begin,
          s(:lvasgn, :res,
            s(:send,
              s(:const, nil, :ObjectSpace), :count_objects_size)),
          s(:send, nil, :assert_not_empty,
            s(:lvar, :res)),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:lvar, :res), :[],
              s(:sym, :TOTAL)),
            s(:sym, :>),
            s(:int, 0)),
          s(:lvasgn, :arg,
            s(:hash)),
          s(:send,
            s(:const, nil, :ObjectSpace), :count_objects_size,
            s(:lvar, :arg)),
          s(:send, nil, :assert_not_empty,
            s(:lvar, :arg)))),
      s(:if,
        s(:false),
        s(:def, :test_count_nodes,
          s(:args),
          s(:begin,
            s(:lvasgn, :res,
              s(:send,
                s(:const, nil, :ObjectSpace), :count_nodes)),
            s(:send, nil, :assert_not_empty,
              s(:lvar, :res)),
            s(:lvasgn, :arg,
              s(:hash)),
            s(:send,
              s(:const, nil, :ObjectSpace), :count_nodes,
              s(:lvar, :arg)),
            s(:send, nil, :assert_not_empty,
              s(:lvar, :arg)),
            s(:lvasgn, :bug8014,
              s(:str, "[ruby-core:53130] [Bug #8014]")),
            s(:send, nil, :assert_empty,
              s(:block,
                s(:send,
                  s(:lvar, :arg), :select),
                s(:args,
                  s(:arg, :k),
                  s(:arg, :v)),
                s(:send,
                  s(:begin,
                    s(:and,
                      s(:send,
                        s(:const, nil, :Symbol), :===,
                        s(:lvar, :k)),
                      s(:send,
                        s(:const, nil, :Integer), :===,
                        s(:lvar, :v)))), :!)),
              s(:lvar, :bug8014)))), nil),
      s(:def, :test_count_tdata_objects,
        s(:args),
        s(:begin,
          s(:lvasgn, :res,
            s(:send,
              s(:const, nil, :ObjectSpace), :count_tdata_objects)),
          s(:send, nil, :assert_not_empty,
            s(:lvar, :res)),
          s(:lvasgn, :arg,
            s(:hash)),
          s(:send,
            s(:const, nil, :ObjectSpace), :count_tdata_objects,
            s(:lvar, :arg)),
          s(:send, nil, :assert_not_empty,
            s(:lvar, :arg)))),
      s(:def, :test_count_imemo_objects,
        s(:args),
        s(:begin,
          s(:lvasgn, :res,
            s(:send,
              s(:const, nil, :ObjectSpace), :count_imemo_objects)),
          s(:send, nil, :assert_not_empty,
            s(:lvar, :res)),
          s(:send, nil, :assert_not_nil,
            s(:send,
              s(:lvar, :res), :[],
              s(:sym, :imemo_cref))),
          s(:lvasgn, :arg,
            s(:hash)),
          s(:lvasgn, :res,
            s(:send,
              s(:const, nil, :ObjectSpace), :count_imemo_objects,
              s(:lvar, :arg))),
          s(:send, nil, :assert_not_empty,
            s(:lvar, :res)))),
      s(:def, :test_memsize_of_iseq,
        s(:args),
        s(:begin,
          s(:lvasgn, :iseqw,
            s(:send,
              s(:const,
                s(:const, nil, :RubyVM), :InstructionSequence), :compile,
              s(:str, "def a; a = :b; end"))),
          s(:lvasgn, :base_obj_size,
            s(:send,
              s(:const, nil, :ObjectSpace), :memsize_of,
              s(:send,
                s(:const, nil, :Object), :new))),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:const, nil, :ObjectSpace), :memsize_of,
              s(:lvar, :iseqw)),
            s(:sym, :>),
            s(:lvar, :base_obj_size)))),
      s(:def, :test_reachable_objects_from,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array,
            s(:str, "--disable-gem"),
            s(:str, "-robjspace")),
          s(:str, "(string)"),
          s(:int, 99),
          s(:dstr,
            s(:str, "    assert_equal(nil, ObjectSpace.reachable_objects_from(nil))\n"),
            s(:str, "    assert_equal([Array, 'a', 'b', 'c'], ObjectSpace.reachable_objects_from(['a', 'b', 'c']))\n"),
            s(:str, "\n"),
            s(:str, "    assert_equal([Array, 'a', 'a', 'a'], ObjectSpace.reachable_objects_from(['a', 'a', 'a']))\n"),
            s(:str, "    assert_equal([Array, 'a', 'a'], ObjectSpace.reachable_objects_from(['a', v = 'a', v]))\n"),
            s(:str, "    assert_equal([Array, 'a'], ObjectSpace.reachable_objects_from([v = 'a', v, v]))\n"),
            s(:str, "\n"),
            s(:str, "    long_ary = Array.new(1_000){''}\n"),
            s(:str, "    max = 0\n"),
            s(:str, "\n"),
            s(:str, "    ObjectSpace.each_object{|o|\n"),
            s(:str, "      refs = ObjectSpace.reachable_objects_from(o)\n"),
            s(:str, "      max = [refs.size, max].max\n"),
            s(:str, "\n"),
            s(:str, "      unless refs.nil?\n"),
            s(:str, "        refs.each_with_index {|ro, i|\n"),
            s(:str, "          assert_not_nil(ro, \"\#{i}: this referenced object is internal object\")\n"),
            s(:str, "        }\n"),
            s(:str, "      end\n"),
            s(:str, "    }\n"),
            s(:str, "    assert_operator(max, :>=, long_ary.size+1, \"1000 elems + Array class\")\n")))),
      s(:def, :test_reachable_objects_from_root,
        s(:args),
        s(:begin,
          s(:lvasgn, :root_objects,
            s(:send,
              s(:const, nil, :ObjectSpace), :reachable_objects_from_root)),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:lvar, :root_objects), :size),
            s(:sym, :>),
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:lvar, :root_objects), :each),
            s(:args,
              s(:arg, :category),
              s(:arg, :objects)),
            s(:begin,
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :String),
                s(:lvar, :category)),
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :Array),
                s(:lvar, :objects)),
              s(:send, nil, :assert_operator,
                s(:send,
                  s(:lvar, :objects), :size),
                s(:sym, :>),
                s(:int, 0)))))),
      s(:def, :test_reachable_objects_size,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array,
            s(:str, "--disable-gem"),
            s(:str, "-robjspace")),
          s(:str, "(string)"),
          s(:int, 137),
          s(:dstr,
            s(:str, "    ObjectSpace.each_object{|o|\n"),
            s(:str, "      ObjectSpace.reachable_objects_from(o).each{|reached_obj|\n"),
            s(:str, "        size = ObjectSpace.memsize_of(reached_obj)\n"),
            s(:str, "        assert_kind_of(Integer, size)\n"),
            s(:str, "        assert_operator(size, :>=, 0)\n"),
            s(:str, "      }\n"),
            s(:str, "    }\n")))),
      s(:def, :test_trace_object_allocations,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :Class), :name),
          s(:lvasgn, :o0,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send,
              s(:const, nil, :ObjectSpace), :trace_object_allocations),
            s(:args),
            s(:begin,
              s(:lvasgn, :o1,
                s(:send,
                  s(:const, nil, :Object), :new)),
              s(:lvasgn, :line1,
                s(:int, 152)),
              s(:lvasgn, :c1,
                s(:send,
                  s(:const, nil, :GC), :count)),
              s(:lvasgn, :o2,
                s(:str, "xyzzy")),
              s(:lvasgn, :line2,
                s(:int, 153)),
              s(:lvasgn, :c2,
                s(:send,
                  s(:const, nil, :GC), :count)),
              s(:lvasgn, :o3,
                s(:array,
                  s(:int, 1),
                  s(:int, 2))),
              s(:lvasgn, :line3,
                s(:int, 154)),
              s(:lvasgn, :c3,
                s(:send,
                  s(:const, nil, :GC), :count)),
              s(:send, nil, :assert_equal,
                s(:nil),
                s(:send,
                  s(:const, nil, :ObjectSpace), :allocation_sourcefile,
                  s(:lvar, :o0))),
              s(:send, nil, :assert_equal,
                s(:nil),
                s(:send,
                  s(:const, nil, :ObjectSpace), :allocation_sourceline,
                  s(:lvar, :o0))),
              s(:send, nil, :assert_equal,
                s(:nil),
                s(:send,
                  s(:const, nil, :ObjectSpace), :allocation_generation,
                  s(:lvar, :o0))),
              s(:send, nil, :assert_equal,
                s(:lvar, :line1),
                s(:send,
                  s(:const, nil, :ObjectSpace), :allocation_sourceline,
                  s(:lvar, :o1))),
              s(:send, nil, :assert_equal,
                s(:str, "(string)"),
                s(:send,
                  s(:const, nil, :ObjectSpace), :allocation_sourcefile,
                  s(:lvar, :o1))),
              s(:send, nil, :assert_equal,
                s(:lvar, :c1),
                s(:send,
                  s(:const, nil, :ObjectSpace), :allocation_generation,
                  s(:lvar, :o1))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :Class), :name),
                s(:send,
                  s(:const, nil, :ObjectSpace), :allocation_class_path,
                  s(:lvar, :o1))),
              s(:send, nil, :assert_equal,
                s(:sym, :new),
                s(:send,
                  s(:const, nil, :ObjectSpace), :allocation_method_id,
                  s(:lvar, :o1))),
              s(:send, nil, :assert_equal,
                s(:str, "(string)"),
                s(:send,
                  s(:const, nil, :ObjectSpace), :allocation_sourcefile,
                  s(:lvar, :o2))),
              s(:send, nil, :assert_equal,
                s(:lvar, :line2),
                s(:send,
                  s(:const, nil, :ObjectSpace), :allocation_sourceline,
                  s(:lvar, :o2))),
              s(:send, nil, :assert_equal,
                s(:lvar, :c2),
                s(:send,
                  s(:const, nil, :ObjectSpace), :allocation_generation,
                  s(:lvar, :o2))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:self), :class), :name),
                s(:send,
                  s(:const, nil, :ObjectSpace), :allocation_class_path,
                  s(:lvar, :o2))),
              s(:send, nil, :assert_equal,
                s(:send, nil, :__method__),
                s(:send,
                  s(:const, nil, :ObjectSpace), :allocation_method_id,
                  s(:lvar, :o2))),
              s(:send, nil, :assert_equal,
                s(:str, "(string)"),
                s(:send,
                  s(:const, nil, :ObjectSpace), :allocation_sourcefile,
                  s(:lvar, :o3))),
              s(:send, nil, :assert_equal,
                s(:lvar, :line3),
                s(:send,
                  s(:const, nil, :ObjectSpace), :allocation_sourceline,
                  s(:lvar, :o3))),
              s(:send, nil, :assert_equal,
                s(:lvar, :c3),
                s(:send,
                  s(:const, nil, :ObjectSpace), :allocation_generation,
                  s(:lvar, :o3))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:self), :class), :name),
                s(:send,
                  s(:const, nil, :ObjectSpace), :allocation_class_path,
                  s(:lvar, :o3))),
              s(:send, nil, :assert_equal,
                s(:send, nil, :__method__),
                s(:send,
                  s(:const, nil, :ObjectSpace), :allocation_method_id,
                  s(:lvar, :o3))))))),
      s(:def, :test_trace_object_allocations_start_stop_clear,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send,
              s(:const, nil, :ObjectSpace), :trace_object_allocations_clear),
            s(:send,
              s(:const, nil, :GC), :disable),
            s(:kwbegin,
              s(:ensure,
                s(:begin,
                  s(:send,
                    s(:const, nil, :ObjectSpace), :trace_object_allocations_start),
                  s(:kwbegin,
                    s(:ensure,
                      s(:begin,
                        s(:send,
                          s(:const, nil, :ObjectSpace), :trace_object_allocations_start),
                        s(:kwbegin,
                          s(:ensure,
                            s(:begin,
                              s(:send,
                                s(:const, nil, :ObjectSpace), :trace_object_allocations_start),
                              s(:lvasgn, :obj0,
                                s(:send,
                                  s(:const, nil, :Object), :new))),
                            s(:begin,
                              s(:send,
                                s(:const, nil, :ObjectSpace), :trace_object_allocations_stop),
                              s(:lvasgn, :obj1,
                                s(:send,
                                  s(:const, nil, :Object), :new)))))),
                      s(:begin,
                        s(:send,
                          s(:const, nil, :ObjectSpace), :trace_object_allocations_stop),
                        s(:lvasgn, :obj2,
                          s(:send,
                            s(:const, nil, :Object), :new)))))),
                s(:begin,
                  s(:send,
                    s(:const, nil, :ObjectSpace), :trace_object_allocations_stop),
                  s(:lvasgn, :obj3,
                    s(:send,
                      s(:const, nil, :Object), :new))))),
            s(:send, nil, :assert_equal,
              s(:str, "(string)"),
              s(:send,
                s(:const, nil, :ObjectSpace), :allocation_sourcefile,
                s(:lvar, :obj0))),
            s(:send, nil, :assert_equal,
              s(:str, "(string)"),
              s(:send,
                s(:const, nil, :ObjectSpace), :allocation_sourcefile,
                s(:lvar, :obj1))),
            s(:send, nil, :assert_equal,
              s(:str, "(string)"),
              s(:send,
                s(:const, nil, :ObjectSpace), :allocation_sourcefile,
                s(:lvar, :obj2))),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:const, nil, :ObjectSpace), :allocation_sourcefile,
                s(:lvar, :obj3))),
            s(:send,
              s(:const, nil, :ObjectSpace), :trace_object_allocations_clear),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:const, nil, :ObjectSpace), :allocation_sourcefile,
                s(:lvar, :obj0))),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:const, nil, :ObjectSpace), :allocation_sourcefile,
                s(:lvar, :obj1))),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:const, nil, :ObjectSpace), :allocation_sourcefile,
                s(:lvar, :obj2))),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:const, nil, :ObjectSpace), :allocation_sourcefile,
                s(:lvar, :obj3)))),
          s(:send,
            s(:const, nil, :GC), :enable))),
      s(:def, :test_dump_flags,
        s(:args),
        s(:begin,
          s(:lvasgn, :info,
            s(:send,
              s(:const, nil, :ObjectSpace), :dump,
              s(:send,
                s(:str, "foo"), :freeze))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\"wb_protected\":true, \"old\":true"),
              s(:regopt)),
            s(:lvar, :info)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\"fstring\":true"),
              s(:regopt)),
            s(:lvar, :info)))),
      s(:def, :test_dump_to_default,
        s(:args),
        s(:begin,
          s(:lvasgn, :line,
            s(:nil)),
          s(:lvasgn, :info,
            s(:nil)),
          s(:block,
            s(:send,
              s(:const, nil, :ObjectSpace), :trace_object_allocations),
            s(:args),
            s(:begin,
              s(:lvasgn, :line,
                s(:send,
                  s(:int, 227), :+,
                  s(:int, 1))),
              s(:lvasgn, :str,
                s(:str, "hello world")),
              s(:lvasgn, :info,
                s(:send,
                  s(:const, nil, :ObjectSpace), :dump,
                  s(:lvar, :str))))),
          s(:send, nil, :assert_dump_object,
            s(:lvar, :info),
            s(:lvar, :line)))),
      s(:def, :test_dump_to_io,
        s(:args),
        s(:begin,
          s(:lvasgn, :line,
            s(:nil)),
          s(:lvasgn, :info,
            s(:block,
              s(:send,
                s(:const, nil, :IO), :pipe),
              s(:args,
                s(:arg, :r),
                s(:arg, :w)),
              s(:begin,
                s(:lvasgn, :th,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :start),
                    s(:args),
                    s(:send,
                      s(:lvar, :r), :read))),
                s(:block,
                  s(:send,
                    s(:const, nil, :ObjectSpace), :trace_object_allocations),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :line,
                      s(:send,
                        s(:int, 239), :+,
                        s(:int, 1))),
                    s(:lvasgn, :str,
                      s(:str, "hello world")),
                    s(:send,
                      s(:const, nil, :ObjectSpace), :dump,
                      s(:lvar, :str),
                      s(:hash,
                        s(:pair,
                          s(:sym, :output),
                          s(:lvar, :w)))))),
                s(:send,
                  s(:lvar, :w), :close),
                s(:send,
                  s(:lvar, :th), :value)))),
          s(:send, nil, :assert_dump_object,
            s(:lvar, :info),
            s(:lvar, :line)))),
      s(:def, :assert_dump_object,
        s(:args,
          s(:arg, :info),
          s(:arg, :line)),
        s(:begin,
          s(:lvasgn, :loc,
            s(:send,
              s(:send, nil, :caller_locations,
                s(:int, 1),
                s(:int, 1)), :[],
              s(:int, 0))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\"type\":\"STRING\""),
              s(:regopt)),
            s(:lvar, :info)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\"embedded\":true, \"bytesize\":11, \"value\":\"hello world\", \"encoding\":\"UTF-8\""),
              s(:regopt)),
            s(:lvar, :info)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\"file\":\""),
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :escape,
                  s(:str, "(string)"))),
              s(:str, "\", \"line\":"),
              s(:begin,
                s(:lvar, :line)),
              s(:regopt)),
            s(:lvar, :info)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\"method\":\""),
              s(:begin,
                s(:send,
                  s(:lvar, :loc), :base_label)),
              s(:str, "\""),
              s(:regopt)),
            s(:lvar, :info)))),
      s(:def, :test_dump_special_consts,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "null"),
            s(:send,
              s(:const, nil, :ObjectSpace), :dump,
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:str, "true"),
            s(:send,
              s(:const, nil, :ObjectSpace), :dump,
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:str, "false"),
            s(:send,
              s(:const, nil, :ObjectSpace), :dump,
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:str, "0"),
            s(:send,
              s(:const, nil, :ObjectSpace), :dump,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "{\"type\":\"SYMBOL\", \"value\":\"foo\"}"),
            s(:send,
              s(:const, nil, :ObjectSpace), :dump,
              s(:sym, :foo))))),
      s(:def, :test_dump_dynamic_symbol,
        s(:args),
        s(:begin,
          s(:lvasgn, :dump,
            s(:send,
              s(:const, nil, :ObjectSpace), :dump,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:str, "foobar%x"), :%,
                    s(:send, nil, :rand,
                      s(:int, 65536)))), :to_sym))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\"type\":\"SYMBOL\""),
              s(:regopt)),
            s(:lvar, :dump)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\"value\":\"foobar\\h+\""),
              s(:regopt)),
            s(:lvar, :dump)))),
      s(:def, :test_dump_all,
        s(:args),
        s(:begin,
          s(:lvasgn, :entry,
            s(:regexp,
              s(:str, "\"bytesize\":11, \"value\":\"TEST STRING\", \"encoding\":\"UTF-8\", \"file\":\"-\", \"line\":4, \"method\":\"dump_my_heap_please\", \"generation\":"),
              s(:regopt))),
          s(:block,
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-robjspace")),
              s(:dstr,
                s(:str, "      def dump_my_heap_please\n"),
                s(:str, "        ObjectSpace.trace_object_allocations_start\n"),
                s(:str, "        GC.start\n"),
                s(:str, "        str = \"TEST STRING\".force_encoding(\"UTF-8\")\n"),
                s(:str, "        ObjectSpace.dump_all(output: :stdout)\n"),
                s(:str, "      end\n"),
                s(:str, "\n"),
                s(:str, "      dump_my_heap_please\n"))),
            s(:args,
              s(:arg, :output),
              s(:arg, :error)),
            s(:send, nil, :assert_match,
              s(:lvar, :entry),
              s(:send,
                s(:send,
                  s(:lvar, :output), :grep,
                  s(:regexp,
                    s(:str, "TEST STRING"),
                    s(:regopt))), :join,
                s(:str, "\n")))),
          s(:block,
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-robjspace")),
              s(:dstr,
                s(:str, "      def dump_my_heap_please\n"),
                s(:str, "        ObjectSpace.trace_object_allocations_start\n"),
                s(:str, "        GC.start\n"),
                s(:str, "        str = \"TEST STRING\".force_encoding(\"UTF-8\")\n"),
                s(:str, "        ObjectSpace.dump_all().path\n"),
                s(:str, "      end\n"),
                s(:str, "\n"),
                s(:str, "      puts dump_my_heap_please\n"))),
            s(:args,
              s(:mlhs,
                s(:arg, :output)),
              s(:mlhs,
                s(:arg, :error))),
            s(:begin,
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "is not supported"),
                    s(:regopt)),
                  s(:lvar, :error)),
                s(:send, nil, :skip), nil),
              s(:if,
                s(:lvar, :output), nil,
                s(:send, nil, :skip,
                  s(:lvar, :error))),
              s(:send, nil, :assert_match,
                s(:lvar, :entry),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :readlines,
                      s(:lvar, :output)), :grep,
                    s(:regexp,
                      s(:str, "TEST STRING"),
                      s(:regopt))), :join,
                  s(:str, "\n"))),
              s(:send,
                s(:const, nil, :File), :unlink,
                s(:lvar, :output)))))),
      s(:def, :test_dump_uninitialized_file,
        s(:args),
        s(:block,
          s(:send, nil, :assert_in_out_err,
            s(:str, "-robjspace"),
            s(:str, "      puts ObjectSpace.dump(File.allocate)\n")),
          s(:args,
            s(:mlhs,
              s(:arg, :output)),
            s(:mlhs,
              s(:arg, :error))),
          s(:begin,
            s(:send, nil, :assert_nil,
              s(:lvar, :error)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\"type\":\"FILE\""),
                s(:regopt)),
              s(:lvar, :output)),
            s(:send, nil, :assert_not_match,
              s(:regexp,
                s(:str, "\"fd\":"),
                s(:regopt)),
              s(:lvar, :output))))),
      s(:def, :traverse_classes,
        s(:args,
          s(:arg, :klass)),
        s(:begin,
          s(:lvasgn, :h,
            s(:hash)),
          s(:while,
            s(:and,
              s(:lvar, :klass),
              s(:send,
                s(:send,
                  s(:lvar, :h), :has_key?,
                  s(:lvar, :klass)), :!)),
            s(:begin,
              s(:send,
                s(:lvar, :h), :[]=,
                s(:lvar, :klass),
                s(:true)),
              s(:lvasgn, :klass,
                s(:send,
                  s(:const, nil, :ObjectSpace), :internal_class_of,
                  s(:lvar, :klass))))))),
      s(:def, :test_internal_class_of,
        s(:args),
        s(:begin,
          s(:lvasgn, :i,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:const, nil, :ObjectSpace), :each_object),
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:send, nil, :traverse_classes,
                s(:send,
                  s(:const, nil, :ObjectSpace), :internal_class_of,
                  s(:lvar, :o))),
              s(:op_asgn,
                s(:lvasgn, :i), :+,
                s(:int, 1)))),
          s(:send, nil, :assert_operator,
            s(:lvar, :i),
            s(:sym, :>),
            s(:int, 0)))),
      s(:def, :traverse_super_classes,
        s(:args,
          s(:arg, :klass)),
        s(:while,
          s(:lvar, :klass),
          s(:lvasgn, :klass,
            s(:send,
              s(:const, nil, :ObjectSpace), :internal_super_of,
              s(:lvar, :klass))))),
      s(:def, :all_super_classes,
        s(:args,
          s(:arg, :klass)),
        s(:begin,
          s(:lvasgn, :klasses,
            s(:array)),
          s(:while,
            s(:lvar, :klass),
            s(:begin,
              s(:send,
                s(:lvar, :klasses), :<<,
                s(:lvar, :klass)),
              s(:lvasgn, :klass,
                s(:send,
                  s(:const, nil, :ObjectSpace), :internal_super_of,
                  s(:lvar, :klass))))),
          s(:lvar, :klasses))),
      s(:def, :test_internal_super_of,
        s(:args),
        s(:begin,
          s(:lvasgn, :klasses,
            s(:send, nil, :all_super_classes,
              s(:const, nil, :String))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :String), :ancestors), :each),
            s(:args,
              s(:arg, :k)),
            s(:case,
              s(:lvar, :k),
              s(:when,
                s(:const, nil, :Class),
                s(:send, nil, :assert_equal,
                  s(:true),
                  s(:send,
                    s(:lvar, :klasses), :include?,
                    s(:lvar, :k)),
                  s(:send,
                    s(:lvar, :k), :inspect))),
              s(:when,
                s(:const, nil, :Module),
                s(:send, nil, :assert_equal,
                  s(:false),
                  s(:send,
                    s(:lvar, :klasses), :include?,
                    s(:lvar, :k)),
                  s(:send,
                    s(:lvar, :k), :inspect))), nil)),
          s(:lvasgn, :i,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:const, nil, :ObjectSpace), :each_object,
              s(:const, nil, :Module)),
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:send, nil, :traverse_super_classes,
                s(:send,
                  s(:const, nil, :ObjectSpace), :internal_super_of,
                  s(:lvar, :o))),
              s(:op_asgn,
                s(:lvasgn, :i), :+,
                s(:int, 1)))),
          s(:send, nil, :assert_operator,
            s(:lvar, :i),
            s(:sym, :>),
            s(:int, 0)))),
      s(:def, :test_count_symbols,
        s(:args),
        s(:begin,
          s(:lvasgn, :syms,
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:int, 128))), :map),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:dstr,
                      s(:str, "xyzzy"),
                      s(:begin,
                        s(:lvar, :i))), :*,
                    s(:int, 128))), :to_sym))),
          s(:lvasgn, :c,
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:block,
                s(:send, nil, :define_method,
                  s(:send,
                    s(:lvar, :syms), :[],
                    s(:int, -1))),
                s(:args), nil))),
          s(:lvasgn, :h,
            s(:send,
              s(:const, nil, :ObjectSpace), :count_symbols)),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:lvar, :h), :[],
              s(:sym, :mortal_dynamic_symbol)),
            s(:sym, :>=),
            s(:int, 128),
            s(:send,
              s(:lvar, :h), :inspect)),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:lvar, :h), :[],
              s(:sym, :immortal_dynamic_symbol)),
            s(:sym, :>=),
            s(:int, 1),
            s(:send,
              s(:lvar, :h), :inspect)),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:lvar, :h), :[],
              s(:sym, :immortal_static_symbol)),
            s(:sym, :>=),
            s(:send,
              s(:send,
                s(:const, nil, :Object), :methods), :size),
            s(:send,
              s(:lvar, :h), :inspect)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :h), :[],
              s(:sym, :immortal_symbol)),
            s(:send,
              s(:send,
                s(:lvar, :h), :[],
                s(:sym, :immortal_dynamic_symbol)), :+,
              s(:send,
                s(:lvar, :h), :[],
                s(:sym, :immortal_static_symbol))),
            s(:send,
              s(:lvar, :h), :inspect)))))))
