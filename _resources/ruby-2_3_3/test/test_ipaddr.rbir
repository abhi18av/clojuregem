s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "ipaddr")),
  s(:class,
    s(:const, nil, :TC_IPAddr),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_s_new,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:str, "3FFE:505:ffff::/48")),
                s(:array,
                  s(:str, "0:0:0:1::")),
                s(:array,
                  s(:str, "2001:200:300::/48")),
                s(:array,
                  s(:str, "2001:200:300::192.168.1.2/48")),
                s(:array,
                  s(:str, "1:2:3:4:5:6:7::")),
                s(:array,
                  s(:str, "::2:3:4:5:6:7:8"))), :each),
            s(:args,
              s(:arg, :args)),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:splat,
                  s(:lvar, :args))))),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :IPAddr), :new)),
          s(:send, nil, :assert_equal,
            s(:str, "::"),
            s(:send,
              s(:lvar, :a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "0000:0000:0000:0000:0000:0000:0000:0000"),
            s(:send,
              s(:lvar, :a), :to_string)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET6),
            s(:send,
              s(:lvar, :a), :family)),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "0123:4567:89ab:cdef:0ABC:DEF0:1234:5678"))),
          s(:send, nil, :assert_equal,
            s(:str, "123:4567:89ab:cdef:abc:def0:1234:5678"),
            s(:send,
              s(:lvar, :a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "0123:4567:89ab:cdef:0abc:def0:1234:5678"),
            s(:send,
              s(:lvar, :a), :to_string)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET6),
            s(:send,
              s(:lvar, :a), :family)),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "3ffe:505:2::/48"))),
          s(:send, nil, :assert_equal,
            s(:str, "3ffe:505:2::"),
            s(:send,
              s(:lvar, :a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "3ffe:0505:0002:0000:0000:0000:0000:0000"),
            s(:send,
              s(:lvar, :a), :to_string)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET6),
            s(:send,
              s(:lvar, :a), :family)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :a), :ipv4?)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :a), :ipv6?)),
          s(:send, nil, :assert_equal,
            s(:str, "#<IPAddr: IPv6:3ffe:0505:0002:0000:0000:0000:0000:0000/ffff:ffff:ffff:0000:0000:0000:0000:0000>"),
            s(:send,
              s(:lvar, :a), :inspect)),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "3ffe:505:2::/ffff:ffff:ffff::"))),
          s(:send, nil, :assert_equal,
            s(:str, "3ffe:505:2::"),
            s(:send,
              s(:lvar, :a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "3ffe:0505:0002:0000:0000:0000:0000:0000"),
            s(:send,
              s(:lvar, :a), :to_string)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET6),
            s(:send,
              s(:lvar, :a), :family)),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "0.0.0.0"))),
          s(:send, nil, :assert_equal,
            s(:str, "0.0.0.0"),
            s(:send,
              s(:lvar, :a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "0.0.0.0"),
            s(:send,
              s(:lvar, :a), :to_string)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET),
            s(:send,
              s(:lvar, :a), :family)),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "192.168.1.2"))),
          s(:send, nil, :assert_equal,
            s(:str, "192.168.1.2"),
            s(:send,
              s(:lvar, :a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "192.168.1.2"),
            s(:send,
              s(:lvar, :a), :to_string)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET),
            s(:send,
              s(:lvar, :a), :family)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :a), :ipv4?)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :a), :ipv6?)),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "192.168.1.2/24"))),
          s(:send, nil, :assert_equal,
            s(:str, "192.168.1.0"),
            s(:send,
              s(:lvar, :a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "192.168.1.0"),
            s(:send,
              s(:lvar, :a), :to_string)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET),
            s(:send,
              s(:lvar, :a), :family)),
          s(:send, nil, :assert_equal,
            s(:str, "#<IPAddr: IPv4:192.168.1.0/255.255.255.0>"),
            s(:send,
              s(:lvar, :a), :inspect)),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "192.168.1.2/255.255.255.0"))),
          s(:send, nil, :assert_equal,
            s(:str, "192.168.1.0"),
            s(:send,
              s(:lvar, :a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "192.168.1.0"),
            s(:send,
              s(:lvar, :a), :to_string)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET),
            s(:send,
              s(:lvar, :a), :family)),
          s(:send, nil, :assert_equal,
            s(:str, "0:0:0:1::"),
            s(:send,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "0:0:0:1::")), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "2001:200:300::"),
            s(:send,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "2001:200:300::/48")), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "2001:200:300::"),
            s(:send,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "[2001:200:300::]/48")), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "1:2:3:4:5:6:7:0"),
            s(:send,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "1:2:3:4:5:6:7::")), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "0:2:3:4:5:6:7:8"),
            s(:send,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "::2:3:4:5:6:7:8")), :to_s)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :IPAddr), :InvalidAddressError)),
            s(:args),
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "192.168.0.256"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :IPAddr), :InvalidAddressError)),
            s(:args),
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "192.168.0.011"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :IPAddr), :InvalidAddressError)),
            s(:args),
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "fe80::1%fxp0"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :IPAddr), :InvalidAddressError)),
            s(:args),
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "[192.168.1.2]/120"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :IPAddr), :InvalidAddressError)),
            s(:args),
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "[2001:200:300::]\nINVALID"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :IPAddr), :InvalidAddressError)),
            s(:args),
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "192.168.0.1/32\nINVALID"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :IPAddr), :InvalidPrefixError)),
            s(:args),
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "::1/255.255.255.0"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :IPAddr), :InvalidPrefixError)),
            s(:args),
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "::1/129"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :IPAddr), :InvalidPrefixError)),
            s(:args),
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "192.168.0.1/33"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :IPAddr), :AddressFamilyError)),
            s(:args),
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :IPAddr), :AddressFamilyError)),
            s(:args),
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "::ffff:192.168.1.2/120"),
              s(:const,
                s(:const, nil, :Socket), :AF_INET))))),
      s(:def, :test_s_new_ntoh,
        s(:args),
        s(:begin,
          s(:lvasgn, :addr,
            s(:str, "")),
          s(:block,
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :IPAddr), :new,
                  s(:str, "1234:5678:9abc:def0:1234:5678:9abc:def0")), :hton), :each_byte),
            s(:args,
              s(:arg, :c)),
            s(:op_asgn,
              s(:lvasgn, :addr), :+,
              s(:send, nil, :sprintf,
                s(:str, "%02x"),
                s(:lvar, :c)))),
          s(:send, nil, :assert_equal,
            s(:str, "123456789abcdef0123456789abcdef0"),
            s(:lvar, :addr)),
          s(:lvasgn, :addr,
            s(:str, "")),
          s(:block,
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :IPAddr), :new,
                  s(:str, "123.45.67.89")), :hton), :each_byte),
            s(:args,
              s(:arg, :c)),
            s(:op_asgn,
              s(:lvasgn, :addr), :+,
              s(:send, nil, :sprintf,
                s(:str, "%02x"),
                s(:lvar, :c)))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :sprintf,
              s(:str, "%02x%02x%02x%02x"),
              s(:int, 123),
              s(:int, 45),
              s(:int, 67),
              s(:int, 89)),
            s(:lvar, :addr)),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "3ffe:505:2::"))),
          s(:send, nil, :assert_equal,
            s(:str, "3ffe:505:2::"),
            s(:send,
              s(:send,
                s(:const, nil, :IPAddr), :new_ntoh,
                s(:send,
                  s(:lvar, :a), :hton)), :to_s)),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "192.168.2.1"))),
          s(:send, nil, :assert_equal,
            s(:str, "192.168.2.1"),
            s(:send,
              s(:send,
                s(:const, nil, :IPAddr), :new_ntoh,
                s(:send,
                  s(:lvar, :a), :hton)), :to_s)))),
      s(:def, :test_ipv4_compat,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "::192.168.1.2"))),
          s(:send, nil, :assert_equal,
            s(:str, "::192.168.1.2"),
            s(:send,
              s(:lvar, :a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "0000:0000:0000:0000:0000:0000:c0a8:0102"),
            s(:send,
              s(:lvar, :a), :to_string)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET6),
            s(:send,
              s(:lvar, :a), :family)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :a), :ipv4_compat?)),
          s(:lvasgn, :b,
            s(:send,
              s(:lvar, :a), :native)),
          s(:send, nil, :assert_equal,
            s(:str, "192.168.1.2"),
            s(:send,
              s(:lvar, :b), :to_s)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET),
            s(:send,
              s(:lvar, :b), :family)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :b), :ipv4_compat?)),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "192.168.1.2"))),
          s(:lvasgn, :b,
            s(:send,
              s(:lvar, :a), :ipv4_compat)),
          s(:send, nil, :assert_equal,
            s(:str, "::192.168.1.2"),
            s(:send,
              s(:lvar, :b), :to_s)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET6),
            s(:send,
              s(:lvar, :b), :family)))),
      s(:def, :test_ipv4_mapped,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "::ffff:192.168.1.2"))),
          s(:send, nil, :assert_equal,
            s(:str, "::ffff:192.168.1.2"),
            s(:send,
              s(:lvar, :a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "0000:0000:0000:0000:0000:ffff:c0a8:0102"),
            s(:send,
              s(:lvar, :a), :to_string)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET6),
            s(:send,
              s(:lvar, :a), :family)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :a), :ipv4_mapped?)),
          s(:lvasgn, :b,
            s(:send,
              s(:lvar, :a), :native)),
          s(:send, nil, :assert_equal,
            s(:str, "192.168.1.2"),
            s(:send,
              s(:lvar, :b), :to_s)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET),
            s(:send,
              s(:lvar, :b), :family)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :b), :ipv4_mapped?)),
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "192.168.1.2"))),
          s(:lvasgn, :b,
            s(:send,
              s(:lvar, :a), :ipv4_mapped)),
          s(:send, nil, :assert_equal,
            s(:str, "::ffff:192.168.1.2"),
            s(:send,
              s(:lvar, :b), :to_s)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET6),
            s(:send,
              s(:lvar, :b), :family)))),
      s(:def, :test_reverse,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "f.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.5.0.5.0.e.f.f.3.ip6.arpa"),
            s(:send,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "3ffe:505:2::f")), :reverse)),
          s(:send, nil, :assert_equal,
            s(:str, "1.2.168.192.in-addr.arpa"),
            s(:send,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "192.168.2.1")), :reverse)))),
      s(:def, :test_ip6_arpa,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "f.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.5.0.5.0.e.f.f.3.ip6.arpa"),
            s(:send,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "3ffe:505:2::f")), :ip6_arpa)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :IPAddr), :InvalidAddressError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "192.168.2.1")), :ip6_arpa)))),
      s(:def, :test_ip6_int,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "f.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.5.0.5.0.e.f.f.3.ip6.int"),
            s(:send,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "3ffe:505:2::f")), :ip6_int)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :IPAddr), :InvalidAddressError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "192.168.2.1")), :ip6_int)))),
      s(:def, :test_to_s,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "3ffe:0505:0002:0000:0000:0000:0000:0001"),
            s(:send,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "3ffe:505:2::1")), :to_string)),
          s(:send, nil, :assert_equal,
            s(:str, "3ffe:505:2::1"),
            s(:send,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "3ffe:505:2::1")), :to_s)))))),
  s(:class,
    s(:const, nil, :TC_Operator),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :IN6MASK32,
        s(:str, "ffff:ffff::")),
      s(:casgn, nil, :IN6MASK128,
        s(:str, "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@in6_addr_any,
            s(:send,
              s(:const, nil, :IPAddr), :new)),
          s(:ivasgn, :@a,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "3ffe:505:2::/48"))),
          s(:ivasgn, :@b,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "0:0:0:1::"))),
          s(:ivasgn, :@c,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:const, nil, :IN6MASK32))))),
      s(:alias,
        s(:sym, :set_up),
        s(:sym, :setup)),
      s(:def, :test_or,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "3ffe:505:2:1::"),
            s(:send,
              s(:begin,
                s(:send,
                  s(:ivar, :@a), :|,
                  s(:ivar, :@b))), :to_s)),
          s(:lvasgn, :a,
            s(:ivar, :@a)),
          s(:op_asgn,
            s(:lvasgn, :a), :|,
            s(:ivar, :@b)),
          s(:send, nil, :assert_equal,
            s(:str, "3ffe:505:2:1::"),
            s(:send,
              s(:lvar, :a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "3ffe:505:2::"),
            s(:send,
              s(:ivar, :@a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "3ffe:505:2:1::"),
            s(:send,
              s(:begin,
                s(:send,
                  s(:ivar, :@a), :|,
                  s(:int, 18446744073709551616))), :to_s)))),
      s(:def, :test_and,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "3ffe:505::"),
            s(:send,
              s(:begin,
                s(:send,
                  s(:ivar, :@a), :&,
                  s(:ivar, :@c))), :to_s)),
          s(:lvasgn, :a,
            s(:ivar, :@a)),
          s(:op_asgn,
            s(:lvasgn, :a), :&,
            s(:ivar, :@c)),
          s(:send, nil, :assert_equal,
            s(:str, "3ffe:505::"),
            s(:send,
              s(:lvar, :a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "3ffe:505:2::"),
            s(:send,
              s(:ivar, :@a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "3ffe:505::"),
            s(:send,
              s(:begin,
                s(:send,
                  s(:ivar, :@a), :&,
                  s(:int, 340282366841710300949110269838224261120))), :to_s)))),
      s(:def, :test_shift_right,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "0:3ffe:505:2::"),
            s(:send,
              s(:begin,
                s(:send,
                  s(:ivar, :@a), :>>,
                  s(:int, 16))), :to_s)),
          s(:lvasgn, :a,
            s(:ivar, :@a)),
          s(:op_asgn,
            s(:lvasgn, :a), :>>,
            s(:int, 16)),
          s(:send, nil, :assert_equal,
            s(:str, "0:3ffe:505:2::"),
            s(:send,
              s(:lvar, :a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "3ffe:505:2::"),
            s(:send,
              s(:ivar, :@a), :to_s)))),
      s(:def, :test_shift_left,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "505:2::"),
            s(:send,
              s(:begin,
                s(:send,
                  s(:ivar, :@a), :<<,
                  s(:int, 16))), :to_s)),
          s(:lvasgn, :a,
            s(:ivar, :@a)),
          s(:op_asgn,
            s(:lvasgn, :a), :<<,
            s(:int, 16)),
          s(:send, nil, :assert_equal,
            s(:str, "505:2::"),
            s(:send,
              s(:lvar, :a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "3ffe:505:2::"),
            s(:send,
              s(:ivar, :@a), :to_s)))),
      s(:def, :test_carrot,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:ivar, :@in6_addr_any), :~)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :IN6MASK128),
            s(:send,
              s(:lvar, :a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "::"),
            s(:send,
              s(:ivar, :@in6_addr_any), :to_s)))),
      s(:def, :test_equal,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@a), :==,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "3FFE:505:2::")))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@a), :==,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "3ffe:0505:0002::")))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@a), :==,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "3ffe:0505:0002:0:0:0:0:0")))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@a), :==,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "3ffe:505:3::")))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@a), :!=,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "3ffe:505:3::")))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@a), :!=,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "3ffe:505:2::")))))),
      s(:def, :test_mask,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:ivar, :@a), :mask,
              s(:int, 32))),
          s(:send, nil, :assert_equal,
            s(:str, "3ffe:505::"),
            s(:send,
              s(:lvar, :a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "3ffe:505:2::"),
            s(:send,
              s(:ivar, :@a), :to_s)))),
      s(:def, :test_include?,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@a), :include?,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "3ffe:505:2::")))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@a), :include?,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "3ffe:505:2::1")))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@a), :include?,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "3ffe:505:3::")))),
          s(:lvasgn, :net1,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "192.168.2.0/24"))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :net1), :include?,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "192.168.2.0")))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :net1), :include?,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "192.168.2.255")))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :net1), :include?,
              s(:send,
                s(:const, nil, :IPAddr), :new,
                s(:str, "192.168.3.0")))),
          s(:lvasgn, :int,
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:int, 192), :<<,
                      s(:int, 24))), :+,
                  s(:begin,
                    s(:send,
                      s(:int, 168), :<<,
                      s(:int, 16)))), :+,
                s(:begin,
                  s(:send,
                    s(:int, 2), :<<,
                    s(:int, 8)))), :+,
              s(:int, 13))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :net1), :include?,
              s(:lvar, :int))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :net1), :include?,
              s(:send,
                s(:lvar, :int), :+,
                s(:int, 255)))))),
      s(:def, :test_hash,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "192.168.2.0"))),
          s(:lvasgn, :a2,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "192.168.2.0"))),
          s(:lvasgn, :a3,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "3ffe:505:2::1"))),
          s(:lvasgn, :a4,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "3ffe:505:2::1"))),
          s(:lvasgn, :a5,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "127.0.0.1"))),
          s(:lvasgn, :a6,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "::1"))),
          s(:lvasgn, :a7,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "192.168.2.0/25"))),
          s(:lvasgn, :a8,
            s(:send,
              s(:const, nil, :IPAddr), :new,
              s(:str, "192.168.2.0/25"))),
          s(:lvasgn, :h,
            s(:hash,
              s(:pair,
                s(:lvar, :a1),
                s(:str, "ipv4")),
              s(:pair,
                s(:lvar, :a2),
                s(:str, "ipv4")),
              s(:pair,
                s(:lvar, :a3),
                s(:str, "ipv6")),
              s(:pair,
                s(:lvar, :a4),
                s(:str, "ipv6")),
              s(:pair,
                s(:lvar, :a5),
                s(:str, "ipv4")),
              s(:pair,
                s(:lvar, :a6),
                s(:str, "ipv6")),
              s(:pair,
                s(:lvar, :a7),
                s(:str, "ipv4")),
              s(:pair,
                s(:lvar, :a8),
                s(:str, "ipv4")))),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :h), :size)),
          s(:send, nil, :assert_equal,
            s(:str, "ipv4"),
            s(:send,
              s(:lvar, :h), :[],
              s(:lvar, :a1))),
          s(:send, nil, :assert_equal,
            s(:str, "ipv4"),
            s(:send,
              s(:lvar, :h), :[],
              s(:lvar, :a2))),
          s(:send, nil, :assert_equal,
            s(:str, "ipv6"),
            s(:send,
              s(:lvar, :h), :[],
              s(:lvar, :a3))),
          s(:send, nil, :assert_equal,
            s(:str, "ipv6"),
            s(:send,
              s(:lvar, :h), :[],
              s(:lvar, :a4))),
          s(:send, nil, :require,
            s(:str, "set")),
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :Set), :[],
              s(:lvar, :a1),
              s(:lvar, :a2),
              s(:lvar, :a3),
              s(:lvar, :a4),
              s(:lvar, :a5),
              s(:lvar, :a6),
              s(:lvar, :a7),
              s(:lvar, :a8))),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :s), :size)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :s), :include?,
              s(:lvar, :a1))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :s), :include?,
              s(:lvar, :a2))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :s), :include?,
              s(:lvar, :a3))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :s), :include?,
              s(:lvar, :a4))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :s), :include?,
              s(:lvar, :a5))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :s), :include?,
              s(:lvar, :a6))))))))
