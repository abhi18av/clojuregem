s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "benchmark")),
  s(:class,
    s(:const, nil, :TestBenchmark),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :BENCH_FOR_TIMES_UPTO,
        s(:block,
          s(:send, nil, :lambda),
          s(:args,
            s(:arg, :x)),
          s(:begin,
            s(:lvasgn, :n,
              s(:int, 1000)),
            s(:lvasgn, :tf,
              s(:block,
                s(:send,
                  s(:lvar, :x), :report,
                  s(:str, "for:")),
                s(:args),
                s(:for,
                  s(:lvasgn, :_),
                  s(:irange,
                    s(:int, 1),
                    s(:lvar, :n)),
                  s(:str, "1")))),
            s(:lvasgn, :tt,
              s(:block,
                s(:send,
                  s(:lvar, :x), :report,
                  s(:str, "times:")),
                s(:args),
                s(:block,
                  s(:send,
                    s(:lvar, :n), :times),
                  s(:args),
                  s(:str, "1")))),
            s(:lvasgn, :tu,
              s(:block,
                s(:send,
                  s(:lvar, :x), :report,
                  s(:str, "upto:")),
                s(:args),
                s(:block,
                  s(:send,
                    s(:int, 1), :upto,
                    s(:lvar, :n)),
                  s(:args),
                  s(:str, "1")))),
            s(:array,
              s(:send,
                s(:send,
                  s(:lvar, :tf), :+,
                  s(:lvar, :tt)), :+,
                s(:lvar, :tu)),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :tf), :+,
                      s(:lvar, :tt)), :+,
                    s(:lvar, :tu))), :/,
                s(:int, 3)))))),
      s(:casgn, nil, :BENCH_FOR_TIMES_UPTO_NO_LABEL,
        s(:block,
          s(:send, nil, :lambda),
          s(:args,
            s(:arg, :x)),
          s(:begin,
            s(:lvasgn, :n,
              s(:int, 1000)),
            s(:block,
              s(:send,
                s(:lvar, :x), :report),
              s(:args),
              s(:for,
                s(:lvasgn, :_),
                s(:irange,
                  s(:int, 1),
                  s(:lvar, :n)),
                s(:str, "1"))),
            s(:block,
              s(:send,
                s(:lvar, :x), :report),
              s(:args),
              s(:block,
                s(:send,
                  s(:lvar, :n), :times),
                s(:args),
                s(:str, "1"))),
            s(:block,
              s(:send,
                s(:lvar, :x), :report),
              s(:args),
              s(:block,
                s(:send,
                  s(:int, 1), :upto,
                  s(:lvar, :n)),
                s(:args),
                s(:str, "1")))))),
      s(:def, :labels,
        s(:args),
        s(:array,
          s(:str, "first"),
          s(:str, "second"),
          s(:str, "third"))),
      s(:def, :bench,
        s(:args,
          s(:optarg, :type,
            s(:sym, :bm)),
          s(:restarg, :args),
          s(:blockarg, :block)),
        s(:if,
          s(:lvar, :block),
          s(:send,
            s(:const, nil, :Benchmark), :send,
            s(:lvar, :type),
            s(:splat,
              s(:lvar, :args)),
            s(:block_pass,
              s(:lvar, :block))),
          s(:block,
            s(:send,
              s(:const, nil, :Benchmark), :send,
              s(:lvar, :type),
              s(:splat,
                s(:lvar, :args))),
            s(:args,
              s(:arg, :x)),
            s(:block,
              s(:send,
                s(:send, nil, :labels), :each),
              s(:args,
                s(:arg, :label)),
              s(:block,
                s(:send,
                  s(:lvar, :x), :report,
                  s(:lvar, :label)),
                s(:args), nil))))),
      s(:def, :capture_output,
        s(:args),
        s(:send,
          s(:send,
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:yield)), :first), :gsub,
          s(:regexp,
            s(:str, "[ \\-]\\d\\.\\d{6}"),
            s(:regopt)),
          s(:str, " --time--"))),
      s(:def, :capture_bench_output,
        s(:args,
          s(:arg, :type),
          s(:restarg, :args),
          s(:blockarg, :block)),
        s(:block,
          s(:send, nil, :capture_output),
          s(:args),
          s(:send, nil, :bench,
            s(:lvar, :type),
            s(:splat,
              s(:lvar, :args)),
            s(:block_pass,
              s(:lvar, :block))))),
      s(:def, :test_tms_outputs_nicely,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "  0.000000   0.000000   0.000000 (  0.000000)\n"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Benchmark), :Tms), :new), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "  1.000000   2.000000  10.000000 (  5.000000)\n"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Benchmark), :Tms), :new,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3),
                s(:int, 4),
                s(:int, 5)), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "1.000000 2.000000 3.000000 4.000000 10.000000 (5.000000) label"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Benchmark), :Tms), :new,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3),
                s(:int, 4),
                s(:int, 5),
                s(:str, "label")), :format,
              s(:str, "%u %y %U %Y %t %r %n"))),
          s(:send, nil, :assert_equal,
            s(:str, "1.000000 2.000"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Benchmark), :Tms), :new,
                s(:int, 1)), :format,
              s(:str, "%u %.3f"),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:str, "100.000000 150.000000 250.000000 (200.000000)\n"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Benchmark), :Tms), :new,
                s(:int, 100),
                s(:int, 150),
                s(:int, 0),
                s(:int, 0),
                s(:int, 200)), :to_s)))),
      s(:def, :test_tms_wont_modify_the_format_String_given,
        s(:args),
        s(:begin,
          s(:lvasgn, :format,
            s(:str, "format %u")),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :Benchmark), :Tms), :new), :format,
            s(:lvar, :format)),
          s(:send, nil, :assert_equal,
            s(:str, "format %u"),
            s(:lvar, :format)))),
      s(:casgn, nil, :BENCHMARK_OUTPUT_WITH_TOTAL_AVG,
        s(:dstr,
          s(:str, "              user     system      total        real\n"),
          s(:str, "for:      --time--   --time--   --time-- (  --time--)\n"),
          s(:str, "times:    --time--   --time--   --time-- (  --time--)\n"),
          s(:str, "upto:     --time--   --time--   --time-- (  --time--)\n"),
          s(:str, ">total:   --time--   --time--   --time-- (  --time--)\n"),
          s(:str, ">avg:     --time--   --time--   --time-- (  --time--)\n"))),
      s(:def, :test_benchmark_does_not_print_any_space_if_the_given_caption_is_empty,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:dstr,
            s(:str, "first  --time--   --time--   --time-- (  --time--)\n"),
            s(:str, "second  --time--   --time--   --time-- (  --time--)\n"),
            s(:str, "third  --time--   --time--   --time-- (  --time--)\n")),
          s(:send, nil, :capture_bench_output,
            s(:sym, :benchmark)))),
      s(:def, :test_benchmark_makes_extra_calcultations_with_an_Array_at_the_end_of_the_benchmark_and_show_the_result,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:const, nil, :BENCHMARK_OUTPUT_WITH_TOTAL_AVG),
          s(:send, nil, :capture_bench_output,
            s(:sym, :benchmark),
            s(:const,
              s(:const, nil, :Benchmark), :CAPTION),
            s(:int, 7),
            s(:const,
              s(:const, nil, :Benchmark), :FORMAT),
            s(:str, ">total:"),
            s(:str, ">avg:"),
            s(:block_pass,
              s(:const, nil, :BENCH_FOR_TIMES_UPTO))))),
      s(:def, :test_bm_returns_an_Array_of_the_times_with_the_labels,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:sym, :bm),
              s(:sym, :bmbm)), :each),
          s(:args,
            s(:arg, :meth)),
          s(:block,
            s(:send, nil, :capture_io),
            s(:args),
            s(:begin,
              s(:lvasgn, :results,
                s(:send, nil, :bench,
                  s(:lvar, :meth))),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :Array),
                s(:lvar, :results)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send, nil, :labels), :size),
                s(:send,
                  s(:lvar, :results), :size)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :results), :zip,
                    s(:send, nil, :labels)), :each),
                s(:args,
                  s(:arg, :tms),
                  s(:arg, :label)),
                s(:begin,
                  s(:send, nil, :assert_instance_of,
                    s(:const,
                      s(:const, nil, :Benchmark), :Tms),
                    s(:lvar, :tms)),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :label),
                    s(:send,
                      s(:lvar, :tms), :label)))))))),
      s(:def, :test_bm_correctly_output_when_the_label_width_is_given,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:dstr,
            s(:str, "             user     system      total        real\n"),
            s(:str, "first    --time--   --time--   --time-- (  --time--)\n"),
            s(:str, "second   --time--   --time--   --time-- (  --time--)\n"),
            s(:str, "third    --time--   --time--   --time-- (  --time--)\n")),
          s(:send, nil, :capture_bench_output,
            s(:sym, :bm),
            s(:int, 6)))),
      s(:def, :test_bm_correctly_output_when_no_label_is_given,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:dstr,
            s(:str, "       user     system      total        real\n"),
            s(:str, "   --time--   --time--   --time-- (  --time--)\n"),
            s(:str, "   --time--   --time--   --time-- (  --time--)\n"),
            s(:str, "   --time--   --time--   --time-- (  --time--)\n")),
          s(:send, nil, :capture_bench_output,
            s(:sym, :bm),
            s(:block_pass,
              s(:const, nil, :BENCH_FOR_TIMES_UPTO_NO_LABEL))))),
      s(:def, :test_bm_can_make_extra_calcultations_with_an_array_at_the_end_of_the_benchmark,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:const, nil, :BENCHMARK_OUTPUT_WITH_TOTAL_AVG),
          s(:send, nil, :capture_bench_output,
            s(:sym, :bm),
            s(:int, 7),
            s(:str, ">total:"),
            s(:str, ">avg:"),
            s(:block_pass,
              s(:const, nil, :BENCH_FOR_TIMES_UPTO))))),
      s(:casgn, nil, :BMBM_OUTPUT,
        s(:dstr,
          s(:str, "Rehearsal ------------------------------------------\n"),
          s(:str, "first    --time--   --time--   --time-- (  --time--)\n"),
          s(:str, "second   --time--   --time--   --time-- (  --time--)\n"),
          s(:str, "third    --time--   --time--   --time-- (  --time--)\n"),
          s(:str, "--------------------------------- total: --time--sec\n"),
          s(:str, "\n"),
          s(:str, "             user     system      total        real\n"),
          s(:str, "first    --time--   --time--   --time-- (  --time--)\n"),
          s(:str, "second   --time--   --time--   --time-- (  --time--)\n"),
          s(:str, "third    --time--   --time--   --time-- (  --time--)\n"))),
      s(:def, :test_bmbm_correctly_guess_the_label_width_even_when_not_given,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:const, nil, :BMBM_OUTPUT),
          s(:send, nil, :capture_bench_output,
            s(:sym, :bmbm)))),
      s(:def, :test_bmbm_correctly_output_when_the_label_width_is_given__bmbm_ignore_it__but_it_is_a_frequent_mistake,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:const, nil, :BMBM_OUTPUT),
          s(:send, nil, :capture_bench_output,
            s(:sym, :bmbm),
            s(:int, 6)))),
      s(:def, :test_report_item_shows_the_title__even_if_not_a_string,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_operator,
            s(:block,
              s(:send, nil, :capture_bench_output,
                s(:sym, :bm)),
              s(:args,
                s(:arg, :x)),
              s(:block,
                s(:send,
                  s(:lvar, :x), :report,
                  s(:sym, :title)),
                s(:args), nil)),
            s(:sym, :include?),
            s(:str, "title")),
          s(:send, nil, :assert_operator,
            s(:block,
              s(:send, nil, :capture_bench_output,
                s(:sym, :bmbm)),
              s(:args,
                s(:arg, :x)),
              s(:block,
                s(:send,
                  s(:lvar, :x), :report,
                  s(:sym, :title)),
                s(:args), nil)),
            s(:sym, :include?),
            s(:str, "title")))),
      s(:def, :test_bugs_ruby_dev_40906_can_add_in_place_the_time_of_execution_of_the_block_given,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send,
              s(:const,
                s(:const, nil, :Benchmark), :Tms), :new)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :t), :real)),
          s(:block,
            s(:send,
              s(:lvar, :t), :add!),
            s(:args),
            s(:send, nil, :sleep,
              s(:float, 0.1))),
          s(:send, nil, :assert_not_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :t), :real)))),
      s(:def, :test_realtime_output,
        s(:args),
        s(:begin,
          s(:lvasgn, :sleeptime,
            s(:float, 1.0)),
          s(:lvasgn, :realtime,
            s(:block,
              s(:send,
                s(:const, nil, :Benchmark), :realtime),
              s(:args),
              s(:send, nil, :sleep,
                s(:lvar, :sleeptime)))),
          s(:send, nil, :assert_operator,
            s(:lvar, :sleeptime),
            s(:sym, :<),
            s(:lvar, :realtime)))))))
