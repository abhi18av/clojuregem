s(:module,
  s(:const, nil, :Memory),
  s(:begin,
    s(:lvasgn, :keys,
      s(:array)),
    s(:lvasgn, :vals,
      s(:array)),
    s(:case, nil,
      s(:when,
        s(:and,
          s(:send,
            s(:const, nil, :File), :exist?,
            s(:lvasgn, :procfile,
              s(:str, "/proc/self/status"))),
          s(:send,
            s(:begin,
              s(:lvasgn, :pat,
                s(:regexp,
                  s(:str, "^Vm(\\w+):\\s+(\\d+)"),
                  s(:regopt)))), :=~,
            s(:send,
              s(:const, nil, :File), :binread,
              s(:lvar, :procfile)))),
        s(:begin,
          s(:casgn, nil, :PROC_FILE,
            s(:lvar, :procfile)),
          s(:casgn, nil, :VM_PAT,
            s(:lvar, :pat)),
          s(:defs,
            s(:self), :read_status,
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :IO), :foreach,
                s(:const, nil, :PROC_FILE),
                s(:hash,
                  s(:pair,
                    s(:sym, :encoding),
                    s(:const,
                      s(:const, nil, :Encoding), :ASCII_8BIT)))),
              s(:args,
                s(:arg, :l)),
              s(:if,
                s(:send,
                  s(:const, nil, :VM_PAT), :=~,
                  s(:lvar, :l)),
                s(:yield,
                  s(:send,
                    s(:send,
                      s(:nth_ref, 1), :downcase), :intern),
                  s(:send,
                    s(:send,
                      s(:nth_ref, 2), :to_i), :*,
                    s(:int, 1024))), nil))),
          s(:block,
            s(:send, nil, :read_status),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:begin,
              s(:send,
                s(:lvar, :keys), :<<,
                s(:lvar, :k)),
              s(:send,
                s(:lvar, :vals), :<<,
                s(:lvar, :v)))))),
      s(:when,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "mswin|mingw"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM)),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "fiddle/import")),
          s(:send, nil, :require,
            s(:str, "fiddle/types")),
          s(:module,
            s(:const, nil, :Win32),
            s(:begin,
              s(:send, nil, :extend,
                s(:const,
                  s(:const, nil, :Fiddle), :Importer)),
              s(:send, nil, :dlload,
                s(:str, "kernel32.dll"),
                s(:str, "psapi.dll")),
              s(:send, nil, :include,
                s(:const,
                  s(:const, nil, :Fiddle), :Win32Types)),
              s(:send, nil, :typealias,
                s(:str, "SIZE_T"),
                s(:str, "size_t")),
              s(:casgn, nil, :PROCESS_MEMORY_COUNTERS,
                s(:send, nil, :struct,
                  s(:array,
                    s(:str, "DWORD  cb"),
                    s(:str, "DWORD  PageFaultCount"),
                    s(:str, "SIZE_T PeakWorkingSetSize"),
                    s(:str, "SIZE_T WorkingSetSize"),
                    s(:str, "SIZE_T QuotaPeakPagedPoolUsage"),
                    s(:str, "SIZE_T QuotaPagedPoolUsage"),
                    s(:str, "SIZE_T QuotaPeakNonPagedPoolUsage"),
                    s(:str, "SIZE_T QuotaNonPagedPoolUsage"),
                    s(:str, "SIZE_T PagefileUsage"),
                    s(:str, "SIZE_T PeakPagefileUsage")))),
              s(:send, nil, :typealias,
                s(:str, "PPROCESS_MEMORY_COUNTERS"),
                s(:str, "PROCESS_MEMORY_COUNTERS*")),
              s(:send, nil, :extern,
                s(:str, "HANDLE GetCurrentProcess()"),
                s(:sym, :stdcall)),
              s(:send, nil, :extern,
                s(:str, "BOOL GetProcessMemoryInfo(HANDLE, PPROCESS_MEMORY_COUNTERS, DWORD)"),
                s(:sym, :stdcall)),
              s(:send, nil, :module_function),
              s(:def, :memory_info,
                s(:args),
                s(:begin,
                  s(:lvasgn, :size,
                    s(:send,
                      s(:const, nil, :PROCESS_MEMORY_COUNTERS), :size)),
                  s(:lvasgn, :data,
                    s(:send,
                      s(:const, nil, :PROCESS_MEMORY_COUNTERS), :malloc)),
                  s(:send,
                    s(:lvar, :data), :cb=,
                    s(:lvar, :size)),
                  s(:if,
                    s(:send, nil, :GetProcessMemoryInfo,
                      s(:send, nil, :GetCurrentProcess),
                      s(:lvar, :data),
                      s(:lvar, :size)),
                    s(:lvar, :data), nil))))),
          s(:send,
            s(:send,
              s(:lvar, :keys), :<<,
              s(:sym, :peak)), :<<,
            s(:sym, :size)),
          s(:defs,
            s(:self), :read_status,
            s(:args),
            s(:if,
              s(:lvasgn, :info,
                s(:send,
                  s(:const, nil, :Win32), :memory_info)),
              s(:begin,
                s(:yield,
                  s(:sym, :peak),
                  s(:send,
                    s(:lvar, :info), :PeakPagefileUsage)),
                s(:yield,
                  s(:sym, :size),
                  s(:send,
                    s(:lvar, :info), :PagefileUsage))), nil)))),
      s(:begin,
        s(:casgn, nil, :PAT,
          s(:regexp,
            s(:str, "^\\s*(\\d+)\\s+(\\d+)$"),
            s(:regopt))),
        s(:send, nil, :require_relative,
          s(:str, "find_executable")),
        s(:if,
          s(:casgn, nil, :PSCMD,
            s(:block,
              s(:send,
                s(:const, nil, :EnvUtil), :find_executable,
                s(:str, "ps"),
                s(:str, "-ovsz="),
                s(:str, "-orss="),
                s(:str, "-p"),
                s(:send,
                  s(:gvar, :$$), :to_s)),
              s(:args,
                s(:arg, :out)),
              s(:send,
                s(:const, nil, :PAT), :=~,
                s(:lvar, :out)))),
          s(:send,
            s(:const, nil, :PSCMD), :pop), nil),
        s(:if,
          s(:const, nil, :PSCMD), nil,
          s(:send, nil, :raise,
            s(:const,
              s(:const, nil, :MiniTest), :Skip),
            s(:str, "ps command not found"))),
        s(:send,
          s(:send,
            s(:lvar, :keys), :<<,
            s(:sym, :size)), :<<,
          s(:sym, :rss)),
        s(:defs,
          s(:self), :read_status,
          s(:args),
          s(:if,
            s(:send,
              s(:const, nil, :PAT), :=~,
              s(:send,
                s(:const, nil, :IO), :popen,
                s(:send,
                  s(:const, nil, :PSCMD), :+,
                  s(:array,
                    s(:send,
                      s(:gvar, :$$), :to_s))),
                s(:str, "r"),
                s(:hash,
                  s(:pair,
                    s(:sym, :err),
                    s(:array,
                      s(:sym, :child),
                      s(:sym, :out)))),
                s(:block_pass,
                  s(:sym, :read)))),
            s(:begin,
              s(:yield,
                s(:sym, :size),
                s(:send,
                  s(:send,
                    s(:nth_ref, 1), :to_i), :*,
                  s(:int, 1024))),
              s(:yield,
                s(:sym, :rss),
                s(:send,
                  s(:send,
                    s(:nth_ref, 2), :to_i), :*,
                  s(:int, 1024)))), nil)))),
    s(:casgn, nil, :Status,
      s(:send,
        s(:const, nil, :Struct), :new,
        s(:splat,
          s(:lvar, :keys)))),
    s(:class,
      s(:const, nil, :Status), nil,
      s(:def, :_update,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Memory), :read_status),
          s(:args,
            s(:arg, :key),
            s(:arg, :val)),
          s(:send,
            s(:self), :[]=,
            s(:lvar, :key),
            s(:lvar, :val))))),
    s(:class,
      s(:const, nil, :Status), nil,
      s(:begin,
        s(:casgn, nil, :Header,
          s(:send,
            s(:block,
              s(:send,
                s(:send, nil, :members), :map),
              s(:args,
                s(:arg, :k)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :k), :to_s), :upcase), :rjust,
                s(:int, 6))), :join,
            s(:str, ""))),
        s(:casgn, nil, :Format,
          s(:str, "%6d")),
        s(:def, :initialize,
          s(:args),
          s(:send, nil, :_update)),
        s(:def, :to_s,
          s(:args),
          s(:begin,
            s(:lvasgn, :status,
              s(:block,
                s(:send,
                  s(:send, nil, :each_pair), :map),
                s(:args,
                  s(:arg, :n),
                  s(:arg, :v)),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :n)),
                  s(:str, ":"),
                  s(:begin,
                    s(:lvar, :v))))),
            s(:dstr,
              s(:str, "{"),
              s(:begin,
                s(:send,
                  s(:lvar, :status), :join,
                  s(:str, ","))),
              s(:str, "}")))),
        s(:defs,
          s(:self), :parse,
          s(:args,
            s(:arg, :str)),
          s(:begin,
            s(:lvasgn, :status,
              s(:send, nil, :allocate)),
            s(:block,
              s(:send,
                s(:lvar, :str), :scan,
                s(:regexp,
                  s(:str, "(?:\\A\\{|\\G,)("),
                  s(:begin,
                    s(:send,
                      s(:send, nil, :members), :join,
                      s(:str, "|"))),
                  s(:str, "):(\\d+)(?=,|\\}\\z)"),
                  s(:regopt))),
              s(:args),
              s(:send,
                s(:lvar, :status), :[]=,
                s(:nth_ref, 1),
                s(:send,
                  s(:nth_ref, 2), :to_i))),
            s(:lvar, :status))))),
    s(:case,
      s(:const, nil, :RUBY_PLATFORM),
      s(:when,
        s(:regexp,
          s(:str, "solaris2\\.(?:9|[1-9][0-9])"),
          s(:regopt, :i)),
        s(:begin,
          s(:lvasgn, :bits,
            s(:if,
              s(:send,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:nil)), :pack,
                    s(:str, "p")), :size), :==,
                s(:int, 8)),
              s(:int, 64),
              s(:int, 32))),
          s(:if,
            s(:and,
              s(:and,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "LD_PRELOAD")), :to_s), :empty?),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:dstr,
                        s(:str, "LD_PRELOAD_"),
                        s(:begin,
                          s(:lvar, :bits)))), :to_s), :empty?)),
              s(:begin,
                s(:or,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :ENV), :[],
                        s(:str, "UMEM_OPTIONS")), :to_s), :empty?),
                  s(:send,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "UMEM_OPTIONS")), :==,
                    s(:str, "backend=mmap"))))),
            s(:begin,
              s(:lvasgn, :envs,
                s(:hash,
                  s(:pair,
                    s(:str, "LD_PRELOAD"),
                    s(:str, "libumem.so")),
                  s(:pair,
                    s(:str, "UMEM_OPTIONS"),
                    s(:str, "backend=mmap")))),
              s(:lvasgn, :args,
                s(:array,
                  s(:lvar, :envs),
                  s(:str, "--disable=gems"),
                  s(:str, "-v"),
                  s(:str, "-"))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :_),
                  s(:lvasgn, :err),
                  s(:lvasgn, :status)),
                s(:send,
                  s(:const, nil, :EnvUtil), :invoke_ruby,
                  s(:lvar, :args),
                  s(:str, "exit(0)"),
                  s(:true),
                  s(:true))),
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :status), :exitstatus), :==,
                    s(:int, 0)),
                  s(:send,
                    s(:send,
                      s(:lvar, :err), :to_s), :empty?)),
                s(:casgn, nil, :NO_MEMORY_LEAK_ENVS,
                  s(:lvar, :envs)), nil)), nil))), nil)))
