s(:begin,
  s(:send, nil, :require,
    s(:str, "optparse")),
  s(:send, nil, :require,
    s(:str, "rbconfig")),
  s(:send, nil, :require,
    s(:str, "leakchecker")),
  s(:module,
    s(:const, nil, :MiniTest),
    s(:begin,
      s(:defs,
        s(:self), :const_missing,
        s(:args,
          s(:arg, :name)),
        s(:case,
          s(:lvar, :name),
          s(:when,
            s(:sym, :MINI_DIR),
            s(:begin,
              s(:lvasgn, :msg,
                s(:str, "MiniTest::MINI_DIR was removed. Don't violate other's internals.")),
              s(:send, nil, :warn,
                s(:dstr,
                  s(:str, "WARNING: "),
                  s(:begin,
                    s(:lvar, :msg)))),
              s(:send, nil, :warn,
                s(:dstr,
                  s(:str, "WARNING: Used by "),
                  s(:begin,
                    s(:send,
                      s(:send, nil, :caller), :first)),
                  s(:str, "."))),
              s(:send, nil, :const_set,
                s(:sym, :MINI_DIR),
                s(:str, "bad value")))),
          s(:zsuper))),
      s(:class,
        s(:const, nil, :Assertion),
        s(:const, nil, :Exception), nil),
      s(:class,
        s(:const, nil, :Skip),
        s(:const, nil, :Assertion), nil),
      s(:sclass,
        s(:self),
        s(:send, nil, :attr_accessor,
          s(:sym, :backtrace_filter))),
      s(:class,
        s(:const, nil, :BacktraceFilter), nil,
        s(:def, :filter,
          s(:args,
            s(:arg, :bt)),
          s(:begin,
            s(:if,
              s(:lvar, :bt), nil,
              s(:return,
                s(:array,
                  s(:str, "No backtrace")))),
            s(:lvasgn, :new_bt,
              s(:array)),
            s(:if,
              s(:gvar, :$DEBUG),
              s(:lvasgn, :new_bt,
                s(:send,
                  s(:lvar, :bt), :dup)),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:lvar, :bt), :each),
                  s(:args,
                    s(:arg, :line)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :line), :=~,
                        s(:regexp,
                          s(:str, "lib/minitest"),
                          s(:regopt))),
                      s(:break), nil),
                    s(:send,
                      s(:lvar, :new_bt), :<<,
                      s(:lvar, :line)))),
                s(:if,
                  s(:send,
                    s(:lvar, :new_bt), :empty?),
                  s(:lvasgn, :new_bt,
                    s(:block,
                      s(:send,
                        s(:lvar, :bt), :reject),
                      s(:args,
                        s(:arg, :line)),
                      s(:send,
                        s(:lvar, :line), :=~,
                        s(:regexp,
                          s(:str, "lib/minitest"),
                          s(:regopt))))), nil),
                s(:if,
                  s(:send,
                    s(:lvar, :new_bt), :empty?),
                  s(:lvasgn, :new_bt,
                    s(:send,
                      s(:lvar, :bt), :dup)), nil))),
            s(:lvar, :new_bt)))),
      s(:send,
        s(:self), :backtrace_filter=,
        s(:send,
          s(:const, nil, :BacktraceFilter), :new)),
      s(:defs,
        s(:self), :filter_backtrace,
        s(:args,
          s(:arg, :bt)),
        s(:send,
          s(:send, nil, :backtrace_filter), :filter,
          s(:lvar, :bt))),
      s(:module,
        s(:const, nil, :Assertions),
        s(:begin,
          s(:defs,
            s(:self), :diff,
            s(:args),
            s(:begin,
              s(:if,
                s(:defined?,
                  s(:ivar, :@diff)), nil,
                s(:ivasgn, :@diff,
                  s(:if,
                    s(:begin,
                      s(:and,
                        s(:send,
                          s(:send,
                            s(:const,
                              s(:const, nil, :RbConfig), :CONFIG), :[],
                            s(:str, "host_os")), :=~,
                          s(:regexp,
                            s(:str, "mswin|mingw"),
                            s(:regopt))),
                        s(:send, nil, :system,
                          s(:str, "diff.exe"),
                          s(:str, "(string)"),
                          s(:str, "(string)")))),
                    s(:str, "diff.exe -u"),
                    s(:if,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Minitest), :Unit), :Guard), :maglev?),
                      s(:str, "diff -u"),
                      s(:if,
                        s(:send, nil, :system,
                          s(:str, "gdiff"),
                          s(:str, "(string)"),
                          s(:str, "(string)")),
                        s(:str, "gdiff -u"),
                        s(:if,
                          s(:send, nil, :system,
                            s(:str, "diff"),
                            s(:str, "(string)"),
                            s(:str, "(string)")),
                          s(:str, "diff -u"),
                          s(:nil))))))),
              s(:ivar, :@diff))),
          s(:defs,
            s(:self), :diff=,
            s(:args,
              s(:arg, :o)),
            s(:ivasgn, :@diff,
              s(:lvar, :o))),
          s(:def, :diff,
            s(:args,
              s(:arg, :exp),
              s(:arg, :act)),
            s(:ensure,
              s(:begin,
                s(:send, nil, :require,
                  s(:str, "tempfile")),
                s(:lvasgn, :expect,
                  s(:send, nil, :mu_pp_for_diff,
                    s(:lvar, :exp))),
                s(:lvasgn, :butwas,
                  s(:send, nil, :mu_pp_for_diff,
                    s(:lvar, :act))),
                s(:lvasgn, :result,
                  s(:nil)),
                s(:lvasgn, :need_to_diff,
                  s(:and,
                    s(:send,
                      s(:const,
                        s(:const, nil, :MiniTest), :Assertions), :diff),
                    s(:begin,
                      s(:or,
                        s(:or,
                          s(:or,
                            s(:or,
                              s(:send,
                                s(:lvar, :expect), :include?,
                                s(:str, "\n")),
                              s(:send,
                                s(:lvar, :butwas), :include?,
                                s(:str, "\n"))),
                            s(:send,
                              s(:send,
                                s(:lvar, :expect), :size), :>,
                              s(:int, 30))),
                          s(:send,
                            s(:send,
                              s(:lvar, :butwas), :size), :>,
                            s(:int, 30))),
                        s(:send,
                          s(:lvar, :expect), :==,
                          s(:lvar, :butwas)))))),
                s(:if,
                  s(:lvar, :need_to_diff), nil,
                  s(:return,
                    s(:dstr,
                      s(:str, "Expected: "),
                      s(:begin,
                        s(:send, nil, :mu_pp,
                          s(:lvar, :exp))),
                      s(:str, "\n  Actual: "),
                      s(:begin,
                        s(:send, nil, :mu_pp,
                          s(:lvar, :act)))))),
                s(:lvasgn, :tempfile_a,
                  s(:nil)),
                s(:lvasgn, :tempfile_b,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:const, nil, :Tempfile), :open,
                    s(:str, "expect")),
                  s(:args,
                    s(:arg, :a)),
                  s(:begin,
                    s(:lvasgn, :tempfile_a,
                      s(:lvar, :a)),
                    s(:send,
                      s(:lvar, :a), :puts,
                      s(:lvar, :expect)),
                    s(:send,
                      s(:lvar, :a), :flush),
                    s(:block,
                      s(:send,
                        s(:const, nil, :Tempfile), :open,
                        s(:str, "butwas")),
                      s(:args,
                        s(:arg, :b)),
                      s(:begin,
                        s(:lvasgn, :tempfile_b,
                          s(:lvar, :b)),
                        s(:send,
                          s(:lvar, :b), :puts,
                          s(:lvar, :butwas)),
                        s(:send,
                          s(:lvar, :b), :flush),
                        s(:lvasgn, :result,
                          s(:xstr,
                            s(:begin,
                              s(:send,
                                s(:const,
                                  s(:const, nil, :MiniTest), :Assertions), :diff)),
                            s(:str, " "),
                            s(:begin,
                              s(:send,
                                s(:lvar, :a), :path)),
                            s(:str, " "),
                            s(:begin,
                              s(:send,
                                s(:lvar, :b), :path)))),
                        s(:send,
                          s(:lvar, :result), :sub!,
                          s(:regexp,
                            s(:str, "^\\-\\-\\- .+"),
                            s(:regopt)),
                          s(:str, "--- expected")),
                        s(:send,
                          s(:lvar, :result), :sub!,
                          s(:regexp,
                            s(:str, "^\\+\\+\\+ .+"),
                            s(:regopt)),
                          s(:str, "+++ actual")),
                        s(:if,
                          s(:send,
                            s(:lvar, :result), :empty?),
                          s(:begin,
                            s(:lvasgn, :klass,
                              s(:send,
                                s(:lvar, :exp), :class)),
                            s(:lvasgn, :result,
                              s(:send,
                                s(:array,
                                  s(:dstr,
                                    s(:str, "No visible difference in the "),
                                    s(:begin,
                                      s(:lvar, :klass)),
                                    s(:str, "#inspect output.\n")),
                                  s(:str, "You should look at the implementation of #== on "),
                                  s(:dstr,
                                    s(:begin,
                                      s(:lvar, :klass)),
                                    s(:str, " or its members.\n")),
                                  s(:lvar, :expect)), :join))), nil))))),
                s(:lvar, :result)),
              s(:begin,
                s(:if,
                  s(:lvar, :tempfile_a),
                  s(:send,
                    s(:lvar, :tempfile_a), :close!), nil),
                s(:if,
                  s(:lvar, :tempfile_b),
                  s(:send,
                    s(:lvar, :tempfile_b), :close!), nil)))),
          s(:def, :mu_pp,
            s(:args,
              s(:arg, :obj)),
            s(:begin,
              s(:lvasgn, :s,
                s(:send,
                  s(:lvar, :obj), :inspect)),
              s(:if,
                s(:defined?,
                  s(:const, nil, :Encoding)),
                s(:lvasgn, :s,
                  s(:send,
                    s(:lvar, :s), :encode,
                    s(:send,
                      s(:const, nil, :Encoding), :default_external))), nil),
              s(:lvar, :s))),
          s(:def, :mu_pp_for_diff,
            s(:args,
              s(:arg, :obj)),
            s(:send,
              s(:send,
                s(:send, nil, :mu_pp,
                  s(:lvar, :obj)), :gsub,
                s(:regexp,
                  s(:str, "\\\\n"),
                  s(:regopt)),
                s(:str, "\n")), :gsub,
              s(:regexp,
                s(:str, ":0x[a-fA-F0-9]{4,}"),
                s(:regopt, :m)),
              s(:str, ":0xXXXXXX"))),
          s(:def, :_assertions=,
            s(:args,
              s(:arg, :n)),
            s(:ivasgn, :@_assertions,
              s(:lvar, :n))),
          s(:def, :_assertions,
            s(:args),
            s(:or_asgn,
              s(:ivasgn, :@_assertions),
              s(:int, 0))),
          s(:def, :assert,
            s(:args,
              s(:arg, :test),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:or_asgn,
                s(:lvasgn, :msg),
                s(:str, "Failed assertion, no message given.")),
              s(:op_asgn,
                s(:send,
                  s(:self), :_assertions), :+,
                s(:int, 1)),
              s(:if,
                s(:lvar, :test), nil,
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:const, nil, :Proc), :===,
                      s(:lvar, :msg)),
                    s(:lvasgn, :msg,
                      s(:send,
                        s(:lvar, :msg), :call)), nil),
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :MiniTest), :Assertion),
                    s(:lvar, :msg)))),
              s(:true))),
          s(:def, :assert_empty,
            s(:args,
              s(:arg, :obj),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :obj))),
                    s(:str, " to be empty")))),
              s(:send, nil, :assert_respond_to,
                s(:lvar, :obj),
                s(:sym, :empty?)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :obj), :empty?),
                s(:lvar, :msg)))),
          s(:def, :assert_equal,
            s(:args,
              s(:arg, :exp),
              s(:arg, :act),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg),
                    s(:str, "")),
                  s(:args),
                  s(:send, nil, :diff,
                    s(:lvar, :exp),
                    s(:lvar, :act)))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :exp), :==,
                  s(:lvar, :act)),
                s(:lvar, :msg)))),
          s(:def, :assert_in_delta,
            s(:args,
              s(:arg, :exp),
              s(:arg, :act),
              s(:optarg, :delta,
                s(:float, 0.001)),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :n,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :exp), :-,
                      s(:lvar, :act))), :abs)),
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected |"),
                    s(:begin,
                      s(:lvar, :exp)),
                    s(:str, " - "),
                    s(:begin,
                      s(:lvar, :act)),
                    s(:str, "| ("),
                    s(:begin,
                      s(:lvar, :n)),
                    s(:str, ") to be <= "),
                    s(:begin,
                      s(:lvar, :delta))))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :delta), :>=,
                  s(:lvar, :n)),
                s(:lvar, :msg)))),
          s(:def, :assert_in_epsilon,
            s(:args,
              s(:arg, :a),
              s(:arg, :b),
              s(:optarg, :epsilon,
                s(:float, 0.001)),
              s(:optarg, :msg,
                s(:nil))),
            s(:send, nil, :assert_in_delta,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:send,
                s(:send,
                  s(:array,
                    s(:send,
                      s(:lvar, :a), :abs),
                    s(:send,
                      s(:lvar, :b), :abs)), :min), :*,
                s(:lvar, :epsilon)),
              s(:lvar, :msg))),
          s(:def, :assert_includes,
            s(:args,
              s(:arg, :collection),
              s(:arg, :obj),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :collection))),
                    s(:str, " to include "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :obj)))))),
              s(:send, nil, :assert_respond_to,
                s(:lvar, :collection),
                s(:sym, :include?)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :collection), :include?,
                  s(:lvar, :obj)),
                s(:lvar, :msg)))),
          s(:def, :assert_instance_of,
            s(:args,
              s(:arg, :cls),
              s(:arg, :obj),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :obj))),
                    s(:str, " to be an instance of "),
                    s(:begin,
                      s(:lvar, :cls)),
                    s(:str, ", not "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :obj), :class))))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :obj), :instance_of?,
                  s(:lvar, :cls)),
                s(:lvar, :msg)))),
          s(:def, :assert_kind_of,
            s(:args,
              s(:arg, :cls),
              s(:arg, :obj),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :obj))),
                    s(:str, " to be a kind of "),
                    s(:begin,
                      s(:lvar, :cls)),
                    s(:str, ", not "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :obj), :class))))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :obj), :kind_of?,
                  s(:lvar, :cls)),
                s(:lvar, :msg)))),
          s(:def, :assert_match,
            s(:args,
              s(:arg, :matcher),
              s(:arg, :obj),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :matcher))),
                    s(:str, " to match "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :obj)))))),
              s(:send, nil, :assert_respond_to,
                s(:lvar, :matcher),
                s(:sym, :=~)),
              s(:if,
                s(:send,
                  s(:const, nil, :String), :===,
                  s(:lvar, :matcher)),
                s(:lvasgn, :matcher,
                  s(:send,
                    s(:const, nil, :Regexp), :new,
                    s(:send,
                      s(:const, nil, :Regexp), :escape,
                      s(:lvar, :matcher)))), nil),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :matcher), :=~,
                  s(:lvar, :obj)),
                s(:lvar, :msg)))),
          s(:def, :assert_nil,
            s(:args,
              s(:arg, :obj),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :obj))),
                    s(:str, " to be nil")))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :obj), :nil?),
                s(:lvar, :msg)))),
          s(:def, :assert_operator,
            s(:args,
              s(:arg, :o1),
              s(:arg, :op),
              s(:optarg, :o2,
                s(:begin,
                  s(:lvasgn, :predicate,
                    s(:true)),
                  s(:nil))),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:if,
                s(:lvar, :predicate),
                s(:return,
                  s(:send, nil, :assert_predicate,
                    s(:lvar, :o1),
                    s(:lvar, :op),
                    s(:lvar, :msg))), nil),
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :o1))),
                    s(:str, " to be "),
                    s(:begin,
                      s(:lvar, :op)),
                    s(:str, " "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :o2)))))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :o1), :__send__,
                  s(:lvar, :op),
                  s(:lvar, :o2)),
                s(:lvar, :msg)))),
          s(:def, :assert_output,
            s(:args,
              s(:optarg, :stdout,
                s(:nil)),
              s(:optarg, :stderr,
                s(:nil))),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :out),
                  s(:lvasgn, :err)),
                s(:block,
                  s(:send, nil, :capture_io),
                  s(:args),
                  s(:yield))),
              s(:if,
                s(:lvar, :stderr),
                s(:lvasgn, :err_msg,
                  s(:if,
                    s(:send,
                      s(:const, nil, :Regexp), :===,
                      s(:lvar, :stderr)),
                    s(:sym, :assert_match),
                    s(:sym, :assert_equal))), nil),
              s(:if,
                s(:lvar, :stdout),
                s(:lvasgn, :out_msg,
                  s(:if,
                    s(:send,
                      s(:const, nil, :Regexp), :===,
                      s(:lvar, :stdout)),
                    s(:sym, :assert_match),
                    s(:sym, :assert_equal))), nil),
              s(:if,
                s(:lvar, :err_msg),
                s(:lvasgn, :y,
                  s(:send, nil, :send,
                    s(:lvar, :err_msg),
                    s(:lvar, :stderr),
                    s(:lvar, :err),
                    s(:str, "In stderr"))), nil),
              s(:if,
                s(:lvar, :out_msg),
                s(:lvasgn, :x,
                  s(:send, nil, :send,
                    s(:lvar, :out_msg),
                    s(:lvar, :stdout),
                    s(:lvar, :out),
                    s(:str, "In stdout"))), nil),
              s(:and,
                s(:begin,
                  s(:or,
                    s(:send,
                      s(:lvar, :stdout), :!),
                    s(:lvar, :x))),
                s(:begin,
                  s(:or,
                    s(:send,
                      s(:lvar, :stderr), :!),
                    s(:lvar, :y)))))),
          s(:def, :assert_predicate,
            s(:args,
              s(:arg, :o1),
              s(:arg, :op),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :o1))),
                    s(:str, " to be "),
                    s(:begin,
                      s(:lvar, :op))))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :o1), :__send__,
                  s(:lvar, :op)),
                s(:lvar, :msg)))),
          s(:def, :assert_raises,
            s(:args,
              s(:restarg, :exp)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :String), :===,
                  s(:send,
                    s(:lvar, :exp), :last)),
                s(:lvasgn, :msg,
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:lvar, :exp), :pop)),
                    s(:str, ".\n"))), nil),
              s(:kwbegin,
                s(:rescue,
                  s(:yield),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :MiniTest), :Skip)),
                    s(:lvasgn, :e),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :exp), :include?,
                          s(:const,
                            s(:const, nil, :MiniTest), :Skip)),
                        s(:return,
                          s(:lvar, :e)), nil),
                      s(:send, nil, :raise,
                        s(:lvar, :e)))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :Exception)),
                    s(:lvasgn, :e),
                    s(:begin,
                      s(:lvasgn, :expected,
                        s(:block,
                          s(:send,
                            s(:lvar, :exp), :any?),
                          s(:args,
                            s(:arg, :ex)),
                          s(:if,
                            s(:send,
                              s(:lvar, :ex), :instance_of?,
                              s(:const, nil, :Module)),
                            s(:send,
                              s(:lvar, :e), :kind_of?,
                              s(:lvar, :ex)),
                            s(:send,
                              s(:lvar, :e), :instance_of?,
                              s(:lvar, :ex))))),
                      s(:send, nil, :assert,
                        s(:lvar, :expected),
                        s(:block,
                          s(:send, nil, :proc),
                          s(:args),
                          s(:send, nil, :exception_details,
                            s(:lvar, :e),
                            s(:dstr,
                              s(:begin,
                                s(:lvar, :msg)),
                              s(:begin,
                                s(:send, nil, :mu_pp,
                                  s(:lvar, :exp))),
                              s(:str, " exception expected, not"))))),
                      s(:return,
                        s(:lvar, :e)))), nil)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :exp), :size), :==,
                  s(:int, 1)),
                s(:lvasgn, :exp,
                  s(:send,
                    s(:lvar, :exp), :first)), nil),
              s(:send, nil, :flunk,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :msg)),
                  s(:begin,
                    s(:send, nil, :mu_pp,
                      s(:lvar, :exp))),
                  s(:str, " expected but nothing was raised."))))),
          s(:def, :assert_respond_to,
            s(:args,
              s(:arg, :obj),
              s(:arg, :meth),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :obj))),
                    s(:str, " ("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :obj), :class)),
                    s(:str, ") to respond to #"),
                    s(:begin,
                      s(:lvar, :meth))))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :obj), :respond_to?,
                  s(:lvar, :meth)),
                s(:lvar, :msg)))),
          s(:def, :assert_same,
            s(:args,
              s(:arg, :exp),
              s(:arg, :act),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :data,
                      s(:array,
                        s(:send, nil, :mu_pp,
                          s(:lvar, :act)),
                        s(:send,
                          s(:lvar, :act), :object_id),
                        s(:send, nil, :mu_pp,
                          s(:lvar, :exp)),
                        s(:send,
                          s(:lvar, :exp), :object_id))),
                    s(:send,
                      s(:str, "Expected %s (oid=%d) to be the same as %s (oid=%d)"), :%,
                      s(:lvar, :data))))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :exp), :equal?,
                  s(:lvar, :act)),
                s(:lvar, :msg)))),
          s(:def, :assert_send,
            s(:args,
              s(:arg, :send_ary),
              s(:optarg, :m,
                s(:nil))),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :recv),
                  s(:lvasgn, :msg),
                  s(:splat,
                    s(:lvasgn, :args))),
                s(:lvar, :send_ary)),
              s(:lvasgn, :m,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :m)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :recv))),
                    s(:str, "."),
                    s(:begin,
                      s(:lvar, :msg)),
                    s(:str, "(*"),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :args))),
                    s(:str, ") to return true")))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :recv), :__send__,
                  s(:lvar, :msg),
                  s(:splat,
                    s(:lvar, :args))),
                s(:lvar, :m)))),
          s(:def, :assert_silent,
            s(:args),
            s(:block,
              s(:send, nil, :assert_output,
                s(:str, ""),
                s(:str, "")),
              s(:args),
              s(:yield))),
          s(:def, :assert_throws,
            s(:args,
              s(:arg, :sym),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :default,
                s(:dstr,
                  s(:str, "Expected "),
                  s(:begin,
                    s(:send, nil, :mu_pp,
                      s(:lvar, :sym))),
                  s(:str, " to have been thrown"))),
              s(:lvasgn, :caught,
                s(:true)),
              s(:block,
                s(:send, nil, :catch,
                  s(:lvar, :sym)),
                s(:args),
                s(:begin,
                  s(:kwbegin,
                    s(:rescue,
                      s(:yield),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :ThreadError)),
                        s(:lvasgn, :e),
                        s(:op_asgn,
                          s(:lvasgn, :default), :+,
                          s(:dstr,
                            s(:str, ", not :"),
                            s(:begin,
                              s(:send,
                                s(:send,
                                  s(:lvar, :e), :message), :[],
                                s(:regexp,
                                  s(:str, "uncaught throw \\`(\\w+?)\\'"),
                                  s(:regopt)),
                                s(:int, 1)))))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :ArgumentError)),
                        s(:lvasgn, :e),
                        s(:op_asgn,
                          s(:lvasgn, :default), :+,
                          s(:dstr,
                            s(:str, ", not "),
                            s(:begin,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :e), :message), :split,
                                  s(:regexp,
                                    s(:str, " "),
                                    s(:regopt))), :last))))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :NameError)),
                        s(:lvasgn, :e),
                        s(:op_asgn,
                          s(:lvasgn, :default), :+,
                          s(:dstr,
                            s(:str, ", not "),
                            s(:begin,
                              s(:send,
                                s(:send,
                                  s(:lvar, :e), :name), :inspect))))), nil)),
                  s(:lvasgn, :caught,
                    s(:false)))),
              s(:send, nil, :assert,
                s(:lvar, :caught),
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:lvar, :default))))),
          s(:def, :capture_io,
            s(:args),
            s(:begin,
              s(:send, nil, :require,
                s(:str, "stringio")),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :captured_stdout),
                  s(:lvasgn, :captured_stderr)),
                s(:array,
                  s(:send,
                    s(:const, nil, :StringIO), :new),
                  s(:send,
                    s(:const, nil, :StringIO), :new))),
              s(:block,
                s(:send, nil, :synchronize),
                s(:args),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :orig_stdout),
                      s(:lvasgn, :orig_stderr)),
                    s(:array,
                      s(:gvar, :$stdout),
                      s(:gvar, :$stderr))),
                  s(:masgn,
                    s(:mlhs,
                      s(:gvasgn, :$stdout),
                      s(:gvasgn, :$stderr)),
                    s(:array,
                      s(:lvar, :captured_stdout),
                      s(:lvar, :captured_stderr))),
                  s(:kwbegin,
                    s(:ensure,
                      s(:yield),
                      s(:begin,
                        s(:gvasgn, :$stdout,
                          s(:lvar, :orig_stdout)),
                        s(:gvasgn, :$stderr,
                          s(:lvar, :orig_stderr))))))),
              s(:return,
                s(:send,
                  s(:lvar, :captured_stdout), :string),
                s(:send,
                  s(:lvar, :captured_stderr), :string)))),
          s(:def, :capture_subprocess_io,
            s(:args),
            s(:begin,
              s(:send, nil, :require,
                s(:str, "tempfile")),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :captured_stdout),
                  s(:lvasgn, :captured_stderr)),
                s(:array,
                  s(:send,
                    s(:const, nil, :Tempfile), :new,
                    s(:str, "out")),
                  s(:send,
                    s(:const, nil, :Tempfile), :new,
                    s(:str, "err")))),
              s(:block,
                s(:send, nil, :synchronize),
                s(:args),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :orig_stdout),
                      s(:lvasgn, :orig_stderr)),
                    s(:array,
                      s(:send,
                        s(:gvar, :$stdout), :dup),
                      s(:send,
                        s(:gvar, :$stderr), :dup))),
                  s(:send,
                    s(:gvar, :$stdout), :reopen,
                    s(:lvar, :captured_stdout)),
                  s(:send,
                    s(:gvar, :$stderr), :reopen,
                    s(:lvar, :captured_stderr)),
                  s(:kwbegin,
                    s(:ensure,
                      s(:begin,
                        s(:yield),
                        s(:send,
                          s(:gvar, :$stdout), :rewind),
                        s(:send,
                          s(:gvar, :$stderr), :rewind),
                        s(:array,
                          s(:send,
                            s(:lvar, :captured_stdout), :read),
                          s(:send,
                            s(:lvar, :captured_stderr), :read))),
                      s(:begin,
                        s(:send,
                          s(:gvar, :$stdout), :reopen,
                          s(:lvar, :orig_stdout)),
                        s(:send,
                          s(:gvar, :$stderr), :reopen,
                          s(:lvar, :orig_stderr)),
                        s(:send,
                          s(:lvar, :orig_stdout), :close),
                        s(:send,
                          s(:lvar, :orig_stderr), :close),
                        s(:send,
                          s(:lvar, :captured_stdout), :close!),
                        s(:send,
                          s(:lvar, :captured_stderr), :close!)))))))),
          s(:def, :exception_details,
            s(:args,
              s(:arg, :e),
              s(:arg, :msg)),
            s(:send,
              s(:array,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :msg))),
                s(:dstr,
                  s(:str, "Class: <"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :e), :class)),
                  s(:str, ">")),
                s(:dstr,
                  s(:str, "Message: <"),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :e), :message), :inspect)),
                  s(:str, ">")),
                s(:str, "---Backtrace---"),
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:const, nil, :MiniTest), :filter_backtrace,
                        s(:send,
                          s(:lvar, :e), :backtrace)), :join,
                      s(:str, "\n")))),
                s(:str, "---------------")), :join,
              s(:str, "\n"))),
          s(:def, :flunk,
            s(:args,
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:or_asgn,
                s(:lvasgn, :msg),
                s(:str, "Epic Fail!")),
              s(:send, nil, :assert,
                s(:false),
                s(:lvar, :msg)))),
          s(:def, :message,
            s(:args,
              s(:optarg, :msg,
                s(:nil)),
              s(:optarg, :ending,
                s(:str, ".")),
              s(:blockarg, :default)),
            s(:block,
              s(:send, nil, :proc),
              s(:args),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:const, nil, :Proc), :===,
                    s(:lvar, :msg)),
                  s(:lvasgn, :msg,
                    s(:send,
                      s(:send,
                        s(:lvar, :msg), :call), :chomp,
                      s(:str, "."))), nil),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:lvar, :msg), :nil?),
                    s(:send,
                      s(:send,
                        s(:lvar, :msg), :to_s), :empty?)), nil,
                  s(:lvasgn, :custom_message,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :msg)),
                      s(:str, ".\n")))),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :custom_message)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :default), :call)),
                  s(:begin,
                    s(:lvar, :ending)))))),
          s(:def, :pass,
            s(:args,
              s(:optarg, :msg,
                s(:nil))),
            s(:send, nil, :assert,
              s(:true))),
          s(:def, :refute,
            s(:args,
              s(:arg, :test),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:or_asgn,
                s(:lvasgn, :msg),
                s(:str, "Failed refutation, no message given")),
              s(:send,
                s(:send, nil, :assert,
                  s(:send,
                    s(:lvar, :test), :!),
                  s(:lvar, :msg)), :!))),
          s(:def, :refute_empty,
            s(:args,
              s(:arg, :obj),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :obj))),
                    s(:str, " to not be empty")))),
              s(:send, nil, :assert_respond_to,
                s(:lvar, :obj),
                s(:sym, :empty?)),
              s(:send, nil, :refute,
                s(:send,
                  s(:lvar, :obj), :empty?),
                s(:lvar, :msg)))),
          s(:def, :refute_equal,
            s(:args,
              s(:arg, :exp),
              s(:arg, :act),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :act))),
                    s(:str, " to not be equal to "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :exp)))))),
              s(:send, nil, :refute,
                s(:send,
                  s(:lvar, :exp), :==,
                  s(:lvar, :act)),
                s(:lvar, :msg)))),
          s(:def, :refute_in_delta,
            s(:args,
              s(:arg, :exp),
              s(:arg, :act),
              s(:optarg, :delta,
                s(:float, 0.001)),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :n,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :exp), :-,
                      s(:lvar, :act))), :abs)),
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected |"),
                    s(:begin,
                      s(:lvar, :exp)),
                    s(:str, " - "),
                    s(:begin,
                      s(:lvar, :act)),
                    s(:str, "| ("),
                    s(:begin,
                      s(:lvar, :n)),
                    s(:str, ") to not be <= "),
                    s(:begin,
                      s(:lvar, :delta))))),
              s(:send, nil, :refute,
                s(:send,
                  s(:lvar, :delta), :>=,
                  s(:lvar, :n)),
                s(:lvar, :msg)))),
          s(:def, :refute_in_epsilon,
            s(:args,
              s(:arg, :a),
              s(:arg, :b),
              s(:optarg, :epsilon,
                s(:float, 0.001)),
              s(:optarg, :msg,
                s(:nil))),
            s(:send, nil, :refute_in_delta,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:send,
                s(:lvar, :a), :*,
                s(:lvar, :epsilon)),
              s(:lvar, :msg))),
          s(:def, :refute_includes,
            s(:args,
              s(:arg, :collection),
              s(:arg, :obj),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :collection))),
                    s(:str, " to not include "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :obj)))))),
              s(:send, nil, :assert_respond_to,
                s(:lvar, :collection),
                s(:sym, :include?)),
              s(:send, nil, :refute,
                s(:send,
                  s(:lvar, :collection), :include?,
                  s(:lvar, :obj)),
                s(:lvar, :msg)))),
          s(:def, :refute_instance_of,
            s(:args,
              s(:arg, :cls),
              s(:arg, :obj),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :obj))),
                    s(:str, " to not be an instance of "),
                    s(:begin,
                      s(:lvar, :cls))))),
              s(:send, nil, :refute,
                s(:send,
                  s(:lvar, :obj), :instance_of?,
                  s(:lvar, :cls)),
                s(:lvar, :msg)))),
          s(:def, :refute_kind_of,
            s(:args,
              s(:arg, :cls),
              s(:arg, :obj),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :obj))),
                    s(:str, " to not be a kind of "),
                    s(:begin,
                      s(:lvar, :cls))))),
              s(:send, nil, :refute,
                s(:send,
                  s(:lvar, :obj), :kind_of?,
                  s(:lvar, :cls)),
                s(:lvar, :msg)))),
          s(:def, :refute_match,
            s(:args,
              s(:arg, :matcher),
              s(:arg, :obj),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :matcher))),
                    s(:str, " to not match "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :obj)))))),
              s(:send, nil, :assert_respond_to,
                s(:lvar, :matcher),
                s(:sym, :=~)),
              s(:if,
                s(:send,
                  s(:const, nil, :String), :===,
                  s(:lvar, :matcher)),
                s(:lvasgn, :matcher,
                  s(:send,
                    s(:const, nil, :Regexp), :new,
                    s(:send,
                      s(:const, nil, :Regexp), :escape,
                      s(:lvar, :matcher)))), nil),
              s(:send, nil, :refute,
                s(:send,
                  s(:lvar, :matcher), :=~,
                  s(:lvar, :obj)),
                s(:lvar, :msg)))),
          s(:def, :refute_nil,
            s(:args,
              s(:arg, :obj),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :obj))),
                    s(:str, " to not be nil")))),
              s(:send, nil, :refute,
                s(:send,
                  s(:lvar, :obj), :nil?),
                s(:lvar, :msg)))),
          s(:def, :refute_operator,
            s(:args,
              s(:arg, :o1),
              s(:arg, :op),
              s(:optarg, :o2,
                s(:begin,
                  s(:lvasgn, :predicate,
                    s(:true)),
                  s(:nil))),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:if,
                s(:lvar, :predicate),
                s(:return,
                  s(:send, nil, :refute_predicate,
                    s(:lvar, :o1),
                    s(:lvar, :op),
                    s(:lvar, :msg))), nil),
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :o1))),
                    s(:str, " to not be "),
                    s(:begin,
                      s(:lvar, :op)),
                    s(:str, " "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :o2)))))),
              s(:send, nil, :refute,
                s(:send,
                  s(:lvar, :o1), :__send__,
                  s(:lvar, :op),
                  s(:lvar, :o2)),
                s(:lvar, :msg)))),
          s(:def, :refute_predicate,
            s(:args,
              s(:arg, :o1),
              s(:arg, :op),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :o1))),
                    s(:str, " to not be "),
                    s(:begin,
                      s(:lvar, :op))))),
              s(:send, nil, :refute,
                s(:send,
                  s(:lvar, :o1), :__send__,
                  s(:lvar, :op)),
                s(:lvar, :msg)))),
          s(:def, :refute_respond_to,
            s(:args,
              s(:arg, :obj),
              s(:arg, :meth),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :obj))),
                    s(:str, " to not respond to "),
                    s(:begin,
                      s(:lvar, :meth))))),
              s(:send, nil, :refute,
                s(:send,
                  s(:lvar, :obj), :respond_to?,
                  s(:lvar, :meth)),
                s(:lvar, :msg)))),
          s(:def, :refute_same,
            s(:args,
              s(:arg, :exp),
              s(:arg, :act),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :data,
                      s(:array,
                        s(:send, nil, :mu_pp,
                          s(:lvar, :act)),
                        s(:send,
                          s(:lvar, :act), :object_id),
                        s(:send, nil, :mu_pp,
                          s(:lvar, :exp)),
                        s(:send,
                          s(:lvar, :exp), :object_id))),
                    s(:send,
                      s(:str, "Expected %s (oid=%d) to not be the same as %s (oid=%d)"), :%,
                      s(:lvar, :data))))),
              s(:send, nil, :refute,
                s(:send,
                  s(:lvar, :exp), :equal?,
                  s(:lvar, :act)),
                s(:lvar, :msg)))),
          s(:def, :skip,
            s(:args,
              s(:optarg, :msg,
                s(:nil)),
              s(:optarg, :bt,
                s(:send, nil, :caller))),
            s(:begin,
              s(:or_asgn,
                s(:lvasgn, :msg),
                s(:str, "Skipped, no message given")),
              s(:ivasgn, :@skip,
                s(:true)),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :MiniTest), :Skip),
                s(:lvar, :msg),
                s(:lvar, :bt)))),
          s(:def, :skipped?,
            s(:args),
            s(:and,
              s(:defined?,
                s(:ivar, :@skip)),
              s(:ivar, :@skip))),
          s(:def, :synchronize,
            s(:args),
            s(:block,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Minitest), :Unit), :runner), :synchronize),
              s(:args),
              s(:yield))))),
      s(:class,
        s(:const, nil, :Unit), nil,
        s(:begin,
          s(:casgn, nil, :VERSION,
            s(:str, "4.7.5")),
          s(:send, nil, :attr_accessor,
            s(:sym, :report),
            s(:sym, :failures),
            s(:sym, :errors),
            s(:sym, :skips)),
          s(:send, nil, :attr_accessor,
            s(:sym, :assertion_count)),
          s(:send, nil, :attr_writer,
            s(:sym, :test_count)),
          s(:send, nil, :attr_accessor,
            s(:sym, :start_time)),
          s(:send, nil, :attr_accessor,
            s(:sym, :help)),
          s(:send, nil, :attr_accessor,
            s(:sym, :verbose)),
          s(:send, nil, :attr_writer,
            s(:sym, :options)),
          s(:send, nil, :attr_accessor,
            s(:sym, :info_signal)),
          s(:def, :options,
            s(:args),
            s(:or_asgn,
              s(:ivasgn, :@options),
              s(:hash))),
          s(:or_asgn,
            s(:cvasgn, :@@installed_at_exit),
            s(:false)),
          s(:cvasgn, :@@out,
            s(:gvar, :$stdout)),
          s(:cvasgn, :@@after_tests,
            s(:array)),
          s(:defs,
            s(:self), :after_tests,
            s(:args,
              s(:blockarg, :block)),
            s(:send,
              s(:cvar, :@@after_tests), :<<,
              s(:lvar, :block))),
          s(:defs,
            s(:self), :autorun,
            s(:args),
            s(:begin,
              s(:if,
                s(:cvar, :@@installed_at_exit), nil,
                s(:block,
                  s(:send, nil, :at_exit),
                  s(:args),
                  s(:begin,
                    s(:if,
                      s(:and,
                        s(:gvar, :$!),
                        s(:send,
                          s(:send,
                            s(:gvar, :$!), :kind_of?,
                            s(:const, nil, :SystemExit)), :!)),
                      s(:next), nil),
                    s(:lvasgn, :exit_code,
                      s(:nil)),
                    s(:block,
                      s(:send, nil, :at_exit),
                      s(:args),
                      s(:begin,
                        s(:send,
                          s(:cvar, :@@after_tests), :reverse_each,
                          s(:block_pass,
                            s(:sym, :call))),
                        s(:if,
                          s(:and,
                            s(:lvar, :exit_code),
                            s(:send,
                              s(:lvar, :exit_code), :!=,
                              s(:int, 0))),
                          s(:send, nil, :exit,
                            s(:false)), nil))),
                    s(:lvasgn, :exit_code,
                      s(:send,
                        s(:send,
                          s(:const,
                            s(:const, nil, :MiniTest), :Unit), :new), :run,
                        s(:const, nil, :ARGV)))))),
              s(:cvasgn, :@@installed_at_exit,
                s(:true)))),
          s(:defs,
            s(:self), :output,
            s(:args),
            s(:cvar, :@@out)),
          s(:defs,
            s(:self), :output=,
            s(:args,
              s(:arg, :stream)),
            s(:cvasgn, :@@out,
              s(:lvar, :stream))),
          s(:defs,
            s(:self), :runner=,
            s(:args,
              s(:arg, :runner)),
            s(:cvasgn, :@@runner,
              s(:lvar, :runner))),
          s(:defs,
            s(:self), :runner,
            s(:args),
            s(:or_asgn,
              s(:cvasgn, :@@runner),
              s(:send,
                s(:self), :new))),
          s(:defs,
            s(:self), :plugins,
            s(:args),
            s(:or_asgn,
              s(:cvasgn, :@@plugins),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:array,
                      s(:str, "run_tests")), :+,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:send, nil, :public_instance_methods,
                            s(:false)), :grep,
                          s(:regexp,
                            s(:str, "^run_"),
                            s(:regopt))), :map),
                      s(:args,
                        s(:arg, :s)),
                      s(:send,
                        s(:lvar, :s), :to_s)))), :uniq))),
          s(:def, :output,
            s(:args),
            s(:send,
              s(:send,
                s(:self), :class), :output)),
          s(:def, :puts,
            s(:args,
              s(:restarg, :a)),
            s(:send,
              s(:send, nil, :output), :puts,
              s(:splat,
                s(:lvar, :a)))),
          s(:def, :print,
            s(:args,
              s(:restarg, :a)),
            s(:send,
              s(:send, nil, :output), :print,
              s(:splat,
                s(:lvar, :a)))),
          s(:def, :test_count,
            s(:args),
            s(:or_asgn,
              s(:ivasgn, :@test_count),
              s(:int, 0))),
          s(:def, :_run_anything,
            s(:args,
              s(:arg, :type)),
            s(:begin,
              s(:lvasgn, :suites,
                s(:send,
                  s(:const, nil, :TestCase), :send,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :type)),
                    s(:str, "_suites")))),
              s(:if,
                s(:send,
                  s(:lvar, :suites), :empty?),
                s(:return), nil),
              s(:lvasgn, :start,
                s(:send,
                  s(:const, nil, :Time), :now)),
              s(:send, nil, :puts),
              s(:send, nil, :puts,
                s(:dstr,
                  s(:str, "# Running "),
                  s(:begin,
                    s(:lvar, :type)),
                  s(:str, "s:"))),
              s(:send, nil, :puts),
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@test_count),
                  s(:ivasgn, :@assertion_count)),
                s(:array,
                  s(:int, 0),
                  s(:int, 0))),
              s(:lvasgn, :sync,
                s(:send,
                  s(:send, nil, :output), :respond_to?,
                  s(:sym, :sync=))),
              s(:if,
                s(:lvar, :sync),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :old_sync),
                    s(:send,
                      s(:send, nil, :output), :sync=)),
                  s(:array,
                    s(:send,
                      s(:send, nil, :output), :sync),
                    s(:true))), nil),
              s(:lvasgn, :results,
                s(:send, nil, :_run_suites,
                  s(:lvar, :suites),
                  s(:lvar, :type))),
              s(:ivasgn, :@test_count,
                s(:block,
                  s(:send,
                    s(:lvar, :results), :inject,
                    s(:int, 0)),
                  s(:args,
                    s(:arg, :sum),
                    s(:mlhs,
                      s(:arg, :tc),
                      s(:arg, :_))),
                  s(:send,
                    s(:lvar, :sum), :+,
                    s(:lvar, :tc)))),
              s(:ivasgn, :@assertion_count,
                s(:block,
                  s(:send,
                    s(:lvar, :results), :inject,
                    s(:int, 0)),
                  s(:args,
                    s(:arg, :sum),
                    s(:mlhs,
                      s(:arg, :_),
                      s(:arg, :ac))),
                  s(:send,
                    s(:lvar, :sum), :+,
                    s(:lvar, :ac)))),
              s(:if,
                s(:lvar, :sync),
                s(:send,
                  s(:send, nil, :output), :sync=,
                  s(:lvar, :old_sync)), nil),
              s(:lvasgn, :t,
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :-,
                  s(:lvar, :start))),
              s(:send, nil, :puts),
              s(:send, nil, :puts),
              s(:send, nil, :puts,
                s(:send,
                  s(:dstr,
                    s(:str, "Finished "),
                    s(:begin,
                      s(:lvar, :type)),
                    s(:str, "s in %.6fs, %.4f tests/s, %.4f assertions/s.")), :%,
                  s(:array,
                    s(:lvar, :t),
                    s(:send,
                      s(:send, nil, :test_count), :/,
                      s(:lvar, :t)),
                    s(:send,
                      s(:send, nil, :assertion_count), :/,
                      s(:lvar, :t))))),
              s(:block,
                s(:send,
                  s(:send, nil, :report), :each_with_index),
                s(:args,
                  s(:arg, :msg),
                  s(:arg, :i)),
                s(:send, nil, :puts,
                  s(:send,
                    s(:str, "\n%3d) %s"), :%,
                    s(:array,
                      s(:send,
                        s(:lvar, :i), :+,
                        s(:int, 1)),
                      s(:lvar, :msg))))),
              s(:send, nil, :puts),
              s(:send, nil, :status))),
          s(:def, :_run_suites,
            s(:args,
              s(:arg, :suites),
              s(:arg, :type)),
            s(:block,
              s(:send,
                s(:lvar, :suites), :map),
              s(:args,
                s(:arg, :suite)),
              s(:send, nil, :_run_suite,
                s(:lvar, :suite),
                s(:lvar, :type)))),
          s(:def, :_run_suite,
            s(:args,
              s(:arg, :suite),
              s(:arg, :type)),
            s(:begin,
              s(:lvasgn, :header,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :type)),
                  s(:str, "_suite_header"))),
              s(:if,
                s(:send, nil, :respond_to?,
                  s(:lvar, :header)),
                s(:send, nil, :puts,
                  s(:send, nil, :send,
                    s(:lvar, :header),
                    s(:lvar, :suite))), nil),
              s(:lvasgn, :filter,
                s(:or,
                  s(:send,
                    s(:send, nil, :options), :[],
                    s(:sym, :filter)),
                  s(:str, "/./"))),
              s(:if,
                s(:send,
                  s(:lvar, :filter), :=~,
                  s(:regexp,
                    s(:str, "/(.*)/"),
                    s(:regopt))),
                s(:lvasgn, :filter,
                  s(:send,
                    s(:const, nil, :Regexp), :new,
                    s(:nth_ref, 1))), nil),
              s(:lvasgn, :all_test_methods,
                s(:send,
                  s(:lvar, :suite), :send,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :type)),
                    s(:str, "_methods")))),
              s(:lvasgn, :filtered_test_methods,
                s(:block,
                  s(:send,
                    s(:lvar, :all_test_methods), :find_all),
                  s(:args,
                    s(:arg, :m)),
                  s(:or,
                    s(:send,
                      s(:lvar, :filter), :===,
                      s(:lvar, :m)),
                    s(:send,
                      s(:lvar, :filter), :===,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :suite)),
                        s(:str, "#"),
                        s(:begin,
                          s(:lvar, :m))))))),
              s(:lvasgn, :leakchecker,
                s(:send,
                  s(:const, nil, :LeakChecker), :new)),
              s(:lvasgn, :assertions,
                s(:block,
                  s(:send,
                    s(:lvar, :filtered_test_methods), :map),
                  s(:args,
                    s(:arg, :method)),
                  s(:begin,
                    s(:lvasgn, :inst,
                      s(:send,
                        s(:lvar, :suite), :new,
                        s(:lvar, :method))),
                    s(:send,
                      s(:lvar, :inst), :_assertions=,
                      s(:int, 0)),
                    s(:if,
                      s(:ivar, :@verbose),
                      s(:send, nil, :print,
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :suite)),
                          s(:str, "#"),
                          s(:begin,
                            s(:lvar, :method)),
                          s(:str, " = "))), nil),
                    s(:if,
                      s(:ivar, :@verbose),
                      s(:lvasgn, :start_time,
                        s(:send,
                          s(:const, nil, :Time), :now)), nil),
                    s(:lvasgn, :result,
                      s(:send,
                        s(:lvar, :inst), :run,
                        s(:self))),
                    s(:if,
                      s(:ivar, :@verbose),
                      s(:send, nil, :print,
                        s(:send,
                          s(:str, "%.2f s = "), :%,
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:const, nil, :Time), :now), :-,
                              s(:lvar, :start_time))))), nil),
                    s(:send, nil, :print,
                      s(:lvar, :result)),
                    s(:if,
                      s(:ivar, :@verbose),
                      s(:send, nil, :puts), nil),
                    s(:send,
                      s(:gvar, :$stdout), :flush),
                    s(:send,
                      s(:lvar, :leakchecker), :check,
                      s(:dstr,
                        s(:begin,
                          s(:send,
                            s(:lvar, :inst), :class)),
                        s(:str, "#"),
                        s(:begin,
                          s(:send,
                            s(:lvar, :inst), :__name__)))),
                    s(:send,
                      s(:lvar, :inst), :_assertions)))),
              s(:return,
                s(:send,
                  s(:lvar, :assertions), :size),
                s(:block,
                  s(:send,
                    s(:lvar, :assertions), :inject,
                    s(:int, 0)),
                  s(:args,
                    s(:arg, :sum),
                    s(:arg, :n)),
                  s(:send,
                    s(:lvar, :sum), :+,
                    s(:lvar, :n)))))),
          s(:def, :record,
            s(:args,
              s(:arg, :suite),
              s(:arg, :method),
              s(:arg, :assertions),
              s(:arg, :time),
              s(:arg, :error)), nil),
          s(:def, :location,
            s(:args,
              s(:arg, :e)),
            s(:begin,
              s(:lvasgn, :last_before_assertion,
                s(:str, "")),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :e), :backtrace), :reverse_each),
                s(:args,
                  s(:arg, :s)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :s), :=~,
                      s(:regexp,
                        s(:str, "in .(assert|refute|flunk|pass|fail|raise|must|wont)"),
                        s(:regopt))),
                    s(:break), nil),
                  s(:lvasgn, :last_before_assertion,
                    s(:lvar, :s)))),
              s(:send,
                s(:lvar, :last_before_assertion), :sub,
                s(:regexp,
                  s(:str, ":in .*$"),
                  s(:regopt)),
                s(:str, "")))),
          s(:def, :puke,
            s(:args,
              s(:arg, :klass),
              s(:arg, :meth),
              s(:arg, :e)),
            s(:begin,
              s(:lvasgn, :e,
                s(:case,
                  s(:lvar, :e),
                  s(:when,
                    s(:const,
                      s(:const, nil, :MiniTest), :Skip),
                    s(:begin,
                      s(:op_asgn,
                        s(:ivasgn, :@skips), :+,
                        s(:int, 1)),
                      s(:if,
                        s(:ivar, :@verbose), nil,
                        s(:return,
                          s(:str, "S"))),
                      s(:dstr,
                        s(:str, "Skipped:\n"),
                        s(:begin,
                          s(:lvar, :klass)),
                        s(:str, "#"),
                        s(:begin,
                          s(:lvar, :meth)),
                        s(:str, " ["),
                        s(:begin,
                          s(:send, nil, :location,
                            s(:lvar, :e))),
                        s(:str, "]:\n"),
                        s(:begin,
                          s(:send,
                            s(:lvar, :e), :message)),
                        s(:str, "\n")))),
                  s(:when,
                    s(:const,
                      s(:const, nil, :MiniTest), :Assertion),
                    s(:begin,
                      s(:op_asgn,
                        s(:ivasgn, :@failures), :+,
                        s(:int, 1)),
                      s(:dstr,
                        s(:str, "Failure:\n"),
                        s(:begin,
                          s(:lvar, :klass)),
                        s(:str, "#"),
                        s(:begin,
                          s(:lvar, :meth)),
                        s(:str, " ["),
                        s(:begin,
                          s(:send, nil, :location,
                            s(:lvar, :e))),
                        s(:str, "]:\n"),
                        s(:begin,
                          s(:send,
                            s(:lvar, :e), :message)),
                        s(:str, "\n")))),
                  s(:begin,
                    s(:op_asgn,
                      s(:ivasgn, :@errors), :+,
                      s(:int, 1)),
                    s(:lvasgn, :bt,
                      s(:send,
                        s(:send,
                          s(:const, nil, :MiniTest), :filter_backtrace,
                          s(:send,
                            s(:lvar, :e), :backtrace)), :join,
                        s(:str, "\n    "))),
                    s(:dstr,
                      s(:str, "Error:\n"),
                      s(:begin,
                        s(:lvar, :klass)),
                      s(:str, "#"),
                      s(:begin,
                        s(:lvar, :meth)),
                      s(:str, ":\n"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :e), :class)),
                      s(:str, ": "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :e), :message)),
                      s(:str, "\n    "),
                      s(:begin,
                        s(:lvar, :bt)),
                      s(:str, "\n"))))),
              s(:send,
                s(:ivar, :@report), :<<,
                s(:lvar, :e)),
              s(:send,
                s(:lvar, :e), :[],
                s(:int, 0),
                s(:int, 1)))),
          s(:def, :initialize,
            s(:args),
            s(:begin,
              s(:ivasgn, :@report,
                s(:array)),
              s(:ivasgn, :@errors,
                s(:ivasgn, :@failures,
                  s(:ivasgn, :@skips,
                    s(:int, 0)))),
              s(:ivasgn, :@verbose,
                s(:false)),
              s(:ivasgn, :@mutex,
                s(:if,
                  s(:defined?,
                    s(:const, nil, :Mutex)),
                  s(:send,
                    s(:const, nil, :Mutex), :new),
                  s(:nil))),
              s(:ivasgn, :@info_signal,
                s(:send,
                  s(:send,
                    s(:const, nil, :Signal), :list), :[],
                  s(:str, "INFO"))))),
          s(:def, :synchronize,
            s(:args),
            s(:if,
              s(:ivar, :@mutex),
              s(:block,
                s(:send,
                  s(:ivar, :@mutex), :synchronize),
                s(:args),
                s(:yield)),
              s(:yield))),
          s(:def, :process_args,
            s(:args,
              s(:optarg, :args,
                s(:array))),
            s(:begin,
              s(:lvasgn, :options,
                s(:hash)),
              s(:lvasgn, :orig_args,
                s(:send,
                  s(:lvar, :args), :dup)),
              s(:block,
                s(:send,
                  s(:const, nil, :OptionParser), :new),
                s(:args,
                  s(:arg, :opts)),
                s(:begin,
                  s(:send,
                    s(:lvar, :opts), :banner=,
                    s(:str, "minitest options:")),
                  s(:send,
                    s(:lvar, :opts), :version=,
                    s(:const,
                      s(:const,
                        s(:const, nil, :MiniTest), :Unit), :VERSION)),
                  s(:block,
                    s(:send,
                      s(:lvar, :opts), :on,
                      s(:str, "-h"),
                      s(:str, "--help"),
                      s(:str, "Display this help.")),
                    s(:args),
                    s(:begin,
                      s(:send, nil, :puts,
                        s(:lvar, :opts)),
                      s(:send, nil, :exit))),
                  s(:block,
                    s(:send,
                      s(:lvar, :opts), :on,
                      s(:str, "-s"),
                      s(:str, "--seed SEED"),
                      s(:const, nil, :Integer),
                      s(:str, "Sets random seed")),
                    s(:args,
                      s(:arg, :m)),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :seed),
                      s(:send,
                        s(:lvar, :m), :to_i))),
                  s(:block,
                    s(:send,
                      s(:lvar, :opts), :on,
                      s(:str, "-v"),
                      s(:str, "--verbose"),
                      s(:str, "Verbose. Show progress processing files.")),
                    s(:args),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :verbose),
                      s(:true))),
                  s(:block,
                    s(:send,
                      s(:lvar, :opts), :on,
                      s(:str, "-n"),
                      s(:str, "--name PATTERN"),
                      s(:str, "Filter test names on pattern (e.g. /foo/)")),
                    s(:args,
                      s(:arg, :a)),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :filter),
                      s(:lvar, :a))),
                  s(:send,
                    s(:lvar, :opts), :parse!,
                    s(:lvar, :args)),
                  s(:op_asgn,
                    s(:lvasgn, :orig_args), :-,
                    s(:lvar, :args)))),
              s(:if,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :seed)), nil,
                s(:begin,
                  s(:send, nil, :srand),
                  s(:send,
                    s(:lvar, :options), :[]=,
                    s(:sym, :seed),
                    s(:send,
                      s(:send, nil, :srand), :%,
                      s(:int, 65535))),
                  s(:send,
                    s(:send,
                      s(:lvar, :orig_args), :<<,
                      s(:str, "--seed")), :<<,
                    s(:send,
                      s(:send,
                        s(:lvar, :options), :[],
                        s(:sym, :seed)), :to_s)))),
              s(:send, nil, :srand,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :seed))),
              s(:send,
                s(:self), :verbose=,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :verbose))),
              s(:ivasgn, :@help,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :orig_args), :map),
                    s(:args,
                      s(:arg, :s)),
                    s(:if,
                      s(:send,
                        s(:lvar, :s), :=~,
                        s(:regexp,
                          s(:str, "[\\s|&<>$()]"),
                          s(:regopt))),
                      s(:send,
                        s(:lvar, :s), :inspect),
                      s(:lvar, :s))), :join,
                  s(:str, " "))),
              s(:lvar, :options))),
          s(:def, :run,
            s(:args,
              s(:optarg, :args,
                s(:array))),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :runner), :_run,
              s(:lvar, :args))),
          s(:def, :_run,
            s(:args,
              s(:optarg, :args,
                s(:array))),
            s(:rescue,
              s(:begin,
                s(:lvasgn, :args,
                  s(:send, nil, :process_args,
                    s(:lvar, :args))),
                s(:send,
                  s(:send,
                    s(:self), :options), :merge!,
                  s(:lvar, :args)),
                s(:send, nil, :puts,
                  s(:dstr,
                    s(:str, "Run options: "),
                    s(:begin,
                      s(:send, nil, :help)))),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:self), :class), :plugins), :each),
                  s(:args,
                    s(:arg, :plugin)),
                  s(:begin,
                    s(:send, nil, :send,
                      s(:lvar, :plugin)),
                    s(:if,
                      s(:send,
                        s(:send, nil, :report), :empty?), nil,
                      s(:break)))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:self), :test_count), :>,
                    s(:int, 0)),
                  s(:return,
                    s(:send,
                      s(:send, nil, :failures), :+,
                      s(:send, nil, :errors))), nil)),
              s(:resbody,
                s(:array,
                  s(:const, nil, :Interrupt)), nil,
                s(:send, nil, :abort,
                  s(:str, "Interrupted"))), nil)),
          s(:def, :run_tests,
            s(:args),
            s(:send, nil, :_run_anything,
              s(:sym, :test))),
          s(:def, :status,
            s(:args,
              s(:optarg, :io,
                s(:send,
                  s(:self), :output))),
            s(:begin,
              s(:lvasgn, :format,
                s(:str, "%d tests, %d assertions, %d failures, %d errors, %d skips")),
              s(:send,
                s(:lvar, :io), :puts,
                s(:send,
                  s(:lvar, :format), :%,
                  s(:array,
                    s(:send, nil, :test_count),
                    s(:send, nil, :assertion_count),
                    s(:send, nil, :failures),
                    s(:send, nil, :errors),
                    s(:send, nil, :skips)))))),
          s(:module,
            s(:const, nil, :Guard),
            s(:begin,
              s(:def, :jruby?,
                s(:args,
                  s(:optarg, :platform,
                    s(:const, nil, :RUBY_PLATFORM))),
                s(:send,
                  s(:str, "java"), :==,
                  s(:lvar, :platform))),
              s(:def, :maglev?,
                s(:args,
                  s(:optarg, :platform,
                    s(:and,
                      s(:defined?,
                        s(:const, nil, :RUBY_ENGINE)),
                      s(:const, nil, :RUBY_ENGINE)))),
                s(:send,
                  s(:str, "maglev"), :==,
                  s(:lvar, :platform))),
              s(:send, nil, :module_function,
                s(:sym, :maglev?)),
              s(:def, :mri?,
                s(:args,
                  s(:optarg, :platform,
                    s(:const, nil, :RUBY_DESCRIPTION))),
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "^ruby"),
                    s(:regopt)),
                  s(:lvar, :platform))),
              s(:def, :rubinius?,
                s(:args,
                  s(:optarg, :platform,
                    s(:and,
                      s(:defined?,
                        s(:const, nil, :RUBY_ENGINE)),
                      s(:const, nil, :RUBY_ENGINE)))),
                s(:send,
                  s(:str, "rbx"), :==,
                  s(:lvar, :platform))),
              s(:def, :windows?,
                s(:args,
                  s(:optarg, :platform,
                    s(:const, nil, :RUBY_PLATFORM))),
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "mswin|mingw"),
                    s(:regopt)),
                  s(:lvar, :platform))))),
          s(:module,
            s(:const, nil, :LifecycleHooks),
            s(:begin,
              s(:def, :after_setup,
                s(:args), nil),
              s(:def, :before_setup,
                s(:args), nil),
              s(:def, :before_teardown,
                s(:args), nil),
              s(:def, :after_teardown,
                s(:args), nil))),
          s(:class,
            s(:const, nil, :TestCase), nil,
            s(:begin,
              s(:send, nil, :include,
                s(:const, nil, :LifecycleHooks)),
              s(:send, nil, :include,
                s(:const, nil, :Guard)),
              s(:send, nil, :extend,
                s(:const, nil, :Guard)),
              s(:send, nil, :attr_reader,
                s(:sym, :__name__)),
              s(:casgn, nil, :PASSTHROUGH_EXCEPTIONS,
                s(:array,
                  s(:const, nil, :NoMemoryError),
                  s(:const, nil, :SignalException),
                  s(:const, nil, :Interrupt),
                  s(:const, nil, :SystemExit))),
              s(:def, :run,
                s(:args,
                  s(:arg, :runner)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :runner), :info_signal),
                    s(:block,
                      s(:send, nil, :trap,
                        s(:str, "INFO")),
                      s(:args),
                      s(:begin,
                        s(:block,
                          s(:send,
                            s(:send,
                              s(:lvar, :runner), :report), :each_with_index),
                          s(:args,
                            s(:arg, :msg),
                            s(:arg, :i)),
                          s(:send, nil, :warn,
                            s(:send,
                              s(:str, "\n%3d) %s"), :%,
                              s(:array,
                                s(:send,
                                  s(:lvar, :i), :+,
                                  s(:int, 1)),
                                s(:lvar, :msg))))),
                        s(:send, nil, :warn,
                          s(:str, "")),
                        s(:lvasgn, :time,
                          s(:if,
                            s(:send,
                              s(:lvar, :runner), :start_time),
                            s(:send,
                              s(:send,
                                s(:const, nil, :Time), :now), :-,
                              s(:send,
                                s(:lvar, :runner), :start_time)),
                            s(:int, 0))),
                        s(:send, nil, :warn,
                          s(:send,
                            s(:str, "Current Test: %s#%s %.2fs"), :%,
                            s(:array,
                              s(:send,
                                s(:self), :class),
                              s(:send,
                                s(:self), :__name__),
                              s(:lvar, :time)))),
                        s(:send,
                          s(:lvar, :runner), :status,
                          s(:gvar, :$stderr)))), nil),
                  s(:lvasgn, :start_time,
                    s(:send,
                      s(:const, nil, :Time), :now)),
                  s(:lvasgn, :result,
                    s(:str, "")),
                  s(:kwbegin,
                    s(:ensure,
                      s(:rescue,
                        s(:begin,
                          s(:ivasgn, :@passed,
                            s(:nil)),
                          s(:send,
                            s(:self), :before_setup),
                          s(:send,
                            s(:self), :setup),
                          s(:send,
                            s(:self), :after_setup),
                          s(:send,
                            s(:self), :run_test,
                            s(:send,
                              s(:self), :__name__)),
                          s(:if,
                            s(:send, nil, :io?), nil,
                            s(:lvasgn, :result,
                              s(:str, "."))),
                          s(:lvasgn, :time,
                            s(:send,
                              s(:send,
                                s(:const, nil, :Time), :now), :-,
                              s(:lvar, :start_time))),
                          s(:send,
                            s(:lvar, :runner), :record,
                            s(:send,
                              s(:self), :class),
                            s(:send,
                              s(:self), :__name__),
                            s(:send,
                              s(:self), :_assertions),
                            s(:lvar, :time),
                            s(:nil)),
                          s(:ivasgn, :@passed,
                            s(:true))),
                        s(:resbody,
                          s(:array,
                            s(:splat,
                              s(:const, nil, :PASSTHROUGH_EXCEPTIONS))), nil,
                          s(:send, nil, :raise)),
                        s(:resbody,
                          s(:array,
                            s(:const, nil, :Exception)),
                          s(:lvasgn, :e),
                          s(:begin,
                            s(:ivasgn, :@passed,
                              s(:send,
                                s(:const, nil, :Skip), :===,
                                s(:lvar, :e))),
                            s(:lvasgn, :time,
                              s(:send,
                                s(:send,
                                  s(:const, nil, :Time), :now), :-,
                                s(:lvar, :start_time))),
                            s(:send,
                              s(:lvar, :runner), :record,
                              s(:send,
                                s(:self), :class),
                              s(:send,
                                s(:self), :__name__),
                              s(:send,
                                s(:self), :_assertions),
                              s(:lvar, :time),
                              s(:lvar, :e)),
                            s(:lvasgn, :result,
                              s(:send,
                                s(:lvar, :runner), :puke,
                                s(:send,
                                  s(:self), :class),
                                s(:send,
                                  s(:self), :__name__),
                                s(:lvar, :e))))), nil),
                      s(:begin,
                        s(:block,
                          s(:send,
                            s(:array,
                              s(:str, "before_teardown"),
                              s(:str, "teardown"),
                              s(:str, "after_teardown")), :each),
                          s(:args,
                            s(:arg, :hook)),
                          s(:kwbegin,
                            s(:rescue,
                              s(:send,
                                s(:self), :send,
                                s(:lvar, :hook)),
                              s(:resbody,
                                s(:array,
                                  s(:splat,
                                    s(:const, nil, :PASSTHROUGH_EXCEPTIONS))), nil,
                                s(:send, nil, :raise)),
                              s(:resbody,
                                s(:array,
                                  s(:const, nil, :Exception)),
                                s(:lvasgn, :e),
                                s(:begin,
                                  s(:ivasgn, :@passed,
                                    s(:false)),
                                  s(:send,
                                    s(:lvar, :runner), :record,
                                    s(:send,
                                      s(:self), :class),
                                    s(:send,
                                      s(:self), :__name__),
                                    s(:send,
                                      s(:self), :_assertions),
                                    s(:lvar, :time),
                                    s(:lvar, :e)),
                                  s(:lvasgn, :result,
                                    s(:send,
                                      s(:lvar, :runner), :puke,
                                      s(:send,
                                        s(:self), :class),
                                      s(:send,
                                        s(:self), :__name__),
                                      s(:lvar, :e))))), nil))),
                        s(:if,
                          s(:send,
                            s(:lvar, :runner), :info_signal),
                          s(:send, nil, :trap,
                            s(:str, "INFO"),
                            s(:str, "DEFAULT")), nil)))),
                  s(:lvar, :result))),
              s(:alias,
                s(:sym, :run_test),
                s(:sym, :__send__)),
              s(:def, :initialize,
                s(:args,
                  s(:arg, :name)),
                s(:begin,
                  s(:ivasgn, :@__name__,
                    s(:lvar, :name)),
                  s(:ivasgn, :@__io__,
                    s(:nil)),
                  s(:ivasgn, :@passed,
                    s(:nil)),
                  s(:cvasgn, :@@current,
                    s(:self)))),
              s(:defs,
                s(:self), :current,
                s(:args),
                s(:cvar, :@@current)),
              s(:def, :io,
                s(:args),
                s(:begin,
                  s(:ivasgn, :@__io__,
                    s(:true)),
                  s(:send,
                    s(:const,
                      s(:const, nil, :MiniTest), :Unit), :output))),
              s(:def, :io?,
                s(:args),
                s(:ivar, :@__io__)),
              s(:defs,
                s(:self), :reset,
                s(:args),
                s(:cvasgn, :@@test_suites,
                  s(:hash))),
              s(:send, nil, :reset),
              s(:defs,
                s(:self), :make_my_diffs_pretty!,
                s(:args),
                s(:begin,
                  s(:send, nil, :require,
                    s(:str, "pp")),
                  s(:block,
                    s(:send, nil, :define_method,
                      s(:sym, :mu_pp)),
                    s(:args,
                      s(:arg, :o)),
                    s(:send,
                      s(:lvar, :o), :pretty_inspect)))),
              s(:defs,
                s(:self), :inherited,
                s(:args,
                  s(:arg, :klass)),
                s(:begin,
                  s(:send,
                    s(:cvar, :@@test_suites), :[]=,
                    s(:lvar, :klass),
                    s(:true)),
                  s(:zsuper))),
              s(:defs,
                s(:self), :test_order,
                s(:args),
                s(:sym, :random)),
              s(:defs,
                s(:self), :test_suites,
                s(:args),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:cvar, :@@test_suites), :keys), :sort_by),
                  s(:args,
                    s(:arg, :ts)),
                  s(:send,
                    s(:send,
                      s(:lvar, :ts), :name), :to_s))),
              s(:defs,
                s(:self), :test_methods,
                s(:args),
                s(:begin,
                  s(:lvasgn, :methods,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:send, nil, :public_instance_methods,
                            s(:true)), :grep,
                          s(:regexp,
                            s(:str, "^test"),
                            s(:regopt))), :map),
                      s(:args,
                        s(:arg, :m)),
                      s(:send,
                        s(:lvar, :m), :to_s))),
                  s(:case,
                    s(:send,
                      s(:self), :test_order),
                    s(:when,
                      s(:sym, :parallel),
                      s(:begin,
                        s(:lvasgn, :max,
                          s(:send,
                            s(:lvar, :methods), :size)),
                        s(:send,
                          s(:const, nil, :ParallelEach), :new,
                          s(:block,
                            s(:send,
                              s(:send,
                                s(:lvar, :methods), :sort), :sort_by),
                            s(:args),
                            s(:send, nil, :rand,
                              s(:lvar, :max)))))),
                    s(:when,
                      s(:sym, :random),
                      s(:begin,
                        s(:lvasgn, :max,
                          s(:send,
                            s(:lvar, :methods), :size)),
                        s(:block,
                          s(:send,
                            s(:send,
                              s(:lvar, :methods), :sort), :sort_by),
                          s(:args),
                          s(:send, nil, :rand,
                            s(:lvar, :max))))),
                    s(:when,
                      s(:sym, :alpha),
                      s(:sym, :sorted),
                      s(:send,
                        s(:lvar, :methods), :sort)),
                    s(:send, nil, :raise,
                      s(:dstr,
                        s(:str, "Unknown test_order: "),
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:self), :test_order), :inspect))))))),
              s(:def, :passed?,
                s(:args),
                s(:ivar, :@passed)),
              s(:def, :setup,
                s(:args), nil),
              s(:def, :teardown,
                s(:args), nil),
              s(:send, nil, :include,
                s(:const,
                  s(:const, nil, :MiniTest), :Assertions)))))),
      s(:casgn, nil, :Test,
        s(:const,
          s(:const, nil, :Unit), :TestCase)))),
  s(:casgn, nil, :Minitest,
    s(:const, nil, :MiniTest)))
