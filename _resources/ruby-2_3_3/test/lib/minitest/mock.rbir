s(:begin,
  s(:class,
    s(:const, nil, :MockExpectationError),
    s(:const, nil, :StandardError), nil),
  s(:module,
    s(:const, nil, :MiniTest),
    s(:class,
      s(:const, nil, :Mock), nil,
      s(:begin,
        s(:alias,
          s(:sym, :__respond_to?),
          s(:sym, :respond_to?)),
        s(:lvasgn, :skip_methods,
          s(:array,
            s(:str, "object_id"),
            s(:str, "respond_to_missing?"),
            s(:str, "inspect"),
            s(:str, "==="),
            s(:str, "to_s"))),
        s(:block,
          s(:send,
            s(:send, nil, :instance_methods), :each),
          s(:args,
            s(:arg, :m)),
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :skip_methods), :include?,
                s(:send,
                  s(:lvar, :m), :to_s)),
              s(:send,
                s(:lvar, :m), :=~,
                s(:regexp,
                  s(:str, "^__"),
                  s(:regopt)))), nil,
            s(:send, nil, :undef_method,
              s(:lvar, :m)))),
        s(:def, :initialize,
          s(:args),
          s(:begin,
            s(:ivasgn, :@expected_calls,
              s(:block,
                s(:send,
                  s(:const, nil, :Hash), :new),
                s(:args,
                  s(:arg, :calls),
                  s(:arg, :name)),
                s(:send,
                  s(:lvar, :calls), :[]=,
                  s(:lvar, :name),
                  s(:array)))),
            s(:ivasgn, :@actual_calls,
              s(:block,
                s(:send,
                  s(:const, nil, :Hash), :new),
                s(:args,
                  s(:arg, :calls),
                  s(:arg, :name)),
                s(:send,
                  s(:lvar, :calls), :[]=,
                  s(:lvar, :name),
                  s(:array)))))),
        s(:def, :expect,
          s(:args,
            s(:arg, :name),
            s(:arg, :retval),
            s(:optarg, :args,
              s(:array)),
            s(:blockarg, :blk)),
          s(:begin,
            s(:if,
              s(:send, nil, :block_given?),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :args), :empty?), nil,
                  s(:send, nil, :raise,
                    s(:const, nil, :ArgumentError),
                    s(:str, "args ignored when block given"))),
                s(:send,
                  s(:send,
                    s(:ivar, :@expected_calls), :[],
                    s(:lvar, :name)), :<<,
                  s(:hash,
                    s(:pair,
                      s(:sym, :retval),
                      s(:lvar, :retval)),
                    s(:pair,
                      s(:sym, :block),
                      s(:lvar, :blk))))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:const, nil, :Array), :===,
                    s(:lvar, :args)), nil,
                  s(:send, nil, :raise,
                    s(:const, nil, :ArgumentError),
                    s(:str, "args must be an array"))),
                s(:send,
                  s(:send,
                    s(:ivar, :@expected_calls), :[],
                    s(:lvar, :name)), :<<,
                  s(:hash,
                    s(:pair,
                      s(:sym, :retval),
                      s(:lvar, :retval)),
                    s(:pair,
                      s(:sym, :args),
                      s(:lvar, :args)))))),
            s(:self))),
        s(:def, :__call,
          s(:args,
            s(:arg, :name),
            s(:arg, :data)),
          s(:case,
            s(:lvar, :data),
            s(:when,
              s(:const, nil, :Hash),
              s(:dstr,
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "("),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :data), :[],
                        s(:sym, :args)), :inspect), :[],
                    s(:irange,
                      s(:int, 1),
                      s(:int, -2)))),
                s(:str, ") => "),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :data), :[],
                      s(:sym, :retval)), :inspect)))),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :data), :map),
                s(:args,
                  s(:arg, :d)),
                s(:send, nil, :__call,
                  s(:lvar, :name),
                  s(:lvar, :d))), :join,
              s(:str, ", ")))),
        s(:def, :verify,
          s(:args),
          s(:begin,
            s(:block,
              s(:send,
                s(:ivar, :@expected_calls), :each),
              s(:args,
                s(:arg, :name),
                s(:arg, :calls)),
              s(:block,
                s(:send,
                  s(:lvar, :calls), :each),
                s(:args,
                  s(:arg, :expected)),
                s(:begin,
                  s(:lvasgn, :msg1,
                    s(:dstr,
                      s(:str, "expected "),
                      s(:begin,
                        s(:send, nil, :__call,
                          s(:lvar, :name),
                          s(:lvar, :expected))))),
                  s(:lvasgn, :msg2,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :msg1)),
                      s(:str, ", got ["),
                      s(:begin,
                        s(:send, nil, :__call,
                          s(:lvar, :name),
                          s(:send,
                            s(:ivar, :@actual_calls), :[],
                            s(:lvar, :name)))),
                      s(:str, "]"))),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:ivar, :@actual_calls), :has_key?,
                        s(:lvar, :name)),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:ivar, :@actual_calls), :[],
                            s(:lvar, :name)), :include?,
                          s(:lvar, :expected)), :!)),
                    s(:send, nil, :raise,
                      s(:const, nil, :MockExpectationError),
                      s(:lvar, :msg2)), nil),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:ivar, :@actual_calls), :has_key?,
                        s(:lvar, :name)),
                      s(:send,
                        s(:send,
                          s(:ivar, :@actual_calls), :[],
                          s(:lvar, :name)), :include?,
                        s(:lvar, :expected))), nil,
                    s(:send, nil, :raise,
                      s(:const, nil, :MockExpectationError),
                      s(:lvar, :msg1)))))),
            s(:true))),
        s(:def, :method_missing,
          s(:args,
            s(:arg, :sym),
            s(:restarg, :args)),
          s(:begin,
            s(:if,
              s(:send,
                s(:ivar, :@expected_calls), :has_key?,
                s(:lvar, :sym)), nil,
              s(:send, nil, :raise,
                s(:const, nil, :NoMethodError),
                s(:send,
                  s(:str, "unmocked method %p, expected one of %p"), :%,
                  s(:array,
                    s(:lvar, :sym),
                    s(:send,
                      s(:send,
                        s(:ivar, :@expected_calls), :keys), :sort_by,
                      s(:block_pass,
                        s(:sym, :to_s))))))),
            s(:lvasgn, :index,
              s(:send,
                s(:send,
                  s(:ivar, :@actual_calls), :[],
                  s(:lvar, :sym)), :length)),
            s(:lvasgn, :expected_call,
              s(:send,
                s(:send,
                  s(:ivar, :@expected_calls), :[],
                  s(:lvar, :sym)), :[],
                s(:lvar, :index))),
            s(:if,
              s(:lvar, :expected_call), nil,
              s(:send, nil, :raise,
                s(:const, nil, :MockExpectationError),
                s(:send,
                  s(:str, "No more expects available for %p: %p"), :%,
                  s(:array,
                    s(:lvar, :sym),
                    s(:lvar, :args))))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :expected_args),
                s(:lvasgn, :retval),
                s(:lvasgn, :val_block)),
              s(:send,
                s(:lvar, :expected_call), :values_at,
                s(:sym, :args),
                s(:sym, :retval),
                s(:sym, :block))),
            s(:if,
              s(:lvar, :val_block),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :val_block), :call,
                    s(:lvar, :args)), nil,
                  s(:send, nil, :raise,
                    s(:const, nil, :MockExpectationError),
                    s(:send,
                      s(:str, "mocked method %p failed block w/ %p"), :%,
                      s(:array,
                        s(:lvar, :sym),
                        s(:lvar, :args))))),
                s(:send,
                  s(:send,
                    s(:ivar, :@actual_calls), :[],
                    s(:lvar, :sym)), :<<,
                  s(:lvar, :expected_call)),
                s(:return,
                  s(:lvar, :retval))), nil),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :expected_args), :size), :!=,
                s(:send,
                  s(:lvar, :args), :size)),
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:send,
                  s(:str, "mocked method %p expects %d arguments, got %d"), :%,
                  s(:array,
                    s(:lvar, :sym),
                    s(:send,
                      s(:lvar, :expected_args), :size),
                    s(:send,
                      s(:lvar, :args), :size)))), nil),
            s(:lvasgn, :fully_matched,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :expected_args), :zip,
                    s(:lvar, :args)), :all?),
                s(:args,
                  s(:arg, :mod),
                  s(:arg, :a)),
                s(:or,
                  s(:send,
                    s(:lvar, :mod), :===,
                    s(:lvar, :a)),
                  s(:send,
                    s(:lvar, :mod), :==,
                    s(:lvar, :a))))),
            s(:if,
              s(:lvar, :fully_matched), nil,
              s(:send, nil, :raise,
                s(:const, nil, :MockExpectationError),
                s(:send,
                  s(:str, "mocked method %p called with unexpected arguments %p"), :%,
                  s(:array,
                    s(:lvar, :sym),
                    s(:lvar, :args))))),
            s(:send,
              s(:send,
                s(:ivar, :@actual_calls), :[],
                s(:lvar, :sym)), :<<,
              s(:hash,
                s(:pair,
                  s(:sym, :retval),
                  s(:lvar, :retval)),
                s(:pair,
                  s(:sym, :args),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :expected_args), :zip,
                        s(:lvar, :args)), :map),
                    s(:args,
                      s(:arg, :mod),
                      s(:arg, :a)),
                    s(:if,
                      s(:send,
                        s(:lvar, :mod), :===,
                        s(:lvar, :a)),
                      s(:lvar, :mod),
                      s(:lvar, :a)))))),
            s(:lvar, :retval))),
        s(:def, :respond_to?,
          s(:args,
            s(:arg, :sym),
            s(:optarg, :include_private,
              s(:false))),
          s(:begin,
            s(:if,
              s(:send,
                s(:ivar, :@expected_calls), :has_key?,
                s(:send,
                  s(:lvar, :sym), :to_sym)),
              s(:return,
                s(:true)), nil),
            s(:return,
              s(:send, nil, :__respond_to?,
                s(:lvar, :sym),
                s(:lvar, :include_private)))))))),
  s(:class,
    s(:const, nil, :Object), nil,
    s(:def, :stub,
      s(:args,
        s(:arg, :name),
        s(:arg, :val_or_callable),
        s(:blockarg, :block)),
      s(:ensure,
        s(:begin,
          s(:lvasgn, :new_name,
            s(:dstr,
              s(:str, "__minitest_stub__"),
              s(:begin,
                s(:lvar, :name)))),
          s(:lvasgn, :metaclass,
            s(:sclass,
              s(:self),
              s(:self))),
          s(:if,
            s(:and,
              s(:send, nil, :respond_to?,
                s(:lvar, :name)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send, nil, :methods), :map,
                    s(:block_pass,
                      s(:sym, :to_s))), :include?,
                  s(:send,
                    s(:lvar, :name), :to_s)), :!)),
            s(:block,
              s(:send,
                s(:lvar, :metaclass), :send,
                s(:sym, :define_method),
                s(:lvar, :name)),
              s(:args,
                s(:restarg, :args)),
              s(:super,
                s(:splat,
                  s(:lvar, :args)))), nil),
          s(:send,
            s(:lvar, :metaclass), :send,
            s(:sym, :alias_method),
            s(:lvar, :new_name),
            s(:lvar, :name)),
          s(:block,
            s(:send,
              s(:lvar, :metaclass), :send,
              s(:sym, :define_method),
              s(:lvar, :name)),
            s(:args,
              s(:restarg, :args)),
            s(:if,
              s(:send,
                s(:lvar, :val_or_callable), :respond_to?,
                s(:sym, :call)),
              s(:send,
                s(:lvar, :val_or_callable), :call,
                s(:splat,
                  s(:lvar, :args))),
              s(:lvar, :val_or_callable))),
          s(:yield,
            s(:self))),
        s(:begin,
          s(:send,
            s(:lvar, :metaclass), :send,
            s(:sym, :undef_method),
            s(:lvar, :name)),
          s(:send,
            s(:lvar, :metaclass), :send,
            s(:sym, :alias_method),
            s(:lvar, :name),
            s(:lvar, :new_name)),
          s(:send,
            s(:lvar, :metaclass), :send,
            s(:sym, :undef_method),
            s(:lvar, :new_name)))))))
