s(:begin,
  s(:send, nil, :require,
    s(:str, "minitest/unit")),
  s(:class,
    s(:const,
      s(:const, nil, :MiniTest), :Unit), nil,
    s(:begin,
      s(:def, :run_benchmarks,
        s(:args),
        s(:send, nil, :_run_anything,
          s(:sym, :benchmark))),
      s(:def, :benchmark_suite_header,
        s(:args,
          s(:arg, :suite)),
        s(:dstr,
          s(:str, "\n"),
          s(:begin,
            s(:lvar, :suite)),
          s(:str, "\t"),
          s(:begin,
            s(:send,
              s(:send,
                s(:lvar, :suite), :bench_range), :join,
              s(:str, "\t"))))),
      s(:class,
        s(:const, nil, :TestCase), nil,
        s(:begin,
          s(:defs,
            s(:self), :bench_exp,
            s(:args,
              s(:arg, :min),
              s(:arg, :max),
              s(:optarg, :base,
                s(:int, 10))),
            s(:begin,
              s(:lvasgn, :min,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Math), :log10,
                        s(:lvar, :min)), :/,
                      s(:send,
                        s(:const, nil, :Math), :log10,
                        s(:lvar, :base)))), :to_i)),
              s(:lvasgn, :max,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Math), :log10,
                        s(:lvar, :max)), :/,
                      s(:send,
                        s(:const, nil, :Math), :log10,
                        s(:lvar, :base)))), :to_i)),
              s(:send,
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:lvar, :min),
                        s(:lvar, :max))), :map),
                  s(:args,
                    s(:arg, :m)),
                  s(:send,
                    s(:lvar, :base), :**,
                    s(:lvar, :m))), :to_a))),
          s(:defs,
            s(:self), :bench_linear,
            s(:args,
              s(:arg, :min),
              s(:arg, :max),
              s(:optarg, :step,
                s(:int, 10))),
            s(:rescue,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:lvar, :min),
                      s(:lvar, :max))), :step,
                  s(:lvar, :step)), :to_a),
              s(:resbody,
                s(:array,
                  s(:const, nil, :LocalJumpError)), nil,
                s(:begin,
                  s(:lvasgn, :r,
                    s(:array)),
                  s(:block,
                    s(:send,
                      s(:begin,
                        s(:irange,
                          s(:lvar, :min),
                          s(:lvar, :max))), :step,
                      s(:lvar, :step)),
                    s(:args,
                      s(:arg, :n)),
                    s(:send,
                      s(:lvar, :r), :<<,
                      s(:lvar, :n))),
                  s(:lvar, :r))), nil)),
          s(:defs,
            s(:self), :benchmark_methods,
            s(:args),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:send, nil, :public_instance_methods,
                      s(:true)), :grep,
                    s(:regexp,
                      s(:str, "^bench_"),
                      s(:regopt))), :map),
                s(:args,
                  s(:arg, :m)),
                s(:send,
                  s(:lvar, :m), :to_s)), :sort)),
          s(:defs,
            s(:self), :benchmark_suites,
            s(:args),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :TestCase), :test_suites), :reject),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:send,
                  s(:lvar, :s), :benchmark_methods), :empty?))),
          s(:defs,
            s(:self), :bench_range,
            s(:args),
            s(:send, nil, :bench_exp,
              s(:int, 1),
              s(:int, 10000))),
          s(:def, :assert_performance,
            s(:args,
              s(:arg, :validation),
              s(:blockarg, :work)),
            s(:begin,
              s(:lvasgn, :range,
                s(:send,
                  s(:send,
                    s(:self), :class), :bench_range)),
              s(:send,
                s(:send, nil, :io), :print,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :__name__)))),
              s(:lvasgn, :times,
                s(:array)),
              s(:block,
                s(:send,
                  s(:lvar, :range), :each),
                s(:args,
                  s(:arg, :x)),
                s(:begin,
                  s(:send,
                    s(:const, nil, :GC), :start),
                  s(:lvasgn, :t0,
                    s(:send,
                      s(:const, nil, :Time), :now)),
                  s(:send, nil, :instance_exec,
                    s(:lvar, :x),
                    s(:block_pass,
                      s(:lvar, :work))),
                  s(:lvasgn, :t,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Time), :now), :-,
                      s(:lvar, :t0))),
                  s(:send,
                    s(:send, nil, :io), :print,
                    s(:send,
                      s(:str, "\t%9.6f"), :%,
                      s(:lvar, :t))),
                  s(:send,
                    s(:lvar, :times), :<<,
                    s(:lvar, :t)))),
              s(:send,
                s(:send, nil, :io), :puts),
              s(:send,
                s(:lvar, :validation), :[],
                s(:lvar, :range),
                s(:lvar, :times)))),
          s(:def, :assert_performance_constant,
            s(:args,
              s(:optarg, :threshold,
                s(:float, 0.99)),
              s(:blockarg, :work)),
            s(:begin,
              s(:lvasgn, :validation,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args,
                    s(:arg, :range),
                    s(:arg, :times)),
                  s(:begin,
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :a),
                        s(:lvasgn, :b),
                        s(:lvasgn, :rr)),
                      s(:send, nil, :fit_linear,
                        s(:lvar, :range),
                        s(:lvar, :times))),
                    s(:send, nil, :assert_in_delta,
                      s(:int, 0),
                      s(:lvar, :b),
                      s(:send,
                        s(:int, 1), :-,
                        s(:lvar, :threshold))),
                    s(:array,
                      s(:lvar, :a),
                      s(:lvar, :b),
                      s(:lvar, :rr))))),
              s(:send, nil, :assert_performance,
                s(:lvar, :validation),
                s(:block_pass,
                  s(:lvar, :work))))),
          s(:def, :assert_performance_exponential,
            s(:args,
              s(:optarg, :threshold,
                s(:float, 0.99)),
              s(:blockarg, :work)),
            s(:send, nil, :assert_performance,
              s(:send, nil, :validation_for_fit,
                s(:sym, :exponential),
                s(:lvar, :threshold)),
              s(:block_pass,
                s(:lvar, :work)))),
          s(:def, :assert_performance_logarithmic,
            s(:args,
              s(:optarg, :threshold,
                s(:float, 0.99)),
              s(:blockarg, :work)),
            s(:send, nil, :assert_performance,
              s(:send, nil, :validation_for_fit,
                s(:sym, :logarithmic),
                s(:lvar, :threshold)),
              s(:block_pass,
                s(:lvar, :work)))),
          s(:def, :assert_performance_linear,
            s(:args,
              s(:optarg, :threshold,
                s(:float, 0.99)),
              s(:blockarg, :work)),
            s(:send, nil, :assert_performance,
              s(:send, nil, :validation_for_fit,
                s(:sym, :linear),
                s(:lvar, :threshold)),
              s(:block_pass,
                s(:lvar, :work)))),
          s(:def, :assert_performance_power,
            s(:args,
              s(:optarg, :threshold,
                s(:float, 0.99)),
              s(:blockarg, :work)),
            s(:send, nil, :assert_performance,
              s(:send, nil, :validation_for_fit,
                s(:sym, :power),
                s(:lvar, :threshold)),
              s(:block_pass,
                s(:lvar, :work)))),
          s(:def, :fit_error,
            s(:args,
              s(:arg, :xys)),
            s(:begin,
              s(:lvasgn, :y_bar,
                s(:send,
                  s(:block,
                    s(:send, nil, :sigma,
                      s(:lvar, :xys)),
                    s(:args,
                      s(:arg, :x),
                      s(:arg, :y)),
                    s(:lvar, :y)), :/,
                  s(:send,
                    s(:send,
                      s(:lvar, :xys), :size), :to_f))),
              s(:lvasgn, :ss_tot,
                s(:block,
                  s(:send, nil, :sigma,
                    s(:lvar, :xys)),
                  s(:args,
                    s(:arg, :x),
                    s(:arg, :y)),
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:lvar, :y), :-,
                        s(:lvar, :y_bar))), :**,
                    s(:int, 2)))),
              s(:lvasgn, :ss_err,
                s(:block,
                  s(:send, nil, :sigma,
                    s(:lvar, :xys)),
                  s(:args,
                    s(:arg, :x),
                    s(:arg, :y)),
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:yield,
                          s(:lvar, :x)), :-,
                        s(:lvar, :y))), :**,
                    s(:int, 2)))),
              s(:send,
                s(:int, 1), :-,
                s(:begin,
                  s(:send,
                    s(:lvar, :ss_err), :/,
                    s(:lvar, :ss_tot)))))),
          s(:def, :fit_exponential,
            s(:args,
              s(:arg, :xs),
              s(:arg, :ys)),
            s(:begin,
              s(:lvasgn, :n,
                s(:send,
                  s(:lvar, :xs), :size)),
              s(:lvasgn, :xys,
                s(:send,
                  s(:lvar, :xs), :zip,
                  s(:lvar, :ys))),
              s(:lvasgn, :sxlny,
                s(:block,
                  s(:send, nil, :sigma,
                    s(:lvar, :xys)),
                  s(:args,
                    s(:arg, :x),
                    s(:arg, :y)),
                  s(:send,
                    s(:lvar, :x), :*,
                    s(:send,
                      s(:const, nil, :Math), :log,
                      s(:lvar, :y))))),
              s(:lvasgn, :slny,
                s(:block,
                  s(:send, nil, :sigma,
                    s(:lvar, :xys)),
                  s(:args,
                    s(:arg, :x),
                    s(:arg, :y)),
                  s(:send,
                    s(:const, nil, :Math), :log,
                    s(:lvar, :y)))),
              s(:lvasgn, :sx2,
                s(:block,
                  s(:send, nil, :sigma,
                    s(:lvar, :xys)),
                  s(:args,
                    s(:arg, :x),
                    s(:arg, :y)),
                  s(:send,
                    s(:lvar, :x), :*,
                    s(:lvar, :x)))),
              s(:lvasgn, :sx,
                s(:send, nil, :sigma,
                  s(:lvar, :xs))),
              s(:lvasgn, :c,
                s(:send,
                  s(:send,
                    s(:lvar, :n), :*,
                    s(:lvar, :sx2)), :-,
                  s(:send,
                    s(:lvar, :sx), :**,
                    s(:int, 2)))),
              s(:lvasgn, :a,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :slny), :*,
                        s(:lvar, :sx2)), :-,
                      s(:send,
                        s(:lvar, :sx), :*,
                        s(:lvar, :sxlny)))), :/,
                  s(:lvar, :c))),
              s(:lvasgn, :b,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :n), :*,
                        s(:lvar, :sxlny)), :-,
                      s(:send,
                        s(:lvar, :sx), :*,
                        s(:lvar, :slny)))), :/,
                  s(:lvar, :c))),
              s(:return,
                s(:send,
                  s(:const, nil, :Math), :exp,
                  s(:lvar, :a)),
                s(:lvar, :b),
                s(:block,
                  s(:send, nil, :fit_error,
                    s(:lvar, :xys)),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:const, nil, :Math), :exp,
                    s(:send,
                      s(:lvar, :a), :+,
                      s(:send,
                        s(:lvar, :b), :*,
                        s(:lvar, :x)))))))),
          s(:def, :fit_logarithmic,
            s(:args,
              s(:arg, :xs),
              s(:arg, :ys)),
            s(:begin,
              s(:lvasgn, :n,
                s(:send,
                  s(:lvar, :xs), :size)),
              s(:lvasgn, :xys,
                s(:send,
                  s(:lvar, :xs), :zip,
                  s(:lvar, :ys))),
              s(:lvasgn, :slnx2,
                s(:block,
                  s(:send, nil, :sigma,
                    s(:lvar, :xys)),
                  s(:args,
                    s(:arg, :x),
                    s(:arg, :y)),
                  s(:send,
                    s(:send,
                      s(:const, nil, :Math), :log,
                      s(:lvar, :x)), :**,
                    s(:int, 2)))),
              s(:lvasgn, :slnx,
                s(:block,
                  s(:send, nil, :sigma,
                    s(:lvar, :xys)),
                  s(:args,
                    s(:arg, :x),
                    s(:arg, :y)),
                  s(:send,
                    s(:const, nil, :Math), :log,
                    s(:lvar, :x)))),
              s(:lvasgn, :sylnx,
                s(:block,
                  s(:send, nil, :sigma,
                    s(:lvar, :xys)),
                  s(:args,
                    s(:arg, :x),
                    s(:arg, :y)),
                  s(:send,
                    s(:lvar, :y), :*,
                    s(:send,
                      s(:const, nil, :Math), :log,
                      s(:lvar, :x))))),
              s(:lvasgn, :sy,
                s(:block,
                  s(:send, nil, :sigma,
                    s(:lvar, :xys)),
                  s(:args,
                    s(:arg, :x),
                    s(:arg, :y)),
                  s(:lvar, :y))),
              s(:lvasgn, :c,
                s(:send,
                  s(:send,
                    s(:lvar, :n), :*,
                    s(:lvar, :slnx2)), :-,
                  s(:send,
                    s(:lvar, :slnx), :**,
                    s(:int, 2)))),
              s(:lvasgn, :b,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :n), :*,
                        s(:lvar, :sylnx)), :-,
                      s(:send,
                        s(:lvar, :sy), :*,
                        s(:lvar, :slnx)))), :/,
                  s(:lvar, :c))),
              s(:lvasgn, :a,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :sy), :-,
                      s(:send,
                        s(:lvar, :b), :*,
                        s(:lvar, :slnx)))), :/,
                  s(:lvar, :n))),
              s(:return,
                s(:lvar, :a),
                s(:lvar, :b),
                s(:block,
                  s(:send, nil, :fit_error,
                    s(:lvar, :xys)),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:lvar, :a), :+,
                    s(:send,
                      s(:lvar, :b), :*,
                      s(:send,
                        s(:const, nil, :Math), :log,
                        s(:lvar, :x)))))))),
          s(:def, :fit_linear,
            s(:args,
              s(:arg, :xs),
              s(:arg, :ys)),
            s(:begin,
              s(:lvasgn, :n,
                s(:send,
                  s(:lvar, :xs), :size)),
              s(:lvasgn, :xys,
                s(:send,
                  s(:lvar, :xs), :zip,
                  s(:lvar, :ys))),
              s(:lvasgn, :sx,
                s(:send, nil, :sigma,
                  s(:lvar, :xs))),
              s(:lvasgn, :sy,
                s(:send, nil, :sigma,
                  s(:lvar, :ys))),
              s(:lvasgn, :sx2,
                s(:block,
                  s(:send, nil, :sigma,
                    s(:lvar, :xs)),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:lvar, :x), :**,
                    s(:int, 2)))),
              s(:lvasgn, :sxy,
                s(:block,
                  s(:send, nil, :sigma,
                    s(:lvar, :xys)),
                  s(:args,
                    s(:arg, :x),
                    s(:arg, :y)),
                  s(:send,
                    s(:lvar, :x), :*,
                    s(:lvar, :y)))),
              s(:lvasgn, :c,
                s(:send,
                  s(:send,
                    s(:lvar, :n), :*,
                    s(:lvar, :sx2)), :-,
                  s(:send,
                    s(:lvar, :sx), :**,
                    s(:int, 2)))),
              s(:lvasgn, :a,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :sy), :*,
                        s(:lvar, :sx2)), :-,
                      s(:send,
                        s(:lvar, :sx), :*,
                        s(:lvar, :sxy)))), :/,
                  s(:lvar, :c))),
              s(:lvasgn, :b,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :n), :*,
                        s(:lvar, :sxy)), :-,
                      s(:send,
                        s(:lvar, :sx), :*,
                        s(:lvar, :sy)))), :/,
                  s(:lvar, :c))),
              s(:return,
                s(:lvar, :a),
                s(:lvar, :b),
                s(:block,
                  s(:send, nil, :fit_error,
                    s(:lvar, :xys)),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:lvar, :a), :+,
                    s(:send,
                      s(:lvar, :b), :*,
                      s(:lvar, :x))))))),
          s(:def, :fit_power,
            s(:args,
              s(:arg, :xs),
              s(:arg, :ys)),
            s(:begin,
              s(:lvasgn, :n,
                s(:send,
                  s(:lvar, :xs), :size)),
              s(:lvasgn, :xys,
                s(:send,
                  s(:lvar, :xs), :zip,
                  s(:lvar, :ys))),
              s(:lvasgn, :slnxlny,
                s(:block,
                  s(:send, nil, :sigma,
                    s(:lvar, :xys)),
                  s(:args,
                    s(:arg, :x),
                    s(:arg, :y)),
                  s(:send,
                    s(:send,
                      s(:const, nil, :Math), :log,
                      s(:lvar, :x)), :*,
                    s(:send,
                      s(:const, nil, :Math), :log,
                      s(:lvar, :y))))),
              s(:lvasgn, :slnx,
                s(:block,
                  s(:send, nil, :sigma,
                    s(:lvar, :xs)),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:const, nil, :Math), :log,
                    s(:lvar, :x)))),
              s(:lvasgn, :slny,
                s(:block,
                  s(:send, nil, :sigma,
                    s(:lvar, :ys)),
                  s(:args,
                    s(:arg, :y)),
                  s(:send,
                    s(:const, nil, :Math), :log,
                    s(:lvar, :y)))),
              s(:lvasgn, :slnx2,
                s(:block,
                  s(:send, nil, :sigma,
                    s(:lvar, :xs)),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:send,
                      s(:const, nil, :Math), :log,
                      s(:lvar, :x)), :**,
                    s(:int, 2)))),
              s(:lvasgn, :b,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :n), :*,
                        s(:lvar, :slnxlny)), :-,
                      s(:send,
                        s(:lvar, :slnx), :*,
                        s(:lvar, :slny)))), :/,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :n), :*,
                        s(:lvar, :slnx2)), :-,
                      s(:send,
                        s(:lvar, :slnx), :**,
                        s(:int, 2)))))),
              s(:lvasgn, :a,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :slny), :-,
                      s(:send,
                        s(:lvar, :b), :*,
                        s(:lvar, :slnx)))), :/,
                  s(:lvar, :n))),
              s(:return,
                s(:send,
                  s(:const, nil, :Math), :exp,
                  s(:lvar, :a)),
                s(:lvar, :b),
                s(:block,
                  s(:send, nil, :fit_error,
                    s(:lvar, :xys)),
                  s(:args,
                    s(:arg, :x)),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Math), :exp,
                        s(:lvar, :a)), :*,
                      s(:begin,
                        s(:send,
                          s(:lvar, :x), :**,
                          s(:lvar, :b))))))))),
          s(:def, :sigma,
            s(:args,
              s(:arg, :enum),
              s(:blockarg, :block)),
            s(:begin,
              s(:if,
                s(:lvar, :block),
                s(:lvasgn, :enum,
                  s(:send,
                    s(:lvar, :enum), :map,
                    s(:block_pass,
                      s(:lvar, :block)))), nil),
              s(:block,
                s(:send,
                  s(:lvar, :enum), :inject),
                s(:args,
                  s(:arg, :sum),
                  s(:arg, :n)),
                s(:send,
                  s(:lvar, :sum), :+,
                  s(:lvar, :n))))),
          s(:def, :validation_for_fit,
            s(:args,
              s(:arg, :msg),
              s(:arg, :threshold)),
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :range),
                s(:arg, :times)),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :a),
                    s(:lvasgn, :b),
                    s(:lvasgn, :rr)),
                  s(:send, nil, :send,
                    s(:dstr,
                      s(:str, "fit_"),
                      s(:begin,
                        s(:lvar, :msg))),
                    s(:lvar, :range),
                    s(:lvar, :times))),
                s(:send, nil, :assert_operator,
                  s(:lvar, :rr),
                  s(:sym, :>=),
                  s(:lvar, :threshold)),
                s(:array,
                  s(:lvar, :a),
                  s(:lvar, :b),
                  s(:lvar, :rr))))))))),
  s(:class,
    s(:const,
      s(:const, nil, :MiniTest), :Spec), nil,
    s(:begin,
      s(:defs,
        s(:self), :bench,
        s(:args,
          s(:arg, :name),
          s(:blockarg, :block)),
        s(:send, nil, :define_method,
          s(:dstr,
            s(:str, "bench_"),
            s(:begin,
              s(:send,
                s(:lvar, :name), :gsub,
                s(:regexp,
                  s(:str, "\\W+"),
                  s(:regopt)),
                s(:str, "_")))),
          s(:block_pass,
            s(:lvar, :block)))),
      s(:defs,
        s(:self), :bench_range,
        s(:args,
          s(:blockarg, :block)),
        s(:begin,
          s(:if,
            s(:lvar, :block), nil,
            s(:return,
              s(:zsuper))),
          s(:lvasgn, :meta,
            s(:begin,
              s(:sclass,
                s(:self),
                s(:self)))),
          s(:send,
            s(:lvar, :meta), :send,
            s(:sym, :define_method),
            s(:str, "bench_range"),
            s(:block_pass,
              s(:lvar, :block))))),
      s(:defs,
        s(:self), :bench_performance_linear,
        s(:args,
          s(:arg, :name),
          s(:optarg, :threshold,
            s(:float, 0.99)),
          s(:blockarg, :work)),
        s(:block,
          s(:send, nil, :bench,
            s(:lvar, :name)),
          s(:args),
          s(:send, nil, :assert_performance_linear,
            s(:lvar, :threshold),
            s(:block_pass,
              s(:lvar, :work))))),
      s(:defs,
        s(:self), :bench_performance_constant,
        s(:args,
          s(:arg, :name),
          s(:optarg, :threshold,
            s(:float, 0.99)),
          s(:blockarg, :work)),
        s(:block,
          s(:send, nil, :bench,
            s(:lvar, :name)),
          s(:args),
          s(:send, nil, :assert_performance_constant,
            s(:lvar, :threshold),
            s(:block_pass,
              s(:lvar, :work))))),
      s(:defs,
        s(:self), :bench_performance_exponential,
        s(:args,
          s(:arg, :name),
          s(:optarg, :threshold,
            s(:float, 0.99)),
          s(:blockarg, :work)),
        s(:block,
          s(:send, nil, :bench,
            s(:lvar, :name)),
          s(:args),
          s(:send, nil, :assert_performance_exponential,
            s(:lvar, :threshold),
            s(:block_pass,
              s(:lvar, :work))))))))
