s(:begin,
  s(:send, nil, :require,
    s(:str, "open3")),
  s(:send, nil, :require,
    s(:str, "timeout")),
  s(:send, nil, :require_relative,
    s(:str, "find_executable")),
  s(:module,
    s(:const, nil, :EnvUtil),
    s(:begin,
      s(:def, :rubybin,
        s(:args),
        s(:begin,
          s(:if,
            s(:lvasgn, :ruby,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "RUBY"))),
            s(:return,
              s(:lvar, :ruby)), nil),
          s(:lvasgn, :ruby,
            s(:str, "ruby")),
          s(:lvasgn, :exeext,
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :[],
              s(:str, "EXEEXT"))),
          s(:lvasgn, :rubyexe,
            s(:begin,
              s(:if,
                s(:and,
                  s(:lvar, :exeext),
                  s(:send,
                    s(:send,
                      s(:lvar, :exeext), :empty?), :!)),
                s(:send,
                  s(:lvar, :ruby), :+,
                  s(:lvar, :exeext)), nil))),
          s(:block,
            s(:send,
              s(:int, 3), :times),
            s(:args),
            s(:begin,
              s(:if,
                s(:and,
                  s(:and,
                    s(:send,
                      s(:const, nil, :File), :exist?,
                      s(:lvar, :ruby)),
                    s(:send,
                      s(:const, nil, :File), :executable?,
                      s(:lvar, :ruby))),
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :directory?,
                      s(:lvar, :ruby)), :!)),
                s(:return,
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:lvar, :ruby))), nil),
              s(:if,
                s(:and,
                  s(:and,
                    s(:lvar, :rubyexe),
                    s(:send,
                      s(:const, nil, :File), :exist?,
                      s(:lvar, :rubyexe))),
                  s(:send,
                    s(:const, nil, :File), :executable?,
                    s(:lvar, :rubyexe))),
                s(:return,
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:lvar, :rubyexe))), nil),
              s(:lvasgn, :ruby,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:str, ".."),
                  s(:lvar, :ruby))))),
          s(:if,
            s(:defined?,
              s(:send,
                s(:const, nil, :RbConfig), :ruby)),
            s(:send,
              s(:const, nil, :RbConfig), :ruby),
            s(:str, "ruby")))),
      s(:send, nil, :module_function,
        s(:sym, :rubybin)),
      s(:casgn, nil, :LANG_ENVS,
        s(:array,
          s(:str, "LANG"),
          s(:str, "LC_ALL"),
          s(:str, "LC_CTYPE"))),
      s(:casgn, nil, :DEFAULT_SIGNALS,
        s(:send,
          s(:const, nil, :Signal), :list)),
      s(:if,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "mswin|mingw"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM)),
        s(:send,
          s(:const, nil, :DEFAULT_SIGNALS), :delete,
          s(:str, "TERM")), nil),
      s(:def, :invoke_ruby,
        s(:args,
          s(:arg, :args),
          s(:optarg, :stdin_data,
            s(:str, "")),
          s(:optarg, :capture_stdout,
            s(:false)),
          s(:optarg, :capture_stderr,
            s(:false)),
          s(:kwoptarg, :encoding,
            s(:nil)),
          s(:kwoptarg, :timeout,
            s(:int, 10)),
          s(:kwoptarg, :reprieve,
            s(:int, 1)),
          s(:kwoptarg, :timeout_error,
            s(:const,
              s(:const, nil, :Timeout), :Error)),
          s(:kwoptarg, :stdout_filter,
            s(:nil)),
          s(:kwoptarg, :stderr_filter,
            s(:nil)),
          s(:kwoptarg, :signal,
            s(:sym, :TERM)),
          s(:kwoptarg, :rubybin,
            s(:send,
              s(:const, nil, :EnvUtil), :rubybin)),
          s(:kwrestarg, :opt)),
        s(:ensure,
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :in_c),
                s(:lvasgn, :in_p)),
              s(:send,
                s(:const, nil, :IO), :pipe)),
            s(:if,
              s(:lvar, :capture_stdout),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :out_p),
                  s(:lvasgn, :out_c)),
                s(:send,
                  s(:const, nil, :IO), :pipe)), nil),
            s(:if,
              s(:and,
                s(:lvar, :capture_stderr),
                s(:send,
                  s(:lvar, :capture_stderr), :!=,
                  s(:sym, :merge_to_stdout))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :err_p),
                  s(:lvasgn, :err_c)),
                s(:send,
                  s(:const, nil, :IO), :pipe)), nil),
            s(:send,
              s(:lvar, :opt), :[]=,
              s(:sym, :in),
              s(:lvar, :in_c)),
            s(:if,
              s(:lvar, :capture_stdout),
              s(:send,
                s(:lvar, :opt), :[]=,
                s(:sym, :out),
                s(:lvar, :out_c)), nil),
            s(:if,
              s(:lvar, :capture_stderr),
              s(:send,
                s(:lvar, :opt), :[]=,
                s(:sym, :err),
                s(:if,
                  s(:send,
                    s(:lvar, :capture_stderr), :==,
                    s(:sym, :merge_to_stdout)),
                  s(:lvar, :out_c),
                  s(:lvar, :err_c))), nil),
            s(:if,
              s(:lvar, :encoding),
              s(:begin,
                s(:if,
                  s(:lvar, :out_p),
                  s(:send,
                    s(:lvar, :out_p), :set_encoding,
                    s(:lvar, :encoding)), nil),
                s(:if,
                  s(:lvar, :err_p),
                  s(:send,
                    s(:lvar, :err_p), :set_encoding,
                    s(:lvar, :encoding)), nil)), nil),
            s(:lvasgn, :c,
              s(:str, "C")),
            s(:lvasgn, :child_env,
              s(:hash)),
            s(:block,
              s(:send,
                s(:const, nil, :LANG_ENVS), :each),
              s(:args,
                s(:arg, :lc)),
              s(:send,
                s(:lvar, :child_env), :[]=,
                s(:lvar, :lc),
                s(:lvar, :c))),
            s(:if,
              s(:and,
                s(:send,
                  s(:const, nil, :Array), :===,
                  s(:lvar, :args)),
                s(:send,
                  s(:const, nil, :Hash), :===,
                  s(:send,
                    s(:lvar, :args), :first))),
              s(:send,
                s(:lvar, :child_env), :update,
                s(:send,
                  s(:lvar, :args), :shift)), nil),
            s(:if,
              s(:send,
                s(:lvar, :args), :kind_of?,
                s(:const, nil, :String)),
              s(:lvasgn, :args,
                s(:array,
                  s(:lvar, :args))), nil),
            s(:lvasgn, :pid,
              s(:send, nil, :spawn,
                s(:lvar, :child_env),
                s(:lvar, :rubybin),
                s(:splat,
                  s(:lvar, :args)),
                s(:hash,
                  s(:kwsplat,
                    s(:lvar, :opt))))),
            s(:send,
              s(:lvar, :in_c), :close),
            s(:if,
              s(:lvar, :capture_stdout),
              s(:send,
                s(:lvar, :out_c), :close), nil),
            s(:if,
              s(:and,
                s(:lvar, :capture_stderr),
                s(:send,
                  s(:lvar, :capture_stderr), :!=,
                  s(:sym, :merge_to_stdout))),
              s(:send,
                s(:lvar, :err_c), :close), nil),
            s(:if,
              s(:send, nil, :block_given?),
              s(:return,
                s(:yield,
                  s(:lvar, :in_p),
                  s(:lvar, :out_p),
                  s(:lvar, :err_p),
                  s(:lvar, :pid))),
              s(:begin,
                s(:if,
                  s(:lvar, :capture_stdout),
                  s(:lvasgn, :th_stdout,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Thread), :new),
                      s(:args),
                      s(:send,
                        s(:lvar, :out_p), :read))), nil),
                s(:if,
                  s(:and,
                    s(:lvar, :capture_stderr),
                    s(:send,
                      s(:lvar, :capture_stderr), :!=,
                      s(:sym, :merge_to_stdout))),
                  s(:lvasgn, :th_stderr,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Thread), :new),
                      s(:args),
                      s(:send,
                        s(:lvar, :err_p), :read))), nil),
                s(:if,
                  s(:send,
                    s(:lvar, :stdin_data), :empty?), nil,
                  s(:send,
                    s(:lvar, :in_p), :write,
                    s(:send,
                      s(:lvar, :stdin_data), :to_str))),
                s(:send,
                  s(:lvar, :in_p), :close),
                s(:if,
                  s(:and,
                    s(:begin,
                      s(:or,
                        s(:send,
                          s(:lvar, :th_stdout), :!),
                        s(:send,
                          s(:lvar, :th_stdout), :join,
                          s(:lvar, :timeout)))),
                    s(:begin,
                      s(:or,
                        s(:send,
                          s(:lvar, :th_stderr), :!),
                        s(:send,
                          s(:lvar, :th_stderr), :join,
                          s(:lvar, :timeout))))),
                  s(:lvasgn, :timeout_error,
                    s(:nil)),
                  s(:begin,
                    s(:lvasgn, :signals,
                      s(:block,
                        s(:send,
                          s(:send, nil, :Array,
                            s(:lvar, :signal)), :select),
                        s(:args,
                          s(:arg, :sig)),
                        s(:rescue,
                          s(:or,
                            s(:send,
                              s(:const, nil, :DEFAULT_SIGNALS), :[],
                              s(:send,
                                s(:lvar, :sig), :to_s)),
                            s(:send,
                              s(:const, nil, :DEFAULT_SIGNALS), :[],
                              s(:send,
                                s(:const, nil, :Signal), :signame,
                                s(:lvar, :sig)))),
                          s(:resbody, nil, nil,
                            s(:false)), nil))),
                    s(:op_asgn,
                      s(:lvasgn, :signals), :|,
                      s(:array,
                        s(:sym, :ABRT),
                        s(:sym, :KILL))),
                    s(:case,
                      s(:lvasgn, :pgroup,
                        s(:send,
                          s(:lvar, :opt), :[],
                          s(:sym, :pgroup))),
                      s(:when,
                        s(:int, 0),
                        s(:true),
                        s(:lvasgn, :pgroup,
                          s(:send,
                            s(:lvar, :pid), :-@))),
                      s(:when,
                        s(:nil),
                        s(:false),
                        s(:lvasgn, :pgroup,
                          s(:lvar, :pid))), nil),
                    s(:while,
                      s(:lvasgn, :signal,
                        s(:send,
                          s(:lvar, :signals), :shift)),
                      s(:begin,
                        s(:kwbegin,
                          s(:rescue,
                            s(:send,
                              s(:const, nil, :Process), :kill,
                              s(:lvar, :signal),
                              s(:lvar, :pgroup)),
                            s(:resbody,
                              s(:array,
                                s(:const,
                                  s(:const, nil, :Errno), :EINVAL)), nil,
                              s(:next)),
                            s(:resbody,
                              s(:array,
                                s(:const,
                                  s(:const, nil, :Errno), :ESRCH)), nil,
                              s(:break)), nil)),
                        s(:if,
                          s(:or,
                            s(:send,
                              s(:lvar, :signals), :empty?),
                            s(:send,
                              s(:lvar, :reprieve), :!)),
                          s(:send,
                            s(:const, nil, :Process), :wait,
                            s(:lvar, :pid)),
                          s(:kwbegin,
                            s(:rescue,
                              s(:block,
                                s(:send,
                                  s(:const, nil, :Timeout), :timeout,
                                  s(:lvar, :reprieve)),
                                s(:args),
                                s(:send,
                                  s(:const, nil, :Process), :wait,
                                  s(:lvar, :pid))),
                              s(:resbody,
                                s(:array,
                                  s(:const,
                                    s(:const, nil, :Timeout), :Error)), nil, nil), nil))))),
                    s(:lvasgn, :status,
                      s(:gvar, :$?)))),
                s(:if,
                  s(:lvar, :capture_stdout),
                  s(:lvasgn, :stdout,
                    s(:send,
                      s(:lvar, :th_stdout), :value)), nil),
                s(:if,
                  s(:and,
                    s(:lvar, :capture_stderr),
                    s(:send,
                      s(:lvar, :capture_stderr), :!=,
                      s(:sym, :merge_to_stdout))),
                  s(:lvasgn, :stderr,
                    s(:send,
                      s(:lvar, :th_stderr), :value)), nil),
                s(:if,
                  s(:lvar, :capture_stdout),
                  s(:send,
                    s(:lvar, :out_p), :close), nil),
                s(:if,
                  s(:and,
                    s(:lvar, :capture_stderr),
                    s(:send,
                      s(:lvar, :capture_stderr), :!=,
                      s(:sym, :merge_to_stdout))),
                  s(:send,
                    s(:lvar, :err_p), :close), nil),
                s(:or_asgn,
                  s(:lvasgn, :status),
                  s(:send,
                    s(:send,
                      s(:const, nil, :Process), :wait2,
                      s(:lvar, :pid)), :[],
                    s(:int, 1))),
                s(:if,
                  s(:lvar, :stdout_filter),
                  s(:lvasgn, :stdout,
                    s(:send,
                      s(:lvar, :stdout_filter), :call,
                      s(:lvar, :stdout))), nil),
                s(:if,
                  s(:lvar, :stderr_filter),
                  s(:lvasgn, :stderr,
                    s(:send,
                      s(:lvar, :stderr_filter), :call,
                      s(:lvar, :stderr))), nil),
                s(:if,
                  s(:lvar, :timeout_error),
                  s(:begin,
                    s(:lvasgn, :bt,
                      s(:send, nil, :caller_locations)),
                    s(:lvasgn, :msg,
                      s(:dstr,
                        s(:str, "execution of "),
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:lvar, :bt), :shift), :label)),
                        s(:str, " expired"))),
                    s(:lvasgn, :msg,
                      s(:send,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const,
                                s(:const, nil, :Test), :Unit), :Assertions), :FailDesc), :[],
                          s(:lvar, :status),
                          s(:lvar, :msg),
                          s(:send,
                            s(:array,
                              s(:lvar, :stdout),
                              s(:lvar, :stderr)), :join,
                            s(:str, "\n"))), :call)),
                    s(:send, nil, :raise,
                      s(:lvar, :timeout_error),
                      s(:lvar, :msg),
                      s(:send,
                        s(:lvar, :bt), :map,
                        s(:block_pass,
                          s(:sym, :to_s))))), nil),
                s(:return,
                  s(:lvar, :stdout),
                  s(:lvar, :stderr),
                  s(:lvar, :status))))),
          s(:begin,
            s(:block,
              s(:send,
                s(:array,
                  s(:lvar, :th_stdout),
                  s(:lvar, :th_stderr)), :each),
              s(:args,
                s(:arg, :th)),
              s(:if,
                s(:lvar, :th),
                s(:send,
                  s(:lvar, :th), :kill), nil)),
            s(:block,
              s(:send,
                s(:array,
                  s(:lvar, :in_c),
                  s(:lvar, :in_p),
                  s(:lvar, :out_c),
                  s(:lvar, :out_p),
                  s(:lvar, :err_c),
                  s(:lvar, :err_p)), :each),
              s(:args,
                s(:arg, :io)),
              s(:if,
                s(:and,
                  s(:lvar, :io),
                  s(:send,
                    s(:send,
                      s(:lvar, :io), :closed?), :!)),
                s(:send,
                  s(:lvar, :io), :close), nil)),
            s(:block,
              s(:send,
                s(:array,
                  s(:lvar, :th_stdout),
                  s(:lvar, :th_stderr)), :each),
              s(:args,
                s(:arg, :th)),
              s(:if,
                s(:lvar, :th),
                s(:send,
                  s(:lvar, :th), :join), nil))))),
      s(:send, nil, :module_function,
        s(:sym, :invoke_ruby)),
      s(:alias,
        s(:sym, :rubyexec),
        s(:sym, :invoke_ruby)),
      s(:sclass,
        s(:self),
        s(:alias,
          s(:sym, :rubyexec),
          s(:sym, :invoke_ruby))),
      s(:def, :verbose_warning,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:sclass,
              s(:begin,
                s(:lvasgn, :stderr,
                  s(:str, ""))),
              s(:alias,
                s(:sym, :write),
                s(:sym, :<<))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :stderr),
                s(:gvasgn, :$stderr),
                s(:lvasgn, :verbose),
                s(:gvasgn, :$VERBOSE)),
              s(:array,
                s(:gvar, :$stderr),
                s(:lvar, :stderr),
                s(:gvar, :$VERBOSE),
                s(:true))),
            s(:yield,
              s(:lvar, :stderr)),
            s(:return,
              s(:gvar, :$stderr))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :stderr),
              s(:gvasgn, :$stderr),
              s(:gvasgn, :$VERBOSE)),
            s(:array,
              s(:gvar, :$stderr),
              s(:lvar, :stderr),
              s(:lvar, :verbose))))),
      s(:send, nil, :module_function,
        s(:sym, :verbose_warning)),
      s(:def, :default_warning,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :verbose),
                s(:gvasgn, :$VERBOSE)),
              s(:array,
                s(:gvar, :$VERBOSE),
                s(:false))),
            s(:yield)),
          s(:gvasgn, :$VERBOSE,
            s(:lvar, :verbose)))),
      s(:send, nil, :module_function,
        s(:sym, :default_warning)),
      s(:def, :suppress_warning,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :verbose),
                s(:gvasgn, :$VERBOSE)),
              s(:array,
                s(:gvar, :$VERBOSE),
                s(:nil))),
            s(:yield)),
          s(:gvasgn, :$VERBOSE,
            s(:lvar, :verbose)))),
      s(:send, nil, :module_function,
        s(:sym, :suppress_warning)),
      s(:def, :under_gc_stress,
        s(:args,
          s(:optarg, :stress,
            s(:true))),
        s(:ensure,
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :stress),
                s(:send,
                  s(:const, nil, :GC), :stress=)),
              s(:array,
                s(:send,
                  s(:const, nil, :GC), :stress),
                s(:lvar, :stress))),
            s(:yield)),
          s(:send,
            s(:const, nil, :GC), :stress=,
            s(:lvar, :stress)))),
      s(:send, nil, :module_function,
        s(:sym, :under_gc_stress)),
      s(:def, :with_default_external,
        s(:args,
          s(:arg, :enc)),
        s(:ensure,
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :verbose),
                s(:gvasgn, :$VERBOSE)),
              s(:array,
                s(:gvar, :$VERBOSE),
                s(:nil))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :origenc),
                s(:send,
                  s(:const, nil, :Encoding), :default_external=)),
              s(:array,
                s(:send,
                  s(:const, nil, :Encoding), :default_external),
                s(:lvar, :enc))),
            s(:gvasgn, :$VERBOSE,
              s(:lvar, :verbose)),
            s(:yield)),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :verbose),
                s(:gvasgn, :$VERBOSE)),
              s(:array,
                s(:gvar, :$VERBOSE),
                s(:nil))),
            s(:send,
              s(:const, nil, :Encoding), :default_external=,
              s(:lvar, :origenc)),
            s(:gvasgn, :$VERBOSE,
              s(:lvar, :verbose))))),
      s(:send, nil, :module_function,
        s(:sym, :with_default_external)),
      s(:def, :with_default_internal,
        s(:args,
          s(:arg, :enc)),
        s(:ensure,
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :verbose),
                s(:gvasgn, :$VERBOSE)),
              s(:array,
                s(:gvar, :$VERBOSE),
                s(:nil))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :origenc),
                s(:send,
                  s(:const, nil, :Encoding), :default_internal=)),
              s(:array,
                s(:send,
                  s(:const, nil, :Encoding), :default_internal),
                s(:lvar, :enc))),
            s(:gvasgn, :$VERBOSE,
              s(:lvar, :verbose)),
            s(:yield)),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :verbose),
                s(:gvasgn, :$VERBOSE)),
              s(:array,
                s(:gvar, :$VERBOSE),
                s(:nil))),
            s(:send,
              s(:const, nil, :Encoding), :default_internal=,
              s(:lvar, :origenc)),
            s(:gvasgn, :$VERBOSE,
              s(:lvar, :verbose))))),
      s(:send, nil, :module_function,
        s(:sym, :with_default_internal)),
      s(:def, :labeled_module,
        s(:args,
          s(:arg, :name),
          s(:blockarg, :block)),
        s(:block,
          s(:send,
            s(:const, nil, :Module), :new),
          s(:args),
          s(:begin,
            s(:block,
              s(:send,
                s(:send, nil, :singleton_class), :class_eval),
              s(:args),
              s(:begin,
                s(:block,
                  s(:send, nil, :define_method,
                    s(:sym, :to_s)),
                  s(:args),
                  s(:lvar, :name)),
                s(:alias,
                  s(:sym, :inspect),
                  s(:sym, :to_s)))),
            s(:if,
              s(:lvar, :block),
              s(:send, nil, :class_eval,
                s(:block_pass,
                  s(:lvar, :block))), nil)))),
      s(:send, nil, :module_function,
        s(:sym, :labeled_module)),
      s(:def, :labeled_class,
        s(:args,
          s(:arg, :name),
          s(:optarg, :superclass,
            s(:const, nil, :Object)),
          s(:blockarg, :block)),
        s(:block,
          s(:send,
            s(:const, nil, :Class), :new,
            s(:lvar, :superclass)),
          s(:args),
          s(:begin,
            s(:block,
              s(:send,
                s(:send, nil, :singleton_class), :class_eval),
              s(:args),
              s(:begin,
                s(:block,
                  s(:send, nil, :define_method,
                    s(:sym, :to_s)),
                  s(:args),
                  s(:lvar, :name)),
                s(:alias,
                  s(:sym, :inspect),
                  s(:sym, :to_s)))),
            s(:if,
              s(:lvar, :block),
              s(:send, nil, :class_eval,
                s(:block_pass,
                  s(:lvar, :block))), nil)))),
      s(:send, nil, :module_function,
        s(:sym, :labeled_class)),
      s(:if,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "darwin"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM)),
        s(:begin,
          s(:casgn, nil, :DIAGNOSTIC_REPORTS_PATH,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:str, "~/Library/Logs/DiagnosticReports"))),
          s(:casgn, nil, :DIAGNOSTIC_REPORTS_TIMEFORMAT,
            s(:str, "%Y-%m-%d-%H%M%S")),
          s(:defs,
            s(:self), :diagnostic_reports,
            s(:args,
              s(:arg, :signame),
              s(:arg, :cmd),
              s(:arg, :pid),
              s(:arg, :now)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:array,
                    s(:str, "ABRT"),
                    s(:str, "QUIT"),
                    s(:str, "SEGV"),
                    s(:str, "ILL"),
                    s(:str, "TRAP")), :include?,
                  s(:lvar, :signame)), nil,
                s(:return)),
              s(:lvasgn, :cmd,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:lvar, :cmd))),
              s(:lvasgn, :path,
                s(:const, nil, :DIAGNOSTIC_REPORTS_PATH)),
              s(:lvasgn, :timeformat,
                s(:const, nil, :DIAGNOSTIC_REPORTS_TIMEFORMAT)),
              s(:lvasgn, :pat,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :path)),
                  s(:str, "/"),
                  s(:begin,
                    s(:lvar, :cmd)),
                  s(:str, "_"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :now), :strftime,
                      s(:lvar, :timeformat))),
                  s(:str, "[-_]*.crash"))),
              s(:lvasgn, :first,
                s(:true)),
              s(:block,
                s(:send,
                  s(:int, 30), :times),
                s(:args),
                s(:begin,
                  s(:if,
                    s(:lvar, :first),
                    s(:begin,
                      s(:lvasgn, :first,
                        s(:false))),
                    s(:send, nil, :sleep,
                      s(:float, 0.1))),
                  s(:block,
                    s(:send,
                      s(:const, nil, :Dir), :glob,
                      s(:lvar, :pat)),
                    s(:args,
                      s(:arg, :name)),
                    s(:begin,
                      s(:lvasgn, :log,
                        s(:rescue,
                          s(:send,
                            s(:const, nil, :File), :read,
                            s(:lvar, :name)),
                          s(:resbody, nil, nil,
                            s(:next)), nil)),
                      s(:if,
                        s(:send,
                          s(:regexp,
                            s(:str, "\\AProcess:\\s+"),
                            s(:begin,
                              s(:lvar, :cmd)),
                            s(:str, " \\["),
                            s(:begin,
                              s(:lvar, :pid)),
                            s(:str, "\\]$"),
                            s(:regopt)), :=~,
                          s(:lvar, :log)),
                        s(:begin,
                          s(:send,
                            s(:const, nil, :File), :unlink,
                            s(:lvar, :name)),
                          s(:rescue,
                            s(:send,
                              s(:const, nil, :File), :unlink,
                              s(:dstr,
                                s(:begin,
                                  s(:lvar, :path)),
                                s(:str, "/."),
                                s(:begin,
                                  s(:send,
                                    s(:const, nil, :File), :basename,
                                    s(:lvar, :name))),
                                s(:str, ".plist"))),
                            s(:resbody, nil, nil,
                              s(:nil)), nil),
                          s(:return,
                            s(:lvar, :log))), nil))))),
              s(:nil)))),
        s(:defs,
          s(:self), :diagnostic_reports,
          s(:args,
            s(:arg, :signame),
            s(:arg, :cmd),
            s(:arg, :pid),
            s(:arg, :now)), nil)),
      s(:defs,
        s(:self), :gc_stress_to_class?,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:ivar, :@gc_stress_to_class)), nil,
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :_),
                  s(:lvasgn, :_),
                  s(:lvasgn, :status)),
                s(:send, nil, :invoke_ruby,
                  s(:array,
                    s(:dstr,
                      s(:str, "-e"),
                      s(:str, "exit GC.respond_to?(:add_stress_to_class)"))))),
              s(:ivasgn, :@gc_stress_to_class,
                s(:send,
                  s(:lvar, :status), :success?)))),
          s(:ivar, :@gc_stress_to_class))))),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "rbconfig")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil),
      s(:module,
        s(:const, nil, :RbConfig),
        s(:begin,
          s(:ivasgn, :@ruby,
            s(:send,
              s(:const, nil, :EnvUtil), :rubybin)),
          s(:sclass,
            s(:self),
            s(:begin,
              s(:if,
                s(:send, nil, :method_defined?,
                  s(:sym, :ruby)),
                s(:undef,
                  s(:sym, :ruby)), nil),
              s(:send, nil, :attr_reader,
                s(:sym, :ruby)))),
          s(:lvasgn, :dir,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:send, nil, :ruby))),
          s(:lvasgn, :name,
            s(:send,
              s(:const, nil, :File), :basename,
              s(:send, nil, :ruby),
              s(:send,
                s(:const, nil, :CONFIG), :[],
                s(:str, "EXEEXT")))),
          s(:send,
            s(:const, nil, :CONFIG), :[]=,
            s(:str, "bindir"),
            s(:lvar, :dir)),
          s(:send,
            s(:const, nil, :CONFIG), :[]=,
            s(:str, "ruby_install_name"),
            s(:lvar, :name)),
          s(:send,
            s(:const, nil, :CONFIG), :[]=,
            s(:str, "RUBY_INSTALL_NAME"),
            s(:lvar, :name)),
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :Gem), :ConfigMap)),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :ConfigMap), :[]=,
              s(:sym, :bindir),
              s(:lvar, :dir)), nil))))))
