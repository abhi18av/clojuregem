s(:begin,
  s(:send, nil, :require,
    s(:str, "minitest/unit")),
  s(:send, nil, :require,
    s(:str, "pp")),
  s(:module,
    s(:const, nil, :Test),
    s(:module,
      s(:const, nil, :Unit),
      s(:module,
        s(:const, nil, :Assertions),
        s(:begin,
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :MiniTest), :Assertions)),
          s(:def, :mu_pp,
            s(:args,
              s(:arg, :obj)),
            s(:send,
              s(:send,
                s(:lvar, :obj), :pretty_inspect), :chomp)),
          s(:casgn, nil, :MINI_DIR,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:send,
                  s(:const, nil, :File), :dirname,
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:str, "(string)")))),
              s(:str, "minitest"))),
          s(:def, :assert,
            s(:args,
              s(:arg, :test),
              s(:restarg, :msgs)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :msgs), :empty?), nil,
                s(:case,
                  s(:lvasgn, :msg,
                    s(:send,
                      s(:lvar, :msgs), :first)),
                  s(:when,
                    s(:const, nil, :String),
                    s(:const, nil, :Proc), nil),
                  s(:when,
                    s(:nil),
                    s(:send,
                      s(:lvar, :msgs), :shift)),
                  s(:begin,
                    s(:lvasgn, :bt,
                      s(:block,
                        s(:send,
                          s(:send, nil, :caller), :reject),
                        s(:args,
                          s(:arg, :s)),
                        s(:send,
                          s(:lvar, :s), :start_with?,
                          s(:const, nil, :MINI_DIR)))),
                    s(:send, nil, :raise,
                      s(:const, nil, :ArgumentError),
                      s(:dstr,
                        s(:str, "assertion message must be String or Proc, but "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :msg), :class)),
                        s(:str, " was given.")),
                      s(:lvar, :bt))))),
              s(:zsuper))),
          s(:def, :assert_block,
            s(:args,
              s(:restarg, :msgs)),
            s(:send, nil, :assert,
              s(:yield),
              s(:splat,
                s(:lvar, :msgs)))),
          s(:def, :assert_raise,
            s(:args,
              s(:restarg, :exp),
              s(:blockarg, :b)),
            s(:begin,
              s(:case,
                s(:send,
                  s(:lvar, :exp), :last),
                s(:when,
                  s(:const, nil, :String),
                  s(:const, nil, :Proc),
                  s(:lvasgn, :msg,
                    s(:send,
                      s(:lvar, :exp), :pop))), nil),
              s(:kwbegin,
                s(:rescue,
                  s(:yield),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :MiniTest), :Skip)),
                    s(:lvasgn, :e),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :exp), :include?,
                          s(:const,
                            s(:const, nil, :MiniTest), :Skip)),
                        s(:return,
                          s(:lvar, :e)), nil),
                      s(:send, nil, :raise,
                        s(:lvar, :e)))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :Exception)),
                    s(:lvasgn, :e),
                    s(:begin,
                      s(:lvasgn, :expected,
                        s(:block,
                          s(:send,
                            s(:lvar, :exp), :any?),
                          s(:args,
                            s(:arg, :ex)),
                          s(:if,
                            s(:send,
                              s(:lvar, :ex), :instance_of?,
                              s(:const, nil, :Module)),
                            s(:send,
                              s(:lvar, :e), :kind_of?,
                              s(:lvar, :ex)),
                            s(:send,
                              s(:lvar, :e), :instance_of?,
                              s(:lvar, :ex))))),
                      s(:send, nil, :assert,
                        s(:lvar, :expected),
                        s(:block,
                          s(:send, nil, :proc),
                          s(:args),
                          s(:send, nil, :exception_details,
                            s(:lvar, :e),
                            s(:send,
                              s(:block,
                                s(:send, nil, :message,
                                  s(:lvar, :msg)),
                                s(:args),
                                s(:dstr,
                                  s(:begin,
                                    s(:send, nil, :mu_pp,
                                      s(:lvar, :exp))),
                                  s(:str, " exception expected, not"))), :call)))),
                      s(:return,
                        s(:lvar, :e)))), nil)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :exp), :size), :==,
                  s(:int, 1)),
                s(:lvasgn, :exp,
                  s(:send,
                    s(:lvar, :exp), :first)), nil),
              s(:send, nil, :flunk,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :exp))),
                    s(:str, " expected but nothing was raised")))))),
          s(:def, :assert_raises,
            s(:args,
              s(:restarg, :exp),
              s(:blockarg, :b)),
            s(:send, nil, :raise,
              s(:const, nil, :NoMethodError),
              s(:str, "use assert_raise"),
              s(:send, nil, :caller))),
          s(:def, :assert_raise_with_message,
            s(:args,
              s(:arg, :exception),
              s(:arg, :expected),
              s(:optarg, :msg,
                s(:nil)),
              s(:blockarg, :block)),
            s(:begin,
              s(:case,
                s(:lvar, :expected),
                s(:when,
                  s(:const, nil, :String),
                  s(:lvasgn, :assert,
                    s(:sym, :assert_equal))),
                s(:when,
                  s(:const, nil, :Regexp),
                  s(:lvasgn, :assert,
                    s(:sym, :assert_match))),
                s(:send, nil, :raise,
                  s(:const, nil, :TypeError),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :expected), :inspect)),
                    s(:str, " to be a kind of String or Regexp, not "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :expected), :class))))),
              s(:lvasgn, :ex,
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:lvar, :exception),
                    s(:or,
                      s(:lvar, :msg),
                      s(:block,
                        s(:send, nil, :proc),
                        s(:args),
                        s(:dstr,
                          s(:str, "Exception("),
                          s(:begin,
                            s(:lvar, :exception)),
                          s(:str, ") with message matches to "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :expected), :inspect)))))),
                  s(:args),
                  s(:yield))),
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg),
                    s(:str, "")),
                  s(:args),
                  s(:dstr,
                    s(:str, "Expected Exception("),
                    s(:begin,
                      s(:lvar, :exception)),
                    s(:str, ") was raised, but the message doesn't match")))),
              s(:if,
                s(:send,
                  s(:lvar, :assert), :==,
                  s(:sym, :assert_equal)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :expected),
                  s(:send,
                    s(:lvar, :ex), :message),
                  s(:lvar, :msg)),
                s(:begin,
                  s(:lvasgn, :msg,
                    s(:block,
                      s(:send, nil, :message,
                        s(:lvar, :msg)),
                      s(:args),
                      s(:dstr,
                        s(:str, "Expected "),
                        s(:begin,
                          s(:send, nil, :mu_pp,
                            s(:lvar, :expected))),
                        s(:str, " to match "),
                        s(:begin,
                          s(:send, nil, :mu_pp,
                            s(:send,
                              s(:lvar, :ex), :message)))))),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:lvar, :expected), :=~,
                      s(:send,
                        s(:lvar, :ex), :message)),
                    s(:lvar, :msg)),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :block), :binding), :eval,
                      s(:str, "proc{|_|$~=_}")), :call,
                    s(:gvar, :$~)))),
              s(:lvar, :ex))),
          s(:def, :assert_nothing_raised,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:op_asgn,
                s(:send,
                  s(:self), :_assertions), :+,
                s(:int, 1)),
              s(:if,
                s(:send,
                  s(:const, nil, :Module), :===,
                  s(:send,
                    s(:lvar, :args), :last)),
                s(:lvasgn, :msg,
                  s(:nil)),
                s(:lvasgn, :msg,
                  s(:send,
                    s(:lvar, :args), :pop))),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:lvasgn, :line,
                      s(:int, 171)),
                    s(:yield)),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :MiniTest), :Skip)), nil,
                    s(:send, nil, :raise)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :Exception)),
                    s(:lvasgn, :e),
                    s(:begin,
                      s(:lvasgn, :bt,
                        s(:send,
                          s(:lvar, :e), :backtrace)),
                      s(:lvasgn, :as,
                        s(:send,
                          s(:lvar, :e), :instance_of?,
                          s(:const,
                            s(:const, nil, :MiniTest), :Assertion))),
                      s(:if,
                        s(:lvar, :as),
                        s(:begin,
                          s(:lvasgn, :ans,
                            s(:regexp,
                              s(:str, "\\A"),
                              s(:begin,
                                s(:send,
                                  s(:const, nil, :Regexp), :quote,
                                  s(:str, "(string)"))),
                              s(:str, ":"),
                              s(:begin,
                                s(:lvar, :line)),
                              s(:str, ":in "),
                              s(:regopt, :o))),
                          s(:block,
                            s(:send,
                              s(:lvar, :bt), :reject!),
                            s(:args,
                              s(:arg, :ln)),
                            s(:send,
                              s(:lvar, :ans), :=~,
                              s(:lvar, :ln)))), nil),
                      s(:if,
                        s(:begin,
                          s(:or,
                            s(:begin,
                              s(:and,
                                s(:send,
                                  s(:lvar, :args), :empty?),
                                s(:send,
                                  s(:lvar, :as), :!))),
                            s(:block,
                              s(:send,
                                s(:lvar, :args), :any?),
                              s(:args,
                                s(:arg, :a)),
                              s(:if,
                                s(:send,
                                  s(:lvar, :a), :instance_of?,
                                  s(:const, nil, :Module)),
                                s(:send,
                                  s(:lvar, :e), :is_a?,
                                  s(:lvar, :a)),
                                s(:send,
                                  s(:send,
                                    s(:lvar, :e), :class), :==,
                                  s(:lvar, :a)))))),
                        s(:begin,
                          s(:lvasgn, :msg,
                            s(:block,
                              s(:send, nil, :message,
                                s(:lvar, :msg)),
                              s(:args),
                              s(:dstr,
                                s(:str, "Exception raised:\n<"),
                                s(:begin,
                                  s(:send, nil, :mu_pp,
                                    s(:lvar, :e))),
                                s(:str, ">")))),
                          s(:send, nil, :raise,
                            s(:const,
                              s(:const, nil, :MiniTest), :Assertion),
                            s(:send,
                              s(:lvar, :msg), :call),
                            s(:lvar, :bt))),
                        s(:send, nil, :raise)))), nil)))),
          s(:def, :assert_nothing_thrown,
            s(:args,
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:kwbegin,
                s(:rescue,
                  s(:lvasgn, :ret,
                    s(:yield)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :ArgumentError)),
                    s(:lvasgn, :error),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:regexp,
                            s(:str, "\\Auncaught throw (.+)\\z"),
                            s(:regopt, :m)), :!~,
                          s(:send,
                            s(:lvar, :error), :message)),
                        s(:send, nil, :raise,
                          s(:lvar, :error)), nil),
                      s(:lvasgn, :msg,
                        s(:block,
                          s(:send, nil, :message,
                            s(:lvar, :msg)),
                          s(:args),
                          s(:dstr,
                            s(:str, "<"),
                            s(:begin,
                              s(:nth_ref, 1)),
                            s(:str, "> was thrown when nothing was expected")))),
                      s(:send, nil, :flunk,
                        s(:lvar, :msg)))), nil)),
              s(:send, nil, :assert,
                s(:true),
                s(:str, "Expected nothing to be thrown")),
              s(:lvar, :ret))),
          s(:def, :assert_throw,
            s(:args,
              s(:arg, :tag),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :ret,
                s(:block,
                  s(:send, nil, :catch,
                    s(:lvar, :tag)),
                  s(:args),
                  s(:begin,
                    s(:kwbegin,
                      s(:rescue,
                        s(:yield,
                          s(:lvar, :tag)),
                        s(:resbody,
                          s(:array,
                            s(:const, nil, :UncaughtThrowError)),
                          s(:lvasgn, :e),
                          s(:lvasgn, :thrown,
                            s(:send,
                              s(:lvar, :e), :tag))), nil)),
                    s(:lvasgn, :msg,
                      s(:block,
                        s(:send, nil, :message,
                          s(:lvar, :msg)),
                        s(:args),
                        s(:dstr,
                          s(:dstr,
                            s(:str, "Expected "),
                            s(:begin,
                              s(:send, nil, :mu_pp,
                                s(:lvar, :tag))),
                            s(:str, " to have been thrown")),
                          s(:dstr,
                            s(:begin,
                              s(:if,
                                s(:lvar, :thrown),
                                s(:dstr,
                                  s(:str, ", not "),
                                  s(:begin,
                                    s(:lvar, :thrown))), nil)))))),
                    s(:send, nil, :assert,
                      s(:false),
                      s(:lvar, :msg))))),
              s(:send, nil, :assert,
                s(:true)),
              s(:lvar, :ret))),
          s(:def, :assert_equal,
            s(:args,
              s(:arg, :exp),
              s(:arg, :act),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :exp_str,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :exp))),
                    s(:lvasgn, :act_str,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :act))),
                    s(:lvasgn, :exp_comment,
                      s(:str, "")),
                    s(:lvasgn, :act_comment,
                      s(:str, "")),
                    s(:if,
                      s(:send,
                        s(:lvar, :exp_str), :==,
                        s(:lvar, :act_str)),
                      s(:if,
                        s(:or,
                          s(:begin,
                            s(:and,
                              s(:send,
                                s(:lvar, :exp), :is_a?,
                                s(:const, nil, :String)),
                              s(:send,
                                s(:lvar, :act), :is_a?,
                                s(:const, nil, :String)))),
                          s(:begin,
                            s(:and,
                              s(:send,
                                s(:lvar, :exp), :is_a?,
                                s(:const, nil, :Regexp)),
                              s(:send,
                                s(:lvar, :act), :is_a?,
                                s(:const, nil, :Regexp))))),
                        s(:begin,
                          s(:lvasgn, :exp_comment,
                            s(:dstr,
                              s(:str, " ("),
                              s(:begin,
                                s(:send,
                                  s(:lvar, :exp), :encoding)),
                              s(:str, ")"))),
                          s(:lvasgn, :act_comment,
                            s(:dstr,
                              s(:str, " ("),
                              s(:begin,
                                s(:send,
                                  s(:lvar, :act), :encoding)),
                              s(:str, ")")))),
                        s(:if,
                          s(:and,
                            s(:send,
                              s(:lvar, :exp), :is_a?,
                              s(:const, nil, :Float)),
                            s(:send,
                              s(:lvar, :act), :is_a?,
                              s(:const, nil, :Float))),
                          s(:begin,
                            s(:lvasgn, :exp_str,
                              s(:send,
                                s(:dstr,
                                  s(:str, "%#."),
                                  s(:begin,
                                    s(:send,
                                      s(:const,
                                        s(:const, nil, :Float), :DIG), :+,
                                      s(:int, 2))),
                                  s(:str, "g")), :%,
                                s(:lvar, :exp))),
                            s(:lvasgn, :act_str,
                              s(:send,
                                s(:dstr,
                                  s(:str, "%#."),
                                  s(:begin,
                                    s(:send,
                                      s(:const,
                                        s(:const, nil, :Float), :DIG), :+,
                                      s(:int, 2))),
                                  s(:str, "g")), :%,
                                s(:lvar, :act)))),
                          s(:if,
                            s(:and,
                              s(:send,
                                s(:lvar, :exp), :is_a?,
                                s(:const, nil, :Time)),
                              s(:send,
                                s(:lvar, :act), :is_a?,
                                s(:const, nil, :Time))),
                            s(:begin,
                              s(:if,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :exp), :subsec), :*,
                                    s(:int, 1000000000)), :==,
                                  s(:send,
                                    s(:lvar, :exp), :nsec)),
                                s(:lvasgn, :exp_comment,
                                  s(:dstr,
                                    s(:str, " ("),
                                    s(:begin,
                                      s(:send,
                                        s(:lvar, :exp), :nsec)),
                                    s(:str, "[ns])"))),
                                s(:lvasgn, :exp_comment,
                                  s(:dstr,
                                    s(:str, " (subsec="),
                                    s(:begin,
                                      s(:send,
                                        s(:lvar, :exp), :subsec)),
                                    s(:str, ")")))),
                              s(:if,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :act), :subsec), :*,
                                    s(:int, 1000000000)), :==,
                                  s(:send,
                                    s(:lvar, :act), :nsec)),
                                s(:lvasgn, :act_comment,
                                  s(:dstr,
                                    s(:str, " ("),
                                    s(:begin,
                                      s(:send,
                                        s(:lvar, :act), :nsec)),
                                    s(:str, "[ns])"))),
                                s(:lvasgn, :act_comment,
                                  s(:dstr,
                                    s(:str, " (subsec="),
                                    s(:begin,
                                      s(:send,
                                        s(:lvar, :act), :subsec)),
                                    s(:str, ")"))))),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:lvar, :exp), :class), :!=,
                                s(:send,
                                  s(:lvar, :act), :class)),
                              s(:begin,
                                s(:lvasgn, :exp_comment,
                                  s(:dstr,
                                    s(:str, " ("),
                                    s(:begin,
                                      s(:send,
                                        s(:lvar, :exp), :class)),
                                    s(:str, ")"))),
                                s(:lvasgn, :act_comment,
                                  s(:dstr,
                                    s(:str, " ("),
                                    s(:begin,
                                      s(:send,
                                        s(:lvar, :act), :class)),
                                    s(:str, ")")))), nil)))),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Encoding), :compatible?,
                            s(:lvar, :exp_str),
                            s(:lvar, :act_str)), :!),
                        s(:if,
                          s(:and,
                            s(:send,
                              s(:lvar, :exp), :is_a?,
                              s(:const, nil, :String)),
                            s(:send,
                              s(:lvar, :act), :is_a?,
                              s(:const, nil, :String))),
                          s(:begin,
                            s(:lvasgn, :exp_str,
                              s(:send,
                                s(:lvar, :exp), :dump)),
                            s(:lvasgn, :act_str,
                              s(:send,
                                s(:lvar, :act), :dump)),
                            s(:lvasgn, :exp_comment,
                              s(:dstr,
                                s(:str, " ("),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :exp), :encoding)),
                                s(:str, ")"))),
                            s(:lvasgn, :act_comment,
                              s(:dstr,
                                s(:str, " ("),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :act), :encoding)),
                                s(:str, ")")))),
                          s(:begin,
                            s(:lvasgn, :exp_str,
                              s(:send,
                                s(:lvar, :exp_str), :dump)),
                            s(:lvasgn, :act_str,
                              s(:send,
                                s(:lvar, :act_str), :dump)))), nil)),
                    s(:dstr,
                      s(:str, "<"),
                      s(:begin,
                        s(:lvar, :exp_str)),
                      s(:str, ">"),
                      s(:begin,
                        s(:lvar, :exp_comment)),
                      s(:str, " expected but was\n<"),
                      s(:begin,
                        s(:lvar, :act_str)),
                      s(:str, ">"),
                      s(:begin,
                        s(:lvar, :act_comment)))))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :exp), :==,
                  s(:lvar, :act)),
                s(:lvar, :msg)))),
          s(:def, :assert_not_nil,
            s(:args,
              s(:arg, :exp),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "<"),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :exp))),
                    s(:str, "> expected to not be nil")))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :exp), :nil?), :!),
                s(:lvar, :msg)))),
          s(:def, :assert_not_equal,
            s(:args,
              s(:arg, :exp),
              s(:arg, :act),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "<"),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :exp))),
                    s(:str, "> expected to be != to\n<"),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :act))),
                    s(:str, ">")))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :exp), :!=,
                  s(:lvar, :act)),
                s(:lvar, :msg)))),
          s(:def, :assert_no_match,
            s(:args,
              s(:arg, :regexp),
              s(:arg, :string),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :Regexp),
                s(:lvar, :regexp),
                s(:str, "The first argument to assert_no_match should be a Regexp.")),
              s(:op_asgn,
                s(:send,
                  s(:self), :_assertions), :-,
                s(:int, 1)),
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:dstr,
                    s(:str, "<"),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :regexp))),
                    s(:str, "> expected to not match\n<"),
                    s(:begin,
                      s(:send, nil, :mu_pp,
                        s(:lvar, :string))),
                    s(:str, ">")))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :regexp), :!~,
                  s(:lvar, :string)),
                s(:lvar, :msg)))),
          s(:def, :assert_not_same,
            s(:args,
              s(:arg, :expected),
              s(:arg, :actual),
              s(:optarg, :message,
                s(:str, ""))),
            s(:begin,
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:send, nil, :build_message,
                    s(:lvar, :message),
                    s(:dstr,
                      s(:str, "<?>\n"),
                      s(:str, "with id <?> expected to not be equal\\? to\n"),
                      s(:str, "<?>\n"),
                      s(:str, "with id <?>.\n")),
                    s(:lvar, :expected),
                    s(:send,
                      s(:lvar, :expected), :__id__),
                    s(:lvar, :actual),
                    s(:send,
                      s(:lvar, :actual), :__id__)))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :actual), :equal?,
                    s(:lvar, :expected)), :!),
                s(:lvar, :msg)))),
          s(:def, :assert_respond_to,
            s(:args,
              s(:arg, :obj),
              s(:mlhs,
                s(:arg, :meth),
                s(:arg, :priv)),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:if,
                s(:lvar, :priv),
                s(:begin,
                  s(:lvasgn, :msg,
                    s(:block,
                      s(:send, nil, :message,
                        s(:lvar, :msg)),
                      s(:args),
                      s(:dstr,
                        s(:str, "Expected "),
                        s(:begin,
                          s(:send, nil, :mu_pp,
                            s(:lvar, :obj))),
                        s(:str, " ("),
                        s(:begin,
                          s(:send,
                            s(:lvar, :obj), :class)),
                        s(:str, ") to respond to #"),
                        s(:begin,
                          s(:lvar, :meth)),
                        s(:begin,
                          s(:if,
                            s(:lvar, :priv),
                            s(:str, " privately"), nil))))),
                  s(:return,
                    s(:send, nil, :assert,
                      s(:send,
                        s(:lvar, :obj), :respond_to?,
                        s(:lvar, :meth),
                        s(:lvar, :priv)),
                      s(:lvar, :msg)))), nil),
              s(:if,
                s(:or,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send, nil, :caller), :[],
                        s(:int, 0)), :rindex,
                      s(:const, nil, :MINI_DIR),
                      s(:int, 0)), :!),
                  s(:send,
                    s(:send,
                      s(:lvar, :obj), :respond_to?,
                      s(:lvar, :meth)), :!)),
                s(:zsuper), nil))),
          s(:def, :assert_send,
            s(:args,
              s(:arg, :send_ary),
              s(:optarg, :m,
                s(:nil))),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :recv),
                  s(:lvasgn, :msg),
                  s(:splat,
                    s(:lvasgn, :args))),
                s(:lvar, :send_ary)),
              s(:lvasgn, :m,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :m)),
                  s(:args),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :args), :empty?),
                      s(:lvasgn, :argsstr,
                        s(:str, "")),
                      s(:send,
                        s(:begin,
                          s(:lvasgn, :argsstr,
                            s(:send, nil, :mu_pp,
                              s(:lvar, :args)))), :sub!,
                        s(:regexp,
                          s(:str, "\\A\\[(.*)\\]\\z"),
                          s(:regopt, :m)),
                        s(:str, "(\\1)"))),
                    s(:dstr,
                      s(:str, "Expected "),
                      s(:begin,
                        s(:send, nil, :mu_pp,
                          s(:lvar, :recv))),
                      s(:str, "."),
                      s(:begin,
                        s(:lvar, :msg)),
                      s(:begin,
                        s(:lvar, :argsstr)),
                      s(:str, " to return true"))))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :recv), :__send__,
                  s(:lvar, :msg),
                  s(:splat,
                    s(:lvar, :args))),
                s(:lvar, :m)))),
          s(:def, :assert_not_send,
            s(:args,
              s(:arg, :send_ary),
              s(:optarg, :m,
                s(:nil))),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :recv),
                  s(:lvasgn, :msg),
                  s(:splat,
                    s(:lvasgn, :args))),
                s(:lvar, :send_ary)),
              s(:lvasgn, :m,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :m)),
                  s(:args),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :args), :empty?),
                      s(:lvasgn, :argsstr,
                        s(:str, "")),
                      s(:send,
                        s(:begin,
                          s(:lvasgn, :argsstr,
                            s(:send, nil, :mu_pp,
                              s(:lvar, :args)))), :sub!,
                        s(:regexp,
                          s(:str, "\\A\\[(.*)\\]\\z"),
                          s(:regopt, :m)),
                        s(:str, "(\\1)"))),
                    s(:dstr,
                      s(:str, "Expected "),
                      s(:begin,
                        s(:send, nil, :mu_pp,
                          s(:lvar, :recv))),
                      s(:str, "."),
                      s(:begin,
                        s(:lvar, :msg)),
                      s(:begin,
                        s(:lvar, :argsstr)),
                      s(:str, " to return false"))))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :recv), :__send__,
                    s(:lvar, :msg),
                    s(:splat,
                      s(:lvar, :args))), :!),
                s(:lvar, :m)))),
          s(:lvasgn, :ms,
            s(:block,
              s(:send,
                s(:send, nil, :instance_methods,
                  s(:true)), :map),
              s(:args,
                s(:arg, :sym)),
              s(:send,
                s(:lvar, :sym), :to_s))),
          s(:block,
            s(:send,
              s(:lvar, :ms), :grep,
              s(:regexp,
                s(:str, "\\Arefute_"),
                s(:regopt))),
            s(:args,
              s(:arg, :m)),
            s(:begin,
              s(:lvasgn, :mname,
                s(:begin,
                  s(:send,
                    s(:str, "assert_not_"), :<<,
                    s(:send,
                      s(:send,
                        s(:lvar, :m), :to_s), :[],
                      s(:regexp,
                        s(:str, ".*?_(.*)"),
                        s(:regopt)),
                      s(:int, 1))))),
              s(:if,
                s(:send,
                  s(:lvar, :ms), :include?,
                  s(:lvar, :mname)), nil,
                s(:send, nil, :alias_method,
                  s(:lvar, :mname),
                  s(:lvar, :m))))),
          s(:alias,
            s(:sym, :assert_include),
            s(:sym, :assert_includes)),
          s(:alias,
            s(:sym, :assert_not_include),
            s(:sym, :assert_not_includes)),
          s(:def, :assert_all?,
            s(:args,
              s(:arg, :obj),
              s(:optarg, :m,
                s(:nil)),
              s(:blockarg, :blk)),
            s(:begin,
              s(:lvasgn, :failed,
                s(:array)),
              s(:block,
                s(:send,
                  s(:lvar, :obj), :each),
                s(:args,
                  s(:restarg, :a),
                  s(:blockarg, :b)),
                s(:if,
                  s(:send,
                    s(:lvar, :blk), :call,
                    s(:splat,
                      s(:lvar, :a)),
                    s(:block_pass,
                      s(:lvar, :b))), nil,
                  s(:send,
                    s(:lvar, :failed), :<<,
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :a), :size), :>,
                          s(:int, 1)),
                        s(:lvar, :a),
                        s(:send,
                          s(:lvar, :a), :[],
                          s(:int, 0))))))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :failed), :empty?),
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :m)),
                  s(:args),
                  s(:send,
                    s(:lvar, :failed), :pretty_inspect))))),
          s(:def, :assert_not_all?,
            s(:args,
              s(:arg, :obj),
              s(:optarg, :m,
                s(:nil)),
              s(:blockarg, :blk)),
            s(:begin,
              s(:lvasgn, :failed,
                s(:array)),
              s(:block,
                s(:send,
                  s(:lvar, :obj), :each),
                s(:args,
                  s(:restarg, :a),
                  s(:blockarg, :b)),
                s(:if,
                  s(:send,
                    s(:lvar, :blk), :call,
                    s(:splat,
                      s(:lvar, :a)),
                    s(:block_pass,
                      s(:lvar, :b))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :failed), :<<,
                        s(:send,
                          s(:lvar, :a), :size)), :>,
                      s(:int, 1)),
                    s(:lvar, :a),
                    s(:send,
                      s(:lvar, :a), :[],
                      s(:int, 0))), nil)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :failed), :empty?),
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :m)),
                  s(:args),
                  s(:send,
                    s(:lvar, :failed), :pretty_inspect))))),
          s(:def, :assert_valid_syntax,
            s(:args,
              s(:arg, :code),
              s(:optarg, :fname,
                s(:send,
                  s(:send, nil, :caller_locations,
                    s(:int, 1),
                    s(:int, 1)), :[],
                  s(:int, 0))),
              s(:optarg, :mesg,
                s(:send,
                  s(:lvar, :fname), :to_s)),
              s(:kwoptarg, :verbose,
                s(:nil))),
            s(:ensure,
              s(:begin,
                s(:lvasgn, :code,
                  s(:send,
                    s(:lvar, :code), :b)),
                s(:block,
                  s(:send,
                    s(:lvar, :code), :sub!,
                    s(:regexp,
                      s(:str, "\\A(?:\\xef\\xbb\\xbf)?(\\s*\\#.*$)*(\\n)?"),
                      s(:regopt, :n))),
                  s(:args),
                  s(:dstr,
                    s(:back_ref, :$&),
                    s(:begin,
                      s(:if,
                        s(:and,
                          s(:nth_ref, 1),
                          s(:send,
                            s(:nth_ref, 2), :!)),
                        s(:str, "\n"), nil)),
                    s(:str, "BEGIN{throw tag, :ok}\n"))),
                s(:send,
                  s(:lvar, :code), :force_encoding,
                  s(:const,
                    s(:const, nil, :Encoding), :UTF_8)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :verbose),
                    s(:gvasgn, :$VERBOSE)),
                  s(:array,
                    s(:gvar, :$VERBOSE),
                    s(:lvar, :verbose))),
                s(:if,
                  s(:defined?,
                    s(:yield)),
                  s(:yield), nil),
                s(:case, nil,
                  s(:when,
                    s(:send,
                      s(:const, nil, :Array), :===,
                      s(:lvar, :fname)),
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :fname),
                        s(:lvasgn, :line)),
                      s(:array,
                        s(:splat,
                          s(:lvar, :fname))))),
                  s(:when,
                    s(:and,
                      s(:defined?,
                        s(:send,
                          s(:lvar, :fname), :path)),
                      s(:defined?,
                        s(:send,
                          s(:lvar, :fname), :lineno))),
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :fname),
                        s(:lvasgn, :line)),
                      s(:array,
                        s(:send,
                          s(:lvar, :fname), :path),
                        s(:send,
                          s(:lvar, :fname), :lineno)))),
                  s(:lvasgn, :line,
                    s(:int, 0))),
                s(:block,
                  s(:send, nil, :assert_nothing_raised,
                    s(:const, nil, :SyntaxError),
                    s(:lvar, :mesg)),
                  s(:args),
                  s(:send, nil, :assert_equal,
                    s(:sym, :ok),
                    s(:block,
                      s(:send, nil, :catch),
                      s(:args,
                        s(:arg, :tag)),
                      s(:send, nil, :eval,
                        s(:lvar, :code),
                        s(:send, nil, :binding),
                        s(:lvar, :fname),
                        s(:lvar, :line))),
                    s(:lvar, :mesg)))),
              s(:gvasgn, :$VERBOSE,
                s(:lvar, :verbose)))),
          s(:def, :assert_syntax_error,
            s(:args,
              s(:arg, :code),
              s(:arg, :error),
              s(:optarg, :fname,
                s(:send,
                  s(:send, nil, :caller_locations,
                    s(:int, 1),
                    s(:int, 1)), :[],
                  s(:int, 0))),
              s(:optarg, :mesg,
                s(:send,
                  s(:lvar, :fname), :to_s))),
            s(:ensure,
              s(:begin,
                s(:lvasgn, :code,
                  s(:send,
                    s(:lvar, :code), :b)),
                s(:block,
                  s(:send,
                    s(:lvar, :code), :sub!,
                    s(:regexp,
                      s(:str, "\\A(?:\\xef\\xbb\\xbf)?(\\s*\\#.*$)*(\\n)?"),
                      s(:regopt, :n))),
                  s(:args),
                  s(:dstr,
                    s(:back_ref, :$&),
                    s(:begin,
                      s(:if,
                        s(:and,
                          s(:nth_ref, 1),
                          s(:send,
                            s(:nth_ref, 2), :!)),
                        s(:str, "\n"), nil)),
                    s(:str, "BEGIN{throw tag, :ng}\n"))),
                s(:send,
                  s(:lvar, :code), :force_encoding,
                  s(:const,
                    s(:const, nil, :Encoding), :US_ASCII)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :verbose),
                    s(:gvasgn, :$VERBOSE)),
                  s(:array,
                    s(:gvar, :$VERBOSE),
                    s(:nil))),
                s(:if,
                  s(:defined?,
                    s(:yield)),
                  s(:yield), nil),
                s(:case, nil,
                  s(:when,
                    s(:send,
                      s(:const, nil, :Array), :===,
                      s(:lvar, :fname)),
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :fname),
                        s(:lvasgn, :line)),
                      s(:array,
                        s(:splat,
                          s(:lvar, :fname))))),
                  s(:when,
                    s(:and,
                      s(:defined?,
                        s(:send,
                          s(:lvar, :fname), :path)),
                      s(:defined?,
                        s(:send,
                          s(:lvar, :fname), :lineno))),
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :fname),
                        s(:lvasgn, :line)),
                      s(:array,
                        s(:send,
                          s(:lvar, :fname), :path),
                        s(:send,
                          s(:lvar, :fname), :lineno)))),
                  s(:lvasgn, :line,
                    s(:int, 0))),
                s(:lvasgn, :e,
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:const, nil, :SyntaxError),
                      s(:lvar, :mesg)),
                    s(:args),
                    s(:block,
                      s(:send, nil, :catch),
                      s(:args,
                        s(:arg, :tag)),
                      s(:send, nil, :eval,
                        s(:lvar, :code),
                        s(:send, nil, :binding),
                        s(:lvar, :fname),
                        s(:lvar, :line))))),
                s(:send, nil, :assert_match,
                  s(:lvar, :error),
                  s(:send,
                    s(:lvar, :e), :message),
                  s(:lvar, :mesg)),
                s(:lvar, :e)),
              s(:gvasgn, :$VERBOSE,
                s(:lvar, :verbose)))),
          s(:def, :assert_normal_exit,
            s(:args,
              s(:arg, :testsrc),
              s(:optarg, :message,
                s(:str, "")),
              s(:kwoptarg, :child_env,
                s(:nil)),
              s(:kwrestarg, :opt)),
            s(:begin,
              s(:send, nil, :assert_valid_syntax,
                s(:lvar, :testsrc),
                s(:send,
                  s(:send, nil, :caller_locations,
                    s(:int, 1),
                    s(:int, 1)), :[],
                  s(:int, 0))),
              s(:if,
                s(:lvar, :child_env),
                s(:lvasgn, :child_env,
                  s(:array,
                    s(:lvar, :child_env))),
                s(:lvasgn, :child_env,
                  s(:array))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :out),
                  s(:lvasgn, :_),
                  s(:lvasgn, :status)),
                s(:send,
                  s(:const, nil, :EnvUtil), :invoke_ruby,
                  s(:send,
                    s(:lvar, :child_env), :+,
                    s(:array,
                      s(:str, "-W0"))),
                  s(:lvar, :testsrc),
                  s(:true),
                  s(:sym, :merge_to_stdout),
                  s(:hash,
                    s(:kwsplat,
                      s(:lvar, :opt))))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :status), :signaled?), :!),
                s(:send,
                  s(:const, nil, :FailDesc), :[],
                  s(:lvar, :status),
                  s(:lvar, :message),
                  s(:lvar, :out))))),
          s(:casgn, nil, :FailDesc,
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :status),
                s(:optarg, :message,
                  s(:str, "")),
                s(:optarg, :out,
                  s(:str, ""))),
              s(:begin,
                s(:lvasgn, :pid,
                  s(:send,
                    s(:lvar, :status), :pid)),
                s(:lvasgn, :now,
                  s(:send,
                    s(:const, nil, :Time), :now)),
                s(:lvasgn, :faildesc,
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args),
                    s(:begin,
                      s(:if,
                        s(:lvasgn, :signo,
                          s(:send,
                            s(:lvar, :status), :termsig)),
                        s(:begin,
                          s(:lvasgn, :signame,
                            s(:send,
                              s(:const, nil, :Signal), :signame,
                              s(:lvar, :signo))),
                          s(:lvasgn, :sigdesc,
                            s(:dstr,
                              s(:str, "signal "),
                              s(:begin,
                                s(:lvar, :signo))))), nil),
                      s(:lvasgn, :log,
                        s(:send,
                          s(:const, nil, :EnvUtil), :diagnostic_reports,
                          s(:lvar, :signame),
                          s(:send,
                            s(:const, nil, :EnvUtil), :rubybin),
                          s(:lvar, :pid),
                          s(:lvar, :now))),
                      s(:if,
                        s(:lvar, :signame),
                        s(:lvasgn, :sigdesc,
                          s(:dstr,
                            s(:str, "SIG"),
                            s(:begin,
                              s(:lvar, :signame)),
                            s(:str, " ("),
                            s(:begin,
                              s(:lvar, :sigdesc)),
                            s(:str, ")"))), nil),
                      s(:if,
                        s(:send,
                          s(:lvar, :status), :coredump?),
                        s(:send,
                          s(:lvar, :sigdesc), :<<,
                          s(:str, " (core dumped)")), nil),
                      s(:lvasgn, :full_message,
                        s(:str, "")),
                      s(:if,
                        s(:and,
                          s(:lvar, :message),
                          s(:send,
                            s(:send,
                              s(:lvar, :message), :empty?), :!)),
                        s(:send,
                          s(:send,
                            s(:lvar, :full_message), :<<,
                            s(:lvar, :message)), :<<,
                          s(:str, "\n")), nil),
                      s(:send,
                        s(:lvar, :full_message), :<<,
                        s(:dstr,
                          s(:str, "pid "),
                          s(:begin,
                            s(:lvar, :pid)))),
                      s(:if,
                        s(:send,
                          s(:lvar, :status), :exited?),
                        s(:send,
                          s(:lvar, :full_message), :<<,
                          s(:dstr,
                            s(:str, " exit "),
                            s(:begin,
                              s(:send,
                                s(:lvar, :status), :exitstatus)))), nil),
                      s(:if,
                        s(:lvar, :sigdesc),
                        s(:send,
                          s(:lvar, :full_message), :<<,
                          s(:dstr,
                            s(:str, " killed by "),
                            s(:begin,
                              s(:lvar, :sigdesc)))), nil),
                      s(:if,
                        s(:and,
                          s(:lvar, :out),
                          s(:send,
                            s(:send,
                              s(:lvar, :out), :empty?), :!)),
                        s(:begin,
                          s(:send,
                            s(:lvar, :full_message), :<<,
                            s(:dstr,
                              s(:str, "\n"),
                              s(:begin,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :out), :b), :gsub,
                                  s(:regexp,
                                    s(:str, "^"),
                                    s(:regopt)),
                                  s(:str, "| "))))),
                          s(:if,
                            s(:send,
                              s(:regexp,
                                s(:str, "\\n\\z"),
                                s(:regopt)), :!~,
                              s(:lvar, :full_message)),
                            s(:send,
                              s(:lvar, :full_message), :<<,
                              s(:str, "\n")), nil)), nil),
                      s(:if,
                        s(:lvar, :log),
                        s(:send,
                          s(:lvar, :full_message), :<<,
                          s(:dstr,
                            s(:str, "\n"),
                            s(:begin,
                              s(:send,
                                s(:send,
                                  s(:lvar, :log), :b), :gsub,
                                s(:regexp,
                                  s(:str, "^"),
                                  s(:regopt)),
                                s(:str, "| "))))), nil),
                      s(:lvar, :full_message)))),
                s(:lvar, :faildesc)))),
          s(:def, :assert_in_out_err,
            s(:args,
              s(:arg, :args),
              s(:optarg, :test_stdin,
                s(:str, "")),
              s(:optarg, :test_stdout,
                s(:array)),
              s(:optarg, :test_stderr,
                s(:array)),
              s(:optarg, :message,
                s(:nil)),
              s(:kwoptarg, :success,
                s(:nil)),
              s(:kwrestarg, :opt)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :stdout),
                  s(:lvasgn, :stderr),
                  s(:lvasgn, :status)),
                s(:send,
                  s(:const, nil, :EnvUtil), :invoke_ruby,
                  s(:lvar, :args),
                  s(:lvar, :test_stdin),
                  s(:true),
                  s(:true),
                  s(:hash,
                    s(:kwsplat,
                      s(:lvar, :opt))))),
              s(:if,
                s(:lvasgn, :signo,
                  s(:send,
                    s(:lvar, :status), :termsig)),
                s(:send,
                  s(:const, nil, :EnvUtil), :diagnostic_reports,
                  s(:send,
                    s(:const, nil, :Signal), :signame,
                    s(:lvar, :signo)),
                  s(:send,
                    s(:const, nil, :EnvUtil), :rubybin),
                  s(:send,
                    s(:lvar, :status), :pid),
                  s(:send,
                    s(:const, nil, :Time), :now)), nil),
              s(:if,
                s(:send, nil, :block_given?),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :test_stdout), :!=,
                      s(:array)),
                    s(:send, nil, :raise,
                      s(:str, "test_stdout ignored, use block only or without block")), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :test_stderr), :!=,
                      s(:array)),
                    s(:send, nil, :raise,
                      s(:str, "test_stderr ignored, use block only or without block")), nil),
                  s(:yield,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :stdout), :lines), :map),
                      s(:args,
                        s(:arg, :l)),
                      s(:send,
                        s(:lvar, :l), :chomp)),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :stderr), :lines), :map),
                      s(:args,
                        s(:arg, :l)),
                      s(:send,
                        s(:lvar, :l), :chomp)),
                    s(:lvar, :status))),
                s(:begin,
                  s(:block,
                    s(:send, nil, :all_assertions,
                      s(:lvar, :message)),
                    s(:args,
                      s(:arg, :a)),
                    s(:begin,
                      s(:block,
                        s(:send,
                          s(:array,
                            s(:array,
                              s(:str, "stdout"),
                              s(:lvar, :test_stdout),
                              s(:lvar, :stdout)),
                            s(:array,
                              s(:str, "stderr"),
                              s(:lvar, :test_stderr),
                              s(:lvar, :stderr))), :each),
                        s(:args,
                          s(:arg, :key),
                          s(:arg, :exp),
                          s(:arg, :act)),
                        s(:block,
                          s(:send,
                            s(:lvar, :a), :for,
                            s(:lvar, :key)),
                          s(:args),
                          s(:if,
                            s(:send,
                              s(:lvar, :exp), :is_a?,
                              s(:const, nil, :Regexp)),
                            s(:send, nil, :assert_match,
                              s(:lvar, :exp),
                              s(:lvar, :act)),
                            s(:if,
                              s(:block,
                                s(:send,
                                  s(:lvar, :exp), :all?),
                                s(:args,
                                  s(:arg, :e)),
                                s(:send,
                                  s(:const, nil, :String), :===,
                                  s(:lvar, :e))),
                              s(:send, nil, :assert_equal,
                                s(:lvar, :exp),
                                s(:block,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :act), :lines), :map),
                                  s(:args,
                                    s(:arg, :l)),
                                  s(:send,
                                    s(:lvar, :l), :chomp))),
                              s(:send, nil, :assert_pattern_list,
                                s(:lvar, :exp),
                                s(:lvar, :act)))))),
                      s(:if,
                        s(:send,
                          s(:lvar, :success), :nil?), nil,
                        s(:block,
                          s(:send,
                            s(:lvar, :a), :for,
                            s(:str, "success?")),
                          s(:args),
                          s(:if,
                            s(:lvar, :success),
                            s(:send, nil, :assert_predicate,
                              s(:lvar, :status),
                              s(:sym, :success?)),
                            s(:send, nil, :assert_not_predicate,
                              s(:lvar, :status),
                              s(:sym, :success?))))))),
                  s(:lvar, :status))))),
          s(:def, :assert_ruby_status,
            s(:args,
              s(:arg, :args),
              s(:optarg, :test_stdin,
                s(:str, "")),
              s(:optarg, :message,
                s(:nil)),
              s(:kwrestarg, :opt)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :out),
                  s(:lvasgn, :_),
                  s(:lvasgn, :status)),
                s(:send,
                  s(:const, nil, :EnvUtil), :invoke_ruby,
                  s(:lvar, :args),
                  s(:lvar, :test_stdin),
                  s(:true),
                  s(:sym, :merge_to_stdout),
                  s(:hash,
                    s(:kwsplat,
                      s(:lvar, :opt))))),
              s(:lvasgn, :desc,
                s(:send,
                  s(:const, nil, :FailDesc), :[],
                  s(:lvar, :status),
                  s(:lvar, :message),
                  s(:lvar, :out))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :status), :signaled?), :!),
                s(:lvar, :desc)),
              s(:or_asgn,
                s(:lvasgn, :message),
                s(:str, "ruby exit status is not success:")),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :status), :success?),
                s(:lvar, :desc)))),
          s(:casgn, nil, :ABORT_SIGNALS,
            s(:send,
              s(:send,
                s(:const, nil, :Signal), :list), :values_at,
              s(:splat,
                s(:array,
                  s(:str, "ILL"),
                  s(:str, "ABRT"),
                  s(:str, "BUS"),
                  s(:str, "SEGV"),
                  s(:str, "TERM"))))),
          s(:def, :assert_separately,
            s(:args,
              s(:arg, :args),
              s(:optarg, :file,
                s(:nil)),
              s(:optarg, :line,
                s(:nil)),
              s(:arg, :src),
              s(:kwoptarg, :ignore_stderr,
                s(:nil)),
              s(:kwrestarg, :opt)),
            s(:begin,
              s(:if,
                s(:and,
                  s(:lvar, :file),
                  s(:lvar, :line)), nil,
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :loc)),
                    s(:send, nil, :caller_locations,
                      s(:int, 1),
                      s(:int, 1))),
                  s(:or_asgn,
                    s(:lvasgn, :file),
                    s(:send,
                      s(:lvar, :loc), :path)),
                  s(:or_asgn,
                    s(:lvasgn, :line),
                    s(:send,
                      s(:lvar, :loc), :lineno)))),
              s(:op_asgn,
                s(:lvasgn, :line), :-,
                s(:int, 5)),
              s(:lvasgn, :src,
                s(:dstr,
                  s(:str, "# -*- coding: "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :src), :encoding)),
                  s(:str, "; -*-\n"),
                  s(:str, "  require "),
                  s(:begin,
                    s(:send,
                      s(:send, nil, :__dir__), :dump)),
                  s(:str, ";include Test::Unit::Assertions\n"),
                  s(:str, "  END {\n"),
                  s(:str, "    puts [Marshal.dump($!)].pack('m'), \"assertions=\#{self._assertions}\"\n"),
                  s(:str, "  }\n"),
                  s(:begin,
                    s(:lvar, :src)),
                  s(:str, "\n"),
                  s(:str, "  class Test::Unit::Runner\n"),
                  s(:str, "    @@stop_auto_run = true\n"),
                  s(:str, "  end\n"))),
              s(:lvasgn, :args,
                s(:send,
                  s(:lvar, :args), :dup)),
              s(:send,
                s(:lvar, :args), :insert,
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:const, nil, :Hash), :===,
                      s(:send,
                        s(:lvar, :args), :first)),
                    s(:int, 1),
                    s(:int, 0))),
                s(:str, "-w"),
                s(:str, "--disable=gems"),
                s(:splat,
                  s(:block,
                    s(:send,
                      s(:gvar, :$:), :map),
                    s(:args,
                      s(:arg, :l)),
                    s(:dstr,
                      s(:str, "-I"),
                      s(:begin,
                        s(:lvar, :l)))))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :stdout),
                  s(:lvasgn, :stderr),
                  s(:lvasgn, :status)),
                s(:send,
                  s(:const, nil, :EnvUtil), :invoke_ruby,
                  s(:lvar, :args),
                  s(:lvar, :src),
                  s(:true),
                  s(:true),
                  s(:hash,
                    s(:pair,
                      s(:sym, :timeout_error),
                      s(:nil)),
                    s(:kwsplat,
                      s(:lvar, :opt))))),
              s(:lvasgn, :abort,
                s(:or,
                  s(:send,
                    s(:lvar, :status), :coredump?),
                  s(:begin,
                    s(:and,
                      s(:send,
                        s(:lvar, :status), :signaled?),
                      s(:send,
                        s(:const, nil, :ABORT_SIGNALS), :include?,
                        s(:send,
                          s(:lvar, :status), :termsig)))))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :abort), :!),
                s(:send,
                  s(:const, nil, :FailDesc), :[],
                  s(:lvar, :status),
                  s(:nil),
                  s(:lvar, :stderr))),
              s(:op_asgn,
                s(:send,
                  s(:self), :_assertions), :+,
                s(:send,
                  s(:send,
                    s(:lvar, :stdout), :[],
                    s(:regexp,
                      s(:str, "^assertions=(\\d+)"),
                      s(:regopt)),
                    s(:int, 1)), :to_i)),
              s(:kwbegin,
                s(:rescue,
                  s(:lvasgn, :res,
                    s(:send,
                      s(:const, nil, :Marshal), :load,
                      s(:send,
                        s(:send,
                          s(:lvar, :stdout), :unpack,
                          s(:str, "m")), :[],
                        s(:int, 0)))),
                  s(:resbody, nil,
                    s(:lvasgn, :marshal_error),
                    s(:lvasgn, :ignore_stderr,
                      s(:nil))), nil)),
              s(:if,
                s(:lvar, :res),
                s(:begin,
                  s(:if,
                    s(:lvasgn, :bt,
                      s(:send,
                        s(:lvar, :res), :backtrace)),
                    s(:begin,
                      s(:block,
                        s(:send,
                          s(:lvar, :bt), :each),
                        s(:args,
                          s(:arg, :l)),
                        s(:block,
                          s(:send,
                            s(:lvar, :l), :sub!,
                            s(:regexp,
                              s(:str, "\\A-:(\\d+)"),
                              s(:regopt))),
                          s(:args),
                          s(:dstr,
                            s(:begin,
                              s(:lvar, :file)),
                            s(:str, ":"),
                            s(:begin,
                              s(:send,
                                s(:lvar, :line), :+,
                                s(:send,
                                  s(:nth_ref, 1), :to_i)))))),
                      s(:send,
                        s(:lvar, :bt), :concat,
                        s(:send, nil, :caller))),
                    s(:send,
                      s(:lvar, :res), :set_backtrace,
                      s(:send, nil, :caller))),
                  s(:send, nil, :raise,
                    s(:lvar, :res))), nil),
              s(:if,
                s(:lvar, :ignore_stderr), nil,
                s(:send, nil, :assert,
                  s(:send,
                    s(:lvar, :stderr), :empty?),
                  s(:send,
                    s(:const, nil, :FailDesc), :[],
                    s(:lvar, :status),
                    s(:str, "assert_separately failed with error message"),
                    s(:lvar, :stderr)))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :status), :success?),
                s(:send,
                  s(:const, nil, :FailDesc), :[],
                  s(:lvar, :status),
                  s(:str, "assert_separately failed"),
                  s(:lvar, :stderr))),
              s(:if,
                s(:lvar, :marshal_error),
                s(:send, nil, :raise,
                  s(:lvar, :marshal_error)), nil))),
          s(:def, :assert_warning,
            s(:args,
              s(:arg, :pat),
              s(:optarg, :msg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :stderr,
                s(:block,
                  s(:send,
                    s(:const, nil, :EnvUtil), :verbose_warning),
                  s(:args),
                  s(:yield))),
              s(:lvasgn, :msg,
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:send, nil, :diff,
                    s(:lvar, :pat),
                    s(:lvar, :stderr)))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :pat), :===,
                  s(:lvar, :stderr)),
                s(:lvar, :msg)))),
          s(:def, :assert_warn,
            s(:args,
              s(:restarg, :args)),
            s(:block,
              s(:send, nil, :assert_warning,
                s(:splat,
                  s(:lvar, :args))),
              s(:args),
              s(:begin,
                s(:gvasgn, :$VERBOSE,
                  s(:false)),
                s(:yield)))),
          s(:def, :assert_no_memory_leak,
            s(:args,
              s(:arg, :args),
              s(:arg, :prepare),
              s(:arg, :code),
              s(:optarg, :message,
                s(:nil)),
              s(:kwoptarg, :limit,
                s(:float, 2.0)),
              s(:kwoptarg, :rss,
                s(:false)),
              s(:kwrestarg, :opt)),
            s(:rescue,
              s(:begin,
                s(:send, nil, :require_relative,
                  s(:str, "memory_status")),
                s(:lvasgn, :token,
                  s(:dstr,
                    s(:str, "\e[7;1m"),
                    s(:begin,
                      s(:send,
                        s(:gvar, :$$), :to_s)),
                    s(:str, ":"),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Time), :now), :strftime,
                        s(:str, "%s.%L"))),
                    s(:str, ":"),
                    s(:begin,
                      s(:send,
                        s(:send, nil, :rand,
                          s(:int, 65536)), :to_s,
                        s(:int, 16))),
                    s(:str, ":\e[m"))),
                s(:lvasgn, :token_dump,
                  s(:send,
                    s(:lvar, :token), :dump)),
                s(:lvasgn, :token_re,
                  s(:send,
                    s(:const, nil, :Regexp), :quote,
                    s(:lvar, :token))),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:const, nil, :Array), :===,
                      s(:lvar, :args)),
                    s(:send,
                      s(:const, nil, :Hash), :===,
                      s(:send,
                        s(:lvar, :args), :first))),
                  s(:lvasgn, :envs,
                    s(:send,
                      s(:lvar, :args), :shift)), nil),
                s(:lvasgn, :args,
                  s(:array,
                    s(:str, "--disable=gems"),
                    s(:str, "-r"),
                    s(:send,
                      s(:const, nil, :File), :expand_path,
                      s(:str, "../memory_status"),
                      s(:str, "(string)")),
                    s(:splat,
                      s(:lvar, :args)),
                    s(:str, "-v"),
                    s(:str, "-"))),
                s(:if,
                  s(:defined?,
                    s(:const,
                      s(:const, nil, :Memory), :NO_MEMORY_LEAK_ENVS)),
                  s(:begin,
                    s(:or_asgn,
                      s(:lvasgn, :envs),
                      s(:hash)),
                    s(:lvasgn, :newenvs,
                      s(:block,
                        s(:send,
                          s(:lvar, :envs), :merge,
                          s(:const,
                            s(:const, nil, :Memory), :NO_MEMORY_LEAK_ENVS)),
                        s(:args,
                          s(:arg, :_),
                          s(:arg, :_),
                          s(:arg, :_)),
                        s(:break))),
                    s(:if,
                      s(:lvar, :newenvs),
                      s(:lvasgn, :envs,
                        s(:lvar, :newenvs)), nil)), nil),
                s(:if,
                  s(:lvar, :envs),
                  s(:send,
                    s(:lvar, :args), :unshift,
                    s(:lvar, :envs)), nil),
                s(:lvasgn, :cmd,
                  s(:send,
                    s(:array,
                      s(:dstr,
                        s(:str, "END {STDERR.puts "),
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :token_dump))),
                        s(:str, "\"FINAL=\#{Memory::Status.new}\"}")),
                      s(:lvar, :prepare),
                      s(:dstr,
                        s(:str, "STDERR.puts("),
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :token_dump))),
                        s(:str, "\"START=\#{$initial_status = Memory::Status.new}\")")),
                      s(:str, "$initial_size = $initial_status.size"),
                      s(:lvar, :code),
                      s(:str, "GC.start")), :join,
                    s(:str, "\n"))),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :_),
                    s(:lvasgn, :err),
                    s(:lvasgn, :status)),
                  s(:send,
                    s(:const, nil, :EnvUtil), :invoke_ruby,
                    s(:lvar, :args),
                    s(:lvar, :cmd),
                    s(:true),
                    s(:true),
                    s(:hash,
                      s(:kwsplat,
                        s(:lvar, :opt))))),
                s(:lvasgn, :before,
                  s(:and,
                    s(:send,
                      s(:lvar, :err), :sub!,
                      s(:regexp,
                        s(:str, "^"),
                        s(:begin,
                          s(:lvar, :token_re)),
                        s(:str, "START=(\\{.*\\})\\n"),
                        s(:regopt)),
                      s(:str, "")),
                    s(:send,
                      s(:const,
                        s(:const, nil, :Memory), :Status), :parse,
                      s(:nth_ref, 1)))),
                s(:lvasgn, :after,
                  s(:and,
                    s(:send,
                      s(:lvar, :err), :sub!,
                      s(:regexp,
                        s(:str, "^"),
                        s(:begin,
                          s(:lvar, :token_re)),
                        s(:str, "FINAL=(\\{.*\\})\\n"),
                        s(:regopt)),
                      s(:str, "")),
                    s(:send,
                      s(:const,
                        s(:const, nil, :Memory), :Status), :parse,
                      s(:nth_ref, 1)))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:lvar, :status), :success?),
                  s(:send,
                    s(:const, nil, :FailDesc), :[],
                    s(:lvar, :status),
                    s(:lvar, :message),
                    s(:lvar, :err))),
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:array,
                          s(:sym, :size),
                          s(:begin,
                            s(:and,
                              s(:lvar, :rss),
                              s(:sym, :rss)))), :&,
                        s(:send,
                          s(:lvar, :after), :members))), :each),
                  s(:args,
                    s(:arg, :n)),
                  s(:begin,
                    s(:lvasgn, :b,
                      s(:send,
                        s(:lvar, :before), :[],
                        s(:lvar, :n))),
                    s(:lvasgn, :a,
                      s(:send,
                        s(:lvar, :after), :[],
                        s(:lvar, :n))),
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:lvar, :a), :>,
                          s(:int, 0)),
                        s(:send,
                          s(:lvar, :b), :>,
                          s(:int, 0))), nil,
                      s(:next)),
                    s(:send, nil, :assert_operator,
                      s(:send,
                        s(:lvar, :a), :fdiv,
                        s(:lvar, :b)),
                      s(:sym, :<),
                      s(:lvar, :limit),
                      s(:block,
                        s(:send, nil, :message,
                          s(:lvar, :message)),
                        s(:args),
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :n)),
                          s(:str, ": "),
                          s(:begin,
                            s(:lvar, :b)),
                          s(:str, " => "),
                          s(:begin,
                            s(:lvar, :a)))))))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :LoadError)), nil,
                s(:send, nil, :skip)), nil)),
          s(:def, :assert_is_minus_zero,
            s(:args,
              s(:arg, :f)),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:float, 1.0), :/,
                  s(:lvar, :f)), :==,
                s(:send,
                  s(:const,
                    s(:const, nil, :Float), :INFINITY), :-@)),
              s(:dstr,
                s(:begin,
                  s(:lvar, :f)),
                s(:str, " is not -0.0")))),
          s(:def, :assert_file,
            s(:args),
            s(:const, nil, :AssertFile)),
          s(:def, :assert_pattern_list,
            s(:args,
              s(:arg, :pattern_list),
              s(:arg, :actual),
              s(:optarg, :message,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :rest,
                s(:lvar, :actual)),
              s(:lvasgn, :anchored,
                s(:true)),
              s(:block,
                s(:send,
                  s(:lvar, :pattern_list), :each_with_index),
                s(:args,
                  s(:arg, :pattern),
                  s(:arg, :i)),
                s(:if,
                  s(:send,
                    s(:lvar, :pattern), :==,
                    s(:sym, :*)),
                  s(:lvasgn, :anchored,
                    s(:false)),
                  s(:begin,
                    s(:if,
                      s(:lvar, :anchored),
                      s(:lvasgn, :match,
                        s(:send,
                          s(:regexp,
                            s(:str, "\\A"),
                            s(:begin,
                              s(:lvar, :pattern)),
                            s(:regopt)), :match,
                          s(:lvar, :rest))),
                      s(:lvasgn, :match,
                        s(:send,
                          s(:lvar, :pattern), :match,
                          s(:lvar, :rest)))),
                    s(:if,
                      s(:lvar, :match), nil,
                      s(:begin,
                        s(:lvasgn, :msg,
                          s(:block,
                            s(:send, nil, :message,
                              s(:lvar, :msg)),
                            s(:args),
                            s(:begin,
                              s(:lvasgn, :expect_msg,
                                s(:dstr,
                                  s(:str, "Expected "),
                                  s(:begin,
                                    s(:send, nil, :mu_pp,
                                      s(:lvar, :pattern))),
                                  s(:str, "\n"))),
                              s(:if,
                                s(:match_with_lvasgn,
                                  s(:regexp,
                                    s(:str, "\\n[^\\n]"),
                                    s(:regopt)),
                                  s(:lvar, :rest)),
                                s(:begin,
                                  s(:lvasgn, :actual_mesg,
                                    s(:str, "to match\n")),
                                  s(:block,
                                    s(:send,
                                      s(:lvar, :rest), :scan,
                                      s(:regexp,
                                        s(:str, ".*\\n+"),
                                        s(:regopt))),
                                    s(:args),
                                    s(:send,
                                      s(:send,
                                        s(:send,
                                          s(:lvar, :actual_mesg), :<<,
                                          s(:str, "  ")), :<<,
                                        s(:send,
                                          s(:back_ref, :$&), :inspect)), :<<,
                                      s(:str, "+\n"))),
                                  s(:send,
                                    s(:lvar, :actual_mesg), :sub!,
                                    s(:regexp,
                                      s(:str, "\\+\\n\\z"),
                                      s(:regopt)),
                                    s(:str, ""))),
                                s(:lvasgn, :actual_mesg,
                                  s(:dstr,
                                    s(:str, "to match "),
                                    s(:begin,
                                      s(:send, nil, :mu_pp,
                                        s(:lvar, :rest)))))),
                              s(:send,
                                s(:lvar, :actual_mesg), :<<,
                                s(:dstr,
                                  s(:str, "\nafter "),
                                  s(:begin,
                                    s(:lvar, :i)),
                                  s(:str, " patterns with "),
                                  s(:begin,
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :actual), :length), :-,
                                      s(:send,
                                        s(:lvar, :rest), :length))),
                                  s(:str, " characters"))),
                              s(:send,
                                s(:lvar, :expect_msg), :+,
                                s(:lvar, :actual_mesg))))),
                        s(:send, nil, :assert,
                          s(:false),
                          s(:lvar, :msg)))),
                    s(:lvasgn, :rest,
                      s(:send,
                        s(:lvar, :match), :post_match)),
                    s(:lvasgn, :anchored,
                      s(:true))))),
              s(:if,
                s(:lvar, :anchored),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:lvar, :rest)), nil))),
          s(:def, :assert_join_threads,
            s(:args,
              s(:arg, :threads),
              s(:optarg, :message,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :errs,
                s(:array)),
              s(:lvasgn, :values,
                s(:array)),
              s(:while,
                s(:lvasgn, :th,
                  s(:send,
                    s(:lvar, :threads), :shift)),
                s(:kwbegin,
                  s(:rescue,
                    s(:send,
                      s(:lvar, :values), :<<,
                      s(:send,
                        s(:lvar, :th), :value)),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :Exception)), nil,
                      s(:send,
                        s(:lvar, :errs), :<<,
                        s(:array,
                          s(:lvar, :th),
                          s(:gvar, :$!)))), nil))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :errs), :empty?), :!),
                s(:begin,
                  s(:lvasgn, :msg,
                    s(:send,
                      s(:dstr,
                        s(:str, "exceptions on "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :errs), :length)),
                        s(:str, " threads:\n")), :+,
                      s(:send,
                        s(:block,
                          s(:send,
                            s(:lvar, :errs), :map),
                          s(:args,
                            s(:arg, :t),
                            s(:arg, :err)),
                          s(:send,
                            s(:dstr,
                              s(:begin,
                                s(:send,
                                  s(:lvar, :t), :inspect)),
                              s(:str, ":\n")), :+,
                            s(:send,
                              s(:block,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :err), :backtrace), :map), :with_index),
                                s(:args,
                                  s(:arg, :line),
                                  s(:arg, :i)),
                                s(:if,
                                  s(:send,
                                    s(:lvar, :i), :==,
                                    s(:int, 0)),
                                  s(:dstr,
                                    s(:begin,
                                      s(:lvar, :line)),
                                    s(:str, ": "),
                                    s(:begin,
                                      s(:send,
                                        s(:lvar, :err), :message)),
                                    s(:str, " ("),
                                    s(:begin,
                                      s(:send,
                                        s(:lvar, :err), :class)),
                                    s(:str, ")")),
                                  s(:dstr,
                                    s(:str, "\tfrom "),
                                    s(:begin,
                                      s(:lvar, :line))))), :join,
                              s(:str, "\n")))), :join,
                        s(:str, "\n---\n")))),
                  s(:if,
                    s(:lvar, :message),
                    s(:lvasgn, :msg,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :message)),
                        s(:str, "\n"),
                        s(:begin,
                          s(:lvar, :msg)))), nil),
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :MiniTest), :Assertion),
                    s(:lvar, :msg))), nil),
              s(:lvar, :values))),
          s(:sclass,
            s(:begin,
              s(:casgn, nil, :AssertFile,
                s(:send,
                  s(:send,
                    s(:const, nil, :Struct), :new,
                    s(:sym, :failure_message)), :new))),
            s(:begin,
              s(:send, nil, :include,
                s(:const, nil, :Assertions)),
              s(:def, :assert_file_predicate,
                s(:args,
                  s(:arg, :predicate),
                  s(:restarg, :args)),
                s(:begin,
                  s(:if,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "\\Anot_"),
                        s(:regopt)),
                      s(:lvar, :predicate)),
                    s(:begin,
                      s(:lvasgn, :predicate,
                        s(:back_ref, :$')),
                      s(:lvasgn, :neg,
                        s(:str, " not"))), nil),
                  s(:lvasgn, :result,
                    s(:send,
                      s(:const, nil, :File), :__send__,
                      s(:lvar, :predicate),
                      s(:splat,
                        s(:lvar, :args)))),
                  s(:if,
                    s(:lvar, :neg),
                    s(:lvasgn, :result,
                      s(:send,
                        s(:lvar, :result), :!)), nil),
                  s(:lvasgn, :mesg,
                    s(:send,
                      s(:str, "Expected file "), :<<,
                      s(:send,
                        s(:send,
                          s(:lvar, :args), :shift), :inspect))),
                  s(:send,
                    s(:lvar, :mesg), :<<,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :neg)),
                      s(:str, " to be "),
                      s(:begin,
                        s(:lvar, :predicate)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :args), :empty?), nil,
                    s(:send,
                      s(:lvar, :mesg), :<<,
                      s(:send,
                        s(:send, nil, :mu_pp,
                          s(:lvar, :args)), :sub,
                        s(:regexp,
                          s(:str, "\\A\\[(.*)\\]\\z"),
                          s(:regopt, :m)),
                        s(:str, "(\\1)")))),
                  s(:if,
                    s(:send, nil, :failure_message),
                    s(:send,
                      s(:lvar, :mesg), :<<,
                      s(:dstr,
                        s(:str, " "),
                        s(:begin,
                          s(:send, nil, :failure_message)))), nil),
                  s(:send, nil, :assert,
                    s(:lvar, :result),
                    s(:lvar, :mesg)))),
              s(:alias,
                s(:sym, :method_missing),
                s(:sym, :assert_file_predicate)),
              s(:def, :for,
                s(:args,
                  s(:arg, :message)),
                s(:block,
                  s(:send,
                    s(:send, nil, :clone), :tap),
                  s(:args,
                    s(:arg, :a)),
                  s(:send,
                    s(:lvar, :a), :failure_message=,
                    s(:lvar, :message)))))),
          s(:class,
            s(:const, nil, :AllFailures), nil,
            s(:begin,
              s(:send, nil, :attr_reader,
                s(:sym, :failures)),
              s(:def, :initialize,
                s(:args),
                s(:begin,
                  s(:ivasgn, :@count,
                    s(:int, 0)),
                  s(:ivasgn, :@failures,
                    s(:hash)))),
              s(:def, :for,
                s(:args,
                  s(:arg, :key)),
                s(:rescue,
                  s(:begin,
                    s(:op_asgn,
                      s(:ivasgn, :@count), :+,
                      s(:int, 1)),
                    s(:yield)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :Exception)),
                    s(:lvasgn, :e),
                    s(:send,
                      s(:ivar, :@failures), :[]=,
                      s(:lvar, :key),
                      s(:array,
                        s(:ivar, :@count),
                        s(:lvar, :e)))), nil)),
              s(:def, :message,
                s(:args),
                s(:begin,
                  s(:lvasgn, :i,
                    s(:int, 0)),
                  s(:lvasgn, :total,
                    s(:send,
                      s(:ivar, :@count), :to_s)),
                  s(:lvasgn, :fmt,
                    s(:dstr,
                      s(:str, "%"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :total), :size)),
                      s(:str, "d"))),
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:ivar, :@failures), :map),
                      s(:args,
                        s(:arg, :k),
                        s(:mlhs,
                          s(:arg, :n),
                          s(:arg, :v))),
                      s(:dstr,
                        s(:str, "\n"),
                        s(:begin,
                          s(:op_asgn,
                            s(:lvasgn, :i), :+,
                            s(:int, 1))),
                        s(:str, ". ["),
                        s(:begin,
                          s(:send,
                            s(:lvar, :fmt), :%,
                            s(:lvar, :n))),
                        s(:str, "/"),
                        s(:begin,
                          s(:lvar, :total)),
                        s(:str, "] Assertion for "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :k), :inspect)),
                        s(:str, "\n"),
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:lvar, :v), :message), :gsub,
                            s(:regexp,
                              s(:str, "^"),
                              s(:regopt)),
                            s(:str, "   | "))))), :join,
                    s(:str, "\n")))),
              s(:def, :pass?,
                s(:args),
                s(:send,
                  s(:ivar, :@failures), :empty?)))),
          s(:def, :all_assertions,
            s(:args,
              s(:optarg, :msg,
                s(:nil))),
            s(:ensure,
              s(:begin,
                s(:lvasgn, :all,
                  s(:send,
                    s(:const, nil, :AllFailures), :new)),
                s(:yield,
                  s(:lvar, :all))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :all), :pass?),
                s(:block,
                  s(:send, nil, :message,
                    s(:lvar, :msg)),
                  s(:args),
                  s(:send,
                    s(:lvar, :all), :message))))),
          s(:def, :build_message,
            s(:args,
              s(:arg, :head),
              s(:optarg, :template,
                s(:nil)),
              s(:restarg, :arguments)),
            s(:begin,
              s(:and_asgn,
                s(:lvasgn, :template),
                s(:send,
                  s(:lvar, :template), :chomp)),
              s(:block,
                s(:send,
                  s(:lvar, :template), :gsub,
                  s(:regexp,
                    s(:str, "\\G((?:[^\\\\]|\\\\.)*?)(\\\\)?\\?"),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:nth_ref, 1), :+,
                  s(:begin,
                    s(:if,
                      s(:nth_ref, 2),
                      s(:str, "?"),
                      s(:send, nil, :mu_pp,
                        s(:send,
                          s(:lvar, :arguments), :shift)))))))),
          s(:def, :message,
            s(:args,
              s(:optarg, :msg,
                s(:nil)),
              s(:restarg, :args),
              s(:blockarg, :default)),
            s(:if,
              s(:send,
                s(:const, nil, :Proc), :===,
                s(:lvar, :msg)),
              s(:block,
                s(:super,
                  s(:nil),
                  s(:splat,
                    s(:lvar, :args))),
                s(:args),
                s(:begin,
                  s(:lvasgn, :ary,
                    s(:send,
                      s(:send,
                        s(:array,
                          s(:send,
                            s(:lvar, :msg), :call),
                          s(:begin,
                            s(:if,
                              s(:lvar, :default),
                              s(:send,
                                s(:lvar, :default), :call), nil))), :compact), :reject,
                      s(:block_pass,
                        s(:sym, :empty?)))),
                  s(:if,
                    s(:send,
                      s(:int, 1), :<,
                      s(:send,
                        s(:lvar, :ary), :length)),
                    s(:send,
                      s(:lvar, :ary), :[]=,
                      s(:erange,
                        s(:int, 0),
                        s(:int, -1)),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :ary), :[],
                            s(:erange,
                              s(:int, 0),
                              s(:int, -1))), :map),
                        s(:args,
                          s(:arg, :str)),
                        s(:send,
                          s(:lvar, :str), :sub,
                          s(:regexp,
                            s(:str, "(?<!\\.)\\z"),
                            s(:regopt)),
                          s(:str, ".")))), nil),
                  s(:kwbegin,
                    s(:rescue,
                      s(:send,
                        s(:lvar, :ary), :join,
                        s(:str, "\n")),
                      s(:resbody,
                        s(:array,
                          s(:const,
                            s(:const, nil, :Encoding), :CompatibilityError)), nil,
                        s(:send,
                          s(:send,
                            s(:lvar, :ary), :map,
                            s(:block_pass,
                              s(:sym, :b))), :join,
                          s(:str, "\n"))), nil)))),
              s(:zsuper))))))))
