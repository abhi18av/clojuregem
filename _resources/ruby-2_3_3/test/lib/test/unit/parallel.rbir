s(:begin,
  s(:send,
    s(:gvar, :$LOAD_PATH), :unshift,
    s(:dstr,
      s(:begin,
        s(:send,
          s(:const, nil, :File), :dirname,
          s(:str, "(string)"))),
      s(:str, "/../.."))),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:module,
    s(:const, nil, :Test),
    s(:module,
      s(:const, nil, :Unit),
      s(:class,
        s(:const, nil, :Worker),
        s(:const, nil, :Runner),
        s(:begin,
          s(:sclass,
            s(:self),
            s(:undef,
              s(:sym, :autorun))),
          s(:alias,
            s(:sym, :orig_run_suite),
            s(:sym, :mini_run_suite)),
          s(:undef,
            s(:sym, :_run_suite)),
          s(:undef,
            s(:sym, :_run_suites)),
          s(:undef,
            s(:sym, :run)),
          s(:def, :increment_io,
            s(:args,
              s(:arg, :orig)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:splat,
                    s(:lvasgn, :rest)),
                  s(:lvasgn, :io)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:int, 32), :times), :inject,
                    s(:array,
                      s(:send,
                        s(:lvar, :orig), :dup))),
                  s(:args,
                    s(:arg, :ios)),
                  s(:send,
                    s(:lvar, :ios), :<<,
                    s(:send,
                      s(:send,
                        s(:lvar, :ios), :last), :dup)))),
              s(:send,
                s(:lvar, :rest), :each,
                s(:block_pass,
                  s(:sym, :close))),
              s(:lvar, :io))),
          s(:def, :_run_suites,
            s(:args,
              s(:arg, :suites),
              s(:arg, :type)),
            s(:block,
              s(:send,
                s(:lvar, :suites), :map),
              s(:args,
                s(:arg, :suite)),
              s(:send, nil, :_run_suite,
                s(:lvar, :suite),
                s(:lvar, :type)))),
          s(:def, :_run_suite,
            s(:args,
              s(:arg, :suite),
              s(:arg, :type)),
            s(:ensure,
              s(:begin,
                s(:ivasgn, :@partial_report,
                  s(:array)),
                s(:lvasgn, :orig_testout,
                  s(:send,
                    s(:const,
                      s(:const, nil, :MiniTest), :Unit), :output)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :i),
                    s(:lvasgn, :o)),
                  s(:send,
                    s(:const, nil, :IO), :pipe)),
                s(:send,
                  s(:const,
                    s(:const, nil, :MiniTest), :Unit), :output=,
                  s(:lvar, :o)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :orig_stdin),
                    s(:lvasgn, :orig_stdout)),
                  s(:array,
                    s(:gvar, :$stdin),
                    s(:gvar, :$stdout))),
                s(:lvasgn, :th,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:kwbegin,
                      s(:rescue,
                        s(:while,
                          s(:lvasgn, :buf,
                            s(:begin,
                              s(:if,
                                s(:send,
                                  s(:self), :verbose),
                                s(:send,
                                  s(:lvar, :i), :gets),
                                s(:send,
                                  s(:lvar, :i), :readpartial,
                                  s(:int, 1024))))),
                          s(:send, nil, :_report,
                            s(:str, "p"),
                            s(:lvar, :buf))),
                        s(:resbody,
                          s(:array,
                            s(:const, nil, :IOError)), nil, nil),
                        s(:resbody,
                          s(:array,
                            s(:const,
                              s(:const, nil, :Errno), :EPIPE)), nil, nil), nil)))),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :e),
                    s(:lvasgn, :f),
                    s(:lvasgn, :s)),
                  s(:array,
                    s(:ivar, :@errors),
                    s(:ivar, :@failures),
                    s(:ivar, :@skips))),
                s(:kwbegin,
                  s(:rescue,
                    s(:lvasgn, :result,
                      s(:send, nil, :orig_run_suite,
                        s(:lvar, :suite),
                        s(:lvar, :type))),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :Interrupt)), nil,
                      s(:begin,
                        s(:ivasgn, :@need_exit,
                          s(:true)),
                        s(:lvasgn, :result,
                          s(:array,
                            s(:nil),
                            s(:nil))))), nil)),
                s(:send,
                  s(:const,
                    s(:const, nil, :MiniTest), :Unit), :output=,
                  s(:lvar, :orig_testout)),
                s(:gvasgn, :$stdin,
                  s(:lvar, :orig_stdin)),
                s(:gvasgn, :$stdout,
                  s(:lvar, :orig_stdout)),
                s(:send,
                  s(:lvar, :o), :close),
                s(:kwbegin,
                  s(:rescue,
                    s(:send,
                      s(:lvar, :th), :join),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :IOError)), nil,
                      s(:if,
                        s(:send,
                          s(:array,
                            s(:str, "stream closed"),
                            s(:str, "closed stream")), :include?,
                          s(:send,
                            s(:gvar, :$!), :message)), nil,
                        s(:send, nil, :raise))), nil)),
                s(:send,
                  s(:lvar, :i), :close),
                s(:send,
                  s(:lvar, :result), :<<,
                  s(:ivar, :@partial_report)),
                s(:ivasgn, :@partial_report,
                  s(:nil)),
                s(:send,
                  s(:lvar, :result), :<<,
                  s(:array,
                    s(:send,
                      s(:ivar, :@errors), :-,
                      s(:lvar, :e)),
                    s(:send,
                      s(:ivar, :@failures), :-,
                      s(:lvar, :f)),
                    s(:send,
                      s(:ivar, :@skips), :-,
                      s(:lvar, :s)))),
                s(:send,
                  s(:lvar, :result), :<<,
                  s(:begin,
                    s(:send,
                      s(:gvar, :$:), :-,
                      s(:ivar, :@old_loadpath)))),
                s(:send,
                  s(:lvar, :result), :<<,
                  s(:send,
                    s(:lvar, :suite), :name)),
                s(:kwbegin,
                  s(:rescue,
                    s(:send, nil, :_report,
                      s(:str, "done"),
                      s(:send,
                        s(:const, nil, :Marshal), :dump,
                        s(:lvar, :result))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Errno), :EPIPE)), nil, nil), nil)),
                s(:return,
                  s(:lvar, :result))),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :MiniTest), :Unit), :output=,
                  s(:lvar, :orig_stdout)),
                s(:if,
                  s(:lvar, :orig_stdin),
                  s(:gvasgn, :$stdin,
                    s(:lvar, :orig_stdin)), nil),
                s(:if,
                  s(:lvar, :orig_stdout),
                  s(:gvasgn, :$stdout,
                    s(:lvar, :orig_stdout)), nil),
                s(:if,
                  s(:and,
                    s(:lvar, :o),
                    s(:send,
                      s(:send,
                        s(:lvar, :o), :closed?), :!)),
                  s(:send,
                    s(:lvar, :o), :close), nil),
                s(:if,
                  s(:and,
                    s(:lvar, :i),
                    s(:send,
                      s(:send,
                        s(:lvar, :i), :closed?), :!)),
                  s(:send,
                    s(:lvar, :i), :close), nil)))),
          s(:def, :run,
            s(:args,
              s(:optarg, :args,
                s(:array))),
            s(:begin,
              s(:send, nil, :process_args,
                s(:lvar, :args)),
              s(:cvasgn, :@@stop_auto_run,
                s(:true)),
              s(:ivasgn, :@opts,
                s(:send,
                  s(:ivar, :@options), :dup)),
              s(:ivasgn, :@need_exit,
                s(:false)),
              s(:ivasgn, :@old_loadpath,
                s(:array)),
              s(:kwbegin,
                s(:ensure,
                  s(:rescue,
                    s(:begin,
                      s(:kwbegin,
                        s(:rescue,
                          s(:begin,
                            s(:ivasgn, :@stdout,
                              s(:send, nil, :increment_io,
                                s(:const, nil, :STDOUT))),
                            s(:ivasgn, :@stdin,
                              s(:send, nil, :increment_io,
                                s(:const, nil, :STDIN)))),
                          s(:resbody, nil, nil,
                            s(:send, nil, :exit,
                              s(:int, 2))), nil)),
                      s(:if,
                        s(:and,
                          s(:ivar, :@stdout),
                          s(:ivar, :@stdin)), nil,
                        s(:send, nil, :exit,
                          s(:int, 2))),
                      s(:send,
                        s(:ivar, :@stdout), :sync=,
                        s(:true)),
                      s(:send, nil, :_report,
                        s(:str, "ready!")),
                      s(:while,
                        s(:lvasgn, :buf,
                          s(:send,
                            s(:ivar, :@stdin), :gets)),
                        s(:case,
                          s(:send,
                            s(:lvar, :buf), :chomp),
                          s(:when,
                            s(:regexp,
                              s(:str, "^loadpath (.+?)$"),
                              s(:regopt)),
                            s(:begin,
                              s(:ivasgn, :@old_loadpath,
                                s(:send,
                                  s(:gvar, :$:), :dup)),
                              s(:send,
                                s(:send,
                                  s(:gvar, :$:), :push,
                                  s(:splat,
                                    s(:send,
                                      s(:const, nil, :Marshal), :load,
                                      s(:send,
                                        s(:send,
                                          s(:send,
                                            s(:nth_ref, 1), :unpack,
                                            s(:str, "m")), :[],
                                          s(:int, 0)), :force_encoding,
                                        s(:str, "ASCII-8BIT"))))), :uniq!))),
                          s(:when,
                            s(:regexp,
                              s(:str, "^run (.+?) (.+?)$"),
                              s(:regopt)),
                            s(:begin,
                              s(:send, nil, :_report,
                                s(:str, "okay")),
                              s(:ivasgn, :@options,
                                s(:send,
                                  s(:ivar, :@opts), :dup)),
                              s(:lvasgn, :suites,
                                s(:send,
                                  s(:const,
                                    s(:const,
                                      s(:const, nil, :MiniTest), :Unit), :TestCase), :test_suites)),
                              s(:kwbegin,
                                s(:rescue,
                                  s(:send, nil, :require,
                                    s(:send,
                                      s(:const, nil, :File), :realpath,
                                      s(:nth_ref, 1))),
                                  s(:resbody,
                                    s(:array,
                                      s(:const, nil, :LoadError)), nil,
                                    s(:begin,
                                      s(:send, nil, :_report,
                                        s(:str, "after"),
                                        s(:send,
                                          s(:const, nil, :Marshal), :dump,
                                          s(:array,
                                            s(:nth_ref, 1),
                                            s(:send,
                                              s(:const, nil, :ProxyError), :new,
                                              s(:gvar, :$!))))),
                                      s(:send, nil, :_report,
                                        s(:str, "ready")),
                                      s(:next))), nil)),
                              s(:send, nil, :_run_suites,
                                s(:send,
                                  s(:send,
                                    s(:const,
                                      s(:const,
                                        s(:const, nil, :MiniTest), :Unit), :TestCase), :test_suites), :-,
                                  s(:lvar, :suites)),
                                s(:send,
                                  s(:nth_ref, 2), :to_sym)),
                              s(:if,
                                s(:ivar, :@need_exit),
                                s(:begin,
                                  s(:kwbegin,
                                    s(:rescue,
                                      s(:send, nil, :_report,
                                        s(:str, "bye")),
                                      s(:resbody,
                                        s(:array,
                                          s(:const,
                                            s(:const, nil, :Errno), :EPIPE)), nil, nil), nil)),
                                  s(:send, nil, :exit)),
                                s(:send, nil, :_report,
                                  s(:str, "ready"))))),
                          s(:when,
                            s(:regexp,
                              s(:str, "^quit$"),
                              s(:regopt)),
                            s(:begin,
                              s(:kwbegin,
                                s(:rescue,
                                  s(:send, nil, :_report,
                                    s(:str, "bye")),
                                  s(:resbody,
                                    s(:array,
                                      s(:const,
                                        s(:const, nil, :Errno), :EPIPE)), nil, nil), nil)),
                              s(:send, nil, :exit))), nil))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Errno), :EPIPE)), nil, nil),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :Exception)),
                      s(:lvasgn, :e),
                      s(:begin,
                        s(:kwbegin,
                          s(:rescue,
                            s(:begin,
                              s(:lvasgn, :trace,
                                s(:or,
                                  s(:send,
                                    s(:lvar, :e), :backtrace),
                                  s(:array,
                                    s(:str, "unknown method")))),
                              s(:lvasgn, :err,
                                s(:send,
                                  s(:array,
                                    s(:dstr,
                                      s(:begin,
                                        s(:send,
                                          s(:lvar, :trace), :shift)),
                                      s(:str, ": "),
                                      s(:begin,
                                        s(:send,
                                          s(:lvar, :e), :message)),
                                      s(:str, " ("),
                                      s(:begin,
                                        s(:send,
                                          s(:lvar, :e), :class)),
                                      s(:str, ")"))), :+,
                                  s(:block,
                                    s(:send,
                                      s(:lvar, :trace), :map),
                                    s(:args,
                                      s(:arg, :t)),
                                    s(:send,
                                      s(:lvar, :t), :prepend,
                                      s(:str, "\t"))))),
                              s(:send, nil, :_report,
                                s(:str, "bye"),
                                s(:send,
                                  s(:const, nil, :Marshal), :dump,
                                  s(:send,
                                    s(:lvar, :err), :join,
                                    s(:str, "\n"))))),
                            s(:resbody,
                              s(:array,
                                s(:const,
                                  s(:const, nil, :Errno), :EPIPE)), nil, nil), nil)),
                        s(:send, nil, :exit))), nil),
                  s(:begin,
                    s(:if,
                      s(:ivar, :@stdin),
                      s(:send,
                        s(:ivar, :@stdin), :close), nil),
                    s(:if,
                      s(:ivar, :@stdout),
                      s(:send,
                        s(:ivar, :@stdout), :close), nil)))))),
          s(:def, :_report,
            s(:args,
              s(:arg, :res),
              s(:restarg, :args)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :args), :empty?), nil,
                s(:lvasgn, :res,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :res)),
                    s(:str, " "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :args), :pack,
                        s(:str, "m0")))))),
              s(:send,
                s(:ivar, :@stdout), :puts,
                s(:lvar, :res)))),
          s(:def, :puke,
            s(:args,
              s(:arg, :klass),
              s(:arg, :meth),
              s(:arg, :e)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :e), :is_a?,
                  s(:const,
                    s(:const, nil, :MiniTest), :Skip)),
                s(:begin,
                  s(:lvasgn, :new_e,
                    s(:send,
                      s(:const,
                        s(:const, nil, :MiniTest), :Skip), :new,
                      s(:send,
                        s(:lvar, :e), :message))),
                  s(:send,
                    s(:lvar, :new_e), :set_backtrace,
                    s(:send,
                      s(:lvar, :e), :backtrace)),
                  s(:lvasgn, :e,
                    s(:lvar, :new_e))), nil),
              s(:send,
                s(:ivar, :@partial_report), :<<,
                s(:array,
                  s(:send,
                    s(:lvar, :klass), :name),
                  s(:lvar, :meth),
                  s(:if,
                    s(:send,
                      s(:lvar, :e), :is_a?,
                      s(:const,
                        s(:const, nil, :MiniTest), :Assertion)),
                    s(:lvar, :e),
                    s(:send,
                      s(:const, nil, :ProxyError), :new,
                      s(:lvar, :e))))),
              s(:zsuper))))))),
  s(:if,
    s(:send,
      s(:gvar, :$0), :==,
      s(:str, "(string)")),
    s(:begin,
      s(:module,
        s(:const, nil, :Test),
        s(:module,
          s(:const, nil, :Unit),
          s(:class,
            s(:const, nil, :TestCase),
            s(:const,
              s(:const,
                s(:const, nil, :MiniTest), :Unit), :TestCase),
            s(:begin,
              s(:undef,
                s(:sym, :on_parallel_worker?)),
              s(:def, :on_parallel_worker?,
                s(:args),
                s(:true)))))),
      s(:send, nil, :require,
        s(:str, "rubygems")),
      s(:module,
        s(:const, nil, :Gem), nil),
      s(:class,
        s(:const,
          s(:const, nil, :Gem), :TestCase),
        s(:const,
          s(:const,
            s(:const, nil, :MiniTest), :Unit), :TestCase),
        s(:cvasgn, :@@project_dir,
          s(:send,
            s(:const, nil, :File), :expand_path,
            s(:str, "../../../../.."),
            s(:str, "(string)")))),
      s(:send,
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :Test), :Unit), :Worker), :new), :run,
        s(:const, nil, :ARGV))), nil))
