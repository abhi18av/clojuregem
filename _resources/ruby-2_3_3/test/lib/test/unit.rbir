s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:if,
        s(:defined?,
          s(:const, nil, :Gem)),
        s(:send, nil, :gem,
          s(:str, "minitest"),
          s(:str, "< 5.0.0")), nil),
      s(:resbody,
        s(:array,
          s(:const,
            s(:const, nil, :Gem), :LoadError)), nil, nil), nil)),
  s(:send, nil, :require,
    s(:str, "minitest/unit")),
  s(:send, nil, :require,
    s(:str, "test/unit/assertions")),
  s(:send, nil, :require_relative,
    s(:str, "../envutil")),
  s(:send, nil, :require,
    s(:str, "test/unit/testcase")),
  s(:send, nil, :require,
    s(:str, "optparse")),
  s(:module,
    s(:const, nil, :Test),
    s(:module,
      s(:const, nil, :Unit),
      s(:begin,
        s(:casgn, nil, :TEST_UNIT_IMPLEMENTATION,
          s(:str, "test/unit compatibility layer using minitest")),
        s(:module,
          s(:const, nil, :RunCount),
          s(:begin,
            s(:cvasgn, :@@run_count,
              s(:int, 0)),
            s(:defs,
              s(:self), :have_run?,
              s(:args),
              s(:send,
                s(:cvar, :@@run_count), :nonzero?)),
            s(:def, :run,
              s(:args,
                s(:restarg)),
              s(:begin,
                s(:op_asgn,
                  s(:cvasgn, :@@run_count), :+,
                  s(:int, 1)),
                s(:zsuper))),
            s(:def, :run_once,
              s(:args),
              s(:begin,
                s(:if,
                  s(:send, nil, :have_run?),
                  s(:return), nil),
                s(:if,
                  s(:gvar, :$!),
                  s(:return), nil),
                s(:yield))),
            s(:send, nil, :module_function,
              s(:sym, :run_once)))),
        s(:module,
          s(:const, nil, :Options),
          s(:begin,
            s(:def, :initialize,
              s(:args,
                s(:restarg),
                s(:blockarg, :block)),
              s(:begin,
                s(:ivasgn, :@init_hook,
                  s(:lvar, :block)),
                s(:ivasgn, :@options,
                  s(:nil)),
                s(:super,
                  s(:block_pass,
                    s(:nil))))),
            s(:def, :option_parser,
              s(:args),
              s(:or_asgn,
                s(:ivasgn, :@option_parser),
                s(:send,
                  s(:const, nil, :OptionParser), :new))),
            s(:def, :process_args,
              s(:args,
                s(:optarg, :args,
                  s(:array))),
              s(:begin,
                s(:if,
                  s(:ivar, :@options),
                  s(:return,
                    s(:ivar, :@options)), nil),
                s(:lvasgn, :orig_args,
                  s(:send,
                    s(:lvar, :args), :dup)),
                s(:lvasgn, :options,
                  s(:hash)),
                s(:lvasgn, :opts,
                  s(:send, nil, :option_parser)),
                s(:send, nil, :setup_options,
                  s(:lvar, :opts),
                  s(:lvar, :options)),
                s(:send,
                  s(:lvar, :opts), :parse!,
                  s(:lvar, :args)),
                s(:op_asgn,
                  s(:lvasgn, :orig_args), :-,
                  s(:lvar, :args)),
                s(:if,
                  s(:ivar, :@init_hook),
                  s(:lvasgn, :args,
                    s(:send,
                      s(:ivar, :@init_hook), :call,
                      s(:lvar, :args),
                      s(:lvar, :options))), nil),
                s(:send, nil, :non_options,
                  s(:lvar, :args),
                  s(:lvar, :options)),
                s(:ivasgn, :@run_options,
                  s(:lvar, :orig_args)),
                s(:ivasgn, :@help,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :orig_args), :map),
                      s(:args,
                        s(:arg, :s)),
                      s(:if,
                        s(:send,
                          s(:lvar, :s), :=~,
                          s(:regexp,
                            s(:str, "[\\s|&<>$()]"),
                            s(:regopt))),
                        s(:send,
                          s(:lvar, :s), :inspect),
                        s(:lvar, :s))), :join,
                    s(:str, " "))),
                s(:ivasgn, :@options,
                  s(:lvar, :options)))),
            s(:send, nil, :private),
            s(:def, :setup_options,
              s(:args,
                s(:arg, :opts),
                s(:arg, :options)),
              s(:begin,
                s(:send,
                  s(:lvar, :opts), :separator,
                  s(:str, "minitest options:")),
                s(:send,
                  s(:lvar, :opts), :version=,
                  s(:const,
                    s(:const,
                      s(:const, nil, :MiniTest), :Unit), :VERSION)),
                s(:block,
                  s(:send,
                    s(:lvar, :opts), :on,
                    s(:str, "-h"),
                    s(:str, "--help"),
                    s(:str, "Display this help.")),
                  s(:args),
                  s(:begin,
                    s(:send, nil, :puts,
                      s(:lvar, :opts)),
                    s(:send, nil, :exit))),
                s(:block,
                  s(:send,
                    s(:lvar, :opts), :on,
                    s(:str, "-s"),
                    s(:str, "--seed SEED"),
                    s(:const, nil, :Integer),
                    s(:str, "Sets random seed")),
                  s(:args,
                    s(:arg, :m)),
                  s(:send,
                    s(:lvar, :options), :[]=,
                    s(:sym, :seed),
                    s(:lvar, :m))),
                s(:block,
                  s(:send,
                    s(:lvar, :opts), :on,
                    s(:str, "-v"),
                    s(:str, "--verbose"),
                    s(:str, "Verbose. Show progress processing files.")),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :verbose),
                      s(:true)),
                    s(:send,
                      s(:self), :verbose=,
                      s(:send,
                        s(:lvar, :options), :[],
                        s(:sym, :verbose))))),
                s(:block,
                  s(:send,
                    s(:lvar, :opts), :on,
                    s(:str, "-n"),
                    s(:str, "--name PATTERN"),
                    s(:str, "Filter test method names on pattern: /REGEXP/ or STRING")),
                  s(:args,
                    s(:arg, :a)),
                  s(:send,
                    s(:begin,
                      s(:or_asgn,
                        s(:send,
                          s(:lvar, :options), :[],
                          s(:sym, :filter)),
                        s(:array))), :<<,
                    s(:lvar, :a))),
                s(:block,
                  s(:send,
                    s(:lvar, :opts), :on,
                    s(:str, "--test-order=random|alpha|sorted"),
                    s(:array,
                      s(:sym, :random),
                      s(:sym, :alpha),
                      s(:sym, :sorted))),
                  s(:args,
                    s(:arg, :a)),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :MiniTest), :Unit), :TestCase), :test_order=,
                    s(:lvar, :a))))),
            s(:def, :non_options,
              s(:args,
                s(:arg, :files),
                s(:arg, :options)),
              s(:begin,
                s(:lvasgn, :filter,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :filter))),
                s(:if,
                  s(:lvar, :filter),
                  s(:begin,
                    s(:lvasgn, :pos_pat,
                      s(:regexp,
                        s(:str, "\\A/(.*)/\\z"),
                        s(:regopt))),
                    s(:lvasgn, :neg_pat,
                      s(:regexp,
                        s(:str, "\\A!/(.*)/\\z"),
                        s(:regopt))),
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :negative),
                        s(:lvasgn, :positive)),
                      s(:block,
                        s(:send,
                          s(:lvar, :filter), :partition),
                        s(:args,
                          s(:arg, :s)),
                        s(:send,
                          s(:lvar, :neg_pat), :=~,
                          s(:lvar, :s)))),
                    s(:if,
                      s(:send,
                        s(:lvar, :positive), :empty?),
                      s(:lvasgn, :filter,
                        s(:nil)),
                      s(:if,
                        s(:and,
                          s(:and,
                            s(:send,
                              s(:lvar, :negative), :empty?),
                            s(:send,
                              s(:send,
                                s(:lvar, :positive), :size), :==,
                              s(:int, 1))),
                          s(:send,
                            s(:lvar, :pos_pat), :!~,
                            s(:send,
                              s(:lvar, :positive), :[],
                              s(:int, 0)))),
                        s(:lvasgn, :filter,
                          s(:send,
                            s(:lvar, :positive), :[],
                            s(:int, 0))),
                        s(:lvasgn, :filter,
                          s(:send,
                            s(:const, nil, :Regexp), :union,
                            s(:splat,
                              s(:block,
                                s(:send,
                                  s(:lvar, :positive), :map!),
                                s(:args,
                                  s(:arg, :s)),
                                s(:or,
                                  s(:send,
                                    s(:lvar, :s), :[],
                                    s(:lvar, :pos_pat),
                                    s(:int, 1)),
                                  s(:dstr,
                                    s(:str, "\\A"),
                                    s(:begin,
                                      s(:send,
                                        s(:const, nil, :Regexp), :quote,
                                        s(:lvar, :s))),
                                    s(:str, "\\z"))))))))),
                    s(:if,
                      s(:send,
                        s(:lvar, :negative), :empty?), nil,
                      s(:begin,
                        s(:lvasgn, :negative,
                          s(:send,
                            s(:const, nil, :Regexp), :union,
                            s(:splat,
                              s(:block,
                                s(:send,
                                  s(:lvar, :negative), :map!),
                                s(:args,
                                  s(:arg, :s)),
                                s(:send,
                                  s(:lvar, :s), :[],
                                  s(:lvar, :neg_pat),
                                  s(:int, 1)))))),
                        s(:lvasgn, :filter,
                          s(:regexp,
                            s(:str, "\\A(?!.*"),
                            s(:begin,
                              s(:lvar, :negative)),
                            s(:str, ")"),
                            s(:begin,
                              s(:lvar, :filter)),
                            s(:regopt))))),
                    s(:if,
                      s(:send,
                        s(:const, nil, :Regexp), :===,
                        s(:lvar, :filter)),
                      s(:defs,
                        s(:lvar, :filter), :=~,
                        s(:args,
                          s(:arg, :other)),
                        s(:if,
                          s(:send,
                            s(:const, nil, :Regexp), :===,
                            s(:lvar, :other)), nil,
                          s(:zsuper))), nil),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :filter),
                      s(:lvar, :filter))), nil),
                s(:true))))),
        s(:module,
          s(:const, nil, :Parallel),
          s(:begin,
            s(:def, :process_args,
              s(:args,
                s(:optarg, :args,
                  s(:array))),
              s(:begin,
                s(:if,
                  s(:ivar, :@options),
                  s(:return,
                    s(:ivar, :@options)), nil),
                s(:lvasgn, :options,
                  s(:zsuper)),
                s(:if,
                  s(:send,
                    s(:ivar, :@options), :[],
                    s(:sym, :parallel)),
                  s(:ivasgn, :@files,
                    s(:lvar, :args)), nil),
                s(:lvar, :options))),
            s(:def, :status,
              s(:args,
                s(:restarg, :args)),
              s(:begin,
                s(:lvasgn, :result,
                  s(:zsuper)),
                s(:if,
                  s(:ivar, :@interrupt),
                  s(:send, nil, :raise,
                    s(:ivar, :@interrupt)), nil),
                s(:lvar, :result))),
            s(:send, nil, :private),
            s(:def, :setup_options,
              s(:args,
                s(:arg, :opts),
                s(:arg, :options)),
              s(:begin,
                s(:zsuper),
                s(:send,
                  s(:lvar, :opts), :separator,
                  s(:str, "parallel test options:")),
                s(:send,
                  s(:lvar, :options), :[]=,
                  s(:sym, :retry),
                  s(:true)),
                s(:block,
                  s(:send,
                    s(:lvar, :opts), :on,
                    s(:str, "-j N"),
                    s(:str, "--jobs N"),
                    s(:str, "Allow run tests with N jobs at once")),
                  s(:args,
                    s(:arg, :a)),
                  s(:if,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "^t"),
                        s(:regopt)),
                      s(:lvar, :a)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :options), :[]=,
                        s(:sym, :testing),
                        s(:true)),
                      s(:send,
                        s(:lvar, :options), :[]=,
                        s(:sym, :parallel),
                        s(:send,
                          s(:send,
                            s(:lvar, :a), :[],
                            s(:irange,
                              s(:int, 1),
                              s(:int, -1))), :to_i))),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :parallel),
                      s(:send,
                        s(:lvar, :a), :to_i)))),
                s(:block,
                  s(:send,
                    s(:lvar, :opts), :on,
                    s(:str, "--separate"),
                    s(:str, "Restart job process after one testcase has done")),
                  s(:args),
                  s(:begin,
                    s(:or_asgn,
                      s(:send,
                        s(:lvar, :options), :[],
                        s(:sym, :parallel)),
                      s(:int, 1)),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :separate),
                      s(:true)))),
                s(:block,
                  s(:send,
                    s(:lvar, :opts), :on,
                    s(:str, "--retry"),
                    s(:str, "Retry running testcase when --jobs specified")),
                  s(:args),
                  s(:send,
                    s(:lvar, :options), :[]=,
                    s(:sym, :retry),
                    s(:true))),
                s(:block,
                  s(:send,
                    s(:lvar, :opts), :on,
                    s(:str, "--no-retry"),
                    s(:str, "Disable --retry")),
                  s(:args),
                  s(:send,
                    s(:lvar, :options), :[]=,
                    s(:sym, :retry),
                    s(:false))),
                s(:block,
                  s(:send,
                    s(:lvar, :opts), :on,
                    s(:str, "--ruby VAL"),
                    s(:str, "Path to ruby; It'll have used at -j option")),
                  s(:args,
                    s(:arg, :a)),
                  s(:send,
                    s(:lvar, :options), :[]=,
                    s(:sym, :ruby),
                    s(:send,
                      s(:send,
                        s(:lvar, :a), :split,
                        s(:regexp,
                          s(:str, " "),
                          s(:regopt))), :reject,
                      s(:block_pass,
                        s(:sym, :empty?))))))),
            s(:class,
              s(:const, nil, :Worker), nil,
              s(:begin,
                s(:defs,
                  s(:self), :launch,
                  s(:args,
                    s(:arg, :ruby),
                    s(:optarg, :args,
                      s(:array))),
                  s(:begin,
                    s(:lvasgn, :io,
                      s(:send,
                        s(:const, nil, :IO), :popen,
                        s(:array,
                          s(:splat,
                            s(:lvar, :ruby)),
                          s(:dstr,
                            s(:begin,
                              s(:send,
                                s(:const, nil, :File), :dirname,
                                s(:str, "(string)"))),
                            s(:str, "/unit/parallel.rb")),
                          s(:splat,
                            s(:lvar, :args))),
                        s(:str, "rb+"))),
                    s(:send, nil, :new,
                      s(:lvar, :io),
                      s(:send,
                        s(:lvar, :io), :pid),
                      s(:sym, :waiting)))),
                s(:send, nil, :attr_reader,
                  s(:sym, :quit_called)),
                s(:def, :initialize,
                  s(:args,
                    s(:arg, :io),
                    s(:arg, :pid),
                    s(:arg, :status)),
                  s(:begin,
                    s(:ivasgn, :@io,
                      s(:lvar, :io)),
                    s(:ivasgn, :@pid,
                      s(:lvar, :pid)),
                    s(:ivasgn, :@status,
                      s(:lvar, :status)),
                    s(:ivasgn, :@file,
                      s(:nil)),
                    s(:ivasgn, :@real_file,
                      s(:nil)),
                    s(:ivasgn, :@loadpath,
                      s(:array)),
                    s(:ivasgn, :@hooks,
                      s(:hash)),
                    s(:ivasgn, :@quit_called,
                      s(:false)))),
                s(:def, :puts,
                  s(:args,
                    s(:restarg, :args)),
                  s(:send,
                    s(:ivar, :@io), :puts,
                    s(:splat,
                      s(:lvar, :args)))),
                s(:def, :run,
                  s(:args,
                    s(:arg, :task),
                    s(:arg, :type)),
                  s(:begin,
                    s(:ivasgn, :@file,
                      s(:send,
                        s(:const, nil, :File), :basename,
                        s(:lvar, :task),
                        s(:str, ".rb"))),
                    s(:ivasgn, :@real_file,
                      s(:lvar, :task)),
                    s(:kwbegin,
                      s(:rescue,
                        s(:begin,
                          s(:send, nil, :puts,
                            s(:dstr,
                              s(:str, "loadpath "),
                              s(:begin,
                                s(:send,
                                  s(:array,
                                    s(:send,
                                      s(:const, nil, :Marshal), :dump,
                                      s(:send,
                                        s(:gvar, :$:), :-,
                                        s(:ivar, :@loadpath)))), :pack,
                                  s(:str, "m0"))))),
                          s(:ivasgn, :@loadpath,
                            s(:send,
                              s(:gvar, :$:), :dup)),
                          s(:send, nil, :puts,
                            s(:dstr,
                              s(:str, "run "),
                              s(:begin,
                                s(:lvar, :task)),
                              s(:str, " "),
                              s(:begin,
                                s(:lvar, :type)))),
                          s(:ivasgn, :@status,
                            s(:sym, :prepare))),
                        s(:resbody,
                          s(:array,
                            s(:const,
                              s(:const, nil, :Errno), :EPIPE)), nil,
                          s(:send, nil, :died)),
                        s(:resbody,
                          s(:array,
                            s(:const, nil, :IOError)), nil,
                          s(:begin,
                            s(:if,
                              s(:send,
                                s(:array,
                                  s(:str, "stream closed"),
                                  s(:str, "closed stream")), :include?,
                                s(:send,
                                  s(:gvar, :$!), :message)), nil,
                              s(:send, nil, :raise)),
                            s(:send, nil, :died))), nil)))),
                s(:def, :hook,
                  s(:args,
                    s(:arg, :id),
                    s(:blockarg, :block)),
                  s(:begin,
                    s(:or_asgn,
                      s(:send,
                        s(:ivar, :@hooks), :[],
                        s(:lvar, :id)),
                      s(:array)),
                    s(:send,
                      s(:send,
                        s(:ivar, :@hooks), :[],
                        s(:lvar, :id)), :<<,
                      s(:lvar, :block)),
                    s(:self))),
                s(:def, :read,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :res,
                      s(:if,
                        s(:begin,
                          s(:send,
                            s(:ivar, :@status), :==,
                            s(:sym, :quit))),
                        s(:send,
                          s(:ivar, :@io), :read),
                        s(:send,
                          s(:ivar, :@io), :gets))),
                    s(:and,
                      s(:lvar, :res),
                      s(:send,
                        s(:lvar, :res), :chomp)))),
                s(:def, :close,
                  s(:args),
                  s(:rescue,
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:ivar, :@io), :closed?), nil,
                        s(:send,
                          s(:ivar, :@io), :close)),
                      s(:self)),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :IOError)), nil, nil), nil)),
                s(:def, :quit,
                  s(:args),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:ivar, :@io), :closed?),
                      s(:return), nil),
                    s(:ivasgn, :@quit_called,
                      s(:true)),
                    s(:send,
                      s(:ivar, :@io), :puts,
                      s(:str, "quit")),
                    s(:send,
                      s(:ivar, :@io), :close))),
                s(:def, :kill,
                  s(:args),
                  s(:rescue,
                    s(:send,
                      s(:const, nil, :Process), :kill,
                      s(:sym, :KILL),
                      s(:ivar, :@pid)),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Errno), :ESRCH)), nil, nil), nil)),
                s(:def, :died,
                  s(:args,
                    s(:restarg, :additional)),
                  s(:begin,
                    s(:ivasgn, :@status,
                      s(:sym, :quit)),
                    s(:send,
                      s(:ivar, :@io), :close),
                    s(:lvasgn, :status,
                      s(:gvar, :$?)),
                    s(:if,
                      s(:and,
                        s(:lvar, :status),
                        s(:send,
                          s(:lvar, :status), :signaled?)),
                      s(:or_asgn,
                        s(:send,
                          s(:lvar, :additional), :[],
                          s(:int, 0)),
                        s(:send,
                          s(:const, nil, :SignalException), :new,
                          s(:send,
                            s(:lvar, :status), :termsig))), nil),
                    s(:send, nil, :call_hook,
                      s(:sym, :dead),
                      s(:splat,
                        s(:lvar, :additional))))),
                s(:def, :to_s,
                  s(:args),
                  s(:if,
                    s(:ivar, :@file),
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@pid)),
                      s(:str, "="),
                      s(:begin,
                        s(:ivar, :@file))),
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@pid)),
                      s(:str, ":"),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:ivar, :@status), :to_s), :ljust,
                          s(:int, 7)))))),
                s(:send, nil, :attr_reader,
                  s(:sym, :io),
                  s(:sym, :pid)),
                s(:send, nil, :attr_accessor,
                  s(:sym, :status),
                  s(:sym, :file),
                  s(:sym, :real_file),
                  s(:sym, :loadpath)),
                s(:send, nil, :private),
                s(:def, :call_hook,
                  s(:args,
                    s(:arg, :id),
                    s(:restarg, :additional)),
                  s(:begin,
                    s(:or_asgn,
                      s(:send,
                        s(:ivar, :@hooks), :[],
                        s(:lvar, :id)),
                      s(:array)),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:ivar, :@hooks), :[],
                          s(:lvar, :id)), :each),
                      s(:args,
                        s(:arg, :hook)),
                      s(:send,
                        s(:lvar, :hook), :[],
                        s(:self),
                        s(:lvar, :additional))),
                    s(:self))))),
            s(:def, :after_worker_down,
              s(:args,
                s(:arg, :worker),
                s(:optarg, :e,
                  s(:nil)),
                s(:optarg, :c,
                  s(:false))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:ivar, :@options), :[],
                    s(:sym, :parallel)), nil,
                  s(:return)),
                s(:if,
                  s(:ivar, :@interrupt),
                  s(:return), nil),
                s(:if,
                  s(:lvar, :e),
                  s(:send, nil, :warn,
                    s(:lvar, :e)), nil),
                s(:ivasgn, :@need_quit,
                  s(:true)),
                s(:send, nil, :warn,
                  s(:str, "")),
                s(:send, nil, :warn,
                  s(:str, "Some worker was crashed. It seems ruby interpreter's bug")),
                s(:send, nil, :warn,
                  s(:str, "or, a bug of test/unit/parallel.rb. try again without -j")),
                s(:send, nil, :warn,
                  s(:str, "option.")),
                s(:send, nil, :warn,
                  s(:str, "")),
                s(:send,
                  s(:const, nil, :STDERR), :flush),
                s(:send, nil, :exit,
                  s(:lvar, :c)))),
            s(:def, :after_worker_quit,
              s(:args,
                s(:arg, :worker)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:ivar, :@options), :[],
                    s(:sym, :parallel)), nil,
                  s(:return)),
                s(:if,
                  s(:ivar, :@interrupt),
                  s(:return), nil),
                s(:send,
                  s(:ivar, :@workers), :delete,
                  s(:lvar, :worker)),
                s(:send,
                  s(:ivar, :@dead_workers), :<<,
                  s(:lvar, :worker)),
                s(:ivasgn, :@ios,
                  s(:send,
                    s(:ivar, :@workers), :map,
                    s(:block_pass,
                      s(:sym, :io)))))),
            s(:def, :launch_worker,
              s(:args),
              s(:begin,
                s(:kwbegin,
                  s(:rescue,
                    s(:lvasgn, :worker,
                      s(:send,
                        s(:const, nil, :Worker), :launch,
                        s(:send,
                          s(:ivar, :@options), :[],
                          s(:sym, :ruby)),
                        s(:ivar, :@run_options))),
                    s(:resbody, nil,
                      s(:lvasgn, :e),
                      s(:send, nil, :abort,
                        s(:dstr,
                          s(:str, "ERROR: Failed to launch job process - "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :e), :class)),
                          s(:str, ": "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :e), :message))))), nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :worker), :hook,
                    s(:sym, :dead)),
                  s(:args,
                    s(:arg, :w),
                    s(:arg, :info)),
                  s(:begin,
                    s(:send, nil, :after_worker_quit,
                      s(:lvar, :w)),
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:send,
                            s(:lvar, :info), :empty?), :!),
                        s(:send,
                          s(:send,
                            s(:lvar, :worker), :quit_called), :!)),
                      s(:send, nil, :after_worker_down,
                        s(:lvar, :w),
                        s(:splat,
                          s(:lvar, :info))), nil))),
                s(:send,
                  s(:ivar, :@workers), :<<,
                  s(:lvar, :worker)),
                s(:send,
                  s(:ivar, :@ios), :<<,
                  s(:send,
                    s(:lvar, :worker), :io)),
                s(:send,
                  s(:ivar, :@workers_hash), :[]=,
                  s(:send,
                    s(:lvar, :worker), :io),
                  s(:lvar, :worker)),
                s(:lvar, :worker))),
            s(:def, :delete_worker,
              s(:args,
                s(:arg, :worker)),
              s(:begin,
                s(:send,
                  s(:ivar, :@workers_hash), :delete,
                  s(:send,
                    s(:lvar, :worker), :io)),
                s(:send,
                  s(:ivar, :@workers), :delete,
                  s(:lvar, :worker)),
                s(:send,
                  s(:ivar, :@ios), :delete,
                  s(:send,
                    s(:lvar, :worker), :io)))),
            s(:def, :quit_workers,
              s(:args),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:ivar, :@workers), :empty?),
                  s(:return), nil),
                s(:block,
                  s(:send,
                    s(:ivar, :@workers), :reject!),
                  s(:args,
                    s(:arg, :worker)),
                  s(:begin,
                    s(:kwbegin,
                      s(:rescue,
                        s(:block,
                          s(:send,
                            s(:const, nil, :Timeout), :timeout,
                            s(:int, 1)),
                          s(:args),
                          s(:send,
                            s(:lvar, :worker), :quit)),
                        s(:resbody,
                          s(:array,
                            s(:const,
                              s(:const, nil, :Errno), :EPIPE)), nil, nil),
                        s(:resbody,
                          s(:array,
                            s(:const,
                              s(:const, nil, :Timeout), :Error)), nil, nil), nil)),
                    s(:send,
                      s(:lvar, :worker), :close))),
                s(:if,
                  s(:send,
                    s(:ivar, :@workers), :empty?),
                  s(:return), nil),
                s(:kwbegin,
                  s(:rescue,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Timeout), :timeout,
                        s(:send,
                          s(:float, 0.2), :*,
                          s(:send,
                            s(:ivar, :@workers), :size))),
                      s(:args),
                      s(:send,
                        s(:const, nil, :Process), :waitall)),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Timeout), :Error)), nil,
                      s(:begin,
                        s(:block,
                          s(:send,
                            s(:ivar, :@workers), :each),
                          s(:args,
                            s(:arg, :worker)),
                          s(:send,
                            s(:lvar, :worker), :kill)),
                        s(:send,
                          s(:ivar, :@worker), :clear))), nil)))),
            s(:def, :deal,
              s(:args,
                s(:arg, :io),
                s(:arg, :type),
                s(:arg, :result),
                s(:arg, :rep),
                s(:optarg, :shutting_down,
                  s(:false))),
              s(:begin,
                s(:lvasgn, :worker,
                  s(:send,
                    s(:ivar, :@workers_hash), :[],
                    s(:lvar, :io))),
                s(:lvasgn, :cmd,
                  s(:send,
                    s(:lvar, :worker), :read)),
                s(:if,
                  s(:lvar, :cmd),
                  s(:send,
                    s(:lvar, :cmd), :sub!,
                    s(:regexp,
                      s(:str, "\\A\\.+"),
                      s(:regopt)),
                    s(:str, "")), nil),
                s(:case,
                  s(:lvar, :cmd),
                  s(:when,
                    s(:str, ""), nil),
                  s(:when,
                    s(:regexp,
                      s(:str, "^okay$"),
                      s(:regopt)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :worker), :status=,
                        s(:sym, :running)),
                      s(:send, nil, :jobs_status))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^ready(!)?$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :bang,
                        s(:nth_ref, 1)),
                      s(:send,
                        s(:lvar, :worker), :status=,
                        s(:sym, :ready)),
                      s(:if,
                        s(:lvasgn, :task,
                          s(:send,
                            s(:ivar, :@tasks), :shift)), nil,
                        s(:return,
                          s(:nil))),
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:ivar, :@options), :[],
                            s(:sym, :separate)),
                          s(:send,
                            s(:lvar, :bang), :!)),
                        s(:begin,
                          s(:send,
                            s(:lvar, :worker), :quit),
                          s(:lvasgn, :worker,
                            s(:send, nil, :add_worker))), nil),
                      s(:send,
                        s(:lvar, :worker), :run,
                        s(:lvar, :task),
                        s(:lvar, :type)),
                      s(:op_asgn,
                        s(:ivasgn, :@test_count), :+,
                        s(:int, 1)),
                      s(:send, nil, :jobs_status))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^done (.+?)$"),
                      s(:regopt)),
                    s(:begin,
                      s(:kwbegin,
                        s(:rescue,
                          s(:lvasgn, :r,
                            s(:send,
                              s(:const, nil, :Marshal), :load,
                              s(:send,
                                s(:send,
                                  s(:nth_ref, 1), :unpack,
                                  s(:str, "m")), :[],
                                s(:int, 0)))),
                          s(:resbody, nil, nil,
                            s(:begin,
                              s(:send, nil, :print,
                                s(:dstr,
                                  s(:str, "unknown object: "),
                                  s(:begin,
                                    s(:send,
                                      s(:send,
                                        s(:send,
                                          s(:nth_ref, 1), :unpack,
                                          s(:str, "m")), :[],
                                        s(:int, 0)), :dump)))),
                              s(:return,
                                s(:true)))), nil)),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :r), :[],
                            s(:irange,
                              s(:int, 0),
                              s(:int, 1))), :==,
                          s(:array,
                            s(:nil),
                            s(:nil))), nil,
                        s(:send,
                          s(:lvar, :result), :<<,
                          s(:send,
                            s(:lvar, :r), :[],
                            s(:irange,
                              s(:int, 0),
                              s(:int, 1))))),
                      s(:send,
                        s(:lvar, :rep), :<<,
                        s(:hash,
                          s(:pair,
                            s(:sym, :file),
                            s(:send,
                              s(:lvar, :worker), :real_file)),
                          s(:pair,
                            s(:sym, :report),
                            s(:send,
                              s(:lvar, :r), :[],
                              s(:int, 2))),
                          s(:pair,
                            s(:sym, :result),
                            s(:send,
                              s(:lvar, :r), :[],
                              s(:int, 3))),
                          s(:pair,
                            s(:sym, :testcase),
                            s(:send,
                              s(:lvar, :r), :[],
                              s(:int, 5))))),
                      s(:send,
                        s(:send,
                          s(:gvar, :$:), :push,
                          s(:splat,
                            s(:send,
                              s(:lvar, :r), :[],
                              s(:int, 4)))), :uniq!),
                      s(:return,
                        s(:true)))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^p (.+?)$"),
                      s(:regopt)),
                    s(:begin,
                      s(:send, nil, :del_jobs_status),
                      s(:send, nil, :print,
                        s(:send,
                          s(:send,
                            s(:nth_ref, 1), :unpack,
                            s(:str, "m")), :[],
                          s(:int, 0))),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:ivar, :@options), :[],
                            s(:sym, :job_status)), :==,
                          s(:sym, :replace)),
                        s(:send, nil, :jobs_status), nil))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^after (.+?)$"),
                      s(:regopt)),
                    s(:send,
                      s(:ivar, :@warnings), :<<,
                      s(:send,
                        s(:const, nil, :Marshal), :load,
                        s(:send,
                          s(:send,
                            s(:nth_ref, 1), :unpack,
                            s(:str, "m")), :[],
                          s(:int, 0))))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^bye (.+?)$"),
                      s(:regopt)),
                    s(:send, nil, :after_worker_down,
                      s(:lvar, :worker),
                      s(:send,
                        s(:const, nil, :Marshal), :load,
                        s(:send,
                          s(:send,
                            s(:nth_ref, 1), :unpack,
                            s(:str, "m")), :[],
                          s(:int, 0))))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^bye$"),
                      s(:regopt)),
                    s(:nil),
                    s(:if,
                      s(:or,
                        s(:lvar, :shutting_down),
                        s(:send,
                          s(:lvar, :worker), :quit_called)),
                      s(:send, nil, :after_worker_quit,
                        s(:lvar, :worker)),
                      s(:send, nil, :after_worker_down,
                        s(:lvar, :worker)))),
                  s(:send, nil, :print,
                    s(:dstr,
                      s(:str, "unknown command: "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :cmd), :dump)),
                      s(:str, "\n")))),
                s(:return,
                  s(:false)))),
            s(:def, :_run_parallel,
              s(:args,
                s(:arg, :suites),
                s(:arg, :type),
                s(:arg, :result)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:ivar, :@options), :[],
                      s(:sym, :parallel)), :<,
                    s(:int, 1)),
                  s(:begin,
                    s(:send, nil, :warn,
                      s(:str, "Error: parameter of -j option should be greater than 0.")),
                    s(:return)), nil),
                s(:send, nil, :require,
                  s(:str, "thread")),
                s(:send, nil, :require,
                  s(:str, "timeout")),
                s(:ivasgn, :@tasks,
                  s(:send,
                    s(:ivar, :@files), :dup)),
                s(:ivasgn, :@need_quit,
                  s(:false)),
                s(:ivasgn, :@dead_workers,
                  s(:array)),
                s(:ivasgn, :@warnings,
                  s(:array)),
                s(:ivasgn, :@total_tests,
                  s(:send,
                    s(:send,
                      s(:ivar, :@tasks), :size), :to_s,
                    s(:int, 10))),
                s(:lvasgn, :rep,
                  s(:array)),
                s(:ivasgn, :@workers,
                  s(:array)),
                s(:ivasgn, :@workers_hash,
                  s(:hash)),
                s(:ivasgn, :@ios,
                  s(:array)),
                s(:kwbegin,
                  s(:ensure,
                    s(:rescue,
                      s(:begin,
                        s(:block,
                          s(:send,
                            s(:send,
                              s(:ivar, :@options), :[],
                              s(:sym, :parallel)), :times),
                          s(:args),
                          s(:send, nil, :launch_worker)),
                        s(:while,
                          s(:lvasgn, :_io,
                            s(:send,
                              s(:send,
                                s(:const, nil, :IO), :select,
                                s(:ivar, :@ios)), :[],
                              s(:int, 0))),
                          s(:if,
                            s(:block,
                              s(:send,
                                s(:lvar, :_io), :any?),
                              s(:args,
                                s(:arg, :io)),
                              s(:or,
                                s(:ivar, :@need_quit),
                                s(:begin,
                                  s(:and,
                                    s(:send,
                                      s(:send, nil, :deal,
                                        s(:lvar, :io),
                                        s(:lvar, :type),
                                        s(:lvar, :result),
                                        s(:lvar, :rep)), :nil?),
                                    s(:send,
                                      s(:block,
                                        s(:send,
                                          s(:ivar, :@workers), :any?),
                                        s(:args,
                                          s(:arg, :x)),
                                        s(:send,
                                          s(:array,
                                            s(:sym, :running),
                                            s(:sym, :prepare)), :include?,
                                          s(:send,
                                            s(:lvar, :x), :status))), :!))))),
                            s(:break), nil))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :Interrupt)),
                        s(:lvasgn, :ex),
                        s(:begin,
                          s(:ivasgn, :@interrupt,
                            s(:lvar, :ex)),
                          s(:return,
                            s(:lvar, :result)))), nil),
                    s(:begin,
                      s(:if,
                        s(:ivar, :@interrupt),
                        s(:begin,
                          s(:block,
                            s(:send,
                              s(:ivar, :@ios), :select!),
                            s(:args,
                              s(:arg, :x)),
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:ivar, :@workers_hash), :[],
                                  s(:lvar, :x)), :status), :==,
                              s(:sym, :running))),
                          s(:while,
                            s(:and,
                              s(:send,
                                s(:send,
                                  s(:ivar, :@ios), :empty?), :!),
                              s(:begin,
                                s(:lvasgn, :__io,
                                  s(:send,
                                    s(:const, nil, :IO), :select,
                                    s(:ivar, :@ios),
                                    s(:array),
                                    s(:array),
                                    s(:int, 10))))),
                            s(:block,
                              s(:send,
                                s(:send,
                                  s(:lvar, :__io), :[],
                                  s(:int, 0)), :reject!),
                              s(:args,
                                s(:arg, :io)),
                              s(:send, nil, :deal,
                                s(:lvar, :io),
                                s(:lvar, :type),
                                s(:lvar, :result),
                                s(:lvar, :rep),
                                s(:true))))), nil),
                      s(:send, nil, :quit_workers),
                      s(:if,
                        s(:or,
                          s(:or,
                            s(:ivar, :@interrupt),
                            s(:send,
                              s(:send,
                                s(:ivar, :@options), :[],
                                s(:sym, :retry)), :!)),
                          s(:ivar, :@need_quit)), nil,
                        s(:begin,
                          s(:send,
                            s(:ivar, :@options), :[]=,
                            s(:sym, :parallel),
                            s(:false)),
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :suites),
                              s(:lvasgn, :rep)),
                            s(:block,
                              s(:send,
                                s(:lvar, :rep), :partition),
                              s(:args,
                                s(:arg, :r)),
                              s(:and,
                                s(:and,
                                  s(:send,
                                    s(:lvar, :r), :[],
                                    s(:sym, :testcase)),
                                  s(:send,
                                    s(:lvar, :r), :[],
                                    s(:sym, :file))),
                                s(:block,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :r), :[],
                                      s(:sym, :report)), :any?),
                                  s(:args,
                                    s(:arg, :e)),
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :e), :[],
                                        s(:int, 2)), :is_a?,
                                      s(:const,
                                        s(:const, nil, :MiniTest), :Skip)), :!))))),
                          s(:block,
                            s(:send,
                              s(:send,
                                s(:block,
                                  s(:send,
                                    s(:lvar, :suites), :map),
                                  s(:args,
                                    s(:arg, :r)),
                                  s(:send,
                                    s(:lvar, :r), :[],
                                    s(:sym, :file))), :uniq), :each),
                            s(:args,
                              s(:arg, :file)),
                            s(:send, nil, :require,
                              s(:lvar, :file))),
                          s(:block,
                            s(:send,
                              s(:lvar, :suites), :map!),
                            s(:args,
                              s(:arg, :r)),
                            s(:send, nil, :eval,
                              s(:send,
                                s(:str, "::"), :+,
                                s(:send,
                                  s(:lvar, :r), :[],
                                  s(:sym, :testcase))))),
                          s(:or,
                            s(:send, nil, :del_status_line),
                            s(:send, nil, :puts)),
                          s(:if,
                            s(:send,
                              s(:lvar, :suites), :empty?), nil,
                            s(:begin,
                              s(:send, nil, :puts,
                                s(:str, "Retrying...")),
                              s(:send, nil, :_run_suites,
                                s(:lvar, :suites),
                                s(:lvar, :type)))))),
                      s(:if,
                        s(:send,
                          s(:ivar, :@options), :[],
                          s(:sym, :retry)), nil,
                        s(:or,
                          s(:send, nil, :del_status_line),
                          s(:send, nil, :puts))),
                      s(:if,
                        s(:send,
                          s(:lvar, :rep), :empty?), nil,
                        s(:begin,
                          s(:block,
                            s(:send,
                              s(:lvar, :rep), :each),
                            s(:args,
                              s(:arg, :r)),
                            s(:block,
                              s(:send,
                                s(:send,
                                  s(:lvar, :r), :[],
                                  s(:sym, :report)), :each),
                              s(:args,
                                s(:arg, :f)),
                              s(:if,
                                s(:lvar, :f),
                                s(:send, nil, :puke,
                                  s(:splat,
                                    s(:lvar, :f))), nil))),
                          s(:if,
                            s(:send,
                              s(:ivar, :@options), :[],
                              s(:sym, :retry)),
                            s(:begin,
                              s(:op_asgn,
                                s(:ivasgn, :@errors), :+,
                                s(:send,
                                  s(:block,
                                    s(:send,
                                      s(:lvar, :rep), :map),
                                    s(:args,
                                      s(:arg, :x)),
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :x), :[],
                                        s(:sym, :result)), :[],
                                      s(:int, 0))), :inject,
                                  s(:sym, :+))),
                              s(:op_asgn,
                                s(:ivasgn, :@failures), :+,
                                s(:send,
                                  s(:block,
                                    s(:send,
                                      s(:lvar, :rep), :map),
                                    s(:args,
                                      s(:arg, :x)),
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :x), :[],
                                        s(:sym, :result)), :[],
                                      s(:int, 1))), :inject,
                                  s(:sym, :+))),
                              s(:op_asgn,
                                s(:ivasgn, :@skips), :+,
                                s(:send,
                                  s(:block,
                                    s(:send,
                                      s(:lvar, :rep), :map),
                                    s(:args,
                                      s(:arg, :x)),
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :x), :[],
                                        s(:sym, :result)), :[],
                                      s(:int, 2))), :inject,
                                  s(:sym, :+)))), nil))),
                      s(:if,
                        s(:send,
                          s(:ivar, :@warnings), :empty?), nil,
                        s(:begin,
                          s(:send, nil, :warn,
                            s(:str, "")),
                          s(:block,
                            s(:send,
                              s(:ivar, :@warnings), :uniq!),
                            s(:args,
                              s(:arg, :w)),
                            s(:send,
                              s(:send,
                                s(:lvar, :w), :[],
                                s(:int, 1)), :message)),
                          s(:block,
                            s(:send,
                              s(:ivar, :@warnings), :each),
                            s(:args,
                              s(:arg, :w)),
                            s(:send, nil, :warn,
                              s(:dstr,
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :w), :[],
                                    s(:int, 0))),
                                s(:str, ": "),
                                s(:begin,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :w), :[],
                                      s(:int, 1)), :message)),
                                s(:str, " ("),
                                s(:begin,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :w), :[],
                                      s(:int, 1)), :class)),
                                s(:str, ")")))),
                          s(:send, nil, :warn,
                            s(:str, ""))))))))),
            s(:def, :_run_suites,
              s(:args,
                s(:arg, :suites),
                s(:arg, :type)),
              s(:begin,
                s(:send, nil, :_prepare_run,
                  s(:lvar, :suites),
                  s(:lvar, :type)),
                s(:ivasgn, :@interrupt,
                  s(:nil)),
                s(:lvasgn, :result,
                  s(:array)),
                s(:send,
                  s(:const, nil, :GC), :start),
                s(:if,
                  s(:send,
                    s(:ivar, :@options), :[],
                    s(:sym, :parallel)),
                  s(:send, nil, :_run_parallel,
                    s(:lvar, :suites),
                    s(:lvar, :type),
                    s(:lvar, :result)),
                  s(:block,
                    s(:send,
                      s(:lvar, :suites), :each),
                    s(:args,
                      s(:arg, :suite)),
                    s(:kwbegin,
                      s(:rescue,
                        s(:send,
                          s(:lvar, :result), :<<,
                          s(:send, nil, :_run_suite,
                            s(:lvar, :suite),
                            s(:lvar, :type))),
                        s(:resbody,
                          s(:array,
                            s(:const, nil, :Interrupt)),
                          s(:lvasgn, :e),
                          s(:begin,
                            s(:ivasgn, :@interrupt,
                              s(:lvar, :e)),
                            s(:break))), nil)))),
                s(:lvar, :result))))),
        s(:module,
          s(:const, nil, :Skipping),
          s(:begin,
            s(:send, nil, :private),
            s(:def, :setup_options,
              s(:args,
                s(:arg, :opts),
                s(:arg, :options)),
              s(:begin,
                s(:zsuper),
                s(:send,
                  s(:lvar, :opts), :separator,
                  s(:str, "skipping options:")),
                s(:send,
                  s(:lvar, :options), :[]=,
                  s(:sym, :hide_skip),
                  s(:true)),
                s(:block,
                  s(:send,
                    s(:lvar, :opts), :on,
                    s(:str, "-q"),
                    s(:str, "--hide-skip"),
                    s(:str, "Hide skipped tests")),
                  s(:args),
                  s(:send,
                    s(:lvar, :options), :[]=,
                    s(:sym, :hide_skip),
                    s(:true))),
                s(:block,
                  s(:send,
                    s(:lvar, :opts), :on,
                    s(:str, "--show-skip"),
                    s(:str, "Show skipped tests")),
                  s(:args),
                  s(:send,
                    s(:lvar, :options), :[]=,
                    s(:sym, :hide_skip),
                    s(:false))))),
            s(:send, nil, :private),
            s(:def, :_run_suites,
              s(:args,
                s(:arg, :suites),
                s(:arg, :type)),
              s(:begin,
                s(:lvasgn, :result,
                  s(:zsuper)),
                s(:if,
                  s(:send,
                    s(:ivar, :@options), :[],
                    s(:sym, :hide_skip)),
                  s(:block,
                    s(:send,
                      s(:send, nil, :report), :reject!),
                    s(:args,
                      s(:arg, :r)),
                    s(:send,
                      s(:lvar, :r), :start_with?,
                      s(:str, "Skipped:"))), nil),
                s(:block,
                  s(:send,
                    s(:send, nil, :report), :sort_by!),
                  s(:args,
                    s(:arg, :r)),
                  s(:if,
                    s(:send,
                      s(:lvar, :r), :start_with?,
                      s(:str, "Skipped:")),
                    s(:int, 0),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :r), :start_with?,
                          s(:str, "Failure:")),
                        s(:int, 1),
                        s(:int, 2))))),
                s(:lvar, :result))))),
        s(:module,
          s(:const, nil, :StatusLine),
          s(:begin,
            s(:def, :terminal_width,
              s(:args),
              s(:begin,
                s(:if,
                  s(:or_asgn,
                    s(:ivasgn, :@terminal_width),
                    s(:nil)), nil,
                  s(:begin,
                    s(:kwbegin,
                      s(:rescue,
                        s(:begin,
                          s(:send, nil, :require,
                            s(:str, "io/console")),
                          s(:lvasgn, :width,
                            s(:send,
                              s(:send,
                                s(:gvar, :$stdout), :winsize), :[],
                              s(:int, 1)))),
                        s(:resbody,
                          s(:array,
                            s(:const, nil, :LoadError),
                            s(:const, nil, :NoMethodError),
                            s(:const,
                              s(:const, nil, :Errno), :ENOTTY),
                            s(:const,
                              s(:const, nil, :Errno), :EBADF),
                            s(:const,
                              s(:const, nil, :Errno), :EINVAL)), nil,
                          s(:lvasgn, :width,
                            s(:or,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:const, nil, :ENV), :[],
                                    s(:str, "COLUMNS")), :to_i), :nonzero?),
                              s(:int, 80)))), nil)),
                    s(:if,
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "mswin|mingw"),
                          s(:regopt)),
                        s(:const, nil, :RUBY_PLATFORM)),
                      s(:op_asgn,
                        s(:lvasgn, :width), :-,
                        s(:int, 1)), nil),
                    s(:ivasgn, :@terminal_width,
                      s(:lvar, :width)))),
                s(:ivar, :@terminal_width))),
            s(:def, :del_status_line,
              s(:args,
                s(:optarg, :flush,
                  s(:true))),
              s(:begin,
                s(:or_asgn,
                  s(:ivasgn, :@status_line_size),
                  s(:int, 0)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:ivar, :@options), :[],
                      s(:sym, :job_status)), :==,
                    s(:sym, :replace)), nil,
                  s(:begin,
                    s(:send,
                      s(:gvar, :$stdout), :puts),
                    s(:return))),
                s(:send, nil, :print,
                  s(:send,
                    s(:send,
                      s(:str, "\r"), :+,
                      s(:send,
                        s(:str, " "), :*,
                        s(:ivar, :@status_line_size))), :+,
                    s(:str, "\r"))),
                s(:if,
                  s(:lvar, :flush),
                  s(:send,
                    s(:gvar, :$stdout), :flush), nil),
                s(:ivasgn, :@status_line_size,
                  s(:int, 0)))),
            s(:def, :add_status,
              s(:args,
                s(:arg, :line),
                s(:kwoptarg, :flush,
                  s(:true))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:ivar, :@options), :[],
                      s(:sym, :job_status)), :==,
                    s(:sym, :replace)), nil,
                  s(:begin,
                    s(:send, nil, :print,
                      s(:lvar, :line)),
                    s(:return))),
                s(:or_asgn,
                  s(:ivasgn, :@status_line_size),
                  s(:int, 0)),
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :line), :[],
                    s(:erange,
                      s(:int, 0),
                      s(:begin,
                        s(:send,
                          s(:send, nil, :terminal_width), :-,
                          s(:ivar, :@status_line_size)))))),
                s(:send, nil, :print,
                  s(:lvar, :line)),
                s(:if,
                  s(:lvar, :flush),
                  s(:send,
                    s(:gvar, :$stdout), :flush), nil),
                s(:op_asgn,
                  s(:ivasgn, :@status_line_size), :+,
                  s(:send,
                    s(:lvar, :line), :size)))),
            s(:def, :jobs_status,
              s(:args),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:ivar, :@options), :[],
                    s(:sym, :job_status)), nil,
                  s(:return)),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:ivar, :@options), :[],
                      s(:sym, :verbose)),
                    s(:send,
                      s(:send,
                        s(:ivar, :@options), :[],
                        s(:sym, :job_status)), :==,
                      s(:sym, :replace))), nil,
                  s(:send, nil, :puts,
                    s(:str, ""))),
                s(:lvasgn, :status_line,
                  s(:send,
                    s(:send,
                      s(:ivar, :@workers), :map,
                      s(:block_pass,
                        s(:sym, :to_s))), :join,
                    s(:str, " "))),
                s(:or,
                  s(:send, nil, :update_status,
                    s(:lvar, :status_line)),
                  s(:begin,
                    s(:send, nil, :puts),
                    s(:nil))))),
            s(:def, :del_jobs_status,
              s(:args),
              s(:begin,
                s(:if,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:ivar, :@options), :[],
                        s(:sym, :job_status)), :==,
                      s(:sym, :replace)),
                    s(:send,
                      s(:ivar, :@status_line_size), :nonzero?)), nil,
                  s(:return)),
                s(:send, nil, :del_status_line))),
            s(:def, :output,
              s(:args),
              s(:or,
                s(:begin,
                  s(:or_asgn,
                    s(:ivasgn, :@output),
                    s(:nil))),
                s(:zsuper))),
            s(:def, :_prepare_run,
              s(:args,
                s(:arg, :suites),
                s(:arg, :type)),
              s(:begin,
                s(:if,
                  s(:and,
                    s(:ivar, :@tty),
                    s(:send,
                      s(:ivar, :@verbose), :!)),
                  s(:or_asgn,
                    s(:send,
                      s(:send, nil, :options), :[],
                      s(:sym, :job_status)),
                    s(:sym, :replace)), nil),
                s(:case,
                  s(:send,
                    s(:send, nil, :options), :[],
                    s(:sym, :color)),
                  s(:when,
                    s(:sym, :always),
                    s(:lvasgn, :color,
                      s(:true))),
                  s(:when,
                    s(:sym, :auto),
                    s(:nil),
                    s(:lvasgn, :color,
                      s(:and,
                        s(:begin,
                          s(:or,
                            s(:ivar, :@tty),
                            s(:send,
                              s(:send,
                                s(:ivar, :@options), :[],
                                s(:sym, :job_status)), :==,
                              s(:sym, :replace)))),
                        s(:send,
                          s(:regexp,
                            s(:str, "dumb"),
                            s(:regopt)), :!~,
                          s(:send,
                            s(:const, nil, :ENV), :[],
                            s(:str, "TERM")))))),
                  s(:lvasgn, :color,
                    s(:false))),
                s(:if,
                  s(:lvar, :color),
                  s(:begin,
                    s(:lvasgn, :colors,
                      s(:if,
                        s(:begin,
                          s(:lvasgn, :colors,
                            s(:send,
                              s(:const, nil, :ENV), :[],
                              s(:str, "TEST_COLORS")))),
                        s(:send,
                          s(:const, nil, :Hash), :[],
                          s(:send,
                            s(:lvar, :colors), :scan,
                            s(:regexp,
                              s(:str, "(\\w+)=([^:\\n]*)"),
                              s(:regopt)))),
                        s(:hash))),
                    s(:kwbegin,
                      s(:rescue,
                        s(:block,
                          s(:send,
                            s(:send,
                              s(:const, nil, :File), :read,
                              s(:send,
                                s(:const, nil, :File), :join,
                                s(:send, nil, :__dir__),
                                s(:str, "../../colors"))), :scan,
                            s(:regexp,
                              s(:str, "(\\w+)=([^:\\n]*)"),
                              s(:regopt))),
                          s(:args,
                            s(:arg, :n),
                            s(:arg, :c)),
                          s(:or_asgn,
                            s(:send,
                              s(:lvar, :colors), :[],
                              s(:lvar, :n)),
                            s(:lvar, :c))),
                        s(:resbody, nil, nil, nil), nil)),
                    s(:ivasgn, :@passed_color,
                      s(:dstr,
                        s(:str, "\e[;"),
                        s(:begin,
                          s(:or,
                            s(:send,
                              s(:lvar, :colors), :[],
                              s(:str, "pass")),
                            s(:str, "32"))),
                        s(:str, "m"))),
                    s(:ivasgn, :@failed_color,
                      s(:dstr,
                        s(:str, "\e[;"),
                        s(:begin,
                          s(:or,
                            s(:send,
                              s(:lvar, :colors), :[],
                              s(:str, "fail")),
                            s(:str, "31"))),
                        s(:str, "m"))),
                    s(:ivasgn, :@skipped_color,
                      s(:dstr,
                        s(:str, "\e[;"),
                        s(:begin,
                          s(:or,
                            s(:send,
                              s(:lvar, :colors), :[],
                              s(:str, "skip")),
                            s(:str, "33"))),
                        s(:str, "m"))),
                    s(:ivasgn, :@reset_color,
                      s(:str, "\e[m"))),
                  s(:ivasgn, :@passed_color,
                    s(:ivasgn, :@failed_color,
                      s(:ivasgn, :@skipped_color,
                        s(:ivasgn, :@reset_color,
                          s(:str, "")))))),
                s(:if,
                  s(:or,
                    s(:lvar, :color),
                    s(:send,
                      s(:send,
                        s(:ivar, :@options), :[],
                        s(:sym, :job_status)), :==,
                      s(:sym, :replace))),
                  s(:begin,
                    s(:ivasgn, :@verbose,
                      s(:send,
                        s(:send,
                          s(:send, nil, :options), :[],
                          s(:sym, :parallel)), :!)),
                    s(:ivasgn, :@output,
                      s(:send,
                        s(:const, nil, :Output), :new,
                        s(:self)))), nil),
                s(:lvasgn, :filter,
                  s(:send,
                    s(:send, nil, :options), :[],
                    s(:sym, :filter))),
                s(:lvasgn, :type,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :type)),
                    s(:str, "_methods"))),
                s(:lvasgn, :total,
                  s(:if,
                    s(:lvar, :filter),
                    s(:block,
                      s(:send,
                        s(:lvar, :suites), :inject,
                        s(:int, 0)),
                      s(:args,
                        s(:arg, :n),
                        s(:arg, :suite)),
                      s(:send,
                        s(:lvar, :n), :+,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :suite), :send,
                              s(:lvar, :type)), :grep,
                            s(:lvar, :filter)), :size))),
                    s(:block,
                      s(:send,
                        s(:lvar, :suites), :inject,
                        s(:int, 0)),
                      s(:args,
                        s(:arg, :n),
                        s(:arg, :suite)),
                      s(:send,
                        s(:lvar, :n), :+,
                        s(:send,
                          s(:send,
                            s(:lvar, :suite), :send,
                            s(:lvar, :type)), :size))))),
                s(:ivasgn, :@test_count,
                  s(:int, 0)),
                s(:ivasgn, :@total_tests,
                  s(:send,
                    s(:lvar, :total), :to_s,
                    s(:int, 10))))),
            s(:def, :new_test,
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:op_asgn,
                  s(:ivasgn, :@test_count), :+,
                  s(:int, 1)),
                s(:send, nil, :update_status,
                  s(:lvar, :s)))),
            s(:def, :update_status,
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:lvasgn, :count,
                  s(:send,
                    s(:send,
                      s(:ivar, :@test_count), :to_s,
                      s(:int, 10)), :rjust,
                    s(:send,
                      s(:ivar, :@total_tests), :size))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:ivar, :@options), :[],
                      s(:sym, :job_status)), :==,
                    s(:sym, :replace)),
                  s(:send, nil, :del_status_line,
                    s(:false)), nil),
                s(:send, nil, :print,
                  s(:ivar, :@passed_color)),
                s(:send, nil, :add_status,
                  s(:dstr,
                    s(:str, "["),
                    s(:begin,
                      s(:lvar, :count)),
                    s(:str, "/"),
                    s(:begin,
                      s(:ivar, :@total_tests)),
                    s(:str, "]")),
                  s(:hash,
                    s(:pair,
                      s(:sym, :flush),
                      s(:false)))),
                s(:send, nil, :print,
                  s(:ivar, :@reset_color)),
                s(:send, nil, :add_status,
                  s(:dstr,
                    s(:str, " "),
                    s(:begin,
                      s(:lvar, :s)))))),
            s(:def, :_print,
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:gvar, :$stdout), :print,
                s(:lvar, :s))),
            s(:def, :succeed,
              s(:args),
              s(:send, nil, :del_status_line)),
            s(:def, :failed,
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:lvasgn, :sep,
                  s(:str, "\n")),
                s(:or_asgn,
                  s(:ivasgn, :@report_count),
                  s(:int, 0)),
                s(:block,
                  s(:send,
                    s(:send, nil, :report), :each),
                  s(:args,
                    s(:arg, :msg)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :msg), :start_with?,
                        s(:str, "Skipped:")),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:ivar, :@options), :[],
                            s(:sym, :hide_skip)),
                          s(:begin,
                            s(:send, nil, :del_status_line),
                            s(:next)), nil),
                        s(:lvasgn, :color,
                          s(:ivar, :@skipped_color))),
                      s(:lvasgn, :color,
                        s(:ivar, :@failed_color))),
                    s(:lvasgn, :msg,
                      s(:send,
                        s(:lvar, :msg), :split,
                        s(:regexp,
                          s(:str, "$"),
                          s(:regopt)),
                        s(:int, 2))),
                    s(:send,
                      s(:gvar, :$stdout), :printf,
                      s(:str, "%s%s%3d) %s%s%s\n"),
                      s(:lvar, :sep),
                      s(:lvar, :color),
                      s(:op_asgn,
                        s(:ivasgn, :@report_count), :+,
                        s(:int, 1)),
                      s(:send,
                        s(:lvar, :msg), :[],
                        s(:int, 0)),
                      s(:ivar, :@reset_color),
                      s(:send,
                        s(:lvar, :msg), :[],
                        s(:int, 1))),
                    s(:lvasgn, :sep,
                      s(:nil)))),
                s(:send,
                  s(:send, nil, :report), :clear))),
            s(:def, :initialize,
              s(:args),
              s(:begin,
                s(:zsuper),
                s(:ivasgn, :@tty,
                  s(:send,
                    s(:gvar, :$stdout), :tty?)))),
            s(:def, :run,
              s(:args,
                s(:restarg, :args)),
              s(:begin,
                s(:lvasgn, :result,
                  s(:zsuper)),
                s(:send, nil, :puts,
                  s(:dstr,
                    s(:str, "\nruby -v: "),
                    s(:begin,
                      s(:const, nil, :RUBY_DESCRIPTION)))),
                s(:lvar, :result))),
            s(:send, nil, :private),
            s(:def, :setup_options,
              s(:args,
                s(:arg, :opts),
                s(:arg, :options)),
              s(:begin,
                s(:zsuper),
                s(:send,
                  s(:lvar, :opts), :separator,
                  s(:str, "status line options:")),
                s(:send,
                  s(:lvar, :options), :[]=,
                  s(:sym, :job_status),
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opts), :on,
                    s(:str, "--jobs-status [TYPE]"),
                    s(:array,
                      s(:sym, :normal),
                      s(:sym, :replace)),
                    s(:str, "Show status of jobs every file; Disabled when --jobs isn't specified.")),
                  s(:args,
                    s(:arg, :type)),
                  s(:send,
                    s(:lvar, :options), :[]=,
                    s(:sym, :job_status),
                    s(:or,
                      s(:lvar, :type),
                      s(:sym, :normal)))),
                s(:block,
                  s(:send,
                    s(:lvar, :opts), :on,
                    s(:str, "--color[=WHEN]"),
                    s(:array,
                      s(:sym, :always),
                      s(:sym, :never),
                      s(:sym, :auto)),
                    s(:str, "colorize the output.  WHEN defaults to 'always'"),
                    s(:str, "or can be 'never' or 'auto'.")),
                  s(:args,
                    s(:arg, :c)),
                  s(:send,
                    s(:lvar, :options), :[]=,
                    s(:sym, :color),
                    s(:or,
                      s(:lvar, :c),
                      s(:sym, :always)))),
                s(:block,
                  s(:send,
                    s(:lvar, :opts), :on,
                    s(:str, "--tty[=WHEN]"),
                    s(:array,
                      s(:sym, :yes),
                      s(:sym, :no)),
                    s(:str, "force to output tty control.  WHEN defaults to 'yes'"),
                    s(:str, "or can be 'no'.")),
                  s(:args,
                    s(:arg, :c)),
                  s(:ivasgn, :@tty,
                    s(:send,
                      s(:lvar, :c), :!=,
                      s(:sym, :no)))))),
            s(:class,
              s(:const, nil, :Output),
              s(:send,
                s(:const, nil, :Struct), :new,
                s(:sym, :runner)),
              s(:begin,
                s(:def, :puts,
                  s(:args,
                    s(:restarg, :a)),
                  s(:if,
                    s(:send,
                      s(:lvar, :a), :empty?), nil,
                    s(:send,
                      s(:gvar, :$stdout), :puts,
                      s(:splat,
                        s(:lvar, :a))))),
                s(:def, :respond_to_missing?,
                  s(:args,
                    s(:restarg, :a)),
                  s(:send,
                    s(:gvar, :$stdout), :respond_to?,
                    s(:splat,
                      s(:lvar, :a)))),
                s(:def, :method_missing,
                  s(:args,
                    s(:restarg, :a),
                    s(:blockarg, :b)),
                  s(:send,
                    s(:gvar, :$stdout), :__send__,
                    s(:splat,
                      s(:lvar, :a)),
                    s(:block_pass,
                      s(:lvar, :b)))),
                s(:def, :print,
                  s(:args,
                    s(:arg, :s)),
                  s(:case,
                    s(:lvar, :s),
                    s(:when,
                      s(:regexp,
                        s(:str, "\\A(.*\\#.*) = \\z"),
                        s(:regopt)),
                      s(:send,
                        s(:send, nil, :runner), :new_test,
                        s(:nth_ref, 1))),
                    s(:when,
                      s(:regexp,
                        s(:str, "\\A(.* s) = \\z"),
                        s(:regopt)),
                      s(:send,
                        s(:send, nil, :runner), :add_status,
                        s(:send,
                          s(:str, " = "), :+,
                          s(:send,
                            s(:nth_ref, 1), :chomp)))),
                    s(:when,
                      s(:regexp,
                        s(:str, "\\A\\.+\\z"),
                        s(:regopt)),
                      s(:send,
                        s(:send, nil, :runner), :succeed)),
                    s(:when,
                      s(:regexp,
                        s(:str, "\\A[EFS]\\z"),
                        s(:regopt)),
                      s(:send,
                        s(:send, nil, :runner), :failed,
                        s(:lvar, :s))),
                    s(:send,
                      s(:gvar, :$stdout), :print,
                      s(:lvar, :s)))))))),
        s(:module,
          s(:const, nil, :LoadPathOption),
          s(:begin,
            s(:def, :non_options,
              s(:args,
                s(:arg, :files),
                s(:arg, :options)),
              s(:begin,
                s(:kwbegin,
                  s(:rescue,
                    s(:send, nil, :require,
                      s(:str, "rbconfig")),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :LoadError)), nil,
                      s(:begin,
                        s(:send, nil, :warn,
                          s(:dstr,
                            s(:begin,
                              s(:send,
                                s(:send, nil, :caller,
                                  s(:int, 1)), :[],
                                s(:int, 0))),
                            s(:str, ": warning: Parallel running disabled because can't get path to ruby; run specify with --ruby argument"))),
                        s(:send,
                          s(:lvar, :options), :[]=,
                          s(:sym, :parallel),
                          s(:nil)))),
                    s(:or_asgn,
                      s(:send,
                        s(:lvar, :options), :[],
                        s(:sym, :ruby)),
                      s(:array,
                        s(:send,
                          s(:const, nil, :RbConfig), :ruby))))),
                s(:zsuper))),
            s(:def, :setup_options,
              s(:args,
                s(:arg, :parser),
                s(:arg, :options)),
              s(:begin,
                s(:zsuper),
                s(:send,
                  s(:lvar, :parser), :separator,
                  s(:str, "load path options:")),
                s(:block,
                  s(:send,
                    s(:lvar, :parser), :on,
                    s(:str, "-Idirectory"),
                    s(:str, "Add library load path")),
                  s(:args,
                    s(:arg, :dirs)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :dirs), :split,
                        s(:str, ":")), :each),
                    s(:args,
                      s(:arg, :d)),
                    s(:send,
                      s(:gvar, :$LOAD_PATH), :unshift,
                      s(:lvar, :d)))))))),
        s(:module,
          s(:const, nil, :GlobOption),
          s(:begin,
            s(:cvasgn, :@@testfile_prefix,
              s(:str, "test")),
            s(:def, :setup_options,
              s(:args,
                s(:arg, :parser),
                s(:arg, :options)),
              s(:begin,
                s(:zsuper),
                s(:send,
                  s(:lvar, :parser), :separator,
                  s(:str, "globbing options:")),
                s(:block,
                  s(:send,
                    s(:lvar, :parser), :on,
                    s(:str, "-b"),
                    s(:str, "--basedir=DIR"),
                    s(:str, "Base directory of test suites.")),
                  s(:args,
                    s(:arg, :dir)),
                  s(:send,
                    s(:lvar, :options), :[]=,
                    s(:sym, :base_directory),
                    s(:lvar, :dir))),
                s(:block,
                  s(:send,
                    s(:lvar, :parser), :on,
                    s(:str, "-x"),
                    s(:str, "--exclude REGEXP"),
                    s(:str, "Exclude test files on pattern.")),
                  s(:args,
                    s(:arg, :pattern)),
                  s(:send,
                    s(:begin,
                      s(:or_asgn,
                        s(:send,
                          s(:lvar, :options), :[],
                          s(:sym, :reject)),
                        s(:array))), :<<,
                    s(:lvar, :pattern))))),
            s(:def, :non_options,
              s(:args,
                s(:arg, :files),
                s(:arg, :options)),
              s(:begin,
                s(:lvasgn, :paths,
                  s(:send,
                    s(:array,
                      s(:send,
                        s(:lvar, :options), :delete,
                        s(:sym, :base_directory)),
                      s(:nil)), :uniq)),
                s(:if,
                  s(:lvasgn, :reject,
                    s(:send,
                      s(:lvar, :options), :delete,
                      s(:sym, :reject))),
                  s(:lvasgn, :reject_pat,
                    s(:send,
                      s(:const, nil, :Regexp), :union,
                      s(:block,
                        s(:send,
                          s(:lvar, :reject), :map),
                        s(:args,
                          s(:arg, :r)),
                        s(:regexp,
                          s(:begin,
                            s(:lvar, :r)),
                          s(:regopt))))), nil),
                s(:block,
                  s(:send,
                    s(:lvar, :files), :map!),
                  s(:args,
                    s(:arg, :f)),
                  s(:begin,
                    s(:if,
                      s(:const,
                        s(:const, nil, :File), :ALT_SEPARATOR),
                      s(:lvasgn, :f,
                        s(:send,
                          s(:lvar, :f), :tr,
                          s(:const,
                            s(:const, nil, :File), :ALT_SEPARATOR),
                          s(:const,
                            s(:const, nil, :File), :SEPARATOR))), nil),
                    s(:or,
                      s(:block,
                        s(:send,
                          s(:begin,
                            s(:or,
                              s(:begin,
                                s(:if,
                                  s(:send,
                                    s(:regexp,
                                      s(:str, "\\A\\.\\.?(?:\\z|/)"),
                                      s(:regopt)), :!~,
                                    s(:lvar, :f)),
                                  s(:lvar, :paths), nil)),
                              s(:array,
                                s(:nil)))), :any?),
                        s(:args,
                          s(:arg, :prefix)),
                        s(:begin,
                          s(:if,
                            s(:lvar, :prefix),
                            s(:lvasgn, :path,
                              s(:if,
                                s(:send,
                                  s(:lvar, :f), :empty?),
                                s(:lvar, :prefix),
                                s(:dstr,
                                  s(:begin,
                                    s(:lvar, :prefix)),
                                  s(:str, "/"),
                                  s(:begin,
                                    s(:lvar, :f))))),
                            s(:begin,
                              s(:if,
                                s(:send,
                                  s(:lvar, :f), :empty?),
                                s(:next), nil),
                              s(:lvasgn, :path,
                                s(:lvar, :f)))),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:begin,
                                  s(:lvasgn, :match,
                                    s(:send,
                                      s(:const, nil, :Dir), :[],
                                      s(:dstr,
                                        s(:begin,
                                          s(:lvar, :path)),
                                        s(:str, "/**/"),
                                        s(:begin,
                                          s(:cvar, :@@testfile_prefix)),
                                        s(:str, "_*.rb"))))), :empty?), :!),
                            s(:begin,
                              s(:if,
                                s(:lvar, :reject),
                                s(:block,
                                  s(:send,
                                    s(:lvar, :match), :reject!),
                                  s(:args,
                                    s(:arg, :n)),
                                  s(:begin,
                                    s(:if,
                                      s(:lvar, :prefix),
                                      s(:send,
                                        s(:lvar, :n), :[],
                                        s(:irange,
                                          s(:begin,
                                            s(:send,
                                              s(:send,
                                                s(:lvar, :prefix), :length), :+,
                                              s(:int, 1))),
                                          s(:int, -1))), nil),
                                    s(:send,
                                      s(:lvar, :reject_pat), :=~,
                                      s(:lvar, :n)))), nil),
                              s(:break,
                                s(:lvar, :match))),
                            s(:if,
                              s(:and,
                                s(:or,
                                  s(:send,
                                    s(:lvar, :reject), :!),
                                  s(:send,
                                    s(:lvar, :reject_pat), :!~,
                                    s(:lvar, :f))),
                                s(:send,
                                  s(:const, nil, :File), :exist?,
                                  s(:lvar, :path))),
                              s(:break,
                                s(:lvar, :path)), nil)))),
                      s(:send, nil, :raise,
                        s(:const, nil, :ArgumentError),
                        s(:dstr,
                          s(:str, "file not found: "),
                          s(:begin,
                            s(:lvar, :f))))))),
                s(:send,
                  s(:lvar, :files), :flatten!),
                s(:super,
                  s(:lvar, :files),
                  s(:lvar, :options)))))),
        s(:module,
          s(:const, nil, :GCStressOption),
          s(:begin,
            s(:def, :setup_options,
              s(:args,
                s(:arg, :parser),
                s(:arg, :options)),
              s(:begin,
                s(:zsuper),
                s(:send,
                  s(:lvar, :parser), :separator,
                  s(:str, "GC options:")),
                s(:block,
                  s(:send,
                    s(:lvar, :parser), :on,
                    s(:str, "--[no-]gc-stress"),
                    s(:str, "Set GC.stress as true")),
                  s(:args,
                    s(:arg, :flag)),
                  s(:send,
                    s(:lvar, :options), :[]=,
                    s(:sym, :gc_stress),
                    s(:lvar, :flag))))),
            s(:def, :non_options,
              s(:args,
                s(:arg, :files),
                s(:arg, :options)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :options), :delete,
                    s(:sym, :gc_stress)),
                  s(:block,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :MiniTest), :Unit), :TestCase), :class_eval),
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :oldrun,
                        s(:send, nil, :instance_method,
                          s(:sym, :run))),
                      s(:block,
                        s(:send, nil, :define_method,
                          s(:sym, :run)),
                        s(:args,
                          s(:arg, :runner)),
                        s(:kwbegin,
                          s(:ensure,
                            s(:begin,
                              s(:masgn,
                                s(:mlhs,
                                  s(:lvasgn, :gc_stress),
                                  s(:send,
                                    s(:const, nil, :GC), :stress=)),
                                s(:array,
                                  s(:send,
                                    s(:const, nil, :GC), :stress),
                                  s(:true))),
                              s(:send,
                                s(:send,
                                  s(:lvar, :oldrun), :bind,
                                  s(:self)), :call,
                                s(:lvar, :runner))),
                            s(:send,
                              s(:const, nil, :GC), :stress=,
                              s(:lvar, :gc_stress))))))), nil),
                s(:zsuper))))),
        s(:module,
          s(:const, nil, :RequireFiles),
          s(:def, :non_options,
            s(:args,
              s(:arg, :files),
              s(:arg, :options)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:zsuper), :!),
                s(:return,
                  s(:false)), nil),
              s(:lvasgn, :errors,
                s(:hash)),
              s(:lvasgn, :result,
                s(:false)),
              s(:block,
                s(:send,
                  s(:lvar, :files), :each),
                s(:args,
                  s(:arg, :f)),
                s(:begin,
                  s(:lvasgn, :d,
                    s(:send,
                      s(:const, nil, :File), :dirname,
                      s(:lvasgn, :path,
                        s(:send,
                          s(:const, nil, :File), :realpath,
                          s(:lvar, :f))))),
                  s(:if,
                    s(:send,
                      s(:gvar, :$:), :include?,
                      s(:lvar, :d)), nil,
                    s(:send,
                      s(:gvar, :$:), :<<,
                      s(:lvar, :d))),
                  s(:kwbegin,
                    s(:rescue,
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:lvar, :options), :[],
                            s(:sym, :parallel)), nil,
                          s(:send, nil, :require,
                            s(:lvar, :path))),
                        s(:lvasgn, :result,
                          s(:true))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :LoadError)), nil,
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:lvar, :errors), :[],
                              s(:send,
                                s(:gvar, :$!), :message)),
                            s(:next), nil),
                          s(:send,
                            s(:lvar, :errors), :[]=,
                            s(:send,
                              s(:gvar, :$!), :message),
                            s(:true)),
                          s(:send, nil, :puts,
                            s(:dstr,
                              s(:begin,
                                s(:lvar, :f)),
                              s(:str, ": "),
                              s(:begin,
                                s(:gvar, :$!)))))), nil)))),
              s(:lvar, :result)))),
        s(:module,
          s(:const, nil, :ExcludesOption),
          s(:begin,
            s(:class,
              s(:const, nil, :ExcludedMethods),
              s(:send,
                s(:const, nil, :Struct), :new,
                s(:sym, :excludes)),
              s(:begin,
                s(:def, :exclude,
                  s(:args,
                    s(:arg, :name),
                    s(:arg, :reason)),
                  s(:send,
                    s(:send, nil, :excludes), :[]=,
                    s(:lvar, :name),
                    s(:lvar, :reason))),
                s(:def, :exclude_from,
                  s(:args,
                    s(:arg, :klass)),
                  s(:begin,
                    s(:lvasgn, :excludes,
                      s(:send,
                        s(:self), :excludes)),
                    s(:lvasgn, :pattern,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :excludes), :keys), :grep,
                            s(:const, nil, :Regexp)), :tap),
                        s(:args,
                          s(:arg, :k)),
                        s(:break,
                          s(:begin,
                            s(:if,
                              s(:send,
                                s(:lvar, :k), :empty?), nil,
                              s(:send,
                                s(:const, nil, :Regexp), :new,
                                s(:send,
                                  s(:lvar, :k), :join,
                                  s(:str, "|")))))))),
                    s(:block,
                      s(:send,
                        s(:lvar, :klass), :class_eval),
                      s(:args),
                      s(:begin,
                        s(:block,
                          s(:send,
                            s(:send, nil, :public_instance_methods,
                              s(:false)), :each),
                          s(:args,
                            s(:arg, :method)),
                          s(:if,
                            s(:or,
                              s(:send,
                                s(:lvar, :excludes), :[],
                                s(:lvar, :method)),
                              s(:begin,
                                s(:and,
                                  s(:lvar, :pattern),
                                  s(:send,
                                    s(:lvar, :pattern), :=~,
                                    s(:lvar, :method))))),
                            s(:send, nil, :remove_method,
                              s(:lvar, :method)), nil)),
                        s(:block,
                          s(:send,
                            s(:send, nil, :public_instance_methods,
                              s(:true)), :each),
                          s(:args,
                            s(:arg, :method)),
                          s(:if,
                            s(:or,
                              s(:send,
                                s(:lvar, :excludes), :[],
                                s(:lvar, :method)),
                              s(:begin,
                                s(:and,
                                  s(:lvar, :pattern),
                                  s(:send,
                                    s(:lvar, :pattern), :=~,
                                    s(:lvar, :method))))),
                            s(:send, nil, :undef_method,
                              s(:lvar, :method)), nil)))))),
                s(:defs,
                  s(:self), :load,
                  s(:args,
                    s(:arg, :dirs),
                    s(:arg, :name)),
                  s(:begin,
                    s(:if,
                      s(:and,
                        s(:lvar, :dirs),
                        s(:lvar, :name)), nil,
                      s(:return)),
                    s(:lvasgn, :instance,
                      s(:nil)),
                    s(:block,
                      s(:send,
                        s(:lvar, :dirs), :each),
                      s(:args,
                        s(:arg, :dir)),
                      s(:begin,
                        s(:lvasgn, :path,
                          s(:send,
                            s(:const, nil, :File), :join,
                            s(:lvar, :dir),
                            s(:send,
                              s(:send,
                                s(:lvar, :name), :gsub,
                                s(:regexp,
                                  s(:str, "::"),
                                  s(:regopt)),
                                s(:str, "/")), :+,
                              s(:str, ".rb")))),
                        s(:kwbegin,
                          s(:rescue,
                            s(:lvasgn, :src,
                              s(:send,
                                s(:const, nil, :File), :read,
                                s(:lvar, :path))),
                            s(:resbody,
                              s(:array,
                                s(:const,
                                  s(:const, nil, :Errno), :ENOENT)), nil,
                              s(:nil)),
                            s(:begin,
                              s(:or_asgn,
                                s(:lvasgn, :instance),
                                s(:send, nil, :new,
                                  s(:hash))),
                              s(:send,
                                s(:lvar, :instance), :instance_eval,
                                s(:lvar, :src))))))),
                    s(:lvar, :instance))))),
            s(:def, :setup_options,
              s(:args,
                s(:arg, :parser),
                s(:arg, :options)),
              s(:begin,
                s(:zsuper),
                s(:if,
                  s(:lvasgn, :excludes,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "EXCLUDES"))),
                  s(:lvasgn, :excludes,
                    s(:send,
                      s(:lvar, :excludes), :split,
                      s(:const,
                        s(:const, nil, :File), :PATH_SEPARATOR))), nil),
                s(:send,
                  s(:lvar, :options), :[]=,
                  s(:sym, :excludes),
                  s(:or,
                    s(:lvar, :excludes),
                    s(:array))),
                s(:block,
                  s(:send,
                    s(:lvar, :parser), :on,
                    s(:str, "-X"),
                    s(:str, "--excludes-dir DIRECTORY"),
                    s(:str, "Directory name of exclude files")),
                  s(:args,
                    s(:arg, :d)),
                  s(:send,
                    s(:send,
                      s(:lvar, :options), :[],
                      s(:sym, :excludes)), :concat,
                    s(:send,
                      s(:lvar, :d), :split,
                      s(:const,
                        s(:const, nil, :File), :PATH_SEPARATOR)))))),
            s(:def, :_run_suite,
              s(:args,
                s(:arg, :suite),
                s(:arg, :type)),
              s(:begin,
                s(:if,
                  s(:lvasgn, :ex,
                    s(:send,
                      s(:const, nil, :ExcludedMethods), :load,
                      s(:send,
                        s(:ivar, :@options), :[],
                        s(:sym, :excludes)),
                      s(:send,
                        s(:lvar, :suite), :name))),
                  s(:send,
                    s(:lvar, :ex), :exclude_from,
                    s(:lvar, :suite)), nil),
                s(:zsuper))))),
        s(:class,
          s(:const, nil, :Runner),
          s(:const,
            s(:const, nil, :MiniTest), :Unit),
          s(:begin,
            s(:send, nil, :include,
              s(:const,
                s(:const,
                  s(:const, nil, :Test), :Unit), :Options)),
            s(:send, nil, :include,
              s(:const,
                s(:const,
                  s(:const, nil, :Test), :Unit), :StatusLine)),
            s(:send, nil, :include,
              s(:const,
                s(:const,
                  s(:const, nil, :Test), :Unit), :Parallel)),
            s(:send, nil, :include,
              s(:const,
                s(:const,
                  s(:const, nil, :Test), :Unit), :Skipping)),
            s(:send, nil, :include,
              s(:const,
                s(:const,
                  s(:const, nil, :Test), :Unit), :GlobOption)),
            s(:send, nil, :include,
              s(:const,
                s(:const,
                  s(:const, nil, :Test), :Unit), :LoadPathOption)),
            s(:send, nil, :include,
              s(:const,
                s(:const,
                  s(:const, nil, :Test), :Unit), :GCStressOption)),
            s(:send, nil, :include,
              s(:const,
                s(:const,
                  s(:const, nil, :Test), :Unit), :ExcludesOption)),
            s(:send, nil, :include,
              s(:const,
                s(:const,
                  s(:const, nil, :Test), :Unit), :RunCount)),
            s(:sclass,
              s(:self),
              s(:undef,
                s(:sym, :autorun))),
            s(:cvasgn, :@@stop_auto_run,
              s(:false)),
            s(:defs,
              s(:self), :autorun,
              s(:args),
              s(:begin,
                s(:if,
                  s(:cvar, :@@installed_at_exit), nil,
                  s(:block,
                    s(:send, nil, :at_exit),
                    s(:args),
                    s(:if,
                      s(:cvar, :@@stop_auto_run), nil,
                      s(:block,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Test), :Unit), :RunCount), :run_once),
                        s(:args),
                        s(:send, nil, :exit,
                          s(:or,
                            s(:send,
                              s(:send,
                                s(:const,
                                  s(:const,
                                    s(:const, nil, :Test), :Unit), :Runner), :new), :run,
                              s(:const, nil, :ARGV)),
                            s(:true))))))),
                s(:cvasgn, :@@installed_at_exit,
                  s(:true)))),
            s(:alias,
              s(:sym, :mini_run_suite),
              s(:sym, :_run_suite)),
            s(:def, :puke,
              s(:args,
                s(:arg, :klass),
                s(:arg, :meth),
                s(:arg, :e)),
              s(:begin,
                s(:lvasgn, :n,
                  s(:send,
                    s(:send, nil, :report), :size)),
                s(:lvasgn, :rep,
                  s(:zsuper)),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:const,
                        s(:const, nil, :MiniTest), :Skip), :===,
                      s(:lvar, :e)),
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "no message given\\z"),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :e), :message))),
                  s(:begin,
                    s(:send,
                      s(:send, nil, :report), :slice!,
                      s(:irange,
                        s(:lvar, :n),
                        s(:int, -1))),
                    s(:lvasgn, :rep,
                      s(:str, "."))), nil),
                s(:lvar, :rep))))),
        s(:class,
          s(:const, nil, :AutoRunner), nil,
          s(:begin,
            s(:class,
              s(:const, nil, :Runner),
              s(:const,
                s(:const,
                  s(:const, nil, :Test), :Unit), :Runner),
              s(:send, nil, :include,
                s(:const,
                  s(:const,
                    s(:const, nil, :Test), :Unit), :RequireFiles))),
            s(:send, nil, :attr_accessor,
              s(:sym, :to_run),
              s(:sym, :options)),
            s(:def, :initialize,
              s(:args,
                s(:optarg, :force_standalone,
                  s(:false)),
                s(:optarg, :default_dir,
                  s(:nil)),
                s(:optarg, :argv,
                  s(:const, nil, :ARGV))),
              s(:begin,
                s(:ivasgn, :@force_standalone,
                  s(:lvar, :force_standalone)),
                s(:ivasgn, :@runner,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Runner), :new),
                    s(:args,
                      s(:arg, :files),
                      s(:arg, :options)),
                    s(:begin,
                      s(:or_asgn,
                        s(:send,
                          s(:lvar, :options), :[],
                          s(:sym, :base_directory)),
                        s(:lvar, :default_dir)),
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:lvar, :files), :empty?),
                          s(:lvar, :default_dir)),
                        s(:send,
                          s(:lvar, :files), :<<,
                          s(:lvar, :default_dir)), nil),
                      s(:ivasgn, :@to_run,
                        s(:lvar, :files)),
                      s(:if,
                        s(:send, nil, :block_given?),
                        s(:yield,
                          s(:self)), nil),
                      s(:lvar, :files)))),
                s(:send,
                  s(:const, nil, :Runner), :runner=,
                  s(:ivar, :@runner)),
                s(:ivasgn, :@options,
                  s(:send,
                    s(:ivar, :@runner), :option_parser)),
                s(:if,
                  s(:ivar, :@force_standalone),
                  s(:send,
                    s(:send,
                      s(:ivar, :@options), :banner), :sub!,
                    s(:regexp,
                      s(:str, "\\[options\\]"),
                      s(:regopt)),
                    s(:str, "\\& tests...")), nil),
                s(:ivasgn, :@argv,
                  s(:lvar, :argv)))),
            s(:def, :process_args,
              s(:args,
                s(:restarg, :args)),
              s(:begin,
                s(:send,
                  s(:ivar, :@runner), :process_args,
                  s(:splat,
                    s(:lvar, :args))),
                s(:send,
                  s(:send,
                    s(:ivar, :@to_run), :empty?), :!))),
            s(:def, :run,
              s(:args),
              s(:begin,
                s(:if,
                  s(:and,
                    s(:ivar, :@force_standalone),
                    s(:send,
                      s(:send, nil, :process_args,
                        s(:ivar, :@argv)), :!)),
                  s(:send, nil, :abort,
                    s(:send,
                      s(:ivar, :@options), :banner)), nil),
                s(:or,
                  s(:send,
                    s(:ivar, :@runner), :run,
                    s(:ivar, :@argv)),
                  s(:true)))),
            s(:defs,
              s(:self), :run,
              s(:args,
                s(:restarg, :args)),
              s(:send,
                s(:send, nil, :new,
                  s(:splat,
                    s(:lvar, :args))), :run)))),
        s(:class,
          s(:const, nil, :ProxyError),
          s(:const, nil, :StandardError),
          s(:begin,
            s(:def, :initialize,
              s(:args,
                s(:arg, :ex)),
              s(:begin,
                s(:ivasgn, :@message,
                  s(:send,
                    s(:lvar, :ex), :message)),
                s(:ivasgn, :@backtrace,
                  s(:send,
                    s(:lvar, :ex), :backtrace)))),
            s(:send, nil, :attr_accessor,
              s(:sym, :message),
              s(:sym, :backtrace))))))),
  s(:module,
    s(:const, nil, :MiniTest),
    s(:class,
      s(:const, nil, :Unit), nil, nil)),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :MiniTest), :Unit), :TestCase), nil,
    s(:begin,
      s(:lvasgn, :test_order,
        s(:send,
          s(:self), :test_order)),
      s(:sclass,
        s(:self),
        s(:begin,
          s(:send, nil, :attr_writer,
            s(:sym, :test_order)),
          s(:undef,
            s(:sym, :test_order)))),
      s(:defs,
        s(:self), :test_order,
        s(:args),
        s(:if,
          s(:defined?,
            s(:ivar, :@test_order)),
          s(:ivar, :@test_order),
          s(:send,
            s(:send, nil, :superclass), :test_order))),
      s(:send,
        s(:self), :test_order=,
        s(:lvar, :test_order)),
      s(:undef,
        s(:sym, :run_test)),
      s(:casgn, nil, :RUN_TEST_TRACE,
        s(:send,
          s(:dstr,
            s(:begin,
              s(:str, "(string)")),
            s(:str, ":"),
            s(:begin,
              s(:send,
                s(:int, 1015), :+,
                s(:int, 3))),
            s(:str, ":in `run_test'")), :freeze)),
      s(:def, :run_test,
        s(:args,
          s(:arg, :name)),
        s(:ensure,
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :progname),
                s(:gvasgn, :$0)),
              s(:array,
                s(:gvar, :$0),
                s(:dstr,
                  s(:begin,
                    s(:gvar, :$0)),
                  s(:str, ": "),
                  s(:begin,
                    s(:send,
                      s(:self), :class)),
                  s(:str, "#"),
                  s(:begin,
                    s(:lvar, :name))))),
            s(:send,
              s(:self), :__send__,
              s(:lvar, :name))),
          s(:begin,
            s(:if,
              s(:gvar, :$@),
              s(:send,
                s(:gvar, :$@), :delete,
                s(:const, nil, :RUN_TEST_TRACE)), nil),
            s(:gvasgn, :$0,
              s(:lvar, :progname))))))),
  s(:send,
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :Runner), :autorun))
