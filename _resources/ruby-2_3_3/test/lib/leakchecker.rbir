s(:class,
  s(:const, nil, :LeakChecker), nil,
  s(:begin,
    s(:def, :initialize,
      s(:args),
      s(:begin,
        s(:ivasgn, :@fd_info,
          s(:send, nil, :find_fds)),
        s(:ivasgn, :@tempfile_info,
          s(:send, nil, :find_tempfiles)),
        s(:ivasgn, :@thread_info,
          s(:send, nil, :find_threads)),
        s(:ivasgn, :@env_info,
          s(:send, nil, :find_env)))),
    s(:def, :check,
      s(:args,
        s(:arg, :test_name)),
      s(:begin,
        s(:lvasgn, :leaks,
          s(:array,
            s(:send, nil, :check_fd_leak,
              s(:lvar, :test_name)),
            s(:send, nil, :check_thread_leak,
              s(:lvar, :test_name)),
            s(:send, nil, :check_tempfile_leak,
              s(:lvar, :test_name)),
            s(:send, nil, :check_env,
              s(:lvar, :test_name)))),
        s(:if,
          s(:send,
            s(:lvar, :leaks), :any?),
          s(:send,
            s(:const, nil, :GC), :start), nil))),
    s(:def, :find_fds,
      s(:args),
      s(:begin,
        s(:if,
          s(:and,
            s(:send,
              s(:const, nil, :IO), :respond_to?,
              s(:sym, :console)),
            s(:send,
              s(:send,
                s(:begin,
                  s(:lvasgn, :m,
                    s(:send,
                      s(:const, nil, :IO), :method,
                      s(:sym, :console)))), :arity), :nonzero?)),
          s(:send,
            s(:lvar, :m), :[],
            s(:sym, :close)), nil),
        s(:lvasgn, :fd_dir,
          s(:str, "/proc/self/fd")),
        s(:if,
          s(:send,
            s(:const, nil, :File), :directory?,
            s(:lvar, :fd_dir)),
          s(:begin,
            s(:lvasgn, :fds,
              s(:block,
                s(:send,
                  s(:const, nil, :Dir), :open,
                  s(:lvar, :fd_dir)),
                s(:args,
                  s(:arg, :d)),
                s(:begin,
                  s(:lvasgn, :a,
                    s(:send,
                      s(:lvar, :d), :grep,
                      s(:regexp,
                        s(:str, "\\A\\d+\\z"),
                        s(:regopt)),
                      s(:block_pass,
                        s(:sym, :to_i)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :d), :respond_to?,
                      s(:sym, :fileno)),
                    s(:op_asgn,
                      s(:lvasgn, :a), :-,
                      s(:array,
                        s(:send,
                          s(:lvar, :d), :fileno))), nil),
                  s(:lvar, :a)))),
            s(:send,
              s(:lvar, :fds), :sort)),
          s(:array)))),
    s(:def, :check_fd_leak,
      s(:args,
        s(:arg, :test_name)),
      s(:begin,
        s(:lvasgn, :leaked,
          s(:false)),
        s(:lvasgn, :live1,
          s(:ivar, :@fd_info)),
        s(:lvasgn, :live2,
          s(:send, nil, :find_fds)),
        s(:lvasgn, :fd_closed,
          s(:send,
            s(:lvar, :live1), :-,
            s(:lvar, :live2))),
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :fd_closed), :empty?), :!),
          s(:block,
            s(:send,
              s(:lvar, :fd_closed), :each),
            s(:args,
              s(:arg, :fd)),
            s(:send, nil, :puts,
              s(:dstr,
                s(:str, "Closed file descriptor: "),
                s(:begin,
                  s(:lvar, :test_name)),
                s(:str, ": "),
                s(:begin,
                  s(:lvar, :fd))))), nil),
        s(:lvasgn, :fd_leaked,
          s(:send,
            s(:lvar, :live2), :-,
            s(:lvar, :live1))),
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :fd_leaked), :empty?), :!),
          s(:begin,
            s(:lvasgn, :leaked,
              s(:true)),
            s(:lvasgn, :h,
              s(:hash)),
            s(:block,
              s(:send,
                s(:const, nil, :ObjectSpace), :each_object,
                s(:const, nil, :IO)),
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:lvasgn, :inspect,
                  s(:send,
                    s(:lvar, :io), :inspect)),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:lvasgn, :autoclose,
                        s(:send,
                          s(:lvar, :io), :autoclose?)),
                      s(:lvasgn, :fd,
                        s(:send,
                          s(:lvar, :io), :fileno))),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :IOError)), nil,
                      s(:next)), nil)),
                s(:send,
                  s(:begin,
                    s(:or_asgn,
                      s(:send,
                        s(:lvar, :h), :[],
                        s(:lvar, :fd)),
                      s(:array))), :<<,
                  s(:array,
                    s(:lvar, :io),
                    s(:lvar, :autoclose),
                    s(:lvar, :inspect))))),
            s(:block,
              s(:send,
                s(:lvar, :fd_leaked), :each),
              s(:args,
                s(:arg, :fd)),
              s(:begin,
                s(:lvasgn, :str,
                  s(:str, "")),
                s(:if,
                  s(:send,
                    s(:lvar, :h), :[],
                    s(:lvar, :fd)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :str), :<<,
                      s(:str, " :")),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:block,
                            s(:send,
                              s(:send,
                                s(:lvar, :h), :[],
                                s(:lvar, :fd)), :map),
                            s(:args,
                              s(:arg, :io),
                              s(:arg, :autoclose),
                              s(:arg, :inspect)),
                            s(:begin,
                              s(:lvasgn, :s,
                                s(:send,
                                  s(:str, " "), :+,
                                  s(:lvar, :inspect))),
                              s(:if,
                                s(:send,
                                  s(:lvar, :autoclose), :!),
                                s(:send,
                                  s(:lvar, :s), :<<,
                                  s(:str, "(not-autoclose)")), nil),
                              s(:lvar, :s))), :sort), :each),
                      s(:args,
                        s(:arg, :s)),
                      s(:send,
                        s(:lvar, :str), :<<,
                        s(:lvar, :s)))), nil),
                s(:send, nil, :puts,
                  s(:dstr,
                    s(:str, "Leaked file descriptor: "),
                    s(:begin,
                      s(:lvar, :test_name)),
                    s(:str, ": "),
                    s(:begin,
                      s(:lvar, :fd)),
                    s(:begin,
                      s(:lvar, :str)))))),
            s(:block,
              s(:send,
                s(:lvar, :h), :each),
              s(:args,
                s(:arg, :fd),
                s(:arg, :list)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :list), :length), :<=,
                    s(:int, 1)),
                  s(:next), nil),
                s(:if,
                  s(:send,
                    s(:int, 1), :<,
                    s(:block,
                      s(:send,
                        s(:lvar, :list), :count),
                      s(:args,
                        s(:arg, :io),
                        s(:arg, :autoclose),
                        s(:arg, :inspect)),
                      s(:lvar, :autoclose))),
                  s(:begin,
                    s(:lvasgn, :str,
                      s(:send,
                        s(:send,
                          s(:block,
                            s(:send,
                              s(:lvar, :list), :map),
                            s(:args,
                              s(:arg, :io),
                              s(:arg, :autoclose),
                              s(:arg, :inspect)),
                            s(:send,
                              s(:dstr,
                                s(:str, " "),
                                s(:begin,
                                  s(:lvar, :inspect))), :+,
                              s(:begin,
                                s(:if,
                                  s(:lvar, :autoclose),
                                  s(:str, "(autoclose)"),
                                  s(:str, ""))))), :sort), :join)),
                    s(:send, nil, :puts,
                      s(:dstr,
                        s(:str, "Multiple autoclose IO object for a file descriptor:"),
                        s(:begin,
                          s(:lvar, :str))))), nil)))), nil),
        s(:ivasgn, :@fd_info,
          s(:lvar, :live2)),
        s(:return,
          s(:lvar, :leaked)))),
    s(:def, :extend_tempfile_counter,
      s(:args),
      s(:begin,
        s(:if,
          s(:defined?,
            s(:const,
              s(:const, nil, :LeakChecker), :TempfileCounter)),
          s(:return), nil),
        s(:lvasgn, :m,
          s(:block,
            s(:send,
              s(:const, nil, :Module), :new),
            s(:args),
            s(:begin,
              s(:ivasgn, :@count,
                s(:int, 0)),
              s(:sclass,
                s(:self),
                s(:send, nil, :attr_accessor,
                  s(:sym, :count))),
              s(:def, :new,
                s(:args,
                  s(:arg, :data)),
                s(:begin,
                  s(:op_asgn,
                    s(:send,
                      s(:const,
                        s(:const, nil, :LeakChecker), :TempfileCounter), :count), :+,
                    s(:int, 1)),
                  s(:super,
                    s(:lvar, :data))))))),
        s(:send,
          s(:const, nil, :LeakChecker), :const_set,
          s(:sym, :TempfileCounter),
          s(:lvar, :m)),
        s(:sclass,
          s(:const,
            s(:const, nil, :Tempfile), :Remover),
          s(:send, nil, :prepend,
            s(:const,
              s(:const, nil, :LeakChecker), :TempfileCounter))))),
    s(:def, :find_tempfiles,
      s(:args,
        s(:optarg, :prev_count,
          s(:int, -1))),
      s(:begin,
        s(:if,
          s(:defined?,
            s(:const, nil, :Tempfile)), nil,
          s(:return,
            s(:array,
              s(:lvar, :prev_count),
              s(:array)))),
        s(:send, nil, :extend_tempfile_counter),
        s(:lvasgn, :count,
          s(:send,
            s(:const, nil, :TempfileCounter), :count)),
        s(:if,
          s(:send,
            s(:lvar, :prev_count), :==,
            s(:lvar, :count)),
          s(:array,
            s(:lvar, :prev_count),
            s(:array)),
          s(:begin,
            s(:lvasgn, :tempfiles,
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :ObjectSpace), :each_object,
                    s(:const, nil, :Tempfile)), :find_all),
                s(:args,
                  s(:arg, :t)),
                s(:send,
                  s(:lvar, :t), :path))),
            s(:array,
              s(:lvar, :count),
              s(:lvar, :tempfiles)))))),
    s(:def, :check_tempfile_leak,
      s(:args,
        s(:arg, :test_name)),
      s(:begin,
        s(:if,
          s(:defined?,
            s(:const, nil, :Tempfile)), nil,
          s(:return,
            s(:false))),
        s(:masgn,
          s(:mlhs,
            s(:lvasgn, :count1),
            s(:lvasgn, :initial_tempfiles)),
          s(:ivar, :@tempfile_info)),
        s(:masgn,
          s(:mlhs,
            s(:lvasgn, :count2),
            s(:lvasgn, :current_tempfiles)),
          s(:send, nil, :find_tempfiles,
            s(:lvar, :count1))),
        s(:lvasgn, :leaked,
          s(:false)),
        s(:lvasgn, :tempfiles_leaked,
          s(:send,
            s(:lvar, :current_tempfiles), :-,
            s(:lvar, :initial_tempfiles))),
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :tempfiles_leaked), :empty?), :!),
          s(:begin,
            s(:lvasgn, :leaked,
              s(:true)),
            s(:lvasgn, :list,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :tempfiles_leaked), :map),
                  s(:args,
                    s(:arg, :t)),
                  s(:send,
                    s(:lvar, :t), :inspect)), :sort)),
            s(:block,
              s(:send,
                s(:lvar, :list), :each),
              s(:args,
                s(:arg, :str)),
              s(:send, nil, :puts,
                s(:dstr,
                  s(:str, "Leaked tempfile: "),
                  s(:begin,
                    s(:lvar, :test_name)),
                  s(:str, ": "),
                  s(:begin,
                    s(:lvar, :str))))),
            s(:block,
              s(:send,
                s(:lvar, :tempfiles_leaked), :each),
              s(:args,
                s(:arg, :t)),
              s(:send,
                s(:lvar, :t), :close!))), nil),
        s(:ivasgn, :@tempfile_info,
          s(:array,
            s(:lvar, :count2),
            s(:lvar, :initial_tempfiles))),
        s(:return,
          s(:lvar, :leaked)))),
    s(:def, :find_threads,
      s(:args),
      s(:block,
        s(:send,
          s(:send,
            s(:const, nil, :Thread), :list), :find_all),
        s(:args,
          s(:arg, :t)),
        s(:and,
          s(:and,
            s(:send,
              s(:lvar, :t), :!=,
              s(:send,
                s(:const, nil, :Thread), :current)),
            s(:send,
              s(:regexp,
                s(:str, "\\AWEBrick::"),
                s(:regopt)), :!~,
              s(:send,
                s(:send,
                  s(:lvar, :t), :class), :name))),
          s(:send,
            s(:lvar, :t), :alive?)))),
    s(:def, :check_thread_leak,
      s(:args,
        s(:arg, :test_name)),
      s(:begin,
        s(:lvasgn, :live1,
          s(:ivar, :@thread_info)),
        s(:lvasgn, :live2,
          s(:send, nil, :find_threads)),
        s(:lvasgn, :thread_finished,
          s(:send,
            s(:lvar, :live1), :-,
            s(:lvar, :live2))),
        s(:lvasgn, :leaked,
          s(:false)),
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :thread_finished), :empty?), :!),
          s(:begin,
            s(:lvasgn, :list,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :thread_finished), :map),
                  s(:args,
                    s(:arg, :t)),
                  s(:send,
                    s(:lvar, :t), :inspect)), :sort)),
            s(:block,
              s(:send,
                s(:lvar, :list), :each),
              s(:args,
                s(:arg, :str)),
              s(:send, nil, :puts,
                s(:dstr,
                  s(:str, "Finished thread: "),
                  s(:begin,
                    s(:lvar, :test_name)),
                  s(:str, ": "),
                  s(:begin,
                    s(:lvar, :str)))))), nil),
        s(:lvasgn, :thread_leaked,
          s(:send,
            s(:lvar, :live2), :-,
            s(:lvar, :live1))),
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :thread_leaked), :empty?), :!),
          s(:begin,
            s(:lvasgn, :leaked,
              s(:true)),
            s(:lvasgn, :list,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :thread_leaked), :map),
                  s(:args,
                    s(:arg, :t)),
                  s(:send,
                    s(:lvar, :t), :inspect)), :sort)),
            s(:block,
              s(:send,
                s(:lvar, :list), :each),
              s(:args,
                s(:arg, :str)),
              s(:send, nil, :puts,
                s(:dstr,
                  s(:str, "Leaked thread: "),
                  s(:begin,
                    s(:lvar, :test_name)),
                  s(:str, ": "),
                  s(:begin,
                    s(:lvar, :str)))))), nil),
        s(:ivasgn, :@thread_info,
          s(:lvar, :live2)),
        s(:return,
          s(:lvar, :leaked)))),
    s(:def, :find_env,
      s(:args),
      s(:send,
        s(:const, nil, :ENV), :to_h)),
    s(:def, :check_env,
      s(:args,
        s(:arg, :test_name)),
      s(:begin,
        s(:lvasgn, :old_env,
          s(:ivar, :@env_info)),
        s(:lvasgn, :new_env,
          s(:send,
            s(:const, nil, :ENV), :to_h)),
        s(:if,
          s(:send,
            s(:lvar, :old_env), :==,
            s(:lvar, :new_env)),
          s(:return,
            s(:false)), nil),
        s(:block,
          s(:send,
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :old_env), :keys), :|,
                  s(:send,
                    s(:lvar, :new_env), :keys))), :sort), :each),
          s(:args,
            s(:arg, :k)),
          s(:if,
            s(:send,
              s(:lvar, :old_env), :has_key?,
              s(:lvar, :k)),
            s(:if,
              s(:send,
                s(:lvar, :new_env), :has_key?,
                s(:lvar, :k)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :old_env), :[],
                    s(:lvar, :k)), :!=,
                  s(:send,
                    s(:lvar, :new_env), :[],
                    s(:lvar, :k))),
                s(:send, nil, :puts,
                  s(:dstr,
                    s(:str, "Environment variable changed: "),
                    s(:begin,
                      s(:lvar, :test_name)),
                    s(:str, " : "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :k), :inspect)),
                    s(:str, " changed : "),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :old_env), :[],
                          s(:lvar, :k)), :inspect)),
                    s(:str, " -> "),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :new_env), :[],
                          s(:lvar, :k)), :inspect)))), nil),
              s(:send, nil, :puts,
                s(:dstr,
                  s(:str, "Environment variable changed: "),
                  s(:begin,
                    s(:lvar, :test_name)),
                  s(:str, " : "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :k), :inspect)),
                  s(:str, " deleted")))),
            s(:if,
              s(:send,
                s(:lvar, :new_env), :has_key?,
                s(:lvar, :k)),
              s(:send, nil, :puts,
                s(:dstr,
                  s(:str, "Environment variable changed: "),
                  s(:begin,
                    s(:lvar, :test_name)),
                  s(:str, " : "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :k), :inspect)),
                  s(:str, " added"))),
              s(:send, nil, :flunk,
                s(:str, "unreachable"))))),
        s(:ivasgn, :@env_info,
          s(:lvar, :new_env)),
        s(:return,
          s(:true)))),
    s(:def, :puts,
      s(:args,
        s(:restarg, :a)),
      s(:send,
        s(:send,
          s(:const,
            s(:const, nil, :MiniTest), :Unit), :output), :puts,
        s(:splat,
          s(:lvar, :a))))))
