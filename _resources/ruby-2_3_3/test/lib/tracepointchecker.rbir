s(:begin,
  s(:if,
    s(:defined?,
      s(:send,
        s(:const, nil, :TracePoint), :stat)),
    s(:module,
      s(:const, nil, :TracePointChecker),
      s(:begin,
        s(:casgn, nil, :STATE,
          s(:hash,
            s(:pair,
              s(:sym, :count),
              s(:int, 0)),
            s(:pair,
              s(:sym, :running),
              s(:false)))),
        s(:module,
          s(:const, nil, :ZombieTraceHunter),
          s(:begin,
            s(:def, :before_setup,
              s(:args),
              s(:begin,
                s(:ivasgn, :@tracepoint_captured_stat,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:const, nil, :TracePoint), :stat), :map),
                    s(:args,
                      s(:arg, :k),
                      s(:mlhs,
                        s(:arg, :activated),
                        s(:arg, :_deleted))),
                    s(:array,
                      s(:lvar, :k),
                      s(:lvar, :activated)))),
                s(:zsuper))),
            s(:def, :after_teardown,
              s(:args),
              s(:begin,
                s(:zsuper),
                s(:send, nil, :assert_equal,
                  s(:ivar, :@tracepoint_captured_stat),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:const, nil, :TracePoint), :stat), :map),
                    s(:args,
                      s(:arg, :k),
                      s(:mlhs,
                        s(:arg, :activated),
                        s(:arg, :_deleted))),
                    s(:array,
                      s(:lvar, :k),
                      s(:lvar, :activated))),
                  s(:str, "The number of active trace events was changed")),
                s(:if,
                  s(:send,
                    s(:const, nil, :STATE), :[],
                    s(:sym, :running)),
                  s(:send,
                    s(:const, nil, :TracePointChecker), :check), nil))))),
        s(:casgn, nil, :MAIN_THREAD,
          s(:send,
            s(:const, nil, :Thread), :current)),
        s(:casgn, nil, :TRACES,
          s(:array)),
        s(:defs,
          s(:self), :prefix,
          s(:args,
            s(:arg, :event)),
          s(:case,
            s(:lvar, :event),
            s(:when,
              s(:sym, :call),
              s(:sym, :return),
              s(:sym, :n)),
            s(:when,
              s(:sym, :c_call),
              s(:sym, :c_return),
              s(:sym, :c)),
            s(:when,
              s(:sym, :b_call),
              s(:sym, :b_return),
              s(:sym, :b)), nil)),
        s(:defs,
          s(:self), :clear_call_stack,
          s(:args),
          s(:send,
            s(:send,
              s(:const, nil, :Thread), :current), :[]=,
            s(:sym, :call_stack),
            s(:array))),
        s(:defs,
          s(:self), :call_stack,
          s(:args),
          s(:begin,
            s(:lvasgn, :stack,
              s(:send,
                s(:send,
                  s(:const, nil, :Thread), :current), :[],
                s(:sym, :call_stack))),
            s(:if,
              s(:lvar, :stack), nil,
              s(:lvasgn, :stack,
                s(:send, nil, :clear_call_stack))),
            s(:lvar, :stack))),
        s(:defs,
          s(:self), :verbose_out,
          s(:args,
            s(:arg, :label),
            s(:arg, :method)),
          s(:send, nil, :puts,
            s(:hash,
              s(:pair,
                s(:lvar, :label),
                s(:send, nil, :call_stack)),
              s(:pair,
                s(:sym, :count),
                s(:send,
                  s(:const, nil, :STATE), :[],
                  s(:sym, :count))),
              s(:pair,
                s(:sym, :method),
                s(:lvar, :method))))),
        s(:defs,
          s(:self), :method_label,
          s(:args,
            s(:arg, :tp)),
          s(:dstr,
            s(:begin,
              s(:send, nil, :prefix,
                s(:send,
                  s(:lvar, :tp), :event))),
            s(:str, "#"),
            s(:begin,
              s(:send,
                s(:lvar, :tp), :method_id)))),
        s(:defs,
          s(:self), :start,
          s(:args,
            s(:kwoptarg, :verbose,
              s(:false)),
            s(:kwoptarg, :stop_at_failure,
              s(:false))),
          s(:begin,
            s(:lvasgn, :call_events,
              s(:array,
                s(:sym, :a_call))),
            s(:lvasgn, :return_events,
              s(:array,
                s(:sym, :a_return))),
            s(:send, nil, :clear_call_stack),
            s(:send,
              s(:const, nil, :STATE), :[]=,
              s(:sym, :running),
              s(:true)),
            s(:send,
              s(:const, nil, :TRACES), :<<,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:splat,
                    s(:lvar, :call_events))),
                s(:args,
                  s(:arg, :tp)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Thread), :current), :!=,
                      s(:const, nil, :MAIN_THREAD)),
                    s(:next), nil),
                  s(:lvasgn, :method,
                    s(:send, nil, :method_label,
                      s(:lvar, :tp))),
                  s(:send,
                    s(:send, nil, :call_stack), :push,
                    s(:lvar, :method)),
                  s(:op_asgn,
                    s(:send,
                      s(:const, nil, :STATE), :[],
                      s(:sym, :count)), :+,
                    s(:int, 1)),
                  s(:if,
                    s(:lvar, :verbose),
                    s(:send, nil, :verbose_out,
                      s(:sym, :psuh),
                      s(:lvar, :method)), nil)))),
            s(:send,
              s(:const, nil, :TRACES), :<<,
              s(:block,
                s(:send,
                  s(:const, nil, :TracePoint), :new,
                  s(:splat,
                    s(:lvar, :return_events))),
                s(:args,
                  s(:arg, :tp)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Thread), :current), :!=,
                      s(:const, nil, :MAIN_THREAD)),
                    s(:next), nil),
                  s(:op_asgn,
                    s(:send,
                      s(:const, nil, :STATE), :[],
                      s(:sym, :count)), :+,
                    s(:int, 1)),
                  s(:lvasgn, :method,
                    s(:dstr,
                      s(:begin,
                        s(:send, nil, :prefix,
                          s(:send,
                            s(:lvar, :tp), :event))),
                      s(:str, "#"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :tp), :method_id)))),
                  s(:if,
                    s(:lvar, :verbose),
                    s(:send, nil, :verbose_out,
                      s(:sym, :pop1),
                      s(:lvar, :method)), nil),
                  s(:lvasgn, :stored_method,
                    s(:send,
                      s(:send, nil, :call_stack), :pop)),
                  s(:if,
                    s(:send,
                      s(:lvar, :stored_method), :nil?),
                    s(:next), nil),
                  s(:if,
                    s(:lvar, :verbose),
                    s(:send, nil, :verbose_out,
                      s(:sym, :pop2),
                      s(:lvar, :method)), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :stored_method), :!=,
                      s(:lvar, :method)),
                    s(:begin,
                      s(:if,
                        s(:lvar, :stop_at_failure),
                        s(:send, nil, :stop), nil),
                      s(:if,
                        s(:defined?,
                          s(:send,
                            s(:const, nil, :RubyVM), :SDR)),
                        s(:send,
                          s(:const, nil, :RubyVM), :SDR), nil),
                      s(:send,
                        s(:send, nil, :call_stack), :clear),
                      s(:send, nil, :raise,
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :stored_method)),
                          s(:str, " is expected, but "),
                          s(:begin,
                            s(:lvar, :method)),
                          s(:str, " (count: "),
                          s(:begin,
                            s(:send,
                              s(:const, nil, :STATE), :[],
                              s(:sym, :count))),
                          s(:str, ")")))), nil)))),
            s(:block,
              s(:send,
                s(:const, nil, :TRACES), :each),
              s(:args,
                s(:arg, :trace)),
              s(:send,
                s(:lvar, :trace), :enable)))),
        s(:defs,
          s(:self), :stop,
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :STATE), :[]=,
              s(:sym, :running),
              s(:true)),
            s(:block,
              s(:send,
                s(:const, nil, :TRACES), :each),
              s(:args,
                s(:arg, :trace)),
              s(:send,
                s(:lvar, :trace), :disable)),
            s(:send,
              s(:const, nil, :TRACES), :clear))),
        s(:defs,
          s(:self), :check,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :TRACES), :each),
            s(:args,
              s(:arg, :trace)),
            s(:if,
              s(:send,
                s(:lvar, :trace), :enabled?), nil,
              s(:send, nil, :raise,
                s(:dstr,
                  s(:str, "trace "),
                  s(:begin,
                    s(:lvar, :trace)),
                  s(:str, " should not be deactivated")))))))), nil),
  s(:if,
    s(:defined?,
      s(:const, nil, :TracePointChecker)),
    s(:class,
      s(:const,
        s(:const,
          s(:const,
            s(:cbase), :Test), :Unit), :TestCase), nil,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :TracePointChecker), :ZombieTraceHunter))), nil))
