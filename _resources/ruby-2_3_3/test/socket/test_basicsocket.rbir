s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :require,
          s(:str, "socket")),
        s(:send, nil, :require,
          s(:str, "test/unit"))),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:defined?,
      s(:const, nil, :BasicSocket)),
    s(:class,
      s(:const, nil, :TestSocket_BasicSocket),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :inet_stream,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :sock,
                s(:send,
                  s(:const, nil, :Socket), :new,
                  s(:const,
                    s(:const, nil, :Socket), :AF_INET),
                  s(:const,
                    s(:const, nil, :Socket), :SOCK_STREAM),
                  s(:int, 0))),
              s(:yield,
                s(:lvar, :sock))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :sock), :closed?)))),
        s(:def, :test_getsockopt,
          s(:args),
          s(:block,
            s(:send, nil, :inet_stream),
            s(:args,
              s(:arg, :s)),
            s(:begin,
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:lvasgn, :n,
                      s(:send,
                        s(:lvar, :s), :getsockopt,
                        s(:const,
                          s(:const, nil, :Socket), :SOL_SOCKET),
                        s(:const,
                          s(:const, nil, :Socket), :SO_TYPE))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:array,
                          s(:const,
                            s(:const, nil, :Socket), :SOCK_STREAM)), :pack,
                        s(:str, "i")),
                      s(:send,
                        s(:lvar, :n), :data)),
                    s(:lvasgn, :n,
                      s(:send,
                        s(:lvar, :s), :getsockopt,
                        s(:str, "SOL_SOCKET"),
                        s(:str, "SO_TYPE"))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:array,
                          s(:const,
                            s(:const, nil, :Socket), :SOCK_STREAM)), :pack,
                        s(:str, "i")),
                      s(:send,
                        s(:lvar, :n), :data)),
                    s(:lvasgn, :n,
                      s(:send,
                        s(:lvar, :s), :getsockopt,
                        s(:sym, :SOL_SOCKET),
                        s(:sym, :SO_TYPE))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:array,
                          s(:const,
                            s(:const, nil, :Socket), :SOCK_STREAM)), :pack,
                        s(:str, "i")),
                      s(:send,
                        s(:lvar, :n), :data)),
                    s(:lvasgn, :n,
                      s(:send,
                        s(:lvar, :s), :getsockopt,
                        s(:sym, :SOCKET),
                        s(:sym, :TYPE))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:array,
                          s(:const,
                            s(:const, nil, :Socket), :SOCK_STREAM)), :pack,
                        s(:str, "i")),
                      s(:send,
                        s(:lvar, :n), :data)),
                    s(:lvasgn, :n,
                      s(:send,
                        s(:lvar, :s), :getsockopt,
                        s(:const,
                          s(:const, nil, :Socket), :SOL_SOCKET),
                        s(:const,
                          s(:const, nil, :Socket), :SO_ERROR))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:array,
                          s(:int, 0)), :pack,
                        s(:str, "i")),
                      s(:send,
                        s(:lvar, :n), :data))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :Minitest), :Assertion)), nil,
                    s(:begin,
                      s(:send,
                        s(:lvar, :s), :close),
                      s(:if,
                        s(:match_with_lvasgn,
                          s(:regexp,
                            s(:str, "aix"),
                            s(:regopt)),
                          s(:const, nil, :RUBY_PLATFORM)),
                        s(:send, nil, :skip,
                          s(:str, "Known bug in getsockopt(2) on AIX")), nil),
                      s(:send, nil, :raise,
                        s(:gvar, :$!)))), nil)),
              s(:lvasgn, :val,
                s(:send,
                  s(:const, nil, :Object), :new)),
              s(:block,
                s(:send,
                  s(:sclass,
                    s(:lvar, :val),
                    s(:self)), :send,
                  s(:sym, :define_method),
                  s(:sym, :to_int)),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :close),
                  s(:const,
                    s(:const, nil, :Socket), :SO_TYPE))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :IOError)),
                s(:args),
                s(:lvasgn, :n,
                  s(:send,
                    s(:lvar, :s), :getsockopt,
                    s(:const,
                      s(:const, nil, :Socket), :SOL_SOCKET),
                    s(:lvar, :val))))))),
        s(:def, :test_setsockopt,
          s(:args),
          s(:begin,
            s(:lvasgn, :s,
              s(:nil)),
            s(:lvasgn, :linger,
              s(:send,
                s(:array,
                  s(:int, 0),
                  s(:int, 0)), :pack,
                s(:str, "ii"))),
            s(:lvasgn, :val,
              s(:send,
                s(:const, nil, :Object), :new)),
            s(:block,
              s(:send,
                s(:sclass,
                  s(:lvar, :val),
                  s(:self)), :send,
                s(:sym, :define_method),
                s(:sym, :to_str)),
              s(:args),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :close),
                s(:lvar, :linger))),
            s(:block,
              s(:send, nil, :inet_stream),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:lvasgn, :s,
                  s(:lvar, :sock)),
                s(:send, nil, :assert_equal,
                  s(:int, 0),
                  s(:send,
                    s(:lvar, :s), :setsockopt,
                    s(:const,
                      s(:const, nil, :Socket), :SOL_SOCKET),
                    s(:const,
                      s(:const, nil, :Socket), :SO_LINGER),
                    s(:lvar, :linger))),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :IOError),
                    s(:str, "[ruby-dev:25039]")),
                  s(:args),
                  s(:send,
                    s(:lvar, :s), :setsockopt,
                    s(:const,
                      s(:const, nil, :Socket), :SOL_SOCKET),
                    s(:const,
                      s(:const, nil, :Socket), :SO_LINGER),
                    s(:lvar, :val))))),
            s(:lvasgn, :val,
              s(:send,
                s(:const, nil, :Object), :new)),
            s(:block,
              s(:send,
                s(:sclass,
                  s(:lvar, :val),
                  s(:self)), :send,
                s(:sym, :define_method),
                s(:sym, :to_int)),
              s(:args),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :close),
                s(:const,
                  s(:const, nil, :Socket), :SO_LINGER))),
            s(:block,
              s(:send, nil, :inet_stream),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:lvasgn, :s,
                  s(:lvar, :sock)),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :IOError)),
                  s(:args),
                  s(:send,
                    s(:lvar, :s), :setsockopt,
                    s(:const,
                      s(:const, nil, :Socket), :SOL_SOCKET),
                    s(:lvar, :val),
                    s(:lvar, :linger))))))),
        s(:def, :test_listen,
          s(:args),
          s(:begin,
            s(:lvasgn, :s,
              s(:nil)),
            s(:lvasgn, :log,
              s(:send,
                s(:const, nil, :Object), :new)),
            s(:block,
              s(:send,
                s(:sclass,
                  s(:lvar, :log),
                  s(:self)), :send,
                s(:sym, :define_method),
                s(:sym, :to_int)),
              s(:args),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :close),
                s(:int, 2))),
            s(:block,
              s(:send, nil, :inet_stream),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:lvasgn, :s,
                  s(:lvar, :sock)),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :IOError)),
                  s(:args),
                  s(:send,
                    s(:lvar, :s), :listen,
                    s(:lvar, :log))))))),
        s(:def, :socks,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :sserv,
                s(:send,
                  s(:const, nil, :TCPServer), :new,
                  s(:int, 0))),
              s(:lvasgn, :ssock,
                s(:nil)),
              s(:lvasgn, :t,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:lvasgn, :ssock,
                    s(:send,
                      s(:lvar, :sserv), :accept)))),
              s(:lvasgn, :csock,
                s(:send,
                  s(:const, nil, :TCPSocket), :new,
                  s(:str, "localhost"),
                  s(:send,
                    s(:send,
                      s(:lvar, :sserv), :addr), :[],
                    s(:int, 1)))),
              s(:send,
                s(:lvar, :t), :join),
              s(:yield,
                s(:lvar, :sserv),
                s(:lvar, :ssock),
                s(:lvar, :csock))),
            s(:begin,
              s(:rescue,
                s(:send,
                  s(:lvar, :ssock), :close),
                s(:resbody, nil, nil,
                  s(:nil)), nil),
              s(:rescue,
                s(:send,
                  s(:lvar, :csock), :close),
                s(:resbody, nil, nil,
                  s(:nil)), nil),
              s(:rescue,
                s(:send,
                  s(:lvar, :sserv), :close),
                s(:resbody, nil, nil,
                  s(:nil)), nil)))),
        s(:def, :test_close_read,
          s(:args),
          s(:block,
            s(:send, nil, :socks),
            s(:args,
              s(:arg, :sserv),
              s(:arg, :ssock),
              s(:arg, :csock)),
            s(:begin,
              s(:send,
                s(:lvar, :csock), :close_read),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :IOError)),
                s(:args),
                s(:send,
                  s(:lvar, :csock), :read,
                  s(:int, 5))),
              s(:block,
                s(:send, nil, :assert_nothing_raised),
                s(:args),
                s(:send,
                  s(:lvar, :csock), :close_read)),
              s(:block,
                s(:send, nil, :assert_nothing_raised),
                s(:args),
                s(:send,
                  s(:lvar, :csock), :close)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :IOError)),
                s(:args),
                s(:send,
                  s(:lvar, :csock), :close_read))))),
        s(:def, :test_close_write,
          s(:args),
          s(:block,
            s(:send, nil, :socks),
            s(:args,
              s(:arg, :sserv),
              s(:arg, :ssock),
              s(:arg, :csock)),
            s(:begin,
              s(:send,
                s(:lvar, :csock), :close_write),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :IOError)),
                s(:args),
                s(:send,
                  s(:lvar, :csock), :write,
                  s(:int, 5))),
              s(:block,
                s(:send, nil, :assert_nothing_raised),
                s(:args),
                s(:send,
                  s(:lvar, :csock), :close_write)),
              s(:block,
                s(:send, nil, :assert_nothing_raised),
                s(:args),
                s(:send,
                  s(:lvar, :csock), :close)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :IOError)),
                s(:args),
                s(:send,
                  s(:lvar, :csock), :close_write))))),
        s(:def, :test_for_fd,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :Errno), :EBADF),
                s(:str, "[ruby-core:72418] [Bug #11854]")),
              s(:args),
              s(:send,
                s(:const, nil, :BasicSocket), :for_fd,
                s(:int, -1))),
            s(:block,
              s(:send, nil, :inet_stream),
              s(:args,
                s(:arg, :sock)),
              s(:begin,
                s(:lvasgn, :s,
                  s(:send,
                    s(:const, nil, :BasicSocket), :for_fd,
                    s(:send,
                      s(:lvar, :sock), :fileno))),
                s(:send, nil, :assert_instance_of,
                  s(:const, nil, :BasicSocket),
                  s(:lvar, :s)),
                s(:send,
                  s(:lvar, :s), :autoclose=,
                  s(:false)),
                s(:send,
                  s(:lvar, :sock), :close))))))), nil))
