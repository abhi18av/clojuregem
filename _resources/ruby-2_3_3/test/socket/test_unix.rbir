s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "socket")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:send, nil, :require,
    s(:str, "timeout")),
  s(:send, nil, :require,
    s(:str, "tmpdir")),
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:send, nil, :require,
    s(:str, "io/nonblock")),
  s(:if,
    s(:and,
      s(:defined?,
        s(:const, nil, :UNIXSocket)),
      s(:send,
        s(:regexp,
          s(:str, "cygwin"),
          s(:regopt)), :!~,
        s(:const, nil, :RUBY_PLATFORM))),
    s(:class,
      s(:const, nil, :TestSocket_UNIXSocket),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :test_fd_passing,
          s(:args),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :r1),
                s(:lvasgn, :w)),
              s(:send,
                s(:const, nil, :IO), :pipe)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :s1),
                s(:lvasgn, :s2)),
              s(:send,
                s(:const, nil, :UNIXSocket), :pair)),
            s(:kwbegin,
              s(:ensure,
                s(:rescue,
                  s(:send,
                    s(:lvar, :s1), :send_io,
                    s(:nil)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :NotImplementedError)), nil,
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const, nil, :NotImplementedError)),
                      s(:args),
                      s(:send,
                        s(:lvar, :s2), :recv_io))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :TypeError)), nil,
                    s(:begin,
                      s(:send,
                        s(:lvar, :s1), :send_io,
                        s(:lvar, :r1)),
                      s(:lvasgn, :r2,
                        s(:send,
                          s(:lvar, :s2), :recv_io)),
                      s(:send, nil, :assert_equal,
                        s(:send,
                          s(:send,
                            s(:lvar, :r1), :stat), :ino),
                        s(:send,
                          s(:send,
                            s(:lvar, :r2), :stat), :ino)),
                      s(:send, nil, :assert_not_equal,
                        s(:send,
                          s(:lvar, :r1), :fileno),
                        s(:send,
                          s(:lvar, :r2), :fileno)),
                      s(:send, nil, :assert,
                        s(:send,
                          s(:lvar, :r2), :close_on_exec?)),
                      s(:send,
                        s(:lvar, :w), :syswrite,
                        s(:str, "a")),
                      s(:send, nil, :assert_equal,
                        s(:str, "a"),
                        s(:send,
                          s(:lvar, :r2), :sysread,
                          s(:int, 10))))), nil),
                s(:begin,
                  s(:send,
                    s(:lvar, :s1), :close),
                  s(:send,
                    s(:lvar, :s2), :close),
                  s(:send,
                    s(:lvar, :w), :close),
                  s(:send,
                    s(:lvar, :r1), :close),
                  s(:if,
                    s(:and,
                      s(:lvar, :r2),
                      s(:send,
                        s(:send,
                          s(:lvar, :r2), :closed?), :!)),
                    s(:send,
                      s(:lvar, :r2), :close), nil)))))),
        s(:def, :test_fd_passing_class_mode,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :UNIXSocket), :pair),
            s(:args,
              s(:arg, :s1),
              s(:arg, :s2)),
            s(:begin,
              s(:send,
                s(:lvar, :s1), :send_io,
                s(:send,
                  s(:lvar, :s1), :fileno)),
              s(:lvasgn, :r,
                s(:send,
                  s(:lvar, :s2), :recv_io,
                  s(:nil))),
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :Integer),
                s(:lvar, :r),
                s(:str, "recv_io with klass=nil returns integer FD")),
              s(:send, nil, :assert_not_equal,
                s(:send,
                  s(:lvar, :s1), :fileno),
                s(:lvar, :r)),
              s(:lvasgn, :r,
                s(:send,
                  s(:const, nil, :IO), :for_fd,
                  s(:lvar, :r))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:lvar, :s1), :stat), :ino),
                s(:send,
                  s(:send,
                    s(:lvar, :r), :stat), :ino)),
              s(:send,
                s(:lvar, :r), :close),
              s(:send,
                s(:lvar, :s1), :send_io,
                s(:lvar, :s1)),
              s(:lvasgn, :klass,
                s(:const, nil, :IO)),
              s(:lvasgn, :r,
                s(:send,
                  s(:lvar, :s2), :recv_io,
                  s(:lvar, :klass),
                  s(:str, "r+"))),
              s(:send, nil, :assert_instance_of,
                s(:lvar, :klass),
                s(:lvar, :r),
                s(:str, "recv_io with proper klass")),
              s(:send, nil, :assert_not_equal,
                s(:send,
                  s(:lvar, :s1), :fileno),
                s(:send,
                  s(:lvar, :r), :fileno)),
              s(:send,
                s(:lvar, :r), :close)))),
        s(:def, :test_fd_passing_n,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :io_ary,
                s(:array)),
              s(:if,
                s(:send,
                  s(:defined?,
                    s(:const,
                      s(:const, nil, :Socket), :SCM_RIGHTS)), :!),
                s(:return), nil),
              s(:send,
                s(:lvar, :io_ary), :concat,
                s(:send,
                  s(:const, nil, :IO), :pipe)),
              s(:send,
                s(:lvar, :io_ary), :concat,
                s(:send,
                  s(:const, nil, :IO), :pipe)),
              s(:send,
                s(:lvar, :io_ary), :concat,
                s(:send,
                  s(:const, nil, :IO), :pipe)),
              s(:lvasgn, :send_io_ary,
                s(:array)),
              s(:block,
                s(:send,
                  s(:lvar, :io_ary), :each),
                s(:args,
                  s(:arg, :io)),
                s(:begin,
                  s(:send,
                    s(:lvar, :send_io_ary), :<<,
                    s(:lvar, :io)),
                  s(:block,
                    s(:send,
                      s(:const, nil, :UNIXSocket), :pair),
                    s(:args,
                      s(:arg, :s1),
                      s(:arg, :s2)),
                    s(:begin,
                      s(:kwbegin,
                        s(:rescue,
                          s(:lvasgn, :ret,
                            s(:send,
                              s(:lvar, :s1), :sendmsg,
                              s(:str, "\u0000"),
                              s(:int, 0),
                              s(:nil),
                              s(:array,
                                s(:const,
                                  s(:const, nil, :Socket), :SOL_SOCKET),
                                s(:const,
                                  s(:const, nil, :Socket), :SCM_RIGHTS),
                                s(:send,
                                  s(:block,
                                    s(:send,
                                      s(:lvar, :send_io_ary), :map),
                                    s(:args,
                                      s(:arg, :io2)),
                                    s(:send,
                                      s(:lvar, :io2), :fileno)), :pack,
                                  s(:str, "i!*"))))),
                          s(:resbody,
                            s(:array,
                              s(:const, nil, :NotImplementedError)), nil,
                            s(:return)), nil)),
                      s(:send, nil, :assert_equal,
                        s(:int, 1),
                        s(:lvar, :ret)),
                      s(:lvasgn, :ret,
                        s(:send,
                          s(:lvar, :s2), :recvmsg,
                          s(:hash,
                            s(:pair,
                              s(:sym, :scm_rights),
                              s(:true))))),
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :_),
                          s(:lvasgn, :_),
                          s(:lvasgn, :_),
                          s(:splat,
                            s(:lvasgn, :ctls))),
                        s(:lvar, :ret)),
                      s(:lvasgn, :recv_io_ary,
                        s(:array)),
                      s(:kwbegin,
                        s(:ensure,
                          s(:begin,
                            s(:block,
                              s(:send,
                                s(:lvar, :ctls), :each),
                              s(:args,
                                s(:arg, :ctl)),
                              s(:begin,
                                s(:if,
                                  s(:or,
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :ctl), :level), :!=,
                                      s(:const,
                                        s(:const, nil, :Socket), :SOL_SOCKET)),
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :ctl), :type), :!=,
                                      s(:const,
                                        s(:const, nil, :Socket), :SCM_RIGHTS))),
                                  s(:next), nil),
                                s(:send,
                                  s(:lvar, :recv_io_ary), :concat,
                                  s(:send,
                                    s(:lvar, :ctl), :unix_rights)))),
                            s(:send, nil, :assert_equal,
                              s(:send,
                                s(:lvar, :send_io_ary), :length),
                              s(:send,
                                s(:lvar, :recv_io_ary), :length)),
                            s(:block,
                              s(:send,
                                s(:send,
                                  s(:lvar, :send_io_ary), :length), :times),
                              s(:args,
                                s(:arg, :i)),
                              s(:begin,
                                s(:send, nil, :assert_not_equal,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :send_io_ary), :[],
                                      s(:lvar, :i)), :fileno),
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :recv_io_ary), :[],
                                      s(:lvar, :i)), :fileno)),
                                s(:send, nil, :assert,
                                  s(:send,
                                    s(:const, nil, :File), :identical?,
                                    s(:send,
                                      s(:lvar, :send_io_ary), :[],
                                      s(:lvar, :i)),
                                    s(:send,
                                      s(:lvar, :recv_io_ary), :[],
                                      s(:lvar, :i)))),
                                s(:send, nil, :assert,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :recv_io_ary), :[],
                                      s(:lvar, :i)), :close_on_exec?))))),
                          s(:block,
                            s(:send,
                              s(:lvar, :recv_io_ary), :each),
                            s(:args,
                              s(:arg, :io2)),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:lvar, :io2), :closed?), :!),
                              s(:send,
                                s(:lvar, :io2), :close), nil))))))))),
            s(:block,
              s(:send,
                s(:lvar, :io_ary), :each),
              s(:args,
                s(:arg, :io)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :io), :closed?), :!),
                s(:send,
                  s(:lvar, :io), :close), nil)))),
        s(:def, :test_fd_passing_n2,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :io_ary,
                s(:array)),
              s(:if,
                s(:send,
                  s(:defined?,
                    s(:const,
                      s(:const, nil, :Socket), :SCM_RIGHTS)), :!),
                s(:return), nil),
              s(:if,
                s(:send,
                  s(:defined?,
                    s(:const,
                      s(:const, nil, :Socket), :AncillaryData)), :!),
                s(:return), nil),
              s(:send,
                s(:lvar, :io_ary), :concat,
                s(:send,
                  s(:const, nil, :IO), :pipe)),
              s(:send,
                s(:lvar, :io_ary), :concat,
                s(:send,
                  s(:const, nil, :IO), :pipe)),
              s(:send,
                s(:lvar, :io_ary), :concat,
                s(:send,
                  s(:const, nil, :IO), :pipe)),
              s(:lvasgn, :send_io_ary,
                s(:array)),
              s(:block,
                s(:send,
                  s(:lvar, :io_ary), :each),
                s(:args,
                  s(:arg, :io)),
                s(:begin,
                  s(:send,
                    s(:lvar, :send_io_ary), :<<,
                    s(:lvar, :io)),
                  s(:block,
                    s(:send,
                      s(:const, nil, :UNIXSocket), :pair),
                    s(:args,
                      s(:arg, :s1),
                      s(:arg, :s2)),
                    s(:begin,
                      s(:kwbegin,
                        s(:rescue,
                          s(:begin,
                            s(:lvasgn, :ancdata,
                              s(:send,
                                s(:const,
                                  s(:const, nil, :Socket), :AncillaryData), :unix_rights,
                                s(:splat,
                                  s(:lvar, :send_io_ary)))),
                            s(:lvasgn, :ret,
                              s(:send,
                                s(:lvar, :s1), :sendmsg,
                                s(:str, "\u0000"),
                                s(:int, 0),
                                s(:nil),
                                s(:lvar, :ancdata)))),
                          s(:resbody,
                            s(:array,
                              s(:const, nil, :NotImplementedError)), nil,
                            s(:return)), nil)),
                      s(:send, nil, :assert_equal,
                        s(:int, 1),
                        s(:lvar, :ret)),
                      s(:lvasgn, :ret,
                        s(:send,
                          s(:lvar, :s2), :recvmsg,
                          s(:hash,
                            s(:pair,
                              s(:sym, :scm_rights),
                              s(:true))))),
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :_),
                          s(:lvasgn, :_),
                          s(:lvasgn, :_),
                          s(:splat,
                            s(:lvasgn, :ctls))),
                        s(:lvar, :ret)),
                      s(:lvasgn, :recv_io_ary,
                        s(:array)),
                      s(:kwbegin,
                        s(:ensure,
                          s(:begin,
                            s(:block,
                              s(:send,
                                s(:lvar, :ctls), :each),
                              s(:args,
                                s(:arg, :ctl)),
                              s(:begin,
                                s(:if,
                                  s(:or,
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :ctl), :level), :!=,
                                      s(:const,
                                        s(:const, nil, :Socket), :SOL_SOCKET)),
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :ctl), :type), :!=,
                                      s(:const,
                                        s(:const, nil, :Socket), :SCM_RIGHTS))),
                                  s(:next), nil),
                                s(:send,
                                  s(:lvar, :recv_io_ary), :concat,
                                  s(:send,
                                    s(:lvar, :ctl), :unix_rights)))),
                            s(:send, nil, :assert_equal,
                              s(:send,
                                s(:lvar, :send_io_ary), :length),
                              s(:send,
                                s(:lvar, :recv_io_ary), :length)),
                            s(:block,
                              s(:send,
                                s(:send,
                                  s(:lvar, :send_io_ary), :length), :times),
                              s(:args,
                                s(:arg, :i)),
                              s(:begin,
                                s(:send, nil, :assert_not_equal,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :send_io_ary), :[],
                                      s(:lvar, :i)), :fileno),
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :recv_io_ary), :[],
                                      s(:lvar, :i)), :fileno)),
                                s(:send, nil, :assert,
                                  s(:send,
                                    s(:const, nil, :File), :identical?,
                                    s(:send,
                                      s(:lvar, :send_io_ary), :[],
                                      s(:lvar, :i)),
                                    s(:send,
                                      s(:lvar, :recv_io_ary), :[],
                                      s(:lvar, :i)))),
                                s(:send, nil, :assert,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :recv_io_ary), :[],
                                      s(:lvar, :i)), :close_on_exec?))))),
                          s(:block,
                            s(:send,
                              s(:lvar, :recv_io_ary), :each),
                            s(:args,
                              s(:arg, :io2)),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:lvar, :io2), :closed?), :!),
                              s(:send,
                                s(:lvar, :io2), :close), nil))))))))),
            s(:block,
              s(:send,
                s(:lvar, :io_ary), :each),
              s(:args,
                s(:arg, :io)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :io), :closed?), :!),
                s(:send,
                  s(:lvar, :io), :close), nil)))),
        s(:def, :test_fd_passing_race_condition,
          s(:args),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :r1),
                s(:lvasgn, :w)),
              s(:send,
                s(:const, nil, :IO), :pipe)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :s1),
                s(:lvasgn, :s2)),
              s(:send,
                s(:const, nil, :UNIXSocket), :pair)),
            s(:send,
              s(:lvar, :s1), :nonblock=,
              s(:send,
                s(:lvar, :s2), :nonblock=,
                s(:true))),
            s(:lvasgn, :lock,
              s(:send,
                s(:const, nil, :Mutex), :new)),
            s(:lvasgn, :nr,
              s(:int, 0)),
            s(:lvasgn, :x,
              s(:int, 2)),
            s(:lvasgn, :y,
              s(:int, 1000)),
            s(:kwbegin,
              s(:ensure,
                s(:rescue,
                  s(:send,
                    s(:lvar, :s1), :send_io,
                    s(:nil)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :NotImplementedError)), nil,
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const, nil, :NotImplementedError)),
                      s(:args),
                      s(:send,
                        s(:lvar, :s2), :recv_io))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :TypeError)), nil,
                    s(:begin,
                      s(:lvasgn, :thrs,
                        s(:block,
                          s(:send,
                            s(:send,
                              s(:lvar, :x), :times), :map),
                          s(:args),
                          s(:block,
                            s(:send,
                              s(:const, nil, :Thread), :new),
                            s(:args),
                            s(:begin,
                              s(:block,
                                s(:send,
                                  s(:lvar, :y), :times),
                                s(:args),
                                s(:begin,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :s2), :recv_io), :close),
                                  s(:block,
                                    s(:send,
                                      s(:lvar, :lock), :synchronize),
                                    s(:args),
                                    s(:op_asgn,
                                      s(:lvasgn, :nr), :+,
                                      s(:int, 1))))),
                              s(:true))))),
                      s(:block,
                        s(:send,
                          s(:begin,
                            s(:send,
                              s(:lvar, :x), :*,
                              s(:lvar, :y))), :times),
                        s(:args),
                        s(:send,
                          s(:lvar, :s1), :send_io,
                          s(:lvar, :r1))),
                      s(:send, nil, :assert_equal,
                        s(:send,
                          s(:array,
                            s(:true)), :*,
                          s(:lvar, :x)),
                        s(:block,
                          s(:send,
                            s(:lvar, :thrs), :map),
                          s(:args,
                            s(:arg, :t)),
                          s(:send,
                            s(:lvar, :t), :value))),
                      s(:send, nil, :assert_equal,
                        s(:send,
                          s(:lvar, :x), :*,
                          s(:lvar, :y)),
                        s(:lvar, :nr)))), nil),
                s(:begin,
                  s(:send,
                    s(:lvar, :s1), :close),
                  s(:send,
                    s(:lvar, :s2), :close),
                  s(:send,
                    s(:lvar, :w), :close),
                  s(:send,
                    s(:lvar, :r1), :close)))))),
        s(:def, :test_sendmsg,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:defined?,
                  s(:const,
                    s(:const, nil, :Socket), :SCM_RIGHTS)), :!),
              s(:return), nil),
            s(:block,
              s(:send,
                s(:const, nil, :IO), :pipe),
              s(:args,
                s(:arg, :r1),
                s(:arg, :w)),
              s(:block,
                s(:send,
                  s(:const, nil, :UNIXSocket), :pair),
                s(:args,
                  s(:arg, :s1),
                  s(:arg, :s2)),
                s(:begin,
                  s(:kwbegin,
                    s(:rescue,
                      s(:lvasgn, :ret,
                        s(:send,
                          s(:lvar, :s1), :sendmsg,
                          s(:str, "\u0000"),
                          s(:int, 0),
                          s(:nil),
                          s(:array,
                            s(:const,
                              s(:const, nil, :Socket), :SOL_SOCKET),
                            s(:const,
                              s(:const, nil, :Socket), :SCM_RIGHTS),
                            s(:send,
                              s(:array,
                                s(:send,
                                  s(:lvar, :r1), :fileno)), :pack,
                              s(:str, "i!"))))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :NotImplementedError)), nil,
                        s(:return)), nil)),
                  s(:send, nil, :assert_equal,
                    s(:int, 1),
                    s(:lvar, :ret)),
                  s(:lvasgn, :r2,
                    s(:send,
                      s(:lvar, :s2), :recv_io)),
                  s(:kwbegin,
                    s(:ensure,
                      s(:begin,
                        s(:send, nil, :assert,
                          s(:send,
                            s(:const, nil, :File), :identical?,
                            s(:lvar, :r1),
                            s(:lvar, :r2))),
                        s(:send, nil, :assert,
                          s(:send,
                            s(:lvar, :r2), :close_on_exec?))),
                      s(:send,
                        s(:lvar, :r2), :close)))))))),
        s(:def, :test_sendmsg_ancillarydata_int,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:defined?,
                  s(:const,
                    s(:const, nil, :Socket), :SCM_RIGHTS)), :!),
              s(:return), nil),
            s(:if,
              s(:send,
                s(:defined?,
                  s(:const,
                    s(:const, nil, :Socket), :AncillaryData)), :!),
              s(:return), nil),
            s(:block,
              s(:send,
                s(:const, nil, :IO), :pipe),
              s(:args,
                s(:arg, :r1),
                s(:arg, :w)),
              s(:block,
                s(:send,
                  s(:const, nil, :UNIXSocket), :pair),
                s(:args,
                  s(:arg, :s1),
                  s(:arg, :s2)),
                s(:begin,
                  s(:kwbegin,
                    s(:rescue,
                      s(:begin,
                        s(:lvasgn, :ad,
                          s(:send,
                            s(:const,
                              s(:const, nil, :Socket), :AncillaryData), :int,
                            s(:sym, :UNIX),
                            s(:sym, :SOCKET),
                            s(:sym, :RIGHTS),
                            s(:send,
                              s(:lvar, :r1), :fileno))),
                        s(:lvasgn, :ret,
                          s(:send,
                            s(:lvar, :s1), :sendmsg,
                            s(:str, "\u0000"),
                            s(:int, 0),
                            s(:nil),
                            s(:lvar, :ad)))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :NotImplementedError)), nil,
                        s(:return)), nil)),
                  s(:send, nil, :assert_equal,
                    s(:int, 1),
                    s(:lvar, :ret)),
                  s(:lvasgn, :r2,
                    s(:send,
                      s(:lvar, :s2), :recv_io)),
                  s(:kwbegin,
                    s(:ensure,
                      s(:send, nil, :assert,
                        s(:send,
                          s(:const, nil, :File), :identical?,
                          s(:lvar, :r1),
                          s(:lvar, :r2))),
                      s(:send,
                        s(:lvar, :r2), :close)))))))),
        s(:def, :test_sendmsg_ancillarydata_unix_rights,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:defined?,
                  s(:const,
                    s(:const, nil, :Socket), :SCM_RIGHTS)), :!),
              s(:return), nil),
            s(:if,
              s(:send,
                s(:defined?,
                  s(:const,
                    s(:const, nil, :Socket), :AncillaryData)), :!),
              s(:return), nil),
            s(:block,
              s(:send,
                s(:const, nil, :IO), :pipe),
              s(:args,
                s(:arg, :r1),
                s(:arg, :w)),
              s(:block,
                s(:send,
                  s(:const, nil, :UNIXSocket), :pair),
                s(:args,
                  s(:arg, :s1),
                  s(:arg, :s2)),
                s(:begin,
                  s(:kwbegin,
                    s(:rescue,
                      s(:begin,
                        s(:lvasgn, :ad,
                          s(:send,
                            s(:const,
                              s(:const, nil, :Socket), :AncillaryData), :unix_rights,
                            s(:lvar, :r1))),
                        s(:lvasgn, :ret,
                          s(:send,
                            s(:lvar, :s1), :sendmsg,
                            s(:str, "\u0000"),
                            s(:int, 0),
                            s(:nil),
                            s(:lvar, :ad)))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :NotImplementedError)), nil,
                        s(:return)), nil)),
                  s(:send, nil, :assert_equal,
                    s(:int, 1),
                    s(:lvar, :ret)),
                  s(:lvasgn, :r2,
                    s(:send,
                      s(:lvar, :s2), :recv_io)),
                  s(:kwbegin,
                    s(:ensure,
                      s(:send, nil, :assert,
                        s(:send,
                          s(:const, nil, :File), :identical?,
                          s(:lvar, :r1),
                          s(:lvar, :r2))),
                      s(:send,
                        s(:lvar, :r2), :close)))))))),
        s(:def, :test_recvmsg,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:defined?,
                  s(:const,
                    s(:const, nil, :Socket), :SCM_RIGHTS)), :!),
              s(:return), nil),
            s(:if,
              s(:send,
                s(:defined?,
                  s(:const,
                    s(:const, nil, :Socket), :AncillaryData)), :!),
              s(:return), nil),
            s(:block,
              s(:send,
                s(:const, nil, :IO), :pipe),
              s(:args,
                s(:arg, :r1),
                s(:arg, :w)),
              s(:block,
                s(:send,
                  s(:const, nil, :UNIXSocket), :pair),
                s(:args,
                  s(:arg, :s1),
                  s(:arg, :s2)),
                s(:begin,
                  s(:send,
                    s(:lvar, :s1), :send_io,
                    s(:lvar, :r1)),
                  s(:lvasgn, :ret,
                    s(:send,
                      s(:lvar, :s2), :recvmsg,
                      s(:hash,
                        s(:pair,
                          s(:sym, :scm_rights),
                          s(:true))))),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :data),
                      s(:lvasgn, :srcaddr),
                      s(:lvasgn, :flags),
                      s(:splat,
                        s(:lvasgn, :ctls))),
                    s(:lvar, :ret)),
                  s(:send, nil, :assert_equal,
                    s(:str, "\u0000"),
                    s(:lvar, :data)),
                  s(:if,
                    s(:send,
                      s(:lvar, :flags), :==,
                      s(:nil)),
                    s(:begin,
                      s(:send, nil, :assert_instance_of,
                        s(:const, nil, :Array),
                        s(:lvar, :ctls)),
                      s(:send, nil, :assert_equal,
                        s(:int, 0),
                        s(:send,
                          s(:lvar, :ctls), :length))),
                    s(:begin,
                      s(:send, nil, :assert_equal,
                        s(:int, 0),
                        s(:send,
                          s(:lvar, :flags), :&,
                          s(:begin,
                            s(:send,
                              s(:const,
                                s(:const, nil, :Socket), :MSG_TRUNC), :|,
                              s(:const,
                                s(:const, nil, :Socket), :MSG_CTRUNC))))),
                      s(:send, nil, :assert_instance_of,
                        s(:const, nil, :Addrinfo),
                        s(:lvar, :srcaddr)),
                      s(:send, nil, :assert_instance_of,
                        s(:const, nil, :Array),
                        s(:lvar, :ctls)),
                      s(:send, nil, :assert_equal,
                        s(:int, 1),
                        s(:send,
                          s(:lvar, :ctls), :length)),
                      s(:lvasgn, :ctl,
                        s(:send,
                          s(:lvar, :ctls), :[],
                          s(:int, 0))),
                      s(:send, nil, :assert_instance_of,
                        s(:const,
                          s(:const, nil, :Socket), :AncillaryData),
                        s(:lvar, :ctl)),
                      s(:send, nil, :assert_equal,
                        s(:const,
                          s(:const, nil, :Socket), :SOL_SOCKET),
                        s(:send,
                          s(:lvar, :ctl), :level)),
                      s(:send, nil, :assert_equal,
                        s(:const,
                          s(:const, nil, :Socket), :SCM_RIGHTS),
                        s(:send,
                          s(:lvar, :ctl), :type)),
                      s(:send, nil, :assert_instance_of,
                        s(:const, nil, :String),
                        s(:send,
                          s(:lvar, :ctl), :data)),
                      s(:lvasgn, :ios,
                        s(:send,
                          s(:lvar, :ctl), :unix_rights)),
                      s(:send, nil, :assert_equal,
                        s(:int, 1),
                        s(:send,
                          s(:lvar, :ios), :length)),
                      s(:lvasgn, :r2,
                        s(:send,
                          s(:lvar, :ios), :[],
                          s(:int, 0))),
                      s(:kwbegin,
                        s(:ensure,
                          s(:begin,
                            s(:send, nil, :assert,
                              s(:send,
                                s(:const, nil, :File), :identical?,
                                s(:lvar, :r1),
                                s(:lvar, :r2))),
                            s(:send, nil, :assert,
                              s(:send,
                                s(:lvar, :r2), :close_on_exec?))),
                          s(:send,
                            s(:lvar, :r2), :close)))))))))),
        s(:def, :bound_unix_socket,
          s(:args,
            s(:arg, :klass)),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :tmpfile,
                s(:send,
                  s(:const, nil, :Tempfile), :new,
                  s(:str, "s"))),
              s(:lvasgn, :path,
                s(:send,
                  s(:lvar, :tmpfile), :path)),
              s(:send,
                s(:lvar, :tmpfile), :close,
                s(:true)),
              s(:lvasgn, :io,
                s(:send,
                  s(:lvar, :klass), :new,
                  s(:lvar, :path))),
              s(:yield,
                s(:lvar, :io),
                s(:lvar, :path))),
            s(:begin,
              s(:send,
                s(:lvar, :io), :close),
              s(:if,
                s(:and,
                  s(:lvar, :path),
                  s(:send,
                    s(:const, nil, :File), :socket?,
                    s(:lvar, :path))),
                s(:send,
                  s(:const, nil, :File), :unlink,
                  s(:lvar, :path)), nil)))),
        s(:def, :test_addr,
          s(:args),
          s(:block,
            s(:send, nil, :bound_unix_socket,
              s(:const, nil, :UNIXServer)),
            s(:args,
              s(:arg, :serv),
              s(:arg, :path)),
            s(:block,
              s(:send,
                s(:const, nil, :UNIXSocket), :open,
                s(:lvar, :path)),
              s(:args,
                s(:arg, :c)),
              s(:begin,
                s(:lvasgn, :s,
                  s(:send,
                    s(:lvar, :serv), :accept)),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:send, nil, :assert_equal,
                        s(:array,
                          s(:str, "AF_UNIX"),
                          s(:lvar, :path)),
                        s(:send,
                          s(:lvar, :c), :peeraddr)),
                      s(:send, nil, :assert_equal,
                        s(:array,
                          s(:str, "AF_UNIX"),
                          s(:str, "")),
                        s(:send,
                          s(:lvar, :c), :addr)),
                      s(:send, nil, :assert_equal,
                        s(:array,
                          s(:str, "AF_UNIX"),
                          s(:str, "")),
                        s(:send,
                          s(:lvar, :s), :peeraddr)),
                      s(:send, nil, :assert_equal,
                        s(:array,
                          s(:str, "AF_UNIX"),
                          s(:lvar, :path)),
                        s(:send,
                          s(:lvar, :s), :addr)),
                      s(:send, nil, :assert_equal,
                        s(:lvar, :path),
                        s(:send,
                          s(:lvar, :s), :path)),
                      s(:send, nil, :assert_equal,
                        s(:str, ""),
                        s(:send,
                          s(:lvar, :c), :path))),
                    s(:send,
                      s(:lvar, :s), :close))))))),
        s(:def, :test_cloexec,
          s(:args),
          s(:block,
            s(:send, nil, :bound_unix_socket,
              s(:const, nil, :UNIXServer)),
            s(:args,
              s(:arg, :serv),
              s(:arg, :path)),
            s(:block,
              s(:send,
                s(:const, nil, :UNIXSocket), :open,
                s(:lvar, :path)),
              s(:args,
                s(:arg, :c)),
              s(:begin,
                s(:lvasgn, :s,
                  s(:send,
                    s(:lvar, :serv), :accept)),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:send, nil, :assert,
                        s(:send,
                          s(:lvar, :serv), :close_on_exec?)),
                      s(:send, nil, :assert,
                        s(:send,
                          s(:lvar, :c), :close_on_exec?)),
                      s(:send, nil, :assert,
                        s(:send,
                          s(:lvar, :s), :close_on_exec?))),
                    s(:send,
                      s(:lvar, :s), :close))))))),
        s(:def, :test_noname_path,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :s1),
                  s(:lvasgn, :s2)),
                s(:send,
                  s(:const, nil, :UNIXSocket), :pair)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :s1), :path)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :s2), :path))),
            s(:begin,
              s(:send,
                s(:lvar, :s1), :close),
              s(:send,
                s(:lvar, :s2), :close)))),
        s(:def, :test_noname_addr,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :s1),
                  s(:lvasgn, :s2)),
                s(:send,
                  s(:const, nil, :UNIXSocket), :pair)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "AF_UNIX"),
                  s(:str, "")),
                s(:send,
                  s(:lvar, :s1), :addr)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "AF_UNIX"),
                  s(:str, "")),
                s(:send,
                  s(:lvar, :s2), :addr))),
            s(:begin,
              s(:send,
                s(:lvar, :s1), :close),
              s(:send,
                s(:lvar, :s2), :close)))),
        s(:def, :test_noname_peeraddr,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :s1),
                  s(:lvasgn, :s2)),
                s(:send,
                  s(:const, nil, :UNIXSocket), :pair)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "AF_UNIX"),
                  s(:str, "")),
                s(:send,
                  s(:lvar, :s1), :peeraddr)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "AF_UNIX"),
                  s(:str, "")),
                s(:send,
                  s(:lvar, :s2), :peeraddr))),
            s(:begin,
              s(:send,
                s(:lvar, :s1), :close),
              s(:send,
                s(:lvar, :s2), :close)))),
        s(:def, :test_noname_unpack_sockaddr_un,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :s1),
                  s(:lvasgn, :s2)),
                s(:send,
                  s(:const, nil, :UNIXSocket), :pair)),
              s(:lvasgn, :n,
                s(:nil)),
              s(:if,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :n,
                      s(:send,
                        s(:lvar, :s1), :getsockname))), :!=,
                  s(:str, "")),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:send,
                    s(:const, nil, :Socket), :unpack_sockaddr_un,
                    s(:lvar, :n))), nil),
              s(:if,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :n,
                      s(:send,
                        s(:lvar, :s1), :getsockname))), :!=,
                  s(:str, "")),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:send,
                    s(:const, nil, :Socket), :unpack_sockaddr_un,
                    s(:lvar, :n))), nil),
              s(:if,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :n,
                      s(:send,
                        s(:lvar, :s2), :getsockname))), :!=,
                  s(:str, "")),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:send,
                    s(:const, nil, :Socket), :unpack_sockaddr_un,
                    s(:lvar, :n))), nil),
              s(:if,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :n,
                      s(:send,
                        s(:lvar, :s1), :getpeername))), :!=,
                  s(:str, "")),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:send,
                    s(:const, nil, :Socket), :unpack_sockaddr_un,
                    s(:lvar, :n))), nil),
              s(:if,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :n,
                      s(:send,
                        s(:lvar, :s2), :getpeername))), :!=,
                  s(:str, "")),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:send,
                    s(:const, nil, :Socket), :unpack_sockaddr_un,
                    s(:lvar, :n))), nil)),
            s(:begin,
              s(:send,
                s(:lvar, :s1), :close),
              s(:send,
                s(:lvar, :s2), :close)))),
        s(:def, :test_noname_recvfrom,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :s1),
                  s(:lvasgn, :s2)),
                s(:send,
                  s(:const, nil, :UNIXSocket), :pair)),
              s(:send,
                s(:lvar, :s2), :write,
                s(:str, "a")),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "a"),
                  s(:array,
                    s(:str, "AF_UNIX"),
                    s(:str, ""))),
                s(:send,
                  s(:lvar, :s1), :recvfrom,
                  s(:int, 10)))),
            s(:begin,
              s(:send,
                s(:lvar, :s1), :close),
              s(:send,
                s(:lvar, :s2), :close)))),
        s(:def, :test_noname_recv_nonblock,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :s1),
                  s(:lvasgn, :s2)),
                s(:send,
                  s(:const, nil, :UNIXSocket), :pair)),
              s(:send,
                s(:lvar, :s2), :write,
                s(:str, "a")),
              s(:send,
                s(:const, nil, :IO), :select,
                s(:array,
                  s(:lvar, :s1))),
              s(:send, nil, :assert_equal,
                s(:str, "a"),
                s(:send,
                  s(:lvar, :s1), :recv_nonblock,
                  s(:int, 10)))),
            s(:begin,
              s(:send,
                s(:lvar, :s1), :close),
              s(:send,
                s(:lvar, :s2), :close)))),
        s(:def, :test_too_long_path,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const, nil, :Socket), :sockaddr_un,
                s(:send,
                  s(:str, "a"), :*,
                  s(:int, 3000)))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const, nil, :UNIXServer), :new,
                s(:send,
                  s(:str, "a"), :*,
                  s(:int, 3000)))))),
        s(:def, :test_abstract_namespace,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:regexp,
                  s(:str, "linux"),
                  s(:regopt)), :!~,
                s(:const, nil, :RUBY_PLATFORM)),
              s(:return), nil),
            s(:lvasgn, :addr,
              s(:send,
                s(:const, nil, :Socket), :pack_sockaddr_un,
                s(:str, "\u0000foo"))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\0foo\\z"),
                s(:regopt)),
              s(:lvar, :addr)),
            s(:send, nil, :assert_equal,
              s(:str, "\u0000foo"),
              s(:send,
                s(:const, nil, :Socket), :unpack_sockaddr_un,
                s(:lvar, :addr))))),
        s(:def, :test_dgram_pair,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :s1),
                  s(:lvasgn, :s2)),
                s(:send,
                  s(:const, nil, :UNIXSocket), :pair,
                  s(:const,
                    s(:const, nil, :Socket), :SOCK_DGRAM))),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:send,
                      s(:lvar, :s1), :recv_nonblock,
                      s(:int, 10)),
                    s(:send, nil, :fail)),
                  s(:resbody, nil,
                    s(:lvasgn, :e),
                    s(:begin,
                      s(:send, nil, :assert,
                        s(:send,
                          s(:const,
                            s(:const, nil, :IO), :EAGAINWaitReadable), :===,
                          s(:lvar, :e))),
                      s(:send, nil, :assert,
                        s(:send,
                          s(:const,
                            s(:const, nil, :IO), :WaitReadable), :===,
                          s(:lvar, :e))))), nil)),
              s(:send,
                s(:lvar, :s2), :send,
                s(:str, ""),
                s(:int, 0)),
              s(:send,
                s(:lvar, :s2), :send,
                s(:str, "haha"),
                s(:int, 0)),
              s(:send,
                s(:lvar, :s2), :send,
                s(:str, ""),
                s(:int, 0)),
              s(:send,
                s(:lvar, :s2), :send,
                s(:str, ""),
                s(:int, 0)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :s1), :recv,
                  s(:int, 10))),
              s(:send, nil, :assert_equal,
                s(:str, "haha"),
                s(:send,
                  s(:lvar, :s1), :recv,
                  s(:int, 10))),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :s1), :recv,
                  s(:int, 10))),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :s1), :recv,
                  s(:int, 10))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :EAGAINWaitReadable)),
                s(:args),
                s(:send,
                  s(:lvar, :s1), :recv_nonblock,
                  s(:int, 10))),
              s(:lvasgn, :buf,
                s(:send,
                  s(:str, ""), :dup)),
              s(:send,
                s(:lvar, :s2), :send,
                s(:str, "BBBBBB"),
                s(:int, 0)),
              s(:send,
                s(:const, nil, :IO), :select,
                s(:array,
                  s(:lvar, :s1))),
              s(:lvasgn, :rv,
                s(:send,
                  s(:lvar, :s1), :recv,
                  s(:int, 100),
                  s(:int, 0),
                  s(:lvar, :buf))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :buf), :object_id),
                s(:send,
                  s(:lvar, :rv), :object_id)),
              s(:send, nil, :assert_equal,
                s(:str, "BBBBBB"),
                s(:lvar, :rv))),
            s(:begin,
              s(:if,
                s(:lvar, :s1),
                s(:send,
                  s(:lvar, :s1), :close), nil),
              s(:if,
                s(:lvar, :s2),
                s(:send,
                  s(:lvar, :s2), :close), nil)))),
        s(:def, :test_dgram_pair_sendrecvmsg_errno_set,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :s1),
                  s(:lvasgn, :s2)),
                s(:lvasgn, :to_close,
                  s(:send,
                    s(:const, nil, :UNIXSocket), :pair,
                    s(:const,
                      s(:const, nil, :Socket), :SOCK_DGRAM)))),
              s(:lvasgn, :pipe,
                s(:send,
                  s(:const, nil, :IO), :pipe)),
              s(:send,
                s(:lvar, :to_close), :concat,
                s(:lvar, :pipe)),
              s(:lvasgn, :set_errno,
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args),
                  s(:kwbegin,
                    s(:rescue,
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:lvar, :pipe), :[],
                            s(:int, 0)), :read_nonblock,
                          s(:int, 1)),
                        s(:send, nil, :fail)),
                      s(:resbody, nil,
                        s(:lvasgn, :e),
                        s(:send, nil, :assert,
                          s(:send,
                            s(:const,
                              s(:const, nil, :IO), :EAGAINWaitReadable), :===,
                            s(:lvar, :e)))), nil)))),
              s(:block,
                s(:send,
                  s(:const, nil, :Timeout), :timeout,
                  s(:int, 10)),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:lvar, :set_errno), :call),
                  s(:send, nil, :assert_equal,
                    s(:int, 2),
                    s(:send,
                      s(:lvar, :s1), :sendmsg,
                      s(:str, "HI"))),
                  s(:send,
                    s(:lvar, :set_errno), :call),
                  s(:send, nil, :assert_equal,
                    s(:str, "HI"),
                    s(:send,
                      s(:send,
                        s(:lvar, :s2), :recvmsg), :[],
                      s(:int, 0)))))),
            s(:if,
              s(:lvar, :to_close),
              s(:send,
                s(:lvar, :to_close), :each,
                s(:block_pass,
                  s(:sym, :close))), nil))),
        s(:def, :test_epipe,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :UNIXSocket), :pair),
            s(:args,
              s(:arg, :s1),
              s(:arg, :s2)),
            s(:begin,
              s(:send,
                s(:lvar, :s1), :shutdown,
                s(:const,
                  s(:const, nil, :Socket), :SHUT_WR)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :Errno), :EPIPE)),
                s(:args),
                s(:send,
                  s(:lvar, :s1), :write,
                  s(:str, "a"))),
              s(:send, nil, :assert_equal,
                s(:nil),
                s(:send,
                  s(:lvar, :s2), :read,
                  s(:int, 1))),
              s(:send,
                s(:lvar, :s2), :write,
                s(:str, "a")),
              s(:send, nil, :assert_equal,
                s(:str, "a"),
                s(:send,
                  s(:lvar, :s1), :read,
                  s(:int, 1)))))),
        s(:def, :test_socket_pair_with_block,
          s(:args),
          s(:begin,
            s(:lvasgn, :pair,
              s(:nil)),
            s(:lvasgn, :ret,
              s(:block,
                s(:send,
                  s(:const, nil, :Socket), :pair,
                  s(:const,
                    s(:const, nil, :Socket), :AF_UNIX),
                  s(:const,
                    s(:const, nil, :Socket), :SOCK_STREAM),
                  s(:int, 0)),
                s(:args,
                  s(:arg, :s1),
                  s(:arg, :s2)),
                s(:begin,
                  s(:lvasgn, :pair,
                    s(:array,
                      s(:lvar, :s1),
                      s(:lvar, :s2))),
                  s(:sym, :return_value)))),
            s(:send, nil, :assert_equal,
              s(:sym, :return_value),
              s(:lvar, :ret)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Socket),
              s(:send,
                s(:lvar, :pair), :[],
                s(:int, 0))),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Socket),
              s(:send,
                s(:lvar, :pair), :[],
                s(:int, 1))))),
        s(:def, :test_unix_socket_pair_with_block,
          s(:args),
          s(:begin,
            s(:lvasgn, :pair,
              s(:nil)),
            s(:block,
              s(:send,
                s(:const, nil, :UNIXSocket), :pair),
              s(:args,
                s(:arg, :s1),
                s(:arg, :s2)),
              s(:lvasgn, :pair,
                s(:array,
                  s(:lvar, :s1),
                  s(:lvar, :s2)))),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :UNIXSocket),
              s(:send,
                s(:lvar, :pair), :[],
                s(:int, 0))),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :UNIXSocket),
              s(:send,
                s(:lvar, :pair), :[],
                s(:int, 1))))),
        s(:def, :test_unix_socket_pair_close_on_exec,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :UNIXSocket), :pair),
            s(:args,
              s(:arg, :s1),
              s(:arg, :s2)),
            s(:begin,
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :s1), :close_on_exec?)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :s2), :close_on_exec?))))),
        s(:def, :test_initialize,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :mktmpdir),
            s(:args,
              s(:arg, :d)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:const, nil, :Socket), :open,
                  s(:const,
                    s(:const, nil, :Socket), :AF_UNIX),
                  s(:const,
                    s(:const, nil, :Socket), :SOCK_STREAM),
                  s(:int, 0)),
                s(:args,
                  s(:arg, :s)),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :bind,
                    s(:send,
                      s(:const, nil, :Socket), :pack_sockaddr_un,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :d)),
                        s(:str, "/s1")))),
                  s(:lvasgn, :addr,
                    s(:send,
                      s(:lvar, :s), :getsockname)),
                  s(:block,
                    s(:send, nil, :assert_nothing_raised),
                    s(:args),
                    s(:send,
                      s(:const, nil, :Socket), :unpack_sockaddr_un,
                      s(:lvar, :addr))),
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:const, nil, :ArgumentError)),
                    s(:args),
                    s(:send,
                      s(:const, nil, :Socket), :unpack_sockaddr_in,
                      s(:lvar, :addr))))),
              s(:block,
                s(:send,
                  s(:const, nil, :Socket), :open,
                  s(:str, "AF_UNIX"),
                  s(:str, "SOCK_STREAM"),
                  s(:int, 0)),
                s(:args,
                  s(:arg, :s)),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :bind,
                    s(:send,
                      s(:const, nil, :Socket), :pack_sockaddr_un,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :d)),
                        s(:str, "/s2")))),
                  s(:lvasgn, :addr,
                    s(:send,
                      s(:lvar, :s), :getsockname)),
                  s(:block,
                    s(:send, nil, :assert_nothing_raised),
                    s(:args),
                    s(:send,
                      s(:const, nil, :Socket), :unpack_sockaddr_un,
                      s(:lvar, :addr))),
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:const, nil, :ArgumentError)),
                    s(:args),
                    s(:send,
                      s(:const, nil, :Socket), :unpack_sockaddr_in,
                      s(:lvar, :addr)))))))),
        s(:def, :test_unix_server_socket,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :mktmpdir),
            s(:args,
              s(:arg, :d)),
            s(:begin,
              s(:lvasgn, :path,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :d)),
                  s(:str, "/sock"))),
              s(:lvasgn, :s0,
                s(:nil)),
              s(:block,
                s(:send,
                  s(:const, nil, :Socket), :unix_server_socket,
                  s(:lvar, :path)),
                s(:args,
                  s(:arg, :s)),
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:lvar, :path),
                    s(:send,
                      s(:send,
                        s(:lvar, :s), :local_address), :unix_path)),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:const, nil, :File), :socket?,
                      s(:lvar, :path))),
                  s(:lvasgn, :s0,
                    s(:lvar, :s)))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :s0), :closed?)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :Errno), :ENOENT)),
                s(:args),
                s(:send,
                  s(:const, nil, :File), :stat,
                  s(:lvar, :path)))))),
        s(:def, :test_getcred_ucred,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:regexp,
                  s(:str, "linux"),
                  s(:regopt)), :!~,
                s(:const, nil, :RUBY_PLATFORM)),
              s(:return), nil),
            s(:block,
              s(:send,
                s(:const, nil, :Dir), :mktmpdir),
              s(:args,
                s(:arg, :d)),
              s(:begin,
                s(:lvasgn, :sockpath,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :d)),
                    s(:str, "/sock"))),
                s(:block,
                  s(:send,
                    s(:const, nil, :Socket), :unix_server_socket,
                    s(:lvar, :sockpath)),
                  s(:args,
                    s(:arg, :serv)),
                  s(:block,
                    s(:send,
                      s(:const, nil, :Socket), :unix,
                      s(:lvar, :sockpath)),
                    s(:args,
                      s(:arg, :c)),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :s)),
                        s(:send,
                          s(:lvar, :serv), :accept)),
                      s(:kwbegin,
                        s(:ensure,
                          s(:begin,
                            s(:lvasgn, :cred,
                              s(:send,
                                s(:lvar, :s), :getsockopt,
                                s(:sym, :SOCKET),
                                s(:sym, :PEERCRED))),
                            s(:lvasgn, :inspect,
                              s(:send,
                                s(:lvar, :cred), :inspect)),
                            s(:send, nil, :assert_match,
                              s(:regexp,
                                s(:str, " pid="),
                                s(:begin,
                                  s(:gvar, :$$)),
                                s(:str, " "),
                                s(:regopt)),
                              s(:lvar, :inspect)),
                            s(:send, nil, :assert_match,
                              s(:regexp,
                                s(:str, " euid="),
                                s(:begin,
                                  s(:send,
                                    s(:const, nil, :Process), :euid)),
                                s(:str, " "),
                                s(:regopt)),
                              s(:lvar, :inspect)),
                            s(:send, nil, :assert_match,
                              s(:regexp,
                                s(:str, " egid="),
                                s(:begin,
                                  s(:send,
                                    s(:const, nil, :Process), :egid)),
                                s(:str, " "),
                                s(:regopt)),
                              s(:lvar, :inspect)),
                            s(:send, nil, :assert_match,
                              s(:regexp,
                                s(:str, " \\(ucred\\)"),
                                s(:regopt)),
                              s(:lvar, :inspect))),
                          s(:send,
                            s(:lvar, :s), :close)))))))))),
        s(:def, :test_getcred_xucred,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:regexp,
                  s(:str, "freebsd|darwin"),
                  s(:regopt)), :!~,
                s(:const, nil, :RUBY_PLATFORM)),
              s(:return), nil),
            s(:block,
              s(:send,
                s(:const, nil, :Dir), :mktmpdir),
              s(:args,
                s(:arg, :d)),
              s(:begin,
                s(:lvasgn, :sockpath,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :d)),
                    s(:str, "/sock"))),
                s(:lvasgn, :serv,
                  s(:send,
                    s(:const, nil, :Socket), :unix_server_socket,
                    s(:lvar, :sockpath))),
                s(:send,
                  s(:const, nil, :Socket), :unix,
                  s(:lvar, :sockpath)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :s)),
                  s(:send,
                    s(:lvar, :serv), :accept)),
                s(:lvasgn, :cred,
                  s(:send,
                    s(:lvar, :s), :getsockopt,
                    s(:int, 0),
                    s(:const,
                      s(:const, nil, :Socket), :LOCAL_PEERCRED))),
                s(:lvasgn, :inspect,
                  s(:send,
                    s(:lvar, :cred), :inspect)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, " euid="),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Process), :euid)),
                    s(:str, " "),
                    s(:regopt)),
                  s(:lvar, :inspect)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, " \\(xucred\\)"),
                    s(:regopt)),
                  s(:lvar, :inspect)))))),
        s(:def, :test_sendcred_ucred,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:regexp,
                  s(:str, "linux"),
                  s(:regopt)), :!~,
                s(:const, nil, :RUBY_PLATFORM)),
              s(:return), nil),
            s(:block,
              s(:send,
                s(:const, nil, :Dir), :mktmpdir),
              s(:args,
                s(:arg, :d)),
              s(:begin,
                s(:lvasgn, :sockpath,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :d)),
                    s(:str, "/sock"))),
                s(:block,
                  s(:send,
                    s(:const, nil, :Socket), :unix_server_socket,
                    s(:lvar, :sockpath)),
                  s(:args,
                    s(:arg, :serv)),
                  s(:block,
                    s(:send,
                      s(:const, nil, :Socket), :unix,
                      s(:lvar, :sockpath)),
                    s(:args,
                      s(:arg, :c)),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :s)),
                        s(:send,
                          s(:lvar, :serv), :accept)),
                      s(:kwbegin,
                        s(:ensure,
                          s(:begin,
                            s(:send,
                              s(:lvar, :s), :setsockopt,
                              s(:sym, :SOCKET),
                              s(:sym, :PASSCRED),
                              s(:int, 1)),
                            s(:send,
                              s(:lvar, :c), :print,
                              s(:str, "a")),
                            s(:masgn,
                              s(:mlhs,
                                s(:lvasgn, :msg),
                                s(:lvasgn, :_),
                                s(:lvasgn, :_),
                                s(:lvasgn, :cred)),
                              s(:send,
                                s(:lvar, :s), :recvmsg)),
                            s(:lvasgn, :inspect,
                              s(:send,
                                s(:lvar, :cred), :inspect)),
                            s(:send, nil, :assert_equal,
                              s(:str, "a"),
                              s(:lvar, :msg)),
                            s(:send, nil, :assert_match,
                              s(:regexp,
                                s(:str, " pid="),
                                s(:begin,
                                  s(:gvar, :$$)),
                                s(:str, " "),
                                s(:regopt)),
                              s(:lvar, :inspect)),
                            s(:send, nil, :assert_match,
                              s(:regexp,
                                s(:str, " uid="),
                                s(:begin,
                                  s(:send,
                                    s(:const, nil, :Process), :uid)),
                                s(:str, " "),
                                s(:regopt)),
                              s(:lvar, :inspect)),
                            s(:send, nil, :assert_match,
                              s(:regexp,
                                s(:str, " gid="),
                                s(:begin,
                                  s(:send,
                                    s(:const, nil, :Process), :gid)),
                                s(:str, " "),
                                s(:regopt)),
                              s(:lvar, :inspect)),
                            s(:send, nil, :assert_match,
                              s(:regexp,
                                s(:str, " \\(ucred\\)"),
                                s(:regopt)),
                              s(:lvar, :inspect))),
                          s(:send,
                            s(:lvar, :s), :close)))))))))),
        s(:def, :test_sendcred_sockcred,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:regexp,
                  s(:str, "netbsd|freebsd"),
                  s(:regopt)), :!~,
                s(:const, nil, :RUBY_PLATFORM)),
              s(:return), nil),
            s(:block,
              s(:send,
                s(:const, nil, :Dir), :mktmpdir),
              s(:args,
                s(:arg, :d)),
              s(:begin,
                s(:lvasgn, :sockpath,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :d)),
                    s(:str, "/sock"))),
                s(:lvasgn, :serv,
                  s(:send,
                    s(:const, nil, :Socket), :unix_server_socket,
                    s(:lvar, :sockpath))),
                s(:lvasgn, :c,
                  s(:send,
                    s(:const, nil, :Socket), :unix,
                    s(:lvar, :sockpath))),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :s)),
                  s(:send,
                    s(:lvar, :serv), :accept)),
                s(:send,
                  s(:lvar, :s), :setsockopt,
                  s(:int, 0),
                  s(:const,
                    s(:const, nil, :Socket), :LOCAL_CREDS),
                  s(:int, 1)),
                s(:send,
                  s(:lvar, :c), :print,
                  s(:str, "a")),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :msg),
                    s(:lvasgn, :_),
                    s(:lvasgn, :_),
                    s(:lvasgn, :cred)),
                  s(:send,
                    s(:lvar, :s), :recvmsg)),
                s(:send, nil, :assert_equal,
                  s(:str, "a"),
                  s(:lvar, :msg)),
                s(:lvasgn, :inspect,
                  s(:send,
                    s(:lvar, :cred), :inspect)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, " uid="),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Process), :uid)),
                    s(:str, " "),
                    s(:regopt)),
                  s(:lvar, :inspect)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, " euid="),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Process), :euid)),
                    s(:str, " "),
                    s(:regopt)),
                  s(:lvar, :inspect)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, " gid="),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Process), :gid)),
                    s(:str, " "),
                    s(:regopt)),
                  s(:lvar, :inspect)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, " egid="),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Process), :egid)),
                    s(:str, " "),
                    s(:regopt)),
                  s(:lvar, :inspect)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, " \\(sockcred\\)"),
                    s(:regopt)),
                  s(:lvar, :inspect)))))),
        s(:def, :test_sendcred_cmsgcred,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:regexp,
                  s(:str, "freebsd"),
                  s(:regopt)), :!~,
                s(:const, nil, :RUBY_PLATFORM)),
              s(:return), nil),
            s(:block,
              s(:send,
                s(:const, nil, :Dir), :mktmpdir),
              s(:args,
                s(:arg, :d)),
              s(:begin,
                s(:lvasgn, :sockpath,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :d)),
                    s(:str, "/sock"))),
                s(:lvasgn, :serv,
                  s(:send,
                    s(:const, nil, :Socket), :unix_server_socket,
                    s(:lvar, :sockpath))),
                s(:lvasgn, :c,
                  s(:send,
                    s(:const, nil, :Socket), :unix,
                    s(:lvar, :sockpath))),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :s)),
                  s(:send,
                    s(:lvar, :serv), :accept)),
                s(:send,
                  s(:lvar, :c), :sendmsg,
                  s(:str, "a"),
                  s(:int, 0),
                  s(:nil),
                  s(:array,
                    s(:sym, :SOCKET),
                    s(:const,
                      s(:const, nil, :Socket), :SCM_CREDS),
                    s(:str, ""))),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :msg),
                    s(:lvasgn, :_),
                    s(:lvasgn, :_),
                    s(:lvasgn, :cred)),
                  s(:send,
                    s(:lvar, :s), :recvmsg)),
                s(:send, nil, :assert_equal,
                  s(:str, "a"),
                  s(:lvar, :msg)),
                s(:lvasgn, :inspect,
                  s(:send,
                    s(:lvar, :cred), :inspect)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, " pid="),
                    s(:begin,
                      s(:gvar, :$$)),
                    s(:str, " "),
                    s(:regopt)),
                  s(:lvar, :inspect)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, " uid="),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Process), :uid)),
                    s(:str, " "),
                    s(:regopt)),
                  s(:lvar, :inspect)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, " euid="),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Process), :euid)),
                    s(:str, " "),
                    s(:regopt)),
                  s(:lvar, :inspect)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, " gid="),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Process), :gid)),
                    s(:str, " "),
                    s(:regopt)),
                  s(:lvar, :inspect)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, " \\(cmsgcred\\)"),
                    s(:regopt)),
                  s(:lvar, :inspect)))))),
        s(:def, :test_getpeereid,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :mktmpdir),
            s(:args,
              s(:arg, :d)),
            s(:begin,
              s(:lvasgn, :path,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :d)),
                  s(:str, "/sock"))),
              s(:block,
                s(:send,
                  s(:const, nil, :Socket), :unix_server_socket,
                  s(:lvar, :path)),
                s(:args,
                  s(:arg, :serv)),
                s(:block,
                  s(:send,
                    s(:const, nil, :Socket), :unix,
                    s(:lvar, :path)),
                  s(:args,
                    s(:arg, :c)),
                  s(:begin,
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :s)),
                      s(:send,
                        s(:lvar, :serv), :accept)),
                    s(:kwbegin,
                      s(:ensure,
                        s(:rescue,
                          s(:begin,
                            s(:send, nil, :assert_equal,
                              s(:array,
                                s(:send,
                                  s(:const, nil, :Process), :euid),
                                s(:send,
                                  s(:const, nil, :Process), :egid)),
                              s(:send,
                                s(:lvar, :c), :getpeereid)),
                            s(:send, nil, :assert_equal,
                              s(:array,
                                s(:send,
                                  s(:const, nil, :Process), :euid),
                                s(:send,
                                  s(:const, nil, :Process), :egid)),
                              s(:send,
                                s(:lvar, :s), :getpeereid))),
                          s(:resbody,
                            s(:array,
                              s(:const, nil, :NotImplementedError)), nil, nil), nil),
                        s(:send,
                          s(:lvar, :s), :close))))))))),
        s(:def, :test_abstract_unix_server,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:regexp,
                  s(:str, "linux"),
                  s(:regopt)), :!~,
                s(:const, nil, :RUBY_PLATFORM)),
              s(:return), nil),
            s(:lvasgn, :name,
              s(:str, "\u0000ruby-test_unix")),
            s(:lvasgn, :s0,
              s(:nil)),
            s(:block,
              s(:send,
                s(:const, nil, :UNIXServer), :open,
                s(:lvar, :name)),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:lvar, :name),
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :local_address), :unix_path)),
                s(:lvasgn, :s0,
                  s(:lvar, :s)),
                s(:block,
                  s(:send,
                    s(:const, nil, :UNIXSocket), :open,
                    s(:lvar, :name)),
                  s(:args,
                    s(:arg, :c)),
                  s(:begin,
                    s(:lvasgn, :sock,
                      s(:send,
                        s(:lvar, :s), :accept)),
                    s(:kwbegin,
                      s(:ensure,
                        s(:send, nil, :assert_equal,
                          s(:lvar, :name),
                          s(:send,
                            s(:send,
                              s(:lvar, :c), :remote_address), :unix_path)),
                        s(:send,
                          s(:lvar, :sock), :close))))))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :s0), :closed?)))),
        s(:def, :test_abstract_unix_socket_econnrefused,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:regexp,
                  s(:str, "linux"),
                  s(:regopt)), :!~,
                s(:const, nil, :RUBY_PLATFORM)),
              s(:return), nil),
            s(:lvasgn, :name,
              s(:str, "\u0000ruby-test_unix")),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :Errno), :ECONNREFUSED)),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :UNIXSocket), :open,
                  s(:lvar, :name)),
                s(:args), nil)))),
        s(:def, :test_abstract_unix_server_socket,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:regexp,
                  s(:str, "linux"),
                  s(:regopt)), :!~,
                s(:const, nil, :RUBY_PLATFORM)),
              s(:return), nil),
            s(:lvasgn, :name,
              s(:str, "\u0000ruby-test_unix")),
            s(:lvasgn, :s0,
              s(:nil)),
            s(:block,
              s(:send,
                s(:const, nil, :Socket), :unix_server_socket,
                s(:lvar, :name)),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:lvar, :name),
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :local_address), :unix_path)),
                s(:lvasgn, :s0,
                  s(:lvar, :s)),
                s(:block,
                  s(:send,
                    s(:const, nil, :Socket), :unix,
                    s(:lvar, :name)),
                  s(:args,
                    s(:arg, :c)),
                  s(:begin,
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :sock)),
                      s(:send,
                        s(:lvar, :s), :accept)),
                    s(:kwbegin,
                      s(:ensure,
                        s(:send, nil, :assert_equal,
                          s(:lvar, :name),
                          s(:send,
                            s(:send,
                              s(:lvar, :c), :remote_address), :unix_path)),
                        s(:send,
                          s(:lvar, :sock), :close))))))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :s0), :closed?)))),
        s(:def, :test_autobind,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:regexp,
                  s(:str, "linux"),
                  s(:regopt)), :!~,
                s(:const, nil, :RUBY_PLATFORM)),
              s(:return), nil),
            s(:lvasgn, :s0,
              s(:nil)),
            s(:block,
              s(:send,
                s(:const, nil, :Socket), :unix_server_socket,
                s(:str, "")),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :local_address), :unix_path)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "\\A\\0[0-9a-f]{5}\\z"),
                    s(:regopt)),
                  s(:lvar, :name)),
                s(:lvasgn, :s0,
                  s(:lvar, :s)),
                s(:block,
                  s(:send,
                    s(:const, nil, :Socket), :unix,
                    s(:lvar, :name)),
                  s(:args,
                    s(:arg, :c)),
                  s(:begin,
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :sock)),
                      s(:send,
                        s(:lvar, :s), :accept)),
                    s(:kwbegin,
                      s(:ensure,
                        s(:send, nil, :assert_equal,
                          s(:lvar, :name),
                          s(:send,
                            s(:send,
                              s(:lvar, :c), :remote_address), :unix_path)),
                        s(:send,
                          s(:lvar, :sock), :close))))))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :s0), :closed?)))),
        s(:def, :test_accept_nonblock,
          s(:args),
          s(:block,
            s(:send, nil, :bound_unix_socket,
              s(:const, nil, :UNIXServer)),
            s(:args,
              s(:arg, :serv),
              s(:arg, :path)),
            s(:begin,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable)),
                s(:args),
                s(:send,
                  s(:lvar, :serv), :accept_nonblock)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable)),
                s(:args),
                s(:send,
                  s(:lvar, :serv), :accept_nonblock,
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:true))))),
              s(:send, nil, :assert_equal,
                s(:sym, :wait_readable),
                s(:send,
                  s(:lvar, :serv), :accept_nonblock,
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:false)))))))))), nil))
