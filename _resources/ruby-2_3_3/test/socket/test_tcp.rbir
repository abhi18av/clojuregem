s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :require,
          s(:str, "socket")),
        s(:send, nil, :require,
          s(:str, "test/unit"))),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:defined?,
      s(:const, nil, :TCPSocket)),
    s(:class,
      s(:const, nil, :TestSocket_TCPSocket),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :test_initialize_failure,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :test_ip_addresses,
                s(:array,
                  s(:str, "192.0.2.1"),
                  s(:str, "192.0.2.42"),
                  s(:str, "198.51.100.1"),
                  s(:str, "198.51.100.42"),
                  s(:str, "203.0.113.1"),
                  s(:str, "203.0.113.42"))),
              s(:kwbegin,
                s(:rescue,
                  s(:lvasgn, :list,
                    s(:send,
                      s(:const, nil, :Socket), :ip_address_list)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :NotImplementedError)), nil,
                    s(:return)), nil)),
              s(:op_asgn,
                s(:lvasgn, :test_ip_addresses), :-,
                s(:block,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :list), :reject),
                      s(:args,
                        s(:arg, :ai)),
                      s(:send,
                        s(:send,
                          s(:lvar, :ai), :ipv4?), :!)), :map),
                  s(:args,
                    s(:arg, :ai)),
                  s(:send,
                    s(:lvar, :ai), :ip_address))),
              s(:if,
                s(:send,
                  s(:lvar, :test_ip_addresses), :empty?),
                s(:return), nil),
              s(:lvasgn, :client_addr,
                s(:send,
                  s(:lvar, :test_ip_addresses), :first)),
              s(:lvasgn, :client_port,
                s(:int, 8000)),
              s(:lvasgn, :server_addr,
                s(:str, "127.0.0.1")),
              s(:lvasgn, :server_port,
                s(:int, 80)),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:lvasgn, :t,
                      s(:send,
                        s(:const, nil, :TCPSocket), :new,
                        s(:lvar, :server_addr),
                        s(:lvar, :server_port),
                        s(:lvar, :client_addr),
                        s(:lvar, :client_port))),
                    s(:send, nil, :flunk,
                      s(:str, "expected SystemCallError"))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :SystemCallError)),
                    s(:lvasgn, :e),
                    s(:send, nil, :assert_match,
                      s(:dstr,
                        s(:str, "for \""),
                        s(:begin,
                          s(:lvar, :client_addr)),
                        s(:str, "\" port "),
                        s(:begin,
                          s(:lvar, :client_port))),
                      s(:send,
                        s(:lvar, :e), :message))), nil))),
            s(:if,
              s(:and,
                s(:lvar, :t),
                s(:send,
                  s(:send,
                    s(:lvar, :t), :closed?), :!)),
              s(:send,
                s(:lvar, :t), :close), nil))),
        s(:def, :test_recvfrom,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :TCPServer), :open,
              s(:str, "localhost"),
              s(:int, 0)),
            s(:args,
              s(:arg, :svr)),
            s(:begin,
              s(:lvasgn, :th,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :c,
                      s(:send,
                        s(:lvar, :svr), :accept)),
                    s(:send,
                      s(:lvar, :c), :write,
                      s(:str, "foo")),
                    s(:send,
                      s(:lvar, :c), :close)))),
              s(:lvasgn, :addr,
                s(:send,
                  s(:lvar, :svr), :addr)),
              s(:block,
                s(:send,
                  s(:const, nil, :TCPSocket), :open,
                  s(:send,
                    s(:lvar, :addr), :[],
                    s(:int, 3)),
                  s(:send,
                    s(:lvar, :addr), :[],
                    s(:int, 1))),
                s(:args,
                  s(:arg, :sock)),
                s(:send, nil, :assert_equal,
                  s(:array,
                    s(:str, "foo"),
                    s(:nil)),
                  s(:send,
                    s(:lvar, :sock), :recvfrom,
                    s(:int, 65536)))),
              s(:send,
                s(:lvar, :th), :join)))),
        s(:def, :test_encoding,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :TCPServer), :open,
              s(:str, "localhost"),
              s(:int, 0)),
            s(:args,
              s(:arg, :svr)),
            s(:begin,
              s(:lvasgn, :th,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :c,
                      s(:send,
                        s(:lvar, :svr), :accept)),
                    s(:send,
                      s(:lvar, :c), :write,
                      s(:str, "foo\r\n")),
                    s(:send,
                      s(:lvar, :c), :close)))),
              s(:lvasgn, :addr,
                s(:send,
                  s(:lvar, :svr), :addr)),
              s(:block,
                s(:send,
                  s(:const, nil, :TCPSocket), :open,
                  s(:send,
                    s(:lvar, :addr), :[],
                    s(:int, 3)),
                  s(:send,
                    s(:lvar, :addr), :[],
                    s(:int, 1))),
                s(:args,
                  s(:arg, :sock)),
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:true),
                    s(:send,
                      s(:lvar, :sock), :binmode?)),
                  s(:lvasgn, :s,
                    s(:send,
                      s(:lvar, :sock), :gets)),
                  s(:send, nil, :assert_equal,
                    s(:str, "foo\r\n"),
                    s(:lvar, :s)),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:const, nil, :Encoding), :find,
                      s(:str, "ASCII-8BIT")),
                    s(:send,
                      s(:lvar, :s), :encoding)))),
              s(:send,
                s(:lvar, :th), :join)))),
        s(:def, :test_accept_nonblock,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :TCPServer), :open,
              s(:str, "localhost"),
              s(:int, 0)),
            s(:args,
              s(:arg, :svr)),
            s(:begin,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable)),
                s(:args),
                s(:send,
                  s(:lvar, :svr), :accept_nonblock)),
              s(:send, nil, :assert_equal,
                s(:sym, :wait_readable),
                s(:send,
                  s(:lvar, :svr), :accept_nonblock,
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:false))))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable)),
                s(:args),
                s(:send,
                  s(:lvar, :svr), :accept_nonblock,
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:true)))))))))), nil))
