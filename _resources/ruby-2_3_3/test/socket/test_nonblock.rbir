s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :require,
          s(:str, "socket")),
        s(:send, nil, :require,
          s(:str, "io/nonblock")),
        s(:send, nil, :require,
          s(:str, "io/wait"))),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:send, nil, :require,
    s(:str, "timeout")),
  s(:if,
    s(:defined?,
      s(:const, nil, :Socket)),
    s(:class,
      s(:const, nil, :TestSocketNonblock),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :test_accept_nonblock,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :serv,
                s(:send,
                  s(:const, nil, :Socket), :new,
                  s(:const,
                    s(:const, nil, :Socket), :AF_INET),
                  s(:const,
                    s(:const, nil, :Socket), :SOCK_STREAM),
                  s(:int, 0))),
              s(:send,
                s(:lvar, :serv), :bind,
                s(:send,
                  s(:const, nil, :Socket), :sockaddr_in,
                  s(:int, 0),
                  s(:str, "127.0.0.1"))),
              s(:send,
                s(:lvar, :serv), :listen,
                s(:int, 5)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable)),
                s(:args),
                s(:send,
                  s(:lvar, :serv), :accept_nonblock)),
              s(:send, nil, :assert_equal,
                s(:sym, :wait_readable),
                s(:send,
                  s(:lvar, :serv), :accept_nonblock,
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:false))))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable)),
                s(:args),
                s(:send,
                  s(:lvar, :serv), :accept_nonblock,
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:true))))),
              s(:lvasgn, :c,
                s(:send,
                  s(:const, nil, :Socket), :new,
                  s(:const,
                    s(:const, nil, :Socket), :AF_INET),
                  s(:const,
                    s(:const, nil, :Socket), :SOCK_STREAM),
                  s(:int, 0))),
              s(:send,
                s(:lvar, :c), :connect,
                s(:send,
                  s(:lvar, :serv), :getsockname)),
              s(:kwbegin,
                s(:rescue,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :s),
                      s(:lvasgn, :sockaddr)),
                    s(:send,
                      s(:lvar, :serv), :accept_nonblock)),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :IO), :WaitReadable)), nil,
                    s(:begin,
                      s(:send,
                        s(:const, nil, :IO), :select,
                        s(:array,
                          s(:lvar, :serv))),
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :s),
                          s(:lvasgn, :sockaddr)),
                        s(:send,
                          s(:lvar, :serv), :accept_nonblock)))), nil)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :Socket), :unpack_sockaddr_in,
                  s(:send,
                    s(:lvar, :c), :getsockname)),
                s(:send,
                  s(:const, nil, :Socket), :unpack_sockaddr_in,
                  s(:lvar, :sockaddr))),
              s(:if,
                s(:send,
                  s(:lvar, :s), :respond_to?,
                  s(:sym, :nonblock?)),
                s(:send, nil, :assert_predicate,
                  s(:lvar, :s),
                  s(:sym, :nonblock?),
                  s(:str, "accepted socket is non-blocking")), nil)),
            s(:begin,
              s(:if,
                s(:lvar, :serv),
                s(:send,
                  s(:lvar, :serv), :close), nil),
              s(:if,
                s(:lvar, :c),
                s(:send,
                  s(:lvar, :c), :close), nil),
              s(:if,
                s(:lvar, :s),
                s(:send,
                  s(:lvar, :s), :close), nil)))),
        s(:def, :test_connect_nonblock,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :serv,
                s(:send,
                  s(:const, nil, :Socket), :new,
                  s(:const,
                    s(:const, nil, :Socket), :AF_INET),
                  s(:const,
                    s(:const, nil, :Socket), :SOCK_STREAM),
                  s(:int, 0))),
              s(:send,
                s(:lvar, :serv), :bind,
                s(:send,
                  s(:const, nil, :Socket), :sockaddr_in,
                  s(:int, 0),
                  s(:str, "127.0.0.1"))),
              s(:send,
                s(:lvar, :serv), :listen,
                s(:int, 5)),
              s(:lvasgn, :c,
                s(:send,
                  s(:const, nil, :Socket), :new,
                  s(:const,
                    s(:const, nil, :Socket), :AF_INET),
                  s(:const,
                    s(:const, nil, :Socket), :SOCK_STREAM),
                  s(:int, 0))),
              s(:lvasgn, :servaddr,
                s(:send,
                  s(:lvar, :serv), :getsockname)),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:lvar, :c), :connect_nonblock,
                    s(:lvar, :servaddr)),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :IO), :WaitWritable)), nil,
                    s(:begin,
                      s(:send,
                        s(:const, nil, :IO), :select,
                        s(:nil),
                        s(:array,
                          s(:lvar, :c))),
                      s(:block,
                        s(:send, nil, :assert_nothing_raised),
                        s(:args),
                        s(:kwbegin,
                          s(:rescue,
                            s(:send,
                              s(:lvar, :c), :connect_nonblock,
                              s(:lvar, :servaddr)),
                            s(:resbody,
                              s(:array,
                                s(:const,
                                  s(:const, nil, :Errno), :EISCONN)), nil, nil), nil))))), nil)),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :s),
                  s(:lvasgn, :sockaddr)),
                s(:send,
                  s(:lvar, :serv), :accept)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :Socket), :unpack_sockaddr_in,
                  s(:send,
                    s(:lvar, :c), :getsockname)),
                s(:send,
                  s(:const, nil, :Socket), :unpack_sockaddr_in,
                  s(:lvar, :sockaddr)))),
            s(:begin,
              s(:if,
                s(:lvar, :serv),
                s(:send,
                  s(:lvar, :serv), :close), nil),
              s(:if,
                s(:lvar, :c),
                s(:send,
                  s(:lvar, :c), :close), nil),
              s(:if,
                s(:lvar, :s),
                s(:send,
                  s(:lvar, :s), :close), nil)))),
        s(:def, :test_connect_nonblock_no_exception,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :serv,
                s(:send,
                  s(:const, nil, :Socket), :new,
                  s(:sym, :INET),
                  s(:sym, :STREAM))),
              s(:send,
                s(:lvar, :serv), :bind,
                s(:send,
                  s(:const, nil, :Socket), :sockaddr_in,
                  s(:int, 0),
                  s(:str, "127.0.0.1"))),
              s(:send,
                s(:lvar, :serv), :listen,
                s(:int, 5)),
              s(:lvasgn, :c,
                s(:send,
                  s(:const, nil, :Socket), :new,
                  s(:sym, :INET),
                  s(:sym, :STREAM))),
              s(:lvasgn, :servaddr,
                s(:send,
                  s(:lvar, :serv), :getsockname)),
              s(:lvasgn, :rv,
                s(:send,
                  s(:lvar, :c), :connect_nonblock,
                  s(:lvar, :servaddr),
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:false))))),
              s(:case,
                s(:lvar, :rv),
                s(:when,
                  s(:int, 0), nil),
                s(:send, nil, :assert_equal,
                  s(:sym, :wait_writable),
                  s(:lvar, :rv))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:array),
                  s(:array,
                    s(:lvar, :c)),
                  s(:array)),
                s(:send,
                  s(:const, nil, :IO), :select,
                  s(:nil),
                  s(:array,
                    s(:lvar, :c)),
                  s(:nil),
                  s(:int, 60))),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:lvar, :c), :connect_nonblock,
                  s(:lvar, :servaddr),
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:false)))),
                s(:str, "there should be no EISCONN error")),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :s),
                  s(:lvasgn, :sockaddr)),
                s(:send,
                  s(:lvar, :serv), :accept)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :Socket), :unpack_sockaddr_in,
                  s(:send,
                    s(:lvar, :c), :getsockname)),
                s(:send,
                  s(:const, nil, :Socket), :unpack_sockaddr_in,
                  s(:lvar, :sockaddr)))),
            s(:begin,
              s(:if,
                s(:lvar, :serv),
                s(:send,
                  s(:lvar, :serv), :close), nil),
              s(:if,
                s(:lvar, :c),
                s(:send,
                  s(:lvar, :c), :close), nil),
              s(:if,
                s(:lvar, :s),
                s(:send,
                  s(:lvar, :s), :close), nil)))),
        s(:def, :test_udp_recvfrom_nonblock,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :u1,
                s(:send,
                  s(:const, nil, :UDPSocket), :new)),
              s(:lvasgn, :u2,
                s(:send,
                  s(:const, nil, :UDPSocket), :new)),
              s(:send,
                s(:lvar, :u1), :bind,
                s(:str, "127.0.0.1"),
                s(:int, 0)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable)),
                s(:args),
                s(:send,
                  s(:lvar, :u1), :recvfrom_nonblock,
                  s(:int, 100))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable),
                  s(:const,
                    s(:const, nil, :Errno), :EINVAL)),
                s(:args),
                s(:send,
                  s(:lvar, :u2), :recvfrom_nonblock,
                  s(:int, 100))),
              s(:send,
                s(:lvar, :u2), :send,
                s(:str, "aaa"),
                s(:int, 0),
                s(:send,
                  s(:lvar, :u1), :getsockname)),
              s(:send,
                s(:const, nil, :IO), :select,
                s(:array,
                  s(:lvar, :u1))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :mesg),
                  s(:lvasgn, :inet_addr)),
                s(:send,
                  s(:lvar, :u1), :recvfrom_nonblock,
                  s(:int, 100))),
              s(:send, nil, :assert_equal,
                s(:int, 4),
                s(:send,
                  s(:lvar, :inet_addr), :length)),
              s(:send, nil, :assert_equal,
                s(:str, "aaa"),
                s(:lvar, :mesg)),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :_),
                  s(:lvasgn, :port),
                  s(:lvasgn, :_),
                  s(:lvasgn, :_)),
                s(:lvar, :inet_addr)),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :u2_port),
                  s(:lvasgn, :_)),
                s(:send,
                  s(:const, nil, :Socket), :unpack_sockaddr_in,
                  s(:send,
                    s(:lvar, :u2), :getsockname))),
              s(:send, nil, :assert_equal,
                s(:lvar, :u2_port),
                s(:lvar, :port)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable)),
                s(:args),
                s(:send,
                  s(:lvar, :u1), :recvfrom_nonblock,
                  s(:int, 100))),
              s(:send,
                s(:lvar, :u2), :send,
                s(:str, ""),
                s(:int, 0),
                s(:send,
                  s(:lvar, :u1), :getsockname)),
              s(:block,
                s(:send, nil, :assert_nothing_raised,
                  s(:str, "cygwin 1.5.19 has a problem to send an empty UDP packet. [ruby-dev:28915]")),
                s(:args),
                s(:block,
                  s(:send,
                    s(:const, nil, :Timeout), :timeout,
                    s(:int, 1)),
                  s(:args),
                  s(:send,
                    s(:const, nil, :IO), :select,
                    s(:array,
                      s(:lvar, :u1))))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :mesg),
                  s(:lvasgn, :inet_addr)),
                s(:send,
                  s(:lvar, :u1), :recvfrom_nonblock,
                  s(:int, 100))),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:lvar, :mesg))),
            s(:begin,
              s(:if,
                s(:lvar, :u1),
                s(:send,
                  s(:lvar, :u1), :close), nil),
              s(:if,
                s(:lvar, :u2),
                s(:send,
                  s(:lvar, :u2), :close), nil)))),
        s(:def, :test_udp_recv_nonblock,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :u1,
                s(:send,
                  s(:const, nil, :UDPSocket), :new)),
              s(:lvasgn, :u2,
                s(:send,
                  s(:const, nil, :UDPSocket), :new)),
              s(:send,
                s(:lvar, :u1), :bind,
                s(:str, "127.0.0.1"),
                s(:int, 0)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable)),
                s(:args),
                s(:send,
                  s(:lvar, :u1), :recv_nonblock,
                  s(:int, 100))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable),
                  s(:const,
                    s(:const, nil, :Errno), :EINVAL)),
                s(:args),
                s(:send,
                  s(:lvar, :u2), :recv_nonblock,
                  s(:int, 100))),
              s(:send,
                s(:lvar, :u2), :send,
                s(:str, "aaa"),
                s(:int, 0),
                s(:send,
                  s(:lvar, :u1), :getsockname)),
              s(:send,
                s(:const, nil, :IO), :select,
                s(:array,
                  s(:lvar, :u1))),
              s(:lvasgn, :mesg,
                s(:send,
                  s(:lvar, :u1), :recv_nonblock,
                  s(:int, 100))),
              s(:send, nil, :assert_equal,
                s(:str, "aaa"),
                s(:lvar, :mesg)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable)),
                s(:args),
                s(:send,
                  s(:lvar, :u1), :recv_nonblock,
                  s(:int, 100))),
              s(:send,
                s(:lvar, :u2), :send,
                s(:str, ""),
                s(:int, 0),
                s(:send,
                  s(:lvar, :u1), :getsockname)),
              s(:block,
                s(:send, nil, :assert_nothing_raised,
                  s(:str, "cygwin 1.5.19 has a problem to send an empty UDP packet. [ruby-dev:28915]")),
                s(:args),
                s(:block,
                  s(:send,
                    s(:const, nil, :Timeout), :timeout,
                    s(:int, 1)),
                  s(:args),
                  s(:send,
                    s(:const, nil, :IO), :select,
                    s(:array,
                      s(:lvar, :u1))))),
              s(:lvasgn, :mesg,
                s(:send,
                  s(:lvar, :u1), :recv_nonblock,
                  s(:int, 100))),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:lvar, :mesg)),
              s(:lvasgn, :buf,
                s(:send,
                  s(:str, "short"), :dup)),
              s(:lvasgn, :out,
                s(:send,
                  s(:str, "hello world"), :*,
                  s(:int, 4))),
              s(:send,
                s(:lvar, :out), :freeze),
              s(:send,
                s(:lvar, :u2), :send,
                s(:lvar, :out),
                s(:int, 0),
                s(:send,
                  s(:lvar, :u1), :getsockname)),
              s(:send,
                s(:const, nil, :IO), :select,
                s(:array,
                  s(:lvar, :u1))),
              s(:lvasgn, :rv,
                s(:send,
                  s(:lvar, :u1), :recv_nonblock,
                  s(:int, 100),
                  s(:int, 0),
                  s(:lvar, :buf))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :rv), :object_id),
                s(:send,
                  s(:lvar, :buf), :object_id)),
              s(:send, nil, :assert_equal,
                s(:lvar, :out),
                s(:lvar, :rv)),
              s(:send, nil, :assert_equal,
                s(:lvar, :out),
                s(:lvar, :buf))),
            s(:begin,
              s(:if,
                s(:lvar, :u1),
                s(:send,
                  s(:lvar, :u1), :close), nil),
              s(:if,
                s(:lvar, :u2),
                s(:send,
                  s(:lvar, :u2), :close), nil)))),
        s(:def, :test_socket_recvfrom_nonblock,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :s1,
                s(:send,
                  s(:const, nil, :Socket), :new,
                  s(:const,
                    s(:const, nil, :Socket), :AF_INET),
                  s(:const,
                    s(:const, nil, :Socket), :SOCK_DGRAM),
                  s(:int, 0))),
              s(:send,
                s(:lvar, :s1), :bind,
                s(:send,
                  s(:const, nil, :Socket), :sockaddr_in,
                  s(:int, 0),
                  s(:str, "127.0.0.1"))),
              s(:lvasgn, :s2,
                s(:send,
                  s(:const, nil, :Socket), :new,
                  s(:const,
                    s(:const, nil, :Socket), :AF_INET),
                  s(:const,
                    s(:const, nil, :Socket), :SOCK_DGRAM),
                  s(:int, 0))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable)),
                s(:args),
                s(:send,
                  s(:lvar, :s1), :recvfrom_nonblock,
                  s(:int, 100))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable),
                  s(:const,
                    s(:const, nil, :Errno), :EINVAL)),
                s(:args),
                s(:send,
                  s(:lvar, :s2), :recvfrom_nonblock,
                  s(:int, 100))),
              s(:send,
                s(:lvar, :s2), :send,
                s(:str, "aaa"),
                s(:int, 0),
                s(:send,
                  s(:lvar, :s1), :getsockname)),
              s(:send,
                s(:const, nil, :IO), :select,
                s(:array,
                  s(:lvar, :s1))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :mesg),
                  s(:lvasgn, :sockaddr)),
                s(:send,
                  s(:lvar, :s1), :recvfrom_nonblock,
                  s(:int, 100))),
              s(:send, nil, :assert_equal,
                s(:str, "aaa"),
                s(:lvar, :mesg)),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :port),
                  s(:lvasgn, :_)),
                s(:send,
                  s(:const, nil, :Socket), :unpack_sockaddr_in,
                  s(:lvar, :sockaddr))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :s2_port),
                  s(:lvasgn, :_)),
                s(:send,
                  s(:const, nil, :Socket), :unpack_sockaddr_in,
                  s(:send,
                    s(:lvar, :s2), :getsockname))),
              s(:send, nil, :assert_equal,
                s(:lvar, :s2_port),
                s(:lvar, :port))),
            s(:begin,
              s(:if,
                s(:lvar, :s1),
                s(:send,
                  s(:lvar, :s1), :close), nil),
              s(:if,
                s(:lvar, :s2),
                s(:send,
                  s(:lvar, :s2), :close), nil)))),
        s(:def, :tcp_pair,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :serv,
                s(:send,
                  s(:const, nil, :TCPServer), :new,
                  s(:str, "127.0.0.1"),
                  s(:int, 0))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :_),
                  s(:lvasgn, :port),
                  s(:lvasgn, :_),
                  s(:lvasgn, :addr)),
                s(:send,
                  s(:lvar, :serv), :addr)),
              s(:lvasgn, :c,
                s(:send,
                  s(:const, nil, :TCPSocket), :new,
                  s(:lvar, :addr),
                  s(:lvar, :port))),
              s(:lvasgn, :s,
                s(:send,
                  s(:lvar, :serv), :accept)),
              s(:if,
                s(:send, nil, :block_given?),
                s(:kwbegin,
                  s(:ensure,
                    s(:yield,
                      s(:lvar, :c),
                      s(:lvar, :s)),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :c), :closed?), :!),
                        s(:send,
                          s(:lvar, :c), :close), nil),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :s), :closed?), :!),
                        s(:send,
                          s(:lvar, :s), :close), nil)))),
                s(:return,
                  s(:lvar, :c),
                  s(:lvar, :s)))),
            s(:if,
              s(:and,
                s(:lvar, :serv),
                s(:send,
                  s(:send,
                    s(:lvar, :serv), :closed?), :!)),
              s(:send,
                s(:lvar, :serv), :close), nil))),
        s(:def, :udp_pair,
          s(:args),
          s(:begin,
            s(:lvasgn, :s1,
              s(:send,
                s(:const, nil, :UDPSocket), :new)),
            s(:send,
              s(:lvar, :s1), :bind,
              s(:str, "127.0.0.1"),
              s(:int, 0)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :af),
                s(:lvasgn, :port1),
                s(:lvasgn, :host),
                s(:lvasgn, :addr1)),
              s(:send,
                s(:lvar, :s1), :addr)),
            s(:lvasgn, :s2,
              s(:send,
                s(:const, nil, :UDPSocket), :new)),
            s(:send,
              s(:lvar, :s2), :bind,
              s(:str, "127.0.0.1"),
              s(:int, 0)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :af),
                s(:lvasgn, :port2),
                s(:lvasgn, :host),
                s(:lvasgn, :addr2)),
              s(:send,
                s(:lvar, :s2), :addr)),
            s(:send,
              s(:lvar, :s1), :connect,
              s(:lvar, :addr2),
              s(:lvar, :port2)),
            s(:send,
              s(:lvar, :s2), :connect,
              s(:lvar, :addr1),
              s(:lvar, :port1)),
            s(:if,
              s(:send, nil, :block_given?),
              s(:kwbegin,
                s(:ensure,
                  s(:yield,
                    s(:lvar, :s1),
                    s(:lvar, :s2)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :s1), :closed?), :!),
                      s(:send,
                        s(:lvar, :s1), :close), nil),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :s2), :closed?), :!),
                      s(:send,
                        s(:lvar, :s2), :close), nil)))),
              s(:return,
                s(:lvar, :s1),
                s(:lvar, :s2))))),
        s(:def, :test_tcp_recv_nonblock,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :c),
                  s(:lvasgn, :s)),
                s(:send, nil, :tcp_pair)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable)),
                s(:args),
                s(:send,
                  s(:lvar, :c), :recv_nonblock,
                  s(:int, 100))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable)),
                s(:args),
                s(:send,
                  s(:lvar, :s), :recv_nonblock,
                  s(:int, 100))),
              s(:send,
                s(:lvar, :c), :write,
                s(:str, "abc")),
              s(:send,
                s(:const, nil, :IO), :select,
                s(:array,
                  s(:lvar, :s))),
              s(:send, nil, :assert_equal,
                s(:str, "a"),
                s(:send,
                  s(:lvar, :s), :recv_nonblock,
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:str, "bc"),
                s(:send,
                  s(:lvar, :s), :recv_nonblock,
                  s(:int, 100))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable)),
                s(:args),
                s(:send,
                  s(:lvar, :s), :recv_nonblock,
                  s(:int, 100)))),
            s(:begin,
              s(:if,
                s(:lvar, :c),
                s(:send,
                  s(:lvar, :c), :close), nil),
              s(:if,
                s(:lvar, :s),
                s(:send,
                  s(:lvar, :s), :close), nil)))),
        s(:def, :test_read_nonblock,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :c),
                  s(:lvasgn, :s)),
                s(:send, nil, :tcp_pair)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable)),
                s(:args),
                s(:send,
                  s(:lvar, :c), :read_nonblock,
                  s(:int, 100))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable)),
                s(:args),
                s(:send,
                  s(:lvar, :s), :read_nonblock,
                  s(:int, 100))),
              s(:send,
                s(:lvar, :c), :write,
                s(:str, "abc")),
              s(:send,
                s(:const, nil, :IO), :select,
                s(:array,
                  s(:lvar, :s))),
              s(:send, nil, :assert_equal,
                s(:str, "a"),
                s(:send,
                  s(:lvar, :s), :read_nonblock,
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:str, "bc"),
                s(:send,
                  s(:lvar, :s), :read_nonblock,
                  s(:int, 100))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :IO), :WaitReadable)),
                s(:args),
                s(:send,
                  s(:lvar, :s), :read_nonblock,
                  s(:int, 100)))),
            s(:begin,
              s(:if,
                s(:lvar, :c),
                s(:send,
                  s(:lvar, :c), :close), nil),
              s(:if,
                s(:lvar, :s),
                s(:send,
                  s(:lvar, :s), :close), nil)))),
        s(:def, :test_read_nonblock_no_exception,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :c),
                  s(:lvasgn, :s)),
                s(:send, nil, :tcp_pair)),
              s(:send, nil, :assert_equal,
                s(:sym, :wait_readable),
                s(:send,
                  s(:lvar, :c), :read_nonblock,
                  s(:int, 100),
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:false))))),
              s(:send, nil, :assert_equal,
                s(:sym, :wait_readable),
                s(:send,
                  s(:lvar, :s), :read_nonblock,
                  s(:int, 100),
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:false))))),
              s(:send,
                s(:lvar, :c), :write,
                s(:str, "abc")),
              s(:send,
                s(:const, nil, :IO), :select,
                s(:array,
                  s(:lvar, :s))),
              s(:send, nil, :assert_equal,
                s(:str, "a"),
                s(:send,
                  s(:lvar, :s), :read_nonblock,
                  s(:int, 1),
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:false))))),
              s(:send, nil, :assert_equal,
                s(:str, "bc"),
                s(:send,
                  s(:lvar, :s), :read_nonblock,
                  s(:int, 100),
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:false))))),
              s(:send, nil, :assert_equal,
                s(:sym, :wait_readable),
                s(:send,
                  s(:lvar, :s), :read_nonblock,
                  s(:int, 100),
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:false)))))),
            s(:begin,
              s(:if,
                s(:lvar, :c),
                s(:send,
                  s(:lvar, :c), :close), nil),
              s(:if,
                s(:lvar, :s),
                s(:send,
                  s(:lvar, :s), :close), nil)))),
        s(:def, :test_sendmsg_nonblock_error,
          s(:args),
          s(:block,
            s(:send, nil, :udp_pair),
            s(:args,
              s(:arg, :s1),
              s(:arg, :s2)),
            s(:kwbegin,
              s(:rescue,
                s(:block,
                  s(:send, nil, :loop),
                  s(:args),
                  s(:send,
                    s(:lvar, :s1), :sendmsg_nonblock,
                    s(:send,
                      s(:str, "a"), :*,
                      s(:int, 100000)))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :NotImplementedError),
                    s(:const,
                      s(:const, nil, :Errno), :ENOSYS)), nil,
                  s(:send, nil, :skip,
                    s(:dstr,
                      s(:str, "sendmsg not implemented on this platform: "),
                      s(:begin,
                        s(:gvar, :$!))))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Errno), :EMSGSIZE)), nil, nil),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Errno), :EWOULDBLOCK)), nil,
                  s(:send, nil, :assert_kind_of,
                    s(:const,
                      s(:const, nil, :IO), :WaitWritable),
                    s(:gvar, :$!))), nil)))),
        s(:def, :test_recvfrom_nonblock_no_exception,
          s(:args),
          s(:block,
            s(:send, nil, :udp_pair),
            s(:args,
              s(:arg, :s1),
              s(:arg, :s2)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:sym, :wait_readable),
                s(:send,
                  s(:lvar, :s1), :recvfrom_nonblock,
                  s(:int, 100),
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:false))))),
              s(:send,
                s(:lvar, :s2), :send,
                s(:str, "aaa"),
                s(:int, 0)),
              s(:send, nil, :assert_predicate,
                s(:lvar, :s1),
                s(:sym, :wait_readable)),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :mesg),
                  s(:lvasgn, :inet_addr)),
                s(:send,
                  s(:lvar, :s1), :recvfrom_nonblock,
                  s(:int, 100),
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:false))))),
              s(:send, nil, :assert_equal,
                s(:int, 4),
                s(:send,
                  s(:lvar, :inet_addr), :length)),
              s(:send, nil, :assert_equal,
                s(:str, "aaa"),
                s(:lvar, :mesg))))),
        s(:if,
          s(:and,
            s(:defined?,
              s(:const, nil, :UNIXSocket)),
            s(:defined?,
              s(:const,
                s(:const, nil, :Socket), :SOCK_SEQPACKET))),
          s(:begin,
            s(:def, :test_sendmsg_nonblock_seqpacket,
              s(:args),
              s(:rescue,
                s(:begin,
                  s(:lvasgn, :buf,
                    s(:send,
                      s(:str, "*"), :*,
                      s(:int, 4096))),
                  s(:block,
                    s(:send,
                      s(:const, nil, :UNIXSocket), :pair,
                      s(:sym, :SEQPACKET)),
                    s(:args,
                      s(:arg, :s1),
                      s(:arg, :s2)),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :IO), :WaitWritable)),
                      s(:args),
                      s(:block,
                        s(:send, nil, :loop),
                        s(:args),
                        s(:send,
                          s(:lvar, :s1), :sendmsg_nonblock,
                          s(:lvar, :buf)))))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :NotImplementedError),
                    s(:const,
                      s(:const, nil, :Errno), :ENOSYS),
                    s(:const,
                      s(:const, nil, :Errno), :EPROTONOSUPPORT)), nil,
                  s(:send, nil, :skip,
                    s(:dstr,
                      s(:str, "UNIXSocket.pair(:SEQPACKET) not implemented on this platform: "),
                      s(:begin,
                        s(:gvar, :$!))))), nil)),
            s(:def, :test_sendmsg_nonblock_no_exception,
              s(:args),
              s(:rescue,
                s(:begin,
                  s(:lvasgn, :buf,
                    s(:send,
                      s(:str, "*"), :*,
                      s(:int, 4096))),
                  s(:block,
                    s(:send,
                      s(:const, nil, :UNIXSocket), :pair,
                      s(:sym, :SEQPACKET)),
                    s(:args,
                      s(:arg, :s1),
                      s(:arg, :s2)),
                    s(:begin,
                      s(:lvasgn, :n,
                        s(:int, 0)),
                      s(:block,
                        s(:send,
                          s(:const, nil, :Timeout), :timeout,
                          s(:int, 60)),
                        s(:args),
                        s(:begin,
                          s(:while,
                            s(:true),
                            s(:case,
                              s(:lvasgn, :rv,
                                s(:send,
                                  s(:lvar, :s1), :sendmsg_nonblock,
                                  s(:lvar, :buf),
                                  s(:hash,
                                    s(:pair,
                                      s(:sym, :exception),
                                      s(:false))))),
                              s(:when,
                                s(:const, nil, :Integer),
                                s(:op_asgn,
                                  s(:lvasgn, :n), :+,
                                  s(:lvar, :rv))),
                              s(:when,
                                s(:sym, :wait_writable),
                                s(:break)),
                              s(:send, nil, :flunk,
                                s(:dstr,
                                  s(:str, "unexpected return value: "),
                                  s(:begin,
                                    s(:send,
                                      s(:lvar, :rv), :inspect)))))),
                          s(:send, nil, :assert_equal,
                            s(:sym, :wait_writable),
                            s(:lvar, :rv)),
                          s(:send, nil, :assert_operator,
                            s(:lvar, :n),
                            s(:sym, :>),
                            s(:int, 0))))))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :NotImplementedError),
                    s(:const,
                      s(:const, nil, :Errno), :ENOSYS),
                    s(:const,
                      s(:const, nil, :Errno), :EPROTONOSUPPORT)), nil,
                  s(:send, nil, :skip,
                    s(:dstr,
                      s(:str, "UNIXSocket.pair(:SEQPACKET) not implemented on this platform: "),
                      s(:begin,
                        s(:gvar, :$!))))), nil))), nil),
        s(:def, :test_recvmsg_nonblock_error,
          s(:args),
          s(:block,
            s(:send, nil, :udp_pair),
            s(:args,
              s(:arg, :s1),
              s(:arg, :s2)),
            s(:begin,
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:lvar, :s1), :recvmsg_nonblock,
                    s(:int, 4096)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :NotImplementedError)), nil,
                    s(:send, nil, :skip,
                      s(:str, "recvmsg not implemented on this platform."))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :Errno), :EWOULDBLOCK)), nil,
                    s(:send, nil, :assert_kind_of,
                      s(:const,
                        s(:const, nil, :IO), :WaitReadable),
                      s(:gvar, :$!))), nil)),
              s(:send, nil, :assert_equal,
                s(:sym, :wait_readable),
                s(:send,
                  s(:lvar, :s1), :recvmsg_nonblock,
                  s(:int, 11),
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:false)))))))),
        s(:def, :test_recv_nonblock_error,
          s(:args),
          s(:block,
            s(:send, nil, :tcp_pair),
            s(:args,
              s(:arg, :c),
              s(:arg, :s)),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:lvar, :c), :recv_nonblock,
                  s(:int, 4096)),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Errno), :EWOULDBLOCK)), nil,
                  s(:send, nil, :assert_kind_of,
                    s(:const,
                      s(:const, nil, :IO), :WaitReadable),
                    s(:gvar, :$!))), nil)))),
        s(:def, :test_recv_nonblock_no_exception,
          s(:args),
          s(:block,
            s(:send, nil, :tcp_pair),
            s(:args,
              s(:arg, :c),
              s(:arg, :s)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:sym, :wait_readable),
                s(:send,
                  s(:lvar, :c), :recv_nonblock,
                  s(:int, 11),
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:false))))),
              s(:send,
                s(:lvar, :s), :write,
                s(:str, "HI")),
              s(:send, nil, :assert_predicate,
                s(:lvar, :c),
                s(:sym, :wait_readable)),
              s(:send, nil, :assert_equal,
                s(:str, "HI"),
                s(:send,
                  s(:lvar, :c), :recv_nonblock,
                  s(:int, 11),
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:false))))),
              s(:send, nil, :assert_equal,
                s(:sym, :wait_readable),
                s(:send,
                  s(:lvar, :c), :recv_nonblock,
                  s(:int, 11),
                  s(:hash,
                    s(:pair,
                      s(:sym, :exception),
                      s(:false)))))))),
        s(:def, :test_connect_nonblock_error,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :serv,
                s(:send,
                  s(:const, nil, :TCPServer), :new,
                  s(:str, "127.0.0.1"),
                  s(:int, 0))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :_),
                  s(:lvasgn, :port),
                  s(:lvasgn, :_),
                  s(:lvasgn, :_)),
                s(:send,
                  s(:lvar, :serv), :addr)),
              s(:lvasgn, :c,
                s(:send,
                  s(:const, nil, :Socket), :new,
                  s(:sym, :INET),
                  s(:sym, :STREAM))),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:lvar, :c), :connect_nonblock,
                    s(:send,
                      s(:const, nil, :Socket), :sockaddr_in,
                      s(:lvar, :port),
                      s(:str, "127.0.0.1"))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :Errno), :EINPROGRESS)), nil,
                    s(:send, nil, :assert_kind_of,
                      s(:const,
                        s(:const, nil, :IO), :WaitWritable),
                      s(:gvar, :$!))), nil))),
            s(:begin,
              s(:if,
                s(:and,
                  s(:lvar, :serv),
                  s(:send,
                    s(:send,
                      s(:lvar, :serv), :closed?), :!)),
                s(:send,
                  s(:lvar, :serv), :close), nil),
              s(:if,
                s(:and,
                  s(:lvar, :c),
                  s(:send,
                    s(:send,
                      s(:lvar, :c), :closed?), :!)),
                s(:send,
                  s(:lvar, :c), :close), nil)))),
        s(:def, :test_accept_nonblock_error,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :serv,
                s(:send,
                  s(:const, nil, :Socket), :new,
                  s(:sym, :INET),
                  s(:sym, :STREAM))),
              s(:send,
                s(:lvar, :serv), :bind,
                s(:send,
                  s(:const, nil, :Socket), :sockaddr_in,
                  s(:int, 0),
                  s(:str, "127.0.0.1"))),
              s(:send,
                s(:lvar, :serv), :listen,
                s(:int, 5)),
              s(:kwbegin,
                s(:rescue,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :s),
                      s(:lvasgn, :_)),
                    s(:send,
                      s(:lvar, :serv), :accept_nonblock)),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :Errno), :EWOULDBLOCK)), nil,
                    s(:send, nil, :assert_kind_of,
                      s(:const,
                        s(:const, nil, :IO), :WaitReadable),
                      s(:gvar, :$!))), nil))),
            s(:begin,
              s(:if,
                s(:and,
                  s(:lvar, :serv),
                  s(:send,
                    s(:send,
                      s(:lvar, :serv), :closed?), :!)),
                s(:send,
                  s(:lvar, :serv), :close), nil),
              s(:if,
                s(:and,
                  s(:lvar, :s),
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :closed?), :!)),
                s(:send,
                  s(:lvar, :s), :close), nil)))))), nil))
