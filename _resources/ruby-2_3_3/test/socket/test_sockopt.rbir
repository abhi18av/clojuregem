s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "socket")),
  s(:class,
    s(:const, nil, :TestSocketOption),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_new,
        s(:args),
        s(:begin,
          s(:lvasgn, :data,
            s(:send,
              s(:array,
                s(:int, 1)), :pack,
              s(:str, "i"))),
          s(:lvasgn, :sockopt,
            s(:send,
              s(:const,
                s(:const, nil, :Socket), :Option), :new,
              s(:sym, :INET),
              s(:sym, :SOCKET),
              s(:sym, :KEEPALIVE),
              s(:lvar, :data))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET),
            s(:send,
              s(:lvar, :sockopt), :family)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :SOL_SOCKET),
            s(:send,
              s(:lvar, :sockopt), :level)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :SO_KEEPALIVE),
            s(:send,
              s(:lvar, :sockopt), :optname)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :SO_KEEPALIVE),
            s(:send,
              s(:lvar, :sockopt), :optname)),
          s(:send, nil, :assert_equal,
            s(:lvar, :data),
            s(:send,
              s(:lvar, :sockopt), :data)))),
      s(:def, :test_bool,
        s(:args),
        s(:begin,
          s(:lvasgn, :opt,
            s(:send,
              s(:const,
                s(:const, nil, :Socket), :Option), :bool,
              s(:sym, :INET),
              s(:sym, :SOCKET),
              s(:sym, :KEEPALIVE),
              s(:true))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :opt), :int)),
          s(:lvasgn, :opt,
            s(:send,
              s(:const,
                s(:const, nil, :Socket), :Option), :bool,
              s(:sym, :INET),
              s(:sym, :SOCKET),
              s(:sym, :KEEPALIVE),
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :opt), :int)),
          s(:lvasgn, :opt,
            s(:send,
              s(:const,
                s(:const, nil, :Socket), :Option), :int,
              s(:sym, :INET),
              s(:sym, :SOCKET),
              s(:sym, :KEEPALIVE),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :opt), :bool)),
          s(:lvasgn, :opt,
            s(:send,
              s(:const,
                s(:const, nil, :Socket), :Option), :int,
              s(:sym, :INET),
              s(:sym, :SOCKET),
              s(:sym, :KEEPALIVE),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :opt), :bool)),
          s(:lvasgn, :opt,
            s(:send,
              s(:const,
                s(:const, nil, :Socket), :Option), :int,
              s(:sym, :INET),
              s(:sym, :SOCKET),
              s(:sym, :KEEPALIVE),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :opt), :bool)),
          s(:kwbegin,
            s(:rescue,
              s(:block,
                s(:send,
                  s(:const, nil, :Socket), :open,
                  s(:sym, :INET),
                  s(:sym, :STREAM)),
                s(:args,
                  s(:arg, :s)),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :setsockopt,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Socket), :Option), :bool,
                      s(:sym, :INET),
                      s(:sym, :SOCKET),
                      s(:sym, :KEEPALIVE),
                      s(:true))),
                  s(:send, nil, :assert_equal,
                    s(:true),
                    s(:send,
                      s(:send,
                        s(:lvar, :s), :getsockopt,
                        s(:const,
                          s(:const, nil, :Socket), :SOL_SOCKET),
                        s(:const,
                          s(:const, nil, :Socket), :SO_KEEPALIVE)), :bool)),
                  s(:send,
                    s(:lvar, :s), :setsockopt,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Socket), :Option), :bool,
                      s(:sym, :INET),
                      s(:sym, :SOCKET),
                      s(:sym, :KEEPALIVE),
                      s(:false))),
                  s(:send, nil, :assert_equal,
                    s(:false),
                    s(:send,
                      s(:send,
                        s(:lvar, :s), :getsockopt,
                        s(:const,
                          s(:const, nil, :Socket), :SOL_SOCKET),
                        s(:const,
                          s(:const, nil, :Socket), :SO_KEEPALIVE)), :bool)))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :TypeError)), nil,
                s(:begin,
                  s(:if,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "aix"),
                        s(:regopt)),
                      s(:const, nil, :RUBY_PLATFORM)),
                    s(:send, nil, :skip,
                      s(:str, "Known bug in getsockopt(2) on AIX")), nil),
                  s(:send, nil, :raise,
                    s(:gvar, :$!)))), nil)))),
      s(:def, :test_ipv4_multicast_loop,
        s(:args),
        s(:begin,
          s(:lvasgn, :sockopt,
            s(:send,
              s(:const,
                s(:const, nil, :Socket), :Option), :ipv4_multicast_loop,
              s(:int, 128))),
          s(:send, nil, :assert_equal,
            s(:str, "#<Socket::Option: INET IP MULTICAST_LOOP 128>"),
            s(:send,
              s(:lvar, :sockopt), :inspect)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET),
            s(:send,
              s(:lvar, :sockopt), :family)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :IPPROTO_IP),
            s(:send,
              s(:lvar, :sockopt), :level)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :IP_MULTICAST_LOOP),
            s(:send,
              s(:lvar, :sockopt), :optname)),
          s(:send, nil, :assert_equal,
            s(:int, 128),
            s(:send,
              s(:lvar, :sockopt), :ipv4_multicast_loop)))),
      s(:def, :test_ipv4_multicast_loop_size,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected_size,
            s(:block,
              s(:send,
                s(:const, nil, :Socket), :open,
                s(:sym, :INET),
                s(:sym, :DGRAM)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :s), :getsockopt,
                    s(:sym, :IP),
                    s(:sym, :MULTICAST_LOOP)), :to_s), :bytesize))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected_size),
            s(:send,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Socket), :Option), :ipv4_multicast_loop,
                  s(:int, 0)), :to_s), :bytesize)))),
      s(:def, :test_ipv4_multicast_ttl,
        s(:args),
        s(:begin,
          s(:lvasgn, :sockopt,
            s(:send,
              s(:const,
                s(:const, nil, :Socket), :Option), :ipv4_multicast_ttl,
              s(:int, 128))),
          s(:send, nil, :assert_equal,
            s(:str, "#<Socket::Option: INET IP MULTICAST_TTL 128>"),
            s(:send,
              s(:lvar, :sockopt), :inspect)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET),
            s(:send,
              s(:lvar, :sockopt), :family)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :IPPROTO_IP),
            s(:send,
              s(:lvar, :sockopt), :level)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :IP_MULTICAST_TTL),
            s(:send,
              s(:lvar, :sockopt), :optname)),
          s(:send, nil, :assert_equal,
            s(:int, 128),
            s(:send,
              s(:lvar, :sockopt), :ipv4_multicast_ttl)))),
      s(:def, :test_ipv4_multicast_ttl_size,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected_size,
            s(:block,
              s(:send,
                s(:const, nil, :Socket), :open,
                s(:sym, :INET),
                s(:sym, :DGRAM)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :s), :getsockopt,
                    s(:sym, :IP),
                    s(:sym, :MULTICAST_TTL)), :to_s), :bytesize))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected_size),
            s(:send,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Socket), :Option), :ipv4_multicast_ttl,
                  s(:int, 0)), :to_s), :bytesize)))),
      s(:def, :test_unpack,
        s(:args),
        s(:begin,
          s(:lvasgn, :sockopt,
            s(:send,
              s(:const,
                s(:const, nil, :Socket), :Option), :new,
              s(:sym, :INET),
              s(:sym, :SOCKET),
              s(:sym, :KEEPALIVE),
              s(:send,
                s(:array,
                  s(:int, 1)), :pack,
                s(:str, "i")))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:lvar, :sockopt), :unpack,
              s(:str, "i"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:send,
                s(:lvar, :sockopt), :data), :unpack,
              s(:str, "i"))))))))
