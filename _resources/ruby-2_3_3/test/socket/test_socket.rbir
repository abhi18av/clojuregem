s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :require,
          s(:str, "socket")),
        s(:send, nil, :require,
          s(:str, "tmpdir")),
        s(:send, nil, :require,
          s(:str, "fcntl")),
        s(:send, nil, :require,
          s(:str, "etc")),
        s(:send, nil, :require,
          s(:str, "test/unit"))),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:defined?,
      s(:const, nil, :Socket)),
    s(:class,
      s(:const, nil, :TestSocket),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :test_socket_new,
          s(:args),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :s,
                  s(:send,
                    s(:const, nil, :Socket), :new,
                    s(:sym, :INET),
                    s(:sym, :STREAM))),
                s(:send, nil, :assert_kind_of,
                  s(:const, nil, :Socket),
                  s(:lvar, :s))),
              s(:send,
                s(:lvar, :s), :close)))),
        s(:def, :test_socket_new_cloexec,
          s(:args),
          s(:begin,
            s(:if,
              s(:defined?,
                s(:const,
                  s(:const, nil, :Fcntl), :FD_CLOEXEC)), nil,
              s(:return)),
            s(:kwbegin,
              s(:ensure,
                s(:begin,
                  s(:lvasgn, :s,
                    s(:send,
                      s(:const, nil, :Socket), :new,
                      s(:sym, :INET),
                      s(:sym, :STREAM))),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:lvar, :s), :close_on_exec?))),
                s(:send,
                  s(:lvar, :s), :close))))),
        s(:if,
          s(:send,
            s(:const, nil, :Socket), :respond_to?,
            s(:sym, :sockaddr_un)),
          s(:def, :test_unpack_sockaddr,
            s(:args),
            s(:begin,
              s(:lvasgn, :sockaddr_in,
                s(:send,
                  s(:const, nil, :Socket), :sockaddr_in,
                  s(:int, 80),
                  s(:str, ""))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :ArgumentError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Socket), :unpack_sockaddr_un,
                  s(:lvar, :sockaddr_in))),
              s(:lvasgn, :sockaddr_un,
                s(:send,
                  s(:const, nil, :Socket), :sockaddr_un,
                  s(:str, "/testdir/s"))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :ArgumentError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Socket), :unpack_sockaddr_in,
                  s(:lvar, :sockaddr_un))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :ArgumentError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Socket), :unpack_sockaddr_in,
                  s(:str, ""))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :ArgumentError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Socket), :unpack_sockaddr_un,
                  s(:str, ""))))), nil),
        s(:def, :test_sysaccept,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :serv,
                s(:send,
                  s(:const, nil, :Socket), :new,
                  s(:const,
                    s(:const, nil, :Socket), :AF_INET),
                  s(:const,
                    s(:const, nil, :Socket), :SOCK_STREAM),
                  s(:int, 0))),
              s(:send,
                s(:lvar, :serv), :bind,
                s(:send,
                  s(:const, nil, :Socket), :sockaddr_in,
                  s(:int, 0),
                  s(:str, "127.0.0.1"))),
              s(:send,
                s(:lvar, :serv), :listen,
                s(:int, 5)),
              s(:lvasgn, :c,
                s(:send,
                  s(:const, nil, :Socket), :new,
                  s(:const,
                    s(:const, nil, :Socket), :AF_INET),
                  s(:const,
                    s(:const, nil, :Socket), :SOCK_STREAM),
                  s(:int, 0))),
              s(:send,
                s(:lvar, :c), :connect,
                s(:send,
                  s(:lvar, :serv), :getsockname)),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :fd),
                  s(:lvasgn, :peeraddr)),
                s(:send,
                  s(:lvar, :serv), :sysaccept)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :c), :getsockname),
                s(:send,
                  s(:lvar, :peeraddr), :to_sockaddr))),
            s(:begin,
              s(:if,
                s(:lvar, :serv),
                s(:send,
                  s(:lvar, :serv), :close), nil),
              s(:if,
                s(:lvar, :c),
                s(:send,
                  s(:lvar, :c), :close), nil),
              s(:if,
                s(:lvar, :fd),
                s(:send,
                  s(:send,
                    s(:const, nil, :IO), :for_fd,
                    s(:lvar, :fd)), :close), nil)))),
        s(:def, :test_initialize,
          s(:args),
          s(:begin,
            s(:block,
              s(:send,
                s(:const, nil, :Socket), :open,
                s(:const,
                  s(:const, nil, :Socket), :AF_INET),
                s(:const,
                  s(:const, nil, :Socket), :SOCK_STREAM),
                s(:int, 0)),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :bind,
                  s(:send,
                    s(:const, nil, :Socket), :sockaddr_in,
                    s(:int, 0),
                    s(:str, "127.0.0.1"))),
                s(:lvasgn, :addr,
                  s(:send,
                    s(:lvar, :s), :getsockname)),
                s(:block,
                  s(:send, nil, :assert_nothing_raised),
                  s(:args),
                  s(:send,
                    s(:const, nil, :Socket), :unpack_sockaddr_in,
                    s(:lvar, :addr))),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :ArgumentError),
                    s(:const, nil, :NoMethodError)),
                  s(:args),
                  s(:send,
                    s(:const, nil, :Socket), :unpack_sockaddr_un,
                    s(:lvar, :addr))))),
            s(:block,
              s(:send,
                s(:const, nil, :Socket), :open,
                s(:str, "AF_INET"),
                s(:str, "SOCK_STREAM"),
                s(:int, 0)),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :bind,
                  s(:send,
                    s(:const, nil, :Socket), :sockaddr_in,
                    s(:int, 0),
                    s(:str, "127.0.0.1"))),
                s(:lvasgn, :addr,
                  s(:send,
                    s(:lvar, :s), :getsockname)),
                s(:block,
                  s(:send, nil, :assert_nothing_raised),
                  s(:args),
                  s(:send,
                    s(:const, nil, :Socket), :unpack_sockaddr_in,
                    s(:lvar, :addr))),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :ArgumentError),
                    s(:const, nil, :NoMethodError)),
                  s(:args),
                  s(:send,
                    s(:const, nil, :Socket), :unpack_sockaddr_un,
                    s(:lvar, :addr))))),
            s(:block,
              s(:send,
                s(:const, nil, :Socket), :open,
                s(:sym, :AF_INET),
                s(:sym, :SOCK_STREAM),
                s(:int, 0)),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :bind,
                  s(:send,
                    s(:const, nil, :Socket), :sockaddr_in,
                    s(:int, 0),
                    s(:str, "127.0.0.1"))),
                s(:lvasgn, :addr,
                  s(:send,
                    s(:lvar, :s), :getsockname)),
                s(:block,
                  s(:send, nil, :assert_nothing_raised),
                  s(:args),
                  s(:send,
                    s(:const, nil, :Socket), :unpack_sockaddr_in,
                    s(:lvar, :addr))),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :ArgumentError),
                    s(:const, nil, :NoMethodError)),
                  s(:args),
                  s(:send,
                    s(:const, nil, :Socket), :unpack_sockaddr_un,
                    s(:lvar, :addr))))))),
        s(:def, :test_bind,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Socket), :open,
              s(:const,
                s(:const, nil, :Socket), :AF_INET),
              s(:const,
                s(:const, nil, :Socket), :SOCK_STREAM),
              s(:int, 0)),
            s(:args,
              s(:arg, :bound)),
            s(:begin,
              s(:send,
                s(:lvar, :bound), :bind,
                s(:send,
                  s(:const, nil, :Socket), :sockaddr_in,
                  s(:int, 0),
                  s(:str, "127.0.0.1"))),
              s(:lvasgn, :addr,
                s(:send,
                  s(:lvar, :bound), :getsockname)),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :port)),
                s(:send,
                  s(:const, nil, :Socket), :unpack_sockaddr_in,
                  s(:lvar, :addr))),
              s(:block,
                s(:send,
                  s(:const, nil, :Socket), :open,
                  s(:const,
                    s(:const, nil, :Socket), :AF_INET),
                  s(:const,
                    s(:const, nil, :Socket), :SOCK_STREAM),
                  s(:int, 0)),
                s(:args,
                  s(:arg, :s)),
                s(:begin,
                  s(:lvasgn, :e,
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :Errno), :EADDRINUSE)),
                      s(:args),
                      s(:send,
                        s(:lvar, :s), :bind,
                        s(:send,
                          s(:const, nil, :Socket), :sockaddr_in,
                          s(:lvar, :port),
                          s(:str, "127.0.0.1"))))),
                  s(:send, nil, :assert_match,
                    s(:dstr,
                      s(:str, "bind(2) for 127.0.0.1:"),
                      s(:begin,
                        s(:lvar, :port))),
                    s(:send,
                      s(:lvar, :e), :message))))))),
        s(:def, :test_getaddrinfo,
          s(:args),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SocketError)),
            s(:args),
            s(:send,
              s(:const, nil, :Socket), :getaddrinfo,
              s(:str, "www.kame.net"),
              s(:int, 80),
              s(:str, "AF_UNIX")))),
        s(:def, :test_getaddrinfo_raises_no_errors_on_port_argument_of_0,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:str, "[ruby-core:29427]")),
              s(:args),
              s(:send,
                s(:const, nil, :Socket), :getaddrinfo,
                s(:str, "localhost"),
                s(:int, 0),
                s(:const,
                  s(:const, nil, :Socket), :AF_INET),
                s(:const,
                  s(:const, nil, :Socket), :SOCK_STREAM),
                s(:nil),
                s(:const,
                  s(:const, nil, :Socket), :AI_CANONNAME))),
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:str, "[ruby-core:29427]")),
              s(:args),
              s(:send,
                s(:const, nil, :Socket), :getaddrinfo,
                s(:str, "localhost"),
                s(:str, "0"),
                s(:const,
                  s(:const, nil, :Socket), :AF_INET),
                s(:const,
                  s(:const, nil, :Socket), :SOCK_STREAM),
                s(:nil),
                s(:const,
                  s(:const, nil, :Socket), :AI_CANONNAME))),
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:str, "[ruby-core:29427]")),
              s(:args),
              s(:send,
                s(:const, nil, :Socket), :getaddrinfo,
                s(:str, "localhost"),
                s(:str, "00"),
                s(:const,
                  s(:const, nil, :Socket), :AF_INET),
                s(:const,
                  s(:const, nil, :Socket), :SOCK_STREAM),
                s(:nil),
                s(:const,
                  s(:const, nil, :Socket), :AI_CANONNAME))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :SocketError),
                s(:str, "[ruby-core:29427]")),
              s(:args),
              s(:send,
                s(:const, nil, :Socket), :getaddrinfo,
                s(:nil),
                s(:nil),
                s(:const,
                  s(:const, nil, :Socket), :AF_INET),
                s(:const,
                  s(:const, nil, :Socket), :SOCK_STREAM),
                s(:nil),
                s(:const,
                  s(:const, nil, :Socket), :AI_CANONNAME))),
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:str, "[ruby-core:29427]")),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :TCPServer), :open,
                  s(:str, "localhost"),
                  s(:int, 0)),
                s(:args), nil)))),
        s(:def, :test_getnameinfo,
          s(:args),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SocketError)),
            s(:args),
            s(:send,
              s(:const, nil, :Socket), :getnameinfo,
              s(:array,
                s(:str, "AF_UNIX"),
                s(:int, 80),
                s(:str, "0.0.0.0"))))),
        s(:def, :test_ip_address_list,
          s(:args),
          s(:begin,
            s(:kwbegin,
              s(:rescue,
                s(:lvasgn, :list,
                  s(:send,
                    s(:const, nil, :Socket), :ip_address_list)),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :NotImplementedError)), nil,
                  s(:return)), nil)),
            s(:block,
              s(:send,
                s(:lvar, :list), :each),
              s(:args,
                s(:arg, :ai)),
              s(:begin,
                s(:send, nil, :assert_instance_of,
                  s(:const, nil, :Addrinfo),
                  s(:lvar, :ai)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:lvar, :ai), :ip?)))))),
        s(:def, :test_tcp,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :TCPServer), :open,
              s(:int, 0)),
            s(:args,
              s(:arg, :serv)),
            s(:begin,
              s(:lvasgn, :addr,
                s(:send,
                  s(:lvar, :serv), :connect_address)),
              s(:block,
                s(:send,
                  s(:lvar, :addr), :connect),
                s(:args,
                  s(:arg, :s1)),
                s(:begin,
                  s(:lvasgn, :s2,
                    s(:send,
                      s(:lvar, :serv), :accept)),
                  s(:kwbegin,
                    s(:ensure,
                      s(:send, nil, :assert_equal,
                        s(:send,
                          s(:send,
                            s(:lvar, :s2), :remote_address), :ip_unpack),
                        s(:send,
                          s(:send,
                            s(:lvar, :s1), :local_address), :ip_unpack)),
                      s(:send,
                        s(:lvar, :s2), :close)))))))),
        s(:def, :test_tcp_cloexec,
          s(:args),
          s(:begin,
            s(:if,
              s(:defined?,
                s(:const,
                  s(:const, nil, :Fcntl), :FD_CLOEXEC)), nil,
              s(:return)),
            s(:block,
              s(:send,
                s(:const, nil, :TCPServer), :open,
                s(:int, 0)),
              s(:args,
                s(:arg, :serv)),
              s(:begin,
                s(:lvasgn, :addr,
                  s(:send,
                    s(:lvar, :serv), :connect_address)),
                s(:block,
                  s(:send,
                    s(:lvar, :addr), :connect),
                  s(:args,
                    s(:arg, :s1)),
                  s(:begin,
                    s(:lvasgn, :s2,
                      s(:send,
                        s(:lvar, :serv), :accept)),
                    s(:kwbegin,
                      s(:ensure,
                        s(:send, nil, :assert,
                          s(:send,
                            s(:lvar, :s2), :close_on_exec?)),
                        s(:send,
                          s(:lvar, :s2), :close))))))))),
        s(:def, :random_port,
          s(:args),
          s(:send,
            s(:int, 49152), :+,
            s(:send, nil, :rand,
              s(:send,
                s(:send,
                  s(:int, 65535), :-,
                  s(:int, 49152)), :+,
                s(:int, 1))))),
        s(:def, :errors_addrinuse,
          s(:args),
          s(:array,
            s(:const,
              s(:const, nil, :Errno), :EADDRINUSE))),
        s(:def, :test_tcp_server_sockets,
          s(:args),
          s(:begin,
            s(:lvasgn, :port,
              s(:send, nil, :random_port)),
            s(:kwbegin,
              s(:rescue,
                s(:lvasgn, :sockets,
                  s(:send,
                    s(:const, nil, :Socket), :tcp_server_sockets,
                    s(:lvar, :port))),
                s(:resbody,
                  s(:array,
                    s(:splat,
                      s(:send, nil, :errors_addrinuse))), nil,
                  s(:return)), nil)),
            s(:kwbegin,
              s(:ensure,
                s(:block,
                  s(:send,
                    s(:lvar, :sockets), :each),
                  s(:args,
                    s(:arg, :s)),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :port),
                    s(:send,
                      s(:send,
                        s(:lvar, :s), :local_address), :ip_port))),
                s(:block,
                  s(:send,
                    s(:lvar, :sockets), :each),
                  s(:args,
                    s(:arg, :s)),
                  s(:send,
                    s(:lvar, :s), :close)))))),
        s(:def, :test_tcp_server_sockets_port0,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :sockets,
                s(:send,
                  s(:const, nil, :Socket), :tcp_server_sockets,
                  s(:int, 0))),
              s(:lvasgn, :ports,
                s(:block,
                  s(:send,
                    s(:lvar, :sockets), :map),
                  s(:args,
                    s(:arg, :s)),
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :local_address), :ip_port))),
              s(:lvasgn, :the_port,
                s(:send,
                  s(:lvar, :ports), :first)),
              s(:block,
                s(:send,
                  s(:lvar, :ports), :each),
                s(:args,
                  s(:arg, :port)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :the_port),
                  s(:lvar, :port)))),
            s(:if,
              s(:lvar, :sockets),
              s(:block,
                s(:send,
                  s(:lvar, :sockets), :each),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :close)), nil))),
        s(:if,
          s(:defined?,
            s(:const, nil, :UNIXSocket)),
          s(:begin,
            s(:def, :test_unix,
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :Dir), :mktmpdir),
                s(:args,
                  s(:arg, :tmpdir)),
                s(:begin,
                  s(:lvasgn, :path,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :tmpdir)),
                      s(:str, "/sock"))),
                  s(:block,
                    s(:send,
                      s(:const, nil, :UNIXServer), :open,
                      s(:lvar, :path)),
                    s(:args,
                      s(:arg, :serv)),
                    s(:block,
                      s(:send,
                        s(:const, nil, :Socket), :unix,
                        s(:lvar, :path)),
                      s(:args,
                        s(:arg, :s1)),
                      s(:begin,
                        s(:lvasgn, :s2,
                          s(:send,
                            s(:lvar, :serv), :accept)),
                        s(:kwbegin,
                          s(:ensure,
                            s(:begin,
                              s(:lvasgn, :s2raddr,
                                s(:send,
                                  s(:lvar, :s2), :remote_address)),
                              s(:lvasgn, :s1laddr,
                                s(:send,
                                  s(:lvar, :s1), :local_address)),
                              s(:send, nil, :assert,
                                s(:or,
                                  s(:or,
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :s2raddr), :to_sockaddr), :empty?),
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :s1laddr), :to_sockaddr), :empty?)),
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :s2raddr), :unix_path), :==,
                                    s(:send,
                                      s(:lvar, :s1laddr), :unix_path)))),
                              s(:send, nil, :assert,
                                s(:send,
                                  s(:lvar, :s2), :close_on_exec?))),
                            s(:send,
                              s(:lvar, :s2), :close))))))))),
            s(:def, :test_unix_server_socket,
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :Dir), :mktmpdir),
                s(:args,
                  s(:arg, :tmpdir)),
                s(:begin,
                  s(:lvasgn, :path,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :tmpdir)),
                      s(:str, "/sock"))),
                  s(:block,
                    s(:send,
                      s(:int, 2), :times),
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :serv,
                        s(:send,
                          s(:const, nil, :Socket), :unix_server_socket,
                          s(:lvar, :path))),
                      s(:kwbegin,
                        s(:ensure,
                          s(:begin,
                            s(:send, nil, :assert_kind_of,
                              s(:const, nil, :Socket),
                              s(:lvar, :serv)),
                            s(:send, nil, :assert,
                              s(:send,
                                s(:const, nil, :File), :socket?,
                                s(:lvar, :path))),
                            s(:send, nil, :assert_equal,
                              s(:lvar, :path),
                              s(:send,
                                s(:send,
                                  s(:lvar, :serv), :local_address), :unix_path))),
                          s(:send,
                            s(:lvar, :serv), :close)))))))),
            s(:def, :test_accept_loop_with_unix,
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :Dir), :mktmpdir),
                s(:args,
                  s(:arg, :tmpdir)),
                s(:begin,
                  s(:lvasgn, :tcp_servers,
                    s(:array)),
                  s(:lvasgn, :clients,
                    s(:array)),
                  s(:lvasgn, :accepted,
                    s(:array)),
                  s(:kwbegin,
                    s(:ensure,
                      s(:begin,
                        s(:lvasgn, :tcp_servers,
                          s(:send,
                            s(:const, nil, :Socket), :tcp_server_sockets,
                            s(:int, 0))),
                        s(:lvasgn, :unix_server,
                          s(:send,
                            s(:const, nil, :Socket), :unix_server_socket,
                            s(:dstr,
                              s(:begin,
                                s(:lvar, :tmpdir)),
                              s(:str, "/sock")))),
                        s(:block,
                          s(:send,
                            s(:lvar, :tcp_servers), :each),
                          s(:args,
                            s(:arg, :s)),
                          s(:begin,
                            s(:lvasgn, :addr,
                              s(:send,
                                s(:lvar, :s), :connect_address)),
                            s(:kwbegin,
                              s(:rescue,
                                s(:send,
                                  s(:lvar, :clients), :<<,
                                  s(:send,
                                    s(:lvar, :addr), :connect)),
                                s(:resbody, nil, nil,
                                  s(:if,
                                    s(:send,
                                      s(:lvar, :addr), :ipv6?), nil,
                                    s(:send, nil, :raise))), nil)))),
                        s(:lvasgn, :addr,
                          s(:send,
                            s(:lvar, :unix_server), :connect_address)),
                        s(:block,
                          s(:send, nil, :assert_nothing_raised,
                            s(:dstr,
                              s(:str, "connect to "),
                              s(:begin,
                                s(:send,
                                  s(:lvar, :addr), :inspect)))),
                          s(:args),
                          s(:send,
                            s(:lvar, :clients), :<<,
                            s(:send,
                              s(:lvar, :addr), :connect))),
                        s(:block,
                          s(:send,
                            s(:const, nil, :Socket), :accept_loop,
                            s(:lvar, :tcp_servers),
                            s(:lvar, :unix_server)),
                          s(:args,
                            s(:arg, :s)),
                          s(:begin,
                            s(:send,
                              s(:lvar, :accepted), :<<,
                              s(:lvar, :s)),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:lvar, :clients), :length), :==,
                                s(:send,
                                  s(:lvar, :accepted), :length)),
                              s(:break), nil))),
                        s(:send, nil, :assert_equal,
                          s(:send,
                            s(:lvar, :clients), :length),
                          s(:send,
                            s(:lvar, :accepted), :length))),
                      s(:begin,
                        s(:block,
                          s(:send,
                            s(:lvar, :tcp_servers), :each),
                          s(:args,
                            s(:arg, :s)),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:lvar, :s), :closed?), :!),
                            s(:send,
                              s(:lvar, :s), :close), nil)),
                        s(:if,
                          s(:and,
                            s(:lvar, :unix_server),
                            s(:send,
                              s(:send,
                                s(:lvar, :unix_server), :closed?), :!)),
                          s(:send,
                            s(:lvar, :unix_server), :close), nil),
                        s(:block,
                          s(:send,
                            s(:lvar, :clients), :each),
                          s(:args,
                            s(:arg, :s)),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:lvar, :s), :closed?), :!),
                            s(:send,
                              s(:lvar, :s), :close), nil)),
                        s(:block,
                          s(:send,
                            s(:lvar, :accepted), :each),
                          s(:args,
                            s(:arg, :s)),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:lvar, :s), :closed?), :!),
                            s(:send,
                              s(:lvar, :s), :close), nil))))))))), nil),
        s(:def, :test_accept_loop,
          s(:args),
          s(:begin,
            s(:lvasgn, :servers,
              s(:array)),
            s(:kwbegin,
              s(:ensure,
                s(:begin,
                  s(:lvasgn, :servers,
                    s(:send,
                      s(:const, nil, :Socket), :tcp_server_sockets,
                      s(:int, 0))),
                  s(:lvasgn, :port,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :servers), :[],
                          s(:int, 0)), :local_address), :ip_port)),
                  s(:block,
                    s(:send,
                      s(:const, nil, :Socket), :tcp,
                      s(:str, "localhost"),
                      s(:lvar, :port)),
                    s(:args,
                      s(:arg, :s1)),
                    s(:block,
                      s(:send,
                        s(:const, nil, :Socket), :accept_loop,
                        s(:lvar, :servers)),
                      s(:args,
                        s(:arg, :s2),
                        s(:arg, :client_ai)),
                      s(:begin,
                        s(:kwbegin,
                          s(:ensure,
                            s(:send, nil, :assert_equal,
                              s(:send,
                                s(:send,
                                  s(:lvar, :s1), :local_address), :ip_unpack),
                              s(:send,
                                s(:lvar, :client_ai), :ip_unpack)),
                            s(:send,
                              s(:lvar, :s2), :close))),
                        s(:break))))),
                s(:block,
                  s(:send,
                    s(:lvar, :servers), :each),
                  s(:args,
                    s(:arg, :s)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :s), :closed?), :!),
                    s(:send,
                      s(:lvar, :s), :close), nil)))))),
        s(:def, :test_accept_loop_multi_port,
          s(:args),
          s(:begin,
            s(:lvasgn, :servers,
              s(:array)),
            s(:kwbegin,
              s(:ensure,
                s(:begin,
                  s(:lvasgn, :servers,
                    s(:send,
                      s(:const, nil, :Socket), :tcp_server_sockets,
                      s(:int, 0))),
                  s(:lvasgn, :port,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :servers), :[],
                          s(:int, 0)), :local_address), :ip_port)),
                  s(:lvasgn, :servers2,
                    s(:send,
                      s(:const, nil, :Socket), :tcp_server_sockets,
                      s(:int, 0))),
                  s(:send,
                    s(:lvar, :servers), :concat,
                    s(:lvar, :servers2)),
                  s(:lvasgn, :port2,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :servers2), :[],
                          s(:int, 0)), :local_address), :ip_port)),
                  s(:block,
                    s(:send,
                      s(:const, nil, :Socket), :tcp,
                      s(:str, "localhost"),
                      s(:lvar, :port)),
                    s(:args,
                      s(:arg, :s1)),
                    s(:block,
                      s(:send,
                        s(:const, nil, :Socket), :accept_loop,
                        s(:lvar, :servers)),
                      s(:args,
                        s(:arg, :s2),
                        s(:arg, :client_ai)),
                      s(:begin,
                        s(:kwbegin,
                          s(:ensure,
                            s(:send, nil, :assert_equal,
                              s(:send,
                                s(:send,
                                  s(:lvar, :s1), :local_address), :ip_unpack),
                              s(:send,
                                s(:lvar, :client_ai), :ip_unpack)),
                            s(:send,
                              s(:lvar, :s2), :close))),
                        s(:break)))),
                  s(:block,
                    s(:send,
                      s(:const, nil, :Socket), :tcp,
                      s(:str, "localhost"),
                      s(:lvar, :port2)),
                    s(:args,
                      s(:arg, :s1)),
                    s(:block,
                      s(:send,
                        s(:const, nil, :Socket), :accept_loop,
                        s(:lvar, :servers)),
                      s(:args,
                        s(:arg, :s2),
                        s(:arg, :client_ai)),
                      s(:begin,
                        s(:kwbegin,
                          s(:ensure,
                            s(:send, nil, :assert_equal,
                              s(:send,
                                s(:send,
                                  s(:lvar, :s1), :local_address), :ip_unpack),
                              s(:send,
                                s(:lvar, :client_ai), :ip_unpack)),
                            s(:send,
                              s(:lvar, :s2), :close))),
                        s(:break))))),
                s(:block,
                  s(:send,
                    s(:lvar, :servers), :each),
                  s(:args,
                    s(:arg, :s)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :s), :closed?), :!),
                    s(:send,
                      s(:lvar, :s), :close), nil)))))),
        s(:def, :test_udp_server,
          s(:args),
          s(:begin,
            s(:kwbegin,
              s(:rescue,
                s(:lvasgn, :ifaddrs,
                  s(:send,
                    s(:const, nil, :Socket), :getifaddrs)),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :NotImplementedError)), nil,
                  s(:send, nil, :skip,
                    s(:str, "Socket.getifaddrs not implemented"))), nil)),
            s(:lvasgn, :ifconfig,
              s(:nil)),
            s(:block,
              s(:send,
                s(:const, nil, :Socket), :udp_server_sockets,
                s(:int, 0)),
              s(:args,
                s(:arg, :sockets)),
              s(:begin,
                s(:lvasgn, :famlies,
                  s(:hash)),
                s(:block,
                  s(:send,
                    s(:lvar, :sockets), :each),
                  s(:args,
                    s(:arg, :s)),
                  s(:send,
                    s(:lvar, :famlies), :[]=,
                    s(:send,
                      s(:send,
                        s(:lvar, :s), :local_address), :afamily),
                    s(:lvar, :s))),
                s(:lvasgn, :nd6,
                  s(:hash)),
                s(:block,
                  s(:send,
                    s(:lvar, :ifaddrs), :reject!),
                  s(:args,
                    s(:arg, :ifa)),
                  s(:begin,
                    s(:lvasgn, :ai,
                      s(:send,
                        s(:lvar, :ifa), :addr)),
                    s(:if,
                      s(:lvar, :ai), nil,
                      s(:next,
                        s(:true))),
                    s(:lvasgn, :s,
                      s(:send,
                        s(:lvar, :famlies), :[],
                        s(:send,
                          s(:lvar, :ai), :afamily))),
                    s(:if,
                      s(:lvar, :s), nil,
                      s(:next,
                        s(:true))),
                    s(:if,
                      s(:send,
                        s(:lvar, :ai), :ipv6_linklocal?),
                      s(:next,
                        s(:true)), nil),
                    s(:case,
                      s(:const, nil, :RUBY_PLATFORM),
                      s(:when,
                        s(:regexp,
                          s(:str, "linux"),
                          s(:regopt)),
                        s(:if,
                          s(:and,
                            s(:send,
                              s(:send,
                                s(:lvar, :ai), :ip_address), :include?,
                              s(:str, "%")),
                            s(:send,
                              s(:begin,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:send,
                                          s(:send,
                                            s(:const, nil, :Etc), :uname), :[],
                                          s(:sym, :release)), :[],
                                        s(:regexp,
                                          s(:str, "[0-9.]+"),
                                          s(:regopt))), :split,
                                      s(:str, ".")), :map,
                                    s(:block_pass,
                                      s(:sym, :to_i))), :<=>,
                                  s(:array,
                                    s(:int, 2),
                                    s(:int, 6),
                                    s(:int, 18)))), :<=,
                              s(:int, 0))),
                          s(:next,
                            s(:true)), nil)),
                      s(:when,
                        s(:regexp,
                          s(:str, "freebsd"),
                          s(:regopt)),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :ifa), :addr), :ipv6_linklocal?),
                          s(:begin,
                            s(:lvasgn, :ulSIOCGIFINFO_IN6,
                              s(:int, 3225971052)),
                            s(:lvasgn, :ulND6_IFF_IFDISABLED,
                              s(:int, 8)),
                            s(:lvasgn, :in6_ondireq,
                              s(:send,
                                s(:lvar, :ifa), :name)),
                            s(:send,
                              s(:lvar, :s), :ioctl,
                              s(:lvar, :ulSIOCGIFINFO_IN6),
                              s(:lvar, :in6_ondireq)),
                            s(:lvasgn, :flag,
                              s(:send,
                                s(:send,
                                  s(:lvar, :in6_ondireq), :unpack,
                                  s(:str, "A16L6")), :last)),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:lvar, :flag), :&,
                                  s(:lvar, :ulND6_IFF_IFDISABLED)), :!=,
                                s(:int, 0)),
                              s(:next,
                                s(:true)), nil),
                            s(:send,
                              s(:lvar, :nd6), :[]=,
                              s(:lvar, :ai),
                              s(:lvar, :flag))), nil)),
                      s(:when,
                        s(:regexp,
                          s(:str, "darwin"),
                          s(:regopt)),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :ai), :ipv6?), :!), nil,
                          s(:if,
                            s(:and,
                              s(:send,
                                s(:lvar, :ai), :ipv6_unique_local?),
                              s(:match_with_lvasgn,
                                s(:regexp,
                                  s(:str, "darwin1[01]\\."),
                                  s(:regopt)),
                                s(:const, nil, :RUBY_PLATFORM))),
                            s(:next,
                              s(:true)),
                            s(:if,
                              s(:lvasgn, :ifr_name,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :ai), :ip_address), :[],
                                  s(:regexp,
                                    s(:str, "%(.*)"),
                                    s(:regopt)),
                                  s(:int, 1))),
                              s(:begin,
                                s(:lvasgn, :ulSIOCGIFFLAGS,
                                  s(:int, 3223349521)),
                                s(:lvasgn, :ulSIOCGIFINFO_IN6,
                                  s(:int, 3224398156)),
                                s(:lvasgn, :ulIFF_POINTOPOINT,
                                  s(:int, 16)),
                                s(:lvasgn, :ulND6_IFF_IFDISABLED,
                                  s(:int, 8)),
                                s(:lvasgn, :in6_ondireq,
                                  s(:lvar, :ifr_name)),
                                s(:send,
                                  s(:lvar, :s), :ioctl,
                                  s(:lvar, :ulSIOCGIFINFO_IN6),
                                  s(:lvar, :in6_ondireq)),
                                s(:lvasgn, :flag,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :in6_ondireq), :unpack,
                                      s(:str, "A16L6")), :last)),
                                s(:if,
                                  s(:send,
                                    s(:begin,
                                      s(:send,
                                        s(:lvar, :flag), :&,
                                        s(:lvar, :ulND6_IFF_IFDISABLED))), :!=,
                                    s(:int, 0)),
                                  s(:next,
                                    s(:true)), nil),
                                s(:send,
                                  s(:lvar, :nd6), :[]=,
                                  s(:lvar, :ai),
                                  s(:lvar, :flag)),
                                s(:lvasgn, :in6_ifreq,
                                  s(:send,
                                    s(:array,
                                      s(:lvar, :ifr_name),
                                      s(:send,
                                        s(:lvar, :ai), :to_sockaddr)), :pack,
                                    s(:str, "a16A*"))),
                                s(:send,
                                  s(:lvar, :s), :ioctl,
                                  s(:lvar, :ulSIOCGIFFLAGS),
                                  s(:lvar, :in6_ifreq)),
                                s(:if,
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:send,
                                          s(:lvar, :in6_ifreq), :unpack,
                                          s(:str, "A16L1")), :last), :&,
                                      s(:lvar, :ulIFF_POINTOPOINT)), :!=,
                                    s(:int, 0)),
                                  s(:next,
                                    s(:true)), nil)),
                              s(:begin,
                                s(:or_asgn,
                                  s(:lvasgn, :ifconfig),
                                  s(:xstr,
                                    s(:str, "/sbin/ifconfig"))),
                                s(:if,
                                  s(:block,
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :ifconfig), :scan,
                                        s(:regexp,
                                          s(:str, "^(\\w+):(.*(?:\\n\\t.*)*)"),
                                          s(:regopt))), :find),
                                    s(:args,
                                      s(:arg, :ifname),
                                      s(:arg, :value)),
                                    s(:and,
                                      s(:send,
                                        s(:lvar, :value), :include?,
                                        s(:send,
                                          s(:lvar, :ai), :ip_address)),
                                      s(:send,
                                        s(:lvar, :value), :include?,
                                        s(:str, "POINTOPOINT")))),
                                  s(:next,
                                    s(:true)), nil)))))), nil),
                    s(:false))),
                s(:lvasgn, :skipped,
                  s(:false)),
                s(:kwbegin,
                  s(:ensure,
                    s(:rescue,
                      s(:begin,
                        s(:lvasgn, :port,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :sockets), :first), :local_address), :ip_port)),
                        s(:lvasgn, :ping_p,
                          s(:false)),
                        s(:lvasgn, :th,
                          s(:block,
                            s(:send,
                              s(:const, nil, :Thread), :new),
                            s(:args),
                            s(:block,
                              s(:send,
                                s(:const, nil, :Socket), :udp_server_loop_on,
                                s(:lvar, :sockets)),
                              s(:args,
                                s(:arg, :msg),
                                s(:arg, :msg_src)),
                              s(:begin,
                                s(:if,
                                  s(:send,
                                    s(:lvar, :msg), :==,
                                    s(:str, "exit")),
                                  s(:break), nil),
                                s(:lvasgn, :rmsg,
                                  s(:send,
                                    s(:const, nil, :Marshal), :dump,
                                    s(:array,
                                      s(:lvar, :msg),
                                      s(:send,
                                        s(:lvar, :msg_src), :remote_address),
                                      s(:send,
                                        s(:lvar, :msg_src), :local_address)))),
                                s(:lvasgn, :ping_p,
                                  s(:true)),
                                s(:send,
                                  s(:lvar, :msg_src), :reply,
                                  s(:lvar, :rmsg)))))),
                        s(:block,
                          s(:send,
                            s(:lvar, :ifaddrs), :each),
                          s(:args,
                            s(:arg, :ifa)),
                          s(:begin,
                            s(:lvasgn, :ai,
                              s(:send,
                                s(:lvar, :ifa), :addr)),
                            s(:block,
                              s(:send,
                                s(:send,
                                  s(:const, nil, :Addrinfo), :udp,
                                  s(:send,
                                    s(:lvar, :ai), :ip_address),
                                  s(:lvar, :port)), :connect),
                              s(:args,
                                s(:arg, :s)),
                              s(:begin,
                                s(:lvasgn, :ping_p,
                                  s(:false)),
                                s(:lvasgn, :msg1,
                                  s(:dstr,
                                    s(:str, "<<<"),
                                    s(:begin,
                                      s(:send,
                                        s(:lvar, :ai), :inspect)),
                                    s(:str, ">>>"))),
                                s(:send,
                                  s(:lvar, :s), :sendmsg,
                                  s(:lvar, :msg1)),
                                s(:if,
                                  s(:send,
                                    s(:const, nil, :IO), :select,
                                    s(:array,
                                      s(:lvar, :s)),
                                    s(:nil),
                                    s(:nil),
                                    s(:int, 10)), nil,
                                  s(:begin,
                                    s(:lvasgn, :nd6options,
                                      s(:if,
                                        s(:send,
                                          s(:lvar, :nd6), :key?,
                                          s(:lvar, :ai)),
                                        s(:send,
                                          s(:str, "nd6=%x "), :%,
                                          s(:send,
                                            s(:lvar, :nd6), :[],
                                            s(:lvar, :ai))),
                                        s(:str, ""))),
                                    s(:send, nil, :raise,
                                      s(:dstr,
                                        s(:str, "no response from "),
                                        s(:begin,
                                          s(:send,
                                            s(:lvar, :ifa), :inspect)),
                                        s(:str, " "),
                                        s(:begin,
                                          s(:lvar, :nd6options)),
                                        s(:str, "ping="),
                                        s(:begin,
                                          s(:lvar, :ping_p)))))),
                                s(:masgn,
                                  s(:mlhs,
                                    s(:lvasgn, :msg2),
                                    s(:lvasgn, :addr)),
                                  s(:send,
                                    s(:lvar, :s), :recvmsg)),
                                s(:masgn,
                                  s(:mlhs,
                                    s(:lvasgn, :msg2),
                                    s(:lvasgn, :_),
                                    s(:lvasgn, :_)),
                                  s(:send,
                                    s(:const, nil, :Marshal), :load,
                                    s(:lvar, :msg2))),
                                s(:send, nil, :assert_equal,
                                  s(:lvar, :msg1),
                                  s(:lvar, :msg2)),
                                s(:send, nil, :assert_equal,
                                  s(:send,
                                    s(:lvar, :ai), :ip_address),
                                  s(:send,
                                    s(:lvar, :addr), :ip_address))))))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :NotImplementedError),
                          s(:const,
                            s(:const, nil, :Errno), :ENOSYS)), nil,
                        s(:begin,
                          s(:lvasgn, :skipped,
                            s(:true)),
                          s(:send, nil, :skip,
                            s(:dstr,
                              s(:str, "need sendmsg and recvmsg: "),
                              s(:begin,
                                s(:gvar, :$!)))))), nil),
                    s(:if,
                      s(:lvar, :th),
                      s(:if,
                        s(:lvar, :skipped),
                        s(:if,
                          s(:send,
                            s(:lvar, :th), :join,
                            s(:int, 10)), nil,
                          s(:send,
                            s(:const, nil, :Thread), :kill,
                            s(:lvar, :th))),
                        s(:begin,
                          s(:block,
                            s(:send,
                              s(:send,
                                s(:const, nil, :Addrinfo), :udp,
                                s(:str, "127.0.0.1"),
                                s(:lvar, :port)), :connect),
                            s(:args,
                              s(:arg, :s)),
                            s(:send,
                              s(:lvar, :s), :sendmsg,
                              s(:str, "exit"))),
                          s(:if,
                            s(:send,
                              s(:lvar, :th), :join,
                              s(:int, 10)), nil,
                            s(:begin,
                              s(:send,
                                s(:const, nil, :Thread), :kill,
                                s(:lvar, :th)),
                              s(:send,
                                s(:lvar, :th), :join,
                                s(:int, 10)),
                              s(:send, nil, :raise,
                                s(:str, "thread killed")))))), nil))))))),
        s(:def, :test_linger,
          s(:args),
          s(:begin,
            s(:lvasgn, :opt,
              s(:send,
                s(:const,
                  s(:const, nil, :Socket), :Option), :linger,
                s(:true),
                s(:int, 0))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:true),
                s(:int, 0)),
              s(:send,
                s(:lvar, :opt), :linger)),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Addrinfo), :tcp,
                  s(:str, "127.0.0.1"),
                  s(:int, 0)), :listen),
              s(:args,
                s(:arg, :serv)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :serv), :local_address), :connect),
                s(:args,
                  s(:arg, :s1)),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :s2),
                      s(:lvasgn, :_)),
                    s(:send,
                      s(:lvar, :serv), :accept)),
                  s(:kwbegin,
                    s(:ensure,
                      s(:begin,
                        s(:send,
                          s(:lvar, :s1), :setsockopt,
                          s(:lvar, :opt)),
                        s(:send,
                          s(:lvar, :s1), :close),
                        s(:block,
                          s(:send, nil, :assert_raise,
                            s(:const,
                              s(:const, nil, :Errno), :ECONNRESET)),
                          s(:args),
                          s(:send,
                            s(:lvar, :s2), :read))),
                      s(:send,
                        s(:lvar, :s2), :close)))))))),
        s(:def, :test_timestamp,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:regexp,
                  s(:str, "linux|freebsd|netbsd|openbsd|solaris|darwin"),
                  s(:regopt)), :!~,
                s(:const, nil, :RUBY_PLATFORM)),
              s(:return), nil),
            s(:if,
              s(:or,
                s(:send,
                  s(:defined?,
                    s(:const,
                      s(:const, nil, :Socket), :AncillaryData)), :!),
                s(:send,
                  s(:defined?,
                    s(:const,
                      s(:const, nil, :Socket), :SO_TIMESTAMP)), :!)),
              s(:return), nil),
            s(:lvasgn, :t1,
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :now), :strftime,
                s(:str, "%Y-%m-%d"))),
            s(:lvasgn, :stamp,
              s(:nil)),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Addrinfo), :udp,
                  s(:str, "127.0.0.1"),
                  s(:int, 0)), :bind),
              s(:args,
                s(:arg, :s1)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :Addrinfo), :udp,
                    s(:str, "127.0.0.1"),
                    s(:int, 0)), :bind),
                s(:args,
                  s(:arg, :s2)),
                s(:begin,
                  s(:send,
                    s(:lvar, :s1), :setsockopt,
                    s(:sym, :SOCKET),
                    s(:sym, :TIMESTAMP),
                    s(:true)),
                  s(:send,
                    s(:lvar, :s2), :send,
                    s(:str, "a"),
                    s(:int, 0),
                    s(:send,
                      s(:lvar, :s1), :local_address)),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :msg),
                      s(:lvasgn, :_),
                      s(:lvasgn, :_),
                      s(:lvasgn, :stamp)),
                    s(:send,
                      s(:lvar, :s1), :recvmsg)),
                  s(:send, nil, :assert_equal,
                    s(:str, "a"),
                    s(:lvar, :msg)),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:lvar, :stamp), :cmsg_is?,
                      s(:sym, :SOCKET),
                      s(:sym, :TIMESTAMP)))))),
            s(:lvasgn, :t2,
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :now), :strftime,
                s(:str, "%Y-%m-%d"))),
            s(:lvasgn, :pat,
              s(:send,
                s(:const, nil, :Regexp), :union,
                s(:send,
                  s(:array,
                    s(:lvar, :t1),
                    s(:lvar, :t2)), :uniq))),
            s(:send, nil, :assert_match,
              s(:lvar, :pat),
              s(:send,
                s(:lvar, :stamp), :inspect)),
            s(:lvasgn, :t,
              s(:send,
                s(:lvar, :stamp), :timestamp)),
            s(:send, nil, :assert_match,
              s(:lvar, :pat),
              s(:send,
                s(:lvar, :t), :strftime,
                s(:str, "%Y-%m-%d"))),
            s(:lvasgn, :pat,
              s(:regexp,
                s(:str, "\\."),
                s(:begin,
                  s(:send,
                    s(:str, "%06d"), :%,
                    s(:send,
                      s(:lvar, :t), :usec))),
                s(:regopt))),
            s(:send, nil, :assert_match,
              s(:lvar, :pat),
              s(:send,
                s(:lvar, :stamp), :inspect)))),
        s(:def, :test_timestampns,
          s(:args),
          s(:begin,
            s(:if,
              s(:or,
                s(:send,
                  s(:regexp,
                    s(:str, "linux"),
                    s(:regopt)), :!~,
                  s(:const, nil, :RUBY_PLATFORM)),
                s(:send,
                  s(:defined?,
                    s(:const,
                      s(:const, nil, :Socket), :SO_TIMESTAMPNS)), :!)),
              s(:return), nil),
            s(:lvasgn, :t1,
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :now), :strftime,
                s(:str, "%Y-%m-%d"))),
            s(:lvasgn, :stamp,
              s(:nil)),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Addrinfo), :udp,
                  s(:str, "127.0.0.1"),
                  s(:int, 0)), :bind),
              s(:args,
                s(:arg, :s1)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :Addrinfo), :udp,
                    s(:str, "127.0.0.1"),
                    s(:int, 0)), :bind),
                s(:args,
                  s(:arg, :s2)),
                s(:begin,
                  s(:kwbegin,
                    s(:rescue,
                      s(:send,
                        s(:lvar, :s1), :setsockopt,
                        s(:sym, :SOCKET),
                        s(:sym, :TIMESTAMPNS),
                        s(:true)),
                      s(:resbody,
                        s(:array,
                          s(:const,
                            s(:const, nil, :Errno), :ENOPROTOOPT)), nil,
                        s(:return)), nil)),
                  s(:send,
                    s(:lvar, :s2), :send,
                    s(:str, "a"),
                    s(:int, 0),
                    s(:send,
                      s(:lvar, :s1), :local_address)),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :msg),
                      s(:lvasgn, :_),
                      s(:lvasgn, :_),
                      s(:lvasgn, :stamp)),
                    s(:send,
                      s(:lvar, :s1), :recvmsg)),
                  s(:send, nil, :assert_equal,
                    s(:str, "a"),
                    s(:lvar, :msg)),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:lvar, :stamp), :cmsg_is?,
                      s(:sym, :SOCKET),
                      s(:sym, :TIMESTAMPNS)))))),
            s(:lvasgn, :t2,
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :now), :strftime,
                s(:str, "%Y-%m-%d"))),
            s(:lvasgn, :pat,
              s(:send,
                s(:const, nil, :Regexp), :union,
                s(:send,
                  s(:array,
                    s(:lvar, :t1),
                    s(:lvar, :t2)), :uniq))),
            s(:send, nil, :assert_match,
              s(:lvar, :pat),
              s(:send,
                s(:lvar, :stamp), :inspect)),
            s(:lvasgn, :t,
              s(:send,
                s(:lvar, :stamp), :timestamp)),
            s(:send, nil, :assert_match,
              s(:lvar, :pat),
              s(:send,
                s(:lvar, :t), :strftime,
                s(:str, "%Y-%m-%d"))),
            s(:lvasgn, :pat,
              s(:regexp,
                s(:str, "\\."),
                s(:begin,
                  s(:send,
                    s(:str, "%09d"), :%,
                    s(:send,
                      s(:lvar, :t), :nsec))),
                s(:regopt))),
            s(:send, nil, :assert_match,
              s(:lvar, :pat),
              s(:send,
                s(:lvar, :stamp), :inspect)))),
        s(:def, :test_bintime,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:regexp,
                  s(:str, "freebsd"),
                  s(:regopt)), :!~,
                s(:const, nil, :RUBY_PLATFORM)),
              s(:return), nil),
            s(:lvasgn, :t1,
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :now), :strftime,
                s(:str, "%Y-%m-%d"))),
            s(:lvasgn, :stamp,
              s(:nil)),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Addrinfo), :udp,
                  s(:str, "127.0.0.1"),
                  s(:int, 0)), :bind),
              s(:args,
                s(:arg, :s1)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :Addrinfo), :udp,
                    s(:str, "127.0.0.1"),
                    s(:int, 0)), :bind),
                s(:args,
                  s(:arg, :s2)),
                s(:begin,
                  s(:send,
                    s(:lvar, :s1), :setsockopt,
                    s(:sym, :SOCKET),
                    s(:sym, :BINTIME),
                    s(:true)),
                  s(:send,
                    s(:lvar, :s2), :send,
                    s(:str, "a"),
                    s(:int, 0),
                    s(:send,
                      s(:lvar, :s1), :local_address)),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :msg),
                      s(:lvasgn, :_),
                      s(:lvasgn, :_),
                      s(:lvasgn, :stamp)),
                    s(:send,
                      s(:lvar, :s1), :recvmsg)),
                  s(:send, nil, :assert_equal,
                    s(:str, "a"),
                    s(:lvar, :msg)),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:lvar, :stamp), :cmsg_is?,
                      s(:sym, :SOCKET),
                      s(:sym, :BINTIME)))))),
            s(:lvasgn, :t2,
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :now), :strftime,
                s(:str, "%Y-%m-%d"))),
            s(:lvasgn, :pat,
              s(:send,
                s(:const, nil, :Regexp), :union,
                s(:send,
                  s(:array,
                    s(:lvar, :t1),
                    s(:lvar, :t2)), :uniq))),
            s(:send, nil, :assert_match,
              s(:lvar, :pat),
              s(:send,
                s(:lvar, :stamp), :inspect)),
            s(:lvasgn, :t,
              s(:send,
                s(:lvar, :stamp), :timestamp)),
            s(:send, nil, :assert_match,
              s(:lvar, :pat),
              s(:send,
                s(:lvar, :t), :strftime,
                s(:str, "%Y-%m-%d"))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :stamp), :data), :[],
                    s(:int, -8),
                    s(:int, 8)), :unpack,
                  s(:str, "Q")), :[],
                s(:int, 0)),
              s(:send,
                s(:send,
                  s(:lvar, :t), :subsec), :*,
                s(:send,
                  s(:int, 2), :**,
                  s(:int, 64)))))),
        s(:def, :test_closed_read,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:send, nil, :require,
                s(:str, "timeout")),
              s(:send, nil, :require,
                s(:str, "socket")),
              s(:lvasgn, :bug4390,
                s(:str, "[ruby-core:35203]")),
              s(:lvasgn, :server,
                s(:send,
                  s(:const, nil, :TCPServer), :new,
                  s(:str, "localhost"),
                  s(:int, 0))),
              s(:lvasgn, :serv_thread,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:send,
                    s(:lvar, :server), :accept))),
              s(:until_post,
                s(:send,
                  s(:lvar, :serv_thread), :stop?),
                s(:kwbegin,
                  s(:send, nil, :sleep,
                    s(:float, 0.1)))),
              s(:lvasgn, :sock,
                s(:send,
                  s(:const, nil, :TCPSocket), :new,
                  s(:str, "localhost"),
                  s(:send,
                    s(:send,
                      s(:lvar, :server), :addr), :[],
                    s(:int, 1)))),
              s(:lvasgn, :client_thread,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:send,
                    s(:lvar, :sock), :readline))),
              s(:until_post,
                s(:send,
                  s(:lvar, :client_thread), :stop?),
                s(:kwbegin,
                  s(:send, nil, :sleep,
                    s(:float, 0.1)))),
              s(:block,
                s(:send,
                  s(:const, nil, :Timeout), :timeout,
                  s(:int, 1)),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:lvar, :sock), :close),
                  s(:lvasgn, :sock,
                    s(:nil)),
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:const, nil, :IOError),
                      s(:lvar, :bug4390)),
                    s(:args),
                    s(:send,
                      s(:lvar, :client_thread), :join))))),
            s(:begin,
              s(:send,
                s(:send,
                  s(:lvar, :serv_thread), :value), :close),
              s(:send,
                s(:lvar, :server), :close)))),
        s(:def, :test_connect_timeout,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :host,
                s(:str, "127.0.0.1")),
              s(:lvasgn, :server,
                s(:send,
                  s(:const, nil, :TCPServer), :new,
                  s(:lvar, :host),
                  s(:int, 0))),
              s(:lvasgn, :port,
                s(:send,
                  s(:send,
                    s(:lvar, :server), :addr), :[],
                  s(:int, 1))),
              s(:lvasgn, :serv_thread,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:send,
                    s(:lvar, :server), :accept))),
              s(:lvasgn, :sock,
                s(:send,
                  s(:const, nil, :Socket), :tcp,
                  s(:lvar, :host),
                  s(:lvar, :port),
                  s(:hash,
                    s(:pair,
                      s(:sym, :connect_timeout),
                      s(:int, 30))))),
              s(:lvasgn, :accepted,
                s(:send,
                  s(:lvar, :serv_thread), :value)),
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :TCPSocket),
                s(:lvar, :accepted)),
              s(:send, nil, :assert_equal,
                s(:lvar, :sock),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :IO), :select,
                      s(:nil),
                      s(:array,
                        s(:lvar, :sock))), :[],
                    s(:int, 1)), :[],
                  s(:int, 0)),
                s(:str, "not writable")),
              s(:send,
                s(:lvar, :sock), :close),
              s(:if,
                s(:send,
                  s(:const, nil, :RUBY_PLATFORM), :=~,
                  s(:regexp,
                    s(:str, "linux"),
                    s(:regopt))),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const, nil, :Errno), :ETIMEDOUT)),
                  s(:args),
                  s(:block,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:const,
                            s(:const, nil, :Socket), :SOMAXCONN), :*,
                          s(:int, 2))), :times),
                    s(:args,
                      s(:arg, :i)),
                    s(:begin,
                      s(:lvasgn, :sock,
                        s(:send,
                          s(:const, nil, :Socket), :tcp,
                          s(:lvar, :host),
                          s(:lvar, :port),
                          s(:hash,
                            s(:pair,
                              s(:sym, :connect_timeout),
                              s(:int, 0))))),
                      s(:send, nil, :assert_equal,
                        s(:lvar, :sock),
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:const, nil, :IO), :select,
                              s(:nil),
                              s(:array,
                                s(:lvar, :sock))), :[],
                            s(:int, 1)), :[],
                          s(:int, 0)),
                        s(:dstr,
                          s(:str, "not writable ("),
                          s(:begin,
                            s(:lvar, :i)),
                          s(:str, ")"))),
                      s(:send,
                        s(:lvar, :sock), :close)))), nil)),
            s(:begin,
              s(:send,
                s(:lvar, :server), :close),
              s(:if,
                s(:lvar, :accepted),
                s(:send,
                  s(:lvar, :accepted), :close), nil),
              s(:if,
                s(:and,
                  s(:lvar, :sock),
                  s(:send,
                    s(:send,
                      s(:lvar, :sock), :closed?), :!)),
                s(:send,
                  s(:lvar, :sock), :close), nil)))),
        s(:def, :test_getifaddrs,
          s(:args),
          s(:begin,
            s(:kwbegin,
              s(:rescue,
                s(:lvasgn, :list,
                  s(:send,
                    s(:const, nil, :Socket), :getifaddrs)),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :NotImplementedError)), nil,
                  s(:return)), nil)),
            s(:block,
              s(:send,
                s(:lvar, :list), :each),
              s(:args,
                s(:arg, :ifaddr)),
              s(:send, nil, :assert_instance_of,
                s(:const,
                  s(:const, nil, :Socket), :Ifaddr),
                s(:lvar, :ifaddr))))),
        s(:def, :test_connect_in_rescue,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :serv,
                s(:send,
                  s(:send,
                    s(:const, nil, :Addrinfo), :tcp,
                    s(:nil),
                    s(:int, 0)), :listen)),
              s(:lvasgn, :addr,
                s(:send,
                  s(:lvar, :serv), :connect_address)),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :raise,
                    s(:str, "dummy error")),
                  s(:resbody, nil, nil,
                    s(:begin,
                      s(:lvasgn, :s,
                        s(:send,
                          s(:lvar, :addr), :connect)),
                      s(:send, nil, :assert,
                        s(:send,
                          s(:send,
                            s(:lvar, :s), :closed?), :!)))), nil))),
            s(:begin,
              s(:if,
                s(:and,
                  s(:lvar, :serv),
                  s(:send,
                    s(:send,
                      s(:lvar, :serv), :closed?), :!)),
                s(:send,
                  s(:lvar, :serv), :close), nil),
              s(:if,
                s(:and,
                  s(:lvar, :s),
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :closed?), :!)),
                s(:send,
                  s(:lvar, :s), :close), nil)))),
        s(:def, :test_bind_in_rescue,
          s(:args),
          s(:ensure,
            s(:kwbegin,
              s(:rescue,
                s(:send, nil, :raise,
                  s(:str, "dummy error")),
                s(:resbody, nil, nil,
                  s(:begin,
                    s(:lvasgn, :s,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Addrinfo), :tcp,
                          s(:nil),
                          s(:int, 0)), :bind)),
                    s(:send, nil, :assert,
                      s(:send,
                        s(:send,
                          s(:lvar, :s), :closed?), :!)))), nil)),
            s(:if,
              s(:and,
                s(:lvar, :s),
                s(:send,
                  s(:send,
                    s(:lvar, :s), :closed?), :!)),
              s(:send,
                s(:lvar, :s), :close), nil))),
        s(:def, :test_listen_in_rescue,
          s(:args),
          s(:ensure,
            s(:kwbegin,
              s(:rescue,
                s(:send, nil, :raise,
                  s(:str, "dummy error")),
                s(:resbody, nil, nil,
                  s(:begin,
                    s(:lvasgn, :s,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Addrinfo), :tcp,
                          s(:nil),
                          s(:int, 0)), :listen)),
                    s(:send, nil, :assert,
                      s(:send,
                        s(:send,
                          s(:lvar, :s), :closed?), :!)))), nil)),
            s(:if,
              s(:and,
                s(:lvar, :s),
                s(:send,
                  s(:send,
                    s(:lvar, :s), :closed?), :!)),
              s(:send,
                s(:lvar, :s), :close), nil))),
        s(:def, :test_udp_server_sockets_in_rescue,
          s(:args),
          s(:ensure,
            s(:kwbegin,
              s(:rescue,
                s(:send, nil, :raise,
                  s(:str, "dummy error")),
                s(:resbody, nil, nil,
                  s(:begin,
                    s(:lvasgn, :ss,
                      s(:send,
                        s(:const, nil, :Socket), :udp_server_sockets,
                        s(:int, 0))),
                    s(:block,
                      s(:send,
                        s(:lvar, :ss), :each),
                      s(:args,
                        s(:arg, :s)),
                      s(:send, nil, :assert,
                        s(:send,
                          s(:send,
                            s(:lvar, :s), :closed?), :!))))), nil)),
            s(:if,
              s(:lvar, :ss),
              s(:block,
                s(:send,
                  s(:lvar, :ss), :each),
                s(:args,
                  s(:arg, :s)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :closed?), :!),
                  s(:send,
                    s(:lvar, :s), :close), nil)), nil))),
        s(:def, :test_tcp_server_sockets_in_rescue,
          s(:args),
          s(:ensure,
            s(:kwbegin,
              s(:rescue,
                s(:send, nil, :raise,
                  s(:str, "dummy error")),
                s(:resbody, nil, nil,
                  s(:begin,
                    s(:lvasgn, :ss,
                      s(:send,
                        s(:const, nil, :Socket), :tcp_server_sockets,
                        s(:int, 0))),
                    s(:block,
                      s(:send,
                        s(:lvar, :ss), :each),
                      s(:args,
                        s(:arg, :s)),
                      s(:send, nil, :assert,
                        s(:send,
                          s(:send,
                            s(:lvar, :s), :closed?), :!))))), nil)),
            s(:if,
              s(:lvar, :ss),
              s(:block,
                s(:send,
                  s(:lvar, :ss), :each),
                s(:args,
                  s(:arg, :s)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :closed?), :!),
                  s(:send,
                    s(:lvar, :s), :close), nil)), nil))),
        s(:def, :test_recvmsg_udp_no_arg,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :n,
                s(:int, 4097)),
              s(:lvasgn, :s1,
                s(:send,
                  s(:send,
                    s(:const, nil, :Addrinfo), :udp,
                    s(:str, "127.0.0.1"),
                    s(:int, 0)), :bind)),
              s(:lvasgn, :s2,
                s(:send,
                  s(:send,
                    s(:lvar, :s1), :connect_address), :connect)),
              s(:send,
                s(:lvar, :s2), :send,
                s(:send,
                  s(:str, "a"), :*,
                  s(:lvar, :n)),
                s(:int, 0)),
              s(:lvasgn, :ret,
                s(:send,
                  s(:lvar, :s1), :recvmsg)),
              s(:send, nil, :assert_equal,
                s(:lvar, :n),
                s(:send,
                  s(:send,
                    s(:lvar, :ret), :[],
                    s(:int, 0)), :bytesize),
                s(:str, "[ruby-core:71517] [Bug #11701]")),
              s(:send,
                s(:lvar, :s2), :send,
                s(:send,
                  s(:str, "a"), :*,
                  s(:lvar, :n)),
                s(:int, 0)),
              s(:send,
                s(:const, nil, :IO), :select,
                s(:array,
                  s(:lvar, :s1))),
              s(:lvasgn, :ret,
                s(:send,
                  s(:lvar, :s1), :recvmsg_nonblock)),
              s(:send, nil, :assert_equal,
                s(:lvar, :n),
                s(:send,
                  s(:send,
                    s(:lvar, :ret), :[],
                    s(:int, 0)), :bytesize),
                s(:str, "non-blocking should also grow"))),
            s(:begin,
              s(:send,
                s(:lvar, :s1), :close),
              s(:send,
                s(:lvar, :s2), :close)))),
        s(:def, :test_udp_read_truncation,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :s1,
                s(:send,
                  s(:send,
                    s(:const, nil, :Addrinfo), :udp,
                    s(:str, "127.0.0.1"),
                    s(:int, 0)), :bind)),
              s(:lvasgn, :s2,
                s(:send,
                  s(:send,
                    s(:lvar, :s1), :connect_address), :connect)),
              s(:send,
                s(:lvar, :s2), :send,
                s(:send,
                  s(:str, "a"), :*,
                  s(:int, 100)),
                s(:int, 0)),
              s(:lvasgn, :ret,
                s(:send,
                  s(:lvar, :s1), :read,
                  s(:int, 10))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:str, "a"), :*,
                  s(:int, 10)),
                s(:lvar, :ret)),
              s(:send,
                s(:lvar, :s2), :send,
                s(:send,
                  s(:str, "b"), :*,
                  s(:int, 100)),
                s(:int, 0)),
              s(:lvasgn, :ret,
                s(:send,
                  s(:lvar, :s1), :read,
                  s(:int, 10))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:str, "b"), :*,
                  s(:int, 10)),
                s(:lvar, :ret))),
            s(:begin,
              s(:send,
                s(:lvar, :s1), :close),
              s(:send,
                s(:lvar, :s2), :close)))),
        s(:def, :test_udp_recv_truncation,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :s1,
                s(:send,
                  s(:send,
                    s(:const, nil, :Addrinfo), :udp,
                    s(:str, "127.0.0.1"),
                    s(:int, 0)), :bind)),
              s(:lvasgn, :s2,
                s(:send,
                  s(:send,
                    s(:lvar, :s1), :connect_address), :connect)),
              s(:send,
                s(:lvar, :s2), :send,
                s(:send,
                  s(:str, "a"), :*,
                  s(:int, 100)),
                s(:int, 0)),
              s(:lvasgn, :ret,
                s(:send,
                  s(:lvar, :s1), :recv,
                  s(:int, 10),
                  s(:const,
                    s(:const, nil, :Socket), :MSG_PEEK))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:str, "a"), :*,
                  s(:int, 10)),
                s(:lvar, :ret)),
              s(:lvasgn, :ret,
                s(:send,
                  s(:lvar, :s1), :recv,
                  s(:int, 10),
                  s(:int, 0))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:str, "a"), :*,
                  s(:int, 10)),
                s(:lvar, :ret)),
              s(:send,
                s(:lvar, :s2), :send,
                s(:send,
                  s(:str, "b"), :*,
                  s(:int, 100)),
                s(:int, 0)),
              s(:lvasgn, :ret,
                s(:send,
                  s(:lvar, :s1), :recv,
                  s(:int, 10),
                  s(:int, 0))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:str, "b"), :*,
                  s(:int, 10)),
                s(:lvar, :ret))),
            s(:begin,
              s(:send,
                s(:lvar, :s1), :close),
              s(:send,
                s(:lvar, :s2), :close)))),
        s(:def, :test_udp_recvmsg_truncation,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :s1,
                s(:send,
                  s(:send,
                    s(:const, nil, :Addrinfo), :udp,
                    s(:str, "127.0.0.1"),
                    s(:int, 0)), :bind)),
              s(:lvasgn, :s2,
                s(:send,
                  s(:send,
                    s(:lvar, :s1), :connect_address), :connect)),
              s(:send,
                s(:lvar, :s2), :send,
                s(:send,
                  s(:str, "a"), :*,
                  s(:int, 100)),
                s(:int, 0)),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :ret),
                  s(:lvasgn, :addr),
                  s(:lvasgn, :rflags)),
                s(:send,
                  s(:lvar, :s1), :recvmsg,
                  s(:int, 10),
                  s(:const,
                    s(:const, nil, :Socket), :MSG_PEEK))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:str, "a"), :*,
                  s(:int, 10)),
                s(:lvar, :ret)),
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :rflags), :nil?), :!),
                  s(:send,
                    s(:regexp,
                      s(:str, "aix"),
                      s(:regopt)), :!~,
                    s(:const, nil, :RUBY_PLATFORM))),
                s(:send, nil, :assert_equal,
                  s(:const,
                    s(:const, nil, :Socket), :MSG_TRUNC),
                  s(:send,
                    s(:lvar, :rflags), :&,
                    s(:const,
                      s(:const, nil, :Socket), :MSG_TRUNC))), nil),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :ret),
                  s(:lvasgn, :addr),
                  s(:lvasgn, :rflags)),
                s(:send,
                  s(:lvar, :s1), :recvmsg,
                  s(:int, 10),
                  s(:int, 0))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:str, "a"), :*,
                  s(:int, 10)),
                s(:lvar, :ret)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :rflags), :nil?), :!),
                s(:send, nil, :assert_equal,
                  s(:const,
                    s(:const, nil, :Socket), :MSG_TRUNC),
                  s(:send,
                    s(:lvar, :rflags), :&,
                    s(:const,
                      s(:const, nil, :Socket), :MSG_TRUNC))), nil),
              s(:send,
                s(:lvar, :s2), :send,
                s(:send,
                  s(:str, "b"), :*,
                  s(:int, 100)),
                s(:int, 0)),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :ret),
                  s(:lvasgn, :addr),
                  s(:lvasgn, :rflags)),
                s(:send,
                  s(:lvar, :s1), :recvmsg,
                  s(:int, 10),
                  s(:int, 0))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:str, "b"), :*,
                  s(:int, 10)),
                s(:lvar, :ret)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :rflags), :nil?), :!),
                s(:send, nil, :assert_equal,
                  s(:const,
                    s(:const, nil, :Socket), :MSG_TRUNC),
                  s(:send,
                    s(:lvar, :rflags), :&,
                    s(:const,
                      s(:const, nil, :Socket), :MSG_TRUNC))), nil)),
            s(:begin,
              s(:send,
                s(:lvar, :s1), :close),
              s(:send,
                s(:lvar, :s2), :close)))))), nil))
