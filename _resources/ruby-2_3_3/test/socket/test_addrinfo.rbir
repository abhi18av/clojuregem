s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "socket")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestSocketAddrinfo),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :HAS_UNIXSOCKET,
        s(:and,
          s(:defined?,
            s(:const, nil, :UNIXSocket)),
          s(:send,
            s(:regexp,
              s(:str, "cygwin"),
              s(:regopt)), :!~,
            s(:const, nil, :RUBY_PLATFORM)))),
      s(:def, :tcp_unspecified_to_loopback,
        s(:args,
          s(:arg, :addrinfo)),
        s(:if,
          s(:and,
            s(:send,
              s(:lvar, :addrinfo), :ipv4?),
            s(:send,
              s(:send,
                s(:lvar, :addrinfo), :ip_address), :==,
              s(:str, "0.0.0.0"))),
          s(:send,
            s(:const, nil, :Addrinfo), :tcp,
            s(:str, "127.0.0.1"),
            s(:send,
              s(:lvar, :addrinfo), :ip_port)),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :addrinfo), :ipv6?),
              s(:send,
                s(:lvar, :addrinfo), :ipv6_unspecified?)),
            s(:send,
              s(:const, nil, :Addrinfo), :tcp,
              s(:str, "::1"),
              s(:send,
                s(:lvar, :addrinfo), :ip_port)),
            s(:if,
              s(:and,
                s(:and,
                  s(:send,
                    s(:lvar, :addrinfo), :ipv6?),
                  s(:begin,
                    s(:lvasgn, :ai,
                      s(:send,
                        s(:lvar, :addrinfo), :ipv6_to_ipv4)))),
                s(:send,
                  s(:send,
                    s(:lvar, :ai), :ip_address), :==,
                  s(:str, "0.0.0.0"))),
              s(:send,
                s(:const, nil, :Addrinfo), :tcp,
                s(:str, "127.0.0.1"),
                s(:send,
                  s(:lvar, :addrinfo), :ip_port)),
              s(:lvar, :addrinfo))))),
      s(:def, :test_addrinfo_ip,
        s(:args),
        s(:begin,
          s(:lvasgn, :ai,
            s(:send,
              s(:const, nil, :Addrinfo), :ip,
              s(:str, "127.0.0.1"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:str, "127.0.0.1")),
            s(:send,
              s(:const, nil, :Socket), :unpack_sockaddr_in,
              s(:lvar, :ai))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET),
            s(:send,
              s(:lvar, :ai), :afamily)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :PF_INET),
            s(:send,
              s(:lvar, :ai), :pfamily)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :ai), :socktype)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :ai), :protocol)))),
      s(:def, :test_addrinfo_tcp,
        s(:args),
        s(:begin,
          s(:lvasgn, :ai,
            s(:send,
              s(:const, nil, :Addrinfo), :tcp,
              s(:str, "127.0.0.1"),
              s(:int, 80))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 80),
              s(:str, "127.0.0.1")),
            s(:send,
              s(:const, nil, :Socket), :unpack_sockaddr_in,
              s(:lvar, :ai))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET),
            s(:send,
              s(:lvar, :ai), :afamily)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :PF_INET),
            s(:send,
              s(:lvar, :ai), :pfamily)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :SOCK_STREAM),
            s(:send,
              s(:lvar, :ai), :socktype)),
          s(:send, nil, :assert_include,
            s(:array,
              s(:int, 0),
              s(:const,
                s(:const, nil, :Socket), :IPPROTO_TCP)),
            s(:send,
              s(:lvar, :ai), :protocol)))),
      s(:def, :test_addrinfo_udp,
        s(:args),
        s(:begin,
          s(:lvasgn, :ai,
            s(:send,
              s(:const, nil, :Addrinfo), :udp,
              s(:str, "127.0.0.1"),
              s(:int, 80))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 80),
              s(:str, "127.0.0.1")),
            s(:send,
              s(:const, nil, :Socket), :unpack_sockaddr_in,
              s(:lvar, :ai))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET),
            s(:send,
              s(:lvar, :ai), :afamily)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :PF_INET),
            s(:send,
              s(:lvar, :ai), :pfamily)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :SOCK_DGRAM),
            s(:send,
              s(:lvar, :ai), :socktype)),
          s(:send, nil, :assert_include,
            s(:array,
              s(:int, 0),
              s(:const,
                s(:const, nil, :Socket), :IPPROTO_UDP)),
            s(:send,
              s(:lvar, :ai), :protocol)))),
      s(:def, :test_addrinfo_ip_unpack,
        s(:args),
        s(:begin,
          s(:lvasgn, :ai,
            s(:send,
              s(:const, nil, :Addrinfo), :tcp,
              s(:str, "127.0.0.1"),
              s(:int, 80))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "127.0.0.1"),
              s(:int, 80)),
            s(:send,
              s(:lvar, :ai), :ip_unpack)),
          s(:send, nil, :assert_equal,
            s(:str, "127.0.0.1"),
            s(:send,
              s(:lvar, :ai), :ip_address)),
          s(:send, nil, :assert_equal,
            s(:int, 80),
            s(:send,
              s(:lvar, :ai), :ip_port)))),
      s(:def, :test_addrinfo_inspect_sockaddr,
        s(:args),
        s(:begin,
          s(:lvasgn, :ai,
            s(:send,
              s(:const, nil, :Addrinfo), :tcp,
              s(:str, "127.0.0.1"),
              s(:int, 80))),
          s(:send, nil, :assert_equal,
            s(:str, "127.0.0.1:80"),
            s(:send,
              s(:lvar, :ai), :inspect_sockaddr)))),
      s(:def, :test_addrinfo_new_inet,
        s(:args),
        s(:begin,
          s(:lvasgn, :ai,
            s(:send,
              s(:const, nil, :Addrinfo), :new,
              s(:array,
                s(:str, "AF_INET"),
                s(:int, 46102),
                s(:str, "localhost.localdomain"),
                s(:str, "127.0.0.2")))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 46102),
              s(:str, "127.0.0.2")),
            s(:send,
              s(:const, nil, :Socket), :unpack_sockaddr_in,
              s(:lvar, :ai))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :AF_INET),
            s(:send,
              s(:lvar, :ai), :afamily)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :PF_INET),
            s(:send,
              s(:lvar, :ai), :pfamily)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :ai), :socktype)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :ai), :protocol)))),
      s(:def, :test_addrinfo_predicates,
        s(:args),
        s(:begin,
          s(:lvasgn, :ipv4_ai,
            s(:send,
              s(:const, nil, :Addrinfo), :new,
              s(:send,
                s(:const, nil, :Socket), :sockaddr_in,
                s(:int, 80),
                s(:str, "192.168.0.1")))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :ipv4_ai), :ip?)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :ipv4_ai), :ipv4?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :ipv4_ai), :ipv6?), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :ipv4_ai), :unix?), :!)))),
      s(:def, :test_ipv4_address_predicates,
        s(:args),
        s(:begin,
          s(:lvasgn, :list,
            s(:array,
              s(:array,
                s(:sym, :ipv4_private?),
                s(:str, "10.0.0.0"),
                s(:str, "10.255.255.255"),
                s(:str, "172.16.0.0"),
                s(:str, "172.31.255.255"),
                s(:str, "192.168.0.0"),
                s(:str, "192.168.255.255")),
              s(:array,
                s(:sym, :ipv4_loopback?),
                s(:str, "127.0.0.1"),
                s(:str, "127.0.0.0"),
                s(:str, "127.255.255.255")),
              s(:array,
                s(:sym, :ipv4_multicast?),
                s(:str, "224.0.0.0"),
                s(:str, "224.255.255.255")))),
          s(:block,
            s(:send,
              s(:lvar, :list), :each),
            s(:args,
              s(:arg, :meth),
              s(:restarg, :addrs)),
            s(:block,
              s(:send,
                s(:lvar, :addrs), :each),
              s(:args,
                s(:arg, :addr)),
              s(:begin,
                s(:send, nil, :assert,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Addrinfo), :ip,
                      s(:lvar, :addr)), :send,
                    s(:lvar, :meth)),
                  s(:dstr,
                    s(:str, "Addrinfo.ip("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :addr), :inspect)),
                    s(:str, ")."),
                    s(:begin,
                      s(:lvar, :meth)))),
                s(:block,
                  s(:send,
                    s(:lvar, :list), :each),
                  s(:args,
                    s(:arg, :meth2)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :meth), :==,
                        s(:lvar, :meth2)),
                      s(:next), nil),
                    s(:send, nil, :assert,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Addrinfo), :ip,
                            s(:lvar, :addr)), :send,
                          s(:lvar, :meth2)), :!),
                      s(:dstr,
                        s(:str, "!Addrinfo.ip("),
                        s(:begin,
                          s(:send,
                            s(:lvar, :addr), :inspect)),
                        s(:str, ")."),
                        s(:begin,
                          s(:lvar, :meth2))))))))))),
      s(:def, :test_basicsocket_send,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :s1,
              s(:send,
                s(:const, nil, :Socket), :new,
                s(:sym, :INET),
                s(:sym, :DGRAM),
                s(:int, 0))),
            s(:send,
              s(:lvar, :s1), :bind,
              s(:send,
                s(:const, nil, :Socket), :sockaddr_in,
                s(:int, 0),
                s(:str, "127.0.0.1"))),
            s(:lvasgn, :sa,
              s(:send,
                s(:lvar, :s1), :getsockname)),
            s(:lvasgn, :ai,
              s(:send,
                s(:const, nil, :Addrinfo), :new,
                s(:lvar, :sa))),
            s(:lvasgn, :s2,
              s(:send,
                s(:const, nil, :Socket), :new,
                s(:sym, :INET),
                s(:sym, :DGRAM),
                s(:int, 0))),
            s(:send,
              s(:lvar, :s2), :send,
              s(:str, "test-basicsocket-send"),
              s(:int, 0),
              s(:lvar, :ai)),
            s(:send, nil, :assert_equal,
              s(:str, "test-basicsocket-send"),
              s(:send,
                s(:lvar, :s1), :recv,
                s(:int, 100)))),
          s(:begin,
            s(:if,
              s(:and,
                s(:lvar, :s1),
                s(:send,
                  s(:send,
                    s(:lvar, :s1), :closed?), :!)),
              s(:send,
                s(:lvar, :s1), :close), nil),
            s(:if,
              s(:and,
                s(:lvar, :s2),
                s(:send,
                  s(:send,
                    s(:lvar, :s2), :closed?), :!)),
              s(:send,
                s(:lvar, :s2), :close), nil)))),
      s(:def, :test_udpsocket_send,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :s1,
              s(:send,
                s(:const, nil, :UDPSocket), :new)),
            s(:send,
              s(:lvar, :s1), :bind,
              s(:str, "127.0.0.1"),
              s(:int, 0)),
            s(:lvasgn, :ai,
              s(:send,
                s(:const, nil, :Addrinfo), :new,
                s(:send,
                  s(:lvar, :s1), :getsockname))),
            s(:lvasgn, :s2,
              s(:send,
                s(:const, nil, :UDPSocket), :new)),
            s(:send,
              s(:lvar, :s2), :send,
              s(:str, "test-udp-send"),
              s(:int, 0),
              s(:lvar, :ai)),
            s(:send, nil, :assert_equal,
              s(:str, "test-udp-send"),
              s(:send,
                s(:lvar, :s1), :recv,
                s(:int, 100)))),
          s(:begin,
            s(:if,
              s(:and,
                s(:lvar, :s1),
                s(:send,
                  s(:send,
                    s(:lvar, :s1), :closed?), :!)),
              s(:send,
                s(:lvar, :s1), :close), nil),
            s(:if,
              s(:and,
                s(:lvar, :s2),
                s(:send,
                  s(:send,
                    s(:lvar, :s2), :closed?), :!)),
              s(:send,
                s(:lvar, :s2), :close), nil)))),
      s(:def, :test_socket_bind,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :s1,
              s(:send,
                s(:const, nil, :Socket), :new,
                s(:sym, :INET),
                s(:sym, :DGRAM),
                s(:int, 0))),
            s(:lvasgn, :sa,
              s(:send,
                s(:const, nil, :Socket), :sockaddr_in,
                s(:int, 0),
                s(:str, "127.0.0.1"))),
            s(:lvasgn, :ai,
              s(:send,
                s(:const, nil, :Addrinfo), :new,
                s(:lvar, :sa))),
            s(:send,
              s(:lvar, :s1), :bind,
              s(:lvar, :ai)),
            s(:lvasgn, :s2,
              s(:send,
                s(:const, nil, :UDPSocket), :new)),
            s(:send,
              s(:lvar, :s2), :send,
              s(:str, "test-socket-bind"),
              s(:int, 0),
              s(:send,
                s(:lvar, :s1), :getsockname)),
            s(:send, nil, :assert_equal,
              s(:str, "test-socket-bind"),
              s(:send,
                s(:lvar, :s1), :recv,
                s(:int, 100)))),
          s(:begin,
            s(:if,
              s(:and,
                s(:lvar, :s1),
                s(:send,
                  s(:send,
                    s(:lvar, :s1), :closed?), :!)),
              s(:send,
                s(:lvar, :s1), :close), nil),
            s(:if,
              s(:and,
                s(:lvar, :s2),
                s(:send,
                  s(:send,
                    s(:lvar, :s2), :closed?), :!)),
              s(:send,
                s(:lvar, :s2), :close), nil)))),
      s(:def, :test_socket_connect,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :s1,
              s(:send,
                s(:const, nil, :Socket), :new,
                s(:sym, :INET),
                s(:sym, :STREAM),
                s(:int, 0))),
            s(:send,
              s(:lvar, :s1), :bind,
              s(:send,
                s(:const, nil, :Socket), :sockaddr_in,
                s(:int, 0),
                s(:str, "127.0.0.1"))),
            s(:send,
              s(:lvar, :s1), :listen,
              s(:int, 5)),
            s(:lvasgn, :ai,
              s(:send,
                s(:const, nil, :Addrinfo), :new,
                s(:send,
                  s(:lvar, :s1), :getsockname))),
            s(:lvasgn, :s2,
              s(:send,
                s(:const, nil, :Socket), :new,
                s(:sym, :INET),
                s(:sym, :STREAM),
                s(:int, 0))),
            s(:send,
              s(:lvar, :s2), :connect,
              s(:lvar, :ai)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :s3),
                s(:lvasgn, :_)),
              s(:send,
                s(:lvar, :s1), :accept)),
            s(:send,
              s(:lvar, :s2), :send,
              s(:str, "test-socket-connect"),
              s(:int, 0)),
            s(:send, nil, :assert_equal,
              s(:str, "test-socket-connect"),
              s(:send,
                s(:lvar, :s3), :recv,
                s(:int, 100)))),
          s(:begin,
            s(:if,
              s(:and,
                s(:lvar, :s1),
                s(:send,
                  s(:send,
                    s(:lvar, :s1), :closed?), :!)),
              s(:send,
                s(:lvar, :s1), :close), nil),
            s(:if,
              s(:and,
                s(:lvar, :s2),
                s(:send,
                  s(:send,
                    s(:lvar, :s2), :closed?), :!)),
              s(:send,
                s(:lvar, :s2), :close), nil),
            s(:if,
              s(:and,
                s(:lvar, :s3),
                s(:send,
                  s(:send,
                    s(:lvar, :s3), :closed?), :!)),
              s(:send,
                s(:lvar, :s3), :close), nil)))),
      s(:def, :test_socket_connect_nonblock,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :s1,
              s(:send,
                s(:const, nil, :Socket), :new,
                s(:sym, :INET),
                s(:sym, :STREAM),
                s(:int, 0))),
            s(:send,
              s(:lvar, :s1), :bind,
              s(:send,
                s(:const, nil, :Socket), :sockaddr_in,
                s(:int, 0),
                s(:str, "127.0.0.1"))),
            s(:send,
              s(:lvar, :s1), :listen,
              s(:int, 5)),
            s(:lvasgn, :ai,
              s(:send,
                s(:const, nil, :Addrinfo), :new,
                s(:send,
                  s(:lvar, :s1), :getsockname))),
            s(:lvasgn, :s2,
              s(:send,
                s(:const, nil, :Socket), :new,
                s(:sym, :INET),
                s(:sym, :STREAM),
                s(:int, 0))),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:lvar, :s2), :connect_nonblock,
                  s(:lvar, :ai)),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :IO), :WaitWritable)), nil,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :IO), :select,
                      s(:nil),
                      s(:array,
                        s(:lvar, :s2))),
                    s(:lvasgn, :r,
                      s(:send,
                        s(:lvar, :s2), :getsockopt,
                        s(:const,
                          s(:const, nil, :Socket), :SOL_SOCKET),
                        s(:const,
                          s(:const, nil, :Socket), :SO_ERROR))),
                    s(:send, nil, :assert_equal,
                      s(:int, 0),
                      s(:send,
                        s(:lvar, :r), :int),
                      s(:dstr,
                        s(:str, "NOERROR is expected but "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :r), :inspect)))),
                    s(:kwbegin,
                      s(:rescue,
                        s(:send,
                          s(:lvar, :s2), :connect_nonblock,
                          s(:lvar, :ai)),
                        s(:resbody,
                          s(:array,
                            s(:const,
                              s(:const, nil, :Errno), :EISCONN)), nil, nil), nil)))), nil)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :s3),
                s(:lvasgn, :_)),
              s(:send,
                s(:lvar, :s1), :accept)),
            s(:send,
              s(:lvar, :s2), :send,
              s(:str, "test-socket-connect-nonblock"),
              s(:int, 0)),
            s(:send, nil, :assert_equal,
              s(:str, "test-socket-connect-nonblock"),
              s(:send,
                s(:lvar, :s3), :recv,
                s(:int, 100)))),
          s(:begin,
            s(:if,
              s(:and,
                s(:lvar, :s1),
                s(:send,
                  s(:send,
                    s(:lvar, :s1), :closed?), :!)),
              s(:send,
                s(:lvar, :s1), :close), nil),
            s(:if,
              s(:and,
                s(:lvar, :s2),
                s(:send,
                  s(:send,
                    s(:lvar, :s2), :closed?), :!)),
              s(:send,
                s(:lvar, :s2), :close), nil),
            s(:if,
              s(:and,
                s(:lvar, :s3),
                s(:send,
                  s(:send,
                    s(:lvar, :s3), :closed?), :!)),
              s(:send,
                s(:lvar, :s3), :close), nil)))),
      s(:def, :test_socket_getnameinfo,
        s(:args),
        s(:begin,
          s(:lvasgn, :ai,
            s(:send,
              s(:const, nil, :Addrinfo), :udp,
              s(:str, "127.0.0.1"),
              s(:int, 8888))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "127.0.0.1"),
              s(:str, "8888")),
            s(:send,
              s(:const, nil, :Socket), :getnameinfo,
              s(:lvar, :ai),
              s(:send,
                s(:const,
                  s(:const, nil, :Socket), :NI_NUMERICHOST), :|,
                s(:const,
                  s(:const, nil, :Socket), :NI_NUMERICSERV)))))),
      s(:def, :test_basicsocket_local_address,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :s1,
              s(:send,
                s(:const, nil, :Socket), :new,
                s(:sym, :INET),
                s(:sym, :DGRAM),
                s(:int, 0))),
            s(:send,
              s(:lvar, :s1), :bind,
              s(:send,
                s(:const, nil, :Socket), :sockaddr_in,
                s(:int, 0),
                s(:str, "127.0.0.1"))),
            s(:lvasgn, :e,
              s(:send,
                s(:const, nil, :Socket), :unpack_sockaddr_in,
                s(:send,
                  s(:lvar, :s1), :getsockname))),
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :Socket), :unpack_sockaddr_in,
                s(:send,
                  s(:send,
                    s(:lvar, :s1), :local_address), :to_sockaddr))),
            s(:send, nil, :assert_equal,
              s(:lvar, :e),
              s(:lvar, :a)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Socket), :AF_INET),
              s(:send,
                s(:send,
                  s(:lvar, :s1), :local_address), :afamily)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Socket), :PF_INET),
              s(:send,
                s(:send,
                  s(:lvar, :s1), :local_address), :pfamily)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Socket), :SOCK_DGRAM),
              s(:send,
                s(:send,
                  s(:lvar, :s1), :local_address), :socktype))),
          s(:if,
            s(:and,
              s(:lvar, :s1),
              s(:send,
                s(:send,
                  s(:lvar, :s1), :closed?), :!)),
            s(:send,
              s(:lvar, :s1), :close), nil))),
      s(:def, :test_basicsocket_remote_address,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :s1,
              s(:send,
                s(:const, nil, :TCPServer), :new,
                s(:str, "127.0.0.1"),
                s(:int, 0))),
            s(:lvasgn, :s2,
              s(:send,
                s(:const, nil, :Socket), :new,
                s(:sym, :INET),
                s(:sym, :STREAM),
                s(:int, 0))),
            s(:send,
              s(:lvar, :s2), :connect,
              s(:send,
                s(:lvar, :s1), :getsockname)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :s3),
                s(:lvasgn, :_)),
              s(:send,
                s(:lvar, :s1), :accept)),
            s(:lvasgn, :e,
              s(:send,
                s(:const, nil, :Socket), :unpack_sockaddr_in,
                s(:send,
                  s(:lvar, :s2), :getsockname))),
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :Socket), :unpack_sockaddr_in,
                s(:send,
                  s(:send,
                    s(:lvar, :s3), :remote_address), :to_sockaddr))),
            s(:send, nil, :assert_equal,
              s(:lvar, :e),
              s(:lvar, :a)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Socket), :AF_INET),
              s(:send,
                s(:send,
                  s(:lvar, :s3), :remote_address), :afamily)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Socket), :PF_INET),
              s(:send,
                s(:send,
                  s(:lvar, :s3), :remote_address), :pfamily)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Socket), :SOCK_STREAM),
              s(:send,
                s(:send,
                  s(:lvar, :s3), :remote_address), :socktype))),
          s(:begin,
            s(:if,
              s(:and,
                s(:lvar, :s1),
                s(:send,
                  s(:send,
                    s(:lvar, :s1), :closed?), :!)),
              s(:send,
                s(:lvar, :s1), :close), nil),
            s(:if,
              s(:and,
                s(:lvar, :s2),
                s(:send,
                  s(:send,
                    s(:lvar, :s2), :closed?), :!)),
              s(:send,
                s(:lvar, :s2), :close), nil),
            s(:if,
              s(:and,
                s(:lvar, :s3),
                s(:send,
                  s(:send,
                    s(:lvar, :s3), :closed?), :!)),
              s(:send,
                s(:lvar, :s3), :close), nil)))),
      s(:def, :test_socket_accept,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :serv,
              s(:send,
                s(:const, nil, :Socket), :new,
                s(:sym, :INET),
                s(:sym, :STREAM),
                s(:int, 0))),
            s(:send,
              s(:lvar, :serv), :bind,
              s(:send,
                s(:const, nil, :Socket), :sockaddr_in,
                s(:int, 0),
                s(:str, "127.0.0.1"))),
            s(:send,
              s(:lvar, :serv), :listen,
              s(:int, 5)),
            s(:lvasgn, :c,
              s(:send,
                s(:const, nil, :Socket), :new,
                s(:sym, :INET),
                s(:sym, :STREAM),
                s(:int, 0))),
            s(:send,
              s(:lvar, :c), :connect,
              s(:send,
                s(:lvar, :serv), :local_address)),
            s(:lvasgn, :ret,
              s(:send,
                s(:lvar, :serv), :accept)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :s),
                s(:lvasgn, :ai)),
              s(:lvar, :ret)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Array),
              s(:lvar, :ret)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :ret), :length)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Addrinfo),
              s(:lvar, :ai)),
            s(:lvasgn, :e,
              s(:send,
                s(:const, nil, :Socket), :unpack_sockaddr_in,
                s(:send,
                  s(:lvar, :c), :getsockname))),
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :Socket), :unpack_sockaddr_in,
                s(:send,
                  s(:lvar, :ai), :to_sockaddr))),
            s(:send, nil, :assert_equal,
              s(:lvar, :e),
              s(:lvar, :a))),
          s(:begin,
            s(:if,
              s(:and,
                s(:lvar, :serv),
                s(:send,
                  s(:send,
                    s(:lvar, :serv), :closed?), :!)),
              s(:send,
                s(:lvar, :serv), :close), nil),
            s(:if,
              s(:and,
                s(:lvar, :s),
                s(:send,
                  s(:send,
                    s(:lvar, :s), :closed?), :!)),
              s(:send,
                s(:lvar, :s), :close), nil),
            s(:if,
              s(:and,
                s(:lvar, :c),
                s(:send,
                  s(:send,
                    s(:lvar, :c), :closed?), :!)),
              s(:send,
                s(:lvar, :c), :close), nil)))),
      s(:def, :test_socket_accept_nonblock,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :serv,
              s(:send,
                s(:const, nil, :Socket), :new,
                s(:sym, :INET),
                s(:sym, :STREAM),
                s(:int, 0))),
            s(:send,
              s(:lvar, :serv), :bind,
              s(:send,
                s(:const, nil, :Socket), :sockaddr_in,
                s(:int, 0),
                s(:str, "127.0.0.1"))),
            s(:send,
              s(:lvar, :serv), :listen,
              s(:int, 5)),
            s(:lvasgn, :c,
              s(:send,
                s(:const, nil, :Socket), :new,
                s(:sym, :INET),
                s(:sym, :STREAM),
                s(:int, 0))),
            s(:send,
              s(:lvar, :c), :connect,
              s(:send,
                s(:lvar, :serv), :local_address)),
            s(:kwbegin,
              s(:rescue,
                s(:lvasgn, :ret,
                  s(:send,
                    s(:lvar, :serv), :accept_nonblock)),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :IO), :WaitReadable),
                    s(:const,
                      s(:const, nil, :Errno), :EINTR)), nil,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :IO), :select,
                      s(:array,
                        s(:lvar, :serv))),
                    s(:retry))), nil)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :s),
                s(:lvasgn, :ai)),
              s(:lvar, :ret)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Array),
              s(:lvar, :ret)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :ret), :length)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Addrinfo),
              s(:lvar, :ai)),
            s(:lvasgn, :e,
              s(:send,
                s(:const, nil, :Socket), :unpack_sockaddr_in,
                s(:send,
                  s(:lvar, :c), :getsockname))),
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :Socket), :unpack_sockaddr_in,
                s(:send,
                  s(:lvar, :ai), :to_sockaddr))),
            s(:send, nil, :assert_equal,
              s(:lvar, :e),
              s(:lvar, :a))),
          s(:begin,
            s(:if,
              s(:and,
                s(:lvar, :serv),
                s(:send,
                  s(:send,
                    s(:lvar, :serv), :closed?), :!)),
              s(:send,
                s(:lvar, :serv), :close), nil),
            s(:if,
              s(:and,
                s(:lvar, :s),
                s(:send,
                  s(:send,
                    s(:lvar, :s), :closed?), :!)),
              s(:send,
                s(:lvar, :s), :close), nil),
            s(:if,
              s(:and,
                s(:lvar, :c),
                s(:send,
                  s(:send,
                    s(:lvar, :c), :closed?), :!)),
              s(:send,
                s(:lvar, :c), :close), nil)))),
      s(:def, :test_socket_sysaccept,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :serv,
              s(:send,
                s(:const, nil, :Socket), :new,
                s(:sym, :INET),
                s(:sym, :STREAM),
                s(:int, 0))),
            s(:send,
              s(:lvar, :serv), :bind,
              s(:send,
                s(:const, nil, :Socket), :sockaddr_in,
                s(:int, 0),
                s(:str, "127.0.0.1"))),
            s(:send,
              s(:lvar, :serv), :listen,
              s(:int, 5)),
            s(:lvasgn, :c,
              s(:send,
                s(:const, nil, :Socket), :new,
                s(:sym, :INET),
                s(:sym, :STREAM),
                s(:int, 0))),
            s(:send,
              s(:lvar, :c), :connect,
              s(:send,
                s(:lvar, :serv), :local_address)),
            s(:lvasgn, :ret,
              s(:send,
                s(:lvar, :serv), :sysaccept)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :fd),
                s(:lvasgn, :ai)),
              s(:lvar, :ret)),
            s(:lvasgn, :s,
              s(:send,
                s(:const, nil, :IO), :new,
                s(:lvar, :fd))),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Array),
              s(:lvar, :ret)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :ret), :length)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Addrinfo),
              s(:lvar, :ai)),
            s(:lvasgn, :e,
              s(:send,
                s(:const, nil, :Socket), :unpack_sockaddr_in,
                s(:send,
                  s(:lvar, :c), :getsockname))),
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :Socket), :unpack_sockaddr_in,
                s(:send,
                  s(:lvar, :ai), :to_sockaddr))),
            s(:send, nil, :assert_equal,
              s(:lvar, :e),
              s(:lvar, :a))),
          s(:begin,
            s(:if,
              s(:and,
                s(:lvar, :serv),
                s(:send,
                  s(:send,
                    s(:lvar, :serv), :closed?), :!)),
              s(:send,
                s(:lvar, :serv), :close), nil),
            s(:if,
              s(:and,
                s(:lvar, :s),
                s(:send,
                  s(:send,
                    s(:lvar, :s), :closed?), :!)),
              s(:send,
                s(:lvar, :s), :close), nil),
            s(:if,
              s(:and,
                s(:lvar, :c),
                s(:send,
                  s(:send,
                    s(:lvar, :c), :closed?), :!)),
              s(:send,
                s(:lvar, :c), :close), nil)))),
      s(:def, :test_socket_recvfrom,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :s1,
              s(:send,
                s(:const, nil, :Socket), :new,
                s(:sym, :INET),
                s(:sym, :DGRAM),
                s(:int, 0))),
            s(:send,
              s(:lvar, :s1), :bind,
              s(:send,
                s(:const, nil, :Socket), :sockaddr_in,
                s(:int, 0),
                s(:str, "127.0.0.1"))),
            s(:lvasgn, :s2,
              s(:send,
                s(:const, nil, :Socket), :new,
                s(:sym, :INET),
                s(:sym, :DGRAM),
                s(:int, 0))),
            s(:send,
              s(:lvar, :s2), :bind,
              s(:send,
                s(:const, nil, :Socket), :sockaddr_in,
                s(:int, 0),
                s(:str, "127.0.0.1"))),
            s(:send,
              s(:lvar, :s2), :send,
              s(:str, "test-socket-recvfrom"),
              s(:int, 0),
              s(:send,
                s(:lvar, :s1), :getsockname)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :data),
                s(:lvasgn, :ai)),
              s(:send,
                s(:lvar, :s1), :recvfrom,
                s(:int, 100))),
            s(:send, nil, :assert_equal,
              s(:str, "test-socket-recvfrom"),
              s(:lvar, :data)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Addrinfo),
              s(:lvar, :ai)),
            s(:lvasgn, :e,
              s(:send,
                s(:const, nil, :Socket), :unpack_sockaddr_in,
                s(:send,
                  s(:lvar, :s2), :getsockname))),
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :Socket), :unpack_sockaddr_in,
                s(:send,
                  s(:lvar, :ai), :to_sockaddr))),
            s(:send, nil, :assert_equal,
              s(:lvar, :e),
              s(:lvar, :a))),
          s(:begin,
            s(:if,
              s(:and,
                s(:lvar, :s1),
                s(:send,
                  s(:send,
                    s(:lvar, :s1), :closed?), :!)),
              s(:send,
                s(:lvar, :s1), :close), nil),
            s(:if,
              s(:and,
                s(:lvar, :s2),
                s(:send,
                  s(:send,
                    s(:lvar, :s2), :closed?), :!)),
              s(:send,
                s(:lvar, :s2), :close), nil)))),
      s(:def, :test_socket_recvfrom_nonblock,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :s1,
              s(:send,
                s(:const, nil, :Socket), :new,
                s(:sym, :INET),
                s(:sym, :DGRAM),
                s(:int, 0))),
            s(:send,
              s(:lvar, :s1), :bind,
              s(:send,
                s(:const, nil, :Socket), :sockaddr_in,
                s(:int, 0),
                s(:str, "127.0.0.1"))),
            s(:lvasgn, :s2,
              s(:send,
                s(:const, nil, :Socket), :new,
                s(:sym, :INET),
                s(:sym, :DGRAM),
                s(:int, 0))),
            s(:send,
              s(:lvar, :s2), :bind,
              s(:send,
                s(:const, nil, :Socket), :sockaddr_in,
                s(:int, 0),
                s(:str, "127.0.0.1"))),
            s(:send,
              s(:lvar, :s2), :send,
              s(:str, "test-socket-recvfrom"),
              s(:int, 0),
              s(:send,
                s(:lvar, :s1), :getsockname)),
            s(:kwbegin,
              s(:rescue,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :data),
                    s(:lvasgn, :ai)),
                  s(:send,
                    s(:lvar, :s1), :recvfrom_nonblock,
                    s(:int, 100))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :IO), :WaitReadable)), nil,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :IO), :select,
                      s(:array,
                        s(:lvar, :s1))),
                    s(:retry))), nil)),
            s(:send, nil, :assert_equal,
              s(:str, "test-socket-recvfrom"),
              s(:lvar, :data)),
            s(:send, nil, :assert_kind_of,
              s(:const, nil, :Addrinfo),
              s(:lvar, :ai)),
            s(:lvasgn, :e,
              s(:send,
                s(:const, nil, :Socket), :unpack_sockaddr_in,
                s(:send,
                  s(:lvar, :s2), :getsockname))),
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :Socket), :unpack_sockaddr_in,
                s(:send,
                  s(:lvar, :ai), :to_sockaddr))),
            s(:send, nil, :assert_equal,
              s(:lvar, :e),
              s(:lvar, :a))),
          s(:begin,
            s(:if,
              s(:and,
                s(:lvar, :s1),
                s(:send,
                  s(:send,
                    s(:lvar, :s1), :closed?), :!)),
              s(:send,
                s(:lvar, :s1), :close), nil),
            s(:if,
              s(:and,
                s(:lvar, :s2),
                s(:send,
                  s(:send,
                    s(:lvar, :s2), :closed?), :!)),
              s(:send,
                s(:lvar, :s2), :close), nil)))),
      s(:def, :test_family_addrinfo,
        s(:args),
        s(:begin,
          s(:lvasgn, :ai,
            s(:send,
              s(:send,
                s(:const, nil, :Addrinfo), :tcp,
                s(:str, "0.0.0.0"),
                s(:int, 4649)), :family_addrinfo,
              s(:str, "127.0.0.1"),
              s(:int, 80))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "127.0.0.1"),
              s(:int, 80)),
            s(:send,
              s(:lvar, :ai), :ip_unpack)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :SOCK_STREAM),
            s(:send,
              s(:lvar, :ai), :socktype)),
          s(:if,
            s(:send,
              s(:const, nil, :Addrinfo), :respond_to?,
              s(:sym, :unix)), nil,
            s(:return)),
          s(:lvasgn, :ai,
            s(:send,
              s(:send,
                s(:const, nil, :Addrinfo), :unix,
                s(:str, "/testdir/sock")), :family_addrinfo,
              s(:str, "/testdir/sock2"))),
          s(:send, nil, :assert_equal,
            s(:str, "/testdir/sock2"),
            s(:send,
              s(:lvar, :ai), :unix_path)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Socket), :SOCK_STREAM),
            s(:send,
              s(:lvar, :ai), :socktype)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :SocketError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Addrinfo), :tcp,
                s(:str, "0.0.0.0"),
                s(:int, 4649)), :family_addrinfo,
              s(:str, "::1"),
              s(:int, 80))))),
      s(:def, :random_port,
        s(:args),
        s(:send,
          s(:int, 49152), :+,
          s(:send, nil, :rand,
            s(:send,
              s(:send,
                s(:int, 65535), :-,
                s(:int, 49152)), :+,
              s(:int, 1))))),
      s(:def, :errors_addrinuse,
        s(:args),
        s(:array,
          s(:const,
            s(:const, nil, :Errno), :EADDRINUSE))),
      s(:def, :test_connect_from,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :TCPServer), :open,
              s(:str, "0.0.0.0"),
              s(:int, 0)),
            s(:args,
              s(:arg, :serv)),
            s(:begin,
              s(:lvasgn, :serv_ai,
                s(:send,
                  s(:const, nil, :Addrinfo), :new,
                  s(:send,
                    s(:lvar, :serv), :getsockname),
                  s(:sym, :INET),
                  s(:sym, :STREAM))),
              s(:lvasgn, :serv_ai,
                s(:send, nil, :tcp_unspecified_to_loopback,
                  s(:lvar, :serv_ai))),
              s(:lvasgn, :port,
                s(:send, nil, :random_port)),
              s(:kwbegin,
                s(:rescue,
                  s(:block,
                    s(:send,
                      s(:lvar, :serv_ai), :connect_from,
                      s(:str, "0.0.0.0"),
                      s(:lvar, :port)),
                    s(:args,
                      s(:arg, :s1)),
                    s(:begin,
                      s(:lvasgn, :s2,
                        s(:send,
                          s(:lvar, :serv), :accept)),
                      s(:kwbegin,
                        s(:ensure,
                          s(:send, nil, :assert_equal,
                            s(:lvar, :port),
                            s(:send,
                              s(:send,
                                s(:lvar, :s2), :remote_address), :ip_port)),
                          s(:send,
                            s(:lvar, :s2), :close))))),
                  s(:resbody,
                    s(:array,
                      s(:splat,
                        s(:send, nil, :errors_addrinuse))), nil, nil), nil)))),
          s(:block,
            s(:send,
              s(:const, nil, :TCPServer), :open,
              s(:str, "0.0.0.0"),
              s(:int, 0)),
            s(:args,
              s(:arg, :serv)),
            s(:begin,
              s(:lvasgn, :serv_ai,
                s(:send,
                  s(:const, nil, :Addrinfo), :new,
                  s(:send,
                    s(:lvar, :serv), :getsockname),
                  s(:sym, :INET),
                  s(:sym, :STREAM))),
              s(:lvasgn, :serv_ai,
                s(:send, nil, :tcp_unspecified_to_loopback,
                  s(:lvar, :serv_ai))),
              s(:lvasgn, :port,
                s(:send, nil, :random_port)),
              s(:kwbegin,
                s(:rescue,
                  s(:block,
                    s(:send,
                      s(:lvar, :serv_ai), :connect_from,
                      s(:send,
                        s(:const, nil, :Addrinfo), :tcp,
                        s(:str, "0.0.0.0"),
                        s(:lvar, :port))),
                    s(:args,
                      s(:arg, :s1)),
                    s(:begin,
                      s(:lvasgn, :s2,
                        s(:send,
                          s(:lvar, :serv), :accept)),
                      s(:kwbegin,
                        s(:ensure,
                          s(:send, nil, :assert_equal,
                            s(:lvar, :port),
                            s(:send,
                              s(:send,
                                s(:lvar, :s2), :remote_address), :ip_port)),
                          s(:send,
                            s(:lvar, :s2), :close))))),
                  s(:resbody,
                    s(:array,
                      s(:splat,
                        s(:send, nil, :errors_addrinuse))), nil, nil), nil)))))),
      s(:def, :test_connect_to,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :TCPServer), :open,
            s(:str, "0.0.0.0"),
            s(:int, 0)),
          s(:args,
            s(:arg, :serv)),
          s(:begin,
            s(:lvasgn, :serv_ai,
              s(:send,
                s(:const, nil, :Addrinfo), :new,
                s(:send,
                  s(:lvar, :serv), :getsockname),
                s(:sym, :INET),
                s(:sym, :STREAM))),
            s(:lvasgn, :serv_ai,
              s(:send, nil, :tcp_unspecified_to_loopback,
                s(:lvar, :serv_ai))),
            s(:lvasgn, :port,
              s(:send, nil, :random_port)),
            s(:lvasgn, :client_ai,
              s(:send,
                s(:const, nil, :Addrinfo), :tcp,
                s(:str, "0.0.0.0"),
                s(:lvar, :port))),
            s(:kwbegin,
              s(:rescue,
                s(:block,
                  s(:send,
                    s(:lvar, :client_ai), :connect_to,
                    s(:splat,
                      s(:send,
                        s(:lvar, :serv_ai), :ip_unpack))),
                  s(:args,
                    s(:arg, :s1)),
                  s(:begin,
                    s(:lvasgn, :s2,
                      s(:send,
                        s(:lvar, :serv), :accept)),
                    s(:kwbegin,
                      s(:ensure,
                        s(:send, nil, :assert_equal,
                          s(:lvar, :port),
                          s(:send,
                            s(:send,
                              s(:lvar, :s2), :remote_address), :ip_port)),
                        s(:send,
                          s(:lvar, :s2), :close))))),
                s(:resbody,
                  s(:array,
                    s(:splat,
                      s(:send, nil, :errors_addrinuse))), nil, nil), nil))))),
      s(:def, :test_connect,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :TCPServer), :open,
            s(:str, "0.0.0.0"),
            s(:int, 0)),
          s(:args,
            s(:arg, :serv)),
          s(:begin,
            s(:lvasgn, :serv_ai,
              s(:send,
                s(:const, nil, :Addrinfo), :new,
                s(:send,
                  s(:lvar, :serv), :getsockname),
                s(:sym, :INET),
                s(:sym, :STREAM))),
            s(:lvasgn, :serv_ai,
              s(:send, nil, :tcp_unspecified_to_loopback,
                s(:lvar, :serv_ai))),
            s(:kwbegin,
              s(:rescue,
                s(:block,
                  s(:send,
                    s(:lvar, :serv_ai), :connect),
                  s(:args,
                    s(:arg, :s1)),
                  s(:begin,
                    s(:lvasgn, :s2,
                      s(:send,
                        s(:lvar, :serv), :accept)),
                    s(:kwbegin,
                      s(:ensure,
                        s(:begin,
                          s(:send, nil, :assert_equal,
                            s(:send,
                              s(:send,
                                s(:lvar, :s1), :local_address), :ip_unpack),
                            s(:send,
                              s(:send,
                                s(:lvar, :s2), :remote_address), :ip_unpack)),
                          s(:send, nil, :assert_equal,
                            s(:send,
                              s(:send,
                                s(:lvar, :s2), :local_address), :ip_unpack),
                            s(:send,
                              s(:send,
                                s(:lvar, :s1), :remote_address), :ip_unpack))),
                        s(:send,
                          s(:lvar, :s2), :close))))),
                s(:resbody,
                  s(:array,
                    s(:splat,
                      s(:send, nil, :errors_addrinuse))), nil, nil), nil))))),
      s(:def, :test_bind,
        s(:args),
        s(:begin,
          s(:lvasgn, :port,
            s(:send, nil, :random_port)),
          s(:lvasgn, :client_ai,
            s(:send,
              s(:const, nil, :Addrinfo), :tcp,
              s(:str, "0.0.0.0"),
              s(:lvar, :port))),
          s(:kwbegin,
            s(:rescue,
              s(:block,
                s(:send,
                  s(:lvar, :client_ai), :bind),
                s(:args,
                  s(:arg, :s)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :port),
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :local_address), :ip_port))),
              s(:resbody,
                s(:array,
                  s(:splat,
                    s(:send, nil, :errors_addrinuse))), nil, nil), nil)))),
      s(:def, :test_listen,
        s(:args),
        s(:begin,
          s(:lvasgn, :port,
            s(:send, nil, :random_port)),
          s(:lvasgn, :client_ai,
            s(:send,
              s(:const, nil, :Addrinfo), :tcp,
              s(:str, "0.0.0.0"),
              s(:lvar, :port))),
          s(:kwbegin,
            s(:rescue,
              s(:block,
                s(:send,
                  s(:lvar, :client_ai), :listen),
                s(:args,
                  s(:arg, :serv)),
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:lvar, :port),
                    s(:send,
                      s(:send,
                        s(:lvar, :serv), :local_address), :ip_port)),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :serv_addr),
                      s(:lvasgn, :serv_port)),
                    s(:send,
                      s(:send,
                        s(:lvar, :serv), :local_address), :ip_unpack)),
                  s(:case,
                    s(:lvar, :serv_addr),
                    s(:when,
                      s(:str, "0.0.0.0"),
                      s(:lvasgn, :serv_addr,
                        s(:str, "127.0.0.1"))), nil),
                  s(:block,
                    s(:send,
                      s(:const, nil, :TCPSocket), :open,
                      s(:lvar, :serv_addr),
                      s(:lvar, :serv_port)),
                    s(:args,
                      s(:arg, :s1)),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :s2),
                          s(:lvasgn, :addr)),
                        s(:send,
                          s(:lvar, :serv), :accept)),
                      s(:kwbegin,
                        s(:ensure,
                          s(:send, nil, :assert_equal,
                            s(:send,
                              s(:send,
                                s(:lvar, :s1), :local_address), :ip_unpack),
                            s(:send,
                              s(:lvar, :addr), :ip_unpack)),
                          s(:send,
                            s(:lvar, :s2), :close))))))),
              s(:resbody,
                s(:array,
                  s(:splat,
                    s(:send, nil, :errors_addrinuse))), nil, nil), nil)))),
      s(:def, :test_s_foreach,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Addrinfo), :foreach,
            s(:nil),
            s(:int, 80),
            s(:nil),
            s(:sym, :STREAM)),
          s(:args,
            s(:arg, :ai)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Addrinfo),
            s(:lvar, :ai)))),
      s(:def, :test_marshal,
        s(:args),
        s(:begin,
          s(:lvasgn, :ai1,
            s(:send,
              s(:const, nil, :Addrinfo), :tcp,
              s(:str, "127.0.0.1"),
              s(:int, 80))),
          s(:lvasgn, :ai2,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:lvar, :ai1)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :ai1), :afamily),
            s(:send,
              s(:lvar, :ai2), :afamily)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :ai1), :ip_unpack),
            s(:send,
              s(:lvar, :ai2), :ip_unpack)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :ai1), :pfamily),
            s(:send,
              s(:lvar, :ai2), :pfamily)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :ai1), :socktype),
            s(:send,
              s(:lvar, :ai2), :socktype)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :ai1), :protocol),
            s(:send,
              s(:lvar, :ai2), :protocol)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :ai1), :canonname),
            s(:send,
              s(:lvar, :ai2), :canonname)))),
      s(:def, :test_marshal_memory_leak,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug11051,
            s(:str, "[ruby-dev:48923] [Bug #11051]")),
          s(:send, nil, :assert_no_memory_leak,
            s(:array,
              s(:str, "-rsocket")),
            s(:dstr,
              s(:str, "    d = Marshal.dump(Addrinfo.tcp(\"127.0.0.1\", 80))\n"),
              s(:str, "    1000.times {Marshal.load(d)}\n")),
            s(:dstr,
              s(:str, "    GC.start\n"),
              s(:str, "    20_000.times {Marshal.load(d)}\n")),
            s(:lvar, :bug11051),
            s(:hash,
              s(:pair,
                s(:sym, :rss),
                s(:true)))))),
      s(:if,
        s(:and,
          s(:send,
            s(:const, nil, :Socket), :const_defined?,
            s(:str, "AF_INET6")),
          s(:send,
            s(:const,
              s(:const, nil, :Socket), :AF_INET6), :is_a?,
            s(:const, nil, :Integer))),
        s(:begin,
          s(:def, :test_addrinfo_new_inet6,
            s(:args),
            s(:begin,
              s(:lvasgn, :ai,
                s(:send,
                  s(:const, nil, :Addrinfo), :new,
                  s(:array,
                    s(:str, "AF_INET6"),
                    s(:int, 42304),
                    s(:str, "ip6-localhost"),
                    s(:str, "::1")))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:int, 42304),
                  s(:str, "::1")),
                s(:send,
                  s(:const, nil, :Socket), :unpack_sockaddr_in,
                  s(:lvar, :ai))),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Socket), :AF_INET6),
                s(:send,
                  s(:lvar, :ai), :afamily)),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Socket), :PF_INET6),
                s(:send,
                  s(:lvar, :ai), :pfamily)),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:lvar, :ai), :socktype)),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:lvar, :ai), :protocol)))),
          s(:def, :test_addrinfo_ip_unpack_inet6,
            s(:args),
            s(:begin,
              s(:lvasgn, :ai,
                s(:send,
                  s(:const, nil, :Addrinfo), :tcp,
                  s(:str, "::1"),
                  s(:int, 80))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "::1"),
                  s(:int, 80)),
                s(:send,
                  s(:lvar, :ai), :ip_unpack)),
              s(:send, nil, :assert_equal,
                s(:str, "::1"),
                s(:send,
                  s(:lvar, :ai), :ip_address)),
              s(:send, nil, :assert_equal,
                s(:int, 80),
                s(:send,
                  s(:lvar, :ai), :ip_port)))),
          s(:def, :test_addrinfo_inspect_sockaddr_inet6,
            s(:args),
            s(:begin,
              s(:lvasgn, :ai,
                s(:send,
                  s(:const, nil, :Addrinfo), :tcp,
                  s(:str, "::1"),
                  s(:int, 80))),
              s(:send, nil, :assert_equal,
                s(:str, "[::1]:80"),
                s(:send,
                  s(:lvar, :ai), :inspect_sockaddr)))),
          s(:def, :test_marshal_inet6,
            s(:args),
            s(:begin,
              s(:lvasgn, :ai1,
                s(:send,
                  s(:const, nil, :Addrinfo), :tcp,
                  s(:str, "::1"),
                  s(:int, 80))),
              s(:lvasgn, :ai2,
                s(:send,
                  s(:const, nil, :Marshal), :load,
                  s(:send,
                    s(:const, nil, :Marshal), :dump,
                    s(:lvar, :ai1)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :ai1), :afamily),
                s(:send,
                  s(:lvar, :ai2), :afamily)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :ai1), :ip_unpack),
                s(:send,
                  s(:lvar, :ai2), :ip_unpack)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :ai1), :pfamily),
                s(:send,
                  s(:lvar, :ai2), :pfamily)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :ai1), :socktype),
                s(:send,
                  s(:lvar, :ai2), :socktype)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :ai1), :protocol),
                s(:send,
                  s(:lvar, :ai2), :protocol)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :ai1), :canonname),
                s(:send,
                  s(:lvar, :ai2), :canonname)))),
          s(:def, :ipv6,
            s(:args,
              s(:arg, :str)),
            s(:send,
              s(:send,
                s(:const, nil, :Addrinfo), :getaddrinfo,
                s(:lvar, :str),
                s(:nil),
                s(:sym, :INET6),
                s(:sym, :DGRAM)), :fetch,
              s(:int, 0))),
          s(:def, :test_ipv6_address_predicates,
            s(:args),
            s(:begin,
              s(:lvasgn, :list,
                s(:array,
                  s(:array,
                    s(:sym, :ipv6_unspecified?),
                    s(:str, "::")),
                  s(:array,
                    s(:sym, :ipv6_loopback?),
                    s(:str, "::1")),
                  s(:array,
                    s(:sym, :ipv6_v4compat?),
                    s(:str, "::0.0.0.2"),
                    s(:str, "::255.255.255.255")),
                  s(:array,
                    s(:sym, :ipv6_v4mapped?),
                    s(:str, "::ffff:0.0.0.0"),
                    s(:str, "::ffff:255.255.255.255")),
                  s(:array,
                    s(:sym, :ipv6_linklocal?),
                    s(:str, "fe80::"),
                    s(:str, "febf::")),
                  s(:array,
                    s(:sym, :ipv6_sitelocal?),
                    s(:str, "fec0::"),
                    s(:str, "feef::")),
                  s(:array,
                    s(:sym, :ipv6_multicast?),
                    s(:str, "ff00::"),
                    s(:str, "ffff::")),
                  s(:array,
                    s(:sym, :ipv6_unique_local?),
                    s(:str, "fc00::"),
                    s(:str, "fd00::")))),
              s(:lvasgn, :mlist,
                s(:array,
                  s(:array,
                    s(:sym, :ipv6_mc_nodelocal?),
                    s(:str, "ff01::"),
                    s(:str, "ff11::")),
                  s(:array,
                    s(:sym, :ipv6_mc_linklocal?),
                    s(:str, "ff02::"),
                    s(:str, "ff12::")),
                  s(:array,
                    s(:sym, :ipv6_mc_sitelocal?),
                    s(:str, "ff05::"),
                    s(:str, "ff15::")),
                  s(:array,
                    s(:sym, :ipv6_mc_orglocal?),
                    s(:str, "ff08::"),
                    s(:str, "ff18::")),
                  s(:array,
                    s(:sym, :ipv6_mc_global?),
                    s(:str, "ff0e::"),
                    s(:str, "ff1e::")))),
              s(:block,
                s(:send,
                  s(:lvar, :list), :each),
                s(:args,
                  s(:arg, :meth),
                  s(:restarg, :addrs)),
                s(:block,
                  s(:send,
                    s(:lvar, :addrs), :each),
                  s(:args,
                    s(:arg, :addr)),
                  s(:begin,
                    s(:lvasgn, :addr_exp,
                      s(:dstr,
                        s(:str, "Addrinfo.getaddrinfo("),
                        s(:begin,
                          s(:send,
                            s(:lvar, :addr), :inspect)),
                        s(:str, ", nil, :INET6, :DGRAM).fetch(0)"))),
                    s(:if,
                      s(:or,
                        s(:send,
                          s(:lvar, :meth), :==,
                          s(:sym, :ipv6_v4compat?)),
                        s(:send,
                          s(:lvar, :meth), :==,
                          s(:sym, :ipv6_v4mapped?))),
                      s(:begin,
                        s(:lvasgn, :ai,
                          s(:send, nil, :ipv6,
                            s(:lvar, :addr))),
                        s(:kwbegin,
                          s(:rescue,
                            s(:send, nil, :assert,
                              s(:or,
                                s(:send,
                                  s(:lvar, :ai), :ipv4?),
                                s(:send,
                                  s(:lvar, :ai), :send,
                                  s(:lvar, :meth))),
                              s(:dstr,
                                s(:str, "ai="),
                                s(:begin,
                                  s(:lvar, :addr_exp)),
                                s(:str, "; ai.ipv4? || ."),
                                s(:begin,
                                  s(:lvar, :meth)))),
                            s(:resbody,
                              s(:array,
                                s(:const,
                                  s(:const, nil, :Minitest), :Assertion)), nil,
                              s(:begin,
                                s(:if,
                                  s(:match_with_lvasgn,
                                    s(:regexp,
                                      s(:str, "aix"),
                                      s(:regopt)),
                                    s(:const, nil, :RUBY_PLATFORM)),
                                  s(:send, nil, :skip,
                                    s(:str, "Known bug in IN6_IS_ADDR_V4COMPAT and IN6_IS_ADDR_V4MAPPED on AIX")), nil),
                                s(:send, nil, :raise,
                                  s(:gvar, :$!)))), nil))),
                      s(:begin,
                        s(:send, nil, :assert,
                          s(:send,
                            s(:send, nil, :ipv6,
                              s(:lvar, :addr)), :send,
                            s(:lvar, :meth)),
                          s(:dstr,
                            s(:begin,
                              s(:lvar, :addr_exp)),
                            s(:str, "."),
                            s(:begin,
                              s(:lvar, :meth)))),
                        s(:send, nil, :assert_equal,
                          s(:lvar, :addr),
                          s(:send,
                            s(:send, nil, :ipv6,
                              s(:lvar, :addr)), :ip_address)))),
                    s(:block,
                      s(:send,
                        s(:lvar, :list), :each),
                      s(:args,
                        s(:arg, :meth2)),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:lvar, :meth), :==,
                            s(:lvar, :meth2)),
                          s(:next), nil),
                        s(:send, nil, :assert,
                          s(:send,
                            s(:send,
                              s(:send, nil, :ipv6,
                                s(:lvar, :addr)), :send,
                              s(:lvar, :meth2)), :!),
                          s(:dstr,
                            s(:str, "!"),
                            s(:begin,
                              s(:lvar, :addr_exp)),
                            s(:str, "."),
                            s(:begin,
                              s(:lvar, :meth2))))))))),
              s(:block,
                s(:send,
                  s(:lvar, :mlist), :each),
                s(:args,
                  s(:arg, :meth),
                  s(:restarg, :addrs)),
                s(:block,
                  s(:send,
                    s(:lvar, :addrs), :each),
                  s(:args,
                    s(:arg, :addr)),
                  s(:begin,
                    s(:lvasgn, :addr_exp,
                      s(:dstr,
                        s(:str, "Addrinfo.getaddrinfo("),
                        s(:begin,
                          s(:send,
                            s(:lvar, :addr), :inspect)),
                        s(:str, ", nil, :INET6, :DGRAM).fetch(0)"))),
                    s(:send, nil, :assert,
                      s(:send,
                        s(:send, nil, :ipv6,
                          s(:lvar, :addr)), :send,
                        s(:lvar, :meth)),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :addr_exp)),
                        s(:str, "."),
                        s(:begin,
                          s(:lvar, :meth)))),
                    s(:send, nil, :assert,
                      s(:send,
                        s(:send, nil, :ipv6,
                          s(:lvar, :addr)), :ipv6_multicast?),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :addr_exp)),
                        s(:str, ".ipv6_multicast?"))),
                    s(:block,
                      s(:send,
                        s(:lvar, :mlist), :each),
                      s(:args,
                        s(:arg, :meth2)),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:lvar, :meth), :==,
                            s(:lvar, :meth2)),
                          s(:next), nil),
                        s(:send, nil, :assert,
                          s(:send,
                            s(:send,
                              s(:send, nil, :ipv6,
                                s(:lvar, :addr)), :send,
                              s(:lvar, :meth2)), :!),
                          s(:dstr,
                            s(:str, "!"),
                            s(:begin,
                              s(:lvar, :addr_exp)),
                            s(:str, "."),
                            s(:begin,
                              s(:lvar, :meth2)))))),
                    s(:block,
                      s(:send,
                        s(:lvar, :list), :each),
                      s(:args,
                        s(:arg, :meth2)),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:sym, :ipv6_multicast?), :==,
                            s(:lvar, :meth2)),
                          s(:next), nil),
                        s(:send, nil, :assert,
                          s(:send,
                            s(:send,
                              s(:send, nil, :ipv6,
                                s(:lvar, :addr)), :send,
                              s(:lvar, :meth2)), :!),
                          s(:dstr,
                            s(:str, "!"),
                            s(:begin,
                              s(:lvar, :addr_exp)),
                            s(:str, "."),
                            s(:begin,
                              s(:lvar, :meth2))))))))))),
          s(:def, :test_ipv6_to_ipv4,
            s(:args),
            s(:begin,
              s(:lvasgn, :ai,
                s(:send,
                  s(:const, nil, :Addrinfo), :ip,
                  s(:str, "::192.0.2.3"))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :ai), :ipv4?), :!),
                s(:lvasgn, :ai,
                  s(:send,
                    s(:lvar, :ai), :ipv6_to_ipv4)), nil),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :ai), :ipv4?)),
              s(:send, nil, :assert_equal,
                s(:str, "192.0.2.3"),
                s(:send,
                  s(:lvar, :ai), :ip_address)),
              s(:lvasgn, :ai,
                s(:send,
                  s(:const, nil, :Addrinfo), :ip,
                  s(:str, "::ffff:192.0.2.3"))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :ai), :ipv4?), :!),
                s(:lvasgn, :ai,
                  s(:send,
                    s(:lvar, :ai), :ipv6_to_ipv4)), nil),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :ai), :ipv4?)),
              s(:send, nil, :assert_equal,
                s(:str, "192.0.2.3"),
                s(:send,
                  s(:lvar, :ai), :ip_address)),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:send,
                    s(:const, nil, :Addrinfo), :ip,
                    s(:str, "::1")), :ipv6_to_ipv4)),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:send,
                    s(:const, nil, :Addrinfo), :ip,
                    s(:str, "192.0.2.3")), :ipv6_to_ipv4)),
              s(:if,
                s(:const, nil, :HAS_UNIXSOCKET),
                s(:send, nil, :assert_nil,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Addrinfo), :unix,
                      s(:str, "/testdir/sock")), :ipv6_to_ipv4)), nil)))), nil),
      s(:if,
        s(:const, nil, :HAS_UNIXSOCKET),
        s(:begin,
          s(:def, :test_addrinfo_unix,
            s(:args),
            s(:begin,
              s(:lvasgn, :ai,
                s(:send,
                  s(:const, nil, :Addrinfo), :unix,
                  s(:str, "/testdir/sock"))),
              s(:send, nil, :assert_equal,
                s(:str, "/testdir/sock"),
                s(:send,
                  s(:const, nil, :Socket), :unpack_sockaddr_un,
                  s(:lvar, :ai))),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Socket), :AF_UNIX),
                s(:send,
                  s(:lvar, :ai), :afamily)),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Socket), :PF_UNIX),
                s(:send,
                  s(:lvar, :ai), :pfamily)),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Socket), :SOCK_STREAM),
                s(:send,
                  s(:lvar, :ai), :socktype)),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:lvar, :ai), :protocol)))),
          s(:def, :test_addrinfo_unix_dgram,
            s(:args),
            s(:begin,
              s(:lvasgn, :ai,
                s(:send,
                  s(:const, nil, :Addrinfo), :unix,
                  s(:str, "/testdir/sock"),
                  s(:sym, :DGRAM))),
              s(:send, nil, :assert_equal,
                s(:str, "/testdir/sock"),
                s(:send,
                  s(:const, nil, :Socket), :unpack_sockaddr_un,
                  s(:lvar, :ai))),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Socket), :AF_UNIX),
                s(:send,
                  s(:lvar, :ai), :afamily)),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Socket), :PF_UNIX),
                s(:send,
                  s(:lvar, :ai), :pfamily)),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Socket), :SOCK_DGRAM),
                s(:send,
                  s(:lvar, :ai), :socktype)),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:lvar, :ai), :protocol)))),
          s(:def, :test_addrinfo_unix_path,
            s(:args),
            s(:begin,
              s(:lvasgn, :ai,
                s(:send,
                  s(:const, nil, :Addrinfo), :unix,
                  s(:str, "/testdir/sock1"))),
              s(:send, nil, :assert_equal,
                s(:str, "/testdir/sock1"),
                s(:send,
                  s(:lvar, :ai), :unix_path)))),
          s(:def, :test_addrinfo_inspect_sockaddr_unix,
            s(:args),
            s(:begin,
              s(:lvasgn, :ai,
                s(:send,
                  s(:const, nil, :Addrinfo), :unix,
                  s(:str, "/testdir/test_addrinfo_inspect_sockaddr_unix"))),
              s(:send, nil, :assert_equal,
                s(:str, "/testdir/test_addrinfo_inspect_sockaddr_unix"),
                s(:send,
                  s(:lvar, :ai), :inspect_sockaddr)))),
          s(:def, :test_addrinfo_new_unix,
            s(:args),
            s(:begin,
              s(:lvasgn, :ai,
                s(:send,
                  s(:const, nil, :Addrinfo), :new,
                  s(:array,
                    s(:str, "AF_UNIX"),
                    s(:str, "/testdir/sock")))),
              s(:send, nil, :assert_equal,
                s(:str, "/testdir/sock"),
                s(:send,
                  s(:const, nil, :Socket), :unpack_sockaddr_un,
                  s(:lvar, :ai))),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Socket), :AF_UNIX),
                s(:send,
                  s(:lvar, :ai), :afamily)),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Socket), :PF_UNIX),
                s(:send,
                  s(:lvar, :ai), :pfamily)),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Socket), :SOCK_STREAM),
                s(:send,
                  s(:lvar, :ai), :socktype)),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:lvar, :ai), :protocol)))),
          s(:def, :test_addrinfo_predicates_unix,
            s(:args),
            s(:begin,
              s(:lvasgn, :unix_ai,
                s(:send,
                  s(:const, nil, :Addrinfo), :new,
                  s(:send,
                    s(:const, nil, :Socket), :sockaddr_un,
                    s(:str, "/testdir/sososo")))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :unix_ai), :ip?), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :unix_ai), :ipv4?), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :unix_ai), :ipv6?), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :unix_ai), :unix?)))),
          s(:def, :test_marshal_unix,
            s(:args),
            s(:begin,
              s(:lvasgn, :ai1,
                s(:send,
                  s(:const, nil, :Addrinfo), :unix,
                  s(:str, "/testdir/sock"))),
              s(:lvasgn, :ai2,
                s(:send,
                  s(:const, nil, :Marshal), :load,
                  s(:send,
                    s(:const, nil, :Marshal), :dump,
                    s(:lvar, :ai1)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :ai1), :afamily),
                s(:send,
                  s(:lvar, :ai2), :afamily)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :ai1), :unix_path),
                s(:send,
                  s(:lvar, :ai2), :unix_path)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :ai1), :pfamily),
                s(:send,
                  s(:lvar, :ai2), :pfamily)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :ai1), :socktype),
                s(:send,
                  s(:lvar, :ai2), :socktype)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :ai1), :protocol),
                s(:send,
                  s(:lvar, :ai2), :protocol)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :ai1), :canonname),
                s(:send,
                  s(:lvar, :ai2), :canonname))))), nil))))
