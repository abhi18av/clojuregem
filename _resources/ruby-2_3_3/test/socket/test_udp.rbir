s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :require,
          s(:str, "socket")),
        s(:send, nil, :require,
          s(:str, "test/unit"))),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:defined?,
      s(:const, nil, :UDPSocket)),
    s(:class,
      s(:const, nil, :TestSocket_UDPSocket),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :test_open,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :UDPSocket), :open),
                s(:args), nil)),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :UDPSocket), :open,
                  s(:const,
                    s(:const, nil, :Socket), :AF_INET)),
                s(:args), nil)),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :UDPSocket), :open,
                  s(:str, "AF_INET")),
                s(:args), nil)),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :UDPSocket), :open,
                  s(:sym, :AF_INET)),
                s(:args), nil)))),
        s(:def, :test_connect,
          s(:args),
          s(:begin,
            s(:lvasgn, :s,
              s(:send,
                s(:const, nil, :UDPSocket), :new)),
            s(:lvasgn, :host,
              s(:send,
                s(:const, nil, :Object), :new)),
            s(:block,
              s(:send,
                s(:sclass,
                  s(:lvar, :host),
                  s(:self)), :send,
                s(:sym, :define_method),
                s(:sym, :to_str)),
              s(:args),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :close),
                s(:str, "127.0.0.1"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :IOError),
                s(:str, "[ruby-dev:25045]")),
              s(:args),
              s(:send,
                s(:lvar, :s), :connect,
                s(:lvar, :host),
                s(:int, 1))))),
        s(:def, :test_bind,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :s,
                s(:send,
                  s(:const, nil, :UDPSocket), :new)),
              s(:lvasgn, :host,
                s(:send,
                  s(:const, nil, :Object), :new)),
              s(:block,
                s(:send,
                  s(:sclass,
                    s(:lvar, :host),
                    s(:self)), :send,
                  s(:sym, :define_method),
                  s(:sym, :to_str)),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :close),
                  s(:str, "127.0.0.1"))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :IOError),
                  s(:str, "[ruby-dev:25057]")),
                s(:args),
                s(:send,
                  s(:lvar, :s), :bind,
                  s(:lvar, :host),
                  s(:int, 2000)))),
            s(:if,
              s(:and,
                s(:lvar, :s),
                s(:send,
                  s(:send,
                    s(:lvar, :s), :closed?), :!)),
              s(:send,
                s(:lvar, :s), :close), nil))),
        s(:def, :test_bind_addrinuse,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :host,
                s(:str, "127.0.0.1")),
              s(:lvasgn, :in_use,
                s(:send,
                  s(:const, nil, :UDPSocket), :new)),
              s(:send,
                s(:lvar, :in_use), :bind,
                s(:lvar, :host),
                s(:int, 0)),
              s(:lvasgn, :port,
                s(:send,
                  s(:send,
                    s(:lvar, :in_use), :addr), :[],
                  s(:int, 1))),
              s(:lvasgn, :s,
                s(:send,
                  s(:const, nil, :UDPSocket), :new)),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const, nil, :Errno), :EADDRINUSE)),
                  s(:args),
                  s(:send,
                    s(:lvar, :s), :bind,
                    s(:lvar, :host),
                    s(:lvar, :port)))),
              s(:send, nil, :assert_match,
                s(:dstr,
                  s(:str, "bind(2) for \""),
                  s(:begin,
                    s(:lvar, :host)),
                  s(:str, "\" port "),
                  s(:begin,
                    s(:lvar, :port))),
                s(:send,
                  s(:lvar, :e), :message))),
            s(:begin,
              s(:if,
                s(:lvar, :in_use),
                s(:send,
                  s(:lvar, :in_use), :close), nil),
              s(:if,
                s(:lvar, :s),
                s(:send,
                  s(:lvar, :s), :close), nil)))),
        s(:def, :test_send_too_long,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :u,
                s(:send,
                  s(:const, nil, :UDPSocket), :new)),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const, nil, :Errno), :EMSGSIZE)),
                  s(:args),
                  s(:send,
                    s(:lvar, :u), :send,
                    s(:send,
                      s(:str, "\u0000"), :*,
                      s(:int, 100000)),
                    s(:int, 0),
                    s(:str, "127.0.0.1"),
                    s(:int, 7)))),
              s(:send, nil, :assert_match,
                s(:str, "for \"127.0.0.1\" port 7"),
                s(:send,
                  s(:lvar, :e), :message))),
            s(:if,
              s(:lvar, :u),
              s(:send,
                s(:lvar, :u), :close), nil))),
        s(:def, :test_bind_no_memory_leak,
          s(:args),
          s(:send, nil, :assert_no_memory_leak,
            s(:array,
              s(:str, "-rsocket")),
            s(:dstr,
              s(:str, "      s = UDPSocket.new\n"),
              s(:str, "      s.close\n")),
            s(:str, "      100_000.times {begin s.bind(\"127.0.0.1\", 1) rescue IOError; end}\n"),
            s(:hash,
              s(:pair,
                s(:sym, :rss),
                s(:true))))),
        s(:def, :test_connect_no_memory_leak,
          s(:args),
          s(:send, nil, :assert_no_memory_leak,
            s(:array,
              s(:str, "-rsocket")),
            s(:dstr,
              s(:str, "      s = UDPSocket.new\n"),
              s(:str, "      s.close\n")),
            s(:str, "      100_000.times {begin s.connect(\"127.0.0.1\", 1) rescue IOError; end}\n"),
            s(:hash,
              s(:pair,
                s(:sym, :rss),
                s(:true))))),
        s(:def, :test_send_no_memory_leak,
          s(:args),
          s(:send, nil, :assert_no_memory_leak,
            s(:array,
              s(:str, "-rsocket")),
            s(:dstr,
              s(:str, "      s = UDPSocket.new\n"),
              s(:str, "      s.close\n")),
            s(:str, "      100_000.times {begin s.send(\"\u0000\"*100, 0, \"127.0.0.1\", 1) rescue IOError; end}\n"),
            s(:hash,
              s(:pair,
                s(:sym, :rss),
                s(:true))))))), nil))
