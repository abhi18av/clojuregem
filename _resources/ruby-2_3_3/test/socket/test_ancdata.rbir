s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "socket")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :Socket), :AncillaryData)),
    s(:class,
      s(:const, nil, :TestSocketAncData),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :test_int,
          s(:args),
          s(:begin,
            s(:lvasgn, :ancdata,
              s(:send,
                s(:const,
                  s(:const, nil, :Socket), :AncillaryData), :int,
                s(:int, 0),
                s(:int, 0),
                s(:int, 0),
                s(:int, 123))),
            s(:send, nil, :assert_equal,
              s(:int, 123),
              s(:send,
                s(:lvar, :ancdata), :int)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:array,
                  s(:int, 123)), :pack,
                s(:str, "i")),
              s(:send,
                s(:lvar, :ancdata), :data)))),
        s(:def, :test_ip_pktinfo,
          s(:args),
          s(:begin,
            s(:lvasgn, :addr,
              s(:send,
                s(:const, nil, :Addrinfo), :ip,
                s(:str, "127.0.0.1"))),
            s(:lvasgn, :ifindex,
              s(:int, 0)),
            s(:lvasgn, :spec_dst,
              s(:send,
                s(:const, nil, :Addrinfo), :ip,
                s(:str, "127.0.0.2"))),
            s(:kwbegin,
              s(:rescue,
                s(:lvasgn, :ancdata,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Socket), :AncillaryData), :ip_pktinfo,
                    s(:lvar, :addr),
                    s(:lvar, :ifindex),
                    s(:lvar, :spec_dst))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :NotImplementedError)), nil,
                  s(:return)), nil)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Socket), :AF_INET),
              s(:send,
                s(:lvar, :ancdata), :family)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Socket), :IPPROTO_IP),
              s(:send,
                s(:lvar, :ancdata), :level)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Socket), :IP_PKTINFO),
              s(:send,
                s(:lvar, :ancdata), :type)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :addr), :ip_address),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :ancdata), :ip_pktinfo), :[],
                  s(:int, 0)), :ip_address)),
            s(:send, nil, :assert_equal,
              s(:lvar, :ifindex),
              s(:send,
                s(:send,
                  s(:lvar, :ancdata), :ip_pktinfo), :[],
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :spec_dst), :ip_address),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :ancdata), :ip_pktinfo), :[],
                  s(:int, 2)), :ip_address)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :ancdata), :cmsg_is?,
                s(:sym, :IP),
                s(:sym, :PKTINFO))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :ancdata), :cmsg_is?,
                s(:str, "IP"),
                s(:str, "PKTINFO"))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :ancdata), :cmsg_is?,
                s(:const,
                  s(:const, nil, :Socket), :IPPROTO_IP),
                s(:const,
                  s(:const, nil, :Socket), :IP_PKTINFO))),
            s(:if,
              s(:defined?,
                s(:const,
                  s(:const, nil, :Socket), :IPV6_PKTINFO)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :ancdata), :cmsg_is?,
                    s(:sym, :IPV6),
                    s(:sym, :PKTINFO)), :!)), nil),
            s(:lvasgn, :ancdata2,
              s(:send,
                s(:const,
                  s(:const, nil, :Socket), :AncillaryData), :ip_pktinfo,
                s(:lvar, :addr),
                s(:lvar, :ifindex))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :addr), :ip_address),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :ancdata2), :ip_pktinfo), :[],
                  s(:int, 2)), :ip_address)))),
        s(:def, :test_ipv6_pktinfo,
          s(:args),
          s(:begin,
            s(:lvasgn, :addr,
              s(:send,
                s(:const, nil, :Addrinfo), :ip,
                s(:str, "::1"))),
            s(:lvasgn, :ifindex,
              s(:int, 0)),
            s(:kwbegin,
              s(:rescue,
                s(:lvasgn, :ancdata,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Socket), :AncillaryData), :ipv6_pktinfo,
                    s(:lvar, :addr),
                    s(:lvar, :ifindex))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :NotImplementedError)), nil,
                  s(:return)), nil)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Socket), :AF_INET6),
              s(:send,
                s(:lvar, :ancdata), :family)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Socket), :IPPROTO_IPV6),
              s(:send,
                s(:lvar, :ancdata), :level)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Socket), :IPV6_PKTINFO),
              s(:send,
                s(:lvar, :ancdata), :type)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :addr), :ip_address),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :ancdata), :ipv6_pktinfo), :[],
                  s(:int, 0)), :ip_address)),
            s(:send, nil, :assert_equal,
              s(:lvar, :ifindex),
              s(:send,
                s(:send,
                  s(:lvar, :ancdata), :ipv6_pktinfo), :[],
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :addr), :ip_address),
              s(:send,
                s(:send,
                  s(:lvar, :ancdata), :ipv6_pktinfo_addr), :ip_address)),
            s(:send, nil, :assert_equal,
              s(:lvar, :ifindex),
              s(:send,
                s(:lvar, :ancdata), :ipv6_pktinfo_ifindex)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :ancdata), :cmsg_is?,
                s(:sym, :IPV6),
                s(:sym, :PKTINFO))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :ancdata), :cmsg_is?,
                s(:str, "IPV6"),
                s(:str, "PKTINFO"))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :ancdata), :cmsg_is?,
                s(:const,
                  s(:const, nil, :Socket), :IPPROTO_IPV6),
                s(:const,
                  s(:const, nil, :Socket), :IPV6_PKTINFO))),
            s(:if,
              s(:defined?,
                s(:const,
                  s(:const, nil, :Socket), :IP_PKTINFO)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :ancdata), :cmsg_is?,
                    s(:sym, :IP),
                    s(:sym, :PKTINFO)), :!)), nil))),
        s(:if,
          s(:and,
            s(:defined?,
              s(:const,
                s(:const, nil, :Socket), :SCM_RIGHTS)),
            s(:defined?,
              s(:const,
                s(:const, nil, :Socket), :SCM_TIMESTAMP))),
          s(:def, :test_unix_rights,
            s(:args),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :TypeError)),
              s(:args),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Socket), :AncillaryData), :int,
                  s(:sym, :UNIX),
                  s(:sym, :SOL_SOCKET),
                  s(:sym, :TIMESTAMP),
                  s(:int, 1)), :unix_rights))), nil))), nil))
