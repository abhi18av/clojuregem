s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "ostruct")),
  s(:class,
    s(:const, nil, :TC_OpenStruct),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_initialize,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:hash,
              s(:pair,
                s(:sym, :name),
                s(:str, "John Smith")),
              s(:pair,
                s(:sym, :age),
                s(:int, 70)),
              s(:pair,
                s(:sym, :pension),
                s(:int, 300)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :h),
            s(:send,
              s(:send,
                s(:const, nil, :OpenStruct), :new,
                s(:lvar, :h)), :to_h)),
          s(:send, nil, :assert_equal,
            s(:lvar, :h),
            s(:send,
              s(:send,
                s(:const, nil, :OpenStruct), :new,
                s(:send,
                  s(:const, nil, :OpenStruct), :new,
                  s(:lvar, :h))), :to_h)),
          s(:send, nil, :assert_equal,
            s(:lvar, :h),
            s(:send,
              s(:send,
                s(:const, nil, :OpenStruct), :new,
                s(:send,
                  s(:send,
                    s(:const, nil, :Struct), :new,
                    s(:splat,
                      s(:send,
                        s(:lvar, :h), :keys))), :new,
                  s(:splat,
                    s(:send,
                      s(:lvar, :h), :values)))), :to_h)))),
      s(:def, :test_respond_to,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :OpenStruct), :new)),
          s(:send,
            s(:lvar, :o), :a=,
            s(:int, 1)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :o),
            s(:sym, :a)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :o),
            s(:sym, :a=)))),
      s(:def, :test_respond_to_with_lazy_getter,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :OpenStruct), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :a),
                  s(:int, 1))))),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :o),
            s(:sym, :a)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :o),
            s(:sym, :a=)))),
      s(:def, :test_respond_to_allocated,
        s(:args),
        s(:send, nil, :assert_not_respond_to,
          s(:send,
            s(:const, nil, :OpenStruct), :allocate),
          s(:sym, :a))),
      s(:def, :test_equality,
        s(:args),
        s(:begin,
          s(:lvasgn, :o1,
            s(:send,
              s(:const, nil, :OpenStruct), :new)),
          s(:lvasgn, :o2,
            s(:send,
              s(:const, nil, :OpenStruct), :new)),
          s(:send, nil, :assert_equal,
            s(:lvar, :o1),
            s(:lvar, :o2)),
          s(:send,
            s(:lvar, :o1), :a=,
            s(:str, "a")),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :o1),
            s(:lvar, :o2)),
          s(:send,
            s(:lvar, :o2), :a=,
            s(:str, "a")),
          s(:send, nil, :assert_equal,
            s(:lvar, :o1),
            s(:lvar, :o2)),
          s(:send,
            s(:lvar, :o1), :a=,
            s(:str, "b")),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :o1),
            s(:lvar, :o2)),
          s(:lvasgn, :o2,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send,
              s(:lvar, :o2), :instance_eval),
            s(:args),
            s(:ivasgn, :@table,
              s(:hash,
                s(:pair,
                  s(:sym, :a),
                  s(:str, "b"))))),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :o1),
            s(:lvar, :o2)))),
      s(:def, :test_inspect,
        s(:args),
        s(:begin,
          s(:lvasgn, :foo,
            s(:send,
              s(:const, nil, :OpenStruct), :new)),
          s(:send, nil, :assert_equal,
            s(:str, "#<OpenStruct>"),
            s(:send,
              s(:lvar, :foo), :inspect)),
          s(:send,
            s(:lvar, :foo), :bar=,
            s(:int, 1)),
          s(:send,
            s(:lvar, :foo), :baz=,
            s(:int, 2)),
          s(:send, nil, :assert_equal,
            s(:str, "#<OpenStruct bar=1, baz=2>"),
            s(:send,
              s(:lvar, :foo), :inspect)),
          s(:lvasgn, :foo,
            s(:send,
              s(:const, nil, :OpenStruct), :new)),
          s(:send,
            s(:lvar, :foo), :bar=,
            s(:send,
              s(:const, nil, :OpenStruct), :new)),
          s(:send, nil, :assert_equal,
            s(:str, "#<OpenStruct bar=#<OpenStruct>>"),
            s(:send,
              s(:lvar, :foo), :inspect)),
          s(:send,
            s(:send,
              s(:lvar, :foo), :bar), :foo=,
            s(:lvar, :foo)),
          s(:send, nil, :assert_equal,
            s(:str, "#<OpenStruct bar=#<OpenStruct foo=#<OpenStruct ...>>>"),
            s(:send,
              s(:lvar, :foo), :inspect)))),
      s(:def, :test_frozen,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :OpenStruct), :new)),
          s(:send,
            s(:lvar, :o), :a=,
            s(:str, "a")),
          s(:send,
            s(:lvar, :o), :freeze),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :b=,
              s(:str, "b"))),
          s(:send, nil, :assert_not_respond_to,
            s(:lvar, :o),
            s(:sym, :b)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :o), :a=,
              s(:str, "z"))),
          s(:send, nil, :assert_equal,
            s(:str, "a"),
            s(:send,
              s(:lvar, :o), :a)),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :OpenStruct), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :a),
                  s(:int, 42))))),
          s(:defs,
            s(:lvar, :o), :frozen?,
            s(:args),
            s(:nil)),
          s(:send,
            s(:lvar, :o), :freeze),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError),
              s(:str, "[ruby-core:22559]")),
            s(:args),
            s(:send,
              s(:lvar, :o), :a=,
              s(:int, 1764))))),
      s(:def, :test_delete_field,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug,
            s(:str, "[ruby-core:33010]")),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :OpenStruct), :new)),
          s(:send, nil, :assert_not_respond_to,
            s(:lvar, :o),
            s(:sym, :a)),
          s(:send, nil, :assert_not_respond_to,
            s(:lvar, :o),
            s(:sym, :a=)),
          s(:send,
            s(:lvar, :o), :a=,
            s(:str, "a")),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :o),
            s(:sym, :a)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :o),
            s(:sym, :a=)),
          s(:lvasgn, :a,
            s(:send,
              s(:lvar, :o), :delete_field,
              s(:sym, :a))),
          s(:send, nil, :assert_not_respond_to,
            s(:lvar, :o),
            s(:sym, :a),
            s(:lvar, :bug)),
          s(:send, nil, :assert_not_respond_to,
            s(:lvar, :o),
            s(:sym, :a=),
            s(:lvar, :bug)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a),
            s(:str, "a")),
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :s), :to_sym,
            s(:args),
            s(:sym, :foo)),
          s(:send,
            s(:lvar, :o), :[]=,
            s(:lvar, :s),
            s(:true)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :o),
            s(:sym, :foo)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :o),
            s(:sym, :foo=)),
          s(:send,
            s(:lvar, :o), :delete_field,
            s(:lvar, :s)),
          s(:send, nil, :assert_not_respond_to,
            s(:lvar, :o),
            s(:sym, :foo)),
          s(:send, nil, :assert_not_respond_to,
            s(:lvar, :o),
            s(:sym, :foo=)))),
      s(:def, :test_setter,
        s(:args),
        s(:begin,
          s(:lvasgn, :os,
            s(:send,
              s(:const, nil, :OpenStruct), :new)),
          s(:send,
            s(:lvar, :os), :[]=,
            s(:sym, :foo),
            s(:sym, :bar)),
          s(:send, nil, :assert_equal,
            s(:sym, :bar),
            s(:send,
              s(:lvar, :os), :foo)),
          s(:send,
            s(:lvar, :os), :[]=,
            s(:str, "foo"),
            s(:sym, :baz)),
          s(:send, nil, :assert_equal,
            s(:sym, :baz),
            s(:send,
              s(:lvar, :os), :foo)))),
      s(:def, :test_getter,
        s(:args),
        s(:begin,
          s(:lvasgn, :os,
            s(:send,
              s(:const, nil, :OpenStruct), :new)),
          s(:send,
            s(:lvar, :os), :foo=,
            s(:sym, :bar)),
          s(:send, nil, :assert_equal,
            s(:sym, :bar),
            s(:send,
              s(:lvar, :os), :[],
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:sym, :bar),
            s(:send,
              s(:lvar, :os), :[],
              s(:str, "foo"))))),
      s(:def, :test_dig,
        s(:args),
        s(:begin,
          s(:lvasgn, :os1,
            s(:send,
              s(:const, nil, :OpenStruct), :new)),
          s(:lvasgn, :os2,
            s(:send,
              s(:const, nil, :OpenStruct), :new)),
          s(:send,
            s(:lvar, :os1), :child=,
            s(:lvar, :os2)),
          s(:send,
            s(:lvar, :os2), :foo=,
            s(:sym, :bar)),
          s(:send,
            s(:lvar, :os2), :child=,
            s(:array,
              s(:int, 42))),
          s(:send, nil, :assert_equal,
            s(:sym, :bar),
            s(:send,
              s(:lvar, :os1), :dig,
              s(:str, "child"),
              s(:sym, :foo))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :os1), :dig,
              s(:str, "parent"),
              s(:sym, :foo))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:lvar, :os1), :dig,
              s(:str, "child"),
              s(:int, 0))))),
      s(:def, :test_to_h,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:hash,
              s(:pair,
                s(:sym, :name),
                s(:str, "John Smith")),
              s(:pair,
                s(:sym, :age),
                s(:int, 70)),
              s(:pair,
                s(:sym, :pension),
                s(:int, 300)))),
          s(:lvasgn, :os,
            s(:send,
              s(:const, nil, :OpenStruct), :new,
              s(:lvar, :h))),
          s(:lvasgn, :to_h,
            s(:send,
              s(:lvar, :os), :to_h)),
          s(:send, nil, :assert_equal,
            s(:lvar, :h),
            s(:lvar, :to_h)),
          s(:send,
            s(:lvar, :to_h), :[]=,
            s(:sym, :age),
            s(:int, 71)),
          s(:send, nil, :assert_equal,
            s(:int, 70),
            s(:send,
              s(:lvar, :os), :age)),
          s(:send, nil, :assert_equal,
            s(:int, 70),
            s(:send,
              s(:lvar, :h), :[],
              s(:sym, :age))),
          s(:send, nil, :assert_equal,
            s(:lvar, :h),
            s(:send,
              s(:send,
                s(:const, nil, :OpenStruct), :new,
                s(:hash,
                  s(:pair,
                    s(:str, "name"),
                    s(:str, "John Smith")),
                  s(:pair,
                    s(:str, "age"),
                    s(:int, 70)),
                  s(:pair,
                    s(:sym, :pension),
                    s(:int, 300)))), :to_h)))),
      s(:def, :test_each_pair,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:hash,
              s(:pair,
                s(:sym, :name),
                s(:str, "John Smith")),
              s(:pair,
                s(:sym, :age),
                s(:int, 70)),
              s(:pair,
                s(:sym, :pension),
                s(:int, 300)))),
          s(:lvasgn, :os,
            s(:send,
              s(:const, nil, :OpenStruct), :new,
              s(:lvar, :h))),
          s(:send, nil, :assert_equal,
            s(:str, "#<Enumerator: #<OpenStruct name=\"John Smith\", age=70, pension=300>:each_pair>"),
            s(:send,
              s(:send,
                s(:lvar, :os), :each_pair), :inspect)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :name),
                s(:str, "John Smith")),
              s(:array,
                s(:sym, :age),
                s(:int, 70)),
              s(:array,
                s(:sym, :pension),
                s(:int, 300))),
            s(:send,
              s(:send,
                s(:lvar, :os), :each_pair), :to_a)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:send,
                s(:lvar, :os), :each_pair), :size)))),
      s(:def, :test_eql_and_hash,
        s(:args),
        s(:begin,
          s(:lvasgn, :os1,
            s(:send,
              s(:const, nil, :OpenStruct), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :age),
                  s(:int, 70))))),
          s(:lvasgn, :os2,
            s(:send,
              s(:const, nil, :OpenStruct), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :age),
                  s(:float, 70.0))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :os1),
            s(:lvar, :os2)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :os1), :eql?,
              s(:lvar, :os2))),
          s(:send, nil, :assert_not_equal,
            s(:send,
              s(:lvar, :os1), :hash),
            s(:send,
              s(:lvar, :os2), :hash)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :os1), :eql?,
              s(:send,
                s(:lvar, :os1), :dup))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :os1), :hash),
            s(:send,
              s(:send,
                s(:lvar, :os1), :dup), :hash)))),
      s(:def, :test_method_missing,
        s(:args),
        s(:begin,
          s(:lvasgn, :os,
            s(:send,
              s(:const, nil, :OpenStruct), :new)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :NoMethodError)),
              s(:args),
              s(:send,
                s(:lvar, :os), :foo,
                s(:true)))),
          s(:send, nil, :assert_equal,
            s(:sym, :foo),
            s(:send,
              s(:lvar, :e), :name)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:true)),
            s(:send,
              s(:lvar, :e), :args)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:begin,
                s(:send, nil, :__callee__)),
              s(:regopt)),
            s(:send,
              s(:send,
                s(:lvar, :e), :backtrace), :[],
              s(:int, 0))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:lvar, :os), :send,
                s(:sym, :foo=),
                s(:true),
                s(:true)))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:begin,
                s(:send, nil, :__callee__)),
              s(:regopt)),
            s(:send,
              s(:send,
                s(:lvar, :e), :backtrace), :[],
              s(:int, 0))))),
      s(:def, :test_accessor_defines_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :os,
            s(:send,
              s(:const, nil, :OpenStruct), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :foo),
                  s(:int, 42))))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :os), :respond_to?,
              s(:sym, :foo))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :os), :singleton_methods)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:lvar, :os), :foo)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :foo),
              s(:sym, :foo=)),
            s(:send,
              s(:send,
                s(:lvar, :os), :singleton_methods), :sort)))),
      s(:def, :test_does_not_redefine,
        s(:args),
        s(:begin,
          s(:lvasgn, :os,
            s(:send,
              s(:const, nil, :OpenStruct), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :foo),
                  s(:int, 42))))),
          s(:defs,
            s(:lvar, :os), :foo,
            s(:args),
            s(:int, 43)),
          s(:send,
            s(:lvar, :os), :foo=,
            s(:int, 44)),
          s(:send, nil, :assert_equal,
            s(:int, 43),
            s(:send,
              s(:lvar, :os), :foo)))))))
