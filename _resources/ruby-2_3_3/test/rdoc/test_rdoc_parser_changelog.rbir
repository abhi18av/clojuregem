s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocParserChangeLog),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@tempfile,
            s(:send,
              s(:const, nil, :Tempfile), :new,
              s(:str, "ChangeLog"))),
          s(:ivasgn, :@top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:send,
                s(:ivar, :@tempfile), :path))),
          s(:ivasgn, :@options,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Options), :new)),
          s(:ivasgn, :@stats,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Stats), :new,
              s(:ivar, :@store),
              s(:int, 0))))),
      s(:def, :teardown,
        s(:args),
        s(:send,
          s(:ivar, :@tempfile), :close!)),
      s(:def, :test_class_can_parse,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Parser), :ChangeLog)),
          s(:block,
            s(:send, nil, :temp_dir),
            s(:args),
            s(:begin,
              s(:send,
                s(:const, nil, :FileUtils), :touch,
                s(:str, "ChangeLog")),
              s(:send, nil, :assert_equal,
                s(:lvar, :parser),
                s(:send,
                  s(:lvar, :parser), :can_parse,
                  s(:str, "ChangeLog"))),
              s(:send, nil, :assert_equal,
                s(:lvar, :parser),
                s(:send,
                  s(:lvar, :parser), :can_parse,
                  s(:send,
                    s(:ivar, :@tempfile), :path))),
              s(:send,
                s(:const, nil, :FileUtils), :touch,
                s(:str, "ChangeLog.rb")),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Parser), :Ruby),
                s(:send,
                  s(:lvar, :parser), :can_parse,
                  s(:str, "ChangeLog.rb"))))))),
      s(:def, :test_continue_entry_body,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser)),
          s(:lvasgn, :entry_body,
            s(:array,
              s(:str, "a"))),
          s(:send,
            s(:lvar, :parser), :continue_entry_body,
            s(:lvar, :entry_body),
            s(:str, "b")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a b")),
            s(:lvar, :entry_body)))),
      s(:def, :test_continue_entry_body_empty,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser)),
          s(:lvasgn, :entry_body,
            s(:array)),
          s(:send,
            s(:lvar, :parser), :continue_entry_body,
            s(:lvar, :entry_body),
            s(:str, "")),
          s(:send, nil, :assert_empty,
            s(:lvar, :entry_body)))),
      s(:def, :test_continue_entry_body_function,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser)),
          s(:lvasgn, :entry_body,
            s(:array,
              s(:str, "file: (func1)"))),
          s(:send,
            s(:lvar, :parser), :continue_entry_body,
            s(:lvar, :entry_body),
            s(:str, "(func2): blah")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "file: (func1, func2): blah")),
            s(:lvar, :entry_body)))),
      s(:def, :test_create_document,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser)),
          s(:lvasgn, :groups,
            s(:hash,
              s(:pair,
                s(:str, "2012-12-04"),
                s(:array,
                  s(:array,
                    s(:str, "Tue Dec  4 08:33:46 2012  Eric Hodel  <drbrain@segment7.net>"),
                    s(:array,
                      s(:str, "a:one"),
                      s(:str, "b:two"))),
                  s(:array,
                    s(:str, "Tue Dec  4 08:32:10 2012  Eric Hodel  <drbrain@segment7.net>"),
                    s(:array,
                      s(:str, "c:three"),
                      s(:str, "d:four"))))),
              s(:pair,
                s(:str, "2012-12-03"),
                s(:array,
                  s(:array,
                    s(:str, "Mon Dec  3 20:28:02 2012  Koichi Sasada  <ko1@atdot.net>"),
                    s(:array,
                      s(:str, "e:five"),
                      s(:str, "f:six"))))))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :head,
                s(:int, 1),
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:send,
                    s(:ivar, :@tempfile), :path))),
              s(:send, nil, :blank_line),
              s(:send, nil, :head,
                s(:int, 2),
                s(:str, "2012-12-04")),
              s(:send, nil, :blank_line),
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Tue Dec  4 08:33:46 2012  Eric Hodel  <drbrain@segment7.net>")),
              s(:send, nil, :blank_line),
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:str, "a"),
                  s(:send, nil, :para,
                    s(:str, "one"))),
                s(:send, nil, :item,
                  s(:str, "b"),
                  s(:send, nil, :para,
                    s(:str, "two")))),
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Tue Dec  4 08:32:10 2012  Eric Hodel  <drbrain@segment7.net>")),
              s(:send, nil, :blank_line),
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:str, "c"),
                  s(:send, nil, :para,
                    s(:str, "three"))),
                s(:send, nil, :item,
                  s(:str, "d"),
                  s(:send, nil, :para,
                    s(:str, "four")))),
              s(:send, nil, :head,
                s(:int, 2),
                s(:str, "2012-12-03")),
              s(:send, nil, :blank_line),
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Mon Dec  3 20:28:02 2012  Koichi Sasada  <ko1@atdot.net>")),
              s(:send, nil, :blank_line),
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:str, "e"),
                  s(:send, nil, :para,
                    s(:str, "five"))),
                s(:send, nil, :item,
                  s(:str, "f"),
                  s(:send, nil, :para,
                    s(:str, "six")))))),
          s(:send,
            s(:lvar, :expected), :file=,
            s(:ivar, :@top_level)),
          s(:lvasgn, :document,
            s(:send,
              s(:lvar, :parser), :create_document,
              s(:lvar, :groups))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :document)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :document), :omit_headings_below)),
          s(:lvasgn, :headings,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :document), :parts), :select),
              s(:args,
                s(:arg, :part)),
              s(:and,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :Heading), :===,
                  s(:lvar, :part)),
                s(:send,
                  s(:send,
                    s(:lvar, :part), :level), :==,
                  s(:int, 2))))),
          s(:send, nil, :refute,
            s(:block,
              s(:send,
                s(:lvar, :headings), :all?),
              s(:args,
                s(:arg, :heading)),
              s(:send,
                s(:send,
                  s(:lvar, :heading), :text), :frozen?))))),
      s(:def, :test_create_entries,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser)),
          s(:lvasgn, :entries,
            s(:array,
              s(:array,
                s(:str, "Tue Dec  1 02:03:04 2012  Eric Hodel  <drbrain@segment7.net>"),
                s(:array,
                  s(:str, "a:one"),
                  s(:str, "b:two"))),
              s(:array,
                s(:str, "Tue Dec  5 06:07:08 2012  Eric Hodel  <drbrain@segment7.net>"),
                s(:array,
                  s(:str, "c:three"),
                  s(:str, "d:four"))))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Tue Dec  1 02:03:04 2012  Eric Hodel  <drbrain@segment7.net>")),
              s(:send, nil, :blank_line),
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:str, "a"),
                  s(:send, nil, :para,
                    s(:str, "one"))),
                s(:send, nil, :item,
                  s(:str, "b"),
                  s(:send, nil, :para,
                    s(:str, "two")))),
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Tue Dec  5 06:07:08 2012  Eric Hodel  <drbrain@segment7.net>")),
              s(:send, nil, :blank_line),
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:str, "c"),
                  s(:send, nil, :para,
                    s(:str, "three"))),
                s(:send, nil, :item,
                  s(:str, "d"),
                  s(:send, nil, :para,
                    s(:str, "four")))))),
          s(:lvasgn, :entries,
            s(:send,
              s(:lvar, :parser), :create_entries,
              s(:lvar, :entries))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :entries)))),
      s(:def, :test_create_entries_colons,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser)),
          s(:lvasgn, :entries,
            s(:array,
              s(:array,
                s(:str, "Wed Dec  5 12:17:11 2012  Naohisa Goto  <ngotogenome@gmail.com>"),
                s(:array,
                  s(:str, "func.rb (DL::Function#bind): log stuff [ruby-core:50562]"))))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Wed Dec  5 12:17:11 2012  Naohisa Goto  <ngotogenome@gmail.com>")),
              s(:send, nil, :blank_line),
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:str, "func.rb (DL::Function#bind)"),
                  s(:send, nil, :para,
                    s(:str, "log stuff [ruby-core:50562]")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :parser), :create_entries,
              s(:lvar, :entries))))),
      s(:def, :test_create_items,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser)),
          s(:lvasgn, :items,
            s(:array,
              s(:str, "README.EXT:  Converted to RDoc format"),
              s(:str, "README.EXT.ja:  ditto"))),
          s(:lvasgn, :expected,
            s(:send, nil, :list,
              s(:sym, :NOTE),
              s(:send, nil, :item,
                s(:str, "README.EXT"),
                s(:send, nil, :para,
                  s(:str, "Converted to RDoc format"))),
              s(:send, nil, :item,
                s(:str, "README.EXT.ja"),
                s(:send, nil, :para,
                  s(:str, "ditto"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :parser), :create_items,
              s(:lvar, :items))))),
      s(:def, :test_group_entries,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser)),
          s(:lvasgn, :entries,
            s(:array,
              s(:array,
                s(:str, "Tue Dec  4 08:33:46 2012  Eric Hodel  <drbrain@segment7.net>"),
                s(:array,
                  s(:str, "one"),
                  s(:str, "two"))),
              s(:array,
                s(:str, "Tue Dec  4 08:32:10 2012  Eric Hodel  <drbrain@segment7.net>"),
                s(:array,
                  s(:str, "three"),
                  s(:str, "four"))),
              s(:array,
                s(:str, "Mon Dec  3 20:28:02 2012  Koichi Sasada  <ko1@atdot.net>"),
                s(:array,
                  s(:str, "five"),
                  s(:str, "six"))),
              s(:array,
                s(:str, "2008-01-30  H.J. Lu  <hongjiu.lu@intel.com>"),
                s(:array,
                  s(:str, "seven"),
                  s(:str, "eight"))))),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:str, "2012-12-04"),
                s(:array,
                  s(:array,
                    s(:str, "Tue Dec  4 08:33:46 2012  Eric Hodel  <drbrain@segment7.net>"),
                    s(:array,
                      s(:str, "one"),
                      s(:str, "two"))),
                  s(:array,
                    s(:str, "Tue Dec  4 08:32:10 2012  Eric Hodel  <drbrain@segment7.net>"),
                    s(:array,
                      s(:str, "three"),
                      s(:str, "four"))))),
              s(:pair,
                s(:str, "2012-12-03"),
                s(:array,
                  s(:array,
                    s(:str, "Mon Dec  3 20:28:02 2012  Koichi Sasada  <ko1@atdot.net>"),
                    s(:array,
                      s(:str, "five"),
                      s(:str, "six"))))),
              s(:pair,
                s(:str, "2008-01-30"),
                s(:array,
                  s(:array,
                    s(:str, "2008-01-30  H.J. Lu  <hongjiu.lu@intel.com>"),
                    s(:array,
                      s(:str, "seven"),
                      s(:str, "eight"))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :parser), :group_entries,
              s(:lvar, :entries))))),
      s(:def, :test_parse_entries,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser,
              s(:dstr,
                s(:str, "Tue Dec  4 08:33:46 2012  Eric Hodel  <drbrain@segment7.net>\n"),
                s(:str, "\n"),
                s(:str, "\t* README.EXT:  Converted to RDoc format\n"),
                s(:str, "\t* README.EXT.ja:  ditto\n"),
                s(:str, "\n"),
                s(:str, "Mon Dec  3 20:28:02 2012  Koichi Sasada  <ko1@atdot.net>\n"),
                s(:str, "\n"),
                s(:str, "\t* compile.c (iseq_specialized_instruction):\n"),
                s(:str, "\t  change condition of using `opt_send_simple'.\n"),
                s(:str, "\t  More method invocations can be simple.\n"),
                s(:str, "\n"),
                s(:str, "Other note that will be ignored\n"),
                s(:str, "\n")))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:str, "Tue Dec  4 08:33:46 2012  Eric Hodel  <drbrain@segment7.net>"),
                s(:array,
                  s(:str, "README.EXT:  Converted to RDoc format"),
                  s(:str, "README.EXT.ja:  ditto"))),
              s(:array,
                s(:str, "Mon Dec  3 20:28:02 2012  Koichi Sasada  <ko1@atdot.net>"),
                s(:array,
                  s(:send,
                    s(:str, "compile.c (iseq_specialized_instruction): change condition of "), :+,
                    s(:str, "using `opt_send_simple'. More method invocations can be simple.")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :parser), :parse_entries)))),
      s(:def, :test_parse_entries_bad_time,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser,
              s(:dstr,
                s(:str, "2008-01-30  H.J. Lu  <hongjiu.lu@intel.com>\n"),
                s(:str, "\n"),
                s(:str, "        PR libffi/34612\n"),
                s(:str, "        * src/x86/sysv.S (ffi_closure_SYSV): Pop 4 byte from stack when\n"),
                s(:str, "        returning struct.\n"),
                s(:str, "\n")))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:str, "2008-01-30  H.J. Lu  <hongjiu.lu@intel.com>"),
                s(:array,
                  s(:send,
                    s(:str, "src/x86/sysv.S (ffi_closure_SYSV): Pop 4 byte from stack when "), :+,
                    s(:str, "returning struct.")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :parser), :parse_entries)))),
      s(:def, :test_parse_entries_gnu,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser,
              s(:dstr,
                s(:str, "1998-08-17  Richard Stallman  <rms@gnu.org>\n"),
                s(:str, "\n"),
                s(:str, "* register.el (insert-register): Return nil.\n"),
                s(:str, "(jump-to-register): Likewise.\n"),
                s(:str, "\n"),
                s(:str, "* sort.el (sort-subr): Return nil.\n"),
                s(:str, "\n"),
                s(:str, "* keyboard.c (menu_bar_items, tool_bar_items)\n"),
                s(:str, "(Fexecute_extended_command): Deal with 'keymap' property.\n")))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:str, "1998-08-17  Richard Stallman  <rms@gnu.org>"),
                s(:array,
                  s(:str, "register.el (insert-register): Return nil."),
                  s(:str, "(jump-to-register): Likewise."),
                  s(:str, "sort.el (sort-subr): Return nil."),
                  s(:send,
                    s(:str, "keyboard.c (menu_bar_items, tool_bar_items, "), :+,
                    s(:str, "Fexecute_extended_command): Deal with 'keymap' property.")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :parser), :parse_entries)))),
      s(:def, :test_scan,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser,
              s(:dstr,
                s(:str, "Tue Dec  4 08:32:10 2012  Eric Hodel  <drbrain@segment7.net>\n"),
                s(:str, "\n"),
                s(:str, "\t* lib/rdoc/ri/driver.rb:  Fixed ri page display for files with\n"),
                s(:str, "\t  extensions.\n"),
                s(:str, "\t* test/rdoc/test_rdoc_ri_driver.rb:  Test for above\n"),
                s(:str, "\n"),
                s(:str, "Mon Dec  3 20:37:22 2012  Koichi Sasada  <ko1@atdot.net>\n"),
                s(:str, "\n"),
                s(:str, "\t* vm_exec.c: check VM_COLLECT_USAGE_DETAILS.\n"),
                s(:str, "\n")))),
          s(:send,
            s(:lvar, :parser), :scan),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :head,
                s(:int, 1),
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:send,
                    s(:ivar, :@tempfile), :path))),
              s(:send, nil, :blank_line),
              s(:send, nil, :head,
                s(:int, 2),
                s(:str, "2012-12-04")),
              s(:send, nil, :blank_line),
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Tue Dec  4 08:32:10 2012  Eric Hodel  <drbrain@segment7.net>")),
              s(:send, nil, :blank_line),
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:str, "lib/rdoc/ri/driver.rb"),
                  s(:send, nil, :para,
                    s(:send,
                      s(:str, "Fixed ri page display for "), :+,
                      s(:str, "files with extensions.")))),
                s(:send, nil, :item,
                  s(:str, "test/rdoc/test_rdoc_ri_driver.rb"),
                  s(:send, nil, :para,
                    s(:str, "Test for above")))),
              s(:send, nil, :head,
                s(:int, 2),
                s(:str, "2012-12-03")),
              s(:send, nil, :blank_line),
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Mon Dec  3 20:37:22 2012  Koichi Sasada  <ko1@atdot.net>")),
              s(:send, nil, :blank_line),
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:str, "vm_exec.c"),
                  s(:send, nil, :para,
                    s(:str, "check VM_COLLECT_USAGE_DETAILS.")))))),
          s(:send,
            s(:lvar, :expected), :file=,
            s(:ivar, :@top_level)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@top_level), :comment)))),
      s(:def, :util_parser,
        s(:args,
          s(:optarg, :content,
            s(:str, ""))),
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :RDoc), :Parser), :ChangeLog), :new,
          s(:ivar, :@top_level),
          s(:send,
            s(:ivar, :@tempfile), :path),
          s(:lvar, :content),
          s(:ivar, :@options),
          s(:ivar, :@stats))))))
