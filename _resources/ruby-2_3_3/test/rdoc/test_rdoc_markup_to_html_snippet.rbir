s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocMarkupToHtmlSnippet),
    s(:const,
      s(:const,
        s(:const, nil, :RDoc), :Markup), :FormatterTestCase),
    s(:begin,
      s(:send, nil, :add_visitor_tests),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@to,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :ToHtmlSnippet), :new,
              s(:ivar, :@options),
              s(:int, 100),
              s(:int, 100))),
          s(:ivasgn, :@ellipsis,
            s(:send,
              s(:ivar, :@to), :to_html,
              s(:str, "..."))))),
      s(:def, :accept_blank_line,
        s(:args),
        s(:send, nil, :assert_empty,
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_block_quote,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "\n<blockquote><p>quote\n</blockquote>\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_document,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>hello\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_heading,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>Hello\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_heading_1,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>Hello\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_heading_2,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>Hello\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_heading_3,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>Hello\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_heading_4,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>Hello\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_heading_b,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p><strong>Hello</strong>\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_heading_suppressed_crossref,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>Hello\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_end_bullet,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, "\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_end_label,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, "\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_end_lalpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, "\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_end_number,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, "\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_end_note,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, "\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_end_ualpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, "\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_item_end_bullet,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_item_end_label,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_item_end_lalpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_item_end_note,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_item_end_number,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_item_end_ualpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_item_start_bullet,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_item_start_label,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>cat &mdash; "),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_item_start_lalpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_item_start_note,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>cat &mdash; "),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_item_start_note_2,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "<p><code>teletype</code> &mdash; teletype description\n"),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 29),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_item_start_note_multi_description,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "<p>label &mdash; description one\n"),
              s(:str, "<p>description two\n"),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 37),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_item_start_note_multi_label,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "<p>one, two &mdash; two headers\n"),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 18),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_item_start_number,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_item_start_ualpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_start_bullet,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :BULLET)),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_start_label,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :LABEL)),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_start_lalpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :LALPHA)),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_start_note,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :NOTE)),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_start_number,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :NUMBER)),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_list_start_ualpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :UALPHA)),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_paragraph,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>hi\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_paragraph_b,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>reg <strong>bold words</strong> reg\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 18),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_paragraph_br,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>one<br>two\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_paragraph_break,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>hello<br>\nworld\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 11),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_paragraph_i,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>reg <em>italic words</em> reg\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 20),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_paragraph_plus,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>reg <code>teletype</code> reg\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 16),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_paragraph_star,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>reg <strong>bold</strong> reg\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 12),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_paragraph_underscore,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p>reg <em>italic</em> reg\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 14),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_raw,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_rule,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :res)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :accept_verbatim,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hi</span>\n  <span class=\"ruby-identifier\">world</span>\n</pre>\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 10),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :end_accepting,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "hi"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :start_accepting,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :res)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :list_nested,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "<p>l1\n"),
              s(:str, "<p>l1.1\n"),
              s(:str, "\n"),
              s(:str, "<p>l2\n"),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 8),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :list_verbatim,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "<p>list stuff\n"),
              s(:str, "\n"),
              s(:str, "<pre>* list\n"),
              s(:str, "  with\n"),
              s(:str, "\n"),
              s(:str, "  second\n"),
              s(:str, "\n"),
              s(:str, "  1. indented\n"),
              s(:str, "  2. numbered\n"),
              s(:str, "\n"),
              s(:str, "  third\n"),
              s(:str, "\n"),
              s(:str, "* second</pre>\n"),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@to), :end_accepting)),
          s(:send, nil, :assert_equal,
            s(:int, 81),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :test_accept_heading_7,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@to), :start_accepting),
          s(:send,
            s(:ivar, :@to), :accept_heading,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Heading), :new,
              s(:int, 7),
              s(:str, "Hello"))),
          s(:send, nil, :assert_equal,
            s(:str, "<p>Hello\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :test_accept_heading_aref_class,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@to), :code_object=,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass), :new,
              s(:str, "Foo"))),
          s(:send,
            s(:ivar, :@to), :start_accepting),
          s(:send,
            s(:ivar, :@to), :accept_heading,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Heading), :new,
              s(:int, 1),
              s(:str, "Hello"))),
          s(:send, nil, :assert_equal,
            s(:str, "<p>Hello\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :test_accept_heading_aref_method,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@to), :code_object=,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "foo"))),
          s(:send,
            s(:ivar, :@to), :start_accepting),
          s(:send,
            s(:ivar, :@to), :accept_heading,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Heading), :new,
              s(:int, 1),
              s(:str, "Hello"))),
          s(:send, nil, :assert_equal,
            s(:str, "<p>Hello\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :test_accept_verbatim_ruby,
        s(:args),
        s(:begin,
          s(:lvasgn, :options,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Options), :new)),
          s(:lvasgn, :rdoc,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RDoc), :new)),
          s(:send,
            s(:lvar, :rdoc), :options=,
            s(:lvar, :options)),
          s(:send,
            s(:const,
              s(:const, nil, :RDoc), :RDoc), :current=,
            s(:lvar, :rdoc)),
          s(:lvasgn, :verb,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Verbatim), :new,
              s(:str, "class C\n"),
              s(:str, "end\n"))),
          s(:send,
            s(:ivar, :@to), :start_accepting),
          s(:send,
            s(:ivar, :@to), :accept_verbatim,
            s(:lvar, :verb)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">C</span>\n"),
              s(:str, "<span class=\"ruby-keyword\">end</span>\n"),
              s(:str, "</pre>\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 11),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :test_accept_verbatim_ruby_error,
        s(:args),
        s(:begin,
          s(:lvasgn, :options,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Options), :new)),
          s(:lvasgn, :rdoc,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RDoc), :new)),
          s(:send,
            s(:lvar, :rdoc), :options=,
            s(:lvar, :options)),
          s(:send,
            s(:const,
              s(:const, nil, :RDoc), :RDoc), :current=,
            s(:lvar, :rdoc)),
          s(:lvasgn, :verb,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Verbatim), :new,
              s(:str, "a % 09 # => blah\n"))),
          s(:send,
            s(:ivar, :@to), :start_accepting),
          s(:send,
            s(:ivar, :@to), :accept_verbatim,
            s(:lvar, :verb)),
          s(:lvasgn, :inner,
            s(:send,
              s(:const, nil, :CGI), :escapeHTML,
              s(:str, "a % 09 # => blah"))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "<pre>"),
              s(:begin,
                s(:lvar, :inner)),
              s(:str, "</pre>\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 16),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :test_add_paragraph,
        s(:args),
        s(:begin,
          s(:ivasgn, :@to,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :ToHtmlSnippet), :new,
              s(:ivar, :@options),
              s(:int, 0),
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_throws,
              s(:sym, :done)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@to), :add_paragraph),
              s(:send,
                s(:ivar, :@to), :add_paragraph),
              s(:send,
                s(:ivar, :@to), :add_paragraph))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:ivar, :@to), :paragraphs)))),
      s(:def, :test_convert_limit,
        s(:args),
        s(:begin,
          s(:lvasgn, :rdoc,
            s(:dstr,
              s(:str, "= Hello\n"),
              s(:str, "\n"),
              s(:str, "This is some text, it *will* be cut off after 100 characters and an ellipsis\n"),
              s(:str, "must follow\n"),
              s(:str, "\n"),
              s(:str, "So there you have it\n"))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "<p>Hello\n"),
              s(:str, "<p>This is some text, it <strong>will</strong> be cut off after 100 characters\n"),
              s(:str, "and an ellipsis must follow\n"),
              s(:str, "<p>So there you "),
              s(:begin,
                s(:ivar, :@ellipsis)),
              s(:str, "\n"))),
          s(:lvasgn, :actual,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:lvar, :rdoc))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :actual)),
          s(:send, nil, :assert_equal,
            s(:int, 111),
            s(:send,
              s(:ivar, :@to), :characters),
            s(:str, "snippet character length")))),
      s(:def, :test_convert_limit_2,
        s(:args),
        s(:begin,
          s(:lvasgn, :rdoc,
            s(:dstr,
              s(:str, "Outputs formatted RI data for the class or method +name+.\n"),
              s(:str, "\n"),
              s(:str, "Returns true if +name+ was found, false if it was not an alternative could\n"),
              s(:str, "be guessed, raises an error if +name+ couldn't be guessed.\n"))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "<p>Outputs formatted RI data for the class or method <code>name</code>.\n"),
              s(:str, "<p>Returns true if <code>name</code> was found, false if it was "),
              s(:begin,
                s(:ivar, :@ellipsis)),
              s(:str, "\n"))),
          s(:lvasgn, :actual,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:lvar, :rdoc))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :actual)),
          s(:send, nil, :assert_equal,
            s(:int, 159),
            s(:send,
              s(:ivar, :@to), :characters),
            s(:str, "snippet character length")))),
      s(:def, :test_convert_limit_paragraphs,
        s(:args),
        s(:begin,
          s(:ivasgn, :@to,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :ToHtmlSnippet), :new,
              s(:ivar, :@options),
              s(:int, 100),
              s(:int, 3))),
          s(:lvasgn, :rdoc,
            s(:dstr,
              s(:str, "= RDoc - Ruby Documentation System\n"),
              s(:str, "\n"),
              s(:str, "* {RDoc Project Page}[https://github.com/rdoc/rdoc/]\n"),
              s(:str, "* {RDoc Documentation}[http://docs.seattlerb.org/rdoc]\n"),
              s(:str, "* {RDoc Bug Tracker}[https://github.com/rdoc/rdoc/issues]\n"),
              s(:str, "\n"),
              s(:str, "== DESCRIPTION:\n"),
              s(:str, "\n"),
              s(:str, "RDoc produces HTML and command-line documentation for Ruby projects.  RDoc\n"),
              s(:str, "includes the +rdoc+ and +ri+ tools for generating and displaying online\n"),
              s(:str, "documentation.\n"),
              s(:str, "\n"),
              s(:str, "See RDoc for a description of RDoc's markup and basic use.\n"))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "<p>RDoc - Ruby Documentation System\n"),
              s(:str, "<p>RDoc Project Page\n"),
              s(:str, "<p>RDoc Documentation\n"))),
          s(:lvasgn, :actual,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:lvar, :rdoc))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :actual)),
          s(:send, nil, :assert_equal,
            s(:int, 67),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :test_convert_limit_in_tag,
        s(:args),
        s(:begin,
          s(:ivasgn, :@to,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :ToHtmlSnippet), :new,
              s(:ivar, :@options),
              s(:int, 4))),
          s(:lvasgn, :rdoc,
            s(:str, "* ab *c* d\n")),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "<p>ab <strong>c</strong> "),
              s(:begin,
                s(:ivar, :@ellipsis)),
              s(:str, "\n\n"))),
          s(:lvasgn, :actual,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:lvar, :rdoc))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:ivar, :@to), :characters)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :actual)))),
      s(:def, :test_convert_limit_verbatim,
        s(:args),
        s(:begin,
          s(:lvasgn, :rdoc,
            s(:dstr,
              s(:str, "= Hello There\n"),
              s(:str, "\n"),
              s(:str, "This is some text, it *will* be cut off after 100 characters\n"),
              s(:str, "\n"),
              s(:str, "  This one is cut off in this verbatim section\n"))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "<p>Hello There\n"),
              s(:str, "<p>This is some text, it <strong>will</strong> be cut off after 100 characters\n"),
              s(:str, "\n"),
              s(:str, "<pre>This one is cut off in this verbatim ...</pre>\n"))),
          s(:lvasgn, :actual,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:lvar, :rdoc))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :actual)),
          s(:send, nil, :assert_equal,
            s(:int, 113),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :test_convert_limit_verbatim_2,
        s(:args),
        s(:begin,
          s(:lvasgn, :rdoc,
            s(:dstr,
              s(:str, "Extracts the class, selector and method name parts from +name+ like\n"),
              s(:str, "Foo::Bar#baz.\n"),
              s(:str, "\n"),
              s(:str, "NOTE: Given Foo::Bar, Bar is considered a class even though it may be a\n"),
              s(:str, "      method\n"))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "<p>Extracts the class, selector and method name parts from <code>name</code>\n"),
              s(:str, "like Foo::Bar#baz.\n"),
              s(:str, "<p>NOTE: Given Foo::Bar, "),
              s(:begin,
                s(:ivar, :@ellipsis)),
              s(:str, "\n"))),
          s(:lvasgn, :actual,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:lvar, :rdoc))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :actual)),
          s(:send, nil, :assert_equal,
            s(:int, 101),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :test_convert_limit_verbatim_multiline,
        s(:args),
        s(:begin,
          s(:lvasgn, :rdoc,
            s(:dstr,
              s(:str, "Look for directives in a normal comment block:\n"),
              s(:str, "\n"),
              s(:str, "  # :stopdoc:\n"),
              s(:str, "  # Don't display comment from this point forward\n"),
              s(:str, "\n"),
              s(:str, "This routine modifies its +comment+ parameter.\n"))),
          s(:lvasgn, :inner,
            s(:send,
              s(:const, nil, :CGI), :escapeHTML,
              s(:str, "# Don't display comment from this point forward"))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "<p>Look for directives in a normal comment block:\n"),
              s(:str, "\n"),
              s(:str, "<pre class=\"ruby\"><span class=\"ruby-comment\"># :stopdoc:</span>\n"),
              s(:str, "<span class=\"ruby-comment\">"),
              s(:begin,
                s(:lvar, :inner)),
              s(:str, "</span>\n"),
              s(:str, "</pre>\n"))),
          s(:lvasgn, :actual,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:lvar, :rdoc))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :actual)),
          s(:send, nil, :assert_equal,
            s(:int, 105),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :test_convert_limit_over,
        s(:args),
        s(:begin,
          s(:ivasgn, :@to,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :ToHtmlSnippet), :new,
              s(:ivar, :@options),
              s(:int, 4))),
          s(:lvasgn, :rdoc,
            s(:send,
              s(:str, "* text\n"), :*,
              s(:int, 2))),
          s(:lvasgn, :expected,
            s(:str, "<p>text\n")),
          s(:send,
            s(:lvar, :expected), :chomp!),
          s(:send,
            s(:lvar, :expected), :<<,
            s(:dstr,
              s(:str, " "),
              s(:begin,
                s(:ivar, :@ellipsis)),
              s(:str, "\n"))),
          s(:lvasgn, :actual,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:lvar, :rdoc))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:ivar, :@to), :characters)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :actual)))),
      s(:def, :test_convert_string,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "&lt;&gt;"),
          s(:send,
            s(:ivar, :@to), :convert_string,
            s(:str, "<>")))),
      s(:def, :test_convert_RDOCLINK_label_label,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "rdoc-label:label-One"))),
          s(:send, nil, :assert_equal,
            s(:str, "<p>One\n"),
            s(:lvar, :result)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :test_convert_RDOCLINK_label_foottext,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "rdoc-label:foottext-1"))),
          s(:send, nil, :assert_equal,
            s(:str, "<p>1\n"),
            s(:lvar, :result)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :test_convert_RDOCLINK_label_footmark,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "rdoc-label:footmark-1"))),
          s(:send, nil, :assert_equal,
            s(:str, "<p>1\n"),
            s(:lvar, :result)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :test_convert_RDOCLINK_ref,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "rdoc-ref:C"))),
          s(:send, nil, :assert_equal,
            s(:str, "<p>C\n"),
            s(:lvar, :result)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :test_convert_TIDYLINK_rdoc_label,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "{foo}[rdoc-label:foottext-1]"))),
          s(:send, nil, :assert_equal,
            s(:str, "<p>foo\n"),
            s(:lvar, :result)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :test_handle_special_HYPERLINK_link,
        s(:args),
        s(:begin,
          s(:lvasgn, :special,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Special), :new,
              s(:int, 0),
              s(:str, "link:README.txt"))),
          s(:lvasgn, :link,
            s(:send,
              s(:ivar, :@to), :handle_special_HYPERLINK,
              s(:lvar, :special))),
          s(:send, nil, :assert_equal,
            s(:str, "README.txt"),
            s(:lvar, :link)))),
      s(:def, :test_list_verbatim_2,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "* one\n    verb1\n    verb2\n* two\n")),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "<p>one\n"),
              s(:str, "\n"),
              s(:str, "<pre class=\"ruby\"><span class=\"ruby-identifier\">verb1</span>\n"),
              s(:str, "<span class=\"ruby-identifier\">verb2</span>\n"),
              s(:str, "</pre>\n"),
              s(:str, "<p>two\n"),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@m), :convert,
              s(:lvar, :str),
              s(:ivar, :@to))),
          s(:send, nil, :assert_equal,
            s(:int, 17),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :test_on_tags,
        s(:args),
        s(:begin,
          s(:lvasgn, :on,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :AttrChanger), :new,
              s(:int, 2),
              s(:int, 0))),
          s(:send,
            s(:ivar, :@to), :on_tags,
            s(:array),
            s(:lvar, :on)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@to), :mask)))),
      s(:def, :test_off_tags,
        s(:args),
        s(:begin,
          s(:lvasgn, :on,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :AttrChanger), :new,
              s(:int, 2),
              s(:int, 0))),
          s(:lvasgn, :off,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :AttrChanger), :new,
              s(:int, 0),
              s(:int, 2))),
          s(:send,
            s(:ivar, :@to), :on_tags,
            s(:array),
            s(:lvar, :on)),
          s(:send,
            s(:ivar, :@to), :off_tags,
            s(:array),
            s(:lvar, :off)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :mask)))),
      s(:def, :test_to_html,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<p><code>--</code>\n"),
            s(:send, nil, :util_format,
              s(:str, "<tt>--</tt>"))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@to), :characters)))),
      s(:def, :util_format,
        s(:args,
          s(:arg, :text)),
        s(:begin,
          s(:lvasgn, :paragraph,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
              s(:lvar, :text))),
          s(:send,
            s(:ivar, :@to), :start_accepting),
          s(:send,
            s(:ivar, :@to), :accept_paragraph,
            s(:lvar, :paragraph)),
          s(:send,
            s(:ivar, :@to), :end_accepting))))))
