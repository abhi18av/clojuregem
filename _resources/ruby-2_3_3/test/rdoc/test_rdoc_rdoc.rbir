s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocRDoc),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@rdoc,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RDoc), :new)),
          s(:send,
            s(:ivar, :@rdoc), :options=,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Options), :new)),
          s(:ivasgn, :@stats,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Stats), :new,
              s(:ivar, :@store),
              s(:int, 0),
              s(:int, 0))),
          s(:send,
            s(:ivar, :@rdoc), :instance_variable_set,
            s(:sym, :@stats),
            s(:ivar, :@stats)))),
      s(:def, :test_document,
        s(:args),
        s(:begin,
          s(:lvasgn, :options,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Options), :new)),
          s(:send,
            s(:lvar, :options), :files=,
            s(:array,
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:str, "../xref_data.rb"),
                s(:str, "(string)")))),
          s(:send,
            s(:lvar, :options), :setup_generator,
            s(:str, "ri")),
          s(:send,
            s(:lvar, :options), :main_page=,
            s(:str, "MAIN_PAGE.rdoc")),
          s(:send,
            s(:lvar, :options), :root=,
            s(:send, nil, :Pathname,
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:str, ".."),
                s(:str, "(string)")))),
          s(:send,
            s(:lvar, :options), :title=,
            s(:str, "title")),
          s(:lvasgn, :rdoc,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RDoc), :new)),
          s(:block,
            s(:send, nil, :temp_dir),
            s(:args),
            s(:begin,
              s(:send,
                s(:lvar, :options), :op_dir=,
                s(:str, "ri")),
              s(:block,
                s(:send, nil, :capture_io),
                s(:args),
                s(:send,
                  s(:lvar, :rdoc), :document,
                  s(:lvar, :options))),
              s(:send, nil, :assert,
                s(:send,
                  s(:const, nil, :File), :directory?,
                  s(:str, "ri"))),
              s(:send, nil, :assert_equal,
                s(:lvar, :rdoc),
                s(:send,
                  s(:send,
                    s(:lvar, :rdoc), :store), :rdoc)))),
          s(:lvasgn, :store,
            s(:send,
              s(:lvar, :rdoc), :store)),
          s(:send, nil, :assert_equal,
            s(:str, "MAIN_PAGE.rdoc"),
            s(:send,
              s(:lvar, :store), :main)),
          s(:send, nil, :assert_equal,
            s(:str, "title"),
            s(:send,
              s(:lvar, :store), :title)))),
      s(:def, :test_gather_files,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:str, "(string)"))),
          s(:lvasgn, :b,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:str, "../test_rdoc_text.rb"),
              s(:str, "(string)"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :a),
              s(:lvar, :b)),
            s(:send,
              s(:ivar, :@rdoc), :gather_files,
              s(:array,
                s(:lvar, :b),
                s(:lvar, :a),
                s(:lvar, :b)))))),
      s(:def, :test_handle_pipe,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:gvasgn, :$stdin,
              s(:send,
                s(:const, nil, :StringIO), :new,
                s(:str, "hello"))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :out)),
              s(:block,
                s(:send, nil, :capture_io),
                s(:args),
                s(:send,
                  s(:ivar, :@rdoc), :handle_pipe))),
            s(:send, nil, :assert_equal,
              s(:str, "\n<p>hello</p>\n"),
              s(:lvar, :out))),
          s(:gvasgn, :$stdin,
            s(:const, nil, :STDIN)))),
      s(:def, :test_handle_pipe_rd,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:gvasgn, :$stdin,
              s(:send,
                s(:const, nil, :StringIO), :new,
                s(:str, "=begin\nhello\n=end"))),
            s(:send,
              s(:send,
                s(:ivar, :@rdoc), :options), :markup=,
              s(:str, "rd")),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :out)),
              s(:block,
                s(:send, nil, :capture_io),
                s(:args),
                s(:send,
                  s(:ivar, :@rdoc), :handle_pipe))),
            s(:send, nil, :assert_equal,
              s(:str, "\n<p>hello</p>\n"),
              s(:lvar, :out))),
          s(:gvasgn, :$stdin,
            s(:const, nil, :STDIN)))),
      s(:def, :test_load_options,
        s(:args),
        s(:block,
          s(:send, nil, :temp_dir),
          s(:args),
          s(:begin,
            s(:lvasgn, :options,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Options), :new)),
            s(:send,
              s(:lvar, :options), :markup=,
              s(:str, "tomdoc")),
            s(:send,
              s(:lvar, :options), :write_options),
            s(:lvasgn, :options,
              s(:send,
                s(:ivar, :@rdoc), :load_options)),
            s(:send, nil, :assert_equal,
              s(:str, "tomdoc"),
              s(:send,
                s(:lvar, :options), :markup))))),
      s(:def, :test_load_options_invalid,
        s(:args),
        s(:block,
          s(:send, nil, :temp_dir),
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :open,
                s(:str, ".rdoc_options"),
                s(:str, "w")),
              s(:args,
                s(:arg, :io)),
              s(:send,
                s(:lvar, :io), :write,
                s(:str, "a: !ruby.yaml.org,2002:str |\nfoo"))),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :RDoc), :Error)),
                s(:args),
                s(:send,
                  s(:ivar, :@rdoc), :load_options))),
            s(:lvasgn, :options_file,
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:str, ".rdoc_options"))),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:begin,
                  s(:lvar, :options_file)),
                s(:str, " is not a valid rdoc options file")),
              s(:send,
                s(:lvar, :e), :message))))),
      s(:def, :load_options_no_file,
        s(:args),
        s(:block,
          s(:send, nil, :temp_dir),
          s(:args),
          s(:begin,
            s(:lvasgn, :options,
              s(:send,
                s(:ivar, :@rdoc), :load_options)),
            s(:send, nil, :assert_kind_of,
              s(:const,
                s(:const, nil, :RDoc), :Options),
              s(:lvar, :options))))),
      s(:def, :test_normalized_file_list,
        s(:args),
        s(:begin,
          s(:lvasgn, :files,
            s(:block,
              s(:send, nil, :temp_dir),
              s(:args,
                s(:arg, :dir)),
              s(:begin,
                s(:lvasgn, :flag_file,
                  s(:send,
                    s(:ivar, :@rdoc), :output_flag_file,
                    s(:lvar, :dir))),
                s(:send,
                  s(:const, nil, :FileUtils), :touch,
                  s(:lvar, :flag_file)),
                s(:send,
                  s(:ivar, :@rdoc), :normalized_file_list,
                  s(:array,
                    s(:str, "(string)"),
                    s(:lvar, :flag_file)))))),
          s(:lvasgn, :files,
            s(:block,
              s(:send,
                s(:lvar, :files), :map),
              s(:args,
                s(:arg, :file)),
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:lvar, :file)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:str, "(string)"))),
            s(:lvar, :files)))),
      s(:def, :test_normalized_file_list_not_modified,
        s(:args),
        s(:begin,
          s(:lvasgn, :files,
            s(:array,
              s(:str, "(string)"))),
          s(:send,
            s(:send,
              s(:ivar, :@rdoc), :last_modified), :[]=,
            s(:str, "(string)"),
            s(:send,
              s(:send,
                s(:const, nil, :File), :stat,
                s(:str, "(string)")), :mtime)),
          s(:lvasgn, :files,
            s(:send,
              s(:ivar, :@rdoc), :normalized_file_list,
              s(:array,
                s(:str, "(string)")))),
          s(:send, nil, :assert_empty,
            s(:lvar, :files)))),
      s(:def, :test_normalized_file_list_non_file_directory,
        s(:args),
        s(:begin,
          s(:lvasgn, :dev,
            s(:if,
              s(:defined?,
                s(:const,
                  s(:const, nil, :File), :NULL)),
              s(:const,
                s(:const, nil, :File), :NULL),
              s(:str, "/dev/stdin"))),
          s(:if,
            s(:send,
              s(:const, nil, :File), :chardev?,
              s(:lvar, :dev)), nil,
            s(:send, nil, :skip,
              s(:dstr,
                s(:begin,
                  s(:lvar, :dev)),
                s(:str, " is not a character special")))),
          s(:lvasgn, :files,
            s(:nil)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :verbose_capture_io),
              s(:args),
              s(:lvasgn, :files,
                s(:send,
                  s(:ivar, :@rdoc), :normalized_file_list,
                  s(:array,
                    s(:lvar, :dev)))))),
          s(:lvasgn, :files,
            s(:block,
              s(:send,
                s(:lvar, :files), :map),
              s(:args,
                s(:arg, :file)),
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:lvar, :file)))),
          s(:send, nil, :assert_empty,
            s(:lvar, :files)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^rdoc can't parse"),
              s(:regopt)),
            s(:lvar, :err)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:begin,
                s(:lvar, :dev)),
              s(:str, "$"),
              s(:regopt)),
            s(:lvar, :err)))),
      s(:def, :test_parse_file,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@rdoc), :store=,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:block,
            s(:send, nil, :temp_dir),
            s(:args,
              s(:arg, :dir)),
            s(:begin,
              s(:send,
                s(:send,
                  s(:ivar, :@rdoc), :options), :root=,
                s(:send, nil, :Pathname,
                  s(:send,
                    s(:const, nil, :Dir), :pwd))),
              s(:block,
                s(:send, nil, :open,
                  s(:str, "test.txt"),
                  s(:str, "w")),
                s(:args,
                  s(:arg, :io)),
                s(:send,
                  s(:lvar, :io), :puts,
                  s(:str, "hi"))),
              s(:lvasgn, :top_level,
                s(:send,
                  s(:ivar, :@rdoc), :parse_file,
                  s(:str, "test.txt"))),
              s(:send, nil, :assert_equal,
                s(:str, "test.txt"),
                s(:send,
                  s(:lvar, :top_level), :absolute_name)),
              s(:send, nil, :assert_equal,
                s(:str, "test.txt"),
                s(:send,
                  s(:lvar, :top_level), :relative_name)))))),
      s(:def, :test_parse_file_binary,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@rdoc), :store=,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:lvasgn, :root,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:str, "(string)"))),
          s(:send,
            s(:send,
              s(:ivar, :@rdoc), :options), :root=,
            s(:send, nil, :Pathname,
              s(:lvar, :root))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :Dir), :chdir,
                  s(:lvar, :root)),
                s(:args),
                s(:send, nil, :assert_nil,
                  s(:send,
                    s(:ivar, :@rdoc), :parse_file,
                    s(:str, "binary.dat")))))),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)),
          s(:send, nil, :assert_empty,
            s(:lvar, :err)))),
      s(:def, :test_parse_file_include_root,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@rdoc), :store=,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:lvasgn, :top_level,
            s(:nil)),
          s(:block,
            s(:send, nil, :temp_dir),
            s(:args,
              s(:arg, :dir)),
            s(:begin,
              s(:send,
                s(:send,
                  s(:ivar, :@rdoc), :options), :parse,
                s(:array,
                  s(:str, "--root"),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:const, nil, :File), :dirname,
                        s(:str, "(string)")))))),
              s(:block,
                s(:send, nil, :open,
                  s(:str, "include.txt"),
                  s(:str, "w")),
                s(:args,
                  s(:arg, :io)),
                s(:send,
                  s(:lvar, :io), :puts,
                  s(:str, ":include: test.txt"))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :out),
                  s(:lvasgn, :err)),
                s(:block,
                  s(:send, nil, :capture_io),
                  s(:args),
                  s(:lvasgn, :top_level,
                    s(:send,
                      s(:ivar, :@rdoc), :parse_file,
                      s(:str, "include.txt"))))),
              s(:send, nil, :assert_empty,
                s(:lvar, :out)),
              s(:send, nil, :assert_empty,
                s(:lvar, :err)))),
          s(:send, nil, :assert_equal,
            s(:str, "test file"),
            s(:send,
              s(:send,
                s(:lvar, :top_level), :comment), :text)))),
      s(:def, :test_parse_file_page_dir,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@rdoc), :store=,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:block,
            s(:send, nil, :temp_dir),
            s(:args,
              s(:arg, :dir)),
            s(:begin,
              s(:send,
                s(:const, nil, :FileUtils), :mkdir,
                s(:str, "pages")),
              s(:send,
                s(:send,
                  s(:ivar, :@rdoc), :options), :page_dir=,
                s(:send, nil, :Pathname,
                  s(:str, "pages"))),
              s(:send,
                s(:send,
                  s(:ivar, :@rdoc), :options), :root=,
                s(:send, nil, :Pathname,
                  s(:send,
                    s(:const, nil, :Dir), :pwd))),
              s(:block,
                s(:send, nil, :open,
                  s(:str, "pages/test.txt"),
                  s(:str, "w")),
                s(:args,
                  s(:arg, :io)),
                s(:send,
                  s(:lvar, :io), :puts,
                  s(:str, "hi"))),
              s(:lvasgn, :top_level,
                s(:send,
                  s(:ivar, :@rdoc), :parse_file,
                  s(:str, "pages/test.txt"))),
              s(:send, nil, :assert_equal,
                s(:str, "pages/test.txt"),
                s(:send,
                  s(:lvar, :top_level), :absolute_name)),
              s(:send, nil, :assert_equal,
                s(:str, "test.txt"),
                s(:send,
                  s(:lvar, :top_level), :relative_name)))))),
      s(:def, :test_parse_file_relative,
        s(:args),
        s(:begin,
          s(:lvasgn, :pwd,
            s(:send,
              s(:const, nil, :Dir), :pwd)),
          s(:send,
            s(:ivar, :@rdoc), :store=,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:block,
            s(:send, nil, :temp_dir),
            s(:args,
              s(:arg, :dir)),
            s(:begin,
              s(:send,
                s(:send,
                  s(:ivar, :@rdoc), :options), :root=,
                s(:send, nil, :Pathname,
                  s(:lvar, :dir))),
              s(:block,
                s(:send, nil, :open,
                  s(:str, "test.txt"),
                  s(:str, "w")),
                s(:args,
                  s(:arg, :io)),
                s(:send,
                  s(:lvar, :io), :puts,
                  s(:str, "hi"))),
              s(:lvasgn, :test_txt,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :dir),
                  s(:str, "test.txt"))),
              s(:block,
                s(:send,
                  s(:const, nil, :Dir), :chdir,
                  s(:lvar, :pwd)),
                s(:args),
                s(:begin,
                  s(:lvasgn, :top_level,
                    s(:send,
                      s(:ivar, :@rdoc), :parse_file,
                      s(:lvar, :test_txt))),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :test_txt),
                    s(:send,
                      s(:lvar, :top_level), :absolute_name)),
                  s(:send, nil, :assert_equal,
                    s(:str, "test.txt"),
                    s(:send,
                      s(:lvar, :top_level), :relative_name)))))))),
      s(:def, :test_parse_file_encoding,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)), nil,
            s(:send, nil, :skip,
              s(:str, "Encoding not implemented"))),
          s(:send,
            s(:send,
              s(:ivar, :@rdoc), :options), :encoding=,
            s(:const,
              s(:const, nil, :Encoding), :ISO_8859_1)),
          s(:send,
            s(:ivar, :@rdoc), :store=,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:lvasgn, :tf,
            s(:block,
              s(:send,
                s(:const, nil, :Tempfile), :open,
                s(:str, "test.txt")),
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:send,
                  s(:lvar, :io), :write,
                  s(:str, "hi")),
                s(:send,
                  s(:lvar, :io), :rewind),
                s(:lvasgn, :top_level,
                  s(:send,
                    s(:ivar, :@rdoc), :parse_file,
                    s(:send,
                      s(:lvar, :io), :path))),
                s(:send, nil, :assert_equal,
                  s(:const,
                    s(:const, nil, :Encoding), :ISO_8859_1),
                  s(:send,
                    s(:send,
                      s(:lvar, :top_level), :absolute_name), :encoding)),
                s(:lvar, :io)))),
          s(:if,
            s(:send,
              s(:lvar, :tf), :respond_to?,
              s(:sym, :close!)),
            s(:send,
              s(:lvar, :tf), :close!), nil))),
      s(:def, :test_parse_file_forbidden,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Gem), :win_platform?),
            s(:send, nil, :skip,
              s(:str, "chmod not supported")), nil),
          s(:send,
            s(:ivar, :@rdoc), :store=,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:lvasgn, :tf,
            s(:block,
              s(:send,
                s(:const, nil, :Tempfile), :open,
                s(:str, "test.txt")),
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:send,
                  s(:lvar, :io), :write,
                  s(:str, "hi")),
                s(:send,
                  s(:lvar, :io), :rewind),
                s(:send,
                  s(:const, nil, :File), :chmod,
                  s(:int, 0),
                  s(:send,
                    s(:lvar, :io), :path)),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:lvasgn, :top_level,
                        s(:sym, :bug)),
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :_),
                          s(:lvasgn, :err)),
                        s(:block,
                          s(:send, nil, :capture_io),
                          s(:args),
                          s(:lvasgn, :top_level,
                            s(:send,
                              s(:ivar, :@rdoc), :parse_file,
                              s(:send,
                                s(:lvar, :io), :path))))),
                      s(:send, nil, :assert_match,
                        s(:dstr,
                          s(:str, "Unable to read "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :io), :path)),
                          s(:str, ",")),
                        s(:lvar, :err)),
                      s(:send, nil, :assert_nil,
                        s(:lvar, :top_level))),
                    s(:send,
                      s(:const, nil, :File), :chmod,
                      s(:int, 256),
                      s(:send,
                        s(:lvar, :io), :path)))),
                s(:lvar, :io)))),
          s(:if,
            s(:send,
              s(:lvar, :tf), :respond_to?,
              s(:sym, :close!)),
            s(:send,
              s(:lvar, :tf), :close!), nil))),
      s(:def, :test_remove_unparseable,
        s(:args),
        s(:begin,
          s(:lvasgn, :file_list,
            s(:array,
              s(:str, "blah.class"),
              s(:str, "blah.eps"),
              s(:str, "blah.erb"),
              s(:str, "blah.scpt.txt"),
              s(:str, "blah.ttf"),
              s(:str, "blah.yml"))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@rdoc), :remove_unparseable,
              s(:lvar, :file_list))))),
      s(:def, :test_remove_unparseable_tags_emacs,
        s(:args),
        s(:block,
          s(:send, nil, :temp_dir),
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :open,
                s(:str, "TAGS"),
                s(:str, "wb")),
              s(:args,
                s(:arg, :io)),
              s(:send,
                s(:lvar, :io), :write,
                s(:str, "\f\nlib/foo.rb,43\n"))),
            s(:lvasgn, :file_list,
              s(:array,
                s(:str, "TAGS"))),
            s(:send, nil, :assert_empty,
              s(:send,
                s(:ivar, :@rdoc), :remove_unparseable,
                s(:lvar, :file_list)))))),
      s(:def, :test_remove_unparseable_tags_vim,
        s(:args),
        s(:block,
          s(:send, nil, :temp_dir),
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :open,
                s(:str, "TAGS"),
                s(:str, "w")),
              s(:args,
                s(:arg, :io)),
              s(:send,
                s(:lvar, :io), :write,
                s(:str, "!_TAG_"))),
            s(:lvasgn, :file_list,
              s(:array,
                s(:str, "TAGS"))),
            s(:send, nil, :assert_empty,
              s(:send,
                s(:ivar, :@rdoc), :remove_unparseable,
                s(:lvar, :file_list)))))),
      s(:def, :test_setup_output_dir,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Dir), :mktmpdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:lvasgn, :path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :d),
                s(:str, "testdir"))),
            s(:lvasgn, :last,
              s(:send,
                s(:ivar, :@rdoc), :setup_output_dir,
                s(:lvar, :path),
                s(:false))),
            s(:send, nil, :assert_empty,
              s(:lvar, :last)),
            s(:send, nil, :assert,
              s(:send,
                s(:const, nil, :File), :directory?,
                s(:lvar, :path))),
            s(:send, nil, :assert,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:send,
                  s(:ivar, :@rdoc), :output_flag_file,
                  s(:lvar, :path))))))),
      s(:def, :test_setup_output_dir_dry_run,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@rdoc), :options), :dry_run=,
            s(:true)),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :mktmpdir),
            s(:args,
              s(:arg, :d)),
            s(:begin,
              s(:lvasgn, :path,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :d),
                  s(:str, "testdir"))),
              s(:send,
                s(:ivar, :@rdoc), :setup_output_dir,
                s(:lvar, :path),
                s(:false)),
              s(:send, nil, :refute,
                s(:send,
                  s(:const, nil, :File), :exist?,
                  s(:lvar, :path))))))),
      s(:def, :test_setup_output_dir_exists,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Dir), :mktmpdir),
          s(:args,
            s(:arg, :path)),
          s(:begin,
            s(:block,
              s(:send, nil, :open,
                s(:send,
                  s(:ivar, :@rdoc), :output_flag_file,
                  s(:lvar, :path)),
                s(:str, "w")),
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:send,
                  s(:lvar, :io), :puts,
                  s(:send,
                    s(:const, nil, :Time), :at,
                    s(:int, 0))),
                s(:send,
                  s(:lvar, :io), :puts,
                  s(:dstr,
                    s(:str, "./lib/rdoc.rb\t"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Time), :at,
                        s(:int, 86400))))))),
            s(:lvasgn, :last,
              s(:send,
                s(:ivar, :@rdoc), :setup_output_dir,
                s(:lvar, :path),
                s(:false))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :last), :size)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :Time), :at,
                s(:int, 86400)),
              s(:send,
                s(:lvar, :last), :[],
                s(:str, "./lib/rdoc.rb")))))),
      s(:def, :test_setup_output_dir_exists_empty_created_rid,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Dir), :mktmpdir),
          s(:args,
            s(:arg, :path)),
          s(:begin,
            s(:block,
              s(:send, nil, :open,
                s(:send,
                  s(:ivar, :@rdoc), :output_flag_file,
                  s(:lvar, :path)),
                s(:str, "w")),
              s(:args), nil),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :RDoc), :Error)),
                s(:args),
                s(:send,
                  s(:ivar, :@rdoc), :setup_output_dir,
                  s(:lvar, :path),
                  s(:false)))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "Directory "),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Regexp), :escape,
                    s(:lvar, :path))),
                s(:str, " already exists"),
                s(:regopt)),
              s(:send,
                s(:lvar, :e), :message))))),
      s(:def, :test_setup_output_dir_exists_file,
        s(:args),
        s(:begin,
          s(:lvasgn, :tf,
            s(:block,
              s(:send,
                s(:const, nil, :Tempfile), :open,
                s(:str, "test_rdoc_rdoc")),
              s(:args,
                s(:arg, :tempfile)),
              s(:begin,
                s(:lvasgn, :path,
                  s(:send,
                    s(:lvar, :tempfile), :path)),
                s(:lvasgn, :e,
                  s(:block,
                    s(:send, nil, :assert_raises,
                      s(:const,
                        s(:const, nil, :RDoc), :Error)),
                    s(:args),
                    s(:send,
                      s(:ivar, :@rdoc), :setup_output_dir,
                      s(:lvar, :path),
                      s(:false)))),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Regexp), :escape,
                        s(:lvar, :path))),
                    s(:str, " exists and is not a directory"),
                    s(:regopt)),
                  s(:send,
                    s(:lvar, :e), :message)),
                s(:lvar, :tempfile)))),
          s(:if,
            s(:send,
              s(:lvar, :tf), :respond_to?,
              s(:sym, :close!)),
            s(:send,
              s(:lvar, :tf), :close!), nil))),
      s(:def, :test_setup_output_dir_exists_not_rdoc,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Dir), :mktmpdir),
          s(:args,
            s(:arg, :dir)),
          s(:begin,
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :RDoc), :Error)),
                s(:args),
                s(:send,
                  s(:ivar, :@rdoc), :setup_output_dir,
                  s(:lvar, :dir),
                  s(:false)))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "Directory "),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Regexp), :escape,
                    s(:lvar, :dir))),
                s(:str, " already exists"),
                s(:regopt)),
              s(:send,
                s(:lvar, :e), :message))))),
      s(:def, :test_update_output_dir,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Dir), :mktmpdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send,
              s(:ivar, :@rdoc), :update_output_dir,
              s(:lvar, :d),
              s(:send,
                s(:const, nil, :Time), :now),
              s(:hash)),
            s(:send, nil, :assert,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :d)),
                  s(:str, "/created.rid"))))))),
      s(:def, :test_update_output_dir_dont,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Dir), :mktmpdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send,
              s(:send,
                s(:ivar, :@rdoc), :options), :update_output_dir=,
              s(:false)),
            s(:send,
              s(:ivar, :@rdoc), :update_output_dir,
              s(:lvar, :d),
              s(:send,
                s(:const, nil, :Time), :now),
              s(:hash)),
            s(:send, nil, :refute,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :d)),
                  s(:str, "/created.rid"))))))),
      s(:def, :test_update_output_dir_dry_run,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Dir), :mktmpdir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send,
              s(:send,
                s(:ivar, :@rdoc), :options), :dry_run=,
              s(:true)),
            s(:send,
              s(:ivar, :@rdoc), :update_output_dir,
              s(:lvar, :d),
              s(:send,
                s(:const, nil, :Time), :now),
              s(:hash)),
            s(:send, nil, :refute,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :d)),
                  s(:str, "/created.rid"))))))),
      s(:def, :test_normalized_file_list_removes_created_rid_dir,
        s(:args),
        s(:block,
          s(:send, nil, :temp_dir),
          s(:args,
            s(:arg, :d)),
          s(:begin,
            s(:send,
              s(:const, nil, :FileUtils), :mkdir,
              s(:str, "doc")),
            s(:lvasgn, :flag_file,
              s(:send,
                s(:ivar, :@rdoc), :output_flag_file,
                s(:str, "doc"))),
            s(:lvasgn, :file,
              s(:send,
                s(:const, nil, :File), :join,
                s(:str, "doc"),
                s(:str, "test"))),
            s(:send,
              s(:const, nil, :FileUtils), :touch,
              s(:lvar, :flag_file)),
            s(:send,
              s(:const, nil, :FileUtils), :touch,
              s(:lvar, :file)),
            s(:lvasgn, :file_list,
              s(:array,
                s(:str, "doc"))),
            s(:lvasgn, :output,
              s(:send,
                s(:ivar, :@rdoc), :normalized_file_list,
                s(:lvar, :file_list))),
            s(:send, nil, :assert_empty,
              s(:lvar, :output))))))))
