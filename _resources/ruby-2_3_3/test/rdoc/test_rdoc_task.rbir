s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "rake")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :Rake), :Task)),
    s(:class,
      s(:const, nil, :TestRDocTask),
      s(:const,
        s(:const, nil, :RDoc), :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:zsuper),
            s(:send,
              s(:const,
                s(:const, nil, :Rake), :Task), :clear),
            s(:ivasgn, :@t,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Task), :new)))),
        s(:def, :test_clobber_task_description,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:str, "Remove RDoc HTML files"),
            s(:send,
              s(:ivar, :@t), :clobber_task_description))),
        s(:def, :test_inline_source,
          s(:args),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :_),
                s(:lvasgn, :err)),
              s(:block,
                s(:send, nil, :verbose_capture_io),
                s(:args),
                s(:send, nil, :assert,
                  s(:send,
                    s(:ivar, :@t), :inline_source)))),
            s(:send, nil, :assert_equal,
              s(:str, "RDoc::Task#inline_source is deprecated\n"),
              s(:lvar, :err)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :_),
                s(:lvasgn, :err)),
              s(:block,
                s(:send, nil, :verbose_capture_io),
                s(:args),
                s(:send,
                  s(:ivar, :@t), :inline_source=,
                  s(:false)))),
            s(:send, nil, :assert_equal,
              s(:str, "RDoc::Task#inline_source is deprecated\n"),
              s(:lvar, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send, nil, :assert,
                s(:send,
                  s(:ivar, :@t), :inline_source))))),
        s(:def, :test_markup_option,
          s(:args),
          s(:begin,
            s(:lvasgn, :rdoc_task,
              s(:block,
                s(:send,
                  s(:const,
                    s(:const, nil, :RDoc), :Task), :new),
                s(:args,
                  s(:arg, :rd)),
                s(:send,
                  s(:lvar, :rd), :markup=,
                  s(:str, "tomdoc")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "-o"),
                s(:str, "html"),
                s(:str, "--markup"),
                s(:str, "tomdoc")),
              s(:send,
                s(:lvar, :rdoc_task), :option_list)))),
        s(:def, :test_tasks_creation,
          s(:args),
          s(:begin,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Task), :new),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :Rake), :Task), :[],
                s(:sym, :rdoc))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :Rake), :Task), :[],
                s(:sym, :clobber_rdoc))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :Rake), :Task), :[],
                s(:sym, :rerdoc))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "html/created.rid")),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rake), :Task), :[],
                  s(:sym, :rdoc)), :prerequisites)))),
        s(:def, :test_tasks_creation_with_custom_name_symbol,
          s(:args),
          s(:begin,
            s(:lvasgn, :rd,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Task), :new,
                s(:sym, :rdoc_dev))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :Rake), :Task), :[],
                s(:sym, :rdoc_dev))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :Rake), :Task), :[],
                s(:sym, :clobber_rdoc_dev))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :Rake), :Task), :[],
                s(:sym, :rerdoc_dev))),
            s(:send, nil, :assert_equal,
              s(:sym, :rdoc_dev),
              s(:send,
                s(:lvar, :rd), :name)))),
        s(:def, :test_tasks_option_parser,
          s(:args),
          s(:begin,
            s(:lvasgn, :rdoc_task,
              s(:block,
                s(:send,
                  s(:const,
                    s(:const, nil, :RDoc), :Task), :new),
                s(:args,
                  s(:arg, :rd)),
                s(:begin,
                  s(:send,
                    s(:lvar, :rd), :title=,
                    s(:str, "Test Tasks Option Parser")),
                  s(:send,
                    s(:lvar, :rd), :main=,
                    s(:str, "README.md")),
                  s(:send,
                    s(:send,
                      s(:lvar, :rd), :rdoc_files), :include,
                    s(:str, "README.md")),
                  s(:send,
                    s(:send,
                      s(:lvar, :rd), :options), :<<,
                    s(:str, "--all"))))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :rdoc_task), :title),
              s(:str, "Test Tasks Option Parser")),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :rdoc_task), :main),
              s(:str, "README.md")),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :rdoc_task), :rdoc_files), :include?,
                s(:str, "README.md"))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :rdoc_task), :options), :include?,
                s(:str, "--all"))),
            s(:lvasgn, :args,
              s(:send,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:str, "--all"),
                      s(:str, "-o"),
                      s(:str, "html"),
                      s(:str, "--main"),
                      s(:str, "README.md")), :<<,
                    s(:str, "--title")), :<<,
                  s(:str, "Test Tasks Option Parser")), :<<,
                s(:str, "README.md"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :args),
              s(:send,
                s(:send,
                  s(:lvar, :rdoc_task), :option_list), :+,
                s(:send,
                  s(:lvar, :rdoc_task), :rdoc_files))))),
        s(:def, :test_generator_option,
          s(:args),
          s(:begin,
            s(:lvasgn, :rdoc_task,
              s(:block,
                s(:send,
                  s(:const,
                    s(:const, nil, :RDoc), :Task), :new),
                s(:args,
                  s(:arg, :rd)),
                s(:send,
                  s(:lvar, :rd), :generator=,
                  s(:str, "ri")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "-o"),
                s(:str, "html"),
                s(:str, "-f"),
                s(:str, "ri")),
              s(:send,
                s(:lvar, :rdoc_task), :option_list)))),
        s(:def, :test_main_option,
          s(:args),
          s(:begin,
            s(:lvasgn, :rdoc_task,
              s(:block,
                s(:send,
                  s(:const,
                    s(:const, nil, :RDoc), :Task), :new),
                s(:args,
                  s(:arg, :rd)),
                s(:send,
                  s(:lvar, :rd), :main=,
                  s(:str, "README.md")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "-o"),
                s(:str, "html"),
                s(:str, "--main"),
                s(:str, "README.md")),
              s(:send,
                s(:lvar, :rdoc_task), :option_list)))),
        s(:def, :test_output_dir_option,
          s(:args),
          s(:begin,
            s(:lvasgn, :rdoc_task,
              s(:block,
                s(:send,
                  s(:const,
                    s(:const, nil, :RDoc), :Task), :new),
                s(:args,
                  s(:arg, :rd)),
                s(:send,
                  s(:lvar, :rd), :rdoc_dir=,
                  s(:str, "zomg")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "-o"),
                s(:str, "zomg")),
              s(:send,
                s(:lvar, :rdoc_task), :option_list)))),
        s(:def, :test_rdoc_task_description,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:str, "Build RDoc HTML files"),
            s(:send,
              s(:ivar, :@t), :rdoc_task_description))),
        s(:def, :test_rerdoc_task_description,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:str, "Rebuild RDoc HTML files"),
            s(:send,
              s(:ivar, :@t), :rerdoc_task_description))),
        s(:def, :test_tasks_creation_with_custom_name_string,
          s(:args),
          s(:begin,
            s(:lvasgn, :rd,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Task), :new,
                s(:str, "rdoc_dev"))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :Rake), :Task), :[],
                s(:sym, :rdoc_dev))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :Rake), :Task), :[],
                s(:sym, :clobber_rdoc_dev))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :Rake), :Task), :[],
                s(:sym, :rerdoc_dev))),
            s(:send, nil, :assert_equal,
              s(:str, "rdoc_dev"),
              s(:send,
                s(:lvar, :rd), :name)))),
        s(:def, :test_tasks_creation_with_custom_name_hash,
          s(:args),
          s(:begin,
            s(:lvasgn, :options,
              s(:hash,
                s(:pair,
                  s(:sym, :rdoc),
                  s(:str, "rdoc")),
                s(:pair,
                  s(:sym, :clobber_rdoc),
                  s(:str, "rdoc:clean")),
                s(:pair,
                  s(:sym, :rerdoc),
                  s(:str, "rdoc:force")))),
            s(:send,
              s(:const,
                s(:const, nil, :Rake), :Task), :clear),
            s(:lvasgn, :rd,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Task), :new,
                s(:lvar, :options))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :Rake), :Task), :[],
                s(:sym, :rdoc))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :Rake), :Task), :[],
                s(:sym, :"rdoc:clean"))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :Rake), :Task), :[],
                s(:sym, :"rdoc:force"))),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :RuntimeError)),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :Rake), :Task), :[],
                s(:sym, :clobber_rdoc))),
            s(:send, nil, :assert_equal,
              s(:lvar, :options),
              s(:send,
                s(:lvar, :rd), :name)))),
        s(:def, :test_tasks_creation_with_custom_name_hash_will_use_default_if_an_option_isnt_given,
          s(:args),
          s(:begin,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Task), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :clobber_rdoc),
                  s(:str, "rdoc:clean")))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :Rake), :Task), :[],
                s(:sym, :rdoc))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :Rake), :Task), :[],
                s(:sym, :"rdoc:clean"))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :Rake), :Task), :[],
                s(:sym, :rerdoc))))),
        s(:def, :test_tasks_creation_with_custom_name_hash_raises_exception_if_invalid_option_given,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Task), :new,
                s(:hash,
                  s(:pair,
                    s(:sym, :foo),
                    s(:str, "bar"))))),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:const,
                    s(:const, nil, :RDoc), :Task), :new,
                  s(:hash,
                    s(:pair,
                      s(:sym, :foo),
                      s(:str, "bar")))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :ArgumentError)),
                  s(:lvasgn, :e),
                  s(:send, nil, :assert_match,
                    s(:regexp,
                      s(:str, "foo"),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :e), :message))), nil)))),
        s(:def, :test_template_option,
          s(:args),
          s(:begin,
            s(:lvasgn, :rdoc_task,
              s(:block,
                s(:send,
                  s(:const,
                    s(:const, nil, :RDoc), :Task), :new),
                s(:args,
                  s(:arg, :rd)),
                s(:send,
                  s(:lvar, :rd), :template=,
                  s(:str, "foo")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "-o"),
                s(:str, "html"),
                s(:str, "-T"),
                s(:str, "foo")),
              s(:send,
                s(:lvar, :rdoc_task), :option_list)))),
        s(:def, :test_title_option,
          s(:args),
          s(:begin,
            s(:lvasgn, :rdoc_task,
              s(:block,
                s(:send,
                  s(:const,
                    s(:const, nil, :RDoc), :Task), :new),
                s(:args,
                  s(:arg, :rd)),
                s(:send,
                  s(:lvar, :rd), :title=,
                  s(:str, "Test Title Option")))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:array,
                    s(:str, "-o"),
                    s(:str, "html")), :<<,
                  s(:str, "--title")), :<<,
                s(:str, "Test Title Option")),
              s(:send,
                s(:lvar, :rdoc_task), :option_list)))))), nil))
