s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems")),
  s(:send, nil, :require,
    s(:str, "minitest/autorun")),
  s(:send, nil, :require,
    s(:str, "pp")),
  s(:send, nil, :require,
    s(:str, "rdoc")),
  s(:send, nil, :require,
    s(:str, "rdoc/markdown")),
  s(:class,
    s(:const, nil, :TestRDocMarkdownTest),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:casgn, nil, :MARKDOWN_TEST_PATH,
        s(:send,
          s(:const, nil, :File), :expand_path,
          s(:str, "../MarkdownTest_1.0.3/"),
          s(:str, "(string)"))),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@parser,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Markdown), :new)))),
      s(:def, :test_amps_and_angle_encoding,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Amps and angle encoding.text")))),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "AT&T has an ampersand in their name.")),
              s(:send, nil, :para,
                s(:str, "AT&T is another way to write it.")),
              s(:send, nil, :para,
                s(:str, "This & that.")),
              s(:send, nil, :para,
                s(:str, "4 < 5.")),
              s(:send, nil, :para,
                s(:str, "6 > 5.")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Here's a {link}[http://example.com/?foo=1&bar=2] with "), :+,
                  s(:str, "an ampersand in the URL."))),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Here's a link with an amersand in the link text: "), :+,
                  s(:str, "{AT&T}[http://att.com/]."))),
              s(:send, nil, :para,
                s(:str, "Here's an inline {link}[/script?foo=1&bar=2].")),
              s(:send, nil, :para,
                s(:str, "Here's an inline {link}[/script?foo=1&bar=2].")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_auto_links,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Auto links.text")))),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Link: http://example.com/.")),
              s(:send, nil, :para,
                s(:str, "With an ampersand: http://example.com/?foo=1&bar=2")),
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "In a list?"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "http://example.com/"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "It should.")))),
              s(:send, nil, :block,
                s(:send, nil, :para,
                  s(:str, "Blockquoted: http://example.com/"))),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Auto-links should not occur here: "), :+,
                  s(:str, "<code><http://example.com/></code>"))),
              s(:send, nil, :verb,
                s(:str, "or here: <http://example.com/>\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_backslash_escapes,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Backslash escapes.text")))),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "These should all get escaped:")),
              s(:send, nil, :para,
                s(:str, "Backslash: \\")),
              s(:send, nil, :para,
                s(:str, "Backtick: `")),
              s(:send, nil, :para,
                s(:str, "Asterisk: *")),
              s(:send, nil, :para,
                s(:str, "Underscore: _")),
              s(:send, nil, :para,
                s(:str, "Left brace: {")),
              s(:send, nil, :para,
                s(:str, "Right brace: }")),
              s(:send, nil, :para,
                s(:str, "Left bracket: [")),
              s(:send, nil, :para,
                s(:str, "Right bracket: ]")),
              s(:send, nil, :para,
                s(:str, "Left paren: (")),
              s(:send, nil, :para,
                s(:str, "Right paren: )")),
              s(:send, nil, :para,
                s(:str, "Greater-than: >")),
              s(:send, nil, :para,
                s(:str, "Hash: #")),
              s(:send, nil, :para,
                s(:str, "Period: .")),
              s(:send, nil, :para,
                s(:str, "Bang: !")),
              s(:send, nil, :para,
                s(:str, "Plus: +")),
              s(:send, nil, :para,
                s(:str, "Minus: -")),
              s(:send, nil, :para,
                s(:str, "These should not, because they occur within a code block:")),
              s(:send, nil, :verb,
                s(:str, "Backslash: \\\\\n"),
                s(:str, "\n"),
                s(:str, "Backtick: \\`\n"),
                s(:str, "\n"),
                s(:str, "Asterisk: \\*\n"),
                s(:str, "\n"),
                s(:str, "Underscore: \\_\n"),
                s(:str, "\n"),
                s(:str, "Left brace: \\{\n"),
                s(:str, "\n"),
                s(:str, "Right brace: \\}\n"),
                s(:str, "\n"),
                s(:str, "Left bracket: \\[\n"),
                s(:str, "\n"),
                s(:str, "Right bracket: \\]\n"),
                s(:str, "\n"),
                s(:str, "Left paren: \\(\n"),
                s(:str, "\n"),
                s(:str, "Right paren: \\)\n"),
                s(:str, "\n"),
                s(:str, "Greater-than: \\>\n"),
                s(:str, "\n"),
                s(:str, "Hash: \\#\n"),
                s(:str, "\n"),
                s(:str, "Period: \\.\n"),
                s(:str, "\n"),
                s(:str, "Bang: \\!\n"),
                s(:str, "\n"),
                s(:str, "Plus: \\+\n"),
                s(:str, "\n"),
                s(:str, "Minus: \\-\n")),
              s(:send, nil, :para,
                s(:str, "Nor should these, which occur in code spans:")),
              s(:send, nil, :para,
                s(:str, "Backslash: <code>\\\\</code>")),
              s(:send, nil, :para,
                s(:str, "Backtick: <code>\\`</code>")),
              s(:send, nil, :para,
                s(:str, "Asterisk: <code>\\*</code>")),
              s(:send, nil, :para,
                s(:str, "Underscore: <code>\\_</code>")),
              s(:send, nil, :para,
                s(:str, "Left brace: <code>\\{</code>")),
              s(:send, nil, :para,
                s(:str, "Right brace: <code>\\}</code>")),
              s(:send, nil, :para,
                s(:str, "Left bracket: <code>\\[</code>")),
              s(:send, nil, :para,
                s(:str, "Right bracket: <code>\\]</code>")),
              s(:send, nil, :para,
                s(:str, "Left paren: <code>\\(</code>")),
              s(:send, nil, :para,
                s(:str, "Right paren: <code>\\)</code>")),
              s(:send, nil, :para,
                s(:str, "Greater-than: <code>\\></code>")),
              s(:send, nil, :para,
                s(:str, "Hash: <code>\\#</code>")),
              s(:send, nil, :para,
                s(:str, "Period: <code>\\.</code>")),
              s(:send, nil, :para,
                s(:str, "Bang: <code>\\!</code>")),
              s(:send, nil, :para,
                s(:str, "Plus: <code>\\+</code>")),
              s(:send, nil, :para,
                s(:str, "Minus: <code>\\-</code>")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "These should get escaped, even though they're matching pairs for\n"), :+,
                  s(:str, "other Markdown constructs:"))),
              s(:send, nil, :para,
                s(:str, "*asterisks*")),
              s(:send, nil, :para,
                s(:str, "_underscores_")),
              s(:send, nil, :para,
                s(:str, "`backticks`")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "This is a code span with a literal backslash-backtick "), :+,
                  s(:str, "sequence: <code>\\`</code>"))),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "This is a tag with unescaped backticks "), :+,
                  s(:str, "<span attr='`ticks`'>bar</span>."))),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "This is a tag with backslashes "), :+,
                  s(:str, "<span attr='\\\\backslashes\\\\'>bar</span>."))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_blockquotes_with_code_blocks,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Blockquotes with code blocks.text")))),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :block,
                s(:send, nil, :para,
                  s(:str, "Example:")),
                s(:send, nil, :verb,
                  s(:str, "sub status {\n"),
                  s(:str, "    print \"working\";\n"),
                  s(:str, "}\n")),
                s(:send, nil, :para,
                  s(:str, "Or:")),
                s(:send, nil, :verb,
                  s(:str, "sub status {\n"),
                  s(:str, "    return \"working\";\n"),
                  s(:str, "}\n"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_code_blocks,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Code Blocks.text")))),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :verb,
                s(:str, "code block on the first line\n")),
              s(:send, nil, :para,
                s(:str, "Regular text.")),
              s(:send, nil, :verb,
                s(:str, "code block indented by spaces\n")),
              s(:send, nil, :para,
                s(:str, "Regular text.")),
              s(:send, nil, :verb,
                s(:str, "the lines in this block  \n"),
                s(:str, "all contain trailing spaces  \n")),
              s(:send, nil, :para,
                s(:str, "Regular Text.")),
              s(:send, nil, :verb,
                s(:str, "code block on the last line\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_code_spans,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Code Spans.text")))),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "<code><test a=\"</code> content of attribute <code>\"></code>")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Fix for backticks within HTML tag: "), :+,
                  s(:str, "<span attr='`ticks`'>like this</span>"))),
              s(:send, nil, :para,
                s(:str, "Here's how you put <code>`backticks`</code> in a code span.")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_hard_wrapped_paragraphs_with_list_like_lines,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Hard-wrapped paragraphs with list-like lines.text")))),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:str, "In Markdown 1.0.0 and earlier. Version\n"), :+,
                        s(:str, "8. This line turns into a list item.\n")), :+,
                      s(:str, "Because a hard-wrapped line in the\n")), :+,
                    s(:str, "middle of a paragraph looked like a\n")), :+,
                  s(:str, "list item."))),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Here's one with a bullet.\n"), :+,
                  s(:str, "* criminey."))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_horizontal_rules,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Horizontal rules.text")))),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Dashes:")),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :verb,
                s(:str, "---\n")),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :verb,
                s(:str, "- - -\n")),
              s(:send, nil, :para,
                s(:str, "Asterisks:")),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :verb,
                s(:str, "***\n")),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :verb,
                s(:str, "* * *\n")),
              s(:send, nil, :para,
                s(:str, "Underscores:")),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :verb,
                s(:str, "___\n")),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :verb,
                s(:str, "_ _ _\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_inline_html_advanced,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Inline HTML (Advanced).text")))),
          s(:send,
            s(:ivar, :@parser), :html=,
            s(:true)),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Simple block on one line:")),
              s(:send, nil, :raw,
                s(:str, "<div>foo</div>")),
              s(:send, nil, :para,
                s(:str, "And nested without indentation:")),
              s(:send, nil, :raw,
                s(:send,
                  s(:dstr,
                    s(:str, "<div>\n"),
                    s(:str, "<div>\n"),
                    s(:str, "<div>\n"),
                    s(:str, "foo\n"),
                    s(:str, "</div>\n"),
                    s(:str, "<div style=\">\"/>\n"),
                    s(:str, "</div>\n"),
                    s(:str, "<div>bar</div>\n"),
                    s(:str, "</div>\n")), :chomp)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_inline_html_simple,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Inline HTML (Simple).text")))),
          s(:send,
            s(:ivar, :@parser), :html=,
            s(:true)),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Here's a simple block:")),
              s(:send, nil, :raw,
                s(:str, "<div>\n\tfoo\n</div>")),
              s(:send, nil, :para,
                s(:str, "This should be a code block, though:")),
              s(:send, nil, :verb,
                s(:str, "<div>\n"),
                s(:str, "\tfoo\n"),
                s(:str, "</div>\n")),
              s(:send, nil, :para,
                s(:str, "As should this:")),
              s(:send, nil, :verb,
                s(:str, "<div>foo</div>\n")),
              s(:send, nil, :para,
                s(:str, "Now, nested:")),
              s(:send, nil, :raw,
                s(:send,
                  s(:str, "<div>\n\t<div>\n\t\t<div>\n\t\t\tfoo\n"), :+,
                  s(:str, "\t\t</div>\n\t</div>\n</div>"))),
              s(:send, nil, :para,
                s(:str, "This should just be an HTML comment:")),
              s(:send, nil, :raw,
                s(:str, "<!-- Comment -->")),
              s(:send, nil, :para,
                s(:str, "Multiline:")),
              s(:send, nil, :raw,
                s(:str, "<!--\nBlah\nBlah\n-->")),
              s(:send, nil, :para,
                s(:str, "Code block:")),
              s(:send, nil, :verb,
                s(:str, "<!-- Comment -->\n")),
              s(:send, nil, :para,
                s(:str, "Just plain comment, with trailing spaces on the line:")),
              s(:send, nil, :raw,
                s(:str, "<!-- foo -->")),
              s(:send, nil, :para,
                s(:str, "Code:")),
              s(:send, nil, :verb,
                s(:str, "<hr />\n")),
              s(:send, nil, :para,
                s(:str, "Hr's:")),
              s(:send, nil, :raw,
                s(:str, "<hr>")),
              s(:send, nil, :raw,
                s(:str, "<hr/>")),
              s(:send, nil, :raw,
                s(:str, "<hr />")),
              s(:send, nil, :raw,
                s(:str, "<hr>")),
              s(:send, nil, :raw,
                s(:str, "<hr/>")),
              s(:send, nil, :raw,
                s(:str, "<hr />")),
              s(:send, nil, :raw,
                s(:str, "<hr class=\"foo\" id=\"bar\" />")),
              s(:send, nil, :raw,
                s(:str, "<hr class=\"foo\" id=\"bar\"/>")),
              s(:send, nil, :raw,
                s(:str, "<hr class=\"foo\" id=\"bar\" >")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_inline_html_comments,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Inline HTML comments.text")))),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Paragraph one.")),
              s(:send, nil, :raw,
                s(:str, "<!-- This is a simple comment -->")),
              s(:send, nil, :raw,
                s(:str, "<!--\n\tThis is another comment.\n-->")),
              s(:send, nil, :para,
                s(:str, "Paragraph two.")),
              s(:send, nil, :raw,
                s(:str, "<!-- one comment block -- -- with two comments -->")),
              s(:send, nil, :para,
                s(:str, "The end.")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_links_inline_style,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Links, inline style.text")))),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Just a {URL}[/url/].")),
              s(:send, nil, :para,
                s(:str, "{URL and title}[/url/].")),
              s(:send, nil, :para,
                s(:str, "{URL and title}[/url/].")),
              s(:send, nil, :para,
                s(:str, "{URL and title}[/url/].")),
              s(:send, nil, :para,
                s(:str, "{URL and title}[/url/].")),
              s(:send, nil, :para,
                s(:str, "{Empty}[].")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_links_reference_style,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Links, reference style.text")))),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Foo {bar}[/url/].")),
              s(:send, nil, :para,
                s(:str, "Foo {bar}[/url/].")),
              s(:send, nil, :para,
                s(:str, "Foo {bar}[/url/].")),
              s(:send, nil, :para,
                s(:str, "With {embedded [brackets]}[/url/].")),
              s(:send, nil, :para,
                s(:str, "Indented {once}[/url].")),
              s(:send, nil, :para,
                s(:str, "Indented {twice}[/url].")),
              s(:send, nil, :para,
                s(:str, "Indented {thrice}[/url].")),
              s(:send, nil, :para,
                s(:str, "Indented [four][] times.")),
              s(:send, nil, :verb,
                s(:str, "[four]: /url\n")),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :para,
                s(:str, "{this}[foo] should work")),
              s(:send, nil, :para,
                s(:str, "So should {this}[foo].")),
              s(:send, nil, :para,
                s(:str, "And {this}[foo].")),
              s(:send, nil, :para,
                s(:str, "And {this}[foo].")),
              s(:send, nil, :para,
                s(:str, "And {this}[foo].")),
              s(:send, nil, :para,
                s(:str, "But not [that] [].")),
              s(:send, nil, :para,
                s(:str, "Nor [that][].")),
              s(:send, nil, :para,
                s(:str, "Nor [that].")),
              s(:send, nil, :para,
                s(:str, "[Something in brackets like {this}[foo] should work]")),
              s(:send, nil, :para,
                s(:str, "[Same with {this}[foo].]")),
              s(:send, nil, :para,
                s(:str, "In this case, {this}[/somethingelse/] points to something else.")),
              s(:send, nil, :para,
                s(:str, "Backslashing should suppress [this] and [this].")),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :para,
                s(:str, "Here's one where the {link breaks}[/url/] across lines.")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Here's another where the {link breaks}[/url/] across lines, "), :+,
                  s(:str, "but with a line-ending space."))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_links_shortcut_references,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Links, shortcut references.text")))),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "This is the {simple case}[/simple].")),
              s(:send, nil, :para,
                s(:str, "This one has a {line break}[/foo].")),
              s(:send, nil, :para,
                s(:str, "This one has a {line break}[/foo] with a line-ending space.")),
              s(:send, nil, :para,
                s(:str, "{this}[/that] and the {other}[/other]")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_literal_quotes_in_titles,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Literal quotes in titles.text")))),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Foo {bar}[/url/].")),
              s(:send, nil, :para,
                s(:str, "Foo {bar}[/url/].")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_markdown_documentation_basics,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Markdown Documentation - Basics.text")))),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :head,
                s(:int, 1),
                s(:str, "Markdown: Basics")),
              s(:send, nil, :raw,
                s(:send,
                  s(:dstr,
                    s(:str, "<ul id=\"ProjectSubmenu\">\n"),
                    s(:str, "    <li><a href=\"/projects/markdown/\" title=\"Markdown Project Page\">Main</a></li>\n"),
                    s(:str, "    <li><a class=\"selected\" title=\"Markdown Basics\">Basics</a></li>\n"),
                    s(:str, "    <li><a href=\"/projects/markdown/syntax\" title=\"Markdown Syntax Documentation\">Syntax</a></li>\n"),
                    s(:str, "    <li><a href=\"/projects/markdown/license\" title=\"Pricing and License Information\">License</a></li>\n"),
                    s(:str, "    <li><a href=\"/projects/markdown/dingus\" title=\"Online Markdown Web Form\">Dingus</a></li>\n"),
                    s(:str, "</ul>\n")), :chomp)),
              s(:send, nil, :head,
                s(:int, 2),
                s(:str, "Getting the Gist of Markdown's Formatting Syntax")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:str, "This page offers a brief overview of what it's like to use Markdown.\n"), :+,
                          s(:str, "The {syntax page}[/projects/markdown/syntax] provides complete, detailed documentation for\n")), :+,
                        s(:str, "every feature, but Markdown should be very easy to pick up simply by\n")), :+,
                      s(:str, "looking at a few examples of it in action. The examples on this page\n")), :+,
                    s(:str, "are written in a before/after style, showing example syntax and the\n")), :+,
                  s(:str, "HTML output produced by Markdown."))),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "It's also helpful to simply try Markdown out; the {Dingus}[/projects/markdown/dingus] is a\n"), :+,
                    s(:str, "web application that allows you type your own Markdown-formatted text\n")), :+,
                  s(:str, "and translate it to XHTML."))),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "<b>Note:</b> This document is itself written using Markdown; you\n"), :+,
                  s(:str, "can {see the source for it by adding '.text' to the URL}[/projects/markdown/basics.text]."))),
              s(:send, nil, :head,
                s(:int, 2),
                s(:str, "Paragraphs, Headers, Blockquotes")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:str, "A paragraph is simply one or more consecutive lines of text, separated\n"), :+,
                      s(:str, "by one or more blank lines. (A blank line is any line that looks like a\n")), :+,
                    s(:str, "blank line -- a line containing nothing spaces or tabs is considered\n")), :+,
                  s(:str, "blank.) Normal paragraphs should not be intended with spaces or tabs."))),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:str, "Markdown offers two styles of headers: _Setext_ and _atx_.\n"), :+,
                          s(:str, "Setext-style headers for <code><h1></code> and <code><h2></code> are created by\n")), :+,
                        s(:str, "\"underlining\" with equal signs (<code>=</code>) and hyphens (<code>-</code>), respectively.\n")), :+,
                      s(:str, "To create an atx-style header, you put 1-6 hash marks (<code>#</code>) at the\n")), :+,
                    s(:str, "beginning of the line -- the number of hashes equals the resulting\n")), :+,
                  s(:str, "HTML header level."))),
              s(:send, nil, :para,
                s(:str, "Blockquotes are indicated using email-style '<code>></code>' angle brackets.")),
              s(:send, nil, :para,
                s(:str, "Markdown:")),
              s(:send, nil, :verb,
                s(:str, "A First Level Header\n"),
                s(:str, "====================\n"),
                s(:str, "\n"),
                s(:str, "A Second Level Header\n"),
                s(:str, "---------------------\n"),
                s(:str, "\n"),
                s(:str, "Now is the time for all good men to come to\n"),
                s(:str, "the aid of their country. This is just a\n"),
                s(:str, "regular paragraph.\n"),
                s(:str, "\n"),
                s(:str, "The quick brown fox jumped over the lazy\n"),
                s(:str, "dog's back.\n"),
                s(:str, "\n"),
                s(:str, "### Header 3\n"),
                s(:str, "\n"),
                s(:str, "> This is a blockquote.\n"),
                s(:str, "> \n"),
                s(:str, "> This is the second paragraph in the blockquote.\n"),
                s(:str, ">\n"),
                s(:str, "> ## This is an H2 in a blockquote\n")),
              s(:send, nil, :para,
                s(:str, "Output:")),
              s(:send, nil, :verb,
                s(:str, "<h1>A First Level Header</h1>\n"),
                s(:str, "\n"),
                s(:str, "<h2>A Second Level Header</h2>\n"),
                s(:str, "\n"),
                s(:str, "<p>Now is the time for all good men to come to\n"),
                s(:str, "the aid of their country. This is just a\n"),
                s(:str, "regular paragraph.</p>\n"),
                s(:str, "\n"),
                s(:str, "<p>The quick brown fox jumped over the lazy\n"),
                s(:str, "dog's back.</p>\n"),
                s(:str, "\n"),
                s(:str, "<h3>Header 3</h3>\n"),
                s(:str, "\n"),
                s(:str, "<blockquote>\n"),
                s(:str, "    <p>This is a blockquote.</p>\n"),
                s(:str, "\n"),
                s(:str, "    <p>This is the second paragraph in the blockquote.</p>\n"),
                s(:str, "\n"),
                s(:str, "    <h2>This is an H2 in a blockquote</h2>\n"),
                s(:str, "</blockquote>\n")),
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Phrase Emphasis")),
              s(:send, nil, :para,
                s(:str, "Markdown uses asterisks and underscores to indicate spans of emphasis.")),
              s(:send, nil, :para,
                s(:str, "Markdown:")),
              s(:send, nil, :verb,
                s(:str, "Some of these words *are emphasized*.\n"),
                s(:str, "Some of these words _are emphasized also_.\n"),
                s(:str, "\n"),
                s(:str, "Use two asterisks for **strong emphasis**.\n"),
                s(:str, "Or, if you prefer, __use two underscores instead__.\n")),
              s(:send, nil, :para,
                s(:str, "Output:")),
              s(:send, nil, :verb,
                s(:str, "<p>Some of these words <em>are emphasized</em>.\n"),
                s(:str, "Some of these words <em>are emphasized also</em>.</p>\n"),
                s(:str, "\n"),
                s(:str, "<p>Use two asterisks for <strong>strong emphasis</strong>.\n"),
                s(:str, "Or, if you prefer, <strong>use two underscores instead</strong>.</p>\n")),
              s(:send, nil, :head,
                s(:int, 2),
                s(:str, "Lists")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "Unordered (bulleted) lists use asterisks, pluses, and hyphens (<code>*</code>,\n"), :+,
                    s(:str, "<code>+</code>, and <code>-</code>) as list markers. These three markers are\n")), :+,
                  s(:str, "interchangable; this:"))),
              s(:send, nil, :verb,
                s(:str, "*   Candy.\n"),
                s(:str, "*   Gum.\n"),
                s(:str, "*   Booze.\n")),
              s(:send, nil, :para,
                s(:str, "this:")),
              s(:send, nil, :verb,
                s(:str, "+   Candy.\n"),
                s(:str, "+   Gum.\n"),
                s(:str, "+   Booze.\n")),
              s(:send, nil, :para,
                s(:str, "and this:")),
              s(:send, nil, :verb,
                s(:str, "-   Candy.\n"),
                s(:str, "-   Gum.\n"),
                s(:str, "-   Booze.\n")),
              s(:send, nil, :para,
                s(:str, "all produce the same output:")),
              s(:send, nil, :verb,
                s(:str, "<ul>\n"),
                s(:str, "<li>Candy.</li>\n"),
                s(:str, "<li>Gum.</li>\n"),
                s(:str, "<li>Booze.</li>\n"),
                s(:str, "</ul>\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Ordered (numbered) lists use regular numbers, followed by periods, as\n"), :+,
                  s(:str, "list markers:"))),
              s(:send, nil, :verb,
                s(:str, "1.  Red\n"),
                s(:str, "2.  Green\n"),
                s(:str, "3.  Blue\n")),
              s(:send, nil, :para,
                s(:str, "Output:")),
              s(:send, nil, :verb,
                s(:str, "<ol>\n"),
                s(:str, "<li>Red</li>\n"),
                s(:str, "<li>Green</li>\n"),
                s(:str, "<li>Blue</li>\n"),
                s(:str, "</ol>\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "If you put blank lines between items, you'll get <code><p></code> tags for the\n"), :+,
                    s(:str, "list item text. You can create multi-paragraph list items by indenting\n")), :+,
                  s(:str, "the paragraphs by 4 spaces or 1 tab:"))),
              s(:send, nil, :verb,
                s(:str, "*   A list item.\n"),
                s(:str, "\n"),
                s(:str, "    With multiple paragraphs.\n"),
                s(:str, "\n"),
                s(:str, "*   Another item in the list.\n")),
              s(:send, nil, :para,
                s(:str, "Output:")),
              s(:send, nil, :verb,
                s(:str, "<ul>\n"),
                s(:str, "<li><p>A list item.</p>\n"),
                s(:str, "<p>With multiple paragraphs.</p></li>\n"),
                s(:str, "<li><p>Another item in the list.</p></li>\n"),
                s(:str, "</ul>\n")),
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Links")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "Markdown supports two styles for creating links: _inline_ and\n"), :+,
                    s(:str, "_reference_. With both styles, you use square brackets to delimit the\n")), :+,
                  s(:str, "text you want to turn into a link."))),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Inline-style links use parentheses immediately after the link text.\n"), :+,
                  s(:str, "For example:"))),
              s(:send, nil, :verb,
                s(:str, "This is an [example link](http://example.com/).\n")),
              s(:send, nil, :para,
                s(:str, "Output:")),
              s(:send, nil, :verb,
                s(:str, "<p>This is an <a href=\"http://example.com/\">\n"),
                s(:str, "example link</a>.</p>\n")),
              s(:send, nil, :para,
                s(:str, "Optionally, you may include a title attribute in the parentheses:")),
              s(:send, nil, :verb,
                s(:str, "This is an [example link](http://example.com/ \"With a Title\").\n")),
              s(:send, nil, :para,
                s(:str, "Output:")),
              s(:send, nil, :verb,
                s(:str, "<p>This is an <a href=\"http://example.com/\" title=\"With a Title\">\n"),
                s(:str, "example link</a>.</p>\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Reference-style links allow you to refer to your links by names, which\n"), :+,
                  s(:str, "you define elsewhere in your document:"))),
              s(:send, nil, :verb,
                s(:str, "I get 10 times more traffic from [Google][1] than from\n"),
                s(:str, "[Yahoo][2] or [MSN][3].\n"),
                s(:str, "\n"),
                s(:str, "[1]: http://google.com/        \"Google\"\n"),
                s(:str, "[2]: http://search.yahoo.com/  \"Yahoo Search\"\n"),
                s(:str, "[3]: http://search.msn.com/    \"MSN Search\"\n")),
              s(:send, nil, :para,
                s(:str, "Output:")),
              s(:send, nil, :verb,
                s(:str, "<p>I get 10 times more traffic from <a href=\"http://google.com/\"\n"),
                s(:str, "title=\"Google\">Google</a> than from <a href=\"http://search.yahoo.com/\"\n"),
                s(:str, "title=\"Yahoo Search\">Yahoo</a> or <a href=\"http://search.msn.com/\"\n"),
                s(:str, "title=\"MSN Search\">MSN</a>.</p>\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "The title attribute is optional. Link names may contain letters,\n"), :+,
                  s(:str, "numbers and spaces, but are _not_ case sensitive:"))),
              s(:send, nil, :verb,
                s(:str, "I start my morning with a cup of coffee and\n"),
                s(:str, "[The New York Times][NY Times].\n"),
                s(:str, "\n"),
                s(:str, "[ny times]: http://www.nytimes.com/\n")),
              s(:send, nil, :para,
                s(:str, "Output:")),
              s(:send, nil, :verb,
                s(:str, "<p>I start my morning with a cup of coffee and\n"),
                s(:str, "<a href=\"http://www.nytimes.com/\">The New York Times</a>.</p>\n")),
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Images")),
              s(:send, nil, :para,
                s(:str, "Image syntax is very much like link syntax.")),
              s(:send, nil, :para,
                s(:str, "Inline (titles are optional):")),
              s(:send, nil, :verb,
                s(:str, "![alt text](/path/to/img.jpg \"Title\")\n")),
              s(:send, nil, :para,
                s(:str, "Reference-style:")),
              s(:send, nil, :verb,
                s(:str, "![alt text][id]\n"),
                s(:str, "\n"),
                s(:str, "[id]: /path/to/img.jpg \"Title\"\n")),
              s(:send, nil, :para,
                s(:str, "Both of the above examples produce the same output:")),
              s(:send, nil, :verb,
                s(:str, "<img src=\"/path/to/img.jpg\" alt=\"alt text\" title=\"Title\" />\n")),
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Code")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:str, "In a regular paragraph, you can create code span by wrapping text in\n"), :+,
                      s(:str, "backtick quotes. Any ampersands (<code>&</code>) and angle brackets (<code><</code> or\n")), :+,
                    s(:str, "<code>></code>) will automatically be translated into HTML entities. This makes\n")), :+,
                  s(:str, "it easy to use Markdown to write about HTML example code:"))),
              s(:send, nil, :verb,
                s(:str, "I strongly recommend against using any `<blink>` tags.\n"),
                s(:str, "\n"),
                s(:str, "I wish SmartyPants used named entities like `&mdash;`\n"),
                s(:str, "instead of decimal-encoded entites like `&#8212;`.\n")),
              s(:send, nil, :para,
                s(:str, "Output:")),
              s(:send, nil, :verb,
                s(:str, "<p>I strongly recommend against using any\n"),
                s(:str, "<code>&lt;blink&gt;</code> tags.</p>\n"),
                s(:str, "\n"),
                s(:str, "<p>I wish SmartyPants used named entities like\n"),
                s(:str, "<code>&amp;mdash;</code> instead of decimal-encoded\n"),
                s(:str, "entites like <code>&amp;#8212;</code>.</p>\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "To specify an entire block of pre-formatted code, indent every line of\n"), :+,
                    s(:str, "the block by 4 spaces or 1 tab. Just like with code spans, <code>&</code>, <code><</code>,\n")), :+,
                  s(:str, "and <code>></code> characters will be escaped automatically."))),
              s(:send, nil, :para,
                s(:str, "Markdown:")),
              s(:send, nil, :verb,
                s(:str, "If you want your page to validate under XHTML 1.0 Strict,\n"),
                s(:str, "you've got to put paragraph tags in your blockquotes:\n"),
                s(:str, "\n"),
                s(:str, "    <blockquote>\n"),
                s(:str, "        <p>For example.</p>\n"),
                s(:str, "    </blockquote>\n")),
              s(:send, nil, :para,
                s(:str, "Output:")),
              s(:send, nil, :verb,
                s(:str, "<p>If you want your page to validate under XHTML 1.0 Strict,\n"),
                s(:str, "you've got to put paragraph tags in your blockquotes:</p>\n"),
                s(:str, "\n"),
                s(:str, "<pre><code>&lt;blockquote&gt;\n"),
                s(:str, "    &lt;p&gt;For example.&lt;/p&gt;\n"),
                s(:str, "&lt;/blockquote&gt;\n"),
                s(:str, "</code></pre>\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_markdown_documentation_syntax,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Markdown Documentation - Syntax.text")))),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :head,
                s(:int, 1),
                s(:str, "Markdown: Syntax")),
              s(:send, nil, :raw,
                s(:send,
                  s(:dstr,
                    s(:str, "<ul id=\"ProjectSubmenu\">\n"),
                    s(:str, "    <li><a href=\"/projects/markdown/\" title=\"Markdown Project Page\">Main</a></li>\n"),
                    s(:str, "    <li><a href=\"/projects/markdown/basics\" title=\"Markdown Basics\">Basics</a></li>\n"),
                    s(:str, "    <li><a class=\"selected\" title=\"Markdown Syntax Documentation\">Syntax</a></li>\n"),
                    s(:str, "    <li><a href=\"/projects/markdown/license\" title=\"Pricing and License Information\">License</a></li>\n"),
                    s(:str, "    <li><a href=\"/projects/markdown/dingus\" title=\"Online Markdown Web Form\">Dingus</a></li>\n"),
                    s(:str, "</ul>\n")), :chomp)),
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "{Overview}[#overview]")),
                  s(:send, nil, :list,
                    s(:sym, :BULLET),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "{Philosophy}[#philosophy]"))),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "{Inline HTML}[#html]"))),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "{Automatic Escaping for Special Characters}[#autoescape]"))))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "{Block Elements}[#block]")),
                  s(:send, nil, :list,
                    s(:sym, :BULLET),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "{Paragraphs and Line Breaks}[#p]"))),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "{Headers}[#header]"))),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "{Blockquotes}[#blockquote]"))),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "{Lists}[#list]"))),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "{Code Blocks}[#precode]"))),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "{Horizontal Rules}[#hr]"))))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "{Span Elements}[#span]")),
                  s(:send, nil, :list,
                    s(:sym, :BULLET),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "{Links}[#link]"))),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "{Emphasis}[#em]"))),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "{Code}[#code]"))),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "{Images}[#img]"))))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "{Miscellaneous}[#misc]")),
                  s(:send, nil, :list,
                    s(:sym, :BULLET),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "{Backslash Escapes}[#backslash]"))),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "{Automatic Links}[#autolink]")))))),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "<b>Note:</b> This document is itself written using Markdown; you\n"), :+,
                  s(:str, "can {see the source for it by adding '.text' to the URL}[/projects/markdown/syntax.text]."))),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :raw,
                s(:str, "<h2 id=\"overview\">Overview</h2>")),
              s(:send, nil, :raw,
                s(:str, "<h3 id=\"philosophy\">Philosophy</h3>")),
              s(:send, nil, :para,
                s(:str, "Markdown is intended to be as easy-to-read and easy-to-write as is feasible.")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:str, "Readability, however, is emphasized above all else. A Markdown-formatted\n"), :+,
                            s(:str, "document should be publishable as-is, as plain text, without looking\n")), :+,
                          s(:str, "like it's been marked up with tags or formatting instructions. While\n")), :+,
                        s(:str, "Markdown's syntax has been influenced by several existing text-to-HTML\n")), :+,
                      s(:str, "filters -- including {Setext}[http://docutils.sourceforge.net/mirror/setext.html], {atx}[http://www.aaronsw.com/2002/atx/], {Textile}[http://textism.com/tools/textile/], {reStructuredText}[http://docutils.sourceforge.net/rst.html],\n")), :+,
                    s(:str, "{Grutatext}[http://www.triptico.com/software/grutatxt.html], and {EtText}[http://ettext.taint.org/doc/] -- the single biggest source of\n")), :+,
                  s(:str, "inspiration for Markdown's syntax is the format of plain text email."))),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:str, "To this end, Markdown's syntax is comprised entirely of punctuation\n"), :+,
                          s(:str, "characters, which punctuation characters have been carefully chosen so\n")), :+,
                        s(:str, "as to look like what they mean. E.g., asterisks around a word actually\n")), :+,
                      s(:str, "look like *emphasis*. Markdown lists look like, well, lists. Even\n")), :+,
                    s(:str, "blockquotes look like quoted passages of text, assuming you've ever\n")), :+,
                  s(:str, "used email."))),
              s(:send, nil, :raw,
                s(:str, "<h3 id=\"html\">Inline HTML</h3>")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Markdown's syntax is intended for one purpose: to be used as a\n"), :+,
                  s(:str, "format for _writing_ for the web."))),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:str, "Markdown is not a replacement for HTML, or even close to it. Its\n"), :+,
                              s(:str, "syntax is very small, corresponding only to a very small subset of\n")), :+,
                            s(:str, "HTML tags. The idea is _not_ to create a syntax that makes it easier\n")), :+,
                          s(:str, "to insert HTML tags. In my opinion, HTML tags are already easy to\n")), :+,
                        s(:str, "insert. The idea for Markdown is to make it easy to read, write, and\n")), :+,
                      s(:str, "edit prose. HTML is a _publishing_ format; Markdown is a _writing_\n")), :+,
                    s(:str, "format. Thus, Markdown's formatting syntax only addresses issues that\n")), :+,
                  s(:str, "can be conveyed in plain text."))),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:str, "For any markup that is not covered by Markdown's syntax, you simply\n"), :+,
                      s(:str, "use HTML itself. There's no need to preface it or delimit it to\n")), :+,
                    s(:str, "indicate that you're switching from Markdown to HTML; you just use\n")), :+,
                  s(:str, "the tags."))),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:str, "The only restrictions are that block-level HTML elements -- e.g. <code><div></code>,\n"), :+,
                        s(:str, "<code><table></code>, <code><pre></code>, <code><p></code>, etc. -- must be separated from surrounding\n")), :+,
                      s(:str, "content by blank lines, and the start and end tags of the block should\n")), :+,
                    s(:str, "not be indented with tabs or spaces. Markdown is smart enough not\n")), :+,
                  s(:str, "to add extra (unwanted) <code><p></code> tags around HTML block-level tags."))),
              s(:send, nil, :para,
                s(:str, "For example, to add an HTML table to a Markdown article:")),
              s(:send, nil, :verb,
                s(:str, "This is a regular paragraph.\n"),
                s(:str, "\n"),
                s(:str, "<table>\n"),
                s(:str, "    <tr>\n"),
                s(:str, "        <td>Foo</td>\n"),
                s(:str, "    </tr>\n"),
                s(:str, "</table>\n"),
                s(:str, "\n"),
                s(:str, "This is another regular paragraph.\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "Note that Markdown formatting syntax is not processed within block-level\n"), :+,
                    s(:str, "HTML tags. E.g., you can't use Markdown-style <code>*emphasis*</code> inside an\n")), :+,
                  s(:str, "HTML block."))),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:str, "Span-level HTML tags -- e.g. <code><span></code>, <code><cite></code>, or <code><del></code> -- can be\n"), :+,
                        s(:str, "used anywhere in a Markdown paragraph, list item, or header. If you\n")), :+,
                      s(:str, "want, you can even use HTML tags instead of Markdown formatting; e.g. if\n")), :+,
                    s(:str, "you'd prefer to use HTML <code><a></code> or <code><img></code> tags instead of Markdown's\n")), :+,
                  s(:str, "link or image syntax, go right ahead."))),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Unlike block-level HTML tags, Markdown syntax _is_ processed within\n"), :+,
                  s(:str, "span-level tags."))),
              s(:send, nil, :raw,
                s(:str, "<h3 id=\"autoescape\">Automatic Escaping for Special Characters</h3>")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:str, "In HTML, there are two characters that demand special treatment: <code><</code>\n"), :+,
                        s(:str, "and <code>&</code>. Left angle brackets are used to start tags; ampersands are\n")), :+,
                      s(:str, "used to denote HTML entities. If you want to use them as literal\n")), :+,
                    s(:str, "characters, you must escape them as entities, e.g. <code>&lt;</code>, and\n")), :+,
                  s(:str, "<code>&amp;</code>."))),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "Ampersands in particular are bedeviling for web writers. If you want to\n"), :+,
                    s(:str, "write about 'AT&T', you need to write '<code>AT&amp;T</code>'. You even need to\n")), :+,
                  s(:str, "escape ampersands within URLs. Thus, if you want to link to:"))),
              s(:send, nil, :verb,
                s(:str, "http://images.google.com/images?num=30&q=larry+bird\n")),
              s(:send, nil, :para,
                s(:str, "you need to encode the URL as:")),
              s(:send, nil, :verb,
                s(:str, "http://images.google.com/images?num=30&amp;q=larry+bird\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "in your anchor tag <code>href</code> attribute. Needless to say, this is easy to\n"), :+,
                    s(:str, "forget, and is probably the single most common source of HTML validation\n")), :+,
                  s(:str, "errors in otherwise well-marked-up web sites."))),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:str, "Markdown allows you to use these characters naturally, taking care of\n"), :+,
                      s(:str, "all the necessary escaping for you. If you use an ampersand as part of\n")), :+,
                    s(:str, "an HTML entity, it remains unchanged; otherwise it will be translated\n")), :+,
                  s(:str, "into <code>&amp;</code>."))),
              s(:send, nil, :para,
                s(:str, "So, if you want to include a copyright symbol in your article, you can write:")),
              s(:send, nil, :verb,
                s(:str, "&copy;\n")),
              s(:send, nil, :para,
                s(:str, "and Markdown will leave it alone. But if you write:")),
              s(:send, nil, :verb,
                s(:str, "AT&T\n")),
              s(:send, nil, :para,
                s(:str, "Markdown will translate it to:")),
              s(:send, nil, :verb,
                s(:str, "AT&amp;T\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "Similarly, because Markdown supports {inline HTML}[#html], if you use\n"), :+,
                    s(:str, "angle brackets as delimiters for HTML tags, Markdown will treat them as\n")), :+,
                  s(:str, "such. But if you write:"))),
              s(:send, nil, :verb,
                s(:str, "4 < 5\n")),
              s(:send, nil, :para,
                s(:str, "Markdown will translate it to:")),
              s(:send, nil, :verb,
                s(:str, "4 &lt; 5\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:str, "However, inside Markdown code spans and blocks, angle brackets and\n"), :+,
                        s(:str, "ampersands are _always_ encoded automatically. This makes it easy to use\n")), :+,
                      s(:str, "Markdown to write about HTML code. (As opposed to raw HTML, which is a\n")), :+,
                    s(:str, "terrible format for writing about HTML syntax, because every single <code><</code>\n")), :+,
                  s(:str, "and <code>&</code> in your example code needs to be escaped.)"))),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :raw,
                s(:str, "<h2 id=\"block\">Block Elements</h2>")),
              s(:send, nil, :raw,
                s(:str, "<h3 id=\"p\">Paragraphs and Line Breaks</h3>")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:str, "A paragraph is simply one or more consecutive lines of text, separated\n"), :+,
                      s(:str, "by one or more blank lines. (A blank line is any line that looks like a\n")), :+,
                    s(:str, "blank line -- a line containing nothing but spaces or tabs is considered\n")), :+,
                  s(:str, "blank.) Normal paragraphs should not be intended with spaces or tabs."))),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:str, "The implication of the \"one or more consecutive lines of text\" rule is\n"), :+,
                        s(:str, "that Markdown supports \"hard-wrapped\" text paragraphs. This differs\n")), :+,
                      s(:str, "significantly from most other text-to-HTML formatters (including Movable\n")), :+,
                    s(:str, "Type's \"Convert Line Breaks\" option) which translate every line break\n")), :+,
                  s(:str, "character in a paragraph into a <code><br /></code> tag."))),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "When you _do_ want to insert a <code><br /></code> break tag using Markdown, you\n"), :+,
                  s(:str, "end a line with two or more spaces, then type return."))),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:str, "Yes, this takes a tad more effort to create a <code><br /></code>, but a simplistic\n"), :+,
                      s(:str, "\"every line break is a <code><br /></code>\" rule wouldn't work for Markdown.\n")), :+,
                    s(:str, "Markdown's email-style {blockquoting}[#blockquote] and multi-paragraph {list items}[#list]\n")), :+,
                  s(:str, "work best -- and look better -- when you format them with hard breaks."))),
              s(:send, nil, :raw,
                s(:str, "<h3 id=\"header\">Headers</h3>")),
              s(:send, nil, :para,
                s(:str, "Markdown supports two styles of headers, {Setext}[http://docutils.sourceforge.net/mirror/setext.html] and {atx}[http://www.aaronsw.com/2002/atx/].")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Setext-style headers are \"underlined\" using equal signs (for first-level\n"), :+,
                  s(:str, "headers) and dashes (for second-level headers). For example:"))),
              s(:send, nil, :verb,
                s(:str, "This is an H1\n"),
                s(:str, "=============\n"),
                s(:str, "\n"),
                s(:str, "This is an H2\n"),
                s(:str, "-------------\n")),
              s(:send, nil, :para,
                s(:str, "Any number of underlining <code>=</code>'s or <code>-</code>'s will work.")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Atx-style headers use 1-6 hash characters at the start of the line,\n"), :+,
                  s(:str, "corresponding to header levels 1-6. For example:"))),
              s(:send, nil, :verb,
                s(:str, "# This is an H1\n"),
                s(:str, "\n"),
                s(:str, "## This is an H2\n"),
                s(:str, "\n"),
                s(:str, "###### This is an H6\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:str, "Optionally, you may \"close\" atx-style headers. This is purely\n"), :+,
                        s(:str, "cosmetic -- you can use this if you think it looks better. The\n")), :+,
                      s(:str, "closing hashes don't even need to match the number of hashes\n")), :+,
                    s(:str, "used to open the header. (The number of opening hashes\n")), :+,
                  s(:str, "determines the header level.) :"))),
              s(:send, nil, :verb,
                s(:str, "# This is an H1 #\n"),
                s(:str, "\n"),
                s(:str, "## This is an H2 ##\n"),
                s(:str, "\n"),
                s(:str, "### This is an H3 ######\n")),
              s(:send, nil, :raw,
                s(:str, "<h3 id=\"blockquote\">Blockquotes</h3>")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:str, "Markdown uses email-style <code>></code> characters for blockquoting. If you're\n"), :+,
                      s(:str, "familiar with quoting passages of text in an email message, then you\n")), :+,
                    s(:str, "know how to create a blockquote in Markdown. It looks best if you hard\n")), :+,
                  s(:str, "wrap the text and put a <code>></code> before every line:"))),
              s(:send, nil, :verb,
                s(:str, "> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n"),
                s(:str, "> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n"),
                s(:str, "> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n"),
                s(:str, "> \n"),
                s(:str, "> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n"),
                s(:str, "> id sem consectetuer libero luctus adipiscing.\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Markdown allows you to be lazy and only put the <code>></code> before the first\n"), :+,
                  s(:str, "line of a hard-wrapped paragraph:"))),
              s(:send, nil, :verb,
                s(:str, "> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n"),
                s(:str, "consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n"),
                s(:str, "Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n"),
                s(:str, "\n"),
                s(:str, "> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n"),
                s(:str, "id sem consectetuer libero luctus adipiscing.\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by\n"), :+,
                  s(:str, "adding additional levels of <code>></code>:"))),
              s(:send, nil, :verb,
                s(:str, "> This is the first level of quoting.\n"),
                s(:str, ">\n"),
                s(:str, "> > This is nested blockquote.\n"),
                s(:str, ">\n"),
                s(:str, "> Back to the first level.\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Blockquotes can contain other Markdown elements, including headers, lists,\n"), :+,
                  s(:str, "and code blocks:"))),
              s(:send, nil, :verb,
                s(:str, "> ## This is a header.\n"),
                s(:str, "> \n"),
                s(:str, "> 1.   This is the first list item.\n"),
                s(:str, "> 2.   This is the second list item.\n"),
                s(:str, "> \n"),
                s(:str, "> Here's some example code:\n"),
                s(:str, "> \n"),
                s(:str, ">     return shell_exec(\"echo $input | $markdown_script\");\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "Any decent text editor should make email-style quoting easy. For\n"), :+,
                    s(:str, "example, with BBEdit, you can make a selection and choose Increase\n")), :+,
                  s(:str, "Quote Level from the Text menu."))),
              s(:send, nil, :raw,
                s(:str, "<h3 id=\"list\">Lists</h3>")),
              s(:send, nil, :para,
                s(:str, "Markdown supports ordered (numbered) and unordered (bulleted) lists.")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Unordered lists use asterisks, pluses, and hyphens -- interchangably\n"), :+,
                  s(:str, "-- as list markers:"))),
              s(:send, nil, :verb,
                s(:str, "*   Red\n"),
                s(:str, "*   Green\n"),
                s(:str, "*   Blue\n")),
              s(:send, nil, :para,
                s(:str, "is equivalent to:")),
              s(:send, nil, :verb,
                s(:str, "+   Red\n"),
                s(:str, "+   Green\n"),
                s(:str, "+   Blue\n")),
              s(:send, nil, :para,
                s(:str, "and:")),
              s(:send, nil, :verb,
                s(:str, "-   Red\n"),
                s(:str, "-   Green\n"),
                s(:str, "-   Blue\n")),
              s(:send, nil, :para,
                s(:str, "Ordered lists use numbers followed by periods:")),
              s(:send, nil, :verb,
                s(:str, "1.  Bird\n"),
                s(:str, "2.  McHale\n"),
                s(:str, "3.  Parish\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "It's important to note that the actual numbers you use to mark the\n"), :+,
                    s(:str, "list have no effect on the HTML output Markdown produces. The HTML\n")), :+,
                  s(:str, "Markdown produces from the above list is:"))),
              s(:send, nil, :verb,
                s(:str, "<ol>\n"),
                s(:str, "<li>Bird</li>\n"),
                s(:str, "<li>McHale</li>\n"),
                s(:str, "<li>Parish</li>\n"),
                s(:str, "</ol>\n")),
              s(:send, nil, :para,
                s(:str, "If you instead wrote the list in Markdown like this:")),
              s(:send, nil, :verb,
                s(:str, "1.  Bird\n"),
                s(:str, "1.  McHale\n"),
                s(:str, "1.  Parish\n")),
              s(:send, nil, :para,
                s(:str, "or even:")),
              s(:send, nil, :verb,
                s(:str, "3. Bird\n"),
                s(:str, "1. McHale\n"),
                s(:str, "8. Parish\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:str, "you'd get the exact same HTML output. The point is, if you want to,\n"), :+,
                      s(:str, "you can use ordinal numbers in your ordered Markdown lists, so that\n")), :+,
                    s(:str, "the numbers in your source match the numbers in your published HTML.\n")), :+,
                  s(:str, "But if you want to be lazy, you don't have to."))),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "If you do use lazy list numbering, however, you should still start the\n"), :+,
                    s(:str, "list with the number 1. At some point in the future, Markdown may support\n")), :+,
                  s(:str, "starting ordered lists at an arbitrary number."))),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "List markers typically start at the left margin, but may be indented by\n"), :+,
                    s(:str, "up to three spaces. List markers must be followed by one or more spaces\n")), :+,
                  s(:str, "or a tab."))),
              s(:send, nil, :para,
                s(:str, "To make lists look nice, you can wrap items with hanging indents:")),
              s(:send, nil, :verb,
                s(:str, "*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n"),
                s(:str, "    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\n"),
                s(:str, "    viverra nec, fringilla in, laoreet vitae, risus.\n"),
                s(:str, "*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n"),
                s(:str, "    Suspendisse id sem consectetuer libero luctus adipiscing.\n")),
              s(:send, nil, :para,
                s(:str, "But if you want to be lazy, you don't have to:")),
              s(:send, nil, :verb,
                s(:str, "*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n"),
                s(:str, "Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\n"),
                s(:str, "viverra nec, fringilla in, laoreet vitae, risus.\n"),
                s(:str, "*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n"),
                s(:str, "Suspendisse id sem consectetuer libero luctus adipiscing.\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "If list items are separated by blank lines, Markdown will wrap the\n"), :+,
                  s(:str, "items in <code><p></code> tags in the HTML output. For example, this input:"))),
              s(:send, nil, :verb,
                s(:str, "*   Bird\n"),
                s(:str, "*   Magic\n")),
              s(:send, nil, :para,
                s(:str, "will turn into:")),
              s(:send, nil, :verb,
                s(:str, "<ul>\n"),
                s(:str, "<li>Bird</li>\n"),
                s(:str, "<li>Magic</li>\n"),
                s(:str, "</ul>\n")),
              s(:send, nil, :para,
                s(:str, "But this:")),
              s(:send, nil, :verb,
                s(:str, "*   Bird\n"),
                s(:str, "\n"),
                s(:str, "*   Magic\n")),
              s(:send, nil, :para,
                s(:str, "will turn into:")),
              s(:send, nil, :verb,
                s(:str, "<ul>\n"),
                s(:str, "<li><p>Bird</p></li>\n"),
                s(:str, "<li><p>Magic</p></li>\n"),
                s(:str, "</ul>\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "List items may consist of multiple paragraphs. Each subsequent\n"), :+,
                    s(:str, "paragraph in a list item must be intended by either 4 spaces\n")), :+,
                  s(:str, "or one tab:"))),
              s(:send, nil, :verb,
                s(:str, "1.  This is a list item with two paragraphs. Lorem ipsum dolor\n"),
                s(:str, "    sit amet, consectetuer adipiscing elit. Aliquam hendrerit\n"),
                s(:str, "    mi posuere lectus.\n"),
                s(:str, "\n"),
                s(:str, "    Vestibulum enim wisi, viverra nec, fringilla in, laoreet\n"),
                s(:str, "    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum\n"),
                s(:str, "    sit amet velit.\n"),
                s(:str, "\n"),
                s(:str, "2.  Suspendisse id sem consectetuer libero luctus adipiscing.\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "It looks nice if you indent every line of the subsequent\n"), :+,
                    s(:str, "paragraphs, but here again, Markdown will allow you to be\n")), :+,
                  s(:str, "lazy:"))),
              s(:send, nil, :verb,
                s(:str, "*   This is a list item with two paragraphs.\n"),
                s(:str, "\n"),
                s(:str, "    This is the second paragraph in the list item. You're\n"),
                s(:str, "only required to indent the first line. Lorem ipsum dolor\n"),
                s(:str, "sit amet, consectetuer adipiscing elit.\n"),
                s(:str, "\n"),
                s(:str, "*   Another item in the same list.\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "To put a blockquote within a list item, the blockquote's <code>></code>\n"), :+,
                  s(:str, "delimiters need to be indented:"))),
              s(:send, nil, :verb,
                s(:str, "*   A list item with a blockquote:\n"),
                s(:str, "\n"),
                s(:str, "    > This is a blockquote\n"),
                s(:str, "    > inside a list item.\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "To put a code block within a list item, the code block needs\n"), :+,
                  s(:str, "to be indented _twice_ -- 8 spaces or two tabs:"))),
              s(:send, nil, :verb,
                s(:str, "*   A list item with a code block:\n"),
                s(:str, "\n"),
                s(:str, "        <code goes here>\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "It's worth noting that it's possible to trigger an ordered list by\n"), :+,
                  s(:str, "accident, by writing something like this:"))),
              s(:send, nil, :verb,
                s(:str, "1986. What a great season.\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "In other words, a <em>number-period-space</em> sequence at the beginning of a\n"), :+,
                  s(:str, "line. To avoid this, you can backslash-escape the period:"))),
              s(:send, nil, :verb,
                s(:str, "1986\\. What a great season.\n")),
              s(:send, nil, :raw,
                s(:str, "<h3 id=\"precode\">Code Blocks</h3>")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:str, "Pre-formatted code blocks are used for writing about programming or\n"), :+,
                      s(:str, "markup source code. Rather than forming normal paragraphs, the lines\n")), :+,
                    s(:str, "of a code block are interpreted literally. Markdown wraps a code block\n")), :+,
                  s(:str, "in both <code><pre></code> and <code><code></code> tags."))),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "To produce a code block in Markdown, simply indent every line of the\n"), :+,
                  s(:str, "block by at least 4 spaces or 1 tab. For example, given this input:"))),
              s(:send, nil, :verb,
                s(:str, "This is a normal paragraph:\n"),
                s(:str, "\n"),
                s(:str, "    This is a code block.\n")),
              s(:send, nil, :para,
                s(:str, "Markdown will generate:")),
              s(:send, nil, :verb,
                s(:str, "<p>This is a normal paragraph:</p>\n"),
                s(:str, "\n"),
                s(:str, "<pre><code>This is a code block.\n"),
                s(:str, "</code></pre>\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "One level of indentation -- 4 spaces or 1 tab -- is removed from each\n"), :+,
                  s(:str, "line of the code block. For example, this:"))),
              s(:send, nil, :verb,
                s(:str, "Here is an example of AppleScript:\n"),
                s(:str, "\n"),
                s(:str, "    tell application \"Foo\"\n"),
                s(:str, "        beep\n"),
                s(:str, "    end tell\n")),
              s(:send, nil, :para,
                s(:str, "will turn into:")),
              s(:send, nil, :verb,
                s(:str, "<p>Here is an example of AppleScript:</p>\n"),
                s(:str, "\n"),
                s(:str, "<pre><code>tell application \"Foo\"\n"),
                s(:str, "    beep\n"),
                s(:str, "end tell\n"),
                s(:str, "</code></pre>\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "A code block continues until it reaches a line that is not indented\n"), :+,
                  s(:str, "(or the end of the article)."))),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:str, "Within a code block, ampersands (<code>&</code>) and angle brackets (<code><</code> and <code>></code>)\n"), :+,
                        s(:str, "are automatically converted into HTML entities. This makes it very\n")), :+,
                      s(:str, "easy to include example HTML source code using Markdown -- just paste\n")), :+,
                    s(:str, "it and indent it, and Markdown will handle the hassle of encoding the\n")), :+,
                  s(:str, "ampersands and angle brackets. For example, this:"))),
              s(:send, nil, :verb,
                s(:str, "    <div class=\"footer\">\n"),
                s(:str, "        &copy; 2004 Foo Corporation\n"),
                s(:str, "    </div>\n")),
              s(:send, nil, :para,
                s(:str, "will turn into:")),
              s(:send, nil, :verb,
                s(:str, "<pre><code>&lt;div class=\"footer\"&gt;\n"),
                s(:str, "    &amp;copy; 2004 Foo Corporation\n"),
                s(:str, "&lt;/div&gt;\n"),
                s(:str, "</code></pre>\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "Regular Markdown syntax is not processed within code blocks. E.g.,\n"), :+,
                    s(:str, "asterisks are just literal asterisks within a code block. This means\n")), :+,
                  s(:str, "it's also easy to use Markdown to write about Markdown's own syntax."))),
              s(:send, nil, :raw,
                s(:str, "<h3 id=\"hr\">Horizontal Rules</h3>")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:str, "You can produce a horizontal rule tag (<code><hr /></code>) by placing three or\n"), :+,
                      s(:str, "more hyphens, asterisks, or underscores on a line by themselves. If you\n")), :+,
                    s(:str, "wish, you may use spaces between the hyphens or asterisks. Each of the\n")), :+,
                  s(:str, "following lines will produce a horizontal rule:"))),
              s(:send, nil, :verb,
                s(:str, "* * *\n"),
                s(:str, "\n"),
                s(:str, "***\n"),
                s(:str, "\n"),
                s(:str, "*****\n"),
                s(:str, "\n"),
                s(:str, "- - -\n"),
                s(:str, "\n"),
                s(:str, "---------------------------------------\n"),
                s(:str, "\n"),
                s(:str, "_ _ _\n")),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :raw,
                s(:str, "<h2 id=\"span\">Span Elements</h2>")),
              s(:send, nil, :raw,
                s(:str, "<h3 id=\"link\">Links</h3>")),
              s(:send, nil, :para,
                s(:str, "Markdown supports two style of links: _inline_ and _reference_.")),
              s(:send, nil, :para,
                s(:str, "In both styles, the link text is delimited by [square brackets].")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:str, "To create an inline link, use a set of regular parentheses immediately\n"), :+,
                      s(:str, "after the link text's closing square bracket. Inside the parentheses,\n")), :+,
                    s(:str, "put the URL where you want the link to point, along with an _optional_\n")), :+,
                  s(:str, "title for the link, surrounded in quotes. For example:"))),
              s(:send, nil, :verb,
                s(:str, "This is [an example](http://example.com/ \"Title\") inline link.\n"),
                s(:str, "\n"),
                s(:str, "[This link](http://example.net/) has no title attribute.\n")),
              s(:send, nil, :para,
                s(:str, "Will produce:")),
              s(:send, nil, :verb,
                s(:str, "<p>This is <a href=\"http://example.com/\" title=\"Title\">\n"),
                s(:str, "an example</a> inline link.</p>\n"),
                s(:str, "\n"),
                s(:str, "<p><a href=\"http://example.net/\">This link</a> has no\n"),
                s(:str, "title attribute.</p>\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "If you're referring to a local resource on the same server, you can\n"), :+,
                  s(:str, "use relative paths:"))),
              s(:send, nil, :verb,
                s(:str, "See my [About](/about/) page for details.\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Reference-style links use a second set of square brackets, inside\n"), :+,
                  s(:str, "which you place a label of your choosing to identify the link:"))),
              s(:send, nil, :verb,
                s(:str, "This is [an example][id] reference-style link.\n")),
              s(:send, nil, :para,
                s(:str, "You can optionally use a space to separate the sets of brackets:")),
              s(:send, nil, :verb,
                s(:str, "This is [an example] [id] reference-style link.\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Then, anywhere in the document, you define your link label like this,\n"), :+,
                  s(:str, "on a line by itself:"))),
              s(:send, nil, :verb,
                s(:str, "[id]: http://example.com/  \"Optional Title Here\"\n")),
              s(:send, nil, :para,
                s(:str, "That is:")),
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:send,
                      s(:str, "Square brackets containing the link identifier (optionally\n"), :+,
                      s(:str, "indented from the left margin using up to three spaces);")))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "followed by a colon;"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "followed by one or more spaces (or tabs);"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "followed by the URL for the link;"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:send,
                      s(:str, "optionally followed by a title attribute for the link, enclosed\n"), :+,
                      s(:str, "in double or single quotes."))))),
              s(:send, nil, :para,
                s(:str, "The link URL may, optionally, be surrounded by angle brackets:")),
              s(:send, nil, :verb,
                s(:str, "[id]: <http://example.com/>  \"Optional Title Here\"\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "You can put the title attribute on the next line and use extra spaces\n"), :+,
                  s(:str, "or tabs for padding, which tends to look better with longer URLs:"))),
              s(:send, nil, :verb,
                s(:str, "[id]: http://example.com/longish/path/to/resource/here\n"),
                s(:str, "    \"Optional Title Here\"\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Link definitions are only used for creating links during Markdown\n"), :+,
                  s(:str, "processing, and are stripped from your document in the HTML output."))),
              s(:send, nil, :para,
                s(:str, "Link definition names may constist of letters, numbers, spaces, and punctuation -- but they are _not_ case sensitive. E.g. these two links:")),
              s(:send, nil, :verb,
                s(:str, "[link text][a]\n"),
                s(:str, "[link text][A]\n")),
              s(:send, nil, :para,
                s(:str, "are equivalent.")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:str, "The <em>implicit link name</em> shortcut allows you to omit the name of the\n"), :+,
                      s(:str, "link, in which case the link text itself is used as the name.\n")), :+,
                    s(:str, "Just use an empty set of square brackets -- e.g., to link the word\n")), :+,
                  s(:str, "\"Google\" to the google.com web site, you could simply write:"))),
              s(:send, nil, :verb,
                s(:str, "[Google][]\n")),
              s(:send, nil, :para,
                s(:str, "And then define the link:")),
              s(:send, nil, :verb,
                s(:str, "[Google]: http://google.com/\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Because link names may contain spaces, this shortcut even works for\n"), :+,
                  s(:str, "multiple words in the link text:"))),
              s(:send, nil, :verb,
                s(:str, "Visit [Daring Fireball][] for more information.\n")),
              s(:send, nil, :para,
                s(:str, "And then define the link:")),
              s(:send, nil, :verb,
                s(:str, "[Daring Fireball]: http://daringfireball.net/\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:str, "Link definitions can be placed anywhere in your Markdown document. I\n"), :+,
                      s(:str, "tend to put them immediately after each paragraph in which they're\n")), :+,
                    s(:str, "used, but if you want, you can put them all at the end of your\n")), :+,
                  s(:str, "document, sort of like footnotes."))),
              s(:send, nil, :para,
                s(:str, "Here's an example of reference links in action:")),
              s(:send, nil, :verb,
                s(:str, "I get 10 times more traffic from [Google] [1] than from\n"),
                s(:str, "[Yahoo] [2] or [MSN] [3].\n"),
                s(:str, "\n"),
                s(:str, "  [1]: http://google.com/        \"Google\"\n"),
                s(:str, "  [2]: http://search.yahoo.com/  \"Yahoo Search\"\n"),
                s(:str, "  [3]: http://search.msn.com/    \"MSN Search\"\n")),
              s(:send, nil, :para,
                s(:str, "Using the implicit link name shortcut, you could instead write:")),
              s(:send, nil, :verb,
                s(:str, "I get 10 times more traffic from [Google][] than from\n"),
                s(:str, "[Yahoo][] or [MSN][].\n"),
                s(:str, "\n"),
                s(:str, "  [google]: http://google.com/        \"Google\"\n"),
                s(:str, "  [yahoo]:  http://search.yahoo.com/  \"Yahoo Search\"\n"),
                s(:str, "  [msn]:    http://search.msn.com/    \"MSN Search\"\n")),
              s(:send, nil, :para,
                s(:str, "Both of the above examples will produce the following HTML output:")),
              s(:send, nil, :verb,
                s(:str, "<p>I get 10 times more traffic from <a href=\"http://google.com/\"\n"),
                s(:str, "title=\"Google\">Google</a> than from\n"),
                s(:str, "<a href=\"http://search.yahoo.com/\" title=\"Yahoo Search\">Yahoo</a>\n"),
                s(:str, "or <a href=\"http://search.msn.com/\" title=\"MSN Search\">MSN</a>.</p>\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "For comparison, here is the same paragraph written using\n"), :+,
                  s(:str, "Markdown's inline link style:"))),
              s(:send, nil, :verb,
                s(:str, "I get 10 times more traffic from [Google](http://google.com/ \"Google\")\n"),
                s(:str, "than from [Yahoo](http://search.yahoo.com/ \"Yahoo Search\") or\n"),
                s(:str, "[MSN](http://search.msn.com/ \"MSN Search\").\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:str, "The point of reference-style links is not that they're easier to\n"), :+,
                            s(:str, "write. The point is that with reference-style links, your document\n")), :+,
                          s(:str, "source is vastly more readable. Compare the above examples: using\n")), :+,
                        s(:str, "reference-style links, the paragraph itself is only 81 characters\n")), :+,
                      s(:str, "long; with inline-style links, it's 176 characters; and as raw HTML,\n")), :+,
                    s(:str, "it's 234 characters. In the raw HTML, there's more markup than there\n")), :+,
                  s(:str, "is text."))),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:str, "With Markdown's reference-style links, a source document much more\n"), :+,
                        s(:str, "closely resembles the final output, as rendered in a browser. By\n")), :+,
                      s(:str, "allowing you to move the markup-related metadata out of the paragraph,\n")), :+,
                    s(:str, "you can add links without interrupting the narrative flow of your\n")), :+,
                  s(:str, "prose."))),
              s(:send, nil, :raw,
                s(:str, "<h3 id=\"em\">Emphasis</h3>")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:str, "Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of\n"), :+,
                      s(:str, "emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an\n")), :+,
                    s(:str, "HTML <code><em></code> tag; double <code>*</code>'s or <code>_</code>'s will be wrapped with an HTML\n")), :+,
                  s(:str, "<code><strong></code> tag. E.g., this input:"))),
              s(:send, nil, :verb,
                s(:str, "*single asterisks*\n"),
                s(:str, "\n"),
                s(:str, "_single underscores_\n"),
                s(:str, "\n"),
                s(:str, "**double asterisks**\n"),
                s(:str, "\n"),
                s(:str, "__double underscores__\n")),
              s(:send, nil, :para,
                s(:str, "will produce:")),
              s(:send, nil, :verb,
                s(:str, "<em>single asterisks</em>\n"),
                s(:str, "\n"),
                s(:str, "<em>single underscores</em>\n"),
                s(:str, "\n"),
                s(:str, "<strong>double asterisks</strong>\n"),
                s(:str, "\n"),
                s(:str, "<strong>double underscores</strong>\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "You can use whichever style you prefer; the lone restriction is that\n"), :+,
                  s(:str, "the same character must be used to open and close an emphasis span."))),
              s(:send, nil, :para,
                s(:str, "Emphasis can be used in the middle of a word:")),
              s(:send, nil, :verb,
                s(:str, "un*fucking*believable\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "But if you surround an <code>*</code> or <code>_</code> with spaces, it'll be treated as a\n"), :+,
                  s(:str, "literal asterisk or underscore."))),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "To produce a literal asterisk or underscore at a position where it\n"), :+,
                    s(:str, "would otherwise be used as an emphasis delimiter, you can backslash\n")), :+,
                  s(:str, "escape it:"))),
              s(:send, nil, :verb,
                s(:str, "\\*this text is surrounded by literal asterisks\\*\n")),
              s(:send, nil, :raw,
                s(:str, "<h3 id=\"code\">Code</h3>")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "To indicate a span of code, wrap it with backtick quotes (<code>`</code>).\n"), :+,
                    s(:str, "Unlike a pre-formatted code block, a code span indicates code within a\n")), :+,
                  s(:str, "normal paragraph. For example:"))),
              s(:send, nil, :verb,
                s(:str, "Use the `printf()` function.\n")),
              s(:send, nil, :para,
                s(:str, "will produce:")),
              s(:send, nil, :verb,
                s(:str, "<p>Use the <code>printf()</code> function.</p>\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "To include a literal backtick character within a code span, you can use\n"), :+,
                  s(:str, "multiple backticks as the opening and closing delimiters:"))),
              s(:send, nil, :verb,
                s(:str, "``There is a literal backtick (`) here.``\n")),
              s(:send, nil, :para,
                s(:str, "which will produce this:")),
              s(:send, nil, :verb,
                s(:str, "<p><code>There is a literal backtick (`) here.</code></p>\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "The backtick delimiters surrounding a code span may include spaces --\n"), :+,
                    s(:str, "one after the opening, one before the closing. This allows you to place\n")), :+,
                  s(:str, "literal backtick characters at the beginning or end of a code span:"))),
              s(:send, nil, :verb,
                s(:str, "A single backtick in a code span: `` ` ``\n"),
                s(:str, "\n"),
                s(:str, "A backtick-delimited string in a code span: `` `foo` ``\n")),
              s(:send, nil, :para,
                s(:str, "will produce:")),
              s(:send, nil, :verb,
                s(:str, "<p>A single backtick in a code span: <code>`</code></p>\n"),
                s(:str, "\n"),
                s(:str, "<p>A backtick-delimited string in a code span: <code>`foo`</code></p>\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "With a code span, ampersands and angle brackets are encoded as HTML\n"), :+,
                    s(:str, "entities automatically, which makes it easy to include example HTML\n")), :+,
                  s(:str, "tags. Markdown will turn this:"))),
              s(:send, nil, :verb,
                s(:str, "Please don't use any `<blink>` tags.\n")),
              s(:send, nil, :para,
                s(:str, "into:")),
              s(:send, nil, :verb,
                s(:str, "<p>Please don't use any <code>&lt;blink&gt;</code> tags.</p>\n")),
              s(:send, nil, :para,
                s(:str, "You can write this:")),
              s(:send, nil, :verb,
                s(:str, "`&#8212;` is the decimal-encoded equivalent of `&mdash;`.\n")),
              s(:send, nil, :para,
                s(:str, "to produce:")),
              s(:send, nil, :verb,
                s(:str, "<p><code>&amp;#8212;</code> is the decimal-encoded\n"),
                s(:str, "equivalent of <code>&amp;mdash;</code>.</p>\n")),
              s(:send, nil, :raw,
                s(:str, "<h3 id=\"img\">Images</h3>")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Admittedly, it's fairly difficult to devise a \"natural\" syntax for\n"), :+,
                  s(:str, "placing images into a plain text document format."))),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Markdown uses an image syntax that is intended to resemble the syntax\n"), :+,
                  s(:str, "for links, allowing for two styles: _inline_ and _reference_."))),
              s(:send, nil, :para,
                s(:str, "Inline image syntax looks like this:")),
              s(:send, nil, :verb,
                s(:str, "![Alt text](/path/to/img.jpg)\n"),
                s(:str, "\n"),
                s(:str, "![Alt text](/path/to/img.jpg \"Optional title\")\n")),
              s(:send, nil, :para,
                s(:str, "That is:")),
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "An exclamation mark: <code>!</code>;"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:send,
                      s(:str, "followed by a set of square brackets, containing the <code>alt</code>\n"), :+,
                      s(:str, "attribute text for the image;")))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:send,
                      s(:send,
                        s(:str, "followed by a set of parentheses, containing the URL or path to\n"), :+,
                        s(:str, "the image, and an optional <code>title</code> attribute enclosed in double\n")), :+,
                      s(:str, "or single quotes."))))),
              s(:send, nil, :para,
                s(:str, "Reference-style image syntax looks like this:")),
              s(:send, nil, :verb,
                s(:str, "![Alt text][id]\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "Where \"id\" is the name of a defined image reference. Image references\n"), :+,
                  s(:str, "are defined using syntax identical to link references:"))),
              s(:send, nil, :verb,
                s(:str, "[id]: url/to/image  \"Optional title attribute\"\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "As of this writing, Markdown has no syntax for specifying the\n"), :+,
                    s(:str, "dimensions of an image; if this is important to you, you can simply\n")), :+,
                  s(:str, "use regular HTML <code><img></code> tags."))),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :raw,
                s(:str, "<h2 id=\"misc\">Miscellaneous</h2>")),
              s(:send, nil, :raw,
                s(:str, "<h3 id=\"autolink\">Automatic Links</h3>")),
              s(:send, nil, :para,
                s(:str, "Markdown supports a shortcut style for creating \"automatic\" links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:")),
              s(:send, nil, :verb,
                s(:str, "<http://example.com/>\n")),
              s(:send, nil, :para,
                s(:str, "Markdown will turn this into:")),
              s(:send, nil, :verb,
                s(:str, "<a href=\"http://example.com/\">http://example.com/</a>\n")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:str, "Automatic links for email addresses work similarly, except that\n"), :+,
                      s(:str, "Markdown will also perform a bit of randomized decimal and hex\n")), :+,
                    s(:str, "entity-encoding to help obscure your address from address-harvesting\n")), :+,
                  s(:str, "spambots. For example, Markdown will turn this:"))),
              s(:send, nil, :verb,
                s(:str, "<address@example.com>\n")),
              s(:send, nil, :para,
                s(:str, "into something like this:")),
              s(:send, nil, :verb,
                s(:str, "<a href=\"&#x6D;&#x61;i&#x6C;&#x74;&#x6F;:&#x61;&#x64;&#x64;&#x72;&#x65;\n"),
                s(:str, "&#115;&#115;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;\n"),
                s(:str, "&#109;\">&#x61;&#x64;&#x64;&#x72;&#x65;&#115;&#115;&#64;&#101;&#120;&#x61;\n"),
                s(:str, "&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;&#109;</a>\n")),
              s(:send, nil, :para,
                s(:str, "which will render in a browser as a clickable link to \"address@example.com\".")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:str, "(This sort of entity-encoding trick will indeed fool many, if not\n"), :+,
                      s(:str, "most, address-harvesting bots, but it definitely won't fool all of\n")), :+,
                    s(:str, "them. It's better than nothing, but an address published in this way\n")), :+,
                  s(:str, "will probably eventually start receiving spam.)"))),
              s(:send, nil, :raw,
                s(:str, "<h3 id=\"backslash\">Backslash Escapes</h3>")),
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:str, "Markdown allows you to use backslash escapes to generate literal\n"), :+,
                        s(:str, "characters which would otherwise have special meaning in Markdown's\n")), :+,
                      s(:str, "formatting syntax. For example, if you wanted to surround a word with\n")), :+,
                    s(:str, "literal asterisks (instead of an HTML <code><em></code> tag), you can backslashes\n")), :+,
                  s(:str, "before the asterisks, like this:"))),
              s(:send, nil, :verb,
                s(:str, "\\*literal asterisks\\*\n")),
              s(:send, nil, :para,
                s(:str, "Markdown provides backslash escapes for the following characters:")),
              s(:send, nil, :verb,
                s(:str, "\\   backslash\n"),
                s(:str, "`   backtick\n"),
                s(:str, "*   asterisk\n"),
                s(:str, "_   underscore\n"),
                s(:str, "{}  curly braces\n"),
                s(:str, "[]  square brackets\n"),
                s(:str, "()  parentheses\n"),
                s(:str, "#   hash mark\n"),
                s(:str, "+\tplus sign\n"),
                s(:str, "-\tminus sign (hyphen)\n"),
                s(:str, ".   dot\n"),
                s(:str, "!   exclamation mark\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_nested_blockquotes,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Nested blockquotes.text")))),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :block,
                s(:send, nil, :para,
                  s(:str, "foo")),
                s(:send, nil, :block,
                  s(:send, nil, :para,
                    s(:str, "bar"))),
                s(:send, nil, :para,
                  s(:str, "foo"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_ordered_and_unordered_lists,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Ordered and unordered lists.text")))),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :head,
                s(:int, 2),
                s(:str, "Unordered")),
              s(:send, nil, :para,
                s(:str, "Asterisks tight:")),
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "asterisk 1"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "asterisk 2"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "asterisk 3")))),
              s(:send, nil, :para,
                s(:str, "Asterisks loose:")),
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "asterisk 1"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "asterisk 2"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "asterisk 3")))),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :para,
                s(:str, "Pluses tight:")),
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Plus 1"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Plus 2"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Plus 3")))),
              s(:send, nil, :para,
                s(:str, "Pluses loose:")),
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Plus 1"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Plus 2"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Plus 3")))),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :para,
                s(:str, "Minuses tight:")),
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Minus 1"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Minus 2"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Minus 3")))),
              s(:send, nil, :para,
                s(:str, "Minuses loose:")),
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Minus 1"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Minus 2"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Minus 3")))),
              s(:send, nil, :head,
                s(:int, 2),
                s(:str, "Ordered")),
              s(:send, nil, :para,
                s(:str, "Tight:")),
              s(:send, nil, :list,
                s(:sym, :NUMBER),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "First"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Second"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Third")))),
              s(:send, nil, :para,
                s(:str, "and:")),
              s(:send, nil, :list,
                s(:sym, :NUMBER),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "One"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Two"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Three")))),
              s(:send, nil, :para,
                s(:str, "Loose using tabs:")),
              s(:send, nil, :list,
                s(:sym, :NUMBER),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "First"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Second"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Third")))),
              s(:send, nil, :para,
                s(:str, "and using spaces:")),
              s(:send, nil, :list,
                s(:sym, :NUMBER),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "One"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Two"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Three")))),
              s(:send, nil, :para,
                s(:str, "Multiple paragraphs:")),
              s(:send, nil, :list,
                s(:sym, :NUMBER),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Item 1, graf one.")),
                  s(:send, nil, :para,
                    s(:send,
                      s(:str, "Item 2. graf two. The quick brown fox "), :+,
                      s(:str, "jumped over the lazy dog's\nback.")))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Item 2."))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Item 3.")))),
              s(:send, nil, :head,
                s(:int, 2),
                s(:str, "Nested")),
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Tab")),
                  s(:send, nil, :list,
                    s(:sym, :BULLET),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "Tab")),
                      s(:send, nil, :list,
                        s(:sym, :BULLET),
                        s(:send, nil, :item,
                          s(:nil),
                          s(:send, nil, :para,
                            s(:str, "Tab")))))))),
              s(:send, nil, :para,
                s(:str, "Here's another:")),
              s(:send, nil, :list,
                s(:sym, :NUMBER),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "First"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Second:")),
                  s(:send, nil, :list,
                    s(:sym, :BULLET),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "Fee"))),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "Fie"))),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "Foe"))))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Third")))),
              s(:send, nil, :para,
                s(:str, "Same thing but with paragraphs:")),
              s(:send, nil, :list,
                s(:sym, :NUMBER),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "First"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Second:")),
                  s(:send, nil, :list,
                    s(:sym, :BULLET),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "Fee"))),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "Fie"))),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "Foe"))))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "Third")))),
              s(:send, nil, :para,
                s(:str, "This was an error in Markdown 1.0.1:")),
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "this")),
                  s(:send, nil, :list,
                    s(:sym, :BULLET),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "sub")))),
                  s(:send, nil, :para,
                    s(:str, "that")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_strong_and_em_together,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Strong and em together.text")))),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "<b><em>This is strong and em.</em></b>")),
              s(:send, nil, :para,
                s(:str, "So is <b>_this_</b> word.")),
              s(:send, nil, :para,
                s(:str, "<b><em>This is strong and em.</em></b>")),
              s(:send, nil, :para,
                s(:str, "So is <b>_this_</b> word.")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_tabs,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Tabs.text")))),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "this is a list item\nindented with tabs"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "this is a list item\nindented with spaces")))),
              s(:send, nil, :para,
                s(:str, "Code:")),
              s(:send, nil, :verb,
                s(:str, "this code block is indented by one tab\n")),
              s(:send, nil, :para,
                s(:str, "And:")),
              s(:send, nil, :verb,
                s(:str, "\tthis code block is indented by two tabs\n")),
              s(:send, nil, :para,
                s(:str, "And:")),
              s(:send, nil, :verb,
                s(:str, "+\tthis is an example list item\n"),
                s(:str, "\tindented with tabs\n"),
                s(:str, "\n"),
                s(:str, "+   this is an example list item\n"),
                s(:str, "    indented with spaces\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_tidyness,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:send,
              s(:const, nil, :File), :read,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :MARKDOWN_TEST_PATH)),
                s(:str, "/Tidyness.text")))),
          s(:lvasgn, :doc,
            s(:send,
              s(:ivar, :@parser), :parse,
              s(:lvar, :input))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :block,
                s(:send, nil, :para,
                  s(:str, "A list within a blockquote:")),
                s(:send, nil, :list,
                  s(:sym, :BULLET),
                  s(:send, nil, :item,
                    s(:nil),
                    s(:send, nil, :para,
                      s(:str, "asterisk 1"))),
                  s(:send, nil, :item,
                    s(:nil),
                    s(:send, nil, :para,
                      s(:str, "asterisk 2"))),
                  s(:send, nil, :item,
                    s(:nil),
                    s(:send, nil, :para,
                      s(:str, "asterisk 3"))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))))))
