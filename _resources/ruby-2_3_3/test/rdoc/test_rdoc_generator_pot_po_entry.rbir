s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocGeneratorPOTPOEntry),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :test_msgid_normal,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:dstr,
            s(:str, "msgid \"Hello\"\n"),
            s(:str, "msgstr \"\"\n")),
          s(:send,
            s(:send, nil, :entry,
              s(:str, "Hello"),
              s(:hash)), :to_s))),
      s(:def, :test_msgid_multiple_lines,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:dstr,
            s(:str, "msgid \"\"\n"),
            s(:str, "\"Hello\\n\"\n"),
            s(:str, "\"World\"\n"),
            s(:str, "msgstr \"\"\n")),
          s(:send,
            s(:send, nil, :entry,
              s(:str, "Hello\nWorld"),
              s(:hash)), :to_s))),
      s(:def, :test_msgid_tab,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:dstr,
            s(:str, "msgid \"Hello\\tWorld\"\n"),
            s(:str, "msgstr \"\"\n")),
          s(:send,
            s(:send, nil, :entry,
              s(:str, "Hello\tWorld"),
              s(:hash)), :to_s))),
      s(:def, :test_msgid_back_slash,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:dstr,
            s(:str, "msgid \"Hello \\ World\"\n"),
            s(:str, "msgstr \"\"\n")),
          s(:send,
            s(:send, nil, :entry,
              s(:str, "Hello \\ World"),
              s(:hash)), :to_s))),
      s(:def, :test_msgid_double_quote,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:dstr,
            s(:str, "msgid \"Hello \\\"World\\\"!\"\n"),
            s(:str, "msgstr \"\"\n")),
          s(:send,
            s(:send, nil, :entry,
              s(:str, "Hello \"World\"!"),
              s(:hash)), :to_s))),
      s(:def, :test_translator_comment_normal,
        s(:args),
        s(:begin,
          s(:lvasgn, :options,
            s(:hash,
              s(:pair,
                s(:sym, :translator_comment),
                s(:str, "Greeting")))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "# Greeting\n"),
              s(:str, "msgid \"Hello\"\n"),
              s(:str, "msgstr \"\"\n")),
            s(:send,
              s(:send, nil, :entry,
                s(:str, "Hello"),
                s(:lvar, :options)), :to_s)))),
      s(:def, :test_translator_comment_multiple_lines,
        s(:args),
        s(:begin,
          s(:lvasgn, :options,
            s(:hash,
              s(:pair,
                s(:sym, :translator_comment),
                s(:str, "Greeting\nfor morning")))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "# Greeting\n"),
              s(:str, "# for morning\n"),
              s(:str, "msgid \"Hello\"\n"),
              s(:str, "msgstr \"\"\n")),
            s(:send,
              s(:send, nil, :entry,
                s(:str, "Hello"),
                s(:lvar, :options)), :to_s)))),
      s(:def, :test_extracted_comment_normal,
        s(:args),
        s(:begin,
          s(:lvasgn, :options,
            s(:hash,
              s(:pair,
                s(:sym, :extracted_comment),
                s(:str, "Object")))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "#. Object\n"),
              s(:str, "msgid \"Hello\"\n"),
              s(:str, "msgstr \"\"\n")),
            s(:send,
              s(:send, nil, :entry,
                s(:str, "Hello"),
                s(:lvar, :options)), :to_s)))),
      s(:def, :test_extracted_comment_multiple_lines,
        s(:args),
        s(:begin,
          s(:lvasgn, :options,
            s(:hash,
              s(:pair,
                s(:sym, :extracted_comment),
                s(:str, "Object\nMorning#greeting")))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "#. Object\n"),
              s(:str, "#. Morning#greeting\n"),
              s(:str, "msgid \"Hello\"\n"),
              s(:str, "msgstr \"\"\n")),
            s(:send,
              s(:send, nil, :entry,
                s(:str, "Hello"),
                s(:lvar, :options)), :to_s)))),
      s(:def, :test_references_normal,
        s(:args),
        s(:begin,
          s(:lvasgn, :options,
            s(:hash,
              s(:pair,
                s(:sym, :references),
                s(:array,
                  s(:array,
                    s(:str, "lib/rdoc.rb"),
                    s(:int, 29)))))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "#: lib/rdoc.rb:29\n"),
              s(:str, "msgid \"Hello\"\n"),
              s(:str, "msgstr \"\"\n")),
            s(:send,
              s(:send, nil, :entry,
                s(:str, "Hello"),
                s(:lvar, :options)), :to_s)))),
      s(:def, :test_references_multiple,
        s(:args),
        s(:begin,
          s(:lvasgn, :options,
            s(:hash,
              s(:pair,
                s(:sym, :references),
                s(:array,
                  s(:array,
                    s(:str, "lib/rdoc.rb"),
                    s(:int, 29)),
                  s(:array,
                    s(:str, "lib/rdoc/i18n.rb"),
                    s(:int, 9)))))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "#: lib/rdoc.rb:29\n"),
              s(:str, "#: lib/rdoc/i18n.rb:9\n"),
              s(:str, "msgid \"Hello\"\n"),
              s(:str, "msgstr \"\"\n")),
            s(:send,
              s(:send, nil, :entry,
                s(:str, "Hello"),
                s(:lvar, :options)), :to_s)))),
      s(:def, :test_flags_normal,
        s(:args),
        s(:begin,
          s(:lvasgn, :options,
            s(:hash,
              s(:pair,
                s(:sym, :flags),
                s(:array,
                  s(:str, "fuzzy"))))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "#, fuzzy\n"),
              s(:str, "msgid \"Hello\"\n"),
              s(:str, "msgstr \"\"\n")),
            s(:send,
              s(:send, nil, :entry,
                s(:str, "Hello"),
                s(:lvar, :options)), :to_s)))),
      s(:def, :test_flags_multiple,
        s(:args),
        s(:begin,
          s(:lvasgn, :options,
            s(:hash,
              s(:pair,
                s(:sym, :flags),
                s(:array,
                  s(:str, "fuzzy"),
                  s(:str, "ruby-format"))))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "#, fuzzy,ruby-format\n"),
              s(:str, "msgid \"Hello\"\n"),
              s(:str, "msgstr \"\"\n")),
            s(:send,
              s(:send, nil, :entry,
                s(:str, "Hello"),
                s(:lvar, :options)), :to_s)))),
      s(:def, :test_full,
        s(:args),
        s(:begin,
          s(:lvasgn, :options,
            s(:hash,
              s(:pair,
                s(:sym, :translator_comment),
                s(:str, "Greeting")),
              s(:pair,
                s(:sym, :extracted_comment),
                s(:str, "Morning#greeting")),
              s(:pair,
                s(:sym, :references),
                s(:array,
                  s(:array,
                    s(:str, "lib/rdoc.rb"),
                    s(:int, 29)))),
              s(:pair,
                s(:sym, :flags),
                s(:array,
                  s(:str, "fuzzy"))))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "# Greeting\n"),
              s(:str, "#. Morning#greeting\n"),
              s(:str, "#: lib/rdoc.rb:29\n"),
              s(:str, "#, fuzzy\n"),
              s(:str, "msgid \"Hello\"\n"),
              s(:str, "msgstr \"\"\n")),
            s(:send,
              s(:send, nil, :entry,
                s(:str, "Hello"),
                s(:lvar, :options)), :to_s)))),
      s(:send, nil, :private),
      s(:def, :entry,
        s(:args,
          s(:arg, :msgid),
          s(:arg, :options)),
        s(:send,
          s(:const,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Generator), :POT), :POEntry), :new,
          s(:lvar, :msgid),
          s(:lvar, :options))))))
