s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocOptions),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@options,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Options), :new)),
          s(:ivasgn, :@generators,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RDoc), :GENERATORS), :dup)))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :RDoc), :GENERATORS), :replace,
            s(:ivar, :@generators)))),
      s(:def, :test_check_files,
        s(:args),
        s(:begin,
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "mswin|mingw"),
                s(:regopt)),
              s(:const, nil, :RUBY_PLATFORM)),
            s(:send, nil, :skip,
              s(:str, "assumes UNIX permission model")), nil),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:block,
                s(:send, nil, :temp_dir),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:const, nil, :FileUtils), :touch,
                    s(:str, "unreadable")),
                  s(:send,
                    s(:const, nil, :FileUtils), :chmod,
                    s(:int, 0),
                    s(:str, "unreadable")),
                  s(:send,
                    s(:ivar, :@options), :files=,
                    s(:array,
                      s(:str, "nonexistent"),
                      s(:str, "unreadable"))),
                  s(:send,
                    s(:ivar, :@options), :check_files))))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@options), :files)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)),
          s(:send, nil, :assert_empty,
            s(:lvar, :err)))),
      s(:def, :test_check_files_warn,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@options), :verbosity=,
            s(:int, 2)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :verbose_capture_io),
              s(:args),
              s(:begin,
                s(:send,
                  s(:ivar, :@options), :files=,
                  s(:array,
                    s(:str, "nonexistent"))),
                s(:send,
                  s(:ivar, :@options), :check_files)))),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)),
          s(:send, nil, :assert_equal,
            s(:str, "file 'nonexistent' not found\n"),
            s(:lvar, :err)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@options), :files)))),
      s(:def, :test_dry_run_default,
        s(:args),
        s(:send, nil, :refute,
          s(:send,
            s(:ivar, :@options), :dry_run))),
      s(:def, :test_encode_with,
        s(:args),
        s(:begin,
          s(:lvasgn, :coder,
            s(:hash)),
          s(:sclass,
            s(:lvar, :coder),
            s(:alias,
              s(:sym, :add),
              s(:sym, :[]=))),
          s(:send,
            s(:ivar, :@options), :encode_with,
            s(:lvar, :coder)),
          s(:lvasgn, :encoding,
            s(:if,
              s(:send,
                s(:const, nil, :Object), :const_defined?,
                s(:sym, :Encoding)),
              s(:str, "UTF-8"),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:str, "charset"),
                s(:str, "UTF-8")),
              s(:pair,
                s(:str, "encoding"),
                s(:lvar, :encoding)),
              s(:pair,
                s(:str, "exclude"),
                s(:array)),
              s(:pair,
                s(:str, "hyperlink_all"),
                s(:false)),
              s(:pair,
                s(:str, "line_numbers"),
                s(:false)),
              s(:pair,
                s(:str, "locale"),
                s(:nil)),
              s(:pair,
                s(:str, "locale_dir"),
                s(:str, "locale")),
              s(:pair,
                s(:str, "locale_name"),
                s(:nil)),
              s(:pair,
                s(:str, "main_page"),
                s(:nil)),
              s(:pair,
                s(:str, "markup"),
                s(:str, "rdoc")),
              s(:pair,
                s(:str, "output_decoration"),
                s(:true)),
              s(:pair,
                s(:str, "page_dir"),
                s(:nil)),
              s(:pair,
                s(:str, "rdoc_include"),
                s(:array)),
              s(:pair,
                s(:str, "show_hash"),
                s(:false)),
              s(:pair,
                s(:str, "static_path"),
                s(:array)),
              s(:pair,
                s(:str, "tab_width"),
                s(:int, 8)),
              s(:pair,
                s(:str, "template_stylesheets"),
                s(:array)),
              s(:pair,
                s(:str, "title"),
                s(:nil)),
              s(:pair,
                s(:str, "visibility"),
                s(:sym, :protected)),
              s(:pair,
                s(:str, "webcvs"),
                s(:nil)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :coder)))),
      s(:def, :test_encode_with_trim_paths,
        s(:args),
        s(:begin,
          s(:lvasgn, :subdir,
            s(:nil)),
          s(:lvasgn, :coder,
            s(:hash)),
          s(:sclass,
            s(:lvar, :coder),
            s(:alias,
              s(:sym, :add),
              s(:sym, :[]=))),
          s(:block,
            s(:send, nil, :temp_dir),
            s(:args,
              s(:arg, :dir)),
            s(:begin,
              s(:send,
                s(:const, nil, :FileUtils), :mkdir,
                s(:str, "project")),
              s(:send,
                s(:const, nil, :FileUtils), :mkdir,
                s(:str, "dir")),
              s(:send,
                s(:const, nil, :FileUtils), :touch,
                s(:str, "file")),
              s(:block,
                s(:send,
                  s(:const, nil, :Dir), :chdir,
                  s(:str, "project")),
                s(:args),
                s(:begin,
                  s(:lvasgn, :subdir,
                    s(:send,
                      s(:const, nil, :File), :expand_path,
                      s(:str, "subdir"))),
                  s(:send,
                    s(:const, nil, :FileUtils), :mkdir,
                    s(:str, "subdir")),
                  s(:send,
                    s(:ivar, :@options), :parse,
                    s(:array,
                      s(:str, "--copy"),
                      s(:str, "subdir"),
                      s(:str, "--copy"),
                      s(:str, "../file"),
                      s(:str, "--copy"),
                      s(:str, "../"),
                      s(:str, "--copy"),
                      s(:str, "/"),
                      s(:str, "--include"),
                      s(:str, "subdir"),
                      s(:str, "--include"),
                      s(:str, "../dir"),
                      s(:str, "--include"),
                      s(:str, "../"),
                      s(:str, "--include"),
                      s(:str, "/"))),
                  s(:send,
                    s(:ivar, :@options), :encode_with,
                    s(:lvar, :coder)))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :subdir)),
            s(:send,
              s(:lvar, :coder), :[],
              s(:str, "rdoc_include"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :subdir)),
            s(:send,
              s(:lvar, :coder), :[],
              s(:str, "static_path"))))),
      s(:def, :test_encoding_default,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)), nil,
            s(:send, nil, :skip,
              s(:str, "Encoding not implemented"))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :UTF_8),
            s(:send,
              s(:ivar, :@options), :encoding)))),
      s(:def, :test_generator_descriptions,
        s(:args),
        s(:begin,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :RDoc), :GENERATORS), :clear),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :RDoc), :GENERATORS), :[]=,
            s(:str, "darkfish"),
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Generator), :Darkfish)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :RDoc), :GENERATORS), :[]=,
            s(:str, "ri"),
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Generator), :RI)),
          s(:lvasgn, :expected,
            s(:send,
              s(:dstr,
                s(:str, "  darkfish - HTML generator, written by Michael Granger\n"),
                s(:str, "  ri       - creates ri data files\n")), :chomp)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@options), :generator_descriptions)))),
      s(:def, :test_init_with_encoding,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)), nil,
            s(:send, nil, :skip,
              s(:str, "Encoding not implemented"))),
          s(:send,
            s(:const, nil, :RDoc), :load_yaml),
          s(:send,
            s(:ivar, :@options), :encoding=,
            s(:const,
              s(:const, nil, :Encoding), :IBM437)),
          s(:lvasgn, :options,
            s(:send,
              s(:const, nil, :YAML), :load,
              s(:send,
                s(:const, nil, :YAML), :dump,
                s(:ivar, :@options)))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :IBM437),
            s(:send,
              s(:lvar, :options), :encoding)))),
      s(:def, :test_init_with_trim_paths,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :RDoc), :load_yaml),
          s(:lvasgn, :yaml,
            s(:dstr,
              s(:str, "--- !ruby/object:RDoc::Options\n"),
              s(:str, "static_path:\n"),
              s(:str, "- /etc\n"),
              s(:str, "rdoc_include:\n"),
              s(:str, "- /etc\n"))),
          s(:lvasgn, :options,
            s(:send,
              s(:const, nil, :YAML), :load,
              s(:lvar, :yaml))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :options), :rdoc_include)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :options), :static_path)))),
      s(:def, :test_parse_copy_files_file_relative,
        s(:args),
        s(:begin,
          s(:lvasgn, :file,
            s(:send,
              s(:const, nil, :File), :basename,
              s(:str, "(string)"))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:str, "(string)"))),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:str, ".."),
                s(:str, "(string)"))),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "--copy-files"),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :file))))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:lvar, :expected)),
                s(:send,
                  s(:ivar, :@options), :static_path)))))),
      s(:def, :test_parse_copy_files_file_absolute,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@options), :parse,
            s(:array,
              s(:str, "--copy-files"),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:str, "(string)")))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:str, "(string)"))),
            s(:send,
              s(:ivar, :@options), :static_path)))),
      s(:def, :test_parse_copy_files_directory_relative,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@options), :parse,
            s(:array,
              s(:str, "--copy-files"),
              s(:str, "."))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@pwd)),
            s(:send,
              s(:ivar, :@options), :static_path)))),
      s(:def, :test_parse_copy_files_directory_absolute,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@options), :parse,
            s(:array,
              s(:str, "--copy-files"),
              s(:str, "/"))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:ivar, :@options), :static_path), :length)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^([A-Z]:)?/$"),
              s(:regopt, :i)),
            s(:send,
              s(:send,
                s(:ivar, :@options), :static_path), :first)))),
      s(:def, :test_parse_coverage,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@options), :parse,
            s(:array,
              s(:str, "--dcov"))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@options), :coverage_report)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@options), :force_update)))),
      s(:def, :test_parse_coverage_no,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@options), :parse,
            s(:array,
              s(:str, "--no-dcov"))),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@options), :coverage_report)))),
      s(:def, :test_parse_coverage_level_1,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@options), :parse,
            s(:array,
              s(:str, "--dcov=1"))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@options), :coverage_report)))),
      s(:def, :test_parse_dash_p,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "-p"))))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@options), :pipe)),
          s(:send, nil, :refute_match,
            s(:regexp,
              s(:str, "^Usage: "),
              s(:regopt)),
            s(:lvar, :err)),
          s(:send, nil, :refute_match,
            s(:regexp,
              s(:str, "^invalid options"),
              s(:regopt)),
            s(:lvar, :err)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)))),
      s(:def, :test_parse_dash_p_files,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "-p"),
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:str, "(string)")))))),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@options), :pipe)),
          s(:send, nil, :refute_match,
            s(:regexp,
              s(:str, "^Usage: "),
              s(:regopt)),
            s(:lvar, :err)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^invalid options: -p .with files."),
              s(:regopt)),
            s(:lvar, :err)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)))),
      s(:def, :test_parse_default,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@options), :parse,
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Generator), :Darkfish),
            s(:send,
              s(:ivar, :@options), :generator)),
          s(:send, nil, :assert_equal,
            s(:str, "darkfish"),
            s(:send,
              s(:ivar, :@options), :template)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "rdoc/generator/template/darkfish$"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@options), :template_dir)))),
      s(:def, :test_parse_deprecated,
        s(:args),
        s(:begin,
          s(:lvasgn, :dep_hash,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Options), :DEPRECATED)),
          s(:lvasgn, :options,
            s(:send,
              s(:send,
                s(:lvar, :dep_hash), :keys), :sort)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:lvar, :options)))),
          s(:block,
            s(:send,
              s(:lvar, :dep_hash), :each_pair),
            s(:args,
              s(:arg, :opt),
              s(:arg, :message)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, ".*"),
                s(:begin,
                  s(:lvar, :opt)),
                s(:str, ".+"),
                s(:begin,
                  s(:lvar, :message)),
                s(:regopt)),
              s(:lvar, :err))),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)))),
      s(:def, :test_parse_dry_run,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@options), :parse,
            s(:array,
              s(:str, "--dry-run"))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@options), :dry_run)))),
      s(:def, :test_parse_encoding,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)), nil,
            s(:send, nil, :skip,
              s(:str, "Encoding not implemented"))),
          s(:send,
            s(:ivar, :@options), :parse,
            s(:array,
              s(:str, "--encoding"),
              s(:str, "Big5"))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :Big5),
            s(:send,
              s(:ivar, :@options), :encoding)),
          s(:send, nil, :assert_equal,
            s(:str, "Big5"),
            s(:send,
              s(:ivar, :@options), :charset)))),
      s(:def, :test_parse_encoding_invalid,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)), nil,
            s(:send, nil, :skip,
              s(:str, "Encoding not implemented"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "--encoding"),
                  s(:str, "invalid"))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^invalid options: --encoding invalid"),
              s(:regopt)),
            s(:lvar, :err)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)))),
      s(:def, :test_parse_formatter,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :OptionParser), :InvalidOption)),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "--format"),
                  s(:str, "darkfish"),
                  s(:str, "--format"),
                  s(:str, "ri"))))),
          s(:send, nil, :assert_equal,
            s(:str, "invalid option: --format generator already set to darkfish"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_parse_formatter_ri,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :OptionParser), :InvalidOption)),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "--format"),
                  s(:str, "darkfish"),
                  s(:str, "--ri"))))),
          s(:send, nil, :assert_equal,
            s(:str, "invalid option: --ri generator already set to darkfish"),
            s(:send,
              s(:lvar, :e), :message)),
          s(:ivasgn, :@options,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Options), :new)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :OptionParser), :InvalidOption)),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "--format"),
                  s(:str, "darkfish"),
                  s(:str, "-r"))))),
          s(:send, nil, :assert_equal,
            s(:str, "invalid option: -r generator already set to darkfish"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_parse_formatter_ri_site,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :OptionParser), :InvalidOption)),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "--format"),
                  s(:str, "darkfish"),
                  s(:str, "--ri-site"))))),
          s(:send, nil, :assert_equal,
            s(:str, "invalid option: --ri-site generator already set to darkfish"),
            s(:send,
              s(:lvar, :e), :message)),
          s(:ivasgn, :@options,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Options), :new)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :OptionParser), :InvalidOption)),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "--format"),
                  s(:str, "darkfish"),
                  s(:str, "-R"))))),
          s(:send, nil, :assert_equal,
            s(:str, "invalid option: -R generator already set to darkfish"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_parse_h,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:ivar, :@options), :parse,
                    s(:array,
                      s(:str, "-h"))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :SystemExit)), nil, nil), nil)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:lvar, :out), :scan,
                s(:regexp,
                  s(:str, "HTML generator options:"),
                  s(:regopt))), :length)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:lvar, :out), :scan,
                s(:regexp,
                  s(:str, "ri generator options:"),
                  s(:regopt))), :length)))),
      s(:def, :test_parse_help,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:ivar, :@options), :parse,
                    s(:array,
                      s(:str, "--help"))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :SystemExit)), nil, nil), nil)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:lvar, :out), :scan,
                s(:regexp,
                  s(:str, "HTML generator options:"),
                  s(:regopt))), :length)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:lvar, :out), :scan,
                s(:regexp,
                  s(:str, "ri generator options:"),
                  s(:regopt))), :length)))),
      s(:def, :test_parse_help_extra_generator,
        s(:args),
        s(:begin,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :RDoc), :GENERATORS), :[]=,
            s(:str, "test"),
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:defs,
                s(:self), :setup_options,
                s(:args,
                  s(:arg, :options)),
                s(:begin,
                  s(:lvasgn, :op,
                    s(:send,
                      s(:lvar, :options), :option_parser)),
                  s(:send,
                    s(:lvar, :op), :separator,
                    s(:str, "test generator options:")))))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:ivar, :@options), :parse,
                    s(:array,
                      s(:str, "--help"))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :SystemExit)), nil, nil), nil)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:lvar, :out), :scan,
                s(:regexp,
                  s(:str, "HTML generator options:"),
                  s(:regopt))), :length)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:lvar, :out), :scan,
                s(:regexp,
                  s(:str, "ri generator options:"),
                  s(:regopt))), :length)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:lvar, :out), :scan,
                s(:regexp,
                  s(:str, "test generator options:"),
                  s(:regopt))), :length)))),
      s(:def, :test_parse_format_for_extra_generator,
        s(:args),
        s(:begin,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :RDoc), :GENERATORS), :[]=,
            s(:str, "test"),
            s(:block,
              s(:send,
                s(:const, nil, :Class), :new),
              s(:args),
              s(:defs,
                s(:self), :setup_options,
                s(:args,
                  s(:arg, :options)),
                s(:begin,
                  s(:lvasgn, :op,
                    s(:send,
                      s(:lvar, :options), :option_parser)),
                  s(:send,
                    s(:lvar, :op), :separator,
                    s(:str, "test generator options:")))))),
          s(:send,
            s(:ivar, :@options), :setup_generator,
            s(:str, "test")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@options), :generator_name),
            s(:str, "test")))),
      s(:def, :test_parse_ignore_invalid,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "--ignore-invalid"),
                  s(:str, "--bogus"))))),
          s(:send, nil, :refute_match,
            s(:regexp,
              s(:str, "^Usage: "),
              s(:regopt)),
            s(:lvar, :err)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^invalid options: --bogus"),
              s(:regopt)),
            s(:lvar, :err)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)))),
      s(:def, :test_parse_ignore_invalid_default,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "--bogus"),
                  s(:str, "--main"),
                  s(:str, "BLAH"))))),
          s(:send, nil, :refute_match,
            s(:regexp,
              s(:str, "^Usage: "),
              s(:regopt)),
            s(:lvar, :err)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^invalid options: --bogus"),
              s(:regopt)),
            s(:lvar, :err)),
          s(:send, nil, :assert_equal,
            s(:str, "BLAH"),
            s(:send,
              s(:ivar, :@options), :main_page)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)))),
      s(:def, :test_parse_ignore_invalid_no,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const, nil, :SystemExit)),
                s(:args),
                s(:send,
                  s(:ivar, :@options), :parse,
                  s(:array,
                    s(:str, "--no-ignore-invalid"),
                    s(:str, "--bogus=arg"),
                    s(:str, "--bobogus"),
                    s(:str, "--visibility=extended")))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^Usage: "),
              s(:regopt)),
            s(:lvar, :err)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^invalid options: --bogus=arg, --bobogus, --visibility=extended"),
              s(:regopt)),
            s(:lvar, :err)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)))),
      s(:def, :test_parse_ignore_invalid_no_quiet,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const, nil, :SystemExit)),
                s(:args),
                s(:send,
                  s(:ivar, :@options), :parse,
                  s(:array,
                    s(:str, "--quiet"),
                    s(:str, "--no-ignore-invalid"),
                    s(:str, "--bogus=arg"),
                    s(:str, "--bobogus"),
                    s(:str, "--visibility=extended")))))),
          s(:send, nil, :refute_match,
            s(:regexp,
              s(:str, "^Usage: "),
              s(:regopt)),
            s(:lvar, :err)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^invalid options: --bogus=arg, --bobogus, --visibility=extended"),
              s(:regopt)),
            s(:lvar, :err)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)))),
      s(:def, :test_ignore_needless_arg,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "--ri=foo"))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^invalid options: --ri=foo"),
              s(:regopt)),
            s(:lvar, :err)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)))),
      s(:def, :test_ignore_missing_arg,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "--copy-files"))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^invalid options: --copy-files"),
              s(:regopt)),
            s(:lvar, :err)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)))),
      s(:def, :test_parse_main,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "--main"),
                  s(:str, "MAIN"))))),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)),
          s(:send, nil, :assert_empty,
            s(:lvar, :err)),
          s(:send, nil, :assert_equal,
            s(:str, "MAIN"),
            s(:send,
              s(:ivar, :@options), :main_page)))),
      s(:def, :test_parse_markup,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "--markup"),
                  s(:str, "tomdoc"))))),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)),
          s(:send, nil, :assert_empty,
            s(:lvar, :err)),
          s(:send, nil, :assert_equal,
            s(:str, "tomdoc"),
            s(:send,
              s(:ivar, :@options), :markup)))),
      s(:def, :test_parse_page_dir,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@options), :page_dir)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "--page-dir"),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Dir), :tmpdir))))))),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)),
          s(:send, nil, :assert_empty,
            s(:lvar, :err)),
          s(:lvasgn, :expected,
            s(:send,
              s(:send,
                s(:send, nil, :Pathname,
                  s(:send,
                    s(:const, nil, :Dir), :tmpdir)), :expand_path), :relative_path_from,
              s(:send,
                s(:ivar, :@options), :root))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@options), :page_dir)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:const, nil, :Dir), :tmpdir)),
            s(:send,
              s(:ivar, :@options), :files)))),
      s(:def, :test_parse_page_dir_root,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@options), :page_dir)),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :mktmpdir),
            s(:args,
              s(:arg, :dir)),
            s(:begin,
              s(:lvasgn, :abs_root,
                s(:lvar, :dir)),
              s(:lvasgn, :abs_page_dir,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :dir),
                  s(:str, "pages"))),
              s(:send,
                s(:const, nil, :FileUtils), :mkdir,
                s(:lvar, :abs_page_dir)),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :out),
                  s(:lvasgn, :err)),
                s(:block,
                  s(:send, nil, :capture_io),
                  s(:args),
                  s(:send,
                    s(:ivar, :@options), :parse,
                    s(:array,
                      s(:str, "--page-dir"),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :abs_page_dir))),
                      s(:str, "--root"),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :abs_root))))))),
              s(:send, nil, :assert_empty,
                s(:lvar, :out)),
              s(:send, nil, :assert_empty,
                s(:lvar, :err)),
              s(:send, nil, :assert_equal,
                s(:send, nil, :Pathname,
                  s(:str, "pages")),
                s(:send,
                  s(:ivar, :@options), :page_dir)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:lvar, :abs_page_dir)),
                s(:send,
                  s(:ivar, :@options), :files)))))),
      s(:def, :test_parse_ri_site,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@options), :parse,
            s(:array,
              s(:str, "--ri-site"))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Generator), :RI),
            s(:send,
              s(:ivar, :@options), :generator)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RI), :Paths), :site_dir),
            s(:send,
              s(:ivar, :@options), :op_dir)))),
      s(:def, :test_parse_root,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :Pathname,
              s(:send,
                s(:const, nil, :Dir), :pwd)),
            s(:send,
              s(:ivar, :@options), :root)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "--root"),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Dir), :tmpdir))))))),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)),
          s(:send, nil, :assert_empty,
            s(:lvar, :err)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :Pathname,
              s(:send,
                s(:const, nil, :Dir), :tmpdir)),
            s(:send,
              s(:ivar, :@options), :root)),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:ivar, :@options), :rdoc_include),
            s(:send,
              s(:send,
                s(:ivar, :@options), :root), :to_s)))),
      s(:def, :test_parse_tab_width,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@options), :parse,
            s(:array,
              s(:str, "--tab-width=1"))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@options), :tab_width)),
          s(:send,
            s(:ivar, :@options), :parse,
            s(:array,
              s(:str, "-w2"))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@options), :tab_width)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :_),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "-w=2"))))),
          s(:send, nil, :assert_match,
            s(:str, "invalid options"),
            s(:lvar, :err)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :_),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "-w0"))))),
          s(:send, nil, :assert_match,
            s(:str, "invalid options"),
            s(:lvar, :err)))),
      s(:def, :test_parse_template,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "--template"),
                  s(:str, "darkfish"))))),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)),
          s(:send, nil, :assert_empty,
            s(:lvar, :err)),
          s(:send, nil, :assert_equal,
            s(:str, "darkfish"),
            s(:send,
              s(:ivar, :@options), :template)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "rdoc/generator/template/darkfish$"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@options), :template_dir)))),
      s(:def, :test_parse_template_nonexistent,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "--template"),
                  s(:str, "NONEXISTENT"))))),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)),
          s(:send, nil, :assert_equal,
            s(:str, "could not find template NONEXISTENT\n"),
            s(:lvar, :err)),
          s(:send, nil, :assert_equal,
            s(:str, "darkfish"),
            s(:send,
              s(:ivar, :@options), :template)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "rdoc/generator/template/darkfish$"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@options), :template_dir)))),
      s(:def, :test_parse_template_load_path,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :orig_LOAD_PATH,
              s(:send,
                s(:gvar, :$LOAD_PATH), :dup)),
            s(:lvasgn, :template_dir,
              s(:nil)),
            s(:block,
              s(:send,
                s(:const, nil, :Dir), :mktmpdir),
              s(:args,
                s(:arg, :dir)),
              s(:begin,
                s(:send,
                  s(:gvar, :$LOAD_PATH), :<<,
                  s(:lvar, :dir)),
                s(:lvasgn, :template_dir,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:lvar, :dir),
                    s(:str, "rdoc"),
                    s(:str, "generator"),
                    s(:str, "template"),
                    s(:str, "load_path"))),
                s(:send,
                  s(:const, nil, :FileUtils), :mkdir_p,
                  s(:lvar, :template_dir)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :out),
                    s(:lvasgn, :err)),
                  s(:block,
                    s(:send, nil, :capture_io),
                    s(:args),
                    s(:send,
                      s(:ivar, :@options), :parse,
                      s(:array,
                        s(:str, "--template"),
                        s(:str, "load_path"))))),
                s(:send, nil, :assert_empty,
                  s(:lvar, :out)),
                s(:send, nil, :assert_empty,
                  s(:lvar, :err)))),
            s(:send, nil, :assert_equal,
              s(:str, "load_path"),
              s(:send,
                s(:ivar, :@options), :template)),
            s(:send, nil, :assert_equal,
              s(:lvar, :template_dir),
              s(:send,
                s(:ivar, :@options), :template_dir))),
          s(:send,
            s(:gvar, :$LOAD_PATH), :replace,
            s(:lvar, :orig_LOAD_PATH)))),
      s(:def, :test_parse_visibility,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@options), :parse,
            s(:array,
              s(:str, "--visibility=public"))),
          s(:send, nil, :assert_equal,
            s(:sym, :public),
            s(:send,
              s(:ivar, :@options), :visibility)),
          s(:send,
            s(:ivar, :@options), :parse,
            s(:array,
              s(:str, "--visibility=protected"))),
          s(:send, nil, :assert_equal,
            s(:sym, :protected),
            s(:send,
              s(:ivar, :@options), :visibility)),
          s(:send,
            s(:ivar, :@options), :parse,
            s(:array,
              s(:str, "--visibility=private"))),
          s(:send, nil, :assert_equal,
            s(:sym, :private),
            s(:send,
              s(:ivar, :@options), :visibility)),
          s(:send,
            s(:ivar, :@options), :parse,
            s(:array,
              s(:str, "--visibility=nodoc"))),
          s(:send, nil, :assert_equal,
            s(:sym, :nodoc),
            s(:send,
              s(:ivar, :@options), :visibility)))),
      s(:def, :test_parse_write_options,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :tmpdir,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Dir), :tmpdir),
                s(:dstr,
                  s(:str, "test_rdoc_options_"),
                  s(:begin,
                    s(:gvar, :$$))))),
            s(:send,
              s(:const, nil, :FileUtils), :mkdir_p,
              s(:lvar, :tmpdir)),
            s(:block,
              s(:send,
                s(:const, nil, :Dir), :chdir,
                s(:lvar, :tmpdir)),
              s(:args),
              s(:begin,
                s(:lvasgn, :e,
                  s(:block,
                    s(:send, nil, :assert_raises,
                      s(:const, nil, :SystemExit)),
                    s(:args),
                    s(:send,
                      s(:ivar, :@options), :parse,
                      s(:array,
                        s(:str, "--write-options"))))),
                s(:send, nil, :assert_equal,
                  s(:int, 0),
                  s(:send,
                    s(:lvar, :e), :status)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:str, ".rdoc_options")))))),
          s(:send,
            s(:const, nil, :FileUtils), :rm_rf,
            s(:lvar, :tmpdir)))),
      s(:def, :test_parse_extension_alias,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:array,
                  s(:str, "--extension"),
                  s(:str, "foobar=rdoc"))))),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Parser), :parsers),
            s(:array,
              s(:regexp,
                s(:str, "\\.foobar$"),
                s(:regopt)),
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Parser), :Simple))),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)),
          s(:send, nil, :assert_empty,
            s(:lvar, :err)))),
      s(:def, :test_setup_generator,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :test_generator,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new),
                s(:args),
                s(:begin,
                  s(:defs,
                    s(:self), :setup_options,
                    s(:args,
                      s(:arg, :op)),
                    s(:ivasgn, :@op,
                      s(:lvar, :op))),
                  s(:defs,
                    s(:self), :op,
                    s(:args),
                    s(:ivar, :@op))))),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RDoc), :GENERATORS), :[]=,
              s(:str, "test"),
              s(:lvar, :test_generator)),
            s(:send,
              s(:ivar, :@options), :setup_generator,
              s(:str, "test")),
            s(:send, nil, :assert_equal,
              s(:lvar, :test_generator),
              s(:send,
                s(:ivar, :@options), :generator)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:lvar, :test_generator)),
              s(:send,
                s(:ivar, :@options), :generator_options)),
            s(:send, nil, :assert_equal,
              s(:ivar, :@options),
              s(:send,
                s(:lvar, :test_generator), :op))),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :RDoc), :GENERATORS), :delete,
            s(:str, "test")))),
      s(:def, :test_setup_generator_no_option_parser,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :test_generator,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new),
                s(:args),
                s(:begin,
                  s(:defs,
                    s(:self), :setup_options,
                    s(:args,
                      s(:arg, :op)),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :op), :option_parser), :separator,
                        s(:nil)),
                      s(:ivasgn, :@op,
                        s(:lvar, :op)))),
                  s(:defs,
                    s(:self), :op,
                    s(:args),
                    s(:ivar, :@op))))),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RDoc), :GENERATORS), :[]=,
              s(:str, "test"),
              s(:lvar, :test_generator)),
            s(:send,
              s(:ivar, :@options), :setup_generator,
              s(:str, "test")),
            s(:send, nil, :assert_equal,
              s(:lvar, :test_generator),
              s(:send,
                s(:ivar, :@options), :generator)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:lvar, :test_generator)),
              s(:send,
                s(:ivar, :@options), :generator_options)),
            s(:send, nil, :assert_equal,
              s(:ivar, :@options),
              s(:send,
                s(:lvar, :test_generator), :op))),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :RDoc), :GENERATORS), :delete,
            s(:str, "test")))),
      s(:def, :test_update_output_dir,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@options), :update_output_dir)),
          s(:send,
            s(:ivar, :@options), :update_output_dir=,
            s(:false)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@options), :update_output_dir)))),
      s(:def, :test_warn,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@options), :warn,
                s(:str, "warnings off")))),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)),
          s(:send, nil, :assert_empty,
            s(:lvar, :err)),
          s(:send,
            s(:ivar, :@options), :verbosity=,
            s(:int, 2)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :verbose_capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@options), :warn,
                s(:str, "warnings on")))),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)),
          s(:send, nil, :assert_equal,
            s(:str, "warnings on\n"),
            s(:lvar, :err)))),
      s(:def, :test_write_options,
        s(:args),
        s(:block,
          s(:send, nil, :temp_dir),
          s(:args,
            s(:arg, :dir)),
          s(:begin,
            s(:send,
              s(:ivar, :@options), :write_options),
            s(:send, nil, :assert,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:str, ".rdoc_options"))),
            s(:send, nil, :assert_equal,
              s(:ivar, :@options),
              s(:send,
                s(:const, nil, :YAML), :load,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:str, ".rdoc_options"))))))),
      s(:def, :test_version,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :_)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:ivar, :@options), :parse,
                    s(:array,
                      s(:str, "--version"))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :SystemExit)), nil, nil), nil)))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :out), :include?,
              s(:const,
                s(:const, nil, :RDoc), :VERSION))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :_)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:ivar, :@options), :parse,
                    s(:array,
                      s(:str, "-v"))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :SystemExit)), nil, nil), nil)))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :out), :include?,
              s(:const,
                s(:const, nil, :RDoc), :VERSION))))),
      s(:def, :test_visibility,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@options), :visibility=,
            s(:sym, :all)),
          s(:send, nil, :assert_equal,
            s(:sym, :private),
            s(:send,
              s(:ivar, :@options), :visibility)))))))
