s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocServlet),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@orig_gem_path,
            s(:send,
              s(:const, nil, :Gem), :path)),
          s(:ivasgn, :@tempdir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Dir), :tmpdir),
              s(:dstr,
                s(:str, "test_rdoc_servlet_"),
                s(:begin,
                  s(:gvar, :$$))))),
          s(:send,
            s(:const, nil, :Gem), :use_paths,
            s(:ivar, :@tempdir)),
          s(:send,
            s(:const, nil, :Gem), :ensure_gem_subdirectories,
            s(:ivar, :@tempdir)),
          s(:ivasgn, :@spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :new,
              s(:str, "spec"),
              s(:str, "1.0"))),
          s(:send,
            s(:ivar, :@spec), :loaded_from=,
            s(:send,
              s(:ivar, :@spec), :spec_file)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :reset),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :all=,
            s(:array,
              s(:ivar, :@spec))),
          s(:ivasgn, :@server,
            s(:hash)),
          s(:defs,
            s(:ivar, :@server), :mount,
            s(:args,
              s(:restarg)), nil),
          s(:ivasgn, :@stores,
            s(:hash)),
          s(:ivasgn, :@cache,
            s(:block,
              s(:send,
                s(:const, nil, :Hash), :new),
              s(:args,
                s(:arg, :hash),
                s(:arg, :store)),
              s(:send,
                s(:lvar, :hash), :[]=,
                s(:lvar, :store),
                s(:hash)))),
          s(:ivasgn, :@extra_dirs,
            s(:array,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "extra1")),
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "extra2")))),
          s(:ivasgn, :@s,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Servlet), :new,
              s(:ivar, :@server),
              s(:ivar, :@stores),
              s(:ivar, :@cache),
              s(:nil),
              s(:ivar, :@extra_dirs))),
          s(:ivasgn, :@req,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPRequest), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :Logger),
                  s(:nil))))),
          s(:ivasgn, :@res,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPResponse), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :HTTPVersion),
                  s(:str, "1.0"))))),
          s(:defs,
            s(:ivar, :@req), :path=,
            s(:args,
              s(:arg, :path)),
            s(:send, nil, :instance_variable_set,
              s(:sym, :@path),
              s(:lvar, :path))),
          s(:send,
            s(:ivar, :@req), :instance_variable_set,
            s(:sym, :@header),
            s(:block,
              s(:send,
                s(:const, nil, :Hash), :new),
              s(:args,
                s(:arg, :h),
                s(:arg, :k)),
              s(:send,
                s(:lvar, :h), :[]=,
                s(:lvar, :k),
                s(:array)))),
          s(:ivasgn, :@base,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "base"))),
          s(:ivasgn, :@system_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "base"),
              s(:str, "system"))),
          s(:ivasgn, :@home_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "home"))),
          s(:ivasgn, :@gem_doc_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "doc"))),
          s(:ivasgn, :@orig_base,
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RI), :Paths), :BASE)),
          s(:send,
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RI), :Paths), :BASE), :replace,
            s(:ivar, :@base)),
          s(:ivasgn, :@orig_ri_path_homedir,
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RI), :Paths), :HOMEDIR)),
          s(:send,
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RI), :Paths), :HOMEDIR), :replace,
            s(:ivar, :@home_dir)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :RI), :Paths), :instance_variable_set,
            s(:sym, :@gemdirs),
            s(:array,
              s(:str, "/nonexistent/gems/example-1.0/ri"))))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:send,
            s(:const, nil, :Gem), :use_paths,
            s(:splat,
              s(:ivar, :@orig_gem_path))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :reset),
          s(:send,
            s(:const, nil, :FileUtils), :rm_rf,
            s(:ivar, :@tempdir)),
          s(:send,
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RI), :Paths), :BASE), :replace,
            s(:ivar, :@orig_base)),
          s(:send,
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RI), :Paths), :HOMEDIR), :replace,
            s(:ivar, :@orig_ri_path_homedir)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :RI), :Paths), :instance_variable_set,
            s(:sym, :@gemdirs),
            s(:nil)))),
      s(:def, :test_asset,
        s(:args),
        s(:block,
          s(:send, nil, :temp_dir),
          s(:args),
          s(:begin,
            s(:lvasgn, :now,
              s(:send,
                s(:const, nil, :Time), :now)),
            s(:block,
              s(:send, nil, :open,
                s(:str, "rdoc.css"),
                s(:str, "w")),
              s(:args,
                s(:arg, :io)),
              s(:send,
                s(:lvar, :io), :write,
                s(:str, "h1 { color: red }"))),
            s(:send,
              s(:const, nil, :File), :utime,
              s(:lvar, :now),
              s(:lvar, :now),
              s(:str, "rdoc.css")),
            s(:send,
              s(:send,
                s(:ivar, :@s), :asset_dirs), :[]=,
              s(:sym, :darkfish),
              s(:str, ".")),
            s(:send,
              s(:ivar, :@req), :path=,
              s(:str, "rdoc.css")),
            s(:send,
              s(:ivar, :@s), :asset,
              s(:sym, :darkfish),
              s(:ivar, :@req),
              s(:ivar, :@res)),
            s(:send, nil, :assert_equal,
              s(:str, "h1 { color: red }"),
              s(:send,
                s(:ivar, :@res), :body)),
            s(:send, nil, :assert_equal,
              s(:str, "text/css"),
              s(:send,
                s(:ivar, :@res), :content_type)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :now), :httpdate),
              s(:send,
                s(:ivar, :@res), :[],
                s(:str, "last-modified")))))),
      s(:def, :test_do_GET,
        s(:args),
        s(:begin,
          s(:send, nil, :touch_system_cache_path),
          s(:send,
            s(:ivar, :@req), :path=,
            s(:str, "/ruby/Missing.html")),
          s(:send,
            s(:ivar, :@s), :do_GET,
            s(:ivar, :@req),
            s(:ivar, :@res)),
          s(:send, nil, :assert_equal,
            s(:int, 404),
            s(:send,
              s(:ivar, :@res), :status)))),
      s(:def, :test_do_GET_asset_darkfish,
        s(:args),
        s(:block,
          s(:send, nil, :temp_dir),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :FileUtils), :touch,
              s(:str, "rdoc.css")),
            s(:send,
              s(:send,
                s(:ivar, :@s), :asset_dirs), :[]=,
              s(:sym, :darkfish),
              s(:str, ".")),
            s(:send,
              s(:ivar, :@req), :path=,
              s(:str, "/rdoc.css")),
            s(:send,
              s(:ivar, :@s), :do_GET,
              s(:ivar, :@req),
              s(:ivar, :@res)),
            s(:send, nil, :assert_equal,
              s(:str, "text/css"),
              s(:send,
                s(:ivar, :@res), :content_type))))),
      s(:def, :test_do_GET_asset_json_index,
        s(:args),
        s(:block,
          s(:send, nil, :temp_dir),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :FileUtils), :mkdir,
              s(:str, "js")),
            s(:send,
              s(:const, nil, :FileUtils), :touch,
              s(:str, "js/navigation.js")),
            s(:send,
              s(:send,
                s(:ivar, :@s), :asset_dirs), :[]=,
              s(:sym, :json_index),
              s(:str, ".")),
            s(:send,
              s(:ivar, :@req), :path=,
              s(:str, "/js/navigation.js")),
            s(:send,
              s(:ivar, :@s), :do_GET,
              s(:ivar, :@req),
              s(:ivar, :@res)),
            s(:send, nil, :assert_equal,
              s(:str, "application/javascript"),
              s(:send,
                s(:ivar, :@res), :content_type))))),
      s(:def, :test_do_GET_error,
        s(:args),
        s(:begin,
          s(:send, nil, :touch_system_cache_path),
          s(:defs,
            s(:ivar, :@req), :path,
            s(:args),
            s(:send, nil, :raise,
              s(:str, "no"))),
          s(:send,
            s(:ivar, :@s), :do_GET,
            s(:ivar, :@req),
            s(:ivar, :@res)),
          s(:send, nil, :assert_equal,
            s(:int, 500),
            s(:send,
              s(:ivar, :@res), :status)))),
      s(:def, :test_do_GET_mount_path,
        s(:args),
        s(:begin,
          s(:ivasgn, :@s,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Servlet), :new,
              s(:ivar, :@server),
              s(:ivar, :@stores),
              s(:ivar, :@cache),
              s(:str, "/mount/path"))),
          s(:block,
            s(:send, nil, :temp_dir),
            s(:args),
            s(:begin,
              s(:send,
                s(:const, nil, :FileUtils), :touch,
                s(:str, "rdoc.css")),
              s(:send,
                s(:send,
                  s(:ivar, :@s), :asset_dirs), :[]=,
                s(:sym, :darkfish),
                s(:str, ".")),
              s(:send,
                s(:ivar, :@req), :path=,
                s(:str, "/mount/path/rdoc.css")),
              s(:send,
                s(:ivar, :@s), :do_GET,
                s(:ivar, :@req),
                s(:ivar, :@res)),
              s(:send, nil, :assert_equal,
                s(:str, "text/css"),
                s(:send,
                  s(:ivar, :@res), :content_type)))))),
      s(:def, :do_GET_not_found,
        s(:args),
        s(:begin,
          s(:send, nil, :touch_system_cache_path),
          s(:send,
            s(:ivar, :@req), :path=,
            s(:dstr,
              s(:str, "/"),
              s(:begin,
                s(:send,
                  s(:ivar, :@spec), :full_name)))),
          s(:send,
            s(:ivar, :@s), :do_GET,
            s(:ivar, :@req),
            s(:ivar, :@res)),
          s(:send, nil, :assert_equal,
            s(:int, 404),
            s(:send,
              s(:ivar, :@res), :status)))),
      s(:def, :test_do_GET_not_modified,
        s(:args),
        s(:begin,
          s(:send, nil, :touch_system_cache_path),
          s(:send,
            s(:send,
              s(:ivar, :@req), :header), :[]=,
            s(:str, "if-modified-since"),
            s(:array,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Time), :now), :+,
                    s(:int, 10))), :httpdate))),
          s(:send,
            s(:ivar, :@req), :path=,
            s(:str, "/ruby/Missing.html")),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :HTTPStatus), :NotModified)),
            s(:args),
            s(:send,
              s(:ivar, :@s), :do_GET,
              s(:ivar, :@req),
              s(:ivar, :@res))))),
      s(:def, :test_do_GET_root,
        s(:args),
        s(:begin,
          s(:send, nil, :touch_system_cache_path),
          s(:send,
            s(:ivar, :@req), :path=,
            s(:str, "/")),
          s(:send,
            s(:ivar, :@s), :do_GET,
            s(:ivar, :@req),
            s(:ivar, :@res)),
          s(:send, nil, :assert_equal,
            s(:str, "text/html"),
            s(:send,
              s(:ivar, :@res), :content_type)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "<title>Local RDoc Documentation</title>"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@res), :body)))),
      s(:def, :test_do_GET_root_search,
        s(:args),
        s(:begin,
          s(:send, nil, :touch_system_cache_path),
          s(:send,
            s(:ivar, :@req), :path=,
            s(:str, "/js/search_index.js")),
          s(:send,
            s(:ivar, :@s), :do_GET,
            s(:ivar, :@req),
            s(:ivar, :@res)),
          s(:send, nil, :assert_equal,
            s(:str, "application/javascript"),
            s(:send,
              s(:ivar, :@res), :content_type),
            s(:send,
              s(:ivar, :@res), :body)))),
      s(:def, :test_documentation_page_class,
        s(:args),
        s(:begin,
          s(:lvasgn, :store,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:lvasgn, :generator,
            s(:send,
              s(:ivar, :@s), :generator_for,
              s(:lvar, :store))),
          s(:lvasgn, :file,
            s(:send,
              s(:lvar, :store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :klass,
            s(:send,
              s(:lvar, :file), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :klass), :add_class,
            s(:const,
              s(:const, nil, :RDoc), :NormalClass),
            s(:str, "Sub")),
          s(:send,
            s(:ivar, :@s), :documentation_page,
            s(:lvar, :store),
            s(:lvar, :generator),
            s(:str, "Klass::Sub.html"),
            s(:ivar, :@req),
            s(:ivar, :@res)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "<title>class Klass::Sub - </title>"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@res), :body)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "<body id=\"top\" role=\"document\" class=\"class\">"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@res), :body)))),
      s(:def, :test_documentation_page_not_found,
        s(:args),
        s(:begin,
          s(:lvasgn, :store,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:lvasgn, :generator,
            s(:send,
              s(:ivar, :@s), :generator_for,
              s(:lvar, :store))),
          s(:send,
            s(:ivar, :@req), :path=,
            s(:str, "/ruby/Missing.html")),
          s(:send,
            s(:ivar, :@s), :documentation_page,
            s(:lvar, :store),
            s(:lvar, :generator),
            s(:str, "Missing.html"),
            s(:ivar, :@req),
            s(:ivar, :@res)),
          s(:send, nil, :assert_equal,
            s(:int, 404),
            s(:send,
              s(:ivar, :@res), :status)))),
      s(:def, :test_documentation_page_page,
        s(:args),
        s(:begin,
          s(:lvasgn, :store,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:lvasgn, :generator,
            s(:send,
              s(:ivar, :@s), :generator_for,
              s(:lvar, :store))),
          s(:lvasgn, :readme,
            s(:send,
              s(:lvar, :store), :add_file,
              s(:str, "README.rdoc"))),
          s(:send,
            s(:lvar, :readme), :parser=,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Parser), :Simple)),
          s(:send,
            s(:ivar, :@s), :documentation_page,
            s(:lvar, :store),
            s(:lvar, :generator),
            s(:str, "README_rdoc.html"),
            s(:ivar, :@req),
            s(:ivar, :@res)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "<title>README - </title>"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@res), :body)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "<body [^>]+ class=\"file\">"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@res), :body)))),
      s(:def, :test_documentation_source,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :store),
              s(:lvasgn, :path)),
            s(:send,
              s(:ivar, :@s), :documentation_source,
              s(:str, "/ruby/Object.html"))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@system_dir),
            s(:send,
              s(:lvar, :store), :path)),
          s(:send, nil, :assert_equal,
            s(:str, "Object.html"),
            s(:lvar, :path)))),
      s(:def, :test_documentation_source_cached,
        s(:args),
        s(:begin,
          s(:lvasgn, :cached_store,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:send,
            s(:ivar, :@stores), :[]=,
            s(:str, "ruby"),
            s(:lvar, :cached_store)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :store),
              s(:lvasgn, :path)),
            s(:send,
              s(:ivar, :@s), :documentation_source,
              s(:str, "/ruby/Object.html"))),
          s(:send, nil, :assert_same,
            s(:lvar, :cached_store),
            s(:lvar, :store)),
          s(:send, nil, :assert_equal,
            s(:str, "Object.html"),
            s(:lvar, :path)))),
      s(:def, :test_error,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:send,
              s(:const, nil, :RuntimeError), :new,
              s(:str, "foo"))),
          s(:send,
            s(:lvar, :e), :set_backtrace,
            s(:send, nil, :caller)),
          s(:send,
            s(:ivar, :@s), :error,
            s(:lvar, :e),
            s(:ivar, :@req),
            s(:ivar, :@res)),
          s(:send, nil, :assert_equal,
            s(:str, "text/html"),
            s(:send,
              s(:ivar, :@res), :content_type)),
          s(:send, nil, :assert_equal,
            s(:int, 500),
            s(:send,
              s(:ivar, :@res), :status)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "<title>Error"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@res), :body)))),
      s(:def, :test_generator_for,
        s(:args),
        s(:begin,
          s(:lvasgn, :store,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:send,
            s(:lvar, :store), :main=,
            s(:str, "MAIN_PAGE.rdoc")),
          s(:send,
            s(:lvar, :store), :title=,
            s(:str, "Title")),
          s(:lvasgn, :generator,
            s(:send,
              s(:ivar, :@s), :generator_for,
              s(:lvar, :store))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :generator), :file_output)),
          s(:send, nil, :assert_equal,
            s(:str, ".."),
            s(:send,
              s(:lvar, :generator), :asset_rel_path)),
          s(:send, nil, :assert_equal,
            s(:str, "MAIN_PAGE.rdoc"),
            s(:send,
              s(:send,
                s(:ivar, :@s), :options), :main_page)),
          s(:send, nil, :assert_equal,
            s(:str, "Title"),
            s(:send,
              s(:send,
                s(:ivar, :@s), :options), :title)),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :RDoc), :RDoc),
            s(:send,
              s(:lvar, :store), :rdoc)),
          s(:send, nil, :assert_same,
            s(:lvar, :generator),
            s(:send,
              s(:send,
                s(:lvar, :store), :rdoc), :generator)))),
      s(:def, :test_if_modified_since,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Gem), :win_platform?),
            s(:send, nil, :skip,
              s(:str, "File.utime on directory not supported")), nil),
          s(:block,
            s(:send, nil, :temp_dir),
            s(:args),
            s(:begin,
              s(:lvasgn, :now,
                s(:send,
                  s(:const, nil, :Time), :now)),
              s(:send,
                s(:const, nil, :File), :utime,
                s(:lvar, :now),
                s(:lvar, :now),
                s(:str, ".")),
              s(:send,
                s(:ivar, :@s), :if_modified_since,
                s(:ivar, :@req),
                s(:ivar, :@res),
                s(:str, ".")),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :now), :to_i),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :parse,
                    s(:send,
                      s(:ivar, :@res), :[],
                      s(:str, "last-modified"))), :to_i)))))),
      s(:def, :test_if_modified_since_not_modified,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Gem), :win_platform?),
            s(:send, nil, :skip,
              s(:str, "File.utime on directory not supported")), nil),
          s(:block,
            s(:send, nil, :temp_dir),
            s(:args),
            s(:begin,
              s(:lvasgn, :now,
                s(:send,
                  s(:const, nil, :Time), :now)),
              s(:send,
                s(:const, nil, :File), :utime,
                s(:lvar, :now),
                s(:lvar, :now),
                s(:str, ".")),
              s(:send,
                s(:send,
                  s(:ivar, :@req), :header), :[]=,
                s(:str, "if-modified-since"),
                s(:array,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:lvar, :now), :+,
                        s(:int, 10))), :httpdate))),
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :WEBrick), :HTTPStatus), :NotModified)),
                s(:args),
                s(:send,
                  s(:ivar, :@s), :if_modified_since,
                  s(:ivar, :@req),
                  s(:ivar, :@res),
                  s(:str, "."))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :now), :to_i),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :parse,
                    s(:send,
                      s(:ivar, :@res), :[],
                      s(:str, "last-modified"))), :to_i)))))),
      s(:def, :test_installed_docs,
        s(:args),
        s(:begin,
          s(:send, nil, :touch_system_cache_path),
          s(:send, nil, :touch_extra_cache_path),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:str, "My Extra Documentation"),
                s(:str, "extra-1/"),
                s(:true),
                s(:sym, :extra),
                s(:send,
                  s(:ivar, :@extra_dirs), :[],
                  s(:int, 0))),
              s(:array,
                s(:str, "Extra Documentation"),
                s(:str, "extra-2/"),
                s(:false),
                s(:sym, :extra),
                s(:send,
                  s(:ivar, :@extra_dirs), :[],
                  s(:int, 1))),
              s(:array,
                s(:str, "Ruby Documentation"),
                s(:str, "ruby/"),
                s(:true),
                s(:sym, :system),
                s(:ivar, :@system_dir)),
              s(:array,
                s(:str, "Site Documentation"),
                s(:str, "site/"),
                s(:false),
                s(:sym, :site),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:ivar, :@base),
                  s(:str, "site"))),
              s(:array,
                s(:str, "Home Documentation"),
                s(:str, "home/"),
                s(:false),
                s(:sym, :home),
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :RI), :Paths), :HOMEDIR)),
              s(:array,
                s(:str, "spec-1.0"),
                s(:str, "spec-1.0/"),
                s(:false),
                s(:sym, :gem),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:send,
                    s(:ivar, :@spec), :doc_dir),
                  s(:str, "ri"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@s), :installed_docs)))),
      s(:def, :test_not_found,
        s(:args),
        s(:begin,
          s(:lvasgn, :generator,
            s(:send,
              s(:ivar, :@s), :generator_for,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Store), :new))),
          s(:send,
            s(:ivar, :@req), :path=,
            s(:str, "/ruby/Missing.html")),
          s(:send,
            s(:ivar, :@s), :not_found,
            s(:lvar, :generator),
            s(:ivar, :@req),
            s(:ivar, :@res)),
          s(:send, nil, :assert_equal,
            s(:int, 404),
            s(:send,
              s(:ivar, :@res), :status)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "<title>Not Found</title>"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@res), :body)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "<kbd>/ruby/Missing\\.html</kbd>"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@res), :body)))),
      s(:def, :test_not_found_message,
        s(:args),
        s(:begin,
          s(:lvasgn, :generator,
            s(:send,
              s(:ivar, :@s), :generator_for,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Store), :new))),
          s(:send,
            s(:ivar, :@req), :path=,
            s(:str, "/ruby/Missing.html")),
          s(:send,
            s(:ivar, :@s), :not_found,
            s(:lvar, :generator),
            s(:ivar, :@req),
            s(:ivar, :@res),
            s(:str, "woo, this is a message")),
          s(:send, nil, :assert_equal,
            s(:int, 404),
            s(:send,
              s(:ivar, :@res), :status)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "<title>Not Found</title>"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@res), :body)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "woo, this is a message"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@res), :body)))),
      s(:def, :test_ri_paths,
        s(:args),
        s(:begin,
          s(:lvasgn, :paths,
            s(:send,
              s(:ivar, :@s), :ri_paths)),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:send,
                  s(:ivar, :@extra_dirs), :[],
                  s(:int, 0)),
                s(:sym, :extra)),
              s(:array,
                s(:send,
                  s(:ivar, :@extra_dirs), :[],
                  s(:int, 1)),
                s(:sym, :extra)),
              s(:array,
                s(:ivar, :@system_dir),
                s(:sym, :system)),
              s(:array,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:ivar, :@base),
                  s(:str, "site")),
                s(:sym, :site)),
              s(:array,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :RI), :Paths), :HOMEDIR),
                s(:sym, :home)),
              s(:array,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:send,
                    s(:ivar, :@spec), :doc_dir),
                  s(:str, "ri")),
                s(:sym, :gem)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :paths), :to_a)))),
      s(:def, :test_root,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@s), :root,
            s(:ivar, :@req),
            s(:ivar, :@res)),
          s(:send, nil, :assert_equal,
            s(:str, "text/html"),
            s(:send,
              s(:ivar, :@res), :content_type)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "<title>Local RDoc Documentation</title>"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@res), :body)))),
      s(:def, :test_root_search,
        s(:args),
        s(:begin,
          s(:send, nil, :touch_system_cache_path),
          s(:send, nil, :touch_extra_cache_path),
          s(:send,
            s(:ivar, :@s), :root_search,
            s(:ivar, :@req),
            s(:ivar, :@res)),
          s(:send, nil, :assert_equal,
            s(:str, "application/javascript"),
            s(:send,
              s(:ivar, :@res), :content_type)),
          s(:send,
            s(:send,
              s(:ivar, :@res), :body), :=~,
            s(:regexp,
              s(:str, "\\{.*\\}"),
              s(:regopt))),
          s(:lvasgn, :index,
            s(:send,
              s(:const, nil, :JSON), :parse,
              s(:back_ref, :$&))),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:str, "index"),
                s(:hash,
                  s(:pair,
                    s(:str, "searchIndex"),
                    s(:array,
                      s(:str, "My Extra Documentation"),
                      s(:str, "Ruby Documentation"))),
                  s(:pair,
                    s(:str, "longSearchIndex"),
                    s(:array,
                      s(:str, "My Extra Documentation"),
                      s(:str, "Ruby Documentation"))),
                  s(:pair,
                    s(:str, "info"),
                    s(:array,
                      s(:array,
                        s(:str, "My Extra Documentation"),
                        s(:str, ""),
                        s(:send,
                          s(:ivar, :@extra_dirs), :[],
                          s(:int, 0)),
                        s(:str, ""),
                        s(:str, "My Extra Documentation")),
                      s(:array,
                        s(:str, "Ruby Documentation"),
                        s(:str, ""),
                        s(:str, "ruby"),
                        s(:str, ""),
                        s(:str, "Documentation for the Ruby standard library")))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :index)))),
      s(:def, :test_show_documentation_index,
        s(:args),
        s(:begin,
          s(:send, nil, :touch_system_cache_path),
          s(:send,
            s(:ivar, :@req), :path=,
            s(:str, "/ruby")),
          s(:send,
            s(:ivar, :@s), :show_documentation,
            s(:ivar, :@req),
            s(:ivar, :@res)),
          s(:send, nil, :assert_equal,
            s(:str, "text/html"),
            s(:send,
              s(:ivar, :@res), :content_type)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "<title>Standard Library Documentation"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@res), :body)))),
      s(:def, :test_show_documentation_table_of_contents,
        s(:args),
        s(:begin,
          s(:send, nil, :touch_system_cache_path),
          s(:send,
            s(:ivar, :@req), :path=,
            s(:str, "/ruby/table_of_contents.html")),
          s(:send,
            s(:ivar, :@s), :show_documentation,
            s(:ivar, :@req),
            s(:ivar, :@res)),
          s(:send, nil, :assert_equal,
            s(:str, "text/html"),
            s(:send,
              s(:ivar, :@res), :content_type)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "<title>Table of Contents - Standard Library Documentation"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@res), :body)))),
      s(:def, :test_show_documentation_page,
        s(:args),
        s(:begin,
          s(:send, nil, :touch_system_cache_path),
          s(:send,
            s(:ivar, :@req), :path=,
            s(:str, "/ruby/Missing.html")),
          s(:send,
            s(:ivar, :@s), :show_documentation,
            s(:ivar, :@req),
            s(:ivar, :@res)),
          s(:send, nil, :assert_equal,
            s(:int, 404),
            s(:send,
              s(:ivar, :@res), :status)))),
      s(:def, :test_show_documentation_search_index,
        s(:args),
        s(:begin,
          s(:send, nil, :touch_system_cache_path),
          s(:send,
            s(:ivar, :@req), :path=,
            s(:str, "/ruby/js/search_index.js")),
          s(:send,
            s(:ivar, :@s), :show_documentation,
            s(:ivar, :@req),
            s(:ivar, :@res)),
          s(:send, nil, :assert_equal,
            s(:str, "application/javascript"),
            s(:send,
              s(:ivar, :@res), :content_type)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\Avar search_data ="),
              s(:regopt)),
            s(:send,
              s(:ivar, :@res), :body)))),
      s(:def, :test_store_for_gem,
        s(:args),
        s(:begin,
          s(:lvasgn, :ri_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gem_doc_dir),
              s(:str, "spec-1.0"),
              s(:str, "ri"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:lvar, :ri_dir)),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :ri_dir),
              s(:str, "cache.ri"))),
          s(:lvasgn, :store,
            s(:send,
              s(:ivar, :@s), :store_for,
              s(:str, "spec-1.0"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gem_doc_dir),
              s(:str, "spec-1.0"),
              s(:str, "ri")),
            s(:send,
              s(:lvar, :store), :path)),
          s(:send, nil, :assert_equal,
            s(:sym, :gem),
            s(:send,
              s(:lvar, :store), :type)))),
      s(:def, :test_store_for_home,
        s(:args),
        s(:begin,
          s(:lvasgn, :store,
            s(:send,
              s(:ivar, :@s), :store_for,
              s(:str, "home"))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@home_dir),
            s(:send,
              s(:lvar, :store), :path)),
          s(:send, nil, :assert_equal,
            s(:sym, :home),
            s(:send,
              s(:lvar, :store), :type)))),
      s(:def, :test_store_for_missing_documentation,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gem_doc_dir),
              s(:str, "spec-1.0"),
              s(:str, "ri"))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :WEBrick), :HTTPStatus), :NotFound)),
              s(:args),
              s(:send,
                s(:ivar, :@s), :store_for,
                s(:str, "spec-1.0")))),
          s(:send, nil, :assert_equal,
            s(:str, "Could not find documentation for \"spec-1.0\". Please run `gem rdoc --ri gem_name`"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_store_for_missing_gem,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :WEBrick), :HTTPStatus), :NotFound)),
              s(:args),
              s(:send,
                s(:ivar, :@s), :store_for,
                s(:str, "missing")))),
          s(:send, nil, :assert_equal,
            s(:str, "Could not find gem \"missing\". Are you sure you installed it?"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_store_for_ruby,
        s(:args),
        s(:begin,
          s(:lvasgn, :store,
            s(:send,
              s(:ivar, :@s), :store_for,
              s(:str, "ruby"))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@system_dir),
            s(:send,
              s(:lvar, :store), :path)),
          s(:send, nil, :assert_equal,
            s(:sym, :system),
            s(:send,
              s(:lvar, :store), :type)))),
      s(:def, :test_store_for_site,
        s(:args),
        s(:begin,
          s(:lvasgn, :store,
            s(:send,
              s(:ivar, :@s), :store_for,
              s(:str, "site"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@base),
              s(:str, "site")),
            s(:send,
              s(:lvar, :store), :path)),
          s(:send, nil, :assert_equal,
            s(:sym, :site),
            s(:send,
              s(:lvar, :store), :type)))),
      s(:def, :test_store_for_extra,
        s(:args),
        s(:begin,
          s(:lvasgn, :store,
            s(:send,
              s(:ivar, :@s), :store_for,
              s(:str, "extra-1"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@extra_dirs), :first),
            s(:send,
              s(:lvar, :store), :path)),
          s(:send, nil, :assert_equal,
            s(:sym, :extra),
            s(:send,
              s(:lvar, :store), :type)))),
      s(:def, :touch_system_cache_path,
        s(:args),
        s(:begin,
          s(:lvasgn, :store,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new,
              s(:ivar, :@system_dir))),
          s(:send,
            s(:lvar, :store), :title=,
            s(:str, "Standard Library Documentation")),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:send,
                s(:lvar, :store), :cache_path))),
          s(:send,
            s(:lvar, :store), :save))),
      s(:def, :touch_extra_cache_path,
        s(:args),
        s(:begin,
          s(:lvasgn, :store,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new,
              s(:send,
                s(:ivar, :@extra_dirs), :first))),
          s(:send,
            s(:lvar, :store), :title=,
            s(:str, "My Extra Documentation")),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:send,
                s(:lvar, :store), :cache_path))),
          s(:send,
            s(:lvar, :store), :save))))))
