s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocContextSection),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:ivasgn, :@klass,
            s(:send,
              s(:ivar, :@top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Object"))),
          s(:ivasgn, :@S,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Context), :Section)),
          s(:ivasgn, :@s,
            s(:send,
              s(:ivar, :@S), :new,
              s(:ivar, :@klass),
              s(:str, "section"),
              s(:send, nil, :comment,
                s(:str, "# comment"),
                s(:ivar, :@top_level)))))),
      s(:def, :test_add_comment,
        s(:args),
        s(:begin,
          s(:lvasgn, :file1,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file1.rb"))),
          s(:lvasgn, :klass,
            s(:send,
              s(:lvar, :file1), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"))),
          s(:lvasgn, :c1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Comment), :new,
              s(:str, "# :section: section\n"),
              s(:lvar, :file1))),
          s(:lvasgn, :c2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Comment), :new,
              s(:str, "# hello\n"),
              s(:lvar, :file1))),
          s(:lvasgn, :c3,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Comment), :new,
              s(:str, "# world\n"),
              s(:lvar, :file1))),
          s(:lvasgn, :s,
            s(:send,
              s(:ivar, :@S), :new,
              s(:lvar, :klass),
              s(:str, "section"),
              s(:lvar, :c1))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :s), :comments)),
          s(:send,
            s(:lvar, :s), :add_comment,
            s(:nil)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :s), :comments)),
          s(:send,
            s(:lvar, :s), :add_comment,
            s(:lvar, :c2)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :c2)),
            s(:send,
              s(:lvar, :s), :comments)),
          s(:send,
            s(:lvar, :s), :add_comment,
            s(:lvar, :c3)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :c2),
              s(:lvar, :c3)),
            s(:send,
              s(:lvar, :s), :comments)))),
      s(:def, :test_aref,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "section"),
            s(:send,
              s(:ivar, :@s), :aref)),
          s(:send, nil, :assert_equal,
            s(:str, "5Buntitled-5D"),
            s(:send,
              s(:send,
                s(:ivar, :@S), :new,
                s(:nil),
                s(:nil),
                s(:nil)), :aref)),
          s(:send, nil, :assert_equal,
            s(:str, "one+two"),
            s(:send,
              s(:send,
                s(:ivar, :@S), :new,
                s(:nil),
                s(:str, "one two"),
                s(:nil)), :aref)))),
      s(:def, :test_extract_comment,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@s), :extract_comment,
                s(:send, nil, :comment,
                  s(:str, ""))), :text)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@s), :extract_comment,
                s(:send, nil, :comment,
                  s(:str, "# :section: b\n"))), :text)),
          s(:send, nil, :assert_equal,
            s(:str, "# c"),
            s(:send,
              s(:send,
                s(:ivar, :@s), :extract_comment,
                s(:send, nil, :comment,
                  s(:str, "# :section: b\n# c"))), :text)),
          s(:send, nil, :assert_equal,
            s(:str, "# c"),
            s(:send,
              s(:send,
                s(:ivar, :@s), :extract_comment,
                s(:send, nil, :comment,
                  s(:str, "# a\n# :section: b\n# c"))), :text)))),
      s(:def, :test_marshal_dump,
        s(:args),
        s(:begin,
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:ivar, :@s)))),
          s(:lvasgn, :expected,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Comment), :new,
                s(:str, "comment"),
                s(:ivar, :@top_level)), :parse)),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:lvar, :expected))),
          s(:send, nil, :assert_equal,
            s(:str, "section"),
            s(:send,
              s(:lvar, :loaded), :title)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :loaded), :comments)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :loaded), :parent),
            s(:str, "parent is set manually")))),
      s(:def, :test_marshal_dump_no_comment,
        s(:args),
        s(:begin,
          s(:lvasgn, :s,
            s(:send,
              s(:ivar, :@S), :new,
              s(:ivar, :@klass),
              s(:str, "section"),
              s(:send, nil, :comment,
                s(:str, "")))),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:lvar, :s)))),
          s(:send, nil, :assert_equal,
            s(:str, "section"),
            s(:send,
              s(:lvar, :loaded), :title)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :loaded), :comments)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :loaded), :parent),
            s(:str, "parent is set manually")))),
      s(:def, :test_marshal_load_version_0,
        s(:args),
        s(:begin,
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:str, "\u0004\bU:\eRDoc::Context::Section"), :+,
                          s(:str, "[\bi\u0000I\"\fsection\u0006:\u0006EFo")), :+,
                        s(:str, ":\eRDoc::Markup::Document\a:\v@parts")), :+,
                      s(:str, "[\u0006o;\a\a;\b[\u0006o")), :+,
                    s(:str, ":\u001CRDoc::Markup::Paragraph\u0006;\b")), :+,
                  s(:str, "[\u0006I\"\fcomment\u0006;\u0006F:\n@fileI")), :+,
                s(:str, "\"\ffile.rb\u0006;\u0006F;\n0")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :RDoc), :Comment), :new,
                  s(:str, "comment"),
                  s(:ivar, :@top_level)), :parse))),
          s(:send, nil, :assert_equal,
            s(:str, "section"),
            s(:send,
              s(:lvar, :loaded), :title)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :loaded), :comments)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :loaded), :parent),
            s(:str, "parent is set manually")))),
      s(:def, :test_remove_comment_array,
        s(:args),
        s(:begin,
          s(:lvasgn, :other,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "other.rb"))),
          s(:lvasgn, :other_comment,
            s(:send, nil, :comment,
              s(:str, "bogus"),
              s(:lvar, :other))),
          s(:send,
            s(:ivar, :@s), :add_comment,
            s(:lvar, :other_comment)),
          s(:send,
            s(:ivar, :@s), :remove_comment,
            s(:send, nil, :comment,
              s(:str, "bogus"),
              s(:ivar, :@top_level))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :other_comment)),
            s(:send,
              s(:ivar, :@s), :comments)))),
      s(:def, :test_remove_comment_document,
        s(:args),
        s(:begin,
          s(:lvasgn, :other,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "other.rb"))),
          s(:lvasgn, :other_comment,
            s(:send, nil, :comment,
              s(:str, "bogus"),
              s(:lvar, :other))),
          s(:send,
            s(:ivar, :@s), :add_comment,
            s(:lvar, :other_comment)),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:ivar, :@s)))),
          s(:send,
            s(:lvar, :loaded), :remove_comment,
            s(:send, nil, :comment,
              s(:str, "bogus"),
              s(:ivar, :@top_level))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :doc,
              s(:send,
                s(:lvar, :other_comment), :parse)),
            s(:send,
              s(:lvar, :loaded), :comments)))),
      s(:def, :test_sequence,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :_),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :verbose_capture_io),
              s(:args),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "\\ASEC\\d{5}\\Z"),
                  s(:regopt)),
                s(:send,
                  s(:ivar, :@s), :sequence)))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:begin,
                s(:ivar, :@S)),
              s(:str, "#sequence is deprecated, use #aref\n")),
            s(:lvar, :err)))))))
