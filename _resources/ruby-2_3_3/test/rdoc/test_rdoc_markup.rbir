s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocMarkup),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :test_class_parse,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "hello")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :parse,
              s(:str, "hello"))))),
      s(:def, :test_convert,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "now is\n"),
              s(:str, "the time\n"),
              s(:str, "\n"),
              s(:str, "  hello\n"),
              s(:str, "  dave\n"),
              s(:str, "\n"),
              s(:str, "1. l1\n"),
              s(:str, "2. l2\n"))),
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :new)),
          s(:lvasgn, :tt,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :ToTest), :new,
              s(:lvar, :m))),
          s(:lvasgn, :out,
            s(:send,
              s(:lvar, :m), :convert,
              s(:lvar, :str),
              s(:lvar, :tt))),
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "now is the time"),
              s(:str, "\n"),
              s(:str, "  hello\n  dave\n"),
              s(:str, "1: "),
              s(:str, "l1"),
              s(:str, "1: "),
              s(:str, "l2"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_convert_custom_markup,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "{stricken}\n")),
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :new)),
          s(:send,
            s(:lvar, :m), :add_word_pair,
            s(:str, "{"),
            s(:str, "}"),
            s(:sym, :STRIKE)),
          s(:lvasgn, :tt,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :ToTest), :new,
              s(:nil),
              s(:lvar, :m))),
          s(:send,
            s(:lvar, :tt), :add_tag,
            s(:sym, :STRIKE),
            s(:str, "STRIKE "),
            s(:str, " STRIKE")),
          s(:lvasgn, :out,
            s(:send,
              s(:lvar, :m), :convert,
              s(:lvar, :str),
              s(:lvar, :tt))),
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "STRIKE stricken STRIKE"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_convert_document,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Parser), :parse,
              s(:dstr,
                s(:str, "now is\n"),
                s(:str, "the time\n"),
                s(:str, "\n"),
                s(:str, "  hello\n"),
                s(:str, "  dave\n"),
                s(:str, "\n"),
                s(:str, "1. l1\n"),
                s(:str, "2. l2\n")))),
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :new)),
          s(:lvasgn, :tt,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :ToTest), :new,
              s(:lvar, :m))),
          s(:lvasgn, :out,
            s(:send,
              s(:lvar, :m), :convert,
              s(:lvar, :doc),
              s(:lvar, :tt))),
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "now is the time"),
              s(:str, "\n"),
              s(:str, "  hello\n  dave\n"),
              s(:str, "1: "),
              s(:str, "l1"),
              s(:str, "1: "),
              s(:str, "l2"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))))))
