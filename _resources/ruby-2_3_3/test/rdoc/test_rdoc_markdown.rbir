s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:send, nil, :require,
    s(:str, "rdoc/markup/block_quote")),
  s(:send, nil, :require,
    s(:str, "rdoc/markdown")),
  s(:class,
    s(:const, nil, :TestRDocMarkdown),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@RM,
            s(:const,
              s(:const, nil, :RDoc), :Markup)),
          s(:ivasgn, :@parser,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Markdown), :new)),
          s(:ivasgn, :@to_html,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :ToHtml), :new,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Options), :new),
              s(:nil))))),
      s(:def, :test_class_parse,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Markdown), :parse,
              s(:str, "hello\n\nworld"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "hello")),
              s(:send, nil, :para,
                s(:str, "world")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_emphasis,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "_word_"),
            s(:send,
              s(:ivar, :@parser), :emphasis,
              s(:str, "word"))),
          s(:send, nil, :assert_equal,
            s(:str, "<em>two words</em>"),
            s(:send,
              s(:ivar, :@parser), :emphasis,
              s(:str, "two words"))),
          s(:send, nil, :assert_equal,
            s(:str, "<em>*bold*</em>"),
            s(:send,
              s(:ivar, :@parser), :emphasis,
              s(:str, "*bold*"))))),
      s(:def, :test_parse_auto_link_email,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "Autolink: <nobody-0+_./!%~$@example>"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Autolink: mailto:nobody-0+_./!%~$@example")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_auto_link_url,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "Autolink: <http://example>"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Autolink: http://example")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_block_quote,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "> this is\n"),
                s(:str, "> a block quote\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :block,
                s(:send, nil, :para,
                  s(:str, "this is\na block quote"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_block_quote_continue,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "> this is\n"),
                s(:str, "a block quote\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :block,
                s(:send, nil, :para,
                  s(:str, "this is\na block quote"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_block_quote_list,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "> text\n"),
                s(:str, ">\n"),
                s(:str, "> * one\n"),
                s(:str, "> * two\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :block,
                s(:send, nil, :para,
                  s(:str, "text")),
                s(:send, nil, :list,
                  s(:sym, :BULLET),
                  s(:send, nil, :item,
                    s(:nil),
                    s(:send, nil, :para,
                      s(:str, "one"))),
                  s(:send, nil, :item,
                    s(:nil),
                    s(:send, nil, :para,
                      s(:str, "two"))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_block_quote_newline,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "> this is\n"),
                s(:str, "a block quote\n"),
                s(:str, "\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :block,
                s(:send, nil, :para,
                  s(:str, "this is\na block quote"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_block_quote_separate,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "> this is\n"),
                s(:str, "a block quote\n"),
                s(:str, "\n"),
                s(:str, "> that continues\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :block,
                s(:send, nil, :para,
                  s(:str, "this is\na block quote")),
                s(:send, nil, :para,
                  s(:str, "that continues"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_char_entity,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "&pi; &nn;"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Ï€ &nn;")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_code,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "Code: `text`"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Code: <code>text</code>")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_code_github,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "Example:\n"),
                s(:str, "\n"),
                s(:str, "```\n"),
                s(:str, "code goes here\n"),
                s(:str, "```\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Example:")),
              s(:send, nil, :verb,
                s(:str, "code goes here\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_code_github_format,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "Example:\n"),
                s(:str, "\n"),
                s(:str, "``` ruby\n"),
                s(:str, "code goes here\n"),
                s(:str, "```\n")))),
          s(:lvasgn, :code,
            s(:send, nil, :verb,
              s(:str, "code goes here\n"))),
          s(:send,
            s(:lvar, :code), :format=,
            s(:sym, :ruby)),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Example:")),
              s(:lvar, :code))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_definition_list,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "one\n"),
                s(:str, ":   This is a definition\n"),
                s(:str, "\n"),
                s(:str, "two\n"),
                s(:str, ":   This is another definition\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "one")),
                  s(:send, nil, :para,
                    s(:str, "This is a definition"))),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "two")),
                  s(:send, nil, :para,
                    s(:str, "This is another definition")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_definition_list_indents,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "zero\n"),
                s(:str, ": Indented zero characters\n"),
                s(:str, "\n"),
                s(:str, "one\n"),
                s(:str, " : Indented one characters\n"),
                s(:str, "\n"),
                s(:str, "two\n"),
                s(:str, "  : Indented two characters\n"),
                s(:str, "\n"),
                s(:str, "three\n"),
                s(:str, "   : Indented three characters\n"),
                s(:str, "\n"),
                s(:str, "four\n"),
                s(:str, "    : Indented four characters\n"),
                s(:str, "\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "zero")),
                  s(:send, nil, :para,
                    s(:str, "Indented zero characters"))),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "one")),
                  s(:send, nil, :para,
                    s(:str, "Indented one characters"))),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "two")),
                  s(:send, nil, :para,
                    s(:str, "Indented two characters"))),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "three")),
                  s(:send, nil, :para,
                    s(:str, "Indented three characters")))),
              s(:send, nil, :para,
                s(:str, "four\n : Indented four characters")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_definition_list_multi_description,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "label\n"),
                s(:str, ":   This is a definition\n"),
                s(:str, "\n"),
                s(:str, ":   This is another definition\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "label")),
                  s(:send, nil, :para,
                    s(:str, "This is a definition"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "This is another definition")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_definition_list_multi_label,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "one\n"),
                s(:str, "two\n"),
                s(:str, ":   This is a definition\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "one"),
                    s(:str, "two")),
                  s(:send, nil, :para,
                    s(:str, "This is a definition")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_definition_list_multi_line,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "one\n"),
                s(:str, ":   This is a definition\n"),
                s(:str, "that extends to two lines\n"),
                s(:str, "\n"),
                s(:str, "two\n"),
                s(:str, ":   This is another definition\n"),
                s(:str, "that also extends to two lines\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "one")),
                  s(:send, nil, :para,
                    s(:str, "This is a definition\nthat extends to two lines"))),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "two")),
                  s(:send, nil, :para,
                    s(:str, "This is another definition\nthat also extends to two lines")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_definition_list_no,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@parser), :definition_lists=,
            s(:false)),
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "one\n"),
                s(:str, ":   This is a definition\n"),
                s(:str, "\n"),
                s(:str, "two\n"),
                s(:str, ":   This is another definition\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "one\n: This is a definition")),
              s(:send, nil, :para,
                s(:str, "two\n: This is another definition")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_entity_dec,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "Entity: &#65;"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Entity: A")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_entity_hex,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "Entity: &#x41;"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Entity: A")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_entity_named,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "Entity: &pi;"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Entity: Ï€")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_emphasis_star,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "it *works*\n"))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "it _works_")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_emphasis_underscore,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "it _works_\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "it _works_")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_emphasis_underscore_embedded,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "foo_bar bar_baz\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "foo_bar bar_baz")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_emphasis_underscore_in_word,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "it foo_bar_baz\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "it foo_bar_baz")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_escape,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Backtick: `"))),
            s(:send, nil, :parse,
              s(:str, "Backtick: \\`"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Backslash: \\"))),
            s(:send, nil, :parse,
              s(:str, "Backslash: \\\\"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Colon: :"))),
            s(:send, nil, :parse,
              s(:str, "Colon: \\:"))))),
      s(:def, :test_parse_heading_atx,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "# heading\n"))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "heading")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_heading_setext_dash,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "heading\n"),
                s(:str, "---\n")))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 2),
                s(:str, "heading")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_heading_setext_equals,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "heading\n"),
                s(:str, "===\n")))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "heading")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_html,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@parser), :html=,
            s(:true)),
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "<address>Links here</address>\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Raw), :new,
                s(:str, "<address>Links here</address>")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_html_hr,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@parser), :html=,
            s(:true)),
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "<hr>\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :raw,
                s(:str, "<hr>")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_html_no_html,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@parser), :html=,
            s(:false)),
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "<address>Links here</address>\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_image,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "image ![alt text](path/to/image.jpg)"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "image rdoc-image:path/to/image.jpg")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_image_link,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@parser), :html=,
            s(:true)),
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "[![alt text](path/to/image.jpg)](http://example.com)"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "{rdoc-image:path/to/image.jpg}[http://example.com]")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_line_break,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "Some text  \nwith extra lines"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Some text"),
                s(:send, nil, :hard_break),
                s(:str, "with extra lines")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_link_reference_id,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "This is [an example][id] reference-style link.\n"),
                s(:str, "\n"),
                s(:str, "[id]: http://example.com \"Optional Title Here\"\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "This is {an example}[http://example.com] reference-style link.")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_link_reference_id_adjacent,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "[this] [this] should work\n"),
                s(:str, "\n"),
                s(:str, "[this]: example\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "{this}[example] should work")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_link_reference_id_eof,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:send,
                s(:dstr,
                  s(:str, "This is [an example][id] reference-style link.\n"),
                  s(:str, "\n"),
                  s(:str, "[id]: http://example.com \"Optional Title Here\"\n")), :chomp))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "This is {an example}[http://example.com] reference-style link.")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_link_reference_id_many,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "This is [an example][id] reference-style link.\n"),
                s(:str, "\n"),
                s(:str, "And [another][id].\n"),
                s(:str, "\n"),
                s(:str, "[id]: http://example.com \"Optional Title Here\"\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "This is {an example}[http://example.com] reference-style link.")),
              s(:send, nil, :para,
                s(:str, "And {another}[http://example.com].")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_link_reference_implicit,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "This is [an example][] reference-style link.\n"),
                s(:str, "\n"),
                s(:str, "[an example]: http://example.com \"Optional Title Here\"\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "This is {an example}[http://example.com] reference-style link.")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_list_bullet,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "* one\n"),
                s(:str, "* two\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "one"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "two")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_list_bullet_auto_link,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "* <http://example/>\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "http://example/")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_list_bullet_continue,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "* one\n"),
                s(:str, "\n"),
                s(:str, "* two\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "one"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "two")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_list_bullet_multiline,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "* one\n"),
                s(:str, "  two\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "one\n two")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_list_bullet_nest,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "* outer\n"),
                s(:str, "    * inner\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "outer")),
                  s(:send, nil, :list,
                    s(:sym, :BULLET),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "inner")))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_list_bullet_nest_loose,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "* outer\n"),
                s(:str, "\n"),
                s(:str, "    * inner\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "outer")),
                  s(:send, nil, :list,
                    s(:sym, :BULLET),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "inner")))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_list_bullet_nest_continue,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "* outer\n"),
                s(:str, "    * inner\n"),
                s(:str, "  continue inner\n"),
                s(:str, "* outer 2\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "outer")),
                  s(:send, nil, :list,
                    s(:sym, :BULLET),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "inner\n continue inner"))))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "outer 2")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_list_number,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "1. one\n"),
                s(:str, "1. two\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :list,
                s(:sym, :NUMBER),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "one"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "two")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_list_number_continue,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "1. one\n"),
                s(:str, "\n"),
                s(:str, "1. two\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :list,
                s(:sym, :NUMBER),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "one"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "two")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_note,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@parser), :notes=,
            s(:true)),
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "Some text.[^1]\n"),
                s(:str, "\n"),
                s(:str, "[^1]: With a footnote\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Some text.{*1}[rdoc-label:foottext-1:footmark-1]")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Rule), :new,
                s(:int, 1)),
              s(:send, nil, :para,
                s(:str, "{^1}[rdoc-label:footmark-1:foottext-1] With a footnote")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_note_indent,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@parser), :notes=,
            s(:true)),
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "Some text.[^1]\n"),
                s(:str, "\n"),
                s(:str, "[^1]: With a footnote\n"),
                s(:str, "\n"),
                s(:str, "    more\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Some text.{*1}[rdoc-label:foottext-1:footmark-1]")),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :para,
                s(:str, "{^1}[rdoc-label:footmark-1:foottext-1] With a footnote\n\nmore")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_note_inline,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@parser), :notes=,
            s(:true)),
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "Some text. ^[With a footnote]\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Some text. {*1}[rdoc-label:foottext-1:footmark-1]")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Rule), :new,
                s(:int, 1)),
              s(:send, nil, :para,
                s(:str, "{^1}[rdoc-label:footmark-1:foottext-1] With a footnote")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_note_no_notes,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@parser), :notes=,
            s(:false)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send, nil, :parse,
              s(:str, "Some text.[^1]"))))),
      s(:def, :test_parse_note_multiple,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@parser), :notes=,
            s(:true)),
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:dstr,
                s(:str, "Some text[^1]\n"),
                s(:str, "with inline notes^[like this]\n"),
                s(:str, "and an extra note.[^2]\n"),
                s(:str, "\n"),
                s(:str, "[^1]: With a footnote\n"),
                s(:str, "\n"),
                s(:str, "[^2]: Which should be numbered correctly\n")))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:send,
                  s(:send,
                    s(:str, "Some text{*1}[rdoc-label:foottext-1:footmark-1]\n"), :+,
                    s(:str, "with inline notes{*2}[rdoc-label:foottext-2:footmark-2]\n")), :+,
                  s(:str, "and an extra note.{*3}[rdoc-label:foottext-3:footmark-3]"))),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :para,
                s(:str, "{^1}[rdoc-label:footmark-1:foottext-1] With a footnote")),
              s(:send, nil, :para,
                s(:str, "{^2}[rdoc-label:footmark-2:foottext-2] like this")),
              s(:send, nil, :para,
                s(:send,
                  s(:str, "{^3}[rdoc-label:footmark-3:foottext-3] "), :+,
                  s(:str, "Which should be numbered correctly"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_paragraph,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "it worked\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "it worked")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_paragraph_break_on_newline,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@parser), :break_on_newline=,
            s(:true)),
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "one\ntwo\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "one"),
                s(:send, nil, :hard_break),
                s(:str, "two")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)),
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "one  \ntwo\nthree\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "one"),
                s(:send, nil, :hard_break),
                s(:str, "two"),
                s(:send, nil, :hard_break),
                s(:str, "three")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_paragraph_stars,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "it worked ****\n"))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "it worked ****")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_paragraph_html,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@parser), :html=,
            s(:true)),
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "<address>Links here</address>"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :raw,
                s(:str, "<address>Links here</address>")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_paragraph_html_no_html,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@parser), :html=,
            s(:false)),
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "<address>Links here</address>"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_paragraph_indent_one,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, " text\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "text")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_paragraph_indent_two,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "  text\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "text")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_paragraph_indent_three,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "   text\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "text")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_paragraph_multiline,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "one\ntwo"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "one\ntwo")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_paragraph_two,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "one\n\ntwo"))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "one")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "two")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_plain,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "it worked"))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "it worked")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_reference_link_embedded_bracket,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "With [embedded [brackets]] [b].\n\n[b]: /url/\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "With {embedded [brackets]}[/url/].")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_rule_dash,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "- - -\n\n"))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Rule), :new,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_rule_underscore,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "_ _ _\n\n"))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Rule), :new,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_rule_star,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "* * *\n\n"))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Rule), :new,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_strong_star,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "it **works**\n"))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "it *works*")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_strong_underscore,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "it __works__\n"))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "it *works*")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_strong_emphasis_star,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "it ***works***\n"))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "it <b>_works_</b>")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_strong_emphasis_underscore,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "it ___works___\n"))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "it <b>_works_</b>")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_style,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@parser), :css=,
            s(:true)),
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "<style>h1 { color: red }</style>\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Raw), :new,
                s(:str, "<style>h1 { color: red }</style>")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_style_disabled,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "<style>h1 { color: red }</style>\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_verbatim,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "    text\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :verb,
                s(:str, "text\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_parse_verbatim_eof,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send, nil, :parse,
              s(:str, "    text"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :verb,
                s(:str, "text\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :doc)))),
      s(:def, :test_strong,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "*word*"),
            s(:send,
              s(:ivar, :@parser), :strong,
              s(:str, "word"))),
          s(:send, nil, :assert_equal,
            s(:str, "<b>two words</b>"),
            s(:send,
              s(:ivar, :@parser), :strong,
              s(:str, "two words"))),
          s(:send, nil, :assert_equal,
            s(:str, "<b>_emphasis_</b>"),
            s(:send,
              s(:ivar, :@parser), :strong,
              s(:str, "_emphasis_"))))),
      s(:def, :parse,
        s(:args,
          s(:arg, :text)),
        s(:send,
          s(:ivar, :@parser), :parse,
          s(:lvar, :text))))))
