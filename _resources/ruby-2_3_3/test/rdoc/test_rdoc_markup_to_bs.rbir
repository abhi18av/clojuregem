s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocMarkupToBs),
    s(:const,
      s(:const,
        s(:const, nil, :RDoc), :Markup), :TextFormatterTestCase),
    s(:begin,
      s(:send, nil, :add_visitor_tests),
      s(:send, nil, :add_text_tests),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@to,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :ToBs), :new)))),
      s(:def, :accept_blank_line,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_block_quote,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "> quote\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_document,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "hello\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_heading,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:str, ""), :respond_to?,
              s(:sym, :chars)), nil,
            s(:send, nil, :skip,
              s(:str, "No String#chars, upgrade your ruby"))),
          s(:send, nil, :assert_equal,
            s(:str, "===== H\bHe\bel\bll\blo\bo\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_list_end_bullet,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_end_label,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_end_lalpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_end_note,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_end_number,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_end_ualpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_item_end_bullet,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:int, 0),
          s(:send,
            s(:ivar, :@to), :indent),
          s(:str, "indent"))),
      s(:def, :accept_list_item_end_label,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "cat:\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :indent),
            s(:str, "indent")))),
      s(:def, :accept_list_item_end_lalpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :indent),
            s(:str, "indent")),
          s(:send, nil, :assert_equal,
            s(:str, "b"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :list_index), :last)))),
      s(:def, :accept_list_item_end_note,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "cat:\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :indent),
            s(:str, "indent")))),
      s(:def, :accept_list_item_end_number,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :indent),
            s(:str, "indent")),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:ivar, :@to), :list_index), :last)))),
      s(:def, :accept_list_item_end_ualpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :indent),
            s(:str, "indent")),
          s(:send, nil, :assert_equal,
            s(:str, "B"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :list_index), :last)))),
      s(:def, :accept_list_item_start_bullet,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :res)),
          s(:send, nil, :assert_equal,
            s(:str, "* "),
            s(:send,
              s(:ivar, :@to), :prefix)))),
      s(:def, :accept_list_item_start_label,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :res)),
          s(:send, nil, :assert_equal,
            s(:str, "cat:\n  "),
            s(:send,
              s(:ivar, :@to), :prefix)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@to), :indent)))),
      s(:def, :accept_list_item_start_lalpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :res)),
          s(:send, nil, :assert_equal,
            s(:str, "a. "),
            s(:send,
              s(:ivar, :@to), :prefix)),
          s(:send, nil, :assert_equal,
            s(:str, "a"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :list_index), :last)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:ivar, :@to), :indent)))),
      s(:def, :accept_list_item_start_note,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :res)),
          s(:send, nil, :assert_equal,
            s(:str, "cat:\n  "),
            s(:send,
              s(:ivar, :@to), :prefix)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@to), :indent)))),
      s(:def, :accept_list_item_start_number,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :res)),
          s(:send, nil, :assert_equal,
            s(:str, "1. "),
            s(:send,
              s(:ivar, :@to), :prefix)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:ivar, :@to), :list_index), :last)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:ivar, :@to), :indent)))),
      s(:def, :accept_list_item_start_ualpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :res)),
          s(:send, nil, :assert_equal,
            s(:str, "A. "),
            s(:send,
              s(:ivar, :@to), :prefix)),
          s(:send, nil, :assert_equal,
            s(:str, "A"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :list_index), :last)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:ivar, :@to), :indent)))),
      s(:def, :accept_list_start_bullet,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:nil)),
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :BULLET)),
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_start_label,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:nil)),
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :LABEL)),
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2)),
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_start_lalpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a")),
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :LALPHA)),
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_start_note,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:nil)),
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :NOTE)),
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2)),
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_start_number,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :NUMBER)),
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_start_ualpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "A")),
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :UALPHA)),
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_paragraph,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "hi\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_raw,
        s(:args),
        s(:begin,
          s(:lvasgn, :raw,
            s(:send,
              s(:dstr,
                s(:str, "<table>\n"),
                s(:str, "<tr><th>Name<th>Count\n"),
                s(:str, "<tr><td>a<td>1\n"),
                s(:str, "<tr><td>b<td>2\n"),
                s(:str, "</table>\n")), :rstrip)),
          s(:send, nil, :assert_equal,
            s(:lvar, :raw),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_rule,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:dstr,
            s(:begin,
              s(:send,
                s(:str, "-"), :*,
                s(:int, 78))),
            s(:str, "\n")),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_verbatim,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "  hi\n    world\n\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :end_accepting,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "hi"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :start_accepting,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :indent)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :res)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_heading_1,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:str, ""), :respond_to?,
              s(:sym, :chars)), nil,
            s(:send, nil, :skip,
              s(:str, "No String#chars, upgrade your ruby"))),
          s(:send, nil, :assert_equal,
            s(:str, "= H\bHe\bel\bll\blo\bo\n"),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :accept_heading_2,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:str, ""), :respond_to?,
              s(:sym, :chars)), nil,
            s(:send, nil, :skip,
              s(:str, "No String#chars, upgrade your ruby"))),
          s(:send, nil, :assert_equal,
            s(:str, "== H\bHe\bel\bll\blo\bo\n"),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :accept_heading_3,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:str, ""), :respond_to?,
              s(:sym, :chars)), nil,
            s(:send, nil, :skip,
              s(:str, "No String#chars, upgrade your ruby"))),
          s(:send, nil, :assert_equal,
            s(:str, "=== H\bHe\bel\bll\blo\bo\n"),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :accept_heading_4,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:str, ""), :respond_to?,
              s(:sym, :chars)), nil,
            s(:send, nil, :skip,
              s(:str, "No String#chars, upgrade your ruby"))),
          s(:send, nil, :assert_equal,
            s(:str, "==== H\bHe\bel\bll\blo\bo\n"),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :accept_heading_indent,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:str, ""), :respond_to?,
              s(:sym, :chars)), nil,
            s(:send, nil, :skip,
              s(:str, "No String#chars, upgrade your ruby"))),
          s(:send, nil, :assert_equal,
            s(:str, "   = H\bHe\bel\bll\blo\bo\n"),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :accept_heading_b,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:str, ""), :respond_to?,
              s(:sym, :chars)), nil,
            s(:send, nil, :skip,
              s(:str, "No String#chars, upgrade your ruby"))),
          s(:send, nil, :assert_equal,
            s(:str, "= H\bHe\bel\bll\blo\bo\n"),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :accept_heading_suppressed_crossref,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:str, ""), :respond_to?,
              s(:sym, :chars)), nil,
            s(:send, nil, :skip,
              s(:str, "No String#chars, upgrade your ruby"))),
          s(:send, nil, :assert_equal,
            s(:str, "= H\bHe\bel\bll\blo\bo\n"),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :accept_list_item_start_note_2,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "teletype:\n  teletype description\n\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_list_item_start_note_multi_description,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "label:\n  description one\n\n  description two\n\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_list_item_start_note_multi_label,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "one\ntwo:\n  two headers\n\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_paragraph_b,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:str, ""), :respond_to?,
              s(:sym, :chars)), nil,
            s(:send, nil, :skip,
              s(:str, "No String#chars, upgrade your ruby"))),
          s(:send, nil, :assert_equal,
            s(:str, "reg b\bbo\bol\bld\bd \b w\bwo\bor\brd\bds\bs reg\n"),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :accept_paragraph_br,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:str, ""), :respond_to?,
              s(:sym, :chars)), nil,
            s(:send, nil, :skip,
              s(:str, "No String#chars, upgrade your ruby"))),
          s(:send, nil, :assert_equal,
            s(:str, "one\ntwo\n"),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :accept_paragraph_break,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:str, ""), :respond_to?,
              s(:sym, :chars)), nil,
            s(:send, nil, :skip,
              s(:str, "No String#chars, upgrade your ruby"))),
          s(:send, nil, :assert_equal,
            s(:str, "hello\nworld\n"),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :accept_paragraph_i,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:str, ""), :respond_to?,
              s(:sym, :chars)), nil,
            s(:send, nil, :skip,
              s(:str, "No String#chars, upgrade your ruby"))),
          s(:send, nil, :assert_equal,
            s(:str, "reg _\bi_\bt_\ba_\bl_\bi_\bc_\b _\bw_\bo_\br_\bd_\bs reg\n"),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :accept_paragraph_indent,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "   words words words words words words words words words words words words\n"),
              s(:str, "   words words words words words words words words words words words words\n"),
              s(:str, "   words words words words words words\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :accept_paragraph_plus,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "reg teletype reg\n"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :accept_paragraph_star,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:str, ""), :respond_to?,
              s(:sym, :chars)), nil,
            s(:send, nil, :skip,
              s(:str, "No String#chars, upgrade your ruby"))),
          s(:send, nil, :assert_equal,
            s(:str, "reg b\bbo\bol\bld\bd reg\n"),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :accept_paragraph_underscore,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:str, ""), :respond_to?,
              s(:sym, :chars)), nil,
            s(:send, nil, :skip,
              s(:str, "No String#chars, upgrade your ruby"))),
          s(:send, nil, :assert_equal,
            s(:str, "reg _\bi_\bt_\ba_\bl_\bi_\bc reg\n"),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :accept_paragraph_wrap,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "words words words words words words words words words words words words words\n"),
              s(:str, "words words words words words words words words words words words words words\n"),
              s(:str, "words words words words\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :accept_rule_indent,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:dstr,
            s(:str, "   "),
            s(:begin,
              s(:send,
                s(:str, "-"), :*,
                s(:int, 75))),
            s(:str, "\n")),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :accept_verbatim_indent,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "    hi\n     world\n\n"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :accept_verbatim_big_indent,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "    hi\n    world\n\n"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :list_nested,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "* l1\n"),
              s(:str, "  * l1.1\n"),
              s(:str, "* l2\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :list_verbatim,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "* list stuff\n"),
              s(:str, "\n"),
              s(:str, "    * list\n"),
              s(:str, "      with\n"),
              s(:str, "\n"),
              s(:str, "      second\n"),
              s(:str, "\n"),
              s(:str, "      1. indented\n"),
              s(:str, "      2. numbered\n"),
              s(:str, "\n"),
              s(:str, "      third\n"),
              s(:str, "\n"),
              s(:str, "    * second\n"),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@to), :end_accepting)))))))
