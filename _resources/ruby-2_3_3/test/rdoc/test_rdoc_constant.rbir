s(:begin,
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:str, "../xref_test_case"),
      s(:str, "(string)"))),
  s(:class,
    s(:const, nil, :TestRDocConstant),
    s(:const, nil, :XrefTestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@const,
            s(:send,
              s(:send,
                s(:ivar, :@c1), :constants), :first)))),
      s(:def, :test_documented_eh,
        s(:args),
        s(:begin,
          s(:lvasgn, :top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :const,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "CONST"),
              s(:nil),
              s(:nil))),
          s(:send,
            s(:lvar, :top_level), :add_constant,
            s(:lvar, :const)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :const), :documented?)),
          s(:send,
            s(:lvar, :const), :comment=,
            s(:send, nil, :comment,
              s(:str, "comment"))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :const), :documented?)))),
      s(:def, :test_documented_eh_alias,
        s(:args),
        s(:begin,
          s(:lvasgn, :top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :const,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "CONST"),
              s(:nil),
              s(:nil))),
          s(:send,
            s(:lvar, :top_level), :add_constant,
            s(:lvar, :const)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :const), :documented?)),
          s(:send,
            s(:lvar, :const), :is_alias_for=,
            s(:str, "C1")),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :const), :documented?)),
          s(:send,
            s(:ivar, :@c1), :add_comment,
            s(:send, nil, :comment,
              s(:str, "comment")),
            s(:ivar, :@top_level)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :const), :documented?)))),
      s(:def, :test_full_name,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "C1::CONST"),
          s(:send,
            s(:ivar, :@const), :full_name))),
      s(:def, :test_is_alias_for,
        s(:args),
        s(:begin,
          s(:lvasgn, :top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "CONST"),
              s(:nil),
              s(:str, "comment"))),
          s(:send,
            s(:lvar, :top_level), :add_constant,
            s(:lvar, :c)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :c), :is_alias_for)),
          s(:send,
            s(:lvar, :c), :is_alias_for=,
            s(:str, "C1")),
          s(:send, nil, :assert_equal,
            s(:ivar, :@c1),
            s(:send,
              s(:lvar, :c), :is_alias_for)),
          s(:send,
            s(:lvar, :c), :is_alias_for=,
            s(:str, "unknown")),
          s(:send, nil, :assert_equal,
            s(:str, "unknown"),
            s(:send,
              s(:lvar, :c), :is_alias_for)))),
      s(:def, :test_marshal_dump,
        s(:args),
        s(:begin,
          s(:lvasgn, :top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "CONST"),
              s(:nil),
              s(:str, "this is a comment"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:lvar, :top_level)),
          s(:lvasgn, :aliased,
            s(:send,
              s(:lvar, :top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Aliased"))),
          s(:send,
            s(:lvar, :c), :is_alias_for=,
            s(:lvar, :aliased)),
          s(:lvasgn, :cm,
            s(:send,
              s(:lvar, :top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm), :add_constant,
            s(:lvar, :c)),
          s(:lvasgn, :section,
            s(:send,
              s(:send,
                s(:lvar, :cm), :sections), :first)),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:lvar, :c)))),
          s(:send,
            s(:lvar, :loaded), :store=,
            s(:ivar, :@store)),
          s(:lvasgn, :comment,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "this is a comment")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:lvar, :loaded)),
          s(:send, nil, :assert_equal,
            s(:lvar, :aliased),
            s(:send,
              s(:lvar, :loaded), :is_alias_for)),
          s(:send, nil, :assert_equal,
            s(:lvar, :comment),
            s(:send,
              s(:lvar, :loaded), :comment)),
          s(:send, nil, :assert_equal,
            s(:lvar, :top_level),
            s(:send,
              s(:lvar, :loaded), :file)),
          s(:send, nil, :assert_equal,
            s(:str, "Klass::CONST"),
            s(:send,
              s(:lvar, :loaded), :full_name)),
          s(:send, nil, :assert_equal,
            s(:str, "CONST"),
            s(:send,
              s(:lvar, :loaded), :name)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :loaded), :visibility)),
          s(:send, nil, :assert_equal,
            s(:lvar, :cm),
            s(:send,
              s(:lvar, :loaded), :parent)),
          s(:send, nil, :assert_equal,
            s(:lvar, :section),
            s(:send,
              s(:lvar, :loaded), :section)))),
      s(:def, :test_marshal_load,
        s(:args),
        s(:begin,
          s(:lvasgn, :top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "CONST"),
              s(:nil),
              s(:str, "this is a comment"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:lvar, :top_level)),
          s(:lvasgn, :cm,
            s(:send,
              s(:lvar, :top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm), :add_constant,
            s(:lvar, :c)),
          s(:lvasgn, :section,
            s(:send,
              s(:send,
                s(:lvar, :cm), :sections), :first)),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:lvar, :c)))),
          s(:send,
            s(:lvar, :loaded), :store=,
            s(:ivar, :@store)),
          s(:lvasgn, :comment,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "this is a comment")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :c),
            s(:lvar, :loaded)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :loaded), :is_alias_for)),
          s(:send, nil, :assert_equal,
            s(:lvar, :comment),
            s(:send,
              s(:lvar, :loaded), :comment)),
          s(:send, nil, :assert_equal,
            s(:lvar, :top_level),
            s(:send,
              s(:lvar, :loaded), :file)),
          s(:send, nil, :assert_equal,
            s(:str, "Klass::CONST"),
            s(:send,
              s(:lvar, :loaded), :full_name)),
          s(:send, nil, :assert_equal,
            s(:str, "CONST"),
            s(:send,
              s(:lvar, :loaded), :name)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :loaded), :visibility)),
          s(:send, nil, :assert_equal,
            s(:lvar, :cm),
            s(:send,
              s(:lvar, :loaded), :parent)),
          s(:send, nil, :assert_equal,
            s(:lvar, :section),
            s(:send,
              s(:lvar, :loaded), :section)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :loaded), :display?)))),
      s(:def, :test_marshal_load_version_0,
        s(:args),
        s(:begin,
          s(:lvasgn, :top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :aliased,
            s(:send,
              s(:lvar, :top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Aliased"))),
          s(:lvasgn, :cm,
            s(:send,
              s(:lvar, :top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"))),
          s(:lvasgn, :section,
            s(:send,
              s(:send,
                s(:lvar, :cm), :sections), :first)),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:str, "\u0004\bU:\u0013RDoc::Constant[\u000Fi\u0000I"), :+,
                            s(:str, "\"\nCONST\u0006:\u0006ETI\"\u0011Klass::CONST\u0006")), :+,
                          s(:str, ";\u0006T0I\"\fAliased\u0006;\u0006To")), :+,
                        s(:str, ":\eRDoc::Markup::Document\a:\v@parts[\u0006o")), :+,
                      s(:str, ":\u001CRDoc::Markup::Paragraph\u0006;\b[\u0006I")), :+,
                    s(:str, "\"\u0016this is a comment\u0006;\u0006T:\n@file0I")), :+,
                  s(:str, "\"\ffile.rb\u0006;\u0006TI\"\nKlass\u0006")), :+,
                s(:str, ";\u0006Tc\u0016RDoc::NormalClass0")))),
          s(:send,
            s(:lvar, :loaded), :store=,
            s(:ivar, :@store)),
          s(:lvasgn, :comment,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "this is a comment")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :aliased),
            s(:send,
              s(:lvar, :loaded), :is_alias_for)),
          s(:send, nil, :assert_equal,
            s(:lvar, :comment),
            s(:send,
              s(:lvar, :loaded), :comment)),
          s(:send, nil, :assert_equal,
            s(:lvar, :top_level),
            s(:send,
              s(:lvar, :loaded), :file)),
          s(:send, nil, :assert_equal,
            s(:str, "Klass::CONST"),
            s(:send,
              s(:lvar, :loaded), :full_name)),
          s(:send, nil, :assert_equal,
            s(:str, "CONST"),
            s(:send,
              s(:lvar, :loaded), :name)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :loaded), :visibility)),
          s(:send, nil, :assert_equal,
            s(:lvar, :cm),
            s(:send,
              s(:lvar, :loaded), :parent)),
          s(:send, nil, :assert_equal,
            s(:lvar, :section),
            s(:send,
              s(:lvar, :loaded), :section)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :loaded), :display?)))),
      s(:def, :test_marshal_round_trip,
        s(:args),
        s(:begin,
          s(:lvasgn, :top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "CONST"),
              s(:nil),
              s(:str, "this is a comment"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:lvar, :top_level)),
          s(:send,
            s(:lvar, :c), :is_alias_for=,
            s(:str, "Unknown")),
          s(:lvasgn, :cm,
            s(:send,
              s(:lvar, :top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm), :add_constant,
            s(:lvar, :c)),
          s(:lvasgn, :section,
            s(:send,
              s(:send,
                s(:lvar, :cm), :sections), :first)),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:lvar, :c)))),
          s(:send,
            s(:lvar, :loaded), :store=,
            s(:ivar, :@store)),
          s(:lvasgn, :reloaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:lvar, :loaded)))),
          s(:send,
            s(:lvar, :reloaded), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :assert_equal,
            s(:lvar, :section),
            s(:send,
              s(:lvar, :reloaded), :section)),
          s(:send, nil, :assert_equal,
            s(:str, "Unknown"),
            s(:send,
              s(:lvar, :reloaded), :is_alias_for)))),
      s(:def, :test_path,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "C1.html#CONST"),
          s(:send,
            s(:ivar, :@const), :path))))))
