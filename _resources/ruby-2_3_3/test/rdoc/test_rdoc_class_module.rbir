s(:begin,
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:str, "../xref_test_case"),
      s(:str, "(string)"))),
  s(:class,
    s(:const, nil, :TestRDocClassModule),
    s(:const, nil, :XrefTestCase),
    s(:begin,
      s(:def, :test_add_comment,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl1,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :tl2,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "two.rb"))),
          s(:lvasgn, :tl3,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "three.rb"))),
          s(:lvasgn, :cm,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm), :add_comment,
            s(:str, "# comment 1"),
            s(:lvar, :tl1)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "comment 1"),
                s(:lvar, :tl1))),
            s(:send,
              s(:lvar, :cm), :comment_location)),
          s(:send, nil, :assert_equal,
            s(:str, "comment 1"),
            s(:send,
              s(:lvar, :cm), :comment)),
          s(:send,
            s(:lvar, :cm), :add_comment,
            s(:str, "# comment 2"),
            s(:lvar, :tl2)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "comment 1"),
                s(:lvar, :tl1)),
              s(:array,
                s(:str, "comment 2"),
                s(:lvar, :tl2))),
            s(:send,
              s(:lvar, :cm), :comment_location)),
          s(:send, nil, :assert_equal,
            s(:str, "comment 1\n---\ncomment 2"),
            s(:send,
              s(:lvar, :cm), :comment)),
          s(:send,
            s(:lvar, :cm), :add_comment,
            s(:str, "# * comment 3"),
            s(:lvar, :tl3)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "comment 1"),
                s(:lvar, :tl1)),
              s(:array,
                s(:str, "comment 2"),
                s(:lvar, :tl2)),
              s(:array,
                s(:str, "* comment 3"),
                s(:lvar, :tl3))),
            s(:send,
              s(:lvar, :cm), :comment_location)),
          s(:send, nil, :assert_equal,
            s(:str, "comment 1\n---\ncomment 2\n---\n* comment 3"),
            s(:send,
              s(:lvar, :cm), :comment)))),
      s(:def, :test_add_comment_comment,
        s(:args),
        s(:begin,
          s(:lvasgn, :cm,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm), :add_comment,
            s(:send, nil, :comment,
              s(:str, "comment")),
            s(:ivar, :@top_level)),
          s(:send, nil, :assert_equal,
            s(:str, "comment"),
            s(:send,
              s(:send,
                s(:lvar, :cm), :comment), :text)))),
      s(:def, :test_add_comment_duplicate,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl1,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :cm,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm), :add_comment,
            s(:str, "# comment 1"),
            s(:lvar, :tl1)),
          s(:send,
            s(:lvar, :cm), :add_comment,
            s(:str, "# comment 2"),
            s(:lvar, :tl1)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "comment 2"),
                s(:lvar, :tl1))),
            s(:send,
              s(:lvar, :cm), :comment_location)))),
      s(:def, :test_add_comment_stopdoc,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :cm,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm), :stop_doc),
          s(:send,
            s(:lvar, :cm), :add_comment,
            s(:str, "# comment 1"),
            s(:lvar, :tl)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :cm), :comment)))),
      s(:def, :test_ancestors,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:ivar, :@parent),
            s(:str, "Object")),
          s(:send,
            s(:ivar, :@child), :ancestors))),
      s(:def, :test_comment_equals,
        s(:args),
        s(:begin,
          s(:lvasgn, :cm,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm), :comment=,
            s(:str, "# comment 1")),
          s(:send, nil, :assert_equal,
            s(:str, "comment 1"),
            s(:send,
              s(:lvar, :cm), :comment)),
          s(:send,
            s(:lvar, :cm), :comment=,
            s(:str, "# comment 2")),
          s(:send, nil, :assert_equal,
            s(:str, "comment 1\n---\ncomment 2"),
            s(:send,
              s(:lvar, :cm), :comment)),
          s(:send,
            s(:lvar, :cm), :comment=,
            s(:str, "# * comment 3")),
          s(:send, nil, :assert_equal,
            s(:str, "comment 1\n---\ncomment 2\n---\n* comment 3"),
            s(:send,
              s(:lvar, :cm), :comment)))),
      s(:def, :test_comment_equals_comment,
        s(:args),
        s(:begin,
          s(:lvasgn, :cm,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm), :comment=,
            s(:send, nil, :comment,
              s(:str, "comment"))),
          s(:send, nil, :assert_equal,
            s(:str, "comment"),
            s(:send,
              s(:send,
                s(:lvar, :cm), :comment), :text)))),
      s(:def, :test_docuent_self_or_methods,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@c1), :document_self_or_methods)),
          s(:send,
            s(:ivar, :@c1), :document_self=,
            s(:false)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@c1), :document_self_or_methods)),
          s(:send,
            s(:ivar, :@c1_m), :document_self=,
            s(:false)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@c1), :document_self_or_methods)),
          s(:send,
            s(:ivar, :@c1__m), :document_self=,
            s(:false)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@c1), :document_self_or_methods)))),
      s(:def, :test_documented_eh,
        s(:args),
        s(:begin,
          s(:lvasgn, :cm,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "C"))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :cm), :documented?),
            s(:str, "no comments, no markers")),
          s(:send,
            s(:lvar, :cm), :add_comment,
            s(:str, ""),
            s(:ivar, :@top_level)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :cm), :documented?),
            s(:str, "empty comment")),
          s(:send,
            s(:lvar, :cm), :add_comment,
            s(:str, "hi"),
            s(:ivar, :@top_level)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :cm), :documented?),
            s(:str, "commented")),
          s(:send,
            s(:send,
              s(:lvar, :cm), :comment_location), :clear),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :cm), :documented?),
            s(:str, "no comment")),
          s(:send,
            s(:lvar, :cm), :document_self=,
            s(:nil)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :cm), :documented?),
            s(:str, ":nodoc:")))),
      s(:def, :test_each_ancestor,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:ivar, :@parent)),
          s(:send,
            s(:send,
              s(:ivar, :@child), :each_ancestor), :to_a))),
      s(:def, :test_each_ancestor_cycle,
        s(:args),
        s(:begin,
          s(:lvasgn, :m_incl,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "M"),
              s(:nil))),
          s(:lvasgn, :m,
            s(:send,
              s(:ivar, :@top_level), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "M"))),
          s(:send,
            s(:lvar, :m), :add_include,
            s(:lvar, :m_incl)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:send,
                s(:lvar, :m), :each_ancestor), :to_a)))),
      s(:def, :test_find_class_named,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@c2), :classes_hash), :[]=,
            s(:str, "C2"),
            s(:ivar, :@c2)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@c2), :find_class_named,
              s(:str, "C1"))))),
      s(:def, :test_from_module_comment,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :klass,
            s(:send,
              s(:lvar, :tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :klass), :add_comment,
            s(:str, "really a class"),
            s(:lvar, :tl)),
          s(:lvasgn, :klass,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :from_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:lvar, :klass))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "really a class"),
                s(:lvar, :tl))),
            s(:send,
              s(:lvar, :klass), :comment_location)))),
      s(:def, :test_marshal_dump,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@store), :path=,
            s(:send,
              s(:const, nil, :Dir), :tmpdir)),
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :ns,
            s(:send,
              s(:lvar, :tl), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "Namespace"))),
          s(:lvasgn, :cm,
            s(:send,
              s(:lvar, :ns), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"),
              s(:str, "Super"))),
          s(:send,
            s(:lvar, :cm), :document_self=,
            s(:true)),
          s(:send,
            s(:lvar, :cm), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :a1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "a1"),
              s(:str, "RW"),
              s(:str, ""))),
          s(:send,
            s(:lvar, :a1), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :a2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "a2"),
              s(:str, "RW"),
              s(:str, ""),
              s(:true))),
          s(:send,
            s(:lvar, :a2), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :m1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m1"))),
          s(:send,
            s(:lvar, :m1), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :c1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "C1"),
              s(:nil),
              s(:str, ""))),
          s(:send,
            s(:lvar, :c1), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :i1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "I1"),
              s(:str, ""))),
          s(:send,
            s(:lvar, :i1), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :e1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Extend), :new,
              s(:str, "E1"),
              s(:str, ""))),
          s(:send,
            s(:lvar, :e1), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :section_comment,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Comment), :new,
              s(:str, "section comment"))),
          s(:send,
            s(:lvar, :section_comment), :location=,
            s(:lvar, :tl)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:lvar, :cm), :sections), :length),
            s(:str, "sanity, default section only")),
          s(:lvasgn, :s0,
            s(:send,
              s(:send,
                s(:lvar, :cm), :sections), :first)),
          s(:lvasgn, :s1,
            s(:send,
              s(:lvar, :cm), :add_section,
              s(:str, "section"),
              s(:lvar, :section_comment))),
          s(:send,
            s(:lvar, :cm), :add_attribute,
            s(:lvar, :a1)),
          s(:send,
            s(:lvar, :cm), :add_attribute,
            s(:lvar, :a2)),
          s(:send,
            s(:lvar, :cm), :add_method,
            s(:lvar, :m1)),
          s(:send,
            s(:lvar, :cm), :add_constant,
            s(:lvar, :c1)),
          s(:send,
            s(:lvar, :cm), :add_include,
            s(:lvar, :i1)),
          s(:send,
            s(:lvar, :cm), :add_extend,
            s(:lvar, :e1)),
          s(:send,
            s(:lvar, :cm), :add_comment,
            s(:str, "this is a comment"),
            s(:lvar, :tl)),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:lvar, :cm)))),
          s(:send,
            s(:lvar, :loaded), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :assert_equal,
            s(:lvar, :cm),
            s(:lvar, :loaded)),
          s(:lvasgn, :inner,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
                s(:str, "this is a comment")))),
          s(:send,
            s(:lvar, :inner), :file=,
            s(:lvar, :tl)),
          s(:lvasgn, :comment,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new,
              s(:lvar, :inner))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :a2),
              s(:lvar, :a1)),
            s(:send,
              s(:send,
                s(:lvar, :loaded), :attributes), :sort)),
          s(:send, nil, :assert_equal,
            s(:lvar, :comment),
            s(:send,
              s(:lvar, :loaded), :comment)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :c1)),
            s(:send,
              s(:lvar, :loaded), :constants)),
          s(:send, nil, :assert_equal,
            s(:str, "Namespace::Klass"),
            s(:send,
              s(:lvar, :loaded), :full_name)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :i1)),
            s(:send,
              s(:lvar, :loaded), :includes)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :e1)),
            s(:send,
              s(:lvar, :loaded), :extends)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :m1)),
            s(:send,
              s(:lvar, :loaded), :method_list)),
          s(:send, nil, :assert_equal,
            s(:str, "Klass"),
            s(:send,
              s(:lvar, :loaded), :name)),
          s(:send, nil, :assert_equal,
            s(:str, "Super"),
            s(:send,
              s(:lvar, :loaded), :superclass)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :tl)),
            s(:send,
              s(:lvar, :loaded), :in_files)),
          s(:send, nil, :assert_equal,
            s(:str, "Namespace"),
            s(:send,
              s(:send,
                s(:lvar, :loaded), :parent), :name)),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:nil),
                s(:lvar, :s0)),
              s(:pair,
                s(:str, "section"),
                s(:lvar, :s1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :loaded), :sections_hash)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :attributes), :first), :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :constants), :first), :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :includes), :first), :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :extends), :first), :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :method_list), :first), :file)))),
      s(:def, :test_marshal_dump_visibilty,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@store), :path=,
            s(:send,
              s(:const, nil, :Dir), :tmpdir)),
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :ns,
            s(:send,
              s(:lvar, :tl), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "Namespace"))),
          s(:lvasgn, :cm,
            s(:send,
              s(:lvar, :ns), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"),
              s(:str, "Super"))),
          s(:send,
            s(:lvar, :cm), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :a1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "a1"),
              s(:str, "RW"),
              s(:str, ""))),
          s(:send,
            s(:lvar, :a1), :record_location,
            s(:lvar, :tl)),
          s(:send,
            s(:lvar, :a1), :document_self=,
            s(:false)),
          s(:lvasgn, :m1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m1"))),
          s(:send,
            s(:lvar, :m1), :record_location,
            s(:lvar, :tl)),
          s(:send,
            s(:lvar, :m1), :document_self=,
            s(:false)),
          s(:lvasgn, :c1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "C1"),
              s(:nil),
              s(:str, ""))),
          s(:send,
            s(:lvar, :c1), :record_location,
            s(:lvar, :tl)),
          s(:send,
            s(:lvar, :c1), :document_self=,
            s(:false)),
          s(:lvasgn, :i1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "I1"),
              s(:str, ""))),
          s(:send,
            s(:lvar, :i1), :record_location,
            s(:lvar, :tl)),
          s(:send,
            s(:lvar, :i1), :document_self=,
            s(:false)),
          s(:lvasgn, :e1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Extend), :new,
              s(:str, "E1"),
              s(:str, ""))),
          s(:send,
            s(:lvar, :e1), :record_location,
            s(:lvar, :tl)),
          s(:send,
            s(:lvar, :e1), :document_self=,
            s(:false)),
          s(:lvasgn, :section_comment,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Comment), :new,
              s(:str, "section comment"))),
          s(:send,
            s(:lvar, :section_comment), :location=,
            s(:lvar, :tl)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:lvar, :cm), :sections), :length),
            s(:str, "sanity, default section only")),
          s(:send,
            s(:lvar, :cm), :add_attribute,
            s(:lvar, :a1)),
          s(:send,
            s(:lvar, :cm), :add_method,
            s(:lvar, :m1)),
          s(:send,
            s(:lvar, :cm), :add_constant,
            s(:lvar, :c1)),
          s(:send,
            s(:lvar, :cm), :add_include,
            s(:lvar, :i1)),
          s(:send,
            s(:lvar, :cm), :add_extend,
            s(:lvar, :e1)),
          s(:send,
            s(:lvar, :cm), :add_comment,
            s(:str, "this is a comment"),
            s(:lvar, :tl)),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:lvar, :cm)))),
          s(:send,
            s(:lvar, :loaded), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :assert_equal,
            s(:lvar, :cm),
            s(:lvar, :loaded)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :loaded), :attributes)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :loaded), :constants)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :loaded), :includes)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :loaded), :extends)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :loaded), :method_list)))),
      s(:def, :test_marshal_load_version_0,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :ns,
            s(:send,
              s(:lvar, :tl), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "Namespace"))),
          s(:lvasgn, :cm,
            s(:send,
              s(:lvar, :ns), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"),
              s(:str, "Super"))),
          s(:lvasgn, :a,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "a1"),
              s(:str, "RW"),
              s(:str, ""))),
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m1"))),
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "C1"),
              s(:nil),
              s(:str, ""))),
          s(:lvasgn, :i,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "I1"),
              s(:str, ""))),
          s(:lvasgn, :s0,
            s(:send,
              s(:send,
                s(:lvar, :cm), :sections), :first)),
          s(:send,
            s(:lvar, :cm), :add_attribute,
            s(:lvar, :a)),
          s(:send,
            s(:lvar, :cm), :add_method,
            s(:lvar, :m)),
          s(:send,
            s(:lvar, :cm), :add_constant,
            s(:lvar, :c)),
          s(:send,
            s(:lvar, :cm), :add_include,
            s(:lvar, :i)),
          s(:send,
            s(:lvar, :cm), :add_comment,
            s(:str, "this is a comment"),
            s(:lvar, :tl)),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:str, "\u0004\bU:\u0016RDoc::NormalClass[\u000Ei\u0000\"\nKlass"), :+,
                                    s(:str, "\"\u0015Namespace::KlassI\"\nSuper\u0006:\u0006EF")), :+,
                                  s(:str, "o:\eRDoc::Markup::Document\u0006:\v@parts[\u0006")), :+,
                                s(:str, "o:\u001CRDoc::Markup::Paragraph\u0006;\b[\u0006I")), :+,
                              s(:str, "\"\u0016this is a comment\u0006;\u0006F[\u0006[\aI")), :+,
                            s(:str, "\"\aa1\u0006;\u0006FI\"\aRW\u0006;\u0006F[\u0006[\aI")), :+,
                          s(:str, "\"\aC1\u0006;\u0006Fo;\a\u0006;\b[\u0000[\u0006[\aI")), :+,
                        s(:str, "\"\aI1\u0006;\u0006Fo;\a\u0006;\b[\u0000[\a[\aI")), :+,
                      s(:str, "\"\nclass\u0006;\u0006F[\b[\a:\vpublic[\u0000[\a")), :+,
                    s(:str, ":\u000Eprotected[\u0000[\a:\fprivate[\u0000[\aI")), :+,
                  s(:str, "\"\rinstance\u0006;\u0006F[\b[\a;\n[\u0006I")), :+,
                s(:str, "\"\am1\u0006;\u0006F[\a;\v[\u0000[\a;\f[\u0000")))),
          s(:send,
            s(:lvar, :loaded), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :assert_equal,
            s(:lvar, :cm),
            s(:lvar, :loaded)),
          s(:lvasgn, :comment,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
                s(:str, "this is a comment")))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :a)),
            s(:send,
              s(:lvar, :loaded), :attributes)),
          s(:send, nil, :assert_equal,
            s(:lvar, :comment),
            s(:send,
              s(:lvar, :loaded), :comment)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :c)),
            s(:send,
              s(:lvar, :loaded), :constants)),
          s(:send, nil, :assert_equal,
            s(:str, "Namespace::Klass"),
            s(:send,
              s(:lvar, :loaded), :full_name)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :i)),
            s(:send,
              s(:lvar, :loaded), :includes)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :m)),
            s(:send,
              s(:lvar, :loaded), :method_list)),
          s(:send, nil, :assert_equal,
            s(:str, "Klass"),
            s(:send,
              s(:lvar, :loaded), :name)),
          s(:send, nil, :assert_equal,
            s(:str, "Super"),
            s(:send,
              s(:lvar, :loaded), :superclass)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :loaded), :file)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :loaded), :in_files)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :loaded), :parent)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :loaded), :current_section)),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:nil),
                s(:lvar, :s0)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :loaded), :sections_hash)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :loaded), :display?)))),
      s(:def, :test_marshal_load_version_1,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :ns,
            s(:send,
              s(:lvar, :tl), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "Namespace"))),
          s(:lvasgn, :cm,
            s(:send,
              s(:lvar, :ns), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"),
              s(:str, "Super"))),
          s(:send,
            s(:lvar, :cm), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :a1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "a1"),
              s(:str, "RW"),
              s(:str, ""))),
          s(:send,
            s(:lvar, :a1), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :a2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "a2"),
              s(:str, "RW"),
              s(:str, ""),
              s(:true))),
          s(:send,
            s(:lvar, :a2), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :m1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m1"))),
          s(:send,
            s(:lvar, :m1), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :c1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "C1"),
              s(:nil),
              s(:str, ""))),
          s(:send,
            s(:lvar, :c1), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :i1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "I1"),
              s(:str, ""))),
          s(:send,
            s(:lvar, :i1), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :s0,
            s(:send,
              s(:send,
                s(:lvar, :cm), :sections), :first)),
          s(:send,
            s(:lvar, :cm), :add_attribute,
            s(:lvar, :a1)),
          s(:send,
            s(:lvar, :cm), :add_attribute,
            s(:lvar, :a2)),
          s(:send,
            s(:lvar, :cm), :add_method,
            s(:lvar, :m1)),
          s(:send,
            s(:lvar, :cm), :add_constant,
            s(:lvar, :c1)),
          s(:send,
            s(:lvar, :cm), :add_include,
            s(:lvar, :i1)),
          s(:send,
            s(:lvar, :cm), :add_comment,
            s(:str, "this is a comment"),
            s(:lvar, :tl)),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:send,
                                          s(:str, "\u0004\bU:\u0016RDoc::NormalClass[\u000Ei\u0006I\"\nKlass"), :+,
                                          s(:str, "\u0006:\u0006EFI\"\u0015Namespace::Klass\u0006;\u0006FI")), :+,
                                        s(:str, "\"\nSuper\u0006;\u0006Fo:\eRDoc::Markup::Document\a")), :+,
                                      s(:str, ":\v@parts[\u0006o;\a\a;\b[\u0006o")), :+,
                                    s(:str, ":\u001CRDoc::Markup::Paragraph\u0006;\b")), :+,
                                  s(:str, "[\u0006I\"\u0016this is a comment\u0006;\u0006F")), :+,
                                s(:str, ":\n@fileI\"\ffile.rb\u0006;\u0006F;\n0[\a[\nI")), :+,
                              s(:str, "\"\aa2\u0006;\u0006FI\"\aRW\u0006;\u0006F:\vpublicT@\u0011")), :+,
                            s(:str, "[\nI\"\aa1\u0006;\u0006FI\"\aRW\u0006;\u0006F;\vF@\u0011")), :+,
                          s(:str, "[\u0006[\bI\"\aC1\u0006;\u0006Fo;\a\a;\b[\u0000;\n0@\u0011")), :+,
                        s(:str, "[\u0006[\bI\"\aI1\u0006;\u0006Fo;\a\a;\b[\u0000;\n0@\u0011")), :+,
                      s(:str, "[\a[\aI\"\nclass\u0006;\u0006F[\b[\a;\v[\u0000")), :+,
                    s(:str, "[\a:\u000Eprotected[\u0000[\a:\fprivate[\u0000[\aI")), :+,
                  s(:str, "\"\rinstance\u0006;\u0006F[\b[\a;\v[\u0006[\aI")), :+,
                s(:str, "\"\am1\u0006;\u0006F@\u0011[\a;\f[\u0000[\a;\r[\u0000")))),
          s(:send,
            s(:lvar, :loaded), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :assert_equal,
            s(:lvar, :cm),
            s(:lvar, :loaded)),
          s(:lvasgn, :inner,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
                s(:str, "this is a comment")))),
          s(:send,
            s(:lvar, :inner), :file=,
            s(:lvar, :tl)),
          s(:lvasgn, :comment,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new,
              s(:lvar, :inner))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :a2),
              s(:lvar, :a1)),
            s(:send,
              s(:send,
                s(:lvar, :loaded), :attributes), :sort)),
          s(:send, nil, :assert_equal,
            s(:lvar, :comment),
            s(:send,
              s(:lvar, :loaded), :comment)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :c1)),
            s(:send,
              s(:lvar, :loaded), :constants)),
          s(:send, nil, :assert_equal,
            s(:str, "Namespace::Klass"),
            s(:send,
              s(:lvar, :loaded), :full_name)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :i1)),
            s(:send,
              s(:lvar, :loaded), :includes)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :loaded), :extends)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :m1)),
            s(:send,
              s(:lvar, :loaded), :method_list)),
          s(:send, nil, :assert_equal,
            s(:str, "Klass"),
            s(:send,
              s(:lvar, :loaded), :name)),
          s(:send, nil, :assert_equal,
            s(:str, "Super"),
            s(:send,
              s(:lvar, :loaded), :superclass)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :loaded), :in_files)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :loaded), :parent)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :loaded), :current_section)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :attributes), :first), :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :constants), :first), :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :includes), :first), :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :method_list), :first), :file)),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:nil),
                s(:lvar, :s0)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :loaded), :sections_hash)))),
      s(:def, :test_marshal_load_version_2,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :ns,
            s(:send,
              s(:lvar, :tl), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "Namespace"))),
          s(:lvasgn, :cm,
            s(:send,
              s(:lvar, :ns), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"),
              s(:str, "Super"))),
          s(:send,
            s(:lvar, :cm), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :a1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "a1"),
              s(:str, "RW"),
              s(:str, ""))),
          s(:send,
            s(:lvar, :a1), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :a2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "a2"),
              s(:str, "RW"),
              s(:str, ""),
              s(:true))),
          s(:send,
            s(:lvar, :a2), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :m1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m1"))),
          s(:send,
            s(:lvar, :m1), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :c1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "C1"),
              s(:nil),
              s(:str, ""))),
          s(:send,
            s(:lvar, :c1), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :i1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "I1"),
              s(:str, ""))),
          s(:send,
            s(:lvar, :i1), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :e1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Extend), :new,
              s(:str, "E1"),
              s(:str, ""))),
          s(:send,
            s(:lvar, :e1), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :s0,
            s(:send,
              s(:send,
                s(:lvar, :cm), :sections), :first)),
          s(:send,
            s(:lvar, :cm), :add_attribute,
            s(:lvar, :a1)),
          s(:send,
            s(:lvar, :cm), :add_attribute,
            s(:lvar, :a2)),
          s(:send,
            s(:lvar, :cm), :add_method,
            s(:lvar, :m1)),
          s(:send,
            s(:lvar, :cm), :add_constant,
            s(:lvar, :c1)),
          s(:send,
            s(:lvar, :cm), :add_include,
            s(:lvar, :i1)),
          s(:send,
            s(:lvar, :cm), :add_extend,
            s(:lvar, :e1)),
          s(:send,
            s(:lvar, :cm), :add_comment,
            s(:str, "this is a comment"),
            s(:lvar, :tl)),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:send,
                                          s(:send,
                                            s(:str, "\u0004\bU:\u0016RDoc::NormalClass[\u000Fi\aI\"\nKlass"), :+,
                                            s(:str, "\u0006:\u0006EFI\"\u0015Namespace::Klass\u0006;\u0006FI")), :+,
                                          s(:str, "\"\nSuper\u0006;\u0006Fo:\eRDoc::Markup::Document\a")), :+,
                                        s(:str, ":\v@parts[\u0006o;\a\a;\b[\u0006o")), :+,
                                      s(:str, ":\u001CRDoc::Markup::Paragraph\u0006;\b")), :+,
                                    s(:str, "[\u0006I\"\u0016this is a comment\u0006;\u0006F")), :+,
                                  s(:str, ":\n@fileI\"\ffile.rb\u0006;\u0006F;\n0[\a[\nI")), :+,
                                s(:str, "\"\aa2\u0006;\u0006FI\"\aRW\u0006;\u0006F:\vpublicT@\u0011")), :+,
                              s(:str, "[\nI\"\aa1\u0006;\u0006FI\"\aRW\u0006;\u0006F;\vF@\u0011")), :+,
                            s(:str, "[\u0006[\bI\"\aC1\u0006;\u0006Fo;\a\a;\b[\u0000;\n0@\u0011")), :+,
                          s(:str, "[\u0006[\bI\"\aI1\u0006;\u0006Fo;\a\a;\b[\u0000;\n0@\u0011")), :+,
                        s(:str, "[\a[\aI\"\nclass\u0006;\u0006F[\b[\a;\v[\u0000")), :+,
                      s(:str, "[\a:\u000Eprotected[\u0000[\a:\fprivate[\u0000[\aI")), :+,
                    s(:str, "\"\rinstance\u0006;\u0006F[\b[\a;\v[\u0006[\aI")), :+,
                  s(:str, "\"\am1\u0006;\u0006F@\u0011[\a;\f[\u0000[\a;\r[\u0000")), :+,
                s(:str, "[\u0006[\bI\"\aE1\u0006;\u0006Fo;\a\a;\b[\u0000;\n0@\u0011")))),
          s(:send,
            s(:lvar, :loaded), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :assert_equal,
            s(:lvar, :cm),
            s(:lvar, :loaded)),
          s(:lvasgn, :inner,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
                s(:str, "this is a comment")))),
          s(:send,
            s(:lvar, :inner), :file=,
            s(:lvar, :tl)),
          s(:lvasgn, :comment,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new,
              s(:lvar, :inner))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :a2),
              s(:lvar, :a1)),
            s(:send,
              s(:send,
                s(:lvar, :loaded), :attributes), :sort)),
          s(:send, nil, :assert_equal,
            s(:lvar, :comment),
            s(:send,
              s(:lvar, :loaded), :comment)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :c1)),
            s(:send,
              s(:lvar, :loaded), :constants)),
          s(:send, nil, :assert_equal,
            s(:str, "Namespace::Klass"),
            s(:send,
              s(:lvar, :loaded), :full_name)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :i1)),
            s(:send,
              s(:lvar, :loaded), :includes)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :e1)),
            s(:send,
              s(:lvar, :loaded), :extends)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :m1)),
            s(:send,
              s(:lvar, :loaded), :method_list)),
          s(:send, nil, :assert_equal,
            s(:str, "Klass"),
            s(:send,
              s(:lvar, :loaded), :name)),
          s(:send, nil, :assert_equal,
            s(:str, "Super"),
            s(:send,
              s(:lvar, :loaded), :superclass)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :loaded), :in_files)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :loaded), :parent)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :loaded), :current_section)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :attributes), :first), :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :constants), :first), :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :includes), :first), :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :extends), :first), :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :method_list), :first), :file)),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:nil),
                s(:lvar, :s0)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :loaded), :sections_hash)))),
      s(:def, :test_marshal_load_version_3,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :ns,
            s(:send,
              s(:lvar, :tl), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "Namespace"))),
          s(:lvasgn, :cm,
            s(:send,
              s(:lvar, :ns), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"),
              s(:str, "Super"))),
          s(:send,
            s(:lvar, :cm), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :a1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "a1"),
              s(:str, "RW"),
              s(:str, ""))),
          s(:send,
            s(:lvar, :a1), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :a2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "a2"),
              s(:str, "RW"),
              s(:str, ""),
              s(:true))),
          s(:send,
            s(:lvar, :a2), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :m1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m1"))),
          s(:send,
            s(:lvar, :m1), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :c1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "C1"),
              s(:nil),
              s(:str, ""))),
          s(:send,
            s(:lvar, :c1), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :i1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "I1"),
              s(:str, ""))),
          s(:send,
            s(:lvar, :i1), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :e1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Extend), :new,
              s(:str, "E1"),
              s(:str, ""))),
          s(:send,
            s(:lvar, :e1), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :section_comment,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Comment), :new,
              s(:str, "section comment"))),
          s(:send,
            s(:lvar, :section_comment), :location=,
            s(:lvar, :tl)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:lvar, :cm), :sections), :length),
            s(:str, "sanity, default section only")),
          s(:lvasgn, :s0,
            s(:send,
              s(:send,
                s(:lvar, :cm), :sections), :first)),
          s(:lvasgn, :s1,
            s(:send,
              s(:lvar, :cm), :add_section,
              s(:str, "section"),
              s(:lvar, :section_comment))),
          s(:send,
            s(:lvar, :cm), :add_attribute,
            s(:lvar, :a1)),
          s(:send,
            s(:lvar, :cm), :add_attribute,
            s(:lvar, :a2)),
          s(:send,
            s(:lvar, :cm), :add_method,
            s(:lvar, :m1)),
          s(:send,
            s(:lvar, :cm), :add_constant,
            s(:lvar, :c1)),
          s(:send,
            s(:lvar, :cm), :add_include,
            s(:lvar, :i1)),
          s(:send,
            s(:lvar, :cm), :add_extend,
            s(:lvar, :e1)),
          s(:send,
            s(:lvar, :cm), :add_comment,
            s(:str, "this is a comment"),
            s(:lvar, :tl)),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:send,
                                          s(:send,
                                            s(:send,
                                              s(:send,
                                                s(:send,
                                                  s(:send,
                                                    s(:send,
                                                      s(:send,
                                                        s(:send,
                                                          s(:send,
                                                            s(:str, "\u0004\bU:\u0016RDoc::NormalClass[\u0013i\bI\"\nKlass"), :+,
                                                            s(:str, "\u0006:\u0006ETI\"\u0015Namespace::Klass\u0006;\u0006TI")), :+,
                                                          s(:str, "\"\nSuper\u0006;\u0006To:\eRDoc::Markup::Document\a")), :+,
                                                        s(:str, ":\v@parts[\u0006o;\a\a;\b[\u0006o")), :+,
                                                      s(:str, ":\u001CRDoc::Markup::Paragraph\u0006;\b[\u0006I")), :+,
                                                    s(:str, "\"\u0016this is a comment\u0006;\u0006T:\n@fileI")), :+,
                                                  s(:str, "\"\ffile.rb\u0006;\u0006T;\n0[\a[\nI\"\aa2\u0006;")), :+,
                                                s(:str, "\u0006TI\"\aRW\u0006;\u0006T:\vpublicT@\u0011[\nI")), :+,
                                              s(:str, "\"\aa1\u0006;\u0006TI\"\aRW\u0006;\u0006T;\vF@\u0011")), :+,
                                            s(:str, "[\u0006U:\u0013RDoc::Constant[\u000Fi\u0000I\"\aC1\u0006")), :+,
                                          s(:str, ";\u0006TI\"\u0019Namespace::Klass::C1\u0006;\u0006T00o")), :+,
                                        s(:str, ";\a\a;\b[\u0000;\n0@\u0011@\ac\u0016RDoc::NormalClass0")), :+,
                                      s(:str, "[\u0006[\bI\"\aI1\u0006;\u0006To;\a\a;\b[\u0000;\n0@\u0011")), :+,
                                    s(:str, "[\a[\aI\"\nclass\u0006;\u0006T[\b[\a;\v[\u0000[\a")), :+,
                                  s(:str, ":\u000Eprotected[\u0000[\a:\fprivate[\u0000[\aI")), :+,
                                s(:str, "\"\rinstance\u0006;\u0006T[\b[\a;\v[\u0006[\aI")), :+,
                              s(:str, "\"\am1\u0006;\u0006T@\u0011[\a;\r[\u0000[\a;\u000E[\u0000")), :+,
                            s(:str, "[\u0006[\bI\"\aE1\u0006;\u0006To;\a\a;\b[\u0000;\n0@\u0011")), :+,
                          s(:str, "[\aU:\eRDoc::Context::Section[\bi\u00000o;\a\a;\b")), :+,
                        s(:str, "[\u0000;\n0U;\u000F[\bi\u0000I\"\fsection\u0006;\u0006To")), :+,
                      s(:str, ";\a\a;\b[\u0006o;\a\a;\b[\u0006o;\t\u0006;\b[\u0006I")), :+,
                    s(:str, "\"\u0014section comment\u0006;\u0006T;\n@\u0011;\n0")), :+,
                  s(:str, "[\u0006@\u0011I\"\u000ENamespace\u0006")), :+,
                s(:str, ";\u0006Tc\u0017RDoc::NormalModule")))),
          s(:send,
            s(:lvar, :loaded), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :assert_equal,
            s(:lvar, :cm),
            s(:lvar, :loaded)),
          s(:lvasgn, :inner,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
                s(:str, "this is a comment")))),
          s(:send,
            s(:lvar, :inner), :file=,
            s(:lvar, :tl)),
          s(:lvasgn, :comment,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new,
              s(:lvar, :inner))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :a2),
              s(:lvar, :a1)),
            s(:send,
              s(:send,
                s(:lvar, :loaded), :attributes), :sort)),
          s(:send, nil, :assert_equal,
            s(:lvar, :comment),
            s(:send,
              s(:lvar, :loaded), :comment)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :c1)),
            s(:send,
              s(:lvar, :loaded), :constants)),
          s(:send, nil, :assert_equal,
            s(:str, "Namespace::Klass"),
            s(:send,
              s(:lvar, :loaded), :full_name)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :i1)),
            s(:send,
              s(:lvar, :loaded), :includes)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :e1)),
            s(:send,
              s(:lvar, :loaded), :extends)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :m1)),
            s(:send,
              s(:lvar, :loaded), :method_list)),
          s(:send, nil, :assert_equal,
            s(:str, "Klass"),
            s(:send,
              s(:lvar, :loaded), :name)),
          s(:send, nil, :assert_equal,
            s(:str, "Super"),
            s(:send,
              s(:lvar, :loaded), :superclass)),
          s(:send, nil, :assert_equal,
            s(:str, "Namespace"),
            s(:send,
              s(:send,
                s(:lvar, :loaded), :parent), :name)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :loaded), :current_section)),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:nil),
                s(:lvar, :s0)),
              s(:pair,
                s(:str, "section"),
                s(:lvar, :s1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :loaded), :sections_hash)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :tl)),
            s(:send,
              s(:lvar, :loaded), :in_files)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :attributes), :first), :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :constants), :first), :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :includes), :first), :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :extends), :first), :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :method_list), :first), :file)))),
      s(:def, :test_merge,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :p1,
            s(:send,
              s(:lvar, :tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Parent"))),
          s(:lvasgn, :c1,
            s(:send,
              s(:lvar, :p1), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"))),
          s(:lvasgn, :c2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass), :new,
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :c2), :merge,
            s(:lvar, :c1)),
          s(:send, nil, :assert_equal,
            s(:str, "Parent"),
            s(:send,
              s(:lvar, :c1), :parent_name),
            s(:str, "original parent name")),
          s(:send, nil, :assert_equal,
            s(:str, "Parent"),
            s(:send,
              s(:lvar, :c2), :parent_name),
            s(:str, "merged parent name")),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :c1), :current_section),
            s(:str, "original current_section")),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :c2), :current_section),
            s(:str, "merged current_section")))),
      s(:def, :test_merge_attributes,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl1,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :tl2,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "two.rb"))),
          s(:lvasgn, :cm1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "Klass"))),
          s(:lvasgn, :attr,
            s(:send,
              s(:lvar, :cm1), :add_attribute,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Attr), :new,
                s(:nil),
                s(:str, "a1"),
                s(:str, "RW"),
                s(:str, "")))),
          s(:send,
            s(:lvar, :attr), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :attr,
            s(:send,
              s(:lvar, :cm1), :add_attribute,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Attr), :new,
                s(:nil),
                s(:str, "a3"),
                s(:str, "R"),
                s(:str, "")))),
          s(:send,
            s(:lvar, :attr), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :attr,
            s(:send,
              s(:lvar, :cm1), :add_attribute,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Attr), :new,
                s(:nil),
                s(:str, "a4"),
                s(:str, "R"),
                s(:str, "")))),
          s(:send,
            s(:lvar, :attr), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :cm2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm2), :instance_variable_set,
            s(:sym, :@comment),
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:lvasgn, :attr,
            s(:send,
              s(:lvar, :cm2), :add_attribute,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Attr), :new,
                s(:nil),
                s(:str, "a2"),
                s(:str, "RW"),
                s(:str, "")))),
          s(:send,
            s(:lvar, :attr), :record_location,
            s(:lvar, :tl2)),
          s(:lvasgn, :attr,
            s(:send,
              s(:lvar, :cm2), :add_attribute,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Attr), :new,
                s(:nil),
                s(:str, "a3"),
                s(:str, "W"),
                s(:str, "")))),
          s(:send,
            s(:lvar, :attr), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :attr,
            s(:send,
              s(:lvar, :cm2), :add_attribute,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Attr), :new,
                s(:nil),
                s(:str, "a4"),
                s(:str, "W"),
                s(:str, "")))),
          s(:send,
            s(:lvar, :attr), :record_location,
            s(:lvar, :tl1)),
          s(:send,
            s(:lvar, :cm1), :merge,
            s(:lvar, :cm2)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Attr), :new,
                s(:nil),
                s(:str, "a2"),
                s(:str, "RW"),
                s(:str, "")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Attr), :new,
                s(:nil),
                s(:str, "a3"),
                s(:str, "W"),
                s(:str, "")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Attr), :new,
                s(:nil),
                s(:str, "a4"),
                s(:str, "W"),
                s(:str, "")))),
          s(:block,
            s(:send,
              s(:lvar, :expected), :each),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:lvar, :a), :parent=,
              s(:lvar, :cm1))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:lvar, :cm1), :attributes), :sort)))),
      s(:def, :test_merge_attributes_version_0,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl1,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :cm1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "Klass"))),
          s(:lvasgn, :attr,
            s(:send,
              s(:lvar, :cm1), :add_attribute,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Attr), :new,
                s(:nil),
                s(:str, "a1"),
                s(:str, "RW"),
                s(:str, "")))),
          s(:send,
            s(:lvar, :attr), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :attr,
            s(:send,
              s(:lvar, :cm1), :add_attribute,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Attr), :new,
                s(:nil),
                s(:str, "a3"),
                s(:str, "R"),
                s(:str, "")))),
          s(:send,
            s(:lvar, :attr), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :attr,
            s(:send,
              s(:lvar, :cm1), :add_attribute,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Attr), :new,
                s(:nil),
                s(:str, "a4"),
                s(:str, "R"),
                s(:str, "")))),
          s(:send,
            s(:lvar, :attr), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :cm2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm2), :instance_variable_set,
            s(:sym, :@comment),
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:lvasgn, :attr,
            s(:send,
              s(:lvar, :cm2), :add_attribute,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Attr), :new,
                s(:nil),
                s(:str, "a2"),
                s(:str, "RW"),
                s(:str, "")))),
          s(:lvasgn, :attr,
            s(:send,
              s(:lvar, :cm2), :add_attribute,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Attr), :new,
                s(:nil),
                s(:str, "a3"),
                s(:str, "W"),
                s(:str, "")))),
          s(:lvasgn, :attr,
            s(:send,
              s(:lvar, :cm2), :add_attribute,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Attr), :new,
                s(:nil),
                s(:str, "a4"),
                s(:str, "W"),
                s(:str, "")))),
          s(:send,
            s(:lvar, :cm1), :merge,
            s(:lvar, :cm2)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Attr), :new,
                s(:nil),
                s(:str, "a1"),
                s(:str, "RW"),
                s(:str, "")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Attr), :new,
                s(:nil),
                s(:str, "a2"),
                s(:str, "RW"),
                s(:str, "")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Attr), :new,
                s(:nil),
                s(:str, "a3"),
                s(:str, "RW"),
                s(:str, "")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Attr), :new,
                s(:nil),
                s(:str, "a4"),
                s(:str, "RW"),
                s(:str, "")))),
          s(:block,
            s(:send,
              s(:lvar, :expected), :each),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:lvar, :a), :parent=,
              s(:lvar, :cm1))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:lvar, :cm1), :attributes), :sort)))),
      s(:def, :test_merge_collections_drop,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file"))),
          s(:lvasgn, :cm1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "C"))),
          s(:send,
            s(:lvar, :cm1), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :const,
            s(:send,
              s(:lvar, :cm1), :add_constant,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Constant), :new,
                s(:str, "CONST"),
                s(:nil),
                s(:nil)))),
          s(:send,
            s(:lvar, :const), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :cm2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "C"))),
          s(:send,
            s(:lvar, :cm2), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :added,
            s(:array)),
          s(:lvasgn, :removed,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :cm1), :merge_collections,
              s(:send,
                s(:lvar, :cm1), :constants),
              s(:send,
                s(:lvar, :cm2), :constants),
              s(:send,
                s(:lvar, :cm2), :in_files)),
            s(:args,
              s(:arg, :add),
              s(:arg, :c)),
            s(:if,
              s(:lvar, :add),
              s(:send,
                s(:lvar, :added), :<<,
                s(:lvar, :c)),
              s(:send,
                s(:lvar, :removed), :<<,
                s(:lvar, :c)))),
          s(:send, nil, :assert_empty,
            s(:lvar, :added)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :const)),
            s(:lvar, :removed)))),
      s(:def, :test_merge_comment,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl1,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :tl2,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "two.rb"))),
          s(:lvasgn, :cm1,
            s(:send,
              s(:lvar, :tl1), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm1), :add_comment,
            s(:str, "klass 1"),
            s(:lvar, :tl1)),
          s(:send,
            s(:lvar, :cm1), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :cm2,
            s(:send,
              s(:lvar, :tl1), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm2), :add_comment,
            s(:str, "klass 2"),
            s(:lvar, :tl2)),
          s(:send,
            s(:lvar, :cm2), :add_comment,
            s(:str, "klass 3"),
            s(:lvar, :tl1)),
          s(:send,
            s(:lvar, :cm2), :record_location,
            s(:lvar, :tl1)),
          s(:send,
            s(:lvar, :cm2), :record_location,
            s(:lvar, :tl2)),
          s(:lvasgn, :cm2,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:lvar, :cm2)))),
          s(:send,
            s(:lvar, :cm2), :store=,
            s(:ivar, :@store)),
          s(:send,
            s(:lvar, :cm1), :merge,
            s(:lvar, :cm2)),
          s(:lvasgn, :inner1,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "klass 3")))),
          s(:send,
            s(:lvar, :inner1), :file=,
            s(:str, "one.rb")),
          s(:lvasgn, :inner2,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "klass 2")))),
          s(:send,
            s(:lvar, :inner2), :file=,
            s(:str, "two.rb")),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:lvar, :inner2),
              s(:lvar, :inner1))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :cm1), :comment)))),
      s(:def, :test_merge_comment_version_0,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :cm1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm1), :add_comment,
            s(:str, "klass 1"),
            s(:lvar, :tl)),
          s(:lvasgn, :cm2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm2), :instance_variable_set,
            s(:sym, :@comment),
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "klass 2")))),
          s(:send,
            s(:lvar, :cm2), :instance_variable_set,
            s(:sym, :@comment_location),
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:lvar, :cm2), :comment))),
          s(:send,
            s(:lvar, :cm1), :merge,
            s(:lvar, :cm2)),
          s(:lvasgn, :inner,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "klass 1")))),
          s(:send,
            s(:lvar, :inner), :file=,
            s(:str, "file.rb")),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:lvar, :inner),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Document), :new,
                s(:send,
                  s(:const,
                    s(:ivar, :@RM), :Paragraph), :new,
                  s(:str, "klass 2"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :cm1), :comment)))),
      s(:def, :test_merge_constants,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl1,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :tl2,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "two.rb"))),
          s(:lvasgn, :cm1,
            s(:send,
              s(:lvar, :tl1), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule),
              s(:str, "Klass"))),
          s(:lvasgn, :const,
            s(:send,
              s(:lvar, :cm1), :add_constant,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Constant), :new,
                s(:str, "C1"),
                s(:nil),
                s(:str, "one")))),
          s(:send,
            s(:lvar, :const), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :const,
            s(:send,
              s(:lvar, :cm1), :add_constant,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Constant), :new,
                s(:str, "C3"),
                s(:nil),
                s(:str, "one")))),
          s(:send,
            s(:lvar, :const), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :store,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:lvasgn, :tl,
            s(:send,
              s(:lvar, :store), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :cm2,
            s(:send,
              s(:lvar, :tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm2), :instance_variable_set,
            s(:sym, :@comment),
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:lvasgn, :const,
            s(:send,
              s(:lvar, :cm2), :add_constant,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Constant), :new,
                s(:str, "C2"),
                s(:nil),
                s(:str, "two")))),
          s(:send,
            s(:lvar, :const), :record_location,
            s(:lvar, :tl2)),
          s(:lvasgn, :const,
            s(:send,
              s(:lvar, :cm2), :add_constant,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Constant), :new,
                s(:str, "C3"),
                s(:nil),
                s(:str, "one")))),
          s(:send,
            s(:lvar, :const), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :const,
            s(:send,
              s(:lvar, :cm2), :add_constant,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Constant), :new,
                s(:str, "C4"),
                s(:nil),
                s(:str, "one")))),
          s(:send,
            s(:lvar, :const), :record_location,
            s(:lvar, :tl1)),
          s(:send,
            s(:lvar, :cm1), :merge,
            s(:lvar, :cm2)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Constant), :new,
                s(:str, "C2"),
                s(:nil),
                s(:str, "two")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Constant), :new,
                s(:str, "C3"),
                s(:nil),
                s(:str, "one")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Constant), :new,
                s(:str, "C4"),
                s(:nil),
                s(:str, "one")))),
          s(:block,
            s(:send,
              s(:lvar, :expected), :each),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:lvar, :a), :parent=,
              s(:lvar, :cm1))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:lvar, :cm1), :constants), :sort)))),
      s(:def, :test_merge_constants_version_0,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl1,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :cm1,
            s(:send,
              s(:lvar, :tl1), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule),
              s(:str, "Klass"))),
          s(:lvasgn, :const,
            s(:send,
              s(:lvar, :cm1), :add_constant,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Constant), :new,
                s(:str, "C1"),
                s(:nil),
                s(:str, "one")))),
          s(:send,
            s(:lvar, :const), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :const,
            s(:send,
              s(:lvar, :cm1), :add_constant,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Constant), :new,
                s(:str, "C3"),
                s(:nil),
                s(:str, "one")))),
          s(:send,
            s(:lvar, :const), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :store,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:lvasgn, :tl,
            s(:send,
              s(:lvar, :store), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :cm2,
            s(:send,
              s(:lvar, :tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm2), :instance_variable_set,
            s(:sym, :@comment),
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:lvasgn, :const,
            s(:send,
              s(:lvar, :cm2), :add_constant,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Constant), :new,
                s(:str, "C2"),
                s(:nil),
                s(:str, "two")))),
          s(:lvasgn, :const,
            s(:send,
              s(:lvar, :cm2), :add_constant,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Constant), :new,
                s(:str, "C3"),
                s(:nil),
                s(:str, "two")))),
          s(:lvasgn, :const,
            s(:send,
              s(:lvar, :cm2), :add_constant,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Constant), :new,
                s(:str, "C4"),
                s(:nil),
                s(:str, "two")))),
          s(:send,
            s(:lvar, :cm1), :merge,
            s(:lvar, :cm2)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Constant), :new,
                s(:str, "C1"),
                s(:nil),
                s(:str, "one")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Constant), :new,
                s(:str, "C2"),
                s(:nil),
                s(:str, "two")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Constant), :new,
                s(:str, "C3"),
                s(:nil),
                s(:str, "one")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Constant), :new,
                s(:str, "C4"),
                s(:nil),
                s(:str, "two")))),
          s(:block,
            s(:send,
              s(:lvar, :expected), :each),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:lvar, :a), :parent=,
              s(:lvar, :cm1))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:lvar, :cm1), :constants), :sort)))),
      s(:def, :test_merge_extends,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl1,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :cm1,
            s(:send,
              s(:lvar, :tl1), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule),
              s(:str, "Klass"))),
          s(:lvasgn, :ext,
            s(:send,
              s(:lvar, :cm1), :add_extend,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Extend), :new,
                s(:str, "I1"),
                s(:str, "one")))),
          s(:send,
            s(:lvar, :ext), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :ext,
            s(:send,
              s(:lvar, :cm1), :add_extend,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Extend), :new,
                s(:str, "I3"),
                s(:str, "one")))),
          s(:send,
            s(:lvar, :ext), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :tl2,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "two.rb"))),
          s(:send,
            s(:lvar, :tl2), :store=,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:lvasgn, :cm2,
            s(:send,
              s(:lvar, :tl2), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm2), :instance_variable_set,
            s(:sym, :@comment),
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:lvasgn, :ext,
            s(:send,
              s(:lvar, :cm2), :add_extend,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Extend), :new,
                s(:str, "I2"),
                s(:str, "two")))),
          s(:send,
            s(:lvar, :ext), :record_location,
            s(:lvar, :tl2)),
          s(:lvasgn, :ext,
            s(:send,
              s(:lvar, :cm2), :add_extend,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Extend), :new,
                s(:str, "I3"),
                s(:str, "one")))),
          s(:send,
            s(:lvar, :ext), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :ext,
            s(:send,
              s(:lvar, :cm2), :add_extend,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Extend), :new,
                s(:str, "I4"),
                s(:str, "one")))),
          s(:send,
            s(:lvar, :ext), :record_location,
            s(:lvar, :tl1)),
          s(:send,
            s(:lvar, :cm1), :merge,
            s(:lvar, :cm2)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Extend), :new,
                s(:str, "I2"),
                s(:str, "two")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Extend), :new,
                s(:str, "I3"),
                s(:str, "one")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Extend), :new,
                s(:str, "I4"),
                s(:str, "one")))),
          s(:block,
            s(:send,
              s(:lvar, :expected), :each),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:lvar, :a), :parent=,
              s(:lvar, :cm1))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:lvar, :cm1), :extends), :sort)))),
      s(:def, :test_merge_includes,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl1,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :cm1,
            s(:send,
              s(:lvar, :tl1), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule),
              s(:str, "Klass"))),
          s(:lvasgn, :incl,
            s(:send,
              s(:lvar, :cm1), :add_include,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Include), :new,
                s(:str, "I1"),
                s(:str, "one")))),
          s(:send,
            s(:lvar, :incl), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :incl,
            s(:send,
              s(:lvar, :cm1), :add_include,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Include), :new,
                s(:str, "I3"),
                s(:str, "one")))),
          s(:send,
            s(:lvar, :incl), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :tl2,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "two.rb"))),
          s(:send,
            s(:lvar, :tl2), :store=,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:lvasgn, :cm2,
            s(:send,
              s(:lvar, :tl2), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm2), :instance_variable_set,
            s(:sym, :@comment),
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:lvasgn, :incl,
            s(:send,
              s(:lvar, :cm2), :add_include,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Include), :new,
                s(:str, "I2"),
                s(:str, "two")))),
          s(:send,
            s(:lvar, :incl), :record_location,
            s(:lvar, :tl2)),
          s(:lvasgn, :incl,
            s(:send,
              s(:lvar, :cm2), :add_include,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Include), :new,
                s(:str, "I3"),
                s(:str, "one")))),
          s(:send,
            s(:lvar, :incl), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :incl,
            s(:send,
              s(:lvar, :cm2), :add_include,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Include), :new,
                s(:str, "I4"),
                s(:str, "one")))),
          s(:send,
            s(:lvar, :incl), :record_location,
            s(:lvar, :tl1)),
          s(:send,
            s(:lvar, :cm1), :merge,
            s(:lvar, :cm2)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Include), :new,
                s(:str, "I2"),
                s(:str, "two")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Include), :new,
                s(:str, "I3"),
                s(:str, "one")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Include), :new,
                s(:str, "I4"),
                s(:str, "one")))),
          s(:block,
            s(:send,
              s(:lvar, :expected), :each),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:lvar, :a), :parent=,
              s(:lvar, :cm1))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:lvar, :cm1), :includes), :sort)))),
      s(:def, :test_merge_includes_version_0,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl1,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :cm1,
            s(:send,
              s(:lvar, :tl1), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule),
              s(:str, "Klass"))),
          s(:lvasgn, :incl,
            s(:send,
              s(:lvar, :cm1), :add_include,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Include), :new,
                s(:str, "I1"),
                s(:str, "one")))),
          s(:send,
            s(:lvar, :incl), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :incl,
            s(:send,
              s(:lvar, :cm1), :add_include,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Include), :new,
                s(:str, "I3"),
                s(:str, "one")))),
          s(:send,
            s(:lvar, :incl), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :tl2,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "one.rb"))),
          s(:send,
            s(:lvar, :tl2), :store=,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:lvasgn, :cm2,
            s(:send,
              s(:lvar, :tl2), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm2), :instance_variable_set,
            s(:sym, :@comment),
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:lvasgn, :incl,
            s(:send,
              s(:lvar, :cm2), :add_include,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Include), :new,
                s(:str, "I2"),
                s(:str, "two")))),
          s(:lvasgn, :incl,
            s(:send,
              s(:lvar, :cm2), :add_include,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Include), :new,
                s(:str, "I3"),
                s(:str, "two")))),
          s(:lvasgn, :incl,
            s(:send,
              s(:lvar, :cm2), :add_include,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Include), :new,
                s(:str, "I4"),
                s(:str, "two")))),
          s(:send,
            s(:lvar, :cm1), :merge,
            s(:lvar, :cm2)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Include), :new,
                s(:str, "I1"),
                s(:str, "one")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Include), :new,
                s(:str, "I2"),
                s(:str, "two")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Include), :new,
                s(:str, "I3"),
                s(:str, "one")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Include), :new,
                s(:str, "I4"),
                s(:str, "two")))),
          s(:block,
            s(:send,
              s(:lvar, :expected), :each),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:lvar, :a), :parent=,
              s(:lvar, :cm1))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:lvar, :cm1), :includes), :sort)))),
      s(:def, :test_merge_methods,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl1,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :tl2,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "two.rb"))),
          s(:lvasgn, :cm1,
            s(:send,
              s(:lvar, :tl1), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"))),
          s(:lvasgn, :meth,
            s(:send,
              s(:lvar, :cm1), :add_method,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "m1")))),
          s(:send,
            s(:lvar, :meth), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :meth,
            s(:send,
              s(:lvar, :cm1), :add_method,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "m3")))),
          s(:send,
            s(:lvar, :meth), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :cm2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm2), :store=,
            s(:ivar, :@store)),
          s(:send,
            s(:lvar, :cm2), :instance_variable_set,
            s(:sym, :@comment),
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:lvasgn, :meth,
            s(:send,
              s(:lvar, :cm2), :add_method,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "m2")))),
          s(:send,
            s(:lvar, :meth), :record_location,
            s(:lvar, :tl2)),
          s(:lvasgn, :meth,
            s(:send,
              s(:lvar, :cm2), :add_method,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "m3")))),
          s(:send,
            s(:lvar, :meth), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :meth,
            s(:send,
              s(:lvar, :cm2), :add_method,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "m4")))),
          s(:send,
            s(:lvar, :meth), :record_location,
            s(:lvar, :tl1)),
          s(:send,
            s(:lvar, :cm1), :merge,
            s(:lvar, :cm2)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "m2")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "m3")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "m4")))),
          s(:block,
            s(:send,
              s(:lvar, :expected), :each),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:lvar, :a), :parent=,
              s(:lvar, :cm1))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:lvar, :cm1), :method_list), :sort)))),
      s(:def, :test_merge_methods_version_0,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl1,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :cm1,
            s(:send,
              s(:lvar, :tl1), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"))),
          s(:lvasgn, :meth,
            s(:send,
              s(:lvar, :cm1), :add_method,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "m1")))),
          s(:send,
            s(:lvar, :meth), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :meth,
            s(:send,
              s(:lvar, :cm1), :add_method,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "m3")))),
          s(:send,
            s(:lvar, :meth), :record_location,
            s(:lvar, :tl1)),
          s(:lvasgn, :cm2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm2), :store=,
            s(:ivar, :@store)),
          s(:send,
            s(:lvar, :cm2), :instance_variable_set,
            s(:sym, :@comment),
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:lvasgn, :meth,
            s(:send,
              s(:lvar, :cm2), :add_method,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "m2")))),
          s(:lvasgn, :meth,
            s(:send,
              s(:lvar, :cm2), :add_method,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "m3")))),
          s(:lvasgn, :meth,
            s(:send,
              s(:lvar, :cm2), :add_method,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "m4")))),
          s(:send,
            s(:lvar, :cm1), :merge,
            s(:lvar, :cm2)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "m1")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "m2")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "m3")),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "m4")))),
          s(:block,
            s(:send,
              s(:lvar, :expected), :each),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:lvar, :a), :parent=,
              s(:lvar, :cm1))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:lvar, :cm1), :method_list), :sort)))),
      s(:def, :test_merge_sections,
        s(:args),
        s(:begin,
          s(:lvasgn, :store1,
            s(:ivar, :@store)),
          s(:lvasgn, :tl1_1,
            s(:send,
              s(:lvar, :store1), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :cm1,
            s(:send,
              s(:lvar, :tl1_1), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm1), :record_location,
            s(:lvar, :tl1_1)),
          s(:lvasgn, :s1_0,
            s(:send,
              s(:send,
                s(:lvar, :cm1), :sections), :first)),
          s(:lvasgn, :s1_1,
            s(:send,
              s(:lvar, :cm1), :add_section,
              s(:str, "section 1"),
              s(:send, nil, :comment,
                s(:str, "comment 1"),
                s(:lvar, :tl1_1)))),
          s(:send,
            s(:lvar, :cm1), :add_section,
            s(:str, "section 2"),
            s(:send, nil, :comment,
              s(:str, "comment 2 a"),
              s(:lvar, :tl1_1))),
          s(:send,
            s(:lvar, :cm1), :add_section,
            s(:str, "section 4"),
            s(:send, nil, :comment,
              s(:str, "comment 4 a"),
              s(:lvar, :tl1_1))),
          s(:lvasgn, :store2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:lvasgn, :tl2_1,
            s(:send,
              s(:lvar, :store2), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :tl2_2,
            s(:send,
              s(:lvar, :store2), :add_file,
              s(:str, "two.rb"))),
          s(:lvasgn, :cm2,
            s(:send,
              s(:lvar, :tl2_1), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm2), :record_location,
            s(:lvar, :tl2_1)),
          s(:send,
            s(:lvar, :cm2), :record_location,
            s(:lvar, :tl2_2)),
          s(:send,
            s(:send,
              s(:lvar, :cm2), :sections), :first),
          s(:lvasgn, :s2_2,
            s(:send,
              s(:lvar, :cm2), :add_section,
              s(:str, "section 2"),
              s(:send, nil, :comment,
                s(:str, "comment 2 b"),
                s(:lvar, :tl2_1)))),
          s(:lvasgn, :s2_3,
            s(:send,
              s(:lvar, :cm2), :add_section,
              s(:str, "section 3"),
              s(:send, nil, :comment,
                s(:str, "comment 3"),
                s(:lvar, :tl2_2)))),
          s(:send,
            s(:lvar, :cm2), :add_section,
            s(:str, "section 4"),
            s(:send, nil, :comment,
              s(:str, "comment 4 b"),
              s(:lvar, :tl2_2))),
          s(:send,
            s(:lvar, :cm1), :merge,
            s(:lvar, :cm2)),
          s(:lvasgn, :expected,
            s(:array,
              s(:lvar, :s1_0),
              s(:lvar, :s1_1),
              s(:lvar, :s2_2),
              s(:lvar, :s2_3),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Context), :Section), :new,
                s(:lvar, :cm1),
                s(:str, "section 4"),
                s(:nil)))),
          s(:lvasgn, :merged_sections,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :cm1), :sections), :sort_by),
              s(:args,
                s(:arg, :s)),
              s(:or,
                s(:send,
                  s(:lvar, :s), :title),
                s(:str, "")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :merged_sections)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :comment,
                s(:str, "comment 2 b"),
                s(:lvar, :tl2_1))),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :cm1), :sections_hash), :[],
                s(:str, "section 2")), :comments)),
          s(:lvasgn, :expected_s4_comments,
            s(:array,
              s(:send, nil, :comment,
                s(:str, "comment 4 a"),
                s(:lvar, :tl2_1)),
              s(:send, nil, :comment,
                s(:str, "comment 4 b"),
                s(:lvar, :tl2_2)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected_s4_comments),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :cm1), :sections_hash), :[],
                s(:str, "section 4")), :comments)))),
      s(:def, :test_merge_sections_overlap,
        s(:args),
        s(:begin,
          s(:lvasgn, :store1,
            s(:ivar, :@store)),
          s(:lvasgn, :tl1_1,
            s(:send,
              s(:lvar, :store1), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :tl1_3,
            s(:send,
              s(:lvar, :store1), :add_file,
              s(:str, "three.rb"))),
          s(:lvasgn, :cm1,
            s(:send,
              s(:lvar, :tl1_1), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm1), :record_location,
            s(:lvar, :tl1_1)),
          s(:send,
            s(:lvar, :cm1), :add_section,
            s(:str, "section"),
            s(:send, nil, :comment,
              s(:str, "comment 1 a"),
              s(:lvar, :tl1_1))),
          s(:send,
            s(:lvar, :cm1), :add_section,
            s(:str, "section"),
            s(:send, nil, :comment,
              s(:str, "comment 3"),
              s(:lvar, :tl1_3))),
          s(:lvasgn, :store2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:lvasgn, :tl2_1,
            s(:send,
              s(:lvar, :store2), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :tl2_2,
            s(:send,
              s(:lvar, :store2), :add_file,
              s(:str, "two.rb"))),
          s(:lvasgn, :tl2_3,
            s(:send,
              s(:lvar, :store2), :add_file,
              s(:str, "three.rb"))),
          s(:lvasgn, :cm2,
            s(:send,
              s(:lvar, :tl2_1), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm2), :record_location,
            s(:lvar, :tl2_1)),
          s(:send,
            s(:lvar, :cm2), :record_location,
            s(:lvar, :tl2_2)),
          s(:lvasgn, :s2_0,
            s(:send,
              s(:send,
                s(:lvar, :cm2), :sections), :first)),
          s(:lvasgn, :s2_1,
            s(:send,
              s(:lvar, :cm2), :add_section,
              s(:str, "section"),
              s(:send, nil, :comment,
                s(:str, "comment 1 b"),
                s(:lvar, :tl1_1)))),
          s(:send,
            s(:lvar, :cm2), :add_section,
            s(:str, "section"),
            s(:send, nil, :comment,
              s(:str, "comment 2"),
              s(:lvar, :tl2_2))),
          s(:send,
            s(:lvar, :cm1), :merge_sections,
            s(:lvar, :cm2)),
          s(:lvasgn, :expected,
            s(:array,
              s(:lvar, :s2_0),
              s(:lvar, :s2_1))),
          s(:lvasgn, :merged_sections,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :cm1), :sections), :sort_by),
              s(:args,
                s(:arg, :s)),
              s(:or,
                s(:send,
                  s(:lvar, :s), :title),
                s(:str, "")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :merged_sections)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :comment,
                s(:str, "comment 1 b"),
                s(:lvar, :tl2_1)),
              s(:send, nil, :comment,
                s(:str, "comment 3"),
                s(:lvar, :tl2_3)),
              s(:send, nil, :comment,
                s(:str, "comment 2"),
                s(:lvar, :tl2_2)))),
          s(:lvasgn, :comments,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :cm1), :sections_hash), :[],
                s(:str, "section")), :comments)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:block,
              s(:send,
                s(:lvar, :comments), :sort_by),
              s(:args,
                s(:arg, :c)),
              s(:send,
                s(:send,
                  s(:lvar, :c), :file), :name))))),
      s(:def, :test_parse,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl1,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :tl2,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "two.rb"))),
          s(:lvasgn, :cm,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm), :add_comment,
            s(:str, "comment 1"),
            s(:lvar, :tl1)),
          s(:send,
            s(:lvar, :cm), :add_comment,
            s(:str, "comment 2"),
            s(:lvar, :tl2)),
          s(:lvasgn, :doc1,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "comment 1")))),
          s(:send,
            s(:lvar, :doc1), :file=,
            s(:lvar, :tl1)),
          s(:lvasgn, :doc2,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "comment 2")))),
          s(:send,
            s(:lvar, :doc2), :file=,
            s(:lvar, :tl2)),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:lvar, :doc1),
              s(:lvar, :doc2))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :cm), :parse,
              s(:send,
                s(:lvar, :cm), :comment_location))))),
      s(:def, :test_parse_comment,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl1,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :cm,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm), :comment=,
            s(:send, nil, :comment,
              s(:str, "comment 1"),
              s(:lvar, :tl1))),
          s(:lvasgn, :doc,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "comment 1")))),
          s(:send,
            s(:lvar, :doc), :file=,
            s(:lvar, :tl1)),
          s(:send, nil, :assert_equal,
            s(:lvar, :doc),
            s(:send,
              s(:lvar, :cm), :parse,
              s(:send,
                s(:lvar, :cm), :comment))))),
      s(:def, :test_parse_comment_format,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl1,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :cm,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm), :comment=,
            s(:send, nil, :comment,
              s(:str, "comment ((*1*))"),
              s(:lvar, :tl1))),
          s(:send,
            s(:send,
              s(:lvar, :cm), :comment), :format=,
            s(:str, "rd")),
          s(:lvasgn, :doc,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "comment <em>1</em>")))),
          s(:send,
            s(:lvar, :doc), :file=,
            s(:lvar, :tl1)),
          s(:send, nil, :assert_equal,
            s(:lvar, :doc),
            s(:send,
              s(:lvar, :cm), :parse,
              s(:send,
                s(:lvar, :cm), :comment))))),
      s(:def, :test_parse_comment_location,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl1,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :tl2,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "two.rb"))),
          s(:lvasgn, :cm,
            s(:send,
              s(:lvar, :tl1), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm), :add_comment,
            s(:str, "comment 1"),
            s(:lvar, :tl1)),
          s(:send,
            s(:lvar, :cm), :add_comment,
            s(:str, "comment 2"),
            s(:lvar, :tl2)),
          s(:lvasgn, :cm,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:lvar, :cm)))),
          s(:lvasgn, :doc1,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "comment 1")))),
          s(:send,
            s(:lvar, :doc1), :file=,
            s(:lvar, :tl1)),
          s(:lvasgn, :doc2,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "comment 2")))),
          s(:send,
            s(:lvar, :doc2), :file=,
            s(:lvar, :tl2)),
          s(:send, nil, :assert_same,
            s(:send,
              s(:lvar, :cm), :comment_location),
            s(:send,
              s(:lvar, :cm), :parse,
              s(:send,
                s(:lvar, :cm), :comment_location))))),
      s(:def, :test_remove_nodoc_children,
        s(:args),
        s(:begin,
          s(:lvasgn, :parent,
            s(:send,
              s(:ivar, :@top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule),
              s(:str, "A"))),
          s(:send,
            s(:send,
              s(:lvar, :parent), :modules_hash), :replace,
            s(:hash,
              s(:pair,
                s(:str, "B"),
                s(:true)),
              s(:pair,
                s(:str, "C"),
                s(:true)))),
          s(:send,
            s(:send,
              s(:ivar, :@store), :modules_hash), :replace,
            s(:hash,
              s(:pair,
                s(:str, "A::B"),
                s(:true)))),
          s(:send,
            s(:send,
              s(:lvar, :parent), :classes_hash), :replace,
            s(:hash,
              s(:pair,
                s(:str, "D"),
                s(:true)),
              s(:pair,
                s(:str, "E"),
                s(:true)))),
          s(:send,
            s(:send,
              s(:ivar, :@store), :classes_hash), :replace,
            s(:hash,
              s(:pair,
                s(:str, "A::D"),
                s(:true)))),
          s(:send,
            s(:lvar, :parent), :remove_nodoc_children),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "B")),
            s(:send,
              s(:send,
                s(:lvar, :parent), :modules_hash), :keys)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "D")),
            s(:send,
              s(:send,
                s(:lvar, :parent), :classes_hash), :keys)))),
      s(:def, :test_search_record,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c2_c3), :add_comment,
            s(:str, "This is a comment."),
            s(:ivar, :@xref_data)),
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "C3"),
              s(:str, "C2::C3"),
              s(:str, "C2::C3"),
              s(:str, ""),
              s(:str, "C2/C3.html"),
              s(:str, ""),
              s(:str, "<p>This is a comment.\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@c2_c3), :search_record)))),
      s(:def, :test_search_record_merged,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c2_c3), :add_comment,
            s(:str, "comment A"),
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "a.rb"))),
          s(:send,
            s(:ivar, :@c2_c3), :add_comment,
            s(:str, "comment B"),
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "b.rb"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "C3"),
              s(:str, "C2::C3"),
              s(:str, "C2::C3"),
              s(:str, ""),
              s(:str, "C2/C3.html"),
              s(:str, ""),
              s(:str, "<p>comment A\n<p>comment B\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@c2_c3), :search_record)))),
      s(:def, :test_store_equals,
        s(:args),
        s(:begin,
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:send,
                                          s(:send,
                                            s(:str, "\u0004\bU:\u0016RDoc::NormalClass[\u000Fi\aI\"\nKlass"), :+,
                                            s(:str, "\u0006:\u0006EFI\"\u0015Namespace::Klass\u0006;\u0006FI")), :+,
                                          s(:str, "\"\nSuper\u0006;\u0006Fo:\eRDoc::Markup::Document\a")), :+,
                                        s(:str, ":\v@parts[\u0006o;\a\a;\b[\u0006o")), :+,
                                      s(:str, ":\u001CRDoc::Markup::Paragraph\u0006;\b")), :+,
                                    s(:str, "[\u0006I\"\u0016this is a comment\u0006;\u0006F")), :+,
                                  s(:str, ":\n@fileI\"\ffile.rb\u0006;\u0006F;\n0[\a[\nI")), :+,
                                s(:str, "\"\aa2\u0006;\u0006FI\"\aRW\u0006;\u0006F:\vpublicT@\u0011")), :+,
                              s(:str, "[\nI\"\aa1\u0006;\u0006FI\"\aRW\u0006;\u0006F;\vF@\u0011")), :+,
                            s(:str, "[\u0006[\bI\"\aC1\u0006;\u0006Fo;\a\a;\b[\u0000;\n0@\u0011")), :+,
                          s(:str, "[\u0006[\bI\"\aI1\u0006;\u0006Fo;\a\a;\b[\u0000;\n0@\u0011")), :+,
                        s(:str, "[\a[\aI\"\nclass\u0006;\u0006F[\b[\a;\v[\u0000")), :+,
                      s(:str, "[\a:\u000Eprotected[\u0000[\a:\fprivate[\u0000[\aI")), :+,
                    s(:str, "\"\rinstance\u0006;\u0006F[\b[\a;\v[\u0006[\aI")), :+,
                  s(:str, "\"\am1\u0006;\u0006F@\u0011[\a;\f[\u0000[\a;\r[\u0000")), :+,
                s(:str, "[\u0006[\bI\"\aE1\u0006;\u0006Fo;\a\a;\b[\u0000;\n0@\u0011")))),
          s(:send,
            s(:lvar, :loaded), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :assert_same,
            s(:ivar, :@store),
            s(:send,
              s(:lvar, :loaded), :store)),
          s(:lvasgn, :a,
            s(:send,
              s(:send,
                s(:lvar, :loaded), :attributes), :first)),
          s(:send, nil, :assert_same,
            s(:ivar, :@store),
            s(:send,
              s(:lvar, :a), :store)),
          s(:send, nil, :assert_same,
            s(:ivar, :@store),
            s(:send,
              s(:send,
                s(:lvar, :a), :file), :store)),
          s(:lvasgn, :c,
            s(:send,
              s(:send,
                s(:lvar, :loaded), :constants), :first)),
          s(:send, nil, :assert_same,
            s(:ivar, :@store),
            s(:send,
              s(:lvar, :c), :store)),
          s(:send, nil, :assert_same,
            s(:ivar, :@store),
            s(:send,
              s(:send,
                s(:lvar, :c), :file), :store)),
          s(:lvasgn, :i,
            s(:send,
              s(:send,
                s(:lvar, :loaded), :includes), :first)),
          s(:send, nil, :assert_same,
            s(:ivar, :@store),
            s(:send,
              s(:lvar, :i), :store)),
          s(:send, nil, :assert_same,
            s(:ivar, :@store),
            s(:send,
              s(:send,
                s(:lvar, :i), :file), :store)),
          s(:lvasgn, :e,
            s(:send,
              s(:send,
                s(:lvar, :loaded), :extends), :first)),
          s(:send, nil, :assert_same,
            s(:ivar, :@store),
            s(:send,
              s(:lvar, :e), :store)),
          s(:send, nil, :assert_same,
            s(:ivar, :@store),
            s(:send,
              s(:send,
                s(:lvar, :e), :file), :store)),
          s(:lvasgn, :m,
            s(:send,
              s(:send,
                s(:lvar, :loaded), :method_list), :first)),
          s(:send, nil, :assert_same,
            s(:ivar, :@store),
            s(:send,
              s(:lvar, :m), :store)),
          s(:send, nil, :assert_same,
            s(:ivar, :@store),
            s(:send,
              s(:send,
                s(:lvar, :m), :file), :store)))),
      s(:def, :test_superclass,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:ivar, :@c3_h1),
          s(:send,
            s(:ivar, :@c3_h2), :superclass))),
      s(:def, :test_update_aliases_class,
        s(:args),
        s(:begin,
          s(:lvasgn, :n1,
            s(:send,
              s(:ivar, :@xref_data), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "N1"))),
          s(:lvasgn, :n1_k2,
            s(:send,
              s(:lvar, :n1), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "N2"))),
          s(:send,
            s(:lvar, :n1), :add_module_alias,
            s(:lvar, :n1_k2),
            s(:str, "A1"),
            s(:ivar, :@xref_data)),
          s(:lvasgn, :n1_a1_c,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :n1), :constants), :find),
              s(:args,
                s(:arg, :c)),
              s(:send,
                s(:send,
                  s(:lvar, :c), :name), :==,
                s(:str, "A1")))),
          s(:send, nil, :refute_nil,
            s(:lvar, :n1_a1_c)),
          s(:send, nil, :assert_equal,
            s(:lvar, :n1_k2),
            s(:send,
              s(:lvar, :n1_a1_c), :is_alias_for),
            s(:str, "sanity check")),
          s(:send,
            s(:lvar, :n1), :update_aliases),
          s(:lvasgn, :n1_a1_k,
            s(:send,
              s(:ivar, :@xref_data), :find_class_or_module,
              s(:str, "N1::A1"))),
          s(:send, nil, :refute_nil,
            s(:lvar, :n1_a1_k)),
          s(:send, nil, :assert_equal,
            s(:lvar, :n1_k2),
            s(:send,
              s(:lvar, :n1_a1_k), :is_alias_for)),
          s(:send, nil, :refute_equal,
            s(:lvar, :n1_k2),
            s(:lvar, :n1_a1_k)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:lvar, :n1_k2), :aliases), :length)),
          s(:send, nil, :assert_equal,
            s(:lvar, :n1_a1_k),
            s(:send,
              s(:send,
                s(:lvar, :n1_k2), :aliases), :first)),
          s(:send, nil, :assert_equal,
            s(:str, "N1::N2"),
            s(:send,
              s(:lvar, :n1_k2), :full_name)),
          s(:send, nil, :assert_equal,
            s(:str, "N1::A1"),
            s(:send,
              s(:lvar, :n1_a1_k), :full_name)))),
      s(:def, :test_update_aliases_module,
        s(:args),
        s(:begin,
          s(:lvasgn, :n1,
            s(:send,
              s(:ivar, :@xref_data), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "N1"))),
          s(:lvasgn, :n1_n2,
            s(:send,
              s(:lvar, :n1), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "N2"))),
          s(:send,
            s(:lvar, :n1), :add_module_alias,
            s(:lvar, :n1_n2),
            s(:str, "A1"),
            s(:ivar, :@xref_data)),
          s(:lvasgn, :n1_a1_c,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :n1), :constants), :find),
              s(:args,
                s(:arg, :c)),
              s(:send,
                s(:send,
                  s(:lvar, :c), :name), :==,
                s(:str, "A1")))),
          s(:send, nil, :refute_nil,
            s(:lvar, :n1_a1_c)),
          s(:send, nil, :assert_equal,
            s(:lvar, :n1_n2),
            s(:send,
              s(:lvar, :n1_a1_c), :is_alias_for),
            s(:str, "sanity check")),
          s(:send,
            s(:lvar, :n1), :update_aliases),
          s(:lvasgn, :n1_a1_m,
            s(:send,
              s(:ivar, :@xref_data), :find_class_or_module,
              s(:str, "N1::A1"))),
          s(:send, nil, :refute_nil,
            s(:lvar, :n1_a1_m)),
          s(:send, nil, :assert_equal,
            s(:lvar, :n1_n2),
            s(:send,
              s(:lvar, :n1_a1_m), :is_alias_for)),
          s(:send, nil, :refute_equal,
            s(:lvar, :n1_n2),
            s(:lvar, :n1_a1_m)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:lvar, :n1_n2), :aliases), :length)),
          s(:send, nil, :assert_equal,
            s(:lvar, :n1_a1_m),
            s(:send,
              s(:send,
                s(:lvar, :n1_n2), :aliases), :first)),
          s(:send, nil, :assert_equal,
            s(:str, "N1::N2"),
            s(:send,
              s(:lvar, :n1_n2), :full_name)),
          s(:send, nil, :assert_equal,
            s(:str, "N1::A1"),
            s(:send,
              s(:lvar, :n1_a1_m), :full_name)))),
      s(:def, :test_update_aliases_reparent,
        s(:args),
        s(:begin,
          s(:lvasgn, :l1,
            s(:send,
              s(:ivar, :@xref_data), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "L1"))),
          s(:lvasgn, :l1_l2,
            s(:send,
              s(:lvar, :l1), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "L2"))),
          s(:lvasgn, :o1,
            s(:send,
              s(:ivar, :@xref_data), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "O1"))),
          s(:send,
            s(:lvar, :o1), :add_module_alias,
            s(:lvar, :l1_l2),
            s(:str, "A1"),
            s(:ivar, :@xref_data)),
          s(:lvasgn, :o1_a1_c,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :o1), :constants), :find),
              s(:args,
                s(:arg, :c)),
              s(:send,
                s(:send,
                  s(:lvar, :c), :name), :==,
                s(:str, "A1")))),
          s(:send, nil, :refute_nil,
            s(:lvar, :o1_a1_c)),
          s(:send, nil, :assert_equal,
            s(:lvar, :l1_l2),
            s(:send,
              s(:lvar, :o1_a1_c), :is_alias_for)),
          s(:send, nil, :refute_equal,
            s(:lvar, :l1_l2),
            s(:lvar, :o1_a1_c)),
          s(:send,
            s(:lvar, :o1), :update_aliases),
          s(:lvasgn, :o1_a1_m,
            s(:send,
              s(:ivar, :@xref_data), :find_class_or_module,
              s(:str, "O1::A1"))),
          s(:send, nil, :refute_nil,
            s(:lvar, :o1_a1_m)),
          s(:send, nil, :assert_equal,
            s(:lvar, :l1_l2),
            s(:send,
              s(:lvar, :o1_a1_m), :is_alias_for)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:lvar, :l1_l2), :aliases), :length)),
          s(:send, nil, :assert_equal,
            s(:lvar, :o1_a1_m),
            s(:send,
              s(:send,
                s(:lvar, :l1_l2), :aliases), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "L1::L2"),
            s(:send,
              s(:lvar, :l1_l2), :full_name)),
          s(:send, nil, :assert_equal,
            s(:str, "O1::A1"),
            s(:send,
              s(:lvar, :o1_a1_m), :full_name)))),
      s(:def, :test_update_aliases_reparent_root,
        s(:args),
        s(:begin,
          s(:lvasgn, :store,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:lvasgn, :top_level,
            s(:send,
              s(:lvar, :store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :klass,
            s(:send,
              s(:lvar, :top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"))),
          s(:lvasgn, :object,
            s(:send,
              s(:lvar, :top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Object"))),
          s(:lvasgn, :const,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "A"),
              s(:nil),
              s(:str, ""))),
          s(:send,
            s(:lvar, :const), :record_location,
            s(:lvar, :top_level)),
          s(:send,
            s(:lvar, :const), :is_alias_for=,
            s(:lvar, :klass)),
          s(:send,
            s(:lvar, :top_level), :add_module_alias,
            s(:lvar, :klass),
            s(:str, "A"),
            s(:lvar, :top_level)),
          s(:send,
            s(:lvar, :object), :add_constant,
            s(:lvar, :const)),
          s(:send,
            s(:lvar, :object), :update_aliases),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "A"),
              s(:str, "Klass"),
              s(:str, "Object")),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :store), :classes_hash), :keys), :sort)),
          s(:send, nil, :assert_equal,
            s(:str, "A"),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :store), :classes_hash), :[],
                s(:str, "A")), :full_name)),
          s(:send, nil, :assert_equal,
            s(:str, "Klass"),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :store), :classes_hash), :[],
                s(:str, "Klass")), :full_name)))),
      s(:def, :test_update_includes,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "M1"),
              s(:nil))),
          s(:lvasgn, :b,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "M2"),
              s(:nil))),
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "C"),
              s(:nil))),
          s(:send,
            s(:ivar, :@c1), :add_include,
            s(:lvar, :a)),
          s(:send,
            s(:ivar, :@c1), :add_include,
            s(:lvar, :b)),
          s(:send,
            s(:ivar, :@c1), :add_include,
            s(:lvar, :c)),
          s(:send,
            s(:ivar, :@c1), :ancestors),
          s(:send,
            s(:ivar, :@m1_m2), :document_self=,
            s(:nil)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@m1_m2), :remove_from_documentation?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@store), :modules_hash), :key?,
              s(:send,
                s(:ivar, :@m1_m2), :full_name))),
          s(:send, nil, :refute,
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@store), :modules_hash), :[],
                s(:send,
                  s(:ivar, :@m1_m2), :full_name)), :nil?)),
          s(:send,
            s(:ivar, :@store), :remove_nodoc,
            s(:send,
              s(:ivar, :@store), :modules_hash)),
          s(:send, nil, :refute,
            s(:send,
              s(:send,
                s(:ivar, :@store), :modules_hash), :key?,
              s(:send,
                s(:ivar, :@m1_m2), :full_name))),
          s(:send,
            s(:ivar, :@c1), :update_includes),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :a),
              s(:lvar, :c)),
            s(:send,
              s(:ivar, :@c1), :includes)))),
      s(:def, :test_update_includes_trim,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "D::M"),
              s(:nil))),
          s(:lvasgn, :b,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "D::M"),
              s(:nil))),
          s(:send,
            s(:ivar, :@c1), :add_include,
            s(:lvar, :a)),
          s(:send,
            s(:ivar, :@c1), :add_include,
            s(:lvar, :b)),
          s(:send,
            s(:ivar, :@c1), :ancestors),
          s(:send,
            s(:ivar, :@c1), :update_includes),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :a)),
            s(:send,
              s(:ivar, :@c1), :includes)))),
      s(:def, :test_update_includes_with_colons,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "M1"),
              s(:nil))),
          s(:lvasgn, :b,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "M1::M2"),
              s(:nil))),
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "C"),
              s(:nil))),
          s(:send,
            s(:ivar, :@c1), :add_include,
            s(:lvar, :a)),
          s(:send,
            s(:ivar, :@c1), :add_include,
            s(:lvar, :b)),
          s(:send,
            s(:ivar, :@c1), :add_include,
            s(:lvar, :c)),
          s(:send,
            s(:ivar, :@c1), :ancestors),
          s(:send,
            s(:ivar, :@m1_m2), :document_self=,
            s(:nil)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@m1_m2), :remove_from_documentation?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@store), :modules_hash), :key?,
              s(:send,
                s(:ivar, :@m1_m2), :full_name))),
          s(:send, nil, :refute,
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@store), :modules_hash), :[],
                s(:send,
                  s(:ivar, :@m1_m2), :full_name)), :nil?)),
          s(:send,
            s(:ivar, :@store), :remove_nodoc,
            s(:send,
              s(:ivar, :@store), :modules_hash)),
          s(:send, nil, :refute,
            s(:send,
              s(:send,
                s(:ivar, :@store), :modules_hash), :key?,
              s(:send,
                s(:ivar, :@m1_m2), :full_name))),
          s(:send,
            s(:ivar, :@c1), :update_includes),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :a),
              s(:lvar, :c)),
            s(:send,
              s(:ivar, :@c1), :includes)))),
      s(:def, :test_update_extends,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Extend), :new,
              s(:str, "M1"),
              s(:nil))),
          s(:lvasgn, :b,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Extend), :new,
              s(:str, "M2"),
              s(:nil))),
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Extend), :new,
              s(:str, "C"),
              s(:nil))),
          s(:send,
            s(:ivar, :@c1), :add_extend,
            s(:lvar, :a)),
          s(:send,
            s(:ivar, :@c1), :add_extend,
            s(:lvar, :b)),
          s(:send,
            s(:ivar, :@c1), :add_extend,
            s(:lvar, :c)),
          s(:block,
            s(:send,
              s(:ivar, :@c1), :each_extend),
            s(:args,
              s(:arg, :extend)),
            s(:send,
              s(:lvar, :extend), :module)),
          s(:send,
            s(:ivar, :@m1_m2), :document_self=,
            s(:nil)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@m1_m2), :remove_from_documentation?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@store), :modules_hash), :key?,
              s(:send,
                s(:ivar, :@m1_m2), :full_name))),
          s(:send, nil, :refute,
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@store), :modules_hash), :[],
                s(:send,
                  s(:ivar, :@m1_m2), :full_name)), :nil?)),
          s(:send,
            s(:ivar, :@store), :remove_nodoc,
            s(:send,
              s(:ivar, :@store), :modules_hash)),
          s(:send, nil, :refute,
            s(:send,
              s(:send,
                s(:ivar, :@store), :modules_hash), :key?,
              s(:send,
                s(:ivar, :@m1_m2), :full_name))),
          s(:send,
            s(:ivar, :@c1), :update_extends),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:lvar, :c)),
            s(:send,
              s(:ivar, :@c1), :extends)))),
      s(:def, :test_update_extends_trim,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Extend), :new,
              s(:str, "D::M"),
              s(:nil))),
          s(:lvasgn, :b,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Extend), :new,
              s(:str, "D::M"),
              s(:nil))),
          s(:send,
            s(:ivar, :@c1), :add_extend,
            s(:lvar, :a)),
          s(:send,
            s(:ivar, :@c1), :add_extend,
            s(:lvar, :b)),
          s(:block,
            s(:send,
              s(:ivar, :@c1), :each_extend),
            s(:args,
              s(:arg, :extend)),
            s(:send,
              s(:lvar, :extend), :module)),
          s(:send,
            s(:ivar, :@c1), :update_extends),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :a)),
            s(:send,
              s(:ivar, :@c1), :extends)))),
      s(:def, :test_update_extends_with_colons,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Extend), :new,
              s(:str, "M1"),
              s(:nil))),
          s(:lvasgn, :b,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Extend), :new,
              s(:str, "M1::M2"),
              s(:nil))),
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Extend), :new,
              s(:str, "C"),
              s(:nil))),
          s(:send,
            s(:ivar, :@c1), :add_extend,
            s(:lvar, :a)),
          s(:send,
            s(:ivar, :@c1), :add_extend,
            s(:lvar, :b)),
          s(:send,
            s(:ivar, :@c1), :add_extend,
            s(:lvar, :c)),
          s(:block,
            s(:send,
              s(:ivar, :@c1), :each_extend),
            s(:args,
              s(:arg, :extend)),
            s(:send,
              s(:lvar, :extend), :module)),
          s(:send,
            s(:ivar, :@m1_m2), :document_self=,
            s(:nil)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@m1_m2), :remove_from_documentation?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@store), :modules_hash), :key?,
              s(:send,
                s(:ivar, :@m1_m2), :full_name))),
          s(:send, nil, :refute,
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@store), :modules_hash), :[],
                s(:send,
                  s(:ivar, :@m1_m2), :full_name)), :nil?)),
          s(:send,
            s(:ivar, :@store), :remove_nodoc,
            s(:send,
              s(:ivar, :@store), :modules_hash)),
          s(:send, nil, :refute,
            s(:send,
              s(:send,
                s(:ivar, :@store), :modules_hash), :key?,
              s(:send,
                s(:ivar, :@m1_m2), :full_name))),
          s(:send,
            s(:ivar, :@c1), :update_extends),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :a),
              s(:lvar, :c)),
            s(:send,
              s(:ivar, :@c1), :extends)))))))
