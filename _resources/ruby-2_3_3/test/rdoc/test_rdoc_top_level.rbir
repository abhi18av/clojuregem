s(:begin,
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:str, "../xref_test_case"),
      s(:str, "(string)"))),
  s(:class,
    s(:const, nil, :TestRDocTopLevel),
    s(:const, nil, :XrefTestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "path/top_level.rb"))),
          s(:send,
            s(:ivar, :@top_level), :parser=,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Parser), :Ruby)))),
      s(:def, :test_initialize,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :TopLevel), :new,
              s(:str, "path/file.rb"))),
          s(:send, nil, :assert_equal,
            s(:str, "path/file.rb"),
            s(:send,
              s(:lvar, :t), :absolute_name)),
          s(:send, nil, :assert_equal,
            s(:str, "path/file.rb"),
            s(:send,
              s(:lvar, :t), :relative_name)))),
      s(:def, :test_initialize_relative,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :TopLevel), :new,
              s(:str, "path/file.rb"),
              s(:str, "file.rb"))),
          s(:send, nil, :assert_equal,
            s(:str, "path/file.rb"),
            s(:send,
              s(:lvar, :t), :absolute_name)),
          s(:send, nil, :assert_equal,
            s(:str, "file.rb"),
            s(:send,
              s(:lvar, :t), :relative_name)))),
      s(:def, :test_add_alias,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Alias), :new,
              s(:nil),
              s(:str, "old"),
              s(:str, "new"),
              s(:nil))),
          s(:send,
            s(:ivar, :@top_level), :add_alias,
            s(:lvar, :a)),
          s(:lvasgn, :object,
            s(:send,
              s(:ivar, :@store), :find_class_named,
              s(:str, "Object"))),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:str, "#old"),
                s(:array,
                  s(:lvar, :a))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :object), :unmatched_alias_lists)),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:lvar, :object), :in_files),
            s(:ivar, :@top_level)))),
      s(:def, :test_add_alias_nodoc,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@top_level), :document_self=,
            s(:false)),
          s(:lvasgn, :a,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Alias), :new,
              s(:nil),
              s(:str, "old"),
              s(:str, "new"),
              s(:nil))),
          s(:send,
            s(:ivar, :@top_level), :add_alias,
            s(:lvar, :a)),
          s(:lvasgn, :object,
            s(:send,
              s(:ivar, :@store), :find_class_named,
              s(:str, "Object"))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :object), :unmatched_alias_lists)),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:lvar, :object), :in_files),
            s(:ivar, :@top_level)))),
      s(:def, :test_add_constant,
        s(:args),
        s(:begin,
          s(:lvasgn, :const,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "C"),
              s(:nil),
              s(:nil))),
          s(:send,
            s(:ivar, :@top_level), :add_constant,
            s(:lvar, :const)),
          s(:lvasgn, :object,
            s(:send,
              s(:ivar, :@store), :find_class_named,
              s(:str, "Object"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :const)),
            s(:send,
              s(:lvar, :object), :constants)),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:lvar, :object), :in_files),
            s(:ivar, :@top_level)))),
      s(:def, :test_add_constant_nodoc,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@top_level), :document_self=,
            s(:false)),
          s(:lvasgn, :const,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "C"),
              s(:nil),
              s(:nil))),
          s(:send,
            s(:ivar, :@top_level), :add_constant,
            s(:lvar, :const)),
          s(:lvasgn, :object,
            s(:send,
              s(:ivar, :@store), :find_class_named,
              s(:str, "Object"))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :object), :constants)),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:lvar, :object), :in_files),
            s(:ivar, :@top_level)))),
      s(:def, :test_add_include,
        s(:args),
        s(:begin,
          s(:lvasgn, :include,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "C"),
              s(:nil))),
          s(:send,
            s(:ivar, :@top_level), :add_include,
            s(:lvar, :include)),
          s(:lvasgn, :object,
            s(:send,
              s(:ivar, :@store), :find_class_named,
              s(:str, "Object"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :include)),
            s(:send,
              s(:lvar, :object), :includes)),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:lvar, :object), :in_files),
            s(:ivar, :@top_level)))),
      s(:def, :test_add_include_nodoc,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@top_level), :document_self=,
            s(:false)),
          s(:lvasgn, :include,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "C"),
              s(:nil))),
          s(:send,
            s(:ivar, :@top_level), :add_include,
            s(:lvar, :include)),
          s(:lvasgn, :object,
            s(:send,
              s(:ivar, :@store), :find_class_named,
              s(:str, "Object"))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :object), :includes)),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:lvar, :object), :in_files),
            s(:ivar, :@top_level)))),
      s(:def, :test_add_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :method,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:ivar, :@top_level), :add_method,
            s(:lvar, :method)),
          s(:lvasgn, :object,
            s(:send,
              s(:ivar, :@store), :find_class_named,
              s(:str, "Object"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :method)),
            s(:send,
              s(:lvar, :object), :method_list)),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:lvar, :object), :in_files),
            s(:ivar, :@top_level)))),
      s(:def, :test_add_method_stopdoc,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@top_level), :document_self=,
            s(:false)),
          s(:lvasgn, :method,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:ivar, :@top_level), :add_method,
            s(:lvar, :method)),
          s(:lvasgn, :object,
            s(:send,
              s(:ivar, :@store), :find_class_named,
              s(:str, "Object"))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :object), :method_list)),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:lvar, :object), :in_files),
            s(:ivar, :@top_level)))),
      s(:def, :test_base_name,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "top_level.rb"),
          s(:send,
            s(:ivar, :@top_level), :base_name))),
      s(:def, :test_display_eh,
        s(:args),
        s(:begin,
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@top_level), :display?)),
          s(:lvasgn, :page,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "README.txt"))),
          s(:send,
            s(:lvar, :page), :parser=,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Parser), :Simple)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :page), :display?)))),
      s(:def, :test_eql_eh,
        s(:args),
        s(:begin,
          s(:lvasgn, :top_level2,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "path/top_level.rb"))),
          s(:lvasgn, :other_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "path/other_level.rb"))),
          s(:send, nil, :assert_operator,
            s(:ivar, :@top_level),
            s(:sym, :eql?),
            s(:lvar, :top_level2)),
          s(:send, nil, :refute_operator,
            s(:lvar, :other_level),
            s(:sym, :eql?),
            s(:ivar, :@top_level)))),
      s(:def, :test_equals2,
        s(:args),
        s(:begin,
          s(:lvasgn, :top_level2,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "path/top_level.rb"))),
          s(:lvasgn, :other_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "path/other_level.rb"))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@top_level),
            s(:lvar, :top_level2)),
          s(:send, nil, :refute_equal,
            s(:lvar, :other_level),
            s(:ivar, :@top_level)))),
      s(:def, :test_find_class_or_module,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:ivar, :@c1),
            s(:send,
              s(:ivar, :@xref_data), :find_class_or_module,
              s(:str, "C1"))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@c2_c3),
            s(:send,
              s(:ivar, :@xref_data), :find_class_or_module,
              s(:str, "C2::C3"))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@c4),
            s(:send,
              s(:ivar, :@xref_data), :find_class_or_module,
              s(:str, "C4"))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@m1_m2),
            s(:send,
              s(:ivar, :@xref_data), :find_class_or_module,
              s(:str, "M1::M2"))))),
      s(:def, :test_full_name,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "path/top_level.rb"),
          s(:send,
            s(:ivar, :@top_level), :full_name))),
      s(:def, :test_hash,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl2,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "path/top_level.rb"))),
          s(:lvasgn, :tl3,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "other/top_level.rb"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@top_level), :hash),
            s(:send,
              s(:lvar, :tl2), :hash)),
          s(:send, nil, :refute_equal,
            s(:send,
              s(:ivar, :@top_level), :hash),
            s(:send,
              s(:lvar, :tl3), :hash)))),
      s(:def, :test_http_url,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "prefix/path/top_level_rb.html"),
          s(:send,
            s(:ivar, :@top_level), :http_url,
            s(:str, "prefix")))),
      s(:def, :test_last_modified,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@top_level), :last_modified)),
          s(:lvasgn, :stat,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :stat), :mtime,
            s(:args),
            s(:int, 0)),
          s(:send,
            s(:ivar, :@top_level), :file_stat=,
            s(:lvar, :stat)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@top_level), :last_modified)))),
      s(:def, :test_marshal_dump,
        s(:args),
        s(:begin,
          s(:lvasgn, :page,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "README.txt"))),
          s(:send,
            s(:lvar, :page), :parser=,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Parser), :Simple)),
          s(:send,
            s(:lvar, :page), :comment=,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Comment), :new,
              s(:str, "This is a page"),
              s(:lvar, :page))),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:lvar, :page)))),
          s(:lvasgn, :comment,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
                s(:str, "This is a page")))),
          s(:send,
            s(:lvar, :comment), :file=,
            s(:lvar, :loaded)),
          s(:send, nil, :assert_equal,
            s(:lvar, :page),
            s(:lvar, :loaded)),
          s(:send, nil, :assert_equal,
            s(:str, "README.txt"),
            s(:send,
              s(:lvar, :loaded), :absolute_name)),
          s(:send, nil, :assert_equal,
            s(:str, "README.txt"),
            s(:send,
              s(:lvar, :loaded), :relative_name)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Parser), :Simple),
            s(:send,
              s(:lvar, :loaded), :parser)),
          s(:send, nil, :assert_equal,
            s(:lvar, :comment),
            s(:send,
              s(:lvar, :loaded), :comment)))),
      s(:def, :test_marshal_load_version_0,
        s(:args),
        s(:begin,
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:str, "\u0004\bU:\u0013RDoc::TopLevel"), :+,
                        s(:str, "[\ti\u0000I\"\u000FREADME.txt\u0006:\u0006EF")), :+,
                      s(:str, "c\u0019RDoc::Parser::Simple")), :+,
                    s(:str, "o:\eRDoc::Markup::Document\a:\v@parts")), :+,
                  s(:str, "[\u0006o:\u001CRDoc::Markup::Paragraph\u0006;\b")), :+,
                s(:str, "[\u0006I\"\u0013This is a page\u0006;\u0006F:\n@file@\a")))),
          s(:lvasgn, :comment,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
                s(:str, "This is a page")))),
          s(:send,
            s(:lvar, :comment), :file=,
            s(:lvar, :loaded)),
          s(:send, nil, :assert_equal,
            s(:str, "README.txt"),
            s(:send,
              s(:lvar, :loaded), :absolute_name)),
          s(:send, nil, :assert_equal,
            s(:str, "README.txt"),
            s(:send,
              s(:lvar, :loaded), :relative_name)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Parser), :Simple),
            s(:send,
              s(:lvar, :loaded), :parser)),
          s(:send, nil, :assert_equal,
            s(:lvar, :comment),
            s(:send,
              s(:lvar, :loaded), :comment)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :loaded), :display?)))),
      s(:def, :test_name,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "top_level.rb"),
          s(:send,
            s(:ivar, :@top_level), :name))),
      s(:def, :test_page_name,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "top_level"),
            s(:send,
              s(:ivar, :@top_level), :page_name)),
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "README.ja"))),
          s(:send, nil, :assert_equal,
            s(:str, "README.ja"),
            s(:send,
              s(:lvar, :tl), :page_name)),
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "Rakefile"))),
          s(:send, nil, :assert_equal,
            s(:str, "Rakefile"),
            s(:send,
              s(:lvar, :tl), :page_name)))),
      s(:def, :test_page_name_trim_extension,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "README.ja.rdoc"))),
          s(:send, nil, :assert_equal,
            s(:str, "README.ja"),
            s(:send,
              s(:lvar, :tl), :page_name)),
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "README.ja.md"))),
          s(:send, nil, :assert_equal,
            s(:str, "README.ja"),
            s(:send,
              s(:lvar, :tl), :page_name)),
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "README.txt"))),
          s(:send, nil, :assert_equal,
            s(:str, "README"),
            s(:send,
              s(:lvar, :tl), :page_name)))),
      s(:def, :test_search_record,
        s(:args),
        s(:send, nil, :assert_nil,
          s(:send,
            s(:ivar, :@xref_data), :search_record))),
      s(:def, :test_search_record_page,
        s(:args),
        s(:begin,
          s(:lvasgn, :page,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "README.txt"))),
          s(:send,
            s(:lvar, :page), :parser=,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Parser), :Simple)),
          s(:send,
            s(:lvar, :page), :comment=,
            s(:str, "This is a comment.")),
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "README"),
              s(:str, ""),
              s(:str, "README"),
              s(:str, ""),
              s(:str, "README_txt.html"),
              s(:str, ""),
              s(:str, "<p>This is a comment.\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :page), :search_record)))),
      s(:def, :test_text_eh,
        s(:args),
        s(:begin,
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@xref_data), :text?)),
          s(:lvasgn, :rd,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "rd_format.rd"))),
          s(:send,
            s(:lvar, :rd), :parser=,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Parser), :RD)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :rd), :text?)),
          s(:lvasgn, :simple,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "simple.txt"))),
          s(:send,
            s(:lvar, :simple), :parser=,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Parser), :Simple)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :simple), :text?)))),
      s(:def, :test_text_eh_no_parser,
        s(:args),
        s(:begin,
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@xref_data), :text?)),
          s(:lvasgn, :rd,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "rd_format.rd"))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :rd), :text?)))))))
