s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocMarkupToJoinedParagraph),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@to,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :ToJoinedParagraph), :new)))),
      s(:def, :test_accept_paragraph,
        s(:args),
        s(:begin,
          s(:lvasgn, :parsed,
            s(:send, nil, :para,
              s(:str, "hello"),
              s(:str, " "),
              s(:str, "world"))),
          s(:send,
            s(:ivar, :@to), :accept_paragraph,
            s(:lvar, :parsed)),
          s(:lvasgn, :expected,
            s(:send, nil, :para,
              s(:str, "hello world"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :parsed)))),
      s(:def, :test_accept_paragraph_break,
        s(:args),
        s(:begin,
          s(:lvasgn, :parsed,
            s(:send, nil, :para,
              s(:str, "hello"),
              s(:str, " "),
              s(:str, "world"),
              s(:send, nil, :hard_break),
              s(:str, "everyone"))),
          s(:send,
            s(:ivar, :@to), :accept_paragraph,
            s(:lvar, :parsed)),
          s(:lvasgn, :expected,
            s(:send, nil, :para,
              s(:str, "hello world"),
              s(:send, nil, :hard_break),
              s(:str, "everyone"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :parsed)))))))
