s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocMarkupFormatter),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:class,
        s(:const, nil, :ToTest),
        s(:const,
          s(:const,
            s(:const, nil, :RDoc), :Markup), :Formatter),
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :markup)),
            s(:begin,
              s(:super,
                s(:nil),
                s(:lvar, :markup)),
              s(:send, nil, :add_tag,
                s(:sym, :TT),
                s(:str, "<code>"),
                s(:str, "</code>")))),
          s(:def, :accept_paragraph,
            s(:args,
              s(:arg, :paragraph)),
            s(:send,
              s(:ivar, :@res), :<<,
              s(:send, nil, :attributes,
                s(:send,
                  s(:lvar, :paragraph), :text)))),
          s(:def, :attributes,
            s(:args,
              s(:arg, :text)),
            s(:send, nil, :convert_flow,
              s(:send,
                s(:ivar, :@am), :flow,
                s(:send,
                  s(:lvar, :text), :dup)))),
          s(:def, :handle_special_CAPS,
            s(:args,
              s(:arg, :special)),
            s(:dstr,
              s(:str, "handled "),
              s(:begin,
                s(:send,
                  s(:lvar, :special), :text)))),
          s(:def, :start_accepting,
            s(:args),
            s(:ivasgn, :@res,
              s(:str, ""))),
          s(:def, :end_accepting,
            s(:args),
            s(:ivar, :@res)))),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@markup,
            s(:send,
              s(:ivar, :@RM), :new)),
          s(:send,
            s(:ivar, :@markup), :add_special,
            s(:regexp,
              s(:str, "[A-Z]+"),
              s(:regopt)),
            s(:sym, :CAPS)),
          s(:ivasgn, :@attribute_manager,
            s(:send,
              s(:ivar, :@markup), :attribute_manager)),
          s(:ivasgn, :@attributes,
            s(:send,
              s(:ivar, :@attribute_manager), :attributes)),
          s(:ivasgn, :@to,
            s(:send,
              s(:const, nil, :ToTest), :new,
              s(:ivar, :@markup))),
          s(:ivasgn, :@caps,
            s(:send,
              s(:ivar, :@attributes), :bitmap_for,
              s(:sym, :CAPS))),
          s(:ivasgn, :@special,
            s(:send,
              s(:ivar, :@attributes), :bitmap_for,
              s(:sym, :_SPECIAL_))),
          s(:ivasgn, :@tt,
            s(:send,
              s(:ivar, :@attributes), :bitmap_for,
              s(:sym, :TT))))),
      s(:def, :test_class_gen_relative_url,
        s(:args),
        s(:begin,
          s(:def, :gen,
            s(:args,
              s(:arg, :from),
              s(:arg, :to)),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :ToHtml), :gen_relative_url,
              s(:lvar, :from),
              s(:lvar, :to))),
          s(:send, nil, :assert_equal,
            s(:str, "a.html"),
            s(:send, nil, :gen,
              s(:str, "a.html"),
              s(:str, "a.html"))),
          s(:send, nil, :assert_equal,
            s(:str, "b.html"),
            s(:send, nil, :gen,
              s(:str, "a.html"),
              s(:str, "b.html"))),
          s(:send, nil, :assert_equal,
            s(:str, "d.html"),
            s(:send, nil, :gen,
              s(:str, "a/c.html"),
              s(:str, "a/d.html"))),
          s(:send, nil, :assert_equal,
            s(:str, "../a.html"),
            s(:send, nil, :gen,
              s(:str, "a/c.html"),
              s(:str, "a.html"))),
          s(:send, nil, :assert_equal,
            s(:str, "a/c.html"),
            s(:send, nil, :gen,
              s(:str, "a.html"),
              s(:str, "a/c.html"))))),
      s(:def, :special_names,
        s(:args),
        s(:block,
          s(:send,
            s(:send,
              s(:ivar, :@attribute_manager), :special), :map),
          s(:args,
            s(:arg, :_),
            s(:arg, :mask)),
          s(:send,
            s(:ivar, :@attributes), :as_string,
            s(:lvar, :mask)))),
      s(:def, :test_add_special_RDOCLINK,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@to), :add_special_RDOCLINK),
          s(:send, nil, :assert_includes,
            s(:send, nil, :special_names),
            s(:str, "RDOCLINK")),
          s(:defs,
            s(:ivar, :@to), :handle_special_RDOCLINK,
            s(:args,
              s(:arg, :special)),
            s(:dstr,
              s(:str, "<"),
              s(:begin,
                s(:send,
                  s(:lvar, :special), :text)),
              s(:str, ">"))),
          s(:lvasgn, :document,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "{foo}[rdoc-label:bar].")))),
          s(:lvasgn, :formatted,
            s(:send,
              s(:lvar, :document), :accept,
              s(:ivar, :@to))),
          s(:send, nil, :assert_equal,
            s(:str, "{foo}[<rdoc-label:bar>]."),
            s(:lvar, :formatted)))),
      s(:def, :test_add_special_TIDYLINK,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@to), :add_special_TIDYLINK),
          s(:send, nil, :assert_includes,
            s(:send, nil, :special_names),
            s(:str, "TIDYLINK")),
          s(:defs,
            s(:ivar, :@to), :handle_special_TIDYLINK,
            s(:args,
              s(:arg, :special)),
            s(:dstr,
              s(:str, "<"),
              s(:begin,
                s(:send,
                  s(:lvar, :special), :text)),
              s(:str, ">"))),
          s(:lvasgn, :document,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "foo[rdoc-label:bar].")))),
          s(:lvasgn, :formatted,
            s(:send,
              s(:lvar, :document), :accept,
              s(:ivar, :@to))),
          s(:send, nil, :assert_equal,
            s(:str, "<foo[rdoc-label:bar]>."),
            s(:lvar, :formatted)),
          s(:lvasgn, :document,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "{foo}[rdoc-label:bar].")))),
          s(:lvasgn, :formatted,
            s(:send,
              s(:lvar, :document), :accept,
              s(:ivar, :@to))),
          s(:send, nil, :assert_equal,
            s(:str, "<{foo}[rdoc-label:bar]>."),
            s(:lvar, :formatted)))),
      s(:def, :test_parse_url,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :scheme),
              s(:lvasgn, :url),
              s(:lvasgn, :id)),
            s(:send,
              s(:ivar, :@to), :parse_url,
              s(:str, "example/foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "http"),
            s(:lvar, :scheme)),
          s(:send, nil, :assert_equal,
            s(:str, "example/foo"),
            s(:lvar, :url)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:lvar, :id)))),
      s(:def, :test_parse_url_anchor,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :scheme),
              s(:lvasgn, :url),
              s(:lvasgn, :id)),
            s(:send,
              s(:ivar, :@to), :parse_url,
              s(:str, "#foottext-1"))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:lvar, :scheme)),
          s(:send, nil, :assert_equal,
            s(:str, "#foottext-1"),
            s(:lvar, :url)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:lvar, :id)))),
      s(:def, :test_parse_url_link,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :scheme),
              s(:lvasgn, :url),
              s(:lvasgn, :id)),
            s(:send,
              s(:ivar, :@to), :parse_url,
              s(:str, "link:README.txt"))),
          s(:send, nil, :assert_equal,
            s(:str, "link"),
            s(:lvar, :scheme)),
          s(:send, nil, :assert_equal,
            s(:str, "README.txt"),
            s(:lvar, :url)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:lvar, :id)))),
      s(:def, :test_parse_url_link_id,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :scheme),
              s(:lvasgn, :url),
              s(:lvasgn, :id)),
            s(:send,
              s(:ivar, :@to), :parse_url,
              s(:str, "link:README.txt#label-foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "link"),
            s(:lvar, :scheme)),
          s(:send, nil, :assert_equal,
            s(:str, "README.txt#label-foo"),
            s(:lvar, :url)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:lvar, :id)))),
      s(:def, :test_parse_url_rdoc_label,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :scheme),
              s(:lvasgn, :url),
              s(:lvasgn, :id)),
            s(:send,
              s(:ivar, :@to), :parse_url,
              s(:str, "rdoc-label:foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "link"),
            s(:lvar, :scheme)),
          s(:send, nil, :assert_equal,
            s(:str, "#foo"),
            s(:lvar, :url)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:lvar, :id)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :scheme),
              s(:lvasgn, :url),
              s(:lvasgn, :id)),
            s(:send,
              s(:ivar, :@to), :parse_url,
              s(:str, "rdoc-label:foo:bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "link"),
            s(:lvar, :scheme)),
          s(:send, nil, :assert_equal,
            s(:str, "#foo"),
            s(:lvar, :url)),
          s(:send, nil, :assert_equal,
            s(:str, " id=\"bar\""),
            s(:lvar, :id)))),
      s(:def, :test_parse_url_scheme,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :scheme),
              s(:lvasgn, :url),
              s(:lvasgn, :id)),
            s(:send,
              s(:ivar, :@to), :parse_url,
              s(:str, "http://example/foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "http"),
            s(:lvar, :scheme)),
          s(:send, nil, :assert_equal,
            s(:str, "http://example/foo"),
            s(:lvar, :url)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:lvar, :id)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :scheme),
              s(:lvasgn, :url),
              s(:lvasgn, :id)),
            s(:send,
              s(:ivar, :@to), :parse_url,
              s(:str, "https://example/foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "https"),
            s(:lvar, :scheme)),
          s(:send, nil, :assert_equal,
            s(:str, "https://example/foo"),
            s(:lvar, :url)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:lvar, :id)))),
      s(:def, :test_convert_tt_special,
        s(:args),
        s(:begin,
          s(:lvasgn, :converted,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "<code>AAA</code>"))),
          s(:send, nil, :assert_equal,
            s(:str, "<code>AAA</code>"),
            s(:lvar, :converted)))))))
