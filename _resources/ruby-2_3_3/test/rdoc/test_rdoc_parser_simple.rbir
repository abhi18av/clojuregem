s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocParserSimple),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@tempfile,
            s(:send,
              s(:const, nil, :Tempfile), :new,
              s(:send,
                s(:send,
                  s(:self), :class), :name))),
          s(:lvasgn, :filename,
            s(:send,
              s(:ivar, :@tempfile), :path)),
          s(:ivasgn, :@top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:lvar, :filename))),
          s(:ivasgn, :@fn,
            s(:lvar, :filename)),
          s(:ivasgn, :@options,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Options), :new)),
          s(:ivasgn, :@stats,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Stats), :new,
              s(:ivar, :@store),
              s(:int, 0))))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:send,
            s(:ivar, :@tempfile), :close!))),
      s(:def, :test_initialize_metadata,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser,
              s(:str, ":unhandled: \n"))),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:ivar, :@top_level), :metadata),
            s(:str, "unhandled")),
          s(:send, nil, :assert_equal,
            s(:str, ":unhandled: \n"),
            s(:send,
              s(:lvar, :parser), :content)))),
      s(:def, :test_remove_coding_comment,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser,
              s(:dstr,
                s(:str, "# -*- mode: rdoc; coding: utf-8; fill-column: 74; -*-\n"),
                s(:str, "\n"),
                s(:str, "Regular expressions (<i>regexp</i>s) are patterns which describe the\n"),
                s(:str, "contents of a string.\n")))),
          s(:send,
            s(:lvar, :parser), :scan),
          s(:lvasgn, :expected,
            s(:send,
              s(:dstr,
                s(:str, "Regular expressions (<i>regexp</i>s) are patterns which describe the\n"),
                s(:str, "contents of a string.\n")), :strip)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@top_level), :comment), :text)))),
      s(:def, :test_remove_private_comments,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser,
              s(:str, "foo\n\n--\nbar\n++\n\nbaz\n"))),
          s(:send,
            s(:lvar, :parser), :scan),
          s(:lvasgn, :expected,
            s(:str, "foo\n\n\nbaz")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@top_level), :comment), :text)))),
      s(:def, :test_remove_private_comments_rule,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser,
              s(:str, "foo\n---\nbar"))),
          s(:send,
            s(:lvar, :parser), :scan),
          s(:lvasgn, :expected,
            s(:str, "foo\n---\nbar")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@top_level), :comment), :text)))),
      s(:def, :test_remove_private_comments_star,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser,
              s(:str, "* foo\n* bar\n"))),
          s(:send,
            s(:lvar, :parser), :scan),
          s(:send, nil, :assert_equal,
            s(:str, "* foo\n* bar"),
            s(:send,
              s(:send,
                s(:ivar, :@top_level), :comment), :text)))),
      s(:def, :test_scan,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser,
              s(:str, "it *really* works"))),
          s(:send,
            s(:lvar, :parser), :scan),
          s(:send, nil, :assert_equal,
            s(:str, "it *really* works"),
            s(:send,
              s(:send,
                s(:ivar, :@top_level), :comment), :text)))),
      s(:def, :util_parser,
        s(:args,
          s(:arg, :content)),
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :RDoc), :Parser), :Simple), :new,
          s(:ivar, :@top_level),
          s(:ivar, :@fn),
          s(:lvar, :content),
          s(:ivar, :@options),
          s(:ivar, :@stats))))))
