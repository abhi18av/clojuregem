s(:begin,
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:str, "../xref_test_case"),
      s(:str, "(string)"))),
  s(:class,
    s(:const, nil, :TestRDocCrossReference),
    s(:const, nil, :XrefTestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@xref,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CrossReference), :new,
              s(:ivar, :@c1))))),
      s(:def, :assert_ref,
        s(:args,
          s(:arg, :expected),
          s(:arg, :name)),
        s(:send, nil, :assert_equal,
          s(:lvar, :expected),
          s(:send,
            s(:ivar, :@xref), :resolve,
            s(:lvar, :name),
            s(:str, "fail")))),
      s(:def, :refute_ref,
        s(:args,
          s(:arg, :name)),
        s(:send, nil, :assert_equal,
          s(:lvar, :name),
          s(:send,
            s(:ivar, :@xref), :resolve,
            s(:lvar, :name),
            s(:lvar, :name)))),
      s(:def, :test_METHOD_REGEXP_STR,
        s(:args),
        s(:begin,
          s(:lvasgn, :re,
            s(:regexp,
              s(:begin,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :CrossReference), :METHOD_REGEXP_STR)),
              s(:regopt))),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "==="),
                s(:str, "[]"),
                s(:str, "[]="),
                s(:str, "<<"),
                s(:str, ">>")), :each),
            s(:args,
              s(:arg, :x)),
            s(:begin,
              s(:send,
                s(:lvar, :re), :=~,
                s(:lvar, :x)),
              s(:send, nil, :assert_equal,
                s(:lvar, :x),
                s(:back_ref, :$&)))))),
      s(:def, :test_resolve_C2,
        s(:args),
        s(:begin,
          s(:ivasgn, :@xref,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CrossReference), :new,
              s(:ivar, :@c2))),
          s(:send, nil, :refute_ref,
            s(:str, "#m")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c1__m),
            s(:str, "C1::m")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c2_c3),
            s(:str, "C2::C3")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c2_c3_m),
            s(:str, "C2::C3#m")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c2_c3_h1),
            s(:str, "C3::H1")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c4),
            s(:str, "C4")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c3_h2),
            s(:str, "C3::H2")),
          s(:send, nil, :refute_ref,
            s(:str, "H1")))),
      s(:def, :test_resolve_C2_C3,
        s(:args),
        s(:begin,
          s(:ivasgn, :@xref,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CrossReference), :new,
              s(:ivar, :@c2_c3))),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c2_c3_m),
            s(:str, "#m")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c2_c3),
            s(:str, "C3")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c2_c3_m),
            s(:str, "C3#m")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c2_c3_h1),
            s(:str, "H1")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c2_c3_h1),
            s(:str, "C3::H1")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c4),
            s(:str, "C4")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c3_h2),
            s(:str, "C3::H2")))),
      s(:def, :test_resolve_C3,
        s(:args),
        s(:begin,
          s(:ivasgn, :@xref,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CrossReference), :new,
              s(:ivar, :@c3))),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c3),
            s(:str, "C3")),
          s(:send, nil, :refute_ref,
            s(:str, "#m")),
          s(:send, nil, :refute_ref,
            s(:str, "C3#m")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c3_h1),
            s(:str, "H1")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c3_h1),
            s(:str, "C3::H1")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c3_h2),
            s(:str, "C3::H2")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c4),
            s(:str, "C4")))),
      s(:def, :test_resolve_C4,
        s(:args),
        s(:begin,
          s(:ivasgn, :@xref,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CrossReference), :new,
              s(:ivar, :@c4))),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c4_c4),
            s(:str, "C4")))),
      s(:def, :test_resolve_C4_C4,
        s(:args),
        s(:begin,
          s(:ivasgn, :@xref,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CrossReference), :new,
              s(:ivar, :@c4_c4))),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c4_c4),
            s(:str, "C4")))),
      s(:def, :test_resolve_class,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_ref,
            s(:ivar, :@c1),
            s(:str, "C1")),
          s(:send, nil, :refute_ref,
            s(:str, "H1")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c2),
            s(:str, "C2")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c2_c3),
            s(:str, "C2::C3")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c2_c3_h1),
            s(:str, "C2::C3::H1")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c3),
            s(:str, "::C3")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c3_h1),
            s(:str, "::C3::H1")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c4_c4),
            s(:str, "C4::C4")))),
      s(:def, :test_resolve_file,
        s(:args),
        s(:send, nil, :refute_ref,
          s(:str, "xref_data.rb"))),
      s(:def, :test_resolve_method,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_ref,
            s(:ivar, :@c1__m),
            s(:str, "m")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c1_m),
            s(:str, "#m")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c1__m),
            s(:str, "::m")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c1_m),
            s(:str, "C1#m")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c1__m),
            s(:str, "C1.m")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c1__m),
            s(:str, "C1::m")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c1_m),
            s(:str, "C1#m")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c1_m),
            s(:str, "C1#m()")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c1_m),
            s(:str, "C1#m(*)")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c1__m),
            s(:str, "C1.m")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c1__m),
            s(:str, "C1.m()")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c1__m),
            s(:str, "C1.m(*)")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c1__m),
            s(:str, "C1::m")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c1__m),
            s(:str, "C1::m()")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c1__m),
            s(:str, "C1::m(*)")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c2_c3_m),
            s(:str, "C2::C3#m")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c2_c3_m),
            s(:str, "C2::C3.m")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c2_c3_h1_meh),
            s(:str, "C2::C3::H1#m?")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c2_c3_m),
            s(:str, "::C2::C3#m")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c2_c3_m),
            s(:str, "::C2::C3#m()")),
          s(:send, nil, :assert_ref,
            s(:ivar, :@c2_c3_m),
            s(:str, "::C2::C3#m(*)")))),
      s(:def, :test_resolve_method_equals3,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:str, ""),
              s(:str, "==="))),
          s(:send,
            s(:ivar, :@c1), :add_method,
            s(:lvar, :m)),
          s(:send, nil, :assert_ref,
            s(:lvar, :m),
            s(:str, "===")))),
      s(:def, :test_resolve_page,
        s(:args),
        s(:begin,
          s(:lvasgn, :page,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "README.txt"))),
          s(:send,
            s(:lvar, :page), :parser=,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Parser), :Simple)),
          s(:send, nil, :assert_ref,
            s(:lvar, :page),
            s(:str, "README")))),
      s(:def, :test_resolve_percent,
        s(:args),
        s(:begin,
          s(:lvasgn, :i_percent,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "%"))),
          s(:send,
            s(:lvar, :i_percent), :singleton=,
            s(:false)),
          s(:send,
            s(:ivar, :@c1), :add_method,
            s(:lvar, :i_percent)),
          s(:lvasgn, :c_percent,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "%"))),
          s(:send,
            s(:lvar, :c_percent), :singleton=,
            s(:true)),
          s(:send,
            s(:ivar, :@c1), :add_method,
            s(:lvar, :c_percent)),
          s(:send, nil, :assert_ref,
            s(:lvar, :i_percent),
            s(:str, "%")),
          s(:send, nil, :assert_ref,
            s(:lvar, :i_percent),
            s(:str, "#%")),
          s(:send, nil, :assert_ref,
            s(:lvar, :c_percent),
            s(:str, "::%")),
          s(:send, nil, :assert_ref,
            s(:lvar, :i_percent),
            s(:str, "C1#%")),
          s(:send, nil, :assert_ref,
            s(:lvar, :c_percent),
            s(:str, "C1::%")))),
      s(:def, :test_resolve_no_ref,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@xref), :resolve,
              s(:str, ""),
              s(:str, ""))),
          s(:send, nil, :assert_equal,
            s(:str, "bogus"),
            s(:send,
              s(:ivar, :@xref), :resolve,
              s(:str, "bogus"),
              s(:str, "bogus"))),
          s(:send, nil, :assert_equal,
            s(:str, "\\bogus"),
            s(:send,
              s(:ivar, :@xref), :resolve,
              s(:str, "\\bogus"),
              s(:str, "\\bogus"))),
          s(:send, nil, :assert_equal,
            s(:str, "\\\\bogus"),
            s(:send,
              s(:ivar, :@xref), :resolve,
              s(:str, "\\\\bogus"),
              s(:str, "\\\\bogus"))),
          s(:send, nil, :assert_equal,
            s(:str, "\\#n"),
            s(:send,
              s(:ivar, :@xref), :resolve,
              s(:str, "\\#n"),
              s(:str, "fail"))),
          s(:send, nil, :assert_equal,
            s(:str, "\\#n()"),
            s(:send,
              s(:ivar, :@xref), :resolve,
              s(:str, "\\#n()"),
              s(:str, "fail"))),
          s(:send, nil, :assert_equal,
            s(:str, "\\#n(*)"),
            s(:send,
              s(:ivar, :@xref), :resolve,
              s(:str, "\\#n(*)"),
              s(:str, "fail"))),
          s(:send, nil, :assert_equal,
            s(:str, "C1"),
            s(:send,
              s(:ivar, :@xref), :resolve,
              s(:str, "\\C1"),
              s(:str, "fail"))),
          s(:send, nil, :assert_equal,
            s(:str, "::C3"),
            s(:send,
              s(:ivar, :@xref), :resolve,
              s(:str, "\\::C3"),
              s(:str, "fail"))),
          s(:send, nil, :assert_equal,
            s(:str, "succeed"),
            s(:send,
              s(:ivar, :@xref), :resolve,
              s(:str, "::C3::H1#n"),
              s(:str, "succeed"))),
          s(:send, nil, :assert_equal,
            s(:str, "succeed"),
            s(:send,
              s(:ivar, :@xref), :resolve,
              s(:str, "::C3::H1#n(*)"),
              s(:str, "succeed"))),
          s(:send, nil, :assert_equal,
            s(:str, "\\::C3::H1#n"),
            s(:send,
              s(:ivar, :@xref), :resolve,
              s(:str, "\\::C3::H1#n"),
              s(:str, "fail"))))))))
