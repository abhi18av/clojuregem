s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocRd),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :test_class_parse,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "hello")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RD), :parse,
              s(:str, "hello"))))),
      s(:def, :test_class_parse_begin_end,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "hello")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RD), :parse,
              s(:str, "=begin\nhello\n=end\n"))))),
      s(:def, :test_class_parse_newline,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "hello")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RD), :parse,
              s(:str, "hello\n"))))))))
