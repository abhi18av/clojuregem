s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocGeneratorDarkfish),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@lib_dir,
            s(:dstr,
              s(:begin,
                s(:ivar, :@pwd)),
              s(:str, "/lib"))),
          s(:send,
            s(:gvar, :$LOAD_PATH), :unshift,
            s(:ivar, :@lib_dir)),
          s(:ivasgn, :@options,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Options), :new)),
          s(:send,
            s(:ivar, :@options), :option_parser=,
            s(:send,
              s(:const, nil, :OptionParser), :new)),
          s(:ivasgn, :@tmpdir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Dir), :tmpdir),
              s(:dstr,
                s(:str, "test_rdoc_generator_darkfish_"),
                s(:begin,
                  s(:gvar, :$$))))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:ivar, :@tmpdir)),
          s(:send,
            s(:const, nil, :Dir), :chdir,
            s(:ivar, :@tmpdir)),
          s(:send,
            s(:ivar, :@options), :op_dir=,
            s(:ivar, :@tmpdir)),
          s(:send,
            s(:ivar, :@options), :generator=,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Generator), :Darkfish)),
          s(:block,
            s(:send,
              s(:gvar, :$LOAD_PATH), :each),
            s(:args,
              s(:arg, :path)),
            s(:begin,
              s(:lvasgn, :darkfish_dir,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :path),
                  s(:str, "rdoc/generator/template/darkfish/"))),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :directory?,
                  s(:lvar, :darkfish_dir)), nil,
                s(:next)),
              s(:send,
                s(:ivar, :@options), :template_dir=,
                s(:lvar, :darkfish_dir)),
              s(:break))),
          s(:send,
            s(:ivar, :@rdoc), :options=,
            s(:ivar, :@options)),
          s(:ivasgn, :@g,
            s(:send,
              s(:send,
                s(:ivar, :@options), :generator), :new,
              s(:ivar, :@store),
              s(:ivar, :@options))),
          s(:send,
            s(:ivar, :@rdoc), :generator=,
            s(:ivar, :@g)),
          s(:ivasgn, :@top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:send,
            s(:ivar, :@top_level), :parser=,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Parser), :Ruby)),
          s(:ivasgn, :@klass,
            s(:send,
              s(:ivar, :@top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"))),
          s(:ivasgn, :@alias_constant,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "A"),
              s(:nil),
              s(:str, ""))),
          s(:send,
            s(:ivar, :@alias_constant), :record_location,
            s(:ivar, :@top_level)),
          s(:send,
            s(:ivar, :@top_level), :add_constant,
            s(:ivar, :@alias_constant)),
          s(:send,
            s(:ivar, :@klass), :add_module_alias,
            s(:ivar, :@klass),
            s(:str, "A"),
            s(:ivar, :@top_level)),
          s(:ivasgn, :@meth,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "method"))),
          s(:ivasgn, :@meth_bang,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "method!"))),
          s(:ivasgn, :@attr,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "attr"),
              s(:str, "RW"),
              s(:str, ""))),
          s(:send,
            s(:ivar, :@klass), :add_method,
            s(:ivar, :@meth)),
          s(:send,
            s(:ivar, :@klass), :add_method,
            s(:ivar, :@meth_bang)),
          s(:send,
            s(:ivar, :@klass), :add_attribute,
            s(:ivar, :@attr)),
          s(:ivasgn, :@ignored,
            s(:send,
              s(:ivar, :@top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Ignored"))),
          s(:send,
            s(:ivar, :@ignored), :ignore),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :private)),
          s(:ivasgn, :@object,
            s(:send,
              s(:ivar, :@store), :find_class_or_module,
              s(:str, "Object"))),
          s(:ivasgn, :@klass_alias,
            s(:send,
              s(:ivar, :@store), :find_class_or_module,
              s(:str, "Klass::A"))))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:send,
            s(:gvar, :$LOAD_PATH), :shift),
          s(:send,
            s(:const, nil, :Dir), :chdir,
            s(:ivar, :@pwd)),
          s(:send,
            s(:const, nil, :FileUtils), :rm_rf,
            s(:ivar, :@tmpdir)))),
      s(:def, :test_generate,
        s(:args),
        s(:begin,
          s(:lvasgn, :top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:send,
            s(:lvar, :top_level), :add_class,
            s(:send,
              s(:ivar, :@klass), :class),
            s(:send,
              s(:ivar, :@klass), :name)),
          s(:send,
            s(:ivar, :@g), :generate),
          s(:send, nil, :assert_file,
            s(:str, "index.html")),
          s(:send, nil, :assert_file,
            s(:str, "Object.html")),
          s(:send, nil, :assert_file,
            s(:str, "table_of_contents.html")),
          s(:send, nil, :assert_file,
            s(:str, "js/search_index.js")),
          s(:send, nil, :assert_hard_link,
            s(:str, "css/rdoc.css")),
          s(:send, nil, :assert_hard_link,
            s(:str, "css/fonts.css")),
          s(:send, nil, :assert_hard_link,
            s(:str, "fonts/SourceCodePro-Bold.ttf")),
          s(:send, nil, :assert_hard_link,
            s(:str, "fonts/SourceCodePro-Regular.ttf")),
          s(:lvasgn, :encoding,
            s(:if,
              s(:send,
                s(:const, nil, :Object), :const_defined?,
                s(:sym, :Encoding)),
              s(:send,
                s(:const, nil, :Regexp), :escape,
                s(:send,
                  s(:const,
                    s(:const, nil, :Encoding), :UTF_8), :name)),
              s(:send,
                s(:const, nil, :Regexp), :escape,
                s(:str, "UTF-8")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "<meta charset=\""),
              s(:begin,
                s(:lvar, :encoding)),
              s(:str, "\">"),
              s(:regopt)),
            s(:send,
              s(:const, nil, :File), :read,
              s(:str, "index.html"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "<meta charset=\""),
              s(:begin,
                s(:lvar, :encoding)),
              s(:str, "\">"),
              s(:regopt)),
            s(:send,
              s(:const, nil, :File), :read,
              s(:str, "Object.html"))),
          s(:send, nil, :refute_match,
            s(:regexp,
              s(:str, "Ignored"),
              s(:regopt)),
            s(:send,
              s(:const, nil, :File), :read,
              s(:str, "index.html"))))),
      s(:def, :test_generate_dry_run,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@g), :dry_run=,
            s(:true)),
          s(:lvasgn, :top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:send,
            s(:lvar, :top_level), :add_class,
            s(:send,
              s(:ivar, :@klass), :class),
            s(:send,
              s(:ivar, :@klass), :name)),
          s(:send,
            s(:ivar, :@g), :generate),
          s(:send, nil, :refute_file,
            s(:str, "index.html")),
          s(:send, nil, :refute_file,
            s(:str, "Object.html")))),
      s(:def, :test_generate_static,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:str, "dir/images")),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:str, "dir/images/image.png")),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:str, "file")),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:str, "file/file.txt")),
          s(:send,
            s(:ivar, :@options), :static_path=,
            s(:array,
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:str, "dir")),
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:str, "file/file.txt")))),
          s(:send,
            s(:ivar, :@g), :generate),
          s(:send, nil, :assert_file,
            s(:str, "images/image.png")),
          s(:send, nil, :assert_file,
            s(:str, "file.txt")))),
      s(:def, :test_generate_static_dry_run,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :FileUtils), :mkdir,
            s(:str, "static")),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:str, "static/image.png")),
          s(:send,
            s(:ivar, :@options), :static_path=,
            s(:array,
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:str, "static")))),
          s(:send,
            s(:ivar, :@g), :dry_run=,
            s(:true)),
          s(:send,
            s(:ivar, :@g), :generate),
          s(:send, nil, :refute_file,
            s(:str, "image.png")))),
      s(:def, :test_install_rdoc_static_file,
        s(:args),
        s(:begin,
          s(:lvasgn, :src,
            s(:send, nil, :Pathname,
              s(:str, "(string)"))),
          s(:lvasgn, :dst,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tmpdir),
              s(:send,
                s(:const, nil, :File), :basename,
                s(:lvar, :src)))),
          s(:lvasgn, :options,
            s(:hash)),
          s(:send,
            s(:ivar, :@g), :install_rdoc_static_file,
            s(:lvar, :src),
            s(:lvar, :dst),
            s(:lvar, :options)),
          s(:send, nil, :assert_file,
            s(:lvar, :dst)),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :assert_hard_link,
                s(:lvar, :dst)),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :MiniTest), :Assertion)), nil,
                s(:return)), nil)),
          s(:send,
            s(:ivar, :@g), :install_rdoc_static_file,
            s(:lvar, :src),
            s(:lvar, :dst),
            s(:lvar, :options)),
          s(:send, nil, :assert_hard_link,
            s(:lvar, :dst)))),
      s(:def, :test_install_rdoc_static_file_missing,
        s(:args),
        s(:begin,
          s(:lvasgn, :src,
            s(:send,
              s(:send, nil, :Pathname,
                s(:str, "(string)")), :+,
              s(:str, "nonexistent"))),
          s(:lvasgn, :dst,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tmpdir),
              s(:send,
                s(:const, nil, :File), :basename,
                s(:lvar, :src)))),
          s(:lvasgn, :options,
            s(:hash)),
          s(:send,
            s(:ivar, :@g), :install_rdoc_static_file,
            s(:lvar, :src),
            s(:lvar, :dst),
            s(:lvar, :options)),
          s(:send, nil, :refute_file,
            s(:lvar, :dst)))),
      s(:def, :test_setup,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@g), :setup),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@klass_alias),
              s(:ivar, :@ignored),
              s(:ivar, :@klass),
              s(:ivar, :@object)),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@g), :classes), :sort_by),
              s(:args,
                s(:arg, :klass)),
              s(:send,
                s(:lvar, :klass), :full_name))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@top_level)),
            s(:send,
              s(:ivar, :@g), :files)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@meth),
              s(:ivar, :@meth),
              s(:ivar, :@meth_bang),
              s(:ivar, :@meth_bang)),
            s(:send,
              s(:ivar, :@g), :methods)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@klass_alias),
              s(:ivar, :@klass),
              s(:ivar, :@object)),
            s(:send,
              s(:ivar, :@g), :modsort)))),
      s(:def, :test_template_for,
        s(:args),
        s(:begin,
          s(:lvasgn, :classpage,
            s(:send,
              s(:const, nil, :Pathname), :new,
              s(:send,
                s(:send,
                  s(:ivar, :@options), :template_dir), :+,
                s(:str, "class.rhtml")))),
          s(:lvasgn, :template,
            s(:send,
              s(:ivar, :@g), :send,
              s(:sym, :template_for),
              s(:lvar, :classpage),
              s(:true),
              s(:const,
                s(:const, nil, :RDoc), :ERBIO))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :RDoc), :ERBIO),
            s(:lvar, :template)),
          s(:send, nil, :assert_same,
            s(:lvar, :template),
            s(:send,
              s(:ivar, :@g), :send,
              s(:sym, :template_for),
              s(:lvar, :classpage))))),
      s(:def, :test_template_for_dry_run,
        s(:args),
        s(:begin,
          s(:lvasgn, :classpage,
            s(:send,
              s(:const, nil, :Pathname), :new,
              s(:send,
                s(:send,
                  s(:ivar, :@options), :template_dir), :+,
                s(:str, "class.rhtml")))),
          s(:lvasgn, :template,
            s(:send,
              s(:ivar, :@g), :send,
              s(:sym, :template_for),
              s(:lvar, :classpage),
              s(:true),
              s(:const, nil, :ERB))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :ERB),
            s(:lvar, :template)),
          s(:send, nil, :assert_same,
            s(:lvar, :template),
            s(:send,
              s(:ivar, :@g), :send,
              s(:sym, :template_for),
              s(:lvar, :classpage))))),
      s(:def, :test_template_for_partial,
        s(:args),
        s(:begin,
          s(:lvasgn, :partial,
            s(:send,
              s(:const, nil, :Pathname), :new,
              s(:send,
                s(:send,
                  s(:ivar, :@options), :template_dir), :+,
                s(:str, "_sidebar_classes.rhtml")))),
          s(:lvasgn, :template,
            s(:send,
              s(:ivar, :@g), :send,
              s(:sym, :template_for),
              s(:lvar, :partial),
              s(:false),
              s(:const,
                s(:const, nil, :RDoc), :ERBPartial))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :RDoc), :ERBPartial),
            s(:lvar, :template)),
          s(:send, nil, :assert_same,
            s(:lvar, :template),
            s(:send,
              s(:ivar, :@g), :send,
              s(:sym, :template_for),
              s(:lvar, :partial))))),
      s(:def, :assert_hard_link,
        s(:args,
          s(:arg, :filename)),
        s(:begin,
          s(:send, nil, :assert_file,
            s(:lvar, :filename)),
          s(:lvasgn, :src,
            s(:send,
              s(:send,
                s(:ivar, :@g), :template_dir), :+,
              s(:str, "_head.rhtml"))),
          s(:lvasgn, :dst,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tmpdir),
              s(:str, "hardlinktest"))),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:send,
                  s(:const, nil, :FileUtils), :ln,
                  s(:lvar, :src),
                  s(:lvar, :dst)),
                s(:if,
                  s(:send,
                    s(:const, nil, :File), :identical?,
                    s(:lvar, :src),
                    s(:lvar, :dst)),
                  s(:lvasgn, :nlink,
                    s(:send,
                      s(:send,
                        s(:const, nil, :File), :stat,
                        s(:lvar, :dst)), :nlink)), nil),
                s(:send,
                  s(:const, nil, :FileUtils), :rm,
                  s(:lvar, :dst)),
                s(:if,
                  s(:send,
                    s(:lvar, :nlink), :==,
                    s(:int, 1)),
                  s(:return), nil)),
              s(:resbody,
                s(:array,
                  s(:const, nil, :SystemCallError)), nil,
                s(:return)), nil)),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:send,
                s(:const, nil, :File), :stat,
                s(:lvar, :filename)), :nlink),
            s(:sym, :>),
            s(:int, 1),
            s(:dstr,
              s(:begin,
                s(:lvar, :filename)),
              s(:str, " is not hard-linked"))))))))
