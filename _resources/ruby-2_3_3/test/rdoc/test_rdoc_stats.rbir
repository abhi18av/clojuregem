s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocStats),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@s,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Stats), :new,
              s(:ivar, :@store),
              s(:int, 0))),
          s(:ivasgn, :@tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:send,
            s(:ivar, :@tl), :parser=,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Parser), :Ruby)))),
      s(:def, :test_doc_stats,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CodeObject), :new)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 1)),
            s(:send,
              s(:ivar, :@s), :doc_stats,
              s(:array,
                s(:lvar, :c)))))),
      s(:def, :test_doc_stats_documented,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CodeObject), :new)),
          s(:send,
            s(:lvar, :c), :comment=,
            s(:send, nil, :comment,
              s(:str, "x"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 0)),
            s(:send,
              s(:ivar, :@s), :doc_stats,
              s(:array,
                s(:lvar, :c)))))),
      s(:def, :test_doc_stats_display_eh,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CodeObject), :new)),
          s(:send,
            s(:lvar, :c), :ignore),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:int, 0)),
            s(:send,
              s(:ivar, :@s), :doc_stats,
              s(:array,
                s(:lvar, :c)))))),
      s(:def, :test_report_attr,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_comment,
            s(:str, "C"),
            s(:ivar, :@tl)),
          s(:lvasgn, :a,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "a"),
              s(:str, "RW"),
              s(:nil))),
          s(:send,
            s(:lvar, :a), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_attribute,
            s(:lvar, :a)),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:lvasgn, :report,
            s(:send,
              s(:ivar, :@s), :report)),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "The following items are not documented:")),
              s(:send, nil, :blank_line),
              s(:send, nil, :verb,
                s(:str, "class C # is documented\n"),
                s(:str, "\n"),
                s(:str, "  attr_accessor :a # in file file.rb\n"),
                s(:str, "\n"),
                s(:str, "end\n")),
              s(:send, nil, :blank_line))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :report)))),
      s(:def, :test_report_attr_documented,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_comment,
            s(:str, "C"),
            s(:ivar, :@tl)),
          s(:lvasgn, :a,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "a"),
              s(:str, "RW"),
              s(:str, "a"))),
          s(:send,
            s(:lvar, :a), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_attribute,
            s(:lvar, :a)),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:lvasgn, :report,
            s(:send,
              s(:ivar, :@s), :report)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@s), :great_job),
            s(:lvar, :report)))),
      s(:def, :test_report_attr_line,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_comment,
            s(:str, "C"),
            s(:ivar, :@tl)),
          s(:lvasgn, :a,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "a"),
              s(:str, "RW"),
              s(:nil))),
          s(:send,
            s(:lvar, :a), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :a), :line=,
            s(:int, 3)),
          s(:send,
            s(:lvar, :c), :add_attribute,
            s(:lvar, :a)),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:send, nil, :assert_match,
            s(:str, "# in file file.rb:3"),
            s(:send,
              s(:send,
                s(:ivar, :@s), :report), :accept,
              s(:send, nil, :to_rdoc))))),
      s(:def, :test_report_constant,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:ivar, :@tl), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "M"))),
          s(:send,
            s(:lvar, :m), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :m), :add_comment,
            s(:str, "M"),
            s(:ivar, :@tl)),
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "C"),
              s(:nil),
              s(:nil))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :m), :add_constant,
            s(:lvar, :c)),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:lvasgn, :report,
            s(:send,
              s(:ivar, :@s), :report)),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "The following items are not documented:")),
              s(:send, nil, :blank_line),
              s(:send, nil, :verb,
                s(:str, "module M # is documented\n"),
                s(:str, "\n"),
                s(:str, "  # in file file.rb\n"),
                s(:str, "  C = nil\n"),
                s(:str, "\n"),
                s(:str, "end\n")),
              s(:send, nil, :blank_line))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :report)))),
      s(:def, :test_report_constant_alias,
        s(:args),
        s(:begin,
          s(:lvasgn, :mod,
            s(:send,
              s(:ivar, :@tl), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "M"))),
          s(:lvasgn, :c,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C"))),
          s(:send,
            s(:lvar, :mod), :add_constant,
            s(:lvar, :c)),
          s(:lvasgn, :ca,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "CA"),
              s(:nil),
              s(:nil))),
          s(:send,
            s(:lvar, :ca), :is_alias_for=,
            s(:lvar, :c)),
          s(:send,
            s(:ivar, :@tl), :add_constant,
            s(:lvar, :ca)),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:lvasgn, :report,
            s(:send,
              s(:ivar, :@s), :report)),
          s(:send, nil, :assert_match,
            s(:str, "class Object"),
            s(:send,
              s(:lvar, :report), :accept,
              s(:send, nil, :to_rdoc))))),
      s(:def, :test_report_constant_documented,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:ivar, :@tl), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "M"))),
          s(:send,
            s(:lvar, :m), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :m), :add_comment,
            s(:str, "M"),
            s(:ivar, :@tl)),
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "C"),
              s(:nil),
              s(:str, "C"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :m), :add_constant,
            s(:lvar, :c)),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:lvasgn, :report,
            s(:send,
              s(:ivar, :@s), :report)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@s), :great_job),
            s(:lvar, :report)))),
      s(:def, :test_report_constant_line,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:ivar, :@tl), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "M"))),
          s(:send,
            s(:lvar, :m), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :m), :add_comment,
            s(:str, "M"),
            s(:ivar, :@tl)),
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "C"),
              s(:nil),
              s(:nil))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :line=,
            s(:int, 5)),
          s(:send,
            s(:lvar, :m), :add_constant,
            s(:lvar, :c)),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:send, nil, :assert_match,
            s(:str, "# in file file.rb:5"),
            s(:send,
              s(:send,
                s(:ivar, :@s), :report), :accept,
              s(:send, nil, :to_rdoc))))),
      s(:def, :test_report_class,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:ivar, :@tl)),
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:lvar, :m), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_method,
            s(:lvar, :m)),
          s(:send,
            s(:lvar, :m), :comment=,
            s(:str, "m")),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:lvasgn, :report,
            s(:send,
              s(:ivar, :@s), :report)),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "The following items are not documented:")),
              s(:send, nil, :blank_line),
              s(:send, nil, :para,
                s(:str, "In files:")),
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:splat,
                  s(:array,
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "file.rb")))))),
              s(:send, nil, :blank_line),
              s(:send, nil, :verb,
                s(:str, "class C\n"),
                s(:str, "end\n")),
              s(:send, nil, :blank_line))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :report)))),
      s(:def, :test_report_skip_object,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Object"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:ivar, :@tl)),
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:lvar, :m), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_method,
            s(:lvar, :m)),
          s(:send,
            s(:lvar, :m), :comment=,
            s(:str, "m")),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:send, nil, :refute_match,
            s(:regexp,
              s(:str, "^class Object$"),
              s(:regopt)),
            s(:send,
              s(:send,
                s(:ivar, :@s), :report), :accept,
              s(:send, nil, :to_rdoc))))),
      s(:def, :test_report_class_documented,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_comment,
            s(:str, "C"),
            s(:ivar, :@tl)),
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:lvar, :m), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_method,
            s(:lvar, :m)),
          s(:send,
            s(:lvar, :m), :comment=,
            s(:str, "m")),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:lvasgn, :report,
            s(:send,
              s(:ivar, :@s), :report)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@s), :great_job),
            s(:lvar, :report)))),
      s(:def, :test_report_class_documented_level_1,
        s(:args),
        s(:begin,
          s(:lvasgn, :c1,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C1"))),
          s(:send,
            s(:lvar, :c1), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c1), :add_comment,
            s(:str, "C1"),
            s(:ivar, :@tl)),
          s(:lvasgn, :m1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m1"))),
          s(:send,
            s(:lvar, :m1), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c1), :add_method,
            s(:lvar, :m1)),
          s(:send,
            s(:lvar, :m1), :comment=,
            s(:str, "m1")),
          s(:lvasgn, :c2,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C2"))),
          s(:send,
            s(:lvar, :c2), :record_location,
            s(:ivar, :@tl)),
          s(:lvasgn, :m2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m2"))),
          s(:send,
            s(:lvar, :m2), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c2), :add_method,
            s(:lvar, :m2)),
          s(:send,
            s(:lvar, :m2), :comment=,
            s(:str, "m2")),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:send,
            s(:ivar, :@s), :coverage_level=,
            s(:int, 1)),
          s(:lvasgn, :report,
            s(:send,
              s(:ivar, :@s), :report)),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "The following items are not documented:")),
              s(:send, nil, :blank_line),
              s(:send, nil, :para,
                s(:str, "In files:")),
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:splat,
                  s(:array,
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "file.rb")))))),
              s(:send, nil, :blank_line),
              s(:send, nil, :verb,
                s(:str, "class C2\n"),
                s(:str, "end\n")),
              s(:send, nil, :blank_line))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :report)))),
      s(:def, :test_report_class_empty,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@tl), :add_class,
            s(:const,
              s(:const, nil, :RDoc), :NormalClass),
            s(:str, "C")),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:lvasgn, :report,
            s(:send,
              s(:ivar, :@s), :report)),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "The following items are not documented:")),
              s(:send, nil, :blank_line),
              s(:send, nil, :para,
                s(:str, "class C is referenced but empty.")),
              s(:send, nil, :para,
                s(:str, "It probably came from another project.  I'm sorry I'm holding it against you.")),
              s(:send, nil, :blank_line))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :report)))),
      s(:def, :test_report_class_empty_2,
        s(:args),
        s(:begin,
          s(:lvasgn, :c1,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C1"))),
          s(:send,
            s(:lvar, :c1), :record_location,
            s(:ivar, :@tl)),
          s(:lvasgn, :c2,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C2"))),
          s(:send,
            s(:lvar, :c2), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c2), :add_comment,
            s(:str, "C2"),
            s(:ivar, :@tl)),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:send,
            s(:ivar, :@s), :coverage_level=,
            s(:int, 1)),
          s(:lvasgn, :report,
            s(:send,
              s(:ivar, :@s), :report)),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "The following items are not documented:")),
              s(:send, nil, :blank_line),
              s(:send, nil, :para,
                s(:str, "In files:")),
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:splat,
                  s(:array,
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "file.rb")))))),
              s(:send, nil, :blank_line),
              s(:send, nil, :verb,
                s(:str, "class C1\n"),
                s(:str, "end\n")),
              s(:send, nil, :blank_line))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :report)))),
      s(:def, :test_report_class_method_documented,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:ivar, :@tl)),
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:lvar, :m), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_method,
            s(:lvar, :m)),
          s(:send,
            s(:lvar, :m), :comment=,
            s(:str, "m")),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:lvasgn, :report,
            s(:send,
              s(:ivar, :@s), :report)),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "The following items are not documented:")),
              s(:send, nil, :blank_line),
              s(:send, nil, :para,
                s(:str, "In files:")),
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:splat,
                  s(:array,
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "file.rb")))))),
              s(:send, nil, :blank_line),
              s(:send, nil, :verb,
                s(:str, "class C\n"),
                s(:str, "end\n")),
              s(:send, nil, :blank_line))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :report)))),
      s(:def, :test_report_class_module_ignore,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C"))),
          s(:send,
            s(:lvar, :c), :ignore),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:lvasgn, :report,
            s(:send,
              s(:ivar, :@s), :report_class_module,
              s(:lvar, :c))),
          s(:send, nil, :assert_nil,
            s(:lvar, :report)))),
      s(:def, :test_report_empty,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:lvasgn, :report,
            s(:send,
              s(:ivar, :@s), :report)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@s), :great_job),
            s(:lvar, :report)))),
      s(:def, :test_report_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_comment,
            s(:str, "C"),
            s(:ivar, :@tl)),
          s(:lvasgn, :m1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m1"))),
          s(:send,
            s(:lvar, :m1), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_method,
            s(:lvar, :m1)),
          s(:lvasgn, :m2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m2"))),
          s(:send,
            s(:lvar, :m2), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_method,
            s(:lvar, :m2)),
          s(:send,
            s(:lvar, :m2), :comment=,
            s(:str, "m2")),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:lvasgn, :report,
            s(:send,
              s(:ivar, :@s), :report)),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "The following items are not documented:")),
              s(:send, nil, :blank_line),
              s(:send, nil, :verb,
                s(:splat,
                  s(:array,
                    s(:str, "class C # is documented\n"),
                    s(:str, "\n"),
                    s(:str, "  # in file file.rb\n"),
                    s(:str, "  def m1; end\n"),
                    s(:str, "\n"),
                    s(:str, "end\n")))),
              s(:send, nil, :blank_line))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :report)))),
      s(:def, :test_report_method_class,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_comment,
            s(:str, "C"),
            s(:ivar, :@tl)),
          s(:lvasgn, :m1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m1"))),
          s(:send,
            s(:lvar, :m1), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :m1), :singleton=,
            s(:true)),
          s(:send,
            s(:lvar, :c), :add_method,
            s(:lvar, :m1)),
          s(:lvasgn, :m2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m2"))),
          s(:send,
            s(:lvar, :m2), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :m2), :singleton=,
            s(:true)),
          s(:send,
            s(:lvar, :c), :add_method,
            s(:lvar, :m2)),
          s(:send,
            s(:lvar, :m2), :comment=,
            s(:str, "m2")),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:lvasgn, :report,
            s(:send,
              s(:ivar, :@s), :report)),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "The following items are not documented:")),
              s(:send, nil, :blank_line),
              s(:send, nil, :verb,
                s(:splat,
                  s(:array,
                    s(:str, "class C # is documented\n"),
                    s(:str, "\n"),
                    s(:str, "  # in file file.rb\n"),
                    s(:str, "  def self.m1; end\n"),
                    s(:str, "\n"),
                    s(:str, "end\n")))),
              s(:send, nil, :blank_line))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :report)))),
      s(:def, :test_report_method_documented,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_comment,
            s(:str, "C"),
            s(:ivar, :@tl)),
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:lvar, :m), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_method,
            s(:lvar, :m)),
          s(:send,
            s(:lvar, :m), :comment=,
            s(:str, "m")),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:lvasgn, :report,
            s(:send,
              s(:ivar, :@s), :report)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@s), :great_job),
            s(:lvar, :report)))),
      s(:def, :test_report_method_line,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_comment,
            s(:str, "C"),
            s(:ivar, :@tl)),
          s(:lvasgn, :m1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m1"))),
          s(:send,
            s(:lvar, :m1), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :m1), :line=,
            s(:int, 4)),
          s(:send,
            s(:lvar, :c), :add_method,
            s(:lvar, :m1)),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:send, nil, :assert_match,
            s(:str, "# in file file.rb:4"),
            s(:send,
              s(:send,
                s(:ivar, :@s), :report), :accept,
              s(:send, nil, :to_rdoc))))),
      s(:def, :test_report_method_parameters,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_comment,
            s(:str, "C"),
            s(:ivar, :@tl)),
          s(:lvasgn, :m1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m1"))),
          s(:send,
            s(:lvar, :m1), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :m1), :params=,
            s(:str, "(p1, p2)")),
          s(:send,
            s(:lvar, :m1), :comment=,
            s(:str, "Stuff with +p1+")),
          s(:send,
            s(:lvar, :c), :add_method,
            s(:lvar, :m1)),
          s(:lvasgn, :m2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m2"))),
          s(:send,
            s(:lvar, :m2), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_method,
            s(:lvar, :m2)),
          s(:send,
            s(:lvar, :m2), :comment=,
            s(:str, "m2")),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:send,
            s(:ivar, :@s), :coverage_level=,
            s(:int, 1)),
          s(:lvasgn, :report,
            s(:send,
              s(:ivar, :@s), :report)),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "The following items are not documented:")),
              s(:send, nil, :blank_line),
              s(:send, nil, :verb,
                s(:splat,
                  s(:array,
                    s(:str, "class C # is documented\n"),
                    s(:str, "\n"),
                    s(:str, "  # in file file.rb\n"),
                    s(:str, "  # +p2+ is not documented\n"),
                    s(:str, "  def m1(p1, p2); end\n"),
                    s(:str, "\n"),
                    s(:str, "end\n")))),
              s(:send, nil, :blank_line))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :report)))),
      s(:def, :test_report_method_parameters_documented,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@tl), :parser=,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Parser), :Ruby)),
          s(:lvasgn, :c,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_comment,
            s(:str, "C"),
            s(:ivar, :@tl)),
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:lvar, :m), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :m), :params=,
            s(:str, "(p1)")),
          s(:send,
            s(:lvar, :m), :comment=,
            s(:str, "Stuff with +p1+")),
          s(:send,
            s(:lvar, :c), :add_method,
            s(:lvar, :m)),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:send,
            s(:ivar, :@s), :coverage_level=,
            s(:int, 1)),
          s(:lvasgn, :report,
            s(:send,
              s(:ivar, :@s), :report)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@s), :great_job),
            s(:lvar, :report)))),
      s(:def, :test_report_method_parameters_yield,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_comment,
            s(:str, "C"),
            s(:ivar, :@tl)),
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:lvar, :m), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :m), :call_seq=,
            s(:dstr,
              s(:str, "m(a) { |c| ... }\n"),
              s(:str, "m(a, b) { |c, d| ... }\n"))),
          s(:send,
            s(:lvar, :m), :comment=,
            s(:str, "Stuff with +a+, yields +c+ for you to do stuff with")),
          s(:send,
            s(:lvar, :c), :add_method,
            s(:lvar, :m)),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:send,
            s(:ivar, :@s), :coverage_level=,
            s(:int, 1)),
          s(:lvasgn, :report,
            s(:send,
              s(:ivar, :@s), :report)),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "The following items are not documented:")),
              s(:send, nil, :blank_line),
              s(:send, nil, :verb,
                s(:str, "class C # is documented\n"),
                s(:str, "\n"),
                s(:str, "  # in file file.rb\n"),
                s(:str, "  # +b+, +d+ is not documented\n"),
                s(:str, "  def m; end\n"),
                s(:str, "\n"),
                s(:str, "end\n")),
              s(:send, nil, :blank_line))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :report)))),
      s(:def, :test_summary,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:ivar, :@tl)),
          s(:lvasgn, :m,
            s(:send,
              s(:ivar, :@tl), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "M"))),
          s(:send,
            s(:lvar, :m), :record_location,
            s(:ivar, :@tl)),
          s(:lvasgn, :a,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "a"),
              s(:str, "RW"),
              s(:nil))),
          s(:send,
            s(:lvar, :a), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_attribute,
            s(:lvar, :a)),
          s(:lvasgn, :c_c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "C"),
              s(:nil),
              s(:nil))),
          s(:send,
            s(:lvar, :c_c), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_constant,
            s(:lvar, :c_c)),
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:lvar, :m), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_method,
            s(:lvar, :m)),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:lvasgn, :summary,
            s(:send,
              s(:send,
                s(:ivar, :@s), :summary), :accept,
              s(:send, nil, :to_rdoc))),
          s(:send,
            s(:lvar, :summary), :sub!,
            s(:regexp,
              s(:str, "  Elapsed:.*"),
              s(:regopt, :m)),
            s(:str, "")),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "  Files:      0\n"),
              s(:str, "\n"),
              s(:str, "  Classes:    1 (1 undocumented)\n"),
              s(:str, "  Modules:    1 (1 undocumented)\n"),
              s(:str, "  Constants:  1 (1 undocumented)\n"),
              s(:str, "  Attributes: 1 (1 undocumented)\n"),
              s(:str, "  Methods:    1 (1 undocumented)\n"),
              s(:str, "\n"),
              s(:str, "  Total:      5 (5 undocumented)\n"),
              s(:str, "    0.00% documented\n"),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :summary),
            s(:lvar, :expected)))),
      s(:def, :test_summary_level_false,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:send,
            s(:ivar, :@s), :coverage_level=,
            s(:false)),
          s(:lvasgn, :summary,
            s(:send,
              s(:send,
                s(:ivar, :@s), :summary), :accept,
              s(:send, nil, :to_rdoc))),
          s(:send,
            s(:lvar, :summary), :sub!,
            s(:regexp,
              s(:str, "  Elapsed:.*"),
              s(:regopt, :m)),
            s(:str, "")),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "  Files:      0\n"),
              s(:str, "\n"),
              s(:str, "  Classes:    1 (1 undocumented)\n"),
              s(:str, "  Modules:    0 (0 undocumented)\n"),
              s(:str, "  Constants:  0 (0 undocumented)\n"),
              s(:str, "  Attributes: 0 (0 undocumented)\n"),
              s(:str, "  Methods:    0 (0 undocumented)\n"),
              s(:str, "\n"),
              s(:str, "  Total:      1 (1 undocumented)\n"),
              s(:str, "    0.00% documented\n"),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :summary),
            s(:lvar, :expected)))),
      s(:def, :test_summary_level_1,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:ivar, :@tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "C"))),
          s(:send,
            s(:lvar, :c), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :c), :add_comment,
            s(:str, "C"),
            s(:ivar, :@tl)),
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:lvar, :m), :record_location,
            s(:ivar, :@tl)),
          s(:send,
            s(:lvar, :m), :params=,
            s(:str, "(p1, p2)")),
          s(:send,
            s(:lvar, :m), :comment=,
            s(:str, "Stuff with +p1+")),
          s(:send,
            s(:lvar, :c), :add_method,
            s(:lvar, :m)),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:sym, :public)),
          s(:send,
            s(:ivar, :@s), :coverage_level=,
            s(:int, 1)),
          s(:send,
            s(:ivar, :@s), :report),
          s(:lvasgn, :summary,
            s(:send,
              s(:send,
                s(:ivar, :@s), :summary), :accept,
              s(:send, nil, :to_rdoc))),
          s(:send,
            s(:lvar, :summary), :sub!,
            s(:regexp,
              s(:str, "  Elapsed:.*"),
              s(:regopt, :m)),
            s(:str, "")),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "  Files:      0\n"),
              s(:str, "\n"),
              s(:str, "  Classes:    1 (0 undocumented)\n"),
              s(:str, "  Modules:    0 (0 undocumented)\n"),
              s(:str, "  Constants:  0 (0 undocumented)\n"),
              s(:str, "  Attributes: 0 (0 undocumented)\n"),
              s(:str, "  Methods:    1 (0 undocumented)\n"),
              s(:str, "  Parameters: 2 (1 undocumented)\n"),
              s(:str, "\n"),
              s(:str, "  Total:      4 (1 undocumented)\n"),
              s(:str, "   75.00% documented\n"),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :summary),
            s(:lvar, :expected)))),
      s(:def, :to_rdoc,
        s(:args),
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :RDoc), :Markup), :ToRdoc), :new)),
      s(:def, :test_undoc_params,
        s(:args),
        s(:begin,
          s(:lvasgn, :method,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:array),
              s(:str, "m"))),
          s(:send,
            s(:lvar, :method), :params=,
            s(:str, "(a)")),
          s(:send,
            s(:lvar, :method), :comment=,
            s(:send, nil, :comment,
              s(:str, "comment"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :total),
              s(:lvasgn, :undoc)),
            s(:send,
              s(:ivar, :@s), :undoc_params,
              s(:lvar, :method))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:lvar, :total)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a")),
            s(:lvar, :undoc)))),
      s(:def, :test_undoc_params_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :method,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:array),
              s(:str, "m"))),
          s(:send,
            s(:lvar, :method), :params=,
            s(:str, "(&a)")),
          s(:send,
            s(:lvar, :method), :comment=,
            s(:send, nil, :comment,
              s(:str, "+a+"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :total),
              s(:lvasgn, :undoc)),
            s(:send,
              s(:ivar, :@s), :undoc_params,
              s(:lvar, :method))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:lvar, :total)),
          s(:send, nil, :assert_empty,
            s(:lvar, :undoc)))),
      s(:def, :test_undoc_params_documented,
        s(:args),
        s(:begin,
          s(:lvasgn, :method,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:array),
              s(:str, "m"))),
          s(:send,
            s(:lvar, :method), :params=,
            s(:str, "(a)")),
          s(:send,
            s(:lvar, :method), :comment=,
            s(:send, nil, :comment,
              s(:str, "+a+"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :total),
              s(:lvasgn, :undoc)),
            s(:send,
              s(:ivar, :@s), :undoc_params,
              s(:lvar, :method))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:lvar, :total)),
          s(:send, nil, :assert_empty,
            s(:lvar, :undoc)))),
      s(:def, :test_undoc_params_keywords,
        s(:args),
        s(:begin,
          s(:lvasgn, :method,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:array),
              s(:str, "m"))),
          s(:send,
            s(:lvar, :method), :params=,
            s(:str, "(**a)")),
          s(:send,
            s(:lvar, :method), :comment=,
            s(:send, nil, :comment,
              s(:str, "+a+"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :total),
              s(:lvasgn, :undoc)),
            s(:send,
              s(:ivar, :@s), :undoc_params,
              s(:lvar, :method))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:lvar, :total)),
          s(:send, nil, :assert_empty,
            s(:lvar, :undoc)))),
      s(:def, :test_undoc_params_splat,
        s(:args),
        s(:begin,
          s(:lvasgn, :method,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:array),
              s(:str, "m"))),
          s(:send,
            s(:lvar, :method), :params=,
            s(:str, "(*a)")),
          s(:send,
            s(:lvar, :method), :comment=,
            s(:send, nil, :comment,
              s(:str, "+a+"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :total),
              s(:lvasgn, :undoc)),
            s(:send,
              s(:ivar, :@s), :undoc_params,
              s(:lvar, :method))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:lvar, :total)),
          s(:send, nil, :assert_empty,
            s(:lvar, :undoc)))))))
