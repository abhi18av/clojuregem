s(:begin,
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:str, "../xref_test_case"),
      s(:str, "(string)"))),
  s(:class,
    s(:const, nil, :TestRDocNormalModule),
    s(:const, nil, :XrefTestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@mod,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule), :new,
              s(:str, "Mod"))))),
      s(:def, :test_ancestors_module,
        s(:args),
        s(:begin,
          s(:lvasgn, :top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :mod,
            s(:send,
              s(:lvar, :top_level), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "Mod"))),
          s(:lvasgn, :incl,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "Incl"),
              s(:str, ""))),
          s(:send,
            s(:lvar, :mod), :add_include,
            s(:lvar, :incl)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:lvar, :incl), :name)),
            s(:send,
              s(:lvar, :mod), :ancestors)),
          s(:lvasgn, :mod2,
            s(:send,
              s(:lvar, :top_level), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "Inc2"))),
          s(:lvasgn, :inc2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "Inc2"),
              s(:str, ""))),
          s(:send,
            s(:lvar, :mod), :add_include,
            s(:lvar, :inc2)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :mod2),
              s(:send,
                s(:lvar, :incl), :name)),
            s(:send,
              s(:lvar, :mod), :ancestors)))),
      s(:def, :test_aref,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "module-M1"),
            s(:send,
              s(:ivar, :@m1), :aref)),
          s(:send, nil, :assert_equal,
            s(:str, "module-M1::M2"),
            s(:send,
              s(:ivar, :@m1_m2), :aref)))),
      s(:def, :test_definition,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule), :new,
              s(:str, "M"))),
          s(:send, nil, :assert_equal,
            s(:str, "module M"),
            s(:send,
              s(:lvar, :m), :definition)))),
      s(:def, :test_module_eh,
        s(:args),
        s(:send, nil, :assert,
          s(:send,
            s(:ivar, :@mod), :module?))))))
