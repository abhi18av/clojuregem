s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocMarkupToHtml),
    s(:const,
      s(:const,
        s(:const, nil, :RDoc), :Markup), :FormatterTestCase),
    s(:begin,
      s(:send, nil, :add_visitor_tests),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@to,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :ToHtml), :new,
              s(:ivar, :@options))))),
      s(:def, :accept_blank_line,
        s(:args),
        s(:send, nil, :assert_empty,
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_block_quote,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "\n<blockquote>\n<p>quote</p>\n</blockquote>\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_document,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "\n<p>hello</p>\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_heading,
        s(:args),
        s(:begin,
          s(:lvasgn, :links,
            s(:send,
              s(:str, "<span><a href=\"#label-Hello\">&para;</a> "), :+,
              s(:str, "<a href=\"#top\">&uarr;</a></span>"))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n<h5 id=\"label-Hello\">Hello"),
              s(:begin,
                s(:lvar, :links)),
              s(:str, "</h5>\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_heading_1,
        s(:args),
        s(:begin,
          s(:lvasgn, :links,
            s(:send,
              s(:str, "<span><a href=\"#label-Hello\">&para;</a> "), :+,
              s(:str, "<a href=\"#top\">&uarr;</a></span>"))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "\n<h1 id=\"label-Hello\">Hello"),
              s(:begin,
                s(:lvar, :links)),
              s(:str, "</h1>\n")),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_heading_2,
        s(:args),
        s(:begin,
          s(:lvasgn, :links,
            s(:send,
              s(:str, "<span><a href=\"#label-Hello\">&para;</a> "), :+,
              s(:str, "<a href=\"#top\">&uarr;</a></span>"))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "\n<h2 id=\"label-Hello\">Hello"),
              s(:begin,
                s(:lvar, :links)),
              s(:str, "</h2>\n")),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_heading_3,
        s(:args),
        s(:begin,
          s(:lvasgn, :links,
            s(:send,
              s(:str, "<span><a href=\"#label-Hello\">&para;</a> "), :+,
              s(:str, "<a href=\"#top\">&uarr;</a></span>"))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "\n<h3 id=\"label-Hello\">Hello"),
              s(:begin,
                s(:lvar, :links)),
              s(:str, "</h3>\n")),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_heading_4,
        s(:args),
        s(:begin,
          s(:lvasgn, :links,
            s(:send,
              s(:str, "<span><a href=\"#label-Hello\">&para;</a> "), :+,
              s(:str, "<a href=\"#top\">&uarr;</a></span>"))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "\n<h4 id=\"label-Hello\">Hello"),
              s(:begin,
                s(:lvar, :links)),
              s(:str, "</h4>\n")),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_heading_b,
        s(:args),
        s(:begin,
          s(:lvasgn, :links,
            s(:send,
              s(:str, "<span><a href=\"#label-Hello\">&para;</a> "), :+,
              s(:str, "<a href=\"#top\">&uarr;</a></span>"))),
          s(:lvasgn, :inner,
            s(:str, "<strong>Hello</strong>")),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "\n<h1 id=\"label-Hello\">"),
              s(:begin,
                s(:lvar, :inner)),
              s(:begin,
                s(:lvar, :links)),
              s(:str, "</h1>\n")),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_heading_suppressed_crossref,
        s(:args),
        s(:begin,
          s(:lvasgn, :links,
            s(:send,
              s(:str, "<span><a href=\"#label-Hello\">&para;</a> "), :+,
              s(:str, "<a href=\"#top\">&uarr;</a></span>"))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "\n<h1 id=\"label-Hello\">Hello"),
              s(:begin,
                s(:lvar, :links)),
              s(:str, "</h1>\n")),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_list_end_bullet,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, "<ul></ul>\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_list_end_label,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, "<dl class=\"rdoc-list label-list\"></dl>\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_list_end_lalpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, "<ol style=\"list-style-type: lower-alpha\"></ol>\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_list_end_number,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, "<ol></ol>\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_list_end_note,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, "<dl class=\"rdoc-list note-list\"></dl>\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_list_end_ualpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, "<ol style=\"list-style-type: upper-alpha\"></ol>\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_list_item_end_bullet,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "</li>")),
          s(:send,
            s(:ivar, :@to), :in_list_entry))),
      s(:def, :accept_list_item_end_label,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "</dd>")),
          s(:send,
            s(:ivar, :@to), :in_list_entry))),
      s(:def, :accept_list_item_end_lalpha,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "</li>")),
          s(:send,
            s(:ivar, :@to), :in_list_entry))),
      s(:def, :accept_list_item_end_note,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "</dd>")),
          s(:send,
            s(:ivar, :@to), :in_list_entry))),
      s(:def, :accept_list_item_end_number,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "</li>")),
          s(:send,
            s(:ivar, :@to), :in_list_entry))),
      s(:def, :accept_list_item_end_ualpha,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "</li>")),
          s(:send,
            s(:ivar, :@to), :in_list_entry))),
      s(:def, :accept_list_item_start_bullet,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<ul><li>"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_list_item_start_label,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<dl class=\"rdoc-list label-list\"><dt>cat\n<dd>"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_list_item_start_lalpha,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<ol style=\"list-style-type: lower-alpha\"><li>"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_list_item_start_note,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<dl class=\"rdoc-list note-list\"><dt>cat\n<dd>"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_list_item_start_note_2,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "<dl class=\"rdoc-list note-list\"><dt><code>teletype</code>\n"),
              s(:str, "<dd>\n"),
              s(:str, "<p>teletype description</p>\n"),
              s(:str, "</dd></dl>\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_list_item_start_note_multi_description,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "<dl class=\"rdoc-list note-list\"><dt>label\n"),
              s(:str, "<dd>\n"),
              s(:str, "<p>description one</p>\n"),
              s(:str, "</dd><dd>\n"),
              s(:str, "<p>description two</p>\n"),
              s(:str, "</dd></dl>\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_list_item_start_note_multi_label,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "<dl class=\"rdoc-list note-list\"><dt>one\n"),
              s(:str, "<dt>two\n"),
              s(:str, "<dd>\n"),
              s(:str, "<p>two headers</p>\n"),
              s(:str, "</dd></dl>\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_list_item_start_number,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<ol><li>"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_list_item_start_ualpha,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<ol style=\"list-style-type: upper-alpha\"><li>"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_list_start_bullet,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :BULLET)),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:false)),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, "<ul>"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_list_start_label,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :LABEL)),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:false)),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, "<dl class=\"rdoc-list label-list\">"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_list_start_lalpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :LALPHA)),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:false)),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, "<ol style=\"list-style-type: lower-alpha\">"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_list_start_note,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :NOTE)),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:false)),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, "<dl class=\"rdoc-list note-list\">"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_list_start_number,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :NUMBER)),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:false)),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, "<ol>"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_list_start_ualpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :UALPHA)),
            s(:send,
              s(:ivar, :@to), :list)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:false)),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:str, "<ol style=\"list-style-type: upper-alpha\">"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_paragraph,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "\n<p>hi</p>\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_paragraph_b,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "\n<p>reg <strong>bold words</strong> reg</p>\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_paragraph_br,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "\n<p>one<br>two</p>\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_paragraph_break,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "\n<p>hello<br> world</p>\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_paragraph_i,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "\n<p>reg <em>italic words</em> reg</p>\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_paragraph_plus,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "\n<p>reg <code>teletype</code> reg</p>\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_paragraph_star,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "\n<p>reg <strong>bold</strong> reg</p>\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_paragraph_underscore,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "\n<p>reg <em>italic</em> reg</p>\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_raw,
        s(:args),
        s(:begin,
          s(:lvasgn, :raw,
            s(:send,
              s(:dstr,
                s(:str, "<table>\n"),
                s(:str, "<tr><th>Name<th>Count\n"),
                s(:str, "<tr><td>a<td>1\n"),
                s(:str, "<tr><td>b<td>2\n"),
                s(:str, "</table>\n")), :rstrip)),
          s(:send, nil, :assert_equal,
            s(:lvar, :raw),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_rule,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<hr>\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_verbatim,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hi</span>\n  <span class=\"ruby-identifier\">world</span>\n</pre>\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :end_accepting,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "hi"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :start_accepting,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :res)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :in_list_entry)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@to), :list)))),
      s(:def, :list_nested,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "<ul><li>\n"),
              s(:str, "<p>l1</p>\n"),
              s(:str, "<ul><li>\n"),
              s(:str, "<p>l1.1</p>\n"),
              s(:str, "</li></ul>\n"),
              s(:str, "</li><li>\n"),
              s(:str, "<p>l2</p>\n"),
              s(:str, "</li></ul>\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :list_verbatim,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "<ul><li>\n"),
              s(:str, "<p>list stuff</p>\n"),
              s(:str, "\n"),
              s(:str, "<pre>* list\n"),
              s(:str, "  with\n"),
              s(:str, "\n"),
              s(:str, "  second\n"),
              s(:str, "\n"),
              s(:str, "  1. indented\n"),
              s(:str, "  2. numbered\n"),
              s(:str, "\n"),
              s(:str, "  third\n"),
              s(:str, "\n"),
              s(:str, "* second</pre>\n"),
              s(:str, "</li></ul>\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :test_accept_heading_7,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@to), :start_accepting),
          s(:send,
            s(:ivar, :@to), :accept_heading,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Heading), :new,
              s(:int, 7),
              s(:str, "Hello"))),
          s(:lvasgn, :links,
            s(:send,
              s(:str, "<span><a href=\"#label-Hello\">&para;</a> "), :+,
              s(:str, "<a href=\"#top\">&uarr;</a></span>"))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "\n<h6 id=\"label-Hello\">Hello"),
              s(:begin,
                s(:lvar, :links)),
              s(:str, "</h6>\n")),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :test_accept_heading_aref_class,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@to), :code_object=,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass), :new,
              s(:str, "Foo"))),
          s(:send,
            s(:ivar, :@to), :start_accepting),
          s(:send,
            s(:ivar, :@to), :accept_heading,
            s(:send, nil, :head,
              s(:int, 1),
              s(:str, "Hello"))),
          s(:lvasgn, :links,
            s(:send,
              s(:str, "<span><a href=\"#class-Foo-label-Hello\">&para;</a> "), :+,
              s(:str, "<a href=\"#top\">&uarr;</a></span>"))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "\n<h1 id=\"class-Foo-label-Hello\">Hello"),
              s(:begin,
                s(:lvar, :links)),
              s(:str, "</h1>\n")),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :test_accept_heading_aref_method,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@to), :code_object=,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "foo"))),
          s(:send,
            s(:ivar, :@to), :start_accepting),
          s(:send,
            s(:ivar, :@to), :accept_heading,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Heading), :new,
              s(:int, 1),
              s(:str, "Hello"))),
          s(:lvasgn, :links,
            s(:send,
              s(:str, "<span><a href=\"#method-i-foo-label-Hello\">&para;</a> "), :+,
              s(:str, "<a href=\"#top\">&uarr;</a></span>"))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "\n<h1 id=\"method-i-foo-label-Hello\">Hello"),
              s(:begin,
                s(:lvar, :links)),
              s(:str, "</h1>\n")),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :test_accept_heading_pipe,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@options), :pipe=,
            s(:true)),
          s(:send,
            s(:ivar, :@to), :start_accepting),
          s(:send,
            s(:ivar, :@to), :accept_heading,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Heading), :new,
              s(:int, 1),
              s(:str, "Hello"))),
          s(:send, nil, :assert_equal,
            s(:str, "\n<h1 id=\"label-Hello\">Hello</h1>\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :test_accept_paragraph_newline,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@to), :start_accepting),
          s(:send,
            s(:ivar, :@to), :accept_paragraph,
            s(:send, nil, :para,
              s(:str, "hello\n"),
              s(:str, "world\n"))),
          s(:send, nil, :assert_equal,
            s(:str, "\n<p>hello world</p>\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :test_accept_heading_output_decoration,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@options), :output_decoration=,
            s(:false)),
          s(:send,
            s(:ivar, :@to), :start_accepting),
          s(:send,
            s(:ivar, :@to), :accept_heading,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Heading), :new,
              s(:int, 1),
              s(:str, "Hello"))),
          s(:send, nil, :assert_equal,
            s(:str, "\n<h1>Hello<span><a href=\"#label-Hello\">&para;</a> <a href=\"#top\">&uarr;</a></span></h1>\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :test_accept_heading_output_decoration_with_pipe,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@options), :pipe=,
            s(:true)),
          s(:send,
            s(:ivar, :@options), :output_decoration=,
            s(:false)),
          s(:send,
            s(:ivar, :@to), :start_accepting),
          s(:send,
            s(:ivar, :@to), :accept_heading,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Heading), :new,
              s(:int, 1),
              s(:str, "Hello"))),
          s(:send, nil, :assert_equal,
            s(:str, "\n<h1>Hello</h1>\n"),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :test_accept_verbatim_parseable,
        s(:args),
        s(:begin,
          s(:lvasgn, :verb,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Verbatim), :new,
              s(:str, "class C\n"),
              s(:str, "end\n"))),
          s(:send,
            s(:ivar, :@to), :start_accepting),
          s(:send,
            s(:ivar, :@to), :accept_verbatim,
            s(:lvar, :verb)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">C</span>\n"),
              s(:str, "<span class=\"ruby-keyword\">end</span>\n"),
              s(:str, "</pre>\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :test_accept_verbatim_parseable_error,
        s(:args),
        s(:begin,
          s(:lvasgn, :verb,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Verbatim), :new,
              s(:str, "a % 09 # => blah\n"))),
          s(:send,
            s(:ivar, :@to), :start_accepting),
          s(:send,
            s(:ivar, :@to), :accept_verbatim,
            s(:lvar, :verb)),
          s(:lvasgn, :inner,
            s(:send,
              s(:const, nil, :CGI), :escapeHTML,
              s(:str, "a % 09 # => blah"))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "<pre>"),
              s(:begin,
                s(:lvar, :inner)),
              s(:str, "</pre>\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :test_accept_verbatim_pipe,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@options), :pipe=,
            s(:true)),
          s(:lvasgn, :verb,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Verbatim), :new,
              s(:str, "1 + 1\n"))),
          s(:send,
            s(:lvar, :verb), :format=,
            s(:sym, :ruby)),
          s(:send,
            s(:ivar, :@to), :start_accepting),
          s(:send,
            s(:ivar, :@to), :accept_verbatim,
            s(:lvar, :verb)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "<pre><code>1 + 1\n"),
              s(:str, "</code></pre>\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :test_accept_verbatim_ruby,
        s(:args),
        s(:begin,
          s(:lvasgn, :verb,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Verbatim), :new,
              s(:str, "1 + 1\n"))),
          s(:send,
            s(:lvar, :verb), :format=,
            s(:sym, :ruby)),
          s(:send,
            s(:ivar, :@to), :start_accepting),
          s(:send,
            s(:ivar, :@to), :accept_verbatim,
            s(:lvar, :verb)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "<pre class=\"ruby\"><span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span>\n"),
              s(:str, "</pre>\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :test_convert_string,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "&lt;&gt;"),
          s(:send,
            s(:ivar, :@to), :convert_string,
            s(:str, "<>")))),
      s(:def, :test_convert_HYPERLINK_irc,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "irc://irc.freenode.net/#ruby-lang"))),
          s(:send, nil, :assert_equal,
            s(:str, "\n<p><a href=\"irc://irc.freenode.net/#ruby-lang\">irc.freenode.net/#ruby-lang</a></p>\n"),
            s(:lvar, :result)))),
      s(:def, :test_convert_RDOCLINK_label_label,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "rdoc-label:label-One"))),
          s(:send, nil, :assert_equal,
            s(:str, "\n<p><a href=\"#label-One\">One</a></p>\n"),
            s(:lvar, :result)))),
      s(:def, :test_convert_RDOCLINK_label_foottext,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "rdoc-label:foottext-1"))),
          s(:send, nil, :assert_equal,
            s(:str, "\n<p><a href=\"#foottext-1\">1</a></p>\n"),
            s(:lvar, :result)))),
      s(:def, :test_convert_RDOCLINK_label_footmark,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "rdoc-label:footmark-1"))),
          s(:send, nil, :assert_equal,
            s(:str, "\n<p><a href=\"#footmark-1\">1</a></p>\n"),
            s(:lvar, :result)))),
      s(:def, :test_convert_RDOCLINK_ref,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "rdoc-ref:C"))),
          s(:send, nil, :assert_equal,
            s(:str, "\n<p>C</p>\n"),
            s(:lvar, :result)))),
      s(:def, :test_convert_TIDYLINK_footnote,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "text{*1}[rdoc-label:foottext-1:footmark-1]"))),
          s(:send, nil, :assert_equal,
            s(:str, "\n<p>text<sup><a id=\"footmark-1\" href=\"#foottext-1\">1</a></sup></p>\n"),
            s(:lvar, :result)))),
      s(:def, :test_convert_TIDYLINK_multiple,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "{a}[http://example] {b}[http://example]"))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "<p><a href=\"http://example\">a</a> <a href=\"http://example\">b</a></p>\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :result)))),
      s(:def, :test_convert_TIDYLINK_image,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "{rdoc-image:path/to/image.jpg}[http://example.com]"))),
          s(:lvasgn, :expected,
            s(:str, "\n<p><a href=\"http://example.com\"><img src=\"path/to/image.jpg\"></a></p>\n")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :result)))),
      s(:def, :test_convert_TIDYLINK_rdoc_label,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "{foo}[rdoc-label:foottext-1]"))),
          s(:send, nil, :assert_equal,
            s(:str, "\n<p><a href=\"#foottext-1\">foo</a></p>\n"),
            s(:lvar, :result)))),
      s(:def, :test_convert_TIDYLINK_irc,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "{ruby-lang}[irc://irc.freenode.net/#ruby-lang]"))),
          s(:send, nil, :assert_equal,
            s(:str, "\n<p><a href=\"irc://irc.freenode.net/#ruby-lang\">ruby-lang</a></p>\n"),
            s(:lvar, :result)))),
      s(:def, :test_gen_url,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<a href=\"example\">example</a>"),
          s(:send,
            s(:ivar, :@to), :gen_url,
            s(:str, "link:example"),
            s(:str, "example")))),
      s(:def, :test_gen_url_rdoc_label,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<a href=\"#foottext-1\">example</a>"),
          s(:send,
            s(:ivar, :@to), :gen_url,
            s(:str, "rdoc-label:foottext-1"),
            s(:str, "example")))),
      s(:def, :test_gen_url_rdoc_label_id,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<sup><a id=\"footmark-1\" href=\"#foottext-1\">example</a></sup>"),
          s(:send,
            s(:ivar, :@to), :gen_url,
            s(:str, "rdoc-label:foottext-1:footmark-1"),
            s(:str, "example")))),
      s(:def, :test_gen_url_image_url,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<img src=\"http://example.com/image.png\" />"),
          s(:send,
            s(:ivar, :@to), :gen_url,
            s(:str, "http://example.com/image.png"),
            s(:str, "ignored")))),
      s(:def, :test_gen_url_ssl_image_url,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<img src=\"https://example.com/image.png\" />"),
          s(:send,
            s(:ivar, :@to), :gen_url,
            s(:str, "https://example.com/image.png"),
            s(:str, "ignored")))),
      s(:def, :test_handle_special_HYPERLINK_link,
        s(:args),
        s(:begin,
          s(:lvasgn, :special,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Special), :new,
              s(:int, 0),
              s(:str, "link:README.txt"))),
          s(:lvasgn, :link,
            s(:send,
              s(:ivar, :@to), :handle_special_HYPERLINK,
              s(:lvar, :special))),
          s(:send, nil, :assert_equal,
            s(:str, "<a href=\"README.txt\">README.txt</a>"),
            s(:lvar, :link)))),
      s(:def, :test_handle_special_HYPERLINK_irc,
        s(:args),
        s(:begin,
          s(:lvasgn, :special,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Special), :new,
              s(:int, 0),
              s(:str, "irc://irc.freenode.net/#ruby-lang"))),
          s(:lvasgn, :link,
            s(:send,
              s(:ivar, :@to), :handle_special_HYPERLINK,
              s(:lvar, :special))),
          s(:send, nil, :assert_equal,
            s(:str, "<a href=\"irc://irc.freenode.net/#ruby-lang\">irc.freenode.net/#ruby-lang</a>"),
            s(:lvar, :link)))),
      s(:def, :test_list_verbatim_2,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "* one\n    verb1\n    verb2\n* two\n")),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "<ul><li>\n"),
              s(:str, "<p>one</p>\n"),
              s(:str, "\n"),
              s(:str, "<pre class=\"ruby\"><span class=\"ruby-identifier\">verb1</span>\n"),
              s(:str, "<span class=\"ruby-identifier\">verb2</span>\n"),
              s(:str, "</pre>\n"),
              s(:str, "</li><li>\n"),
              s(:str, "<p>two</p>\n"),
              s(:str, "</li></ul>\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@m), :convert,
              s(:lvar, :str),
              s(:ivar, :@to))))),
      s(:def, :test_parseable_eh,
        s(:args),
        s(:begin,
          s(:lvasgn, :valid_syntax,
            s(:array,
              s(:str, "def x() end"),
              s(:str, "def x; end"),
              s(:str, "class C; end"),
              s(:str, "module M end"),
              s(:str, "a # => blah"),
              s(:str, "x { |y| nil }"),
              s(:str, "x do |y| nil end"),
              s(:str, "# only a comment"),
              s(:str, "require \"foo\""),
              s(:str, "cls=\"foo\""))),
          s(:lvasgn, :invalid_syntax,
            s(:array,
              s(:str, "def x end"),
              s(:str, "class C < end"),
              s(:str, "module M < C end"),
              s(:str, "a=># blah"),
              s(:str, "x { |y| ... }"),
              s(:str, "x do |y| ... end"),
              s(:str, "// only a comment"),
              s(:str, "<% require \"foo\" %>"),
              s(:str, "class=\"foo\""))),
          s(:block,
            s(:send,
              s(:lvar, :valid_syntax), :each),
            s(:args,
              s(:arg, :t)),
            s(:send, nil, :assert,
              s(:send,
                s(:ivar, :@to), :parseable?,
                s(:lvar, :t)),
              s(:dstr,
                s(:str, "valid syntax considered invalid: "),
                s(:begin,
                  s(:lvar, :t))))),
          s(:block,
            s(:send,
              s(:lvar, :invalid_syntax), :each),
            s(:args,
              s(:arg, :t)),
            s(:send, nil, :refute,
              s(:send,
                s(:ivar, :@to), :parseable?,
                s(:lvar, :t)),
              s(:dstr,
                s(:str, "invalid syntax considered valid: "),
                s(:begin,
                  s(:lvar, :t))))))),
      s(:def, :test_to_html,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "\n<p><code>--</code></p>\n"),
          s(:send, nil, :util_format,
            s(:str, "<tt>--</tt>")))),
      s(:def, :util_format,
        s(:args,
          s(:arg, :text)),
        s(:begin,
          s(:lvasgn, :paragraph,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
              s(:lvar, :text))),
          s(:send,
            s(:ivar, :@to), :start_accepting),
          s(:send,
            s(:ivar, :@to), :accept_paragraph,
            s(:lvar, :paragraph)),
          s(:send,
            s(:ivar, :@to), :end_accepting))))))
