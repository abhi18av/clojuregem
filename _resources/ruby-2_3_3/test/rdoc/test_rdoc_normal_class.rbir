s(:begin,
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:str, "../xref_test_case"),
      s(:str, "(string)"))),
  s(:class,
    s(:const, nil, :TestRDocNormalClass),
    s(:const, nil, :XrefTestCase),
    s(:begin,
      s(:def, :test_ancestors,
        s(:args),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"))),
          s(:lvasgn, :incl,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "Incl"),
              s(:str, ""))),
          s(:lvasgn, :sub_klass,
            s(:send,
              s(:ivar, :@top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "SubClass"))),
          s(:send,
            s(:lvar, :sub_klass), :superclass=,
            s(:lvar, :klass)),
          s(:send,
            s(:lvar, :sub_klass), :add_include,
            s(:lvar, :incl)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:lvar, :incl), :name),
              s(:lvar, :klass),
              s(:str, "Object")),
            s(:send,
              s(:lvar, :sub_klass), :ancestors)))),
      s(:def, :test_ancestors_multilevel,
        s(:args),
        s(:begin,
          s(:lvasgn, :c1,
            s(:send,
              s(:ivar, :@top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Outer"))),
          s(:lvasgn, :c2,
            s(:send,
              s(:ivar, :@top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Middle"),
              s(:send,
                s(:lvar, :c1), :full_name))),
          s(:lvasgn, :c3,
            s(:send,
              s(:ivar, :@top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Inner"),
              s(:send,
                s(:lvar, :c2), :full_name))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :c2),
              s(:lvar, :c1),
              s(:str, "Object")),
            s(:send,
              s(:lvar, :c3), :ancestors)))),
      s(:def, :test_aref,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "class-C1"),
            s(:send,
              s(:ivar, :@c1), :aref)),
          s(:send, nil, :assert_equal,
            s(:str, "class-C2::C3"),
            s(:send,
              s(:ivar, :@c2_c3), :aref)))),
      s(:def, :test_direct_ancestors,
        s(:args),
        s(:begin,
          s(:lvasgn, :incl,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "Incl"),
              s(:str, ""))),
          s(:lvasgn, :c1,
            s(:send,
              s(:ivar, :@top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Outer"))),
          s(:lvasgn, :c2,
            s(:send,
              s(:ivar, :@top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Middle"),
              s(:send,
                s(:lvar, :c1), :full_name))),
          s(:lvasgn, :c3,
            s(:send,
              s(:ivar, :@top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Inner"),
              s(:send,
                s(:lvar, :c2), :full_name))),
          s(:send,
            s(:lvar, :c3), :add_include,
            s(:lvar, :incl)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:lvar, :incl), :name),
              s(:lvar, :c2)),
            s(:send,
              s(:lvar, :c3), :direct_ancestors)))),
      s(:def, :test_definition,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass), :new,
              s(:str, "C"))),
          s(:send, nil, :assert_equal,
            s(:str, "class C"),
            s(:send,
              s(:lvar, :c), :definition)))))))
