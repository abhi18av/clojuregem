s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocAttr),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@a,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "attr"),
              s(:str, "RW"),
              s(:str, ""))))),
      s(:def, :test_aref,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "attr"),
              s(:str, "RW"),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:str, "attribute-i-attr"),
            s(:send,
              s(:lvar, :m), :aref)))),
      s(:def, :test_arglists,
        s(:args),
        s(:send, nil, :assert_nil,
          s(:send,
            s(:ivar, :@a), :arglists))),
      s(:def, :test_block_params,
        s(:args),
        s(:send, nil, :assert_nil,
          s(:send,
            s(:ivar, :@a), :block_params))),
      s(:def, :test_call_seq,
        s(:args),
        s(:send, nil, :assert_nil,
          s(:send,
            s(:ivar, :@a), :call_seq))),
      s(:def, :test_definition,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "attr_accessor"),
            s(:send,
              s(:ivar, :@a), :definition)),
          s(:send,
            s(:ivar, :@a), :rw=,
            s(:str, "R")),
          s(:send, nil, :assert_equal,
            s(:str, "attr_reader"),
            s(:send,
              s(:ivar, :@a), :definition)),
          s(:send,
            s(:ivar, :@a), :rw=,
            s(:str, "W")),
          s(:send, nil, :assert_equal,
            s(:str, "attr_writer"),
            s(:send,
              s(:ivar, :@a), :definition)))),
      s(:def, :test_full_name,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "(unknown)#attr"),
          s(:send,
            s(:ivar, :@a), :full_name))),
      s(:def, :test_marshal_dump,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:send,
            s(:ivar, :@a), :comment=,
            s(:str, "this is a comment")),
          s(:send,
            s(:ivar, :@a), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :cm,
            s(:send,
              s(:lvar, :tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm), :add_attribute,
            s(:ivar, :@a)),
          s(:lvasgn, :section,
            s(:send,
              s(:send,
                s(:lvar, :cm), :sections), :first)),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:ivar, :@a)))),
          s(:send,
            s(:lvar, :loaded), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@a),
            s(:lvar, :loaded)),
          s(:lvasgn, :comment,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
                s(:str, "this is a comment")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :comment),
            s(:send,
              s(:lvar, :loaded), :comment)),
          s(:send, nil, :assert_equal,
            s(:str, "file.rb"),
            s(:send,
              s(:send,
                s(:lvar, :loaded), :file), :relative_name)),
          s(:send, nil, :assert_equal,
            s(:str, "Klass#attr"),
            s(:send,
              s(:lvar, :loaded), :full_name)),
          s(:send, nil, :assert_equal,
            s(:str, "attr"),
            s(:send,
              s(:lvar, :loaded), :name)),
          s(:send, nil, :assert_equal,
            s(:str, "RW"),
            s(:send,
              s(:lvar, :loaded), :rw)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :loaded), :singleton)),
          s(:send, nil, :assert_equal,
            s(:sym, :public),
            s(:send,
              s(:lvar, :loaded), :visibility)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:lvar, :loaded), :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :cm),
            s(:send,
              s(:lvar, :loaded), :parent)),
          s(:send, nil, :assert_equal,
            s(:lvar, :section),
            s(:send,
              s(:lvar, :loaded), :section)))),
      s(:def, :test_marshal_dump_singleton,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:send,
            s(:ivar, :@a), :comment=,
            s(:str, "this is a comment")),
          s(:send,
            s(:ivar, :@a), :record_location,
            s(:lvar, :tl)),
          s(:lvasgn, :cm,
            s(:send,
              s(:lvar, :tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm), :add_attribute,
            s(:ivar, :@a)),
          s(:lvasgn, :section,
            s(:send,
              s(:send,
                s(:lvar, :cm), :sections), :first)),
          s(:send,
            s(:ivar, :@a), :rw=,
            s(:str, "R")),
          s(:send,
            s(:ivar, :@a), :singleton=,
            s(:true)),
          s(:send,
            s(:ivar, :@a), :visibility=,
            s(:sym, :protected)),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:ivar, :@a)))),
          s(:send,
            s(:lvar, :loaded), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@a),
            s(:lvar, :loaded)),
          s(:lvasgn, :comment,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
                s(:str, "this is a comment")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :comment),
            s(:send,
              s(:lvar, :loaded), :comment)),
          s(:send, nil, :assert_equal,
            s(:str, "Klass::attr"),
            s(:send,
              s(:lvar, :loaded), :full_name)),
          s(:send, nil, :assert_equal,
            s(:str, "attr"),
            s(:send,
              s(:lvar, :loaded), :name)),
          s(:send, nil, :assert_equal,
            s(:str, "R"),
            s(:send,
              s(:lvar, :loaded), :rw)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :loaded), :singleton)),
          s(:send, nil, :assert_equal,
            s(:sym, :protected),
            s(:send,
              s(:lvar, :loaded), :visibility)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:lvar, :loaded), :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :cm),
            s(:send,
              s(:lvar, :loaded), :parent)),
          s(:send, nil, :assert_equal,
            s(:lvar, :section),
            s(:send,
              s(:lvar, :loaded), :section)))),
      s(:def, :test_marshal_load_version_1,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :cm,
            s(:send,
              s(:lvar, :tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"))),
          s(:lvasgn, :section,
            s(:send,
              s(:send,
                s(:lvar, :cm), :sections), :first)),
          s(:lvasgn, :data,
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:str, "\u0004\bU:\u000FRDoc::Attr[\fi\u0006I\"\tattr\u0006:\u0006EF"), :+,
                    s(:str, "\"\u000FKlass#attrI\"\aRW\u0006;\u0006F:\vpublic")), :+,
                  s(:str, "o:\eRDoc::Markup::Document\u0006:\v@parts[\u0006")), :+,
                s(:str, "o:\u001CRDoc::Markup::Paragraph\u0006;\t[\u0006I")), :+,
              s(:str, "\"\u0016this is a comment\u0006;\u0006FF"))),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:lvar, :data))),
          s(:send,
            s(:lvar, :loaded), :store=,
            s(:ivar, :@store)),
          s(:lvasgn, :comment,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
                s(:str, "this is a comment")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :comment),
            s(:send,
              s(:lvar, :loaded), :comment)),
          s(:send, nil, :assert_equal,
            s(:str, "Klass#attr"),
            s(:send,
              s(:lvar, :loaded), :full_name)),
          s(:send, nil, :assert_equal,
            s(:str, "attr"),
            s(:send,
              s(:lvar, :loaded), :name)),
          s(:send, nil, :assert_equal,
            s(:str, "RW"),
            s(:send,
              s(:lvar, :loaded), :rw)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :loaded), :singleton)),
          s(:send, nil, :assert_equal,
            s(:sym, :public),
            s(:send,
              s(:lvar, :loaded), :visibility)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :loaded), :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :cm),
            s(:send,
              s(:lvar, :loaded), :parent)),
          s(:send, nil, :assert_equal,
            s(:lvar, :section),
            s(:send,
              s(:lvar, :loaded), :section)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :loaded), :display?)))),
      s(:def, :test_marshal_load_version_2,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :cm,
            s(:send,
              s(:lvar, :tl), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"))),
          s(:lvasgn, :section,
            s(:send,
              s(:send,
                s(:lvar, :cm), :sections), :first)),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:str, "\u0004\bU:\u000FRDoc::Attr[\ri\aI\"\tattr\u0006"), :+,
                        s(:str, ":\u0006ETI\"\u000FKlass#attr\u0006;\u0006TI\"\aRW\u0006")), :+,
                      s(:str, ";\u0006T:\vpublico:\eRDoc::Markup::Document\a")), :+,
                    s(:str, ":\v@parts[\u0006o:\u001CRDoc::Markup::Paragraph\u0006;")), :+,
                  s(:str, "\t[\u0006I\"\u0016this is a comment\u0006;\u0006T:\n")), :+,
                s(:str, "@file0FI\"\ffile.rb\u0006;\u0006T")))),
          s(:send,
            s(:lvar, :loaded), :store=,
            s(:ivar, :@store)),
          s(:lvasgn, :comment,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "this is a comment")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :comment),
            s(:send,
              s(:lvar, :loaded), :comment)),
          s(:send, nil, :assert_equal,
            s(:str, "Klass#attr"),
            s(:send,
              s(:lvar, :loaded), :full_name)),
          s(:send, nil, :assert_equal,
            s(:str, "attr"),
            s(:send,
              s(:lvar, :loaded), :name)),
          s(:send, nil, :assert_equal,
            s(:str, "RW"),
            s(:send,
              s(:lvar, :loaded), :rw)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :loaded), :singleton)),
          s(:send, nil, :assert_equal,
            s(:sym, :public),
            s(:send,
              s(:lvar, :loaded), :visibility)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:lvar, :loaded), :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :cm),
            s(:send,
              s(:lvar, :loaded), :parent)),
          s(:send, nil, :assert_equal,
            s(:lvar, :section),
            s(:send,
              s(:lvar, :loaded), :section)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :loaded), :display?)))),
      s(:def, :test_params,
        s(:args),
        s(:send, nil, :assert_nil,
          s(:send,
            s(:ivar, :@a), :params))),
      s(:def, :test_singleton,
        s(:args),
        s(:send, nil, :refute,
          s(:send,
            s(:ivar, :@a), :singleton))),
      s(:def, :test_type,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "instance"),
            s(:send,
              s(:ivar, :@a), :type)),
          s(:send,
            s(:ivar, :@a), :singleton=,
            s(:true)),
          s(:send, nil, :assert_equal,
            s(:str, "class"),
            s(:send,
              s(:ivar, :@a), :type)))))))
