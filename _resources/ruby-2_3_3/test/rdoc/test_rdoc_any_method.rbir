s(:begin,
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:str, "../xref_test_case"),
      s(:str, "(string)"))),
  s(:class,
    s(:const, nil, :TestRDocAnyMethod),
    s(:const, nil, :XrefTestCase),
    s(:begin,
      s(:def, :test_aref,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "method?"))),
          s(:send, nil, :assert_equal,
            s(:str, "method-i-method-3F"),
            s(:send,
              s(:lvar, :m), :aref)),
          s(:send,
            s(:lvar, :m), :singleton=,
            s(:true)),
          s(:send, nil, :assert_equal,
            s(:str, "method-c-method-3F"),
            s(:send,
              s(:lvar, :m), :aref)))),
      s(:def, :test_arglists,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "method"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :m), :arglists)),
          s(:send,
            s(:lvar, :m), :params=,
            s(:str, "(a, b)")),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "c, d")),
          s(:send, nil, :assert_equal,
            s(:str, "method(a, b) { |c, d| ... }"),
            s(:send,
              s(:lvar, :m), :arglists)),
          s(:lvasgn, :call_seq,
            s(:dstr,
              s(:str, "method(a) { |c| ... }\n"),
              s(:str, "method(a, b) { |c, d| ... }\n"))),
          s(:send,
            s(:lvar, :m), :call_seq=,
            s(:send,
              s(:lvar, :call_seq), :dup)),
          s(:send, nil, :assert_equal,
            s(:lvar, :call_seq),
            s(:send,
              s(:lvar, :m), :arglists)))),
      s(:def, :test_c_function,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c1_m), :c_function=,
            s(:str, "my_c1_m")),
          s(:send, nil, :assert_equal,
            s(:str, "my_c1_m"),
            s(:send,
              s(:ivar, :@c1_m), :c_function)))),
      s(:def, :test_call_seq_equals,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:nil))),
          s(:send,
            s(:lvar, :m), :call_seq=,
            s(:str, "")),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :m), :call_seq)),
          s(:send,
            s(:lvar, :m), :call_seq=,
            s(:str, "foo")),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:lvar, :m), :call_seq)))),
      s(:def, :test_full_name,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "C1::m"),
          s(:send,
            s(:send,
              s(:send,
                s(:ivar, :@c1), :method_list), :first), :full_name))),
      s(:def, :test_is_alias_for,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:ivar, :@c2_b),
            s(:send,
              s(:ivar, :@c2_a), :is_alias_for)),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:ivar, :@c2_a)))),
          s(:send,
            s(:lvar, :loaded), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@c2_b),
            s(:send,
              s(:lvar, :loaded), :is_alias_for),
            s(:str, "Marshal.load")),
          s(:lvasgn, :m1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m1"))),
          s(:send,
            s(:lvar, :m1), :store=,
            s(:ivar, :@store)),
          s(:send,
            s(:lvar, :m1), :instance_variable_set,
            s(:sym, :@is_alias_for),
            s(:array,
              s(:str, "Missing"),
              s(:false),
              s(:str, "method"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :m1), :is_alias_for),
            s(:str, "missing alias")))),
      s(:def, :test_markup_code,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:array,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :RubyToken), :TkCONSTANT), :new,
                s(:int, 0),
                s(:int, 0),
                s(:int, 0),
                s(:str, "CONSTANT")))),
          s(:send,
            s(:ivar, :@c2_a), :collect_tokens),
          s(:send,
            s(:ivar, :@c2_a), :add_tokens,
            s(:splat,
              s(:lvar, :tokens))),
          s(:lvasgn, :expected,
            s(:str, "<span class=\"ruby-constant\">CONSTANT</span>")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@c2_a), :markup_code)))),
      s(:def, :test_markup_code_empty,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, ""),
          s(:send,
            s(:ivar, :@c2_a), :markup_code))),
      s(:def, :test_marshal_dump,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@store), :path=,
            s(:send,
              s(:const, nil, :Dir), :tmpdir)),
          s(:lvasgn, :top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "method"))),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "some_block")),
          s(:send,
            s(:lvar, :m), :call_seq=,
            s(:str, "call_seq")),
          s(:send,
            s(:lvar, :m), :comment=,
            s(:str, "this is a comment")),
          s(:send,
            s(:lvar, :m), :params=,
            s(:str, "param")),
          s(:send,
            s(:lvar, :m), :record_location,
            s(:lvar, :top_level)),
          s(:lvasgn, :cm,
            s(:send,
              s(:lvar, :top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm), :add_method,
            s(:lvar, :m)),
          s(:lvasgn, :section,
            s(:send,
              s(:send,
                s(:lvar, :cm), :sections), :first)),
          s(:lvasgn, :al,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Alias), :new,
              s(:nil),
              s(:str, "method"),
              s(:str, "aliased"),
              s(:str, "alias comment"))),
          s(:lvasgn, :al_m,
            s(:send,
              s(:lvar, :m), :add_alias,
              s(:lvar, :al),
              s(:lvar, :cm))),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:lvar, :m)))),
          s(:send,
            s(:lvar, :loaded), :store=,
            s(:ivar, :@store)),
          s(:lvasgn, :comment,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
                s(:str, "this is a comment")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :m),
            s(:lvar, :loaded)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:lvar, :al_m), :name)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :aliases), :map),
              s(:args,
                s(:arg, :alas)),
              s(:send,
                s(:lvar, :alas), :name))),
          s(:send, nil, :assert_equal,
            s(:str, "some_block"),
            s(:send,
              s(:lvar, :loaded), :block_params)),
          s(:send, nil, :assert_equal,
            s(:str, "call_seq"),
            s(:send,
              s(:lvar, :loaded), :call_seq)),
          s(:send, nil, :assert_equal,
            s(:lvar, :comment),
            s(:send,
              s(:lvar, :loaded), :comment)),
          s(:send, nil, :assert_equal,
            s(:lvar, :top_level),
            s(:send,
              s(:lvar, :loaded), :file)),
          s(:send, nil, :assert_equal,
            s(:str, "Klass#method"),
            s(:send,
              s(:lvar, :loaded), :full_name)),
          s(:send, nil, :assert_equal,
            s(:str, "method"),
            s(:send,
              s(:lvar, :loaded), :name)),
          s(:send, nil, :assert_equal,
            s(:str, "param"),
            s(:send,
              s(:lvar, :loaded), :params)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :loaded), :singleton)),
          s(:send, nil, :assert_equal,
            s(:sym, :public),
            s(:send,
              s(:lvar, :loaded), :visibility)),
          s(:send, nil, :assert_equal,
            s(:lvar, :cm),
            s(:send,
              s(:lvar, :loaded), :parent)),
          s(:send, nil, :assert_equal,
            s(:lvar, :section),
            s(:send,
              s(:lvar, :loaded), :section)))),
      s(:def, :test_marshal_load_aliased_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :aliased_method,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:ivar, :@c2_a)))),
          s(:send,
            s(:lvar, :aliased_method), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :assert_equal,
            s(:str, "C2#a"),
            s(:send,
              s(:lvar, :aliased_method), :full_name)),
          s(:send, nil, :assert_equal,
            s(:str, "C2"),
            s(:send,
              s(:lvar, :aliased_method), :parent_name)),
          s(:send, nil, :assert_equal,
            s(:str, "()"),
            s(:send,
              s(:lvar, :aliased_method), :params)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@c2_b),
            s(:send,
              s(:lvar, :aliased_method), :is_alias_for),
            s(:str, "is_alias_for")),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :aliased_method), :display?)))),
      s(:def, :test_marshal_load_class_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :class_method,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:send,
                  s(:send,
                    s(:ivar, :@c1), :method_list), :first)))),
          s(:send, nil, :assert_equal,
            s(:str, "C1::m"),
            s(:send,
              s(:lvar, :class_method), :full_name)),
          s(:send, nil, :assert_equal,
            s(:str, "C1"),
            s(:send,
              s(:lvar, :class_method), :parent_name)),
          s(:send, nil, :assert_equal,
            s(:str, "()"),
            s(:send,
              s(:lvar, :class_method), :params)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :class_method), :display?)))),
      s(:def, :test_marshal_load_instance_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :instance_method,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:send,
                  s(:send,
                    s(:ivar, :@c1), :method_list), :last)))),
          s(:send, nil, :assert_equal,
            s(:str, "C1#m"),
            s(:send,
              s(:lvar, :instance_method), :full_name)),
          s(:send, nil, :assert_equal,
            s(:str, "C1"),
            s(:send,
              s(:lvar, :instance_method), :parent_name)),
          s(:send, nil, :assert_equal,
            s(:str, "(foo)"),
            s(:send,
              s(:lvar, :instance_method), :params)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :instance_method), :display?)))),
      s(:def, :test_marshal_load_version_0,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@store), :path=,
            s(:send,
              s(:const, nil, :Dir), :tmpdir)),
          s(:lvasgn, :top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "method"))),
          s(:lvasgn, :cm,
            s(:send,
              s(:lvar, :top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm), :add_method,
            s(:lvar, :m)),
          s(:lvasgn, :section,
            s(:send,
              s(:send,
                s(:lvar, :cm), :sections), :first)),
          s(:lvasgn, :al,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Alias), :new,
              s(:nil),
              s(:str, "method"),
              s(:str, "aliased"),
              s(:str, "alias comment"))),
          s(:lvasgn, :al_m,
            s(:send,
              s(:lvar, :m), :add_alias,
              s(:lvar, :al),
              s(:lvar, :cm))),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:str, "\u0004\bU:\u0014RDoc::AnyMethod[\u000Fi\u0000I"), :+,
                              s(:str, "\"\vmethod\u0006:\u0006EF\"\u0011Klass#method0:\vpublic")), :+,
                            s(:str, "o:\eRDoc::Markup::Document\u0006:\v@parts[\u0006")), :+,
                          s(:str, "o:\u001CRDoc::Markup::Paragraph\u0006;\t[\u0006I")), :+,
                        s(:str, "\"\u0016this is a comment\u0006;\u0006FI")), :+,
                      s(:str, "\"\rcall_seq\u0006;\u0006FI\"\u000Fsome_block\u0006;\u0006F")), :+,
                    s(:str, "[\u0006[\aI\"\faliased\u0006;\u0006Fo;\b\u0006;\t[\u0006")), :+,
                  s(:str, "o;\n\u0006;\t[\u0006I\"\u0012alias comment\u0006;\u0006FI")), :+,
                s(:str, "\"\nparam\u0006;\u0006F")))),
          s(:send,
            s(:lvar, :loaded), :store=,
            s(:ivar, :@store)),
          s(:lvasgn, :comment,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
                s(:str, "this is a comment")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :m),
            s(:lvar, :loaded)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:lvar, :al_m), :name)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :aliases), :map),
              s(:args,
                s(:arg, :alas)),
              s(:send,
                s(:lvar, :alas), :name))),
          s(:send, nil, :assert_equal,
            s(:str, "some_block"),
            s(:send,
              s(:lvar, :loaded), :block_params)),
          s(:send, nil, :assert_equal,
            s(:str, "call_seq"),
            s(:send,
              s(:lvar, :loaded), :call_seq)),
          s(:send, nil, :assert_equal,
            s(:lvar, :comment),
            s(:send,
              s(:lvar, :loaded), :comment)),
          s(:send, nil, :assert_equal,
            s(:str, "Klass#method"),
            s(:send,
              s(:lvar, :loaded), :full_name)),
          s(:send, nil, :assert_equal,
            s(:str, "method"),
            s(:send,
              s(:lvar, :loaded), :name)),
          s(:send, nil, :assert_equal,
            s(:str, "param"),
            s(:send,
              s(:lvar, :loaded), :params)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :loaded), :singleton)),
          s(:send, nil, :assert_equal,
            s(:sym, :public),
            s(:send,
              s(:lvar, :loaded), :visibility)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :loaded), :file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :cm),
            s(:send,
              s(:lvar, :loaded), :parent)),
          s(:send, nil, :assert_equal,
            s(:lvar, :section),
            s(:send,
              s(:lvar, :loaded), :section)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :loaded), :is_alias_for)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :loaded), :display?)))),
      s(:def, :test_marshal_dump_version_2,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@store), :path=,
            s(:send,
              s(:const, nil, :Dir), :tmpdir)),
          s(:lvasgn, :top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "method"))),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "some_block")),
          s(:send,
            s(:lvar, :m), :call_seq=,
            s(:str, "call_seq")),
          s(:send,
            s(:lvar, :m), :comment=,
            s(:str, "this is a comment")),
          s(:send,
            s(:lvar, :m), :params=,
            s(:str, "param")),
          s(:send,
            s(:lvar, :m), :record_location,
            s(:lvar, :top_level)),
          s(:lvasgn, :cm,
            s(:send,
              s(:lvar, :top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :cm), :add_method,
            s(:lvar, :m)),
          s(:lvasgn, :section,
            s(:send,
              s(:send,
                s(:lvar, :cm), :sections), :first)),
          s(:lvasgn, :al,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Alias), :new,
              s(:nil),
              s(:str, "method"),
              s(:str, "aliased"),
              s(:str, "alias comment"))),
          s(:lvasgn, :al_m,
            s(:send,
              s(:lvar, :m), :add_alias,
              s(:lvar, :al),
              s(:lvar, :cm))),
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:str, "\u0004\bU:\u0014RDoc::AnyMethod[\u0014i\bI"), :+,
                                      s(:str, "\"\vmethod\u0006:\u0006ETI")), :+,
                                    s(:str, "\"\u0011Klass#method\u0006;\u0006T0:\vpublic")), :+,
                                  s(:str, "o:\eRDoc::Markup::Document\b:\v@parts[\u0006")), :+,
                                s(:str, "o:\u001CRDoc::Markup::Paragraph\u0006;\t[\u0006I")), :+,
                              s(:str, "\"\u0016this is a comment\u0006;\u0006T:\n@file0")), :+,
                            s(:str, ":0@omit_headings_from_table_of_contents_below0")), :+,
                          s(:str, "I\"\rcall_seq\u0006;\u0006TI\"\u000Fsome_block\u0006")), :+,
                        s(:str, ";\u0006T[\u0006[\aI\"\faliased\u0006;\u0006To;\b\b;\t")), :+,
                      s(:str, "[\u0006o;\n\u0006;\t[\u0006I\"\u0012alias comment\u0006")), :+,
                    s(:str, ";\u0006T;\v0;\f0I\"\nparam\u0006;\u0006TI")), :+,
                  s(:str, "\"\ffile.rb\u0006;\u0006TFI\"\nKlass\u0006;\u0006T")), :+,
                s(:str, "c\u0016RDoc::ClassModule0")))),
          s(:send,
            s(:lvar, :loaded), :store=,
            s(:ivar, :@store)),
          s(:lvasgn, :comment,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "this is a comment")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :m),
            s(:lvar, :loaded)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:lvar, :al_m), :name)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :loaded), :aliases), :map),
              s(:args,
                s(:arg, :alas)),
              s(:send,
                s(:lvar, :alas), :name))),
          s(:send, nil, :assert_equal,
            s(:str, "some_block"),
            s(:send,
              s(:lvar, :loaded), :block_params)),
          s(:send, nil, :assert_equal,
            s(:str, "call_seq"),
            s(:send,
              s(:lvar, :loaded), :call_seq)),
          s(:send, nil, :assert_equal,
            s(:lvar, :comment),
            s(:send,
              s(:lvar, :loaded), :comment)),
          s(:send, nil, :assert_equal,
            s(:lvar, :top_level),
            s(:send,
              s(:lvar, :loaded), :file)),
          s(:send, nil, :assert_equal,
            s(:str, "Klass#method"),
            s(:send,
              s(:lvar, :loaded), :full_name)),
          s(:send, nil, :assert_equal,
            s(:str, "method"),
            s(:send,
              s(:lvar, :loaded), :name)),
          s(:send, nil, :assert_equal,
            s(:str, "param"),
            s(:send,
              s(:lvar, :loaded), :params)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :loaded), :singleton)),
          s(:send, nil, :assert_equal,
            s(:sym, :public),
            s(:send,
              s(:lvar, :loaded), :visibility)),
          s(:send, nil, :assert_equal,
            s(:lvar, :cm),
            s(:send,
              s(:lvar, :loaded), :parent)),
          s(:send, nil, :assert_equal,
            s(:lvar, :section),
            s(:send,
              s(:lvar, :loaded), :section)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :loaded), :is_alias_for)))),
      s(:def, :test_name,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:nil))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :m), :name)))),
      s(:def, :test_name_call_seq,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:nil))),
          s(:send,
            s(:lvar, :m), :call_seq=,
            s(:str, "yields(name)\nyields(name, description)")),
          s(:send, nil, :assert_equal,
            s(:str, "yields"),
            s(:send,
              s(:lvar, :m), :name)))),
      s(:def, :test_name_call_seq_dot,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:nil))),
          s(:send,
            s(:lvar, :m), :call_seq=,
            s(:str, "obj.yields(name)\nobj.yields(name, description)")),
          s(:send, nil, :assert_equal,
            s(:str, "yields"),
            s(:send,
              s(:lvar, :m), :name)))),
      s(:def, :test_param_list_block_params,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "method"))),
          s(:send,
            s(:lvar, :m), :parent=,
            s(:ivar, :@c1)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "c, d")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c"),
              s(:str, "d")),
            s(:send,
              s(:lvar, :m), :param_list)))),
      s(:def, :test_param_list_call_seq,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "method"))),
          s(:send,
            s(:lvar, :m), :parent=,
            s(:ivar, :@c1)),
          s(:lvasgn, :call_seq,
            s(:dstr,
              s(:str, "method(a) { |c| ... }\n"),
              s(:str, "method(a, b) { |c, d| ... }\n"))),
          s(:send,
            s(:lvar, :m), :call_seq=,
            s(:lvar, :call_seq)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a"),
              s(:str, "b"),
              s(:str, "c"),
              s(:str, "d")),
            s(:send,
              s(:lvar, :m), :param_list)))),
      s(:def, :test_param_list_default,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "method"))),
          s(:send,
            s(:lvar, :m), :parent=,
            s(:ivar, :@c1)),
          s(:send,
            s(:lvar, :m), :params=,
            s(:str, "(b = default)")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "b")),
            s(:send,
              s(:lvar, :m), :param_list)))),
      s(:def, :test_param_list_params,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "method"))),
          s(:send,
            s(:lvar, :m), :parent=,
            s(:ivar, :@c1)),
          s(:send,
            s(:lvar, :m), :params=,
            s(:str, "(a, b)")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a"),
              s(:str, "b")),
            s(:send,
              s(:lvar, :m), :param_list)))),
      s(:def, :test_param_list_params_block_params,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "method"))),
          s(:send,
            s(:lvar, :m), :parent=,
            s(:ivar, :@c1)),
          s(:send,
            s(:lvar, :m), :params=,
            s(:str, "(a, b)")),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "c, d")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a"),
              s(:str, "b"),
              s(:str, "c"),
              s(:str, "d")),
            s(:send,
              s(:lvar, :m), :param_list)))),
      s(:def, :test_param_list_empty_params_with_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "method"))),
          s(:send,
            s(:lvar, :m), :parent=,
            s(:ivar, :@c1)),
          s(:send,
            s(:lvar, :m), :params=,
            s(:str, "()")),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "a, b")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a"),
              s(:str, "b")),
            s(:send,
              s(:lvar, :m), :param_list)))),
      s(:def, :test_param_list_ampersand_param_block_params,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "method"))),
          s(:send,
            s(:lvar, :m), :parent=,
            s(:ivar, :@c1)),
          s(:send,
            s(:lvar, :m), :params=,
            s(:str, "(a, b, &block)")),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "c, d")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a"),
              s(:str, "b"),
              s(:str, "c"),
              s(:str, "d")),
            s(:send,
              s(:lvar, :m), :param_list)))),
      s(:def, :test_param_list_ampersand_param,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "method"))),
          s(:send,
            s(:lvar, :m), :parent=,
            s(:ivar, :@c1)),
          s(:send,
            s(:lvar, :m), :params=,
            s(:str, "(a, b, &block)")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a"),
              s(:str, "b"),
              s(:str, "block")),
            s(:send,
              s(:lvar, :m), :param_list)))),
      s(:def, :test_param_seq,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "method"))),
          s(:send,
            s(:lvar, :m), :parent=,
            s(:ivar, :@c1)),
          s(:send,
            s(:lvar, :m), :params=,
            s(:str, "a")),
          s(:send, nil, :assert_equal,
            s(:str, "(a)"),
            s(:send,
              s(:lvar, :m), :param_seq)),
          s(:send,
            s(:lvar, :m), :params=,
            s(:str, "(a)")),
          s(:send, nil, :assert_equal,
            s(:str, "(a)"),
            s(:send,
              s(:lvar, :m), :param_seq)),
          s(:send,
            s(:lvar, :m), :params=,
            s(:str, "(a,\n  b)")),
          s(:send, nil, :assert_equal,
            s(:str, "(a, b)"),
            s(:send,
              s(:lvar, :m), :param_seq)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "c,\n  d")),
          s(:send, nil, :assert_equal,
            s(:str, "(a, b) { |c, d| ... }"),
            s(:send,
              s(:lvar, :m), :param_seq)))),
      s(:def, :test_param_seq_call_seq,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "method"))),
          s(:send,
            s(:lvar, :m), :parent=,
            s(:ivar, :@c1)),
          s(:lvasgn, :call_seq,
            s(:dstr,
              s(:str, "method(a) { |c| ... }\n"),
              s(:str, "method(a, b) { |c, d| ... }\n"))),
          s(:send,
            s(:lvar, :m), :call_seq=,
            s(:lvar, :call_seq)),
          s(:send, nil, :assert_equal,
            s(:str, "(a, b) { |c, d| }"),
            s(:send,
              s(:lvar, :m), :param_seq)))),
      s(:def, :test_parent_name,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "C1"),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@c1), :method_list), :first), :parent_name)),
          s(:send, nil, :assert_equal,
            s(:str, "C1"),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@c1), :method_list), :last), :parent_name)))),
      s(:def, :test_store_equals,
        s(:args),
        s(:begin,
          s(:lvasgn, :loaded,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:send,
                  s(:send,
                    s(:ivar, :@c1), :method_list), :last)))),
          s(:send,
            s(:lvar, :loaded), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@store),
            s(:send,
              s(:send,
                s(:lvar, :loaded), :file), :store)))),
      s(:def, :test_superclass_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :m3,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:str, ""),
              s(:str, "no_super"))),
          s(:lvasgn, :m2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:str, ""),
              s(:str, "supers"))),
          s(:send,
            s(:lvar, :m2), :calls_super=,
            s(:true)),
          s(:lvasgn, :m1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:str, ""),
              s(:str, "supers"))),
          s(:lvasgn, :c1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass), :new,
              s(:str, "Outer"))),
          s(:send,
            s(:lvar, :c1), :store=,
            s(:ivar, :@store)),
          s(:send,
            s(:lvar, :c1), :add_method,
            s(:lvar, :m1)),
          s(:lvasgn, :c2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass), :new,
              s(:str, "Inner"),
              s(:lvar, :c1))),
          s(:send,
            s(:lvar, :c2), :store=,
            s(:ivar, :@store)),
          s(:send,
            s(:lvar, :c2), :add_method,
            s(:lvar, :m2)),
          s(:send,
            s(:lvar, :c2), :add_method,
            s(:lvar, :m3)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :m3), :superclass_method),
            s(:str, "no superclass method for no_super")),
          s(:send, nil, :assert_equal,
            s(:lvar, :m1),
            s(:send,
              s(:lvar, :m2), :superclass_method),
            s(:str, "superclass method missing for supers")))),
      s(:def, :test_superclass_method_multilevel,
        s(:args),
        s(:begin,
          s(:lvasgn, :m2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:str, ""),
              s(:str, "supers"))),
          s(:send,
            s(:lvar, :m2), :calls_super=,
            s(:true)),
          s(:lvasgn, :m1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:str, ""),
              s(:str, "supers"))),
          s(:lvasgn, :c1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass), :new,
              s(:str, "Outer"))),
          s(:send,
            s(:lvar, :c1), :store=,
            s(:ivar, :@store)),
          s(:send,
            s(:lvar, :c1), :add_method,
            s(:lvar, :m1)),
          s(:lvasgn, :c2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass), :new,
              s(:str, "Middle"),
              s(:lvar, :c1))),
          s(:send,
            s(:lvar, :c2), :store=,
            s(:ivar, :@store)),
          s(:lvasgn, :c3,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass), :new,
              s(:str, "Inner"),
              s(:lvar, :c2))),
          s(:send,
            s(:lvar, :c3), :store=,
            s(:ivar, :@store)),
          s(:send,
            s(:lvar, :c3), :add_method,
            s(:lvar, :m2)),
          s(:send, nil, :assert_equal,
            s(:lvar, :m1),
            s(:send,
              s(:lvar, :m2), :superclass_method),
            s(:str, "superclass method missing for supers")))))))
