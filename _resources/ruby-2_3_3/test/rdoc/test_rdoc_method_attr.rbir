s(:begin,
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:str, "../xref_test_case"),
      s(:str, "(string)"))),
  s(:class,
    s(:const, nil, :TestRDocMethodAttr),
    s(:const, nil, :XrefTestCase),
    s(:begin,
      s(:def, :test_initialize_copy,
        s(:args),
        s(:send, nil, :refute_same,
          s(:send,
            s(:ivar, :@c1_m), :full_name),
          s(:send,
            s(:send,
              s(:ivar, :@c1_m), :dup), :full_name))),
      s(:def, :test_block_params_equal,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :MethodAttr), :new,
              s(:nil),
              s(:str, "foo"))),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "")),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "a_var")),
          s(:send, nil, :assert_equal,
            s(:str, "a_var"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "()")),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "(a_var, b_var)")),
          s(:send, nil, :assert_equal,
            s(:str, "a_var, b_var"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, ".to_s + \"</\#{element.upcase}>\"")),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "i.name")),
          s(:send, nil, :assert_equal,
            s(:str, "name"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "attr.expanded_name, attr.value")),
          s(:send, nil, :assert_equal,
            s(:str, "expanded_name, value"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "expanded_name, attr.value")),
          s(:send, nil, :assert_equal,
            s(:str, "expanded_name, value"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "attr.expanded_name, value")),
          s(:send, nil, :assert_equal,
            s(:str, "expanded_name, value"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "(@base_notifier)")),
          s(:send, nil, :assert_equal,
            s(:str, "base_notifier"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "if @signal_status == :IN_LOAD")),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "e if e.kind_of? Element")),
          s(:send, nil, :assert_equal,
            s(:str, "e"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "(e, f) if e.kind_of? Element")),
          s(:send, nil, :assert_equal,
            s(:str, "e, f"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "back_path, back_name")),
          s(:send, nil, :assert_equal,
            s(:str, "back_path, back_name"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "(*a[1..-1])")),
          s(:send, nil, :assert_equal,
            s(:str, "*a"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "@@context[:node] if defined? @@context[:node].namespace")),
          s(:send, nil, :assert_equal,
            s(:str, "context"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "(result, klass.const_get(constant_name))")),
          s(:send, nil, :assert_equal,
            s(:str, "result, const"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "name.to_s if (bitmap & bit) != 0")),
          s(:send, nil, :assert_equal,
            s(:str, "name"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "line unless line.deleted")),
          s(:send, nil, :assert_equal,
            s(:str, "line"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "str + rs")),
          s(:send, nil, :assert_equal,
            s(:str, "str"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "f+rs")),
          s(:send, nil, :assert_equal,
            s(:str, "f"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "[user, realm, hash[user]]")),
          s(:send, nil, :assert_equal,
            s(:str, "user, realm, hash"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "proc{|rc| rc == \"rc\" ? irbrc : irbrc+rc| ... }")),
          s(:send, nil, :assert_equal,
            s(:str, "proc"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "lambda { |x| x.to_i }")),
          s(:send, nil, :assert_equal,
            s(:str, "lambda"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "$&")),
          s(:send, nil, :assert_equal,
            s(:str, "str"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "Inflections.instance")),
          s(:send, nil, :assert_equal,
            s(:str, "instance"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "self.class::STARTED")),
          s(:send, nil, :assert_equal,
            s(:str, "STARTED"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "Test::Unit::TestCase::STARTED")),
          s(:send, nil, :assert_equal,
            s(:str, "STARTED"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "ActiveSupport::OptionMerger.new(self, options)")),
          s(:send, nil, :assert_equal,
            s(:str, "option_merger"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, ", msg")),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "[size.to_s(16), term, chunk, term].join")),
          s(:send, nil, :assert_equal,
            s(:str, "[size, term, chunk, term].join"),
            s(:send,
              s(:lvar, :m), :block_params)),
          s(:send,
            s(:lvar, :m), :block_params=,
            s(:str, "YPath.new( path )")),
          s(:send, nil, :assert_equal,
            s(:str, "y_path"),
            s(:send,
              s(:lvar, :m), :block_params)))),
      s(:def, :test_find_method_or_attribute_recursive,
        s(:args),
        s(:begin,
          s(:lvasgn, :inc,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "M1"),
              s(:nil))),
          s(:send,
            s(:ivar, :@m1), :add_include,
            s(:lvar, :inc)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@m1_m), :find_method_or_attribute,
              s(:str, "m"))))),
      s(:def, :test_full_name,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "C1#m"),
            s(:send,
              s(:ivar, :@c1_m), :full_name)),
          s(:send, nil, :assert_equal,
            s(:str, "C1::m"),
            s(:send,
              s(:ivar, :@c1__m), :full_name)))),
      s(:def, :test_is_alias_for,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:ivar, :@c2_b),
          s(:send,
            s(:ivar, :@c2_a), :is_alias_for))),
      s(:def, :test_output_name,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "#m"),
            s(:send,
              s(:ivar, :@c1_m), :output_name,
              s(:ivar, :@c1))),
          s(:send, nil, :assert_equal,
            s(:str, "::m"),
            s(:send,
              s(:ivar, :@c1__m), :output_name,
              s(:ivar, :@c1))),
          s(:send, nil, :assert_equal,
            s(:str, "C1#m"),
            s(:send,
              s(:ivar, :@c1_m), :output_name,
              s(:ivar, :@c2))),
          s(:send, nil, :assert_equal,
            s(:str, "C1.m"),
            s(:send,
              s(:ivar, :@c1__m), :output_name,
              s(:ivar, :@c2))))),
      s(:def, :test_search_record,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c1_m), :comment=,
            s(:str, "This is a comment.")),
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "m"),
              s(:str, "C1#m"),
              s(:str, "m"),
              s(:str, "C1"),
              s(:str, "C1.html#method-i-m"),
              s(:str, "(foo)"),
              s(:str, "<p>This is a comment.\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@c1_m), :search_record)))),
      s(:def, :test_spaceship,
        s(:args),
        s(:send, nil, :assert_nil,
          s(:send,
            s(:ivar, :@c1_m), :<=>,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CodeObject), :new)))),
      s(:def, :test_equals2,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:ivar, :@c1_m),
            s(:ivar, :@c1_m)),
          s(:send, nil, :refute_equal,
            s(:ivar, :@c1_m),
            s(:ivar, :@parent_m)))),
      s(:def, :test_pretty_print,
        s(:args),
        s(:block,
          s(:send, nil, :temp_dir),
          s(:args,
            s(:arg, :tmpdir)),
          s(:begin,
            s(:lvasgn, :s,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :RI), :Store), :new,
                s(:lvar, :tmpdir))),
            s(:send,
              s(:lvar, :s), :rdoc=,
              s(:ivar, :@rdoc)),
            s(:lvasgn, :top_level,
              s(:send,
                s(:lvar, :s), :add_file,
                s(:str, "file.rb"))),
            s(:lvasgn, :meth_bang,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "method!"))),
            s(:send,
              s(:lvar, :meth_bang), :record_location,
              s(:lvar, :top_level)),
            s(:lvasgn, :meth_bang_alias,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Alias), :new,
                s(:nil),
                s(:str, "method!"),
                s(:str, "method_bang"),
                s(:str, ""))),
            s(:send,
              s(:lvar, :meth_bang_alias), :record_location,
              s(:lvar, :top_level)),
            s(:lvasgn, :klass,
              s(:send,
                s(:lvar, :top_level), :add_class,
                s(:const,
                  s(:const, nil, :RDoc), :NormalClass),
                s(:str, "Object"))),
            s(:send,
              s(:lvar, :klass), :add_method,
              s(:lvar, :meth_bang)),
            s(:send,
              s(:lvar, :meth_bang), :add_alias,
              s(:lvar, :meth_bang_alias),
              s(:lvar, :klass)),
            s(:send,
              s(:lvar, :s), :save),
            s(:lvasgn, :meth_alias_from_store,
              s(:send,
                s(:lvar, :s), :load_method,
                s(:str, "Object"),
                s(:str, "#method_bang"))),
            s(:lvasgn, :expected,
              s(:str, "[RDoc::AnyMethod Object#method_bang public alias for method!]")),
            s(:lvasgn, :actual,
              s(:send, nil, :mu_pp,
                s(:lvar, :meth_alias_from_store))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:lvar, :actual))))),
      s(:def, :test_to_s,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "RDoc::AnyMethod: C1#m"),
            s(:send,
              s(:ivar, :@c1_m), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "RDoc::AnyMethod: C2#b"),
            s(:send,
              s(:ivar, :@c2_b), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "RDoc::AnyMethod: C1::m"),
            s(:send,
              s(:ivar, :@c1__m), :to_s)))))))
