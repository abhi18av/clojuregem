s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocMarkupAttributeManager),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@am,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :AttributeManager), :new)),
          s(:ivasgn, :@bold_on,
            s(:send,
              s(:ivar, :@am), :changed_attribute_by_name,
              s(:array),
              s(:array,
                s(:sym, :BOLD)))),
          s(:ivasgn, :@bold_off,
            s(:send,
              s(:ivar, :@am), :changed_attribute_by_name,
              s(:array,
                s(:sym, :BOLD)),
              s(:array))),
          s(:ivasgn, :@tt_on,
            s(:send,
              s(:ivar, :@am), :changed_attribute_by_name,
              s(:array),
              s(:array,
                s(:sym, :TT)))),
          s(:ivasgn, :@tt_off,
            s(:send,
              s(:ivar, :@am), :changed_attribute_by_name,
              s(:array,
                s(:sym, :TT)),
              s(:array))),
          s(:ivasgn, :@em_on,
            s(:send,
              s(:ivar, :@am), :changed_attribute_by_name,
              s(:array),
              s(:array,
                s(:sym, :EM)))),
          s(:ivasgn, :@em_off,
            s(:send,
              s(:ivar, :@am), :changed_attribute_by_name,
              s(:array,
                s(:sym, :EM)),
              s(:array))),
          s(:ivasgn, :@bold_em_on,
            s(:send,
              s(:ivar, :@am), :changed_attribute_by_name,
              s(:array),
              s(:send,
                s(:array,
                  s(:sym, :BOLD)), :|,
                s(:array,
                  s(:sym, :EM))))),
          s(:ivasgn, :@bold_em_off,
            s(:send,
              s(:ivar, :@am), :changed_attribute_by_name,
              s(:send,
                s(:array,
                  s(:sym, :BOLD)), :|,
                s(:array,
                  s(:sym, :EM))),
              s(:array))),
          s(:ivasgn, :@em_then_bold,
            s(:send,
              s(:ivar, :@am), :changed_attribute_by_name,
              s(:array,
                s(:sym, :EM)),
              s(:send,
                s(:array,
                  s(:sym, :EM)), :|,
                s(:array,
                  s(:sym, :BOLD))))),
          s(:ivasgn, :@em_to_bold,
            s(:send,
              s(:ivar, :@am), :changed_attribute_by_name,
              s(:array,
                s(:sym, :EM)),
              s(:array,
                s(:sym, :BOLD)))),
          s(:send,
            s(:ivar, :@am), :add_word_pair,
            s(:str, "{"),
            s(:str, "}"),
            s(:sym, :WOMBAT)),
          s(:ivasgn, :@wombat_on,
            s(:send,
              s(:ivar, :@am), :changed_attribute_by_name,
              s(:array),
              s(:array,
                s(:sym, :WOMBAT)))),
          s(:ivasgn, :@wombat_off,
            s(:send,
              s(:ivar, :@am), :changed_attribute_by_name,
              s(:array,
                s(:sym, :WOMBAT)),
              s(:array))),
          s(:ivasgn, :@klass,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :AttributeManager)),
          s(:ivasgn, :@formatter,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Formatter), :new,
              s(:send,
                s(:ivar, :@rdoc), :options))),
          s(:send,
            s(:ivar, :@formatter), :add_tag,
            s(:sym, :BOLD),
            s(:str, "<B>"),
            s(:str, "</B>")),
          s(:send,
            s(:ivar, :@formatter), :add_tag,
            s(:sym, :EM),
            s(:str, "<EM>"),
            s(:str, "</EM>")),
          s(:send,
            s(:ivar, :@formatter), :add_tag,
            s(:sym, :TT),
            s(:str, "<CODE>"),
            s(:str, "</CODE>")))),
      s(:def, :crossref,
        s(:args,
          s(:arg, :text)),
        s(:begin,
          s(:lvasgn, :crossref_bitmap,
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@am), :attributes), :bitmap_for,
                s(:sym, :_SPECIAL_)), :|,
              s(:send,
                s(:send,
                  s(:ivar, :@am), :attributes), :bitmap_for,
                s(:sym, :CROSSREF)))),
          s(:array,
            s(:send,
              s(:ivar, :@am), :changed_attribute_by_name,
              s(:array),
              s(:array,
                s(:sym, :CROSSREF),
                s(:sym, :_SPECIAL_))),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Special), :new,
              s(:lvar, :crossref_bitmap),
              s(:lvar, :text)),
            s(:send,
              s(:ivar, :@am), :changed_attribute_by_name,
              s(:array,
                s(:sym, :CROSSREF),
                s(:sym, :_SPECIAL_)),
              s(:array))))),
      s(:def, :test_adding,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "cat "),
            s(:ivar, :@wombat_on),
            s(:str, "and"),
            s(:ivar, :@wombat_off),
            s(:str, " dog")),
          s(:send,
            s(:ivar, :@am), :flow,
            s(:str, "cat {and} dog")))),
      s(:def, :test_add_html_tag,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@am), :add_html,
            s(:str, "Test"),
            s(:sym, :TEST)),
          s(:lvasgn, :tags,
            s(:send,
              s(:ivar, :@am), :html_tags)),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:lvar, :tags), :size)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :tags), :has_key?,
              s(:str, "test"))))),
      s(:def, :test_add_special,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@am), :add_special,
            s(:str, "WikiWord"),
            s(:sym, :WIKIWORD)),
          s(:lvasgn, :specials,
            s(:send,
              s(:ivar, :@am), :special)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :specials), :size)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :specials), :assoc,
              s(:str, "WikiWord"))))),
      s(:def, :test_add_word_pair,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@am), :add_word_pair,
            s(:str, "%"),
            s(:str, "&"),
            s(:str, "percent and")),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@am), :word_pair_map), :include?,
              s(:regexp,
                s(:str, "(%)(\\S+)(&)"),
                s(:regopt)))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@am), :protectable), :include?,
              s(:str, "%"))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@am), :protectable), :include?,
                s(:str, "&")), :!)))),
      s(:def, :test_add_word_pair_angle,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:ivar, :@am), :add_word_pair,
                s(:str, "<"),
                s(:str, ">"),
                s(:str, "angles")))),
          s(:send, nil, :assert_equal,
            s(:str, "Word flags may not start with '<'"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_add_word_pair_invalid,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raises,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:send,
            s(:ivar, :@am), :add_word_pair,
            s(:str, "<"),
            s(:str, "<"),
            s(:sym, :TEST)))),
      s(:def, :test_add_word_pair_map,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@am), :add_word_pair,
            s(:str, "x"),
            s(:str, "y"),
            s(:sym, :TEST)),
          s(:lvasgn, :word_pair_map,
            s(:send,
              s(:ivar, :@am), :word_pair_map)),
          s(:send, nil, :assert_includes,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :word_pair_map), :keys), :map),
              s(:args,
                s(:arg, :r)),
              s(:send,
                s(:lvar, :r), :source)),
            s(:str, "(x)(\\S+)(y)")))),
      s(:def, :test_add_word_pair_matching,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@am), :add_word_pair,
            s(:str, "^"),
            s(:str, "^"),
            s(:str, "caret")),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@am), :matching_word_pairs), :include?,
              s(:str, "^"))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@am), :protectable), :include?,
              s(:str, "^"))))),
      s(:def, :test_basic,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cat")),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cat"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cat "),
              s(:ivar, :@bold_on),
              s(:str, "and"),
              s(:ivar, :@bold_off),
              s(:str, " dog")),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cat *and* dog"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cat "),
              s(:ivar, :@bold_on),
              s(:str, "AND"),
              s(:ivar, :@bold_off),
              s(:str, " dog")),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cat *AND* dog"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cat "),
              s(:ivar, :@em_on),
              s(:str, "And"),
              s(:ivar, :@em_off),
              s(:str, " dog")),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cat _And_ dog"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cat *and dog*")),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cat *and dog*"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "*cat and* dog")),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "*cat and* dog"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cat *and "),
              s(:ivar, :@bold_on),
              s(:str, "dog"),
              s(:ivar, :@bold_off)),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cat *and *dog*"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cat "),
              s(:ivar, :@em_on),
              s(:str, "and"),
              s(:ivar, :@em_off),
              s(:str, " dog")),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cat _and_ dog"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cat_and_dog")),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cat_and_dog"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cat "),
              s(:ivar, :@tt_on),
              s(:str, "and"),
              s(:ivar, :@tt_off),
              s(:str, " dog")),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cat +and+ dog"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cat "),
              s(:ivar, :@tt_on),
              s(:str, "X::Y"),
              s(:ivar, :@tt_off),
              s(:str, " dog")),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cat +X::Y+ dog"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cat "),
              s(:ivar, :@bold_on),
              s(:str, "a_b_c"),
              s(:ivar, :@bold_off),
              s(:str, " dog")),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cat *a_b_c* dog"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cat __ dog")),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cat __ dog"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cat "),
              s(:ivar, :@em_on),
              s(:str, "_"),
              s(:ivar, :@em_off),
              s(:str, " dog")),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cat ___ dog"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cat and "),
              s(:ivar, :@em_on),
              s(:str, "5"),
              s(:ivar, :@em_off),
              s(:str, " dogs")),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cat and _5_ dogs"))))),
      s(:def, :test_bold,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@bold_on),
              s(:str, "bold"),
              s(:ivar, :@bold_off)),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "*bold*"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@bold_on),
              s(:str, "Bold:"),
              s(:ivar, :@bold_off)),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "*Bold:*"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@bold_on),
              s(:str, "\\bold"),
              s(:ivar, :@bold_off)),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "*\\bold*"))))),
      s(:def, :test_bold_html_escaped,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "cat <b>dog</b>")),
          s(:send,
            s(:ivar, :@am), :flow,
            s(:str, "cat \\<b>dog</b>")))),
      s(:def, :test_combined,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cat "),
              s(:ivar, :@em_on),
              s(:str, "and"),
              s(:ivar, :@em_off),
              s(:str, " "),
              s(:ivar, :@bold_on),
              s(:str, "dog"),
              s(:ivar, :@bold_off)),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cat _and_ *dog*"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cat "),
              s(:ivar, :@em_on),
              s(:str, "a__nd"),
              s(:ivar, :@em_off),
              s(:str, " "),
              s(:ivar, :@bold_on),
              s(:str, "dog"),
              s(:ivar, :@bold_off)),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cat _a__nd_ *dog*"))))),
      s(:def, :test_convert_attrs,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "+foo+")),
          s(:lvasgn, :attrs,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :AttrSpan), :new,
              s(:send,
                s(:lvar, :str), :length))),
          s(:send,
            s(:ivar, :@am), :convert_attrs,
            s(:lvar, :str),
            s(:lvar, :attrs)),
          s(:send, nil, :assert_equal,
            s(:str, "\u0000foo\u0000"),
            s(:lvar, :str)),
          s(:lvasgn, :str,
            s(:str, "+:foo:+")),
          s(:lvasgn, :attrs,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :AttrSpan), :new,
              s(:send,
                s(:lvar, :str), :length))),
          s(:send,
            s(:ivar, :@am), :convert_attrs,
            s(:lvar, :str),
            s(:lvar, :attrs)),
          s(:send, nil, :assert_equal,
            s(:str, "\u0000:foo:\u0000"),
            s(:lvar, :str)),
          s(:lvasgn, :str,
            s(:str, "+x-y+")),
          s(:lvasgn, :attrs,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :AttrSpan), :new,
              s(:send,
                s(:lvar, :str), :length))),
          s(:send,
            s(:ivar, :@am), :convert_attrs,
            s(:lvar, :str),
            s(:lvar, :attrs)),
          s(:send, nil, :assert_equal,
            s(:str, "\u0000x-y\u0000"),
            s(:lvar, :str)))),
      s(:def, :test_convert_attrs_ignores_code,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "foo <CODE>__send__</CODE> bar"),
          s(:send, nil, :output,
            s(:str, "foo <code>__send__</code> bar")))),
      s(:def, :test_convert_attrs_ignores_tt,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "foo <CODE>__send__</CODE> bar"),
          s(:send, nil, :output,
            s(:str, "foo <tt>__send__</tt> bar")))),
      s(:def, :test_convert_attrs_preserves_double,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "foo.__send__ :bar"),
            s(:send, nil, :output,
              s(:str, "foo.__send__ :bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "use __FILE__ to"),
            s(:send, nil, :output,
              s(:str, "use __FILE__ to"))))),
      s(:def, :test_convert_attrs_does_not_ignore_after_tt,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "the <CODE>IF:</CODE><EM>key</EM> directive"),
          s(:send, nil, :output,
            s(:str, "the <tt>IF:</tt>_key_ directive")))),
      s(:def, :test_escapes,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<CODE>text</CODE>"),
            s(:send, nil, :output,
              s(:str, "<tt>text</tt>"))),
          s(:send, nil, :assert_equal,
            s(:str, "<tt>text</tt>"),
            s(:send, nil, :output,
              s(:str, "\\<tt>text</tt>"))),
          s(:send, nil, :assert_equal,
            s(:str, "<tt>"),
            s(:send, nil, :output,
              s(:str, "\\<tt>"))),
          s(:send, nil, :assert_equal,
            s(:str, "<CODE><tt></CODE>"),
            s(:send, nil, :output,
              s(:str, "<tt>\\<tt></tt>"))),
          s(:send, nil, :assert_equal,
            s(:str, "<CODE>\\<tt></CODE>"),
            s(:send, nil, :output,
              s(:str, "<tt>\\\\<tt></tt>"))),
          s(:send, nil, :assert_equal,
            s(:str, "<B>text</B>"),
            s(:send, nil, :output,
              s(:str, "*text*"))),
          s(:send, nil, :assert_equal,
            s(:str, "*text*"),
            s(:send, nil, :output,
              s(:str, "\\*text*"))),
          s(:send, nil, :assert_equal,
            s(:str, "\\"),
            s(:send, nil, :output,
              s(:str, "\\"))),
          s(:send, nil, :assert_equal,
            s(:str, "\\text"),
            s(:send, nil, :output,
              s(:str, "\\text"))),
          s(:send, nil, :assert_equal,
            s(:str, "\\\\text"),
            s(:send, nil, :output,
              s(:str, "\\\\text"))),
          s(:send, nil, :assert_equal,
            s(:str, "text \\ text"),
            s(:send, nil, :output,
              s(:str, "text \\ text"))),
          s(:send, nil, :assert_equal,
            s(:str, "and <CODE>\\s</CODE> matches space"),
            s(:send, nil, :output,
              s(:str, "and <tt>\\s</tt> matches space"))),
          s(:send, nil, :assert_equal,
            s(:str, "use <CODE><tt>text</CODE></tt> for code"),
            s(:send, nil, :output,
              s(:str, "use <tt>\\<tt>text</tt></tt> for code"))),
          s(:send, nil, :assert_equal,
            s(:str, "use <CODE><tt>text</tt></CODE> for code"),
            s(:send, nil, :output,
              s(:str, "use <tt>\\<tt>text\\</tt></tt> for code"))),
          s(:send, nil, :assert_equal,
            s(:str, "use <tt><tt>text</tt></tt> for code"),
            s(:send, nil, :output,
              s(:str, "use \\<tt>\\<tt>text</tt></tt> for code"))),
          s(:send, nil, :assert_equal,
            s(:str, "use <tt><CODE>text</CODE></tt> for code"),
            s(:send, nil, :output,
              s(:str, "use \\<tt><tt>text</tt></tt> for code"))),
          s(:send, nil, :assert_equal,
            s(:str, "use <CODE>+text+</CODE> for code"),
            s(:send, nil, :output,
              s(:str, "use <tt>\\+text+</tt> for code"))),
          s(:send, nil, :assert_equal,
            s(:str, "use <tt><CODE>text</CODE></tt> for code"),
            s(:send, nil, :output,
              s(:str, "use \\<tt>+text+</tt> for code"))),
          s(:send, nil, :assert_equal,
            s(:str, "illegal <tag>not</tag> changed"),
            s(:send, nil, :output,
              s(:str, "illegal <tag>not</tag> changed"))),
          s(:send, nil, :assert_equal,
            s(:str, "unhandled <p>tag</p> unchanged"),
            s(:send, nil, :output,
              s(:str, "unhandled <p>tag</p> unchanged"))))),
      s(:def, :test_html_like_em_bold,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "cat "),
            s(:ivar, :@em_on),
            s(:str, "and "),
            s(:ivar, :@em_to_bold),
            s(:str, "dog"),
            s(:ivar, :@bold_off)),
          s(:send,
            s(:ivar, :@am), :flow,
            s(:str, "cat <i>and </i><b>dog</b>")))),
      s(:def, :test_html_like_em_bold_SGML,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "cat "),
            s(:ivar, :@em_on),
            s(:str, "and "),
            s(:ivar, :@em_to_bold),
            s(:str, "dog"),
            s(:ivar, :@bold_off)),
          s(:send,
            s(:ivar, :@am), :flow,
            s(:str, "cat <i>and <b></i>dog</b>")))),
      s(:def, :test_html_like_em_bold_nested_1,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "cat "),
            s(:ivar, :@bold_em_on),
            s(:str, "and"),
            s(:ivar, :@bold_em_off),
            s(:str, " dog")),
          s(:send,
            s(:ivar, :@am), :flow,
            s(:str, "cat <i><b>and</b></i> dog")))),
      s(:def, :test_html_like_em_bold_nested_2,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "cat "),
            s(:ivar, :@em_on),
            s(:str, "and "),
            s(:ivar, :@em_then_bold),
            s(:str, "dog"),
            s(:ivar, :@bold_em_off)),
          s(:send,
            s(:ivar, :@am), :flow,
            s(:str, "cat <i>and <b>dog</b></i>")))),
      s(:def, :test_html_like_em_bold_nested_mixed_case,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "cat "),
            s(:ivar, :@em_on),
            s(:str, "and "),
            s(:ivar, :@em_then_bold),
            s(:str, "dog"),
            s(:ivar, :@bold_em_off)),
          s(:send,
            s(:ivar, :@am), :flow,
            s(:str, "cat <i>and <B>dog</B></I>")))),
      s(:def, :test_html_like_em_bold_mixed_case,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "cat "),
            s(:ivar, :@em_on),
            s(:str, "and"),
            s(:ivar, :@em_off),
            s(:str, " "),
            s(:ivar, :@bold_on),
            s(:str, "dog"),
            s(:ivar, :@bold_off)),
          s(:send,
            s(:ivar, :@am), :flow,
            s(:str, "cat <i>and</i> <B>dog</b>")))),
      s(:def, :test_html_like_teletype,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "cat "),
            s(:ivar, :@tt_on),
            s(:str, "dog"),
            s(:ivar, :@tt_off)),
          s(:send,
            s(:ivar, :@am), :flow,
            s(:str, "cat <tt>dog</Tt>")))),
      s(:def, :test_html_like_teletype_em_bold_SGML,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:ivar, :@tt_on),
            s(:str, "cat"),
            s(:ivar, :@tt_off),
            s(:str, " "),
            s(:ivar, :@em_on),
            s(:str, "and "),
            s(:ivar, :@em_to_bold),
            s(:str, "dog"),
            s(:ivar, :@bold_off)),
          s(:send,
            s(:ivar, :@am), :flow,
            s(:str, "<tt>cat</tt> <i>and <b></i>dog</b>")))),
      s(:def, :test_initial_html,
        s(:args),
        s(:begin,
          s(:lvasgn, :html_tags,
            s(:send,
              s(:ivar, :@am), :html_tags)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :html_tags), :is_a?,
              s(:const, nil, :Hash))),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :html_tags), :size)))),
      s(:def, :test_initial_word_pairs,
        s(:args),
        s(:begin,
          s(:lvasgn, :word_pairs,
            s(:send,
              s(:ivar, :@am), :matching_word_pairs)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :word_pairs), :is_a?,
              s(:const, nil, :Hash))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :word_pairs), :size)))),
      s(:def, :test_mask_protected_sequence,
        s(:args),
        s(:begin,
          s(:defs,
            s(:ivar, :@am), :str,
            s(:args),
            s(:ivar, :@str)),
          s(:defs,
            s(:ivar, :@am), :str=,
            s(:args,
              s(:arg, :str)),
            s(:ivasgn, :@str,
              s(:lvar, :str))),
          s(:send,
            s(:ivar, :@am), :str=,
            s(:str, "<code>foo</code>")),
          s(:send,
            s(:ivar, :@am), :mask_protected_sequences),
          s(:send, nil, :assert_equal,
            s(:str, "<code>foo</code>"),
            s(:send,
              s(:ivar, :@am), :str)),
          s(:send,
            s(:ivar, :@am), :str=,
            s(:str, "<code>foo\\</code>")),
          s(:send,
            s(:ivar, :@am), :mask_protected_sequences),
          s(:send, nil, :assert_equal,
            s(:str, "<code>foo<\u0004/code>"),
            s(:send,
              s(:ivar, :@am), :str),
            s(:str, "escaped close")),
          s(:send,
            s(:ivar, :@am), :str=,
            s(:str, "<code>foo\\\\</code>")),
          s(:send,
            s(:ivar, :@am), :mask_protected_sequences),
          s(:send, nil, :assert_equal,
            s(:str, "<code>foo\\</code>"),
            s(:send,
              s(:ivar, :@am), :str),
            s(:str, "escaped backslash")))),
      s(:def, :test_protect,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cat \\ dog")),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cat \\ dog"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cat <tt>dog</Tt>")),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cat \\<tt>dog</Tt>"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cat "),
              s(:ivar, :@em_on),
              s(:str, "and"),
              s(:ivar, :@em_off),
              s(:str, " <B>dog</b>")),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cat <i>and</i> \\<B>dog</b>"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "*word* or <b>text</b>")),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "\\*word* or \\<b>text</b>"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "_cat_"),
              s(:ivar, :@em_on),
              s(:str, "dog"),
              s(:ivar, :@em_off)),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "\\_cat_<i>dog</i>"))))),
      s(:def, :test_special,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@am), :add_special,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :CrossReference), :CROSSREF_REGEXP),
            s(:sym, :CROSSREF)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "cats'")),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cats'"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:str, "cats' "),
                s(:send, nil, :crossref,
                  s(:str, "#fred")),
                s(:str, " dogs'")), :flatten),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cats' #fred dogs'"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:send, nil, :crossref,
                  s(:str, "#fred")),
                s(:str, " dogs'")), :flatten),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "#fred dogs'"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:str, "cats' "),
                s(:send, nil, :crossref,
                  s(:str, "#fred"))), :flatten),
            s(:send,
              s(:ivar, :@am), :flow,
              s(:str, "cats' #fred"))))),
      s(:def, :test_tt_html,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:ivar, :@tt_on),
            s(:str, "\"\\n\""),
            s(:ivar, :@tt_off)),
          s(:send,
            s(:ivar, :@am), :flow,
            s(:str, "<tt>\"\\n\"</tt>")))),
      s(:def, :output,
        s(:args,
          s(:arg, :str)),
        s(:send,
          s(:ivar, :@formatter), :convert_flow,
          s(:send,
            s(:ivar, :@am), :flow,
            s(:lvar, :str)))))))
