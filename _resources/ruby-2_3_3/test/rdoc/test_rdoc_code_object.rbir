s(:begin,
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:str, "../xref_test_case"),
      s(:str, "(string)"))),
  s(:class,
    s(:const, nil, :TestRDocCodeObject),
    s(:const, nil, :XrefTestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@co,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CodeObject), :new)))),
      s(:def, :test_initialize,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_self),
            s(:str, "document_self")),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_children),
            s(:str, "document_children")),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :force_documentation),
            s(:str, "force_documentation")),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :done_documenting),
            s(:str, "done_documenting")),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :received_nodoc),
            s(:str, "received_nodoc")),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@co), :comment),
            s(:str, "comment is empty")))),
      s(:def, :test_comment_equals,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@co), :comment=,
            s(:str, "")),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@co), :comment)),
          s(:send,
            s(:ivar, :@co), :comment=,
            s(:str, "I am a comment")),
          s(:send, nil, :assert_equal,
            s(:str, "I am a comment"),
            s(:send,
              s(:ivar, :@co), :comment)))),
      s(:def, :test_comment_equals_comment,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@co), :comment=,
            s(:send, nil, :comment,
              s(:str, ""))),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@co), :comment), :text)),
          s(:send,
            s(:ivar, :@co), :comment=,
            s(:send, nil, :comment,
              s(:str, "I am a comment"))),
          s(:send, nil, :assert_equal,
            s(:str, "I am a comment"),
            s(:send,
              s(:send,
                s(:ivar, :@co), :comment), :text)))),
      s(:def, :test_comment_equals_document,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new)),
          s(:send,
            s(:ivar, :@co), :comment=,
            s(:lvar, :doc)),
          s(:send,
            s(:ivar, :@co), :comment=,
            s(:str, "")),
          s(:send, nil, :assert_equal,
            s(:lvar, :doc),
            s(:send,
              s(:ivar, :@co), :comment)))),
      s(:def, :test_comment_equals_encoding,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)), nil,
            s(:send, nil, :skip,
              s(:str, "Encoding not implemented"))),
          s(:send, nil, :refute_equal,
            s(:const,
              s(:const, nil, :Encoding), :UTF_8),
            s(:send,
              s(:str, ""), :encoding),
            s(:str, "Encoding sanity check")),
          s(:lvasgn, :input,
            s(:str, "text")),
          s(:send,
            s(:lvar, :input), :force_encoding,
            s(:const,
              s(:const, nil, :Encoding), :UTF_8)),
          s(:send,
            s(:ivar, :@co), :comment=,
            s(:lvar, :input)),
          s(:send, nil, :assert_equal,
            s(:str, "text"),
            s(:send,
              s(:ivar, :@co), :comment)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :UTF_8),
            s(:send,
              s(:send,
                s(:ivar, :@co), :comment), :encoding)))),
      s(:def, :test_comment_equals_encoding_blank,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)), nil,
            s(:send, nil, :skip,
              s(:str, "Encoding not implemented"))),
          s(:send, nil, :refute_equal,
            s(:const,
              s(:const, nil, :Encoding), :UTF_8),
            s(:send,
              s(:str, ""), :encoding),
            s(:str, "Encoding sanity check")),
          s(:lvasgn, :input,
            s(:str, "")),
          s(:send,
            s(:lvar, :input), :force_encoding,
            s(:const,
              s(:const, nil, :Encoding), :UTF_8)),
          s(:send,
            s(:ivar, :@co), :comment=,
            s(:lvar, :input)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@co), :comment)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :UTF_8),
            s(:send,
              s(:send,
                s(:ivar, :@co), :comment), :encoding)))),
      s(:def, :test_display_eh_document_self,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :display?)),
          s(:send,
            s(:ivar, :@co), :document_self=,
            s(:false)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :display?)))),
      s(:def, :test_display_eh_ignore,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :display?)),
          s(:send,
            s(:ivar, :@co), :ignore),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :display?)),
          s(:send,
            s(:ivar, :@co), :stop_doc),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :display?)),
          s(:send,
            s(:ivar, :@co), :done_documenting=,
            s(:false)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :display?)))),
      s(:def, :test_display_eh_suppress,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :display?)),
          s(:send,
            s(:ivar, :@co), :suppress),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :display?)),
          s(:send,
            s(:ivar, :@co), :comment=,
            s(:send, nil, :comment,
              s(:str, "hi"))),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :display?)),
          s(:send,
            s(:ivar, :@co), :done_documenting=,
            s(:false)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :display?)),
          s(:send,
            s(:ivar, :@co), :ignore),
          s(:send,
            s(:ivar, :@co), :done_documenting=,
            s(:false)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :display?)))),
      s(:def, :test_document_children_equals,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@co), :document_children=,
            s(:false)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :document_children)),
          s(:send,
            s(:send,
              s(:send,
                s(:ivar, :@store), :rdoc), :options), :visibility=,
            s(:sym, :nodoc)),
          s(:send,
            s(:ivar, :@co), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_children)),
          s(:send,
            s(:ivar, :@co), :document_children=,
            s(:false)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_children)))),
      s(:def, :test_document_self_equals,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@co), :document_self=,
            s(:false)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :document_self)),
          s(:send,
            s(:send,
              s(:send,
                s(:ivar, :@store), :rdoc), :options), :visibility=,
            s(:sym, :nodoc)),
          s(:send,
            s(:ivar, :@co), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_self)),
          s(:send,
            s(:ivar, :@co), :document_self=,
            s(:false)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_self)))),
      s(:def, :test_documented_eh,
        s(:args),
        s(:begin,
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :documented?)),
          s(:send,
            s(:ivar, :@co), :comment=,
            s(:str, "hi")),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :documented?)),
          s(:send,
            s(:send,
              s(:ivar, :@co), :comment), :replace,
            s(:str, "")),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :documented?)),
          s(:send,
            s(:ivar, :@co), :document_self=,
            s(:nil)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :documented?)))),
      s(:def, :test_done_documenting,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@co), :done_documenting=,
            s(:true)),
          s(:send,
            s(:ivar, :@co), :document_self=,
            s(:true)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :document_self)),
          s(:send,
            s(:ivar, :@co), :document_children=,
            s(:true)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :document_children)),
          s(:send,
            s(:ivar, :@co), :force_documentation=,
            s(:true)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :force_documentation)),
          s(:send,
            s(:ivar, :@co), :start_doc),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :document_self)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :document_children)),
          s(:send,
            s(:ivar, :@co), :done_documenting=,
            s(:false)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_self)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_children)),
          s(:send,
            s(:ivar, :@co), :done_documenting=,
            s(:true)),
          s(:send,
            s(:send,
              s(:send,
                s(:ivar, :@store), :rdoc), :options), :visibility=,
            s(:sym, :nodoc)),
          s(:send,
            s(:ivar, :@co), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :done_documenting)),
          s(:send,
            s(:ivar, :@co), :done_documenting=,
            s(:true)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :done_documenting)))),
      s(:def, :test_each_parent,
        s(:args),
        s(:begin,
          s(:lvasgn, :parents,
            s(:array)),
          s(:block,
            s(:send,
              s(:ivar, :@parent_m), :each_parent),
            s(:args,
              s(:arg, :code_object)),
            s(:send,
              s(:lvar, :parents), :<<,
              s(:lvar, :code_object))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@parent),
              s(:ivar, :@xref_data)),
            s(:lvar, :parents)))),
      s(:def, :test_file_name,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@co), :file_name)),
          s(:send,
            s(:ivar, :@co), :record_location,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "lib/file.rb"))),
          s(:send, nil, :assert_equal,
            s(:str, "lib/file.rb"),
            s(:send,
              s(:ivar, :@co), :file_name)))),
      s(:def, :test_full_name_equals,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@co), :full_name=,
            s(:str, "hi")),
          s(:send, nil, :assert_equal,
            s(:str, "hi"),
            s(:send,
              s(:ivar, :@co), :instance_variable_get,
              s(:sym, :@full_name))),
          s(:send,
            s(:ivar, :@co), :full_name=,
            s(:nil)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@co), :instance_variable_get,
              s(:sym, :@full_name))))),
      s(:def, :test_ignore,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@co), :ignore),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :document_self)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :document_children)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :ignored?)),
          s(:send,
            s(:send,
              s(:send,
                s(:ivar, :@store), :rdoc), :options), :visibility=,
            s(:sym, :nodoc)),
          s(:send,
            s(:ivar, :@co), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_self)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_children)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :ignored?)),
          s(:send,
            s(:ivar, :@co), :ignore),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :ignored?)))),
      s(:def, :test_ignore_eh,
        s(:args),
        s(:begin,
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :ignored?)),
          s(:send,
            s(:ivar, :@co), :ignore),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :ignored?)))),
      s(:def, :test_line,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c1_m), :line=,
            s(:int, 5)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:ivar, :@c1_m), :line)))),
      s(:def, :test_metadata,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@co), :metadata)),
          s(:send,
            s(:send,
              s(:ivar, :@co), :metadata), :[]=,
            s(:str, "markup"),
            s(:str, "not_rdoc")),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:str, "markup"),
                s(:str, "not_rdoc")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@co), :metadata)),
          s(:send, nil, :assert_equal,
            s(:str, "not_rdoc"),
            s(:send,
              s(:send,
                s(:ivar, :@co), :metadata), :[],
              s(:str, "markup"))))),
      s(:def, :test_offset,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c1_m), :offset=,
            s(:int, 5)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:ivar, :@c1_m), :offset)))),
      s(:def, :test_options,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :RDoc), :Options),
            s(:send,
              s(:ivar, :@co), :options)),
          s(:send,
            s(:ivar, :@co), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :assert_same,
            s(:ivar, :@options),
            s(:send,
              s(:ivar, :@co), :options)))),
      s(:def, :test_parent_file_name,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "(unknown)"),
            s(:send,
              s(:ivar, :@co), :parent_file_name)),
          s(:send, nil, :assert_equal,
            s(:str, "xref_data.rb"),
            s(:send,
              s(:ivar, :@c1), :parent_file_name)))),
      s(:def, :test_parent_name,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "(unknown)"),
            s(:send,
              s(:ivar, :@co), :parent_name)),
          s(:send, nil, :assert_equal,
            s(:str, "xref_data.rb"),
            s(:send,
              s(:ivar, :@c1), :parent_name)),
          s(:send, nil, :assert_equal,
            s(:str, "C2"),
            s(:send,
              s(:ivar, :@c2_c3), :parent_name)))),
      s(:def, :test_received_ndoc,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@co), :document_self=,
            s(:false)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :received_nodoc)),
          s(:send,
            s(:ivar, :@co), :document_self=,
            s(:nil)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :received_nodoc)),
          s(:send,
            s(:ivar, :@co), :document_self=,
            s(:true)))),
      s(:def, :test_record_location,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@co), :record_location,
            s(:ivar, :@xref_data)),
          s(:send, nil, :assert_equal,
            s(:str, "xref_data.rb"),
            s(:send,
              s(:send,
                s(:ivar, :@co), :file), :relative_name)))),
      s(:def, :test_record_location_ignored,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@co), :ignore),
          s(:send,
            s(:ivar, :@co), :record_location,
            s(:ivar, :@xref_data)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :ignored?)))),
      s(:def, :test_record_location_suppressed,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@co), :suppress),
          s(:send,
            s(:ivar, :@co), :record_location,
            s(:ivar, :@xref_data)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :suppressed?)))),
      s(:def, :test_section,
        s(:args),
        s(:begin,
          s(:lvasgn, :parent,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Context), :new)),
          s(:lvasgn, :section,
            s(:send,
              s(:send,
                s(:lvar, :parent), :sections), :first)),
          s(:send,
            s(:ivar, :@co), :parent=,
            s(:lvar, :parent)),
          s(:send,
            s(:ivar, :@co), :instance_variable_set,
            s(:sym, :@section),
            s(:lvar, :section)),
          s(:send, nil, :assert_equal,
            s(:lvar, :section),
            s(:send,
              s(:ivar, :@co), :section)),
          s(:send,
            s(:ivar, :@co), :instance_variable_set,
            s(:sym, :@section),
            s(:nil)),
          s(:send,
            s(:ivar, :@co), :instance_variable_set,
            s(:sym, :@section_title),
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:lvar, :section),
            s(:send,
              s(:ivar, :@co), :section)),
          s(:send,
            s(:ivar, :@co), :instance_variable_set,
            s(:sym, :@section),
            s(:nil)),
          s(:send,
            s(:ivar, :@co), :instance_variable_set,
            s(:sym, :@section_title),
            s(:str, "new title")),
          s(:send, nil, :assert_equal,
            s(:str, "new title"),
            s(:send,
              s(:send,
                s(:ivar, :@co), :section), :title)))),
      s(:def, :test_start_doc,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@co), :document_self=,
            s(:false)),
          s(:send,
            s(:ivar, :@co), :document_children=,
            s(:false)),
          s(:send,
            s(:ivar, :@co), :start_doc),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_self)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_children)))),
      s(:def, :test_start_doc_ignored,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@co), :ignore),
          s(:send,
            s(:ivar, :@co), :start_doc),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_self)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_children)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :ignored?)))),
      s(:def, :test_start_doc_suppressed,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@co), :suppress),
          s(:send,
            s(:ivar, :@co), :start_doc),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_self)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_children)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :suppressed?)))),
      s(:def, :test_store_equals,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@co), :document_self=,
            s(:false)),
          s(:send,
            s(:ivar, :@co), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :document_self)),
          s(:send,
            s(:send,
              s(:send,
                s(:ivar, :@store), :rdoc), :options), :visibility=,
            s(:sym, :nodoc)),
          s(:send,
            s(:ivar, :@co), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_self)))),
      s(:def, :test_stop_doc,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@co), :document_self=,
            s(:true)),
          s(:send,
            s(:ivar, :@co), :document_children=,
            s(:true)),
          s(:send,
            s(:ivar, :@co), :stop_doc),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :document_self)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :document_children)),
          s(:send,
            s(:send,
              s(:send,
                s(:ivar, :@store), :rdoc), :options), :visibility=,
            s(:sym, :nodoc)),
          s(:send,
            s(:ivar, :@co), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_self)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_children)),
          s(:send,
            s(:ivar, :@co), :stop_doc),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_self)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :document_children)))),
      s(:def, :test_suppress,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@co), :suppress),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :document_self)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :document_children)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :suppressed?)),
          s(:send,
            s(:send,
              s(:send,
                s(:ivar, :@store), :rdoc), :options), :visibility=,
            s(:sym, :nodoc)),
          s(:send,
            s(:ivar, :@co), :store=,
            s(:ivar, :@store)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :suppressed?)),
          s(:send,
            s(:ivar, :@co), :suppress),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :suppressed?)))),
      s(:def, :test_suppress_eh,
        s(:args),
        s(:begin,
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@co), :suppressed?)),
          s(:send,
            s(:ivar, :@co), :suppress),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@co), :suppressed?)))))))
