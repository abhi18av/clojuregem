s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocParser),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@RP,
            s(:const,
              s(:const, nil, :RDoc), :Parser)),
          s(:ivasgn, :@binary_dat,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:str, "../binary.dat"),
              s(:str, "(string)"))),
          s(:ivasgn, :@fn,
            s(:str, "file.rb")),
          s(:ivasgn, :@top_level,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :TopLevel), :new,
              s(:ivar, :@fn))),
          s(:ivasgn, :@options,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Options), :new)))),
      s(:def, :test_class_binary_eh_ISO_2022_JP,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :iso_2022_jp,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Dir), :tmpdir),
                s(:dstr,
                  s(:str, "test_rdoc_parser_"),
                  s(:begin,
                    s(:gvar, :$$)),
                  s(:str, ".rd")))),
            s(:block,
              s(:send, nil, :open,
                s(:lvar, :iso_2022_jp),
                s(:str, "wb")),
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:send,
                  s(:lvar, :io), :write,
                  s(:str, "# coding: ISO-2022-JP\n")),
                s(:send,
                  s(:lvar, :io), :write,
                  s(:str, ":\e$B%3%^%s%I\e(B:\n")))),
            s(:send, nil, :refute,
              s(:send,
                s(:ivar, :@RP), :binary?,
                s(:lvar, :iso_2022_jp)))),
          s(:send,
            s(:const, nil, :File), :unlink,
            s(:lvar, :iso_2022_jp)))),
      s(:def, :test_class_binary_eh_marshal,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :marshal,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Dir), :tmpdir),
                s(:dstr,
                  s(:str, "test_rdoc_parser_"),
                  s(:begin,
                    s(:gvar, :$$)),
                  s(:str, ".marshal")))),
            s(:block,
              s(:send, nil, :open,
                s(:lvar, :marshal),
                s(:str, "wb")),
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:send,
                  s(:lvar, :io), :write,
                  s(:send,
                    s(:const, nil, :Marshal), :dump,
                    s(:str, ""))),
                s(:send,
                  s(:lvar, :io), :write,
                  s(:send,
                    s(:str, "lots of text "), :*,
                    s(:int, 500))))),
            s(:send, nil, :assert,
              s(:send,
                s(:ivar, :@RP), :binary?,
                s(:lvar, :marshal)))),
          s(:send,
            s(:const, nil, :File), :unlink,
            s(:lvar, :marshal)))),
      s(:def, :test_class_binary_japanese_text,
        s(:args),
        s(:begin,
          s(:lvasgn, :file_name,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:str, "../test.ja.txt"),
              s(:str, "(string)"))),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@RP), :binary?,
              s(:lvar, :file_name))))),
      s(:def, :test_class_binary_large_japanese_rdoc,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)), nil,
            s(:send, nil, :skip,
              s(:str, "Encoding not implemented"))),
          s(:block,
            s(:send, nil, :capture_io),
            s(:args),
            s(:kwbegin,
              s(:ensure,
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :extenc),
                      s(:send,
                        s(:const, nil, :Encoding), :default_external=)),
                    s(:array,
                      s(:send,
                        s(:const, nil, :Encoding), :default_external),
                      s(:const,
                        s(:const, nil, :Encoding), :US_ASCII))),
                  s(:lvasgn, :file_name,
                    s(:send,
                      s(:const, nil, :File), :expand_path,
                      s(:str, "../test.ja.largedoc"),
                      s(:str, "(string)"))),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:send,
                        s(:ivar, :@RP), :binary?,
                        s(:lvar, :file_name)), :!))),
                s(:send,
                  s(:const, nil, :Encoding), :default_external=,
                  s(:lvar, :extenc))))))),
      s(:def, :test_class_binary_japanese_rdoc,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)), nil,
            s(:send, nil, :skip,
              s(:str, "Encoding not implemented"))),
          s(:lvasgn, :file_name,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:str, "../test.ja.rdoc"),
              s(:str, "(string)"))),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@RP), :binary?,
              s(:lvar, :file_name))))),
      s(:def, :test_class_can_parse,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@RP), :can_parse,
              s(:str, "(string)")),
            s(:const,
              s(:ivar, :@RP), :Ruby)),
          s(:lvasgn, :readme_file_name,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:str, "../test.txt"),
              s(:str, "(string)"))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:ivar, :@RP), :Simple),
            s(:send,
              s(:ivar, :@RP), :can_parse,
              s(:lvar, :readme_file_name))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:ivar, :@RP), :Simple),
            s(:send,
              s(:ivar, :@RP), :can_parse,
              s(:ivar, :@binary_dat))),
          s(:lvasgn, :jtest_file_name,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:str, "../test.ja.txt"),
              s(:str, "(string)"))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:ivar, :@RP), :Simple),
            s(:send,
              s(:ivar, :@RP), :can_parse,
              s(:lvar, :jtest_file_name))),
          s(:lvasgn, :jtest_rdoc_file_name,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:str, "../test.ja.rdoc"),
              s(:str, "(string)"))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:ivar, :@RP), :Simple),
            s(:send,
              s(:ivar, :@RP), :can_parse,
              s(:lvar, :jtest_rdoc_file_name))),
          s(:lvasgn, :readme_file_name,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:str, "../README"),
              s(:str, "(string)"))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:ivar, :@RP), :Simple),
            s(:send,
              s(:ivar, :@RP), :can_parse,
              s(:lvar, :readme_file_name))),
          s(:lvasgn, :jtest_largerdoc_file_name,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:str, "../test.ja.largedoc"),
              s(:str, "(string)"))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:ivar, :@RP), :Simple),
            s(:send,
              s(:ivar, :@RP), :can_parse,
              s(:lvar, :jtest_largerdoc_file_name))),
          s(:send,
            s(:ivar, :@RP), :alias_extension,
            s(:str, "rdoc"),
            s(:str, "largedoc")),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:ivar, :@RP), :Simple),
            s(:send,
              s(:ivar, :@RP), :can_parse,
              s(:lvar, :jtest_largerdoc_file_name))))),
      s(:def, :test_class_for_executable,
        s(:args),
        s(:block,
          s(:send, nil, :temp_dir),
          s(:args),
          s(:begin,
            s(:lvasgn, :content,
              s(:str, "#!/usr/bin/env ruby -w\n")),
            s(:block,
              s(:send, nil, :open,
                s(:str, "app"),
                s(:str, "w")),
              s(:args,
                s(:arg, :io)),
              s(:send,
                s(:lvar, :io), :write,
                s(:lvar, :content))),
            s(:lvasgn, :app,
              s(:send,
                s(:ivar, :@store), :add_file,
                s(:str, "app"))),
            s(:lvasgn, :parser,
              s(:send,
                s(:ivar, :@RP), :for,
                s(:lvar, :app),
                s(:str, "app"),
                s(:lvar, :content),
                s(:ivar, :@options),
                s(:sym, :stats))),
            s(:send, nil, :assert_kind_of,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Parser), :Ruby),
              s(:lvar, :parser)),
            s(:send, nil, :assert_equal,
              s(:str, "app"),
              s(:send,
                s(:lvar, :parser), :file_name))))),
      s(:def, :test_class_for_forbidden,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Gem), :win_platform?),
            s(:send, nil, :skip,
              s(:str, "chmod not supported")), nil),
          s(:lvasgn, :tf,
            s(:block,
              s(:send,
                s(:const, nil, :Tempfile), :open,
                s(:str, "forbidden")),
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:send,
                        s(:const, nil, :File), :chmod,
                        s(:int, 0),
                        s(:send,
                          s(:lvar, :io), :path)),
                      s(:lvasgn, :forbidden,
                        s(:send,
                          s(:ivar, :@store), :add_file,
                          s(:send,
                            s(:lvar, :io), :path))),
                      s(:lvasgn, :parser,
                        s(:send,
                          s(:ivar, :@RP), :for,
                          s(:lvar, :forbidden),
                          s(:str, "forbidden"),
                          s(:str, ""),
                          s(:ivar, :@options),
                          s(:sym, :stats))),
                      s(:send, nil, :assert_nil,
                        s(:lvar, :parser))),
                    s(:send,
                      s(:const, nil, :File), :chmod,
                      s(:int, 256),
                      s(:send,
                        s(:lvar, :io), :path)))),
                s(:lvar, :io)))),
          s(:if,
            s(:send,
              s(:lvar, :tf), :respond_to?,
              s(:sym, :close!)),
            s(:send,
              s(:lvar, :tf), :close!), nil))),
      s(:def, :test_class_for_modeline,
        s(:args),
        s(:block,
          s(:send, nil, :temp_dir),
          s(:args),
          s(:begin,
            s(:lvasgn, :content,
              s(:str, "# -*- rdoc -*-\n= NEWS\n")),
            s(:block,
              s(:send, nil, :open,
                s(:str, "NEWS"),
                s(:str, "w")),
              s(:args,
                s(:arg, :io)),
              s(:send,
                s(:lvar, :io), :write,
                s(:lvar, :content))),
            s(:lvasgn, :app,
              s(:send,
                s(:ivar, :@store), :add_file,
                s(:str, "NEWS"))),
            s(:lvasgn, :parser,
              s(:send,
                s(:ivar, :@RP), :for,
                s(:lvar, :app),
                s(:str, "NEWS"),
                s(:lvar, :content),
                s(:ivar, :@options),
                s(:sym, :stats))),
            s(:send, nil, :assert_kind_of,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Parser), :Simple),
              s(:lvar, :parser)),
            s(:send, nil, :assert_equal,
              s(:str, "= NEWS\n"),
              s(:send,
                s(:lvar, :parser), :content))))),
      s(:def, :test_can_parse_modeline,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :readme_ext,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Dir), :tmpdir),
                s(:dstr,
                  s(:str, "README.EXT."),
                  s(:begin,
                    s(:gvar, :$$))))),
            s(:block,
              s(:send, nil, :open,
                s(:lvar, :readme_ext),
                s(:str, "w")),
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:send,
                  s(:lvar, :io), :puts,
                  s(:str, "# README.EXT -  -*- rdoc -*- created at: Mon Aug 7 16:45:54 JST 1995")),
                s(:send,
                  s(:lvar, :io), :puts),
                s(:send,
                  s(:lvar, :io), :puts,
                  s(:str, "This document explains how to make extension libraries for Ruby.")))),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Parser), :Simple),
              s(:send,
                s(:ivar, :@RP), :can_parse,
                s(:lvar, :readme_ext)))),
          s(:send,
            s(:const, nil, :File), :unlink,
            s(:lvar, :readme_ext)))),
      s(:def, :test_class_can_parse_zip,
        s(:args),
        s(:begin,
          s(:lvasgn, :hidden_zip,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:str, "../hidden.zip.txt"),
              s(:str, "(string)"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@RP), :can_parse,
              s(:lvar, :hidden_zip))))),
      s(:def, :test_check_modeline,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :readme_ext,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Dir), :tmpdir),
                s(:dstr,
                  s(:str, "README.EXT."),
                  s(:begin,
                    s(:gvar, :$$))))),
            s(:block,
              s(:send, nil, :open,
                s(:lvar, :readme_ext),
                s(:str, "w")),
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:send,
                  s(:lvar, :io), :puts,
                  s(:str, "# README.EXT -  -*- RDoc -*- created at: Mon Aug 7 16:45:54 JST 1995")),
                s(:send,
                  s(:lvar, :io), :puts),
                s(:send,
                  s(:lvar, :io), :puts,
                  s(:str, "This document explains how to make extension libraries for Ruby.")))),
            s(:send, nil, :assert_equal,
              s(:str, "rdoc"),
              s(:send,
                s(:ivar, :@RP), :check_modeline,
                s(:lvar, :readme_ext)))),
          s(:send,
            s(:const, nil, :File), :unlink,
            s(:lvar, :readme_ext)))),
      s(:def, :test_check_modeline_coding,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :readme_ext,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Dir), :tmpdir),
                s(:dstr,
                  s(:str, "README.EXT."),
                  s(:begin,
                    s(:gvar, :$$))))),
            s(:block,
              s(:send, nil, :open,
                s(:lvar, :readme_ext),
                s(:str, "w")),
              s(:args,
                s(:arg, :io)),
              s(:send,
                s(:lvar, :io), :puts,
                s(:str, "# -*- coding: utf-8 -*-"))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:ivar, :@RP), :check_modeline,
                s(:lvar, :readme_ext)))),
          s(:send,
            s(:const, nil, :File), :unlink,
            s(:lvar, :readme_ext)))),
      s(:def, :test_check_modeline_with_other,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :readme_ext,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Dir), :tmpdir),
                s(:dstr,
                  s(:str, "README.EXT."),
                  s(:begin,
                    s(:gvar, :$$))))),
            s(:block,
              s(:send, nil, :open,
                s(:lvar, :readme_ext),
                s(:str, "w")),
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:send,
                  s(:lvar, :io), :puts,
                  s(:str, "# README.EXT -  -*- mode: RDoc; indent-tabs-mode: nil -*-")),
                s(:send,
                  s(:lvar, :io), :puts),
                s(:send,
                  s(:lvar, :io), :puts,
                  s(:str, "This document explains how to make extension libraries for Ruby.")))),
            s(:send, nil, :assert_equal,
              s(:str, "rdoc"),
              s(:send,
                s(:ivar, :@RP), :check_modeline,
                s(:lvar, :readme_ext)))),
          s(:send,
            s(:const, nil, :File), :unlink,
            s(:lvar, :readme_ext)))),
      s(:def, :test_check_modeline_no_modeline,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :readme_ext,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Dir), :tmpdir),
                s(:dstr,
                  s(:str, "README.EXT."),
                  s(:begin,
                    s(:gvar, :$$))))),
            s(:block,
              s(:send, nil, :open,
                s(:lvar, :readme_ext),
                s(:str, "w")),
              s(:args,
                s(:arg, :io)),
              s(:send,
                s(:lvar, :io), :puts,
                s(:str, "This document explains how to make extension libraries for Ruby."))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:ivar, :@RP), :check_modeline,
                s(:lvar, :readme_ext)))),
          s(:send,
            s(:const, nil, :File), :unlink,
            s(:lvar, :readme_ext)))),
      s(:def, :test_class_for_binary,
        s(:args),
        s(:begin,
          s(:lvasgn, :rp,
            s(:send,
              s(:ivar, :@RP), :dup)),
          s(:sclass,
            s(:lvar, :rp),
            s(:alias,
              s(:sym, :old_can_parse),
              s(:sym, :can_parse))),
          s(:defs,
            s(:lvar, :rp), :can_parse,
            s(:args,
              s(:restarg, :args)),
            s(:nil)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@RP), :for,
              s(:nil),
              s(:ivar, :@binary_dat),
              s(:nil),
              s(:nil),
              s(:nil))))),
      s(:def, :test_class_for_markup,
        s(:args),
        s(:begin,
          s(:lvasgn, :content,
            s(:str, "# coding: utf-8 markup: rd\n")),
          s(:lvasgn, :parser,
            s(:send,
              s(:ivar, :@RP), :for,
              s(:ivar, :@top_level),
              s(:str, "(string)"),
              s(:lvar, :content),
              s(:ivar, :@options),
              s(:nil))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:ivar, :@RP), :RD),
            s(:lvar, :parser)))),
      s(:def, :test_class_use_markup,
        s(:args),
        s(:begin,
          s(:lvasgn, :content,
            s(:str, "# coding: utf-8 markup: rd\n")),
          s(:lvasgn, :parser,
            s(:send,
              s(:ivar, :@RP), :use_markup,
              s(:lvar, :content))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:ivar, :@RP), :RD),
            s(:lvar, :parser)))),
      s(:def, :test_class_use_markup_markdown,
        s(:args),
        s(:begin,
          s(:lvasgn, :content,
            s(:str, "# coding: utf-8 markup: markdown\n")),
          s(:lvasgn, :parser,
            s(:send,
              s(:ivar, :@RP), :use_markup,
              s(:lvar, :content))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:ivar, :@RP), :Ruby),
            s(:lvar, :parser)))),
      s(:def, :test_class_use_markup_modeline,
        s(:args),
        s(:begin,
          s(:lvasgn, :content,
            s(:dstr,
              s(:str, "# -*- coding: utf-8 -*-\n"),
              s(:str, "# markup: rd\n"))),
          s(:lvasgn, :parser,
            s(:send,
              s(:ivar, :@RP), :use_markup,
              s(:lvar, :content))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:ivar, :@RP), :RD),
            s(:lvar, :parser)))),
      s(:def, :test_class_use_markup_modeline_shebang,
        s(:args),
        s(:begin,
          s(:lvasgn, :content,
            s(:dstr,
              s(:str, "#!/bin/sh\n"),
              s(:str, "/* -*- coding: utf-8 -*-\n"),
              s(:str, " * markup: rd\n"),
              s(:str, " */\n"))),
          s(:lvasgn, :parser,
            s(:send,
              s(:ivar, :@RP), :use_markup,
              s(:lvar, :content))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:ivar, :@RP), :RD),
            s(:lvar, :parser)))),
      s(:def, :test_class_use_markup_shebang,
        s(:args),
        s(:begin,
          s(:lvasgn, :content,
            s(:dstr,
              s(:str, "#!/usr/bin/env ruby\n"),
              s(:str, "# coding: utf-8 markup: rd\n"))),
          s(:lvasgn, :parser,
            s(:send,
              s(:ivar, :@RP), :use_markup,
              s(:lvar, :content))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:ivar, :@RP), :RD),
            s(:lvar, :parser)))),
      s(:def, :test_class_use_markup_tomdoc,
        s(:args),
        s(:begin,
          s(:lvasgn, :content,
            s(:str, "# coding: utf-8 markup: tomdoc\n")),
          s(:lvasgn, :parser,
            s(:send,
              s(:ivar, :@RP), :use_markup,
              s(:lvar, :content))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:ivar, :@RP), :Ruby),
            s(:lvar, :parser)))),
      s(:def, :test_class_use_markup_none,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:ivar, :@RP), :use_markup,
              s(:str, ""))),
          s(:send, nil, :assert_nil,
            s(:lvar, :parser)))),
      s(:def, :test_class_use_markup_unknown,
        s(:args),
        s(:begin,
          s(:lvasgn, :content,
            s(:str, "# :markup: RDoc\n")),
          s(:lvasgn, :parser,
            s(:send,
              s(:ivar, :@RP), :use_markup,
              s(:lvar, :content))),
          s(:send, nil, :assert_nil,
            s(:lvar, :parser)))),
      s(:def, :test_initialize,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@RP), :new,
            s(:ivar, :@top_level),
            s(:ivar, :@fn),
            s(:str, ""),
            s(:ivar, :@options),
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@RP),
            s(:send,
              s(:ivar, :@top_level), :parser)))))))
