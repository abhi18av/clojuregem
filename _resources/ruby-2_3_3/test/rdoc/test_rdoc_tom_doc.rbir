s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocTomDoc),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:ivasgn, :@TD,
            s(:const,
              s(:const, nil, :RDoc), :TomDoc)),
          s(:ivasgn, :@td,
            s(:send,
              s(:ivar, :@TD), :new)))),
      s(:def, :test_class_add_post_processor,
        s(:args),
        s(:begin,
          s(:send,
            s(:const,
              s(:const, nil, :RDoc), :TomDoc), :add_post_processor),
          s(:lvasgn, :pp,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :PreProcess), :new,
              s(:str, "(string)"),
              s(:array))),
          s(:lvasgn, :text,
            s(:str, "# Public: Do some stuff\n")),
          s(:lvasgn, :comment,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Comment), :new,
              s(:lvar, :text),
              s(:nil))),
          s(:send,
            s(:lvar, :comment), :format=,
            s(:str, "tomdoc")),
          s(:lvasgn, :parent,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Context), :new)),
          s(:send,
            s(:lvar, :pp), :handle,
            s(:lvar, :comment),
            s(:lvar, :parent)),
          s(:lvasgn, :method,
            s(:send,
              s(:lvar, :parent), :add_method,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "m")))),
          s(:send, nil, :assert_equal,
            s(:str, "Public"),
            s(:send,
              s(:send,
                s(:lvar, :method), :section), :title)),
          s(:send, nil, :assert_equal,
            s(:str, "# Do some stuff\n"),
            s(:send,
              s(:lvar, :comment), :text)))),
      s(:def, :test_class_signature,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :comment,
              s(:dstr,
                s(:str, "Signature\n"),
                s(:str, "\n"),
                s(:str, "  method_<here>(args)\n"),
                s(:str, "\n"),
                s(:str, "here - something\n")))),
          s(:send,
            s(:lvar, :c), :format=,
            s(:str, "tomdoc")),
          s(:lvasgn, :signature,
            s(:send,
              s(:ivar, :@TD), :signature,
              s(:lvar, :c))),
          s(:send, nil, :assert_equal,
            s(:str, "method_<here>(args)\n"),
            s(:lvar, :signature)))),
      s(:def, :test_class_signature_no_space,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :comment,
              s(:dstr,
                s(:str, "Signature\n"),
                s(:str, "  method_<here>(args)\n"),
                s(:str, "\n"),
                s(:str, "here - something\n")))),
          s(:send,
            s(:lvar, :c), :format=,
            s(:str, "tomdoc")),
          s(:lvasgn, :signature,
            s(:send,
              s(:ivar, :@TD), :signature,
              s(:lvar, :c))),
          s(:send, nil, :assert_equal,
            s(:str, "method_<here>(args)\n"),
            s(:lvar, :signature)),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Signature")),
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "here")),
                  s(:send, nil, :para,
                    s(:str, "something")))))),
          s(:send,
            s(:lvar, :expected), :file=,
            s(:ivar, :@top_level)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :c), :parse)))),
      s(:def, :test_class_signature_none,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :comment,
              s(:str, ""))),
          s(:send,
            s(:lvar, :c), :format=,
            s(:str, "tomdoc")),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@TD), :signature,
              s(:lvar, :c))))),
      s(:def, :test_class_rdoc,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :comment,
              s(:dstr,
                s(:str, "=== Signature\n"),
                s(:str, "\n"),
                s(:str, "  method_<here>(args)\n"),
                s(:str, "\n"),
                s(:str, "here - something\n")))),
          s(:send,
            s(:lvar, :c), :format=,
            s(:str, "rdoc")),
          s(:lvasgn, :signature,
            s(:send,
              s(:ivar, :@TD), :signature,
              s(:lvar, :c))),
          s(:send, nil, :assert_nil,
            s(:lvar, :signature)))),
      s(:def, :test_class_signature_two_space,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :comment,
              s(:dstr,
                s(:str, "Signature\n"),
                s(:str, "\n"),
                s(:str, "\n"),
                s(:str, "  method_<here>(args)\n"),
                s(:str, "\n"),
                s(:str, "here - something\n")))),
          s(:send,
            s(:lvar, :c), :format=,
            s(:str, "tomdoc")),
          s(:lvasgn, :signature,
            s(:send,
              s(:ivar, :@TD), :signature,
              s(:lvar, :c))),
          s(:send, nil, :assert_equal,
            s(:str, "method_<here>(args)\n"),
            s(:lvar, :signature)),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Signature")),
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "here")),
                  s(:send, nil, :para,
                    s(:str, "something")))))),
          s(:send,
            s(:lvar, :expected), :file=,
            s(:ivar, :@top_level)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :c), :parse)))),
      s(:def, :test_parse_paragraph,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:str, "Public: Do some stuff\n")),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "Do some stuff")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@TD), :parse,
              s(:lvar, :text))))),
      s(:def, :test_parse_multiline_paragraph,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:str, "Public: Do some stuff\n")),
          s(:send,
            s(:lvar, :text), :<<,
            s(:str, "On a new line\n")),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Do some stuff"),
                s(:str, " "),
                s(:str, "On a new line")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@TD), :parse,
              s(:lvar, :text))))),
      s(:def, :test_parse_arguments,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "Create new Arg object.\n"),
              s(:str, "\n"),
              s(:str, "name        - name of argument\n"),
              s(:str, "description - arguments description\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Create new Arg object.")),
              s(:send, nil, :blank_line),
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "name")),
                  s(:send, nil, :para,
                    s(:str, "name of argument"))),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "description")),
                  s(:send, nil, :para,
                    s(:str, "arguments description")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@TD), :parse,
              s(:lvar, :text))))),
      s(:def, :test_parse_arguments_array,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "Create new Arg object.\n"),
              s(:str, "\n"),
              s(:str, "names[] - names of arguments\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Create new Arg object.")),
              s(:send, nil, :blank_line),
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "names[]")),
                  s(:send, nil, :para,
                    s(:str, "names of arguments")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@TD), :parse,
              s(:lvar, :text))))),
      s(:def, :test_parse_arguments_multiline,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "Do some stuff\n"),
              s(:str, "\n"),
              s(:str, "foo - A comment goes here\n"),
              s(:str, "  and is more than one line\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Do some stuff")),
              s(:send, nil, :blank_line),
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "foo")),
                  s(:send, nil, :para,
                    s(:str, "A comment goes here"),
                    s(:str, " "),
                    s(:str, "and is more than one line")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@TD), :parse,
              s(:lvar, :text))))),
      s(:def, :test_parse_arguments_nested,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "Do some stuff\n"),
              s(:str, "\n"),
              s(:str, "foo - A comment goes here\n"),
              s(:str, "      :bar - bar documentation\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Do some stuff")),
              s(:send, nil, :blank_line),
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "foo")),
                  s(:send, nil, :para,
                    s(:str, "A comment goes here")),
                  s(:send, nil, :list,
                    s(:sym, :NOTE),
                    s(:send, nil, :item,
                      s(:array,
                        s(:str, ":bar")),
                      s(:send, nil, :para,
                        s(:str, "bar documentation")))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@TD), :parse,
              s(:lvar, :text))))),
      s(:def, :test_parse_examples,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "Do some stuff\n"),
              s(:str, "\n"),
              s(:str, "Examples\n"),
              s(:str, "\n"),
              s(:str, "  1 + 1\n"))),
          s(:lvasgn, :code,
            s(:send, nil, :verb,
              s(:str, "1 + 1\n"))),
          s(:send,
            s(:lvar, :code), :format=,
            s(:sym, :ruby)),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Do some stuff")),
              s(:send, nil, :blank_line),
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Examples")),
              s(:send, nil, :blank_line),
              s(:lvar, :code))),
          s(:lvasgn, :document,
            s(:send,
              s(:ivar, :@TD), :parse,
              s(:lvar, :text))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :document)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :document), :parts), :last), :ruby?)))),
      s(:def, :test_parse_examples_signature,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "Do some stuff\n"),
              s(:str, "\n"),
              s(:str, "Examples\n"),
              s(:str, "\n"),
              s(:str, "  1 + 1\n"),
              s(:str, "\n"),
              s(:str, "Signature\n"),
              s(:str, "\n"),
              s(:str, "  foo(args)\n"))),
          s(:lvasgn, :code1,
            s(:send, nil, :verb,
              s(:str, "1 + 1\n"))),
          s(:send,
            s(:lvar, :code1), :format=,
            s(:sym, :ruby)),
          s(:lvasgn, :code2,
            s(:send, nil, :verb,
              s(:str, "foo(args)\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Do some stuff")),
              s(:send, nil, :blank_line),
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Examples")),
              s(:send, nil, :blank_line),
              s(:lvar, :code1),
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Signature")),
              s(:send, nil, :blank_line),
              s(:lvar, :code2))),
          s(:lvasgn, :document,
            s(:send,
              s(:ivar, :@TD), :parse,
              s(:lvar, :text))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :document)))),
      s(:def, :test_parse_returns,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "Do some stuff\n"),
              s(:str, "\n"),
              s(:str, "Returns a thing\n"),
              s(:str, "\n"),
              s(:str, "Returns another thing\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Do some stuff")),
              s(:send, nil, :blank_line),
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Returns")),
              s(:send, nil, :blank_line),
              s(:send, nil, :para,
                s(:str, "Returns a thing")),
              s(:send, nil, :blank_line),
              s(:send, nil, :para,
                s(:str, "Returns another thing")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@TD), :parse,
              s(:lvar, :text))))),
      s(:def, :test_parse_returns_multiline,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "Do some stuff\n"),
              s(:str, "\n"),
              s(:str, "Returns a thing\n"),
              s(:str, "  that is multiline\n"))),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "Do some stuff")),
              s(:send, nil, :blank_line),
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Returns")),
              s(:send, nil, :blank_line),
              s(:send, nil, :para,
                s(:str, "Returns a thing"),
                s(:str, " "),
                s(:str, "that is multiline")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@TD), :parse,
              s(:lvar, :text))))),
      s(:def, :test_parse_signature,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "Do some stuff\n"),
              s(:str, "\n"),
              s(:str, "Signature\n"),
              s(:str, "\n"),
              s(:str, "  some_method(args)\n"))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "Do some stuff")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 3),
                s(:str, "Signature")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "some_method(args)\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@TD), :parse,
              s(:lvar, :text))))),
      s(:def, :test_tokenize_paragraph,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@td), :tokenize,
            s(:str, "Public: Do some stuff\n")),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :TEXT),
                s(:str, "Do some stuff"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 13),
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@td), :tokens)))),
      s(:def, :test_tokenize_multiline_paragraph,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:str, "Public: Do some stuff\n")),
          s(:send,
            s(:lvar, :text), :<<,
            s(:str, "On a new line\n")),
          s(:send,
            s(:ivar, :@td), :tokenize,
            s(:lvar, :text)),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :TEXT),
                s(:str, "Do some stuff"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 13),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "On a new line"),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 13),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@td), :tokens)))),
      s(:def, :test_tokenize_arguments,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@td), :tokenize,
            s(:dstr,
              s(:str, "Create new Arg object.\n"),
              s(:str, "\n"),
              s(:str, "name        - name of argument\n"),
              s(:str, "description - arguments description\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :TEXT),
                s(:str, "Create new Arg object."),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 22),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :NOTE),
                s(:str, "name"),
                s(:int, 0),
                s(:int, 2)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "name of argument"),
                s(:int, 14),
                s(:int, 2)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 30),
                s(:int, 2)),
              s(:array,
                s(:sym, :NOTE),
                s(:str, "description"),
                s(:int, 0),
                s(:int, 3)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "arguments description"),
                s(:int, 14),
                s(:int, 3)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 35),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@td), :tokens)))),
      s(:def, :test_tokenize_arguments_array,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@td), :tokenize,
            s(:dstr,
              s(:str, "Create new Arg object.\n"),
              s(:str, "\n"),
              s(:str, "names[stuff] - names of arguments\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :TEXT),
                s(:str, "Create new Arg object."),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 22),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :NOTE),
                s(:str, "names[stuff]"),
                s(:int, 0),
                s(:int, 2)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "names of arguments"),
                s(:int, 15),
                s(:int, 2)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 33),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@td), :tokens)))),
      s(:def, :test_tokenize_arguments_multiline,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@td), :tokenize,
            s(:dstr,
              s(:str, "Do some stuff\n"),
              s(:str, "\n"),
              s(:str, "foo - A comment goes here\n"),
              s(:str, "  and is more than one line\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :TEXT),
                s(:str, "Do some stuff"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 13),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :NOTE),
                s(:str, "foo"),
                s(:int, 0),
                s(:int, 2)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "A comment goes here"),
                s(:int, 6),
                s(:int, 2)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 25),
                s(:int, 2)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "and is more than one line"),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 27),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@td), :tokens)))),
      s(:def, :test_tokenize_arguments_nested,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@td), :tokenize,
            s(:dstr,
              s(:str, "Do some stuff\n"),
              s(:str, "\n"),
              s(:str, "foo - A comment goes here\n"),
              s(:str, "      :bar - bar documentation\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :TEXT),
                s(:str, "Do some stuff"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 13),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :NOTE),
                s(:str, "foo"),
                s(:int, 0),
                s(:int, 2)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "A comment goes here"),
                s(:int, 6),
                s(:int, 2)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 25),
                s(:int, 2)),
              s(:array,
                s(:sym, :NOTE),
                s(:str, ":bar"),
                s(:int, 6),
                s(:int, 3)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "bar documentation"),
                s(:int, 13),
                s(:int, 3)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 30),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@td), :tokens)))),
      s(:def, :test_tokenize_examples,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@td), :tokenize,
            s(:dstr,
              s(:str, "Do some stuff\n"),
              s(:str, "\n"),
              s(:str, "Examples\n"),
              s(:str, "\n"),
              s(:str, "  1 + 1\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :TEXT),
                s(:str, "Do some stuff"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 13),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :HEADER),
                s(:int, 3),
                s(:int, 0),
                s(:int, 2)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "Examples"),
                s(:int, 0),
                s(:int, 2)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 8),
                s(:int, 2)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 0),
                s(:int, 3)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "1 + 1"),
                s(:int, 2),
                s(:int, 4)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 7),
                s(:int, 4)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@td), :tokens)))),
      s(:def, :test_tokenize_returns,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@td), :tokenize,
            s(:dstr,
              s(:str, "Do some stuff\n"),
              s(:str, "\n"),
              s(:str, "Returns a thing\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :TEXT),
                s(:str, "Do some stuff"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 13),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "Returns a thing"),
                s(:int, 0),
                s(:int, 2)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 15),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@td), :tokens)))),
      s(:def, :test_tokenize_returns_multiline,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@td), :tokenize,
            s(:dstr,
              s(:str, "Do some stuff\n"),
              s(:str, "\n"),
              s(:str, "Returns a thing\n"),
              s(:str, "  that is multiline\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :TEXT),
                s(:str, "Do some stuff"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 13),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "Returns a thing"),
                s(:int, 0),
                s(:int, 2)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 15),
                s(:int, 2)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "that is multiline"),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 19),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@td), :tokens)))))))
