s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocMarkupParagraph),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :test_accept,
        s(:args),
        s(:begin,
          s(:lvasgn, :visitor,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :visitor), :accept_paragraph,
            s(:args,
              s(:arg, :obj)),
            s(:ivasgn, :@obj,
              s(:lvar, :obj))),
          s(:defs,
            s(:lvar, :visitor), :obj,
            s(:args),
            s(:ivar, :@obj)),
          s(:lvasgn, :paragraph,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Paragraph), :new)),
          s(:send,
            s(:lvar, :paragraph), :accept,
            s(:lvar, :visitor)),
          s(:send, nil, :assert_same,
            s(:lvar, :paragraph),
            s(:send,
              s(:lvar, :visitor), :obj)))),
      s(:def, :test_text,
        s(:args),
        s(:begin,
          s(:lvasgn, :paragraph,
            s(:send, nil, :para,
              s(:str, "hello"),
              s(:str, " world"))),
          s(:send, nil, :assert_equal,
            s(:str, "hello world"),
            s(:send,
              s(:lvar, :paragraph), :text)))),
      s(:def, :test_text_break,
        s(:args),
        s(:begin,
          s(:lvasgn, :paragraph,
            s(:send, nil, :para,
              s(:str, "hello"),
              s(:send, nil, :hard_break),
              s(:str, "world"))),
          s(:send, nil, :assert_equal,
            s(:str, "helloworld"),
            s(:send,
              s(:lvar, :paragraph), :text)),
          s(:send, nil, :assert_equal,
            s(:str, "hello\nworld"),
            s(:send,
              s(:lvar, :paragraph), :text,
              s(:str, "\n"))))))))
