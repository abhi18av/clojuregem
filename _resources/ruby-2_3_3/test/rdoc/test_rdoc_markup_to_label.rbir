s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocMarkupToLabel),
    s(:const,
      s(:const,
        s(:const, nil, :RDoc), :Markup), :FormatterTestCase),
    s(:begin,
      s(:send, nil, :add_visitor_tests),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@to,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :ToLabel), :new)))),
      s(:def, :empty,
        s(:args),
        s(:send, nil, :assert_empty,
          s(:send,
            s(:ivar, :@to), :res))),
      s(:def, :end_accepting,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "hi")),
          s(:send,
            s(:ivar, :@to), :res))),
      s(:alias,
        s(:sym, :accept_blank_line),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_block_quote),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_document),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_heading),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_heading_1),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_heading_2),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_heading_3),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_heading_4),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_heading_b),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_heading_suppressed_crossref),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_end_bullet),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_end_label),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_end_lalpha),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_end_note),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_end_number),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_end_ualpha),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_item_end_bullet),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_item_end_label),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_item_end_lalpha),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_item_end_note),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_item_end_number),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_item_end_ualpha),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_item_start_bullet),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_item_start_label),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_item_start_lalpha),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_item_start_note),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_item_start_note_2),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_item_start_note_multi_description),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_item_start_note_multi_label),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_item_start_number),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_item_start_ualpha),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_start_bullet),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_start_label),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_start_lalpha),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_start_note),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_start_number),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_list_start_ualpha),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_paragraph),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_paragraph_b),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_paragraph_br),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_paragraph_break),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_paragraph_i),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_paragraph_plus),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_paragraph_star),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_paragraph_underscore),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_raw),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_rule),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :accept_verbatim),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :list_nested),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :list_verbatim),
        s(:sym, :empty)),
      s(:alias,
        s(:sym, :start_accepting),
        s(:sym, :empty)),
      s(:def, :test_convert_bold,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "bold"),
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "<b>bold</b>"))),
          s(:send, nil, :assert_equal,
            s(:str, "bold"),
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "*bold*"))))),
      s(:def, :test_convert_crossref,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "SomeClass"),
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "SomeClass"))),
          s(:send, nil, :assert_equal,
            s(:str, "SomeClass"),
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "\\SomeClass"))),
          s(:send, nil, :assert_equal,
            s(:str, "some_method"),
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "some_method"))),
          s(:send, nil, :assert_equal,
            s(:str, "some_method"),
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "\\some_method"))),
          s(:send, nil, :assert_equal,
            s(:str, "23some_method"),
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "#some_method"))),
          s(:send, nil, :assert_equal,
            s(:str, "23some_method"),
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "\\#some_method"))))),
      s(:def, :test_convert_em,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "em"),
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "<em>em</em>"))),
          s(:send, nil, :assert_equal,
            s(:str, "em"),
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "*em*"))))),
      s(:def, :test_convert_em_dash,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "-"),
          s(:send,
            s(:ivar, :@to), :convert,
            s(:str, "--")))),
      s(:def, :test_convert_escape,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "a+-3E+b"),
          s(:send,
            s(:ivar, :@to), :convert,
            s(:str, "a > b")))),
      s(:def, :test_convert_tidylink,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "text"),
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "{text}[stuff]"))),
          s(:send, nil, :assert_equal,
            s(:str, "text"),
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "text[stuff]"))))),
      s(:def, :test_convert_tt,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "tt"),
          s(:send,
            s(:ivar, :@to), :convert,
            s(:str, "<tt>tt</tt>")))))))
