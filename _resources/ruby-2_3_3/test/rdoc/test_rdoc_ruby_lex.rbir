s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocRubyLex),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:ivasgn, :@TK,
          s(:const,
            s(:const, nil, :RDoc), :RubyToken))),
      s(:def, :test_class_tokenize,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "def x() end"),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkDEF), :new,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:str, "def")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSPACE), :new,
                s(:int, 3),
                s(:int, 1),
                s(:int, 3),
                s(:str, " ")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkIDENTIFIER), :new,
                s(:int, 4),
                s(:int, 1),
                s(:int, 4),
                s(:str, "x")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkLPAREN), :new,
                s(:int, 5),
                s(:int, 1),
                s(:int, 5),
                s(:str, "(")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkRPAREN), :new,
                s(:int, 6),
                s(:int, 1),
                s(:int, 6),
                s(:str, ")")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSPACE), :new,
                s(:int, 7),
                s(:int, 1),
                s(:int, 7),
                s(:str, " ")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkEND), :new,
                s(:int, 8),
                s(:int, 1),
                s(:int, 8),
                s(:str, "end")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 11),
                s(:int, 1),
                s(:int, 11),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :tokens)))),
      s(:def, :test_class_tokenize___END__,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "__END__"),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkEND_OF_SCRIPT), :new,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:str, "__END__")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 7),
                s(:int, 1),
                s(:int, 7),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :tokens)))),
      s(:def, :test_class_tokenize_character_literal,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "?\\"),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkCHAR), :new,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:str, "?\\")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 2),
                s(:int, 1),
                s(:int, 2),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :tokens)))),
      s(:def, :test_class_tokenize_def_heredoc,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:dstr,
                s(:str, "def x\n"),
                s(:str, "  <<E\n"),
                s(:str, "Line 1\n"),
                s(:str, "Line 2\n"),
                s(:str, "E\n"),
                s(:str, "end\n")),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkDEF), :new,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:str, "def")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSPACE), :new,
                s(:int, 3),
                s(:int, 1),
                s(:int, 3),
                s(:str, " ")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkIDENTIFIER), :new,
                s(:int, 4),
                s(:int, 1),
                s(:int, 4),
                s(:str, "x")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 5),
                s(:int, 1),
                s(:int, 5),
                s(:str, "\n")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSPACE), :new,
                s(:int, 6),
                s(:int, 2),
                s(:int, 0),
                s(:str, "  ")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkHEREDOC), :new,
                s(:int, 8),
                s(:int, 2),
                s(:int, 2),
                s(:str, "<<E\nLine 1\nLine 2\nE")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 27),
                s(:int, 5),
                s(:int, 28),
                s(:str, "\n")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkEND), :new,
                s(:int, 28),
                s(:int, 6),
                s(:int, 0),
                s(:str, "end")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 31),
                s(:int, 6),
                s(:int, 28),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :tokens)))),
      s(:def, :test_class_tokenize_hash_symbol,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "{ class:\"foo\" }"),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkLBRACE), :new,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:str, "{")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSPACE), :new,
                s(:int, 1),
                s(:int, 1),
                s(:int, 1),
                s(:str, " ")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkIDENTIFIER), :new,
                s(:int, 2),
                s(:int, 1),
                s(:int, 2),
                s(:str, "class")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSYMBEG), :new,
                s(:int, 7),
                s(:int, 1),
                s(:int, 7),
                s(:str, ":")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSTRING), :new,
                s(:int, 8),
                s(:int, 1),
                s(:int, 8),
                s(:str, "\"foo\"")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSPACE), :new,
                s(:int, 13),
                s(:int, 1),
                s(:int, 13),
                s(:str, " ")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkRBRACE), :new,
                s(:int, 14),
                s(:int, 1),
                s(:int, 14),
                s(:str, "}")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 15),
                s(:int, 1),
                s(:int, 15),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :tokens)))),
      s(:def, :test_class_tokenize_heredoc_CR_NL,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:dstr,
                s(:str, "string = <<-STRING\r\n"),
                s(:str, "Line 1\r\n"),
                s(:str, "Line 2\r\n"),
                s(:str, "  STRING\r\n")),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkIDENTIFIER), :new,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:str, "string")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSPACE), :new,
                s(:int, 6),
                s(:int, 1),
                s(:int, 6),
                s(:str, " ")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkASSIGN), :new,
                s(:int, 7),
                s(:int, 1),
                s(:int, 7),
                s(:str, "=")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSPACE), :new,
                s(:int, 8),
                s(:int, 1),
                s(:int, 8),
                s(:str, " ")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkHEREDOC), :new,
                s(:int, 9),
                s(:int, 1),
                s(:int, 9),
                s(:str, "<<-STRING\nLine 1\nLine 2\n  STRING")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSPACE), :new,
                s(:int, 44),
                s(:int, 4),
                s(:int, 45),
                s(:str, "\r")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 45),
                s(:int, 4),
                s(:int, 46),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :tokens)))),
      s(:def, :test_class_tokenize_heredoc_call,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:dstr,
                s(:str, "string = <<-STRING.chomp\n"),
                s(:str, "Line 1\n"),
                s(:str, "Line 2\n"),
                s(:str, "  STRING\n")),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkIDENTIFIER), :new,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:str, "string")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSPACE), :new,
                s(:int, 6),
                s(:int, 1),
                s(:int, 6),
                s(:str, " ")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkASSIGN), :new,
                s(:int, 7),
                s(:int, 1),
                s(:int, 7),
                s(:str, "=")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSPACE), :new,
                s(:int, 8),
                s(:int, 1),
                s(:int, 8),
                s(:str, " ")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSTRING), :new,
                s(:int, 9),
                s(:int, 1),
                s(:int, 9),
                s(:str, "\"Line 1\nLine 2\n\"")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkDOT), :new,
                s(:int, 41),
                s(:int, 4),
                s(:int, 42),
                s(:str, ".")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkIDENTIFIER), :new,
                s(:int, 42),
                s(:int, 4),
                s(:int, 43),
                s(:str, "chomp")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 47),
                s(:int, 4),
                s(:int, 48),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :tokens)))),
      s(:def, :test_class_tokenize_heredoc_indent,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:dstr,
                s(:str, "string = <<-STRING\n"),
                s(:str, "Line 1\n"),
                s(:str, "Line 2\n"),
                s(:str, "  STRING\n")),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkIDENTIFIER), :new,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:str, "string")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSPACE), :new,
                s(:int, 6),
                s(:int, 1),
                s(:int, 6),
                s(:str, " ")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkASSIGN), :new,
                s(:int, 7),
                s(:int, 1),
                s(:int, 7),
                s(:str, "=")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSPACE), :new,
                s(:int, 8),
                s(:int, 1),
                s(:int, 8),
                s(:str, " ")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkHEREDOC), :new,
                s(:int, 9),
                s(:int, 1),
                s(:int, 9),
                s(:str, "<<-STRING\nLine 1\nLine 2\n  STRING")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 41),
                s(:int, 4),
                s(:int, 42),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :tokens)))),
      s(:def, :test_class_tokenize_heredoc_missing_end,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :RubyLex), :Error)),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :RubyLex), :tokenize,
                s(:dstr,
                  s(:str, ">> string1 = <<-TXT\n"),
                  s(:str, ">\" That's swell\n"),
                  s(:str, ">\" TXT\n")),
                s(:nil)))),
          s(:send, nil, :assert_equal,
            s(:str, "Missing terminating TXT for string"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_class_tokenize_heredoc_percent_N,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:dstr,
                s(:str, "a b <<-U\n"),
                s(:str, "%N\n"),
                s(:str, "U\n")),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkIDENTIFIER), :new,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:str, "a")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSPACE), :new,
                s(:int, 1),
                s(:int, 1),
                s(:int, 1),
                s(:str, " ")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkIDENTIFIER), :new,
                s(:int, 2),
                s(:int, 1),
                s(:int, 2),
                s(:str, "b")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSPACE), :new,
                s(:int, 3),
                s(:int, 1),
                s(:int, 3),
                s(:str, " ")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkHEREDOC), :new,
                s(:int, 4),
                s(:int, 1),
                s(:int, 4),
                s(:str, "<<-U\n%N\nU")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 13),
                s(:int, 3),
                s(:int, 14),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :tokens)))),
      s(:def, :test_class_tokenize_identifier_high_unicode,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "𝖒"),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkIDENTIFIER), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "𝖒"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :tokens), :first)))),
      s(:def, :test_class_tokenize_percent_1,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "v%10==10"),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkIDENTIFIER), :new,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:str, "v")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkMOD), :new,
                s(:int, 1),
                s(:int, 1),
                s(:int, 1),
                s(:str, "%")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkINTEGER), :new,
                s(:int, 2),
                s(:int, 1),
                s(:int, 2),
                s(:str, "10")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkEQ), :new,
                s(:int, 4),
                s(:int, 1),
                s(:int, 4),
                s(:str, "==")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkINTEGER), :new,
                s(:int, 6),
                s(:int, 1),
                s(:int, 6),
                s(:str, "10")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 8),
                s(:int, 1),
                s(:int, 8),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :tokens)))),
      s(:def, :test_class_tokenize_percent_r,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "%r[hi]"),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkREGEXP), :new,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:str, "%r[hi]")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 6),
                s(:int, 1),
                s(:int, 6),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :tokens)))),
      s(:def, :test_class_tokenize_percent_w,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "%w[hi]"),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkDSTRING), :new,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:str, "%w[hi]")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 6),
                s(:int, 1),
                s(:int, 6),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :tokens)))),
      s(:def, :test_class_tokenize_percent_w_quote,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "%w\"hi\""),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkDSTRING), :new,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:str, "%w\"hi\"")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 6),
                s(:int, 1),
                s(:int, 6),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :tokens)))),
      s(:def, :test_class_tokenize_regexp,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "/hay/"),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkREGEXP), :new,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:str, "/hay/")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 5),
                s(:int, 1),
                s(:int, 5),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :tokens)))),
      s(:def, :test_class_tokenize_regexp_options,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "/hAY/i"),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkREGEXP), :new,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:str, "/hAY/i")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 6),
                s(:int, 1),
                s(:int, 6),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :tokens)),
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "/hAY/ix"),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkREGEXP), :new,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:str, "/hAY/ix")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 7),
                s(:int, 1),
                s(:int, 7),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :tokens)))),
      s(:def, :test_class_tokenize_regexp_backref,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "/[csh](..) [csh]\\1 in/"),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkREGEXP), :new,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:str, "/[csh](..) [csh]\\1 in/")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 22),
                s(:int, 1),
                s(:int, 22),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :tokens)))),
      s(:def, :test_class_tokenize_regexp_escape,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "/\\//"),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkREGEXP), :new,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:str, "/\\//")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 4),
                s(:int, 1),
                s(:int, 4),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :tokens)))),
      s(:def, :test_class_tokenize_string,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "'hi'"),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSTRING), :new,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:str, "'hi'")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 4),
                s(:int, 1),
                s(:int, 4),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :tokens)))),
      s(:def, :test_class_tokenize_string_escape,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\n\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\n\"")),
            s(:send,
              s(:lvar, :tokens), :first)),
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\r\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\r\"")),
            s(:send,
              s(:lvar, :tokens), :first)),
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\f\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\f\"")),
            s(:send,
              s(:lvar, :tokens), :first)),
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\\\\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\\\\"")),
            s(:send,
              s(:lvar, :tokens), :first)),
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\t\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\t\"")),
            s(:send,
              s(:lvar, :tokens), :first)),
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\v\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\v\"")),
            s(:send,
              s(:lvar, :tokens), :first)),
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\a\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\a\"")),
            s(:send,
              s(:lvar, :tokens), :first)),
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\e\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\e\"")),
            s(:send,
              s(:lvar, :tokens), :first)),
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\b\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\b\"")),
            s(:send,
              s(:lvar, :tokens), :first)),
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\s\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\s\"")),
            s(:send,
              s(:lvar, :tokens), :first)),
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\d\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\d\"")),
            s(:send,
              s(:lvar, :tokens), :first)))),
      s(:def, :test_class_tokenize_string_escape_control,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\C-a\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\C-a\"")),
            s(:send,
              s(:lvar, :tokens), :first)),
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\c\\a\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\c\\a\"")),
            s(:send,
              s(:lvar, :tokens), :first)),
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\C-\\M-a\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\C-\\M-a\"")),
            s(:send,
              s(:lvar, :tokens), :first)))),
      s(:def, :test_class_tokenize_string_escape_meta,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\M-a\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\M-a\"")),
            s(:send,
              s(:lvar, :tokens), :first)),
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\M-\\C-a\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\M-\\C-a\"")),
            s(:send,
              s(:lvar, :tokens), :first)))),
      s(:def, :test_class_tokenize_string_escape_hexadecimal,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\x0\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\x0\"")),
            s(:send,
              s(:lvar, :tokens), :first)),
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\x00\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\x00\"")),
            s(:send,
              s(:lvar, :tokens), :first)),
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\x000\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\x000\"")),
            s(:send,
              s(:lvar, :tokens), :first)))),
      s(:def, :test_class_tokenize_string_escape_octal,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\0\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\0\"")),
            s(:send,
              s(:lvar, :tokens), :first)),
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\00\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\00\"")),
            s(:send,
              s(:lvar, :tokens), :first)),
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "\"\\000\""),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@TK), :TkSTRING), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 0),
              s(:str, "\"\\000\"")),
            s(:send,
              s(:lvar, :tokens), :first)))),
      s(:def, :test_class_tokenize_symbol,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokens,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :tokenize,
              s(:str, "scope module: :v1"),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkIDENTIFIER), :new,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:str, "scope")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSPACE), :new,
                s(:int, 5),
                s(:int, 1),
                s(:int, 5),
                s(:str, " ")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkIDENTIFIER), :new,
                s(:int, 6),
                s(:int, 1),
                s(:int, 6),
                s(:str, "module")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkCOLON), :new,
                s(:int, 12),
                s(:int, 1),
                s(:int, 12),
                s(:str, ":")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSPACE), :new,
                s(:int, 13),
                s(:int, 1),
                s(:int, 13),
                s(:str, " ")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkSYMBEG), :new,
                s(:int, 14),
                s(:int, 1),
                s(:int, 14),
                s(:str, ":")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkIDENTIFIER), :new,
                s(:int, 15),
                s(:int, 1),
                s(:int, 15),
                s(:str, "v1")),
              s(:send,
                s(:const,
                  s(:ivar, :@TK), :TkNL), :new,
                s(:int, 17),
                s(:int, 1),
                s(:int, 17),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :tokens)))),
      s(:def, :test_unary_minus,
        s(:args),
        s(:begin,
          s(:lvasgn, :ruby_lex,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :new,
              s(:str, "-1"),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:str, "-1"),
            s(:send,
              s(:send,
                s(:lvar, :ruby_lex), :token), :value)),
          s(:lvasgn, :ruby_lex,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :new,
              s(:str, "a[-2]"),
              s(:nil))),
          s(:block,
            s(:send,
              s(:int, 2), :times),
            s(:args),
            s(:send,
              s(:lvar, :ruby_lex), :token)),
          s(:send, nil, :assert_equal,
            s(:str, "-2"),
            s(:send,
              s(:send,
                s(:lvar, :ruby_lex), :token), :value)),
          s(:lvasgn, :ruby_lex,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :new,
              s(:str, "a[0..-12]"),
              s(:nil))),
          s(:block,
            s(:send,
              s(:int, 4), :times),
            s(:args),
            s(:send,
              s(:lvar, :ruby_lex), :token)),
          s(:send, nil, :assert_equal,
            s(:str, "-12"),
            s(:send,
              s(:send,
                s(:lvar, :ruby_lex), :token), :value)),
          s(:lvasgn, :ruby_lex,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :new,
              s(:str, "0+-0.1"),
              s(:nil))),
          s(:block,
            s(:send,
              s(:int, 2), :times),
            s(:args),
            s(:send,
              s(:lvar, :ruby_lex), :token)),
          s(:send, nil, :assert_equal,
            s(:str, "-0.1"),
            s(:send,
              s(:send,
                s(:lvar, :ruby_lex), :token), :value)))))))
