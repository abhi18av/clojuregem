s(:begin,
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:str, "../xref_test_case"),
      s(:str, "(string)"))),
  s(:class,
    s(:const, nil, :TestRDocContext),
    s(:const, nil, :XrefTestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@context,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Context), :new)),
          s(:send,
            s(:ivar, :@context), :store=,
            s(:ivar, :@store)),
          s(:ivasgn, :@enumerator,
            s(:if,
              s(:send,
                s(:const, nil, :Object), :const_defined?,
                s(:sym, :Enumerator)),
              s(:const, nil, :Enumerator),
              s(:const,
                s(:const, nil, :Enumerable), :Enumerator))))),
      s(:def, :test_initialize,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@context), :in_files)),
          s(:send, nil, :assert_equal,
            s(:str, "unknown"),
            s(:send,
              s(:ivar, :@context), :name)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@context), :comment)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@context), :parent)),
          s(:send, nil, :assert_equal,
            s(:sym, :public),
            s(:send,
              s(:ivar, :@context), :visibility)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:ivar, :@context), :sections), :length)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@context), :temporary_section)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@context), :classes_hash)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@context), :modules_hash)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@context), :method_list)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@context), :attributes)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@context), :aliases)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@context), :requires)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@context), :includes)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@context), :constants)))),
      s(:def, :test_add_alias,
        s(:args),
        s(:begin,
          s(:lvasgn, :as,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Alias), :new,
              s(:nil),
              s(:str, "old_name"),
              s(:str, "new_name"),
              s(:str, "comment"))),
          s(:send,
            s(:ivar, :@context), :add_alias,
            s(:lvar, :as)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :as)),
            s(:send,
              s(:ivar, :@context), :external_aliases)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :as)),
            s(:send,
              s(:send,
                s(:ivar, :@context), :unmatched_alias_lists), :[],
              s(:str, "#old_name"))))),
      s(:def, :test_add,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@context), :add,
            s(:const,
              s(:const, nil, :RDoc), :Extend),
            s(:str, "Ext"),
            s(:str, "comment")),
          s(:send,
            s(:ivar, :@context), :add,
            s(:const,
              s(:const, nil, :RDoc), :Include),
            s(:str, "Incl"),
            s(:str, "comment")),
          s(:send, nil, :refute_empty,
            s(:send,
              s(:ivar, :@context), :extends)),
          s(:send, nil, :refute_empty,
            s(:send,
              s(:ivar, :@context), :includes)))),
      s(:def, :test_add_alias_method_attr,
        s(:args),
        s(:begin,
          s(:lvasgn, :top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :attr,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "old_name"),
              s(:str, "R"),
              s(:str, ""))),
          s(:lvasgn, :as,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Alias), :new,
              s(:nil),
              s(:str, "old_name"),
              s(:str, "new_name"),
              s(:str, "comment"))),
          s(:send,
            s(:lvar, :as), :record_location,
            s(:lvar, :top_level)),
          s(:send,
            s(:lvar, :as), :parent=,
            s(:ivar, :@context)),
          s(:send,
            s(:ivar, :@context), :add_attribute,
            s(:lvar, :attr)),
          s(:send,
            s(:ivar, :@context), :add_alias,
            s(:lvar, :as)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@context), :aliases)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@context), :unmatched_alias_lists)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "old_name"),
              s(:str, "new_name")),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@context), :attributes), :map),
              s(:args,
                s(:arg, :m)),
              s(:send,
                s(:lvar, :m), :name))),
          s(:lvasgn, :new,
            s(:send,
              s(:send,
                s(:ivar, :@context), :attributes), :last)),
          s(:send, nil, :assert_equal,
            s(:lvar, :top_level),
            s(:send,
              s(:lvar, :new), :file)))),
      s(:def, :test_add_alias_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :meth,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "old_name"))),
          s(:send,
            s(:lvar, :meth), :singleton=,
            s(:false)),
          s(:lvasgn, :as,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Alias), :new,
              s(:nil),
              s(:str, "old_name"),
              s(:str, "new_name"),
              s(:str, "comment"))),
          s(:send,
            s(:lvar, :as), :record_location,
            s(:lvar, :top_level)),
          s(:send,
            s(:lvar, :as), :parent=,
            s(:ivar, :@context)),
          s(:send,
            s(:ivar, :@context), :add_method,
            s(:lvar, :meth)),
          s(:send,
            s(:ivar, :@context), :add_alias,
            s(:lvar, :as)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@context), :aliases)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@context), :unmatched_alias_lists)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "old_name"),
              s(:str, "new_name")),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@context), :method_list), :map),
              s(:args,
                s(:arg, :m)),
              s(:send,
                s(:lvar, :m), :name))),
          s(:lvasgn, :new,
            s(:send,
              s(:send,
                s(:ivar, :@context), :method_list), :last)),
          s(:send, nil, :assert_equal,
            s(:lvar, :top_level),
            s(:send,
              s(:lvar, :new), :file)))),
      s(:def, :test_add_alias_method_singleton,
        s(:args),
        s(:begin,
          s(:lvasgn, :meth,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "old_name"))),
          s(:send,
            s(:lvar, :meth), :singleton=,
            s(:true)),
          s(:lvasgn, :as,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Alias), :new,
              s(:nil),
              s(:str, "old_name"),
              s(:str, "new_name"),
              s(:str, "comment"))),
          s(:send,
            s(:lvar, :as), :singleton=,
            s(:true)),
          s(:send,
            s(:lvar, :as), :parent=,
            s(:ivar, :@context)),
          s(:send,
            s(:ivar, :@context), :add_method,
            s(:lvar, :meth)),
          s(:send,
            s(:ivar, :@context), :add_alias,
            s(:lvar, :as)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@context), :aliases)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@context), :unmatched_alias_lists)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "old_name"),
              s(:str, "new_name")),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@context), :method_list), :map),
              s(:args,
                s(:arg, :m)),
              s(:send,
                s(:lvar, :m), :name))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@context), :method_list), :last), :singleton)))),
      s(:def, :test_add_class,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c1), :add_class,
            s(:const,
              s(:const, nil, :RDoc), :NormalClass),
            s(:str, "Klass"),
            s(:str, "Object")),
          s(:send, nil, :assert_includes,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@c1), :classes), :map),
              s(:args,
                s(:arg, :k)),
              s(:send,
                s(:lvar, :k), :full_name)),
            s(:str, "C1::Klass")),
          s(:send, nil, :assert_includes,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@store), :all_classes), :map),
              s(:args,
                s(:arg, :k)),
              s(:send,
                s(:lvar, :k), :full_name)),
            s(:str, "C1::Klass")))),
      s(:def, :test_add_class_basic_object,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:const, nil, :BasicObject)), nil,
            s(:send, nil, :skip,
              s(:str, "BasicObject is 1.9 only"))),
          s(:send,
            s(:ivar, :@xref_data), :add_class,
            s(:const,
              s(:const, nil, :RDoc), :NormalClass),
            s(:str, "BasicObject")),
          s(:lvasgn, :basic,
            s(:send,
              s(:ivar, :@xref_data), :find_module_named,
              s(:str, "BasicObject"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :basic), :superclass)),
          s(:send,
            s(:ivar, :@c1), :add_class,
            s(:const,
              s(:const, nil, :RDoc), :NormalClass),
            s(:str, "BasicObject")),
          s(:lvasgn, :basic,
            s(:send,
              s(:ivar, :@c1), :find_module_named,
              s(:str, "BasicObject"))),
          s(:send, nil, :assert_equal,
            s(:str, "Object"),
            s(:send,
              s(:lvar, :basic), :superclass)))),
      s(:def, :test_add_class_object,
        s(:args),
        s(:begin,
          s(:lvasgn, :root_class,
            s(:if,
              s(:defined?,
                s(:const, nil, :BasicObject)),
              s(:str, "BasicObject"),
              s(:nil))),
          s(:send,
            s(:ivar, :@xref_data), :add_class,
            s(:const,
              s(:const, nil, :RDoc), :NormalClass),
            s(:str, "Object")),
          s(:lvasgn, :object,
            s(:send,
              s(:ivar, :@xref_data), :find_module_named,
              s(:str, "Object"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :root_class),
            s(:send,
              s(:lvar, :object), :superclass)),
          s(:send,
            s(:ivar, :@c1), :add_class,
            s(:const,
              s(:const, nil, :RDoc), :NormalClass),
            s(:str, "Object")),
          s(:lvasgn, :object,
            s(:send,
              s(:ivar, :@c1), :find_module_named,
              s(:str, "Object"))),
          s(:send, nil, :assert_equal,
            s(:str, "Object"),
            s(:send,
              s(:send,
                s(:lvar, :object), :superclass), :full_name)))),
      s(:def, :test_add_class_singleton,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c1), :add_class,
            s(:const,
              s(:const, nil, :RDoc), :NormalClass),
            s(:str, "Klass"),
            s(:str, "Object")),
          s(:send, nil, :assert_includes,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@c1), :classes), :map),
              s(:args,
                s(:arg, :k)),
              s(:send,
                s(:lvar, :k), :full_name)),
            s(:str, "C1::Klass")),
          s(:send, nil, :assert_includes,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@store), :all_classes), :map),
              s(:args,
                s(:arg, :k)),
              s(:send,
                s(:lvar, :k), :full_name)),
            s(:str, "C1::Klass")))),
      s(:def, :test_add_class_superclass,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c1), :add_class,
            s(:const,
              s(:const, nil, :RDoc), :NormalClass),
            s(:str, "Klass"),
            s(:str, "Object")),
          s(:send,
            s(:ivar, :@c1), :add_class,
            s(:const,
              s(:const, nil, :RDoc), :NormalClass),
            s(:str, "Klass"),
            s(:str, "Other")),
          s(:send,
            s(:ivar, :@c1), :add_class,
            s(:const,
              s(:const, nil, :RDoc), :NormalClass),
            s(:str, "Klass"),
            s(:str, "Object")),
          s(:lvasgn, :klass,
            s(:send,
              s(:ivar, :@c1), :find_module_named,
              s(:str, "Klass"))),
          s(:send, nil, :assert_equal,
            s(:str, "Other"),
            s(:send,
              s(:lvar, :klass), :superclass)))),
      s(:def, :test_add_class_upgrade,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c1), :add_module,
            s(:const,
              s(:const, nil, :RDoc), :NormalModule),
            s(:str, "Klass")),
          s(:send,
            s(:ivar, :@c1), :add_class,
            s(:const,
              s(:const, nil, :RDoc), :NormalClass),
            s(:str, "Klass"),
            s(:nil)),
          s(:send, nil, :assert_includes,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@c1), :classes), :map),
              s(:args,
                s(:arg, :k)),
              s(:send,
                s(:lvar, :k), :full_name)),
            s(:str, "C1::Klass"),
            s(:str, "c1 classes")),
          s(:send, nil, :refute_includes,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@c1), :modules), :map),
              s(:args,
                s(:arg, :k)),
              s(:send,
                s(:lvar, :k), :full_name)),
            s(:str, "C1::Klass"),
            s(:str, "c1 modules")),
          s(:send, nil, :assert_includes,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@store), :all_classes), :map),
              s(:args,
                s(:arg, :k)),
              s(:send,
                s(:lvar, :k), :full_name)),
            s(:str, "C1::Klass"),
            s(:str, "TopLevel classes")),
          s(:send, nil, :refute_includes,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@store), :all_modules), :map),
              s(:args,
                s(:arg, :k)),
              s(:send,
                s(:lvar, :k), :full_name)),
            s(:str, "C1::Klass"),
            s(:str, "TopLevel modules")))),
      s(:def, :test_add_constant,
        s(:args),
        s(:begin,
          s(:lvasgn, :const,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "NAME"),
              s(:str, "value"),
              s(:str, "comment"))),
          s(:send,
            s(:ivar, :@context), :add_constant,
            s(:lvar, :const)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :const)),
            s(:send,
              s(:ivar, :@context), :constants)))),
      s(:def, :test_add_extend,
        s(:args),
        s(:begin,
          s(:lvasgn, :ext,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Extend), :new,
              s(:str, "Name"),
              s(:str, "comment"))),
          s(:send,
            s(:ivar, :@context), :add_extend,
            s(:lvar, :ext)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :ext)),
            s(:send,
              s(:ivar, :@context), :extends)))),
      s(:def, :test_add_include,
        s(:args),
        s(:begin,
          s(:lvasgn, :incl,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "Name"),
              s(:str, "comment"))),
          s(:send,
            s(:ivar, :@context), :add_include,
            s(:lvar, :incl)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :incl)),
            s(:send,
              s(:ivar, :@context), :includes)))),
      s(:def, :test_add_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :meth,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "old_name"))),
          s(:send,
            s(:lvar, :meth), :visibility=,
            s(:nil)),
          s(:send,
            s(:ivar, :@context), :add_method,
            s(:lvar, :meth)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :meth)),
            s(:send,
              s(:ivar, :@context), :method_list)),
          s(:send, nil, :assert_equal,
            s(:sym, :public),
            s(:send,
              s(:lvar, :meth), :visibility)))),
      s(:def, :test_add_method_alias,
        s(:args),
        s(:begin,
          s(:lvasgn, :as,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Alias), :new,
              s(:nil),
              s(:str, "old_name"),
              s(:str, "new_name"),
              s(:str, "comment"))),
          s(:lvasgn, :meth,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "old_name"))),
          s(:send,
            s(:ivar, :@context), :add_alias,
            s(:lvar, :as)),
          s(:send, nil, :refute_empty,
            s(:send,
              s(:ivar, :@context), :external_aliases)),
          s(:send,
            s(:ivar, :@context), :add_method,
            s(:lvar, :meth)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@context), :external_aliases)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@context), :unmatched_alias_lists)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "old_name"),
              s(:str, "new_name")),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@context), :method_list), :map),
              s(:args,
                s(:arg, :m)),
              s(:send,
                s(:lvar, :m), :name))))),
      s(:def, :test_add_method_duplicate,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:send,
                s(:ivar, :@store), :rdoc), :options), :verbosity=,
            s(:int, 2)),
          s(:lvasgn, :meth1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "name"))),
          s(:send,
            s(:lvar, :meth1), :record_location,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "first.rb"))),
          s(:send,
            s(:lvar, :meth1), :visibility=,
            s(:nil)),
          s(:send,
            s(:lvar, :meth1), :comment=,
            s(:send, nil, :comment,
              s(:str, "first"))),
          s(:send,
            s(:ivar, :@context), :add_method,
            s(:lvar, :meth1)),
          s(:lvasgn, :meth2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "name"))),
          s(:send,
            s(:lvar, :meth2), :record_location,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "second.rb"))),
          s(:send,
            s(:lvar, :meth2), :comment=,
            s(:send, nil, :comment,
              s(:str, "second"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :_),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :verbose_capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@context), :add_method,
                s(:lvar, :meth2)))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "Duplicate method (unknown)#name in file second.rb, "),
              s(:str, "previously in file first.rb"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :err), :chomp)),
          s(:lvasgn, :method,
            s(:send,
              s(:send,
                s(:ivar, :@context), :method_list), :first)),
          s(:send, nil, :assert_equal,
            s(:str, "first"),
            s(:send,
              s(:send,
                s(:lvar, :method), :comment), :text)))),
      s(:def, :test_add_method_duplicate_loading,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@context), :store=,
            s(:nil)),
          s(:lvasgn, :meth1,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "name"))),
          s(:send,
            s(:lvar, :meth1), :record_location,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "first.rb"))),
          s(:send,
            s(:lvar, :meth1), :visibility=,
            s(:nil)),
          s(:send,
            s(:lvar, :meth1), :comment=,
            s(:send, nil, :comment,
              s(:str, "first"))),
          s(:send,
            s(:ivar, :@context), :add_method,
            s(:lvar, :meth1)),
          s(:lvasgn, :meth2,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "name"))),
          s(:send,
            s(:lvar, :meth2), :record_location,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "second.rb"))),
          s(:send,
            s(:lvar, :meth2), :comment=,
            s(:send, nil, :comment,
              s(:str, "second"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :_),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :verbose_capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@context), :add_method,
                s(:lvar, :meth2)))),
          s(:send, nil, :assert_empty,
            s(:lvar, :err)),
          s(:lvasgn, :method,
            s(:send,
              s(:send,
                s(:ivar, :@context), :method_list), :first)),
          s(:send, nil, :assert_equal,
            s(:str, "first"),
            s(:send,
              s(:send,
                s(:lvar, :method), :comment), :text)))),
      s(:def, :test_add_module,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c1), :add_module,
            s(:const,
              s(:const, nil, :RDoc), :NormalModule),
            s(:str, "Mod")),
          s(:send, nil, :assert_includes,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@c1), :modules), :map),
              s(:args,
                s(:arg, :m)),
              s(:send,
                s(:lvar, :m), :full_name)),
            s(:str, "C1::Mod")))),
      s(:def, :test_add_module_alias,
        s(:args),
        s(:begin,
          s(:lvasgn, :tl,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :c3_c4,
            s(:send,
              s(:ivar, :@c2), :add_module_alias,
              s(:ivar, :@c2_c3),
              s(:str, "C4"),
              s(:lvar, :tl))),
          s(:lvasgn, :alias_constant,
            s(:send,
              s(:send,
                s(:ivar, :@c2), :constants), :first)),
          s(:send, nil, :assert_equal,
            s(:str, "C2::C4"),
            s(:send,
              s(:lvar, :c3_c4), :full_name)),
          s(:send, nil, :assert_equal,
            s(:lvar, :tl),
            s(:send,
              s(:lvar, :alias_constant), :file)))),
      s(:def, :test_add_module_alias_top_level,
        s(:args),
        s(:begin,
          s(:lvasgn, :store,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:lvasgn, :top_level,
            s(:send,
              s(:lvar, :store), :add_file,
              s(:str, "file.rb"))),
          s(:lvasgn, :klass,
            s(:send,
              s(:lvar, :top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"))),
          s(:send,
            s(:lvar, :klass), :comment=,
            s(:str, "klass comment")),
          s(:lvasgn, :object,
            s(:send,
              s(:lvar, :top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Object"))),
          s(:send,
            s(:lvar, :top_level), :add_module_alias,
            s(:lvar, :klass),
            s(:str, "A"),
            s(:lvar, :top_level)),
          s(:send, nil, :refute_empty,
            s(:send,
              s(:lvar, :object), :constants)),
          s(:lvasgn, :constant,
            s(:send,
              s(:send,
                s(:lvar, :object), :constants), :first)),
          s(:send, nil, :assert_equal,
            s(:str, "klass comment"),
            s(:send,
              s(:lvar, :constant), :comment)))),
      s(:def, :test_add_module_class,
        s(:args),
        s(:begin,
          s(:lvasgn, :k,
            s(:send,
              s(:ivar, :@c1), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Klass"),
              s(:nil))),
          s(:lvasgn, :m,
            s(:send,
              s(:ivar, :@c1), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "Klass"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :k),
            s(:lvar, :m),
            s(:str, "returns class")),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@c1), :modules)))),
      s(:def, :test_add_require,
        s(:args),
        s(:begin,
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Require), :new,
              s(:str, "require"),
              s(:str, "comment"))),
          s(:send,
            s(:ivar, :@c1), :add_require,
            s(:lvar, :req)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@c1), :requires)),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:send,
                s(:ivar, :@c1), :top_level), :requires),
            s(:lvar, :req)))),
      s(:def, :test_add_section,
        s(:args),
        s(:begin,
          s(:lvasgn, :default_section,
            s(:send,
              s(:send,
                s(:ivar, :@context), :sections), :first)),
          s(:send,
            s(:ivar, :@context), :add_section,
            s(:nil),
            s(:send, nil, :comment,
              s(:str, "comment"),
              s(:ivar, :@top_level))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:ivar, :@context), :sections), :length)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :comment,
                s(:str, "comment"),
                s(:ivar, :@top_level))),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@context), :sections), :first), :comments)),
          s(:send,
            s(:ivar, :@context), :add_section,
            s(:nil),
            s(:send, nil, :comment,
              s(:str, "new comment"),
              s(:ivar, :@top_level))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:ivar, :@context), :sections), :length)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :comment,
                s(:str, "comment"),
                s(:ivar, :@top_level)),
              s(:send, nil, :comment,
                s(:str, "new comment"),
                s(:ivar, :@top_level))),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@context), :sections), :first), :comments)),
          s(:send,
            s(:ivar, :@context), :add_section,
            s(:str, "other"),
            s(:send, nil, :comment,
              s(:str, ""),
              s(:ivar, :@top_level))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:ivar, :@context), :sections), :length)),
          s(:lvasgn, :new_section,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@context), :sections), :find),
              s(:args,
                s(:arg, :section)),
              s(:send,
                s(:send,
                  s(:lvar, :section), :title), :==,
                s(:str, "other")))),
          s(:send, nil, :assert,
            s(:lvar, :new_section)),
          s(:send, nil, :assert_equal,
            s(:lvar, :default_section),
            s(:send,
              s(:ivar, :@context), :current_section)))),
      s(:def, :test_add_section_no_comment,
        s(:args),
        s(:begin,
          s(:lvasgn, :default_section,
            s(:send,
              s(:send,
                s(:ivar, :@context), :sections), :first)),
          s(:send,
            s(:ivar, :@context), :add_section,
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:ivar, :@context), :sections), :length)),
          s(:send,
            s(:ivar, :@context), :add_section,
            s(:str, "other")),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:ivar, :@context), :sections), :length)),
          s(:lvasgn, :new_section,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@context), :sections), :find),
              s(:args,
                s(:arg, :section)),
              s(:send,
                s(:send,
                  s(:lvar, :section), :title), :==,
                s(:str, "other")))),
          s(:send, nil, :assert,
            s(:lvar, :new_section)),
          s(:send, nil, :assert_equal,
            s(:lvar, :default_section),
            s(:send,
              s(:ivar, :@context), :current_section)))),
      s(:def, :test_add_to,
        s(:args),
        s(:begin,
          s(:lvasgn, :incl,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "Name"),
              s(:str, "comment"))),
          s(:lvasgn, :arr,
            s(:array)),
          s(:send,
            s(:ivar, :@context), :add_to,
            s(:lvar, :arr),
            s(:lvar, :incl)),
          s(:send, nil, :assert_includes,
            s(:lvar, :arr),
            s(:lvar, :incl)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@context),
            s(:send,
              s(:lvar, :incl), :parent)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@context), :current_section),
            s(:send,
              s(:lvar, :incl), :section)))),
      s(:def, :test_add_to_temporary_section,
        s(:args),
        s(:begin,
          s(:lvasgn, :incl,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "Name"),
              s(:str, "comment"))),
          s(:lvasgn, :arr,
            s(:array)),
          s(:lvasgn, :section,
            s(:send,
              s(:ivar, :@context), :add_section,
              s(:str, "temporary"),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Comment), :new,
                s(:str, ""),
                s(:ivar, :@top_level)))),
          s(:send,
            s(:ivar, :@context), :temporary_section=,
            s(:lvar, :section)),
          s(:send,
            s(:ivar, :@context), :add_to,
            s(:lvar, :arr),
            s(:lvar, :incl)),
          s(:send, nil, :assert_includes,
            s(:lvar, :arr),
            s(:lvar, :incl)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@context),
            s(:send,
              s(:lvar, :incl), :parent)),
          s(:send, nil, :assert_equal,
            s(:lvar, :section),
            s(:send,
              s(:lvar, :incl), :section)))),
      s(:def, :test_add_to_no_document_self,
        s(:args),
        s(:begin,
          s(:lvasgn, :incl,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "Name"),
              s(:str, "comment"))),
          s(:lvasgn, :arr,
            s(:array)),
          s(:send,
            s(:ivar, :@context), :document_self=,
            s(:false)),
          s(:send,
            s(:ivar, :@context), :add_to,
            s(:lvar, :arr),
            s(:lvar, :incl)),
          s(:send, nil, :refute_includes,
            s(:lvar, :arr),
            s(:lvar, :incl)))),
      s(:def, :test_add_to_done_documenting,
        s(:args),
        s(:begin,
          s(:lvasgn, :incl,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "Name"),
              s(:str, "comment"))),
          s(:lvasgn, :arr,
            s(:array)),
          s(:send,
            s(:ivar, :@context), :done_documenting=,
            s(:true)),
          s(:send,
            s(:ivar, :@context), :add_to,
            s(:lvar, :arr),
            s(:lvar, :incl)),
          s(:send, nil, :refute_includes,
            s(:lvar, :arr),
            s(:lvar, :incl)))),
      s(:def, :bench_add_include,
        s(:args),
        s(:begin,
          s(:lvasgn, :cm,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :new,
              s(:str, "Klass"))),
          s(:block,
            s(:send, nil, :assert_performance_linear,
              s(:float, 0.9)),
            s(:args,
              s(:arg, :count)),
            s(:block,
              s(:send,
                s(:lvar, :count), :times),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:lvar, :cm), :add_include,
                s(:send,
                  s(:const,
                    s(:const, nil, :RDoc), :Include), :new,
                  s(:dstr,
                    s(:str, "N::M"),
                    s(:begin,
                      s(:lvar, :i))),
                  s(:nil))))))),
      s(:def, :test_child_name,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "C1::C1"),
          s(:send,
            s(:ivar, :@c1), :child_name,
            s(:str, "C1")))),
      s(:def, :test_classes,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "C2::C3")),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@c2), :classes), :map),
              s(:args,
                s(:arg, :k)),
              s(:send,
                s(:lvar, :k), :full_name))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "C3::H1"),
              s(:str, "C3::H2")),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:ivar, :@c3), :classes), :map),
                s(:args,
                  s(:arg, :k)),
                s(:send,
                  s(:lvar, :k), :full_name)), :sort)))),
      s(:def, :test_current_section,
        s(:args),
        s(:begin,
          s(:lvasgn, :default_section,
            s(:send,
              s(:ivar, :@context), :current_section)),
          s(:lvasgn, :new_section,
            s(:send,
              s(:ivar, :@context), :add_section,
              s(:str, "other"),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Comment), :new,
                s(:str, ""),
                s(:ivar, :@top_level)))),
          s(:send,
            s(:ivar, :@context), :temporary_section=,
            s(:lvar, :new_section)),
          s(:send, nil, :assert_equal,
            s(:lvar, :new_section),
            s(:send,
              s(:ivar, :@context), :current_section)),
          s(:send, nil, :assert_equal,
            s(:lvar, :default_section),
            s(:send,
              s(:ivar, :@context), :current_section)))),
      s(:def, :test_defined_in_eh,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@c1), :defined_in?,
              s(:send,
                s(:ivar, :@c1), :top_level))),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@c1), :defined_in?,
              s(:send,
                s(:ivar, :@store), :add_file,
                s(:str, "name.rb")))))),
      s(:def, :test_equals2,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:ivar, :@c3),
            s(:ivar, :@c3)),
          s(:send, nil, :refute_equal,
            s(:ivar, :@c2),
            s(:ivar, :@c3)),
          s(:send, nil, :refute_equal,
            s(:ivar, :@c2_c3),
            s(:ivar, :@c3)))),
      s(:def, :test_each_method_enumerator,
        s(:args),
        s(:send, nil, :assert_kind_of,
          s(:ivar, :@enumerator),
          s(:send,
            s(:ivar, :@c1), :each_method))),
      s(:def, :test_each_section,
        s(:args),
        s(:begin,
          s(:lvasgn, :sects,
            s(:array)),
          s(:lvasgn, :consts,
            s(:array)),
          s(:lvasgn, :attrs,
            s(:array)),
          s(:block,
            s(:send,
              s(:ivar, :@c1), :each_section),
            s(:args,
              s(:arg, :section),
              s(:arg, :constants),
              s(:arg, :attributes)),
            s(:begin,
              s(:send,
                s(:lvar, :sects), :<<,
                s(:lvar, :section)),
              s(:send,
                s(:lvar, :consts), :<<,
                s(:lvar, :constants)),
              s(:send,
                s(:lvar, :attrs), :<<,
                s(:lvar, :attributes)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:nil),
              s(:str, "separate")),
            s(:block,
              s(:send,
                s(:lvar, :sects), :map),
              s(:args,
                s(:arg, :section)),
              s(:send,
                s(:lvar, :section), :title))),
          s(:lvasgn, :expected_consts,
            s(:array,
              s(:array,
                s(:send,
                  s(:send,
                    s(:ivar, :@c1), :constants), :first)),
              s(:array))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected_consts),
            s(:lvar, :consts)),
          s(:lvasgn, :expected_attrs,
            s(:array,
              s(:array,
                s(:send,
                  s(:send,
                    s(:ivar, :@c1), :attributes), :[],
                  s(:int, 0)),
                s(:send,
                  s(:send,
                    s(:ivar, :@c1), :attributes), :[],
                  s(:int, 3))),
              s(:array,
                s(:send,
                  s(:send,
                    s(:ivar, :@c1), :attributes), :[],
                  s(:int, 1)),
                s(:send,
                  s(:send,
                    s(:ivar, :@c1), :attributes), :[],
                  s(:int, 2))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected_attrs),
            s(:lvar, :attrs)))),
      s(:def, :test_each_section_enumerator,
        s(:args),
        s(:send, nil, :assert_kind_of,
          s(:ivar, :@enumerator),
          s(:send,
            s(:ivar, :@c1), :each_section))),
      s(:def, :test_find_attribute_named,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@c1), :find_attribute_named,
              s(:str, "none"))),
          s(:send, nil, :assert_equal,
            s(:str, "R"),
            s(:send,
              s(:send,
                s(:ivar, :@c1), :find_attribute_named,
                s(:str, "attr")), :rw)),
          s(:send, nil, :assert_equal,
            s(:str, "R"),
            s(:send,
              s(:send,
                s(:ivar, :@c1), :find_attribute_named,
                s(:str, "attr_reader")), :rw)),
          s(:send, nil, :assert_equal,
            s(:str, "W"),
            s(:send,
              s(:send,
                s(:ivar, :@c1), :find_attribute_named,
                s(:str, "attr_writer")), :rw)),
          s(:send, nil, :assert_equal,
            s(:str, "RW"),
            s(:send,
              s(:send,
                s(:ivar, :@c1), :find_attribute_named,
                s(:str, "attr_accessor")), :rw)))),
      s(:def, :test_find_class_method_named,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@c1), :find_class_method_named,
              s(:str, "none"))),
          s(:lvasgn, :m,
            s(:send,
              s(:ivar, :@c1), :find_class_method_named,
              s(:str, "m"))),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:const, nil, :RDoc), :AnyMethod),
            s(:lvar, :m)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :m), :singleton)))),
      s(:def, :test_find_constant_named,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@c1), :find_constant_named,
              s(:str, "NONE"))),
          s(:send, nil, :assert_equal,
            s(:str, ":const"),
            s(:send,
              s(:send,
                s(:ivar, :@c1), :find_constant_named,
                s(:str, "CONST")), :value)))),
      s(:def, :test_find_enclosing_module_named,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@c2_c3), :find_enclosing_module_named,
              s(:str, "NONE"))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@c1),
            s(:send,
              s(:ivar, :@c2_c3), :find_enclosing_module_named,
              s(:str, "C1"))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@c2),
            s(:send,
              s(:ivar, :@c2_c3), :find_enclosing_module_named,
              s(:str, "C2"))))),
      s(:def, :test_find_file_named,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@c1), :find_file_named,
              s(:str, "nonexistent.rb"))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@xref_data),
            s(:send,
              s(:ivar, :@c1), :find_file_named,
              s(:ivar, :@file_name))))),
      s(:def, :test_find_instance_method_named,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@c1), :find_instance_method_named,
              s(:str, "none"))),
          s(:lvasgn, :m,
            s(:send,
              s(:ivar, :@c1), :find_instance_method_named,
              s(:str, "m"))),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:const, nil, :RDoc), :AnyMethod),
            s(:lvar, :m)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :m), :singleton)))),
      s(:def, :test_find_local_symbol,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:ivar, :@c1), :find_local_symbol,
                s(:str, "m")), :singleton)),
          s(:send, nil, :assert_equal,
            s(:str, ":const"),
            s(:send,
              s(:send,
                s(:ivar, :@c1), :find_local_symbol,
                s(:str, "CONST")), :value)),
          s(:send, nil, :assert_equal,
            s(:str, "R"),
            s(:send,
              s(:send,
                s(:ivar, :@c1), :find_local_symbol,
                s(:str, "attr")), :rw)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@xref_data),
            s(:send,
              s(:ivar, :@c1), :find_local_symbol,
              s(:ivar, :@file_name))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@c2_c3),
            s(:send,
              s(:ivar, :@c2), :find_local_symbol,
              s(:str, "C3"))))),
      s(:def, :test_find_method_named,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:true),
          s(:send,
            s(:send,
              s(:ivar, :@c1), :find_method_named,
              s(:str, "m")), :singleton))),
      s(:def, :test_find_module_named,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:ivar, :@c2_c3),
            s(:send,
              s(:ivar, :@c2), :find_module_named,
              s(:str, "C3"))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@c2),
            s(:send,
              s(:ivar, :@c2), :find_module_named,
              s(:str, "C2"))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@c1),
            s(:send,
              s(:ivar, :@c2), :find_module_named,
              s(:str, "C1"))),
          s(:send, nil, :assert_equal,
            s(:str, "C2::C3"),
            s(:send,
              s(:send,
                s(:ivar, :@c2), :find_module_named,
                s(:str, "C3")), :full_name)))),
      s(:def, :test_find_symbol,
        s(:args),
        s(:begin,
          s(:lvasgn, :c3,
            s(:send,
              s(:ivar, :@xref_data), :find_module_named,
              s(:str, "C3"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :c3),
            s(:send,
              s(:ivar, :@xref_data), :find_symbol,
              s(:str, "C3"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :c3),
            s(:send,
              s(:ivar, :@c2), :find_symbol,
              s(:str, "::C3"))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@c2_c3),
            s(:send,
              s(:ivar, :@c2), :find_symbol,
              s(:str, "C3"))))),
      s(:def, :test_find_symbol_method,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:ivar, :@c1__m),
            s(:send,
              s(:ivar, :@c1), :find_symbol,
              s(:str, "m"))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@c1_m),
            s(:send,
              s(:ivar, :@c1), :find_symbol,
              s(:str, "#m"))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@c1__m),
            s(:send,
              s(:ivar, :@c1), :find_symbol,
              s(:str, "::m"))))),
      s(:def, :test_find_symbol_module,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@m1_m2), :find_symbol_module,
              s(:str, "N"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@m1_m2), :find_symbol_module,
              s(:str, "M2::M1"))),
          s(:send,
            s(:ivar, :@m1_m2), :parent=,
            s(:nil)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@m1_m2), :find_symbol_module,
              s(:str, "N"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@m1_m2), :find_symbol_module,
              s(:str, "M2::M1"))))),
      s(:def, :test_fully_documented_eh,
        s(:args),
        s(:begin,
          s(:lvasgn, :context,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Context), :new)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :context), :fully_documented?)),
          s(:send,
            s(:lvar, :context), :comment=,
            s(:str, "hi")),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :context), :fully_documented?)),
          s(:lvasgn, :m,
            s(:ivar, :@c1_m)),
          s(:send,
            s(:lvar, :context), :add_method,
            s(:lvar, :m)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :context), :fully_documented?)),
          s(:send,
            s(:lvar, :m), :comment=,
            s(:str, "hi")),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :context), :fully_documented?)),
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:str, "C"),
              s(:str, "0"),
              s(:nil))),
          s(:send,
            s(:lvar, :context), :add_constant,
            s(:lvar, :c)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :context), :fully_documented?)),
          s(:send,
            s(:lvar, :c), :comment=,
            s(:str, "hi")),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :context), :fully_documented?)),
          s(:lvasgn, :a,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:str, ""),
              s(:str, "a"),
              s(:str, "RW"),
              s(:nil))),
          s(:send,
            s(:lvar, :context), :add_attribute,
            s(:lvar, :a)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :context), :fully_documented?)),
          s(:send,
            s(:lvar, :a), :comment=,
            s(:str, "hi")),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :context), :fully_documented?)))),
      s(:def, :test_spaceship,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:ivar, :@c2), :<=>,
              s(:ivar, :@c3))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@c2), :<=>,
              s(:ivar, :@c2))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@c3), :<=>,
              s(:ivar, :@c2))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@c2_c3), :<=>,
              s(:ivar, :@c2))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:ivar, :@c2_c3), :<=>,
              s(:ivar, :@c3))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@c2), :<=>,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :loaded_specs), :values), :first))))),
      s(:def, :test_methods_by_type,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:str, "instance"),
                s(:hash,
                  s(:pair,
                    s(:sym, :private),
                    s(:array)),
                  s(:pair,
                    s(:sym, :protected),
                    s(:array)),
                  s(:pair,
                    s(:sym, :public),
                    s(:array,
                      s(:ivar, :@c1_m))))),
              s(:pair,
                s(:str, "class"),
                s(:hash,
                  s(:pair,
                    s(:sym, :private),
                    s(:array)),
                  s(:pair,
                    s(:sym, :protected),
                    s(:array)),
                  s(:pair,
                    s(:sym, :public),
                    s(:array,
                      s(:ivar, :@c1__m))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@c1), :methods_by_type)))),
      s(:def, :test_methods_by_type_section,
        s(:args),
        s(:begin,
          s(:lvasgn, :separate,
            s(:send,
              s(:send,
                s(:ivar, :@c1), :sections_hash), :[],
              s(:str, "separate"))),
          s(:send,
            s(:ivar, :@c1_m), :section=,
            s(:lvar, :separate)),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:str, "instance"),
                s(:hash,
                  s(:pair,
                    s(:sym, :private),
                    s(:array)),
                  s(:pair,
                    s(:sym, :protected),
                    s(:array)),
                  s(:pair,
                    s(:sym, :public),
                    s(:array,
                      s(:ivar, :@c1_m))))),
              s(:pair,
                s(:str, "class"),
                s(:hash,
                  s(:pair,
                    s(:sym, :private),
                    s(:array)),
                  s(:pair,
                    s(:sym, :protected),
                    s(:array)),
                  s(:pair,
                    s(:sym, :public),
                    s(:array)))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@c1), :methods_by_type,
              s(:lvar, :separate))))),
      s(:def, :test_methods_matching,
        s(:args),
        s(:begin,
          s(:lvasgn, :methods,
            s(:array)),
          s(:block,
            s(:send,
              s(:ivar, :@parent), :methods_matching,
              s(:str, "m")),
            s(:args,
              s(:arg, :m)),
            s(:send,
              s(:lvar, :methods), :<<,
              s(:lvar, :m))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@parent_m)),
            s(:lvar, :methods)))),
      s(:def, :test_methods_matching_singleton,
        s(:args),
        s(:begin,
          s(:lvasgn, :methods,
            s(:array)),
          s(:block,
            s(:send,
              s(:ivar, :@parent), :methods_matching,
              s(:str, "m"),
              s(:true)),
            s(:args,
              s(:arg, :m)),
            s(:send,
              s(:lvar, :methods), :<<,
              s(:lvar, :m))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@parent__m)),
            s(:lvar, :methods)))),
      s(:def, :test_methods_matching_inherit,
        s(:args),
        s(:begin,
          s(:lvasgn, :methods,
            s(:array)),
          s(:block,
            s(:send,
              s(:ivar, :@child), :methods_matching,
              s(:str, "m")),
            s(:args,
              s(:arg, :m)),
            s(:send,
              s(:lvar, :methods), :<<,
              s(:lvar, :m))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@parent_m)),
            s(:lvar, :methods)))),
      s(:def, :test_remove_invisible_private,
        s(:args),
        s(:begin,
          s(:send, nil, :util_visibilities),
          s(:send,
            s(:ivar, :@vis), :remove_invisible,
            s(:sym, :private)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@pub),
              s(:ivar, :@prot),
              s(:ivar, :@priv)),
            s(:send,
              s(:ivar, :@vis), :method_list)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@apub),
              s(:ivar, :@aprot),
              s(:ivar, :@apriv)),
            s(:send,
              s(:ivar, :@vis), :attributes)))),
      s(:def, :test_remove_invisible_nodoc,
        s(:args),
        s(:begin,
          s(:send, nil, :util_visibilities),
          s(:send,
            s(:ivar, :@vis), :remove_invisible,
            s(:sym, :nodoc)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@pub),
              s(:ivar, :@prot),
              s(:ivar, :@priv)),
            s(:send,
              s(:ivar, :@vis), :method_list)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@apub),
              s(:ivar, :@aprot),
              s(:ivar, :@apriv)),
            s(:send,
              s(:ivar, :@vis), :attributes)))),
      s(:def, :test_remove_invisible_protected,
        s(:args),
        s(:begin,
          s(:send, nil, :util_visibilities),
          s(:send,
            s(:ivar, :@vis), :remove_invisible,
            s(:sym, :protected)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@pub),
              s(:ivar, :@prot)),
            s(:send,
              s(:ivar, :@vis), :method_list)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@apub),
              s(:ivar, :@aprot)),
            s(:send,
              s(:ivar, :@vis), :attributes)))),
      s(:def, :test_remove_invisible_public,
        s(:args),
        s(:begin,
          s(:send, nil, :util_visibilities),
          s(:send,
            s(:ivar, :@vis), :remove_invisible,
            s(:sym, :public)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@pub)),
            s(:send,
              s(:ivar, :@vis), :method_list)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@apub)),
            s(:send,
              s(:ivar, :@vis), :attributes)))),
      s(:def, :test_remove_invisible_public_force,
        s(:args),
        s(:begin,
          s(:send, nil, :util_visibilities),
          s(:send,
            s(:ivar, :@priv), :force_documentation=,
            s(:true)),
          s(:send,
            s(:ivar, :@prot), :force_documentation=,
            s(:true)),
          s(:send,
            s(:ivar, :@apriv), :force_documentation=,
            s(:true)),
          s(:send,
            s(:ivar, :@aprot), :force_documentation=,
            s(:true)),
          s(:send,
            s(:ivar, :@vis), :remove_invisible,
            s(:sym, :public)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@pub),
              s(:ivar, :@prot),
              s(:ivar, :@priv)),
            s(:send,
              s(:ivar, :@vis), :method_list)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@apub),
              s(:ivar, :@aprot),
              s(:ivar, :@apriv)),
            s(:send,
              s(:ivar, :@vis), :attributes)))),
      s(:def, :test_remove_invisible_in_protected,
        s(:args),
        s(:begin,
          s(:send, nil, :util_visibilities),
          s(:lvasgn, :methods,
            s(:array,
              s(:ivar, :@pub),
              s(:ivar, :@prot),
              s(:ivar, :@priv))),
          s(:send,
            s(:ivar, :@c1), :remove_invisible_in,
            s(:lvar, :methods),
            s(:sym, :protected)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@pub),
              s(:ivar, :@prot)),
            s(:lvar, :methods)))),
      s(:def, :test_remove_invisible_in_protected_force,
        s(:args),
        s(:begin,
          s(:send, nil, :util_visibilities),
          s(:send,
            s(:ivar, :@priv), :force_documentation=,
            s(:true)),
          s(:lvasgn, :methods,
            s(:array,
              s(:ivar, :@pub),
              s(:ivar, :@prot),
              s(:ivar, :@priv))),
          s(:send,
            s(:ivar, :@c1), :remove_invisible_in,
            s(:lvar, :methods),
            s(:sym, :protected)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@pub),
              s(:ivar, :@prot),
              s(:ivar, :@priv)),
            s(:lvar, :methods)))),
      s(:def, :test_remove_invisible_in_public,
        s(:args),
        s(:begin,
          s(:send, nil, :util_visibilities),
          s(:lvasgn, :methods,
            s(:array,
              s(:ivar, :@pub),
              s(:ivar, :@prot),
              s(:ivar, :@priv))),
          s(:send,
            s(:ivar, :@c1), :remove_invisible_in,
            s(:lvar, :methods),
            s(:sym, :public)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@pub)),
            s(:lvar, :methods)))),
      s(:def, :test_remove_invisible_in_public_force,
        s(:args),
        s(:begin,
          s(:send, nil, :util_visibilities),
          s(:send,
            s(:ivar, :@prot), :force_documentation=,
            s(:true)),
          s(:send,
            s(:ivar, :@priv), :force_documentation=,
            s(:true)),
          s(:lvasgn, :methods,
            s(:array,
              s(:ivar, :@pub),
              s(:ivar, :@prot),
              s(:ivar, :@priv))),
          s(:send,
            s(:ivar, :@c1), :remove_invisible_in,
            s(:lvar, :methods),
            s(:sym, :public)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@pub),
              s(:ivar, :@prot),
              s(:ivar, :@priv)),
            s(:lvar, :methods)))),
      s(:def, :test_section_contents,
        s(:args),
        s(:begin,
          s(:lvasgn, :default,
            s(:send,
              s(:send,
                s(:ivar, :@context), :sections), :first)),
          s(:send,
            s(:ivar, :@context), :add_method,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m1"))),
          s(:lvasgn, :b,
            s(:send,
              s(:ivar, :@context), :add_section,
              s(:str, "B"))),
          s(:lvasgn, :m,
            s(:send,
              s(:ivar, :@context), :add_method,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "m2")))),
          s(:send,
            s(:lvar, :m), :section=,
            s(:lvar, :b)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :default),
              s(:lvar, :b)),
            s(:send,
              s(:ivar, :@context), :section_contents)))),
      s(:def, :test_section_contents_no_default,
        s(:args),
        s(:begin,
          s(:ivasgn, :@context,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Context), :new)),
          s(:lvasgn, :b,
            s(:send,
              s(:ivar, :@context), :add_section,
              s(:str, "B"))),
          s(:lvasgn, :m,
            s(:send,
              s(:ivar, :@context), :add_method,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "m")))),
          s(:send,
            s(:lvar, :m), :section=,
            s(:lvar, :b)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :b)),
            s(:send,
              s(:ivar, :@context), :section_contents)))),
      s(:def, :test_section_contents_only_default,
        s(:args),
        s(:begin,
          s(:ivasgn, :@context,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Context), :new)),
          s(:send,
            s(:ivar, :@context), :add_method,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@context), :section_contents)))),
      s(:def, :test_section_contents_unused,
        s(:args),
        s(:begin,
          s(:ivasgn, :@context,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Context), :new)),
          s(:send,
            s(:ivar, :@context), :add_method,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:ivar, :@context), :add_section,
            s(:str, "B")),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@context), :section_contents)))),
      s(:def, :test_set_current_section,
        s(:args),
        s(:begin,
          s(:lvasgn, :default_section,
            s(:send,
              s(:send,
                s(:ivar, :@context), :sections), :first)),
          s(:send,
            s(:ivar, :@context), :set_current_section,
            s(:nil),
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Comment), :new,
              s(:str, ""),
              s(:ivar, :@top_level))),
          s(:send, nil, :assert_equal,
            s(:lvar, :default_section),
            s(:send,
              s(:ivar, :@context), :current_section)),
          s(:send,
            s(:ivar, :@context), :set_current_section,
            s(:str, "other"),
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Comment), :new,
              s(:str, ""),
              s(:ivar, :@top_level))),
          s(:lvasgn, :new_section,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@context), :sections), :find),
              s(:args,
                s(:arg, :section)),
              s(:send,
                s(:lvar, :section), :!=,
                s(:lvar, :default_section)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :new_section),
            s(:send,
              s(:ivar, :@context), :current_section)))),
      s(:def, :test_sort_sections,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Context), :new)),
          s(:send,
            s(:lvar, :c), :add_section,
            s(:str, "C")),
          s(:send,
            s(:lvar, :c), :add_section,
            s(:str, "A")),
          s(:send,
            s(:lvar, :c), :add_section,
            s(:str, "B")),
          s(:lvasgn, :titles,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :c), :sort_sections), :map),
              s(:args,
                s(:arg, :section)),
              s(:send,
                s(:lvar, :section), :title))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:nil),
              s(:str, "A"),
              s(:str, "B"),
              s(:str, "C")),
            s(:lvar, :titles)))),
      s(:def, :test_sort_sections_tomdoc,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Context), :new)),
          s(:send,
            s(:lvar, :c), :add_section,
            s(:str, "Public")),
          s(:send,
            s(:lvar, :c), :add_section,
            s(:str, "Internal")),
          s(:send,
            s(:lvar, :c), :add_section,
            s(:str, "Deprecated")),
          s(:lvasgn, :titles,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :c), :sort_sections), :map),
              s(:args,
                s(:arg, :section)),
              s(:send,
                s(:lvar, :section), :title))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:nil),
              s(:str, "Public"),
              s(:str, "Internal"),
              s(:str, "Deprecated")),
            s(:lvar, :titles)))),
      s(:def, :test_sort_sections_tomdoc_missing,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Context), :new)),
          s(:send,
            s(:lvar, :c), :add_section,
            s(:str, "Internal")),
          s(:send,
            s(:lvar, :c), :add_section,
            s(:str, "Public")),
          s(:lvasgn, :titles,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :c), :sort_sections), :map),
              s(:args,
                s(:arg, :section)),
              s(:send,
                s(:lvar, :section), :title))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:nil),
              s(:str, "Public"),
              s(:str, "Internal")),
            s(:lvar, :titles)))),
      s(:def, :util_visibilities,
        s(:args),
        s(:begin,
          s(:ivasgn, :@pub,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "pub"))),
          s(:ivasgn, :@prot,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "prot"))),
          s(:ivasgn, :@priv,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "priv"))),
          s(:ivasgn, :@apub,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "pub"),
              s(:str, "RW"),
              s(:nil))),
          s(:ivasgn, :@aprot,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "prot"),
              s(:str, "RW"),
              s(:nil))),
          s(:ivasgn, :@apriv,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:nil),
              s(:str, "priv"),
              s(:str, "RW"),
              s(:nil))),
          s(:ivasgn, :@vis,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass), :new,
              s(:str, "Vis"))),
          s(:send,
            s(:ivar, :@vis), :add_method,
            s(:ivar, :@pub)),
          s(:send,
            s(:ivar, :@vis), :add_method,
            s(:ivar, :@prot)),
          s(:send,
            s(:ivar, :@vis), :add_method,
            s(:ivar, :@priv)),
          s(:send,
            s(:ivar, :@vis), :add_attribute,
            s(:ivar, :@apub)),
          s(:send,
            s(:ivar, :@vis), :add_attribute,
            s(:ivar, :@aprot)),
          s(:send,
            s(:ivar, :@vis), :add_attribute,
            s(:ivar, :@apriv)),
          s(:send,
            s(:ivar, :@prot), :visibility=,
            s(:sym, :protected)),
          s(:send,
            s(:ivar, :@priv), :visibility=,
            s(:sym, :private)),
          s(:send,
            s(:ivar, :@aprot), :visibility=,
            s(:sym, :protected)),
          s(:send,
            s(:ivar, :@apriv), :visibility=,
            s(:sym, :private)))))))
