s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocRIDriver),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@tmpdir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Dir), :tmpdir),
              s(:dstr,
                s(:str, "test_rdoc_ri_driver_"),
                s(:begin,
                  s(:gvar, :$$))))),
          s(:ivasgn, :@home_ri,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tmpdir),
              s(:str, "dot_ri"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:ivar, :@tmpdir)),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:ivar, :@home_ri)),
          s(:ivasgn, :@orig_ri,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "RI"))),
          s(:ivasgn, :@orig_home,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "HOME"))),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "HOME"),
            s(:ivar, :@tmpdir)),
          s(:send,
            s(:const, nil, :ENV), :delete,
            s(:str, "RI")),
          s(:ivasgn, :@options,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RI), :Driver), :default_options)),
          s(:send,
            s(:ivar, :@options), :[]=,
            s(:sym, :use_system),
            s(:false)),
          s(:send,
            s(:ivar, :@options), :[]=,
            s(:sym, :use_site),
            s(:false)),
          s(:send,
            s(:ivar, :@options), :[]=,
            s(:sym, :use_home),
            s(:false)),
          s(:send,
            s(:ivar, :@options), :[]=,
            s(:sym, :use_gems),
            s(:false)),
          s(:send,
            s(:ivar, :@options), :[]=,
            s(:sym, :home),
            s(:ivar, :@tmpdir)),
          s(:send,
            s(:ivar, :@options), :[]=,
            s(:sym, :use_stdout),
            s(:true)),
          s(:send,
            s(:ivar, :@options), :[]=,
            s(:sym, :formatter),
            s(:const,
              s(:ivar, :@RM), :ToRdoc)),
          s(:ivasgn, :@driver,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RI), :Driver), :new,
              s(:ivar, :@options))))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "HOME"),
            s(:ivar, :@orig_home)),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "RI"),
            s(:ivar, :@orig_ri)),
          s(:send,
            s(:const, nil, :FileUtils), :rm_rf,
            s(:ivar, :@tmpdir)))),
      s(:casgn, nil, :DUMMY_PAGER,
        s(:str, ":;\n")),
      s(:def, :with_dummy_pager,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :pager_env),
                s(:send,
                  s(:const, nil, :ENV), :[]=,
                  s(:str, "RI_PAGER"))),
              s(:array,
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:str, "RI_PAGER")),
                s(:const, nil, :DUMMY_PAGER))),
            s(:yield)),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "RI_PAGER"),
            s(:lvar, :pager_env)))),
      s(:def, :test_self_dump,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :RI), :Driver), :dump,
                s(:send,
                  s(:ivar, :@store1), :cache_path)))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, ":class_methods"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, ":modules"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, ":instance_methods"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, ":ancestors"),
              s(:regopt)),
            s(:lvar, :out)))),
      s(:def, :test_add_also_in_empty,
        s(:args),
        s(:begin,
          s(:lvasgn, :out,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:send,
            s(:ivar, :@driver), :add_also_in,
            s(:lvar, :out),
            s(:array)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)))),
      s(:def, :test_add_also_in,
        s(:args),
        s(:begin,
          s(:send, nil, :util_multi_store),
          s(:send,
            s(:ivar, :@store1), :type=,
            s(:sym, :system)),
          s(:send,
            s(:ivar, :@store2), :type=,
            s(:sym, :home)),
          s(:lvasgn, :out,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:send,
            s(:ivar, :@driver), :add_also_in,
            s(:lvar, :out),
            s(:array,
              s(:ivar, :@store1),
              s(:ivar, :@store2))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Rule), :new,
                s(:int, 1)),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "Also found in:")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "ruby core"),
                s(:str, "\n"),
                s(:str, "~/.rdoc"),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_add_class,
        s(:args),
        s(:begin,
          s(:send, nil, :util_multi_store),
          s(:lvasgn, :out,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:send,
            s(:ivar, :@driver), :add_class,
            s(:lvar, :out),
            s(:str, "Bar"),
            s(:array,
              s(:ivar, :@cBar))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "Bar < Foo")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_add_from,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:send,
            s(:ivar, :@store1), :type=,
            s(:sym, :system)),
          s(:lvasgn, :out,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:send,
            s(:ivar, :@driver), :add_from,
            s(:lvar, :out),
            s(:ivar, :@store1)),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "(from ruby core)")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_add_extends,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:lvasgn, :out,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:send,
            s(:ivar, :@driver), :add_extends,
            s(:lvar, :out),
            s(:array,
              s(:array,
                s(:array,
                  s(:ivar, :@cFooExt)),
                s(:ivar, :@store1)))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Rule), :new,
                s(:int, 1)),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "Extended by:")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:dstr,
                  s(:str, "Ext (from "),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@store1), :friendly_path)),
                  s(:str, ")"))),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "Extend thingy")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_add_extension_modules_empty,
        s(:args),
        s(:begin,
          s(:lvasgn, :out,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:send,
            s(:ivar, :@driver), :add_extension_modules,
            s(:lvar, :out),
            s(:str, "Includes"),
            s(:array)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)))),
      s(:def, :test_add_extension_modules_many,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:lvasgn, :out,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:lvasgn, :enum,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "Enumerable"),
              s(:nil))),
          s(:send,
            s(:ivar, :@cFoo), :add_include,
            s(:lvar, :enum)),
          s(:send,
            s(:ivar, :@driver), :add_extension_modules,
            s(:lvar, :out),
            s(:str, "Includes"),
            s(:array,
              s(:array,
                s(:array,
                  s(:ivar, :@cFooInc),
                  s(:lvar, :enum)),
                s(:ivar, :@store1)))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Rule), :new,
                s(:int, 1)),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "Includes:")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:dstr,
                  s(:str, "(from "),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@store1), :friendly_path)),
                  s(:str, ")"))),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "Inc")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "Include thingy")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "Enumerable"),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_add_extension_modules_many_no_doc,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:lvasgn, :out,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:lvasgn, :enum,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :new,
              s(:str, "Enumerable"),
              s(:nil))),
          s(:send,
            s(:ivar, :@cFoo), :add_include,
            s(:lvar, :enum)),
          s(:send,
            s(:ivar, :@cFooInc), :instance_variable_set,
            s(:sym, :@comment),
            s(:str, "")),
          s(:send,
            s(:ivar, :@driver), :add_extension_modules,
            s(:lvar, :out),
            s(:str, "Includes"),
            s(:array,
              s(:array,
                s(:array,
                  s(:ivar, :@cFooInc),
                  s(:lvar, :enum)),
                s(:ivar, :@store1)))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Rule), :new,
                s(:int, 1)),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "Includes:")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:dstr,
                  s(:str, "(from "),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@store1), :friendly_path)),
                  s(:str, ")"))),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "Inc"),
                s(:str, "\n"),
                s(:str, "Enumerable"),
                s(:str, "\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_add_extension_modules_one,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:lvasgn, :out,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:send,
            s(:ivar, :@driver), :add_extension_modules,
            s(:lvar, :out),
            s(:str, "Includes"),
            s(:array,
              s(:array,
                s(:array,
                  s(:ivar, :@cFooInc)),
                s(:ivar, :@store1)))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Rule), :new,
                s(:int, 1)),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "Includes:")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:dstr,
                  s(:str, "Inc (from "),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@store1), :friendly_path)),
                  s(:str, ")"))),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "Include thingy")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_add_includes,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:lvasgn, :out,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:send,
            s(:ivar, :@driver), :add_includes,
            s(:lvar, :out),
            s(:array,
              s(:array,
                s(:array,
                  s(:ivar, :@cFooInc)),
                s(:ivar, :@store1)))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Rule), :new,
                s(:int, 1)),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "Includes:")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:dstr,
                  s(:str, "Inc (from "),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@store1), :friendly_path)),
                  s(:str, ")"))),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "Include thingy")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_add_method,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:lvasgn, :out,
            s(:send, nil, :doc)),
          s(:send,
            s(:ivar, :@driver), :add_method,
            s(:lvar, :out),
            s(:str, "Foo::Bar#blah")),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :head,
                s(:int, 1),
                s(:str, "Foo::Bar#blah")),
              s(:send, nil, :blank_line),
              s(:send, nil, :para,
                s(:str, "(from ~/.rdoc)")),
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Implementation from Bar")),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :verb,
                s(:str, "blah(5) => 5\n"),
                s(:str, "blah(6) => 6\n")),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :blank_line),
              s(:send, nil, :blank_line))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_add_method_attribute,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:lvasgn, :out,
            s(:send, nil, :doc)),
          s(:send,
            s(:ivar, :@driver), :add_method,
            s(:lvar, :out),
            s(:str, "Foo::Bar#attr")),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :head,
                s(:int, 1),
                s(:str, "Foo::Bar#attr")),
              s(:send, nil, :blank_line),
              s(:send, nil, :para,
                s(:str, "(from ~/.rdoc)")),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :blank_line),
              s(:send, nil, :blank_line))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_add_method_inherited,
        s(:args),
        s(:begin,
          s(:send, nil, :util_multi_store),
          s(:lvasgn, :out,
            s(:send, nil, :doc)),
          s(:send,
            s(:ivar, :@driver), :add_method,
            s(:lvar, :out),
            s(:str, "Bar#inherit")),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :head,
                s(:int, 1),
                s(:str, "Bar#inherit")),
              s(:send, nil, :blank_line),
              s(:send, nil, :para,
                s(:str, "(from ~/.rdoc)")),
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Implementation from Foo")),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :blank_line),
              s(:send, nil, :blank_line))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_add_method_overriden,
        s(:args),
        s(:begin,
          s(:send, nil, :util_multi_store),
          s(:lvasgn, :out,
            s(:send, nil, :doc)),
          s(:send,
            s(:ivar, :@driver), :add_method,
            s(:lvar, :out),
            s(:str, "Bar#override")),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :head,
                s(:int, 1),
                s(:str, "Bar#override")),
              s(:send, nil, :blank_line),
              s(:send, nil, :para,
                s(:dstr,
                  s(:str, "(from "),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@store2), :path)),
                  s(:str, ")"))),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :blank_line),
              s(:send, nil, :para,
                s(:str, "must be displayed")),
              s(:send, nil, :blank_line),
              s(:send, nil, :blank_line))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_add_method_documentation,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:lvasgn, :out,
            s(:send, nil, :doc)),
          s(:lvasgn, :missing,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "missing"))),
          s(:send,
            s(:ivar, :@cFoo), :add_method,
            s(:lvar, :missing)),
          s(:send,
            s(:ivar, :@driver), :add_method_documentation,
            s(:lvar, :out),
            s(:ivar, :@cFoo)),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :head,
                s(:int, 1),
                s(:str, "Foo#inherit")),
              s(:send, nil, :blank_line),
              s(:send, nil, :para,
                s(:str, "(from ~/.rdoc)")),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :blank_line),
              s(:send, nil, :blank_line),
              s(:send, nil, :head,
                s(:int, 1),
                s(:str, "Foo#override")),
              s(:send, nil, :blank_line),
              s(:send, nil, :para,
                s(:str, "(from ~/.rdoc)")),
              s(:send, nil, :rule,
                s(:int, 1)),
              s(:send, nil, :blank_line),
              s(:send, nil, :para,
                s(:str, "must not be displayed in Bar#override")),
              s(:send, nil, :blank_line),
              s(:send, nil, :blank_line))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_add_method_list,
        s(:args),
        s(:begin,
          s(:lvasgn, :out,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:send,
            s(:ivar, :@driver), :add_method_list,
            s(:lvar, :out),
            s(:array,
              s(:str, "new"),
              s(:str, "parse")),
            s(:str, "Class methods")),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "Class methods:")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "new")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "parse")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_add_method_list_interative,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@options), :[]=,
            s(:sym, :interactive),
            s(:true)),
          s(:lvasgn, :driver,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RI), :Driver), :new,
              s(:ivar, :@options))),
          s(:lvasgn, :out,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:send,
            s(:lvar, :driver), :add_method_list,
            s(:lvar, :out),
            s(:array,
              s(:str, "new"),
              s(:str, "parse")),
            s(:str, "Class methods")),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "Class methods:")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :IndentedParagraph), :new,
                s(:int, 2),
                s(:str, "new, parse")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_add_method_list_none,
        s(:args),
        s(:begin,
          s(:lvasgn, :out,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:send,
            s(:ivar, :@driver), :add_method_list,
            s(:lvar, :out),
            s(:array),
            s(:str, "Class")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new),
            s(:lvar, :out)))),
      s(:def, :test_ancestors_of,
        s(:args),
        s(:begin,
          s(:send, nil, :util_ancestors_store),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "X"),
              s(:str, "Mixin"),
              s(:str, "Object"),
              s(:str, "Foo")),
            s(:send,
              s(:ivar, :@driver), :ancestors_of,
              s(:str, "Foo::Bar"))))),
      s(:def, :test_classes,
        s(:args),
        s(:begin,
          s(:send, nil, :util_multi_store),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:str, "Ambiguous"),
                s(:array,
                  s(:ivar, :@store1),
                  s(:ivar, :@store2))),
              s(:pair,
                s(:str, "Bar"),
                s(:array,
                  s(:ivar, :@store2))),
              s(:pair,
                s(:str, "Ext"),
                s(:array,
                  s(:ivar, :@store1))),
              s(:pair,
                s(:str, "Foo"),
                s(:array,
                  s(:ivar, :@store1),
                  s(:ivar, :@store2))),
              s(:pair,
                s(:str, "Foo::Bar"),
                s(:array,
                  s(:ivar, :@store1))),
              s(:pair,
                s(:str, "Foo::Baz"),
                s(:array,
                  s(:ivar, :@store1),
                  s(:ivar, :@store2))),
              s(:pair,
                s(:str, "Inc"),
                s(:array,
                  s(:ivar, :@store1))))),
          s(:lvasgn, :classes,
            s(:send,
              s(:ivar, :@driver), :classes)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :expected), :keys), :sort),
            s(:send,
              s(:send,
                s(:lvar, :classes), :keys), :sort)),
          s(:block,
            s(:send,
              s(:lvar, :expected), :each),
            s(:args,
              s(:arg, :klass),
              s(:arg, :stores)),
            s(:send, nil, :assert_equal,
              s(:lvar, :stores),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :classes), :[],
                    s(:lvar, :klass)), :sort_by),
                s(:args,
                  s(:arg, :store)),
                s(:send,
                  s(:lvar, :store), :path)),
              s(:dstr,
                s(:str, "mismatch for "),
                s(:begin,
                  s(:lvar, :klass))))))),
      s(:def, :test_class_document,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:lvasgn, :tl1,
            s(:send,
              s(:ivar, :@store1), :add_file,
              s(:str, "one.rb"))),
          s(:lvasgn, :tl2,
            s(:send,
              s(:ivar, :@store1), :add_file,
              s(:str, "two.rb"))),
          s(:send,
            s(:ivar, :@cFoo), :add_comment,
            s(:str, "one"),
            s(:lvar, :tl1)),
          s(:send,
            s(:ivar, :@cFoo), :add_comment,
            s(:str, "two"),
            s(:lvar, :tl2)),
          s(:send,
            s(:ivar, :@store1), :save_class,
            s(:ivar, :@cFoo)),
          s(:lvasgn, :found,
            s(:array,
              s(:array,
                s(:ivar, :@store1),
                s(:send,
                  s(:ivar, :@store1), :load_class,
                  s(:send,
                    s(:ivar, :@cFoo), :full_name))))),
          s(:lvasgn, :extends,
            s(:array,
              s(:array,
                s(:array,
                  s(:ivar, :@cFooExt)),
                s(:ivar, :@store1)))),
          s(:lvasgn, :includes,
            s(:array,
              s(:array,
                s(:array,
                  s(:ivar, :@cFooInc)),
                s(:ivar, :@store1)))),
          s(:lvasgn, :out,
            s(:send,
              s(:ivar, :@driver), :class_document,
              s(:send,
                s(:ivar, :@cFoo), :full_name),
              s(:lvar, :found),
              s(:array),
              s(:lvar, :includes),
              s(:lvar, :extends))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:send,
            s(:ivar, :@driver), :add_class,
            s(:lvar, :expected),
            s(:str, "Foo"),
            s(:array)),
          s(:send,
            s(:ivar, :@driver), :add_includes,
            s(:lvar, :expected),
            s(:lvar, :includes)),
          s(:send,
            s(:ivar, :@driver), :add_extends,
            s(:lvar, :expected),
            s(:lvar, :extends)),
          s(:send,
            s(:ivar, :@driver), :add_from,
            s(:lvar, :expected),
            s(:ivar, :@store1)),
          s(:send,
            s(:lvar, :expected), :<<,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Rule), :new,
              s(:int, 1))),
          s(:lvasgn, :doc,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "one")))),
          s(:send,
            s(:lvar, :doc), :file=,
            s(:str, "one.rb")),
          s(:send,
            s(:lvar, :expected), :push,
            s(:lvar, :doc)),
          s(:send,
            s(:lvar, :expected), :<<,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :BlankLine), :new)),
          s(:lvasgn, :doc,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "two")))),
          s(:send,
            s(:lvar, :doc), :file=,
            s(:str, "two.rb")),
          s(:send,
            s(:lvar, :expected), :push,
            s(:lvar, :doc)),
          s(:send,
            s(:lvar, :expected), :<<,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Rule), :new,
              s(:int, 1))),
          s(:send,
            s(:lvar, :expected), :<<,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Heading), :new,
              s(:int, 1),
              s(:str, "Instance methods:"))),
          s(:send,
            s(:lvar, :expected), :<<,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :BlankLine), :new)),
          s(:send,
            s(:lvar, :expected), :<<,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Verbatim), :new,
              s(:str, "inherit"))),
          s(:send,
            s(:lvar, :expected), :<<,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Verbatim), :new,
              s(:str, "override"))),
          s(:send,
            s(:lvar, :expected), :<<,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :BlankLine), :new)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_complete,
        s(:args),
        s(:begin,
          s(:lvasgn, :store,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RI), :Store), :new,
              s(:ivar, :@home_ri))),
          s(:send,
            s(:send,
              s(:lvar, :store), :cache), :[]=,
            s(:sym, :ancestors),
            s(:hash,
              s(:pair,
                s(:str, "Foo"),
                s(:array,
                  s(:str, "Object"))),
              s(:pair,
                s(:str, "Foo::Bar"),
                s(:array,
                  s(:str, "Object"))))),
          s(:send,
            s(:send,
              s(:lvar, :store), :cache), :[]=,
            s(:sym, :class_methods),
            s(:hash,
              s(:pair,
                s(:str, "Foo"),
                s(:array,
                  s(:str, "bar"))))),
          s(:send,
            s(:send,
              s(:lvar, :store), :cache), :[]=,
            s(:sym, :instance_methods),
            s(:hash,
              s(:pair,
                s(:str, "Foo"),
                s(:array,
                  s(:str, "Bar"))))),
          s(:send,
            s(:send,
              s(:lvar, :store), :cache), :[]=,
            s(:sym, :modules),
            s(:array,
              s(:str, "Foo"),
              s(:str, "Foo::Bar"))),
          s(:send,
            s(:ivar, :@driver), :stores=,
            s(:array,
              s(:lvar, :store))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Foo")),
            s(:send,
              s(:ivar, :@driver), :complete,
              s(:str, "F"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Foo::Bar")),
            s(:send,
              s(:ivar, :@driver), :complete,
              s(:str, "Foo::B"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Foo#Bar")),
            s(:send,
              s(:ivar, :@driver), :complete,
              s(:str, "Foo#")),
            s(:str, "Foo#")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Foo#Bar"),
              s(:str, "Foo::bar")),
            s(:send,
              s(:ivar, :@driver), :complete,
              s(:str, "Foo.")),
            s(:str, "Foo.")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Foo::Bar"),
              s(:str, "Foo::bar")),
            s(:send,
              s(:ivar, :@driver), :complete,
              s(:str, "Foo::")),
            s(:str, "Foo::")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Foo::bar")),
            s(:send,
              s(:ivar, :@driver), :complete,
              s(:str, "Foo::b")),
            s(:str, "Foo::b")))),
      s(:def, :test_complete_ancestor,
        s(:args),
        s(:begin,
          s(:send, nil, :util_ancestors_store),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Foo::Bar#i_method")),
            s(:send,
              s(:ivar, :@driver), :complete,
              s(:str, "Foo::Bar#"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Foo::Bar#i_method"),
              s(:str, "Foo::Bar::c_method"),
              s(:str, "Foo::Bar::new")),
            s(:send,
              s(:ivar, :@driver), :complete,
              s(:str, "Foo::Bar."))))),
      s(:def, :test_complete_classes,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@driver), :complete,
              s(:str, "["))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@driver), :complete,
              s(:str, "[::"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Foo")),
            s(:send,
              s(:ivar, :@driver), :complete,
              s(:str, "F"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Foo::"),
              s(:str, "Foo::Bar"),
              s(:str, "Foo::Baz")),
            s(:send,
              s(:ivar, :@driver), :complete,
              s(:str, "Foo::"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Foo::Bar"),
              s(:str, "Foo::Baz")),
            s(:send,
              s(:ivar, :@driver), :complete,
              s(:str, "Foo::B"))))),
      s(:def, :test_complete_multistore,
        s(:args),
        s(:begin,
          s(:send, nil, :util_multi_store),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Bar")),
            s(:send,
              s(:ivar, :@driver), :complete,
              s(:str, "B"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Foo")),
            s(:send,
              s(:ivar, :@driver), :complete,
              s(:str, "F"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Foo::Bar"),
              s(:str, "Foo::Baz")),
            s(:send,
              s(:ivar, :@driver), :complete,
              s(:str, "Foo::B"))))),
      s(:def, :test_display,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "hi")))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display,
                s(:lvar, :doc)))),
          s(:send, nil, :assert_equal,
            s(:str, "hi\n"),
            s(:lvar, :out)))),
      s(:def, :test_display_class,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display_class,
                s(:str, "Foo::Bar")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^= Foo::Bar"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^\\(from"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^= Class methods:"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^  new"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^= Instance methods:"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^  blah"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^= Attributes:"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^  attr_accessor attr"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:lvar, :out), :scan,
                s(:regexp,
                  s(:str, "-\\n"),
                  s(:regopt))), :length)),
          s(:send, nil, :refute_match,
            s(:regexp,
              s(:str, "Foo::Bar#blah"),
              s(:regopt)),
            s(:lvar, :out)))),
      s(:def, :test_display_class_all,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:send,
            s(:ivar, :@driver), :show_all=,
            s(:true)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display_class,
                s(:str, "Foo::Bar")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^= Foo::Bar"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^\\(from"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^= Class methods:"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^  new"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^= Instance methods:"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^  blah"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^= Attributes:"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^  attr_accessor attr"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:send,
                s(:lvar, :out), :scan,
                s(:regexp,
                  s(:str, "-\\n"),
                  s(:regopt))), :length)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Foo::Bar#blah"),
              s(:regopt)),
            s(:lvar, :out)))),
      s(:def, :test_display_class_ambiguous,
        s(:args),
        s(:begin,
          s(:send, nil, :util_multi_store),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display_class,
                s(:str, "Ambiguous")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^= Ambiguous < Object$"),
              s(:regopt)),
            s(:lvar, :out)))),
      s(:def, :test_display_class_multi_no_doc,
        s(:args),
        s(:begin,
          s(:send, nil, :util_multi_store),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display_class,
                s(:str, "Foo::Baz")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^= Foo::Baz"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "-\\n"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Also found in:"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :escape,
                  s(:ivar, :@home_ri))),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :escape,
                  s(:ivar, :@home_ri2))),
              s(:regopt)),
            s(:lvar, :out)))),
      s(:def, :test_display_class_superclass,
        s(:args),
        s(:begin,
          s(:send, nil, :util_multi_store),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display_class,
                s(:str, "Bar")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^= Bar < Foo"),
              s(:regopt)),
            s(:lvar, :out)))),
      s(:def, :test_display_class_module,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display_class,
                s(:str, "Inc")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^= Inc$"),
              s(:regopt)),
            s(:lvar, :out)))),
      s(:def, :test_display_class_page,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display_class,
                s(:str, "ruby:README")))),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)))),
      s(:def, :test_display_method,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display_method,
                s(:str, "Foo::Bar#blah")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Foo::Bar#blah"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "blah.5"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "blah.6"),
              s(:regopt)),
            s(:lvar, :out)))),
      s(:def, :test_display_method_attribute,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display_method,
                s(:str, "Foo::Bar#attr")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Foo::Bar#attr"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :refute_match,
            s(:regexp,
              s(:str, "Implementation from"),
              s(:regopt)),
            s(:lvar, :out)))),
      s(:def, :test_display_method_inherited,
        s(:args),
        s(:begin,
          s(:send, nil, :util_multi_store),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display_method,
                s(:str, "Bar#inherit")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^= Bar#inherit"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^=== Implementation from Foo"),
              s(:regopt)),
            s(:lvar, :out)))),
      s(:def, :test_display_method_overriden,
        s(:args),
        s(:begin,
          s(:send, nil, :util_multi_store),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display_method,
                s(:str, "Bar#override")))),
          s(:send, nil, :refute_match,
            s(:regexp,
              s(:str, "must not be displayed"),
              s(:regopt)),
            s(:lvar, :out)))),
      s(:def, :test_display_name_not_found_class,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:ivar, :@driver), :display_name,
                  s(:str, "Foo::B"))))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "Foo::B not found, maybe you meant:\n"),
              s(:str, "\n"),
              s(:str, "Foo::Bar\n"),
              s(:str, "Foo::Baz\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_display_name_not_found_method,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:ivar, :@driver), :display_name,
                  s(:str, "Foo::Bar#b"))))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "Foo::Bar#b not found, maybe you meant:\n"),
              s(:str, "\n"),
              s(:str, "Foo::Bar#blah\n"),
              s(:str, "Foo::Bar#bother\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_display_name_not_found_special,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :RI), :Driver), :NotFoundError)),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:ivar, :@driver), :display_name,
                s(:str, "Set#[]")))))),
      s(:def, :test_display_method_params,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display_method,
                s(:str, "Foo::Bar#bother")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "things.*stuff"),
              s(:regopt)),
            s(:lvar, :out)))),
      s(:def, :test_display_page,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display_page,
                s(:str, "home:README.rdoc")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "= README"),
              s(:regopt)),
            s(:lvar, :out)))),
      s(:def, :test_display_page_add_extension,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display_page,
                s(:str, "home:README")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "= README"),
              s(:regopt)),
            s(:lvar, :out)))),
      s(:def, :test_display_page_ambiguous,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:lvasgn, :other,
            s(:send,
              s(:ivar, :@store1), :add_file,
              s(:str, "README.md"))),
          s(:send,
            s(:lvar, :other), :parser=,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Parser), :Simple)),
          s(:send,
            s(:lvar, :other), :comment=,
            s(:send, nil, :doc,
              s(:send, nil, :head,
                s(:int, 1),
                s(:str, "README.md")),
              s(:send, nil, :para,
                s(:str, "This is the other README")))),
          s(:send,
            s(:ivar, :@store1), :save_page,
            s(:lvar, :other)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display_page,
                s(:str, "home:README")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "= README pages in ~/\\.rdoc"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "README\\.rdoc"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "README\\.md"),
              s(:regopt)),
            s(:lvar, :out)))),
      s(:def, :test_display_page_extension,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:lvasgn, :other,
            s(:send,
              s(:ivar, :@store1), :add_file,
              s(:str, "README.EXT"))),
          s(:send,
            s(:lvar, :other), :parser=,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Parser), :Simple)),
          s(:send,
            s(:lvar, :other), :comment=,
            s(:send, nil, :doc,
              s(:send, nil, :head,
                s(:int, 1),
                s(:str, "README.EXT")),
              s(:send, nil, :para,
                s(:str, "This is the other README")))),
          s(:send,
            s(:ivar, :@store1), :save_page,
            s(:lvar, :other)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display_page,
                s(:str, "home:README.EXT")))),
          s(:send, nil, :assert_match,
            s(:str, "other README"),
            s(:lvar, :out)))),
      s(:def, :test_display_page_ignore_directory,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:lvasgn, :other,
            s(:send,
              s(:ivar, :@store1), :add_file,
              s(:str, "doc/globals.rdoc"))),
          s(:send,
            s(:lvar, :other), :parser=,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Parser), :Simple)),
          s(:send,
            s(:lvar, :other), :comment=,
            s(:send, nil, :doc,
              s(:send, nil, :head,
                s(:int, 1),
                s(:str, "globals.rdoc")),
              s(:send, nil, :para,
                s(:str, "Globals go here")))),
          s(:send,
            s(:ivar, :@store1), :save_page,
            s(:lvar, :other)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display_page,
                s(:str, "home:globals")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "= globals\\.rdoc"),
              s(:regopt)),
            s(:lvar, :out)))),
      s(:def, :test_display_page_missing,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display_page,
                s(:str, "home:missing")))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display_page_list,
                s(:ivar, :@store1)))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "= Pages in ~/\\.rdoc"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "README\\.rdoc"),
              s(:regopt)),
            s(:lvar, :out)))),
      s(:def, :test_display_page_list,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:lvasgn, :other,
            s(:send,
              s(:ivar, :@store1), :add_file,
              s(:str, "OTHER.rdoc"))),
          s(:send,
            s(:lvar, :other), :parser=,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Parser), :Simple)),
          s(:send,
            s(:lvar, :other), :comment=,
            s(:send, nil, :doc,
              s(:send, nil, :head,
                s(:int, 1),
                s(:str, "OTHER")),
              s(:send, nil, :para,
                s(:str, "This is OTHER")))),
          s(:send,
            s(:ivar, :@store1), :save_page,
            s(:lvar, :other)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :display_page_list,
                s(:ivar, :@store1)))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "= Pages in ~/\\.rdoc"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "README\\.rdoc"),
              s(:regopt)),
            s(:lvar, :out)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "OTHER\\.rdoc"),
              s(:regopt)),
            s(:lvar, :out)))),
      s(:def, :test_expand_class,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:send, nil, :assert_equal,
            s(:str, "Foo"),
            s(:send,
              s(:ivar, :@driver), :expand_class,
              s(:str, "F"))),
          s(:send, nil, :assert_equal,
            s(:str, "Foo::Bar"),
            s(:send,
              s(:ivar, :@driver), :expand_class,
              s(:str, "F::Bar"))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :RI), :Driver), :NotFoundError)),
            s(:args),
            s(:send,
              s(:ivar, :@driver), :expand_class,
              s(:str, "F::B"))))),
      s(:def, :test_expand_name,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:send, nil, :assert_equal,
            s(:str, ".b"),
            s(:send,
              s(:ivar, :@driver), :expand_name,
              s(:str, "b"))),
          s(:send, nil, :assert_equal,
            s(:str, "Foo"),
            s(:send,
              s(:ivar, :@driver), :expand_name,
              s(:str, "F"))),
          s(:send, nil, :assert_equal,
            s(:str, "Foo::Bar#"),
            s(:send,
              s(:ivar, :@driver), :expand_name,
              s(:str, "F::Bar#"))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :RI), :Driver), :NotFoundError)),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :expand_name,
                s(:str, "Z")))),
          s(:send, nil, :assert_equal,
            s(:str, "Z"),
            s(:send,
              s(:lvar, :e), :name)),
          s(:send,
            s(:send,
              s(:ivar, :@driver), :stores), :<<,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new,
              s(:nil),
              s(:sym, :system))),
          s(:send, nil, :assert_equal,
            s(:str, "ruby:README"),
            s(:send,
              s(:ivar, :@driver), :expand_name,
              s(:str, "ruby:README"))),
          s(:send, nil, :assert_equal,
            s(:str, "ruby:"),
            s(:send,
              s(:ivar, :@driver), :expand_name,
              s(:str, "ruby:"))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :RI), :Driver), :NotFoundError)),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :expand_name,
                s(:str, "nonexistent_gem:")))),
          s(:send, nil, :assert_equal,
            s(:str, "nonexistent_gem"),
            s(:send,
              s(:lvar, :e), :name)))),
      s(:def, :test_find_methods,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:lvasgn, :items,
            s(:array)),
          s(:block,
            s(:send,
              s(:ivar, :@driver), :find_methods,
              s(:str, "Foo::Bar.")),
            s(:args,
              s(:arg, :store),
              s(:arg, :klass),
              s(:arg, :ancestor),
              s(:arg, :types),
              s(:arg, :method)),
            s(:send,
              s(:lvar, :items), :<<,
              s(:array,
                s(:lvar, :store),
                s(:lvar, :klass),
                s(:lvar, :ancestor),
                s(:lvar, :types),
                s(:lvar, :method)))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:ivar, :@store1),
                s(:str, "Foo::Bar"),
                s(:str, "Foo::Bar"),
                s(:sym, :both),
                s(:nil)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :items)))),
      s(:def, :test_find_methods_method,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:lvasgn, :items,
            s(:array)),
          s(:block,
            s(:send,
              s(:ivar, :@driver), :find_methods,
              s(:str, ".blah")),
            s(:args,
              s(:arg, :store),
              s(:arg, :klass),
              s(:arg, :ancestor),
              s(:arg, :types),
              s(:arg, :method)),
            s(:send,
              s(:lvar, :items), :<<,
              s(:array,
                s(:lvar, :store),
                s(:lvar, :klass),
                s(:lvar, :ancestor),
                s(:lvar, :types),
                s(:lvar, :method)))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:ivar, :@store1),
                s(:str, "Ambiguous"),
                s(:str, "Ambiguous"),
                s(:sym, :both),
                s(:str, "blah")),
              s(:array,
                s(:ivar, :@store1),
                s(:str, "Ext"),
                s(:str, "Ext"),
                s(:sym, :both),
                s(:str, "blah")),
              s(:array,
                s(:ivar, :@store1),
                s(:str, "Foo"),
                s(:str, "Foo"),
                s(:sym, :both),
                s(:str, "blah")),
              s(:array,
                s(:ivar, :@store1),
                s(:str, "Foo::Bar"),
                s(:str, "Foo::Bar"),
                s(:sym, :both),
                s(:str, "blah")),
              s(:array,
                s(:ivar, :@store1),
                s(:str, "Foo::Baz"),
                s(:str, "Foo::Baz"),
                s(:sym, :both),
                s(:str, "blah")),
              s(:array,
                s(:ivar, :@store1),
                s(:str, "Inc"),
                s(:str, "Inc"),
                s(:sym, :both),
                s(:str, "blah")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :items)))),
      s(:def, :test_filter_methods,
        s(:args),
        s(:begin,
          s(:send, nil, :util_multi_store),
          s(:lvasgn, :name,
            s(:str, "Bar#override")),
          s(:lvasgn, :found,
            s(:send,
              s(:ivar, :@driver), :load_methods_matching,
              s(:lvar, :name))),
          s(:lvasgn, :sorted,
            s(:send,
              s(:ivar, :@driver), :filter_methods,
              s(:lvar, :found),
              s(:lvar, :name))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:ivar, :@store2),
                s(:array,
                  s(:ivar, :@override))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :sorted)))),
      s(:def, :test_filter_methods_not_found,
        s(:args),
        s(:begin,
          s(:send, nil, :util_multi_store),
          s(:lvasgn, :name,
            s(:str, "Bar#inherit")),
          s(:lvasgn, :found,
            s(:send,
              s(:ivar, :@driver), :load_methods_matching,
              s(:lvar, :name))),
          s(:lvasgn, :sorted,
            s(:send,
              s(:ivar, :@driver), :filter_methods,
              s(:lvar, :found),
              s(:lvar, :name))),
          s(:send, nil, :assert_equal,
            s(:lvar, :found),
            s(:lvar, :sorted)))),
      s(:def, :test_find_store,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@driver), :stores), :<<,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new,
              s(:nil),
              s(:sym, :system))),
          s(:send,
            s(:send,
              s(:ivar, :@driver), :stores), :<<,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new,
              s(:str, "doc/gem-1.0/ri"),
              s(:sym, :gem))),
          s(:send, nil, :assert_equal,
            s(:str, "ruby"),
            s(:send,
              s(:ivar, :@driver), :find_store,
              s(:str, "ruby"))),
          s(:send, nil, :assert_equal,
            s(:str, "gem-1.0"),
            s(:send,
              s(:ivar, :@driver), :find_store,
              s(:str, "gem-1.0"))),
          s(:send, nil, :assert_equal,
            s(:str, "gem-1.0"),
            s(:send,
              s(:ivar, :@driver), :find_store,
              s(:str, "gem"))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :RI), :Driver), :NotFoundError)),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :find_store,
                s(:str, "nonexistent")))),
          s(:send, nil, :assert_equal,
            s(:str, "nonexistent"),
            s(:send,
              s(:lvar, :e), :name)))),
      s(:def, :test_formatter,
        s(:args),
        s(:begin,
          s(:lvasgn, :tty,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :tty), :tty?,
            s(:args),
            s(:true)),
          s(:send,
            s(:ivar, :@options), :delete,
            s(:sym, :use_stdout)),
          s(:send,
            s(:ivar, :@options), :delete,
            s(:sym, :formatter)),
          s(:lvasgn, :driver,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RI), :Driver), :new,
              s(:ivar, :@options))),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:ivar, :@RM), :ToAnsi),
            s(:send,
              s(:lvar, :driver), :formatter,
              s(:lvar, :tty))),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:ivar, :@RM), :ToBs),
            s(:send,
              s(:lvar, :driver), :formatter,
              s(:send,
                s(:const, nil, :StringIO), :new))),
          s(:send,
            s(:lvar, :driver), :instance_variable_set,
            s(:sym, :@paging),
            s(:true)),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:ivar, :@RM), :ToBs),
            s(:send,
              s(:lvar, :driver), :formatter,
              s(:send,
                s(:const, nil, :StringIO), :new))))),
      s(:def, :test_in_path_eh,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :path,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "PATH"))),
            s(:lvasgn, :test_path,
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:str, ".."),
                s(:str, "(string)"))),
            s(:block,
              s(:send, nil, :temp_dir),
              s(:args,
                s(:arg, :dir)),
              s(:begin,
                s(:lvasgn, :nonexistent,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:lvar, :dir),
                    s(:str, "nonexistent"))),
                s(:send, nil, :refute,
                  s(:send,
                    s(:ivar, :@driver), :in_path?,
                    s(:lvar, :nonexistent))),
                s(:send,
                  s(:const, nil, :ENV), :[]=,
                  s(:str, "PATH"),
                  s(:lvar, :test_path)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:ivar, :@driver), :in_path?,
                    s(:send,
                      s(:const, nil, :File), :basename,
                      s(:str, "(string)"))))))),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "PATH"),
            s(:lvar, :path)))),
      s(:def, :test_method_type,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:sym, :both),
            s(:send,
              s(:ivar, :@driver), :method_type,
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:sym, :both),
            s(:send,
              s(:ivar, :@driver), :method_type,
              s(:str, "."))),
          s(:send, nil, :assert_equal,
            s(:sym, :instance),
            s(:send,
              s(:ivar, :@driver), :method_type,
              s(:str, "#"))),
          s(:send, nil, :assert_equal,
            s(:sym, :class),
            s(:send,
              s(:ivar, :@driver), :method_type,
              s(:str, "::"))))),
      s(:def, :test_name_regexp,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:regexp,
              s(:str, "^RDoc::AnyMethod#new$"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@driver), :name_regexp,
              s(:str, "RDoc::AnyMethod#new"))),
          s(:send, nil, :assert_equal,
            s(:regexp,
              s(:str, "^RDoc::AnyMethod::new$"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@driver), :name_regexp,
              s(:str, "RDoc::AnyMethod::new"))),
          s(:send, nil, :assert_equal,
            s(:regexp,
              s(:str, "^RDoc::AnyMethod(#|::)new$"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@driver), :name_regexp,
              s(:str, "RDoc::AnyMethod.new"))),
          s(:send, nil, :assert_equal,
            s(:regexp,
              s(:str, "^Hash(#|::)\\[\\]$"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@driver), :name_regexp,
              s(:str, "Hash.[]"))),
          s(:send, nil, :assert_equal,
            s(:regexp,
              s(:str, "^Hash::\\[\\]$"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@driver), :name_regexp,
              s(:str, "Hash::[]"))))),
      s(:def, :test_list_known_classes,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :list_known_classes))),
          s(:send, nil, :assert_equal,
            s(:str, "Ambiguous\nExt\nFoo\nFoo::Bar\nFoo::Baz\nInc\n"),
            s(:lvar, :out)))),
      s(:def, :test_list_known_classes_name,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send,
                s(:ivar, :@driver), :list_known_classes,
                s(:array,
                  s(:str, "F"),
                  s(:str, "I"))))),
          s(:send, nil, :assert_equal,
            s(:str, "Foo\nFoo::Bar\nFoo::Baz\nInc\n"),
            s(:lvar, :out)))),
      s(:def, :test_list_methods_matching,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Foo::Bar#attr"),
              s(:str, "Foo::Bar#blah"),
              s(:str, "Foo::Bar#bother"),
              s(:str, "Foo::Bar::new")),
            s(:send,
              s(:send,
                s(:ivar, :@driver), :list_methods_matching,
                s(:str, "Foo::Bar.")), :sort)))),
      s(:def, :test_list_methods_matching_inherit,
        s(:args),
        s(:begin,
          s(:send, nil, :util_multi_store),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Bar#baz"),
              s(:str, "Bar#inherit"),
              s(:str, "Bar#override")),
            s(:send,
              s(:send,
                s(:ivar, :@driver), :list_methods_matching,
                s(:str, "Bar.")), :sort)))),
      s(:def, :test_list_methods_matching_regexp,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:lvasgn, :index,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "[]"))),
          s(:send,
            s(:lvar, :index), :record_location,
            s(:ivar, :@top_level)),
          s(:send,
            s(:ivar, :@cFoo), :add_method,
            s(:lvar, :index)),
          s(:send,
            s(:ivar, :@store1), :save_method,
            s(:ivar, :@cFoo),
            s(:lvar, :index)),
          s(:lvasgn, :c_index,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "[]"))),
          s(:send,
            s(:lvar, :c_index), :singleton=,
            s(:true)),
          s(:send,
            s(:lvar, :c_index), :record_location,
            s(:ivar, :@top_level)),
          s(:send,
            s(:ivar, :@cFoo), :add_method,
            s(:lvar, :c_index)),
          s(:send,
            s(:ivar, :@store1), :save_method,
            s(:ivar, :@cFoo),
            s(:lvar, :c_index)),
          s(:send,
            s(:ivar, :@store1), :save_cache),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Foo#[]")),
            s(:send,
              s(:ivar, :@driver), :list_methods_matching,
              s(:str, "Foo#[]"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Foo::[]")),
            s(:send,
              s(:ivar, :@driver), :list_methods_matching,
              s(:str, "Foo::[]"))))),
      s(:def, :test_load_method,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:lvasgn, :method,
            s(:send,
              s(:ivar, :@driver), :load_method,
              s(:ivar, :@store1),
              s(:sym, :instance_methods),
              s(:str, "Foo"),
              s(:str, "#"),
              s(:str, "inherit"))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@inherit),
            s(:lvar, :method)))),
      s(:def, :test_load_method_inherited,
        s(:args),
        s(:begin,
          s(:send, nil, :util_multi_store),
          s(:lvasgn, :method,
            s(:send,
              s(:ivar, :@driver), :load_method,
              s(:ivar, :@store2),
              s(:sym, :instance_methods),
              s(:str, "Bar"),
              s(:str, "#"),
              s(:str, "inherit"))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:lvar, :method)))),
      s(:def, :test_load_methods_matching,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:ivar, :@store1),
                s(:array,
                  s(:ivar, :@inherit))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@driver), :load_methods_matching,
              s(:str, "Foo#inherit"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:ivar, :@store1),
                s(:array,
                  s(:ivar, :@blah))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@driver), :load_methods_matching,
              s(:str, ".blah"))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@driver), :load_methods_matching,
              s(:str, ".b"))))),
      s(:def, :test_load_methods_matching_inherited,
        s(:args),
        s(:begin,
          s(:send, nil, :util_multi_store),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:ivar, :@store1),
                s(:array,
                  s(:ivar, :@inherit))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@driver), :load_methods_matching,
              s(:str, "Bar#inherit"))))),
      s(:def, :test_load_method_missing,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:send,
            s(:const, nil, :FileUtils), :rm,
            s(:send,
              s(:ivar, :@store1), :method_file,
              s(:str, "Foo"),
              s(:str, "#inherit"))),
          s(:lvasgn, :method,
            s(:send,
              s(:ivar, :@driver), :load_method,
              s(:ivar, :@store1),
              s(:sym, :instance_methods),
              s(:str, "Foo"),
              s(:str, "#"),
              s(:str, "inherit"))),
          s(:send, nil, :assert_equal,
            s(:str, "(unknown)#inherit"),
            s(:send,
              s(:lvar, :method), :full_name)))),
      s(:def, :_test_page,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@driver), :use_stdout=,
            s(:false)),
          s(:block,
            s(:send, nil, :with_dummy_pager),
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@driver), :page),
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :io), :==,
                    s(:gvar, :$stdout)),
                  s(:send, nil, :skip,
                    s(:str, "couldn't find a standard pager")), nil),
                s(:send, nil, :assert,
                  s(:send,
                    s(:ivar, :@driver), :paging?))))),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@driver), :paging?)))),
      s(:def, :_test_page_in_presence_of_child_status,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "CI")),
            s(:send, nil, :skip,
              s(:str, "this test hangs on travis-ci.org")), nil),
          s(:send,
            s(:ivar, :@driver), :use_stdout=,
            s(:false)),
          s(:block,
            s(:send, nil, :with_dummy_pager),
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@driver), :page),
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:send, nil, :refute_equal,
                  s(:gvar, :$stdout),
                  s(:lvar, :io)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:ivar, :@driver), :paging?))))))),
      s(:def, :test_page_stdout,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@driver), :use_stdout=,
            s(:true)),
          s(:block,
            s(:send,
              s(:ivar, :@driver), :page),
            s(:args,
              s(:arg, :io)),
            s(:send, nil, :assert_equal,
              s(:gvar, :$stdout),
              s(:lvar, :io))),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@driver), :paging?)))),
      s(:def, :test_parse_name_method,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :klass),
              s(:lvasgn, :type),
              s(:lvasgn, :meth)),
            s(:send,
              s(:ivar, :@driver), :parse_name,
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:lvar, :klass),
            s(:str, "foo class")),
          s(:send, nil, :assert_equal,
            s(:str, "."),
            s(:lvar, :type),
            s(:str, "foo type")),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:lvar, :meth),
            s(:str, "foo method")),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :klass),
              s(:lvasgn, :type),
              s(:lvasgn, :meth)),
            s(:send,
              s(:ivar, :@driver), :parse_name,
              s(:str, "#foo"))),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:lvar, :klass),
            s(:str, "#foo class")),
          s(:send, nil, :assert_equal,
            s(:str, "#"),
            s(:lvar, :type),
            s(:str, "#foo type")),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:lvar, :meth),
            s(:str, "#foo method")),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :klass),
              s(:lvasgn, :type),
              s(:lvasgn, :meth)),
            s(:send,
              s(:ivar, :@driver), :parse_name,
              s(:str, "::foo"))),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:lvar, :klass),
            s(:str, "::foo class")),
          s(:send, nil, :assert_equal,
            s(:str, "::"),
            s(:lvar, :type),
            s(:str, "::foo type")),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:lvar, :meth),
            s(:str, "::foo method")))),
      s(:def, :test_parse_name_page,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :klass),
              s(:lvasgn, :type),
              s(:lvasgn, :meth)),
            s(:send,
              s(:ivar, :@driver), :parse_name,
              s(:str, "ruby:README"))),
          s(:send, nil, :assert_equal,
            s(:str, "ruby"),
            s(:lvar, :klass),
            s(:str, "ruby project")),
          s(:send, nil, :assert_equal,
            s(:str, ":"),
            s(:lvar, :type),
            s(:str, "ruby type")),
          s(:send, nil, :assert_equal,
            s(:str, "README"),
            s(:lvar, :meth),
            s(:str, "ruby page")),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :klass),
              s(:lvasgn, :type),
              s(:lvasgn, :meth)),
            s(:send,
              s(:ivar, :@driver), :parse_name,
              s(:str, "ruby:"))),
          s(:send, nil, :assert_equal,
            s(:str, "ruby"),
            s(:lvar, :klass),
            s(:str, "ruby project")),
          s(:send, nil, :assert_equal,
            s(:str, ":"),
            s(:lvar, :type),
            s(:str, "ruby type")),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:lvar, :meth),
            s(:str, "ruby page")))),
      s(:def, :test_parse_name_page_extenson,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :klass),
              s(:lvasgn, :type),
              s(:lvasgn, :meth)),
            s(:send,
              s(:ivar, :@driver), :parse_name,
              s(:str, "ruby:README.EXT"))),
          s(:send, nil, :assert_equal,
            s(:str, "ruby"),
            s(:lvar, :klass),
            s(:str, "ruby project")),
          s(:send, nil, :assert_equal,
            s(:str, ":"),
            s(:lvar, :type),
            s(:str, "ruby type")),
          s(:send, nil, :assert_equal,
            s(:str, "README.EXT"),
            s(:lvar, :meth),
            s(:str, "ruby page")))),
      s(:def, :test_parse_name_single_class,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :klass),
              s(:lvasgn, :type),
              s(:lvasgn, :meth)),
            s(:send,
              s(:ivar, :@driver), :parse_name,
              s(:str, "Foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "Foo"),
            s(:lvar, :klass),
            s(:str, "Foo class")),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:lvar, :type),
            s(:str, "Foo type")),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:lvar, :meth),
            s(:str, "Foo method")),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :klass),
              s(:lvasgn, :type),
              s(:lvasgn, :meth)),
            s(:send,
              s(:ivar, :@driver), :parse_name,
              s(:str, "Foo#"))),
          s(:send, nil, :assert_equal,
            s(:str, "Foo"),
            s(:lvar, :klass),
            s(:str, "Foo# class")),
          s(:send, nil, :assert_equal,
            s(:str, "#"),
            s(:lvar, :type),
            s(:str, "Foo# type")),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:lvar, :meth),
            s(:str, "Foo# method")),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :klass),
              s(:lvasgn, :type),
              s(:lvasgn, :meth)),
            s(:send,
              s(:ivar, :@driver), :parse_name,
              s(:str, "Foo::"))),
          s(:send, nil, :assert_equal,
            s(:str, "Foo"),
            s(:lvar, :klass),
            s(:str, "Foo:: class")),
          s(:send, nil, :assert_equal,
            s(:str, "::"),
            s(:lvar, :type),
            s(:str, "Foo:: type")),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:lvar, :meth),
            s(:str, "Foo:: method")),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :klass),
              s(:lvasgn, :type),
              s(:lvasgn, :meth)),
            s(:send,
              s(:ivar, :@driver), :parse_name,
              s(:str, "Foo."))),
          s(:send, nil, :assert_equal,
            s(:str, "Foo"),
            s(:lvar, :klass),
            s(:str, "Foo. class")),
          s(:send, nil, :assert_equal,
            s(:str, "."),
            s(:lvar, :type),
            s(:str, "Foo. type")),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:lvar, :meth),
            s(:str, "Foo. method")),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :klass),
              s(:lvasgn, :type),
              s(:lvasgn, :meth)),
            s(:send,
              s(:ivar, :@driver), :parse_name,
              s(:str, "Foo#Bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "Foo"),
            s(:lvar, :klass),
            s(:str, "Foo#Bar class")),
          s(:send, nil, :assert_equal,
            s(:str, "#"),
            s(:lvar, :type),
            s(:str, "Foo#Bar type")),
          s(:send, nil, :assert_equal,
            s(:str, "Bar"),
            s(:lvar, :meth),
            s(:str, "Foo#Bar method")),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :klass),
              s(:lvasgn, :type),
              s(:lvasgn, :meth)),
            s(:send,
              s(:ivar, :@driver), :parse_name,
              s(:str, "Foo.Bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "Foo"),
            s(:lvar, :klass),
            s(:str, "Foo.Bar class")),
          s(:send, nil, :assert_equal,
            s(:str, "."),
            s(:lvar, :type),
            s(:str, "Foo.Bar type")),
          s(:send, nil, :assert_equal,
            s(:str, "Bar"),
            s(:lvar, :meth),
            s(:str, "Foo.Bar method")),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :klass),
              s(:lvasgn, :type),
              s(:lvasgn, :meth)),
            s(:send,
              s(:ivar, :@driver), :parse_name,
              s(:str, "Foo::bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "Foo"),
            s(:lvar, :klass),
            s(:str, "Foo::bar class")),
          s(:send, nil, :assert_equal,
            s(:str, "::"),
            s(:lvar, :type),
            s(:str, "Foo::bar type")),
          s(:send, nil, :assert_equal,
            s(:str, "bar"),
            s(:lvar, :meth),
            s(:str, "Foo::bar method")))),
      s(:def, :test_parse_name_namespace,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :klass),
              s(:lvasgn, :type),
              s(:lvasgn, :meth)),
            s(:send,
              s(:ivar, :@driver), :parse_name,
              s(:str, "Foo::Bar"))),
          s(:send, nil, :assert_equal,
            s(:str, "Foo::Bar"),
            s(:lvar, :klass),
            s(:str, "Foo::Bar class")),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:lvar, :type),
            s(:str, "Foo::Bar type")),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:lvar, :meth),
            s(:str, "Foo::Bar method")),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :klass),
              s(:lvasgn, :type),
              s(:lvasgn, :meth)),
            s(:send,
              s(:ivar, :@driver), :parse_name,
              s(:str, "Foo::Bar#"))),
          s(:send, nil, :assert_equal,
            s(:str, "Foo::Bar"),
            s(:lvar, :klass),
            s(:str, "Foo::Bar# class")),
          s(:send, nil, :assert_equal,
            s(:str, "#"),
            s(:lvar, :type),
            s(:str, "Foo::Bar# type")),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:lvar, :meth),
            s(:str, "Foo::Bar# method")),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :klass),
              s(:lvasgn, :type),
              s(:lvasgn, :meth)),
            s(:send,
              s(:ivar, :@driver), :parse_name,
              s(:str, "Foo::Bar#baz"))),
          s(:send, nil, :assert_equal,
            s(:str, "Foo::Bar"),
            s(:lvar, :klass),
            s(:str, "Foo::Bar#baz class")),
          s(:send, nil, :assert_equal,
            s(:str, "#"),
            s(:lvar, :type),
            s(:str, "Foo::Bar#baz type")),
          s(:send, nil, :assert_equal,
            s(:str, "baz"),
            s(:lvar, :meth),
            s(:str, "Foo::Bar#baz method")))),
      s(:def, :test_parse_name_special,
        s(:args),
        s(:begin,
          s(:lvasgn, :specials,
            s(:array,
              s(:str, "%"),
              s(:str, "&"),
              s(:str, "*"),
              s(:str, "+"),
              s(:str, "+@"),
              s(:str, "-"),
              s(:str, "-@"),
              s(:str, "/"),
              s(:str, "<"),
              s(:str, "<<"),
              s(:str, "<="),
              s(:str, "<=>"),
              s(:str, "=="),
              s(:str, "==="),
              s(:str, "=>"),
              s(:str, "=~"),
              s(:str, ">"),
              s(:str, ">>"),
              s(:str, "[]"),
              s(:str, "[]="),
              s(:str, "^"),
              s(:str, "`"),
              s(:str, "|"),
              s(:str, "~"),
              s(:str, "~@"))),
          s(:block,
            s(:send,
              s(:lvar, :specials), :each),
            s(:args,
              s(:arg, :special)),
            s(:begin,
              s(:lvasgn, :parsed,
                s(:send,
                  s(:ivar, :@driver), :parse_name,
                  s(:lvar, :special))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, ""),
                  s(:str, "."),
                  s(:lvar, :special)),
                s(:lvar, :parsed)))))),
      s(:def, :_test_setup_pager,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send,
              s(:ivar, :@driver), :use_stdout=,
              s(:false)),
            s(:lvasgn, :pager,
              s(:block,
                s(:send, nil, :with_dummy_pager),
                s(:args),
                s(:send,
                  s(:ivar, :@driver), :setup_pager))),
            s(:if,
              s(:lvar, :pager), nil,
              s(:send, nil, :skip,
                s(:str, "couldn't find a standard pager"))),
            s(:send, nil, :assert,
              s(:send,
                s(:ivar, :@driver), :paging?))),
          s(:if,
            s(:lvar, :pager),
            s(:send,
              s(:lvar, :pager), :close), nil))),
      s(:def, :util_ancestors_store,
        s(:args),
        s(:begin,
          s(:lvasgn, :store1,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RI), :Store), :new,
              s(:ivar, :@home_ri))),
          s(:send,
            s(:send,
              s(:lvar, :store1), :cache), :[]=,
            s(:sym, :ancestors),
            s(:hash,
              s(:pair,
                s(:str, "Foo"),
                s(:array,
                  s(:str, "Object"))),
              s(:pair,
                s(:str, "Foo::Bar"),
                s(:array,
                  s(:str, "Foo"))))),
          s(:send,
            s(:send,
              s(:lvar, :store1), :cache), :[]=,
            s(:sym, :class_methods),
            s(:hash,
              s(:pair,
                s(:str, "Foo"),
                s(:array,
                  s(:str, "c_method"),
                  s(:str, "new"))),
              s(:pair,
                s(:str, "Foo::Bar"),
                s(:array,
                  s(:str, "new"))))),
          s(:send,
            s(:send,
              s(:lvar, :store1), :cache), :[]=,
            s(:sym, :instance_methods),
            s(:hash,
              s(:pair,
                s(:str, "Foo"),
                s(:array,
                  s(:str, "i_method"))))),
          s(:send,
            s(:send,
              s(:lvar, :store1), :cache), :[]=,
            s(:sym, :modules),
            s(:array,
              s(:str, "Foo"),
              s(:str, "Foo::Bar"))),
          s(:lvasgn, :store2,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RI), :Store), :new,
              s(:ivar, :@home_ri))),
          s(:send,
            s(:send,
              s(:lvar, :store2), :cache), :[]=,
            s(:sym, :ancestors),
            s(:hash,
              s(:pair,
                s(:str, "Foo"),
                s(:array,
                  s(:str, "Mixin"),
                  s(:str, "Object"))),
              s(:pair,
                s(:str, "Mixin"),
                s(:array)),
              s(:pair,
                s(:str, "Object"),
                s(:array,
                  s(:str, "X"),
                  s(:str, "Object"))),
              s(:pair,
                s(:str, "X"),
                s(:array,
                  s(:str, "Object"))))),
          s(:send,
            s(:send,
              s(:lvar, :store2), :cache), :[]=,
            s(:sym, :class_methods),
            s(:hash,
              s(:pair,
                s(:str, "Foo"),
                s(:array,
                  s(:str, "c_method"),
                  s(:str, "new"))),
              s(:pair,
                s(:str, "Mixin"),
                s(:array)),
              s(:pair,
                s(:str, "X"),
                s(:array)),
              s(:pair,
                s(:str, "Object"),
                s(:array)))),
          s(:send,
            s(:send,
              s(:lvar, :store2), :cache), :[]=,
            s(:sym, :instance_methods),
            s(:hash,
              s(:pair,
                s(:str, "Foo"),
                s(:array,
                  s(:str, "i_method"))),
              s(:pair,
                s(:str, "Mixin"),
                s(:array)))),
          s(:send,
            s(:send,
              s(:lvar, :store2), :cache), :[]=,
            s(:sym, :modules),
            s(:array,
              s(:str, "Foo"),
              s(:str, "Mixin"),
              s(:str, "Object"),
              s(:str, "X"))),
          s(:send,
            s(:ivar, :@driver), :stores=,
            s(:array,
              s(:lvar, :store1),
              s(:lvar, :store2))))),
      s(:def, :util_multi_store,
        s(:args),
        s(:begin,
          s(:send, nil, :util_store),
          s(:ivasgn, :@home_ri2,
            s(:dstr,
              s(:begin,
                s(:ivar, :@home_ri)),
              s(:str, "2"))),
          s(:ivasgn, :@store2,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RI), :Store), :new,
              s(:ivar, :@home_ri2))),
          s(:ivasgn, :@top_level,
            s(:send,
              s(:ivar, :@store2), :add_file,
              s(:str, "file.rb"))),
          s(:ivasgn, :@mAmbiguous,
            s(:send,
              s(:ivar, :@top_level), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "Ambiguous"))),
          s(:ivasgn, :@cFoo,
            s(:send,
              s(:ivar, :@top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Foo"))),
          s(:ivasgn, :@cBar,
            s(:send,
              s(:ivar, :@top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Bar"),
              s(:str, "Foo"))),
          s(:ivasgn, :@cFoo_Baz,
            s(:send,
              s(:ivar, :@cFoo), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Baz"))),
          s(:ivasgn, :@baz,
            s(:send,
              s(:ivar, :@cBar), :add_method,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "baz")))),
          s(:send,
            s(:ivar, :@baz), :record_location,
            s(:ivar, :@top_level)),
          s(:ivasgn, :@override,
            s(:send,
              s(:ivar, :@cBar), :add_method,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "override")))),
          s(:send,
            s(:ivar, :@override), :comment=,
            s(:str, "must be displayed")),
          s(:send,
            s(:ivar, :@override), :record_location,
            s(:ivar, :@top_level)),
          s(:send,
            s(:ivar, :@store2), :save),
          s(:send,
            s(:ivar, :@driver), :stores=,
            s(:array,
              s(:ivar, :@store1),
              s(:ivar, :@store2))))),
      s(:def, :util_store,
        s(:args),
        s(:begin,
          s(:ivasgn, :@store1,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RI), :Store), :new,
              s(:ivar, :@home_ri),
              s(:sym, :home))),
          s(:ivasgn, :@top_level,
            s(:send,
              s(:ivar, :@store1), :add_file,
              s(:str, "file.rb"))),
          s(:ivasgn, :@readme,
            s(:send,
              s(:ivar, :@store1), :add_file,
              s(:str, "README.rdoc"))),
          s(:send,
            s(:ivar, :@readme), :parser=,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Parser), :Simple)),
          s(:send,
            s(:ivar, :@readme), :comment=,
            s(:send, nil, :doc,
              s(:send, nil, :head,
                s(:int, 1),
                s(:str, "README")),
              s(:send, nil, :para,
                s(:str, "This is a README")))),
          s(:ivasgn, :@cFoo,
            s(:send,
              s(:ivar, :@top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Foo"))),
          s(:ivasgn, :@mExt,
            s(:send,
              s(:ivar, :@top_level), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "Ext"))),
          s(:ivasgn, :@mInc,
            s(:send,
              s(:ivar, :@top_level), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:str, "Inc"))),
          s(:ivasgn, :@cAmbiguous,
            s(:send,
              s(:ivar, :@top_level), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Ambiguous"))),
          s(:lvasgn, :doc,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "Extend thingy")))),
          s(:ivasgn, :@cFooExt,
            s(:send,
              s(:ivar, :@cFoo), :add_extend,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Extend), :new,
                s(:str, "Ext"),
                s(:lvar, :doc)))),
          s(:send,
            s(:ivar, :@cFooExt), :record_location,
            s(:ivar, :@top_level)),
          s(:lvasgn, :doc,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "Include thingy")))),
          s(:ivasgn, :@cFooInc,
            s(:send,
              s(:ivar, :@cFoo), :add_include,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Include), :new,
                s(:str, "Inc"),
                s(:lvar, :doc)))),
          s(:send,
            s(:ivar, :@cFooInc), :record_location,
            s(:ivar, :@top_level)),
          s(:ivasgn, :@cFoo_Bar,
            s(:send,
              s(:ivar, :@cFoo), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Bar"))),
          s(:ivasgn, :@blah,
            s(:send,
              s(:ivar, :@cFoo_Bar), :add_method,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "blah")))),
          s(:send,
            s(:ivar, :@blah), :call_seq=,
            s(:str, "blah(5) => 5\nblah(6) => 6\n")),
          s(:send,
            s(:ivar, :@blah), :record_location,
            s(:ivar, :@top_level)),
          s(:ivasgn, :@bother,
            s(:send,
              s(:ivar, :@cFoo_Bar), :add_method,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "bother")))),
          s(:send,
            s(:ivar, :@bother), :block_params=,
            s(:str, "stuff")),
          s(:send,
            s(:ivar, :@bother), :params=,
            s(:str, "(things)")),
          s(:send,
            s(:ivar, :@bother), :record_location,
            s(:ivar, :@top_level)),
          s(:ivasgn, :@new,
            s(:send,
              s(:ivar, :@cFoo_Bar), :add_method,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "new")))),
          s(:send,
            s(:ivar, :@new), :record_location,
            s(:ivar, :@top_level)),
          s(:send,
            s(:ivar, :@new), :singleton=,
            s(:true)),
          s(:ivasgn, :@attr,
            s(:send,
              s(:ivar, :@cFoo_Bar), :add_attribute,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Attr), :new,
                s(:nil),
                s(:str, "attr"),
                s(:str, "RW"),
                s(:str, "")))),
          s(:send,
            s(:ivar, :@attr), :record_location,
            s(:ivar, :@top_level)),
          s(:ivasgn, :@cFoo_Baz,
            s(:send,
              s(:ivar, :@cFoo), :add_class,
              s(:const,
                s(:const, nil, :RDoc), :NormalClass),
              s(:str, "Baz"))),
          s(:send,
            s(:ivar, :@cFoo_Baz), :record_location,
            s(:ivar, :@top_level)),
          s(:ivasgn, :@inherit,
            s(:send,
              s(:ivar, :@cFoo), :add_method,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "inherit")))),
          s(:send,
            s(:ivar, :@inherit), :record_location,
            s(:ivar, :@top_level)),
          s(:ivasgn, :@overriden,
            s(:send,
              s(:ivar, :@cFoo), :add_method,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :AnyMethod), :new,
                s(:nil),
                s(:str, "override")))),
          s(:send,
            s(:ivar, :@overriden), :comment=,
            s(:str, "must not be displayed in Bar#override")),
          s(:send,
            s(:ivar, :@overriden), :record_location,
            s(:ivar, :@top_level)),
          s(:send,
            s(:ivar, :@store1), :save),
          s(:send,
            s(:ivar, :@driver), :stores=,
            s(:array,
              s(:ivar, :@store1))))))))
