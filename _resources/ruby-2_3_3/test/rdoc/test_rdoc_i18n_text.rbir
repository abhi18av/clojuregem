s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocI18nText),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :test_multiple_paragraphs,
        s(:args),
        s(:begin,
          s(:lvasgn, :paragraph1,
            s(:send,
              s(:dstr,
                s(:str, "RDoc produces HTML and command-line documentation for Ruby projects.  RDoc\n"),
                s(:str, "includes the +rdoc+ and +ri+ tools for generating and displaying documentation\n"),
                s(:str, "from the command-line.\n")), :strip)),
          s(:lvasgn, :paragraph2,
            s(:send,
              s(:dstr,
                s(:str, "This command generates documentation for all the Ruby and C source\n"),
                s(:str, "files in and below the current directory.  These will be stored in a\n"),
                s(:str, "documentation tree starting in the subdirectory +doc+.\n")), :strip)),
          s(:lvasgn, :raw,
            s(:dstr,
              s(:begin,
                s(:lvar, :paragraph1)),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:begin,
                s(:lvar, :paragraph2)),
              s(:str, "\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:hash,
                s(:pair,
                  s(:sym, :type),
                  s(:sym, :paragraph)),
                s(:pair,
                  s(:sym, :paragraph),
                  s(:lvar, :paragraph1)),
                s(:pair,
                  s(:sym, :line_no),
                  s(:int, 1))),
              s(:hash,
                s(:pair,
                  s(:sym, :type),
                  s(:sym, :paragraph)),
                s(:pair,
                  s(:sym, :paragraph),
                  s(:lvar, :paragraph2)),
                s(:pair,
                  s(:sym, :line_no),
                  s(:int, 5))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send, nil, :extract_messages,
              s(:lvar, :raw))))),
      s(:def, :test_translate_multiple_paragraphs,
        s(:args),
        s(:begin,
          s(:lvasgn, :paragraph1,
            s(:send,
              s(:str, "Paragraph 1.\n"), :strip)),
          s(:lvasgn, :paragraph2,
            s(:send,
              s(:str, "Paragraph 2.\n"), :strip)),
          s(:lvasgn, :raw,
            s(:dstr,
              s(:begin,
                s(:lvar, :paragraph1)),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:begin,
                s(:lvar, :paragraph2)),
              s(:str, "\n"))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "Paragraphe 1.\n"),
              s(:str, "\n"),
              s(:str, "Paragraphe 2.\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send, nil, :translate,
              s(:lvar, :raw))))),
      s(:def, :test_translate_not_transalted_message,
        s(:args),
        s(:begin,
          s(:lvasgn, :nonexistent_paragraph,
            s(:send,
              s(:str, "Nonexistent paragraph.\n"), :strip)),
          s(:lvasgn, :raw,
            s(:dstr,
              s(:begin,
                s(:lvar, :nonexistent_paragraph)),
              s(:str, "\n"))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:begin,
                s(:lvar, :nonexistent_paragraph)),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send, nil, :translate,
              s(:lvar, :raw))))),
      s(:def, :test_translate_keep_empty_lines,
        s(:args),
        s(:begin,
          s(:lvasgn, :raw,
            s(:dstr,
              s(:str, "Paragraph 1.\n"),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "Paragraph 2.\n"))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "Paragraphe 1.\n"),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "Paragraphe 2.\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send, nil, :translate,
              s(:lvar, :raw))))),
      s(:send, nil, :private),
      s(:def, :extract_messages,
        s(:args,
          s(:arg, :raw)),
        s(:begin,
          s(:lvasgn, :text,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :I18n), :Text), :new,
              s(:lvar, :raw))),
          s(:lvasgn, :messages,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :text), :extract_messages),
            s(:args,
              s(:arg, :message)),
            s(:send,
              s(:lvar, :messages), :<<,
              s(:lvar, :message))),
          s(:lvar, :messages))),
      s(:def, :locale,
        s(:args),
        s(:begin,
          s(:lvasgn, :locale,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :I18n), :Locale), :new,
              s(:str, "fr"))),
          s(:lvasgn, :messages,
            s(:send,
              s(:lvar, :locale), :instance_variable_get,
              s(:sym, :@messages))),
          s(:send,
            s(:lvar, :messages), :[]=,
            s(:str, "markdown"),
            s(:str, "markdown (markdown in fr)")),
          s(:send,
            s(:lvar, :messages), :[]=,
            s(:str, "Hello"),
            s(:str, "Bonjour (Hello in fr)")),
          s(:send,
            s(:lvar, :messages), :[]=,
            s(:str, "Paragraph 1."),
            s(:str, "Paragraphe 1.")),
          s(:send,
            s(:lvar, :messages), :[]=,
            s(:str, "Paragraph 2."),
            s(:str, "Paragraphe 2.")),
          s(:lvar, :locale))),
      s(:def, :translate,
        s(:args,
          s(:arg, :raw)),
        s(:begin,
          s(:lvasgn, :text,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :I18n), :Text), :new,
              s(:lvar, :raw))),
          s(:send,
            s(:lvar, :text), :translate,
            s(:send, nil, :locale)))))))
