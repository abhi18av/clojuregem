s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocMarkupDocument),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@d,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)))),
      s(:def, :test_append,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@d), :<<,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Paragraph), :new,
              s(:str, "hi"))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "hi")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:ivar, :@d)))),
      s(:def, :test_append_document,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@d), :<<,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:send, nil, :assert_empty,
            s(:ivar, :@d)),
          s(:send,
            s(:ivar, :@d), :<<,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "hi")))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "hi")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:ivar, :@d)))),
      s(:def, :test_append_string,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@d), :<<,
            s(:str, "")),
          s(:send, nil, :assert_empty,
            s(:ivar, :@d)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:ivar, :@d), :<<,
              s(:str, "hi"))))),
      s(:def, :test_concat,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@d), :concat,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new))),
          s(:send, nil, :refute_empty,
            s(:ivar, :@d)))),
      s(:def, :test_each,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:lvasgn, :b,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "hi")))),
          s(:send,
            s(:ivar, :@d), :push,
            s(:lvar, :a),
            s(:lvar, :b)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :a),
              s(:lvar, :b)),
            s(:block,
              s(:send,
                s(:ivar, :@d), :map),
              s(:args,
                s(:arg, :sub_doc)),
              s(:lvar, :sub_doc))))),
      s(:def, :test_empty_eh,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_empty,
            s(:ivar, :@d)),
          s(:send,
            s(:ivar, :@d), :<<,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :BlankLine), :new)),
          s(:send, nil, :refute_empty,
            s(:ivar, :@d)))),
      s(:def, :test_empty_eh_document,
        s(:args),
        s(:begin,
          s(:lvasgn, :d,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:ivar, :@d))),
          s(:send, nil, :assert_empty,
            s(:lvar, :d)))),
      s(:def, :test_equals2,
        s(:args),
        s(:begin,
          s(:lvasgn, :d2,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@d),
            s(:lvar, :d2)),
          s(:send,
            s(:lvar, :d2), :<<,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :BlankLine), :new)),
          s(:send, nil, :refute_equal,
            s(:ivar, :@d),
            s(:lvar, :d2)))),
      s(:def, :test_equals2_file,
        s(:args),
        s(:begin,
          s(:lvasgn, :d2,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:send,
            s(:lvar, :d2), :file=,
            s(:str, "file.rb")),
          s(:send, nil, :refute_equal,
            s(:ivar, :@d),
            s(:lvar, :d2)),
          s(:send,
            s(:ivar, :@d), :file=,
            s(:str, "file.rb")),
          s(:send, nil, :assert_equal,
            s(:ivar, :@d),
            s(:lvar, :d2)))),
      s(:def, :test_file_equals,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@d), :file=,
            s(:str, "file.rb")),
          s(:send, nil, :assert_equal,
            s(:str, "file.rb"),
            s(:send,
              s(:ivar, :@d), :file)))),
      s(:def, :test_file_equals_top_level,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@d), :file=,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))),
          s(:send, nil, :assert_equal,
            s(:str, "file.rb"),
            s(:send,
              s(:ivar, :@d), :file)))),
      s(:def, :test_lt2,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@d), :<<,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :BlankLine), :new)),
          s(:send, nil, :refute_empty,
            s(:ivar, :@d)))),
      s(:def, :test_merge,
        s(:args),
        s(:begin,
          s(:lvasgn, :original,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "original")))),
          s(:send,
            s(:lvar, :original), :file=,
            s(:str, "file.rb")),
          s(:lvasgn, :root,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:lvar, :original))),
          s(:lvasgn, :replace,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "replace")))),
          s(:send,
            s(:lvar, :replace), :file=,
            s(:str, "file.rb")),
          s(:lvasgn, :other,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:lvar, :replace))),
          s(:lvasgn, :result,
            s(:send,
              s(:lvar, :root), :merge,
              s(:lvar, :other))),
          s(:lvasgn, :inner,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "replace")))),
          s(:send,
            s(:lvar, :inner), :file=,
            s(:str, "file.rb")),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:lvar, :inner))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :result)))),
      s(:def, :test_merge_add,
        s(:args),
        s(:begin,
          s(:lvasgn, :original,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "original")))),
          s(:send,
            s(:lvar, :original), :file=,
            s(:str, "file.rb")),
          s(:lvasgn, :root,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:lvar, :original))),
          s(:lvasgn, :addition,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "addition")))),
          s(:send,
            s(:lvar, :addition), :file=,
            s(:str, "other.rb")),
          s(:lvasgn, :other,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:lvar, :addition))),
          s(:lvasgn, :result,
            s(:send,
              s(:lvar, :root), :merge,
              s(:lvar, :other))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:lvar, :original),
              s(:lvar, :addition))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :result)))),
      s(:def, :test_merge_empty,
        s(:args),
        s(:begin,
          s(:lvasgn, :original,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new)),
          s(:lvasgn, :root,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:lvar, :original))),
          s(:lvasgn, :replace,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "replace")))),
          s(:send,
            s(:lvar, :replace), :file=,
            s(:str, "file.rb")),
          s(:lvasgn, :other,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:lvar, :replace))),
          s(:lvasgn, :result,
            s(:send,
              s(:lvar, :root), :merge,
              s(:lvar, :other))),
          s(:lvasgn, :inner,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "replace")))),
          s(:send,
            s(:lvar, :inner), :file=,
            s(:str, "file.rb")),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:lvar, :inner))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :result)))),
      s(:def, :test_push,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@d), :push,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :BlankLine), :new),
            s(:send,
              s(:const,
                s(:ivar, :@RM), :BlankLine), :new)),
          s(:send, nil, :refute_empty,
            s(:ivar, :@d)))),
      s(:def, :test_table_of_contents,
        s(:args),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "A")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "B")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 2),
                s(:str, "C")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "D")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "E")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "F")))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "A")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 2),
                s(:str, "C")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "E")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :doc), :table_of_contents)))),
      s(:def, :test_table_of_contents_omit_headings_below,
        s(:args),
        s(:begin,
          s(:lvasgn, :document,
            s(:send, nil, :doc,
              s(:send, nil, :head,
                s(:int, 1),
                s(:str, "A")),
              s(:send, nil, :para,
                s(:str, "B")),
              s(:send, nil, :head,
                s(:int, 2),
                s(:str, "C")),
              s(:send, nil, :para,
                s(:str, "D")),
              s(:send, nil, :head,
                s(:int, 1),
                s(:str, "E")),
              s(:send, nil, :para,
                s(:str, "F")))),
          s(:send,
            s(:lvar, :document), :omit_headings_below=,
            s(:int, 1)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :head,
                s(:int, 1),
                s(:str, "A")),
              s(:send, nil, :head,
                s(:int, 1),
                s(:str, "E")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :document), :table_of_contents)))))))
