s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocText),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :RDoc), :Text)),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@options,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Options), :new)),
          s(:ivasgn, :@top_level,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:str, "file.rb"))))),
      s(:def, :test_self_encode_fallback,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)), nil,
            s(:send, nil, :skip,
              s(:str, "Encoding not implemented"))),
          s(:send, nil, :assert_equal,
            s(:str, "…"),
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Text), :encode_fallback,
              s(:str, "…"),
              s(:const,
                s(:const, nil, :Encoding), :UTF_8),
              s(:str, "..."))),
          s(:send, nil, :assert_equal,
            s(:str, "..."),
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Text), :encode_fallback,
              s(:str, "…"),
              s(:const,
                s(:const, nil, :Encoding), :US_ASCII),
              s(:str, "..."))))),
      s(:def, :test_expand_tabs,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "hello\n  dave"),
            s(:send, nil, :expand_tabs,
              s(:str, "hello\n  dave")),
            s(:str, "spaces")),
          s(:send, nil, :assert_equal,
            s(:str, "hello\n        dave"),
            s(:send, nil, :expand_tabs,
              s(:str, "hello\n\tdave")),
            s(:str, "tab")),
          s(:send, nil, :assert_equal,
            s(:str, "hello\n        dave"),
            s(:send, nil, :expand_tabs,
              s(:str, "hello\n \tdave")),
            s(:str, "1 space tab")),
          s(:send, nil, :assert_equal,
            s(:str, "hello\n        dave"),
            s(:send, nil, :expand_tabs,
              s(:str, "hello\n  \tdave")),
            s(:str, "2 space tab")),
          s(:send, nil, :assert_equal,
            s(:str, "hello\n        dave"),
            s(:send, nil, :expand_tabs,
              s(:str, "hello\n   \tdave")),
            s(:str, "3 space tab")),
          s(:send, nil, :assert_equal,
            s(:str, "hello\n        dave"),
            s(:send, nil, :expand_tabs,
              s(:str, "hello\n    \tdave")),
            s(:str, "4 space tab")),
          s(:send, nil, :assert_equal,
            s(:str, "hello\n        dave"),
            s(:send, nil, :expand_tabs,
              s(:str, "hello\n     \tdave")),
            s(:str, "5 space tab")),
          s(:send, nil, :assert_equal,
            s(:str, "hello\n        dave"),
            s(:send, nil, :expand_tabs,
              s(:str, "hello\n      \tdave")),
            s(:str, "6 space tab")),
          s(:send, nil, :assert_equal,
            s(:str, "hello\n        dave"),
            s(:send, nil, :expand_tabs,
              s(:str, "hello\n       \tdave")),
            s(:str, "7 space tab")),
          s(:send, nil, :assert_equal,
            s(:str, "hello\n                dave"),
            s(:send, nil, :expand_tabs,
              s(:str, "hello\n         \tdave")),
            s(:str, "8 space tab")),
          s(:send, nil, :assert_equal,
            s(:str, ".               ."),
            s(:send, nil, :expand_tabs,
              s(:str, ".\t\t.")),
            s(:str, "dot tab tab dot")),
          s(:send, nil, :assert_equal,
            s(:str, "a       a"),
            s(:block,
              s(:send,
                s(:const, nil, :Timeout), :timeout,
                s(:int, 1)),
              s(:args),
              s(:send, nil, :expand_tabs,
                s(:str, "\ra\ta"))),
            s(:str, "carriage return")))),
      s(:def, :test_expand_tabs_encoding,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)), nil,
            s(:send, nil, :skip,
              s(:str, "Encoding not implemented"))),
          s(:lvasgn, :inn,
            s(:str, "hello\ns\tdave")),
          s(:send,
            s(:lvar, :inn), :force_encoding,
            s(:const,
              s(:const, nil, :Encoding), :BINARY)),
          s(:lvasgn, :out,
            s(:send, nil, :expand_tabs,
              s(:lvar, :inn))),
          s(:send, nil, :assert_equal,
            s(:str, "hello\ns       dave"),
            s(:lvar, :out)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :BINARY),
            s(:send,
              s(:lvar, :out), :encoding)))),
      s(:def, :test_flush_left,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "  we don't worry too much.\n"),
              s(:str, "\n"),
              s(:str, "  The comments associated with\n"))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "we don't worry too much.\n"),
              s(:str, "\n"),
              s(:str, "The comments associated with\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send, nil, :flush_left,
              s(:lvar, :text))))),
      s(:def, :test_flush_left_encoding,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)), nil,
            s(:send, nil, :skip,
              s(:str, "Encoding not implemented"))),
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "  we don't worry too much.\n"),
              s(:str, "\n"),
              s(:str, "  The comments associated with\n"))),
          s(:send,
            s(:lvar, :text), :force_encoding,
            s(:const,
              s(:const, nil, :Encoding), :US_ASCII)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "we don't worry too much.\n"),
              s(:str, "\n"),
              s(:str, "The comments associated with\n"))),
          s(:lvasgn, :result,
            s(:send, nil, :flush_left,
              s(:lvar, :text))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :result)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :US_ASCII),
            s(:send,
              s(:lvar, :result), :encoding)))),
      s(:def, :test_markup_string,
        s(:args),
        s(:begin,
          s(:lvasgn, :out,
            s(:send,
              s(:send, nil, :markup,
                s(:str, "hi")), :gsub,
              s(:str, "\n"),
              s(:str, ""))),
          s(:send, nil, :assert_equal,
            s(:str, "<p>hi</p>"),
            s(:lvar, :out)))),
      s(:def, :test_markup_comment,
        s(:args),
        s(:begin,
          s(:lvasgn, :out,
            s(:send,
              s(:send, nil, :markup,
                s(:send, nil, :comment,
                  s(:str, "hi"))), :gsub,
              s(:str, "\n"),
              s(:str, ""))),
          s(:send, nil, :assert_equal,
            s(:str, "<p>hi</p>"),
            s(:lvar, :out)))),
      s(:def, :test_normalize_comment_hash,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "##\n"),
              s(:str, "# we don't worry too much.\n"),
              s(:str, "#\n"),
              s(:str, "# The comments associated with\n"))),
          s(:lvasgn, :expected,
            s(:send,
              s(:dstr,
                s(:str, "we don't worry too much.\n"),
                s(:str, "\n"),
                s(:str, "The comments associated with\n")), :rstrip)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send, nil, :normalize_comment,
              s(:lvar, :text))))),
      s(:def, :test_normalize_comment_stars_single_space,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "/*\n"),
              s(:str, " * we don't worry too much.\n"),
              s(:str, " *\n"),
              s(:str, " * The comments associated with\n"),
              s(:str, " */\n"))),
          s(:lvasgn, :expected,
            s(:send,
              s(:dstr,
                s(:str, "we don't worry too much.\n"),
                s(:str, "\n"),
                s(:str, "The comments associated with\n")), :rstrip)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send, nil, :normalize_comment,
              s(:lvar, :text))))),
      s(:def, :test_normalize_comment_stars_single_double_space,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "/*\n"),
              s(:str, " *  we don't worry too much.\n"),
              s(:str, " *\n"),
              s(:str, " *  The comments associated with\n"),
              s(:str, " */\n"))),
          s(:lvasgn, :expected,
            s(:send,
              s(:dstr,
                s(:str, "we don't worry too much.\n"),
                s(:str, "\n"),
                s(:str, "The comments associated with\n")), :rstrip)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send, nil, :normalize_comment,
              s(:lvar, :text))))),
      s(:def, :test_parse,
        s(:args),
        s(:send, nil, :assert_kind_of,
          s(:const,
            s(:const,
              s(:const, nil, :RDoc), :Markup), :Document),
          s(:send, nil, :parse,
            s(:str, "hi")))),
      s(:def, :test_parse_comment,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new)),
          s(:send,
            s(:lvar, :expected), :file=,
            s(:ivar, :@top_level)),
          s(:lvasgn, :c,
            s(:send, nil, :comment,
              s(:str, ""))),
          s(:lvasgn, :parsed,
            s(:send, nil, :parse,
              s(:lvar, :c))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :parsed)),
          s(:send, nil, :assert_same,
            s(:lvar, :parsed),
            s(:send, nil, :parse,
              s(:lvar, :c))))),
      s(:def, :test_parse_document,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :Document), :new),
          s(:send, nil, :parse,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new)))),
      s(:def, :test_parse_empty,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :Document), :new),
          s(:send, nil, :parse,
            s(:str, "")))),
      s(:def, :test_parse_empty_newline,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :Document), :new),
          s(:send, nil, :parse,
            s(:str, "#\n")))),
      s(:def, :test_parse_format_markdown,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "it _works_")))),
          s(:lvasgn, :parsed,
            s(:send, nil, :parse,
              s(:str, "it *works*"),
              s(:str, "markdown"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :parsed)))),
      s(:def, :test_parse_format_rd,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Document), :new,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "it <em>works</em>")))),
          s(:lvasgn, :parsed,
            s(:send, nil, :parse,
              s(:str, "it ((*works*))"),
              s(:str, "rd"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :parsed)))),
      s(:def, :test_parse_format_tomdoc,
        s(:args),
        s(:begin,
          s(:lvasgn, :code,
            s(:send, nil, :verb,
              s(:str, "1 + 1"))),
          s(:send,
            s(:lvar, :code), :format=,
            s(:sym, :ruby)),
          s(:lvasgn, :expected,
            s(:send, nil, :doc,
              s(:send, nil, :para,
                s(:str, "It does a thing")),
              s(:send, nil, :blank_line),
              s(:send, nil, :head,
                s(:int, 3),
                s(:str, "Examples")),
              s(:send, nil, :blank_line),
              s(:lvar, :code))),
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "It does a thing\n"),
              s(:str, "\n"),
              s(:str, "Examples\n"),
              s(:str, "\n"),
              s(:str, "  1 + 1\n"))),
          s(:lvasgn, :parsed,
            s(:send, nil, :parse,
              s(:lvar, :text),
              s(:str, "tomdoc"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :parsed)))),
      s(:def, :test_parse_newline,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :Document), :new),
          s(:send, nil, :parse,
            s(:str, "\n")))),
      s(:def, :test_snippet,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "This is one-hundred characters or more of text in a single paragraph.  This\n"),
              s(:str, "paragraph will be cut off some point after the one-hundredth character.\n"))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "<p>This is one-hundred characters or more of text in a single paragraph.  This\n"),
              s(:str, "paragraph will be cut off …\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send, nil, :snippet,
              s(:lvar, :text))))),
      s(:def, :test_snippet_comment,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :comment,
              s(:str, "This is a comment"))),
          s(:send, nil, :assert_equal,
            s(:str, "<p>This is a comment\n"),
            s(:send, nil, :snippet,
              s(:lvar, :c))))),
      s(:def, :test_snippet_short,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:str, "This is a comment")),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "<p>"),
              s(:begin,
                s(:lvar, :text)),
              s(:str, "\n")),
            s(:send, nil, :snippet,
              s(:lvar, :text))))),
      s(:def, :test_strip_hashes,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "##\n"),
              s(:str, "# we don't worry too much.\n"),
              s(:str, "#\n"),
              s(:str, "# The comments associated with\n"))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "  we don't worry too much.\n"),
              s(:str, "\n"),
              s(:str, "  The comments associated with\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send, nil, :strip_hashes,
              s(:lvar, :text))))),
      s(:def, :test_strip_hashes_encoding,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)), nil,
            s(:send, nil, :skip,
              s(:str, "Encoding not implemented"))),
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "##\n"),
              s(:str, "# we don't worry too much.\n"),
              s(:str, "#\n"),
              s(:str, "# The comments associated with\n"))),
          s(:send,
            s(:lvar, :text), :force_encoding,
            s(:const,
              s(:const, nil, :Encoding), :CP852)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "  we don't worry too much.\n"),
              s(:str, "\n"),
              s(:str, "  The comments associated with\n"))),
          s(:lvasgn, :stripped,
            s(:send, nil, :strip_hashes,
              s(:lvar, :text))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :stripped)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :CP852),
            s(:send,
              s(:lvar, :stripped), :encoding)))),
      s(:def, :test_strip_newlines,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, " "),
            s(:send, nil, :strip_newlines,
              s(:str, "\n \n"))),
          s(:send, nil, :assert_equal,
            s(:str, "hi"),
            s(:send, nil, :strip_newlines,
              s(:str, "\n\nhi"))),
          s(:send, nil, :assert_equal,
            s(:str, "hi"),
            s(:send, nil, :strip_newlines,
              s(:str, "hi\n\n"))),
          s(:send, nil, :assert_equal,
            s(:str, "hi"),
            s(:send, nil, :strip_newlines,
              s(:str, "\n\nhi\n\n"))))),
      s(:def, :test_strip_newlines_encoding,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)), nil,
            s(:send, nil, :skip,
              s(:str, "Encoding not implemented"))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :UTF_8),
            s(:send,
              s(:str, ""), :encoding),
            s(:str, "Encoding sanity check")),
          s(:lvasgn, :text,
            s(:str, " \n")),
          s(:send,
            s(:lvar, :text), :force_encoding,
            s(:const,
              s(:const, nil, :Encoding), :US_ASCII)),
          s(:lvasgn, :stripped,
            s(:send, nil, :strip_newlines,
              s(:lvar, :text))),
          s(:send, nil, :assert_equal,
            s(:str, " "),
            s(:lvar, :stripped)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :US_ASCII),
            s(:send,
              s(:lvar, :stripped), :encoding)))),
      s(:def, :test_strip_stars,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "/*\n"),
              s(:str, " * * we don't worry too much.\n"),
              s(:str, " *\n"),
              s(:str, " * The comments associated with\n"),
              s(:str, " */\n"))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "   * we don't worry too much.\n"),
              s(:str, "\n"),
              s(:str, "   The comments associated with\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send, nil, :strip_stars,
              s(:lvar, :text))))),
      s(:def, :test_strip_stars_document_method,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "/*\n"),
              s(:str, " * Document-method: Zlib::GzipFile#mtime=\n"),
              s(:str, " *\n"),
              s(:str, " * A comment\n"),
              s(:str, " */\n"))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "   A comment\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send, nil, :strip_stars,
              s(:lvar, :text))))),
      s(:def, :test_strip_stars_encoding,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)), nil,
            s(:send, nil, :skip,
              s(:str, "Encoding not implemented"))),
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "/*\n"),
              s(:str, " * * we don't worry too much.\n"),
              s(:str, " *\n"),
              s(:str, " * The comments associated with\n"),
              s(:str, " */\n"))),
          s(:send,
            s(:lvar, :text), :force_encoding,
            s(:const,
              s(:const, nil, :Encoding), :CP852)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "   * we don't worry too much.\n"),
              s(:str, "\n"),
              s(:str, "   The comments associated with\n"))),
          s(:lvasgn, :result,
            s(:send, nil, :strip_stars,
              s(:lvar, :text))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :result)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :CP852),
            s(:send,
              s(:lvar, :result), :encoding)))),
      s(:def, :test_strip_stars_encoding2,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)), nil,
            s(:send, nil, :skip,
              s(:str, "Encoding not implemented"))),
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "/*\n"),
              s(:str, " * * we don't worry too much.\n"),
              s(:str, " *\n"),
              s(:str, " * The comments associated with\n"),
              s(:str, " */\n"))),
          s(:send,
            s(:lvar, :text), :force_encoding,
            s(:const,
              s(:const, nil, :Encoding), :BINARY)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "   * we don't worry too much.\n"),
              s(:str, "\n"),
              s(:str, "   The comments associated with\n"))),
          s(:lvasgn, :result,
            s(:send, nil, :strip_stars,
              s(:lvar, :text))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :result)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :BINARY),
            s(:send,
              s(:lvar, :result), :encoding)))),
      s(:def, :test_strip_stars_no_stars,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:dstr,
              s(:str, "* we don't worry too much.\n"),
              s(:str, "\n"),
              s(:str, "The comments associated with\n"),
              s(:str, "\n"))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "* we don't worry too much.\n"),
              s(:str, "\n"),
              s(:str, "The comments associated with\n"),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send, nil, :strip_stars,
              s(:lvar, :text))))),
      s(:def, :test_to_html_apostrophe,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "‘a"),
            s(:send, nil, :to_html,
              s(:str, "'a"))),
          s(:send, nil, :assert_equal,
            s(:str, "a’"),
            s(:send, nil, :to_html,
              s(:str, "a'"))),
          s(:send, nil, :assert_equal,
            s(:str, "‘a’ ‘"),
            s(:send, nil, :to_html,
              s(:str, "'a' '"))))),
      s(:def, :test_to_html_backslash,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "S"),
          s(:send, nil, :to_html,
            s(:str, "\\S")))),
      s(:def, :test_to_html_br,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<br>"),
          s(:send, nil, :to_html,
            s(:str, "<br>")))),
      s(:def, :test_to_html_copyright,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "©"),
          s(:send, nil, :to_html,
            s(:str, "(c)")))),
      s(:def, :test_to_html_dash,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "-"),
            s(:send, nil, :to_html,
              s(:str, "-"))),
          s(:send, nil, :assert_equal,
            s(:str, "–"),
            s(:send, nil, :to_html,
              s(:str, "--"))),
          s(:send, nil, :assert_equal,
            s(:str, "—"),
            s(:send, nil, :to_html,
              s(:str, "---"))),
          s(:send, nil, :assert_equal,
            s(:str, "—-"),
            s(:send, nil, :to_html,
              s(:str, "----"))))),
      s(:def, :test_to_html_double_backtick,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "“a"),
            s(:send, nil, :to_html,
              s(:str, "``a"))),
          s(:send, nil, :assert_equal,
            s(:str, "“a“"),
            s(:send, nil, :to_html,
              s(:str, "``a``"))))),
      s(:def, :test_to_html_double_quote,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "“a"),
            s(:send, nil, :to_html,
              s(:str, "\"a"))),
          s(:send, nil, :assert_equal,
            s(:str, "“a”"),
            s(:send, nil, :to_html,
              s(:str, "\"a\""))))),
      s(:def, :test_to_html_double_quote_quot,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "“a"),
            s(:send, nil, :to_html,
              s(:str, "&quot;a"))),
          s(:send, nil, :assert_equal,
            s(:str, "“a”"),
            s(:send, nil, :to_html,
              s(:str, "&quot;a&quot;"))))),
      s(:def, :test_to_html_double_tick,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "”a"),
            s(:send, nil, :to_html,
              s(:str, "''a"))),
          s(:send, nil, :assert_equal,
            s(:str, "”a”"),
            s(:send, nil, :to_html,
              s(:str, "''a''"))))),
      s(:def, :test_to_html_ellipsis,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, ".."),
            s(:send, nil, :to_html,
              s(:str, ".."))),
          s(:send, nil, :assert_equal,
            s(:str, "…"),
            s(:send, nil, :to_html,
              s(:str, "..."))),
          s(:send, nil, :assert_equal,
            s(:str, ".…"),
            s(:send, nil, :to_html,
              s(:str, "...."))))),
      s(:def, :test_to_html_encoding,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)), nil,
            s(:send, nil, :skip,
              s(:str, "Encoding not implemented"))),
          s(:lvasgn, :s,
            s(:send,
              s(:str, "...(c)"), :encode,
              s(:const,
                s(:const, nil, :Encoding), :Shift_JIS))),
          s(:lvasgn, :html,
            s(:send, nil, :to_html,
              s(:lvar, :s))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :Shift_JIS),
            s(:send,
              s(:lvar, :html), :encoding)),
          s(:lvasgn, :expected,
            s(:send,
              s(:str, "…(c)"), :encode,
              s(:const,
                s(:const, nil, :Encoding), :Shift_JIS))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :html)))),
      s(:def, :test_to_html_html_tag,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<a href=\"http://example\">hi’s</a>"),
          s(:send, nil, :to_html,
            s(:str, "<a href=\"http://example\">hi's</a>")))),
      s(:def, :test_to_html_registered_trademark,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "®"),
          s(:send, nil, :to_html,
            s(:str, "(r)")))),
      s(:def, :test_to_html_tt_tag,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<tt>hi's</tt>"),
            s(:send, nil, :to_html,
              s(:str, "<tt>hi's</tt>"))),
          s(:send, nil, :assert_equal,
            s(:str, "<tt>hi\\'s</tt>"),
            s(:send, nil, :to_html,
              s(:str, "<tt>hi\\\\'s</tt>"))))),
      s(:def, :test_to_html_tt_tag_mismatch,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :_),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :verbose_capture_io),
              s(:args),
              s(:send, nil, :assert_equal,
                s(:str, "<tt>hi"),
                s(:send, nil, :to_html,
                  s(:str, "<tt>hi"))))),
          s(:send, nil, :assert_equal,
            s(:str, "mismatched <tt> tag\n"),
            s(:lvar, :err)))),
      s(:def, :formatter,
        s(:args),
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :RDoc), :Markup), :ToHtml), :new,
          s(:ivar, :@options))),
      s(:def, :options,
        s(:args),
        s(:ivar, :@options)))))
