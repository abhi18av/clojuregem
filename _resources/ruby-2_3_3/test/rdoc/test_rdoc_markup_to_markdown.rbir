s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocMarkupToMarkdown),
    s(:const,
      s(:const,
        s(:const, nil, :RDoc), :Markup), :TextFormatterTestCase),
    s(:begin,
      s(:send, nil, :add_visitor_tests),
      s(:send, nil, :add_text_tests),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@to,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :ToMarkdown), :new)))),
      s(:def, :accept_blank_line,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_block_quote,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "> quote\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_document,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "hello\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_heading,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "##### Hello\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_list_end_bullet,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_end_label,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_end_lalpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_end_note,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_end_number,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_end_ualpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_item_end_bullet,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:int, 0),
          s(:send,
            s(:ivar, :@to), :indent),
          s(:str, "indent"))),
      s(:def, :accept_list_item_end_label,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "cat\n:   "),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :indent),
            s(:str, "indent")))),
      s(:def, :accept_list_item_end_lalpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :indent),
            s(:str, "indent")),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:ivar, :@to), :list_index), :last)))),
      s(:def, :accept_list_item_end_note,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "cat\n:   "),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :indent),
            s(:str, "indent")))),
      s(:def, :accept_list_item_end_number,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :indent),
            s(:str, "indent")),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:ivar, :@to), :list_index), :last)))),
      s(:def, :accept_list_item_end_ualpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :indent),
            s(:str, "indent")),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:ivar, :@to), :list_index), :last)))),
      s(:def, :accept_list_item_start_bullet,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :res)),
          s(:send, nil, :assert_equal,
            s(:str, "*   "),
            s(:send,
              s(:ivar, :@to), :prefix)))),
      s(:def, :accept_list_item_start_label,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :res)),
          s(:send, nil, :assert_equal,
            s(:str, "cat\n:   "),
            s(:send,
              s(:ivar, :@to), :prefix)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:ivar, :@to), :indent)))),
      s(:def, :accept_list_item_start_lalpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :res)),
          s(:send, nil, :assert_equal,
            s(:str, "1.  "),
            s(:send,
              s(:ivar, :@to), :prefix)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:ivar, :@to), :list_index), :last)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:ivar, :@to), :indent)))),
      s(:def, :accept_list_item_start_note,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :res)),
          s(:send, nil, :assert_equal,
            s(:str, "cat\n:   "),
            s(:send,
              s(:ivar, :@to), :prefix)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:ivar, :@to), :indent)))),
      s(:def, :accept_list_item_start_number,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :res)),
          s(:send, nil, :assert_equal,
            s(:str, "1.  "),
            s(:send,
              s(:ivar, :@to), :prefix)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:ivar, :@to), :list_index), :last)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:ivar, :@to), :indent)))),
      s(:def, :accept_list_item_start_ualpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :res)),
          s(:send, nil, :assert_equal,
            s(:str, "1.  "),
            s(:send,
              s(:ivar, :@to), :prefix)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:ivar, :@to), :list_index), :last)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:ivar, :@to), :indent)))),
      s(:def, :accept_list_start_bullet,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:nil)),
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :BULLET)),
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 4)),
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_start_label,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:nil)),
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :LABEL)),
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 4)),
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_start_lalpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :LALPHA)),
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 4)),
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_start_note,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:nil)),
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :NOTE)),
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 4)),
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_start_number,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :NUMBER)),
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 4)),
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_list_start_ualpha,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1)),
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :UALPHA)),
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 4)),
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_paragraph,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "hi\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_raw,
        s(:args),
        s(:begin,
          s(:lvasgn, :raw,
            s(:send,
              s(:dstr,
                s(:str, "<table>\n"),
                s(:str, "<tr><th>Name<th>Count\n"),
                s(:str, "<tr><td>a<td>1\n"),
                s(:str, "<tr><td>b<td>2\n"),
                s(:str, "</table>\n")), :rstrip)),
          s(:send, nil, :assert_equal,
            s(:lvar, :raw),
            s(:send,
              s(:send,
                s(:ivar, :@to), :res), :join)))),
      s(:def, :accept_rule,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "---\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_verbatim,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "    hi\n      world\n\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :end_accepting,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "hi"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :start_accepting,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@to), :indent)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "")),
            s(:send,
              s(:ivar, :@to), :res)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_index)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_type)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@to), :list_width)))),
      s(:def, :accept_heading_1,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "# Hello\n"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :accept_heading_2,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "## Hello\n"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :accept_heading_3,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "### Hello\n"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :accept_heading_4,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "#### Hello\n"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :accept_heading_indent,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "   # Hello\n"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :accept_heading_b,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "# **Hello**\n"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :accept_heading_suppressed_crossref,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "# Hello\n"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :accept_list_item_start_note_2,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "`teletype`\n:   teletype description\n\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_list_item_start_note_multi_description,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "label\n:   description one\n\n:   description two\n\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_list_item_start_note_multi_label,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "one\ntwo\n:   two headers\n\n"),
          s(:send,
            s(:send,
              s(:ivar, :@to), :res), :join))),
      s(:def, :accept_paragraph_b,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "reg **bold words** reg\n"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :accept_paragraph_br,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "one  \ntwo\n"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :accept_paragraph_break,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "hello  \nworld\n"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :accept_paragraph_i,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "reg *italic words* reg\n"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :accept_paragraph_indent,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "   words words words words words words words words words words words words\n"),
              s(:str, "   words words words words words words words words words words words words\n"),
              s(:str, "   words words words words words words\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :accept_paragraph_plus,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "reg `teletype` reg\n"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :accept_paragraph_star,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "reg **bold** reg\n"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :accept_paragraph_underscore,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "reg *italic* reg\n"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :accept_paragraph_wrap,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "words words words words words words words words words words words words words\n"),
              s(:str, "words words words words words words words words words words words words words\n"),
              s(:str, "words words words words\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :accept_rule_indent,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "   ---\n"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :accept_verbatim_indent,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "      hi\n       world\n\n"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :accept_verbatim_big_indent,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "      hi\n      world\n\n"),
          s(:send,
            s(:ivar, :@to), :end_accepting))),
      s(:def, :list_nested,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "*   l1\n"),
              s(:str, "    *   l1.1\n"),
              s(:str, "\n"),
              s(:str, "*   l2\n"),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :list_verbatim,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "*   list stuff\n"),
              s(:str, "\n"),
              s(:str, "        * list\n"),
              s(:str, "          with\n"),
              s(:str, "\n"),
              s(:str, "          second\n"),
              s(:str, "\n"),
              s(:str, "          1. indented\n"),
              s(:str, "          2. numbered\n"),
              s(:str, "\n"),
              s(:str, "          third\n"),
              s(:str, "\n"),
              s(:str, "        * second\n"),
              s(:str, "\n"),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@to), :end_accepting)))),
      s(:def, :test_convert_RDOCLINK,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "rdoc-garbage:C"))),
          s(:send, nil, :assert_equal,
            s(:str, "C\n"),
            s(:lvar, :result)))),
      s(:def, :test_convert_RDOCLINK_image,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "rdoc-image:/path/to/image.jpg"))),
          s(:send, nil, :assert_equal,
            s(:str, "![](/path/to/image.jpg)\n"),
            s(:lvar, :result)))),
      s(:def, :test_convert_TIDYLINK,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@to), :convert,
              s(:str, "{DSL}[http://en.wikipedia.org/wiki/Domain-specific_language]"))),
          s(:lvasgn, :expected,
            s(:str, "[DSL](http://en.wikipedia.org/wiki/Domain-specific_language)\n")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :result)))),
      s(:def, :test_handle_rdoc_link_label_footmark,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "[^1]:"),
          s(:send,
            s(:ivar, :@to), :handle_rdoc_link,
            s(:str, "rdoc-label:footmark-1:x")))),
      s(:def, :test_handle_rdoc_link_label_foottext,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "[^1]"),
          s(:send,
            s(:ivar, :@to), :handle_rdoc_link,
            s(:str, "rdoc-label:foottext-1:x")))),
      s(:def, :test_handle_rdoc_link_label_label,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "[x](#label-x)"),
          s(:send,
            s(:ivar, :@to), :handle_rdoc_link,
            s(:str, "rdoc-label:label-x")))),
      s(:def, :test_handle_rdoc_link_ref,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "x"),
          s(:send,
            s(:ivar, :@to), :handle_rdoc_link,
            s(:str, "rdoc-ref:x")))))))
