s(:begin,
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:str, "../xref_test_case"),
      s(:str, "(string)"))),
  s(:class,
    s(:const, nil, :TestRDocRequire),
    s(:const, nil, :XrefTestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@req,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Require), :new,
              s(:str, "foo"),
              s(:str, "comment"))))),
      s(:def, :test_initialize,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:ivar, :@req), :name)),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Require), :new,
              s(:str, "\"foo\""),
              s(:str, ""))),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:ivar, :@req), :name)),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Require), :new,
              s(:str, "'foo'"),
              s(:str, ""))),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:ivar, :@req), :name)),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Require), :new,
              s(:str, "|foo|"),
              s(:str, ""))),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:ivar, :@req), :name),
            s(:str, "for fortran?")))))))
