s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocMarkupParser),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@have_byteslice,
            s(:send,
              s(:str, ""), :respond_to?,
              s(:sym, :byteslice))),
          s(:ivasgn, :@RMP,
            s(:const,
              s(:ivar, :@RM), :Parser)))),
      s(:def, :test_build_heading,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:ivar, :@RMP), :new)),
          s(:send,
            s(:send,
              s(:lvar, :parser), :tokens), :replace,
            s(:array,
              s(:array,
                s(:sym, :TEXT),
                s(:str, "heading three"),
                s(:int, 4),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 17),
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Heading), :new,
              s(:int, 3),
              s(:str, "heading three")),
            s(:send,
              s(:lvar, :parser), :build_heading,
              s(:int, 3))))),
      s(:def, :test_char_pos,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:ivar, :@RMP), :new)),
          s(:lvasgn, :s,
            s(:send,
              s(:lvar, :parser), :setup_scanner,
              s(:str, "cät"))),
          s(:send,
            s(:lvar, :s), :scan,
            s(:regexp,
              s(:str, "\\S+"),
              s(:regopt))),
          s(:if,
            s(:or,
              s(:ivar, :@have_byteslice),
              s(:ivar, :@have_encoding)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:lvar, :parser), :char_pos,
                s(:send,
                  s(:lvar, :s), :pos))),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:send,
                s(:lvar, :parser), :char_pos,
                s(:send,
                  s(:lvar, :s), :pos)))))),
      s(:def, :test_get,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :HEADER),
              s(:int, 1),
              s(:int, 0),
              s(:int, 0)),
            s(:send,
              s(:lvar, :parser), :get)),
          s(:send, nil, :assert_equal,
            s(:int, 7),
            s(:send,
              s(:send,
                s(:lvar, :parser), :tokens), :length)))),
      s(:def, :test_parse_bullet,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "* l1\n"),
              s(:str, "* l2\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :List), :new,
                s(:sym, :BULLET),
                s(:splat,
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "l1"))),
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "l2")))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_bullet_utf_8,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "* 新しい機能\n")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :List), :new,
                s(:sym, :BULLET),
                s(:splat,
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "新しい機能")))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_bullet_verbatim_heading,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "* l1\n"),
              s(:str, "    v\n"),
              s(:str, "\n"),
              s(:str, "= H\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :List), :new,
                s(:sym, :BULLET),
                s(:splat,
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "l1")),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Verbatim), :new,
                        s(:str, "v\n")))))),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "H")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_bullet_heading,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "* = l1\n")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :List), :new,
                s(:sym, :BULLET),
                s(:splat,
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Heading), :new,
                        s(:int, 1),
                        s(:str, "l1")))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_bullet_indent,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "* l1\n"),
              s(:str, "  * l1.1\n"),
              s(:str, "* l2\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :List), :new,
                s(:sym, :BULLET),
                s(:splat,
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "l1")),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :List), :new,
                        s(:sym, :BULLET),
                        s(:splat,
                          s(:array,
                            s(:send,
                              s(:const,
                                s(:ivar, :@RM), :ListItem), :new,
                              s(:nil),
                              s(:send,
                                s(:const,
                                  s(:ivar, :@RM), :Paragraph), :new,
                                s(:str, "l1.1"))))))),
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "l2")))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_bullet_paragraph,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "now is\n"),
              s(:str, "* l1\n"),
              s(:str, "* l2\n"),
              s(:str, "the time\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "now is")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :List), :new,
                s(:sym, :BULLET),
                s(:splat,
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "l1"))),
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "l2")))))),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "the time")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_bullet_multiline,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "* l1\n"),
              s(:str, "  l1+\n"),
              s(:str, "* l2\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "l1 "),
                    s(:str, "l1+"))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "l2")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_bullet_multiparagraph,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "* l1\n"),
              s(:str, "\n"),
              s(:str, "  l1+\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :List), :new,
                s(:sym, :BULLET),
                s(:splat,
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "l1")),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :BlankLine), :new),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "l1+")))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_bullet_indent_verbatim,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "* l1\n"),
              s(:str, "  * l1.1\n"),
              s(:str, "    text\n"),
              s(:str, "      code\n"),
              s(:str, "        code\n"),
              s(:str, "\n"),
              s(:str, "    text\n"),
              s(:str, "* l2\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :list,
                s(:sym, :BULLET),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "l1")),
                  s(:send, nil, :list,
                    s(:sym, :BULLET),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "l1.1 "),
                        s(:str, "text")),
                      s(:send, nil, :verb,
                        s(:str, "code\n"),
                        s(:str, "  code\n")),
                      s(:send, nil, :para,
                        s(:str, "text"))))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "l2")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_dash,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "- one\n"),
              s(:str, "- two\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :List), :new,
                s(:sym, :BULLET),
                s(:splat,
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "one"))),
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "two")))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_heading,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "= heading one")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "heading one")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_heading_three,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "=== heading three")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 3),
                s(:str, "heading three")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_heading_bullet,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "= * heading one")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "* heading one")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_heading_empty,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "===\n"),
              s(:str, "* bullet\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 3),
                s(:str, "")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :List), :new,
                s(:sym, :BULLET),
                s(:splat,
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "bullet")))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_heading_heading,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "= =")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "=")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_heading_lalpha,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "= b. heading one")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "b. heading one")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_heading_label,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "= [heading one]")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "[heading one]")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_heading_note,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "= heading one::")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "heading one::")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_heading_number,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "= 5. heading one")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "5. heading one")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_heading_ualpha,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "= B. heading one")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 1),
                s(:str, "B. heading one")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_label,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "[one] item one\n"),
              s(:str, "[two] item two\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :list,
                s(:sym, :LABEL),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "one")),
                  s(:send, nil, :para,
                    s(:str, "item one"))),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "two")),
                  s(:send, nil, :para,
                    s(:str, "item two")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_label_bullet,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "[cat] l1\n"),
              s(:str, "      * l1.1\n"),
              s(:str, "[dog] l2\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :list,
                s(:sym, :LABEL),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "cat")),
                  s(:send, nil, :para,
                    s(:str, "l1")),
                  s(:send, nil, :list,
                    s(:sym, :BULLET),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "l1.1"))))),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "dog")),
                  s(:send, nil, :para,
                    s(:str, "l2")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_label_multi_label,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "[one]\n"),
              s(:str, "[two] some description\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :list,
                s(:sym, :LABEL),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "one"),
                    s(:str, "two")),
                  s(:send, nil, :para,
                    s(:str, "some description")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_label_multi_line,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "[cat] l1\n"),
              s(:str, "      continuation\n"),
              s(:str, "[dog] l2\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :list,
                s(:sym, :LABEL),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "cat")),
                  s(:send, nil, :para,
                    s(:str, "l1 "),
                    s(:str, "continuation"))),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "dog")),
                  s(:send, nil, :para,
                    s(:str, "l2")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_label_newline,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "[one]\n"),
              s(:str, "  item one\n"),
              s(:str, "[two]\n"),
              s(:str, "  item two\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :list,
                s(:sym, :LABEL),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "one")),
                  s(:send, nil, :para,
                    s(:str, "item one"))),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "two")),
                  s(:send, nil, :para,
                    s(:str, "item two")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_lalpha,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "a. l1\n"),
              s(:str, "b. l2\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :List), :new,
                s(:sym, :LALPHA),
                s(:splat,
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "l1"))),
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "l2")))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_lalpha_ualpha,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "a. l1\n"),
              s(:str, "b. l2\n"),
              s(:str, "A. l3\n"),
              s(:str, "A. l4\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :List), :new,
                s(:sym, :LALPHA),
                s(:splat,
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "l1"))),
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "l2")))))),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :List), :new,
                s(:sym, :UALPHA),
                s(:splat,
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "l3"))),
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "l4")))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_lalpha_utf_8,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "a. 新しい機能\n")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :List), :new,
                s(:sym, :LALPHA),
                s(:splat,
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "新しい機能")))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_line_break,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "now is\nthe time  \nfor all")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :para,
                s(:str, "now is "),
                s(:str, "the time")),
              s(:send, nil, :blank_line),
              s(:send, nil, :para,
                s(:str, "for all")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_list_list_1,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "10. para 1\n"),
              s(:str, "\n"),
              s(:str, "    [label 1]\n"),
              s(:str, "      para 1.1\n"),
              s(:str, "\n"),
              s(:str, "        code\n"),
              s(:str, "\n"),
              s(:str, "      para 1.2\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :list,
                s(:sym, :NUMBER),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "para 1")),
                  s(:send, nil, :blank_line),
                  s(:send, nil, :list,
                    s(:sym, :LABEL),
                    s(:send, nil, :item,
                      s(:array,
                        s(:str, "label 1")),
                      s(:send, nil, :para,
                        s(:str, "para 1.1")),
                      s(:send, nil, :blank_line),
                      s(:send, nil, :verb,
                        s(:str, "code\n")),
                      s(:send, nil, :para,
                        s(:str, "para 1.2")))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_list_list_2,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "6. para\n"),
              s(:str, "\n"),
              s(:str, "   label 1::  text 1\n"),
              s(:str, "   label 2::  text 2\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :list,
                s(:sym, :NUMBER),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "para")),
                  s(:send, nil, :blank_line),
                  s(:send, nil, :list,
                    s(:sym, :NOTE),
                    s(:send, nil, :item,
                      s(:array,
                        s(:str, "label 1")),
                      s(:send, nil, :para,
                        s(:str, "text 1"))),
                    s(:send, nil, :item,
                      s(:array,
                        s(:str, "label 2")),
                      s(:send, nil, :para,
                        s(:str, "text 2")))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_list_verbatim,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "* one\n"),
              s(:str, "    verb1\n"),
              s(:str, "    verb2\n"),
              s(:str, "* two\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :List), :new,
                s(:sym, :BULLET),
                s(:splat,
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "one")),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Verbatim), :new,
                        s(:str, "verb1\n"),
                        s(:str, "verb2\n"))),
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "two")))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_lists,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "now is\n"),
              s(:str, "* l1\n"),
              s(:str, "1. n1\n"),
              s(:str, "2. n2\n"),
              s(:str, "* l2\n"),
              s(:str, "the time\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "now is")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :List), :new,
                s(:sym, :BULLET),
                s(:splat,
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "l1")))))),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :List), :new,
                s(:sym, :NUMBER),
                s(:splat,
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "n1"))),
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "n2")))))),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :List), :new,
                s(:sym, :BULLET),
                s(:splat,
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "l2")))))),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "the time")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_note,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "one:: item one\n"),
              s(:str, "two:: item two\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "one")),
                  s(:send, nil, :para,
                    s(:str, "item one"))),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "two")),
                  s(:send, nil, :para,
                    s(:str, "item two")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_note_empty,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "one::\n"),
              s(:str, "two::\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "one"),
                    s(:str, "two")),
                  s(:send, nil, :blank_line))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_note_note,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "one:: two::\n")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :list,
                s(:sym, :NOTE),
                s(:send, nil, :item,
                  s(:array,
                    s(:str, "one")),
                  s(:send, nil, :list,
                    s(:sym, :NOTE),
                    s(:send, nil, :item,
                      s(:array,
                        s(:str, "two")),
                      s(:send, nil, :blank_line))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_number_bullet,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "1. l1\n"),
              s(:str, "   * l1.1\n"),
              s(:str, "2. l2\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :list,
                s(:sym, :NUMBER),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "l1")),
                  s(:send, nil, :list,
                    s(:sym, :BULLET),
                    s(:send, nil, :item,
                      s(:nil),
                      s(:send, nil, :para,
                        s(:str, "l1.1"))))),
                s(:send, nil, :item,
                  s(:nil),
                  s(:send, nil, :para,
                    s(:str, "l2")))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_paragraph,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "now is the time\n"),
              s(:str, "\n"),
              s(:str, "for all good men\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "now is the time")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "for all good men")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_paragraph_multiline,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "now is the time\nfor all good men")),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Paragraph), :new,
              s(:str, "now is the time "),
              s(:str, "for all good men"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :expected)),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_paragraph_verbatim,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "now is the time\n"),
              s(:str, "  code _line_ here\n"),
              s(:str, "for all good men\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "now is the time")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "code _line_ here\n")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "for all good men")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_rule,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "now is the time\n"),
              s(:str, "\n"),
              s(:str, "---\n"),
              s(:str, "\n"),
              s(:str, "for all good men\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "now is the time")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Rule), :new,
                s(:int, 1)),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "for all good men")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_ualpha,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "A. l1\n"),
              s(:str, "B. l2\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :List), :new,
                s(:sym, :UALPHA),
                s(:splat,
                  s(:array,
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "l1"))),
                    s(:send,
                      s(:const,
                        s(:ivar, :@RM), :ListItem), :new,
                      s(:nil),
                      s(:send,
                        s(:const,
                          s(:ivar, :@RM), :Paragraph), :new,
                        s(:str, "l2")))))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_trailing_cr,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "Text")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:str, "Text\r")), :parts)))),
      s(:def, :test_parse_verbatim,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "now is\n"),
              s(:str, "   code\n"),
              s(:str, "the time\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "now is")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "code\n")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "the time")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_verbatim_bullet,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "  * blah\n")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "* blah\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_verbatim_dash,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "  - blah\n")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "- blah\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_verbatim_fold,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "now is\n"),
              s(:str, "   code\n"),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "   code1\n"),
              s(:str, "\n"),
              s(:str, "the time\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "now is")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "code\n"),
                s(:str, "\n"),
                s(:str, "code1\n")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "the time")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_verbatim_heading,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "text\n"),
              s(:str, "   ===   heading three\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "text")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "===   heading three\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_verbatim_heading2,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "text\n   code\n=== heading three")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "text")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "code\n")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Heading), :new,
                s(:int, 3),
                s(:str, "heading three")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_verbatim_label,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "  [blah] blah\n")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "[blah] blah\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_verbatim_lalpha,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "  b. blah\n")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "b. blah\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_verbatim_markup_example,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "text\n"),
              s(:str, "   code\n"),
              s(:str, "   === heading three\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "text")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "code\n"),
                s(:str, "=== heading three\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_verbatim_merge,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "now is\n"),
              s(:str, "   code\n"),
              s(:str, "\n"),
              s(:str, "   code1\n"),
              s(:str, "the time\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "now is")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "code\n"),
                s(:str, "\n"),
                s(:str, "code1\n")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "the time")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_verbatim_merge2,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "now is\n"),
              s(:str, "   code\n"),
              s(:str, "\n"),
              s(:str, "   code1\n"),
              s(:str, "\n"),
              s(:str, "   code2\n"),
              s(:str, "the time\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "now is")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "code\n"),
                s(:str, "\n"),
                s(:str, "code1\n"),
                s(:str, "\n"),
                s(:str, "code2\n")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "the time")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_verbatim_multiline,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "now is\n"),
              s(:str, "   code\n"),
              s(:str, "   code1\n"),
              s(:str, "the time\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "now is")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "code\n"),
                s(:str, "code1\n")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "the time")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_verbatim_multilevel,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "now is the time\n"),
              s(:str, "  code\n"),
              s(:str, " more code\n"),
              s(:str, "for all good men\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "now is the time")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, " code\n"),
                s(:str, "more code\n")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "for all good men")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_verbatim_note,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "  blah:: blah\n")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "blah:: blah\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_verbatim_number,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "  2. blah\n")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "2. blah\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_verbatim_rule,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "text\n"),
              s(:str, "\n"),
              s(:str, "  --- lib/blah.rb.orig\n"),
              s(:str, "  +++ lib/blah.rb\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "text")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "--- lib/blah.rb.orig\n"),
                s(:str, "+++ lib/blah.rb\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_verbatim_rule2,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:send,
              s(:dstr,
                s(:str, "text\n"),
                s(:str, "\n"),
                s(:str, "  ---\n")), :chomp)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "text")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :BlankLine), :new),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "---")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_verbatim_trim,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "now is\n"),
              s(:str, "   code\n"),
              s(:str, "\n"),
              s(:str, "   code1\n"),
              s(:str, "\n"),
              s(:str, "the time\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "now is")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "code\n"),
                s(:str, "\n"),
                s(:str, "code1\n")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "the time")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_verbatim_ualpha,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "  B. blah\n")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "B. blah\n")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:lvar, :str)), :parts)))),
      s(:def, :test_parse_whitespace,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "hello")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:str, "hello")), :parts)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "hello ")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:str, "  hello ")), :parts)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "hello          ")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:str, "                 hello          ")), :parts)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "1")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "2\n"),
                s(:str, " 3")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:str, "1\n 2\n  3")), :parts)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "1\n"),
                s(:str, " 2\n"),
                s(:str, "  3")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:str, "  1\n   2\n    3")), :parts)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "1")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "2\n"),
                s(:str, " 3\n")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "1")),
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "2")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:str, "1\n 2\n  3\n1\n 2")), :parts)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "1\n"),
                s(:str, " 2\n"),
                s(:str, "  3\n"),
                s(:str, "1\n"),
                s(:str, " 2")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:str, "  1\n   2\n    3\n  1\n   2")), :parts)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Verbatim), :new,
                s(:str, "1\n"),
                s(:str, " 2\n"),
                s(:str, "\n"),
                s(:str, "  3")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@RMP), :parse,
                s(:str, "  1\n   2\n\n    3")), :parts)))),
      s(:def, :test_peek_token,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :HEADER),
              s(:int, 1),
              s(:int, 0),
              s(:int, 0)),
            s(:send,
              s(:lvar, :parser), :peek_token)),
          s(:send, nil, :assert_equal,
            s(:int, 8),
            s(:send,
              s(:send,
                s(:lvar, :parser), :tokens), :length)))),
      s(:def, :test_skip,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :HEADER),
              s(:int, 1),
              s(:int, 0),
              s(:int, 0)),
            s(:send,
              s(:lvar, :parser), :skip,
              s(:sym, :HEADER))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :TEXT),
              s(:str, "Heading"),
              s(:int, 2),
              s(:int, 0)),
            s(:send,
              s(:lvar, :parser), :get)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :NEWLINE),
              s(:str, "\n"),
              s(:int, 9),
              s(:int, 0)),
            s(:send,
              s(:lvar, :parser), :peek_token)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Parser), :ParseError)),
            s(:args),
            s(:send,
              s(:lvar, :parser), :skip,
              s(:sym, :NONE))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :NEWLINE),
              s(:str, "\n"),
              s(:int, 9),
              s(:int, 0)),
            s(:send,
              s(:lvar, :parser), :peek_token)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :parser), :skip,
              s(:sym, :NONE),
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :NEWLINE),
              s(:str, "\n"),
              s(:int, 9),
              s(:int, 0)),
            s(:send,
              s(:lvar, :parser), :peek_token)))),
      s(:def, :test_tokenize_bullet,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "* l1\n")),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :BULLET),
                s(:str, "*"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l1"),
                s(:int, 2),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 4),
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_bullet_indent,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "* l1\n"),
              s(:str, "  * l1.1\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :BULLET),
                s(:str, "*"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l1"),
                s(:int, 2),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 4),
                s(:int, 0)),
              s(:array,
                s(:sym, :BULLET),
                s(:str, "*"),
                s(:int, 2),
                s(:int, 1)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l1.1"),
                s(:int, 4),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 8),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_heading,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "= Heading\n"),
              s(:str, "== Heading 2\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :HEADER),
                s(:int, 1),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "Heading"),
                s(:int, 2),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 9),
                s(:int, 0)),
              s(:array,
                s(:sym, :HEADER),
                s(:int, 2),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "Heading 2"),
                s(:int, 3),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 12),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_heading_empty,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "===\n"),
              s(:str, "* bullet\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :HEADER),
                s(:int, 3),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 3),
                s(:int, 0)),
              s(:array,
                s(:sym, :BULLET),
                s(:str, "*"),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "bullet"),
                s(:int, 2),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 8),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_heading_heading,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "= =\n")),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :HEADER),
                s(:int, 1),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "="),
                s(:int, 2),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 3),
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_heading_no_space,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "=Heading\n"),
              s(:str, "==Heading 2\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :HEADER),
                s(:int, 1),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "Heading"),
                s(:int, 1),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 8),
                s(:int, 0)),
              s(:array,
                s(:sym, :HEADER),
                s(:int, 2),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "Heading 2"),
                s(:int, 2),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 11),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_label,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "[cat] l1\n"),
              s(:str, "[dog] l1.1\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :LABEL),
                s(:str, "cat"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l1"),
                s(:int, 6),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 8),
                s(:int, 0)),
              s(:array,
                s(:sym, :LABEL),
                s(:str, "dog"),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l1.1"),
                s(:int, 6),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 10),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_label_note,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "[label]\n"),
              s(:str, "  note::\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :LABEL),
                s(:str, "label"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 7),
                s(:int, 0)),
              s(:array,
                s(:sym, :NOTE),
                s(:str, "note"),
                s(:int, 2),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 8),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_label_newline,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "[cat]\n"),
              s(:str, "  l1\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :LABEL),
                s(:str, "cat"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 5),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l1"),
                s(:int, 2),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 4),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_label_newline_windows,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "[cat]\r\n"),
              s(:str, "  l1\r\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :LABEL),
                s(:str, "cat"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 6),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l1"),
                s(:int, 2),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 5),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_lalpha,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "a. l1\n"),
              s(:str, "b. l1.1\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :LALPHA),
                s(:str, "a"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l1"),
                s(:int, 3),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 5),
                s(:int, 0)),
              s(:array,
                s(:sym, :LALPHA),
                s(:str, "b"),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l1.1"),
                s(:int, 3),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 7),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_line_break,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "now is\nthe time  \nfor all\n")),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :TEXT),
                s(:str, "now is"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 6),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "the time"),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :BREAK),
                s(:str, "  "),
                s(:int, 8),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 10),
                s(:int, 1)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "for all"),
                s(:int, 0),
                s(:int, 2)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 7),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_line_break_long,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "now is\nthe time   \nfor all\n")),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :TEXT),
                s(:str, "now is"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 6),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "the time "),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :BREAK),
                s(:str, "  "),
                s(:int, 9),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 11),
                s(:int, 1)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "for all"),
                s(:int, 0),
                s(:int, 2)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 7),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_line_break_no_short,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "now is\nthe time \nfor all\n")),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :TEXT),
                s(:str, "now is"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 6),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "the time "),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 9),
                s(:int, 1)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "for all"),
                s(:int, 0),
                s(:int, 2)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 7),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_note,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "cat:: l1\n"),
              s(:str, "dog:: l1.1\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :NOTE),
                s(:str, "cat"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l1"),
                s(:int, 6),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 8),
                s(:int, 0)),
              s(:array,
                s(:sym, :NOTE),
                s(:str, "dog"),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l1.1"),
                s(:int, 6),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 10),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_note_empty,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "cat::\n"),
              s(:str, "dog::\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :NOTE),
                s(:str, "cat"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 5),
                s(:int, 0)),
              s(:array,
                s(:sym, :NOTE),
                s(:str, "dog"),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 5),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_note_newline,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "cat::\n"),
              s(:str, "  l1\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :NOTE),
                s(:str, "cat"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 5),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l1"),
                s(:int, 2),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 4),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_note_utf_8,
        s(:args),
        s(:begin,
          s(:if,
            s(:ivar, :@have_encoding), nil,
            s(:send, nil, :skip,
              s(:str, "Encoding not implemented"))),
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "cät:: l1a\n"),
              s(:str, "      l1b\n"),
              s(:str, "døg:: l2a\n"),
              s(:str, "      l2b\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :NOTE),
                s(:str, "cät"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l1a"),
                s(:int, 6),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 9),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l1b"),
                s(:int, 6),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 9),
                s(:int, 1)),
              s(:array,
                s(:sym, :NOTE),
                s(:str, "døg"),
                s(:int, 0),
                s(:int, 2)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l2a"),
                s(:int, 6),
                s(:int, 2)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 9),
                s(:int, 2)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l2b"),
                s(:int, 6),
                s(:int, 3)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 9),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_note_newline_windows,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "cat::\r\n"),
              s(:str, "  l1\r\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :NOTE),
                s(:str, "cat"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 6),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l1"),
                s(:int, 2),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 5),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_note_not,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "Cat::Dog\n")),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :TEXT),
                s(:str, "Cat::Dog"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 8),
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_number,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "1. l1\n"),
              s(:str, "2. l1.1\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :NUMBER),
                s(:str, "1"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l1"),
                s(:int, 3),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 5),
                s(:int, 0)),
              s(:array,
                s(:sym, :NUMBER),
                s(:str, "2"),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l1.1"),
                s(:int, 3),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 7),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_number_period,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "1. blah blah blah\n"),
              s(:str, "   l.\n"),
              s(:str, "2. blah blah blah blah\n"),
              s(:str, "   d.\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :NUMBER),
                s(:str, "1"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "blah blah blah"),
                s(:int, 3),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 17),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l."),
                s(:int, 3),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 5),
                s(:int, 1)),
              s(:array,
                s(:sym, :NUMBER),
                s(:str, "2"),
                s(:int, 0),
                s(:int, 2)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "blah blah blah blah"),
                s(:int, 3),
                s(:int, 2)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 22),
                s(:int, 2)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "d."),
                s(:int, 3),
                s(:int, 3)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 5),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_number_period_continue,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "1. blah blah blah\n"),
              s(:str, "   l.  more stuff\n"),
              s(:str, "2. blah blah blah blah\n"),
              s(:str, "   d. other stuff\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :NUMBER),
                s(:str, "1"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "blah blah blah"),
                s(:int, 3),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 17),
                s(:int, 0)),
              s(:array,
                s(:sym, :LALPHA),
                s(:str, "l"),
                s(:int, 3),
                s(:int, 1)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "more stuff"),
                s(:int, 7),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 17),
                s(:int, 1)),
              s(:array,
                s(:sym, :NUMBER),
                s(:str, "2"),
                s(:int, 0),
                s(:int, 2)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "blah blah blah blah"),
                s(:int, 3),
                s(:int, 2)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 22),
                s(:int, 2)),
              s(:array,
                s(:sym, :LALPHA),
                s(:str, "d"),
                s(:int, 3),
                s(:int, 3)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "other stuff"),
                s(:int, 6),
                s(:int, 3)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 17),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_paragraphs,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "now is\n"),
              s(:str, "the time\n"),
              s(:str, "\n"),
              s(:str, "for all\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :TEXT),
                s(:str, "now is"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 6),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "the time"),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 8),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 0),
                s(:int, 2)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "for all"),
                s(:int, 0),
                s(:int, 3)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 7),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_rule,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "---\n"),
              s(:str, "\n"),
              s(:str, "--- blah ---\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :RULE),
                s(:int, 1),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 3),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "--- blah ---"),
                s(:int, 0),
                s(:int, 2)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 12),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_rule_windows,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "---\r\n"),
              s(:str, "\n"),
              s(:str, "--- blah ---\r\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :RULE),
                s(:int, 1),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 4),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "--- blah ---"),
                s(:int, 0),
                s(:int, 2)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 13),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_ualpha,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "A. l1\n"),
              s(:str, "B. l1.1\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :UALPHA),
                s(:str, "A"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l1"),
                s(:int, 3),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 5),
                s(:int, 0)),
              s(:array,
                s(:sym, :UALPHA),
                s(:str, "B"),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "l1.1"),
                s(:int, 3),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 7),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_verbatim_heading,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "Example heading:\n"),
              s(:str, "\n"),
              s(:str, "   === heading three\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :TEXT),
                s(:str, "Example heading:"),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 16),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 0),
                s(:int, 1)),
              s(:array,
                s(:sym, :HEADER),
                s(:int, 3),
                s(:int, 3),
                s(:int, 2)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "heading three"),
                s(:int, 7),
                s(:int, 2)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 20),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_verbatim_rule,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "  Verbatim section here that is double-underlined\n"),
              s(:str, "  ===============================================\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :TEXT),
                s(:str, "Verbatim section here that is double-underlined"),
                s(:int, 2),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 49),
                s(:int, 0)),
              s(:array,
                s(:sym, :HEADER),
                s(:int, 47),
                s(:int, 2),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 49),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_tokenize_verbatim_rule_fancy,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "  A\n"),
              s(:str, "    b\n"),
              s(:str, "  ===============================================\n"),
              s(:str, "    c\n"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:sym, :TEXT),
                s(:str, "A"),
                s(:int, 2),
                s(:int, 0)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 3),
                s(:int, 0)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "b"),
                s(:int, 4),
                s(:int, 1)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 5),
                s(:int, 1)),
              s(:array,
                s(:sym, :HEADER),
                s(:int, 47),
                s(:int, 2),
                s(:int, 2)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 49),
                s(:int, 2)),
              s(:array,
                s(:sym, :TEXT),
                s(:str, "c"),
                s(:int, 4),
                s(:int, 3)),
              s(:array,
                s(:sym, :NEWLINE),
                s(:str, "\n"),
                s(:int, 5),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@RMP), :tokenize,
              s(:lvar, :str))))),
      s(:def, :test_token_pos,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send,
              s(:ivar, :@RMP), :new)),
          s(:lvasgn, :s,
            s(:send,
              s(:lvar, :parser), :setup_scanner,
              s(:str, "cät"))),
          s(:send,
            s(:lvar, :s), :scan,
            s(:regexp,
              s(:str, "\\S+"),
              s(:regopt))),
          s(:if,
            s(:or,
              s(:ivar, :@have_encoding),
              s(:ivar, :@have_byteslice)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 3),
                s(:int, 0)),
              s(:send,
                s(:lvar, :parser), :token_pos,
                s(:send,
                  s(:lvar, :s), :pos))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 4),
                s(:int, 0)),
              s(:send,
                s(:lvar, :parser), :token_pos,
                s(:send,
                  s(:lvar, :s), :pos)))))),
      s(:def, :test_verbatim_normalize,
        s(:args),
        s(:begin,
          s(:lvasgn, :v,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Verbatim), :new,
              s(:str, "foo\n"),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "bar\n"))),
          s(:send,
            s(:lvar, :v), :normalize),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "foo\n"),
              s(:str, "\n"),
              s(:str, "bar\n")),
            s(:send,
              s(:lvar, :v), :parts)),
          s(:lvasgn, :v,
            s(:send,
              s(:const,
                s(:ivar, :@RM), :Verbatim), :new,
              s(:str, "foo\n"),
              s(:str, "\n"))),
          s(:send,
            s(:lvar, :v), :normalize),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "foo\n")),
            s(:send,
              s(:lvar, :v), :parts)))),
      s(:def, :test_unget,
        s(:args),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :util_parser)),
          s(:send,
            s(:lvar, :parser), :get),
          s(:send,
            s(:lvar, :parser), :unget),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :HEADER),
              s(:int, 1),
              s(:int, 0),
              s(:int, 0)),
            s(:send,
              s(:lvar, :parser), :peek_token)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:ivar, :@RMP), :Error)),
            s(:args),
            s(:send,
              s(:lvar, :parser), :unget)),
          s(:send, nil, :assert_equal,
            s(:int, 8),
            s(:send,
              s(:send,
                s(:lvar, :parser), :tokens), :length)))),
      s(:def, :util_parser,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:dstr,
              s(:str, "= Heading\n"),
              s(:str, "\n"),
              s(:str, "Some text here\n"),
              s(:str, "some more text over here\n"))),
          s(:ivasgn, :@parser,
            s(:send,
              s(:ivar, :@RMP), :new)),
          s(:send,
            s(:ivar, :@parser), :tokenize,
            s(:lvar, :str)),
          s(:ivar, :@parser))))))
