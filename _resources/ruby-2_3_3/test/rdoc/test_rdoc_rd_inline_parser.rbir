s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocRdInlineParser),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@block_parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RD), :BlockParser), :new)),
          s(:send,
            s(:ivar, :@block_parser), :instance_variable_set,
            s(:sym, :@i),
            s(:int, 0)),
          s(:ivasgn, :@inline_parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RD), :InlineParser), :new,
              s(:ivar, :@block_parser))))),
      s(:def, :test_parse,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "regular <em>emphasis</em>"),
          s(:send, nil, :parse,
            s(:str, "regular ((*emphasis*))")))),
      s(:def, :test_parse_code,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<code>text</code>"),
          s(:send, nil, :parse,
            s(:str, "(({text}))")))),
      s(:def, :test_parse_em,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<em>text</em>"),
          s(:send, nil, :parse,
            s(:str, "((*text*))")))),
      s(:def, :test_parse_footnote,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "{*1}[rdoc-label:foottext-1:footmark-1]"),
            s(:send, nil, :parse,
              s(:str, "((-text-))"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const,
                  s(:ivar, :@RM), :Paragraph), :new,
                s(:str, "{^1}[rdoc-label:footmark-1:foottext-1]"),
                s(:str, " "),
                s(:str, "text")),
              s(:send, nil, :blank_line))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@block_parser), :footnotes)))),
      s(:def, :test_parse_index,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "<span id=\"label-text\">text</span>"),
            s(:send, nil, :parse,
              s(:str, "((:text:))"))),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:ivar, :@block_parser), :labels),
            s(:str, "text")))),
      s(:def, :test_parse_kbd,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<tt>text</tt>"),
          s(:send, nil, :parse,
            s(:str, "((%text%))")))),
      s(:def, :test_parse_multiple,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<em>one</em> <em>two</em>"),
          s(:send, nil, :parse,
            s(:str, "((*one*)) ((*two*))")))),
      s(:def, :test_parse_newline,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "one\ntwo"),
          s(:send, nil, :parse,
            s(:str, "one\ntwo")))),
      s(:def, :test_parse_quote,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "one \" two"),
          s(:send, nil, :parse,
            s(:str, "one \" two")))),
      s(:def, :test_parse_ref,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "{text}[rdoc-label:text]"),
          s(:send, nil, :parse,
            s(:str, "((<text>))")))),
      s(:def, :test_parse_ref_em,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "{<em>text</em>}[rdoc-label:text]"),
          s(:send, nil, :parse,
            s(:str, "((<((*text*))>))")))),
      s(:def, :test_parse_ref_filename_quote,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "{RD/foo}[rdoc-label:RD/foo]"),
          s(:send, nil, :parse,
            s(:str, "((<RD/\"foo\">))")))),
      s(:def, :test_parse_ref_filename,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "{RD}[rdoc-label:RD/]"),
          s(:send, nil, :parse,
            s(:str, "((<RD/>))")))),
      s(:def, :test_parse_ref_quote,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "{text \\\"}[rdoc-label:text \\\"]"),
          s(:send, nil, :parse,
            s(:str, "((<text \\\">))")))),
      s(:def, :test_parse_ref_quote_content,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "{<em>text</em>}[rdoc-label:text]"),
          s(:send, nil, :parse,
            s(:str, "((<\"((*text*))\">))")))),
      s(:def, :test_parse_ref_quote_content_multi,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "{<em>one</em> <em>two</em>}[rdoc-label:one two]"),
          s(:send, nil, :parse,
            s(:str, "((<\"((*one*)) ((*two*))\">))")))),
      s(:def, :test_parse_ref_substitute,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "{text}[rdoc-label:thing]"),
          s(:send, nil, :parse,
            s(:str, "((<text|thing>))")))),
      s(:def, :test_parse_ref_substitute_element_quote,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "{text}[rdoc-label:\"RD\"]"),
          s(:send, nil, :parse,
            s(:str, "((<text|\"RD\">))")))),
      s(:def, :test_parse_ref_substitute_filename,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "{text}[rdoc-label:RD/]"),
          s(:send, nil, :parse,
            s(:str, "((<text|RD/>))")))),
      s(:def, :test_parse_ref_substitute_filename_label,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "{text}[rdoc-label:RD/label]"),
          s(:send, nil, :parse,
            s(:str, "((<text|RD/label>))")))),
      s(:def, :test_parse_ref_substitute_filename_quote,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "{text}[rdoc-label:\"RD\"/]"),
          s(:send, nil, :parse,
            s(:str, "((<text|\"RD\"/>))")))),
      s(:def, :test_parse_ref_substitute_multi_content,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "{<em>one</em> two}[rdoc-label:thing]"),
          s(:send, nil, :parse,
            s(:str, "((<((*one*)) two|thing>))")))),
      s(:def, :test_parse_ref_substitute_multi_content2,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "{<em>one</em> \\\" two}[rdoc-label:thing]"),
          s(:send, nil, :parse,
            s(:str, "((<((*one*)) \\\" two|thing>))")))),
      s(:def, :test_parse_ref_substitute_multi_content3,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "{<em>one</em> \\\" <em>two</em>}[rdoc-label:thing]"),
          s(:send, nil, :parse,
            s(:str, "((<((*one*)) \\\" ((*two*))|thing>))")))),
      s(:def, :test_parse_ref_substitute_quote,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "{one | two}[rdoc-label:thing]"),
          s(:send, nil, :parse,
            s(:str, "((<\"one | two\"|thing>))")))),
      s(:def, :test_parse_ref_substitute_quote_content,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "{<em>text</em>}[rdoc-label:thing]"),
          s(:send, nil, :parse,
            s(:str, "((<\"((*text*))\"|thing>))")))),
      s(:def, :test_parse_ref_substitute_url,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "{text}[http://example]"),
          s(:send, nil, :parse,
            s(:str, "((<text|URL:http://example>))")))),
      s(:def, :test_parse_ref_url,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "{http://example}[http://example]"),
          s(:send, nil, :parse,
            s(:str, "((<URL:http://example>))")))),
      s(:def, :test_parse_var,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "+text+"),
          s(:send, nil, :parse,
            s(:str, "((|text|))")))),
      s(:def, :test_parse_verb,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<tt>text</tt>"),
          s(:send, nil, :parse,
            s(:str, "(('text'))")))),
      s(:def, :test_parse_verb_backslash,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<tt>(('text'))</tt>"),
          s(:send, nil, :parse,
            s(:str, "(('(('text\\'))'))")))),
      s(:def, :test_parse_verb_backslash_backslash,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<tt>text \\</tt>"),
          s(:send, nil, :parse,
            s(:str, "(('text \\\\'))")))),
      s(:def, :test_parse_verb_backslash_quote,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<tt>text \"</tt>"),
          s(:send, nil, :parse,
            s(:str, "(('text \\\"'))")))),
      s(:def, :test_parse_verb_emphasis,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<tt>((*emphasis*))</tt>"),
          s(:send, nil, :parse,
            s(:str, "(('((*emphasis*))'))")))),
      s(:def, :test_parse_verb_multiple,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "<tt>((*text*))</tt>"),
          s(:send, nil, :parse,
            s(:str, "(('((*text*))'))")))),
      s(:def, :parse,
        s(:args,
          s(:arg, :text)),
        s(:send,
          s(:ivar, :@inline_parser), :parse,
          s(:lvar, :text))))))
