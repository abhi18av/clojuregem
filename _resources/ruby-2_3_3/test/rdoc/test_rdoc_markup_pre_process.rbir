s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc/test_case")),
  s(:class,
    s(:const, nil, :TestRDocMarkupPreProcess),
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@tempfile,
            s(:send,
              s(:const, nil, :Tempfile), :new,
              s(:str, "test_rdoc_markup_pre_process"))),
          s(:ivasgn, :@file_name,
            s(:send,
              s(:const, nil, :File), :basename,
              s(:send,
                s(:ivar, :@tempfile), :path))),
          s(:ivasgn, :@dir,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:send,
                s(:ivar, :@tempfile), :path))),
          s(:ivasgn, :@pp,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :PreProcess), :new,
              s(:send,
                s(:ivar, :@tempfile), :path),
              s(:array,
                s(:ivar, :@dir),
                s(:send,
                  s(:const, nil, :File), :dirname,
                  s(:str, "(string)"))))))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:send,
            s(:ivar, :@tempfile), :close!))),
      s(:def, :test_class_register,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :PreProcess), :register,
              s(:str, "for_test")),
            s(:args),
            s(:send, nil, :raise,
              s(:str, "fail"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "for_test")),
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :PreProcess), :registered), :keys)))),
      s(:def, :test_class_post_process,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :PreProcess), :post_process),
            s(:args), nil),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :PreProcess), :post_processors), :length)))),
      s(:def, :test_include_file,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@tempfile), :write,
            s(:dstr,
              s(:str, "# -*- mode: rdoc; coding: utf-8; fill-column: 74; -*-\n"),
              s(:str, "\n"),
              s(:str, "Regular expressions (<i>regexp</i>s) are patterns which describe the\n"),
              s(:str, "contents of a string.\n"))),
          s(:send,
            s(:ivar, :@tempfile), :flush),
          s(:send,
            s(:ivar, :@tempfile), :rewind),
          s(:lvasgn, :content,
            s(:send,
              s(:ivar, :@pp), :include_file,
              s(:ivar, :@file_name),
              s(:str, ""),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "Regular expressions (<i>regexp</i>s) are patterns which describe the\n"),
              s(:str, "contents of a string.\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :content)))),
      s(:def, :test_include_file_encoding_incompatible,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)), nil,
            s(:send, nil, :skip,
              s(:str, "Encoding not implemented"))),
          s(:send,
            s(:ivar, :@tempfile), :write,
            s(:dstr,
              s(:str, "# -*- mode: rdoc; coding: utf-8; fill-column: 74; -*-\n"),
              s(:str, "\n"),
              s(:str, "Ï€\n"))),
          s(:send,
            s(:ivar, :@tempfile), :flush),
          s(:send,
            s(:ivar, :@tempfile), :rewind),
          s(:lvasgn, :content,
            s(:send,
              s(:ivar, :@pp), :include_file,
              s(:ivar, :@file_name),
              s(:str, ""),
              s(:const,
                s(:const, nil, :Encoding), :US_ASCII))),
          s(:lvasgn, :expected,
            s(:str, "?\n")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :content)))),
      s(:def, :test_include_file_in_other_directory,
        s(:args),
        s(:begin,
          s(:lvasgn, :content,
            s(:nil)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :out),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:lvasgn, :content,
                s(:send,
                  s(:ivar, :@pp), :include_file,
                  s(:str, "test.txt"),
                  s(:str, ""),
                  s(:nil))))),
          s(:send, nil, :assert_empty,
            s(:lvar, :out)),
          s(:send, nil, :assert_empty,
            s(:lvar, :err)),
          s(:send, nil, :assert_equal,
            s(:str, "test file\n"),
            s(:lvar, :content)))),
      s(:def, :test_handle,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:str, "# :main: M\n")),
          s(:lvasgn, :out,
            s(:send,
              s(:ivar, :@pp), :handle,
              s(:lvar, :text))),
          s(:send, nil, :assert_same,
            s(:lvar, :out),
            s(:lvar, :text)),
          s(:send, nil, :assert_equal,
            s(:str, "#\n"),
            s(:lvar, :text)))),
      s(:def, :test_handle_comment,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:str, "# :main: M\n")),
          s(:lvasgn, :c,
            s(:send, nil, :comment,
              s(:lvar, :text))),
          s(:lvasgn, :out,
            s(:send,
              s(:ivar, :@pp), :handle,
              s(:lvar, :c))),
          s(:send, nil, :assert_same,
            s(:lvar, :out),
            s(:lvar, :text)),
          s(:send, nil, :assert_equal,
            s(:str, "#\n"),
            s(:lvar, :text)))),
      s(:def, :test_handle_markup,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :comment,
              s(:str, ":markup: rd"))),
          s(:send,
            s(:ivar, :@pp), :handle,
            s(:lvar, :c)),
          s(:send, nil, :assert_equal,
            s(:str, "rd"),
            s(:send,
              s(:lvar, :c), :format)))),
      s(:def, :test_handle_markup_empty,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :comment,
              s(:str, ":markup:"))),
          s(:send,
            s(:ivar, :@pp), :handle,
            s(:lvar, :c)),
          s(:send, nil, :assert_equal,
            s(:str, "rdoc"),
            s(:send,
              s(:lvar, :c), :format)))),
      s(:def, :test_handle_post_process,
        s(:args),
        s(:begin,
          s(:lvasgn, :cd,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CodeObject), :new)),
          s(:block,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :PreProcess), :post_process),
            s(:args,
              s(:arg, :text),
              s(:arg, :code_object)),
            s(:begin,
              s(:send,
                s(:send,
                  s(:lvar, :code_object), :metadata), :[]=,
                s(:sym, :stuff),
                s(:lvar, :text)),
              s(:sym, :junk))),
          s(:lvasgn, :text,
            s(:str, "# a b c\n")),
          s(:lvasgn, :out,
            s(:send,
              s(:ivar, :@pp), :handle,
              s(:lvar, :text),
              s(:lvar, :cd))),
          s(:send, nil, :assert_same,
            s(:lvar, :out),
            s(:lvar, :text)),
          s(:send, nil, :assert_equal,
            s(:str, "# a b c\n"),
            s(:lvar, :text)),
          s(:send, nil, :assert_equal,
            s(:str, "# a b c\n"),
            s(:send,
              s(:send,
                s(:lvar, :cd), :metadata), :[],
              s(:sym, :stuff))))),
      s(:def, :test_handle_unregistered,
        s(:args),
        s(:begin,
          s(:lvasgn, :text,
            s(:str, "# :x: y\n")),
          s(:lvasgn, :out,
            s(:send,
              s(:ivar, :@pp), :handle,
              s(:lvar, :text))),
          s(:send, nil, :assert_same,
            s(:lvar, :out),
            s(:lvar, :text)),
          s(:send, nil, :assert_equal,
            s(:str, "# :x: y\n"),
            s(:lvar, :text)))),
      s(:def, :test_handle_directive_blankline,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@pp), :handle_directive,
              s(:str, "#"),
              s(:str, "arg"),
              s(:str, "a, b"))),
          s(:send, nil, :assert_equal,
            s(:str, "#:arg: a, b\n"),
            s(:lvar, :result)))),
      s(:def, :test_handle_directive_downcase,
        s(:args),
        s(:begin,
          s(:lvasgn, :method,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "ARG"),
            s(:str, "a, b"),
            s(:lvar, :method)),
          s(:send, nil, :assert_equal,
            s(:str, "a, b"),
            s(:send,
              s(:lvar, :method), :params)))),
      s(:def, :test_handle_directive_arg,
        s(:args),
        s(:begin,
          s(:lvasgn, :method,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "arg"),
            s(:str, "a, b"),
            s(:lvar, :method)),
          s(:send, nil, :assert_equal,
            s(:str, "a, b"),
            s(:send,
              s(:lvar, :method), :params)))),
      s(:def, :test_handle_directive_arg_no_context,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@pp), :handle_directive,
              s(:str, ""),
              s(:str, "arg"),
              s(:str, "a, b"),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:str, ":arg: a, b\n"),
            s(:lvar, :result)))),
      s(:def, :test_handle_directive_args,
        s(:args),
        s(:begin,
          s(:lvasgn, :method,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "args"),
            s(:str, "a, b"),
            s(:lvar, :method)),
          s(:send, nil, :assert_equal,
            s(:str, "a, b"),
            s(:send,
              s(:lvar, :method), :params)))),
      s(:def, :test_handle_directive_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:block,
              s(:send,
                s(:ivar, :@pp), :handle_directive,
                s(:str, ""),
                s(:str, "x"),
                s(:str, "y")),
              s(:args,
                s(:arg, :directive),
                s(:arg, :param)),
              s(:str, ""))),
          s(:send, nil, :assert_empty,
            s(:lvar, :result)))),
      s(:def, :test_handle_directive_block_false,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:block,
              s(:send,
                s(:ivar, :@pp), :handle_directive,
                s(:str, ""),
                s(:str, "x"),
                s(:str, "y")),
              s(:args,
                s(:arg, :directive),
                s(:arg, :param)),
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:str, ":x: y\n"),
            s(:lvar, :result)))),
      s(:def, :test_handle_directive_block_nil,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:block,
              s(:send,
                s(:ivar, :@pp), :handle_directive,
                s(:str, ""),
                s(:str, "x"),
                s(:str, "y")),
              s(:args,
                s(:arg, :directive),
                s(:arg, :param)),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:str, ":x: y\n"),
            s(:lvar, :result)))),
      s(:def, :test_handle_directive_category,
        s(:args),
        s(:begin,
          s(:lvasgn, :context,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Context), :new)),
          s(:lvasgn, :original_section,
            s(:send,
              s(:lvar, :context), :current_section)),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "category"),
            s(:str, "other"),
            s(:lvar, :context)),
          s(:send, nil, :refute_equal,
            s(:lvar, :original_section),
            s(:send,
              s(:lvar, :context), :current_section)))),
      s(:def, :test_handle_directive_doc,
        s(:args),
        s(:begin,
          s(:lvasgn, :code_object,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CodeObject), :new)),
          s(:send,
            s(:lvar, :code_object), :document_self=,
            s(:false)),
          s(:send,
            s(:lvar, :code_object), :force_documentation=,
            s(:false)),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "doc"),
            s(:nil),
            s(:lvar, :code_object)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :code_object), :document_self)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :code_object), :force_documentation)))),
      s(:def, :test_handle_directive_doc_no_context,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@pp), :handle_directive,
              s(:str, ""),
              s(:str, "doc"),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:str, "\n"),
            s(:lvar, :result)))),
      s(:def, :test_handle_directive_enddoc,
        s(:args),
        s(:begin,
          s(:lvasgn, :code_object,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CodeObject), :new)),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "enddoc"),
            s(:nil),
            s(:lvar, :code_object)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :code_object), :done_documenting)))),
      s(:def, :test_handle_directive_include,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@tempfile), :write,
            s(:str, "included")),
          s(:send,
            s(:ivar, :@tempfile), :flush),
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@pp), :handle_directive,
              s(:str, ""),
              s(:str, "include"),
              s(:ivar, :@file_name))),
          s(:send, nil, :assert_equal,
            s(:str, "included"),
            s(:lvar, :result)))),
      s(:def, :test_handle_directive_main,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@pp), :options=,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Options), :new)),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "main"),
            s(:str, "M")),
          s(:send, nil, :assert_equal,
            s(:str, "M"),
            s(:send,
              s(:send,
                s(:ivar, :@pp), :options), :main_page)))),
      s(:def, :test_handle_directive_notnew,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "notnew"),
            s(:nil),
            s(:lvar, :m)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :m), :dont_rename_initialize)))),
      s(:def, :test_handle_directive_not_new,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "not_new"),
            s(:nil),
            s(:lvar, :m)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :m), :dont_rename_initialize)))),
      s(:def, :test_handle_directive_not_dash_new,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "not-new"),
            s(:nil),
            s(:lvar, :m)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :m), :dont_rename_initialize)))),
      s(:def, :test_handle_directive_nodoc,
        s(:args),
        s(:begin,
          s(:lvasgn, :code_object,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CodeObject), :new)),
          s(:send,
            s(:lvar, :code_object), :document_self=,
            s(:true)),
          s(:send,
            s(:lvar, :code_object), :document_children=,
            s(:true)),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "nodoc"),
            s(:nil),
            s(:lvar, :code_object)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :code_object), :document_self)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :code_object), :document_children)))),
      s(:def, :test_handle_directive_nodoc_all,
        s(:args),
        s(:begin,
          s(:lvasgn, :code_object,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CodeObject), :new)),
          s(:send,
            s(:lvar, :code_object), :document_self=,
            s(:true)),
          s(:send,
            s(:lvar, :code_object), :document_children=,
            s(:true)),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "nodoc"),
            s(:str, "all"),
            s(:lvar, :code_object)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :code_object), :document_self)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :code_object), :document_children)))),
      s(:def, :test_handle_directive_nodoc_no_context,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@pp), :handle_directive,
              s(:str, ""),
              s(:str, "nodoc"),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:str, "\n"),
            s(:lvar, :result)))),
      s(:def, :test_handle_directive_registered,
        s(:args),
        s(:begin,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :PreProcess), :register,
            s(:str, "x")),
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@pp), :handle_directive,
              s(:str, ""),
              s(:str, "x"),
              s(:str, "y"))),
          s(:send, nil, :assert_nil,
            s(:lvar, :result)),
          s(:lvasgn, :result,
            s(:block,
              s(:send,
                s(:ivar, :@pp), :handle_directive,
                s(:str, ""),
                s(:str, "x"),
                s(:str, "y")),
              s(:args,
                s(:arg, :directive),
                s(:arg, :param)),
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:str, ":x: y\n"),
            s(:lvar, :result)),
          s(:lvasgn, :result,
            s(:block,
              s(:send,
                s(:ivar, :@pp), :handle_directive,
                s(:str, ""),
                s(:str, "x"),
                s(:str, "y")),
              s(:args,
                s(:arg, :directive),
                s(:arg, :param)),
              s(:str, ""))),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:lvar, :result)))),
      s(:def, :test_handle_directive_registered_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :called,
            s(:nil)),
          s(:block,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :PreProcess), :register,
              s(:str, "x")),
            s(:args,
              s(:arg, :directive),
              s(:arg, :param)),
            s(:begin,
              s(:lvasgn, :called,
                s(:array,
                  s(:lvar, :directive),
                  s(:lvar, :param))),
              s(:str, "blah"))),
          s(:lvasgn, :result,
            s(:send,
              s(:ivar, :@pp), :handle_directive,
              s(:str, ""),
              s(:str, "x"),
              s(:str, "y"))),
          s(:send, nil, :assert_equal,
            s(:str, "blah"),
            s(:lvar, :result)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "x"),
              s(:str, "y")),
            s(:lvar, :called)))),
      s(:def, :test_handle_directive_registered_code_object,
        s(:args),
        s(:begin,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :PreProcess), :register,
            s(:str, "x")),
          s(:lvasgn, :code_object,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CodeObject), :new)),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "x"),
            s(:str, "y"),
            s(:lvar, :code_object)),
          s(:send, nil, :assert_equal,
            s(:str, "y"),
            s(:send,
              s(:send,
                s(:lvar, :code_object), :metadata), :[],
              s(:str, "x"))),
          s(:send,
            s(:send,
              s(:lvar, :code_object), :metadata), :clear),
          s(:lvasgn, :result,
            s(:block,
              s(:send,
                s(:ivar, :@pp), :handle_directive,
                s(:str, ""),
                s(:str, "x"),
                s(:str, "y")),
              s(:args,
                s(:arg, :directive),
                s(:arg, :param)),
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:str, ":x: y\n"),
            s(:lvar, :result)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :code_object), :metadata)),
          s(:lvasgn, :result,
            s(:block,
              s(:send,
                s(:ivar, :@pp), :handle_directive,
                s(:str, ""),
                s(:str, "x"),
                s(:str, "y")),
              s(:args,
                s(:arg, :directive),
                s(:arg, :param)),
              s(:str, ""))),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:lvar, :result)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :code_object), :metadata)))),
      s(:def, :test_handle_directive_startdoc,
        s(:args),
        s(:begin,
          s(:lvasgn, :code_object,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CodeObject), :new)),
          s(:send,
            s(:lvar, :code_object), :stop_doc),
          s(:send,
            s(:lvar, :code_object), :force_documentation=,
            s(:false)),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "startdoc"),
            s(:nil),
            s(:lvar, :code_object)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :code_object), :document_self)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :code_object), :document_children)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :code_object), :force_documentation)))),
      s(:def, :test_handle_directive_stopdoc,
        s(:args),
        s(:begin,
          s(:lvasgn, :code_object,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CodeObject), :new)),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "stopdoc"),
            s(:nil),
            s(:lvar, :code_object)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :code_object), :document_self)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :code_object), :document_children)))),
      s(:def, :test_handle_directive_title,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@pp), :options=,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Options), :new)),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "title"),
            s(:str, "T")),
          s(:send, nil, :assert_equal,
            s(:str, "T"),
            s(:send,
              s(:send,
                s(:ivar, :@pp), :options), :title)))),
      s(:def, :test_handle_directive_unhandled,
        s(:args),
        s(:begin,
          s(:lvasgn, :code_object,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CodeObject), :new)),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "x"),
            s(:str, "y"),
            s(:lvar, :code_object)),
          s(:send, nil, :assert_equal,
            s(:str, "y"),
            s(:send,
              s(:send,
                s(:lvar, :code_object), :metadata), :[],
              s(:str, "x"))),
          s(:send,
            s(:send,
              s(:lvar, :code_object), :metadata), :clear),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "x"),
            s(:str, ""),
            s(:lvar, :code_object)),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:lvar, :code_object), :metadata),
            s(:str, "x")))),
      s(:def, :test_handle_directive_unhandled_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :code_object,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CodeObject), :new)),
          s(:block,
            s(:send,
              s(:ivar, :@pp), :handle_directive,
              s(:str, ""),
              s(:str, "x"),
              s(:str, "y"),
              s(:lvar, :code_object)),
            s(:args),
            s(:false)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :code_object), :metadata)),
          s(:block,
            s(:send,
              s(:ivar, :@pp), :handle_directive,
              s(:str, ""),
              s(:str, "x"),
              s(:str, "y"),
              s(:lvar, :code_object)),
            s(:args),
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:str, "y"),
            s(:send,
              s(:send,
                s(:lvar, :code_object), :metadata), :[],
              s(:str, "x"))),
          s(:send,
            s(:send,
              s(:lvar, :code_object), :metadata), :clear),
          s(:block,
            s(:send,
              s(:ivar, :@pp), :handle_directive,
              s(:str, ""),
              s(:str, "x"),
              s(:str, "y"),
              s(:lvar, :code_object)),
            s(:args),
            s(:str, "")),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :code_object), :metadata)))),
      s(:def, :test_handle_directive_yield,
        s(:args),
        s(:begin,
          s(:lvasgn, :method,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:lvar, :method), :params=,
            s(:str, "index, &block")),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "yield"),
            s(:str, "item"),
            s(:lvar, :method)),
          s(:send, nil, :assert_equal,
            s(:str, "item"),
            s(:send,
              s(:lvar, :method), :block_params)),
          s(:send, nil, :assert_equal,
            s(:str, "index"),
            s(:send,
              s(:lvar, :method), :params)))),
      s(:def, :test_handle_directive_yield_block_param,
        s(:args),
        s(:begin,
          s(:lvasgn, :method,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:lvar, :method), :params=,
            s(:str, "&block")),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "yield"),
            s(:str, "item"),
            s(:lvar, :method)),
          s(:send, nil, :assert_equal,
            s(:str, "item"),
            s(:send,
              s(:lvar, :method), :block_params)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :method), :params)))),
      s(:def, :test_handle_directive_yield_no_context,
        s(:args),
        s(:begin,
          s(:lvasgn, :method,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "yield"),
            s(:str, "item"),
            s(:lvar, :method)),
          s(:send, nil, :assert_equal,
            s(:str, "item"),
            s(:send,
              s(:lvar, :method), :block_params)))),
      s(:def, :test_handle_directive_yields,
        s(:args),
        s(:begin,
          s(:lvasgn, :method,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:nil),
              s(:str, "m"))),
          s(:send,
            s(:ivar, :@pp), :handle_directive,
            s(:str, ""),
            s(:str, "yields"),
            s(:str, "item"),
            s(:lvar, :method)),
          s(:send, nil, :assert_equal,
            s(:str, "item"),
            s(:send,
              s(:lvar, :method), :block_params)))))))
