s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:send, nil, :require,
    s(:str, "tmpdir")),
  s(:class,
    s(:const, nil, :TestConditionVariable),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_initialized,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send,
            s(:send,
              s(:const, nil, :ConditionVariable), :allocate), :wait,
            s(:nil)))),
      s(:def, :test_condvar_signal_and_wait,
        s(:args),
        s(:begin,
          s(:lvasgn, :mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:lvasgn, :condvar,
            s(:send,
              s(:const, nil, :ConditionVariable), :new)),
          s(:lvasgn, :result,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :mutex), :synchronize),
            s(:args),
            s(:begin,
              s(:lvasgn, :t,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:block,
                    s(:send,
                      s(:lvar, :mutex), :synchronize),
                    s(:args),
                    s(:begin,
                      s(:send,
                        s(:lvar, :result), :<<,
                        s(:int, 1)),
                      s(:send,
                        s(:lvar, :condvar), :signal))))),
              s(:send,
                s(:lvar, :result), :<<,
                s(:int, 0)),
              s(:send,
                s(:lvar, :condvar), :wait,
                s(:lvar, :mutex)),
              s(:send,
                s(:lvar, :result), :<<,
                s(:int, 2)),
              s(:send,
                s(:lvar, :t), :join))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 0),
              s(:int, 1),
              s(:int, 2)),
            s(:lvar, :result)))),
      s(:def, :test_condvar_wait_exception_handling,
        s(:args),
        s(:begin,
          s(:lvasgn, :mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:lvasgn, :condvar,
            s(:send,
              s(:const, nil, :ConditionVariable), :new)),
          s(:lvasgn, :locked,
            s(:false)),
          s(:lvasgn, :thread,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :Thread), :current), :abort_on_exception=,
                  s(:false)),
                s(:block,
                  s(:send,
                    s(:lvar, :mutex), :synchronize),
                  s(:args),
                  s(:kwbegin,
                    s(:rescue,
                      s(:send,
                        s(:lvar, :condvar), :wait,
                        s(:lvar, :mutex)),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :Exception)), nil,
                        s(:begin,
                          s(:lvasgn, :locked,
                            s(:send,
                              s(:lvar, :mutex), :locked?)),
                          s(:send, nil, :raise))), nil)))))),
          s(:until,
            s(:send,
              s(:lvar, :thread), :stop?),
            s(:send, nil, :sleep,
              s(:float, 0.1))),
          s(:send,
            s(:lvar, :thread), :raise,
            s(:const, nil, :Interrupt),
            s(:str, "interrupt a dead condition variable")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :Interrupt)),
            s(:args),
            s(:send,
              s(:lvar, :thread), :value)),
          s(:send, nil, :assert,
            s(:lvar, :locked)))),
      s(:def, :test_condvar_wait_and_broadcast,
        s(:args),
        s(:begin,
          s(:lvasgn, :nr_threads,
            s(:int, 3)),
          s(:lvasgn, :threads,
            s(:send,
              s(:const, nil, :Array), :new)),
          s(:lvasgn, :mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:lvasgn, :condvar,
            s(:send,
              s(:const, nil, :ConditionVariable), :new)),
          s(:lvasgn, :result,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :nr_threads), :times),
            s(:args,
              s(:arg, :i)),
            s(:send,
              s(:lvar, :threads), :[]=,
              s(:lvar, :i),
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :new),
                s(:args),
                s(:block,
                  s(:send,
                    s(:lvar, :mutex), :synchronize),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:lvar, :result), :<<,
                      s(:str, "C1")),
                    s(:send,
                      s(:lvar, :condvar), :wait,
                      s(:lvar, :mutex)),
                    s(:send,
                      s(:lvar, :result), :<<,
                      s(:str, "C2"))))))),
          s(:send, nil, :sleep,
            s(:float, 0.1)),
          s(:block,
            s(:send,
              s(:lvar, :mutex), :synchronize),
            s(:args),
            s(:begin,
              s(:send,
                s(:lvar, :result), :<<,
                s(:str, "P1")),
              s(:send,
                s(:lvar, :condvar), :broadcast),
              s(:send,
                s(:lvar, :result), :<<,
                s(:str, "P2")))),
          s(:block,
            s(:send,
              s(:const, nil, :Timeout), :timeout,
              s(:int, 5)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :nr_threads), :times),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:send,
                  s(:lvar, :threads), :[],
                  s(:lvar, :i)), :join))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "C1"),
              s(:str, "C1"),
              s(:str, "C1"),
              s(:str, "P1"),
              s(:str, "P2"),
              s(:str, "C2"),
              s(:str, "C2"),
              s(:str, "C2")),
            s(:lvar, :result)))),
      s(:def, :test_condvar_wait_deadlock,
        s(:args),
        s(:send, nil, :assert_in_out_err,
          s(:array),
          s(:dstr,
            s(:str, "      require \"thread\"\n"),
            s(:str, "\n"),
            s(:str, "      mutex = Mutex.new\n"),
            s(:str, "      cv = ConditionVariable.new\n"),
            s(:str, "\n"),
            s(:str, "      klass = nil\n"),
            s(:str, "      mesg = nil\n"),
            s(:str, "      begin\n"),
            s(:str, "        mutex.lock\n"),
            s(:str, "        cv.wait mutex\n"),
            s(:str, "        mutex.unlock\n"),
            s(:str, "      rescue Exception => e\n"),
            s(:str, "        klass = e.class\n"),
            s(:str, "        mesg = e.message\n"),
            s(:str, "      end\n"),
            s(:str, "      puts klass\n"),
            s(:str, "      print mesg\n")),
          s(:array,
            s(:str, "fatal"),
            s(:str, "No live threads left. Deadlock?")),
          s(:array))),
      s(:def, :test_condvar_wait_deadlock_2,
        s(:args),
        s(:begin,
          s(:lvasgn, :nr_threads,
            s(:int, 3)),
          s(:lvasgn, :threads,
            s(:send,
              s(:const, nil, :Array), :new)),
          s(:lvasgn, :mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:lvasgn, :condvar,
            s(:send,
              s(:const, nil, :ConditionVariable), :new)),
          s(:block,
            s(:send,
              s(:lvar, :nr_threads), :times),
            s(:args,
              s(:arg, :i)),
            s(:begin,
              s(:if,
                s(:begin,
                  s(:send,
                    s(:lvar, :i), :!=,
                    s(:int, 0))),
                s(:send,
                  s(:lvar, :mutex), :unlock), nil),
              s(:send,
                s(:lvar, :threads), :[]=,
                s(:lvar, :i),
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:block,
                    s(:send,
                      s(:lvar, :mutex), :synchronize),
                    s(:args),
                    s(:send,
                      s(:lvar, :condvar), :wait,
                      s(:lvar, :mutex))))),
              s(:send,
                s(:lvar, :mutex), :lock))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Timeout), :Error)),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Timeout), :timeout,
                s(:float, 0.1)),
              s(:args),
              s(:send,
                s(:lvar, :condvar), :wait,
                s(:lvar, :mutex)))),
          s(:send,
            s(:lvar, :mutex), :unlock),
          s(:send,
            s(:lvar, :threads), :each,
            s(:block_pass,
              s(:sym, :kill))),
          s(:send,
            s(:lvar, :threads), :each,
            s(:block_pass,
              s(:sym, :join))))),
      s(:def, :test_condvar_timed_wait,
        s(:args),
        s(:begin,
          s(:lvasgn, :mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:lvasgn, :condvar,
            s(:send,
              s(:const, nil, :ConditionVariable), :new)),
          s(:lvasgn, :timeout,
            s(:float, 0.3)),
          s(:lvasgn, :locked,
            s(:false)),
          s(:lvasgn, :t0,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:block,
            s(:send,
              s(:lvar, :mutex), :synchronize),
            s(:args),
            s(:kwbegin,
              s(:ensure,
                s(:send,
                  s(:lvar, :condvar), :wait,
                  s(:lvar, :mutex),
                  s(:lvar, :timeout)),
                s(:lvasgn, :locked,
                  s(:send,
                    s(:lvar, :mutex), :locked?))))),
          s(:lvasgn, :t1,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:lvasgn, :t,
            s(:send,
              s(:lvar, :t1), :-,
              s(:lvar, :t0))),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:lvar, :timeout), :*,
              s(:float, 0.9)),
            s(:sym, :<),
            s(:lvar, :t)),
          s(:send, nil, :assert,
            s(:lvar, :locked)))),
      s(:def, :test_condvar_nolock,
        s(:args),
        s(:begin,
          s(:lvasgn, :mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:lvasgn, :condvar,
            s(:send,
              s(:const, nil, :ConditionVariable), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ThreadError)),
            s(:args),
            s(:send,
              s(:lvar, :condvar), :wait,
              s(:lvar, :mutex))))),
      s(:def, :test_condvar_nolock_2,
        s(:args),
        s(:begin,
          s(:lvasgn, :mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:lvasgn, :condvar,
            s(:send,
              s(:const, nil, :ConditionVariable), :new)),
          s(:send,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :ThreadError)),
                s(:args),
                s(:send,
                  s(:lvar, :condvar), :wait,
                  s(:lvar, :mutex)))), :join))),
      s(:def, :test_condvar_nolock_3,
        s(:args),
        s(:begin,
          s(:lvasgn, :mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:lvasgn, :condvar,
            s(:send,
              s(:const, nil, :ConditionVariable), :new)),
          s(:send,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :ThreadError)),
                s(:args),
                s(:send,
                  s(:lvar, :condvar), :wait,
                  s(:lvar, :mutex),
                  s(:float, 0.1)))), :join))),
      s(:def, :test_condvar_empty_signal,
        s(:args),
        s(:begin,
          s(:lvasgn, :mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:lvasgn, :condvar,
            s(:send,
              s(:const, nil, :ConditionVariable), :new)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :mutex), :synchronize),
              s(:args),
              s(:send,
                s(:lvar, :condvar), :signal))))),
      s(:def, :test_condvar_empty_broadcast,
        s(:args),
        s(:begin,
          s(:lvasgn, :mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:lvasgn, :condvar,
            s(:send,
              s(:const, nil, :ConditionVariable), :new)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :mutex), :synchronize),
              s(:args),
              s(:send,
                s(:lvar, :condvar), :broadcast))))),
      s(:def, :test_dup,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9440,
            s(:str, "[ruby-core:59961] [Bug #9440]")),
          s(:lvasgn, :condvar,
            s(:send,
              s(:const, nil, :ConditionVariable), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError),
              s(:lvar, :bug9440)),
            s(:args),
            s(:send,
              s(:lvar, :condvar), :dup)))),
      s(:block,
        s(:send,
          s(:begin,
            s(:casgn, nil, :DumpableCV,
              s(:send,
                s(:const, nil, :ConditionVariable), :dup))), :class_eval),
        s(:args),
        s(:send, nil, :remove_method,
          s(:sym, :marshal_dump))),
      s(:def, :test_dump,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9674,
            s(:str, "[ruby-core:61677] [Bug #9674]")),
          s(:lvasgn, :condvar,
            s(:send,
              s(:const, nil, :ConditionVariable), :new)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:begin,
                  s(:const, nil, :ConditionVariable)),
                s(:regopt)),
              s(:lvar, :bug9674)),
            s(:args),
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:lvar, :condvar))),
          s(:lvasgn, :condvar,
            s(:send,
              s(:const, nil, :DumpableCV), :new)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "internal Array"),
                s(:regopt)),
              s(:lvar, :bug9674)),
            s(:args),
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:lvar, :condvar))))))))
