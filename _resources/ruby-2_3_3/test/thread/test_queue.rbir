s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:send, nil, :require,
    s(:str, "tmpdir")),
  s(:send, nil, :require,
    s(:str, "timeout")),
  s(:class,
    s(:const, nil, :TestQueue),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_queue_initialized,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send,
            s(:send,
              s(:const, nil, :Queue), :allocate), :push,
            s(:nil)))),
      s(:def, :test_sized_queue_initialized,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send,
            s(:send,
              s(:const, nil, :SizedQueue), :allocate), :push,
            s(:nil)))),
      s(:def, :test_queue,
        s(:args),
        s(:send, nil, :grind,
          s(:int, 5),
          s(:int, 1000),
          s(:int, 15),
          s(:const, nil, :Queue))),
      s(:def, :test_sized_queue,
        s(:args),
        s(:send, nil, :grind,
          s(:int, 5),
          s(:int, 1000),
          s(:int, 15),
          s(:const, nil, :SizedQueue),
          s(:int, 1000))),
      s(:def, :grind,
        s(:args,
          s(:arg, :num_threads),
          s(:arg, :num_objects),
          s(:arg, :num_iterations),
          s(:arg, :klass),
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :from_workers,
            s(:send,
              s(:lvar, :klass), :new,
              s(:splat,
                s(:lvar, :args)))),
          s(:lvasgn, :to_workers,
            s(:send,
              s(:lvar, :klass), :new,
              s(:splat,
                s(:lvar, :args)))),
          s(:lvasgn, :workers,
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:lvar, :num_threads))), :map),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :new),
                s(:args),
                s(:while,
                  s(:lvasgn, :object,
                    s(:send,
                      s(:lvar, :to_workers), :pop)),
                  s(:send,
                    s(:lvar, :from_workers), :push,
                    s(:lvar, :object)))))),
          s(:send,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:block,
                s(:send,
                  s(:lvar, :num_iterations), :times),
                s(:args),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:lvar, :num_objects), :times),
                    s(:args),
                    s(:send,
                      s(:lvar, :to_workers), :push,
                      s(:int, 99))),
                  s(:block,
                    s(:send,
                      s(:lvar, :num_objects), :times),
                    s(:args),
                    s(:send,
                      s(:lvar, :from_workers), :pop))))), :join),
          s(:block,
            s(:send,
              s(:lvar, :num_threads), :times),
            s(:args),
            s(:send,
              s(:lvar, :to_workers), :push,
              s(:nil))),
          s(:block,
            s(:send,
              s(:lvar, :workers), :each),
            s(:args,
              s(:arg, :t)),
            s(:send,
              s(:lvar, :t), :join)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :from_workers), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :to_workers), :size)))),
      s(:def, :test_sized_queue_initialize,
        s(:args),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :SizedQueue), :new,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :q), :max)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :SizedQueue), :new,
              s(:int, 0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :SizedQueue), :new,
              s(:int, -1))))),
      s(:def, :test_sized_queue_assign_max,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :q,
              s(:send,
                s(:const, nil, :SizedQueue), :new,
                s(:int, 2))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :q), :max)),
            s(:send,
              s(:lvar, :q), :max=,
              s(:int, 1)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :q), :max)),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:lvar, :q), :max=,
                s(:int, 0))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :q), :max)),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:lvar, :q), :max=,
                s(:int, -1))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :q), :max)),
            s(:lvasgn, :before,
              s(:send,
                s(:lvar, :q), :max)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :q), :max), :times),
              s(:args),
              s(:send,
                s(:lvar, :q), :<<,
                s(:int, 1))),
            s(:lvasgn, :t1,
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :new),
                s(:args),
                s(:send,
                  s(:lvar, :q), :<<,
                  s(:int, 1)))),
            s(:until,
              s(:send,
                s(:lvar, :t1), :stop?),
              s(:send, nil, :sleep,
                s(:float, 0.01))),
            s(:send,
              s(:lvar, :q), :max=,
              s(:send,
                s(:send,
                  s(:lvar, :q), :max), :+,
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :before), :+,
                s(:int, 1)),
              s(:send,
                s(:lvar, :q), :max))),
          s(:if,
            s(:lvar, :t1),
            s(:send,
              s(:lvar, :t1), :join), nil))),
      s(:def, :test_queue_pop_interrupt,
        s(:args),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :Queue), :new)),
          s(:lvasgn, :t1,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:send,
                s(:lvar, :q), :pop))),
          s(:until,
            s(:send,
              s(:lvar, :t1), :stop?),
            s(:send, nil, :sleep,
              s(:float, 0.01))),
          s(:send,
            s(:send,
              s(:lvar, :t1), :kill), :join),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :q), :num_waiting)))),
      s(:def, :test_queue_pop_non_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :Queue), :new)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ThreadError),
              s(:regexp,
                s(:str, "empty"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :q), :pop,
              s(:true))))),
      s(:def, :test_sized_queue_pop_interrupt,
        s(:args),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :SizedQueue), :new,
              s(:int, 1))),
          s(:lvasgn, :t1,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:send,
                s(:lvar, :q), :pop))),
          s(:until,
            s(:send,
              s(:lvar, :t1), :stop?),
            s(:send, nil, :sleep,
              s(:float, 0.01))),
          s(:send,
            s(:send,
              s(:lvar, :t1), :kill), :join),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :q), :num_waiting)))),
      s(:def, :test_sized_queue_pop_non_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :SizedQueue), :new,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ThreadError),
              s(:regexp,
                s(:str, "empty"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :q), :pop,
              s(:true))))),
      s(:def, :test_sized_queue_push_interrupt,
        s(:args),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :SizedQueue), :new,
              s(:int, 1))),
          s(:send,
            s(:lvar, :q), :push,
            s(:int, 1)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ThreadError),
              s(:regexp,
                s(:str, "full"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :q), :push,
              s(:int, 2),
              s(:true))))),
      s(:def, :test_sized_queue_push_non_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :SizedQueue), :new,
              s(:int, 1))),
          s(:send,
            s(:lvar, :q), :push,
            s(:int, 1)),
          s(:lvasgn, :t1,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:send,
                s(:lvar, :q), :push,
                s(:int, 2)))),
          s(:until,
            s(:send,
              s(:lvar, :t1), :stop?),
            s(:send, nil, :sleep,
              s(:float, 0.01))),
          s(:send,
            s(:send,
              s(:lvar, :t1), :kill), :join),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :q), :num_waiting)))),
      s(:def, :test_thr_kill,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5343,
            s(:str, "[ruby-core:39634]")),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :mktmpdir),
            s(:args,
              s(:arg, :d)),
            s(:begin,
              s(:lvasgn, :timeout,
                s(:int, 60)),
              s(:lvasgn, :total_count,
                s(:int, 250)),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :assert_normal_exit,
                    s(:dstr,
                      s(:str, "          require \"thread\"\n"),
                      s(:str, "          "),
                      s(:begin,
                        s(:lvar, :total_count)),
                      s(:str, ".times do |i|\n"),
                      s(:str, "            open(\"test_thr_kill_count\", \"w\") {|f| f.puts i }\n"),
                      s(:str, "            queue = Queue.new\n"),
                      s(:str, "            r, w = IO.pipe\n"),
                      s(:str, "            th = Thread.start {\n"),
                      s(:str, "              queue.push(nil)\n"),
                      s(:str, "              r.read 1\n"),
                      s(:str, "            }\n"),
                      s(:str, "            queue.pop\n"),
                      s(:str, "            th.kill\n"),
                      s(:str, "            th.join\n"),
                      s(:str, "          end\n")),
                    s(:lvar, :bug5343),
                    s(:hash,
                      s(:pair,
                        s(:sym, :timeout),
                        s(:lvar, :timeout)),
                      s(:pair,
                        s(:sym, :chdir),
                        s(:lvar, :d)))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :Timeout), :Error)), nil,
                    s(:begin,
                      s(:lvasgn, :count,
                        s(:send,
                          s(:send,
                            s(:const, nil, :File), :read,
                            s(:dstr,
                              s(:begin,
                                s(:lvar, :d)),
                              s(:str, "/test_thr_kill_count"))), :to_i)),
                      s(:send, nil, :flunk,
                        s(:dstr,
                          s(:str, "only "),
                          s(:begin,
                            s(:lvar, :count)),
                          s(:str, "/"),
                          s(:begin,
                            s(:lvar, :total_count)),
                          s(:str, " done in "),
                          s(:begin,
                            s(:lvar, :timeout)),
                          s(:str, " seconds."))))), nil)))))),
      s(:def, :test_queue_push_return_value,
        s(:args),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :Queue), :new)),
          s(:lvasgn, :retval,
            s(:send,
              s(:lvar, :q), :push,
              s(:int, 1))),
          s(:send, nil, :assert_same,
            s(:lvar, :q),
            s(:lvar, :retval)))),
      s(:def, :test_queue_clear_return_value,
        s(:args),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :Queue), :new)),
          s(:lvasgn, :retval,
            s(:send,
              s(:lvar, :q), :clear)),
          s(:send, nil, :assert_same,
            s(:lvar, :q),
            s(:lvar, :retval)))),
      s(:def, :test_sized_queue_clear,
        s(:args),
        s(:begin,
          s(:lvasgn, :sq,
            s(:send,
              s(:const, nil, :SizedQueue), :new,
              s(:int, 2))),
          s(:block,
            s(:send,
              s(:int, 2), :times),
            s(:args),
            s(:send,
              s(:lvar, :sq), :<<,
              s(:int, 1))),
          s(:lvasgn, :t1,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:send,
                s(:lvar, :sq), :<<,
                s(:int, 1)))),
          s(:lvasgn, :t2,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:send,
                s(:lvar, :sq), :<<,
                s(:int, 1)))),
          s(:lvasgn, :t3,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:begin,
                s(:send,
                  s(:const, nil, :Thread), :pass),
                s(:send,
                  s(:lvar, :sq), :clear)))),
          s(:send,
            s(:array,
              s(:lvar, :t3),
              s(:lvar, :t2),
              s(:lvar, :t1)), :each,
            s(:block_pass,
              s(:sym, :join))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :sq), :length),
            s(:int, 2)))),
      s(:def, :test_sized_queue_push_return_value,
        s(:args),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :SizedQueue), :new,
              s(:int, 1))),
          s(:lvasgn, :retval,
            s(:send,
              s(:lvar, :q), :push,
              s(:int, 1))),
          s(:send, nil, :assert_same,
            s(:lvar, :q),
            s(:lvar, :retval)))),
      s(:def, :test_sized_queue_clear_return_value,
        s(:args),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :SizedQueue), :new,
              s(:int, 1))),
          s(:lvasgn, :retval,
            s(:send,
              s(:lvar, :q), :clear)),
          s(:send, nil, :assert_same,
            s(:lvar, :q),
            s(:lvar, :retval)))),
      s(:def, :test_sized_queue_throttle,
        s(:args),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :SizedQueue), :new,
              s(:int, 1))),
          s(:lvasgn, :i,
            s(:int, 0)),
          s(:lvasgn, :consumer,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:while,
                s(:send,
                  s(:lvar, :q), :pop),
                s(:begin,
                  s(:op_asgn,
                    s(:lvasgn, :i), :+,
                    s(:int, 1)),
                  s(:send,
                    s(:const, nil, :Thread), :pass))))),
          s(:lvasgn, :nprod,
            s(:int, 4)),
          s(:lvasgn, :npush,
            s(:int, 100)),
          s(:lvasgn, :producer,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :nprod), :times), :map),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :new),
                s(:args),
                s(:block,
                  s(:send,
                    s(:lvar, :npush), :times),
                  s(:args),
                  s(:send,
                    s(:lvar, :q), :push,
                    s(:true)))))),
          s(:send,
            s(:lvar, :producer), :each,
            s(:block_pass,
              s(:sym, :join))),
          s(:send,
            s(:lvar, :q), :push,
            s(:nil)),
          s(:send,
            s(:lvar, :consumer), :join),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :nprod), :*,
              s(:lvar, :npush)),
            s(:lvar, :i)))),
      s(:def, :test_queue_thread_raise,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :q,
              s(:send,
                s(:const, nil, :Queue), :new)),
            s(:lvasgn, :th1,
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :new),
                s(:args),
                s(:kwbegin,
                  s(:rescue,
                    s(:send,
                      s(:lvar, :q), :pop),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :RuntimeError)), nil,
                      s(:send, nil, :sleep)), nil)))),
            s(:lvasgn, :th2,
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :new),
                s(:args),
                s(:begin,
                  s(:send, nil, :sleep,
                    s(:float, 0.1)),
                  s(:send,
                    s(:lvar, :q), :pop)))),
            s(:send, nil, :sleep,
              s(:float, 0.1)),
            s(:send,
              s(:lvar, :th1), :raise),
            s(:send, nil, :sleep,
              s(:float, 0.1)),
            s(:send,
              s(:lvar, :q), :<<,
              s(:sym, :s)),
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:const,
                  s(:const, nil, :Timeout), :Error)),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :Timeout), :timeout,
                  s(:int, 1)),
                s(:args),
                s(:send,
                  s(:lvar, :th2), :join)))),
          s(:block,
            s(:send,
              s(:array,
                s(:lvar, :th1),
                s(:lvar, :th2)), :each),
            s(:args,
              s(:arg, :th)),
            s(:if,
              s(:and,
                s(:lvar, :th),
                s(:send,
                  s(:lvar, :th), :alive?)),
              s(:begin,
                s(:send,
                  s(:lvar, :th), :wakeup),
                s(:send,
                  s(:lvar, :th), :join)), nil)))),
      s(:def, :test_dup,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9440,
            s(:str, "[ruby-core:59961] [Bug #9440]")),
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :Queue), :new)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError),
              s(:lvar, :bug9440)),
            s(:args),
            s(:send,
              s(:lvar, :q), :dup)))),
      s(:block,
        s(:send,
          s(:begin,
            s(:casgn, nil, :DumpableQueue,
              s(:send,
                s(:const, nil, :Queue), :dup))), :class_eval),
        s(:args),
        s(:send, nil, :remove_method,
          s(:sym, :marshal_dump))),
      s(:def, :test_dump,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug9674,
            s(:str, "[ruby-core:61677] [Bug #9674]")),
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :Queue), :new)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:begin,
                  s(:const, nil, :Queue)),
                s(:regopt)),
              s(:lvar, :bug9674)),
            s(:args),
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:lvar, :q))),
          s(:lvasgn, :sq,
            s(:send,
              s(:const, nil, :SizedQueue), :new,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:begin,
                  s(:const, nil, :SizedQueue)),
                s(:regopt)),
              s(:lvar, :bug9674)),
            s(:args),
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:lvar, :sq))),
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :DumpableQueue), :new)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :TypeError),
              s(:regexp,
                s(:str, "internal Array"),
                s(:regopt)),
              s(:lvar, :bug9674)),
            s(:args),
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:lvar, :q))))),
      s(:def, :test_close,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:block,
                s(:send, nil, :lambda),
                s(:args),
                s(:send,
                  s(:const, nil, :Queue), :new)),
              s(:block,
                s(:send, nil, :lambda),
                s(:args),
                s(:send,
                  s(:const, nil, :SizedQueue), :new,
                  s(:int, 3)))), :each),
          s(:args,
            s(:arg, :qcreate)),
          s(:begin,
            s(:lvasgn, :q,
              s(:send,
                s(:lvar, :qcreate), :call)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :q), :closed?)),
            s(:send,
              s(:lvar, :q), :<<,
              s(:sym, :something)),
            s(:send, nil, :assert_equal,
              s(:lvar, :q),
              s(:send,
                s(:lvar, :q), :close)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :q), :closed?)),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :ClosedQueueError),
                s(:regexp,
                  s(:str, "closed"),
                  s(:regopt))),
              s(:args),
              s(:send,
                s(:lvar, :q), :<<,
                s(:sym, :nothing))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :q), :pop),
              s(:sym, :something)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :q), :pop)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :q), :pop)),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :ThreadError),
                s(:regexp,
                  s(:str, "queue empty"),
                  s(:regopt))),
              s(:args),
              s(:send,
                s(:lvar, :q), :pop,
                s(:lvasgn, :non_block,
                  s(:true))))))),
      s(:def, :close_wakeup,
        s(:args,
          s(:arg, :num_items),
          s(:arg, :num_threads),
          s(:blockarg, :qcreate)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :num_items), :>=,
              s(:lvar, :num_threads)),
            s(:send, nil, :raise,
              s(:dstr,
                s(:str, "This test won't work with num_items("),
                s(:begin,
                  s(:lvar, :num_items)),
                s(:str, ") >= num_threads("),
                s(:begin,
                  s(:lvar, :num_threads)),
                s(:str, ")"))), nil),
          s(:lvasgn, :q,
            s(:yield)),
          s(:lvasgn, :threads,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :num_threads), :times), :map),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :new),
                s(:args),
                s(:send,
                  s(:lvar, :q), :pop)))),
          s(:block,
            s(:send,
              s(:lvar, :num_items), :times),
            s(:args,
              s(:arg, :i)),
            s(:send,
              s(:lvar, :q), :<<,
              s(:lvar, :i))),
          s(:until,
            s(:send,
              s(:send,
                s(:lvar, :q), :size), :==,
              s(:int, 0)),
            s(:begin,
              s(:send,
                s(:const, nil, :Thread), :pass),
              s(:send, nil, :sleep,
                s(:float, 0.01)))),
          s(:send,
            s(:lvar, :q), :close),
          s(:until,
            s(:block,
              s(:send,
                s(:lvar, :threads), :all?),
              s(:args,
                s(:arg, :thr)),
              s(:send,
                s(:send,
                  s(:lvar, :thr), :status), :==,
                s(:false))),
            s(:send,
              s(:const, nil, :Thread), :pass)),
          s(:lvasgn, :expected_values,
            s(:send,
              s(:send,
                s(:array,
                  s(:int, -1)), :*,
                s(:begin,
                  s(:send,
                    s(:lvar, :num_threads), :-,
                    s(:lvar, :num_items)))), :+,
              s(:send,
                s(:send,
                  s(:lvar, :num_items), :times), :to_a))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected_values),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :threads), :map),
                s(:args,
                  s(:arg, :thr)),
                s(:or,
                  s(:send,
                    s(:lvar, :thr), :value),
                  s(:int, -1))), :sort)))),
      s(:def, :test_queue_close_wakeup,
        s(:args),
        s(:block,
          s(:send, nil, :close_wakeup,
            s(:int, 15),
            s(:int, 18)),
          s(:args),
          s(:send,
            s(:const, nil, :Queue), :new))),
      s(:def, :test_size_queue_close_wakeup,
        s(:args),
        s(:block,
          s(:send, nil, :close_wakeup,
            s(:int, 5),
            s(:int, 8)),
          s(:args),
          s(:send,
            s(:const, nil, :SizedQueue), :new,
            s(:int, 9)))),
      s(:def, :test_sized_queue_one_closed_interrupt,
        s(:args),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :SizedQueue), :new,
              s(:int, 1))),
          s(:send,
            s(:lvar, :q), :<<,
            s(:sym, :one)),
          s(:lvasgn, :t1,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:send,
                s(:lvar, :q), :<<,
                s(:sym, :two)))),
          s(:until,
            s(:send,
              s(:lvar, :t1), :stop?),
            s(:send, nil, :sleep,
              s(:float, 0.01))),
          s(:send,
            s(:lvar, :q), :close),
          s(:send,
            s(:send,
              s(:lvar, :t1), :kill), :join),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :q), :size)),
          s(:send, nil, :assert_equal,
            s(:sym, :one),
            s(:send,
              s(:lvar, :q), :pop)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :q), :empty?),
            s(:str, "queue not empty")))),
      s(:def, :test_empty_non_blocking,
        s(:args),
        s(:begin,
          s(:return),
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :SizedQueue), :new,
              s(:int, 3))),
          s(:block,
            s(:send,
              s(:int, 3), :times),
            s(:args,
              s(:arg, :i)),
            s(:send,
              s(:lvar, :q), :<<,
              s(:lvar, :i))),
          s(:lvasgn, :prod_threads,
            s(:block,
              s(:send,
                s(:send,
                  s(:int, 4), :times), :map),
              s(:args,
                s(:arg, :i)),
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :new),
                s(:args),
                s(:send,
                  s(:lvar, :q), :<<,
                  s(:send,
                    s(:int, 3), :+,
                    s(:lvar, :i)))))),
          s(:until,
            s(:block,
              s(:send,
                s(:lvar, :prod_threads), :all?),
              s(:args,
                s(:arg, :thr)),
              s(:send,
                s(:send,
                  s(:lvar, :thr), :status), :==,
                s(:str, "sleep"))),
            s(:send, nil, :sleep,
              s(:float, 0.01))),
          s(:send,
            s(:lvar, :q), :close),
          s(:lvasgn, :items,
            s(:array)),
          s(:until,
            s(:send,
              s(:lvar, :q), :empty?),
            s(:rescue,
              s(:send,
                s(:lvar, :items), :<<,
                s(:send,
                  s(:lvar, :q), :pop,
                  s(:lvasgn, :non_block,
                    s(:true)))),
              s(:resbody, nil, nil,
                s(:nil)), nil)),
          s(:send,
            s(:lvar, :items), :compact!),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:int, 7), :times), :to_a),
            s(:send,
              s(:lvar, :items), :sort)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :q), :empty?)))),
      s(:def, :test_sized_queue_closed_push_non_blocking,
        s(:args),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :SizedQueue), :new,
              s(:int, 7))),
          s(:send,
            s(:lvar, :q), :close),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ClosedQueueError),
              s(:regexp,
                s(:str, "queue closed"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :q), :push,
              s(:lvasgn, :non_block,
                s(:true)))))),
      s(:def, :test_blocked_pushers,
        s(:args),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :SizedQueue), :new,
              s(:int, 3))),
          s(:lvasgn, :prod_threads,
            s(:block,
              s(:send,
                s(:send,
                  s(:int, 6), :times), :map),
              s(:args,
                s(:arg, :i)),
              s(:begin,
                s(:lvasgn, :thr,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:send,
                      s(:lvar, :q), :<<,
                      s(:lvar, :i)))),
                s(:send,
                  s(:lvar, :thr), :[]=,
                  s(:sym, :pc),
                  s(:lvar, :i)),
                s(:lvar, :thr)))),
          s(:while,
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :prod_threads), :reject),
                  s(:args,
                    s(:arg, :t)),
                  s(:send,
                    s(:lvar, :t), :status)), :count), :<,
              s(:int, 3)),
            s(:send, nil, :sleep,
              s(:float, 0.01))),
          s(:send,
            s(:lvar, :q), :close),
          s(:lvasgn, :cons_threads,
            s(:block,
              s(:send,
                s(:send,
                  s(:int, 10), :times), :map),
              s(:args,
                s(:arg, :i)),
              s(:begin,
                s(:lvasgn, :thr,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:send,
                      s(:lvar, :q), :pop))),
                s(:send,
                  s(:lvar, :thr), :[]=,
                  s(:sym, :pc),
                  s(:lvar, :i)),
                s(:lvar, :thr)))),
          s(:lvasgn, :popped_values,
            s(:send,
              s(:lvar, :cons_threads), :map,
              s(:block_pass,
                s(:sym, :value)))),
          s(:until,
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :prod_threads), :find_all),
                  s(:args,
                    s(:arg, :t)),
                  s(:send,
                    s(:lvar, :t), :status)), :count), :==,
              s(:int, 0)),
            s(:send, nil, :sleep,
              s(:float, 0.01))),
          s(:lvasgn, :successful_prod_threads,
            s(:block,
              s(:send,
                s(:lvar, :prod_threads), :reject),
              s(:args,
                s(:arg, :thr)),
              s(:send,
                s(:send,
                  s(:lvar, :thr), :status), :==,
                s(:nil)))),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:lvar, :successful_prod_threads), :map,
              s(:block_pass,
                s(:sym, :value)))),
          s(:lvasgn, :unsuccessful_prod_threads,
            s(:send,
              s(:lvar, :prod_threads), :-,
              s(:lvar, :successful_prod_threads))),
          s(:block,
            s(:send,
              s(:lvar, :unsuccessful_prod_threads), :each),
            s(:args,
              s(:arg, :thr)),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ClosedQueueError)),
              s(:args),
              s(:send,
                s(:lvar, :thr), :value))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :cons_threads), :size),
            s(:send,
              s(:lvar, :popped_values), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :q), :size)),
          s(:send, nil, :assert_equal,
            s(:block,
              s(:send,
                s(:lvar, :successful_prod_threads), :map),
              s(:args,
                s(:arg, :thr)),
              s(:send,
                s(:lvar, :thr), :[],
                s(:sym, :pc))),
            s(:send,
              s(:send,
                s(:lvar, :popped_values), :compact), :sort)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :q), :pop)))),
      s(:def, :test_deny_pushers,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:block,
                s(:send, nil, :lambda),
                s(:args),
                s(:send,
                  s(:const, nil, :Queue), :new)),
              s(:block,
                s(:send, nil, :lambda),
                s(:args),
                s(:send,
                  s(:const, nil, :SizedQueue), :new,
                  s(:int, 3)))), :each),
          s(:args,
            s(:arg, :qcreate)),
          s(:begin,
            s(:lvasgn, :prod_threads,
              s(:nil)),
            s(:lvasgn, :q,
              s(:send,
                s(:lvar, :qcreate), :[])),
            s(:lvasgn, :synq,
              s(:send,
                s(:const, nil, :Queue), :new)),
            s(:lvasgn, :producers_start,
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :new),
                s(:args),
                s(:lvasgn, :prod_threads,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:int, 20), :times), :map),
                    s(:args,
                      s(:arg, :i)),
                    s(:block,
                      s(:send,
                        s(:const, nil, :Thread), :new),
                      s(:args),
                      s(:begin,
                        s(:send,
                          s(:lvar, :synq), :pop),
                        s(:send,
                          s(:lvar, :q), :<<,
                          s(:lvar, :i)))))))),
            s(:send,
              s(:lvar, :q), :close),
            s(:send,
              s(:lvar, :synq), :close),
            s(:until,
              s(:block,
                s(:csend,
                  s(:lvar, :prod_threads), :all?),
                s(:args,
                  s(:arg, :thr)),
                s(:send,
                  s(:send,
                    s(:lvar, :thr), :status), :!)),
              s(:send, nil, :sleep,
                s(:float, 0.01))),
            s(:block,
              s(:send,
                s(:lvar, :prod_threads), :each),
              s(:args,
                s(:arg, :thr)),
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :ClosedQueueError),
                s(:begin,
                  s(:rescue,
                    s(:send,
                      s(:lvar, :thr), :value),
                    s(:resbody, nil, nil,
                      s(:gvar, :$!)), nil))))))),
      s(:def, :sized_queue_size_close,
        s(:args),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :SizedQueue), :new,
              s(:int, 4))),
          s(:block,
            s(:send,
              s(:int, 4), :times),
            s(:args,
              s(:arg, :i)),
            s(:send,
              s(:lvar, :q), :<<,
              s(:lvar, :i))),
          s(:block,
            s(:send,
              s(:const, nil, :Thread), :new),
            s(:args),
            s(:send,
              s(:lvar, :q), :<<,
              s(:int, 5))),
          s(:block,
            s(:send,
              s(:const, nil, :Thread), :new),
            s(:args),
            s(:send,
              s(:lvar, :q), :<<,
              s(:int, 6))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :q), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :q), :items)),
          s(:send,
            s(:lvar, :q), :close),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:lvar, :q), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :q), :items)))),
      s(:def, :test_blocked_pushers_empty,
        s(:args),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :SizedQueue), :new,
              s(:int, 3))),
          s(:lvasgn, :prod_threads,
            s(:block,
              s(:send,
                s(:send,
                  s(:int, 6), :times), :map),
              s(:args,
                s(:arg, :i)),
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :new),
                s(:args),
                s(:send,
                  s(:lvar, :q), :<<,
                  s(:lvar, :i))))),
          s(:while,
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :prod_threads), :select),
                  s(:args,
                    s(:arg, :t)),
                  s(:send,
                    s(:send,
                      s(:lvar, :t), :status), :==,
                    s(:str, "sleep"))), :count), :<,
              s(:int, 3)),
            s(:send, nil, :sleep,
              s(:float, 0.01))),
          s(:send,
            s(:lvar, :q), :close),
          s(:lvasgn, :ary,
            s(:array)),
          s(:until,
            s(:send,
              s(:lvar, :q), :empty?),
            s(:send,
              s(:lvar, :ary), :<<,
              s(:send,
                s(:lvar, :q), :pop))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :q), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :ary), :size)),
          s(:block,
            s(:send,
              s(:lvar, :ary), :each),
            s(:args,
              s(:arg, :e)),
            s(:send, nil, :assert,
              s(:send,
                s(:array,
                  s(:int, 0),
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3),
                  s(:int, 4),
                  s(:int, 5)), :include?,
                s(:lvar, :e)))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :q), :pop)),
          s(:block,
            s(:send,
              s(:lvar, :prod_threads), :each),
            s(:args,
              s(:arg, :t)),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:lvar, :t), :join),
                s(:resbody, nil,
                  s(:lvasgn, :e), nil), nil))))),
      s(:def, :test_one_element_sized_queue,
        s(:args),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :SizedQueue), :new,
              s(:int, 1))),
          s(:lvasgn, :t,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:send,
                s(:lvar, :q), :pop))),
          s(:send,
            s(:lvar, :q), :close),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :t), :value)))),
      s(:def, :test_close_twice,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:block,
                s(:send, nil, :lambda),
                s(:args),
                s(:send,
                  s(:const, nil, :Queue), :new)),
              s(:block,
                s(:send, nil, :lambda),
                s(:args),
                s(:send,
                  s(:const, nil, :SizedQueue), :new,
                  s(:int, 3)))), :each),
          s(:args,
            s(:arg, :qcreate)),
          s(:begin,
            s(:lvasgn, :q,
              s(:send,
                s(:lvar, :qcreate), :[])),
            s(:send,
              s(:lvar, :q), :close),
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:const, nil, :ClosedQueueError)),
              s(:args),
              s(:send,
                s(:lvar, :q), :close))))),
      s(:def, :test_queue_close_multi_multi,
        s(:args),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :SizedQueue), :new,
              s(:send, nil, :rand,
                s(:irange,
                  s(:int, 800),
                  s(:int, 1200))))),
          s(:lvasgn, :count_items,
            s(:send, nil, :rand,
              s(:irange,
                s(:int, 3000),
                s(:int, 5000)))),
          s(:lvasgn, :count_producers,
            s(:send, nil, :rand,
              s(:irange,
                s(:int, 10),
                s(:int, 20)))),
          s(:lvasgn, :producers,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :count_producers), :times), :map),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :new),
                s(:args),
                s(:begin,
                  s(:send, nil, :sleep,
                    s(:send,
                      s(:send, nil, :rand), :/,
                      s(:int, 100))),
                  s(:block,
                    s(:send,
                      s(:lvar, :count_items), :times),
                    s(:args,
                      s(:arg, :i)),
                    s(:send,
                      s(:lvar, :q), :<<,
                      s(:array,
                        s(:lvar, :i),
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :i)),
                          s(:str, " for "),
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:const, nil, :Thread), :current), :inspect)))))))))),
          s(:lvasgn, :consumers,
            s(:block,
              s(:send,
                s(:send,
                  s(:send, nil, :rand,
                    s(:irange,
                      s(:int, 7),
                      s(:int, 12))), :times), :map),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :new),
                s(:args),
                s(:begin,
                  s(:lvasgn, :count,
                    s(:int, 0)),
                  s(:while,
                    s(:lvasgn, :e,
                      s(:send,
                        s(:lvar, :q), :pop)),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :i),
                          s(:lvasgn, :st)),
                        s(:lvar, :e)),
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:lvar, :i), :is_a?,
                            s(:const, nil, :Fixnum)),
                          s(:send,
                            s(:lvar, :st), :is_a?,
                            s(:const, nil, :String))),
                        s(:op_asgn,
                          s(:lvasgn, :count), :+,
                          s(:int, 1)), nil))),
                  s(:lvar, :count))))),
          s(:send, nil, :assert,
            s(:block,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:lvar, :consumers), :+,
                    s(:lvar, :producers))), :all?),
              s(:args,
                s(:arg, :thr)),
              s(:send,
                s(:send,
                  s(:lvar, :thr), :status), :=~,
                s(:regexp,
                  s(:str, "\\Arun|sleep\\Z"),
                  s(:regopt)))),
            s(:str, "no threads runnning")),
          s(:lvasgn, :counter,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:until,
                s(:and,
                  s(:send,
                    s(:lvar, :q), :closed?),
                  s(:send,
                    s(:lvar, :q), :empty?)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :q), :size), :>,
                      s(:send,
                        s(:lvar, :q), :max)),
                    s(:send, nil, :raise), nil),
                  s(:send, nil, :sleep,
                    s(:float, 0.01)))))),
          s(:send,
            s(:lvar, :producers), :each,
            s(:block_pass,
              s(:sym, :join))),
          s(:send,
            s(:lvar, :q), :close),
          s(:lvasgn, :all_items_count,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :consumers), :map),
                s(:args,
                  s(:arg, :thr)),
                s(:send,
                  s(:lvar, :thr), :value)), :inject,
              s(:sym, :+))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :count_items), :*,
              s(:lvar, :count_producers)),
            s(:lvar, :all_items_count)),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:lvar, :counter), :join)))))))
