s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:class,
    s(:const, nil, :TestTempfile),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :initialize,
        s(:args,
          s(:restarg)),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@tempfile,
            s(:nil)))),
      s(:def, :tempfile,
        s(:args,
          s(:restarg, :args),
          s(:blockarg, :block)),
        s(:begin,
          s(:lvasgn, :t,
            s(:send,
              s(:const, nil, :Tempfile), :new,
              s(:splat,
                s(:lvar, :args)),
              s(:block_pass,
                s(:lvar, :block)))),
          s(:ivasgn, :@tempfile,
            s(:begin,
              s(:if,
                s(:lvar, :block), nil,
                s(:lvar, :t)))))),
      s(:def, :teardown,
        s(:args),
        s(:if,
          s(:ivar, :@tempfile),
          s(:send,
            s(:ivar, :@tempfile), :close!), nil)),
      s(:def, :test_basic,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :tempfile,
              s(:str, "foo"))),
          s(:lvasgn, :path,
            s(:send,
              s(:lvar, :t), :path)),
          s(:send,
            s(:lvar, :t), :write,
            s(:str, "hello world")),
          s(:send,
            s(:lvar, :t), :close),
          s(:send, nil, :assert_equal,
            s(:str, "hello world"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:lvar, :path))))),
      s(:def, :test_saves_in_dir_tmpdir_by_default,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :tempfile,
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Dir), :tmpdir),
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:send,
                s(:lvar, :t), :path))),
          s(:lvasgn, :bug3733,
            s(:str, "[ruby-dev:42089]")),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :SecurityError),
              s(:lvar, :bug3733)),
            s(:args),
            s(:send,
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:begin,
                  s(:gvasgn, :$SAFE,
                    s(:int, 1)),
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:send,
                      s(:const, nil, :Dir), :tmpdir)))), :call)))),
      s(:def, :test_saves_in_given_directory,
        s(:args),
        s(:begin,
          s(:lvasgn, :subdir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Dir), :tmpdir),
              s(:dstr,
                s(:str, "tempfile-test-"),
                s(:begin,
                  s(:send, nil, :rand))))),
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:lvar, :subdir)),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :tempfile,
                  s(:send,
                    s(:const, nil, :Tempfile), :new,
                    s(:str, "foo"),
                    s(:lvar, :subdir))),
                s(:send,
                  s(:lvar, :tempfile), :close),
                s(:kwbegin,
                  s(:ensure,
                    s(:send, nil, :assert_equal,
                      s(:lvar, :subdir),
                      s(:send,
                        s(:const, nil, :File), :dirname,
                        s(:send,
                          s(:lvar, :tempfile), :path))),
                    s(:send,
                      s(:lvar, :tempfile), :unlink)))),
              s(:send,
                s(:const, nil, :Dir), :rmdir,
                s(:lvar, :subdir)))))),
      s(:def, :test_basename,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :tempfile,
              s(:str, "foo"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^foo"),
              s(:regopt)),
            s(:send,
              s(:const, nil, :File), :basename,
              s(:send,
                s(:lvar, :t), :path))))),
      s(:def, :test_default_basename,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :tempfile)),
          s(:send,
            s(:send, nil, :assert_file), :exist?,
            s(:send,
              s(:lvar, :t), :path)))),
      s(:def, :test_basename_with_suffix,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :tempfile,
              s(:array,
                s(:str, "foo"),
                s(:str, ".txt")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^foo"),
              s(:regopt)),
            s(:send,
              s(:const, nil, :File), :basename,
              s(:send,
                s(:lvar, :t), :path))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\.txt$"),
              s(:regopt)),
            s(:send,
              s(:const, nil, :File), :basename,
              s(:send,
                s(:lvar, :t), :path))))),
      s(:def, :test_unlink,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :tempfile,
              s(:str, "foo"))),
          s(:lvasgn, :path,
            s(:send,
              s(:lvar, :t), :path)),
          s(:send,
            s(:lvar, :t), :close),
          s(:send,
            s(:send, nil, :assert_file), :exist?,
            s(:lvar, :path)),
          s(:send,
            s(:lvar, :t), :unlink),
          s(:send,
            s(:send, nil, :assert_file), :not_exist?,
            s(:lvar, :path)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :t), :path)))),
      s(:def, :test_unlink_silently_fails_on_windows,
        s(:args),
        s(:begin,
          s(:lvasgn, :tempfile,
            s(:send, nil, :tempfile,
              s(:str, "foo"))),
          s(:lvasgn, :path,
            s(:send,
              s(:lvar, :tempfile), :path)),
          s(:kwbegin,
            s(:ensure,
              s(:block,
                s(:send, nil, :assert_nothing_raised),
                s(:args),
                s(:send,
                  s(:lvar, :tempfile), :unlink)),
              s(:begin,
                s(:send,
                  s(:lvar, :tempfile), :close),
                s(:if,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:lvar, :path)),
                  s(:send,
                    s(:const, nil, :File), :unlink,
                    s(:lvar, :path)), nil)))))),
      s(:if,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "mswin|mingw"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM)), nil,
        s(:def, :test_unlink_before_close_works_on_posix_systems,
          s(:args),
          s(:begin,
            s(:lvasgn, :tempfile,
              s(:send, nil, :tempfile,
                s(:str, "foo"))),
            s(:kwbegin,
              s(:ensure,
                s(:begin,
                  s(:lvasgn, :path,
                    s(:send,
                      s(:lvar, :tempfile), :path)),
                  s(:send,
                    s(:lvar, :tempfile), :unlink),
                  s(:send,
                    s(:send, nil, :assert_file), :not_exist?,
                    s(:lvar, :path)),
                  s(:send,
                    s(:lvar, :tempfile), :write,
                    s(:str, "hello ")),
                  s(:send,
                    s(:lvar, :tempfile), :write,
                    s(:str, "world\n")),
                  s(:send,
                    s(:lvar, :tempfile), :rewind),
                  s(:send, nil, :assert_equal,
                    s(:str, "hello world\n"),
                    s(:send,
                      s(:lvar, :tempfile), :read))),
                s(:begin,
                  s(:send,
                    s(:lvar, :tempfile), :close),
                  s(:send,
                    s(:lvar, :tempfile), :unlink))))))),
      s(:def, :test_close_and_close_p,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :tempfile,
              s(:str, "foo"))),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :t),
            s(:sym, :closed?)),
          s(:send,
            s(:lvar, :t), :close),
          s(:send, nil, :assert_predicate,
            s(:lvar, :t),
            s(:sym, :closed?)))),
      s(:def, :test_close_with_unlink_now_true_works,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :tempfile,
              s(:str, "foo"))),
          s(:lvasgn, :path,
            s(:send,
              s(:lvar, :t), :path)),
          s(:send,
            s(:lvar, :t), :close,
            s(:true)),
          s(:send, nil, :assert_predicate,
            s(:lvar, :t),
            s(:sym, :closed?)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :t), :path)),
          s(:send,
            s(:send, nil, :assert_file), :not_exist?,
            s(:lvar, :path)))),
      s(:if,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "mswin|mingw"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM)), nil,
        s(:def, :test_close_with_unlink_now_true_does_not_unlink_if_already_unlinked,
          s(:args),
          s(:begin,
            s(:lvasgn, :t,
              s(:send, nil, :tempfile,
                s(:str, "foo"))),
            s(:lvasgn, :path,
              s(:send,
                s(:lvar, :t), :path)),
            s(:send,
              s(:lvar, :t), :unlink),
            s(:send,
              s(:send,
                s(:const, nil, :File), :open,
                s(:lvar, :path),
                s(:str, "w")), :close),
            s(:kwbegin,
              s(:ensure,
                s(:begin,
                  s(:send,
                    s(:lvar, :t), :close,
                    s(:true)),
                  s(:send,
                    s(:send, nil, :assert_file), :exist?,
                    s(:lvar, :path))),
                s(:rescue,
                  s(:send,
                    s(:const, nil, :File), :unlink,
                    s(:lvar, :path)),
                  s(:resbody, nil, nil,
                    s(:nil)), nil)))))),
      s(:def, :test_close_bang_works,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :tempfile,
              s(:str, "foo"))),
          s(:lvasgn, :path,
            s(:send,
              s(:lvar, :t), :path)),
          s(:send,
            s(:lvar, :t), :close!),
          s(:send, nil, :assert_predicate,
            s(:lvar, :t),
            s(:sym, :closed?)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :t), :path)),
          s(:send,
            s(:send, nil, :assert_file), :not_exist?,
            s(:lvar, :path)))),
      s(:if,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "mswin|mingw"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM)), nil,
        s(:def, :test_close_bang_does_not_unlink_if_already_unlinked,
          s(:args),
          s(:begin,
            s(:lvasgn, :t,
              s(:send, nil, :tempfile,
                s(:str, "foo"))),
            s(:lvasgn, :path,
              s(:send,
                s(:lvar, :t), :path)),
            s(:send,
              s(:lvar, :t), :unlink),
            s(:send,
              s(:send,
                s(:const, nil, :File), :open,
                s(:lvar, :path),
                s(:str, "w")), :close),
            s(:kwbegin,
              s(:ensure,
                s(:begin,
                  s(:send,
                    s(:lvar, :t), :close!),
                  s(:send,
                    s(:send, nil, :assert_file), :exist?,
                    s(:lvar, :path))),
                s(:rescue,
                  s(:send,
                    s(:const, nil, :File), :unlink,
                    s(:lvar, :path)),
                  s(:resbody, nil, nil,
                    s(:nil)), nil)))))),
      s(:if,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "mswin|mingw"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM)), nil,
        s(:def, :test_finalizer_does_not_unlink_if_already_unlinked,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_in_out_err,
                s(:str, "-rtempfile"),
                s(:dstr,
                  s(:str, "file = Tempfile.new('foo')\n"),
                  s(:str, "path = file.path\n"),
                  s(:str, "puts path\n"),
                  s(:str, "file.close!\n"),
                  s(:str, "File.open(path, \"w\").close\n"))),
              s(:args,
                s(:mlhs,
                  s(:arg, :filename),
                  s(:restarg)),
                s(:mlhs,
                  s(:arg, :error),
                  s(:restarg))),
              s(:begin,
                s(:send,
                  s(:send, nil, :assert_file), :exist?,
                  s(:lvar, :filename)),
                s(:send,
                  s(:const, nil, :File), :unlink,
                  s(:lvar, :filename)),
                s(:send, nil, :assert_nil,
                  s(:lvar, :error)))),
            s(:block,
              s(:send, nil, :assert_in_out_err,
                s(:str, "-rtempfile"),
                s(:dstr,
                  s(:str, "file = Tempfile.new('foo')\n"),
                  s(:str, "path = file.path\n"),
                  s(:str, "file.unlink\n"),
                  s(:str, "puts path\n"),
                  s(:str, "File.open(path, \"w\").close\n"))),
              s(:args,
                s(:mlhs,
                  s(:arg, :filename),
                  s(:restarg)),
                s(:mlhs,
                  s(:arg, :error),
                  s(:restarg))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :filename), :empty?), :!),
                  s(:begin,
                    s(:send,
                      s(:send, nil, :assert_file), :exist?,
                      s(:lvar, :filename)),
                    s(:send,
                      s(:const, nil, :File), :unlink,
                      s(:lvar, :filename))), nil),
                s(:send, nil, :assert_nil,
                  s(:lvar, :error))))))),
      s(:def, :test_close_does_not_make_path_nil,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :tempfile,
              s(:str, "foo"))),
          s(:send,
            s(:lvar, :t), :close),
          s(:send, nil, :assert_not_nil,
            s(:send,
              s(:lvar, :t), :path)))),
      s(:def, :test_close_flushes_buffer,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :tempfile,
              s(:str, "foo"))),
          s(:send,
            s(:lvar, :t), :write,
            s(:str, "hello")),
          s(:send,
            s(:lvar, :t), :close),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:const, nil, :File), :size,
              s(:send,
                s(:lvar, :t), :path))))),
      s(:def, :test_tempfile_is_unlinked_when_ruby_exits,
        s(:args),
        s(:block,
          s(:send, nil, :assert_in_out_err,
            s(:str, "-rtempfile"),
            s(:str, "puts Tempfile.new('foo').path\n")),
          s(:args,
            s(:mlhs,
              s(:arg, :filename)),
            s(:mlhs,
              s(:arg, :error))),
          s(:begin,
            s(:send,
              s(:send,
                s(:send, nil, :assert_file), :for,
                s(:str, "tempfile must not be exist after GC.")), :not_exist?,
              s(:lvar, :filename)),
            s(:send, nil, :assert_nil,
              s(:lvar, :error))))),
      s(:def, :test_tempfile_finalizer_does_not_run_if_unlinked,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8768,
            s(:str, "[ruby-core:56521] [Bug #8768]")),
          s(:lvasgn, :args,
            s(:array,
              s(:str, "--disable-gems"),
              s(:str, "-rtempfile"))),
          s(:block,
            s(:send, nil, :assert_in_out_err,
              s(:lvar, :args),
              s(:dstr,
                s(:str, "      tmp = Tempfile.new('foo')\n"),
                s(:str, "      puts tmp.path\n"),
                s(:str, "      tmp.close\n"),
                s(:str, "      tmp.unlink\n"),
                s(:str, "      $DEBUG = true\n"))),
            s(:args,
              s(:mlhs,
                s(:arg, :filename)),
              s(:mlhs,
                s(:arg, :error))),
            s(:begin,
              s(:send,
                s(:send, nil, :assert_file), :not_exist?,
                s(:lvar, :filename)),
              s(:send, nil, :assert_nil,
                s(:lvar, :error),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :bug8768)),
                  s(:str, " we used to get a confusing 'removing ...done' here"))))))),
      s(:def, :test_size_flushes_buffer_before_determining_file_size,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :tempfile,
              s(:str, "foo"))),
          s(:send,
            s(:lvar, :t), :write,
            s(:str, "hello")),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:const, nil, :File), :size,
              s(:send,
                s(:lvar, :t), :path))),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :t), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:const, nil, :File), :size,
              s(:send,
                s(:lvar, :t), :path))))),
      s(:def, :test_size_works_if_file_is_closed,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :tempfile,
              s(:str, "foo"))),
          s(:send,
            s(:lvar, :t), :write,
            s(:str, "hello")),
          s(:send,
            s(:lvar, :t), :close),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:lvar, :t), :size)))),
      s(:def, :test_concurrency,
        s(:args),
        s(:begin,
          s(:lvasgn, :threads,
            s(:array)),
          s(:lvasgn, :tempfiles,
            s(:array)),
          s(:lvasgn, :lock,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:lvasgn, :cond,
            s(:send,
              s(:const, nil, :ConditionVariable), :new)),
          s(:lvasgn, :start,
            s(:false)),
          s(:block,
            s(:send,
              s(:int, 4), :times),
            s(:args),
            s(:send,
              s(:lvar, :threads), :<<,
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :new),
                s(:args),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:lvar, :lock), :synchronize),
                    s(:args),
                    s(:while,
                      s(:send,
                        s(:lvar, :start), :!),
                      s(:send,
                        s(:lvar, :cond), :wait,
                        s(:lvar, :lock)))),
                  s(:lvasgn, :result,
                    s(:array)),
                  s(:block,
                    s(:send,
                      s(:int, 30), :times),
                    s(:args),
                    s(:send,
                      s(:lvar, :result), :<<,
                      s(:send,
                        s(:const, nil, :Tempfile), :new,
                        s(:str, "foo")))),
                  s(:send,
                    s(:send,
                      s(:const, nil, :Thread), :current), :[]=,
                    s(:sym, :result),
                    s(:lvar, :result)))))),
          s(:block,
            s(:send,
              s(:lvar, :lock), :synchronize),
            s(:args),
            s(:begin,
              s(:lvasgn, :start,
                s(:true)),
              s(:send,
                s(:lvar, :cond), :broadcast))),
          s(:block,
            s(:send,
              s(:lvar, :threads), :each),
            s(:args,
              s(:arg, :thread)),
            s(:begin,
              s(:send,
                s(:lvar, :thread), :join),
              s(:op_asgn,
                s(:lvasgn, :tempfiles), :|,
                s(:send,
                  s(:lvar, :thread), :[],
                  s(:sym, :result))))),
          s(:lvasgn, :filenames,
            s(:block,
              s(:send,
                s(:lvar, :tempfiles), :map),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:lvar, :f), :path))),
          s(:kwbegin,
            s(:ensure,
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :filenames), :size),
                s(:send,
                  s(:send,
                    s(:lvar, :filenames), :uniq), :size)),
              s(:block,
                s(:send,
                  s(:lvar, :tempfiles), :each),
                s(:args,
                  s(:arg, :tempfile)),
                s(:send,
                  s(:lvar, :tempfile), :close!)))))),
      s(:module,
        s(:const, nil, :M), nil),
      s(:def, :test_extend,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send, nil, :tempfile,
              s(:str, "foo"))),
          s(:send,
            s(:lvar, :o), :extend,
            s(:const, nil, :M)),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :M), :===,
              s(:lvar, :o)),
            s(:str, "[ruby-dev:32932]")))),
      s(:def, :test_tempfile_encoding_nooption,
        s(:args),
        s(:begin,
          s(:lvasgn, :default_external,
            s(:send,
              s(:const, nil, :Encoding), :default_external)),
          s(:lvasgn, :t,
            s(:send, nil, :tempfile,
              s(:str, "TEST"))),
          s(:send,
            s(:lvar, :t), :write,
            s(:str, "松江")),
          s(:send,
            s(:lvar, :t), :rewind),
          s(:send, nil, :assert_equal,
            s(:lvar, :default_external),
            s(:send,
              s(:send,
                s(:lvar, :t), :read), :encoding)))),
      s(:def, :test_tempfile_encoding_ascii8bit,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :tempfile,
              s(:str, "TEST"),
              s(:hash,
                s(:pair,
                  s(:sym, :encoding),
                  s(:str, "ascii-8bit"))))),
          s(:send,
            s(:lvar, :t), :write,
            s(:str, "松江")),
          s(:send,
            s(:lvar, :t), :rewind),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :ASCII_8BIT),
            s(:send,
              s(:send,
                s(:lvar, :t), :read), :encoding)))),
      s(:def, :test_tempfile_encoding_ascii8bit2,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :tempfile,
              s(:str, "TEST"),
              s(:send,
                s(:const, nil, :Dir), :tmpdir),
              s(:hash,
                s(:pair,
                  s(:sym, :encoding),
                  s(:str, "ascii-8bit"))))),
          s(:send,
            s(:lvar, :t), :write,
            s(:str, "松江")),
          s(:send,
            s(:lvar, :t), :rewind),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :ASCII_8BIT),
            s(:send,
              s(:send,
                s(:lvar, :t), :read), :encoding)))),
      s(:def, :test_binmode,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :tempfile,
              s(:str, "TEST"),
              s(:hash,
                s(:pair,
                  s(:sym, :mode),
                  s(:const,
                    s(:const, nil, :IO), :BINARY))))),
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :IO), :BINARY), :nonzero?),
            s(:begin,
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :t), :binmode?)),
              s(:send,
                s(:lvar, :t), :open),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :t), :binmode?),
                s(:str, "binmode after reopen"))),
            s(:send, nil, :assert_equal,
              s(:int, 384),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :t), :stat), :mode), :&,
                s(:int, 511)))))),
      s(:def, :test_create_with_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :path,
            s(:nil)),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:str, "tempfile-create")),
            s(:args,
              s(:arg, :f)),
            s(:begin,
              s(:lvasgn, :path,
                s(:send,
                  s(:lvar, :f), :path)),
              s(:send, nil, :assert,
                s(:send,
                  s(:const, nil, :File), :exist?,
                  s(:lvar, :path))))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :path)), :!)))),
      s(:def, :test_create_without_block,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :path,
              s(:nil)),
            s(:lvasgn, :f,
              s(:send,
                s(:const, nil, :Tempfile), :create,
                s(:str, "tempfile-create"))),
            s(:lvasgn, :path,
              s(:send,
                s(:lvar, :f), :path)),
            s(:send, nil, :assert,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :path))),
            s(:send,
              s(:lvar, :f), :close),
            s(:send, nil, :assert,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :path)))),
          s(:begin,
            s(:if,
              s(:and,
                s(:lvar, :f),
                s(:send,
                  s(:send,
                    s(:lvar, :f), :closed?), :!)),
              s(:send,
                s(:lvar, :f), :close), nil),
            s(:if,
              s(:lvar, :path),
              s(:send,
                s(:const, nil, :File), :unlink,
                s(:lvar, :path)), nil)))))))
