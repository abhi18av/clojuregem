s(:module,
  s(:const, nil, :Test),
  s(:module,
    s(:const, nil, :Unit),
    s(:module,
      s(:const, nil, :FileAssertions),
      s(:begin,
        s(:def, :assert_same_file,
          s(:args,
            s(:arg, :from),
            s(:arg, :to),
            s(:optarg, :message,
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :File), :read,
              s(:lvar, :from)),
            s(:send,
              s(:const, nil, :File), :read,
              s(:lvar, :to)),
            s(:dstr,
              s(:str, "file "),
              s(:begin,
                s(:lvar, :from)),
              s(:str, " != "),
              s(:begin,
                s(:lvar, :to)),
              s(:begin,
                s(:and,
                  s(:lvar, :message),
                  s(:str, ": "))),
              s(:begin,
                s(:or,
                  s(:lvar, :message),
                  s(:str, "")))))),
        s(:def, :assert_same_entry,
          s(:args,
            s(:arg, :from),
            s(:arg, :to),
            s(:optarg, :message,
              s(:nil))),
          s(:begin,
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :File), :stat,
                s(:lvar, :from))),
            s(:lvasgn, :b,
              s(:send,
                s(:const, nil, :File), :stat,
                s(:lvar, :to))),
            s(:lvasgn, :msg,
              s(:dstr,
                s(:begin,
                  s(:and,
                    s(:lvar, :message),
                    s(:str, ": "))),
                s(:begin,
                  s(:or,
                    s(:lvar, :message),
                    s(:str, ""))))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :a), :mode),
              s(:send,
                s(:lvar, :b), :mode),
              s(:dstr,
                s(:str, "mode "),
                s(:begin,
                  s(:send,
                    s(:lvar, :a), :mode)),
                s(:str, " != "),
                s(:begin,
                  s(:send,
                    s(:lvar, :b), :mode)),
                s(:begin,
                  s(:lvar, :msg)))),
            s(:send, nil, :assert_equal_timestamp,
              s(:send,
                s(:lvar, :a), :mtime),
              s(:send,
                s(:lvar, :b), :mtime),
              s(:dstr,
                s(:str, "mtime "),
                s(:begin,
                  s(:send,
                    s(:lvar, :a), :mtime)),
                s(:str, " != "),
                s(:begin,
                  s(:send,
                    s(:lvar, :b), :mtime)),
                s(:begin,
                  s(:lvar, :msg)))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :a), :uid),
              s(:send,
                s(:lvar, :b), :uid),
              s(:dstr,
                s(:str, "uid "),
                s(:begin,
                  s(:send,
                    s(:lvar, :a), :uid)),
                s(:str, " != "),
                s(:begin,
                  s(:send,
                    s(:lvar, :b), :uid)),
                s(:begin,
                  s(:lvar, :msg)))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :a), :gid),
              s(:send,
                s(:lvar, :b), :gid),
              s(:dstr,
                s(:str, "gid "),
                s(:begin,
                  s(:send,
                    s(:lvar, :a), :gid)),
                s(:str, " != "),
                s(:begin,
                  s(:send,
                    s(:lvar, :b), :gid)),
                s(:begin,
                  s(:lvar, :msg)))))),
        s(:def, :assert_file_exist,
          s(:args,
            s(:arg, :path),
            s(:optarg, :message,
              s(:nil))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :path)),
            s(:dstr,
              s(:str, "file not exist: "),
              s(:begin,
                s(:lvar, :path)),
              s(:begin,
                s(:and,
                  s(:lvar, :message),
                  s(:str, ": "))),
              s(:begin,
                s(:or,
                  s(:lvar, :message),
                  s(:str, "")))))),
        s(:def, :assert_file_not_exist,
          s(:args,
            s(:arg, :path),
            s(:optarg, :message,
              s(:nil))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :path)), :!),
            s(:dstr,
              s(:str, "file exist: "),
              s(:begin,
                s(:lvar, :path)),
              s(:begin,
                s(:and,
                  s(:lvar, :message),
                  s(:str, ": "))),
              s(:begin,
                s(:or,
                  s(:lvar, :message),
                  s(:str, "")))))),
        s(:def, :assert_directory,
          s(:args,
            s(:arg, :path),
            s(:optarg, :message,
              s(:nil))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :directory?,
              s(:lvar, :path)),
            s(:dstr,
              s(:str, "is not directory: "),
              s(:begin,
                s(:lvar, :path)),
              s(:begin,
                s(:and,
                  s(:lvar, :message),
                  s(:str, ": "))),
              s(:begin,
                s(:or,
                  s(:lvar, :message),
                  s(:str, "")))))),
        s(:def, :assert_symlink,
          s(:args,
            s(:arg, :path),
            s(:optarg, :message,
              s(:nil))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :symlink?,
              s(:lvar, :path)),
            s(:dstr,
              s(:str, "is not a symlink: "),
              s(:begin,
                s(:lvar, :path)),
              s(:begin,
                s(:and,
                  s(:lvar, :message),
                  s(:str, ": "))),
              s(:begin,
                s(:or,
                  s(:lvar, :message),
                  s(:str, "")))))),
        s(:def, :assert_not_symlink,
          s(:args,
            s(:arg, :path),
            s(:optarg, :message,
              s(:nil))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :File), :symlink?,
                s(:lvar, :path)), :!),
            s(:dstr,
              s(:str, "is a symlink: "),
              s(:begin,
                s(:lvar, :path)),
              s(:begin,
                s(:and,
                  s(:lvar, :message),
                  s(:str, ": "))),
              s(:begin,
                s(:or,
                  s(:lvar, :message),
                  s(:str, "")))))),
        s(:def, :assert_equal_time,
          s(:args,
            s(:arg, :expected),
            s(:arg, :actual),
            s(:optarg, :message,
              s(:nil))),
          s(:begin,
            s(:lvasgn, :expected_str,
              s(:send,
                s(:lvar, :expected), :to_s)),
            s(:lvasgn, :actual_str,
              s(:send,
                s(:lvar, :actual), :to_s)),
            s(:if,
              s(:send,
                s(:lvar, :expected_str), :==,
                s(:lvar, :actual_str)),
              s(:begin,
                s(:send,
                  s(:lvar, :expected_str), :<<,
                  s(:dstr,
                    s(:str, " (nsec="),
                    s(:begin,
                      s(:send,
                        s(:lvar, :expected), :nsec)),
                    s(:str, ")"))),
                s(:send,
                  s(:lvar, :actual_str), :<<,
                  s(:dstr,
                    s(:str, " (nsec="),
                    s(:begin,
                      s(:send,
                        s(:lvar, :actual), :nsec)),
                    s(:str, ")")))), nil),
            s(:lvasgn, :full_message,
              s(:send, nil, :build_message,
                s(:lvar, :message),
                s(:dstr,
                  s(:str, "<"),
                  s(:begin,
                    s(:lvar, :expected_str)),
                  s(:str, "> expected but was\n"),
                  s(:str, "<"),
                  s(:begin,
                    s(:lvar, :actual_str)),
                  s(:str, ">.\n")))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:lvar, :actual),
              s(:lvar, :full_message)))),
        s(:def, :assert_equal_timestamp,
          s(:args,
            s(:arg, :expected),
            s(:arg, :actual),
            s(:optarg, :message,
              s(:nil))),
          s(:begin,
            s(:lvasgn, :expected_str,
              s(:send,
                s(:lvar, :expected), :to_s)),
            s(:lvasgn, :actual_str,
              s(:send,
                s(:lvar, :actual), :to_s)),
            s(:if,
              s(:send,
                s(:lvar, :expected_str), :==,
                s(:lvar, :actual_str)),
              s(:begin,
                s(:send,
                  s(:lvar, :expected_str), :<<,
                  s(:dstr,
                    s(:str, " (nsec="),
                    s(:begin,
                      s(:send,
                        s(:lvar, :expected), :nsec)),
                    s(:str, ")"))),
                s(:send,
                  s(:lvar, :actual_str), :<<,
                  s(:dstr,
                    s(:str, " (nsec="),
                    s(:begin,
                      s(:send,
                        s(:lvar, :actual), :nsec)),
                    s(:str, ")")))), nil),
            s(:lvasgn, :full_message,
              s(:send, nil, :build_message,
                s(:lvar, :message),
                s(:dstr,
                  s(:str, "<"),
                  s(:begin,
                    s(:lvar, :expected_str)),
                  s(:str, "> expected but was\n"),
                  s(:str, "<"),
                  s(:begin,
                    s(:lvar, :actual_str)),
                  s(:str, ">.\n")))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :expected), :tv_sec),
              s(:send,
                s(:lvar, :actual), :tv_sec),
              s(:lvar, :full_message)))),
        s(:def, :assert_filemode,
          s(:args,
            s(:arg, :expected),
            s(:arg, :file),
            s(:optarg, :message,
              s(:nil)),
            s(:kwoptarg, :mask,
              s(:int, 4095))),
          s(:begin,
            s(:lvasgn, :width,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:str, "%o"), :%,
                    s(:lvar, :mask))), :size)),
            s(:lvasgn, :actual,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :stat,
                    s(:lvar, :file)), :mode), :&,
                s(:lvar, :mask))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :expected), :==,
                s(:lvar, :actual)),
              s(:dstr,
                s(:str, "File mode of \""),
                s(:begin,
                  s(:lvar, :file)),
                s(:str, "\" unexpected:\n"),
                s(:str, " Expected: <"),
                s(:begin,
                  s(:send,
                    s(:str, "%0*o"), :%,
                    s(:array,
                      s(:lvar, :width),
                      s(:lvar, :expected)))),
                s(:str, ">\n"),
                s(:str, "   Actual: <"),
                s(:begin,
                  s(:send,
                    s(:str, "%0*o"), :%,
                    s(:array,
                      s(:lvar, :width),
                      s(:lvar, :actual)))),
                s(:str, ">\n"))))),
        s(:def, :assert_equal_filemode,
          s(:args,
            s(:arg, :file1),
            s(:arg, :file2),
            s(:optarg, :message,
              s(:nil)),
            s(:kwoptarg, :mask,
              s(:int, 4095))),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :mode1),
                s(:lvasgn, :mode2)),
              s(:block,
                s(:send,
                  s(:array,
                    s(:lvar, :file1),
                    s(:lvar, :file2)), :map),
                s(:args,
                  s(:arg, :file)),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :stat,
                      s(:lvar, :file)), :mode), :&,
                  s(:lvar, :mask)))),
            s(:lvasgn, :width,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:str, "%o"), :%,
                    s(:lvar, :mask))), :size)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :mode1), :==,
                s(:lvar, :mode2)),
              s(:dstr,
                s(:str, "File modes expected to be equal:\n"),
                s(:str, " <"),
                s(:begin,
                  s(:send,
                    s(:str, "%0*o"), :%,
                    s(:array,
                      s(:lvar, :width),
                      s(:lvar, :mode1)))),
                s(:str, ">: \""),
                s(:begin,
                  s(:lvar, :file1)),
                s(:str, "\"\n"),
                s(:str, " <"),
                s(:begin,
                  s(:send,
                    s(:str, "%0*o"), :%,
                    s(:array,
                      s(:lvar, :width),
                      s(:lvar, :mode2)))),
                s(:str, ">: \""),
                s(:begin,
                  s(:lvar, :file2)),
                s(:str, "\"\n"))))),
        s(:def, :assert_ownership_group,
          s(:args,
            s(:arg, :expected),
            s(:arg, :file)),
          s(:begin,
            s(:lvasgn, :actual,
              s(:send,
                s(:send,
                  s(:const, nil, :File), :stat,
                  s(:lvar, :file)), :gid)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :expected), :==,
                s(:lvar, :actual)),
              s(:dstr,
                s(:str, "File group ownership of \""),
                s(:begin,
                  s(:lvar, :file)),
                s(:str, "\" unexpected:\n"),
                s(:str, " Expected: <"),
                s(:begin,
                  s(:lvar, :expected)),
                s(:str, ">\n"),
                s(:str, "   Actual: <"),
                s(:begin,
                  s(:lvar, :actual)),
                s(:str, ">\n"))))),
        s(:def, :assert_ownership_user,
          s(:args,
            s(:arg, :expected),
            s(:arg, :file)),
          s(:begin,
            s(:lvasgn, :actual,
              s(:send,
                s(:send,
                  s(:const, nil, :File), :stat,
                  s(:lvar, :file)), :uid)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :expected), :==,
                s(:lvar, :actual)),
              s(:dstr,
                s(:str, "File user ownership of \""),
                s(:begin,
                  s(:lvar, :file)),
                s(:str, "\" unexpected:\n"),
                s(:str, " Expected: <"),
                s(:begin,
                  s(:lvar, :expected)),
                s(:str, ">\n"),
                s(:str, "   Actual: <"),
                s(:begin,
                  s(:lvar, :actual)),
                s(:str, ">\n")))))))))
