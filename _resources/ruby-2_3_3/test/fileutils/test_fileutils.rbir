s(:begin,
  s(:send, nil, :require,
    s(:str, "fileutils")),
  s(:send, nil, :require,
    s(:str, "etc")),
  s(:send, nil, :require_relative,
    s(:str, "fileasserts")),
  s(:send, nil, :require,
    s(:str, "pathname")),
  s(:send, nil, :require,
    s(:str, "tmpdir")),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestFileUtils),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :TMPROOT,
        s(:dstr,
          s(:begin,
            s(:send,
              s(:const, nil, :Dir), :tmpdir)),
          s(:str, "/fileutils.rb."),
          s(:begin,
            s(:gvar, :$$)))),
      s(:send, nil, :include,
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :FileAssertions)),
      s(:def, :assert_output_lines,
        s(:args,
          s(:arg, :expected),
          s(:optarg, :fu,
            s(:self)),
          s(:optarg, :message,
            s(:nil))),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :old,
              s(:send,
                s(:lvar, :fu), :instance_variable_get,
                s(:sym, :@fileutils_output))),
            s(:block,
              s(:send,
                s(:const, nil, :IO), :pipe),
              s(:args,
                s(:arg, :read),
                s(:arg, :write)),
              s(:begin,
                s(:send,
                  s(:lvar, :fu), :instance_variable_set,
                  s(:sym, :@fileutils_output),
                  s(:lvar, :write)),
                s(:lvasgn, :th,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:send,
                      s(:lvar, :read), :read))),
                s(:lvasgn, :th2,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:begin,
                      s(:yield),
                      s(:send,
                        s(:lvar, :write), :close)))),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :th_value),
                    s(:lvasgn, :_)),
                  s(:send, nil, :assert_join_threads,
                    s(:array,
                      s(:lvar, :th),
                      s(:lvar, :th2)))),
                s(:lvasgn, :lines,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :th_value), :lines), :map),
                    s(:args,
                      s(:arg, :l)),
                    s(:send,
                      s(:lvar, :l), :chomp))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :expected),
                  s(:lvar, :lines))))),
          s(:if,
            s(:lvar, :old),
            s(:send,
              s(:lvar, :fu), :instance_variable_set,
              s(:sym, :@fileutils_output),
              s(:lvar, :old)), nil))),
      s(:lvasgn, :m,
        s(:block,
          s(:send,
            s(:const, nil, :Module), :new),
          s(:args),
          s(:begin,
            s(:def, :have_drive_letter?,
              s(:args),
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "mswin(?!ce)|mingw|bcc|emx"),
                  s(:regopt)),
                s(:const, nil, :RUBY_PLATFORM))),
            s(:def, :have_file_perm?,
              s(:args),
              s(:send,
                s(:regexp,
                  s(:str, "mswin|mingw|bcc|emx"),
                  s(:regopt)), :!~,
                s(:const, nil, :RUBY_PLATFORM))),
            s(:cvasgn, :@@have_symlink,
              s(:nil)),
            s(:def, :have_symlink?,
              s(:args),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:cvar, :@@have_symlink), :==,
                    s(:nil)),
                  s(:cvasgn, :@@have_symlink,
                    s(:send, nil, :check_have_symlink?)), nil),
                s(:cvar, :@@have_symlink))),
            s(:def, :check_have_symlink?,
              s(:args),
              s(:rescue,
                s(:send,
                  s(:const, nil, :File), :symlink,
                  s(:str, ""),
                  s(:str, "")),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :NotImplementedError),
                    s(:const,
                      s(:const, nil, :Errno), :EACCES)), nil,
                  s(:return,
                    s(:false))),
                s(:resbody, nil, nil,
                  s(:return,
                    s(:true))), nil)),
            s(:cvasgn, :@@have_hardlink,
              s(:nil)),
            s(:def, :have_hardlink?,
              s(:args),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:cvar, :@@have_hardlink), :==,
                    s(:nil)),
                  s(:cvasgn, :@@have_hardlink,
                    s(:send, nil, :check_have_hardlink?)), nil),
                s(:cvar, :@@have_hardlink))),
            s(:def, :check_have_hardlink?,
              s(:args),
              s(:rescue,
                s(:send,
                  s(:const, nil, :File), :link,
                  s(:nil),
                  s(:nil)),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :NotImplementedError)), nil,
                  s(:return,
                    s(:false))),
                s(:resbody, nil, nil,
                  s(:return,
                    s(:true))), nil)),
            s(:def, :root_in_posix?,
              s(:args),
              s(:if,
                s(:send,
                  s(:const, nil, :Process), :respond_to?,
                  s(:str, "uid")),
                s(:return,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Process), :uid), :==,
                    s(:int, 0))),
                s(:return,
                  s(:false)))),
            s(:def, :distinct_uids,
              s(:args,
                s(:optarg, :n,
                  s(:int, 2))),
              s(:ensure,
                s(:begin,
                  s(:if,
                    s(:lvasgn, :user,
                      s(:send,
                        s(:const, nil, :Etc), :getpwent)), nil,
                    s(:return)),
                  s(:lvasgn, :uids,
                    s(:array,
                      s(:send,
                        s(:lvar, :user), :uid))),
                  s(:while,
                    s(:lvasgn, :user,
                      s(:send,
                        s(:const, nil, :Etc), :getpwent)),
                    s(:begin,
                      s(:lvasgn, :uid,
                        s(:send,
                          s(:lvar, :user), :uid)),
                      s(:if,
                        s(:send,
                          s(:lvar, :uids), :include?,
                          s(:lvar, :uid)), nil,
                        s(:begin,
                          s(:send,
                            s(:lvar, :uids), :<<,
                            s(:lvar, :uid)),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:lvar, :uids), :size), :>=,
                              s(:lvar, :n)),
                            s(:break), nil))))),
                  s(:lvar, :uids)),
                s(:send,
                  s(:const, nil, :Etc), :endpwent))),
            s(:kwbegin,
              s(:ensure,
                s(:rescue,
                  s(:begin,
                    s(:lvasgn, :tmproot,
                      s(:const, nil, :TMPROOT)),
                    s(:if,
                      s(:send,
                        s(:const, nil, :File), :directory?,
                        s(:lvar, :tmproot)), nil,
                      s(:send,
                        s(:const, nil, :Dir), :mkdir,
                        s(:lvar, :tmproot))),
                    s(:block,
                      s(:send,
                        s(:const, nil, :Dir), :chdir,
                        s(:lvar, :tmproot)),
                      s(:args),
                      s(:begin,
                        s(:send,
                          s(:const, nil, :Dir), :mkdir,
                          s(:str, "\n")),
                        s(:send,
                          s(:const, nil, :Dir), :rmdir,
                          s(:str, "\n")))),
                    s(:def, :lf_in_path_allowed?,
                      s(:args),
                      s(:true))),
                  s(:resbody, nil, nil,
                    s(:def, :lf_in_path_allowed?,
                      s(:args),
                      s(:false))), nil),
                s(:kwbegin,
                  s(:rescue,
                    s(:send,
                      s(:const, nil, :Dir), :rmdir,
                      s(:lvar, :tmproot)),
                    s(:resbody, nil, nil,
                      s(:begin,
                        s(:send,
                          s(:const, nil, :STDERR), :puts,
                          s(:send,
                            s(:gvar, :$!), :inspect)),
                        s(:send,
                          s(:const, nil, :STDERR), :puts,
                          s(:send,
                            s(:send,
                              s(:const, nil, :Dir), :entries,
                              s(:lvar, :tmproot)), :inspect)))), nil))))))),
      s(:send, nil, :include,
        s(:lvar, :m)),
      s(:send, nil, :extend,
        s(:lvar, :m)),
      s(:send, nil, :include,
        s(:const, nil, :FileUtils)),
      s(:def, :check_singleton,
        s(:args,
          s(:arg, :name)),
        s(:send, nil, :assert_respond_to,
          s(:const,
            s(:cbase), :FileUtils),
          s(:lvar, :name))),
      s(:def, :my_rm_rf,
        s(:args,
          s(:arg, :path)),
        s(:if,
          s(:send,
            s(:const, nil, :File), :exist?,
            s(:str, "/bin/rm")),
          s(:send, nil, :system,
            s(:str, "/bin/rm"),
            s(:str, "-rf"),
            s(:lvar, :path)),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "mswin|mingw"),
                s(:regopt)),
              s(:const, nil, :RUBY_PLATFORM)),
            s(:send, nil, :system,
              s(:str, "rmdir"),
              s(:str, "/q/s"),
              s(:send,
                s(:lvar, :path), :gsub,
                s(:str, "/"),
                s(:str, "\\")),
              s(:hash,
                s(:pair,
                  s(:sym, :err),
                  s(:const,
                    s(:const, nil, :IO), :NULL)))),
            s(:send,
              s(:const, nil, :FileUtils), :rm_rf,
              s(:lvar, :path))))),
      s(:def, :mymkdir,
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:lvar, :path)),
          s(:if,
            s(:send, nil, :have_file_perm?),
            s(:send,
              s(:const, nil, :File), :chown,
              s(:nil),
              s(:send,
                s(:const, nil, :Process), :gid),
              s(:lvar, :path)), nil))),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@prevdir,
            s(:send,
              s(:const, nil, :Dir), :pwd)),
          s(:if,
            s(:send, nil, :have_file_perm?),
            s(:ivasgn, :@groups,
              s(:send,
                s(:const, nil, :Process), :groups)), nil),
          s(:lvasgn, :tmproot,
            s(:const, nil, :TMPROOT)),
          s(:if,
            s(:send,
              s(:const, nil, :File), :directory?,
              s(:lvar, :tmproot)), nil,
            s(:send, nil, :mymkdir,
              s(:lvar, :tmproot))),
          s(:send,
            s(:const, nil, :Dir), :chdir,
            s(:lvar, :tmproot)),
          s(:send, nil, :my_rm_rf,
            s(:str, "data")),
          s(:send, nil, :mymkdir,
            s(:str, "data")),
          s(:send, nil, :my_rm_rf,
            s(:str, "tmp")),
          s(:send, nil, :mymkdir,
            s(:str, "tmp")),
          s(:send, nil, :prepare_data_file))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :Dir), :chdir,
            s(:ivar, :@prevdir)),
          s(:send, nil, :my_rm_rf,
            s(:const, nil, :TMPROOT)))),
      s(:casgn, nil, :TARGETS,
        s(:array,
          s(:str, "data/a"),
          s(:str, "data/all"),
          s(:str, "data/random"),
          s(:str, "data/zero"))),
      s(:def, :prepare_data_file,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "data/a"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:block,
              s(:send,
                s(:int, 32), :times),
              s(:args),
              s(:send,
                s(:lvar, :f), :puts,
                s(:send,
                  s(:str, "a"), :*,
                  s(:int, 50))))),
          s(:lvasgn, :all_chars,
            s(:send,
              s(:block,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 0),
                      s(:int, 255))), :map),
                s(:args,
                  s(:arg, :n)),
                s(:send,
                  s(:lvar, :n), :chr)), :join,
              s(:str, ""))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "data/all"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:block,
              s(:send,
                s(:int, 32), :times),
              s(:args),
              s(:send,
                s(:lvar, :f), :puts,
                s(:lvar, :all_chars)))),
          s(:lvasgn, :random_chars,
            s(:send,
              s(:block,
                s(:send,
                  s(:begin,
                    s(:erange,
                      s(:int, 0),
                      s(:int, 50))), :map),
                s(:args),
                s(:send,
                  s(:send, nil, :rand,
                    s(:int, 256)), :chr)), :join,
              s(:str, ""))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "data/random"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:block,
              s(:send,
                s(:int, 32), :times),
              s(:args),
              s(:send,
                s(:lvar, :f), :puts,
                s(:lvar, :random_chars)))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "data/zero"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)), nil))),
      s(:casgn, nil, :BIGFILE,
        s(:str, "data/big")),
      s(:def, :prepare_big_file,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :File), :open,
            s(:str, "data/big"),
            s(:str, "w")),
          s(:args,
            s(:arg, :f)),
          s(:block,
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:int, 4), :*,
                      s(:int, 1024)), :*,
                    s(:int, 1024)), :/,
                  s(:int, 256))), :times),
            s(:args),
            s(:send,
              s(:lvar, :f), :print,
              s(:str, "aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa\n"))))),
      s(:def, :prepare_time_data,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "data/old"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "dummy"))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "data/newer"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "dummy"))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "data/newest"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "dummy"))),
          s(:lvasgn, :t,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:send,
            s(:const, nil, :File), :utime,
            s(:send,
              s(:lvar, :t), :-,
              s(:int, 8)),
            s(:send,
              s(:lvar, :t), :-,
              s(:int, 8)),
            s(:str, "data/old")),
          s(:send,
            s(:const, nil, :File), :utime,
            s(:send,
              s(:lvar, :t), :-,
              s(:int, 4)),
            s(:send,
              s(:lvar, :t), :-,
              s(:int, 4)),
            s(:str, "data/newer")))),
      s(:def, :each_srcdest,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :TARGETS), :each),
          s(:args,
            s(:arg, :path)),
          s(:yield,
            s(:lvar, :path),
            s(:dstr,
              s(:str, "tmp/"),
              s(:begin,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:lvar, :path))))))),
      s(:def, :test_pwd,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :pwd)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Dir), :pwd),
            s(:send, nil, :pwd)),
          s(:lvasgn, :cwd,
            s(:send,
              s(:const, nil, :Dir), :pwd)),
          s(:lvasgn, :root,
            s(:if,
              s(:send, nil, :have_drive_letter?),
              s(:str, "C:/"),
              s(:str, "/"))),
          s(:block,
            s(:send, nil, :cd,
              s(:lvar, :root)),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:lvar, :root),
              s(:send, nil, :pwd))),
          s(:send, nil, :assert_equal,
            s(:lvar, :cwd),
            s(:send, nil, :pwd)))),
      s(:def, :test_cmp,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :cmp)),
          s(:block,
            s(:send,
              s(:const, nil, :TARGETS), :each),
            s(:args,
              s(:arg, :fname)),
            s(:send, nil, :assert,
              s(:send, nil, :cmp,
                s(:lvar, :fname),
                s(:lvar, :fname)),
              s(:str, "not same?"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :cmp,
              s(:send,
                s(:const, nil, :TARGETS), :[],
                s(:int, 0)),
              s(:send,
                s(:const, nil, :TARGETS), :[],
                s(:int, 0)),
              s(:hash,
                s(:pair,
                  s(:sym, :undefinedoption),
                  s(:true))))),
          s(:send, nil, :touch,
            s(:str, "tmp/cmptmp")),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:begin,
              s(:send, nil, :cmp,
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/cmptmp")),
                s(:str, "tmp/cmptmp")),
              s(:send, nil, :cmp,
                s(:str, "tmp/cmptmp"),
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/cmptmp"))),
              s(:send, nil, :cmp,
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/cmptmp")),
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/cmptmp"))))))),
      s(:def, :test_cp,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :cp)),
          s(:block,
            s(:send, nil, :each_srcdest),
            s(:args,
              s(:arg, :srcpath),
              s(:arg, :destpath)),
            s(:begin,
              s(:send, nil, :cp,
                s(:lvar, :srcpath),
                s(:lvar, :destpath)),
              s(:send, nil, :assert_same_file,
                s(:lvar, :srcpath),
                s(:lvar, :destpath)),
              s(:send, nil, :cp,
                s(:lvar, :srcpath),
                s(:send,
                  s(:const, nil, :File), :dirname,
                  s(:lvar, :destpath))),
              s(:send, nil, :assert_same_file,
                s(:lvar, :srcpath),
                s(:lvar, :destpath)),
              s(:send, nil, :cp,
                s(:lvar, :srcpath),
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :dirname,
                    s(:lvar, :destpath)), :+,
                  s(:str, "/"))),
              s(:send, nil, :assert_same_file,
                s(:lvar, :srcpath),
                s(:lvar, :destpath)),
              s(:send, nil, :cp,
                s(:lvar, :srcpath),
                s(:lvar, :destpath),
                s(:hash,
                  s(:pair,
                    s(:sym, :preserve),
                    s(:true)))),
              s(:send, nil, :assert_same_file,
                s(:lvar, :srcpath),
                s(:lvar, :destpath)),
              s(:send, nil, :assert_same_entry,
                s(:lvar, :srcpath),
                s(:lvar, :destpath)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Errno), :ENOENT)),
            s(:args),
            s(:send, nil, :cp,
              s(:str, "tmp/cptmp"),
              s(:str, "tmp/cptmp_new"))),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/cptmp_new")),
          s(:send, nil, :touch,
            s(:str, "tmp/cptmp")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :cp,
              s(:str, "tmp/cptmp"),
              s(:str, "tmp/cptmp"))))),
      s(:def, :test_cp_preserve_permissions,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug4507,
            s(:str, "[ruby-core:35518]")),
          s(:send, nil, :touch,
            s(:str, "tmp/cptmp")),
          s(:send, nil, :chmod,
            s(:int, 493),
            s(:str, "tmp/cptmp")),
          s(:send, nil, :cp,
            s(:str, "tmp/cptmp"),
            s(:str, "tmp/cptmp2")),
          s(:send, nil, :assert_equal_filemode,
            s(:str, "tmp/cptmp"),
            s(:str, "tmp/cptmp2"),
            s(:lvar, :bug4507)))),
      s(:def, :test_cp_preserve_permissions_dir,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug7246,
            s(:str, "[ruby-core:48603]")),
          s(:send, nil, :mkdir,
            s(:str, "tmp/cptmp")),
          s(:send, nil, :mkdir,
            s(:str, "tmp/cptmp/d1")),
          s(:send, nil, :chmod,
            s(:int, 485),
            s(:str, "tmp/cptmp/d1")),
          s(:send, nil, :mkdir,
            s(:str, "tmp/cptmp/d2")),
          s(:send, nil, :chmod,
            s(:int, 448),
            s(:str, "tmp/cptmp/d2")),
          s(:send, nil, :cp_r,
            s(:str, "tmp/cptmp"),
            s(:str, "tmp/cptmp2"),
            s(:hash,
              s(:pair,
                s(:sym, :preserve),
                s(:true)))),
          s(:send, nil, :assert_equal_filemode,
            s(:str, "tmp/cptmp/d1"),
            s(:str, "tmp/cptmp2/d1"),
            s(:lvar, :bug7246)),
          s(:send, nil, :assert_equal_filemode,
            s(:str, "tmp/cptmp/d2"),
            s(:str, "tmp/cptmp2/d2"),
            s(:lvar, :bug7246)))),
      s(:if,
        s(:send, nil, :have_symlink?),
        s(:def, :test_cp_symlink,
          s(:args),
          s(:begin,
            s(:send, nil, :touch,
              s(:str, "tmp/cptmp")),
            s(:send,
              s(:const, nil, :File), :symlink,
              s(:str, "cptmp"),
              s(:str, "tmp/cptmp_symlink")),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send, nil, :cp,
                s(:str, "tmp/cptmp"),
                s(:str, "tmp/cptmp_symlink"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send, nil, :cp,
                s(:str, "tmp/cptmp_symlink"),
                s(:str, "tmp/cptmp"))),
            s(:send,
              s(:const, nil, :File), :symlink,
              s(:str, "symlink"),
              s(:str, "tmp/symlink")),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :Errno), :ELOOP)),
              s(:args),
              s(:send, nil, :cp,
                s(:str, "tmp/symlink"),
                s(:str, "tmp/symlink"))))), nil),
      s(:def, :test_cp_pathname,
        s(:args),
        s(:begin,
          s(:send, nil, :touch,
            s(:str, "tmp/cptmp")),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:begin,
              s(:send, nil, :cp,
                s(:str, "tmp/cptmp"),
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/tmpdest"))),
              s(:send, nil, :cp,
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/cptmp")),
                s(:str, "tmp/tmpdest")),
              s(:send, nil, :cp,
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/cptmp")),
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/tmpdest"))),
              s(:send, nil, :mkdir,
                s(:str, "tmp/tmpdir")),
              s(:send, nil, :cp,
                s(:array,
                  s(:str, "tmp/cptmp"),
                  s(:str, "tmp/tmpdest")),
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/tmpdir"))))))),
      s(:def, :test_cp_r,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :cp_r)),
          s(:send, nil, :cp_r,
            s(:str, "data"),
            s(:str, "tmp")),
          s(:block,
            s(:send,
              s(:const, nil, :TARGETS), :each),
            s(:args,
              s(:arg, :fname)),
            s(:send, nil, :assert_same_file,
              s(:lvar, :fname),
              s(:dstr,
                s(:str, "tmp/"),
                s(:begin,
                  s(:lvar, :fname))))),
          s(:send, nil, :cp_r,
            s(:str, "data"),
            s(:str, "tmp2"),
            s(:hash,
              s(:pair,
                s(:sym, :preserve),
                s(:true)))),
          s(:block,
            s(:send,
              s(:const, nil, :TARGETS), :each),
            s(:args,
              s(:arg, :fname)),
            s(:begin,
              s(:send, nil, :assert_same_entry,
                s(:lvar, :fname),
                s(:dstr,
                  s(:str, "tmp2/"),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :File), :basename,
                      s(:lvar, :fname))))),
              s(:send, nil, :assert_same_file,
                s(:lvar, :fname),
                s(:dstr,
                  s(:str, "tmp2/"),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :File), :basename,
                      s(:lvar, :fname))))))),
          s(:send, nil, :mkdir,
            s(:str, "tmp/cpr_src")),
          s(:send, nil, :mkdir,
            s(:str, "tmp/cpr_dest")),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "tmp/cpr_src/a"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "a"))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "tmp/cpr_src/b"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "b"))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "tmp/cpr_src/c"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "c"))),
          s(:send, nil, :mkdir,
            s(:str, "tmp/cpr_src/d")),
          s(:send, nil, :cp_r,
            s(:str, "tmp/cpr_src/."),
            s(:str, "tmp/cpr_dest")),
          s(:send, nil, :assert_same_file,
            s(:str, "tmp/cpr_src/a"),
            s(:str, "tmp/cpr_dest/a")),
          s(:send, nil, :assert_same_file,
            s(:str, "tmp/cpr_src/b"),
            s(:str, "tmp/cpr_dest/b")),
          s(:send, nil, :assert_same_file,
            s(:str, "tmp/cpr_src/c"),
            s(:str, "tmp/cpr_dest/c")),
          s(:send, nil, :assert_directory,
            s(:str, "tmp/cpr_dest/d")),
          s(:send, nil, :my_rm_rf,
            s(:str, "tmp/cpr_src")),
          s(:send, nil, :my_rm_rf,
            s(:str, "tmp/cpr_dest")),
          s(:lvasgn, :bug3588,
            s(:str, "[ruby-core:31360]")),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :ArgumentError),
              s(:lvar, :bug3588)),
            s(:args),
            s(:send, nil, :cp_r,
              s(:str, "tmp"),
              s(:str, "tmp2"))),
          s(:send, nil, :assert_directory,
            s(:str, "tmp2/tmp")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError),
              s(:lvar, :bug3588)),
            s(:args),
            s(:send, nil, :cp_r,
              s(:str, "tmp2"),
              s(:str, "tmp2/new_tmp2"))))),
      s(:if,
        s(:send, nil, :have_symlink?),
        s(:def, :test_cp_r_symlink,
          s(:args),
          s(:begin,
            s(:send, nil, :mkdir,
              s(:str, "tmp/cpr_src")),
            s(:send, nil, :ln_s,
              s(:str, "SLdest"),
              s(:str, "tmp/cpr_src/symlink")),
            s(:send, nil, :cp_r,
              s(:str, "tmp/cpr_src"),
              s(:str, "tmp/cpr_dest")),
            s(:send, nil, :assert_symlink,
              s(:str, "tmp/cpr_dest/symlink")),
            s(:send, nil, :assert_equal,
              s(:str, "SLdest"),
              s(:send,
                s(:const, nil, :File), :readlink,
                s(:str, "tmp/cpr_dest/symlink"))),
            s(:send, nil, :ln_s,
              s(:str, "cpr_src"),
              s(:str, "tmp/cpr_src2")),
            s(:send, nil, :cp_r,
              s(:str, "tmp/cpr_src2"),
              s(:str, "tmp/cpr_dest2")),
            s(:send, nil, :assert_directory,
              s(:str, "tmp/cpr_dest2")),
            s(:send, nil, :assert_not_symlink,
              s(:str, "tmp/cpr_dest2")),
            s(:send, nil, :assert_symlink,
              s(:str, "tmp/cpr_dest2/symlink")),
            s(:send, nil, :assert_equal,
              s(:str, "SLdest"),
              s(:send,
                s(:const, nil, :File), :readlink,
                s(:str, "tmp/cpr_dest2/symlink"))))), nil),
      s(:if,
        s(:send, nil, :have_symlink?),
        s(:def, :test_cp_r_symlink_preserve,
          s(:args),
          s(:begin,
            s(:send, nil, :mkdir,
              s(:str, "tmp/cross")),
            s(:send, nil, :mkdir,
              s(:str, "tmp/cross/a")),
            s(:send, nil, :mkdir,
              s(:str, "tmp/cross/b")),
            s(:send, nil, :touch,
              s(:str, "tmp/cross/a/f")),
            s(:send, nil, :touch,
              s(:str, "tmp/cross/b/f")),
            s(:send, nil, :ln_s,
              s(:str, "../a/f"),
              s(:str, "tmp/cross/b/l")),
            s(:send, nil, :ln_s,
              s(:str, "../b/f"),
              s(:str, "tmp/cross/a/l")),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:send, nil, :cp_r,
                s(:str, "tmp/cross"),
                s(:str, "tmp/cross2"),
                s(:hash,
                  s(:pair,
                    s(:sym, :preserve),
                    s(:true))))))), nil),
      s(:def, :test_cp_r_pathname,
        s(:args),
        s(:begin,
          s(:send, nil, :touch,
            s(:str, "tmp/cprtmp")),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:begin,
              s(:send, nil, :cp_r,
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/cprtmp")),
                s(:str, "tmp/tmpdest")),
              s(:send, nil, :cp_r,
                s(:str, "tmp/cprtmp"),
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/tmpdest"))),
              s(:send, nil, :cp_r,
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/cprtmp")),
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/tmpdest"))))))),
      s(:def, :test_mv,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :mv)),
          s(:send, nil, :mkdir,
            s(:str, "tmp/dest")),
          s(:block,
            s(:send,
              s(:const, nil, :TARGETS), :each),
            s(:args,
              s(:arg, :fname)),
            s(:begin,
              s(:send, nil, :cp,
                s(:lvar, :fname),
                s(:str, "tmp/mvsrc")),
              s(:send, nil, :mv,
                s(:str, "tmp/mvsrc"),
                s(:str, "tmp/mvdest")),
              s(:send, nil, :assert_same_file,
                s(:lvar, :fname),
                s(:str, "tmp/mvdest")),
              s(:send, nil, :mv,
                s(:str, "tmp/mvdest"),
                s(:str, "tmp/dest/")),
              s(:send, nil, :assert_same_file,
                s(:lvar, :fname),
                s(:str, "tmp/dest/mvdest")),
              s(:send, nil, :mv,
                s(:str, "tmp/dest/mvdest"),
                s(:str, "tmp")),
              s(:send, nil, :assert_same_file,
                s(:lvar, :fname),
                s(:str, "tmp/mvdest")))),
          s(:send, nil, :mkdir,
            s(:str, "tmp/tmpdir")),
          s(:send, nil, :mkdir_p,
            s(:str, "tmp/dest2/tmpdir")),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const,
                s(:const, nil, :Errno), :EEXIST),
              s(:regexp,
                s(:str, " - tmp/dest2/tmpdir\\z"),
                s(:regopt)),
              s(:str, "[ruby-core:68706] [Bug #11021]")),
            s(:args),
            s(:send, nil, :mv,
              s(:str, "tmp/tmpdir"),
              s(:str, "tmp/dest2"))),
          s(:send, nil, :mkdir,
            s(:str, "tmp/dest2/tmpdir/junk")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Errno), :EEXIST),
              s(:str, "[ruby-talk:124368]")),
            s(:args),
            s(:send, nil, :mv,
              s(:str, "tmp/tmpdir"),
              s(:str, "tmp/dest2"))),
          s(:send, nil, :touch,
            s(:str, "tmp/cptmp")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :mv,
              s(:str, "tmp/cptmp"),
              s(:str, "tmp/cptmp"))))),
      s(:if,
        s(:send, nil, :have_symlink?),
        s(:def, :test_mv_symlink,
          s(:args),
          s(:begin,
            s(:send, nil, :touch,
              s(:str, "tmp/cptmp")),
            s(:send,
              s(:const, nil, :File), :symlink,
              s(:str, "cptmp"),
              s(:str, "tmp/cptmp_symlink")),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send, nil, :mv,
                s(:str, "tmp/cptmp"),
                s(:str, "tmp/cptmp_symlink"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send, nil, :mv,
                s(:str, "tmp/cptmp_symlink"),
                s(:str, "tmp/cptmp"))),
            s(:send,
              s(:const, nil, :File), :symlink,
              s(:str, "symlink"),
              s(:str, "tmp/symlink")),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :Errno), :ELOOP)),
              s(:args),
              s(:send, nil, :mv,
                s(:str, "tmp/symlink"),
                s(:str, "tmp/symlink"))),
            s(:send,
              s(:const, nil, :File), :symlink,
              s(:str, "xxx"),
              s(:str, "tmp/src")),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:send, nil, :mv,
                s(:str, "tmp/src"),
                s(:str, "tmp/dest"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const, nil, :File), :symlink?,
                s(:str, "tmp/dest"))))), nil),
      s(:def, :test_mv_pathname,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised),
          s(:args),
          s(:begin,
            s(:send, nil, :touch,
              s(:str, "tmp/mvtmpsrc")),
            s(:send, nil, :mv,
              s(:send,
                s(:const, nil, :Pathname), :new,
                s(:str, "tmp/mvtmpsrc")),
              s(:str, "tmp/mvtmpdest")),
            s(:send, nil, :touch,
              s(:str, "tmp/mvtmpsrc")),
            s(:send, nil, :mv,
              s(:str, "tmp/mvtmpsrc"),
              s(:send,
                s(:const, nil, :Pathname), :new,
                s(:str, "tmp/mvtmpdest"))),
            s(:send, nil, :touch,
              s(:str, "tmp/mvtmpsrc")),
            s(:send, nil, :mv,
              s(:send,
                s(:const, nil, :Pathname), :new,
                s(:str, "tmp/mvtmpsrc")),
              s(:send,
                s(:const, nil, :Pathname), :new,
                s(:str, "tmp/mvtmpdest")))))),
      s(:def, :test_rm,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :rm)),
          s(:block,
            s(:send,
              s(:const, nil, :TARGETS), :each),
            s(:args,
              s(:arg, :fname)),
            s(:begin,
              s(:send, nil, :cp,
                s(:lvar, :fname),
                s(:str, "tmp/rmsrc")),
              s(:send, nil, :rm,
                s(:str, "tmp/rmsrc")),
              s(:send, nil, :assert_file_not_exist,
                s(:str, "tmp/rmsrc")))),
          s(:send, nil, :touch,
            s(:str, "tmp/rmtmp1")),
          s(:send, nil, :touch,
            s(:str, "tmp/rmtmp2")),
          s(:send, nil, :touch,
            s(:str, "tmp/rmtmp3")),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:begin,
              s(:send, nil, :rm,
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/rmtmp1"))),
              s(:send, nil, :rm,
                s(:array,
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "tmp/rmtmp2")),
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "tmp/rmtmp3")))))),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/rmtmp1")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/rmtmp2")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/rmtmp3")))),
      s(:def, :test_rm_f,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :rm_f)),
          s(:block,
            s(:send,
              s(:const, nil, :TARGETS), :each),
            s(:args,
              s(:arg, :fname)),
            s(:begin,
              s(:send, nil, :cp,
                s(:lvar, :fname),
                s(:str, "tmp/rmsrc")),
              s(:send, nil, :rm_f,
                s(:str, "tmp/rmsrc")),
              s(:send, nil, :assert_file_not_exist,
                s(:str, "tmp/rmsrc")))))),
      s(:if,
        s(:send, nil, :have_symlink?),
        s(:def, :test_rm_symlink,
          s(:args),
          s(:begin,
            s(:block,
              s(:send,
                s(:const, nil, :File), :open,
                s(:str, "tmp/lnf_symlink_src"),
                s(:str, "w")),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:lvar, :f), :puts,
                s(:str, "dummy"))),
            s(:send,
              s(:const, nil, :File), :symlink,
              s(:str, "tmp/lnf_symlink_src"),
              s(:str, "tmp/lnf_symlink_dest")),
            s(:send, nil, :rm_f,
              s(:str, "tmp/lnf_symlink_dest")),
            s(:send, nil, :assert_file_not_exist,
              s(:str, "tmp/lnf_symlink_dest")),
            s(:send, nil, :assert_file_exist,
              s(:str, "tmp/lnf_symlink_src")),
            s(:send, nil, :rm_f,
              s(:str, "notexistdatafile")),
            s(:send, nil, :rm_f,
              s(:str, "tmp/notexistdatafile")),
            s(:send, nil, :my_rm_rf,
              s(:str, "tmpdatadir")),
            s(:send,
              s(:const, nil, :Dir), :mkdir,
              s(:str, "tmpdatadir")),
            s(:send,
              s(:const, nil, :Dir), :rmdir,
              s(:str, "tmpdatadir")))), nil),
      s(:def, :test_rm_f_2,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:str, "tmp/tmpdir")),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "tmp/tmpdir/a"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "dummy"))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "tmp/tmpdir/c"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "dummy"))),
          s(:send, nil, :rm_f,
            s(:array,
              s(:str, "tmp/tmpdir/a"),
              s(:str, "tmp/tmpdir/b"),
              s(:str, "tmp/tmpdir/c"))),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/tmpdir/a")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/tmpdir/c")),
          s(:send,
            s(:const, nil, :Dir), :rmdir,
            s(:str, "tmp/tmpdir")))),
      s(:def, :test_rm_pathname,
        s(:args),
        s(:begin,
          s(:send, nil, :touch,
            s(:str, "tmp/rmtmp1")),
          s(:send, nil, :touch,
            s(:str, "tmp/rmtmp2")),
          s(:send, nil, :touch,
            s(:str, "tmp/rmtmp3")),
          s(:send, nil, :touch,
            s(:str, "tmp/rmtmp4")),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:begin,
              s(:send, nil, :rm_f,
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/rmtmp1"))),
              s(:send, nil, :rm_f,
                s(:array,
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "tmp/rmtmp2")),
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "tmp/rmtmp3")))))),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/rmtmp1")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/rmtmp2")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/rmtmp3")),
          s(:send, nil, :assert_file_exist,
            s(:str, "tmp/rmtmp4")),
          s(:send, nil, :touch,
            s(:str, "tmp/[rmtmp]")),
          s(:send,
            s(:const, nil, :FileUtils), :rm_f,
            s(:str, "tmp/[rmtmp]")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/[rmtmp]")))),
      s(:def, :test_rm_r,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :rm_r)),
          s(:send, nil, :my_rm_rf,
            s(:str, "tmpdatadir")),
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:str, "tmpdatadir")),
          s(:send, nil, :rm_r,
            s(:str, "tmpdatadir")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmpdatadir")),
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:str, "tmpdatadir")),
          s(:send, nil, :rm_r,
            s(:str, "tmpdatadir/")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmpdatadir")),
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:str, "tmp/tmpdir")),
          s(:send, nil, :rm_r,
            s(:str, "tmp/tmpdir/")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/tmpdir")),
          s(:send, nil, :assert_file_exist,
            s(:str, "tmp")),
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:str, "tmp/tmpdir")),
          s(:send, nil, :rm_r,
            s(:str, "tmp/tmpdir")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/tmpdir")),
          s(:send, nil, :assert_file_exist,
            s(:str, "tmp")),
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:str, "tmp/tmpdir")),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "tmp/tmpdir/a"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "dummy"))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "tmp/tmpdir/b"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "dummy"))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "tmp/tmpdir/c"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "dummy"))),
          s(:send, nil, :rm_r,
            s(:str, "tmp/tmpdir")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/tmpdir")),
          s(:send, nil, :assert_file_exist,
            s(:str, "tmp")),
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:str, "tmp/tmpdir")),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "tmp/tmpdir/a"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "dummy"))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "tmp/tmpdir/c"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "dummy"))),
          s(:send, nil, :rm_r,
            s(:array,
              s(:str, "tmp/tmpdir/a"),
              s(:str, "tmp/tmpdir/b"),
              s(:str, "tmp/tmpdir/c")),
            s(:hash,
              s(:pair,
                s(:sym, :force),
                s(:true)))),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/tmpdir/a")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/tmpdir/c")),
          s(:send,
            s(:const, nil, :Dir), :rmdir,
            s(:str, "tmp/tmpdir")))),
      s(:if,
        s(:send, nil, :have_symlink?),
        s(:def, :test_rm_r_symlink,
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :Dir), :mkdir,
              s(:str, "tmp/tmpdir")),
            s(:send,
              s(:const, nil, :File), :symlink,
              s(:str, ".."),
              s(:str, "tmp/tmpdir/symlink_to_dir")),
            s(:send, nil, :rm_r,
              s(:str, "tmp/tmpdir")),
            s(:send, nil, :assert_file_not_exist,
              s(:str, "tmp/tmpdir")),
            s(:send, nil, :assert_file_exist,
              s(:str, "tmp")))), nil),
      s(:def, :test_rm_r_pathname,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:str, "tmp/tmpdir1")),
          s(:send, nil, :touch,
            s(:str, "tmp/tmpdir1/tmp")),
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:str, "tmp/tmpdir2")),
          s(:send, nil, :touch,
            s(:str, "tmp/tmpdir2/tmp")),
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:str, "tmp/tmpdir3")),
          s(:send, nil, :touch,
            s(:str, "tmp/tmpdir3/tmp")),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:begin,
              s(:send, nil, :rm_r,
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/tmpdir1"))),
              s(:send, nil, :rm_r,
                s(:array,
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "tmp/tmpdir2")),
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "tmp/tmpdir3")))))),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/tmpdir1")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/tmpdir2")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/tmpdir3")))),
      s(:def, :test_remove_entry_secure,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :remove_entry_secure)),
          s(:send, nil, :my_rm_rf,
            s(:str, "tmpdatadir")),
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:str, "tmpdatadir")),
          s(:send, nil, :remove_entry_secure,
            s(:str, "tmpdatadir")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmpdatadir")),
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:str, "tmpdatadir")),
          s(:send, nil, :remove_entry_secure,
            s(:str, "tmpdatadir/")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmpdatadir")),
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:str, "tmp/tmpdir")),
          s(:send, nil, :remove_entry_secure,
            s(:str, "tmp/tmpdir/")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/tmpdir")),
          s(:send, nil, :assert_file_exist,
            s(:str, "tmp")),
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:str, "tmp/tmpdir")),
          s(:send, nil, :remove_entry_secure,
            s(:str, "tmp/tmpdir")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/tmpdir")),
          s(:send, nil, :assert_file_exist,
            s(:str, "tmp")),
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:str, "tmp/tmpdir")),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "tmp/tmpdir/a"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "dummy"))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "tmp/tmpdir/b"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "dummy"))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "tmp/tmpdir/c"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "dummy"))),
          s(:send, nil, :remove_entry_secure,
            s(:str, "tmp/tmpdir")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/tmpdir")),
          s(:send, nil, :assert_file_exist,
            s(:str, "tmp")),
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:str, "tmp/tmpdir")),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "tmp/tmpdir/a"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "dummy"))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "tmp/tmpdir/c"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "dummy"))),
          s(:send, nil, :remove_entry_secure,
            s(:str, "tmp/tmpdir/a"),
            s(:true)),
          s(:send, nil, :remove_entry_secure,
            s(:str, "tmp/tmpdir/b"),
            s(:true)),
          s(:send, nil, :remove_entry_secure,
            s(:str, "tmp/tmpdir/c"),
            s(:true)),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/tmpdir/a")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/tmpdir/c")),
          s(:send,
            s(:const, nil, :Dir), :rmdir,
            s(:str, "tmp/tmpdir")))),
      s(:if,
        s(:send, nil, :have_symlink?),
        s(:def, :test_remove_entry_secure_symlink,
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :Dir), :mkdir,
              s(:str, "tmp/tmpdir")),
            s(:send,
              s(:const, nil, :File), :symlink,
              s(:str, ".."),
              s(:str, "tmp/tmpdir/symlink_to_dir")),
            s(:send, nil, :remove_entry_secure,
              s(:str, "tmp/tmpdir")),
            s(:send, nil, :assert_file_not_exist,
              s(:str, "tmp/tmpdir")),
            s(:send, nil, :assert_file_exist,
              s(:str, "tmp")))), nil),
      s(:def, :test_remove_entry_secure_pathname,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:str, "tmp/tmpdir1")),
          s(:send, nil, :touch,
            s(:str, "tmp/tmpdir1/tmp")),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send, nil, :remove_entry_secure,
              s(:send,
                s(:const, nil, :Pathname), :new,
                s(:str, "tmp/tmpdir1")))),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/tmpdir1")))),
      s(:def, :test_with_big_file,
        s(:args),
        s(:begin,
          s(:send, nil, :prepare_big_file),
          s(:send, nil, :cp,
            s(:const, nil, :BIGFILE),
            s(:str, "tmp/cpdest")),
          s(:send, nil, :assert_same_file,
            s(:const, nil, :BIGFILE),
            s(:str, "tmp/cpdest")),
          s(:send, nil, :assert,
            s(:send, nil, :cmp,
              s(:const, nil, :BIGFILE),
              s(:str, "tmp/cpdest")),
            s(:str, "orig != copied")),
          s(:send, nil, :mv,
            s(:str, "tmp/cpdest"),
            s(:str, "tmp/mvdest")),
          s(:send, nil, :assert_same_file,
            s(:const, nil, :BIGFILE),
            s(:str, "tmp/mvdest")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/cpdest")),
          s(:send, nil, :rm,
            s(:str, "tmp/mvdest")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmp/mvdest")))),
      s(:if,
        s(:send, nil, :have_hardlink?),
        s(:def, :test_ln,
          s(:args),
          s(:begin,
            s(:block,
              s(:send,
                s(:const, nil, :TARGETS), :each),
              s(:args,
                s(:arg, :fname)),
              s(:begin,
                s(:send, nil, :ln,
                  s(:lvar, :fname),
                  s(:str, "tmp/lndest")),
                s(:send, nil, :assert_same_file,
                  s(:lvar, :fname),
                  s(:str, "tmp/lndest")),
                s(:send,
                  s(:const, nil, :File), :unlink,
                  s(:str, "tmp/lndest")))),
            s(:send, nil, :ln,
              s(:const, nil, :TARGETS),
              s(:str, "tmp")),
            s(:block,
              s(:send,
                s(:const, nil, :TARGETS), :each),
              s(:args,
                s(:arg, :fname)),
              s(:send, nil, :assert_same_file,
                s(:lvar, :fname),
                s(:send,
                  s(:str, "tmp/"), :+,
                  s(:send,
                    s(:const, nil, :File), :basename,
                    s(:lvar, :fname))))),
            s(:block,
              s(:send,
                s(:const, nil, :TARGETS), :each),
              s(:args,
                s(:arg, :fname)),
              s(:send,
                s(:const, nil, :File), :unlink,
                s(:send,
                  s(:str, "tmp/"), :+,
                  s(:send,
                    s(:const, nil, :File), :basename,
                    s(:lvar, :fname))))),
            s(:send, nil, :touch,
              s(:str, "tmp/cptmp")),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :Errno), :EEXIST)),
              s(:args),
              s(:send, nil, :ln,
                s(:str, "tmp/cptmp"),
                s(:str, "tmp/cptmp"))))), nil),
      s(:if,
        s(:send, nil, :have_symlink?),
        s(:def, :test_ln_symlink,
          s(:args),
          s(:begin,
            s(:send, nil, :touch,
              s(:str, "tmp/cptmp")),
            s(:send,
              s(:const, nil, :File), :symlink,
              s(:str, "cptmp"),
              s(:str, "tmp/symlink")),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :Errno), :EEXIST)),
              s(:args),
              s(:send, nil, :ln,
                s(:str, "tmp/cptmp"),
                s(:str, "tmp/symlink"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :Errno), :EEXIST)),
              s(:args),
              s(:send, nil, :ln,
                s(:str, "tmp/symlink"),
                s(:str, "tmp/cptmp"))),
            s(:send,
              s(:const, nil, :File), :symlink,
              s(:str, "cptmp_symlink"),
              s(:str, "tmp/cptmp_symlink")),
            s(:kwbegin,
              s(:rescue,
                s(:send, nil, :ln,
                  s(:str, "tmp/cptmp_symlink"),
                  s(:str, "tmp/cptmp_symlink")),
                s(:resbody, nil,
                  s(:lvasgn, :err),
                  s(:send, nil, :assert_kind_of,
                    s(:const, nil, :SystemCallError),
                    s(:lvar, :err))), nil)))), nil),
      s(:if,
        s(:send, nil, :have_hardlink?),
        s(:def, :test_ln_pathname,
          s(:args),
          s(:begin,
            s(:send, nil, :touch,
              s(:str, "tmp/lntmp")),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:begin,
                s(:send, nil, :ln,
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "tmp/lntmp")),
                  s(:str, "tmp/lndesttmp1")),
                s(:send, nil, :ln,
                  s(:str, "tmp/lntmp"),
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "tmp/lndesttmp2"))),
                s(:send, nil, :ln,
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "tmp/lntmp")),
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "tmp/lndesttmp3"))))))), nil),
      s(:if,
        s(:send, nil, :have_symlink?),
        s(:def, :test_ln_s,
          s(:args),
          s(:begin,
            s(:send, nil, :check_singleton,
              s(:sym, :ln_s)),
            s(:block,
              s(:send,
                s(:const, nil, :TARGETS), :each),
              s(:args,
                s(:arg, :fname)),
              s(:begin,
                s(:send, nil, :ln_s,
                  s(:lvar, :fname),
                  s(:str, "tmp/lnsdest")),
                s(:send, nil, :assert,
                  s(:send,
                    s(:const, nil, :FileTest), :symlink?,
                    s(:str, "tmp/lnsdest")),
                  s(:str, "not symlink")),
                s(:send, nil, :assert_equal,
                  s(:lvar, :fname),
                  s(:send,
                    s(:const, nil, :File), :readlink,
                    s(:str, "tmp/lnsdest"))),
                s(:send, nil, :rm_f,
                  s(:str, "tmp/lnsdest")))),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:send, nil, :ln_s,
                s(:str, "symlink"),
                s(:str, "tmp/symlink"))),
            s(:send, nil, :assert_symlink,
              s(:str, "tmp/symlink")),
            s(:send, nil, :touch,
              s(:str, "tmp/lnsdest")),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:begin,
                s(:send, nil, :ln_s,
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "lnsdest")),
                  s(:str, "tmp/symlink_tmp1")),
                s(:send, nil, :ln_s,
                  s(:str, "lnsdest"),
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "tmp/symlink_tmp2"))),
                s(:send, nil, :ln_s,
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "lnsdest")),
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "tmp/symlink_tmp3"))))))), nil),
      s(:if,
        s(:send, nil, :have_symlink?),
        s(:def, :test_ln_sf,
          s(:args),
          s(:begin,
            s(:send, nil, :check_singleton,
              s(:sym, :ln_sf)),
            s(:block,
              s(:send,
                s(:const, nil, :TARGETS), :each),
              s(:args,
                s(:arg, :fname)),
              s(:begin,
                s(:send, nil, :ln_sf,
                  s(:lvar, :fname),
                  s(:str, "tmp/lnsdest")),
                s(:send, nil, :assert,
                  s(:send,
                    s(:const, nil, :FileTest), :symlink?,
                    s(:str, "tmp/lnsdest")),
                  s(:str, "not symlink")),
                s(:send, nil, :assert_equal,
                  s(:lvar, :fname),
                  s(:send,
                    s(:const, nil, :File), :readlink,
                    s(:str, "tmp/lnsdest"))),
                s(:send, nil, :ln_sf,
                  s(:lvar, :fname),
                  s(:str, "tmp/lnsdest")),
                s(:send, nil, :ln_sf,
                  s(:lvar, :fname),
                  s(:str, "tmp/lnsdest")))),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:send, nil, :ln_sf,
                s(:str, "symlink"),
                s(:str, "tmp/symlink"))),
            s(:send, nil, :touch,
              s(:str, "tmp/lns_dest")),
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:begin,
                s(:send, nil, :ln_sf,
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "lns_dest")),
                  s(:str, "tmp/symlink_tmp1")),
                s(:send, nil, :ln_sf,
                  s(:str, "lns_dest"),
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "tmp/symlink_tmp2"))),
                s(:send, nil, :ln_sf,
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "lns_dest")),
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "tmp/symlink_tmp3"))))))), nil),
      s(:def, :test_mkdir,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :mkdir)),
          s(:send, nil, :my_rm_rf,
            s(:str, "tmpdatadir")),
          s(:send, nil, :mkdir,
            s(:str, "tmpdatadir")),
          s(:send, nil, :assert_directory,
            s(:str, "tmpdatadir")),
          s(:send,
            s(:const, nil, :Dir), :rmdir,
            s(:str, "tmpdatadir")),
          s(:send, nil, :mkdir,
            s(:str, "tmpdatadir/")),
          s(:send, nil, :assert_directory,
            s(:str, "tmpdatadir")),
          s(:send,
            s(:const, nil, :Dir), :rmdir,
            s(:str, "tmpdatadir")),
          s(:send, nil, :mkdir,
            s(:str, "tmp/mkdirdest")),
          s(:send, nil, :assert_directory,
            s(:str, "tmp/mkdirdest")),
          s(:send,
            s(:const, nil, :Dir), :rmdir,
            s(:str, "tmp/mkdirdest")),
          s(:send, nil, :mkdir,
            s(:str, "tmp/tmp"),
            s(:hash,
              s(:pair,
                s(:sym, :mode),
                s(:int, 448)))),
          s(:send, nil, :assert_directory,
            s(:str, "tmp/tmp")),
          s(:if,
            s(:send, nil, :have_file_perm?),
            s(:send, nil, :assert_filemode,
              s(:int, 448),
              s(:str, "tmp/tmp"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))), nil),
          s(:send,
            s(:const, nil, :Dir), :rmdir,
            s(:str, "tmp/tmp")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Errno), :EISDIR),
              s(:const,
                s(:const, nil, :Errno), :EEXIST),
              s(:const,
                s(:const, nil, :Errno), :EACCES)),
            s(:args),
            s(:send, nil, :mkdir,
              s(:str, "/"))))),
      s(:if,
        s(:send, nil, :have_file_perm?),
        s(:def, :test_mkdir_file_perm,
          s(:args),
          s(:begin,
            s(:send, nil, :mkdir,
              s(:str, "tmp/tmp"),
              s(:hash,
                s(:pair,
                  s(:sym, :mode),
                  s(:int, 4095)))),
            s(:send, nil, :assert_directory,
              s(:str, "tmp/tmp")),
            s(:send, nil, :assert_filemode,
              s(:int, 4095),
              s(:str, "tmp/tmp")),
            s(:send,
              s(:const, nil, :Dir), :rmdir,
              s(:str, "tmp/tmp")))), nil),
      s(:if,
        s(:send, nil, :lf_in_path_allowed?),
        s(:def, :test_mkdir_lf_in_path,
          s(:args),
          s(:begin,
            s(:send, nil, :mkdir,
              s(:str, "tmp-first-line\ntmp-second-line")),
            s(:send, nil, :assert_directory,
              s(:str, "tmp-first-line\ntmp-second-line")),
            s(:send,
              s(:const, nil, :Dir), :rmdir,
              s(:str, "tmp-first-line\ntmp-second-line")))), nil),
      s(:def, :test_mkdir_pathname,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised),
          s(:args),
          s(:begin,
            s(:send, nil, :mkdir,
              s(:send,
                s(:const, nil, :Pathname), :new,
                s(:str, "tmp/tmpdirtmp"))),
            s(:send, nil, :mkdir,
              s(:array,
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/tmpdirtmp2")),
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/tmpdirtmp3"))))))),
      s(:def, :test_mkdir_p,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :mkdir_p)),
          s(:lvasgn, :dirs,
            s(:array,
              s(:str, "tmpdir/dir/"),
              s(:str, "tmpdir/dir/./"),
              s(:str, "tmpdir/dir/./.././dir/"),
              s(:str, "tmpdir/a"),
              s(:str, "tmpdir/a/"),
              s(:str, "tmpdir/a/b"),
              s(:str, "tmpdir/a/b/"),
              s(:str, "tmpdir/a/b/c/"),
              s(:str, "tmpdir/a/b/c"),
              s(:str, "tmpdir/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a"),
              s(:str, "tmpdir/a/a"))),
          s(:send, nil, :my_rm_rf,
            s(:str, "tmpdir")),
          s(:block,
            s(:send,
              s(:lvar, :dirs), :each),
            s(:args,
              s(:arg, :d)),
            s(:begin,
              s(:send, nil, :mkdir_p,
                s(:lvar, :d)),
              s(:send, nil, :assert_directory,
                s(:lvar, :d)),
              s(:send, nil, :assert_file_not_exist,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :d)),
                  s(:str, "/a"))),
              s(:send, nil, :assert_file_not_exist,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :d)),
                  s(:str, "/b"))),
              s(:send, nil, :assert_file_not_exist,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :d)),
                  s(:str, "/c"))),
              s(:send, nil, :my_rm_rf,
                s(:str, "tmpdir")))),
          s(:block,
            s(:send,
              s(:lvar, :dirs), :each),
            s(:args,
              s(:arg, :d)),
            s(:begin,
              s(:send, nil, :mkdir_p,
                s(:lvar, :d)),
              s(:send, nil, :assert_directory,
                s(:lvar, :d)))),
          s(:send, nil, :rm_rf,
            s(:str, "tmpdir")),
          s(:block,
            s(:send,
              s(:lvar, :dirs), :each),
            s(:args,
              s(:arg, :d)),
            s(:begin,
              s(:send, nil, :mkdir_p,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Dir), :pwd)),
                  s(:str, "/"),
                  s(:begin,
                    s(:lvar, :d)))),
              s(:send, nil, :assert_directory,
                s(:lvar, :d)))),
          s(:send, nil, :rm_rf,
            s(:str, "tmpdir")),
          s(:send, nil, :mkdir_p,
            s(:str, "tmp/tmp/tmp"),
            s(:hash,
              s(:pair,
                s(:sym, :mode),
                s(:int, 448)))),
          s(:send, nil, :assert_directory,
            s(:str, "tmp/tmp")),
          s(:send, nil, :assert_directory,
            s(:str, "tmp/tmp/tmp")),
          s(:if,
            s(:send, nil, :have_file_perm?),
            s(:send, nil, :assert_filemode,
              s(:int, 448),
              s(:str, "tmp/tmp"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))), nil),
          s(:if,
            s(:send, nil, :have_file_perm?),
            s(:send, nil, :assert_filemode,
              s(:int, 448),
              s(:str, "tmp/tmp/tmp"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))), nil),
          s(:send, nil, :rm_rf,
            s(:str, "tmp/tmp")),
          s(:send, nil, :mkdir_p,
            s(:str, "tmp/tmp"),
            s(:hash,
              s(:pair,
                s(:sym, :mode),
                s(:int, 0)))),
          s(:send, nil, :assert_directory,
            s(:str, "tmp/tmp")),
          s(:if,
            s(:send, nil, :have_file_perm?),
            s(:send, nil, :assert_filemode,
              s(:int, 0),
              s(:str, "tmp/tmp"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))), nil),
          s(:send,
            s(:const, nil, :Dir), :rmdir,
            s(:str, "tmp/tmp")),
          s(:send,
            s(:const, nil, :Dir), :rmdir,
            s(:str, "tmp")),
          s(:send, nil, :mkdir_p,
            s(:str, "/")))),
      s(:if,
        s(:send, nil, :have_file_perm?),
        s(:def, :test_mkdir_p_file_perm,
          s(:args),
          s(:begin,
            s(:send, nil, :mkdir_p,
              s(:str, "tmp/tmp/tmp"),
              s(:hash,
                s(:pair,
                  s(:sym, :mode),
                  s(:int, 4095)))),
            s(:send, nil, :assert_directory,
              s(:str, "tmp/tmp/tmp")),
            s(:send, nil, :assert_filemode,
              s(:int, 4095),
              s(:str, "tmp/tmp/tmp")),
            s(:send,
              s(:const, nil, :Dir), :rmdir,
              s(:str, "tmp/tmp/tmp")),
            s(:send,
              s(:const, nil, :Dir), :rmdir,
              s(:str, "tmp/tmp")))), nil),
      s(:def, :test_mkdir_p_pathname,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised),
          s(:args),
          s(:send, nil, :mkdir_p,
            s(:send,
              s(:const, nil, :Pathname), :new,
              s(:str, "tmp/tmp/tmp"))))),
      s(:def, :test_install,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :install)),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "tmp/aaa"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "aaa"))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "tmp/bbb"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "bbb"))),
          s(:send, nil, :install,
            s(:str, "tmp/aaa"),
            s(:str, "tmp/bbb"),
            s(:hash,
              s(:pair,
                s(:sym, :mode),
                s(:int, 384)))),
          s(:send, nil, :assert_equal,
            s(:str, "aaa\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:str, "tmp/bbb"))),
          s(:if,
            s(:send, nil, :have_file_perm?),
            s(:send, nil, :assert_filemode,
              s(:int, 384),
              s(:str, "tmp/bbb"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))), nil),
          s(:lvasgn, :t,
            s(:send,
              s(:const, nil, :File), :mtime,
              s(:str, "tmp/bbb"))),
          s(:send, nil, :install,
            s(:str, "tmp/aaa"),
            s(:str, "tmp/bbb")),
          s(:send, nil, :assert_equal,
            s(:str, "aaa\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:str, "tmp/bbb"))),
          s(:if,
            s(:send, nil, :have_file_perm?),
            s(:send, nil, :assert_filemode,
              s(:int, 384),
              s(:str, "tmp/bbb"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))), nil),
          s(:send, nil, :assert_equal_time,
            s(:lvar, :t),
            s(:send,
              s(:const, nil, :File), :mtime,
              s(:str, "tmp/bbb"))),
          s(:send,
            s(:const, nil, :File), :unlink,
            s(:str, "tmp/aaa")),
          s(:send,
            s(:const, nil, :File), :unlink,
            s(:str, "tmp/bbb")),
          s(:send, nil, :touch,
            s(:str, "tmp/cptmp")),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :install,
              s(:str, "tmp/cptmp"),
              s(:str, "tmp/cptmp"))))),
      s(:if,
        s(:send, nil, :have_symlink?),
        s(:def, :test_install_symlink,
          s(:args),
          s(:begin,
            s(:send, nil, :touch,
              s(:str, "tmp/cptmp")),
            s(:send,
              s(:const, nil, :File), :symlink,
              s(:str, "cptmp"),
              s(:str, "tmp/cptmp_symlink")),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send, nil, :install,
                s(:str, "tmp/cptmp"),
                s(:str, "tmp/cptmp_symlink"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send, nil, :install,
                s(:str, "tmp/cptmp_symlink"),
                s(:str, "tmp/cptmp"))),
            s(:send,
              s(:const, nil, :File), :symlink,
              s(:str, "symlink"),
              s(:str, "tmp/symlink")),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :Errno), :ELOOP)),
              s(:args),
              s(:send, nil, :install,
                s(:str, "tmp/symlink"),
                s(:str, "tmp/symlink"))))), nil),
      s(:def, :test_install_pathname,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised),
          s(:args),
          s(:begin,
            s(:send, nil, :rm_f,
              s(:str, "tmp/a")),
            s(:send, nil, :touch,
              s(:str, "tmp/a")),
            s(:send, nil, :install,
              s(:str, "tmp/a"),
              s(:send,
                s(:const, nil, :Pathname), :new,
                s(:str, "tmp/b"))),
            s(:send, nil, :rm_f,
              s(:str, "tmp/a")),
            s(:send, nil, :touch,
              s(:str, "tmp/a")),
            s(:send, nil, :install,
              s(:send,
                s(:const, nil, :Pathname), :new,
                s(:str, "tmp/a")),
              s(:str, "tmp/b")),
            s(:send, nil, :rm_f,
              s(:str, "tmp/a")),
            s(:send, nil, :touch,
              s(:str, "tmp/a")),
            s(:send, nil, :install,
              s(:send,
                s(:const, nil, :Pathname), :new,
                s(:str, "tmp/a")),
              s(:send,
                s(:const, nil, :Pathname), :new,
                s(:str, "tmp/b"))),
            s(:send, nil, :rm_f,
              s(:str, "tmp/a")),
            s(:send, nil, :touch,
              s(:str, "tmp/a")),
            s(:send, nil, :touch,
              s(:str, "tmp/b")),
            s(:send, nil, :mkdir,
              s(:str, "tmp/dest")),
            s(:send, nil, :install,
              s(:array,
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/a")),
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/b"))),
              s(:str, "tmp/dest")),
            s(:send, nil, :my_rm_rf,
              s(:str, "tmp/dest")),
            s(:send, nil, :mkdir,
              s(:str, "tmp/dest")),
            s(:send, nil, :install,
              s(:array,
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/a")),
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/b"))),
              s(:send,
                s(:const, nil, :Pathname), :new,
                s(:str, "tmp/dest")))))),
      s(:if,
        s(:send, nil, :have_file_perm?),
        s(:def, :test_chmod,
          s(:args),
          s(:begin,
            s(:send, nil, :check_singleton,
              s(:sym, :chmod)),
            s(:send, nil, :touch,
              s(:str, "tmp/a")),
            s(:send, nil, :chmod,
              s(:int, 448),
              s(:str, "tmp/a")),
            s(:send, nil, :assert_filemode,
              s(:int, 448),
              s(:str, "tmp/a")),
            s(:send, nil, :chmod,
              s(:int, 320),
              s(:str, "tmp/a")),
            s(:send, nil, :assert_filemode,
              s(:int, 320),
              s(:str, "tmp/a")))), nil),
      s(:if,
        s(:send, nil, :have_file_perm?),
        s(:def, :test_chmod_symbol_mode,
          s(:args),
          s(:begin,
            s(:send, nil, :check_singleton,
              s(:sym, :chmod)),
            s(:send, nil, :touch,
              s(:str, "tmp/a")),
            s(:send, nil, :chmod,
              s(:str, "u=wrx,g=rx,o=x"),
              s(:str, "tmp/a")),
            s(:send, nil, :assert_filemode,
              s(:int, 489),
              s(:str, "tmp/a")),
            s(:send, nil, :chmod,
              s(:str, "g+w-x"),
              s(:str, "tmp/a")),
            s(:send, nil, :assert_filemode,
              s(:int, 497),
              s(:str, "tmp/a")),
            s(:send, nil, :chmod,
              s(:str, "o+r,g=o+w,o-r,u-o"),
              s(:str, "tmp/a")),
            s(:send, nil, :assert_filemode,
              s(:int, 441),
              s(:str, "tmp/a")),
            s(:send, nil, :chmod,
              s(:str, "go=u"),
              s(:str, "tmp/a")),
            s(:send, nil, :assert_filemode,
              s(:int, 438),
              s(:str, "tmp/a")),
            s(:send, nil, :chmod,
              s(:str, "u=wrx,g=,o="),
              s(:str, "tmp/a")),
            s(:send, nil, :assert_filemode,
              s(:int, 448),
              s(:str, "tmp/a")),
            s(:send, nil, :chmod,
              s(:str, "u=rx,go="),
              s(:str, "tmp/a")),
            s(:send, nil, :assert_filemode,
              s(:int, 320),
              s(:str, "tmp/a")),
            s(:send, nil, :chmod,
              s(:str, "+wrx"),
              s(:str, "tmp/a")),
            s(:send, nil, :assert_filemode,
              s(:int, 511),
              s(:str, "tmp/a")),
            s(:send, nil, :chmod,
              s(:str, "u+s,o=s"),
              s(:str, "tmp/a")),
            s(:send, nil, :assert_filemode,
              s(:int, 2552),
              s(:str, "tmp/a")),
            s(:send, nil, :chmod,
              s(:str, "u-w,go-wrx"),
              s(:str, "tmp/a")),
            s(:send, nil, :assert_filemode,
              s(:int, 2368),
              s(:str, "tmp/a")),
            s(:send, nil, :chmod,
              s(:str, "+s"),
              s(:str, "tmp/a")),
            s(:send, nil, :assert_filemode,
              s(:int, 3392),
              s(:str, "tmp/a")),
            s(:if,
              s(:send,
                s(:regexp,
                  s(:str, "freebsd|netbsd|openbsd|solaris|aix"),
                  s(:regopt)), :!~,
                s(:const, nil, :RUBY_PLATFORM)),
              s(:begin,
                s(:send, nil, :chmod,
                  s(:str, "u+t,o+t"),
                  s(:str, "tmp/a")),
                s(:send, nil, :assert_filemode,
                  s(:int, 3904),
                  s(:str, "tmp/a")),
                s(:send, nil, :chmod,
                  s(:str, "a-t,a-s"),
                  s(:str, "tmp/a")),
                s(:send, nil, :assert_filemode,
                  s(:int, 320),
                  s(:str, "tmp/a"))), nil),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :ArgumentError),
                s(:regexp,
                  s(:str, "invalid\\b.*\\bfile mode"),
                  s(:regopt))),
              s(:args),
              s(:send, nil, :chmod,
                s(:str, "a"),
                s(:str, "tmp/a"))),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :ArgumentError),
                s(:regexp,
                  s(:str, "invalid\\b.*\\bfile mode"),
                  s(:regopt))),
              s(:args),
              s(:send, nil, :chmod,
                s(:str, "x+a"),
                s(:str, "tmp/a"))),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :ArgumentError),
                s(:regexp,
                  s(:str, "invalid\\b.*\\bfile mode"),
                  s(:regopt))),
              s(:args),
              s(:send, nil, :chmod,
                s(:str, "u+z"),
                s(:str, "tmp/a"))),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :ArgumentError),
                s(:regexp,
                  s(:str, "invalid\\b.*\\bfile mode"),
                  s(:regopt))),
              s(:args),
              s(:send, nil, :chmod,
                s(:str, ",+x"),
                s(:str, "tmp/a"))),
            s(:block,
              s(:send, nil, :assert_raise_with_message,
                s(:const, nil, :ArgumentError),
                s(:regexp,
                  s(:str, "invalid\\b.*\\bfile mode"),
                  s(:regopt))),
              s(:args),
              s(:send, nil, :chmod,
                s(:str, "755"),
                s(:str, "tmp/a"))))), nil),
      s(:if,
        s(:send, nil, :have_file_perm?),
        s(:def, :test_chmod_R,
          s(:args),
          s(:begin,
            s(:send, nil, :check_singleton,
              s(:sym, :chmod_R)),
            s(:send, nil, :mkdir_p,
              s(:str, "tmp/dir/dir")),
            s(:send, nil, :touch,
              s(:array,
                s(:str, "tmp/dir/file"),
                s(:str, "tmp/dir/dir/file"))),
            s(:send, nil, :chmod_R,
              s(:int, 448),
              s(:str, "tmp/dir")),
            s(:send, nil, :assert_filemode,
              s(:int, 448),
              s(:str, "tmp/dir"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))),
            s(:send, nil, :assert_filemode,
              s(:int, 448),
              s(:str, "tmp/dir/file"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))),
            s(:send, nil, :assert_filemode,
              s(:int, 448),
              s(:str, "tmp/dir/dir"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))),
            s(:send, nil, :assert_filemode,
              s(:int, 448),
              s(:str, "tmp/dir/dir/file"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))),
            s(:send, nil, :chmod_R,
              s(:int, 320),
              s(:str, "tmp/dir")),
            s(:send, nil, :assert_filemode,
              s(:int, 320),
              s(:str, "tmp/dir"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))),
            s(:send, nil, :assert_filemode,
              s(:int, 320),
              s(:str, "tmp/dir/file"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))),
            s(:send, nil, :assert_filemode,
              s(:int, 320),
              s(:str, "tmp/dir/dir"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))),
            s(:send, nil, :assert_filemode,
              s(:int, 320),
              s(:str, "tmp/dir/dir/file"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))),
            s(:send, nil, :chmod_R,
              s(:int, 448),
              s(:str, "tmp/dir")))), nil),
      s(:if,
        s(:send, nil, :have_file_perm?),
        s(:def, :test_chmod_symbol_mode_R,
          s(:args),
          s(:begin,
            s(:send, nil, :check_singleton,
              s(:sym, :chmod_R)),
            s(:send, nil, :mkdir_p,
              s(:str, "tmp/dir/dir")),
            s(:send, nil, :touch,
              s(:array,
                s(:str, "tmp/dir/file"),
                s(:str, "tmp/dir/dir/file"))),
            s(:send, nil, :chmod_R,
              s(:str, "u=wrx,g=,o="),
              s(:str, "tmp/dir")),
            s(:send, nil, :assert_filemode,
              s(:int, 448),
              s(:str, "tmp/dir"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))),
            s(:send, nil, :assert_filemode,
              s(:int, 448),
              s(:str, "tmp/dir/file"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))),
            s(:send, nil, :assert_filemode,
              s(:int, 448),
              s(:str, "tmp/dir/dir"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))),
            s(:send, nil, :assert_filemode,
              s(:int, 448),
              s(:str, "tmp/dir/dir/file"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))),
            s(:send, nil, :chmod_R,
              s(:str, "u=xr,g+X,o="),
              s(:str, "tmp/dir")),
            s(:send, nil, :assert_filemode,
              s(:int, 328),
              s(:str, "tmp/dir"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))),
            s(:send, nil, :assert_filemode,
              s(:int, 320),
              s(:str, "tmp/dir/file"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))),
            s(:send, nil, :assert_filemode,
              s(:int, 328),
              s(:str, "tmp/dir/dir"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))),
            s(:send, nil, :assert_filemode,
              s(:int, 320),
              s(:str, "tmp/dir/dir/file"),
              s(:hash,
                s(:pair,
                  s(:sym, :mask),
                  s(:int, 511)))),
            s(:send, nil, :chmod_R,
              s(:int, 448),
              s(:str, "tmp/dir")))), nil),
      s(:if,
        s(:send, nil, :have_file_perm?),
        s(:def, :test_chmod_verbose,
          s(:args),
          s(:begin,
            s(:send, nil, :check_singleton,
              s(:sym, :chmod)),
            s(:block,
              s(:send, nil, :assert_output_lines,
                s(:array,
                  s(:str, "chmod 700 tmp/a"),
                  s(:str, "chmod 500 tmp/a"))),
              s(:args),
              s(:begin,
                s(:send, nil, :touch,
                  s(:str, "tmp/a")),
                s(:send, nil, :chmod,
                  s(:int, 448),
                  s(:str, "tmp/a"),
                  s(:hash,
                    s(:pair,
                      s(:sym, :verbose),
                      s(:true)))),
                s(:send, nil, :assert_filemode,
                  s(:int, 448),
                  s(:str, "tmp/a"),
                  s(:hash,
                    s(:pair,
                      s(:sym, :mask),
                      s(:int, 511)))),
                s(:send, nil, :chmod,
                  s(:int, 320),
                  s(:str, "tmp/a"),
                  s(:hash,
                    s(:pair,
                      s(:sym, :verbose),
                      s(:true)))),
                s(:send, nil, :assert_filemode,
                  s(:int, 320),
                  s(:str, "tmp/a"),
                  s(:hash,
                    s(:pair,
                      s(:sym, :mask),
                      s(:int, 511)))))))), nil),
      s(:if,
        s(:send, nil, :have_file_perm?),
        s(:def, :test_s_chmod_verbose,
          s(:args),
          s(:block,
            s(:send, nil, :assert_output_lines,
              s(:array,
                s(:str, "chmod 700 tmp/a")),
              s(:const, nil, :FileUtils)),
            s(:args),
            s(:begin,
              s(:send, nil, :touch,
                s(:str, "tmp/a")),
              s(:send,
                s(:const, nil, :FileUtils), :chmod,
                s(:int, 448),
                s(:str, "tmp/a"),
                s(:hash,
                  s(:pair,
                    s(:sym, :verbose),
                    s(:true)))),
              s(:send, nil, :assert_filemode,
                s(:int, 448),
                s(:str, "tmp/a"),
                s(:hash,
                  s(:pair,
                    s(:sym, :mask),
                    s(:int, 511))))))), nil),
      s(:if,
        s(:send, nil, :have_file_perm?),
        s(:def, :test_chown,
          s(:args),
          s(:begin,
            s(:send, nil, :check_singleton,
              s(:sym, :chown)),
            s(:if,
              s(:send,
                s(:ivar, :@groups), :[],
                s(:int, 1)), nil,
              s(:return)),
            s(:lvasgn, :input_group_1,
              s(:send,
                s(:ivar, :@groups), :[],
                s(:int, 0))),
            s(:block,
              s(:send, nil, :assert_output_lines,
                s(:array)),
              s(:args),
              s(:begin,
                s(:send, nil, :touch,
                  s(:str, "tmp/a")),
                s(:send, nil, :chown,
                  s(:nil),
                  s(:lvar, :input_group_1),
                  s(:str, "tmp/a")),
                s(:send, nil, :assert_ownership_group,
                  s(:send,
                    s(:ivar, :@groups), :[],
                    s(:int, 0)),
                  s(:str, "tmp/a")))),
            s(:lvasgn, :input_group_2,
              s(:send,
                s(:send,
                  s(:const, nil, :Etc), :getgrgid,
                  s(:send,
                    s(:ivar, :@groups), :[],
                    s(:int, 1))), :name)),
            s(:block,
              s(:send, nil, :assert_output_lines,
                s(:array)),
              s(:args),
              s(:begin,
                s(:send, nil, :touch,
                  s(:str, "tmp/b")),
                s(:send, nil, :chown,
                  s(:int, -1),
                  s(:lvar, :input_group_2),
                  s(:str, "tmp/b")),
                s(:send, nil, :assert_ownership_group,
                  s(:send,
                    s(:ivar, :@groups), :[],
                    s(:int, 1)),
                  s(:str, "tmp/b")))))), nil),
      s(:if,
        s(:send, nil, :have_file_perm?),
        s(:def, :test_chown_verbose,
          s(:args),
          s(:block,
            s(:send, nil, :assert_output_lines,
              s(:array,
                s(:dstr,
                  s(:str, "chown :"),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@groups), :[],
                      s(:int, 0))),
                  s(:str, " tmp/a1 tmp/a2")))),
            s(:args),
            s(:begin,
              s(:send, nil, :touch,
                s(:str, "tmp/a1")),
              s(:send, nil, :touch,
                s(:str, "tmp/a2")),
              s(:send, nil, :chown,
                s(:nil),
                s(:send,
                  s(:ivar, :@groups), :[],
                  s(:int, 0)),
                s(:array,
                  s(:str, "tmp/a1"),
                  s(:str, "tmp/a2")),
                s(:hash,
                  s(:pair,
                    s(:sym, :verbose),
                    s(:true)))),
              s(:send, nil, :assert_ownership_group,
                s(:send,
                  s(:ivar, :@groups), :[],
                  s(:int, 0)),
                s(:str, "tmp/a1")),
              s(:send, nil, :assert_ownership_group,
                s(:send,
                  s(:ivar, :@groups), :[],
                  s(:int, 0)),
                s(:str, "tmp/a2"))))), nil),
      s(:if,
        s(:send, nil, :have_file_perm?),
        s(:def, :test_chown_noop,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:ivar, :@groups), :[],
                s(:int, 1)), nil,
              s(:return)),
            s(:block,
              s(:send, nil, :assert_output_lines,
                s(:array)),
              s(:args),
              s(:begin,
                s(:send, nil, :touch,
                  s(:str, "tmp/a")),
                s(:send, nil, :chown,
                  s(:nil),
                  s(:send,
                    s(:ivar, :@groups), :[],
                    s(:int, 0)),
                  s(:str, "tmp/a"),
                  s(:hash,
                    s(:pair,
                      s(:sym, :noop),
                      s(:false)))),
                s(:send, nil, :assert_ownership_group,
                  s(:send,
                    s(:ivar, :@groups), :[],
                    s(:int, 0)),
                  s(:str, "tmp/a")),
                s(:send, nil, :chown,
                  s(:nil),
                  s(:send,
                    s(:ivar, :@groups), :[],
                    s(:int, 1)),
                  s(:str, "tmp/a"),
                  s(:hash,
                    s(:pair,
                      s(:sym, :noop),
                      s(:true)))),
                s(:send, nil, :assert_ownership_group,
                  s(:send,
                    s(:ivar, :@groups), :[],
                    s(:int, 0)),
                  s(:str, "tmp/a")),
                s(:send, nil, :chown,
                  s(:nil),
                  s(:send,
                    s(:ivar, :@groups), :[],
                    s(:int, 1)),
                  s(:str, "tmp/a")),
                s(:send, nil, :assert_ownership_group,
                  s(:send,
                    s(:ivar, :@groups), :[],
                    s(:int, 1)),
                  s(:str, "tmp/a")))))), nil),
      s(:if,
        s(:send, nil, :have_file_perm?),
        s(:begin,
          s(:def, :test_chown_error,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :uid)),
                s(:send, nil, :distinct_uids,
                  s(:int, 1))),
              s(:if,
                s(:lvar, :uid), nil,
                s(:return)),
              s(:send, nil, :touch,
                s(:str, "tmp/a")),
              s(:block,
                s(:send, nil, :assert_raise_with_message,
                  s(:const, nil, :ArgumentError),
                  s(:str, "can't find user for :::")),
                s(:args),
                s(:send, nil, :chown,
                  s(:str, ":::"),
                  s(:send,
                    s(:ivar, :@groups), :[],
                    s(:int, 0)),
                  s(:str, "tmp/a"))),
              s(:block,
                s(:send, nil, :assert_raise_with_message,
                  s(:const, nil, :ArgumentError),
                  s(:str, "can't find group for :::")),
                s(:args),
                s(:send, nil, :chown,
                  s(:lvar, :uid),
                  s(:str, ":::"),
                  s(:str, "tmp/a"))),
              s(:block,
                s(:send, nil, :assert_raise_with_message,
                  s(:const,
                    s(:const, nil, :Errno), :ENOENT),
                  s(:regexp,
                    s(:str, "No such file or directory"),
                    s(:regopt))),
                s(:args),
                s(:send, nil, :chown,
                  s(:nil),
                  s(:send,
                    s(:ivar, :@groups), :[],
                    s(:int, 0)),
                  s(:str, ""))))),
          s(:def, :test_chown_dir_group_ownership_not_recursive,
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@groups), :[],
                  s(:int, 1)), nil,
                s(:return)),
              s(:lvasgn, :input_group_1,
                s(:send,
                  s(:ivar, :@groups), :[],
                  s(:int, 0))),
              s(:lvasgn, :input_group_2,
                s(:send,
                  s(:ivar, :@groups), :[],
                  s(:int, 1))),
              s(:block,
                s(:send, nil, :assert_output_lines,
                  s(:array)),
                s(:args),
                s(:begin,
                  s(:send, nil, :mkdir,
                    s(:str, "tmp/dir")),
                  s(:send, nil, :touch,
                    s(:str, "tmp/dir/a")),
                  s(:send, nil, :chown,
                    s(:nil),
                    s(:lvar, :input_group_1),
                    s(:array,
                      s(:str, "tmp/dir"),
                      s(:str, "tmp/dir/a"))),
                  s(:send, nil, :assert_ownership_group,
                    s(:send,
                      s(:ivar, :@groups), :[],
                      s(:int, 0)),
                    s(:str, "tmp/dir")),
                  s(:send, nil, :assert_ownership_group,
                    s(:send,
                      s(:ivar, :@groups), :[],
                      s(:int, 0)),
                    s(:str, "tmp/dir/a")),
                  s(:send, nil, :chown,
                    s(:nil),
                    s(:lvar, :input_group_2),
                    s(:str, "tmp/dir")),
                  s(:send, nil, :assert_ownership_group,
                    s(:send,
                      s(:ivar, :@groups), :[],
                      s(:int, 1)),
                    s(:str, "tmp/dir")),
                  s(:send, nil, :assert_ownership_group,
                    s(:send,
                      s(:ivar, :@groups), :[],
                      s(:int, 0)),
                    s(:str, "tmp/dir/a")))))),
          s(:def, :test_chown_R,
            s(:args),
            s(:begin,
              s(:send, nil, :check_singleton,
                s(:sym, :chown_R)),
              s(:if,
                s(:send,
                  s(:ivar, :@groups), :[],
                  s(:int, 1)), nil,
                s(:return)),
              s(:lvasgn, :input_group_1,
                s(:send,
                  s(:ivar, :@groups), :[],
                  s(:int, 0))),
              s(:lvasgn, :input_group_2,
                s(:send,
                  s(:ivar, :@groups), :[],
                  s(:int, 1))),
              s(:block,
                s(:send, nil, :assert_output_lines,
                  s(:array)),
                s(:args),
                s(:begin,
                  s(:lvasgn, :list,
                    s(:array,
                      s(:str, "tmp/dir"),
                      s(:str, "tmp/dir/a"),
                      s(:str, "tmp/dir/a/b"),
                      s(:str, "tmp/dir/a/b/c"))),
                  s(:send, nil, :mkdir_p,
                    s(:str, "tmp/dir/a/b/c")),
                  s(:send, nil, :touch,
                    s(:str, "tmp/d")),
                  s(:send, nil, :chown_R,
                    s(:nil),
                    s(:lvar, :input_group_1),
                    s(:str, "tmp/dir")),
                  s(:block,
                    s(:send,
                      s(:lvar, :list), :each),
                    s(:args,
                      s(:arg, :dir)),
                    s(:send, nil, :assert_ownership_group,
                      s(:send,
                        s(:ivar, :@groups), :[],
                        s(:int, 0)),
                      s(:lvar, :dir))),
                  s(:send, nil, :chown_R,
                    s(:nil),
                    s(:lvar, :input_group_1),
                    s(:str, "tmp/d")),
                  s(:send, nil, :assert_ownership_group,
                    s(:send,
                      s(:ivar, :@groups), :[],
                      s(:int, 0)),
                    s(:str, "tmp/d")),
                  s(:send, nil, :chown_R,
                    s(:nil),
                    s(:lvar, :input_group_2),
                    s(:array,
                      s(:str, "tmp/dir"),
                      s(:str, "tmp/d"))),
                  s(:op_asgn,
                    s(:lvasgn, :list), :+,
                    s(:array,
                      s(:str, "tmp/d"))),
                  s(:block,
                    s(:send,
                      s(:lvar, :list), :each),
                    s(:args,
                      s(:arg, :dir)),
                    s(:send, nil, :assert_ownership_group,
                      s(:send,
                        s(:ivar, :@groups), :[],
                        s(:int, 1)),
                      s(:lvar, :dir))))))),
          s(:def, :test_chown_R_verbose,
            s(:args),
            s(:block,
              s(:send, nil, :assert_output_lines,
                s(:array,
                  s(:dstr,
                    s(:str, "chown -R :"),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@groups), :[],
                        s(:int, 0))),
                    s(:str, " tmp/dir tmp/d")))),
              s(:args),
              s(:begin,
                s(:lvasgn, :list,
                  s(:array,
                    s(:str, "tmp/dir"),
                    s(:str, "tmp/dir/a"),
                    s(:str, "tmp/dir/a/b"),
                    s(:str, "tmp/dir/a/b/c"))),
                s(:send, nil, :mkdir_p,
                  s(:str, "tmp/dir/a/b/c")),
                s(:send, nil, :touch,
                  s(:str, "tmp/d")),
                s(:send, nil, :chown_R,
                  s(:nil),
                  s(:send,
                    s(:ivar, :@groups), :[],
                    s(:int, 0)),
                  s(:array,
                    s(:str, "tmp/dir"),
                    s(:str, "tmp/d")),
                  s(:hash,
                    s(:pair,
                      s(:sym, :verbose),
                      s(:true)))),
                s(:block,
                  s(:send,
                    s(:lvar, :list), :each),
                  s(:args,
                    s(:arg, :dir)),
                  s(:send, nil, :assert_ownership_group,
                    s(:send,
                      s(:ivar, :@groups), :[],
                      s(:int, 0)),
                    s(:lvar, :dir)))))),
          s(:def, :test_chown_R_noop,
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@groups), :[],
                  s(:int, 1)), nil,
                s(:return)),
              s(:block,
                s(:send, nil, :assert_output_lines,
                  s(:array)),
                s(:args),
                s(:begin,
                  s(:lvasgn, :list,
                    s(:array,
                      s(:str, "tmp/dir"),
                      s(:str, "tmp/dir/a"),
                      s(:str, "tmp/dir/a/b"),
                      s(:str, "tmp/dir/a/b/c"))),
                  s(:send, nil, :mkdir_p,
                    s(:str, "tmp/dir/a/b/c")),
                  s(:send, nil, :chown_R,
                    s(:nil),
                    s(:send,
                      s(:ivar, :@groups), :[],
                      s(:int, 0)),
                    s(:str, "tmp/dir"),
                    s(:hash,
                      s(:pair,
                        s(:sym, :noop),
                        s(:false)))),
                  s(:block,
                    s(:send,
                      s(:lvar, :list), :each),
                    s(:args,
                      s(:arg, :dir)),
                    s(:send, nil, :assert_ownership_group,
                      s(:send,
                        s(:ivar, :@groups), :[],
                        s(:int, 0)),
                      s(:lvar, :dir))),
                  s(:send, nil, :chown_R,
                    s(:nil),
                    s(:send,
                      s(:ivar, :@groups), :[],
                      s(:int, 1)),
                    s(:str, "tmp/dir"),
                    s(:hash,
                      s(:pair,
                        s(:sym, :noop),
                        s(:true)))),
                  s(:block,
                    s(:send,
                      s(:lvar, :list), :each),
                    s(:args,
                      s(:arg, :dir)),
                    s(:send, nil, :assert_ownership_group,
                      s(:send,
                        s(:ivar, :@groups), :[],
                        s(:int, 0)),
                      s(:lvar, :dir))))))),
          s(:def, :test_chown_R_force,
            s(:args),
            s(:block,
              s(:send, nil, :assert_output_lines,
                s(:array)),
              s(:args),
              s(:begin,
                s(:lvasgn, :list,
                  s(:array,
                    s(:str, "tmp/dir"),
                    s(:str, "tmp/dir/a"),
                    s(:str, "tmp/dir/a/b"),
                    s(:str, "tmp/dir/a/b/c"))),
                s(:send, nil, :mkdir_p,
                  s(:str, "tmp/dir/a/b/c")),
                s(:block,
                  s(:send, nil, :assert_raise_with_message,
                    s(:const,
                      s(:const, nil, :Errno), :ENOENT),
                    s(:regexp,
                      s(:str, "No such file or directory"),
                      s(:regopt))),
                  s(:args),
                  s(:send, nil, :chown_R,
                    s(:nil),
                    s(:send,
                      s(:ivar, :@groups), :[],
                      s(:int, 0)),
                    s(:array,
                      s(:str, "tmp/dir"),
                      s(:str, "invalid")),
                    s(:hash,
                      s(:pair,
                        s(:sym, :force),
                        s(:false))))),
                s(:send, nil, :chown_R,
                  s(:nil),
                  s(:send,
                    s(:ivar, :@groups), :[],
                    s(:int, 0)),
                  s(:array,
                    s(:str, "tmp/dir"),
                    s(:str, "invalid")),
                  s(:hash,
                    s(:pair,
                      s(:sym, :force),
                      s(:true)))),
                s(:block,
                  s(:send,
                    s(:lvar, :list), :each),
                  s(:args,
                    s(:arg, :dir)),
                  s(:send, nil, :assert_ownership_group,
                    s(:send,
                      s(:ivar, :@groups), :[],
                      s(:int, 0)),
                    s(:lvar, :dir)))))),
          s(:if,
            s(:send, nil, :root_in_posix?),
            s(:begin,
              s(:def, :test_chown_with_root,
                s(:args),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :uid_1),
                      s(:lvasgn, :uid_2)),
                    s(:send, nil, :distinct_uids,
                      s(:int, 2))),
                  s(:if,
                    s(:and,
                      s(:lvar, :uid_1),
                      s(:lvar, :uid_2)), nil,
                    s(:return)),
                  s(:lvasgn, :gid,
                    s(:send,
                      s(:ivar, :@groups), :[],
                      s(:int, 0))),
                  s(:lvasgn, :files,
                    s(:array,
                      s(:str, "tmp/a1"),
                      s(:str, "tmp/a2"))),
                  s(:block,
                    s(:send,
                      s(:lvar, :files), :each),
                    s(:args,
                      s(:arg, :file)),
                    s(:send, nil, :touch,
                      s(:lvar, :file))),
                  s(:block,
                    s(:send,
                      s(:array,
                        s(:lvar, :uid_1),
                        s(:lvar, :uid_2)), :each),
                    s(:args,
                      s(:arg, :uid)),
                    s(:block,
                      s(:send, nil, :assert_output_lines,
                        s(:array,
                          s(:dstr,
                            s(:str, "chown "),
                            s(:begin,
                              s(:lvar, :uid)),
                            s(:str, ":"),
                            s(:begin,
                              s(:lvar, :gid)),
                            s(:str, " tmp/a1 tmp/a2")))),
                      s(:args),
                      s(:begin,
                        s(:send, nil, :chown,
                          s(:lvar, :uid),
                          s(:lvar, :gid),
                          s(:lvar, :files),
                          s(:hash,
                            s(:pair,
                              s(:sym, :verbose),
                              s(:true)))),
                        s(:block,
                          s(:send,
                            s(:lvar, :files), :each),
                          s(:args,
                            s(:arg, :file)),
                          s(:begin,
                            s(:send, nil, :assert_ownership_group,
                              s(:lvar, :gid),
                              s(:lvar, :file)),
                            s(:send, nil, :assert_ownership_user,
                              s(:lvar, :uid),
                              s(:lvar, :file))))))))),
              s(:def, :test_chown_dir_user_ownership_not_recursive_with_root,
                s(:args),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :uid_1),
                      s(:lvasgn, :uid_2)),
                    s(:send, nil, :distinct_uids,
                      s(:int, 2))),
                  s(:if,
                    s(:and,
                      s(:lvar, :uid_1),
                      s(:lvar, :uid_2)), nil,
                    s(:return)),
                  s(:block,
                    s(:send, nil, :assert_output_lines,
                      s(:array)),
                    s(:args),
                    s(:begin,
                      s(:send, nil, :mkdir,
                        s(:str, "tmp/dir")),
                      s(:send, nil, :touch,
                        s(:str, "tmp/dir/a")),
                      s(:send, nil, :chown,
                        s(:lvar, :uid_1),
                        s(:nil),
                        s(:array,
                          s(:str, "tmp/dir"),
                          s(:str, "tmp/dir/a"))),
                      s(:send, nil, :assert_ownership_user,
                        s(:lvar, :uid_1),
                        s(:str, "tmp/dir")),
                      s(:send, nil, :assert_ownership_user,
                        s(:lvar, :uid_1),
                        s(:str, "tmp/dir/a")),
                      s(:send, nil, :chown,
                        s(:lvar, :uid_2),
                        s(:nil),
                        s(:str, "tmp/dir")),
                      s(:send, nil, :assert_ownership_user,
                        s(:lvar, :uid_2),
                        s(:str, "tmp/dir")),
                      s(:send, nil, :assert_ownership_user,
                        s(:lvar, :uid_1),
                        s(:str, "tmp/dir/a")))))),
              s(:def, :test_chown_R_with_root,
                s(:args),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :uid_1),
                      s(:lvasgn, :uid_2)),
                    s(:send, nil, :distinct_uids,
                      s(:int, 2))),
                  s(:if,
                    s(:and,
                      s(:lvar, :uid_1),
                      s(:lvar, :uid_2)), nil,
                    s(:return)),
                  s(:block,
                    s(:send, nil, :assert_output_lines,
                      s(:array)),
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :list,
                        s(:array,
                          s(:str, "tmp/dir"),
                          s(:str, "tmp/dir/a"),
                          s(:str, "tmp/dir/a/b"),
                          s(:str, "tmp/dir/a/b/c"))),
                      s(:send, nil, :mkdir_p,
                        s(:str, "tmp/dir/a/b/c")),
                      s(:send, nil, :touch,
                        s(:str, "tmp/d")),
                      s(:send, nil, :chown_R,
                        s(:lvar, :uid_1),
                        s(:nil),
                        s(:str, "tmp/dir")),
                      s(:block,
                        s(:send,
                          s(:lvar, :list), :each),
                        s(:args,
                          s(:arg, :dir)),
                        s(:send, nil, :assert_ownership_user,
                          s(:lvar, :uid_1),
                          s(:lvar, :dir))),
                      s(:send, nil, :chown_R,
                        s(:lvar, :uid_1),
                        s(:nil),
                        s(:str, "tmp/d")),
                      s(:send, nil, :assert_ownership_user,
                        s(:lvar, :uid_1),
                        s(:str, "tmp/d")),
                      s(:send, nil, :chown_R,
                        s(:lvar, :uid_2),
                        s(:nil),
                        s(:array,
                          s(:str, "tmp/dir"),
                          s(:str, "tmp/d"))),
                      s(:op_asgn,
                        s(:lvasgn, :list), :+,
                        s(:array,
                          s(:str, "tmp/d"))),
                      s(:block,
                        s(:send,
                          s(:lvar, :list), :each),
                        s(:args,
                          s(:arg, :dir)),
                        s(:send, nil, :assert_ownership_user,
                          s(:lvar, :uid_2),
                          s(:lvar, :dir)))))))),
            s(:begin,
              s(:def, :test_chown_without_permission,
                s(:args),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :uid_1),
                      s(:lvasgn, :uid_2)),
                    s(:send, nil, :distinct_uids,
                      s(:int, 2))),
                  s(:if,
                    s(:and,
                      s(:lvar, :uid_1),
                      s(:lvar, :uid_2)), nil,
                    s(:return)),
                  s(:send, nil, :touch,
                    s(:str, "tmp/a")),
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:const,
                        s(:const, nil, :Errno), :EPERM)),
                    s(:args),
                    s(:begin,
                      s(:send, nil, :chown,
                        s(:lvar, :uid_1),
                        s(:nil),
                        s(:str, "tmp/a")),
                      s(:send, nil, :chown,
                        s(:lvar, :uid_2),
                        s(:nil),
                        s(:str, "tmp/a")))))),
              s(:def, :test_chown_R_without_permission,
                s(:args),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :uid_1),
                      s(:lvasgn, :uid_2)),
                    s(:send, nil, :distinct_uids,
                      s(:int, 2))),
                  s(:if,
                    s(:and,
                      s(:lvar, :uid_1),
                      s(:lvar, :uid_2)), nil,
                    s(:return)),
                  s(:send, nil, :touch,
                    s(:str, "tmp/a")),
                  s(:lvasgn, :exception,
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :Errno), :EPERM)),
                      s(:args),
                      s(:begin,
                        s(:send, nil, :chown_R,
                          s(:lvar, :uid_1),
                          s(:nil),
                          s(:str, "tmp/a")),
                        s(:send, nil, :chown_R,
                          s(:lvar, :uid_2),
                          s(:nil),
                          s(:str, "tmp/a")))))))))), nil),
      s(:def, :test_copy_entry,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :copy_entry)),
          s(:block,
            s(:send, nil, :each_srcdest),
            s(:args,
              s(:arg, :srcpath),
              s(:arg, :destpath)),
            s(:begin,
              s(:send, nil, :copy_entry,
                s(:lvar, :srcpath),
                s(:lvar, :destpath)),
              s(:send, nil, :assert_same_file,
                s(:lvar, :srcpath),
                s(:lvar, :destpath)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :stat,
                    s(:lvar, :srcpath)), :ftype),
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :stat,
                    s(:lvar, :destpath)), :ftype)))))),
      s(:if,
        s(:send, nil, :have_symlink?),
        s(:def, :test_copy_entry_symlink,
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :File), :symlink,
              s(:str, "somewhere"),
              s(:str, "tmp/symsrc")),
            s(:send, nil, :copy_entry,
              s(:str, "tmp/symsrc"),
              s(:str, "tmp/symdest")),
            s(:send, nil, :assert_symlink,
              s(:str, "tmp/symdest")),
            s(:send, nil, :assert_equal,
              s(:str, "somewhere"),
              s(:send,
                s(:const, nil, :File), :readlink,
                s(:str, "tmp/symdest"))),
            s(:send, nil, :mkdir,
              s(:str, "tmp/dir")),
            s(:send,
              s(:const, nil, :File), :symlink,
              s(:str, "somewhere"),
              s(:str, "tmp/dir/sym")),
            s(:send, nil, :copy_entry,
              s(:str, "tmp/dir"),
              s(:str, "tmp/dirdest")),
            s(:send, nil, :assert_directory,
              s(:str, "tmp/dirdest")),
            s(:send, nil, :assert_not_symlink,
              s(:str, "tmp/dirdest")),
            s(:send, nil, :assert_symlink,
              s(:str, "tmp/dirdest/sym")),
            s(:send, nil, :assert_equal,
              s(:str, "somewhere"),
              s(:send,
                s(:const, nil, :File), :readlink,
                s(:str, "tmp/dirdest/sym"))))), nil),
      s(:def, :test_copy_file,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :copy_file)),
          s(:block,
            s(:send, nil, :each_srcdest),
            s(:args,
              s(:arg, :srcpath),
              s(:arg, :destpath)),
            s(:begin,
              s(:send, nil, :copy_file,
                s(:lvar, :srcpath),
                s(:lvar, :destpath)),
              s(:send, nil, :assert_same_file,
                s(:lvar, :srcpath),
                s(:lvar, :destpath)))))),
      s(:def, :test_copy_stream,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :copy_stream)),
          s(:block,
            s(:send, nil, :each_srcdest),
            s(:args,
              s(:arg, :srcpath),
              s(:arg, :destpath)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:lvar, :srcpath),
                  s(:str, "rb")),
                s(:args,
                  s(:arg, :src)),
                s(:block,
                  s(:send,
                    s(:const, nil, :File), :open,
                    s(:lvar, :destpath),
                    s(:str, "wb")),
                  s(:args,
                    s(:arg, :dest)),
                  s(:send, nil, :copy_stream,
                    s(:lvar, :src),
                    s(:lvar, :dest)))),
              s(:send, nil, :assert_same_file,
                s(:lvar, :srcpath),
                s(:lvar, :destpath)))))),
      s(:def, :test_copy_stream_duck,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :copy_stream)),
          s(:block,
            s(:send, nil, :each_srcdest),
            s(:args,
              s(:arg, :srcpath),
              s(:arg, :destpath)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:lvar, :srcpath),
                  s(:str, "rb")),
                s(:args,
                  s(:arg, :src)),
                s(:block,
                  s(:send,
                    s(:const, nil, :File), :open,
                    s(:lvar, :destpath),
                    s(:str, "wb")),
                  s(:args,
                    s(:arg, :dest)),
                  s(:send, nil, :copy_stream,
                    s(:send,
                      s(:const, nil, :Stream), :new,
                      s(:lvar, :src)),
                    s(:send,
                      s(:const, nil, :Stream), :new,
                      s(:lvar, :dest))))),
              s(:send, nil, :assert_same_file,
                s(:lvar, :srcpath),
                s(:lvar, :destpath)))))),
      s(:def, :test_remove_file,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :remove_file)),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "data/tmp"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "dummy"))),
          s(:send, nil, :remove_file,
            s(:str, "data/tmp")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "data/tmp")))),
      s(:if,
        s(:send, nil, :have_file_perm?),
        s(:def, :test_remove_file_file_perm,
          s(:args),
          s(:begin,
            s(:block,
              s(:send,
                s(:const, nil, :File), :open,
                s(:str, "data/tmp"),
                s(:str, "w")),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:lvar, :f), :puts,
                s(:str, "dummy"))),
            s(:send,
              s(:const, nil, :File), :chmod,
              s(:int, 0),
              s(:str, "data/tmp")),
            s(:send, nil, :remove_file,
              s(:str, "data/tmp")),
            s(:send, nil, :assert_file_not_exist,
              s(:str, "data/tmp")))), nil),
      s(:def, :test_remove_dir,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :remove_dir)),
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:str, "data/tmpdir")),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:str, "data/tmpdir/a"),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "dummy"))),
          s(:send, nil, :remove_dir,
            s(:str, "data/tmpdir")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "data/tmpdir")))),
      s(:if,
        s(:send, nil, :have_file_perm?),
        s(:def, :test_remove_dir_file_perm,
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :Dir), :mkdir,
              s(:str, "data/tmpdir")),
            s(:send,
              s(:const, nil, :File), :chmod,
              s(:int, 365),
              s(:str, "data/tmpdir")),
            s(:send, nil, :remove_dir,
              s(:str, "data/tmpdir")),
            s(:send, nil, :assert_file_not_exist,
              s(:str, "data/tmpdir")))), nil),
      s(:def, :test_compare_file,
        s(:args),
        s(:send, nil, :check_singleton,
          s(:sym, :compare_file))),
      s(:def, :test_compare_stream,
        s(:args),
        s(:send, nil, :check_singleton,
          s(:sym, :compare_stream))),
      s(:class,
        s(:const, nil, :Stream), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :f)),
            s(:ivasgn, :@f,
              s(:lvar, :f))),
          s(:def, :read,
            s(:args,
              s(:restarg, :args)),
            s(:send,
              s(:ivar, :@f), :read,
              s(:splat,
                s(:lvar, :args)))),
          s(:def, :write,
            s(:args,
              s(:arg, :str)),
            s(:send,
              s(:ivar, :@f), :write,
              s(:lvar, :str))))),
      s(:def, :test_uptodate?,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :uptodate?)),
          s(:send, nil, :prepare_time_data),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:str, "data")),
            s(:args),
            s(:begin,
              s(:send, nil, :assert,
                s(:send, nil, :uptodate?,
                  s(:str, "newest"),
                  s(:array,
                    s(:str, "old"),
                    s(:str, "newer"),
                    s(:str, "notexist")))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send, nil, :uptodate?,
                    s(:str, "newer"),
                    s(:array,
                      s(:str, "old"),
                      s(:str, "newest"),
                      s(:str, "notexist"))), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send, nil, :uptodate?,
                    s(:str, "notexist"),
                    s(:array,
                      s(:str, "old"),
                      s(:str, "newest"),
                      s(:str, "newer"))), :!)))),
          s(:send, nil, :touch,
            s(:str, "tmp/a")),
          s(:send, nil, :touch,
            s(:str, "tmp/b")),
          s(:send, nil, :touch,
            s(:str, "tmp/c")),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:begin,
              s(:send, nil, :uptodate?,
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/a")),
                s(:array,
                  s(:str, "tmp/b"),
                  s(:str, "tmp/c"))),
              s(:send, nil, :uptodate?,
                s(:str, "tmp/a"),
                s(:array,
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "tmp/b")),
                  s(:str, "tmp/c"))),
              s(:send, nil, :uptodate?,
                s(:str, "tmp/a"),
                s(:array,
                  s(:str, "tmp/b"),
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "tmp/c")))),
              s(:send, nil, :uptodate?,
                s(:send,
                  s(:const, nil, :Pathname), :new,
                  s(:str, "tmp/a")),
                s(:array,
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "tmp/b")),
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:str, "tmp/c")))))),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:regexp,
                s(:str, "wrong number of arguments \\(.*\\b3\\b.* 2\\)"),
                s(:regopt))),
            s(:args),
            s(:send, nil, :uptodate?,
              s(:str, "new"),
              s(:array,
                s(:str, "old"),
                s(:str, "oldest")),
              s(:hash))))),
      s(:def, :test_cd,
        s(:args),
        s(:send, nil, :check_singleton,
          s(:sym, :cd))),
      s(:def, :test_chdir,
        s(:args),
        s(:send, nil, :check_singleton,
          s(:sym, :chdir))),
      s(:def, :test_getwd,
        s(:args),
        s(:send, nil, :check_singleton,
          s(:sym, :getwd))),
      s(:def, :test_identical?,
        s(:args),
        s(:send, nil, :check_singleton,
          s(:sym, :identical?))),
      s(:def, :test_link,
        s(:args),
        s(:send, nil, :check_singleton,
          s(:sym, :link))),
      s(:def, :test_makedirs,
        s(:args),
        s(:send, nil, :check_singleton,
          s(:sym, :makedirs))),
      s(:def, :test_mkpath,
        s(:args),
        s(:send, nil, :check_singleton,
          s(:sym, :mkpath))),
      s(:def, :test_move,
        s(:args),
        s(:send, nil, :check_singleton,
          s(:sym, :move))),
      s(:def, :test_rm_rf,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :rm_rf)),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "mswin|mingw"),
                s(:regopt)),
              s(:const, nil, :RUBY_PLATFORM)),
            s(:return), nil),
          s(:send, nil, :mkdir,
            s(:str, "tmpdatadir")),
          s(:send, nil, :chmod,
            s(:int, 700),
            s(:str, "tmpdatadir")),
          s(:send, nil, :rm_rf,
            s(:str, "tmpdatadir")),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "tmpdatadir")))),
      s(:def, :test_rmdir,
        s(:args),
        s(:begin,
          s(:send, nil, :check_singleton,
            s(:sym, :rmdir)),
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:const, nil, :Dir), :rmdir,
                s(:str, "/")),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :ENOTEMPTY)), nil, nil),
              s(:resbody, nil,
                s(:lvasgn, :e),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:send,
                      s(:lvar, :e), :class)),
                  s(:args),
                  s(:send, nil, :rmdir,
                    s(:str, "/")))), nil)),
          s(:lvasgn, :subdir,
            s(:str, "data/sub/dir")),
          s(:send, nil, :mkdir_p,
            s(:lvar, :subdir)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const,
                s(:const, nil, :Errno), :ENOENT)),
            s(:args),
            s(:send, nil, :rmdir,
              s(:lvar, :subdir),
              s(:hash,
                s(:pair,
                  s(:sym, :parents),
                  s(:true))))),
          s(:send, nil, :assert_file_not_exist,
            s(:lvar, :subdir)),
          s(:send, nil, :assert_file_not_exist,
            s(:str, "data/sub")),
          s(:send, nil, :assert_directory,
            s(:str, "data")))),
      s(:def, :test_rmtree,
        s(:args),
        s(:send, nil, :check_singleton,
          s(:sym, :rmtree))),
      s(:def, :test_safe_unlink,
        s(:args),
        s(:send, nil, :check_singleton,
          s(:sym, :safe_unlink))),
      s(:def, :test_symlink,
        s(:args),
        s(:send, nil, :check_singleton,
          s(:sym, :symlink))),
      s(:def, :test_touch,
        s(:args),
        s(:send, nil, :check_singleton,
          s(:sym, :touch))),
      s(:def, :test_collect_methods,
        s(:args), nil),
      s(:def, :test_commands,
        s(:args), nil),
      s(:def, :test_have_option?,
        s(:args), nil),
      s(:def, :test_options,
        s(:args), nil),
      s(:def, :test_options_of,
        s(:args), nil))))
