s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "rss-testcase")),
  s(:send, nil, :require,
    s(:str, "rss/atom")),
  s(:module,
    s(:const, nil, :RSS),
    s(:class,
      s(:const, nil, :TestParserAtomFeed),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:def, :test_feed_validation,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_ns,
                s(:str, ""),
                s(:const,
                  s(:const, nil, :Atom), :URI)),
              s(:args),
              s(:send,
                s(:const, nil, :Parser), :parse,
                s(:str, "<feed/>\n"))),
            s(:block,
              s(:send, nil, :assert_ns,
                s(:str, ""),
                s(:const,
                  s(:const, nil, :Atom), :URI)),
              s(:args),
              s(:send,
                s(:const, nil, :Parser), :parse,
                s(:str, "<feed xmlns=\"hoge\"/>\n"))),
            s(:block,
              s(:send, nil, :assert_parse,
                s(:dstr,
                  s(:str, "<feed xmlns=\""),
                  s(:begin,
                    s(:const,
                      s(:const, nil, :Atom), :URI)),
                  s(:str, "\"/>\n")),
                s(:sym, :missing_tag),
                s(:str, "id"),
                s(:str, "feed")),
              s(:args), nil),
            s(:block,
              s(:send, nil, :assert_parse,
                s(:dstr,
                  s(:str, "<feed xmlns=\""),
                  s(:begin,
                    s(:const,
                      s(:const, nil, :Atom), :URI)),
                  s(:str, "\">\n"),
                  s(:str, "  <id>urn:uuid:60a76c80-d399-11d9-b93C-0003939e0af6</id>\n"),
                  s(:str, "</feed>\n")),
                s(:sym, :missing_tag),
                s(:str, "title"),
                s(:str, "feed")),
              s(:args), nil),
            s(:block,
              s(:send, nil, :assert_parse,
                s(:dstr,
                  s(:str, "<feed xmlns=\""),
                  s(:begin,
                    s(:const,
                      s(:const, nil, :Atom), :URI)),
                  s(:str, "\">\n"),
                  s(:str, "  <id>urn:uuid:60a76c80-d399-11d9-b93C-0003939e0af6</id>\n"),
                  s(:str, "  <title>Example Feed</title>\n"),
                  s(:str, "</feed>\n")),
                s(:sym, :missing_tag),
                s(:str, "updated"),
                s(:str, "feed")),
              s(:args), nil),
            s(:block,
              s(:send, nil, :assert_parse,
                s(:dstr,
                  s(:str, "<feed xmlns=\""),
                  s(:begin,
                    s(:const,
                      s(:const, nil, :Atom), :URI)),
                  s(:str, "\">\n"),
                  s(:str, "  <id>urn:uuid:60a76c80-d399-11d9-b93C-0003939e0af6</id>\n"),
                  s(:str, "  <title>Example Feed</title>\n"),
                  s(:str, "  <updated>2003-12-13T18:30:02Z</updated>\n"),
                  s(:str, "</feed>\n")),
                s(:sym, :missing_tag),
                s(:str, "author"),
                s(:str, "feed")),
              s(:args), nil),
            s(:block,
              s(:send, nil, :assert_parse,
                s(:dstr,
                  s(:str, "<feed xmlns=\""),
                  s(:begin,
                    s(:const,
                      s(:const, nil, :Atom), :URI)),
                  s(:str, "\">\n"),
                  s(:str, "  <id>urn:uuid:60a76c80-d399-11d9-b93C-0003939e0af6</id>\n"),
                  s(:str, "  <title>Example Feed</title>\n"),
                  s(:str, "  <updated>2003-12-13T18:30:02Z</updated>\n"),
                  s(:str, "  <author>\n"),
                  s(:str, "    <name>A person</name>\n"),
                  s(:str, "  </author>\n"),
                  s(:str, "</feed>\n")),
                s(:sym, :nothing_raised)),
              s(:args), nil))),
        s(:def, :test_lang,
          s(:args),
          s(:begin,
            s(:lvasgn, :feed,
              s(:send,
                s(:const,
                  s(:const, nil, :RSS), :Parser), :parse,
                s(:dstr,
                  s(:str, "<feed xmlns=\""),
                  s(:begin,
                    s(:const,
                      s(:const, nil, :Atom), :URI)),
                  s(:str, "\" xml:lang=\"ja\">\n"),
                  s(:str, "  <id>urn:uuid:60a76c80-d399-11d9-b93C-0003939e0af6</id>\n"),
                  s(:str, "  <title xml:lang=\"en\">Example Feed</title>\n"),
                  s(:str, "  <updated>2003-12-13T18:30:02Z</updated>\n"),
                  s(:str, "  <author xml:lang=\"en\">\n"),
                  s(:str, "    <name>A person</name>\n"),
                  s(:str, "  </author>\n"),
                  s(:str, "</feed>\n")))),
            s(:send, nil, :assert_equal,
              s(:str, "ja"),
              s(:send,
                s(:lvar, :feed), :lang)),
            s(:send, nil, :assert_equal,
              s(:str, "ja"),
              s(:send,
                s(:send,
                  s(:lvar, :feed), :id), :lang)),
            s(:send, nil, :assert_equal,
              s(:str, "en"),
              s(:send,
                s(:send,
                  s(:lvar, :feed), :title), :lang)),
            s(:send, nil, :assert_equal,
              s(:str, "ja"),
              s(:send,
                s(:send,
                  s(:lvar, :feed), :updated), :lang)),
            s(:send, nil, :assert_equal,
              s(:str, "en"),
              s(:send,
                s(:send,
                  s(:lvar, :feed), :author), :lang)),
            s(:send, nil, :assert_equal,
              s(:str, "en"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :author), :name), :lang)))),
        s(:def, :test_base,
          s(:args),
          s(:begin,
            s(:lvasgn, :feed,
              s(:send,
                s(:const,
                  s(:const, nil, :RSS), :Parser), :parse,
                s(:dstr,
                  s(:str, "<feed xmlns=\""),
                  s(:begin,
                    s(:const,
                      s(:const, nil, :Atom), :URI)),
                  s(:str, "\" xml:base=\"http://example.com/\">\n"),
                  s(:str, "  <id>urn:uuid:60a76c80-d399-11d9-b93C-0003939e0af6</id>\n"),
                  s(:str, "  <title xml:lang=\"en\">Example Feed</title>\n"),
                  s(:str, "  <updated>2003-12-13T18:30:02Z</updated>\n"),
                  s(:str, "  <generator uri=\"generator\">Generator</generator>\n"),
                  s(:str, "  <link hreflang=\"ja\" href=\"http://example.org/link1\"/>\n"),
                  s(:str, "  <link hreflang=\"en\" href=\"link2\"/>\n"),
                  s(:str, "  <link hreflang=\"fr\" xml:base=\"http://example.net/\" href=\"link3\"/>\n"),
                  s(:str, "  <author>\n"),
                  s(:str, "    <name>A person</name>\n"),
                  s(:str, "    <uri>person</uri>\n"),
                  s(:str, "  </author>\n"),
                  s(:str, "</feed>\n")))),
            s(:send, nil, :assert_equal,
              s(:str, "http://example.com/"),
              s(:send,
                s(:lvar, :feed), :base)),
            s(:send, nil, :assert_equal,
              s(:str, "http://example.com/"),
              s(:send,
                s(:send,
                  s(:lvar, :feed), :id), :base)),
            s(:send, nil, :assert_equal,
              s(:str, "http://example.com/"),
              s(:send,
                s(:send,
                  s(:lvar, :feed), :title), :base)),
            s(:send, nil, :assert_equal,
              s(:str, "http://example.com/"),
              s(:send,
                s(:send,
                  s(:lvar, :feed), :updated), :base)),
            s(:send, nil, :assert_equal,
              s(:str, "http://example.com/"),
              s(:send,
                s(:send,
                  s(:lvar, :feed), :generator), :base)),
            s(:send, nil, :assert_equal,
              s(:str, "http://example.com/generator"),
              s(:send,
                s(:send,
                  s(:lvar, :feed), :generator), :uri)),
            s(:send, nil, :assert_equal,
              s(:str, "http://example.com/"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :links), :[],
                  s(:int, 0)), :base)),
            s(:send, nil, :assert_equal,
              s(:str, "http://example.org/link1"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :links), :[],
                  s(:int, 0)), :href)),
            s(:send, nil, :assert_equal,
              s(:str, "http://example.com/"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :links), :[],
                  s(:int, 1)), :base)),
            s(:send, nil, :assert_equal,
              s(:str, "http://example.com/link2"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :links), :[],
                  s(:int, 1)), :href)),
            s(:send, nil, :assert_equal,
              s(:str, "http://example.net/"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :links), :[],
                  s(:int, 2)), :base)),
            s(:send, nil, :assert_equal,
              s(:str, "http://example.net/link3"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :links), :[],
                  s(:int, 2)), :href)),
            s(:send, nil, :assert_equal,
              s(:str, "http://example.com/person"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :author), :uri), :content)))),
        s(:def, :test_feed_author,
          s(:args),
          s(:block,
            s(:send, nil, :assert_atom_person,
              s(:str, "author"),
              s(:send, nil, :method,
                s(:sym, :make_feed))),
            s(:args,
              s(:arg, :feed)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :authors), :size)),
              s(:send,
                s(:send,
                  s(:lvar, :feed), :authors), :[],
                s(:int, 1))))),
        s(:def, :test_entry_author,
          s(:args),
          s(:begin,
            s(:lvasgn, :generator,
              s(:send, nil, :method,
                s(:sym, :make_feed_with_open_entry))),
            s(:block,
              s(:send, nil, :assert_atom_person,
                s(:str, "author"),
                s(:lvar, :generator)),
              s(:args,
                s(:arg, :feed)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:send,
                    s(:send,
                      s(:lvar, :feed), :entries), :size)),
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :feed), :entry), :authors), :size)),
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :entry), :author))))),
        s(:def, :test_feed_category,
          s(:args),
          s(:block,
            s(:send, nil, :assert_atom_category,
              s(:send, nil, :method,
                s(:sym, :make_feed))),
            s(:args,
              s(:arg, :feed)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :categories), :size)),
              s(:send,
                s(:lvar, :feed), :category)))),
        s(:def, :test_entry_category,
          s(:args),
          s(:block,
            s(:send, nil, :assert_atom_category,
              s(:send, nil, :method,
                s(:sym, :make_feed_with_open_entry))),
            s(:args,
              s(:arg, :feed)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :entries), :size)),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :feed), :entry), :categories), :size)),
              s(:send,
                s(:send,
                  s(:lvar, :feed), :entry), :category)))),
        s(:def, :test_entry_content,
          s(:args),
          s(:block,
            s(:send, nil, :assert_atom_content,
              s(:send, nil, :method,
                s(:sym, :make_feed_with_open_entry))),
            s(:args,
              s(:arg, :feed)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :entries), :size)),
              s(:send,
                s(:send,
                  s(:lvar, :feed), :entry), :content)))),
        s(:def, :test_feed_contributor,
          s(:args),
          s(:block,
            s(:send, nil, :assert_atom_person,
              s(:str, "contributor"),
              s(:send, nil, :method,
                s(:sym, :make_feed))),
            s(:args,
              s(:arg, :feed)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :contributors), :size)),
              s(:send,
                s(:lvar, :feed), :contributor)))),
        s(:def, :test_entry_contributor,
          s(:args),
          s(:begin,
            s(:lvasgn, :generator,
              s(:send, nil, :method,
                s(:sym, :make_feed_with_open_entry))),
            s(:block,
              s(:send, nil, :assert_atom_person,
                s(:str, "contributor"),
                s(:lvar, :generator)),
              s(:args,
                s(:arg, :feed)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:send,
                    s(:send,
                      s(:lvar, :feed), :entries), :size)),
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :feed), :entry), :contributors), :size)),
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :entry), :contributor))))),
        s(:def, :test_feed_generator,
          s(:args),
          s(:block,
            s(:send, nil, :assert_atom_generator,
              s(:send, nil, :method,
                s(:sym, :make_feed))),
            s(:args,
              s(:arg, :feed)),
            s(:send,
              s(:lvar, :feed), :generator))),
        s(:def, :test_feed_icon,
          s(:args),
          s(:block,
            s(:send, nil, :assert_atom_icon,
              s(:send, nil, :method,
                s(:sym, :make_feed))),
            s(:args,
              s(:arg, :feed)),
            s(:send,
              s(:lvar, :feed), :icon))),
        s(:def, :test_feed_id,
          s(:args),
          s(:begin,
            s(:lvasgn, :feed,
              s(:send,
                s(:const,
                  s(:const, nil, :RSS), :Parser), :parse,
                s(:send, nil, :make_feed,
                  s(:str, "")))),
            s(:send, nil, :assert_equal,
              s(:const, nil, :FEED_ID),
              s(:send,
                s(:send,
                  s(:lvar, :feed), :id), :content)))),
        s(:def, :test_entry_id,
          s(:args),
          s(:begin,
            s(:lvasgn, :feed,
              s(:send,
                s(:const,
                  s(:const, nil, :RSS), :Parser), :parse,
                s(:send, nil, :make_feed,
                  s(:str, "")))),
            s(:send, nil, :assert_equal,
              s(:const, nil, :ENTRY_ID),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :entry), :id), :content)))),
        s(:def, :test_feed_link,
          s(:args),
          s(:block,
            s(:send, nil, :assert_atom_link,
              s(:send, nil, :method,
                s(:sym, :make_feed))),
            s(:args,
              s(:arg, :feed)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :links), :size)),
              s(:send,
                s(:lvar, :feed), :link)))),
        s(:def, :test_entry_link,
          s(:args),
          s(:block,
            s(:send, nil, :assert_atom_link,
              s(:send, nil, :method,
                s(:sym, :make_feed_with_open_entry))),
            s(:args,
              s(:arg, :feed)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :entries), :size)),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :feed), :entry), :links), :size)),
              s(:send,
                s(:send,
                  s(:lvar, :feed), :entry), :link)))),
        s(:def, :test_feed_logo,
          s(:args),
          s(:block,
            s(:send, nil, :assert_atom_logo,
              s(:send, nil, :method,
                s(:sym, :make_feed))),
            s(:args,
              s(:arg, :feed)),
            s(:send,
              s(:lvar, :feed), :logo))),
        s(:def, :test_feed_rights,
          s(:args),
          s(:block,
            s(:send, nil, :assert_atom_text_construct,
              s(:str, "rights"),
              s(:send, nil, :method,
                s(:sym, :make_feed))),
            s(:args,
              s(:arg, :feed)),
            s(:send,
              s(:lvar, :feed), :rights))),
        s(:def, :test_entry_rights,
          s(:args),
          s(:begin,
            s(:lvasgn, :generator,
              s(:send, nil, :method,
                s(:sym, :make_feed_with_open_entry))),
            s(:block,
              s(:send, nil, :assert_atom_text_construct,
                s(:str, "rights"),
                s(:lvar, :generator)),
              s(:args,
                s(:arg, :feed)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:send,
                    s(:send,
                      s(:lvar, :feed), :entries), :size)),
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :entry), :rights))))),
        s(:def, :test_entry_source,
          s(:args),
          s(:block,
            s(:send, nil, :assert_atom_source,
              s(:send, nil, :method,
                s(:sym, :make_feed_with_open_entry_source))),
            s(:args,
              s(:arg, :feed)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :entries), :size)),
              s(:send, nil, :assert_not_nil,
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :entry), :source)),
              s(:send,
                s(:send,
                  s(:lvar, :feed), :entry), :source)))),
        s(:def, :test_feed_subtitle,
          s(:args),
          s(:block,
            s(:send, nil, :assert_atom_text_construct,
              s(:str, "subtitle"),
              s(:send, nil, :method,
                s(:sym, :make_feed))),
            s(:args,
              s(:arg, :feed)),
            s(:send,
              s(:lvar, :feed), :subtitle))),
        s(:def, :test_feed_title,
          s(:args),
          s(:begin,
            s(:lvasgn, :feed,
              s(:send,
                s(:const,
                  s(:const, nil, :RSS), :Parser), :parse,
                s(:send, nil, :make_feed,
                  s(:str, "")))),
            s(:send, nil, :assert_equal,
              s(:const, nil, :FEED_TITLE),
              s(:send,
                s(:send,
                  s(:lvar, :feed), :title), :content)))),
        s(:def, :test_entry_title,
          s(:args),
          s(:begin,
            s(:lvasgn, :feed,
              s(:send,
                s(:const,
                  s(:const, nil, :RSS), :Parser), :parse,
                s(:send, nil, :make_feed,
                  s(:str, "")))),
            s(:send, nil, :assert_equal,
              s(:const, nil, :ENTRY_TITLE),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :entry), :title), :content)))),
        s(:def, :test_feed_updated,
          s(:args),
          s(:begin,
            s(:lvasgn, :feed,
              s(:send,
                s(:const,
                  s(:const, nil, :RSS), :Parser), :parse,
                s(:send, nil, :make_feed,
                  s(:str, "")))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :Time), :parse,
                s(:const, nil, :FEED_UPDATED)),
              s(:send,
                s(:send,
                  s(:lvar, :feed), :updated), :content)))),
        s(:def, :test_entry_updated,
          s(:args),
          s(:begin,
            s(:lvasgn, :feed,
              s(:send,
                s(:const,
                  s(:const, nil, :RSS), :Parser), :parse,
                s(:send, nil, :make_feed,
                  s(:str, "")))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :Time), :parse,
                s(:const, nil, :ENTRY_UPDATED)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :entry), :updated), :content)))),
        s(:def, :test_entry_published,
          s(:args),
          s(:begin,
            s(:lvasgn, :generator,
              s(:send, nil, :method,
                s(:sym, :make_feed_with_open_entry))),
            s(:block,
              s(:send, nil, :assert_atom_date_construct,
                s(:str, "published"),
                s(:lvar, :generator)),
              s(:args,
                s(:arg, :feed)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:send,
                    s(:send,
                      s(:lvar, :feed), :entries), :size)),
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :entry), :published))))),
        s(:def, :test_entry_summary,
          s(:args),
          s(:begin,
            s(:lvasgn, :generator,
              s(:send, nil, :method,
                s(:sym, :make_feed_with_open_entry))),
            s(:block,
              s(:send, nil, :assert_atom_text_construct,
                s(:str, "summary"),
                s(:lvar, :generator)),
              s(:args,
                s(:arg, :feed)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:send,
                    s(:send,
                      s(:lvar, :feed), :entries), :size)),
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :entry), :summary)))))))))
