s(:begin,
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:send, nil, :require_relative,
    s(:str, "rss-testcase")),
  s(:send, nil, :require,
    s(:str, "rss/1.0")),
  s(:send, nil, :require,
    s(:str, "rss/dublincore")),
  s(:module,
    s(:const, nil, :RSS),
    s(:class,
      s(:const, nil, :TestParser),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:ivasgn, :@_default_parser,
              s(:send,
                s(:const, nil, :Parser), :default_parser)),
            s(:ivasgn, :@rss10,
              s(:send, nil, :make_RDF,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :make_channel)),
                  s(:str, "\n"),
                  s(:begin,
                    s(:send, nil, :make_item)),
                  s(:str, "\n"),
                  s(:begin,
                    s(:send, nil, :make_textinput)),
                  s(:str, "\n"),
                  s(:begin,
                    s(:send, nil, :make_image)),
                  s(:str, "\n")))),
            s(:ivasgn, :@rss_tmp,
              s(:send,
                s(:const, nil, :Tempfile), :new,
                s(:array,
                  s(:str, "rss10-"),
                  s(:str, ".rdf")))),
            s(:send,
              s(:ivar, :@rss_tmp), :print,
              s(:ivar, :@rss10)),
            s(:send,
              s(:ivar, :@rss_tmp), :close),
            s(:ivasgn, :@rss_file,
              s(:send,
                s(:send,
                  s(:ivar, :@rss_tmp), :path), :untaint)))),
        s(:def, :teardown,
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :Parser), :default_parser=,
              s(:ivar, :@_default_parser)),
            s(:send,
              s(:ivar, :@rss_tmp), :close,
              s(:true)))),
        s(:def, :test_default_parser,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:send,
                s(:const, nil, :Parser), :default_parser=,
                s(:send,
                  s(:const,
                    s(:const, nil, :RSS), :AVAILABLE_PARSERS), :first))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :RSS), :NotValidXMLParser)),
              s(:args),
              s(:send,
                s(:const, nil, :Parser), :default_parser=,
                s(:const,
                  s(:const, nil, :RSS), :Parser))))),
        s(:def, :test_parse,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_not_nil,
              s(:send,
                s(:const,
                  s(:const, nil, :RSS), :Parser), :parse,
                s(:ivar, :@rss_file))),
            s(:lvasgn, :garbage_rss_file,
              s(:send,
                s(:ivar, :@rss_file), :+,
                s(:str, "-garbage"))),
            s(:if,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :RSS), :Parser), :default_parser), :name), :==,
                s(:str, "RSS::XMLParserParser")),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :RSS), :NotWellFormedError)),
                s(:args),
                s(:send,
                  s(:const,
                    s(:const, nil, :RSS), :Parser), :parse,
                  s(:lvar, :garbage_rss_file))),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:const,
                    s(:const, nil, :RSS), :Parser), :parse,
                  s(:lvar, :garbage_rss_file)))))),
        s(:def, :test_parse_tag_includes_hyphen,
          s(:args),
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :RSS), :Parser), :parse,
              s(:send, nil, :make_RDF,
                s(:dstr,
                  s(:str, "<xCal:x-calconnect-venue xmlns:xCal=\"urn:ietf:params:xml:ns:xcal\" />\n"),
                  s(:begin,
                    s(:send, nil, :make_channel)),
                  s(:str, "\n"),
                  s(:begin,
                    s(:send, nil, :make_item)),
                  s(:str, "\n"),
                  s(:begin,
                    s(:send, nil, :make_textinput)),
                  s(:str, "\n"),
                  s(:begin,
                    s(:send, nil, :make_image)),
                  s(:str, "\n"))))))))))
