s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "rss-testcase")),
  s(:send, nil, :require,
    s(:str, "rss/atom")),
  s(:module,
    s(:const, nil, :RSS),
    s(:class,
      s(:const, nil, :TestParserAtom),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:def, :test_entry_validation,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_ns,
                s(:str, ""),
                s(:const,
                  s(:const, nil, :Atom), :URI)),
              s(:args),
              s(:send,
                s(:const, nil, :Parser), :parse,
                s(:str, "<entry/>\n"))),
            s(:block,
              s(:send, nil, :assert_ns,
                s(:str, ""),
                s(:const,
                  s(:const, nil, :Atom), :URI)),
              s(:args),
              s(:send,
                s(:const, nil, :Parser), :parse,
                s(:str, "<entry xmlns=\"hoge\"/>\n"))),
            s(:block,
              s(:send, nil, :assert_parse,
                s(:dstr,
                  s(:str, "<entry xmlns=\""),
                  s(:begin,
                    s(:const,
                      s(:const, nil, :Atom), :URI)),
                  s(:str, "\"/>\n")),
                s(:sym, :missing_tag),
                s(:str, "id"),
                s(:str, "entry")),
              s(:args), nil),
            s(:block,
              s(:send, nil, :assert_parse,
                s(:dstr,
                  s(:str, "<entry xmlns=\""),
                  s(:begin,
                    s(:const,
                      s(:const, nil, :Atom), :URI)),
                  s(:str, "\">\n"),
                  s(:str, "  <id>urn:uuid:506e336c-a26e-4457-917b-b89dca7ae746</id>\n"),
                  s(:str, "</entry>\n")),
                s(:sym, :missing_tag),
                s(:str, "title"),
                s(:str, "entry")),
              s(:args), nil),
            s(:block,
              s(:send, nil, :assert_parse,
                s(:dstr,
                  s(:str, "<entry xmlns=\""),
                  s(:begin,
                    s(:const,
                      s(:const, nil, :Atom), :URI)),
                  s(:str, "\">\n"),
                  s(:str, "  <id>urn:uuid:506e336c-a26e-4457-917b-b89dca7ae746</id>\n"),
                  s(:str, "  <title>Example Entry</title>\n"),
                  s(:str, "</entry>\n")),
                s(:sym, :missing_tag),
                s(:str, "updated"),
                s(:str, "entry")),
              s(:args), nil),
            s(:block,
              s(:send, nil, :assert_parse,
                s(:dstr,
                  s(:str, "<entry xmlns=\""),
                  s(:begin,
                    s(:const,
                      s(:const, nil, :Atom), :URI)),
                  s(:str, "\">\n"),
                  s(:str, "  <id>urn:uuid:506e336c-a26e-4457-917b-b89dca7ae746</id>\n"),
                  s(:str, "  <title>Example Entry</title>\n"),
                  s(:str, "  <updated>2003-10-10T18:30:02Z</updated>\n"),
                  s(:str, "</entry>\n")),
                s(:sym, :missing_tag),
                s(:str, "author"),
                s(:str, "entry")),
              s(:args), nil),
            s(:block,
              s(:send, nil, :assert_parse,
                s(:dstr,
                  s(:str, "<entry xmlns=\""),
                  s(:begin,
                    s(:const,
                      s(:const, nil, :Atom), :URI)),
                  s(:str, "\">\n"),
                  s(:str, "  <id>urn:uuid:506e336c-a26e-4457-917b-b89dca7ae746</id>\n"),
                  s(:str, "  <title>Example Entry</title>\n"),
                  s(:str, "  <updated>2003-10-10T18:30:02Z</updated>\n"),
                  s(:str, "  <author>\n"),
                  s(:str, "    <name>A person</name>\n"),
                  s(:str, "  </author>\n"),
                  s(:str, "</entry>\n")),
                s(:sym, :nothing_raised)),
              s(:args), nil))),
        s(:def, :test_entry,
          s(:args),
          s(:begin,
            s(:lvasgn, :entry,
              s(:send,
                s(:const,
                  s(:const, nil, :RSS), :Parser), :parse,
                s(:dstr,
                  s(:str, "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"),
                  s(:str, "<entry xmlns=\"http://www.w3.org/2005/Atom\">\n"),
                  s(:str, "  <author>\n"),
                  s(:str, "    <name>A person</name>\n"),
                  s(:str, "  </author>\n"),
                  s(:str, "  <title>Atom-Powered Robots Run Amok</title>\n"),
                  s(:str, "  <link href=\"http://example.org/2003/12/13/atom03\"/>\n"),
                  s(:str, "  <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>\n"),
                  s(:str, "  <updated>2003-12-13T18:30:02Z</updated>\n"),
                  s(:str, "  <summary>Some text.</summary>\n"),
                  s(:str, "</entry>\n")))),
            s(:send, nil, :assert_not_nil,
              s(:lvar, :entry)),
            s(:send, nil, :assert_equal,
              s(:str, "Atom-Powered Robots Run Amok"),
              s(:send,
                s(:send,
                  s(:lvar, :entry), :title), :content)),
            s(:send, nil, :assert_equal,
              s(:str, "http://example.org/2003/12/13/atom03"),
              s(:send,
                s(:send,
                  s(:lvar, :entry), :link), :href)),
            s(:send, nil, :assert_equal,
              s(:str, "urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a"),
              s(:send,
                s(:send,
                  s(:lvar, :entry), :id), :content)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :Time), :parse,
                s(:str, "2003-12-13T18:30:02Z")),
              s(:send,
                s(:send,
                  s(:lvar, :entry), :updated), :content)),
            s(:send, nil, :assert_equal,
              s(:str, "Some text."),
              s(:send,
                s(:send,
                  s(:lvar, :entry), :summary), :content)))),
        s(:def, :test_entry_author,
          s(:args),
          s(:block,
            s(:send, nil, :assert_atom_person,
              s(:str, "author"),
              s(:send, nil, :method,
                s(:sym, :make_entry_document))),
            s(:args,
              s(:arg, :entry)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:send,
                    s(:lvar, :entry), :authors), :size)),
              s(:send,
                s(:send,
                  s(:lvar, :entry), :authors), :last)))),
        s(:def, :test_entry_category,
          s(:args),
          s(:block,
            s(:send, nil, :assert_atom_category,
              s(:send, nil, :method,
                s(:sym, :make_entry_document))),
            s(:args,
              s(:arg, :entry)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:send,
                    s(:lvar, :entry), :categories), :size)),
              s(:send,
                s(:lvar, :entry), :category)))),
        s(:def, :test_entry_content_text,
          s(:args),
          s(:block,
            s(:send, nil, :assert_atom_content,
              s(:send, nil, :method,
                s(:sym, :make_entry_document))),
            s(:args,
              s(:arg, :entry)),
            s(:send,
              s(:lvar, :entry), :content))),
        s(:def, :test_entry_contributor,
          s(:args),
          s(:block,
            s(:send, nil, :assert_atom_person,
              s(:str, "contributor"),
              s(:send, nil, :method,
                s(:sym, :make_entry_document))),
            s(:args,
              s(:arg, :entry)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:send,
                    s(:lvar, :entry), :contributors), :size)),
              s(:send,
                s(:lvar, :entry), :contributor)))),
        s(:def, :test_entry_id,
          s(:args),
          s(:begin,
            s(:lvasgn, :entry,
              s(:send,
                s(:const,
                  s(:const, nil, :RSS), :Parser), :parse,
                s(:send, nil, :make_entry_document))),
            s(:send, nil, :assert_equal,
              s(:const, nil, :ENTRY_ID),
              s(:send,
                s(:send,
                  s(:lvar, :entry), :id), :content)))),
        s(:def, :test_entry_link,
          s(:args),
          s(:block,
            s(:send, nil, :assert_atom_link,
              s(:send, nil, :method,
                s(:sym, :make_entry_document))),
            s(:args,
              s(:arg, :entry)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:send,
                    s(:lvar, :entry), :links), :size)),
              s(:send,
                s(:lvar, :entry), :link)))),
        s(:def, :test_published,
          s(:args),
          s(:begin,
            s(:lvasgn, :generator,
              s(:send, nil, :method,
                s(:sym, :make_entry_document))),
            s(:block,
              s(:send, nil, :assert_atom_date_construct,
                s(:str, "published"),
                s(:lvar, :generator)),
              s(:args,
                s(:arg, :entry)),
              s(:send,
                s(:lvar, :entry), :published)))),
        s(:def, :test_entry_rights,
          s(:args),
          s(:begin,
            s(:lvasgn, :generator,
              s(:send, nil, :method,
                s(:sym, :make_entry_document))),
            s(:block,
              s(:send, nil, :assert_atom_text_construct,
                s(:str, "rights"),
                s(:lvar, :generator)),
              s(:args,
                s(:arg, :entry)),
              s(:send,
                s(:lvar, :entry), :rights)))),
        s(:def, :test_entry_source,
          s(:args),
          s(:begin,
            s(:lvasgn, :generator,
              s(:send, nil, :method,
                s(:sym, :make_entry_document_with_open_source))),
            s(:block,
              s(:send, nil, :assert_atom_source,
                s(:lvar, :generator)),
              s(:args,
                s(:arg, :entry)),
              s(:begin,
                s(:send, nil, :assert_not_nil,
                  s(:send,
                    s(:lvar, :entry), :source)),
                s(:send,
                  s(:lvar, :entry), :source))))),
        s(:def, :test_entry_summary,
          s(:args),
          s(:begin,
            s(:lvasgn, :generator,
              s(:send, nil, :method,
                s(:sym, :make_entry_document))),
            s(:block,
              s(:send, nil, :assert_atom_text_construct,
                s(:str, "summary"),
                s(:lvar, :generator)),
              s(:args,
                s(:arg, :entry)),
              s(:send,
                s(:lvar, :entry), :summary)))),
        s(:def, :test_entry_title,
          s(:args),
          s(:begin,
            s(:lvasgn, :entry,
              s(:send,
                s(:const,
                  s(:const, nil, :RSS), :Parser), :parse,
                s(:send, nil, :make_entry_document))),
            s(:send, nil, :assert_equal,
              s(:const, nil, :ENTRY_TITLE),
              s(:send,
                s(:send,
                  s(:lvar, :entry), :title), :content)))),
        s(:def, :test_entry_updated,
          s(:args),
          s(:begin,
            s(:lvasgn, :entry,
              s(:send,
                s(:const,
                  s(:const, nil, :RSS), :Parser), :parse,
                s(:send, nil, :make_entry_document))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :Time), :parse,
                s(:const, nil, :ENTRY_UPDATED)),
              s(:send,
                s(:send,
                  s(:lvar, :entry), :updated), :content))))))))
