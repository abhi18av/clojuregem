s(:begin,
  s(:send, nil, :require,
    s(:str, "erb")),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require_relative,
    s(:str, "rss-assertions")),
  s(:send, nil, :require,
    s(:str, "rss")),
  s(:module,
    s(:const, nil, :RSS),
    s(:class,
      s(:const, nil, :TestCase),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:send, nil, :include,
          s(:const,
            s(:const, nil, :ERB), :Util)),
        s(:send, nil, :include,
          s(:const, nil, :RSS)),
        s(:send, nil, :include,
          s(:const, nil, :Assertions)),
        s(:casgn, nil, :XMLDECL_VERSION,
          s(:str, "1.0")),
        s(:casgn, nil, :XMLDECL_ENCODING,
          s(:str, "UTF-8")),
        s(:casgn, nil, :XMLDECL_STANDALONE,
          s(:str, "no")),
        s(:casgn, nil, :RDF_ABOUT,
          s(:str, "http://www.xml.com/xml/news.rss")),
        s(:casgn, nil, :RDF_RESOURCE,
          s(:str, "http://xml.com/universal/images/xml_tiny.gif")),
        s(:casgn, nil, :TITLE_VALUE,
          s(:str, "XML.com")),
        s(:casgn, nil, :LINK_VALUE,
          s(:str, "http://xml.com/pub")),
        s(:casgn, nil, :URL_VALUE,
          s(:str, "http://xml.com/universal/images/xml_tiny.gif")),
        s(:casgn, nil, :NAME_VALUE,
          s(:str, "hogehoge")),
        s(:casgn, nil, :LANGUAGE_VALUE,
          s(:str, "ja")),
        s(:casgn, nil, :DESCRIPTION_VALUE,
          s(:dstr,
            s(:str, "\n"),
            s(:str, "    XML.com features a rich mix of information and services\n"),
            s(:str, "    for the XML community.\n"),
            s(:str, "    "))),
        s(:casgn, nil, :RESOURCES,
          s(:array,
            s(:str, "http://xml.com/pub/2000/08/09/xslt/xslt.html"),
            s(:str, "http://xml.com/pub/2000/08/09/rdfdb/index.html"))),
        s(:casgn, nil, :CLOUD_DOMAIN,
          s(:str, "data.ourfavoritesongs.com")),
        s(:casgn, nil, :CLOUD_PORT,
          s(:str, "80")),
        s(:casgn, nil, :CLOUD_PATH,
          s(:str, "/RPC2")),
        s(:casgn, nil, :CLOUD_REGISTER_PROCEDURE,
          s(:str, "ourFavoriteSongs.rssPleaseNotify")),
        s(:casgn, nil, :CLOUD_PROTOCOL,
          s(:str, "xml-rpc")),
        s(:casgn, nil, :ENCLOSURE_URL,
          s(:str, "http://www.scripting.com/mp3s/weatherReportSuite.mp3")),
        s(:casgn, nil, :ENCLOSURE_LENGTH,
          s(:str, "12216320")),
        s(:casgn, nil, :ENCLOSURE_TYPE,
          s(:str, "audio/mpeg")),
        s(:casgn, nil, :CATEGORY_DOMAIN,
          s(:str, "http://www.superopendirectory.com/")),
        s(:casgn, nil, :FEED_TITLE,
          s(:str, "dive into mark")),
        s(:casgn, nil, :FEED_UPDATED,
          s(:str, "2003-12-13T18:30:02Z")),
        s(:casgn, nil, :FEED_AUTHOR_NAME,
          s(:str, "John Doe")),
        s(:casgn, nil, :FEED_ID,
          s(:str, "urn:uuid:60a76c80-d399-11d9-b93C-0003939e0af6")),
        s(:casgn, nil, :ENTRY_TITLE,
          s(:str, "Atom-Powered Robots Run Amok")),
        s(:casgn, nil, :ENTRY_LINK,
          s(:str, "http://example.org/2003/12/13/atom03")),
        s(:casgn, nil, :ENTRY_ID,
          s(:str, "urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a")),
        s(:casgn, nil, :ENTRY_UPDATED,
          s(:str, "2003-12-13T18:30:02Z")),
        s(:casgn, nil, :ENTRY_SUMMARY,
          s(:str, "Some text.")),
        s(:lvasgn, :t,
          s(:send,
            s(:const, nil, :Time), :iso8601,
            s(:str, "2000-01-01T12:00:05+00:00"))),
        s(:sclass,
          s(:lvar, :t),
          s(:send, nil, :alias_method,
            s(:sym, :to_s),
            s(:sym, :iso8601))),
        s(:casgn, nil, :DC_ELEMENTS,
          s(:hash,
            s(:pair,
              s(:sym, :title),
              s(:str, "hoge")),
            s(:pair,
              s(:sym, :description),
              s(:dstr,
                s(:str, " XML is placing increasingly heavy loads on\n"),
                s(:str, "          the existing technical infrastructure of the Internet."))),
            s(:pair,
              s(:sym, :creator),
              s(:str, "Rael Dornfest (mailto:rael@oreilly.com)")),
            s(:pair,
              s(:sym, :subject),
              s(:str, "XML")),
            s(:pair,
              s(:sym, :publisher),
              s(:str, "The O'Reilly Network")),
            s(:pair,
              s(:sym, :contributor),
              s(:str, "hogehoge")),
            s(:pair,
              s(:sym, :type),
              s(:str, "fugafuga")),
            s(:pair,
              s(:sym, :format),
              s(:str, "hohoho")),
            s(:pair,
              s(:sym, :identifier),
              s(:str, "fufufu")),
            s(:pair,
              s(:sym, :source),
              s(:str, "barbar")),
            s(:pair,
              s(:sym, :language),
              s(:str, "ja")),
            s(:pair,
              s(:sym, :relation),
              s(:str, "cococo")),
            s(:pair,
              s(:sym, :rights),
              s(:str, "Copyright (c) 2000 O'Reilly &amp; Associates, Inc.")),
            s(:pair,
              s(:sym, :date),
              s(:lvar, :t)))),
        s(:casgn, nil, :DC_NODES,
          s(:send,
            s(:block,
              s(:send,
                s(:const, nil, :DC_ELEMENTS), :collect),
              s(:args,
                s(:arg, :name),
                s(:arg, :value)),
              s(:dstr,
                s(:str, "<"),
                s(:begin,
                  s(:const, nil, :DC_PREFIX)),
                s(:str, ":"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, ">"),
                s(:begin,
                  s(:lvar, :value)),
                s(:str, "</"),
                s(:begin,
                  s(:const, nil, :DC_PREFIX)),
                s(:str, ":"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, ">"))), :join,
            s(:str, "\n"))),
        s(:def, :default_test,
          s(:args), nil),
        s(:send, nil, :private),
        s(:def, :make_xmldecl,
          s(:args,
            s(:optarg, :v,
              s(:const, nil, :XMLDECL_VERSION)),
            s(:optarg, :e,
              s(:const, nil, :XMLDECL_ENCODING)),
            s(:optarg, :s,
              s(:const, nil, :XMLDECL_STANDALONE))),
          s(:begin,
            s(:lvasgn, :rv,
              s(:dstr,
                s(:str, "<?xml version='"),
                s(:begin,
                  s(:lvar, :v)),
                s(:str, "'"))),
            s(:if,
              s(:lvar, :e),
              s(:send,
                s(:lvar, :rv), :<<,
                s(:dstr,
                  s(:str, " encoding='"),
                  s(:begin,
                    s(:lvar, :e)),
                  s(:str, "'"))), nil),
            s(:if,
              s(:lvar, :s),
              s(:send,
                s(:lvar, :rv), :<<,
                s(:dstr,
                  s(:str, " standalone='"),
                  s(:begin,
                    s(:lvar, :s)),
                  s(:str, "'"))), nil),
            s(:send,
              s(:lvar, :rv), :<<,
              s(:str, "?>")),
            s(:lvar, :rv))),
        s(:def, :make_RDF,
          s(:args,
            s(:optarg, :content,
              s(:nil)),
            s(:optarg, :xmlns,
              s(:array))),
          s(:dstr,
            s(:begin,
              s(:send, nil, :make_xmldecl)),
            s(:str, "\n"),
            s(:str, "<rdf:RDF xmlns=\""),
            s(:begin,
              s(:const, nil, :URI)),
            s(:str, "\" xmlns:rdf=\""),
            s(:begin,
              s(:const,
                s(:const, nil, :RDF), :URI)),
            s(:str, "\"\n"),
            s(:begin,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :xmlns), :collect),
                  s(:args,
                    s(:arg, :pre),
                    s(:arg, :uri)),
                  s(:dstr,
                    s(:str, "xmlns:"),
                    s(:begin,
                      s(:lvar, :pre)),
                    s(:str, "='"),
                    s(:begin,
                      s(:lvar, :uri)),
                    s(:str, "'"))), :join,
                s(:str, " "))),
            s(:str, ">\n"),
            s(:begin,
              s(:if,
                s(:send, nil, :block_given?),
                s(:yield),
                s(:lvar, :content))),
            s(:str, "\n"),
            s(:str, "</rdf:RDF>\n"))),
        s(:def, :make_channel,
          s(:args,
            s(:optarg, :content,
              s(:nil))),
          s(:dstr,
            s(:str, "<channel rdf:about=\""),
            s(:begin,
              s(:const, nil, :RDF_ABOUT)),
            s(:str, "\">\n"),
            s(:str, "  <title>"),
            s(:begin,
              s(:const, nil, :TITLE_VALUE)),
            s(:str, "</title>\n"),
            s(:str, "  <link>"),
            s(:begin,
              s(:const, nil, :LINK_VALUE)),
            s(:str, "</link>\n"),
            s(:str, "  <description>"),
            s(:begin,
              s(:const, nil, :DESCRIPTION_VALUE)),
            s(:str, "</description>\n"),
            s(:str, "\n"),
            s(:str, "  <image rdf:resource=\""),
            s(:begin,
              s(:const, nil, :RDF_RESOURCE)),
            s(:str, "\" />\n"),
            s(:str, "\n"),
            s(:str, "  <items>\n"),
            s(:str, "    <rdf:Seq>\n"),
            s(:begin,
              s(:send,
                s(:block,
                  s(:send,
                    s(:const, nil, :RESOURCES), :collect),
                  s(:args,
                    s(:arg, :res)),
                  s(:send,
                    s(:send,
                      s(:str, "<rdf:li resource=\""), :+,
                      s(:lvar, :res)), :+,
                    s(:str, "\" />"))), :join,
                s(:str, "\n"))),
            s(:str, "\n"),
            s(:str, "    </rdf:Seq>\n"),
            s(:str, "  </items>\n"),
            s(:str, "\n"),
            s(:str, "  <textinput rdf:resource=\""),
            s(:begin,
              s(:const, nil, :RDF_RESOURCE)),
            s(:str, "\" />\n"),
            s(:str, "\n"),
            s(:begin,
              s(:if,
                s(:send, nil, :block_given?),
                s(:yield),
                s(:lvar, :content))),
            s(:str, "\n"),
            s(:str, "</channel>\n"))),
        s(:def, :make_image,
          s(:args,
            s(:optarg, :content,
              s(:nil))),
          s(:dstr,
            s(:str, "<image rdf:about=\""),
            s(:begin,
              s(:const, nil, :RDF_ABOUT)),
            s(:str, "\">\n"),
            s(:str, "  <title>"),
            s(:begin,
              s(:const, nil, :TITLE_VALUE)),
            s(:str, "</title>\n"),
            s(:str, "  <url>"),
            s(:begin,
              s(:const, nil, :URL_VALUE)),
            s(:str, "</url>\n"),
            s(:str, "  <link>"),
            s(:begin,
              s(:const, nil, :LINK_VALUE)),
            s(:str, "</link>\n"),
            s(:begin,
              s(:if,
                s(:send, nil, :block_given?),
                s(:yield),
                s(:lvar, :content))),
            s(:str, "\n"),
            s(:str, "</image>\n"))),
        s(:def, :make_item,
          s(:args,
            s(:optarg, :content,
              s(:nil))),
          s(:dstr,
            s(:str, "<item rdf:about=\""),
            s(:begin,
              s(:const, nil, :RDF_ABOUT)),
            s(:str, "\">\n"),
            s(:str, "  <title>"),
            s(:begin,
              s(:const, nil, :TITLE_VALUE)),
            s(:str, "</title>\n"),
            s(:str, "  <link>"),
            s(:begin,
              s(:const, nil, :LINK_VALUE)),
            s(:str, "</link>\n"),
            s(:str, "  <description>"),
            s(:begin,
              s(:const, nil, :DESCRIPTION_VALUE)),
            s(:str, "</description>\n"),
            s(:begin,
              s(:if,
                s(:send, nil, :block_given?),
                s(:yield),
                s(:lvar, :content))),
            s(:str, "\n"),
            s(:str, "</item>\n"))),
        s(:def, :make_textinput,
          s(:args,
            s(:optarg, :content,
              s(:nil))),
          s(:dstr,
            s(:str, "<textinput rdf:about=\""),
            s(:begin,
              s(:const, nil, :RDF_ABOUT)),
            s(:str, "\">\n"),
            s(:str, "  <title>"),
            s(:begin,
              s(:const, nil, :TITLE_VALUE)),
            s(:str, "</title>\n"),
            s(:str, "  <description>"),
            s(:begin,
              s(:const, nil, :DESCRIPTION_VALUE)),
            s(:str, "</description>\n"),
            s(:str, "  <name>"),
            s(:begin,
              s(:const, nil, :NAME_VALUE)),
            s(:str, "</name>\n"),
            s(:str, "  <link>"),
            s(:begin,
              s(:const, nil, :LINK_VALUE)),
            s(:str, "</link>\n"),
            s(:begin,
              s(:if,
                s(:send, nil, :block_given?),
                s(:yield),
                s(:lvar, :content))),
            s(:str, "\n"),
            s(:str, "</textinput>\n"))),
        s(:def, :make_sample_RDF,
          s(:args),
          s(:send, nil, :make_RDF,
            s(:dstr,
              s(:begin,
                s(:send, nil, :make_channel)),
              s(:str, "\n"),
              s(:begin,
                s(:send, nil, :make_image)),
              s(:str, "\n"),
              s(:begin,
                s(:send, nil, :make_item)),
              s(:str, "\n"),
              s(:begin,
                s(:send, nil, :make_textinput)),
              s(:str, "\n")))),
        s(:def, :make_rss20,
          s(:args,
            s(:optarg, :content,
              s(:nil)),
            s(:optarg, :xmlns,
              s(:array))),
          s(:dstr,
            s(:begin,
              s(:send, nil, :make_xmldecl)),
            s(:str, "\n"),
            s(:str, "<rss version=\"2.0\"\n"),
            s(:begin,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :xmlns), :collect),
                  s(:args,
                    s(:arg, :pre),
                    s(:arg, :uri)),
                  s(:dstr,
                    s(:str, "xmlns:"),
                    s(:begin,
                      s(:lvar, :pre)),
                    s(:str, "='"),
                    s(:begin,
                      s(:lvar, :uri)),
                    s(:str, "'"))), :join,
                s(:str, " "))),
            s(:str, ">\n"),
            s(:begin,
              s(:if,
                s(:send, nil, :block_given?),
                s(:yield),
                s(:lvar, :content))),
            s(:str, "\n"),
            s(:str, "</rss>\n"))),
        s(:def, :make_sample_items20,
          s(:args),
          s(:send,
            s(:block,
              s(:send,
                s(:const, nil, :RESOURCES), :collect),
              s(:args,
                s(:arg, :res)),
              s(:begin,
                s(:lvasgn, :elems,
                  s(:array,
                    s(:dstr,
                      s(:str, "<link>"),
                      s(:begin,
                        s(:lvar, :res)),
                      s(:str, "</link>")))),
                s(:send,
                  s(:lvar, :elems), :<<,
                  s(:dstr,
                    s(:str, "<title>title of "),
                    s(:begin,
                      s(:lvar, :res)),
                    s(:str, "</title>"))),
                s(:lvasgn, :elems,
                  s(:send,
                    s(:lvar, :elems), :join,
                    s(:str, "\n"))),
                s(:dstr,
                  s(:str, "<item>\n"),
                  s(:begin,
                    s(:lvar, :elems)),
                  s(:str, "\n</item>")))), :join,
            s(:str, "\n"))),
        s(:def, :make_channel20,
          s(:args,
            s(:optarg, :content,
              s(:nil))),
          s(:dstr,
            s(:str, "<channel>\n"),
            s(:str, "  <title>"),
            s(:begin,
              s(:const, nil, :TITLE_VALUE)),
            s(:str, "</title>\n"),
            s(:str, "  <link>"),
            s(:begin,
              s(:const, nil, :LINK_VALUE)),
            s(:str, "</link>\n"),
            s(:str, "  <description>"),
            s(:begin,
              s(:const, nil, :DESCRIPTION_VALUE)),
            s(:str, "</description>\n"),
            s(:str, "  <language>"),
            s(:begin,
              s(:const, nil, :LANGUAGE_VALUE)),
            s(:str, "</language>\n"),
            s(:str, "\n"),
            s(:str, "  <image>\n"),
            s(:str, "    <url>"),
            s(:begin,
              s(:const, nil, :RDF_RESOURCE)),
            s(:str, "</url>\n"),
            s(:str, "    <title>"),
            s(:begin,
              s(:const, nil, :TITLE_VALUE)),
            s(:str, "</title>\n"),
            s(:str, "    <link>"),
            s(:begin,
              s(:const, nil, :LINK_VALUE)),
            s(:str, "</link>\n"),
            s(:str, "  </image>\n"),
            s(:str, "\n"),
            s(:begin,
              s(:send, nil, :make_sample_items20)),
            s(:str, "\n"),
            s(:str, "\n"),
            s(:str, "  <textInput>\n"),
            s(:str, "    <title>"),
            s(:begin,
              s(:const, nil, :TITLE_VALUE)),
            s(:str, "</title>\n"),
            s(:str, "    <description>"),
            s(:begin,
              s(:const, nil, :DESCRIPTION_VALUE)),
            s(:str, "</description>\n"),
            s(:str, "    <name>"),
            s(:begin,
              s(:const, nil, :NAME_VALUE)),
            s(:str, "</name>\n"),
            s(:str, "    <link>"),
            s(:begin,
              s(:const, nil, :RDF_RESOURCE)),
            s(:str, "</link>\n"),
            s(:str, "  </textInput>\n"),
            s(:str, "\n"),
            s(:begin,
              s(:if,
                s(:send, nil, :block_given?),
                s(:yield),
                s(:lvar, :content))),
            s(:str, "\n"),
            s(:str, "</channel>\n"))),
        s(:def, :make_item20,
          s(:args,
            s(:optarg, :content,
              s(:nil))),
          s(:dstr,
            s(:str, "<item>\n"),
            s(:str, "  <title>"),
            s(:begin,
              s(:const, nil, :TITLE_VALUE)),
            s(:str, "</title>\n"),
            s(:str, "  <link>"),
            s(:begin,
              s(:const, nil, :LINK_VALUE)),
            s(:str, "</link>\n"),
            s(:str, "  <description>"),
            s(:begin,
              s(:const, nil, :DESCRIPTION_VALUE)),
            s(:str, "</description>\n"),
            s(:begin,
              s(:if,
                s(:send, nil, :block_given?),
                s(:yield),
                s(:lvar, :content))),
            s(:str, "\n"),
            s(:str, "</item>\n"))),
        s(:def, :make_cloud20,
          s(:args),
          s(:dstr,
            s(:str, "<cloud\n"),
            s(:str, "  domain=\""),
            s(:begin,
              s(:const, nil, :CLOUD_DOMAIN)),
            s(:str, "\"\n"),
            s(:str, "  port=\""),
            s(:begin,
              s(:const, nil, :CLOUD_PORT)),
            s(:str, "\"\n"),
            s(:str, "  path=\""),
            s(:begin,
              s(:const, nil, :CLOUD_PATH)),
            s(:str, "\"\n"),
            s(:str, "  registerProcedure=\""),
            s(:begin,
              s(:const, nil, :CLOUD_REGISTER_PROCEDURE)),
            s(:str, "\"\n"),
            s(:str, "  protocol=\""),
            s(:begin,
              s(:const, nil, :CLOUD_PROTOCOL)),
            s(:str, "\" />\n"))),
        s(:def, :make_sample_rss20,
          s(:args),
          s(:send, nil, :make_rss20,
            s(:dstr,
              s(:begin,
                s(:send, nil, :make_channel20)),
              s(:str, "\n")))),
        s(:def, :make_feed_without_entry,
          s(:args,
            s(:optarg, :content,
              s(:nil)),
            s(:optarg, :xmlns,
              s(:array))),
          s(:dstr,
            s(:str, "<feed xmlns=\""),
            s(:begin,
              s(:const,
                s(:const, nil, :Atom), :URI)),
            s(:str, "\"\n"),
            s(:begin,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :xmlns), :collect),
                  s(:args,
                    s(:arg, :pre),
                    s(:arg, :uri)),
                  s(:dstr,
                    s(:str, "xmlns:"),
                    s(:begin,
                      s(:lvar, :pre)),
                    s(:str, "='"),
                    s(:begin,
                      s(:lvar, :uri)),
                    s(:str, "'"))), :join,
                s(:str, " "))),
            s(:str, ">\n"),
            s(:str, "  <id>"),
            s(:begin,
              s(:const, nil, :FEED_ID)),
            s(:str, "</id>\n"),
            s(:str, "  <title>"),
            s(:begin,
              s(:const, nil, :FEED_TITLE)),
            s(:str, "</title>\n"),
            s(:str, "  <updated>"),
            s(:begin,
              s(:const, nil, :FEED_UPDATED)),
            s(:str, "</updated>\n"),
            s(:str, "  <author>\n"),
            s(:str, "    <name>"),
            s(:begin,
              s(:const, nil, :FEED_AUTHOR_NAME)),
            s(:str, "</name>\n"),
            s(:str, "  </author>\n"),
            s(:begin,
              s(:if,
                s(:send, nil, :block_given?),
                s(:yield),
                s(:lvar, :content))),
            s(:str, "\n"),
            s(:str, "</feed>\n"))),
        s(:def, :make_entry,
          s(:args,
            s(:optarg, :content,
              s(:nil))),
          s(:dstr,
            s(:str, "  <entry>\n"),
            s(:str, "    <title>"),
            s(:begin,
              s(:const, nil, :ENTRY_TITLE)),
            s(:str, "</title>\n"),
            s(:str, "    <id>"),
            s(:begin,
              s(:const, nil, :ENTRY_ID)),
            s(:str, "</id>\n"),
            s(:str, "    <updated>"),
            s(:begin,
              s(:const, nil, :ENTRY_UPDATED)),
            s(:str, "</updated>\n"),
            s(:begin,
              s(:if,
                s(:send, nil, :block_given?),
                s(:yield),
                s(:lvar, :content))),
            s(:str, "\n"),
            s(:str, "  </entry>\n"))),
        s(:def, :make_feed_with_open_entry,
          s(:args,
            s(:optarg, :content,
              s(:nil)),
            s(:optarg, :xmlns,
              s(:array)),
            s(:blockarg, :block)),
          s(:send, nil, :make_feed_without_entry,
            s(:dstr,
              s(:begin,
                s(:send, nil, :make_entry,
                  s(:lvar, :content),
                  s(:block_pass,
                    s(:lvar, :block)))),
              s(:str, "\n")),
            s(:lvar, :xmlns))),
        s(:def, :make_feed_with_open_entry_source,
          s(:args,
            s(:optarg, :content,
              s(:nil)),
            s(:optarg, :xmlns,
              s(:array))),
          s(:send, nil, :make_feed_with_open_entry,
            s(:dstr,
              s(:str, "  <source>\n"),
              s(:begin,
                s(:if,
                  s(:send, nil, :block_given?),
                  s(:yield),
                  s(:lvar, :content))),
              s(:str, "\n"),
              s(:str, "  </source>\n")),
            s(:lvar, :xmlns))),
        s(:def, :make_feed,
          s(:args,
            s(:optarg, :content,
              s(:nil)),
            s(:optarg, :xmlns,
              s(:array))),
          s(:send, nil, :make_feed_without_entry,
            s(:dstr,
              s(:str, "  <entry>\n"),
              s(:str, "    <title>"),
              s(:begin,
                s(:const, nil, :ENTRY_TITLE)),
              s(:str, "</title>\n"),
              s(:str, "    <link href=\""),
              s(:begin,
                s(:const, nil, :ENTRY_LINK)),
              s(:str, "\"/>\n"),
              s(:str, "    <id>"),
              s(:begin,
                s(:const, nil, :ENTRY_ID)),
              s(:str, "</id>\n"),
              s(:str, "    <updated>"),
              s(:begin,
                s(:const, nil, :ENTRY_UPDATED)),
              s(:str, "</updated>\n"),
              s(:str, "    <summary>"),
              s(:begin,
                s(:const, nil, :ENTRY_SUMMARY)),
              s(:str, "</summary>\n"),
              s(:str, "  </entry>\n"),
              s(:begin,
                s(:if,
                  s(:send, nil, :block_given?),
                  s(:yield),
                  s(:lvar, :content))),
              s(:str, "\n")),
            s(:lvar, :xmlns))),
        s(:def, :make_entry_document,
          s(:args,
            s(:optarg, :content,
              s(:nil)),
            s(:optarg, :xmlns,
              s(:array))),
          s(:dstr,
            s(:str, "<entry xmlns=\""),
            s(:begin,
              s(:const,
                s(:const, nil, :Atom), :URI)),
            s(:str, "\"\n"),
            s(:begin,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :xmlns), :collect),
                  s(:args,
                    s(:arg, :pre),
                    s(:arg, :uri)),
                  s(:dstr,
                    s(:str, "xmlns:"),
                    s(:begin,
                      s(:lvar, :pre)),
                    s(:str, "='"),
                    s(:begin,
                      s(:lvar, :uri)),
                    s(:str, "'"))), :join,
                s(:str, " "))),
            s(:str, ">\n"),
            s(:str, "  <id>"),
            s(:begin,
              s(:const, nil, :ENTRY_ID)),
            s(:str, "</id>\n"),
            s(:str, "  <title>"),
            s(:begin,
              s(:const, nil, :ENTRY_TITLE)),
            s(:str, "</title>\n"),
            s(:str, "  <updated>"),
            s(:begin,
              s(:const, nil, :ENTRY_UPDATED)),
            s(:str, "</updated>\n"),
            s(:str, "  <author>\n"),
            s(:str, "    <name>"),
            s(:begin,
              s(:const, nil, :FEED_AUTHOR_NAME)),
            s(:str, "</name>\n"),
            s(:str, "  </author>\n"),
            s(:begin,
              s(:if,
                s(:send, nil, :block_given?),
                s(:yield),
                s(:lvar, :content))),
            s(:str, "\n"),
            s(:str, "</entry>\n"))),
        s(:def, :make_entry_document_with_open_source,
          s(:args,
            s(:optarg, :content,
              s(:nil)),
            s(:optarg, :xmlns,
              s(:array))),
          s(:send, nil, :make_entry_document,
            s(:dstr,
              s(:str, "  <source>\n"),
              s(:begin,
                s(:if,
                  s(:send, nil, :block_given?),
                  s(:yield),
                  s(:lvar, :content))),
              s(:str, "\n"),
              s(:str, "  </source>\n")),
            s(:lvar, :xmlns))),
        s(:def, :make_element,
          s(:args,
            s(:arg, :elem_name),
            s(:arg, :attrs),
            s(:arg, :contents)),
          s(:begin,
            s(:lvasgn, :attrs_str,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :attrs), :collect),
                  s(:args,
                    s(:arg, :name),
                    s(:arg, :value)),
                  s(:dstr,
                    s(:begin,
                      s(:send, nil, :h,
                        s(:lvar, :name))),
                    s(:str, "='"),
                    s(:begin,
                      s(:send, nil, :h,
                        s(:lvar, :value))),
                    s(:str, "'"))), :join,
                s(:str, " "))),
            s(:if,
              s(:send,
                s(:lvar, :attrs_str), :empty?), nil,
              s(:lvasgn, :attrs_str,
                s(:dstr,
                  s(:str, " "),
                  s(:begin,
                    s(:lvar, :attrs_str))))),
            s(:if,
              s(:send,
                s(:lvar, :contents), :is_a?,
                s(:const, nil, :String)),
              s(:lvasgn, :contents_str,
                s(:send, nil, :h,
                  s(:lvar, :contents))),
              s(:begin,
                s(:lvasgn, :contents_str,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :contents), :collect),
                      s(:args,
                        s(:arg, :name),
                        s(:arg, :value)),
                      s(:dstr,
                        s(:begin,
                          s(:const,
                            s(:const, nil, :Element), :INDENT)),
                        s(:str, "<"),
                        s(:begin,
                          s(:send, nil, :h,
                            s(:lvar, :name))),
                        s(:str, ">"),
                        s(:begin,
                          s(:send, nil, :h,
                            s(:lvar, :value))),
                        s(:str, "</"),
                        s(:begin,
                          s(:send, nil, :h,
                            s(:lvar, :name))),
                        s(:str, ">"))), :join,
                    s(:str, "\n"))),
                s(:lvasgn, :contents_str,
                  s(:dstr,
                    s(:str, "\n"),
                    s(:begin,
                      s(:lvar, :contents_str)),
                    s(:str, "\n"))))),
            s(:dstr,
              s(:str, "<"),
              s(:begin,
                s(:send, nil, :h,
                  s(:lvar, :elem_name))),
              s(:begin,
                s(:lvar, :attrs_str)),
              s(:str, ">"),
              s(:begin,
                s(:lvar, :contents_str)),
              s(:str, "</"),
              s(:begin,
                s(:send, nil, :h,
                  s(:lvar, :elem_name))),
              s(:str, ">")))),
        s(:def, :xmlns_container,
          s(:args,
            s(:arg, :xmlns_decls),
            s(:arg, :content)),
          s(:begin,
            s(:lvasgn, :attributes,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :xmlns_decls), :collect),
                  s(:args,
                    s(:arg, :prefix),
                    s(:arg, :uri)),
                  s(:dstr,
                    s(:str, "xmlns:"),
                    s(:begin,
                      s(:send, nil, :h,
                        s(:lvar, :prefix))),
                    s(:str, "=\""),
                    s(:begin,
                      s(:send, nil, :h,
                        s(:lvar, :uri))),
                    s(:str, "\""))), :join,
                s(:str, " "))),
            s(:dstr,
              s(:str, "<dummy "),
              s(:begin,
                s(:lvar, :attributes)),
              s(:str, ">"),
              s(:begin,
                s(:lvar, :content)),
              s(:str, "</dummy>")))),
        s(:send, nil, :private),
        s(:def, :setup_rss10,
          s(:args,
            s(:arg, :rdf)),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :rdf), :to_s)),
            s(:lvasgn, :channel,
              s(:send,
                s(:const,
                  s(:const, nil, :RDF), :Channel), :new)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :channel), :to_s)),
            s(:send,
              s(:lvar, :channel), :about=,
              s(:str, "http://example.com/index.rdf")),
            s(:send,
              s(:lvar, :channel), :title=,
              s(:str, "title")),
            s(:send,
              s(:lvar, :channel), :link=,
              s(:str, "http://example.com/")),
            s(:send,
              s(:lvar, :channel), :description=,
              s(:str, "description")),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :channel), :to_s)),
            s(:lvasgn, :item_title,
              s(:str, "item title")),
            s(:lvasgn, :item_link,
              s(:str, "http://example.com/item")),
            s(:send,
              s(:lvar, :channel), :items=,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDF), :Channel), :Items), :new)),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :channel), :items), :Seq), :lis), :<<,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const,
                        s(:const, nil, :RDF), :Channel), :Items), :Seq), :Li), :new,
                s(:lvar, :item_link))),
            s(:send, nil, :assert_not_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :channel), :to_s)),
            s(:send,
              s(:lvar, :rdf), :channel=,
              s(:lvar, :channel)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :rdf), :to_s)),
            s(:lvasgn, :item,
              s(:send,
                s(:const,
                  s(:const, nil, :RDF), :Item), :new)),
            s(:send,
              s(:lvar, :item), :title=,
              s(:lvar, :item_title)),
            s(:send,
              s(:lvar, :item), :link=,
              s(:lvar, :item_link)),
            s(:send,
              s(:lvar, :item), :about=,
              s(:lvar, :item_link)),
            s(:send,
              s(:send,
                s(:lvar, :rdf), :items), :<<,
              s(:lvar, :item)),
            s(:send, nil, :assert_not_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :rdf), :to_s)))),
        s(:def, :setup_rss20,
          s(:args,
            s(:arg, :rss)),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :rss), :to_s)),
            s(:lvasgn, :channel,
              s(:send,
                s(:const,
                  s(:const, nil, :Rss), :Channel), :new)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :channel), :to_s)),
            s(:send,
              s(:lvar, :channel), :title=,
              s(:str, "title")),
            s(:send,
              s(:lvar, :channel), :link=,
              s(:str, "http://example.com/")),
            s(:send,
              s(:lvar, :channel), :description=,
              s(:str, "description")),
            s(:send, nil, :assert_not_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :channel), :to_s)),
            s(:send,
              s(:lvar, :rss), :channel=,
              s(:lvar, :channel)),
            s(:send, nil, :assert_not_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :rss), :to_s)))),
        s(:def, :setup_dummy_channel,
          s(:args,
            s(:arg, :maker)),
          s(:begin,
            s(:lvasgn, :about,
              s(:str, "http://hoge.com")),
            s(:lvasgn, :title,
              s(:str, "fugafuga")),
            s(:lvasgn, :link,
              s(:str, "http://hoge.com/feed.xml")),
            s(:lvasgn, :description,
              s(:str, "fugafugafugafuga")),
            s(:lvasgn, :language,
              s(:str, "ja")),
            s(:send,
              s(:send,
                s(:lvar, :maker), :channel), :about=,
              s(:lvar, :about)),
            s(:send,
              s(:send,
                s(:lvar, :maker), :channel), :title=,
              s(:lvar, :title)),
            s(:send,
              s(:send,
                s(:lvar, :maker), :channel), :link=,
              s(:lvar, :link)),
            s(:send,
              s(:send,
                s(:lvar, :maker), :channel), :description=,
              s(:lvar, :description)),
            s(:send,
              s(:send,
                s(:lvar, :maker), :channel), :language=,
              s(:lvar, :language)))),
        s(:def, :setup_dummy_channel_atom,
          s(:args,
            s(:arg, :maker)),
          s(:begin,
            s(:lvasgn, :updated,
              s(:send,
                s(:const, nil, :Time), :now)),
            s(:lvasgn, :author,
              s(:str, "Foo")),
            s(:send, nil, :setup_dummy_channel,
              s(:lvar, :maker)),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :maker), :channel), :links), :first), :rel=,
              s(:str, "self")),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :maker), :channel), :links), :first), :type=,
              s(:str, "application/atom+xml")),
            s(:send,
              s(:send,
                s(:lvar, :maker), :channel), :updated=,
              s(:lvar, :updated)),
            s(:send,
              s(:send,
                s(:lvar, :maker), :channel), :author=,
              s(:lvar, :author)))),
        s(:def, :setup_dummy_image,
          s(:args,
            s(:arg, :maker)),
          s(:begin,
            s(:lvasgn, :title,
              s(:str, "fugafuga")),
            s(:lvasgn, :link,
              s(:str, "http://hoge.com")),
            s(:lvasgn, :url,
              s(:str, "http://hoge.com/hoge.png")),
            s(:if,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :maker), :channel), :link), :nil?),
              s(:send,
                s(:send,
                  s(:lvar, :maker), :channel), :link=,
                s(:lvar, :link)), nil),
            s(:send,
              s(:send,
                s(:lvar, :maker), :image), :title=,
              s(:lvar, :title)),
            s(:send,
              s(:send,
                s(:lvar, :maker), :image), :url=,
              s(:lvar, :url)))),
        s(:def, :setup_dummy_textinput,
          s(:args,
            s(:arg, :maker)),
          s(:begin,
            s(:lvasgn, :title,
              s(:str, "fugafuga")),
            s(:lvasgn, :description,
              s(:str, "text hoge fuga")),
            s(:lvasgn, :name,
              s(:str, "hoge")),
            s(:lvasgn, :link,
              s(:str, "http://hoge.com/search.cgi")),
            s(:send,
              s(:send,
                s(:lvar, :maker), :textinput), :title=,
              s(:lvar, :title)),
            s(:send,
              s(:send,
                s(:lvar, :maker), :textinput), :description=,
              s(:lvar, :description)),
            s(:send,
              s(:send,
                s(:lvar, :maker), :textinput), :name=,
              s(:lvar, :name)),
            s(:send,
              s(:send,
                s(:lvar, :maker), :textinput), :link=,
              s(:lvar, :link)))),
        s(:def, :setup_dummy_item,
          s(:args,
            s(:arg, :maker)),
          s(:begin,
            s(:lvasgn, :title,
              s(:str, "TITLE")),
            s(:lvasgn, :link,
              s(:str, "http://hoge.com/")),
            s(:lvasgn, :item,
              s(:send,
                s(:send,
                  s(:lvar, :maker), :items), :new_item)),
            s(:send,
              s(:lvar, :item), :title=,
              s(:lvar, :title)),
            s(:send,
              s(:lvar, :item), :link=,
              s(:lvar, :link)))),
        s(:def, :setup_dummy_item_atom,
          s(:args,
            s(:arg, :maker)),
          s(:begin,
            s(:send, nil, :setup_dummy_item,
              s(:lvar, :maker)),
            s(:lvasgn, :item,
              s(:send,
                s(:send,
                  s(:lvar, :maker), :items), :first)),
            s(:send,
              s(:lvar, :item), :id=,
              s(:str, "http://example.net/xxx")),
            s(:send,
              s(:lvar, :item), :updated=,
              s(:send,
                s(:const, nil, :Time), :now)))),
        s(:def, :setup_taxo_topic,
          s(:args,
            s(:arg, :target),
            s(:arg, :topics)),
          s(:block,
            s(:send,
              s(:lvar, :topics), :each),
            s(:args,
              s(:arg, :topic)),
            s(:begin,
              s(:lvasgn, :taxo_topic,
                s(:send,
                  s(:send,
                    s(:lvar, :target), :taxo_topics), :new_taxo_topic)),
              s(:block,
                s(:send,
                  s(:lvar, :topic), :each),
                s(:args,
                  s(:arg, :name),
                  s(:arg, :value)),
                s(:case,
                  s(:lvar, :name),
                  s(:when,
                    s(:sym, :link),
                    s(:send,
                      s(:lvar, :taxo_topic), :taxo_link=,
                      s(:lvar, :value))),
                  s(:when,
                    s(:sym, :topics),
                    s(:block,
                      s(:send,
                        s(:lvar, :value), :each),
                      s(:args,
                        s(:arg, :t)),
                      s(:send,
                        s(:send,
                          s(:lvar, :taxo_topic), :taxo_topics), :<<,
                        s(:lvar, :t)))),
                  s(:begin,
                    s(:lvasgn, :dc_elems,
                      s(:send,
                        s(:lvar, :taxo_topic), :__send__,
                        s(:dstr,
                          s(:str, "dc_"),
                          s(:begin,
                            s(:lvar, :name)),
                          s(:str, "s")))),
                    s(:lvasgn, :dc_elem,
                      s(:send,
                        s(:lvar, :dc_elems), :__send__,
                        s(:dstr,
                          s(:str, "new_"),
                          s(:begin,
                            s(:lvar, :name))))),
                    s(:send,
                      s(:lvar, :dc_elem), :value=,
                      s(:lvar, :value))))))))))))
