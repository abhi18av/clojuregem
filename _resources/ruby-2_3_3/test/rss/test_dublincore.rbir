s(:begin,
  s(:send, nil, :require,
    s(:str, "cgi")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:send, nil, :require_relative,
    s(:str, "rss-testcase")),
  s(:send, nil, :require,
    s(:str, "rss/1.0")),
  s(:send, nil, :require,
    s(:str, "rss/dublincore")),
  s(:module,
    s(:const, nil, :RSS),
    s(:class,
      s(:const, nil, :TestDublinCore),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:ivasgn, :@rss10_parents,
              s(:array,
                s(:array,
                  s(:str, "channel")),
                s(:array,
                  s(:str, "image")),
                s(:array,
                  s(:str, "item")),
                s(:array,
                  s(:str, "textinput")))),
            s(:ivasgn, :@rss10_source,
              s(:send, nil, :make_RDF,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :make_channel,
                      s(:const, nil, :DC_NODES))),
                  s(:str, "\n"),
                  s(:begin,
                    s(:send, nil, :make_image,
                      s(:const, nil, :DC_NODES))),
                  s(:str, "\n"),
                  s(:begin,
                    s(:send, nil, :make_item,
                      s(:const, nil, :DC_NODES))),
                  s(:str, "\n"),
                  s(:begin,
                    s(:send, nil, :make_textinput,
                      s(:const, nil, :DC_NODES))),
                  s(:str, "\n")),
                s(:hash,
                  s(:pair,
                    s(:const, nil, :DC_PREFIX),
                    s(:const, nil, :DC_URI))))),
            s(:ivasgn, :@rss20_parents,
              s(:array,
                s(:array,
                  s(:str, "channel")),
                s(:array,
                  s(:str, "items"),
                  s(:str, "last")))),
            s(:ivasgn, :@rss20_source,
              s(:send, nil, :make_rss20,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :make_channel20,
                      s(:send,
                        s(:const, nil, :DC_NODES), :+,
                        s(:send, nil, :make_item20,
                          s(:const, nil, :DC_NODES))))),
                  s(:str, "\n")),
                s(:hash,
                  s(:pair,
                    s(:const, nil, :DC_PREFIX),
                    s(:const, nil, :DC_URI))))),
            s(:ivasgn, :@atom_feed_parents,
              s(:array,
                s(:array),
                s(:array,
                  s(:str, "entries"),
                  s(:str, "last")))),
            s(:ivasgn, :@atom_feed_source,
              s(:send, nil, :make_feed,
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :DC_NODES)),
                  s(:str, "\n"),
                  s(:begin,
                    s(:send, nil, :make_entry,
                      s(:const, nil, :DC_NODES))),
                  s(:str, "\n")),
                s(:hash,
                  s(:pair,
                    s(:const, nil, :DC_PREFIX),
                    s(:const, nil, :DC_URI))))),
            s(:ivasgn, :@atom_entry_parents,
              s(:array,
                s(:array))),
            s(:ivasgn, :@atom_entry_source,
              s(:send, nil, :make_entry_document,
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :DC_NODES)),
                  s(:str, "\n")),
                s(:hash,
                  s(:pair,
                    s(:const, nil, :DC_PREFIX),
                    s(:const, nil, :DC_URI))))))),
        s(:def, :test_parser,
          s(:args),
          s(:begin,
            s(:lvasgn, :rss10_maker,
              s(:block,
                s(:send,
                  s(:const, nil, :Proc), :new),
                s(:args,
                  s(:arg, :content),
                  s(:arg, :xmlns)),
                s(:send, nil, :make_RDF,
                  s(:dstr,
                    s(:begin,
                      s(:send, nil, :make_channel,
                        s(:lvar, :content))),
                    s(:str, "\n"),
                    s(:begin,
                      s(:send, nil, :make_image,
                        s(:lvar, :content))),
                    s(:str, "\n"),
                    s(:begin,
                      s(:send, nil, :make_item,
                        s(:lvar, :content))),
                    s(:str, "\n"),
                    s(:begin,
                      s(:send, nil, :make_textinput,
                        s(:lvar, :content))),
                    s(:str, "\n")),
                  s(:lvar, :xmlns)))),
            s(:send, nil, :assert_dc_parse,
              s(:ivar, :@rss10_source),
              s(:ivar, :@rss10_parents),
              s(:false),
              s(:block_pass,
                s(:lvar, :rss10_maker))),
            s(:send, nil, :assert_dc_parse,
              s(:ivar, :@rss10_source),
              s(:ivar, :@rss10_parents),
              s(:true),
              s(:block_pass,
                s(:lvar, :rss10_maker))),
            s(:lvasgn, :rss20_maker,
              s(:block,
                s(:send,
                  s(:const, nil, :Proc), :new),
                s(:args,
                  s(:arg, :content),
                  s(:arg, :xmlns)),
                s(:send, nil, :make_rss20,
                  s(:dstr,
                    s(:begin,
                      s(:send, nil, :make_channel20,
                        s(:send,
                          s(:lvar, :content), :+,
                          s(:send, nil, :make_item20,
                            s(:lvar, :content))))),
                    s(:str, "\n")),
                  s(:lvar, :xmlns)))),
            s(:send, nil, :assert_dc_parse,
              s(:ivar, :@rss20_source),
              s(:ivar, :@rss20_parents),
              s(:false),
              s(:block_pass,
                s(:lvar, :rss20_maker))),
            s(:send, nil, :assert_dc_parse,
              s(:ivar, :@rss20_source),
              s(:ivar, :@rss20_parents),
              s(:true),
              s(:block_pass,
                s(:lvar, :rss20_maker))),
            s(:lvasgn, :atom_feed_maker,
              s(:block,
                s(:send,
                  s(:const, nil, :Proc), :new),
                s(:args,
                  s(:arg, :content),
                  s(:arg, :xmlns)),
                s(:send, nil, :make_feed,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :content)),
                    s(:str, "\n"),
                    s(:begin,
                      s(:send, nil, :make_entry,
                        s(:lvar, :content))),
                    s(:str, "\n")),
                  s(:lvar, :xmlns)))),
            s(:send, nil, :assert_dc_parse,
              s(:ivar, :@atom_feed_source),
              s(:ivar, :@atom_feed_parents),
              s(:false),
              s(:block_pass,
                s(:lvar, :atom_feed_maker))),
            s(:send, nil, :assert_dc_parse,
              s(:ivar, :@atom_feed_source),
              s(:ivar, :@atom_feed_parents),
              s(:true),
              s(:block_pass,
                s(:lvar, :atom_feed_maker))),
            s(:lvasgn, :atom_entry_maker,
              s(:block,
                s(:send,
                  s(:const, nil, :Proc), :new),
                s(:args,
                  s(:arg, :content),
                  s(:arg, :xmlns)),
                s(:send, nil, :make_entry_document,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :content)),
                    s(:str, "\n")),
                  s(:lvar, :xmlns)))),
            s(:send, nil, :assert_dc_parse,
              s(:ivar, :@atom_entry_source),
              s(:ivar, :@atom_entry_parents),
              s(:false),
              s(:block_pass,
                s(:lvar, :atom_entry_maker))),
            s(:send, nil, :assert_dc_parse,
              s(:ivar, :@atom_entry_source),
              s(:ivar, :@atom_entry_parents),
              s(:true),
              s(:block_pass,
                s(:lvar, :atom_entry_maker))))),
        s(:def, :test_singular_accessor,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_dc_singular_accessor,
              s(:ivar, :@rss10_source),
              s(:ivar, :@rss10_parents)),
            s(:send, nil, :assert_dc_singular_accessor,
              s(:ivar, :@rss20_source),
              s(:ivar, :@rss20_parents)),
            s(:send, nil, :assert_dc_singular_accessor,
              s(:ivar, :@atom_feed_source),
              s(:ivar, :@atom_feed_parents)),
            s(:send, nil, :assert_dc_singular_accessor,
              s(:ivar, :@atom_entry_source),
              s(:ivar, :@atom_entry_parents)))),
        s(:def, :test_plural_accessor,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_dc_plural_accessor,
              s(:ivar, :@rss10_source),
              s(:ivar, :@rss10_parents),
              s(:false)),
            s(:send, nil, :assert_dc_plural_accessor,
              s(:ivar, :@rss10_source),
              s(:ivar, :@rss10_parents),
              s(:true)),
            s(:send, nil, :assert_dc_plural_accessor,
              s(:ivar, :@rss20_source),
              s(:ivar, :@rss20_parents),
              s(:false)),
            s(:send, nil, :assert_dc_plural_accessor,
              s(:ivar, :@rss20_source),
              s(:ivar, :@rss20_parents),
              s(:true)),
            s(:send, nil, :assert_dc_plural_accessor,
              s(:ivar, :@atom_feed_source),
              s(:ivar, :@atom_feed_parents),
              s(:false)),
            s(:send, nil, :assert_dc_plural_accessor,
              s(:ivar, :@atom_feed_source),
              s(:ivar, :@atom_feed_parents),
              s(:true)),
            s(:send, nil, :assert_dc_plural_accessor,
              s(:ivar, :@atom_entry_source),
              s(:ivar, :@atom_entry_parents),
              s(:false)),
            s(:send, nil, :assert_dc_plural_accessor,
              s(:ivar, :@atom_entry_source),
              s(:ivar, :@atom_entry_parents),
              s(:true)))),
        s(:def, :test_to_s,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_dc_to_s,
              s(:ivar, :@rss10_source),
              s(:ivar, :@rss10_parents),
              s(:false)),
            s(:send, nil, :assert_dc_to_s,
              s(:ivar, :@rss10_source),
              s(:ivar, :@rss10_parents),
              s(:true)),
            s(:lvasgn, :targets,
              s(:array,
                s(:str, "channel"),
                s(:str, "channel/item[3]"))),
            s(:send, nil, :assert_dc_to_s,
              s(:ivar, :@rss20_source),
              s(:ivar, :@rss20_parents),
              s(:false),
              s(:lvar, :targets)),
            s(:send, nil, :assert_dc_to_s,
              s(:ivar, :@rss20_source),
              s(:ivar, :@rss20_parents),
              s(:true),
              s(:lvar, :targets)),
            s(:lvasgn, :targets,
              s(:array,
                s(:str, "."),
                s(:str, "entry"))),
            s(:send, nil, :assert_dc_to_s,
              s(:ivar, :@atom_feed_source),
              s(:ivar, :@atom_feed_parents),
              s(:false),
              s(:lvar, :targets)),
            s(:send, nil, :assert_dc_to_s,
              s(:ivar, :@atom_feed_source),
              s(:ivar, :@atom_feed_parents),
              s(:true),
              s(:lvar, :targets)),
            s(:lvasgn, :targets,
              s(:array,
                s(:str, "."))),
            s(:send, nil, :assert_dc_to_s,
              s(:ivar, :@atom_entry_source),
              s(:ivar, :@atom_entry_parents),
              s(:false),
              s(:lvar, :targets)),
            s(:send, nil, :assert_dc_to_s,
              s(:ivar, :@atom_entry_source),
              s(:ivar, :@atom_entry_parents),
              s(:true),
              s(:lvar, :targets)))),
        s(:send, nil, :private),
        s(:def, :dc_plural_suffix,
          s(:args,
            s(:arg, :name),
            s(:arg, :check_backward_compatibility)),
          s(:if,
            s(:send,
              s(:lvar, :name), :==,
              s(:sym, :rights)),
            s(:if,
              s(:lvar, :check_backward_compatibility),
              s(:str, "es"),
              s(:str, "_list")),
            s(:str, "s"))),
        s(:def, :assert_dc_parse,
          s(:args,
            s(:arg, :source),
            s(:arg, :parents),
            s(:arg, :check_backward_compatibility),
            s(:blockarg, :maker)),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_nothing_raised),
              s(:args),
              s(:send,
                s(:const, nil, :Parser), :parse,
                s(:lvar, :source))),
            s(:block,
              s(:send,
                s(:const, nil, :DC_ELEMENTS), :each),
              s(:args,
                s(:arg, :name),
                s(:arg, :value)),
              s(:block,
                s(:send,
                  s(:lvar, :parents), :each),
                s(:args,
                  s(:arg, :parent_readers)),
                s(:begin,
                  s(:lvasgn, :feed,
                    s(:nil)),
                  s(:block,
                    s(:send, nil, :assert_nothing_raised),
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :tag,
                        s(:dstr,
                          s(:begin,
                            s(:const, nil, :DC_PREFIX)),
                          s(:str, ":"),
                          s(:begin,
                            s(:lvar, :name)))),
                      s(:lvasgn, :dc_content,
                        s(:dstr,
                          s(:str, "<"),
                          s(:begin,
                            s(:lvar, :tag)),
                          s(:str, ">"),
                          s(:begin,
                            s(:lvar, :value)),
                          s(:str, "</"),
                          s(:begin,
                            s(:lvar, :tag)),
                          s(:str, ">\n"))),
                      s(:op_asgn,
                        s(:lvasgn, :dc_content), :*,
                        s(:int, 2)),
                      s(:lvasgn, :feed,
                        s(:send,
                          s(:const, nil, :Parser), :parse,
                          s(:send,
                            s(:lvar, :maker), :call,
                            s(:lvar, :dc_content),
                            s(:hash,
                              s(:pair,
                                s(:const, nil, :DC_PREFIX),
                                s(:const, nil, :DC_URI)))))))),
                  s(:lvasgn, :parent,
                    s(:send, nil, :chain_reader,
                      s(:lvar, :feed),
                      s(:lvar, :parent_readers))),
                  s(:lvasgn, :plural_suffix,
                    s(:send, nil, :dc_plural_suffix,
                      s(:lvar, :name),
                      s(:lvar, :check_backward_compatibility))),
                  s(:lvasgn, :plural_reader,
                    s(:dstr,
                      s(:str, "dc_"),
                      s(:begin,
                        s(:lvar, :name)),
                      s(:begin,
                        s(:lvar, :plural_suffix)))),
                  s(:lvasgn, :values,
                    s(:send,
                      s(:send,
                        s(:lvar, :parent), :__send__,
                        s(:lvar, :plural_reader)), :collect,
                      s(:block_pass,
                        s(:sym, :value)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :value), :kind_of?,
                      s(:const, nil, :String)),
                    s(:lvasgn, :value,
                      s(:send,
                        s(:const, nil, :CGI), :unescapeHTML,
                        s(:lvar, :value))), nil),
                  s(:send, nil, :assert_equal,
                    s(:array,
                      s(:lvar, :value),
                      s(:lvar, :value)),
                    s(:lvar, :values))))))),
        s(:def, :assert_dc_singular_accessor,
          s(:args,
            s(:arg, :source),
            s(:arg, :parents)),
          s(:begin,
            s(:lvasgn, :feed,
              s(:send,
                s(:const, nil, :Parser), :parse,
                s(:lvar, :source))),
            s(:lvasgn, :new_value,
              s(:str, "hoge")),
            s(:block,
              s(:send,
                s(:lvar, :parents), :each),
              s(:args,
                s(:arg, :parent_readers)),
              s(:begin,
                s(:lvasgn, :parent,
                  s(:send, nil, :chain_reader,
                    s(:lvar, :feed),
                    s(:lvar, :parent_readers))),
                s(:block,
                  s(:send,
                    s(:const, nil, :DC_ELEMENTS), :each),
                  s(:args,
                    s(:arg, :name),
                    s(:arg, :value)),
                  s(:begin,
                    s(:lvasgn, :parsed_value,
                      s(:send,
                        s(:lvar, :parent), :__send__,
                        s(:dstr,
                          s(:str, "dc_"),
                          s(:begin,
                            s(:lvar, :name))))),
                    s(:if,
                      s(:send,
                        s(:lvar, :value), :kind_of?,
                        s(:const, nil, :String)),
                      s(:lvasgn, :value,
                        s(:send,
                          s(:const, nil, :CGI), :unescapeHTML,
                          s(:lvar, :value))), nil),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :value),
                      s(:lvar, :parsed_value)),
                    s(:if,
                      s(:send,
                        s(:lvar, :name), :==,
                        s(:sym, :date)),
                      s(:begin,
                        s(:lvasgn, :t,
                          s(:send,
                            s(:const, nil, :Time), :iso8601,
                            s(:str, "2003-01-01T02:30:23+09:00"))),
                        s(:sclass,
                          s(:lvar, :t),
                          s(:send, nil, :alias_method,
                            s(:sym, :to_s),
                            s(:sym, :iso8601))),
                        s(:send,
                          s(:lvar, :parent), :__send__,
                          s(:dstr,
                            s(:str, "dc_"),
                            s(:begin,
                              s(:lvar, :name)),
                            s(:str, "=")),
                          s(:send,
                            s(:lvar, :t), :iso8601)),
                        s(:send, nil, :assert_equal,
                          s(:lvar, :t),
                          s(:send,
                            s(:lvar, :parent), :__send__,
                            s(:dstr,
                              s(:str, "dc_"),
                              s(:begin,
                                s(:lvar, :name))))),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :parent), :class), :method_defined?,
                            s(:sym, :date_without_dc_date=)),
                          s(:send, nil, :assert_nil,
                            s(:send,
                              s(:lvar, :parent), :date)),
                          s(:send, nil, :assert_equal,
                            s(:lvar, :t),
                            s(:send,
                              s(:lvar, :parent), :date))),
                        s(:send,
                          s(:lvar, :parent), :date=,
                          s(:lvar, :value)),
                        s(:send, nil, :assert_equal,
                          s(:lvar, :value),
                          s(:send,
                            s(:lvar, :parent), :date)),
                        s(:send, nil, :assert_equal,
                          s(:lvar, :value),
                          s(:send,
                            s(:lvar, :parent), :__send__,
                            s(:dstr,
                              s(:str, "dc_"),
                              s(:begin,
                                s(:lvar, :name)))))),
                      s(:begin,
                        s(:send,
                          s(:lvar, :parent), :__send__,
                          s(:dstr,
                            s(:str, "dc_"),
                            s(:begin,
                              s(:lvar, :name)),
                            s(:str, "=")),
                          s(:lvar, :new_value)),
                        s(:send, nil, :assert_equal,
                          s(:lvar, :new_value),
                          s(:send,
                            s(:lvar, :parent), :__send__,
                            s(:dstr,
                              s(:str, "dc_"),
                              s(:begin,
                                s(:lvar, :name))))))))))))),
        s(:def, :assert_dc_plural_accessor,
          s(:args,
            s(:arg, :source),
            s(:arg, :parents),
            s(:arg, :check_backward_compatibility)),
          s(:begin,
            s(:lvasgn, :feed,
              s(:send,
                s(:const, nil, :Parser), :parse,
                s(:lvar, :source))),
            s(:lvasgn, :new_value,
              s(:str, "hoge")),
            s(:block,
              s(:send,
                s(:const, nil, :DC_ELEMENTS), :each),
              s(:args,
                s(:arg, :name),
                s(:arg, :value)),
              s(:block,
                s(:send,
                  s(:lvar, :parents), :each),
                s(:args,
                  s(:arg, :parent_readers)),
                s(:begin,
                  s(:lvasgn, :parent,
                    s(:send, nil, :chain_reader,
                      s(:lvar, :feed),
                      s(:lvar, :parent_readers))),
                  s(:lvasgn, :parsed_value,
                    s(:send,
                      s(:lvar, :parent), :__send__,
                      s(:dstr,
                        s(:str, "dc_"),
                        s(:begin,
                          s(:lvar, :name))))),
                  s(:if,
                    s(:send,
                      s(:lvar, :value), :kind_of?,
                      s(:const, nil, :String)),
                    s(:lvasgn, :value,
                      s(:send,
                        s(:const, nil, :CGI), :unescapeHTML,
                        s(:lvar, :value))), nil),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :value),
                    s(:lvar, :parsed_value)),
                  s(:lvasgn, :plural_suffix,
                    s(:send, nil, :dc_plural_suffix,
                      s(:lvar, :name),
                      s(:lvar, :check_backward_compatibility))),
                  s(:lvasgn, :plural_reader,
                    s(:dstr,
                      s(:str, "dc_"),
                      s(:begin,
                        s(:lvar, :name)),
                      s(:begin,
                        s(:lvar, :plural_suffix)))),
                  s(:lvasgn, :klass_name,
                    s(:dstr,
                      s(:str, "DublinCore"),
                      s(:begin,
                        s(:send,
                          s(:const, nil, :Utils), :to_class_name,
                          s(:send,
                            s(:lvar, :name), :to_s))))),
                  s(:lvasgn, :klass,
                    s(:send,
                      s(:const, nil, :DublinCoreModel), :const_get,
                      s(:lvar, :klass_name))),
                  s(:if,
                    s(:send,
                      s(:lvar, :name), :==,
                      s(:sym, :date)),
                    s(:begin,
                      s(:lvasgn, :t,
                        s(:send,
                          s(:const, nil, :Time), :iso8601,
                          s(:str, "2003-01-01T02:30:23+09:00"))),
                      s(:sclass,
                        s(:lvar, :t),
                        s(:send, nil, :alias_method,
                          s(:sym, :to_s),
                          s(:sym, :iso8601))),
                      s(:lvasgn, :elems,
                        s(:send,
                          s(:lvar, :parent), :__send__,
                          s(:lvar, :plural_reader))),
                      s(:send,
                        s(:lvar, :elems), :<<,
                        s(:send,
                          s(:lvar, :klass), :new,
                          s(:send,
                            s(:lvar, :t), :iso8601))),
                      s(:lvasgn, :new_elems,
                        s(:send,
                          s(:lvar, :parent), :__send__,
                          s(:lvar, :plural_reader))),
                      s(:lvasgn, :values,
                        s(:block,
                          s(:send,
                            s(:lvar, :new_elems), :collect),
                          s(:args,
                            s(:arg, :x)),
                          s(:send,
                            s(:lvar, :x), :value))),
                      s(:send, nil, :assert_equal,
                        s(:array,
                          s(:send,
                            s(:lvar, :parent), :__send__,
                            s(:dstr,
                              s(:str, "dc_"),
                              s(:begin,
                                s(:lvar, :name)))),
                          s(:lvar, :t)),
                        s(:lvar, :values))),
                    s(:begin,
                      s(:lvasgn, :elems,
                        s(:send,
                          s(:lvar, :parent), :__send__,
                          s(:lvar, :plural_reader))),
                      s(:send,
                        s(:lvar, :elems), :<<,
                        s(:send,
                          s(:lvar, :klass), :new,
                          s(:lvar, :new_value))),
                      s(:lvasgn, :new_elems,
                        s(:send,
                          s(:lvar, :parent), :__send__,
                          s(:lvar, :plural_reader))),
                      s(:lvasgn, :values,
                        s(:block,
                          s(:send,
                            s(:lvar, :new_elems), :collect),
                          s(:args,
                            s(:arg, :x)),
                          s(:send,
                            s(:lvar, :x), :value))),
                      s(:send, nil, :assert_equal,
                        s(:array,
                          s(:send,
                            s(:lvar, :parent), :__send__,
                            s(:dstr,
                              s(:str, "dc_"),
                              s(:begin,
                                s(:lvar, :name)))),
                          s(:lvar, :new_value)),
                        s(:lvar, :values))))))))),
        s(:def, :assert_dc_to_s,
          s(:args,
            s(:arg, :source),
            s(:arg, :parents),
            s(:arg, :check_backward_compatibility),
            s(:optarg, :targets,
              s(:nil))),
          s(:begin,
            s(:lvasgn, :feed,
              s(:send,
                s(:const, nil, :Parser), :parse,
                s(:lvar, :source))),
            s(:block,
              s(:send,
                s(:const, nil, :DC_ELEMENTS), :each),
              s(:args,
                s(:arg, :name),
                s(:arg, :value)),
              s(:begin,
                s(:lvasgn, :excepted,
                  s(:dstr,
                    s(:str, "<"),
                    s(:begin,
                      s(:const, nil, :DC_PREFIX)),
                    s(:str, ":"),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, ">"),
                    s(:begin,
                      s(:lvar, :value)),
                    s(:str, "</"),
                    s(:begin,
                      s(:const, nil, :DC_PREFIX)),
                    s(:str, ":"),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, ">"))),
                s(:block,
                  s(:send,
                    s(:lvar, :parents), :each),
                  s(:args,
                    s(:arg, :parent_readers)),
                  s(:begin,
                    s(:lvasgn, :parent,
                      s(:send, nil, :chain_reader,
                        s(:lvar, :feed),
                        s(:lvar, :parent_readers))),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :excepted),
                      s(:send,
                        s(:lvar, :parent), :__send__,
                        s(:dstr,
                          s(:str, "dc_"),
                          s(:begin,
                            s(:lvar, :name)),
                          s(:str, "_elements")))))),
                s(:lvasgn, :plural_suffix,
                  s(:send, nil, :dc_plural_suffix,
                    s(:lvar, :name),
                    s(:lvar, :check_backward_compatibility))),
                s(:lvasgn, :reader,
                  s(:dstr,
                    s(:str, "dc_"),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:begin,
                      s(:lvar, :plural_suffix)))),
                s(:lvasgn, :excepted,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Array), :new,
                      s(:int, 2),
                      s(:lvar, :excepted)), :join,
                    s(:str, "\n"))),
                s(:block,
                  s(:send,
                    s(:lvar, :parents), :each),
                  s(:args,
                    s(:arg, :parent_readers)),
                  s(:begin,
                    s(:lvasgn, :parent,
                      s(:send, nil, :chain_reader,
                        s(:lvar, :feed),
                        s(:lvar, :parent_readers))),
                    s(:lvasgn, :elems,
                      s(:send,
                        s(:lvar, :parent), :__send__,
                        s(:lvar, :reader))),
                    s(:lvasgn, :klass_name,
                      s(:dstr,
                        s(:str, "DublinCore"),
                        s(:begin,
                          s(:send,
                            s(:const, nil, :Utils), :to_class_name,
                            s(:send,
                              s(:lvar, :name), :to_s))))),
                    s(:lvasgn, :klass,
                      s(:send,
                        s(:const, nil, :DublinCoreModel), :const_get,
                        s(:lvar, :klass_name))),
                    s(:send,
                      s(:lvar, :elems), :<<,
                      s(:send,
                        s(:lvar, :klass), :new,
                        s(:send,
                          s(:lvar, :parent), :__send__,
                          s(:dstr,
                            s(:str, "dc_"),
                            s(:begin,
                              s(:lvar, :name)))))),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :excepted),
                      s(:send,
                        s(:lvar, :parent), :__send__,
                        s(:dstr,
                          s(:str, "dc_"),
                          s(:begin,
                            s(:lvar, :name)),
                          s(:str, "_elements")))))))),
            s(:or_asgn,
              s(:lvasgn, :targets),
              s(:block,
                s(:send,
                  s(:lvar, :parents), :collect),
                s(:args,
                  s(:arg, :parent_readers)),
                s(:send,
                  s(:lvar, :parent_readers), :first))),
            s(:lvasgn, :feed_root,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Document), :new,
                  s(:lvar, :source)), :root)),
            s(:block,
              s(:send,
                s(:lvar, :targets), :each),
              s(:args,
                s(:arg, :target_xpath)),
              s(:begin,
                s(:lvasgn, :parent,
                  s(:send,
                    s(:send,
                      s(:lvar, :feed_root), :elements), :[],
                    s(:lvar, :target_xpath))),
                s(:block,
                  s(:send,
                    s(:lvar, :parent), :each_element),
                  s(:args,
                    s(:arg, :elem)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :elem), :namespace), :==,
                      s(:const, nil, :DC_URI)),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:lvar, :elem), :text),
                      s(:send,
                        s(:const, nil, :CGI), :unescapeHTML,
                        s(:send,
                          s(:send,
                            s(:const, nil, :DC_ELEMENTS), :[],
                            s(:send,
                              s(:send,
                                s(:lvar, :elem), :name), :intern)), :to_s))), nil))))))))))
